#
# PySNMP MIB module G3-AVAYA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/G3-AVAYA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibIdentifier, ModuleIdentity, TimeTicks, Counter32, Integer32, Gauge32, Unsigned32, ObjectIdentity, NotificationType, Bits, internet, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Counter32", "Integer32", "Gauge32", "Unsigned32", "ObjectIdentity", "NotificationType", "Bits", "internet", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
mgmt = MibIdentifier((1, 3, 6, 1, 2))
directory = MibIdentifier((1, 3, 6, 1, 1))
experimental = MibIdentifier((1, 3, 6, 1, 3))
private = MibIdentifier((1, 3, 6, 1, 4))
enterprises = MibIdentifier((1, 3, 6, 1, 4, 1))
avaya = MibIdentifier((1, 3, 6, 1, 4, 1, 6889))
mibs = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2))
definity = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8))
g3_mib = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1)).setLabel("g3-mib")
g3proxmib = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1))
def_products = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8)).setLabel("def-products")
g3_products = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1)).setLabel("g3-products")
definity_proxy = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 40)).setLabel("definity-proxy")
definity_g3 = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 41)).setLabel("definity-g3")
definity_ecs = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 42)).setLabel("definity-ecs")
definity_mcu = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 43)).setLabel("definity-mcu")
val_board = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 45)).setLabel("val-board")
clan_board = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 46)).setLabel("clan-board")
definity_one = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 47)).setLabel("definity-one")
definity_ip600 = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 48)).setLabel("definity-ip600")
avaya_s8700m = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 49)).setLabel("avaya-s8700m")
avaya_s8300 = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 50)).setLabel("avaya-s8300")
avaya_s8700i = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 51)).setLabel("avaya-s8700i")
avaya_s8500 = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 52)).setLabel("avaya-s8500")
crossfire_board = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 53)).setLabel("crossfire-board")
blade_server = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 55)).setLabel("blade-server")
avaya_s8400 = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 1, 8, 1, 56)).setLabel("avaya-s8400")
g3client = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1))
g3agent = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2))
g3trap = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3))
g3filter = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4))
g3connect = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1))
g3vintage = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2))
g3config = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3))
g3alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4))
g3errors = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5))
g3health = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6))
g3cabinet = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7))
g3cabtype = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 8))
g3cartype = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9))
g3port = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 10))
g3station = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 11))
g3statsta = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12))
g3trunkmem = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 13))
g3trunksta = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14))
g3datamod = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 15))
g3datamsta = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16))
g3timedate = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 18))
g3busytrk = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19))
g3busybrd = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20))
g3servalm = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 21))
g3msgalm = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 22))
g3ipevt = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 23))
g3platcmds = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 24))
g3ds1cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30))
g3extdev = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31))
g3trunkgrp = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32))
g3bulletin = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33))
g3ds1 = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 34))
g3atmpnc = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35))
g3pnchealth = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36))
g3siggroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37))
g3restart = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38))
g3fiberlink = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39))
g3routepattern = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40))
g3trunkcfg = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 41))
g3stationcfg = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 42))
g3atmcfg = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 43))
g3aca = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44))
g3atmtrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 45))
g3atmportpg1 = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46))
g3atmportpg2 = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47))
g3atmportpg3 = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48))
g3dmodule = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 49))
g3occsum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50))
g3attdgrp = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51))
g3attdpos = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52))
g3trunksum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53))
g3pktrunksum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54))
g3trunkwbsum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55))
g3pktrunkwbsum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56))
g3pktrunkout = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57))
g3pktrunklight = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58))
g3pnblock = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59))
g3pkpnblock = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60))
g3snblock = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61))
g3pksnblock = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62))
g3hunt = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63))
g3pkhunt = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64))
g3huntlist = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 65))
g3tonerec = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66))
g3pktonerec = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67))
g3tonerecsum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68))
g3pktonerecsum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69))
g3rpatcfg = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70))
g3rpat = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71))
g3pkrpat = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72))
g3secviolate = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73))
g3cbctrunk = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74))
g3deftime = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 75))
g3trunkout = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76))
g3trunklight = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77))
g3loadtotal = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78))
g3loadint = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79))
g3loadinc = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80))
g3loadout = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81))
g3loadtan = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82))
g3pkloadtotal = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83))
g3pkloadint = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84))
g3pkloadinc = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85))
g3pkloadout = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86))
g3pkloadtan = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87))
g3atmlatency = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88))
g3pkatmlatency = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89))
g3ipcodecsum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90))
g3pkipcodecsum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91))
g3ipregion = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 92))
g3ipdspsum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93))
g3pkipdspsum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94))
g3ipsignal = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95))
g3pkipsignal = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96))
g3annall = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97))
g3pkannall = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98))
g3anninteg = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99))
g3pkanninteg = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100))
g3nodename = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 101))
g3trkgrpmem = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 102))
g3ipinterface = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103))
g3gateway = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104))
g3mediacfg = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 105))
g3stamedia = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106))
g3stamgann = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 107))
g3ipserver = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108))
g3regipstat = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 109))
g3callratedata = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110))
g3callratevoice = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111))
g3callratesrv = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112))
g3callratemedia = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113))
g3callratetotal = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114))
g3clansocsum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115))
g3pkclansocsum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116))
g3clanether = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117))
g3clanppp = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118))
g3mmisum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119))
g3pkmmisum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120))
g3esmsum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121))
g3pkesmsum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122))
g3voicesum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123))
g3pkvoicesum = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124))
g3ipintlist = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 125))
g3stamedlist = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 126))
g3lsplist = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127))
g3eventhour = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128))
g3eventday = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129))
g3statregion = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130))
g3ipnetregion = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131))
g3statmedpro = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132))
g3ipunreg = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 133))
g3commlink = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 134))
g3statlink = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 135))
g3covpath = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136))
g3pkcovpath = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137))
g3principal = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138))
g3pkprincipal = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139))
g3esmain = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140))
g3esservers = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141))
g3esparms = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142))
g3mgrecrule = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 143))
g3busyrls = MibIdentifier((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 250))
g3connectState = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("off", 2), ("down", 3), ("init", 4), ("up", 5), ("idle", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3connectState.setStatus('mandatory')
if mibBuilder.loadTexts: g3connectState.setDescription("The current state of the switch connection; this object cat be set to 'off' to disable the connection and can be set to 'init' to re-initialize the connection. It can also be set to 'idle', if the g3connectType is 'dynamic', to put turn off the connection until a request is received.")
g3connectTimeUp = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3connectTimeUp.setStatus('mandatory')
if mibBuilder.loadTexts: g3connectTimeUp.setDescription('The elapsed time since the connection was established')
g3connectTimeUnused = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3connectTimeUnused.setStatus('mandatory')
if mibBuilder.loadTexts: g3connectTimeUnused.setDescription('The elapsed time since the connection was last used')
g3connectAttempts = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3connectAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: g3connectAttempts.setDescription('The number of connection attempts')
g3connectSuccess = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3connectSuccess.setStatus('mandatory')
if mibBuilder.loadTexts: g3connectSuccess.setDescription('The number of successful connections')
g3connectRequests = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3connectRequests.setStatus('mandatory')
if mibBuilder.loadTexts: g3connectRequests.setDescription('The number of switch data requests')
g3connectResponses = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3connectResponses.setStatus('mandatory')
if mibBuilder.loadTexts: g3connectResponses.setDescription('The number of switch data responses')
g3connectErrors = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3connectErrors.setStatus('mandatory')
if mibBuilder.loadTexts: g3connectErrors.setDescription('The number of switch connection errors')
g3connectQueued = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3connectQueued.setStatus('mandatory')
if mibBuilder.loadTexts: g3connectQueued.setDescription('The number switch requests in the input queue')
g3connectDelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3connectDelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3connectDelay.setDescription('The expected delay in retrieving switch data')
g3connectAlarmForward = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("failed", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3connectAlarmForward.setStatus('mandatory')
if mibBuilder.loadTexts: g3connectAlarmForward.setDescription('This object serves as a flag to indicate if a failure has occured in forwarding alarms received from the switch on to another destination.')
g3connectTimeReset = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3connectTimeReset.setStatus('mandatory')
if mibBuilder.loadTexts: g3connectTimeReset.setDescription('The elapsed time since the connection counters were last reset. Setting this object to zero will reset the counters.')
g3connectType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3connectType.setStatus('mandatory')
if mibBuilder.loadTexts: g3connectType.setDescription("The type of the switch connection; it is either 'static' which will stay up continuously or 'dynamic' which will be dropped after the connection is idle for a period of time.")
g3connectTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3connectTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: g3connectTimeout.setDescription("The number of idle minutes a 'dynamic' connection will stay connected before being dropped. For a 'static' connection this field is not applicable an contains a value of zero")
g3vintageTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageTage.setDescription('The number of timeticks since the vintage data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3vintageTintvl object allows the Network Manager to determine the validity of the vintage data in the cache and to control when the proxy agent extracts the vintage data from the switch.')
g3vintageTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3vintageTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageTintvl.setDescription('An object containing the interval for which the vintage data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for vintage objects is received by the agent it uses the g3vintageTage and g3vintageTintvl objects to determine whether it should refresh the cached vintage data. If g3vintageTstmp + g3vintageTintvl is less than the current value of the sysUpTime object then the agent refreshes the vintage data cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3vintageTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3vintageTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3vintageTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3vintageSpeArelease = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageSpeArelease.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageSpeArelease.setDescription('A DisplayString Object that contains the release number for SPE A.')
g3vintageSpeBrelease = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageSpeBrelease.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageSpeBrelease.setDescription('A DisplayString Object that contains the release number for SPE B.')
g3vintageCurMemory = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageCurMemory.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageCurMemory.setDescription('A DisplayString Object that contains the current memory configuration.')
g3vintageSpeAupID = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageSpeAupID.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageSpeAupID.setDescription('A DisplayString Object that contains the update identifier for SPE A.')
g3vintageSpeBupID = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageSpeBupID.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageSpeBupID.setDescription('A DisplayString Object that contains the update identifier for SPE B.')
g3vintageSpeAupState1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageSpeAupState1.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageSpeAupState1.setDescription('A DisplayString Object that contains the first part of the update state for SPE A.')
g3vintageSpeBupState1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 26))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageSpeBupState1.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageSpeBupState1.setDescription('A DisplayString Object that contains the first part of the update state for SPE B.')
g3vintageSpeAupState2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageSpeAupState2.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageSpeAupState2.setDescription('A DisplayString Object that contains the second part of the update state for SPE A.')
g3vintageSpeBupState2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageSpeBupState2.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageSpeBupState2.setDescription('A DisplayString Object that contains the second part of the update state for SPE B.')
g3vintageVSPacketBus = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageVSPacketBus.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageVSPacketBus.setDescription('A DisplayString Object that contains the a flag indicating whether packet bus is available on a G3vs system.')
g3vintageOfferCategory = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageOfferCategory.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageOfferCategory.setDescription("A DisplayString Object that contains the current Offer Category ('A', 'B', or '?').")
g3vintageATMPnc = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageATMPnc.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageATMPnc.setDescription("A DisplayString Object that contains the current ATM PNC Customer Option ('y', or 'n').")
g3vintageProductID = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageProductID.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageProductID.setDescription('A DisplayString Object that contains the Product Identification number for the Definity switch.')
g3vintageOSSNumber1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageOSSNumber1.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageOSSNumber1.setDescription('A DisplayString Object that contains the first OSS telephone number.')
g3vintageAbbAlmRep1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageAbbAlmRep1.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageAbbAlmRep1.setDescription("A DisplayString Object that contains the Abbreviated Alarm Report for the first OSS Number ('y' or 'n').")
g3vintageOSSNumber2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageOSSNumber2.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageOSSNumber2.setDescription('A DisplayString Object that contains the second OSS telephone number.')
g3vintageAbbAlmRep2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageAbbAlmRep2.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageAbbAlmRep2.setDescription("A DisplayString Object that contains the Abbreviated Alarm Report for the second OSS Number ('y' or 'n').")
g3vintageAOActivate = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageAOActivate.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageAOActivate.setDescription("A DisplayString Object that contains Alarm Origination Activation status ('y' or 'n').")
g3vintageCANotify = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageCANotify.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageCANotify.setDescription("A DisplayString Object that contains Cleared Alarm Notification status ('y' or 'n').")
g3vintageResNotify = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageResNotify.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageResNotify.setDescription("A DisplayString Object that contains Restart Notification status ('y' or 'n').")
g3vintagePbxID = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintagePbxID.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintagePbxID.setDescription('An INTEGER Object containing the Local Node Number for pre R11')
g3vintageACAFlag = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageACAFlag.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageACAFlag.setDescription("A DisplayString Object that contains the current ACA Enabled Option ('y', or 'n').")
g3vintageIPAddress1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageIPAddress1.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageIPAddress1.setDescription('An object that contains the first octet of IP address')
g3vintageIPAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageIPAddress2.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageIPAddress2.setDescription('An object that contains the second octet of IP address')
g3vintageIPAddress3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageIPAddress3.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageIPAddress3.setDescription('An object that contains the third octet of IP address')
g3vintageIPAddress4 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageIPAddress4.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageIPAddress4.setDescription('An object that contains the fourth octet of IP address')
g3vintagePortNetSupport = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintagePortNetSupport.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintagePortNetSupport.setDescription('An object that contains')
g3vintageLocalSpareProc = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageLocalSpareProc.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageLocalSpareProc.setDescription('An object that contains')
g3vintagePlatform = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintagePlatform.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintagePlatform.setDescription('An object that contains')
g3vintageLocalNodeNbr = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageLocalNodeNbr.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageLocalNodeNbr.setDescription('An INTEGER Object containing the Local Node Number on R11 and beyond')
g3vintageIPStaReg = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageIPStaReg.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageIPStaReg.setDescription('An object that contains the number of current registered IP stations on the media server.')
g3vintageIPStaAvail = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageIPStaAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageIPStaAvail.setDescription('An object that contains the number of concurrent IP stations still available on the media server.')
g3vintageIPStaLimit = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageIPStaLimit.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageIPStaLimit.setDescription('An object that contains the total system limit of concurrent IP stations on the media server.')
g3vintageIPAttdReg = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageIPAttdReg.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageIPAttdReg.setDescription('An object that contains the number of current registered IP attendant consoles on the media server.')
g3vintageIPAttdAvail = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageIPAttdAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageIPAttdAvail.setDescription('An object that contains the number of concurrent IP attendant consoles still available on the media server.')
g3vintageIPAttdLimit = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageIPAttdLimit.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageIPAttdLimit.setDescription('An object that contains the total system limit of concurrent IP attendant consoles on the media server.')
g3vintageRemoteOffReg = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageRemoteOffReg.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageRemoteOffReg.setDescription('An object that contains the number of current registered remote office stations on the media server.')
g3vintageRemoteOffAvail = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageRemoteOffAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageRemoteOffAvail.setDescription('An object that contains the number of concurrent remote office stations still available on the media server.')
g3vintageRemoteOffLimit = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 2, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3vintageRemoteOffLimit.setStatus('mandatory')
if mibBuilder.loadTexts: g3vintageRemoteOffLimit.setDescription('An object that contains the total system limit of concurrent remote office stations on the media server.')
g3configTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3configTage.setDescription('The number of timeticks since the configuration data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3configTintvl object allows the Network Manager to determine the validity of the configuration data in the cache and to control when the proxy agent extracts the configuration data from the switch.')
g3configTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3configTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3configTintvl.setDescription('An object containing the interval for which the configuration data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for configuration objects is received by the agent it uses the g3configTage and g3configTintvl objects to determine whether it should refresh the cached configTable. If g3configTstmp + g3configTintvl is less than the current value of the sysUpTime object then the agent refreshes the configTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3configTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3configTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3configTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3configTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3configTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3configTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3configTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3configTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6), )
if mibBuilder.loadTexts: g3configTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3configTable.setDescription('A list of g3config entries.')
g3configEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3configBoardNum"), (0, "G3-AVAYA-MIB", "g3configIndex"))
if mibBuilder.loadTexts: g3configEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3configEntry.setDescription('A g3config entry containing objects of the g3config information sent by the switch.')
g3configBoardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configBoardNum.setStatus('mandatory')
if mibBuilder.loadTexts: g3configBoardNum.setDescription('A DisplayString Object that uniquely identifies a board based on its location in the system. The syntax for the Board Number is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3configIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configIndex.setStatus('mandatory')
if mibBuilder.loadTexts: g3configIndex.setDescription('An INTEGER object containing an index numbering the config entry for the board specified in BoardNum. This object along with BoardNum will serve as the instance identifier for boardEntry.')
g3configBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: g3configBoardType.setDescription('A DisplayString Object that contains a text description of the type of board.')
g3configCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configCode.setStatus('mandatory')
if mibBuilder.loadTexts: g3configCode.setDescription('A DisplayString Object that contains the code that defines the type of board.')
g3configSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configSuffix.setStatus('mandatory')
if mibBuilder.loadTexts: g3configSuffix.setDescription('A DisplayString Object that contains the suffix to the code (object configCode) that defines the type of board.')
g3configVintage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configVintage.setStatus('mandatory')
if mibBuilder.loadTexts: g3configVintage.setDescription('An DisplayString Object that contains the vintage of the board.')
g3configPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort1.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort1.setDescription('A DisplayString Object that specifies the assignment of the port. A string representing an integer identical to the port number indicates that the port is assigned. The string (u) indicates that the port is unassigned. The string (t) indicates that the port is assigned via the TTI feature. A null string indicates that the port does not exist on that board.')
g3configPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort2.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort2.setDescription('See DESCRIPTION of configPort1.')
g3configPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort3.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort3.setDescription('See DESCRIPTION of configPort1.')
g3configPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort4.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort4.setDescription('See DESCRIPTION of configPort1.')
g3configPort5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort5.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort5.setDescription('See DESCRIPTION of configPort1.')
g3configPort6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort6.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort6.setDescription('See DESCRIPTION of configPort1.')
g3configPort7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort7.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort7.setDescription('See DESCRIPTION of configPort1.')
g3configPort8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort8.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort8.setDescription('See DESCRIPTION of configPort1.')
g3configPort9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort9.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort9.setDescription('See DESCRIPTION of configPort1.')
g3configPort10 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort10.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort10.setDescription('See DESCRIPTION of configPort1.')
g3configPort11 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort11.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort11.setDescription('See DESCRIPTION of configPort1.')
g3configPort12 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort12.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort12.setDescription('See DESCRIPTION of configPort1.')
g3configPort13 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort13.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort13.setDescription('See DESCRIPTION of configPort1.')
g3configPort14 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort14.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort14.setDescription('See DESCRIPTION of configPort1.')
g3configPort15 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort15.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort15.setDescription('See DESCRIPTION of configPort1.')
g3configPort16 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort16.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort16.setDescription('See DESCRIPTION of configPort1.')
g3configPort17 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort17.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort17.setDescription('See DESCRIPTION of configPort1.')
g3configPort18 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort18.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort18.setDescription('See DESCRIPTION of configPort1.')
g3configPort19 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort19.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort19.setDescription('See DESCRIPTION of configPort1.')
g3configPort20 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort20.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort20.setDescription('See DESCRIPTION of configPort1.')
g3configPort21 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort21.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort21.setDescription('See DESCRIPTION of configPort1.')
g3configPort22 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort22.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort22.setDescription('See DESCRIPTION of configPort1.')
g3configPort23 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort23.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort23.setDescription('See DESCRIPTION of configPort1.')
g3configPort24 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort24.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort24.setDescription('See DESCRIPTION of configPort1.')
g3configPort25 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort25.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort25.setDescription('See DESCRIPTION of configPort1.')
g3configPort26 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort26.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort26.setDescription('See DESCRIPTION of configPort1.')
g3configPort27 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort27.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort27.setDescription('See DESCRIPTION of configPort1.')
g3configPort28 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort28.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort28.setDescription('See DESCRIPTION of configPort1.')
g3configPort29 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort29.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort29.setDescription('See DESCRIPTION of configPort1.')
g3configPort30 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort30.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort30.setDescription('See DESCRIPTION of configPort1.')
g3configPort31 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort31.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort31.setDescription('See DESCRIPTION of configPort1.')
g3configPort32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 3, 6, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3configPort32.setStatus('mandatory')
if mibBuilder.loadTexts: g3configPort32.setDescription('See DESCRIPTION of configPort1.')
g3alarmsTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsTage.setDescription('The number of timeticks since the alarm data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3alarmsTintvl object allows the Network Manager to determine the validity of the alarm data in the cache and to control when the proxy agent extracts the alarm data from the switch.')
g3alarmsTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3alarmsTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsTintvl.setDescription('An object containing the interval for which the alarm data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for alarm objects is received by the agent it uses the g3alarmsTage and g3alarmsTintvl objects to determine whether it should refresh the cached alarmsTable. If g3alarmsTstmp + g3alarmsTintvl is less than the current value of the sysUpTime object then the agent refreshes the alarmsTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3alarmsTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3alarmsTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3alarmsTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3alarmsTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3alarmsTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6), )
if mibBuilder.loadTexts: g3alarmsTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsTable.setDescription('A list of g3alarms entries.')
g3alarmsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3alarmsPort"), (0, "G3-AVAYA-MIB", "g3alarmsIndex"))
if mibBuilder.loadTexts: g3alarmsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsEntry.setDescription('A g3alarms entry containing objects of the g3alarms information sent by the switch.')
g3alarmsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsPort.setDescription('A DisplayString Object that uniquely identifies a port based on its location in the system. The syntax for the Port number is as follows: cabinet(01-44):carrier(A-E):slot(01-20):port(01-32). This object along with alIndex will serve as the instance identifier for alarmsEntry.')
g3alarmsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsIndex.setDescription('An INTEGER object containing an index numbering the alarm entry for the port specified in alarmsPort. This object along with alarmsPort will serve as the instance identifier for alarmsEntry.')
g3alarmsMaintName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsMaintName.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsMaintName.setDescription('A DisplayString Object containing the Maintenance Object Name.')
g3alarmsOnBrd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsOnBrd.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsOnBrd.setDescription('A DisplayString Object specifying whether or not the alarm indicates an on board fault.')
g3alarmsAltName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsAltName.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsAltName.setDescription('A DisplayString Object containing the alternate name of the alarmed object. Alternate names can consist of extension numbers, trunk group numbers or other identifying data.')
g3alarmsAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsAlarmType.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsAlarmType.setDescription('A DisplayString Object specifying the alarm type (or severity).')
g3alarmsSvcState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsSvcState.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsSvcState.setDescription('A DisplayString Object specifying the service state of the alarmed object. Service States can be IN or OUT {any others?}.')
g3alarmsAck = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsAck.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsAck.setDescription('A DisplayString Object indicating whether or not the alarm has been acknowledged by the alarm receiver.')
g3alarmsMonthAlrmd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsMonthAlrmd.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsMonthAlrmd.setDescription('A DisplayString Object containing the month the alarm was created.')
g3alarmsDayAlrmd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsDayAlrmd.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsDayAlrmd.setDescription('A DisplayString Object containing the day the alarm was created.')
g3alarmsHourAlrmd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsHourAlrmd.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsHourAlrmd.setDescription('A DisplayString Object containing the hour the alarm was created.')
g3alarmsMinAlrmd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsMinAlrmd.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsMinAlrmd.setDescription('A DisplayString Object containing the minute the alarm was created.')
g3alarmsMonthRslvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsMonthRslvd.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsMonthRslvd.setDescription('A DisplayString Object containing the month the alarm was resolved. This object will always contain the value (00) because this table only contains open alarms. This object is included in the table for future enhancements and for completeness.')
g3alarmsDayRslvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsDayRslvd.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsDayRslvd.setDescription('A DisplayString Object containing the day the alarm was resolved. This object will always contain the value (00) because this table only contains open alarms. This object is included in the table for future enhancements and for completeness.')
g3alarmsHourRslvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsHourRslvd.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsHourRslvd.setDescription('A DisplayString Object containing the hour the alarm was resolved. This object will always contain the value (00) because this table only contains open alarms. This object is included in the table for future enhancements and for completeness.')
g3alarmsMinRslvd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsMinRslvd.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsMinRslvd.setDescription('A DisplayString Object containing the minute the alarm was resolved. This object will always contain the value (00) because this table only contains open alarms. This object is included in the table for future enhancements and for completeness.')
g3alarmsAlarmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsAlarmNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsAlarmNumber.setDescription('A DisplayString Object containing the Alarm Number of the alarm. This is just a place holder for a field populated in alarm traps. Nothing is populated in this field.')
g3alarmsProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsProductID.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsProductID.setDescription('A DisplayString Object containing the Product ID of the alarm. This is just a place holder for a field populated in alarm traps. Nothing is populated in this field.')
g3alarmsAck2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 4, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3alarmsAck2.setStatus('mandatory')
if mibBuilder.loadTexts: g3alarmsAck2.setDescription('Another DisplayString Object indicating whether or not the alarm has been acknowledged.')
g3errorsTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsTage.setDescription('The number of timeticks since the error log was last extracted from the switch by the G3 Proxy Agent. This object along with the g3errorsTintvl object allows the Network Manager to determine the validity of the error log in the cache and to control when the proxy agent extracts the error log data from the switch.')
g3errorsTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3errorsTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsTintvl.setDescription('An object containing the interval for which the error data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for error objects is received by the agent it uses the g3errorsTage and g3errorsTintvl objects to determine whether it should refresh the cached errorsTable. If g3errorsTstmp + g3errorsTintvl is less than the current value of the sysUpTime object then the agent refreshes the errorsTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3errorsTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3errorsTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3errorsTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3errorsTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3errorsTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6), )
if mibBuilder.loadTexts: g3errorsTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsTable.setDescription('A list of g3errors entries.')
g3errorsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3errorsPort"), (0, "G3-AVAYA-MIB", "g3errorsIndex"))
if mibBuilder.loadTexts: g3errorsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsEntry.setDescription('A g3errors entry containing objects of the g3errors information sent by the switch.')
g3errorsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsPort.setDescription('A DisplayString Object that uniquely identifies a port based on its location in the system. The syntax for the Port Location is as follows: cabinet(01-44):carrier(A-E):slot(01-20):port(01-32). This object along with errorsIndex will serve as the instance identifier for errorsEntry.')
g3errorsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsIndex.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsIndex.setDescription('An INTEGER object containing an index numbering the error entry for the port specified in errorsPort. This object along with errorsPort will serve as the instance identifier for errorsEntry.')
g3errorsMaintName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsMaintName.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsMaintName.setDescription('A DisplayString Object containing the Maintenance Object Name.')
g3errorsAltName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsAltName.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsAltName.setDescription('A DisplayString Object containing the alternate name of the errored object. Alternate names can consist of extension numbers, trunk group numbers or other identifying data.')
g3errorsErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsErrType.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsErrType.setDescription('A DisplayString Object containing a specific error type numeric code used to determine the type of error.')
g3errorsAuxData = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsAuxData.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsAuxData.setDescription('A DisplayString Object containing an auxiliary numeric code used with the errType to troubleshoot the problem.')
g3errorsMonthFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsMonthFirst.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsMonthFirst.setDescription('A DisplayString Object containing the month that the error first occurred.')
g3errorsDayFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsDayFirst.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsDayFirst.setDescription('A DisplayString Object containing the day that the error first occurred.')
g3errorsHourFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsHourFirst.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsHourFirst.setDescription('A DisplayString Object containing the hour that the error first occurred.')
g3errorsMinFirst = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsMinFirst.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsMinFirst.setDescription('A DisplayString Object containing the minute that the error first occurred.')
g3errorsMonthLast = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsMonthLast.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsMonthLast.setDescription('A DisplayString Object containing the month that the error last occurred.')
g3errorsDayLast = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsDayLast.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsDayLast.setDescription('A DisplayString Object containing the day that the error last occurred.')
g3errorsHourLast = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsHourLast.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsHourLast.setDescription('A DisplayString Object containing the hour that the error last occurred.')
g3errorsMinLast = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsMinLast.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsMinLast.setDescription('A DisplayString Object containing the minute that the error last occurred.')
g3errorsErrCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsErrCnt.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsErrCnt.setDescription('A DisplayString Object containing a numeric count of the occurrences of the error.')
g3errorsErrRt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsErrRt.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsErrRt.setDescription('A DisplayString Object containing the error rate occurrences of the error.')
g3errorsRtperHr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsRtperHr.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsRtperHr.setDescription('A DisplayString Object containing the error rate per hour.')
g3errorsAlSt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsAlSt.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsAlSt.setDescription('A DisplayString Object containing the alarm state of the error.')
g3errorsAck = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 5, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3errorsAck.setStatus('mandatory')
if mibBuilder.loadTexts: g3errorsAck.setDescription('A DisplayString Object indicating whether or not the alarm has been acknowledged by the alarm receiver.')
g3healthTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthTage.setDescription('The number of timeticks since the health data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3healthTintvl object allows the Network Manager to determine the validity of the health data in the cache and to control when the proxy agent extracts the health data from the switch.')
g3healthTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3healthTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthTintvl.setDescription('An object containing the interval for which the health data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for health objects is received by the agent it uses the g3healthTage and g3healthTintvl objects to determine whether it should refresh the cached healthTable. If g3healthTstmp + g3healthTintvl is less than the current value of the sysUpTime object then the agent refreshes the healthTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3healthTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3healthTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3healthTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3healthMajor = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthMajor.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthMajor.setDescription('A Gauge object containing the number of logged major alarms.')
g3healthMinor = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthMinor.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthMinor.setDescription('A Gauge object containing the number of logged minor alarms.')
g3healthWarning = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthWarning.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthWarning.setDescription('A Gauge object containing the number of logged warnings.')
g3healthTrkBusy = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthTrkBusy.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthTrkBusy.setDescription('A Gauge object containing the number of trunks busied out.')
g3healthStnBusy = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthStnBusy.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthStnBusy.setDescription('A Gauge object containing the number of stations busied out.')
g3healthOthBusy = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthOthBusy.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthOthBusy.setDescription('A Gauge object containing the number of objects busied out except trunks and stations.')
g3healthStaticOcc = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthStaticOcc.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthStaticOcc.setDescription('A Gauge object containing the proportion of the CPU which is currently dedicated to high priority items (e.g. the operating system). This percentage is rounded to the nearest integer, therefore a percentage of 0 means that the occupancy is less than one half of a percent (e.g. an occupancy of 89.6% would be displayed as 90%).')
g3healthCallpOcc = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCallpOcc.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCallpOcc.setDescription('A Gauge object containing the proportion of the CPU which is currently dedicated to call processing. This occupancy has priority over SM and IDLE occupancy categories and if needed, will take processor time away from these occupancy categories. This percentage is rounded to the nearest integer, therefore a percentage of 0 means that the occupancy is less than one half of a percent (e.g. an occupancy of 89.6% would be displayed as 90%).')
g3healthSysMgmtOcc = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthSysMgmtOcc.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthSysMgmtOcc.setDescription('A Gauge object containing the proportion of the CPU which is currently dedicated to system management or periodic and scheduled maintenance. Therefore, if there is a large amount of periodic or scheduled maintenance testing being performed, this occupancy percentage can be high without affecting service. This percentage is rounded to the nearest integer, therefore a percentage of 0 means that the occupancy is less than one half of a percent (e.g. an occupancy of 89.6% would be displayed as 90%).')
g3healthIdleOcc = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthIdleOcc.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthIdleOcc.setDescription('A Gauge object containing the proportion of the CPU which is currently available for use. This percentage is rounded to the nearest integer, therefore a percentage of 0 means that the occupancy is less than one half of a percent (e.g. an occupancy of 89.6% would be displayed as 90%).')
g3healthActiveSPE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthActiveSPE.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthActiveSPE.setDescription('A DisplayString Object containing the active SPE (A or B) followed by the interchange mode (auto or lock).')
g3healthActivePNC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthActivePNC.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthActivePNC.setDescription('A DisplayString Object containing the active PNC (A-PNC or B-PNC) followed by the interchange mode (auto or lock).')
g3healthDupSPE = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthDupSPE.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthDupSPE.setDescription('A DisplayString Object containing the duplication status of the SPE (y or n).')
g3healthDupPNC = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthDupPNC.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthDupPNC.setDescription('A DisplayString Object containing the duplication status of the PNC (y or n).')
g3healthPower = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPower.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPower.setDescription('A DisplayString Object containing the power source for the SPE (commercial or backup).')
g3healthTimeSource = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthTimeSource.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthTimeSource.setDescription('A DisplayString Object containing the time source for the SPE (external, internal, primary, secondary, or local).')
g3healthLogins = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthLogins.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthLogins.setDescription('A Gauge object containing the number of active logins.')
g3healthCab1to151 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to151.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to151.setDescription('An INTEGER Object containing the number of the cabinet for which health information is being display (first 15)')
g3healthCab1to152 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to152.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to152.setDescription('See DESCRIPTION of g3healthCab1to151.')
g3healthCab1to153 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to153.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to153.setDescription('See DESCRIPTION of g3healthCab1to151.')
g3healthCab1to154 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to154.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to154.setDescription('See DESCRIPTION of g3healthCab1to151.')
g3healthCab1to155 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to155.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to155.setDescription('See DESCRIPTION of g3healthCab1to151.')
g3healthCab1to156 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to156.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to156.setDescription('See DESCRIPTION of g3healthCab1to151.')
g3healthCab1to157 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to157.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to157.setDescription('See DESCRIPTION of g3healthCab1to151.')
g3healthCab1to158 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to158.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to158.setDescription('See DESCRIPTION of g3healthCab1to151.')
g3healthCab1to159 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to159.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to159.setDescription('See DESCRIPTION of g3healthCab1to151.')
g3healthCab1to1510 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to1510.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to1510.setDescription('See DESCRIPTION of g3healthCab1to151.')
g3healthCab1to1511 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to1511.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to1511.setDescription('See DESCRIPTION of g3healthCab1to151.')
g3healthCab1to1512 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to1512.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to1512.setDescription('See DESCRIPTION of g3healthCab1to151.')
g3healthCab1to1513 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to1513.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to1513.setDescription('See DESCRIPTION of g3healthCab1to151.')
g3healthCab1to1514 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to1514.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to1514.setDescription('See DESCRIPTION of g3healthCab1to151.')
g3healthCab1to1515 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab1to1515.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab1to1515.setDescription('See DESCRIPTION of g3healthCab1to151.')
g3healthPncStat1to151 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to151.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to151.setDescription('A DisplayString Object containing the status of the PNC that is associated with the previous cabinet (CabX) field (first 15)')
g3healthPncStat1to152 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to152.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to152.setDescription('See DESCRIPTION of g3healthPncStat1to151.')
g3healthPncStat1to153 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to153.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to153.setDescription('See DESCRIPTION of g3healthPncStat1to151.')
g3healthPncStat1to154 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to154.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to154.setDescription('See DESCRIPTION of g3healthPncStat1to151.')
g3healthPncStat1to155 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to155.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to155.setDescription('See DESCRIPTION of g3healthPncStat1to151.')
g3healthPncStat1to156 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to156.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to156.setDescription('See DESCRIPTION of g3healthPncStat1to151.')
g3healthPncStat1to157 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to157.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to157.setDescription('See DESCRIPTION of g3healthPncStat1to151.')
g3healthPncStat1to158 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to158.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to158.setDescription('See DESCRIPTION of g3healthPncStat1to151.')
g3healthPncStat1to159 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to159.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to159.setDescription('See DESCRIPTION of g3healthPncStat1to151.')
g3healthPncStat1to1510 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to1510.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to1510.setDescription('See DESCRIPTION of g3healthPncStat1to151.')
g3healthPncStat1to1511 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to1511.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to1511.setDescription('See DESCRIPTION of g3healthPncStat1to151.')
g3healthPncStat1to1512 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to1512.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to1512.setDescription('See DESCRIPTION of g3healthPncStat1to151.')
g3healthPncStat1to1513 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to1513.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to1513.setDescription('See DESCRIPTION of g3healthPncStat1to151.')
g3healthPncStat1to1514 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to1514.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to1514.setDescription('See DESCRIPTION of g3healthPncStat1to151.')
g3healthPncStat1to1515 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat1to1515.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat1to1515.setDescription('See DESCRIPTION of g3healthPncStat1to151.')
g3healthCab16to3017 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3017.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3017.setDescription('An INTEGER Object containing the number of the cabinet for which health information is being display')
g3healthCab16to3018 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3018.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3018.setDescription('See DESCRIPTION of g3healthCab16to3017.')
g3healthCab16to3019 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3019.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3019.setDescription('See DESCRIPTION of g3healthCab16to3017.')
g3healthCab16to3020 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3020.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3020.setDescription('See DESCRIPTION of g3healthCab16to3017.')
g3healthCab16to3021 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3021.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3021.setDescription('See DESCRIPTION of g3healthCab16to3017.')
g3healthCab16to3022 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3022.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3022.setDescription('See DESCRIPTION of g3healthCab16to3017.')
g3healthCab16to3023 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3023.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3023.setDescription('See DESCRIPTION of g3healthCab16to3017.')
g3healthCab16to3024 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3024.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3024.setDescription('See DESCRIPTION of g3healthCab16to3017.')
g3healthCab16to3025 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3025.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3025.setDescription('See DESCRIPTION of g3healthCab16to3017.')
g3healthCab16to3026 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3026.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3026.setDescription('See DESCRIPTION of g3healthCab16to3017.')
g3healthCab16to3027 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3027.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3027.setDescription('See DESCRIPTION of g3healthCab16to3017.')
g3healthCab16to3028 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3028.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3028.setDescription('See DESCRIPTION of g3healthCab16to3017.')
g3healthCab16to3029 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3029.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3029.setDescription('See DESCRIPTION of g3healthCab16to3017.')
g3healthCab16to3030 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3030.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3030.setDescription('See DESCRIPTION of g3healthCab16to3017.')
g3healthCab16to3031 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab16to3031.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab16to3031.setDescription('See DESCRIPTION of g3healthCab16to3017.')
g3healthPncStat16to3017 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3017.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3017.setDescription('A DisplayString Object containing the status of the PNC that is associated with the previous cabinet (CabX) field')
g3healthPncStat16to3018 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3018.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3018.setDescription('See DESCRIPTION of g3healthPncStat16to3017.')
g3healthPncStat16to3019 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3019.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3019.setDescription('See DESCRIPTION of g3healthPncStat16to3017.')
g3healthPncStat16to3020 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3020.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3020.setDescription('See DESCRIPTION of g3healthPncStat16to3017.')
g3healthPncStat16to3021 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 71), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3021.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3021.setDescription('See DESCRIPTION of g3healthPncStat16to3017.')
g3healthPncStat16to3022 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 72), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3022.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3022.setDescription('See DESCRIPTION of g3healthPncStat16to3017.')
g3healthPncStat16to3023 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 73), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3023.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3023.setDescription('See DESCRIPTION of g3healthPncStat16to3017.')
g3healthPncStat16to3024 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3024.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3024.setDescription('See DESCRIPTION of g3healthPncStat16to3017.')
g3healthPncStat16to3025 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3025.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3025.setDescription('See DESCRIPTION of g3healthPncStat16to3017.')
g3healthPncStat16to3026 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 76), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3026.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3026.setDescription('See DESCRIPTION of g3healthPncStat16to3017.')
g3healthPncStat16to3027 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 77), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3027.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3027.setDescription('See DESCRIPTION of g3healthPncStat16to3017.')
g3healthPncStat16to3028 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3028.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3028.setDescription('See DESCRIPTION of g3healthPncStat16to3017.')
g3healthPncStat16to3029 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3029.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3029.setDescription('See DESCRIPTION of g3healthPncStat16to3017.')
g3healthPncStat16to3030 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3030.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3030.setDescription('See DESCRIPTION of g3healthPncStat16to3017.')
g3healthPncStat16to3031 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 81), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat16to3031.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat16to3031.setDescription('See DESCRIPTION of g3healthPncStat16to3017.')
g3healthCab31to4417 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab31to4417.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab31to4417.setDescription('An INTEGER Object containing the number of the cabinet for which health information is being display')
g3healthCab31to4418 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab31to4418.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab31to4418.setDescription('See DESCRIPTION of g3healthCab31to4417.')
g3healthCab31to4419 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab31to4419.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab31to4419.setDescription('See DESCRIPTION of g3healthCab31to4417.')
g3healthCab31to4420 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab31to4420.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab31to4420.setDescription('See DESCRIPTION of g3healthCab31to4417.')
g3healthCab31to4421 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab31to4421.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab31to4421.setDescription('See DESCRIPTION of g3healthCab31to4417.')
g3healthCab31to4422 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab31to4422.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab31to4422.setDescription('See DESCRIPTION of g3healthCab31to4417.')
g3healthCab31to4423 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab31to4423.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab31to4423.setDescription('See DESCRIPTION of g3healthCab31to4417.')
g3healthCab31to4424 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab31to4424.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab31to4424.setDescription('See DESCRIPTION of g3healthCab31to4417.')
g3healthCab31to4425 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab31to4425.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab31to4425.setDescription('See DESCRIPTION of g3healthCab31to4417.')
g3healthCab31to4426 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab31to4426.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab31to4426.setDescription('See DESCRIPTION of g3healthCab31to4417.')
g3healthCab31to4427 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab31to4427.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab31to4427.setDescription('See DESCRIPTION of g3healthCab31to4417.')
g3healthCab31to4428 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab31to4428.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab31to4428.setDescription('See DESCRIPTION of g3healthCab31to4417.')
g3healthCab31to4429 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab31to4429.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab31to4429.setDescription('See DESCRIPTION of g3healthCab31to4417.')
g3healthCab31to4430 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthCab31to4430.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthCab31to4430.setDescription('See DESCRIPTION of g3healthCab31to4417.')
g3healthPncStat31to4417 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 96), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat31to4417.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat31to4417.setDescription('A DisplayString Object containing the status of the PNC that is associated with the previous cabinet (CabX) field')
g3healthPncStat31to4418 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 97), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat31to4418.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat31to4418.setDescription('See DESCRIPTION of g3healthPncStat31to4417.')
g3healthPncStat31to4419 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 98), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat31to4419.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat31to4419.setDescription('See DESCRIPTION of g3healthPncStat31to4417.')
g3healthPncStat31to4420 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 99), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat31to4420.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat31to4420.setDescription('See DESCRIPTION of g3healthPncStat31to4417.')
g3healthPncStat31to4421 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat31to4421.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat31to4421.setDescription('See DESCRIPTION of g3healthPncStat31to4417.')
g3healthPncStat31to4422 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat31to4422.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat31to4422.setDescription('See DESCRIPTION of g3healthPncStat31to4417.')
g3healthPncStat31to4423 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat31to4423.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat31to4423.setDescription('See DESCRIPTION of g3healthPncStat31to4417.')
g3healthPncStat31to4424 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat31to4424.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat31to4424.setDescription('See DESCRIPTION of g3healthPncStat31to4417.')
g3healthPncStat31to4425 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 104), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat31to4425.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat31to4425.setDescription('See DESCRIPTION of g3healthPncStat31to4417.')
g3healthPncStat31to4426 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 105), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat31to4426.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat31to4426.setDescription('See DESCRIPTION of g3healthPncStat31to4417.')
g3healthPncStat31to4427 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 106), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat31to4427.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat31to4427.setDescription('See DESCRIPTION of g3healthPncStat31to4417.')
g3healthPncStat31to4428 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 107), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat31to4428.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat31to4428.setDescription('See DESCRIPTION of g3healthPncStat31to4417.')
g3healthPncStat31to4429 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 108), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat31to4429.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat31to4429.setDescription('See DESCRIPTION of g3healthPncStat31to4417.')
g3healthPncStat31to4430 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 6, 109), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3healthPncStat31to4430.setStatus('mandatory')
if mibBuilder.loadTexts: g3healthPncStat31to4430.setDescription('See DESCRIPTION of g3healthPncStat31to4417.')
g3cabinetTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetTage.setDescription('The number of timeticks since the cabinet data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3cabinetTintvl object allows the Network Manager to determine the validity of the error log in the cache and to control when the proxy agent extracts the cabinet data from the switch.')
g3cabinetTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3cabinetTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetTintvl.setDescription('An object containing the interval for which the cabinet data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for cabinet objects is received by the agent it uses the g3cabinetTage and g3cabinetTintvl objects to determine whether it should refresh the cached cabinetTable. If g3cabinetTstmp + g3cabinetTintvl is less than the current value of the sysUpTime object then the agent refreshes the cabinetTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3cabinetTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3cabinetTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3cabinetTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3cabinetTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3cabinetTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6), )
if mibBuilder.loadTexts: g3cabinetTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetTable.setDescription('A list of g3cabinet entries.')
g3cabinetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3cabinetNum"))
if mibBuilder.loadTexts: g3cabinetEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetEntry.setDescription('A g3cabinet entry containing objects of the g3cabinet information sent by the switch.')
g3cabinetNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetNum.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetNum.setDescription('An INTEGER Object that uniquely identifies a cabinet in the system.')
g3cabinetType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetType.setDescription('A DisplayString Object containing the type of cabinet (PPN or EPN).')
g3cabinetLayout = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetLayout.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetLayout.setDescription('A DisplayString Object containing the cabinet layout.')
g3cabinetRoom = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetRoom.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetRoom.setDescription('A DisplayString Object containing the cabinet room number.')
g3cabinetFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetFloor.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetFloor.setDescription('A DisplayString Object containing the cabinet floor number.')
g3cabinetBuilding = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetBuilding.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetBuilding.setDescription('A DisplayString Object containing the cabinet building name.')
g3cabinetCarAType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetCarAType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetCarAType.setDescription('A DisplayString Object containing the type of carrier A.')
g3cabinetCarAPNN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetCarAPNN.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetCarAPNN.setDescription('An INTEGER Object containing the Port Network Number in carrier A.')
g3cabinetCarBType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetCarBType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetCarBType.setDescription('A DisplayString Object containing the type of carrier B.')
g3cabinetCarBPNN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetCarBPNN.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetCarBPNN.setDescription('An INTEGER Object containing the Port Network Number in carrier B.')
g3cabinetCarCType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetCarCType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetCarCType.setDescription('A DisplayString Object containing the type of carrier C.')
g3cabinetCarCPNN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetCarCPNN.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetCarCPNN.setDescription('An INTEGER Object containing the Port Network Number in carrier C.')
g3cabinetCarDType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetCarDType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetCarDType.setDescription('A DisplayString Object containing the type of carrier D.')
g3cabinetCarDPNN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetCarDPNN.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetCarDPNN.setDescription('An INTEGER Object containing the Port Network Number in carrier D.')
g3cabinetCarEType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetCarEType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetCarEType.setDescription('A DisplayString Object containing the type of carrier E.')
g3cabinetCarEPNN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetCarEPNN.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetCarEPNN.setDescription('An INTEGER Object containing the Port Network Number in carrier E.')
g3cabinetSREPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetSREPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetSREPN.setDescription('A DisplayString Object that states whether the EPN is a survivable remote EPN (y or n).')
g3cabinetSRProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetSRProductID.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetSRProductID.setDescription('A DisplayString Object containing the product ID of the survivable remote EPN (if the EPN is survivable remote).')
g3cabinetRack = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetRack.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetRack.setDescription('A DisplayString Object containing the rack-mount location.')
g3cabinetLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 7, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabinetLocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabinetLocation.setDescription('A DisplayString Object containing the network location of the cabinet.')
g3cabtypeTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabtypeTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabtypeTage.setDescription('The number of timeticks since the cabtype data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3cabtypeTintvl object allows the Network Manager to determine the validity of the cabtype data in the cache and to control when the proxy agent extracts the cabtype data from the switch.')
g3cabtypeTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3cabtypeTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabtypeTintvl.setDescription('An object containing the interval for which the cabtype data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for cabtype objects is received by the agent it uses the g3cabtypeTage and g3cabtypeTintvl objects to determine whether it should refresh the cached cabtype data. If g3cabtypeTstmp + g3cabtypeTintvl is less than the current value of the sysUpTime object then the agent refreshes the cabtype data cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3cabtypeTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabtypeTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabtypeTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3cabtypeTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3cabtypeTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabtypeTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3cabtypeCab1Type = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 8, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabtypeCab1Type.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabtypeCab1Type.setDescription('A DisplayString Object containing the type of cabinet 1.')
g3cabtypeCab2Type = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 8, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabtypeCab2Type.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabtypeCab2Type.setDescription('A DisplayString Object containing the type of cabinet 2.')
g3cabtypeCab3Type = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 8, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cabtypeCab3Type.setStatus('mandatory')
if mibBuilder.loadTexts: g3cabtypeCab3Type.setDescription('A DisplayString Object containing the type of cabinet 3.')
g3cartypeTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeTage.setDescription('The number of timeticks since the cartype data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3cartypeTintvl object allows the Network Manager to determine the validity of the cartype data in the cache and to control when the proxy agent extracts the cartype data from the switch.')
g3cartypeTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3cartypeTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeTintvl.setDescription('An object containing the interval for which the cartype data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for cartype objects is received by the agent it uses the g3cartypeTage and g3cartypeTintvl objects to determine whether it should refresh the cached cartype data. If g3cartypeTstmp + g3cartypeTintvl is less than the current value of the sysUpTime object then the agent refreshes the cartype data cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3cartypeTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3cartypeTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3cartypeTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3cartypeCab1CarAType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab1CarAType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab1CarAType.setDescription('A DisplayString Object containing the type of cabinet 1/carrier A.')
g3cartypeCab1CarBType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab1CarBType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab1CarBType.setDescription('A DisplayString Object containing the type of cabinet 1/carrier B.')
g3cartypeCab1CarCType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab1CarCType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab1CarCType.setDescription('A DisplayString Object containing the type of cabinet 1/carrier C.')
g3cartypeCab1CarDType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab1CarDType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab1CarDType.setDescription('A DisplayString Object containing the type of cabinet 1/carrier D.')
g3cartypeCab1CarEType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab1CarEType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab1CarEType.setDescription('A DisplayString Object containing the type of cabinet 1/carrier E.')
g3cartypeCab2CarAType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab2CarAType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab2CarAType.setDescription('A DisplayString Object containing the type of cabinet 2/carrier A.')
g3cartypeCab2CarBType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab2CarBType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab2CarBType.setDescription('A DisplayString Object containing the type of cabinet 2/carrier B.')
g3cartypeCab2CarCType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab2CarCType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab2CarCType.setDescription('A DisplayString Object containing the type of cabinet 2/carrier C.')
g3cartypeCab2CarDType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab2CarDType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab2CarDType.setDescription('A DisplayString Object containing the type of cabinet 2/carrier D.')
g3cartypeCab2CarEType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab2CarEType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab2CarEType.setDescription('A DisplayString Object containing the type of cabinet 2/carrier E.')
g3cartypeCab3CarAType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab3CarAType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab3CarAType.setDescription('A DisplayString Object containing the type of cabinet 3/carrier A.')
g3cartypeCab3CarBType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab3CarBType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab3CarBType.setDescription('A DisplayString Object containing the type of cabinet 3/carrier B.')
g3cartypeCab3CarCType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab3CarCType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab3CarCType.setDescription('A DisplayString Object containing the type of cabinet 3/carrier C.')
g3cartypeCab3CarDType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab3CarDType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab3CarDType.setDescription('A DisplayString Object containing the type of cabinet 3/carrier D.')
g3cartypeCab3CarEType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 9, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cartypeCab3CarEType.setStatus('mandatory')
if mibBuilder.loadTexts: g3cartypeCab3CarEType.setDescription('A DisplayString Object containing the type of cabinet 3/carrier E.')
g3portTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 10, 1), )
if mibBuilder.loadTexts: g3portTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3portTable.setDescription('A list of g3port entries.')
g3portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 10, 1, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3portNumber"))
if mibBuilder.loadTexts: g3portEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3portEntry.setDescription('A g3port entry containing objects of the g3port information sent by the switch.')
g3portNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 10, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3portNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3portNumber.setDescription('A DisplayString Object that uniquely identifies a port based on its location in the system. The syntax for the Port Location is as follows: cabinet(01-44):carrier(A-E):slot(01-20):port(01-32). This object will serve as the instance identifier for portEntry.')
g3portEquipType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3portEquipType.setStatus('mandatory')
if mibBuilder.loadTexts: g3portEquipType.setDescription('A DisplayString Object containing the equipment type for the port.')
g3portId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3portId.setStatus('mandatory')
if mibBuilder.loadTexts: g3portId.setDescription('A DisplayString Object containing the identifier associated with the equipment type.')
g3portEquipType2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 10, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3portEquipType2.setStatus('mandatory')
if mibBuilder.loadTexts: g3portEquipType2.setDescription('A DisplayString Object containing the equipment type for a second physical port.')
g3portId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 10, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3portId2.setStatus('mandatory')
if mibBuilder.loadTexts: g3portId2.setDescription('A DisplayString Object containing the identifier associated with the equipment type for a second physical port.')
g3stationTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 11, 1), )
if mibBuilder.loadTexts: g3stationTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationTable.setDescription('A list of g3station entries.')
g3stationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 11, 1, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3stationExtension"))
if mibBuilder.loadTexts: g3stationEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationEntry.setDescription('A g3station entry containing objects of the g3station information sent by the switch.')
g3stationExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 11, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationExtension.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationExtension.setDescription('A DisplayString Object that uniquely identifies an administered station.')
g3stationType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 11, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationType.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationType.setDescription('A DisplayString Object containing the station type.')
g3stationName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationName.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationName.setDescription('A DisplayString Object containing the name assigned to the station.')
g3stationBuilding = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 11, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationBuilding.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationBuilding.setDescription('A DisplayString Object containing the building location of the station.')
g3stationFloor = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 11, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationFloor.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationFloor.setDescription('A DisplayString Object containing the floor location of the station.')
g3stationRoom = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationRoom.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationRoom.setDescription('A DisplayString Object containing the room location of the station.')
g3stationCable = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 11, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationCable.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationCable.setDescription('A DisplayString Object containing the cable used by the station.')
g3stationJack = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 11, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationJack.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationJack.setDescription('A DisplayString Object containing the jack used by the station.')
g3stationDataExt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 11, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationDataExt.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationDataExt.setDescription('A Display String Object containing the extension of the data module attached to the station.')
g3stationDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 11, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationDataName.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationDataName.setDescription('A DisplayString Object containing the name assigned to the data module attached to the station.')
g3stationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 11, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationPort.setDescription('A DisplayString Object that uniquely identifies the station port based on its location in the system. The syntax for the Port Number is as follows: cabinet(1-22):carrier(A-E):slot(01-20).')
g3statstaTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1), )
if mibBuilder.loadTexts: g3statstaTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaTable.setDescription('A list of g3statsta entries.')
g3statstaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3statstaExtension"))
if mibBuilder.loadTexts: g3statstaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaEntry.setDescription('A g3statsta entry containing objects of the g3statsta information sent by the switch.')
g3statstaExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaExtension.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaExtension.setDescription('A DisplayString Object that uniquely identifies an administered station.')
g3statstaServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 22))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaServiceState.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaServiceState.setDescription('A DisplayString Object containing the service state of the station.')
g3statstaMaintBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaMaintBusy.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaMaintBusy.setDescription('A DisplayString Object that indicates whether the station has been busied for maintenance.')
g3statstaConnPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaConnPort1.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaConnPort1.setDescription('A DisplayString Object that contains the first port connected to the station.')
g3statstaConnPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaConnPort2.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaConnPort2.setDescription('A DisplayString Object that contains the second port connected to the station.')
g3statstaConnPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaConnPort3.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaConnPort3.setDescription('A DisplayString Object that contains the third port connected to the station.')
g3statstaConnPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaConnPort4.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaConnPort4.setDescription('A DisplayString Object that contains the fourth port connected to the station.')
g3statstaConnPort5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaConnPort5.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaConnPort5.setDescription('A DisplayString Object that contains the fifth port connected to the station.')
g3statstaConnPort6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaConnPort6.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaConnPort6.setDescription('A DisplayString Object that contains the sixth port connected to the station.')
g3statstaSACactive = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaSACactive.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaSACactive.setDescription('A DisplayString Object that indicates whether SAC has been activated for the station.')
g3statstaCFdestExt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaCFdestExt.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaCFdestExt.setDescription('A DisplayString Object that contains the CF Destination Extension for the station.')
g3statstaRingCutOff = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaRingCutOff.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaRingCutOff.setDescription('A DisplayString Object that indicates whether Ring Cut Off has been activated for the station.')
g3statstaSerialNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaSerialNbr.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaSerialNbr.setDescription('A DisplayString Object that contains the serial number for the station.')
g3statstaPartID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaPartID.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaPartID.setDescription('A DisplayString Object that contains the part id for the station.')
g3statstaSwitchPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaSwitchPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaSwitchPort.setDescription('A DisplayString Object that contains the switch port for the station.')
g3statstaSwitchIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaSwitchIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaSwitchIPAddr.setDescription('A DisplayString Object that contains the switch-end IP address for the station.')
g3statstaSwitchIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaSwitchIPPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaSwitchIPPort.setDescription('A DisplayString Object that contains the switch-end IP port nbr for the station.')
g3statstaSetIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaSetIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaSetIPAddr.setDescription('A DisplayString Object that contains the set-end IP address for the station.')
g3statstaSetIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 12, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statstaSetIPPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3statstaSetIPPort.setDescription('A DisplayString Object that contains the set-end IP port nbr for the station.')
g3trunkmemTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 13, 1), )
if mibBuilder.loadTexts: g3trunkmemTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkmemTable.setDescription('A list of g3trunkmem entries.')
g3trunkmemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 13, 1, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3trunkmemGroup"), (0, "G3-AVAYA-MIB", "g3trunkmemMember"))
if mibBuilder.loadTexts: g3trunkmemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkmemEntry.setDescription('A g3trunkmem entry containing objects of the g3trunkmem information sent by the switch.')
g3trunkmemGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkmemGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkmemGroup.setDescription('An INTEGER Object that uniquely identifies an administered trunk group.')
g3trunkmemMember = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 13, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkmemMember.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkmemMember.setDescription('An INTEGER Object that uniquely identifies a trunk group member.')
g3trunkmemName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 13, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkmemName.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkmemName.setDescription('A DisplayString Object containing the name assigned to the trunk group member.')
g3trunkmemType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 13, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkmemType.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkmemType.setDescription('A DisplayString Object containing the Type of the trunk group member.')
g3trunkmemSigGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 13, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkmemSigGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkmemSigGroup.setDescription('A DisplayString Object containing the Signaling Group assigned to the trunk group member.')
g3trunkmemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 13, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkmemPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkmemPort.setDescription('A DisplayString Object that uniquely identifies the trunk port based on its location in the system. The syntax for the Port Number is as follows: cabinet(1-22):carrier(A-E):slot(01-20).')
g3trunkstaTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1), )
if mibBuilder.loadTexts: g3trunkstaTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaTable.setDescription('A list of g3trunksta entries.')
g3trunkstaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3trunkstaTrunkGroup"), (0, "G3-AVAYA-MIB", "g3trunkstaMember"))
if mibBuilder.loadTexts: g3trunkstaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaEntry.setDescription('A g3trunksta entry containing objects of the g3trunksta information sent by the switch.')
g3trunkstaTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkstaTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaTrunkGroup.setDescription('An INTEGER Object that uniquely identifies an administered trunk group.')
g3trunkstaMember = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkstaMember.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaMember.setDescription('An INTEGER Object that uniquely identifies a trunk group member.')
g3trunkstaServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkstaServiceState.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaServiceState.setDescription('A DisplayString Object containing the service state of the trunk.')
g3trunkstaMaintBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkstaMaintBusy.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaMaintBusy.setDescription('A DisplayString Object that indicates whether the trunk has been busied for maintenance.')
g3trunkstaConnPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkstaConnPort1.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaConnPort1.setDescription('A DisplayString Object that contains the first port connected to the trunk.')
g3trunkstaConnPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkstaConnPort2.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaConnPort2.setDescription('A DisplayString Object that contains the second port connected to the trunk.')
g3trunkstaConnPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkstaConnPort3.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaConnPort3.setDescription('A DisplayString Object that contains the third port connected to the trunk.')
g3trunkstaConnPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkstaConnPort4.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaConnPort4.setDescription('A DisplayString Object that contains the fourth port connected to the trunk.')
g3trunkstaConnPort5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkstaConnPort5.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaConnPort5.setDescription('A DisplayString Object that contains the fifth port connected to the trunk.')
g3trunkstaConnPort6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkstaConnPort6.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaConnPort6.setDescription('A DisplayString Object that contains the sixth port connected to the trunk.')
g3trunkstaConnPort7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkstaConnPort7.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaConnPort7.setDescription('A DisplayString Object that contains the seventh port connected to the trunk.')
g3trunkstaConnPort8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkstaConnPort8.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaConnPort8.setDescription('A DisplayString Object that contains the eighth port connected to the trunk.')
g3trunkstaConnPort9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 14, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkstaConnPort9.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkstaConnPort9.setDescription('A DisplayString Object that contains the ninth port connected to the trunk.')
g3datamodTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 15, 1), )
if mibBuilder.loadTexts: g3datamodTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamodTable.setDescription('A list of g3datamod entries.')
g3datamodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 15, 1, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3datamodExtension"))
if mibBuilder.loadTexts: g3datamodEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamodEntry.setDescription('A g3datamod entry containing objects of the g3datamod information sent by the switch.')
g3datamodExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 15, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamodExtension.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamodExtension.setDescription('A DisplayString Object that uniquely identifies an administered data module.')
g3datamodType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 15, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamodType.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamodType.setDescription('A DisplayString Object containing the data module type.')
g3datamodName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 15, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamodName.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamodName.setDescription('A DisplayString Object containing the name assigned to the data module.')
g3datamstaTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1), )
if mibBuilder.loadTexts: g3datamstaTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaTable.setDescription('A list of g3datamsta entries.')
g3datamstaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3datamstaExtension"))
if mibBuilder.loadTexts: g3datamstaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaEntry.setDescription('A g3datamsta entry containing objects of the g3datamsta information sent by the switch.')
g3datamstaExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamstaExtension.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaExtension.setDescription('A DisplayString Object that uniquely identifies an administered data module.')
g3datamstaServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamstaServiceState.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaServiceState.setDescription('A DisplayString Object containing the service state of the data module.')
g3datamstaMaintBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamstaMaintBusy.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaMaintBusy.setDescription('A DisplayString Object that indicates whether the data module has been busied for maintenance.')
g3datamstaConnPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamstaConnPort1.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaConnPort1.setDescription('A DisplayString Object that contains the first port connected to the data module.')
g3datamstaConnPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamstaConnPort2.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaConnPort2.setDescription('A DisplayString Object that contains the second port connected to the data module.')
g3datamstaConnPort3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamstaConnPort3.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaConnPort3.setDescription('A DisplayString Object that contains the third port connected to the data module.')
g3datamstaConnPort4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamstaConnPort4.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaConnPort4.setDescription('A DisplayString Object that contains the fourth port connected to the data module.')
g3datamstaConnPort5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamstaConnPort5.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaConnPort5.setDescription('A DisplayString Object that contains the fifth port connected to the data module.')
g3datamstaConnPort6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamstaConnPort6.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaConnPort6.setDescription('A DisplayString Object that contains the sixth port connected to the data module.')
g3datamstaConnPort7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamstaConnPort7.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaConnPort7.setDescription('A DisplayString Object that contains the seventh port connected to the data module.')
g3datamstaConnPort8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamstaConnPort8.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaConnPort8.setDescription('A DisplayString Object that contains the eighth port connected to the data module.')
g3datamstaConnPort9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamstaConnPort9.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaConnPort9.setDescription('A DisplayString Object that contains the ninth port connected to the data module.')
g3datamstaCFdestExt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 16, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3datamstaCFdestExt.setStatus('mandatory')
if mibBuilder.loadTexts: g3datamstaCFdestExt.setDescription('A DisplayString Object that contains the CF Destination Extension for the data module.')
g3timedateDayOfMonth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3timedateDayOfMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3timedateDayOfMonth.setDescription('An INTEGER object containing the current system time Day of the Month (1-31).')
g3timedateMonth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 18, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3timedateMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3timedateMonth.setDescription("A DisplayString Object that contains the name of the Month ('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', or 'December').")
g3timedateYear = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 18, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3timedateYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3timedateYear.setDescription('An INTEGER object containing the current system time Year (0000-9999).')
g3timedateDayOfWeek = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 18, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3timedateDayOfWeek.setStatus('mandatory')
if mibBuilder.loadTexts: g3timedateDayOfWeek.setDescription("A DisplayString Object that contains the day of the week ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday').")
g3timedateHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 18, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3timedateHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3timedateHour.setDescription('An INTEGER object containing the current system time Hour (0-23).')
g3timedateMinute = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 18, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3timedateMinute.setStatus('mandatory')
if mibBuilder.loadTexts: g3timedateMinute.setDescription('An INTEGER object containing the current system time Minute (0-59).')
g3timedateSecond = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 18, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3timedateSecond.setStatus('mandatory')
if mibBuilder.loadTexts: g3timedateSecond.setDescription('An INTEGER object containing the current system time Second (0-59).')
g3timedateLastError1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 18, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3timedateLastError1.setStatus('mandatory')
if mibBuilder.loadTexts: g3timedateLastError1.setDescription('A DisplayString Object that contains the last error message encountered when attempting to set the system date/time.')
g3timedateLastError2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 18, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3timedateLastError2.setStatus('mandatory')
if mibBuilder.loadTexts: g3timedateLastError2.setDescription('See DESCRIPTION of g3timedateLastError1.')
g3timedateLastError3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 18, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3timedateLastError3.setStatus('mandatory')
if mibBuilder.loadTexts: g3timedateLastError3.setDescription('See DESCRIPTION of g3timedateLastError1.')
g3timedateLastError4 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 18, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3timedateLastError4.setStatus('mandatory')
if mibBuilder.loadTexts: g3timedateLastError4.setDescription('See DESCRIPTION of g3timedateLastError1.')
g3timedateLastError5 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 18, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3timedateLastError5.setStatus('mandatory')
if mibBuilder.loadTexts: g3timedateLastError5.setDescription('See DESCRIPTION of g3timedateLastError1.')
g3timedateLastError6 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 18, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3timedateLastError6.setStatus('mandatory')
if mibBuilder.loadTexts: g3timedateLastError6.setDescription('See DESCRIPTION of g3timedateLastError1.')
g3busytrkTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19, 1), )
if mibBuilder.loadTexts: g3busytrkTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3busytrkTable.setDescription('A list of g3busytrk entries.')
g3busytrkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19, 1, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3busytrkGroup"), (0, "G3-AVAYA-MIB", "g3busytrkMember"))
if mibBuilder.loadTexts: g3busytrkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3busytrkEntry.setDescription('A g3busytrk entry containing objects of the g3busytrk information sent by the switch.')
g3busytrkAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busytrkAction.setStatus('mandatory')
if mibBuilder.loadTexts: g3busytrkAction.setDescription("A DisplayString Object that contains the last action performed on the trunk group and trunk member ('busyout' or 'release').")
g3busytrkObject = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busytrkObject.setStatus('mandatory')
if mibBuilder.loadTexts: g3busytrkObject.setDescription("A DisplayString Object that contains the switch object 'trunk'.")
g3busytrkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busytrkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3busytrkGroup.setDescription("An INTEGER Object that uniquely identifies an administered trunk group on which a 'busyout' or 'release' operation was last performed.")
g3busytrkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busytrkMember.setStatus('mandatory')
if mibBuilder.loadTexts: g3busytrkMember.setDescription("An INTEGER Object that uniquely identifies an administered trunk member on which a 'busyout' or 'release' operation was last performed.")
g3busytrkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busytrkIndex.setStatus('mandatory')
if mibBuilder.loadTexts: g3busytrkIndex.setDescription("An INTEGER Object that identifies an index number for the trunk group and member number record (currently always set to '1').")
g3busytrkPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busytrkPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3busytrkPort.setDescription('A DisplayString Object that uniquely identifies a port based on its location in the system. The syntax for the Port Number is as follows: cabinet(01-44):carrier(A-E):slot(01-20):port(01-32).')
g3busytrkMaintName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busytrkMaintName.setStatus('mandatory')
if mibBuilder.loadTexts: g3busytrkMaintName.setDescription('A DisplayString Object containing the maintenance object name.')
g3busytrkAltName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busytrkAltName.setStatus('mandatory')
if mibBuilder.loadTexts: g3busytrkAltName.setDescription('A DisplayString Object containing the alternate name of the object.')
g3busytrkResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busytrkResult.setStatus('mandatory')
if mibBuilder.loadTexts: g3busytrkResult.setDescription('A DisplayString Object containing the result of the last busyout/release operation.')
g3busytrkErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busytrkErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: g3busytrkErrorCode.setDescription('A DisplayString Object containing the error code associated with the result of the last busyout/release operation.')
g3busytrkLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busytrkLastError.setStatus('mandatory')
if mibBuilder.loadTexts: g3busytrkLastError.setDescription('A DisplayString Object that contains the error message encountered on the last busyout/release operation. The string is blank if no command error was encountered on the last attempt.')
g3busytrkUDateStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 19, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busytrkUDateStr.setStatus('mandatory')
if mibBuilder.loadTexts: g3busytrkUDateStr.setDescription('A DisplayString Object that contains the UNIX time stamp when the result of the busyout/release operation was received.')
g3busybrdTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20, 1), )
if mibBuilder.loadTexts: g3busybrdTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3busybrdTable.setDescription('A list of g3busybrd entries.')
g3busybrdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20, 1, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3busybrdBoardVal"), (0, "G3-AVAYA-MIB", "g3busybrdPortVal"))
if mibBuilder.loadTexts: g3busybrdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3busybrdEntry.setDescription('A g3busybrd entry containing objects of the g3busybrd information sent by the switch.')
g3busybrdAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busybrdAction.setStatus('mandatory')
if mibBuilder.loadTexts: g3busybrdAction.setDescription("A DisplayString Object that contains the last action performed on the board or port on a board ('busyout' or 'release').")
g3busybrdObject = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busybrdObject.setStatus('mandatory')
if mibBuilder.loadTexts: g3busybrdObject.setDescription("A DisplayString Object that contains the switch object 'board'.")
g3busybrdBoardVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busybrdBoardVal.setStatus('mandatory')
if mibBuilder.loadTexts: g3busybrdBoardVal.setDescription("A DisplayString Object that uniquely identifies a board based on its location in the system which a 'busyout' or 'release' operation was last performed. The syntax for the Board Number is as follows: cabinet(01-44):carrier(A-E):slot(01-20).")
g3busybrdPortVal = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busybrdPortVal.setStatus('mandatory')
if mibBuilder.loadTexts: g3busybrdPortVal.setDescription("An INTEGER Object that uniquely identifies an administered port location on which a 'busyout' or 'release' operation was last performed.")
g3busybrdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busybrdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: g3busybrdIndex.setDescription("An INTEGER Object that identifies an index number for the board /port number record (currently always set to '1').")
g3busybrdPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busybrdPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3busybrdPort.setDescription('A DisplayString Object that uniquely identifies a port based on its location in the system. The syntax for the Port Number is as follows: cabinet(01-44):carrier(A-E):slot(01-20):port(01-32).')
g3busybrdMaintName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busybrdMaintName.setStatus('mandatory')
if mibBuilder.loadTexts: g3busybrdMaintName.setDescription('A DisplayString Object containing the maintenance object name.')
g3busybrdAltName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busybrdAltName.setStatus('mandatory')
if mibBuilder.loadTexts: g3busybrdAltName.setDescription('A DisplayString Object containing the alternate name of the object.')
g3busybrdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busybrdResult.setStatus('mandatory')
if mibBuilder.loadTexts: g3busybrdResult.setDescription('A DisplayString Object containing the result of the last busyout/release operation.')
g3busybrdErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busybrdErrorCode.setStatus('mandatory')
if mibBuilder.loadTexts: g3busybrdErrorCode.setDescription('A DisplayString Object containing the error code associated with the result of the last busyout/release operation.')
g3busybrdLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busybrdLastError.setStatus('mandatory')
if mibBuilder.loadTexts: g3busybrdLastError.setDescription('A DisplayString Object that contains the error message encountered on the last busyout/release operation. The string is blank if no command error was encountered on the last attempt.')
g3busybrdUDateStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 20, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3busybrdUDateStr.setStatus('mandatory')
if mibBuilder.loadTexts: g3busybrdUDateStr.setDescription('A DisplayString Object that contains the UNIX time stamp when the result of the busyout/release operation was received.')
g3servalmTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 21, 1), )
if mibBuilder.loadTexts: g3servalmTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3servalmTable.setDescription('A list of g3servalm entries.')
g3servalmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 21, 1, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3servalmID"))
if mibBuilder.loadTexts: g3servalmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3servalmEntry.setDescription('A g3servalm entry containing objects of the g3servalm information sent by the switch.')
g3servalmID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 21, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3servalmID.setStatus('mandatory')
if mibBuilder.loadTexts: g3servalmID.setDescription('A DisplayString Object that uniquely identifies the server alarm.')
g3servalmSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 21, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3servalmSource.setStatus('mandatory')
if mibBuilder.loadTexts: g3servalmSource.setDescription('A DisplayString Object containing the source of the alarm.')
g3servalmEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 21, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3servalmEventID.setStatus('mandatory')
if mibBuilder.loadTexts: g3servalmEventID.setDescription('A DisplayString Object containing the event id of the alarm.')
g3servalmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 21, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3servalmLevel.setStatus('mandatory')
if mibBuilder.loadTexts: g3servalmLevel.setDescription('A DisplayString Object containing the level of the alarm.')
g3servalmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 21, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3servalmAck.setStatus('mandatory')
if mibBuilder.loadTexts: g3servalmAck.setDescription('A DisplayString Object containing the alarm acknowledged flag.')
g3servalmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 21, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3servalmDate.setStatus('mandatory')
if mibBuilder.loadTexts: g3servalmDate.setDescription('A DisplayString Object containing the date the alarm was generated.')
g3servalmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 21, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3servalmDescription.setStatus('mandatory')
if mibBuilder.loadTexts: g3servalmDescription.setDescription('A DisplayString Object containing a description of the alarm.')
g3msgalmTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 22, 1), )
if mibBuilder.loadTexts: g3msgalmTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3msgalmTable.setDescription('A list of g3msgalm entries.')
g3msgalmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 22, 1, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3msgalmID"))
if mibBuilder.loadTexts: g3msgalmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3msgalmEntry.setDescription('A g3msgalm entry containing objects of the g3msgalm information sent by the switch.')
g3msgalmID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3msgalmID.setStatus('mandatory')
if mibBuilder.loadTexts: g3msgalmID.setDescription('A DisplayString Object that uniquely identifies the messaging alarm.')
g3msgalmAPP = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 22, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3msgalmAPP.setStatus('mandatory')
if mibBuilder.loadTexts: g3msgalmAPP.setDescription('A DisplayString Object containing the alarm APP.')
g3msgalmSource = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 22, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3msgalmSource.setStatus('mandatory')
if mibBuilder.loadTexts: g3msgalmSource.setDescription('A DisplayString Object containing the source of the alarm.')
g3msgalmEventID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 22, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3msgalmEventID.setStatus('mandatory')
if mibBuilder.loadTexts: g3msgalmEventID.setDescription('A DisplayString Object containing the event id of the alarm.')
g3msgalmLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 22, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3msgalmLevel.setStatus('mandatory')
if mibBuilder.loadTexts: g3msgalmLevel.setDescription('A DisplayString Object containing the level of the alarm.')
g3msgalmAck = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 22, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3msgalmAck.setStatus('mandatory')
if mibBuilder.loadTexts: g3msgalmAck.setDescription('A DisplayString Object containing the alarm acknowledged flag.')
g3msgalmLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 22, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3msgalmLocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3msgalmLocation.setDescription('A DisplayString Object containing the location of the alarm.')
g3msgalmDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 22, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3msgalmDate.setStatus('mandatory')
if mibBuilder.loadTexts: g3msgalmDate.setDescription('A DisplayString Object containing the date the alarm was generated.')
g3msgalmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 22, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3msgalmDescription.setStatus('mandatory')
if mibBuilder.loadTexts: g3msgalmDescription.setDescription('A DisplayString Object containing a description of the alarm.')
g3ipevtTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 23, 1), )
if mibBuilder.loadTexts: g3ipevtTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipevtTable.setDescription('A list of g3ipevt entries.')
g3ipevtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 23, 1, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3ipevtIndex"))
if mibBuilder.loadTexts: g3ipevtEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipevtEntry.setDescription('A g3ipevt entry containing objects of the g3ipevt information sent by the switch.')
g3ipevtIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipevtIndex.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipevtIndex.setDescription('An INTEGER object containing a unique index for each event in the IP event log for the current day.')
g3ipevtIPEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 23, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipevtIPEvent.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipevtIPEvent.setDescription('A DisplayString Object that defines an event in the IP event log for the current day.')
g3platcmdsTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 24, 1), )
if mibBuilder.loadTexts: g3platcmdsTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3platcmdsTable.setDescription('A list of g3platcmds entries.')
g3platcmdsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 24, 1, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3platcmdsSeqNumber"))
if mibBuilder.loadTexts: g3platcmdsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3platcmdsEntry.setDescription('A g3platcmds entry containing objects of the g3platcmds information sent by the switch.')
g3platcmdsDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 24, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3platcmdsDate.setStatus('mandatory')
if mibBuilder.loadTexts: g3platcmdsDate.setDescription('An object containing the date the command was issued.')
g3platcmdsTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 24, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3platcmdsTime.setStatus('mandatory')
if mibBuilder.loadTexts: g3platcmdsTime.setDescription('An object containing the time that the command was issued.')
g3platcmdsSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 24, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3platcmdsSeqNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3platcmdsSeqNumber.setDescription('An object containing the system-generated sequence number.')
g3platcmdsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 24, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3platcmdsPriority.setStatus('mandatory')
if mibBuilder.loadTexts: g3platcmdsPriority.setDescription('An object containing the session priority.')
g3platcmdsServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 24, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3platcmdsServerName.setStatus('mandatory')
if mibBuilder.loadTexts: g3platcmdsServerName.setDescription('An object containing the server name on which the command was issued.')
g3platcmdsLoginId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 24, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3platcmdsLoginId.setStatus('mandatory')
if mibBuilder.loadTexts: g3platcmdsLoginId.setDescription('An object containing the login id of the user issuing the command.')
g3platcmdsCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 24, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3platcmdsCommand.setStatus('mandatory')
if mibBuilder.loadTexts: g3platcmdsCommand.setDescription('An object containing the command issued by the user.')
g3ds1cfgTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1cfgTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1cfgTage.setDescription('The number of timeticks since the ds1 configuration data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3ds1cfgTintvl object allows the Network Manager to determine the validity of the ds1 configuration data in the cache and to control when the proxy agent extracts the ds1 configuration data from the switch.')
g3ds1cfgTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ds1cfgTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1cfgTintvl.setDescription('An object containing the interval for which the ds1 configuration data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for ds1 configuration objects is received by the agent it uses the g3ds1cfgTage and g3ds1cfgTintvl objects to determine whether it should refresh the cached ds1cfgTable. If g3ds1cfgTstmp + g3ds1cfgTintvl is less than the current value of the sysUpTime object then the agent refreshes the ds1cfgTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3ds1cfgTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1cfgTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1cfgTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3ds1cfgTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ds1cfgTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1cfgTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3ds1cfgTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1cfgTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1cfgTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3ds1cfgTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30, 6), )
if mibBuilder.loadTexts: g3ds1cfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1cfgTable.setDescription('A list of g3ds1cfg entries.')
g3ds1cfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3ds1cfgBoardNum"))
if mibBuilder.loadTexts: g3ds1cfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1cfgEntry.setDescription('A g3ds1cfg entry containing objects of the g3ds1cfg information sent by the switch.')
g3ds1cfgBoardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1cfgBoardNum.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1cfgBoardNum.setDescription('A DisplayString Object that uniquely identifies a board based on its location in the system. The syntax for the Board Number is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3ds1cfgCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1cfgCode.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1cfgCode.setDescription('A DisplayString Object that contains the code that defines the type of board.')
g3ds1cfgSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1cfgSuffix.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1cfgSuffix.setDescription('A DisplayString Object that contains the suffix to the code')
g3ds1cfgVintage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1cfgVintage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1cfgVintage.setDescription('A DisplayString Object that contains the vintage of the board. (object ds1cfgCode) that defines the type of board.')
g3ds1cfgSignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1cfgSignaling.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1cfgSignaling.setDescription('A DisplayString Object that contains the signaling of the board.')
g3ds1cfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1cfgName.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1cfgName.setDescription('A DisplayString Object that contains the name of the board.')
g3ds1cfgCsuMod = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 30, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1cfgCsuMod.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1cfgCsuMod.setDescription('A DisplayString Object that contains the type of CSU Mod.')
g3extdevTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3extdevTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3extdevTage.setDescription('The number of timeticks since the external device data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3extdevintvl object allows the Network Manager to determine the validity of the external device data in the cache and to control when the proxy agent extracts the external device data from the switch.')
g3extdevTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3extdevTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3extdevTintvl.setDescription('An object containing the interval for which the external device data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for external device objects is received by the agent it uses the g3extdevage and g3extdevintvl objects to determine whether it should refresh the cached extdevTable. If g3extdevstmp + g3extdevintvl is less than the current value of the sysUpTime object then the agent refreshes the extdevTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3extdevTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3extdevTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3extdevTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3extdevTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3extdevTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3extdevTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3extdevTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3extdevTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3extdevTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3extdevTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31, 6), )
if mibBuilder.loadTexts: g3extdevTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3extdevTable.setDescription('A list of g3extdev entries.')
g3extdevEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3extdevPort"))
if mibBuilder.loadTexts: g3extdevEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3extdevEntry.setDescription('A g3extdev entry containing objects of the g3extdev information sent by the switch.')
g3extdevPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3extdevPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3extdevPort.setDescription('A DisplayString Object that uniquely identifies a port based on its location in the system. The syntax for the Port Number is as follows: cabinet(01-44):carrier(A-E):slot(01-20):port(01-32).')
g3extdevType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3extdevType.setStatus('mandatory')
if mibBuilder.loadTexts: g3extdevType.setDescription('A DisplayString Object that defines the type of the device.')
g3extdevAltName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3extdevAltName.setStatus('mandatory')
if mibBuilder.loadTexts: g3extdevAltName.setDescription('A DisplayString Object that contains the alternate name for the device.')
g3extdevDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 43))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3extdevDescription.setStatus('mandatory')
if mibBuilder.loadTexts: g3extdevDescription.setDescription('A DisplayString Object that describes the external device.')
g3extdevID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3extdevID.setStatus('mandatory')
if mibBuilder.loadTexts: g3extdevID.setDescription('A DisplayString Object that contains the product identifier of the external device.')
g3extdevBuilding = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3extdevBuilding.setStatus('mandatory')
if mibBuilder.loadTexts: g3extdevBuilding.setDescription('A DisplayString Object that contains the building location of the external device.')
g3extdevAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 31, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3extdevAddress.setStatus('mandatory')
if mibBuilder.loadTexts: g3extdevAddress.setDescription('A DisplayString Object that contains the address of the external device.')
g3trunkgrpTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpTage.setDescription('The number of timeticks since the trunk group data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3trunkgrpintvl object allows the Network Manager to determine the validity of the trunk group data in the cache and to control when the proxy agent extracts the trunk group data from the switch.')
g3trunkgrpTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trunkgrpTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpTintvl.setDescription('An object containing the interval for which the trunk group data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for trunk group objects is received by the agent it uses the g3trunkgrpage and g3trunkgrpintvl objects to determine whether it should refresh the cached trunkgrpTable. If g3trunkgrpstmp + g3trunkgrpintvl is less than the current value of the sysUpTime object then the agent refreshes the trunkgrpTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3trunkgrpTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3trunkgrpTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trunkgrpTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3trunkgrpTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3trunkgrpTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6), )
if mibBuilder.loadTexts: g3trunkgrpTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpTable.setDescription('A list of g3trunkgrp entries.')
g3trunkgrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3trunkgrpNumber"))
if mibBuilder.loadTexts: g3trunkgrpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpEntry.setDescription('A g3trunkgrp entry containing objects of the g3trunkgrp information sent by the switch.')
g3trunkgrpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpNumber.setDescription('An INTEGER Object that uniquely identifies an administered trunk group.')
g3trunkgrpType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 13))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpType.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpType.setDescription('A DisplayString Object containing the trunk group type.')
g3trunkgrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpName.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpName.setDescription('A DisplayString Object containing the name assigned to the trunk group.')
g3trunkgrpDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpDirection.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpDirection.setDescription('A DisplayString Object containing the trunk group direction.')
g3trunkgrpServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpServiceType.setDescription('A DisplayString Object containing the trunk group service type.')
g3trunkgrpCommType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpCommType.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpCommType.setDescription('A DisplayString Object containing the trunk group communications type.')
g3trunkgrpTrunkType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpTrunkType.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpTrunkType.setDescription('A DisplayString Object containing the trunk group trunk type.')
g3trunkgrpSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpSize.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpSize.setDescription('An INTEGER Object containing the number of trunk group members.')
g3trunkgrpUsageAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpUsageAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpUsageAlloc.setDescription('A DisplayString Object containing a y/n flag for usage allocation.')
g3trunkgrpTAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpTAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpTAC.setDescription('An object containing the Access Code for the trunk group.')
g3trunkgrpWideSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpWideSupport.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpWideSupport.setDescription('A DisplayString Object containing a wideband support flag.')
g3trunkgrpDCSFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpDCSFlag.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpDCSFlag.setDescription('A DisplayString Object containing the flag that shows whether the trunk is used for DCS (y or n).')
g3trunkgrpPbxID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpPbxID.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpPbxID.setDescription('An INTEGER Object containing the identifier of the PBX.')
g3trunkgrpDCSSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpDCSSigType.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpDCSSigType.setDescription('A DisplayString Object containing the DCS signaling type.')
g3trunkgrpSigType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpSigType.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpSigType.setDescription('A DisplayString Object containing the trunk signaling type.')
g3trunkgrpACAFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpACAFlag.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpACAFlag.setDescription('A DisplayString Object containing the flag that shows whether the trunk is used for ACA (y or n).')
g3trunkgrpLongHold = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpLongHold.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpLongHold.setDescription('An INTEGER Object containing the long holding time in hours.')
g3trunkgrpShortHold = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpShortHold.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpShortHold.setDescription('An INTEGER Object containing the short holding time in seconds.')
g3trunkgrpShortThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpShortThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpShortThreshold.setDescription('An INTEGER Object containing the short hold time threshold.')
g3trunkgrpQsigValueAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpQsigValueAdd.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpQsigValueAdd.setDescription('A DisplayString Object containing a flag that indicates whether or not QSIG Value-Added is in use (y or n).')
g3trunkgrpSuppServProt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 32, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkgrpSuppServProt.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkgrpSuppServProt.setDescription('A DisplayString Object specifying which supplementary server protocol is being used (can have a value of a-g).')
g3bulletinTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinTage.setDescription('The number of timeticks since the bulletin board data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3bulletinintvl object allows the Network Manager to determine the validity of the bulletin board data in the cache and to control when the proxy agent extracts the bulletin board data from the switch.')
g3bulletinTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3bulletinTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinTintvl.setDescription('An object containing the interval for which the bulletin board data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for bulletin board objects is received by the agent it uses the g3bulletinage and g3bulletinintvl objects to determine whether it should refresh the cached bulletinTable. If g3bulletinstmp + g3bulletinintvl is less than the current value of the sysUpTime object then the agent refreshes the bulletinTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3bulletinTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3bulletinTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3bulletinTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3bulletinMessage1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage1.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage1.setDescription('A DisplayString Object containing a bulletin board message. A message posted to the bulletin board can consist of one or more Message fields entered by the user. The Message fields can contain any character string that the user can enter on the keyboard. The Message field can also be blank.')
g3bulletinMessage2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage2.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage2.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage3.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage3.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage4 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage4.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage4.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage5 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage5.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage5.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage6 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage6.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage6.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage7 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage7.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage7.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage8 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage8.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage8.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage9 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage9.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage9.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage10 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage10.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage10.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage11 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage11.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage11.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage12 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage12.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage12.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage13 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage13.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage13.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage14 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage14.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage14.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage15 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage15.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage15.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage16 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage16.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage16.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage17 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage17.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage17.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage18 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage18.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage18.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage19 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage19.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage19.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage20 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage20.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage20.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage21 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage21.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage21.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage22 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage22.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage22.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage23 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage23.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage23.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage24 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage24.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage24.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage25 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage25.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage25.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage26 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage26.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage26.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage27 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage27.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage27.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage28 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage28.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage28.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage29 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage29.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage29.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage30 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage30.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage30.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage31 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage31.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage31.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage32 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage32.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage32.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage33 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage33.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage33.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage34 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage34.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage34.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage35 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage35.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage35.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage36 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage36.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage36.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage37 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage37.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage37.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage38 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage38.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage38.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage39 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage39.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage39.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage40 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage40.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage40.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage41 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage41.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage41.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage42 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage42.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage42.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage43 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage43.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage43.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage44 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage44.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage44.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage45 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage45.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage45.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage46 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage46.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage46.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage47 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage47.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage47.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage48 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage48.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage48.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage49 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage49.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage49.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage50 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage50.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage50.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage51 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage51.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage51.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage52 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage52.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage52.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage53 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage53.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage53.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage54 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage54.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage54.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage55 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage55.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage55.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage56 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage56.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage56.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage57 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage57.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage57.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage58 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage58.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage58.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinMessage59 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinMessage59.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinMessage59.setDescription('See DESCRIPTION of g3bulletinMessage1.')
g3bulletinDate1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate1.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate1.setDescription('A DisplayString Object containing a bulletin board Date. Each Date field is associated with a Message field. If the associated Message field is not blank, the Date field identifies the date on which the bulletin board message was posted. If the associated Message field is blank, then the Date field will be blank.')
g3bulletinDate2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate2.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate2.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 66), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate3.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate3.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate4 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate4.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate4.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate5 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate5.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate5.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate6 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate6.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate6.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate7 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate7.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate7.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate8 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 71), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate8.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate8.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate9 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 72), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate9.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate9.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate10 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 73), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate10.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate10.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate11 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate11.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate11.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate12 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate12.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate12.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate13 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 76), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate13.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate13.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate14 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 77), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate14.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate14.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate15 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate15.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate15.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate16 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate16.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate16.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate17 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate17.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate17.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate18 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 81), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate18.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate18.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate19 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 82), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate19.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate19.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate20 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 83), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate20.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate20.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate21 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 84), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate21.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate21.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate22 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate22.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate22.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate23 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 86), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate23.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate23.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate24 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 87), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate24.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate24.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate25 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 88), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate25.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate25.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate26 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 89), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate26.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate26.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate27 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate27.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate27.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate28 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate28.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate28.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate29 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 92), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate29.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate29.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate30 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 93), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate30.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate30.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate31 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 94), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate31.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate31.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate32 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 95), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate32.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate32.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate33 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 96), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate33.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate33.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate34 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 97), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate34.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate34.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate35 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 98), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate35.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate35.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate36 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 99), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate36.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate36.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate37 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate37.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate37.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate38 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate38.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate38.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate39 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate39.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate39.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate40 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate40.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate40.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate41 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 104), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate41.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate41.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate42 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 105), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate42.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate42.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate43 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 106), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate43.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate43.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate44 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 107), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate44.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate44.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate45 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 108), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate45.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate45.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate46 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 109), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate46.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate46.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate47 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 110), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate47.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate47.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate48 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 111), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate48.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate48.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate49 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 112), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate49.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate49.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate50 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate50.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate50.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate51 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 114), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate51.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate51.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate52 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 115), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate52.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate52.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate53 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 116), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate53.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate53.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate54 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 117), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate54.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate54.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate55 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 118), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate55.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate55.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate56 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 119), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate56.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate56.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate57 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 120), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate57.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate57.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate58 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 121), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate58.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate58.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3bulletinDate59 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 33, 122), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3bulletinDate59.setStatus('mandatory')
if mibBuilder.loadTexts: g3bulletinDate59.setDescription('See DESCRIPTION of g3bulletinDate1.')
g3ds1Tage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 34, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1Tage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1Tage.setDescription('The number of timeticks since the ds1 data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3ds1intvl object allows the Network Manager to determine the validity of the ds1 data in the cache and to control when the proxy agent extracts the ds1 data from the switch.')
g3ds1Tintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 34, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ds1Tintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1Tintvl.setDescription('An object containing the interval for which the ds1 data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for ds1 objects is received by the agent it uses the g3ds1age and g3ds1intvl objects to determine whether it should refresh the cached ds1Table. If g3ds1stmp + g3ds1intvl is less than the current value of the sysUpTime object then the agent refreshes the ds1Table cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3ds1Tdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 34, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1Tdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1Tdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3ds1Tretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 34, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ds1Tretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1Tretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3ds1Tcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 34, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1Tcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1Tcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3ds1Table = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 34, 6), )
if mibBuilder.loadTexts: g3ds1Table.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1Table.setDescription('A list of g3ds1 entries.')
g3ds1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 34, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3ds1Location"))
if mibBuilder.loadTexts: g3ds1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1Entry.setDescription('A g3ds1 entry containing objects of the g3ds1 information sent by the switch.')
g3ds1Location = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 34, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1Location.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1Location.setDescription('A DisplayString Object that uniquely identifies a DS1 port board based on its location in the system. The syntax for the Port Location is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3ds1BitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 34, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1BitRate.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1BitRate.setDescription('A DisplayString Object containing the Bit Rate for the DS1 board.')
g3ds1Signaling = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 34, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1Signaling.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1Signaling.setDescription('A DisplayString Object that contains the signaling of the board')
g3ds1Name = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 34, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ds1Name.setStatus('mandatory')
if mibBuilder.loadTexts: g3ds1Name.setDescription('A DisplayString Object that contains the name of the board')
g3atmpncTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncTage.setDescription('The number of timeticks since the ATM PNC data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3atmpncintvl object allows the Network Manager to determine the validity of the ATM PNC data in the cache and to control when the proxy agent extracts the ATM PNC data from the switch.')
g3atmpncTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3atmpncTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncTintvl.setDescription('An object containing the interval for which the ATM PNC group data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for ATM PNC objects is received by the agent it uses the g3atmpncage and g3atmpncintvl objects to determine whether it should refresh the cached atmpncTable. If g3atmpncage + g3atmpncintvl is less than the current value of the sysUpTime object then the agent refreshes the atmpncTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3atmpncTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3atmpncTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3atmpncTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3atmpncTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3atmpncTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6), )
if mibBuilder.loadTexts: g3atmpncTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncTable.setDescription('A list of g3atmpnc entries.')
g3atmpncEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3atmpncconnection"))
if mibBuilder.loadTexts: g3atmpncEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncEntry.setDescription('A g3atmpnc entry containing objects of the g3atmpnc information sent by the switch.')
g3atmpncconnection = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncconnection.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncconnection.setDescription('An INTEGER Object that uniquely identifies an administered ATM PNC connection.')
g3atmpncPncLocA = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncLocA.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncLocA.setDescription('An DisplayString Object that contains the ATM PNC location A port network location (exp 02A24).')
g3atmpncPncNameA = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncNameA.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncNameA.setDescription('An DisplayString Object that contains the name of the ATM PNC location A name (15 alphanumeric characters).')
g3atmpncPncAddFmtA = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncAddFmtA.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncAddFmtA.setDescription('An DisplayString Object that contains the address format of the ATM PNC location A (DCC ATM, E.164 ATM Private, or ICD ATM).')
g3atmpncPncAFIA = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncAFIA.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncAFIA.setDescription('An DisplayString Object that contains the AFI value of the ATM PNC location A AFI field (39 for DCC, 45 for E.164 ATM Private, or 47 for ICD ATM).')
g3atmpncPncE164A = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncE164A.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncE164A.setDescription('An DisplayString Object that contains the hexidecimal value of the ATM PNC location A E.164 field (16 hexidecimal digits).')
g3atmpncPncDCIA = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncDCIA.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncDCIA.setDescription('An DisplayString Object that contains the hexidecimal value of the ATM PNC location A DCC/ICD field (4 hexidecimal digits).')
g3atmpncPncHoDsp1A = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncHoDsp1A.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncHoDsp1A.setDescription('An DisplayString Object that contains the hexidecimal value of the ATM PNC location A HO-DSP1 field (8 hexidecimal digits).')
g3atmpncPncHoDsp2A = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncHoDsp2A.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncHoDsp2A.setDescription('An DisplayString Object that contains the hexidecimal value of the ATM PNC location A HO-DSP2 field (20 hexidecimal digits).')
g3atmpncPncESIA = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncESIA.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncESIA.setDescription('An DisplayString Object that contains the hexidecimal value of the ATM PNC location A ESI field (12 hexidecimal digits).')
g3atmpncPncSELA = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncSELA.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncSELA.setDescription('An DisplayString Object that contains the hexidecimal value of the ATM PNC location A SEL field (2 hexidecimal digits).')
g3atmpncPncLocB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncLocB.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncLocB.setDescription('An DisplayString Object that contains the ATM PNC location B port network location (exp 03A24).')
g3atmpncPncNameB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncNameB.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncNameB.setDescription('An DisplayString Object that contains the name of the ATM PNC location B name (15 alphanumeric characters).')
g3atmpncPncAddFmtB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncAddFmtB.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncAddFmtB.setDescription('An DisplayString Object that contains the address format of the ATM PNC location B (DCC ATM, E.164 ATM Private, or ICD ATM).')
g3atmpncPncAFIB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncAFIB.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncAFIB.setDescription('An DisplayString Object that contains the AFI value of the ATM PNC location B AFI field (39 for DCC, 45 for E.164 ATM Private, or 47 for ICD ATM).')
g3atmpncPncE164B = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncE164B.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncE164B.setDescription('An DisplayString Object that contains the hexidecimal value of the ATM PNC location B E.164 field (16 hexidecimal digits).')
g3atmpncPncDCIB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncDCIB.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncDCIB.setDescription('An DisplayString Object that contains the hexidecimal value of the ATM PNC location B DCC/ICD field (4 hexidecimal digits).')
g3atmpncPncHoDsp1B = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncHoDsp1B.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncHoDsp1B.setDescription('An DisplayString Object that contains the hexidecimal value of the ATM PNC location B HO-DSP1 field (8 hexidecimal digits).')
g3atmpncPncHoDsp2B = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncHoDsp2B.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncHoDsp2B.setDescription('An DisplayString Object that contains the hexidecimal value of the ATM PNC location B HO-DSP2 field (20 hexidecimal digits).')
g3atmpncPncESIB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncESIB.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncESIB.setDescription('An DisplayString Object that contains the hexidecimal value of the ATM PNC location B ESI field (12 hexidecimal digits).')
g3atmpncPncSELB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 35, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmpncPncSELB.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmpncPncSELB.setDescription('An DisplayString Object that contains the hexidecimal value of the ATM PNC location B SEL field (2 hexidecimal digits).')
g3pnchealthTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthTage.setDescription('The number of timeticks since the pnc health data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3pnchealthTintvl object allows the Network Manager to determine the validity of the pnc health data in the cache and to control when the proxy agent extracts the pnc health data from the switch.')
g3pnchealthTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pnchealthTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthTintvl.setDescription('An object containing the interval for which the pnc health data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for pnc health objects is received by the agent it uses the g3pnchealthTage and g3pnchealthTintvl objects to determine whether it should refresh the cached pnchealthTable. If g3pnchealthTstmp + g3pnchealthTintvl is less than the current value of the sysUpTime object then the agent refreshes the pnchealthTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pnchealthTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3pnchealthTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pnchealthTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pnchealthSoftwreLck = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthSoftwreLck.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthSoftwreLck.setDescription('A DisplayString Object containing the Software Locked status (yes or no).')
g3pnchealthStandbyBusd = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthStandbyBusd.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthStandbyBusd.setDescription('A DisplayString Object containing the Standby Busied status (yes or no).')
g3pnchealthStndbyRfsh = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthStndbyRfsh.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthStndbyRfsh.setDescription('A DisplayString Object containing the Standby Refresh status (yes or no).')
g3pnchealthIntchDisble = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthIntchDisble.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthIntchDisble.setDescription('A DisplayString Object containing the Interchange Disable status (yes or no).')
g3pnchealthPncAMode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthPncAMode.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthPncAMode.setDescription('A DisplayString Object containing the current mode of PNC A.')
g3pnchealthPncBMode = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthPncBMode.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthPncBMode.setDescription('A DisplayString Object containing the current mode of PNC B.')
g3pnchealthPncAHealth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthPncAHealth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthPncAHealth.setDescription('A DisplayString Object containing the current state of health of PNC A.')
g3pnchealthPncBHealth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthPncBHealth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthPncBHealth.setDescription('A DisplayString Object containing the current state of health of PNC B.')
g3pnchealthPncAIntrIdx = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthPncAIntrIdx.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthPncAIntrIdx.setDescription('A DisplayString Object containing the current PN Interchange Index for PNC A.')
g3pnchealthPncBIntrIdx = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthPncBIntrIdx.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthPncBIntrIdx.setDescription('A DisplayString Object containing the current PN Interchange Index for PNC B.')
g3pnchealthPncAMajor = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthPncAMajor.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthPncAMajor.setDescription('A Gauge object containing the number of logged major alarms for PNC A.')
g3pnchealthPncBMajor = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthPncBMajor.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthPncBMajor.setDescription('A Gauge object containing the number of logged major alarms for PNC B.')
g3pnchealthPncAMinor = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthPncAMinor.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthPncAMinor.setDescription('A Gauge object containing the number of logged minor alarms for PNC A.')
g3pnchealthPncBMinor = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthPncBMinor.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthPncBMinor.setDescription('A Gauge object containing the number of logged minor alarms for PNC B.')
g3pnchealthPncAWarning = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthPncAWarning.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthPncAWarning.setDescription('A Gauge object containing the number of logged warning alarms for PNC A.')
g3pnchealthPncBWarning = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthPncBWarning.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthPncBWarning.setDescription('A Gauge object containing the number of logged warning alarms for PNC B.')
g3pnchealthPncASNIntrIdx = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthPncASNIntrIdx.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthPncASNIntrIdx.setDescription('A DisplayString Object containing the current SN Interchange Index for PNC A.')
g3pnchealthPncBSNIntrIdx = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 36, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnchealthPncBSNIntrIdx.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnchealthPncBSNIntrIdx.setDescription('A DisplayString Object containing the current SN Interchange Index for PNC B.')
g3siggroupTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupTage.setDescription('The number of timeticks since the signaling group data was extracted from the switch by the G3 Proxy Agent. This object along with the g3siggroupTintvl object allows the Network Manager to determine the validity of the signaling group data in the cache and to control when the proxy agent extracts the signaling group data from the switch.')
g3siggroupTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3siggroupTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupTintvl.setDescription('An object containing the interval for which the signaling group data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for signaling group data objects is received by the agent it uses the g3siggroupTage and g3siggroupTintvl objects to determine whether it should refresh the cached siggroupTable. If g3siggroupTstmp + g3siggroupTintvl is less than the current value of the sysUpTime object then the agent refreshes the siggroupTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3siggroupTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3siggroupTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3siggroupTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3siggroupTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3siggroupTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6), )
if mibBuilder.loadTexts: g3siggroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupTable.setDescription('A list of g3siggroup entries.')
g3siggroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3siggroupGrpNbr"))
if mibBuilder.loadTexts: g3siggroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupEntry.setDescription('A g3siggroup entry containing objects of the g3siggroup information sent by the switch.')
g3siggroupGrpNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupGrpNbr.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupGrpNbr.setDescription('An INTEGER Object that uniquely identifies an administered Signaling Group.')
g3siggroupPriDChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupPriDChannel.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupPriDChannel.setDescription('A DisplayString Object that uniquely identifies the Primary D channel adminstered for this Signaling Group. The syntax for the Primary D Channel is as follows: cabinet(01-44):carrier(A-E):slot(01-20) port(01-32).')
g3siggroupSecDChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupSecDChannel.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupSecDChannel.setDescription('A DisplayString Object that uniquely identifies the Secondary D channel adminstered for this Signaling Group. The syntax for the Secondary D Channel is as follows: cabinet(01-44):carrier(A-E): slot(01-20):port(01-32).')
g3siggroupBoard1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard1.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard1.setDescription('A DisplayString Object that uniquely identifies a board based on its location in the system. The syntax for the Board Location is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3siggroupBoard2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard2.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard2.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard3.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard3.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard4.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard4.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard5.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard5.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard6.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard6.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard7.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard7.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard8.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard8.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard9.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard9.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard10 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard10.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard10.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard11 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard11.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard11.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard12 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard12.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard12.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard13 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard13.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard13.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard14 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard14.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard14.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard15 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard15.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard15.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard16 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard16.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard16.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard17 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard17.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard17.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard18 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard18.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard18.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard19 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard19.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard19.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupBoard20 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupBoard20.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupBoard20.setDescription('See DESCRIPTION of g3siggroupBoard1.')
g3siggroupIntfNum1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum1.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum1.setDescription('An INTEGER object containing the Signaling Group Interface Number using this board.')
g3siggroupIntfNum2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum2.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum2.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum3.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum3.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum4.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum4.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum5.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum5.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum6.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum6.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum7.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum7.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum8.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum8.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum9.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum9.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum10 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum10.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum10.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum11 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum11.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum11.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum12 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum12.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum12.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum13 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum13.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum13.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum14 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum14.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum14.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum15 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum15.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum15.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum16 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum16.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum16.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum17 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum17.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum17.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum18 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum18.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum18.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum19 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum19.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum19.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupIntfNum20 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupIntfNum20.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupIntfNum20.setDescription('See DESCRIPTION of g3siggroupIntfNum1.')
g3siggroupAsocSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 37, 6, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3siggroupAsocSignal.setStatus('mandatory')
if mibBuilder.loadTexts: g3siggroupAsocSignal.setDescription('A DisplayString Object containing the Associated Signaling status (y or n).')
g3restartTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartTage.setDescription('The number of timeticks since the system restart data was extracted from the switch by the G3 Proxy Agent. This object along with the g3restartTintvl object allows the Network Manager to determine the validity of the system restart data in the cache and to control when the proxy agent extracts the system restart data from the switch.')
g3restartTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3restartTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartTintvl.setDescription('An object containing the interval for which the system restart data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for system restart data objects is received by the agent it uses the g3restartTage and g3restartTintvl objects to determine whether it should refresh the cached restartTable. If g3restartTstmp + g3restartTintvl is less than the current value of the sysUpTime object then the agent refreshes the restartTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3restartTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3restartTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3restartTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3restartTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3restartTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6), )
if mibBuilder.loadTexts: g3restartTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartTable.setDescription('A list of g3restart entries.')
g3restartEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3restartMonth"), (0, "G3-AVAYA-MIB", "g3restartDay"), (0, "G3-AVAYA-MIB", "g3restartHour"), (0, "G3-AVAYA-MIB", "g3restartMinute"), (0, "G3-AVAYA-MIB", "g3restartIndex"))
if mibBuilder.loadTexts: g3restartEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartEntry.setDescription('A g3restart entry containing objects of the g3restart information sent by the switch.')
g3restartMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartMonth.setDescription('An INTEGER Object that uniquely identifies the Month (01-12) in which a system restart occurred.')
g3restartDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartDay.setDescription('An INTEGER Object that uniquely identifies the Day (01-31) in which a system restart occurred.')
g3restartHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartHour.setDescription('An INTEGER Object that uniquely identifies the Hour (00-23) in which a system restart occurred.')
g3restartMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartMinute.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartMinute.setDescription('An INTEGER Object that uniquely identifies the Minute (00-59) in which a system restart occurred.')
g3restartDateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartDateTime.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartDateTime.setDescription('A DisplayString object containing the date and time (of the form MM/DD HH:MM) in which a system restart occurred.')
g3restartLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartLevel.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartLevel.setDescription('A DisplayString object containing the level of the restart (WARM, COLD1, COLD2, REBOOT, or XREBOOT).')
g3restartCarrier = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartCarrier.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartCarrier.setDescription('A DisplayString object containing the carrier (A or B) on which the restart occurred.')
g3restartCraftDemand = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartCraftDemand.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartCraftDemand.setDescription('A DisplayString object containing a flag (Y or N) indicating whether or not the restart was craft demanded.')
g3restartEscalated = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartEscalated.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartEscalated.setDescription('A DisplayString object containing a flag (Y or N) indicating whether or not the restart was escalated.')
g3restartInterchange = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartInterchange.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartInterchange.setDescription('A DisplayString object containing a flag (Y or N) indicating whether or not an interchange took place.')
g3restartUnavailable = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartUnavailable.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartUnavailable.setDescription('A DisplayString object containing the amount of time (of the form HH:MM:SS) the system was unavailable due to the restart.')
g3restartCause = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartCause.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartCause.setDescription('A DisplayString object containing the cause of the system restart.')
g3restartIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 38, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3restartIndex.setStatus('mandatory')
if mibBuilder.loadTexts: g3restartIndex.setDescription('An INTEGER Object that provides a secondary key for multiple restarts occurring in the same minute.')
g3fiberlinkTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkTage.setDescription('The number of timeticks since the fiberlink data was extracted from the switch by the G3 Proxy Agent. This object along with the g3fiberlinkTintvl object allows the Network Manager to determine the validity of the fiberlink data in the cache and to control when the proxy agent extracts the fiberlink data from the switch.')
g3fiberlinkTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3fiberlinkTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkTintvl.setDescription('An object containing the interval for which the fiberlink data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for fiberlink data objects is received by the agent it uses the g3fiberlinkTage and g3fiberlinkTintvl objects to determine whether it should refresh the cached fiberlinkTable. If g3fiberlinkTstmp + g3fiberlinkTintvl is less than the current value of the sysUpTime object then the agent refreshes the fiberlinkTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3fiberlinkTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3fiberlinkTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3fiberlinkTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3fiberlinkTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3fiberlinkTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 6), )
if mibBuilder.loadTexts: g3fiberlinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkTable.setDescription('A list of g3fiberlink entries.')
g3fiberlinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3fiberlinkFLNumber"))
if mibBuilder.loadTexts: g3fiberlinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkEntry.setDescription('A g3fiberlink entry containing objects of the g3fiberlink information sent by the switch.')
g3fiberlinkFLNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkFLNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkFLNumber.setDescription('An INTEGER Object that uniquely identifies an administered Fiber Link.')
g3fiberlinkDS1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkDS1Type.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkDS1Type.setDescription('A DisplayString Object that identifies the type of DS1 Converter board used if a DS1 converter is used (TNXXXX).')
g3fiberlinkE1Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkE1Type.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkE1Type.setDescription('A DisplayString Object that identifies the type of the Endpoint for Endpoint 1 (sni or ei).')
g3fiberlinkE2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkE2Type.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkE2Type.setDescription('A DisplayString Object that identifies the type of the Endpoint for Endpoint 1 (sni or ei).')
g3fiberlinkE1ABoard = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkE1ABoard.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkE1ABoard.setDescription('A DisplayString Object that uniquely identifies the Endpoint 1 A-PNC SNI or EI board based on its location in the system. The syntax for the Board Location is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3fiberlinkE2ABoard = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkE2ABoard.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkE2ABoard.setDescription('A DisplayString Object that uniquely identifies the Endpoint 2 A-PNC SNI or EI board based on its location in the system. The syntax for the Board Location is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3fiberlinkE1BBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkE1BBoard.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkE1BBoard.setDescription('A DisplayString Object that uniquely identifies the Endpoint 1 B-PNC SNI or EI board based on its location in the system. The syntax for the Board Location is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3fiberlinkE2BBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkE2BBoard.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkE2BBoard.setDescription('A DisplayString Object that uniquely identifies the Endpoint 2 B-PNC SNI or EI board based on its location in the system. The syntax for the Board Location is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3fiberlinkE1ADs1Board = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkE1ADs1Board.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkE1ADs1Board.setDescription('A DisplayString Object that uniquely identifies the Endpoint 1 A-PNC DS1 board based on its location in the system. The syntax for the Board Location is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3fiberlinkE2ADs1Board = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkE2ADs1Board.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkE2ADs1Board.setDescription('A DisplayString Object that uniquely identifies the Endpoint 2 A-PNC DS1 board based on its location in the system. The syntax for the Board Location is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3fiberlinkE1BDs1Board = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkE1BDs1Board.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkE1BDs1Board.setDescription('A DisplayString Object that uniquely identifies the Endpoint 1 B-PNC DS1 board based on its location in the system. The syntax for the Board Location is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3fiberlinkE2BDs1Board = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 39, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3fiberlinkE2BDs1Board.setStatus('mandatory')
if mibBuilder.loadTexts: g3fiberlinkE2BDs1Board.setDescription('A DisplayString Object that uniquely identifies the Endpoint 2 B-PNC DS1 board based on its location in the system. The syntax for the Board Location is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3routepatternTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTage.setDescription('The number of timeticks since the routepattern data was extracted from the switch by the G3 Proxy Agent. This object along with the g3routepatternTintvl object allows the Network Manager to determine the validity of the routepattern data in the cache and to control when the proxy agent extracts the routepattern data from the switch.')
g3routepatternTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3routepatternTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTintvl.setDescription('An object containing the interval for which the routepattern data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for routepattern data objects is received by the agent it uses the g3routepatternTage and g3routepatternTintvl objects to determine whether it should refresh the cached routepatternTable. If g3routepatternTstmp + g3routepatternTintvl is less than the current value of the sysUpTime object then the agent refreshes the routepatternTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3routepatternTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3routepatternTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3routepatternTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3routepatternTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3routepatternTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6), )
if mibBuilder.loadTexts: g3routepatternTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTable.setDescription('A list of g3routepattern entries.')
g3routepatternEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3routepatternRPNumber"))
if mibBuilder.loadTexts: g3routepatternEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternEntry.setDescription('A g3routepattern entry containing objects of the g3routepattern information sent by the switch.')
g3routepatternRPNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternRPNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternRPNumber.setDescription('An INTEGER Object that uniquely identifies an administered Route Pattern.')
g3routepatternTGNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber1.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber1.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 1.')
g3routepatternTGNumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber2.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber2.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 2.')
g3routepatternTGNumber3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber3.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber3.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 3.')
g3routepatternTGNumber4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber4.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber4.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 4.')
g3routepatternTGNumber5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber5.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber5.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 5.')
g3routepatternTGNumber6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber6.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber6.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 6.')
g3routepatternTGNumber7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber7.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber7.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 7.')
g3routepatternTGNumber8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber8.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber8.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 8.')
g3routepatternTGNumber9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber9.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber9.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 9.')
g3routepatternTGNumber10 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber10.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber10.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 10.')
g3routepatternTGNumber11 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber11.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber11.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 11.')
g3routepatternTGNumber12 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber12.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber12.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 12.')
g3routepatternTGNumber13 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber13.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber13.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 13.')
g3routepatternTGNumber14 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber14.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber14.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 14.')
g3routepatternTGNumber15 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber15.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber15.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 15.')
g3routepatternTGNumber16 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 40, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3routepatternTGNumber16.setStatus('mandatory')
if mibBuilder.loadTexts: g3routepatternTGNumber16.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with group number 16.')
g3trunkcfgTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 41, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkcfgTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkcfgTage.setDescription('The number of timeticks since the trunk config data was extracted from the switch by the G3 Proxy Agent. This object along with the g3trunkcfgTintvl object allows the Network Manager to determine the validity of the trunk config data in the cache and to control when the proxy agent extracts the trunk config data from the switch.')
g3trunkcfgTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 41, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trunkcfgTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkcfgTintvl.setDescription('An object containing the interval for which the trunk config data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for trunk config data objects is received by the agent it uses the g3trunkcfgTage and g3trunkcfgTintvl objects to determine whether it should refresh the cached trunkcfgTable. If g3trunkcfgTstmp + g3trunkcfgTintvl is less than the current value of the sysUpTime object then the agent refreshes the trunkcfgTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3trunkcfgTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 41, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkcfgTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkcfgTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3trunkcfgTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 41, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trunkcfgTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkcfgTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3trunkcfgTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 41, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkcfgTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkcfgTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3trunkcfgTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 41, 6), )
if mibBuilder.loadTexts: g3trunkcfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkcfgTable.setDescription('A list of g3trunkcfg entries.')
g3trunkcfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 41, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3trunkcfgBoardNum"))
if mibBuilder.loadTexts: g3trunkcfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkcfgEntry.setDescription('A g3trunkcfg entry containing objects of the g3trunkcfg information sent by the switch.')
g3trunkcfgBoardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 41, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkcfgBoardNum.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkcfgBoardNum.setDescription('A DisplayString Object that uniquely identifies a trunk board based on its location in the system. The syntax for the Board Number is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3trunkcfgBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 41, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkcfgBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkcfgBoardType.setDescription('A DisplayString Object that contains a text description of the type of trunk board.')
g3trunkcfgCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 41, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkcfgCode.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkcfgCode.setDescription('A DisplayString Object that contains the code that defines the type of trunk board.')
g3trunkcfgVintage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 41, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkcfgVintage.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkcfgVintage.setDescription('A DisplayString Object that contains the vintage of the trunk board.')
g3trunkcfgSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 41, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkcfgSuffix.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkcfgSuffix.setDescription('A DisplayString Object that contains the suffix to the code')
g3stationcfgTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 42, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationcfgTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationcfgTage.setDescription('The number of timeticks since the station config data was extracted from the switch by the G3 Proxy Agent. This object along with the g3stationcfgTintvl object allows the Network Manager to determine the validity of the station config data in the cache and to control when the proxy agent extracts the station config data from the switch.')
g3stationcfgTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 42, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3stationcfgTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationcfgTintvl.setDescription('An object containing the interval for which the station config data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for station config data objects is received by the agent it uses the g3stationcfgTage and g3stationcfgTintvl objects to determine whether it should refresh the cached stationcfgTable. If g3stationcfgTstmp + g3stationcfgTintvl is less than the current value of the sysUpTime object then the agent refreshes the stationcfgTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3stationcfgTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 42, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationcfgTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationcfgTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3stationcfgTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 42, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3stationcfgTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationcfgTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3stationcfgTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 42, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationcfgTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationcfgTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3stationcfgTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 42, 6), )
if mibBuilder.loadTexts: g3stationcfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationcfgTable.setDescription('A list of g3stationcfg entries.')
g3stationcfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 42, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3stationcfgBoardNum"))
if mibBuilder.loadTexts: g3stationcfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationcfgEntry.setDescription('A g3stationcfg entry containing objects of the g3stationcfg information sent by the switch.')
g3stationcfgBoardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 42, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationcfgBoardNum.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationcfgBoardNum.setDescription('A DisplayString Object that uniquely identifies a station board based on its location in the system. The syntax for the Board Number is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3stationcfgBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 42, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationcfgBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationcfgBoardType.setDescription('A DisplayString Object that contains a text description of the type of station board.')
g3stationcfgCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 42, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationcfgCode.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationcfgCode.setDescription('A DisplayString Object that contains the code that defines the type of station board.')
g3stationcfgVintage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 42, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationcfgVintage.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationcfgVintage.setDescription('A DisplayString Object that contains the vintage of the station board.')
g3stationcfgSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 42, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stationcfgSuffix.setStatus('mandatory')
if mibBuilder.loadTexts: g3stationcfgSuffix.setDescription('A DisplayString Object that contains the suffix to the code')
g3atmcfgTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 43, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmcfgTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmcfgTage.setDescription('The number of timeticks since the atm config data was extracted from the switch by the G3 Proxy Agent. This object along with the g3atmcfgTintvl object allows the Network Manager to determine the validity of the atm config data in the cache and to control when the proxy agent extracts the atm config data from the switch.')
g3atmcfgTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 43, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3atmcfgTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmcfgTintvl.setDescription('An object containing the interval for which the atm config data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for atm config data objects is received by the agent it uses the g3atmcfgTage and g3atmcfgTintvl objects to determine whether it should refresh the cached atmcfgTable. If g3atmcfgTstmp + g3atmcfgTintvl is less than the current value of the sysUpTime object then the agent refreshes the atmcfgTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3atmcfgTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 43, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmcfgTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmcfgTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3atmcfgTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 43, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3atmcfgTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmcfgTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3atmcfgTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 43, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmcfgTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmcfgTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3atmcfgTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 43, 6), )
if mibBuilder.loadTexts: g3atmcfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmcfgTable.setDescription('A list of g3atmcfg entries.')
g3atmcfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 43, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3atmcfgBoardNum"))
if mibBuilder.loadTexts: g3atmcfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmcfgEntry.setDescription('A g3atmcfg entry containing objects of the g3atmcfg information sent by the switch.')
g3atmcfgBoardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 43, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmcfgBoardNum.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmcfgBoardNum.setDescription('A DisplayString Object that uniquely identifies a board used for ATM connectivity based on its location in the system. The syntax for the Board Number is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3atmcfgCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 43, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmcfgCode.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmcfgCode.setDescription('A DisplayString Object that contains the code that defines the type of ATM connectivity board.')
g3atmcfgBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 43, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmcfgBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmcfgBoardType.setDescription('A DisplayString Object that contains a text description of the type of ATM connectivity board.')
g3atmcfgVintage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 43, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmcfgVintage.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmcfgVintage.setDescription('A DisplayString Object that contains the vintage of the ATM connectivity board.')
g3atmcfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 43, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmcfgName.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmcfgName.setDescription('A DisplayString Object that contains the name of the ATM connectivity board.')
g3atmcfgSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 43, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmcfgSuffix.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmcfgSuffix.setDescription('A DisplayString Object that contains the suffix to the code')
g3acaTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3acaTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaTage.setDescription('The number of timeticks since the data was last extracted from the switch by the Proxy Agent. This object along with the g3acaintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3acaTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3acaTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these data objects is received by the agent it uses the g3acaage and g3acaintvl objects to determine whether it should refresh the cached acaTable. If g3acastmp + g3acaintvl is less than the current value of the sysUpTime object then the agent refreshes the acaTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3acaTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3acaTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3acaTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3acaTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3acaTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3acaTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3acaTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 6), )
if mibBuilder.loadTexts: g3acaTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaTable.setDescription('A list of g3aca entries.')
g3acaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3acaTGNumber"), (0, "G3-AVAYA-MIB", "g3acaTGMember"), (0, "G3-AVAYA-MIB", "g3acaDayTime"))
if mibBuilder.loadTexts: g3acaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaEntry.setDescription('A g3aca entry containing objects of the g3aca information sent by the switch.')
g3acaTGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3acaTGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaTGNumber.setDescription('An object containing the trunk group number.')
g3acaTGMember = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3acaTGMember.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaTGMember.setDescription('An object containing the trunk group member number.')
g3acaDayTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3acaDayTime.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaDayTime.setDescription('A DisplayString Object that contains the day and time at which either the threshold for short holding time calls was exceeded or long holding time call was reached and a referral call was placed.')
g3acaYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3acaYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaYear.setDescription('An object containing the Year the command was executed.')
g3acaMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3acaMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaMonth.setDescription('An object containing the Month the command was executed.')
g3acaDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3acaDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaDay.setDescription('An object containing the Day the command was executed.')
g3acaHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3acaHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaHour.setDescription('An object containing the Hour the command was executed.')
g3acaTGAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3acaTGAccess.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaTGAccess.setDescription('An object containing the trunk access code for the trunk group.')
g3acaRefType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3acaRefType.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaRefType.setDescription('A DisplayString Object that indicates whether the referral occurred as the result of too many short holding time calls or an excessively long holding time call.')
g3acaWideBand = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 44, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3acaWideBand.setStatus('mandatory')
if mibBuilder.loadTexts: g3acaWideBand.setDescription('A DisplayString Object that indicates whether the call was a wideband call.')
g3atmtrunkTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 45, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmtrunkTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmtrunkTage.setDescription('The number of timeticks since the atm trunk data was extracted from the switch by the G3 Proxy Agent. This object along with the g3atmtrunkTintvl object allows the Network Manager to determine the validity of the atm trunk data in the cache and to control when the proxy agent extracts the atm trunk data from the switch.')
g3atmtrunkTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 45, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3atmtrunkTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmtrunkTintvl.setDescription('An object containing the interval for which the atm trunk data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for atm trunk data objects is received by the agent it uses the g3atmtrunkTage and g3atmtrunkTintvl objects to determine whether it should refresh the cached atmtrunkTable. If g3atmtrunkTstmp + g3atmtrunkTintvl is less than the current value of the sysUpTime object then the agent refreshes the atmtrunkTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3atmtrunkTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 45, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmtrunkTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmtrunkTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3atmtrunkTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 45, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3atmtrunkTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmtrunkTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3atmtrunkTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 45, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmtrunkTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmtrunkTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3atmtrunkTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 45, 6), )
if mibBuilder.loadTexts: g3atmtrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmtrunkTable.setDescription('A list of g3atmtrunk entries.')
g3atmtrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 45, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3atmtrunkLocation"))
if mibBuilder.loadTexts: g3atmtrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmtrunkEntry.setDescription('A g3atmtrunk entry containing objects of the g3atmtrunk information sent by the switch.')
g3atmtrunkLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 45, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmtrunkLocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmtrunkLocation.setDescription('A DisplayString Object that uniquely identifies the ATM trunk board based on its location in the system. The syntax for the Board Number is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3atmtrunkName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 45, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmtrunkName.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmtrunkName.setDescription('A DisplayString Object that identifies the ATM trunk board by name.')
g3atmtrunkSynch = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 45, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmtrunkSynch.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmtrunkSynch.setDescription('A DisplayString Object that identifies whether the ATM trunk is synchronization capable (y or n).')
g3atmportpg1Tage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1Tage.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1Tage.setDescription('The number of timeticks since the atm port data was extracted from the switch by the G3 Proxy Agent. This object along with the g3atmportpg1Tintvl object allows the Network Manager to determine the validity of the atm port data in the cache and to control when the proxy agent extracts the atm port data from the switch.')
g3atmportpg1Tintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3atmportpg1Tintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1Tintvl.setDescription('An object containing the interval for which the atm port data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for atm port data objects is received by the agent it uses the g3atmportpg1sTage and g3atmportpg1sTintvl objects to determine whether it should refresh the cached atmportpg1sTable. If g3atmportpg1sTstmp + g3atmportpg1sTintvl is less than the current value of the sysUpTime object then the agent refreshes the atmportpg1sTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3atmportpg1Tdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1Tdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1Tdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3atmportpg1Tretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3atmportpg1Tretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1Tretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3atmportpg1Tcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1Tcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1Tcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3atmportpg1Table = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6), )
if mibBuilder.loadTexts: g3atmportpg1Table.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1Table.setDescription('A list of g3atmportpg1 entries.')
g3atmportpg1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3atmportpg1Location"))
if mibBuilder.loadTexts: g3atmportpg1Entry.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1Entry.setDescription('A g3atmportpg1 entry containing objects of the g3atmportpg1 information sent by the switch.')
g3atmportpg1Location = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1Location.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1Location.setDescription('A DisplayString Object that uniquely identifies the ATM trunk board based on its location in the system. The syntax for the Board Number is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3atmportpg1SGNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber1.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber1.setDescription('An INTEGER Object that uniquely identifies the signaling group associated with the ATM ports (1 to 90) on page 1 of the form.')
g3atmportpg1SGNumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber2.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber2.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber3.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber3.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber4.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber4.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber5.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber5.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber6.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber6.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber7.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber7.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber8.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber8.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber9.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber9.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber10 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber10.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber10.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber11 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber11.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber11.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber12 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber12.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber12.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber13 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber13.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber13.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber14 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber14.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber14.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber15 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber15.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber15.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber16 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber16.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber16.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber17 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber17.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber17.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber18 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber18.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber18.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber19 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber19.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber19.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber20 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber20.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber20.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber21 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber21.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber21.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber22 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber22.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber22.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber23 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber23.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber23.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber24 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber24.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber24.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber25 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber25.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber25.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber26 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber26.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber26.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber27 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber27.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber27.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber28 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber28.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber28.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber29 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber29.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber29.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber30 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber30.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber30.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber31 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber31.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber31.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber32.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber32.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber33 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber33.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber33.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber34 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber34.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber34.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber35 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber35.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber35.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber36 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber36.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber36.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber37 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber37.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber37.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber38 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber38.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber38.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber39 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber39.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber39.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber40 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber40.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber40.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber41 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber41.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber41.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber42 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber42.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber42.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber43 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber43.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber43.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber44 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber44.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber44.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber45 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber45.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber45.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber46 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber46.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber46.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber47 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber47.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber47.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber48 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber48.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber48.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber49 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber49.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber49.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber50 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber50.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber50.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber51 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber51.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber51.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber52 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber52.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber52.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber53 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber53.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber53.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber54 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber54.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber54.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber55 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber55.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber55.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber56 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber56.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber56.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber57 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber57.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber57.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber58 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber58.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber58.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber59 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber59.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber59.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber60 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber60.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber60.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber61 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber61.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber61.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber62 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber62.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber62.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber63 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber63.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber63.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber64 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber64.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber64.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber65 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber65.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber65.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber66 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber66.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber66.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber67 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber67.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber67.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber68 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber68.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber68.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber69 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber69.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber69.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber70 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber70.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber70.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber71 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber71.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber71.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber72 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber72.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber72.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber73 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber73.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber73.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber74 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber74.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber74.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber75 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber75.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber75.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber76 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber76.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber76.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber77 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber77.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber77.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber78 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber78.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber78.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber79 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber79.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber79.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber80 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber80.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber80.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber81 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber81.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber81.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber82 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber82.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber82.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber83 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber83.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber83.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber84 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber84.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber84.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber85 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber85.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber85.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber86 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber86.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber86.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber87 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber87.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber87.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber88 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber88.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber88.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber89 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber89.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber89.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1SGNumber90 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1SGNumber90.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1SGNumber90.setDescription('See DESCRIPTION of g3atmportpg1SGNumber1.')
g3atmportpg1TGNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber1.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber1.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with the ATM ports (1 to 90) on page 1 of the form.')
g3atmportpg1TGNumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber2.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber2.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber3.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber3.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber4.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber4.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber5.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber5.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber6.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber6.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber7.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber7.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber8.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber8.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber9.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber9.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber10 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber10.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber10.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber11 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber11.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber11.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber12 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber12.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber12.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber13 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber13.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber13.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber14 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber14.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber14.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber15 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber15.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber15.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber16 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber16.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber16.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber17 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber17.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber17.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber18 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber18.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber18.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber19 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 110), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber19.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber19.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber20 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber20.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber20.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber21 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 112), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber21.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber21.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber22 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 113), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber22.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber22.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber23 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 114), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber23.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber23.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber24 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 115), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber24.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber24.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber25 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 116), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber25.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber25.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber26 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 117), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber26.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber26.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber27 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 118), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber27.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber27.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber28 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 119), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber28.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber28.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber29 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 120), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber29.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber29.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber30 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 121), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber30.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber30.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber31 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 122), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber31.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber31.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber32 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 123), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber32.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber32.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber33 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 124), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber33.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber33.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber34 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 125), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber34.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber34.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber35 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 126), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber35.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber35.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber36 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 127), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber36.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber36.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber37 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 128), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber37.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber37.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber38 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 129), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber38.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber38.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber39 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 130), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber39.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber39.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber40 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 131), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber40.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber40.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber41 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 132), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber41.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber41.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber42 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 133), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber42.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber42.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber43 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 134), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber43.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber43.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber44 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 135), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber44.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber44.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber45 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 136), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber45.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber45.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber46 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 137), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber46.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber46.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber47 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 138), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber47.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber47.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber48 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 139), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber48.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber48.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber49 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 140), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber49.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber49.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber50 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 141), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber50.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber50.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber51 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 142), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber51.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber51.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber52 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 143), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber52.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber52.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber53 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 144), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber53.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber53.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber54 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 145), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber54.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber54.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber55 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 146), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber55.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber55.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber56 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 147), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber56.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber56.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber57 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 148), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber57.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber57.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber58 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 149), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber58.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber58.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber59 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 150), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber59.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber59.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber60 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 151), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber60.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber60.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber61 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 152), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber61.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber61.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber62 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 153), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber62.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber62.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber63 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 154), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber63.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber63.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber64 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 155), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber64.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber64.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber65 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 156), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber65.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber65.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber66 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 157), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber66.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber66.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber67 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 158), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber67.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber67.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber68 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 159), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber68.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber68.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber69 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 160), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber69.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber69.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber70 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 161), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber70.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber70.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber71 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 162), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber71.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber71.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber72 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 163), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber72.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber72.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber73 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 164), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber73.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber73.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber74 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 165), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber74.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber74.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber75 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 166), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber75.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber75.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber76 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 167), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber76.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber76.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber77 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 168), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber77.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber77.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber78 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 169), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber78.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber78.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber79 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 170), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber79.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber79.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber80 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 171), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber80.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber80.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber81 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 172), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber81.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber81.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber82 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 173), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber82.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber82.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber83 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 174), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber83.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber83.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber84 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 175), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber84.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber84.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber85 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 176), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber85.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber85.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber86 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 177), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber86.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber86.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber87 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 178), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber87.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber87.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber88 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 179), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber88.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber88.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber89 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 180), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber89.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber89.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg1TGNumber90 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 46, 6, 1, 181), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg1TGNumber90.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg1TGNumber90.setDescription('See DESCRIPTION of g3atmportpg1TGNumber1.')
g3atmportpg2Tage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2Tage.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2Tage.setDescription('The number of timeticks since the atm port data was extracted from the switch by the G3 Proxy Agent. This object along with the g3atmportpg2Tintvl object allows the Network Manager to determine the validity of the atm port data in the cache and to control when the proxy agent extracts the atm port data from the switch.')
g3atmportpg2Tintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3atmportpg2Tintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2Tintvl.setDescription('An object containing the interval for which the atm port data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for atm port data objects is received by the agent it Uses the g3atmportpg2Tage and g3atmportpg2Tintvl objects to determine whether it should refresh the cached atmportpg2Table. If g3atmportpg2Tstmp + g3atmportpg2Tintvl is less than the current value of the sysUpTime object then the agent refreshes the atmportpg2Table cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3atmportpg2Tdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2Tdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2Tdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3atmportpg2Tretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3atmportpg2Tretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2Tretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3atmportpg2Tcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2Tcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2Tcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3atmportpg2Table = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6), )
if mibBuilder.loadTexts: g3atmportpg2Table.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2Table.setDescription('A list of g3atmportpg2 entries.')
g3atmportpg2Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3atmportpg2Location"))
if mibBuilder.loadTexts: g3atmportpg2Entry.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2Entry.setDescription('A g3atmportpg2 entry containing objects of the g3atmportpg2 information sent by the switch.')
g3atmportpg2Location = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2Location.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2Location.setDescription('A DisplayString Object that uniquely identifies the ATM trunk board based on its location in the system. The syntax for the Board Number is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3atmportpg2SGNumber91 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber91.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber91.setDescription('An INTEGER Object that uniquely identifies the signaling group associated with the ATM ports (91 to 180) on page 2 of the form.')
g3atmportpg2SGNumber92 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber92.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber92.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber93 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber93.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber93.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber94 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber94.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber94.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber95 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber95.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber95.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber96 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber96.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber96.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber97 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber97.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber97.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber98 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber98.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber98.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber99 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber99.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber99.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber100 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber100.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber100.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber101 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber101.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber101.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber102 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber102.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber102.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber103 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber103.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber103.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber104 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber104.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber104.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber105 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber105.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber105.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber106 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber106.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber106.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber107 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber107.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber107.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber108 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber108.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber108.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber109 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber109.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber109.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber110 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber110.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber110.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber111 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber111.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber111.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber112 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber112.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber112.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber113 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber113.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber113.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber114 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber114.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber114.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber115 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber115.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber115.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber116 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber116.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber116.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber117 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber117.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber117.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber118 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber118.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber118.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber119 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber119.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber119.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber120 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber120.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber120.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber121 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber121.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber121.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber122 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber122.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber122.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber123 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber123.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber123.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber124 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber124.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber124.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber125 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber125.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber125.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber126 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber126.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber126.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber127 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber127.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber127.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber128 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber128.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber128.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber129 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber129.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber129.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber130 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber130.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber130.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber131 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber131.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber131.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber132 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber132.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber132.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber133 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber133.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber133.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber134 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber134.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber134.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber135 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber135.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber135.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber136 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber136.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber136.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber137 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber137.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber137.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber138 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber138.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber138.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber139 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber139.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber139.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber140 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber140.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber140.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber141 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber141.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber141.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber142 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber142.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber142.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber143 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber143.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber143.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber144 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber144.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber144.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber145 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber145.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber145.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber146 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber146.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber146.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber147 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber147.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber147.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber148 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber148.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber148.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber149 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber149.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber149.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber150 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber150.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber150.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber151 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber151.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber151.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber152 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber152.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber152.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber153 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber153.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber153.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber154 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber154.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber154.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber155 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber155.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber155.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber156 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber156.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber156.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber157 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber157.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber157.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber158 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber158.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber158.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber159 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber159.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber159.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber160 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber160.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber160.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber161 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber161.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber161.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber162 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber162.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber162.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber163 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber163.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber163.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber164 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber164.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber164.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber165 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber165.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber165.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber166 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber166.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber166.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber167 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber167.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber167.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber168 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber168.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber168.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber169 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber169.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber169.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber170 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber170.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber170.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber171 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber171.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber171.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber172 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber172.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber172.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber173 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber173.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber173.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber174 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber174.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber174.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber175 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber175.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber175.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber176 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber176.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber176.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber177 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber177.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber177.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber178 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber178.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber178.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber179 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber179.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber179.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2SGNumber180 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2SGNumber180.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2SGNumber180.setDescription('See DESCRIPTION of g3atmportpg2SGNumber91.')
g3atmportpg2TGNumber91 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber91.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber91.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with the ATM ports (91 to 180) on page 2 of the form.')
g3atmportpg2TGNumber92 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber92.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber92.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber93 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber93.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber93.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber94 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber94.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber94.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber95 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber95.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber95.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber96 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber96.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber96.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber97 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber97.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber97.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber98 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber98.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber98.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber99 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber99.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber99.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber100 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber100.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber100.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber101 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber101.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber101.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber102 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber102.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber102.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber103 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber103.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber103.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber104 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber104.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber104.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber105 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber105.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber105.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber106 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber106.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber106.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber107 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber107.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber107.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber108 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber108.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber108.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber109 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 110), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber109.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber109.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber110 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber110.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber110.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber111 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 112), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber111.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber111.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber112 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 113), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber112.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber112.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber113 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 114), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber113.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber113.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber114 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 115), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber114.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber114.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber115 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 116), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber115.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber115.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber116 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 117), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber116.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber116.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber117 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 118), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber117.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber117.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber118 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 119), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber118.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber118.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber119 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 120), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber119.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber119.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber120 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 121), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber120.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber120.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber121 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 122), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber121.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber121.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber122 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 123), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber122.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber122.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber123 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 124), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber123.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber123.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber124 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 125), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber124.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber124.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber125 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 126), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber125.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber125.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber126 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 127), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber126.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber126.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber127 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 128), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber127.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber127.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber128 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 129), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber128.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber128.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber129 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 130), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber129.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber129.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber130 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 131), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber130.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber130.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber131 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 132), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber131.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber131.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber132 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 133), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber132.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber132.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber133 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 134), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber133.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber133.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber134 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 135), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber134.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber134.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber135 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 136), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber135.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber135.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber136 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 137), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber136.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber136.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber137 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 138), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber137.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber137.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber138 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 139), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber138.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber138.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber139 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 140), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber139.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber139.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber140 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 141), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber140.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber140.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber141 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 142), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber141.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber141.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber142 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 143), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber142.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber142.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber143 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 144), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber143.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber143.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber144 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 145), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber144.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber144.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber145 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 146), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber145.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber145.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber146 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 147), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber146.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber146.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber147 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 148), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber147.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber147.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber148 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 149), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber148.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber148.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber149 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 150), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber149.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber149.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber150 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 151), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber150.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber150.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber151 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 152), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber151.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber151.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber152 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 153), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber152.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber152.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber153 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 154), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber153.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber153.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber154 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 155), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber154.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber154.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber155 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 156), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber155.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber155.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber156 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 157), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber156.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber156.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber157 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 158), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber157.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber157.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber158 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 159), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber158.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber158.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber159 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 160), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber159.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber159.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber160 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 161), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber160.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber160.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber161 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 162), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber161.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber161.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber162 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 163), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber162.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber162.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber163 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 164), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber163.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber163.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber164 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 165), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber164.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber164.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber165 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 166), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber165.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber165.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber166 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 167), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber166.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber166.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber167 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 168), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber167.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber167.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber168 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 169), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber168.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber168.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber169 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 170), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber169.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber169.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber170 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 171), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber170.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber170.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber171 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 172), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber171.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber171.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber172 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 173), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber172.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber172.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber173 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 174), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber173.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber173.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber174 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 175), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber174.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber174.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber175 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 176), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber175.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber175.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber176 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 177), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber176.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber176.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber177 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 178), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber177.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber177.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber178 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 179), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber178.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber178.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber179 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 180), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber179.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber179.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg2TGNumber180 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 47, 6, 1, 181), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg2TGNumber180.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg2TGNumber180.setDescription('See DESCRIPTION of g3atmportpg2TGNumber91.')
g3atmportpg3Tage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3Tage.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3Tage.setDescription('The number of timeticks since the atm port data was extracted from the switch by the G3 Proxy Agent. This object along with the g3atmportpg3Tintvl object allows the Network Manager to determine the validity of the atm port data in the cache and to control when the proxy agent extracts the atm port data from the switch.')
g3atmportpg3Tintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3atmportpg3Tintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3Tintvl.setDescription('An object containing the interval for which the atm port data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for atm port data objects is received by the agent it uses the g3atmportpg3Tage and g3atmportpg3Tintvl objects to determine whether it should refresh the cached atmportpg3Table. If g3atmportpg3Tstmp + g3atmportpg3Tintvl is less than the current value of the sysUpTime object then the agent refreshes the atmportpg3Table cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3atmportpg3Tdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3Tdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3Tdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3atmportpg3Tretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3atmportpg3Tretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3Tretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3atmportpg3Tcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3Tcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3Tcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3atmportpg3Table = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6), )
if mibBuilder.loadTexts: g3atmportpg3Table.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3Table.setDescription('A list of g3atmportpg3 entries.')
g3atmportpg3Entry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3atmportpg3Location"))
if mibBuilder.loadTexts: g3atmportpg3Entry.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3Entry.setDescription('A g3atmportpg3 entry containing objects of the g3atmportpg3 information sent by the switch.')
g3atmportpg3Location = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3Location.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3Location.setDescription('A DisplayString Object that uniquely identifies the ATM trunk board based on its location in the system. The syntax for the Board Number is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3atmportpg3SGNumber181 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber181.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber181.setDescription('An INTEGER Object that uniquely identifies the signaling group associated with the ATM ports (181 to 244) on page 3 of the form.')
g3atmportpg3SGNumber182 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber182.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber182.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber183 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber183.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber183.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber184 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber184.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber184.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber185 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber185.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber185.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber186 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber186.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber186.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber187 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber187.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber187.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber188 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber188.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber188.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber189 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber189.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber189.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber190 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber190.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber190.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber191 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber191.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber191.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber192 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber192.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber192.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber193 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber193.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber193.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber194 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber194.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber194.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber195 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber195.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber195.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber196 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber196.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber196.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber197 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber197.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber197.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber198 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber198.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber198.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber199 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber199.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber199.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber200 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber200.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber200.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber201 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber201.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber201.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber202 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber202.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber202.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber203 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber203.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber203.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber204 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber204.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber204.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber205 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber205.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber205.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber206 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber206.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber206.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber207 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber207.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber207.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber208 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber208.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber208.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber209 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber209.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber209.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber210 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber210.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber210.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber211 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber211.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber211.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber212 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber212.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber212.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber213 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber213.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber213.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber214 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber214.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber214.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber215 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber215.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber215.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber216 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber216.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber216.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber217 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber217.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber217.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber218 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber218.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber218.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber219 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber219.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber219.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber220 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber220.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber220.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber221 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber221.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber221.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber222 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber222.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber222.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber223 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber223.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber223.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber224 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber224.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber224.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber225 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber225.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber225.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber226 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber226.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber226.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber227 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber227.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber227.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber228 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber228.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber228.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber229 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber229.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber229.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber230 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber230.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber230.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber231 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber231.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber231.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber232 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber232.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber232.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber233 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber233.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber233.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber234 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber234.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber234.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber235 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 56), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber235.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber235.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber236 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 57), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber236.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber236.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber237 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber237.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber237.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber238 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber238.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber238.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber239 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber239.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber239.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber240 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 61), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber240.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber240.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber241 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber241.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber241.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber242 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber242.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber242.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber243 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber243.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber243.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber244 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber244.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber244.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3SGNumber245 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3SGNumber245.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3SGNumber245.setDescription('See DESCRIPTION of g3atmportpg3SGNumber181.')
g3atmportpg3LSGNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LSGNumber1.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LSGNumber1.setDescription('An INTEGER Object that uniquely identifies the signaling group associated with the ATM ports (245 to 256) on page 3 of the form. The FIDs changed due to DEFINITY constraints.')
g3atmportpg3LSGNumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LSGNumber2.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LSGNumber2.setDescription('See DESCRIPTION of g3atmportpg3LSGNumber1.')
g3atmportpg3LSGNumber3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LSGNumber3.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LSGNumber3.setDescription('See DESCRIPTION of g3atmportpg3LSGNumber1.')
g3atmportpg3LSGNumber4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LSGNumber4.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LSGNumber4.setDescription('See DESCRIPTION of g3atmportpg3LSGNumber1.')
g3atmportpg3LSGNumber5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LSGNumber5.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LSGNumber5.setDescription('See DESCRIPTION of g3atmportpg3LSGNumber1.')
g3atmportpg3LSGNumber6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LSGNumber6.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LSGNumber6.setDescription('See DESCRIPTION of g3atmportpg3LSGNumber1.')
g3atmportpg3LSGNumber7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LSGNumber7.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LSGNumber7.setDescription('See DESCRIPTION of g3atmportpg3LSGNumber1.')
g3atmportpg3LSGNumber8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 74), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LSGNumber8.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LSGNumber8.setDescription('See DESCRIPTION of g3atmportpg3LSGNumber1.')
g3atmportpg3LSGNumber9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LSGNumber9.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LSGNumber9.setDescription('See DESCRIPTION of g3atmportpg3LSGNumber1.')
g3atmportpg3LSGNumber10 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 76), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LSGNumber10.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LSGNumber10.setDescription('See DESCRIPTION of g3atmportpg3LSGNumber1.')
g3atmportpg3LSGNumber11 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 77), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LSGNumber11.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LSGNumber11.setDescription('See DESCRIPTION of g3atmportpg3LSGNumber1.')
g3atmportpg3TGNumber181 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 78), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber181.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber181.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with the ATM ports (181 to 244) on page 3 of the form.')
g3atmportpg3TGNumber182 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 79), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber182.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber182.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber183 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 80), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber183.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber183.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber184 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber184.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber184.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber185 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber185.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber185.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber186 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 83), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber186.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber186.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber187 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 84), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber187.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber187.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber188 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 85), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber188.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber188.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber189 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 86), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber189.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber189.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber190 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 87), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber190.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber190.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber191 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 88), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber191.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber191.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber192 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 89), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber192.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber192.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber193 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 90), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber193.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber193.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber194 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 91), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber194.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber194.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber195 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 92), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber195.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber195.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber196 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 93), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber196.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber196.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber197 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 94), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber197.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber197.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber198 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 95), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber198.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber198.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber199 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 96), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber199.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber199.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber200 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 97), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber200.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber200.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber201 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 98), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber201.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber201.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber202 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 99), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber202.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber202.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber203 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 100), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber203.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber203.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber204 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 101), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber204.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber204.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber205 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 102), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber205.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber205.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber206 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 103), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber206.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber206.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber207 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 104), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber207.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber207.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber208 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 105), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber208.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber208.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber209 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 106), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber209.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber209.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber210 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 107), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber210.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber210.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber211 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 108), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber211.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber211.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber212 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 109), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber212.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber212.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber213 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 110), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber213.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber213.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber214 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 111), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber214.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber214.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber215 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 112), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber215.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber215.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber216 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 113), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber216.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber216.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber217 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 114), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber217.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber217.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber218 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 115), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber218.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber218.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber219 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 116), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber219.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber219.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber220 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 117), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber220.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber220.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber221 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 118), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber221.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber221.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber222 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 119), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber222.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber222.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber223 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 120), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber223.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber223.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber224 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 121), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber224.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber224.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber225 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 122), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber225.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber225.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber226 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 123), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber226.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber226.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber227 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 124), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber227.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber227.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber228 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 125), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber228.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber228.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber229 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 126), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber229.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber229.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber230 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 127), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber230.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber230.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber231 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 128), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber231.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber231.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber232 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 129), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber232.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber232.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber233 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 130), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber233.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber233.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber234 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 131), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber234.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber234.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber235 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 132), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber235.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber235.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber236 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 133), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber236.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber236.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber237 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 134), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber237.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber237.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber238 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 135), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber238.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber238.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber239 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 136), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber239.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber239.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber240 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 137), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber240.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber240.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber241 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 138), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber241.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber241.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber242 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 139), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber242.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber242.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber243 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 140), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber243.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber243.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber244 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 141), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber244.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber244.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3TGNumber245 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 142), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3TGNumber245.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3TGNumber245.setDescription('See DESCRIPTION of g3atmportpg3TGNumber181.')
g3atmportpg3LTGNumber1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 143), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LTGNumber1.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LTGNumber1.setDescription('An INTEGER Object that uniquely identifies the trunk group associated with the ATM ports (245 to 256) on page 3 of the form. The FIDs changed due to DEFINITY constraints.')
g3atmportpg3LTGNumber2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 144), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LTGNumber2.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LTGNumber2.setDescription('See DESCRIPTION of g3atmportpg3LTGNumber1.')
g3atmportpg3LTGNumber3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 145), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LTGNumber3.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LTGNumber3.setDescription('See DESCRIPTION of g3atmportpg3LTGNumber1.')
g3atmportpg3LTGNumber4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 146), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LTGNumber4.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LTGNumber4.setDescription('See DESCRIPTION of g3atmportpg3LTGNumber1.')
g3atmportpg3LTGNumber5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 147), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LTGNumber5.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LTGNumber5.setDescription('See DESCRIPTION of g3atmportpg3LTGNumber1.')
g3atmportpg3LTGNumber6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 148), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LTGNumber6.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LTGNumber6.setDescription('See DESCRIPTION of g3atmportpg3LTGNumber1.')
g3atmportpg3LTGNumber7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 149), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LTGNumber7.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LTGNumber7.setDescription('See DESCRIPTION of g3atmportpg3LTGNumber1.')
g3atmportpg3LTGNumber8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 150), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LTGNumber8.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LTGNumber8.setDescription('See DESCRIPTION of g3atmportpg3LTGNumber1.')
g3atmportpg3LTGNumber9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 151), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LTGNumber9.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LTGNumber9.setDescription('See DESCRIPTION of g3atmportpg3LTGNumber1.')
g3atmportpg3LTGNumber10 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 152), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LTGNumber10.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LTGNumber10.setDescription('See DESCRIPTION of g3atmportpg3LTGNumber1.')
g3atmportpg3LTGNumber11 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 48, 6, 1, 153), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmportpg3LTGNumber11.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmportpg3LTGNumber11.setDescription('See DESCRIPTION of g3atmportpg3LTGNumber1.')
g3dmoduleTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 49, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3dmoduleTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3dmoduleTage.setDescription('The number of timeticks since the data-module data was last extracted from the switch by the Proxy Agent. This object along with the g3dmoduleintvl object allows the Network Manager to determine the validity of the data-module data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3dmoduleTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 49, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3dmoduleTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3dmoduleTintvl.setDescription('An object containing the interval for which the data-module data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these data-module data objects is received by the agent it uses the g3dmoduleage and g3dmoduleintvl objects to determine whether it should refresh the cached dmoduleTable. If g3dmodulestmp + g3dmoduleintvl is less than the current value of the sysUpTime object then the agent refreshes the dmoduleTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3dmoduleTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 49, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3dmoduleTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3dmoduleTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3dmoduleTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 49, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3dmoduleTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3dmoduleTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3dmoduleTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 49, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3dmoduleTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3dmoduleTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3dmoduleTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 49, 6), )
if mibBuilder.loadTexts: g3dmoduleTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3dmoduleTable.setDescription('A list of g3dmodule entries.')
g3dmoduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 49, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3dmoduleExtension"))
if mibBuilder.loadTexts: g3dmoduleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3dmoduleEntry.setDescription('A g3dmodule entry containing objects of the g3dmodule information sent by the switch.')
g3dmoduleExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 49, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3dmoduleExtension.setStatus('mandatory')
if mibBuilder.loadTexts: g3dmoduleExtension.setDescription('A DisplayString Object that uniquely identifies an administered data module.')
g3dmoduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 49, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3dmoduleType.setStatus('mandatory')
if mibBuilder.loadTexts: g3dmoduleType.setDescription('A DisplayString Object containing the data module type.')
g3dmoduleName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 49, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3dmoduleName.setStatus('mandatory')
if mibBuilder.loadTexts: g3dmoduleName.setDescription('A DisplayString Object containing the name assigned to the data module.')
g3dmodulePort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 49, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3dmodulePort.setStatus('mandatory')
if mibBuilder.loadTexts: g3dmodulePort.setDescription('A DisplayString Object that uniquely identifies a data-module port based on its location in the system. The syntax for the Port location is as follows: cabinet(01-44):carrier(A-E):slot(01-20):port(01-32).')
g3occsumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumTage.setDescription('The number of timeticks since the occupancy summary data was last extracted from the switch by the Proxy Agent. This object along with the g3occsumintvl object allows the Network Manager to determine the validity of the occupancy summary data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3occsumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3occsumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumTintvl.setDescription('An object containing the interval for which the occupancy summary data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for occupancy summary objects is received by the agent it uses the g3occsumage and g3occsumintvl objects to determine whether it should refresh the cached occsumTable. If g3occsumstmp + g3occsumintvl is less than the current value of the sysUpTime object then the agent refreshes the occsumTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3occsumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3occsumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3occsumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3occsumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3occsumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6), )
if mibBuilder.loadTexts: g3occsumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumTable.setDescription('A list of g3occsum entries.')
g3occsumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3occsumMeasHour"))
if mibBuilder.loadTexts: g3occsumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumEntry.setDescription('A g3occsum entry containing objects of the g3occsum information sent by the switch.')
g3occsumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumMeasHour.setDescription('An object containing the Peak Hour for occupancy.')
g3occsumRunYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumRunYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumRunYear.setDescription('An object containing the Year the command was executed.')
g3occsumRunMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumRunMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumRunMonth.setDescription('An object containing the Month the command was executed.')
g3occsumRunDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumRunDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumRunDay.setDescription('An object containing the Day the command was executed.')
g3occsumRunHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumRunHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumRunHour.setDescription('An object containing the Hour the measurement was taken.')
g3occsumPeakHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumPeakHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumPeakHour.setDescription('An object containing the Hour the command was executed.')
g3occsumStatOcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumStatOcc.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumStatOcc.setDescription('An object containing the processor utilized by static processes.')
g3occsumCPOcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumCPOcc.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumCPOcc.setDescription('An object containing the processor occupancy utilized by Call Processing processes.')
g3occsumSMOcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumSMOcc.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumSMOcc.setDescription('An object containing the processor occupancy utilized by System Management processes.')
g3occsumIdleOcc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumIdleOcc.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumIdleOcc.setDescription('An object containing the processor occupancy that is unused.')
g3occsumTotCall = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumTotCall.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumTotCall.setDescription('An object containing total calls connected for the measurement hour.')
g3occsumTandCall = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumTandCall.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumTandCall.setDescription('An object containing trunk-to-trunk calls connected for the measurement hour.')
g3occsumTotAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumTotAtt.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumTotAtt.setDescription('An object containing the total calls attempted for the measurement hour.')
g3occsumIntcomAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumIntcomAtt.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumIntcomAtt.setDescription('An object containing the number of extension-to-extension calls on the same switch and partially completed calls for the measurement hour.')
g3occsumIncAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumIncAtt.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumIncAtt.setDescription('An object containing the number of incoming trunk seizures from public network facilities.')
g3occsumOutAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumOutAtt.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumOutAtt.setDescription('An object containing the number of outgoing trunk seizures that are made over public network facilities.')
g3occsumPnetAtt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 50, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3occsumPnetAtt.setStatus('mandatory')
if mibBuilder.loadTexts: g3occsumPnetAtt.setDescription('The number of incoming and outgoing seizures that are made over')
g3attdgrpTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpTage.setDescription('The number of timeticks since the attendant group data was last extracted from the switch by the Proxy Agent. This object along with the g3attdgrpintvl object allows the Network Manager to determine the validity of the attendant group data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3attdgrpTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3attdgrpTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpTintvl.setDescription('An object containing the interval for which the attendant group data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for attendant group objects is received by the agent it uses the g3attdgrpage and g3attdgrpintvl objects to determine whether it should refresh the cached attdgrpTable. If g3attdgrpstmp + g3attdgrpintvl is less than the current value of the sysUpTime object then the agent refreshes the attdgrpTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3attdgrpTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3attdgrpTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3attdgrpTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3attdgrpTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3attdgrpTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6), )
if mibBuilder.loadTexts: g3attdgrpTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpTable.setDescription('A list of g3attdgrp entries.')
g3attdgrpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3attdgrpMeasType"))
if mibBuilder.loadTexts: g3attdgrpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpEntry.setDescription('A g3attdgrp entry containing objects of the g3attdgrp information sent by the switch.')
g3attdgrpMeasType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpMeasType.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpMeasType.setDescription('A DisplayString object containing the measurement type (YEST PEAK, TODAY PEAK, LASTHOUR).')
g3attdgrpMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpMeasHour.setDescription('An object containing the Hour the measurement was taken.')
g3attdgrpRunYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpRunYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpRunYear.setDescription('An object containing the Year the command was executed.')
g3attdgrpRunMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpRunMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpRunMonth.setDescription('An object containing the Month the command was executed.')
g3attdgrpRunDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpRunDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpRunDay.setDescription('An object containing the Day the command was executed.')
g3attdgrpRunHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpRunHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpRunHour.setDescription('An object containing the Hour the command was executed.')
g3attdgrpGrpSiz = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpGrpSiz.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpGrpSiz.setDescription('An object containing the number of attendant positions that are administered for the groups.')
g3attdgrpCallsAns = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpCallsAns.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpCallsAns.setDescription('An object containing the number of calls answered by all active attendants during the measurement hour.')
g3attdgrpCallsAbnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpCallsAbnd.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpCallsAbnd.setDescription('An object containing the number of calls that ring an attendant group and drop (hang up) before an attendant answers.')
g3attdgrpCallsQued = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpCallsQued.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpCallsQued.setDescription('An object containing the total number of calls that were placed in the attendant queue (delayed) because no attendants were available.')
g3attdgrpCallsHAbd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpCallsHAbd.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpCallsHAbd.setDescription('An object containing the number of calls that abandon while the caller is in hold mode.')
g3attdgrpCallsHeld = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpCallsHeld.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpCallsHeld.setDescription('An object containing the number of calls that are answered by the attendant group and then placed on hold.')
g3attdgrpTimeAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpTimeAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpTimeAvail.setDescription('An object containing the time during which the pos avail lamp is lit on all attendant consoles, and the attendants are not talking on calls but are available to handle new calls (in CCS).')
g3attdgrpTimeTalk = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpTimeTalk.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpTimeTalk.setDescription('An object containing the time that attendants are active or talking on a loop (in CCS).')
g3attdgrpTimeHeld = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpTimeHeld.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpTimeHeld.setDescription('An object containing the time that attendants have calls on hold (in seconds).')
g3attdgrpTimeAbnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpTimeAbnd.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpTimeAbnd.setDescription('An object containing the average amount of time that calls spend in queue and/or ringing at the console before the caller hangs up (in seconds).')
g3attdgrpSpeedAns = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 51, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdgrpSpeedAns.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdgrpSpeedAns.setDescription('An object containing the average elapsed time from when a call terminates at the attendant group to when the call is answered by an attendant (in seconds).')
g3attdposTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposTage.setDescription('The number of timeticks since the attendant position data was last extracted from the switch by the Proxy Agent. This object along with the g3attdposintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3attdposTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3attdposTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposTintvl.setDescription('An object containing the interval for which the attendant position data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for attendant position objects is received by the agent it uses the g3attdposage and g3attdposintvl objects to determine whether it should refresh the cached attdposTable. If g3attdposstmp + g3attdposintvl is less than the current value of the sysUpTime object then the agent refreshes the attdposTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3attdposTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3attdposTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3attdposTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3attdposTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3attdposTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6), )
if mibBuilder.loadTexts: g3attdposTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposTable.setDescription('A list of g3attdpos entries.')
g3attdposEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3attdposAttdID"))
if mibBuilder.loadTexts: g3attdposEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposEntry.setDescription('A g3attdpos entry containing objects of the g3attdpos information sent by the switch.')
g3attdposAttdID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposAttdID.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposAttdID.setDescription('An object containing an attendant number to identify which attendant data is being displayed.')
g3attdposYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposYear.setDescription('An object containing the Year the command was executed.')
g3attdposMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposMonth.setDescription('An object containing the Month the command was executed.')
g3attdposDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposDay.setDescription('An object containing the Day the command was executed.')
g3attdposHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposHour.setDescription('An object containing the Hour the command was executed.')
g3attdposPeakHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposPeakHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposPeakHour.setDescription('An object containing the peak measurement hour.')
g3attdposPkTimeAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposPkTimeAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposPkTimeAvail.setDescription('An object containing the total time the attendant is availiable to receive calls during the polling interval (in CCS).')
g3attdposPkTimeTalk = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposPkTimeTalk.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposPkTimeTalk.setDescription('An object containing the total time the attendant is active on calls (in CCS).')
g3attdposPkTimeHeld = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposPkTimeHeld.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposPkTimeHeld.setDescription('An object containing the total time the attendant has calls on hold (in seconds).')
g3attdposPkCallsAns = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposPkCallsAns.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposPkCallsAns.setDescription('An object containing the total number of calls answered by the attendant (in CCS).')
g3attdposLastHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposLastHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposLastHour.setDescription('An object containing the last measurement hour.')
g3attdposTimeAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposTimeAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposTimeAvail.setDescription('An object containing the total time the attendant is availiable to receive calls during the polling interval (in CCS).')
g3attdposTimeTalk = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposTimeTalk.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposTimeTalk.setDescription('An object containing the total time the attendant is active on calls (in CCS).')
g3attdposTimeHeld = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposTimeHeld.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposTimeHeld.setDescription('An object containing the total time the attendant has calls on hold (in seconds).')
g3attdposCallsAns = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 52, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3attdposCallsAns.setStatus('mandatory')
if mibBuilder.loadTexts: g3attdposCallsAns.setDescription('An object containing the total number of calls answered by the attendant (in CCS).')
g3trunksumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumTage.setDescription('The number of timeticks since the trunk summary data was last extracted from the switch by the Proxy Agent. This object along with the g3trunksumintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3trunksumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trunksumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumTintvl.setDescription('An object containing the interval for which the trunk summary data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for trunk summary objects is received by the agent it uses the g3trunksumage and g3trunksumintvl objects to determine whether it should refresh the cached trunksumTable. If g3trunksumstmp + g3trunksumintvl is less than the current value of the sysUpTime object then the agent refreshes the trunksumTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3trunksumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3trunksumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trunksumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3trunksumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3trunksumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6), )
if mibBuilder.loadTexts: g3trunksumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumTable.setDescription('A list of g3trunksum entries.')
g3trunksumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3trunksumTrunkGroup"))
if mibBuilder.loadTexts: g3trunksumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumEntry.setDescription('A g3trunksum entry containing objects of the g3trunksum information sent by the switch.')
g3trunksumTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumTrunkGroup.setDescription('An object containing the trunk group number for which data has been collected.')
g3trunksumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumMeasHour.setDescription('An object containing the Hour the measurement was taken.')
g3trunksumRunYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumRunYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumRunYear.setDescription('An object containing the Year the command was executed.')
g3trunksumRunMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumRunMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumRunMonth.setDescription('An object containing the Month the command was executed.')
g3trunksumRunDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumRunDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumRunDay.setDescription('An object containing the Day the command was executed.')
g3trunksumRunHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumRunHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumRunHour.setDescription('An object containing the Hour the command was executed.')
g3trunksumGroupSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumGroupSize.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumGroupSize.setDescription('An object containing the number of administered trunks in the trunk group.')
g3trunksumTotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumTotalUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumTotalUsage.setDescription('An object containing the total time trunks are busy with calls during the measurement period (in CCS).')
g3trunksumTotalSeize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumTotalSeize.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumTotalSeize.setDescription("An object containing the number of times a trunk was seized in the group including false starts, don't answer and busy.")
g3trunksumIncSeize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumIncSeize.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumIncSeize.setDescription('An object containing the number of incoming seizures carried on the trunk group.')
g3trunksumGrpOvfl = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumGrpOvfl.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumGrpOvfl.setDescription('An object containing the number of calls offered to a trunk group that are not carried or queued.')
g3trunksumQueSiz = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumQueSiz.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumQueSiz.setDescription('An object containing a number (0-100) that identifies the number of slots assigned to the trunk group queue.')
g3trunksumCallQued = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumCallQued.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumCallQued.setDescription('An object containing the total number of calls that entered the trunk group queue after finding all trunks busy.')
g3trunksumQueOvf = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumQueOvf.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumQueOvf.setDescription('An object containing the total number of calls that were not queued because the queue was full.')
g3trunksumQueAbd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumQueAbd.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumQueAbd.setDescription('An object containing the total number of calls that were removed from the queue (i.e., due to queue timeout or user cancel)')
g3trunksumOutSrv = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumOutSrv.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumOutSrv.setDescription('An object containing the number of trunks in the group that are out of service (maintenance busy).')
g3trunksumPercentAtb = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumPercentAtb.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumPercentAtb.setDescription('An object containing the percentage of time all trunks in the group were simultaneously in use.')
g3trunksumPercentOutBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 53, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunksumPercentOutBlk.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunksumPercentOutBlk.setDescription('An object containing the percentage of offered calls that are not carried on the group.')
g3pktrunksumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumTage.setDescription('The number of timeticks since the trunk summary data was last extracted from the switch by the Proxy Agent. This object along with the g3trunksumintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pktrunksumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pktrunksumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumTintvl.setDescription('An object containing the interval for which the trunk summary data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for trunk summary objects is received by the agent it uses the g3trunksumage and g3trunksumintvl objects to determine whether it should refresh the cached trunksumTable. If g3trunksumstmp + g3trunksumintvl is less than the current value of the sysUpTime object then the agent refreshes the trunksumTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pktrunksumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pktrunksumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pktrunksumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pktrunksumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pktrunksumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6), )
if mibBuilder.loadTexts: g3pktrunksumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumTable.setDescription('A list of g3pktrunksum entries.')
g3pktrunksumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pktrunksumTrunkGroup"))
if mibBuilder.loadTexts: g3pktrunksumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumEntry.setDescription('A g3pktrunksum entry containing objects of the g3pktrunksum information sent by the switch.')
g3pktrunksumTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumTrunkGroup.setDescription('An object containing the trunk group number for which data has been collected.')
g3pktrunksumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumMeasHour.setDescription('An object containing the Hour the measurement was taken.')
g3pktrunksumRunYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumRunYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumRunYear.setDescription('An object containing the Year the command was executed.')
g3pktrunksumRunMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumRunMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumRunMonth.setDescription('An object containing the Month the command was executed.')
g3pktrunksumRunDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumRunDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumRunDay.setDescription('An object containing the Day the command was executed.')
g3pktrunksumRunHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumRunHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumRunHour.setDescription('An object containing the Hour the command was executed.')
g3pktrunksumGroupSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumGroupSize.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumGroupSize.setDescription('An object containing the number of administered trunks in the trunk group.')
g3pktrunksumTotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumTotalUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumTotalUsage.setDescription('An object containing the total time trunks are busy with calls during the measurement period (in CCS).')
g3pktrunksumTotalSeize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumTotalSeize.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumTotalSeize.setDescription("An object containing the number of times a trunk was seized in the group including false starts, don't answer and busy.")
g3pktrunksumIncSeize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumIncSeize.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumIncSeize.setDescription('An object containing the number of incoming seizures carried on the trunk group.')
g3pktrunksumGrpOvfl = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumGrpOvfl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumGrpOvfl.setDescription('An object containing the number of calls offered to a trunk group that are not carried or queued.')
g3pktrunksumQueSiz = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumQueSiz.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumQueSiz.setDescription('An object containing a number (0-100) that identifies the number of slots assigned to the trunk group queue.')
g3pktrunksumCallQued = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumCallQued.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumCallQued.setDescription('An object containing the total number of calls that entered the trunk group queue after finding all trunks busy.')
g3pktrunksumQueOvf = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumQueOvf.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumQueOvf.setDescription('An object containing the total number of calls that were not queued because the queue was full.')
g3pktrunksumQueAbd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumQueAbd.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumQueAbd.setDescription('An object containing the total number of calls that were removed from the queue (i.e., due to queue timeout or user cancel)')
g3pktrunksumOutSrv = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumOutSrv.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumOutSrv.setDescription('An object containing the number of trunks in the group that are out of service (maintenance busy).')
g3pktrunksumPercentAtb = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumPercentAtb.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumPercentAtb.setDescription('An object containing the percentage of time all trunks in the group were simultaneously in use.')
g3pktrunksumPercentOutBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 54, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunksumPercentOutBlk.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunksumPercentOutBlk.setDescription('An object containing the percentage of offered calls that are not carried on the group.')
g3trunkwbsumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumTage.setDescription('The number of timeticks since the wideband trunk summary data was last extracted from the switch by the Proxy Agent. This object along with the g3trunkwbsumintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3trunkwbsumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trunkwbsumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumTintvl.setDescription('An object containing the interval for which the wideband trunk summary data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for wideband trunk summary objects is received by the agent it uses the g3trunkwbsumage and g3trunkwbsumintvl objects to determine whether it should refresh the cached trunkwbsumTable. If g3trunkwbsumstmp + g3trunkwbsumintvl is less than the current value of the sysUpTime object then the agent refreshes the trunkwbsumTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3trunkwbsumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3trunkwbsumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trunkwbsumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3trunkwbsumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3trunkwbsumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6), )
if mibBuilder.loadTexts: g3trunkwbsumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumTable.setDescription('A list of g3trunkwbsum entries.')
g3trunkwbsumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3trunkwbsumTrunkGroup"))
if mibBuilder.loadTexts: g3trunkwbsumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumEntry.setDescription('A g3trunkwbsum entry containing objects of the g3trunkwbsum information sent by the switch.')
g3trunkwbsumTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumTrunkGroup.setDescription('An object containing the trunk group number for which data has been collected.')
g3trunkwbsumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumMeasHour.setDescription('An object containing the Hour the measurement was taken.')
g3trunkwbsumYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumYear.setDescription('An object containing the Year the command was executed.')
g3trunkwbsumMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumMonth.setDescription('An object containing the Month the command was executed.')
g3trunkwbsumDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumDay.setDescription('An object containing the Day the command was executed.')
g3trunkwbsumHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumHour.setDescription('An object containing the Hour the command was executed.')
g3trunkwbsumTotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumTotalUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumTotalUsage.setDescription('An object containing the total wideband call usage for all trunks in the trunk group (in CCS).')
g3trunkwbsumTotalSeize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumTotalSeize.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumTotalSeize.setDescription('An object containing the number of wideband call attempts.')
g3trunkwbsumIncSeize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumIncSeize.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumIncSeize.setDescription('An object containing the number of wideband incoming call attempts.')
g3trunkwbsumGrpOvfl = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumGrpOvfl.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumGrpOvfl.setDescription("An object containing the number of wideband outgoing calls that were attempted when the remaining trunk group capacity was insufficient to accommodate the call or the trunk group's remaining bandwidth was in the wrong configuration.")
g3trunkwbsumOutSrv = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumOutSrv.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumOutSrv.setDescription('An object containing the number of wideband trunks in the group that are out of service (listed as maintenance busy).')
g3trunkwbsumPercentAtb = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumPercentAtb.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumPercentAtb.setDescription('An object containing the percentage of time that all trunks in the trunk group were simultaneously in use during the measurement interval.')
g3trunkwbsumPercentOutBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 55, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkwbsumPercentOutBlk.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkwbsumPercentOutBlk.setDescription('An object containing the percentage of offered wideband calls that are not carried on the trunk group.')
g3pktrunkwbsumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumTage.setDescription('The number of timeticks since the wideband trunk summary data was last extracted from the switch by the Proxy Agent. This object along with the g3trunkwbsumintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pktrunkwbsumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pktrunkwbsumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumTintvl.setDescription('An object containing the interval for which the wideband trunk summary data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for wideband trunk summary objects is received by the agent it uses the g3trunkwbsumage and g3trunkwbsumintvl objects to determine whether it should refresh the cached trunkwbsumTable. If g3trunkwbsumstmp + g3trunkwbsumintvl is less than the current value of the sysUpTime object then the agent refreshes the trunkwbsumTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pktrunkwbsumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pktrunkwbsumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pktrunkwbsumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pktrunkwbsumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pktrunkwbsumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6), )
if mibBuilder.loadTexts: g3pktrunkwbsumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumTable.setDescription('A list of g3pktrunkwbsum entries.')
g3pktrunkwbsumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pktrunkwbsumTrunkGroup"))
if mibBuilder.loadTexts: g3pktrunkwbsumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumEntry.setDescription('A g3pktrunkwbsum entry containing objects of the g3pktrunkwbsum information sent by the switch.')
g3pktrunkwbsumTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumTrunkGroup.setDescription('An object containing the trunk group number for which data has been collected.')
g3pktrunkwbsumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumMeasHour.setDescription('An object containing the Hour the measurement was taken.')
g3pktrunkwbsumYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumYear.setDescription('An object containing the Year the command was executed.')
g3pktrunkwbsumMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumMonth.setDescription('An object containing the Month the command was executed.')
g3pktrunkwbsumDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumDay.setDescription('An object containing the Day the command was executed.')
g3pktrunkwbsumHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumHour.setDescription('An object containing the Hour the command was executed.')
g3pktrunkwbsumTotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumTotalUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumTotalUsage.setDescription('An object containing the total wideband call usage for all trunks in the trunk group (in CCS).')
g3pktrunkwbsumTotalSeize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumTotalSeize.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumTotalSeize.setDescription('An object containing the number of wideband call attempts.')
g3pktrunkwbsumIncSeize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumIncSeize.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumIncSeize.setDescription('An object containing the number of wideband incoming call attempts.')
g3pktrunkwbsumGrpOvfl = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumGrpOvfl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumGrpOvfl.setDescription("An object containing the number of wideband outgoing calls that were attempted when the remaining trunk group capacity was insufficient to accommodate the call or the trunk group's remaining bandwidth was in the wrong configuration.")
g3pktrunkwbsumOutSrv = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumOutSrv.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumOutSrv.setDescription('An object containing the number of wideband trunks in the group that are out of service (listed as maintenance busy).')
g3pktrunkwbsumPercentAtb = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumPercentAtb.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumPercentAtb.setDescription('An object containing the percentage of time that all trunks in the trunk group were simultaneously in use during the measurement interval.')
g3pktrunkwbsumPercentOutBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 56, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkwbsumPercentOutBlk.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkwbsumPercentOutBlk.setDescription('An object containing the percentage of offered wideband calls that are not carried on the trunk group.')
g3pktrunkoutTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkoutTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkoutTage.setDescription('The number of timeticks since the outage trunk data was last extracted from the switch by the Proxy Agent. This object along with the g3pktrunkoutintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pktrunkoutTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pktrunkoutTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkoutTintvl.setDescription('An object containing the interval for which the trunk outage data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for trunk outage objects is received by the agent it uses the g3pktrunkoutage and g3pktrunkoutintvl objects to determine whether it should refresh the cached pktrunkoutTable. If g3pktrunkoutstmp + g3pktrunkoutintvl is less than the current value of the sysUpTime object then the agent refreshes the pktrunkoutTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pktrunkoutTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkoutTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkoutTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pktrunkoutTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pktrunkoutTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkoutTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pktrunkoutTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkoutTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkoutTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pktrunkoutTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57, 6), )
if mibBuilder.loadTexts: g3pktrunkoutTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkoutTable.setDescription('A list of g3pktrunkout entries.')
g3pktrunkoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pktrunkoutTrunkGroup"), (0, "G3-AVAYA-MIB", "g3pktrunkoutMember"))
if mibBuilder.loadTexts: g3pktrunkoutEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkoutEntry.setDescription('A g3pktrunkout entry containing objects of the g3pktrunkout information sent by the switch.')
g3pktrunkoutTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkoutTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkoutTrunkGroup.setDescription('An object containing the trunk group number.')
g3pktrunkoutMember = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkoutMember.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkoutMember.setDescription('An object containing the group member number.')
g3pktrunkoutYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkoutYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkoutYear.setDescription('An object containing the Year the command was executed.')
g3pktrunkoutMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkoutMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkoutMonth.setDescription('An object containing the Month the command was executed.')
g3pktrunkoutDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkoutDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkoutDay.setDescription('An object containing the Day the command was executed.')
g3pktrunkoutHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkoutHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkoutHour.setDescription('An object containing the Hour the command was executed.')
g3pktrunkoutOutages = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 57, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunkoutOutages.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunkoutOutages.setDescription('An object containing the number of times the group member is sampled as out of service over the measurement period.')
g3pktrunklightTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunklightTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunklightTage.setDescription('The number of timeticks since the lightly used trunk data was last extracted from the switch by the Proxy Agent. This object along with the g3pktrunklightintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pktrunklightTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pktrunklightTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunklightTintvl.setDescription('An object containing the interval for which the lightly used trunk data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for lightly used trunk objects is received by the agent it uses the g3pktrunklightage and g3pktrunklightintvl objects to determine whether it should refresh the cached pktrunklightTable. If g3pktrunklightstmp+g3pktrunklightintvl is less than the current value of the sysUpTime object then the agent refreshes the pktrunklightTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pktrunklightTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunklightTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunklightTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pktrunklightTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pktrunklightTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunklightTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pktrunklightTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunklightTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunklightTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pktrunklightTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58, 6), )
if mibBuilder.loadTexts: g3pktrunklightTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunklightTable.setDescription('A list of g3pktrunklight entries.')
g3pktrunklightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pktrunklightTrunkGroup"), (0, "G3-AVAYA-MIB", "g3pktrunklightMember"))
if mibBuilder.loadTexts: g3pktrunklightEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunklightEntry.setDescription('A g3pktrunklight entry containing objects of the g3pktrunklight information sent by the switch.')
g3pktrunklightTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunklightTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunklightTrunkGroup.setDescription('An object containing the trunk group number.')
g3pktrunklightMember = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunklightMember.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunklightMember.setDescription('An object containing the group member number.')
g3pktrunklightYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunklightYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunklightYear.setDescription('An object containing the Year the command was executed.')
g3pktrunklightMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunklightMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunklightMonth.setDescription('An object containing the Month the command was executed.')
g3pktrunklightDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunklightDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunklightDay.setDescription('An object containing the Day the command was executed.')
g3pktrunklightHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunklightHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunklightHour.setDescription('An object containing the Hour the command was executed.')
g3pktrunklightCarried = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 58, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktrunklightCarried.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktrunklightCarried.setDescription('An object containing the number of calls carried on the trunk member over the measurement interval.')
g3pnblockTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockTage.setDescription('The number of timeticks since the port network blockage data was last extracted from the switch by the Proxy Agent. This object along with the g3pnblockintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pnblockTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pnblockTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockTintvl.setDescription('An object containing the interval for which the port network blockage data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for port network blockage objects is received by the agent it uses the g3pnblockage and g3pnblockintvl objects to determine whether it should refresh the cached pnblockTable. If g3pnblockstmp + g3pnblockintvl is less than the current value of the sysUpTime object then the agent refreshes the pnblockTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pnblockTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pnblockTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pnblockTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pnblockTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pnblockTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6), )
if mibBuilder.loadTexts: g3pnblockTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockTable.setDescription('A list of g3pnblock entries.')
g3pnblockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pnblockPNNumber"))
if mibBuilder.loadTexts: g3pnblockEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockEntry.setDescription('A g3pnblock entry containing objects of the g3pnblock information sent by the switch.')
g3pnblockPNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockPNNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockPNNumber.setDescription('An object containing the Port Network number.')
g3pnblockMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockMeasHour.setDescription('An object containing the Hour the measurement was taken.')
g3pnblockYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockYear.setDescription('An object containing the Year the command was executed.')
g3pnblockMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockMonth.setDescription('An object containing the Month the command was executed.')
g3pnblockDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockDay.setDescription('An object containing the Day the command was executed.')
g3pnblockHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockHour.setDescription('An object containing the Hour the command was executed.')
g3pnblockTdmUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockTdmUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockTdmUsage.setDescription('An object containing the total TDM time-slot usage.')
g3pnblockTdmPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockTdmPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockTdmPeg.setDescription('An object containing the total count of circuit switch TDM time-slot seizure attempts for the PN.')
g3pnblockTdmPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockTdmPeak.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockTdmPeak.setDescription('An object containing the maximum number of time-slots allocated at any one time.')
g3pnblockTdmBlockage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockTdmBlockage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockTdmBlockage.setDescription('An object containing the total count of TDM blockages, that is, the total number of times a TDM time-slot request is denied for the PN.')
g3pnblockTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockTimeSlots.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockTimeSlots.setDescription('An object containing the number of PN link time-slots available between port networks or between Port Networks and Switch Nodes.')
g3pnblockPNlinkUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockPNlinkUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockPNlinkUsage.setDescription('An object containing the total circuit switch usage of the available PN link(s) connecting the PN to the SN or to other PNs.')
g3pnblockPNlinkPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockPNlinkPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockPNlinkPeg.setDescription('An object containing the total count of circuit switched time-slot seizure attempts for the link(s).')
g3pnblockPNlinkPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockPNlinkPeak.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockPNlinkPeak.setDescription('An object containing the maximum number of time slots allocated at any one time on the PN links.')
g3pnblockPNlinkBlockage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 59, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pnblockPNlinkBlockage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pnblockPNlinkBlockage.setDescription('An object containing the total count of circuit switched PN blockages, that is, the number of times a PN link time-slot is denied.')
g3pkpnblockTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockTage.setDescription('The number of timeticks since the port network blockage data was last extracted from the switch by the Proxy Agent. This object along with the g3pnblockintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkpnblockTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkpnblockTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockTintvl.setDescription('An object containing the interval for which the port network blockage data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for port network blockage objects is received by the agent it uses the g3pnblockage and g3pnblockintvl objects to determine whether it should refresh the cached pnblockTable. If g3pnblockstmp + g3pnblockintvl is less than the current value of the sysUpTime object then the agent refreshes the pnblockTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkpnblockTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkpnblockTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkpnblockTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkpnblockTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkpnblockTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6), )
if mibBuilder.loadTexts: g3pkpnblockTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockTable.setDescription('A list of g3pkpnblock entries.')
g3pkpnblockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkpnblockPNNumber"))
if mibBuilder.loadTexts: g3pkpnblockEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockEntry.setDescription('A g3pkpnblock entry containing objects of the g3pkpnblock information sent by the switch.')
g3pkpnblockPNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockPNNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockPNNumber.setDescription('An object containing the Port Network number.')
g3pkpnblockMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockMeasHour.setDescription('An object containing the Hour the measurement was taken.')
g3pkpnblockYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockYear.setDescription('An object containing the Year the command was executed.')
g3pkpnblockMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockMonth.setDescription('An object containing the Month the command was executed.')
g3pkpnblockDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockDay.setDescription('An object containing the Day the command was executed.')
g3pkpnblockHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockHour.setDescription('An object containing the Hour the command was executed.')
g3pkpnblockTdmUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockTdmUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockTdmUsage.setDescription('An object containing the total TDM time-slot usage.')
g3pkpnblockTdmPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockTdmPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockTdmPeg.setDescription('An object containing the total count of circuit switch TDM time-slot seizure attempts for the PN.')
g3pkpnblockTdmPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockTdmPeak.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockTdmPeak.setDescription('An object containing the maximum number of time-slots allocated at any one time.')
g3pkpnblockTdmBlockage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockTdmBlockage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockTdmBlockage.setDescription('An object containing the total count of TDM blockages, that is, the total number of times a TDM time-slot request is denied for the PN.')
g3pkpnblockTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockTimeSlots.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockTimeSlots.setDescription('An object containing the number of PN link time-slots available between port networks or between Port Networks and Switch Nodes.')
g3pkpnblockPNlinkUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockPNlinkUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockPNlinkUsage.setDescription('An object containing the total circuit switch usage of the available PN link(s) connecting the PN to the SN or to other PNs.')
g3pkpnblockPNlinkPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockPNlinkPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockPNlinkPeg.setDescription('An object containing the total count of circuit switched time-slot seizure attempts for the link(s).')
g3pkpnblockPNlinkPeak = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockPNlinkPeak.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockPNlinkPeak.setDescription('An object containing the maximum number of time slots allocated at any one time on the PN links.')
g3pkpnblockPNlinkBlockage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 60, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkpnblockPNlinkBlockage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkpnblockPNlinkBlockage.setDescription('An object containing the total count of circuit switched PN blockages, that is, the number of times a PN link time-slot is denied.')
g3snblockTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3snblockTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockTage.setDescription('The number of timeticks since the switch node blockage data was last extracted from the switch by the Proxy Agent. This object along with the g3snblockintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3snblockTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3snblockTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockTintvl.setDescription('An object containing the interval for which the switch node blockage data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for switch node blockage objects is received by the agent it uses the g3snblockage and g3snblockintvl objects to determine whether it should refresh the cached snblockTable. If g3snblockstmp + g3snblockintvl is less than the current value of the sysUpTime object then the agent refreshes the snblockTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3snblockTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3snblockTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3snblockTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3snblockTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3snblockTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3snblockTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3snblockTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 6), )
if mibBuilder.loadTexts: g3snblockTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockTable.setDescription('A list of g3snblock entries.')
g3snblockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3snblockSnPair"))
if mibBuilder.loadTexts: g3snblockEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockEntry.setDescription('A g3snblock entry containing objects of the g3snblock information sent by the switch.')
g3snblockSnPair = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3snblockSnPair.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockSnPair.setDescription('An object containing the identifiers for the two SNs connected by the SN link being measured.')
g3snblockMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3snblockMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockMeasHour.setDescription('An object containing the Hour the measurement was taken.')
g3snblockYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3snblockYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockYear.setDescription('An object containing the Year the command was executed.')
g3snblockMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3snblockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockMonth.setDescription('An object containing the Month the command was executed.')
g3snblockDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3snblockDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockDay.setDescription('An object containing the Day the command was executed.')
g3snblockHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3snblockHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockHour.setDescription('An object containing the Hour the command was executed.')
g3snblockTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3snblockTimeSlots.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockTimeSlots.setDescription('An object containing the number of SN link time-slots available between SNs.')
g3snblockUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3snblockUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockUsage.setDescription('An object containing the total circuit switch usage of the SN link connecting the two SNs.')
g3snblockSnPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3snblockSnPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockSnPeg.setDescription('An object containing the total count of circuit switched SN link time-slot seizure attempts between the two measured SNs.')
g3snblockLinkBlockage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3snblockLinkBlockage.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockLinkBlockage.setDescription('An object containing the total count of circuit switched SN link blockages, that is, the total number of times a call is blocked because no time-slots are available either in the most direct route or through any alternate route.')
g3snblockOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 61, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3snblockOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: g3snblockOverflow.setDescription('An object containing the total number of times a call had to be routed over an alternate route.')
g3pksnblockTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pksnblockTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockTage.setDescription('The number of timeticks since the switch node blockage data was last extracted from the switch by the Proxy Agent. This object along with the g3snblockintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pksnblockTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pksnblockTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockTintvl.setDescription('An object containing the interval for which the switch node blockage data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for switch node blockage objects is received by the agent it uses the g3snblockage and g3snblockintvl objects to determine whether it should refresh the cached snblockTable. If g3snblockstmp + g3snblockintvl is less than the current value of the sysUpTime object then the agent refreshes the snblockTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pksnblockTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pksnblockTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pksnblockTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pksnblockTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pksnblockTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pksnblockTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pksnblockTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 6), )
if mibBuilder.loadTexts: g3pksnblockTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockTable.setDescription('A list of g3pksnblock entries.')
g3pksnblockEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pksnblockSnPair"))
if mibBuilder.loadTexts: g3pksnblockEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockEntry.setDescription('A g3pksnblock entry containing objects of the g3pksnblock information sent by the switch.')
g3pksnblockSnPair = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pksnblockSnPair.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockSnPair.setDescription('An object containing the identifiers for the two SNs connected by the SN link being measured.')
g3pksnblockMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pksnblockMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockMeasHour.setDescription('An object containing the Hour the measurement was taken.')
g3pksnblockYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pksnblockYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockYear.setDescription('An object containing the Year the command was executed.')
g3pksnblockMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pksnblockMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockMonth.setDescription('An object containing the Month the command was executed.')
g3pksnblockDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pksnblockDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockDay.setDescription('An object containing the Day the command was executed.')
g3pksnblockHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pksnblockHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockHour.setDescription('An object containing the Hour the command was executed.')
g3pksnblockTimeSlots = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pksnblockTimeSlots.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockTimeSlots.setDescription('An object containing the number of SN link time-slots available between SNs.')
g3pksnblockUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pksnblockUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockUsage.setDescription('An object containing the total circuit switch usage of the SN link connecting the two SNs.')
g3pksnblockSnPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pksnblockSnPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockSnPeg.setDescription('An object containing the total count of circuit switched SN link time-slot seizure attempts between the two measured SNs.')
g3pksnblockLinkBlockage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pksnblockLinkBlockage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockLinkBlockage.setDescription('An object containing the total count of circuit switched SN link blockages, that is, the total number of times a call is blocked because no time-slots are available either in the most direct route or through any alternate route.')
g3pksnblockOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 62, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pksnblockOverflow.setStatus('mandatory')
if mibBuilder.loadTexts: g3pksnblockOverflow.setDescription('An object containing the total number of times a call had to be routed over an alternate route.')
g3huntTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntTage.setDescription('The number of timeticks since the hunt group data was last extracted from the switch by the Proxy Agent. This object along with the g3huntintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3huntTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3huntTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntTintvl.setDescription('An object containing the interval for which the hunt group data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for hunt group objects is received by the agent it uses the g3huntage and g3huntintvl objects to determine whether it should refresh the cached huntTable. If g3huntstmp + g3huntintvl is less than the current value of the sysUpTime object then the agent refreshes the huntTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3huntTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3huntTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3huntTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3huntTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3huntTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6), )
if mibBuilder.loadTexts: g3huntTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntTable.setDescription('A list of g3hunt entries.')
g3huntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3huntHuntGroup"))
if mibBuilder.loadTexts: g3huntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntEntry.setDescription('A g3hunt entry containing objects of the g3hunt information sent by the switch.')
g3huntHuntGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntHuntGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntHuntGroup.setDescription('An object containing the hunt group number.')
g3huntMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntMeasHour.setDescription('An object containing the Hour the measurement was taken.')
g3huntYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntYear.setDescription('An object containing the Year the command was executed.')
g3huntMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntMonth.setDescription('An object containing the Month the command was executed.')
g3huntDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntDay.setDescription('An object containing the Day the command was executed.')
g3huntHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntHour.setDescription('An object containing the Hour the command was executed.')
g3huntGroupSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntGroupSize.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntGroupSize.setDescription('An object containing the total number of members in the trunk group.')
g3huntTotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntTotalUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntTotalUsage.setDescription('An object containing the sum of all times that the members of the hunt group are busy on hunt group calls (in CCS).')
g3huntCallsAns = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntCallsAns.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntCallsAns.setDescription('An object containing the total number of calls that are answered by the hunt group.')
g3huntCallsAban = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntCallsAban.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntCallsAban.setDescription('An object containing the total number of calls that attempt to reach the hunt group but abandon the attempt before being answered.')
g3huntQueSiz = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntQueSiz.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntQueSiz.setDescription('An object containing the length of the queue assigned to the hunt group during administration.')
g3huntCallsQue = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntCallsQue.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntCallsQue.setDescription('An object containing the total number of calls that arrive to find all members of the hunt group busy and are placed in the queue.')
g3huntQueOvfl = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntQueOvfl.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntQueOvfl.setDescription('An object containing the number of calls that arrive when all slots in the hunt group queue are occupied.')
g3huntTimeAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntTimeAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntTimeAvail.setDescription('An object containing the total time that the hunt group extensions are not in use but are available to receive hunt group calls (in CCS).')
g3huntSpeedAns = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 63, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntSpeedAns.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntSpeedAns.setDescription('An object containing the average time interval from when the call first enters the hunt group or hunt group queue until the call is answered by a hunt group member (in seconds).')
g3pkhuntTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntTage.setDescription('The number of timeticks since the peak hunt group data was last extracted from the switch by the Proxy Agent. This object along with the g3pkhuntintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkhuntTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkhuntTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntTintvl.setDescription('An object containing the interval for which the peak hunt group data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for peak hunt group objects is received by the agent it uses the g3pkhuntage and g3pkhuntintvl objects to determine whether it should refresh the cached pkhuntTable. If g3pkhuntstmp + g3pkhuntintvl is less than the current value of the sysUpTime object then the agent refreshes the pkhuntTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkhuntTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkhuntTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkhuntTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkhuntTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkhuntTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6), )
if mibBuilder.loadTexts: g3pkhuntTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntTable.setDescription('A list of g3pkhunt entries.')
g3pkhuntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkhuntHuntGroup"))
if mibBuilder.loadTexts: g3pkhuntEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntEntry.setDescription('A g3pkhunt entry containing objects of the g3pkhunt information sent by the switch.')
g3pkhuntHuntGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntHuntGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntHuntGroup.setDescription('An object containing the hunt group number.')
g3pkhuntMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntMeasHour.setDescription('An object containing the Hour the measurement was taken.')
g3pkhuntYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntYear.setDescription('An object containing the Year the command was executed.')
g3pkhuntMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntMonth.setDescription('An object containing the Month the command was executed.')
g3pkhuntDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntDay.setDescription('An object containing the Day the command was executed.')
g3pkhuntHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntHour.setDescription('An object containing the Hour the command was executed.')
g3pkhuntGroupSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntGroupSize.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntGroupSize.setDescription('An object containing the total number of members in the trunk group.')
g3pkhuntTotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntTotalUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntTotalUsage.setDescription('An object containing the sum of all times that the members of the hunt group are busy on hunt group calls (in CCS).')
g3pkhuntCallsAns = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntCallsAns.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntCallsAns.setDescription('An object containing the total number of calls that are answered by the hunt group.')
g3pkhuntCallsAban = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntCallsAban.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntCallsAban.setDescription('An object containing the total number of calls that attempt to reach the hunt group but abandon the attempt before being answered.')
g3pkhuntQueSiz = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntQueSiz.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntQueSiz.setDescription('An object containing the length of the queue assigned to the hunt group during administration.')
g3pkhuntCallsQue = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntCallsQue.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntCallsQue.setDescription('An object containing the total number of calls that arrive to find all members of the hunt group busy and are placed in the queue.')
g3pkhuntQueOvfl = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntQueOvfl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntQueOvfl.setDescription('An object containing the number of calls that arrive when all slots in the hunt group queue are occupied.')
g3pkhuntTimeAvail = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntTimeAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntTimeAvail.setDescription('An object containing the total time that the hunt group extensions are not in use but are available to receive hunt group calls (in CCS).')
g3pkhuntSpeedAns = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 64, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkhuntSpeedAns.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkhuntSpeedAns.setDescription('An object containing the average time interval from when the call first enters the hunt group or hunt group queue until the call is answered by a hunt group member (in seconds).')
g3huntlistTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 65, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntlistTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntlistTage.setDescription('The number of timeticks since the hunt group list data was last extracted from the switch by the Proxy Agent. This object along with the g3huntlistintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3huntlistTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 65, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3huntlistTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntlistTintvl.setDescription('An object containing the interval for which the hunt group list data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for hunt group list objects is received by the agent it uses the g3huntlistage and g3huntlistintvl objects to determine whether it should refresh the cached huntlistTable. If g3huntliststmp + g3huntlistintvl is less than the current value of the sysUpTime object then the agent refreshes the huntlistTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3huntlistTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 65, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntlistTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntlistTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3huntlistTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 65, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3huntlistTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntlistTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3huntlistTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 65, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntlistTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntlistTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3huntlistTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 65, 6), )
if mibBuilder.loadTexts: g3huntlistTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntlistTable.setDescription('A list of g3huntlist entries.')
g3huntlistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 65, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3huntlistHGNumber"))
if mibBuilder.loadTexts: g3huntlistEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntlistEntry.setDescription('A g3huntlist entry containing objects of the g3huntlist information sent by the switch.')
g3huntlistHGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 65, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntlistHGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntlistHGNumber.setDescription('An object containing the number of the hunt group.')
g3huntlistName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 65, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntlistName.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntlistName.setDescription('A DisplayString Object containing the name of the hunt group.')
g3huntlistExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 65, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntlistExtension.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntlistExtension.setDescription('An object containing the extension of the hunt group.')
g3huntlistType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 65, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3huntlistType.setStatus('mandatory')
if mibBuilder.loadTexts: g3huntlistType.setDescription('A DisplayString Object containing the type of hunt group.')
g3tonerecTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecTage.setDescription('The number of timeticks since the tone receiver data was last extracted from the switch by the Proxy Agent. This object along with the g3tonerecintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3tonerecTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3tonerecTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecTintvl.setDescription('An object containing the interval for which the tone receiver data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for tone receiver objects is received by the agent it uses the g3tonerecage and g3tonerecintvl objects to determine whether it should refresh the cached tonerecTable. If g3tonerecstmp + g3tonerecintvl is less than the current value of the sysUpTime object then the agent refreshes the tonerecTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3tonerecTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3tonerecTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3tonerecTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3tonerecTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3tonerecTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6), )
if mibBuilder.loadTexts: g3tonerecTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecTable.setDescription('A list of g3tonerec entries.')
g3tonerecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3tonerecPNNumber"))
if mibBuilder.loadTexts: g3tonerecEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecEntry.setDescription('A g3tonerec entry containing objects of the g3tonerec information sent by the switch.')
g3tonerecPNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecPNNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecPNNumber.setDescription('An object containing the Port Network number in which the tone receiver is located.')
g3tonerecMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecMeasHour.setDescription('An object containing the Hour the measurement was taken.')
g3tonerecYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecYear.setDescription('An object containing the Year the command was executed.')
g3tonerecMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecMonth.setDescription('An object containing the Month the command was executed.')
g3tonerecDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecDay.setDescription('An object containing the Day the command was executed.')
g3tonerecHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecHour.setDescription('An object containing the Hour the command was executed.')
g3tonerecDTMFPnReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecDTMFPnReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecDTMFPnReq.setDescription('An object containing the number of DTMF requests within the PN.')
g3tonerecDTMFPnAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecDTMFPnAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecDTMFPnAlloc.setDescription('An object containing the total number of DTMF receivers located in the listed PN that were allocated during the last hour.')
g3tonerecDTMFPkAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecDTMFPkAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecDTMFPkAlloc.setDescription('An object containing the peak number of DTMF receivers located in the listed PN that were in use simulatneously.')
g3tonerecDTMFTotOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecDTMFTotOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecDTMFTotOffPN.setDescription('An object containing the total number of DTMF receivers allocated of a different PN for requests originated on this PN.')
g3tonerecDTMFPkOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecDTMFPkOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecDTMFPkOffPN.setDescription('An object containing the peak number of DTMF receivers simultaneously allocated on a different PN for requests originated on this PN.')
g3tonerecGPTDPnReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecGPTDPnReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecGPTDPnReq.setDescription('An object containing the number of GPTD requests within the PN.')
g3tonerecGPTDPnAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecGPTDPnAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecGPTDPnAlloc.setDescription('An object containing the total number of GPTD receivers located in the listed PN that were allocated during the last hour.')
g3tonerecGPTDPkAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecGPTDPkAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecGPTDPkAlloc.setDescription('An object containing the peak number of GPTD receivers located in the listed PN that were in use simulatneously.')
g3tonerecGPTDTotOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecGPTDTotOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecGPTDTotOffPN.setDescription('An object containing the total number of GPTD receivers allocated of a different PN for requests originated on this PN.')
g3tonerecGPTDPkOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecGPTDPkOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecGPTDPkOffPN.setDescription('An object containing the peak number of GPTD receivers simultaneously allocated on a different PN for requests originated on this PN.')
g3tonerecCCTTRPnReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCTTRPnReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCTTRPnReq.setDescription('An object containing the number of CC-TTR requests within the PN.')
g3tonerecCCTTRPnAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCTTRPnAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCTTRPnAlloc.setDescription('An object containing the total number of CC-TTR receivers located in the listed PN that were allocated during the last hour.')
g3tonerecCCTTRPkAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCTTRPkAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCTTRPkAlloc.setDescription('An object containing the peak number of CC-TTR receivers located in the listed PN that were in use simulatneously.')
g3tonerecCCTTRTotOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCTTRTotOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCTTRTotOffPN.setDescription('An object containing the total number of CC-TTR receivers allocated of a different PN for requests originated on this PN.')
g3tonerecCCTTRPkOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCTTRPkOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCTTRPkOffPN.setDescription('An object containing the peak number of CC-TTR receivers simultaneously allocated on a different PN for requests originated on this PN.')
g3tonerecCCCPTRPnReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCCPTRPnReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCCPTRPnReq.setDescription('An object containing the number of CC-CPTR requests within the PN.')
g3tonerecCCCPTRPnAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCCPTRPnAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCCPTRPnAlloc.setDescription('An object containing the total number of CC-CPTR receivers located in the listed PN that were allocated during the last hour.')
g3tonerecCCCPTRPkAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCCPTRPkAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCCPTRPkAlloc.setDescription('An object containing the peak number of CC-CPTR receivers located in the listed PN that were in use simulatneously.')
g3tonerecCCCPTRTotOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCCPTRTotOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCCPTRTotOffPN.setDescription('An object containing the total number of CC-CPTR receivers allocated of a different PN for requests originated on this PN.')
g3tonerecCCCPTRPkOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCCPTRPkOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCCPTRPkOffPN.setDescription('An object containing the peak number of CC-CPTR receivers simultaneously allocated on a different PN for requests originated on this PN.')
g3tonerecCCMFCRPnReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCMFCRPnReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCMFCRPnReq.setDescription('An object containing the number of CC-MFCR requests within the PN.')
g3tonerecCCMFCRPnAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCMFCRPnAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCMFCRPnAlloc.setDescription('An object containing the total number of CC-MFCR receivers located in the listed PN that were allocated during the last hour.')
g3tonerecCCMFCRPkAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCMFCRPkAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCMFCRPkAlloc.setDescription('An object containing the peak number of CC-MFCR receivers located in the listed PN that were in use simulatneously.')
g3tonerecCCMFCRTotOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCMFCRTotOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCMFCRTotOffPN.setDescription('An object containing the total number of CC-MFCR receivers allocated of a different PN for requests originated on this PN.')
g3tonerecCCMFCRPkOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 66, 6, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecCCMFCRPkOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecCCMFCRPkOffPN.setDescription('An object containing the peak number of CC-MFCR receivers simultaneously allocated on a different PN for requests originated on this PN.')
g3pktonerecTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecTage.setDescription('The number of timeticks since the tone receiver data was last extracted from the switch by the Proxy Agent. This object along with the g3tonerecintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pktonerecTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pktonerecTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecTintvl.setDescription('An object containing the interval for which the tone receiver data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for tone receiver objects is received by the agent it uses the g3tonerecage and g3tonerecintvl objects to determine whether it should refresh the cached tonerecTable. If g3tonerecstmp + g3tonerecintvl is less than the current value of the sysUpTime object then the agent refreshes the tonerecTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pktonerecTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pktonerecTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pktonerecTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pktonerecTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pktonerecTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6), )
if mibBuilder.loadTexts: g3pktonerecTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecTable.setDescription('A list of g3pktonerec entries.')
g3pktonerecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pktonerecPNNumber"))
if mibBuilder.loadTexts: g3pktonerecEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecEntry.setDescription('A g3pktonerec entry containing objects of the g3pktonerec information sent by the switch.')
g3pktonerecPNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecPNNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecPNNumber.setDescription('An object containing the Port Network number in which the tone receiver is located.')
g3pktonerecMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecMeasHour.setDescription('An object containing the Hour the measurement was taken.')
g3pktonerecYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecYear.setDescription('An object containing the Year the command was executed.')
g3pktonerecMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecMonth.setDescription('An object containing the Month the command was executed.')
g3pktonerecDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecDay.setDescription('An object containing the Day the command was executed.')
g3pktonerecHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecHour.setDescription('An object containing the Hour the command was executed.')
g3pktonerecDTMFPnReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecDTMFPnReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecDTMFPnReq.setDescription('An object containing the number of DTMF requests within the PN.')
g3pktonerecDTMFPnAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecDTMFPnAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecDTMFPnAlloc.setDescription('An object containing the total number of DTMF receivers located in the listed PN that were allocated during the last hour.')
g3pktonerecDTMFPkAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecDTMFPkAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecDTMFPkAlloc.setDescription('An object containing the peak number of DTMF receivers located in the listed PN that were in use simulatneously.')
g3pktonerecDTMFTotOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecDTMFTotOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecDTMFTotOffPN.setDescription('An object containing the total number of DTMF receivers allocated of a different PN for requests originated on this PN.')
g3pktonerecDTMFPkOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecDTMFPkOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecDTMFPkOffPN.setDescription('An object containing the peak number of DTMF receivers simultaneously allocated on a different PN for requests originated on this PN.')
g3pktonerecGPTDPnReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecGPTDPnReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecGPTDPnReq.setDescription('An object containing the number of GPTD requests within the PN.')
g3pktonerecGPTDPnAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecGPTDPnAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecGPTDPnAlloc.setDescription('An object containing the total number of GPTD receivers located in the listed PN that were allocated during the last hour.')
g3pktonerecGPTDPkAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecGPTDPkAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecGPTDPkAlloc.setDescription('An object containing the peak number of GPTD receivers located in the listed PN that were in use simulatneously.')
g3pktonerecGPTDTotOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecGPTDTotOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecGPTDTotOffPN.setDescription('An object containing the total number of GPTD receivers allocated of a different PN for requests originated on this PN.')
g3pktonerecGPTDPkOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecGPTDPkOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecGPTDPkOffPN.setDescription('An object containing the peak number of GPTD receivers simultaneously allocated on a different PN for requests originated on this PN.')
g3pktonerecCCTTRPnReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCTTRPnReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCTTRPnReq.setDescription('An object containing the number of CC-TTR requests within the PN.')
g3pktonerecCCTTRPnAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCTTRPnAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCTTRPnAlloc.setDescription('An object containing the total number of CC-TTR receivers located in the listed PN that were allocated during the last hour.')
g3pktonerecCCTTRPkAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCTTRPkAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCTTRPkAlloc.setDescription('An object containing the peak number of CC-TTR receivers located in the listed PN that were in use simulatneously.')
g3pktonerecCCTTRTotOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCTTRTotOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCTTRTotOffPN.setDescription('An object containing the total number of CC-TTR receivers allocated of a different PN for requests originated on this PN.')
g3pktonerecCCTTRPkOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCTTRPkOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCTTRPkOffPN.setDescription('An object containing the peak number of CC-TTR receivers simultaneously allocated on a different PN for requests originated on this PN.')
g3pktonerecCCCPTRPnReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCCPTRPnReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCCPTRPnReq.setDescription('An object containing the number of CC-CPTR requests within the PN.')
g3pktonerecCCCPTRPnAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCCPTRPnAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCCPTRPnAlloc.setDescription('An object containing the total number of CC-CPTR receivers located in the listed PN that were allocated during the last hour.')
g3pktonerecCCCPTRPkAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCCPTRPkAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCCPTRPkAlloc.setDescription('An object containing the peak number of CC-CPTR receivers located in the listed PN that were in use simulatneously.')
g3pktonerecCCCPTRTotOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCCPTRTotOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCCPTRTotOffPN.setDescription('An object containing the total number of CC-CPTR receivers allocated of a different PN for requests originated on this PN.')
g3pktonerecCCCPTRPkOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCCPTRPkOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCCPTRPkOffPN.setDescription('An object containing the peak number of CC-CPTR receivers simultaneously allocated on a different PN for requests originated on this PN.')
g3pktonerecCCMFCRPnReq = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCMFCRPnReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCMFCRPnReq.setDescription('An object containing the number of CC-MFCR requests within the PN.')
g3pktonerecCCMFCRPnAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCMFCRPnAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCMFCRPnAlloc.setDescription('An object containing the total number of CC-MFCR receivers located in the listed PN that were allocated during the last hour.')
g3pktonerecCCMFCRPkAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCMFCRPkAlloc.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCMFCRPkAlloc.setDescription('An object containing the peak number of CC-MFCR receivers located in the listed PN that were in use simulatneously.')
g3pktonerecCCMFCRTotOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCMFCRTotOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCMFCRTotOffPN.setDescription('An object containing the total number of CC-MFCR receivers allocated of a different PN for requests originated on this PN.')
g3pktonerecCCMFCRPkOffPN = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 67, 6, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecCCMFCRPkOffPN.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecCCMFCRPkOffPN.setDescription('An object containing the peak number of CC-MFCR receivers simultaneously allocated on a different PN for requests originated on this PN.')
g3tonerecsumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumTage.setDescription('The number of timeticks since the tone receiver summary data was last extracted from the switch by the Proxy Agent. This object along with the g3tonerecsumintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3tonerecsumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3tonerecsumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumTintvl.setDescription('An object containing the interval for which the tone receiver summary data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for tone receiver summary objects is received by the agent it uses the g3tonerecsumage and g3tonerecsumintvl objects to determine whether it should refresh the cached tonerecsumTable. If g3tonerecsumstmp + g3tonerecsumintvl is less than the current value of the sysUpTime object then the agent refreshes the tonerecsumTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3tonerecsumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3tonerecsumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3tonerecsumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3tonerecsumRunYear = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumRunYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumRunYear.setDescription('An object containing the Year the command was executed.')
g3tonerecsumRunMonth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumRunMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumRunMonth.setDescription('An object containing the Month the command was executed.')
g3tonerecsumRunDay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumRunDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumRunDay.setDescription('An object containing the Day the command was executed.')
g3tonerecsumRunHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumRunHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumRunHour.setDescription('An object containing the Hour the measurement was taken.')
g3tonerecsumDTMFHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumDTMFHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumDTMFHour.setDescription('An object containing the Hour the measurement was taken.')
g3tonerecsumDTMFTReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumDTMFTReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumDTMFTReq.setDescription('An object containing the system-wide total number of requests for tone receivers of this type for the measurement interval.')
g3tonerecsumDTMFPReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumDTMFPReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumDTMFPReq.setDescription('An object containing the system-wide peak number of simultaneous requests for tone receivers of this type that occurred at any one time over the measurement interval.')
g3tonerecsumDTMFTQueue = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumDTMFTQueue.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumDTMFTQueue.setDescription('An object containing the system-wide total number of requests queued for tone receivers of this type during the measurement interval.')
g3tonerecsumDTMFPQueue = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumDTMFPQueue.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumDTMFPQueue.setDescription('An object containing the system-wide peak number of requests queued at any one time during the measurement hour for tone receivers of this type.')
g3tonerecsumDTMFTDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumDTMFTDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumDTMFTDeny.setDescription('An object containing the system-wide total number of requests that were denied because no receivers of this type were available during the measurement hour.')
g3tonerecsumDTMFPDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumDTMFPDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumDTMFPDeny.setDescription('An object containing the system-wide peak number of requests that were denied at any one time because no receivers of this type were available during the measurement hour.')
g3tonerecsumGPTDHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumGPTDHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumGPTDHour.setDescription('An object containing the Hour the measurement was taken.')
g3tonerecsumGPTDTReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumGPTDTReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumGPTDTReq.setDescription('An object containing the system-wide total number of requests for tone receivers of this type for the measurement interval.')
g3tonerecsumGPTDPReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumGPTDPReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumGPTDPReq.setDescription('An object containing the system-wide peak number of simultaneous requests for tone receivers of this type that occurred at any one time over the measurement interval.')
g3tonerecsumGPTDTDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumGPTDTDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumGPTDTDeny.setDescription('An object containing the system-wide total number of requests that were denied because no receivers of this type were available during the measurement hour.')
g3tonerecsumGPTDPDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumGPTDPDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumGPTDPDeny.setDescription('An object containing the system-wide peak number of requests that were denied at any one time because no receivers of this type were available during the measurement hour.')
g3tonerecsumCCTTRHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCTTRHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCTTRHour.setDescription('An object containing the Hour the measurement was taken.')
g3tonerecsumCCTTRTReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCTTRTReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCTTRTReq.setDescription('An object containing the system-wide total number of requests for tone receivers of this type for the measurement interval.')
g3tonerecsumCCTTRPReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCTTRPReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCTTRPReq.setDescription('An object containing the system-wide peak number of simultaneous requests for tone receivers of this type that occurred at any one time over the measurement interval.')
g3tonerecsumCCTTRTQueue = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCTTRTQueue.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCTTRTQueue.setDescription('An object containing the system-wide total number of requests queued for tone receivers of this type during the measurement interval.')
g3tonerecsumCCTTRPQueue = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCTTRPQueue.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCTTRPQueue.setDescription('An object containing the system-wide peak number of requests queued at any one time during the measurement hour for tone receivers of this type.')
g3tonerecsumCCTTRTDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCTTRTDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCTTRTDeny.setDescription('An object containing the system-wide total number of requests that were denied because no receivers of this type were available during the measurement hour.')
g3tonerecsumCCTTRPDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCTTRPDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCTTRPDeny.setDescription('An object containing the system-wide peak number of requests that were denied at any one time because no receivers of this type were available during the measurement hour.')
g3tonerecsumCCCPTRHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCCPTRHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCCPTRHour.setDescription('An object containing the Hour the measurement was taken.')
g3tonerecsumCCCPTRTReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCCPTRTReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCCPTRTReq.setDescription('An object containing the system-wide total number of requests for tone receivers of this type for the measurement interval.')
g3tonerecsumCCCPTRPReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCCPTRPReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCCPTRPReq.setDescription('An object containing the system-wide peak number of simultaneous requests for tone receivers of this type that occurred at any one time over the measurement interval.')
g3tonerecsumCCCPTRTDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCCPTRTDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCCPTRTDeny.setDescription('An object containing the system-wide total number of requests that were denied because no receivers of this type were available during the measurement hour.')
g3tonerecsumCCCPTRPDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCCPTRPDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCCPTRPDeny.setDescription('An object containing the system-wide peak number of requests that were denied at any one time because no receivers of this type were available during the measurement hour.')
g3tonerecsumCCMFCRHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCMFCRHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCMFCRHour.setDescription('An object containing the Hour the measurement was taken.')
g3tonerecsumCCMFCRTReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCMFCRTReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCMFCRTReq.setDescription('An object containing the system-wide total number of requests for tone receivers of this type for the measurement interval.')
g3tonerecsumCCMFCRPReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCMFCRPReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCMFCRPReq.setDescription('An object containing the system-wide peak number of simultaneous requests for tone receivers of this type that occurred at any one time over the measurement interval.')
g3tonerecsumCCMFCRTDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCMFCRTDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCMFCRTDeny.setDescription('An object containing the system-wide total number of requests that were denied because no receivers of this type were available during the measurement hour.')
g3tonerecsumCCMFCRPDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCCMFCRPDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCCMFCRPDeny.setDescription('An object containing the system-wide peak number of requests that were denied at any one time because no receivers of this type were available during the measurement hour.')
g3tonerecsumDTMRTAvail = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumDTMRTAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumDTMRTAvail.setDescription('An object containing the number of ports available for the type of tone receiver.')
g3tonerecsumGPRDTAvail = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumGPRDTAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumGPRDTAvail.setDescription('An object containing the number of ports available for the type of tone receiver.')
g3tonerecsumCLASTAvail = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumCLASTAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumCLASTAvail.setDescription('An object containing the number of ports available for the type of tone receiver.')
g3tonerecsumETRTAvail = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 68, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3tonerecsumETRTAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3tonerecsumETRTAvail.setDescription('An object containing the number of ports available for the type of tone receiver.')
g3pktonerecsumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumTage.setDescription('The number of timeticks since the tone receiver summary data was last extracted from the switch by the Proxy Agent. This object along with the g3pktonerecsumintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pktonerecsumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pktonerecsumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumTintvl.setDescription('An object containing the interval for which the tone receiver summary data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for tone receiver summary objects is received by the agent it uses the g3pktonerecsumage and g3pktonerecsumintvl objects to determine whether it should refresh the cached pktonerecsumTable. If pkg3tonerecsumstmp+pkg3tonerecsumintvl is less than the current value of the sysUpTime object then the agent refreshes the pktonerecsumTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pktonerecsumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pktonerecsumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pktonerecsumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pktonerecsumRunYear = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumRunYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumRunYear.setDescription('An object containing the Year the command was executed.')
g3pktonerecsumRunMonth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumRunMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumRunMonth.setDescription('An object containing the Month the command was executed.')
g3pktonerecsumRunDay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumRunDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumRunDay.setDescription('An object containing the Day the command was executed.')
g3pktonerecsumRunHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumRunHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumRunHour.setDescription('An object containing the Hour the measurement was taken.')
g3pktonerecsumDTMFHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumDTMFHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumDTMFHour.setDescription('An object containing the Hour the measurement was taken.')
g3pktonerecsumDTMFTReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumDTMFTReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumDTMFTReq.setDescription('An object containing the system-wide total number of requests for tone receivers of this type for the measurement interval.')
g3pktonerecsumDTMFPReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumDTMFPReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumDTMFPReq.setDescription('An object containing the system-wide peak number of simultaneous requests for tone receivers of this type that occurred at any one time over the measurement interval.')
g3pktonerecsumDTMFTQueue = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumDTMFTQueue.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumDTMFTQueue.setDescription('An object containing the system-wide total number of requests queued for tone receivers of this type during the measurement interval.')
g3pktonerecsumDTMFPQueue = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumDTMFPQueue.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumDTMFPQueue.setDescription('An object containing the system-wide peak number of requests queued at any one time during the measurement hour for tone receivers of this type.')
g3pktonerecsumDTMFTDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumDTMFTDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumDTMFTDeny.setDescription('An object containing the system-wide total number of requests that were denied because no receivers of this type were available during the measurement hour.')
g3pktonerecsumDTMFPDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumDTMFPDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumDTMFPDeny.setDescription('An object containing the system-wide peak number of requests that were denied at any one time because no receivers of this type were')
g3pktonerecsumGPTDHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumGPTDHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumGPTDHour.setDescription('An object containing the Hour the measurement was taken.')
g3pktonerecsumGPTDTReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumGPTDTReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumGPTDTReq.setDescription('An object containing the system-wide total number of requests for tone receivers of this type for the measurement interval.')
g3pktonerecsumGPTDPReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumGPTDPReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumGPTDPReq.setDescription('An object containing the system-wide peak number of simultaneous requests for tone receivers of this type that occurred at any one time over the measurement interval.')
g3pktonerecsumGPTDTDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumGPTDTDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumGPTDTDeny.setDescription('An object containing the system-wide total number of requests that were denied because no receivers of this type were available during the measurement hour.')
g3pktonerecsumGPTDPDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumGPTDPDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumGPTDPDeny.setDescription('An object containing the system-wide peak number of requests that were denied at any one time because no receivers of this type were available during the measurement hour.')
g3pktonerecsumCCTTRHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCTTRHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCTTRHour.setDescription('An object containing the Hour the measurement was taken.')
g3pktonerecsumCCTTRTReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCTTRTReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCTTRTReq.setDescription('An object containing the system-wide total number of requests for tone receivers of this type for the measurement interval.')
g3pktonerecsumCCTTRPReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCTTRPReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCTTRPReq.setDescription('An object containing the system-wide peak number of simultaneous requests for tone receivers of this type that occurred at any one time over the measurement interval.')
g3pktonerecsumCCTTRTQueue = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCTTRTQueue.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCTTRTQueue.setDescription('An object containing the system-wide total number of requests queued for tone receivers of this type during the measurement interval.')
g3pktonerecsumCCTTRPQueue = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCTTRPQueue.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCTTRPQueue.setDescription('An object containing the system-wide peak number of requests queued at any one time during the measurement hour for tone receivers of this type.')
g3pktonerecsumCCTTRTDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCTTRTDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCTTRTDeny.setDescription('An object containing the system-wide total number of requests that were denied because no receivers of this type were available during the measurement hour.')
g3pktonerecsumCCTTRPDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCTTRPDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCTTRPDeny.setDescription('An object containing the system-wide peak number of requests that were denied at any one time because no receivers of this type were available during the measurement hour.')
g3pktonerecsumCCCPTRHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCCPTRHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCCPTRHour.setDescription('An object containing the Hour the measurement was taken.')
g3pktonerecsumCCCPTRTReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCCPTRTReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCCPTRTReq.setDescription('An object containing the system-wide total number of requests for tone receivers of this type for the measurement interval.')
g3pktonerecsumCCCPTRPReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCCPTRPReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCCPTRPReq.setDescription('An object containing the system-wide peak number of simultaneous requests for tone receivers of this type that occurred at any one time over the measurement interval.')
g3pktonerecsumCCCPTRTDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCCPTRTDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCCPTRTDeny.setDescription('An object containing the system-wide total number of requests that were denied because no receivers of this type were available during the measurement hour.')
g3pktonerecsumCCCPTRPDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCCPTRPDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCCPTRPDeny.setDescription('An object containing the system-wide peak number of requests that were denied at any one time because no receivers of this type were available during the measurement hour.')
g3pktonerecsumCCMFCRHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCMFCRHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCMFCRHour.setDescription('An object containing the Hour the measurement was taken.')
g3pktonerecsumCCMFCRTReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCMFCRTReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCMFCRTReq.setDescription('An object containing the system-wide total number of requests for tone receivers of this type for the measurement interval.')
g3pktonerecsumCCMFCRPReq = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCMFCRPReq.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCMFCRPReq.setDescription('An object containing the system-wide peak number of simultaneous requests for tone receivers of this type that occurred at any one time over the measurement interval.')
g3pktonerecsumCCMFCRTDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCMFCRTDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCMFCRTDeny.setDescription('An object containing the system-wide total number of requests that were denied because no receivers of this type were available during the measurement hour.')
g3pktonerecsumCCMFCRPDeny = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCCMFCRPDeny.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCCMFCRPDeny.setDescription('An object containing the system-wide peak number of requests that were denied at any one time because no receivers of this type were available during the measurement hour.')
g3pktonerecsumDTMRTAvail = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumDTMRTAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumDTMRTAvail.setDescription('An object containing the number of ports available for the type of tone receiver.')
g3pktonerecsumGPRDTAvail = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumGPRDTAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumGPRDTAvail.setDescription('An object containing the number of ports available for the type of tone receiver.')
g3pktonerecsumCLASTAvail = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumCLASTAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumCLASTAvail.setDescription('An object containing the number of ports available for the type of tone receiver.')
g3pktonerecsumETRTAvail = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 69, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pktonerecsumETRTAvail.setStatus('mandatory')
if mibBuilder.loadTexts: g3pktonerecsumETRTAvail.setDescription('An object containing the number of ports available for the type of tone receiver.')
g3rpatcfgTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgTage.setDescription('The number of timeticks since the route pattern data was last extracted from the switch by the Proxy Agent. This object along with the g3rpatcfgintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3rpatcfgTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3rpatcfgTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgTintvl.setDescription('An object containing the interval for which the route pattern data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for route pattern objects is received by the agent it uses the g3rpatcfgage and g3rpatcfgintvl objects to determine whether it should refresh the cached rpatcfgTable. If g3rpatcfgstmp + g3rpatcfgintvl is less than the current value of the sysUpTime object then the agent refreshes the rpatcfgTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3rpatcfgTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3rpatcfgTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3rpatcfgTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3rpatcfgTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3rpatcfgPattern1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern1.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern1.setDescription('An object containing the measurement 1 route pattern')
g3rpatcfgPattern2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern2.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern2.setDescription('An object containing the measurement 2 route pattern')
g3rpatcfgPattern3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern3.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern3.setDescription('An object containing the measurement 3 route pattern')
g3rpatcfgPattern4 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern4.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern4.setDescription('An object containing the measurement 4 route pattern')
g3rpatcfgPattern5 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern5.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern5.setDescription('An object containing the measurement 5 route pattern')
g3rpatcfgPattern6 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern6.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern6.setDescription('An object containing the measurement 6 route pattern')
g3rpatcfgPattern7 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern7.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern7.setDescription('An object containing the measurement 7 route pattern')
g3rpatcfgPattern8 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern8.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern8.setDescription('An object containing the measurement 8 route pattern')
g3rpatcfgPattern9 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern9.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern9.setDescription('An object containing the measurement 9 route pattern')
g3rpatcfgPattern10 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern10.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern10.setDescription('An object containing the measurement 10 route pattern')
g3rpatcfgPattern11 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern11.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern11.setDescription('An object containing the measurement 11 route pattern')
g3rpatcfgPattern12 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern12.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern12.setDescription('An object containing the measurement 12 route pattern')
g3rpatcfgPattern13 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern13.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern13.setDescription('An object containing the measurement 13 route pattern')
g3rpatcfgPattern14 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern14.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern14.setDescription('An object containing the measurement 14 route pattern')
g3rpatcfgPattern15 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern15.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern15.setDescription('An object containing the measurement 15 route pattern')
g3rpatcfgPattern16 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern16.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern16.setDescription('An object containing the measurement 16 route pattern')
g3rpatcfgPattern17 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern17.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern17.setDescription('An object containing the measurement 17 route pattern')
g3rpatcfgPattern18 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern18.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern18.setDescription('An object containing the measurement 18 route pattern')
g3rpatcfgPattern19 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern19.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern19.setDescription('An object containing the measurement 19 route pattern')
g3rpatcfgPattern20 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern20.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern20.setDescription('An object containing the measurement 20 route pattern')
g3rpatcfgPattern21 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern21.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern21.setDescription('An object containing the measurement 21 route pattern')
g3rpatcfgPattern22 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern22.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern22.setDescription('An object containing the measurement 22 route pattern')
g3rpatcfgPattern23 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern23.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern23.setDescription('An object containing the measurement 23 route pattern')
g3rpatcfgPattern24 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern24.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern24.setDescription('An object containing the measurement 24 route pattern')
g3rpatcfgPattern25 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 70, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatcfgPattern25.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatcfgPattern25.setDescription('An object containing the measurement 25 route pattern')
g3rpatTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatTage.setDescription('The number of timeticks since the route pattern data was last extracted from the switch by the Proxy Agent. This object along with the g3rpatintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3rpatTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3rpatTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatTintvl.setDescription('An object containing the interval for which the route pattern data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for route pattern objects is received by the agent it uses the g3rpatage and g3rpatintvl objects to determine whether it should refresh the cached rpatTable. If g3rpatstmp + g3rpatintvl is less than the current value of the sysUpTime object then the agent refreshes the rpatTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3rpatTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3rpatTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3rpatTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3rpatTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3rpatTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6), )
if mibBuilder.loadTexts: g3rpatTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatTable.setDescription('A list of g3rpat entries.')
g3rpatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3rpatPattern"), (0, "G3-AVAYA-MIB", "g3rpatIndex"))
if mibBuilder.loadTexts: g3rpatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatEntry.setDescription('A g3rpat entry containing objects of the g3rpat information sent by the switch.')
g3rpatPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatPattern.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatPattern.setDescription('An object containing the number of route pattern being measured.')
g3rpatTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatTrunkGroup.setDescription('An object containing the first trunk group number.')
g3rpatYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatYear.setDescription('An object containing the Year the command was executed.')
g3rpatMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatMonth.setDescription('An object containing the Month the command was executed.')
g3rpatDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatDay.setDescription('An object containing the Day the command was executed.')
g3rpatHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatHour.setDescription('An object containing the Hour the command was executed.')
g3rpatQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatQueueSize.setDescription('An object containing the length of the queue for the first trunk group in the route pattern.')
g3rpatCallsOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatCallsOffered.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatCallsOffered.setDescription('An object containing the total number of calls offered to the route pattern.')
g3rpatCallsCarried = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatCallsCarried.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatCallsCarried.setDescription('An object containing the total number of seizures for all trunk groups in the routing pattern.')
g3rpatCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatCallsBlocked.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatCallsBlocked.setDescription('An object containing the number of outgoing calls that found all trunk groups in the pattern busy.')
g3rpatCallsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatCallsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatCallsQueued.setDescription('An object containing the number of offered calls that found all trunk groups in the pattern busy and were placed in queue for the first trunk group in the pattern.')
g3rpatQueueOvflo = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatQueueOvflo.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatQueueOvflo.setDescription('An object containing the number of calls that find the queue on the first trunk group full.')
g3rpatCallsCarrd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatCallsCarrd.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatCallsCarrd.setDescription('An object containing the percentage of total calls carried over the route pattern by the trunk group.')
g3rpatTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatTotalCalls.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatTotalCalls.setDescription('An object containing the total number of calls carried by the route pattern over the trunk group.')
g3rpatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 71, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3rpatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: g3rpatIndex.setDescription('An object containing an index for a route pattern/trunk group number combination to make a record unique.')
g3pkrpatTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatTage.setDescription('The number of timeticks since the route pattern data was last extracted from the switch by the Proxy Agent. This object along with the g3rpatintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkrpatTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkrpatTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatTintvl.setDescription('An object containing the interval for which the route pattern data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for route pattern objects is received by the agent it uses the g3rpatage and g3rpatintvl objects to determine whether it should refresh the cached rpatTable. If g3rpatstmp + g3rpatintvl is less than the current value of the sysUpTime object then the agent refreshes the rpatTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkrpatTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkrpatTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkrpatTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkrpatTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkrpatTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6), )
if mibBuilder.loadTexts: g3pkrpatTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatTable.setDescription('A list of g3pkrpat entries.')
g3pkrpatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkrpatPattern"), (0, "G3-AVAYA-MIB", "g3pkrpatIndex"))
if mibBuilder.loadTexts: g3pkrpatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatEntry.setDescription('A g3pkrpat entry containing objects of the g3pkrpat information sent by the switch.')
g3pkrpatPattern = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatPattern.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatPattern.setDescription('An object containing the number of route pattern being measured.')
g3pkrpatTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatTrunkGroup.setDescription('An object containing the first trunk group number.')
g3pkrpatYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatYear.setDescription('An object containing the Year the command was executed.')
g3pkrpatMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatMonth.setDescription('An object containing the Month the command was executed.')
g3pkrpatDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatDay.setDescription('An object containing the Day the command was executed.')
g3pkrpatHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatHour.setDescription('An object containing the Hour the command was executed.')
g3pkrpatQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatQueueSize.setDescription('An object containing the length of the queue for the first trunk group in the route pattern.')
g3pkrpatCallsOffered = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatCallsOffered.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatCallsOffered.setDescription('An object containing the total number of calls offered to the route pattern.')
g3pkrpatCallsCarried = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatCallsCarried.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatCallsCarried.setDescription('An object containing the total number of seizures for all trunk groups in the routing pattern.')
g3pkrpatCallsBlocked = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatCallsBlocked.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatCallsBlocked.setDescription('An object containing the number of outgoing calls that found all trunk groups in the pattern busy.')
g3pkrpatCallsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatCallsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatCallsQueued.setDescription('An object containing the number of offered calls that found all trunk groups in the pattern busy and were placed in queue for the first trunk group in the pattern.')
g3pkrpatQueueOvflo = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatQueueOvflo.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatQueueOvflo.setDescription('An object containing the number of calls that find the queue on the first trunk group full.')
g3pkrpatCallsCarrd = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatCallsCarrd.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatCallsCarrd.setDescription('An object containing the percentage of total calls carried over the route pattern by the trunk group.')
g3pkrpatTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatTotalCalls.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatTotalCalls.setDescription('An object containing the total number of calls carried by the route')
g3pkrpatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 72, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkrpatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkrpatIndex.setDescription('An object containing an index for a route pattern/trunk group number combination to make a record unique.')
g3secviolateTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTage.setDescription('The number of timeticks since the security violations data was last extracted from the switch by the Proxy Agent. This object along with the g3secviolateintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3secviolateTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3secviolateTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTintvl.setDescription('An object containing the interval for which the security violations data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for security violations objects is received by the agent it uses the g3secviolateage and g3secviolateintvl objects to determine whether it should refresh the cached secviolateTable. If g3secviolatestmp + g3secviolateintvl is less than the current value of the sysUpTime object then the agent refreshes the secviolateTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3secviolateTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3secviolateTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3secviolateTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3secviolateTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3secviolateTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6), )
if mibBuilder.loadTexts: g3secviolateTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTable.setDescription('A list of g3secviolate entries.')
g3secviolateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3secviolatePortType"))
if mibBuilder.loadTexts: g3secviolateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateEntry.setDescription('A g3secviolate entry containing objects of the g3secviolate information sent by the switch.')
g3secviolatePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolatePortType.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolatePortType.setDescription('An object containing the type of port to which the login was attempted.')
g3secviolateYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateYear.setDescription('An object containing the Year the command was executed.')
g3secviolateMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateMonth.setDescription('An object containing the Month the command was executed.')
g3secviolateDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateDay.setDescription('An object containing the Day the command was executed.')
g3secviolateHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateHour.setDescription('An object containing the Hour the command was executed.')
g3secviolateCountSince = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 27))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateCountSince.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateCountSince.setDescription('An object containing the Year the command was executed.')
g3secviolateValidBC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateValidBC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateValidBC.setDescription('An object containing the total number of times a user entered a valid barrier code.')
g3secviolateInvalidBC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateInvalidBC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateInvalidBC.setDescription('An object containing the total number of times a user entered a invalid barrier code.')
g3secviolateViolateBC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateViolateBC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateViolateBC.setDescription('An object containing the total number of security violations for barrier codes.')
g3secviolateStnValidSSC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateStnValidSSC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateStnValidSSC.setDescription('An object containing the number of calls originating from stations that generated valid station security codes.')
g3secviolateStnInvalidSSC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateStnInvalidSSC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateStnInvalidSSC.setDescription('An object containing the number of calls originating from stations that generated invalid station security codes.')
g3secviolateTrkValidSSC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTrkValidSSC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTrkValidSSC.setDescription('An object containing the number of calls originating from trunks that generated valid station security codes.')
g3secviolateTrkInvalidSSC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTrkInvalidSSC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTrkInvalidSSC.setDescription('An object containing the number of calls originating from trunks that generated invalid station security codes.')
g3secviolateTtlValidSSC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTtlValidSSC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTtlValidSSC.setDescription('An object containing the number of total calls that generated valid station security codes.')
g3secviolateTtlInvalidSSC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTtlInvalidSSC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTtlInvalidSSC.setDescription('An object containing the number of total calls that generated invalid station security codes.')
g3secviolateTtlViolateSSC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTtlViolateSSC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTtlViolateSSC.setDescription('An object containing the number of total calls that generated station security violations.')
g3secviolateStnValidAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateStnValidAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateStnValidAC.setDescription('An object containing the number of calls originating from stations that generated valid authorization codes.')
g3secviolateStnInvalidAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateStnInvalidAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateStnInvalidAC.setDescription('An object containing the number of calls originating from stations that generated invalid authorization codes.')
g3secviolateStnViolateAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateStnViolateAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateStnViolateAC.setDescription('An object containing the number of calls originating from stations that generated security violations for authorization codes.')
g3secviolateTrkValidAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTrkValidAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTrkValidAC.setDescription('An object containing the number of calls originating from trunks that generated valid authorization codes.')
g3secviolateTrkInvalidAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTrkInvalidAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTrkInvalidAC.setDescription('An object containing the number of calls originating from trunks that generated invalid authorization codes.')
g3secviolateTrkViolateAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTrkViolateAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTrkViolateAC.setDescription('An object containing the number of calls originating from trunks that generated security violations for authorization codes.')
g3secviolateRAValidAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateRAValidAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateRAValidAC.setDescription('An object containing the number of calls originating from remote access that generated valid authorization codes.')
g3secviolateRAInvalidAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateRAInvalidAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateRAInvalidAC.setDescription('An object containing the number of calls originating from remote access that generated invalid authorization codes.')
g3secviolateRAViolateAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateRAViolateAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateRAViolateAC.setDescription('An object containing the number of calls originating from remote access that generated security violations for authorization codes.')
g3secviolateAtdValidAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateAtdValidAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateAtdValidAC.setDescription('An object containing the number of calls originating from attendants that generated valid authorization codes.')
g3secviolateAtdInvalidAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateAtdInvalidAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateAtdInvalidAC.setDescription('An object containing the number of calls originating from attendants that generated invalid authorization codes.')
g3secviolateAtdViolateAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateAtdViolateAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateAtdViolateAC.setDescription('An object containing the number of calls originating from attendants that generated security violations for authorization codes.')
g3secviolateTtlValidAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTtlValidAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTtlValidAC.setDescription('An object containing the number of total calls that generated valid authorization codes.')
g3secviolateTtlInvalidAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTtlInvalidAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTtlInvalidAC.setDescription('An object containing the number of total calls that generated invalid authorization codes.')
g3secviolateTtlViolateAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTtlViolateAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTtlViolateAC.setDescription('An object containing the number of total calls that generated security violations for authorization codes.')
g3secviolateLoginSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateLoginSuccess.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateLoginSuccess.setDescription('An object containing the total number of successful logins into the given port type.')
g3secviolateInvalidAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateInvalidAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateInvalidAttempt.setDescription('An object containing the total number of login attempts where the login ID or password were invalid.')
g3secviolateInvalidID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateInvalidID.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateInvalidID.setDescription('An object containing the total number of login attempts where the login ID was invalid.')
g3secviolateForceDsc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateForceDsc.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateForceDsc.setDescription('An object containing the total number of login processes that were disconnected automatically by the switch because the threshold for consecutive invalid login attempts was exceeded.')
g3secviolateSecViolate = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateSecViolate.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateSecViolate.setDescription('An object containing the total number of login security violations.')
g3secviolateTrivialAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 73, 6, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3secviolateTrivialAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: g3secviolateTrivialAttempt.setDescription('An object containing the total number of times a user connected to the system and gave no input to the login sequence.')
g3cbctrunkTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkTage.setDescription('The number of timeticks since the cbc trunk group data was last extracted from the switch by the Proxy Agent. This object along with the g3cbctrunkintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3cbctrunkTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3cbctrunkTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkTintvl.setDescription('An object containing the interval for which the cbc trunk group data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for cbc trunk group objects is received by the agent it uses the g3cbctrunkage and g3cbctrunkintvl objects to determine whether it should refresh the cached cbctrunkTable. If g3cbctrunkstmp + g3cbctrunkintvl is less than the current value of the sysUpTime object then the agent refreshes the cbctrunkTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3cbctrunkTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3cbctrunkTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3cbctrunkTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3cbctrunkTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3cbctrunkTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6), )
if mibBuilder.loadTexts: g3cbctrunkTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkTable.setDescription('A list of g3cbctrunk entries.')
g3cbctrunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3cbctrunkTGNumber"), (0, "G3-AVAYA-MIB", "g3cbctrunkServiceName"))
if mibBuilder.loadTexts: g3cbctrunkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkEntry.setDescription('A g3cbctrunk entry containing objects of the g3cbctrunk information sent by the switch.')
g3cbctrunkTGNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkTGNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkTGNumber.setDescription('An object containing the trunk group number.')
g3cbctrunkServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkServiceName.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkServiceName.setDescription('An object containing the name of the services or features for which the associated measurements are being reported.')
g3cbctrunkYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkYear.setDescription('An object containing the Year the command was executed.')
g3cbctrunkMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkMonth.setDescription('An object containing the Month the command was executed.')
g3cbctrunkDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkDay.setDescription('An object containing the Day the command was executed.')
g3cbctrunkHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkHour.setDescription('An object containing the Hour the command was executed.')
g3cbctrunkQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkQueueSize.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkQueueSize.setDescription('An object containing the size of the trunk group queue.')
g3cbctrunkCallsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkCallsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkCallsQueued.setDescription('An object containing the total number of calls that entered the queue.')
g3cbctrunkQueueOvflw = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkQueueOvflw.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkQueueOvflw.setDescription('An object containing the total number of calls that were denied access to the trunk, found the queue full, and received reorder tone.')
g3cbctrunkQueueAband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkQueueAband.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkQueueAband.setDescription('An object containing the total number of calls that were removed from the queue by the system or the user.')
g3cbctrunkTrunksOOS = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkTrunksOOS.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkTrunksOOS.setDescription('An object containing the total number of trunks in the group that were out-of-service when measurements were collected.')
g3cbctrunkPlan1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkPlan1.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkPlan1.setDescription('An object containing the first usage allocation plan number (if any).')
g3cbctrunkPlan2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkPlan2.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkPlan2.setDescription('An object containing the second usage allocation plan number (if any).')
g3cbctrunkPlan3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkPlan3.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkPlan3.setDescription('An object containing the third usage allocation plan number (if any).')
g3cbctrunkPlan4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkPlan4.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkPlan4.setDescription('An object containing the fourth usage allocation plan number (if any).')
g3cbctrunkPlan5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkPlan5.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkPlan5.setDescription('An object containing the fifth usage allocation plan number (if any).')
g3cbctrunkPlan6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkPlan6.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkPlan6.setDescription('An object containing the sixth usage allocation plan number (if any).')
g3cbctrunkDur1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkDur1.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkDur1.setDescription('An object containing the first usage allocation plan duration (in minutes) that the first plan was in effect (if any).')
g3cbctrunkDur2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkDur2.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkDur2.setDescription('An object containing the second usage allocation plan duration (in minutes) that the second plan was in effect (if any).')
g3cbctrunkDur3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkDur3.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkDur3.setDescription('An object containing the third usage allocation plan duration (in minutes) that the third plan was in effect (if any).')
g3cbctrunkDur4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkDur4.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkDur4.setDescription('An object containing the fourth usage allocation plan duration (in minutes) that the fourth plan was in effect (if any).')
g3cbctrunkDur5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkDur5.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkDur5.setDescription('An object containing the fifth usage allocation plan duration (in minutes) that the fifth plan was in effect (if any).')
g3cbctrunkDur6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkDur6.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkDur6.setDescription('An object containing the sixth usage allocation plan duration (in minutes) that the sixth plan was in effect (if any).')
g3cbctrunkMinChan = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkMinChan.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkMinChan.setDescription('An object containing the minimum number of channels in the ISDN-PRI CBC trunk group allocated to the specified service/feature.')
g3cbctrunkMaxChan = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkMaxChan.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkMaxChan.setDescription('An object containing the maximum number of channels in the ISDN-PRI CBC trunk group allocated to the specified service/feature.')
g3cbctrunkMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkMeasHour.setDescription('An object containing the Hour the measurement was taken.')
g3cbctrunkTotUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkTotUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkTotUsage.setDescription('An object containing the sum of time (CCS) for all channels used by the specified service/feature.')
g3cbctrunkTotSeize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkTotSeize.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkTotSeize.setDescription('An object containing the total number of incoming and outgoing calls that requested the specified service/feature.')
g3cbctrunkIncSeize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkIncSeize.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkIncSeize.setDescription('An object containing the total number of incoming calls that requested the specified service/feature.')
g3cbctrunkTanSeize = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkTanSeize.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkTanSeize.setDescription('An object containing the total number of trunk-to-trunk call seizures using the specified service/feature.')
g3cbctrunkOvfTG = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkOvfTG.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkOvfTG.setDescription('An object containing the number of outgoing calls that requested the specified service/feature, but were not carried because the calls arrived to find no idle trunk members.')
g3cbctrunkOvfSF = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkOvfSF.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkOvfSF.setDescription('An object containing the number of calls that requested the specified service/feature but were denied.')
g3cbctrunkOvfMAX = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkOvfMAX.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkOvfMAX.setDescription('An object containing the number of calls that were not carried because they originated at a time when the specified service/feature had already used up its allotted maximum number of channels.')
g3cbctrunkTBM = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkTBM.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkTBM.setDescription('An object containing the percentage of time during the polling interval that the number of channels in use by the specified service/feature is below the specified minimum.')
g3cbctrunkATB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkATB.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkATB.setDescription('An object containing the percentage of time during the measurement interval that the specified service/feature could not get a channel.')
g3cbctrunkOutBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 74, 6, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3cbctrunkOutBlk.setStatus('mandatory')
if mibBuilder.loadTexts: g3cbctrunkOutBlk.setDescription('An object containing the ratio of outgoing calls not carried for a specified service/feature to the outgoing calls offered by the service/feature.')
g3deftimeTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 75, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3deftimeTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3deftimeTage.setDescription('The number of timeticks since the definity time data was last extracted from the switch by the Proxy Agent. This object along with the g3deftimeintvl object allows the Network Manager to determine the validity of the definity time data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3deftimeTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 75, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3deftimeTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3deftimeTintvl.setDescription('An object containing the interval for which the definity time data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for definity time objects is received by the agent it uses the g3deftimeage and g3deftimeintvl objects to determine whether it should refresh the cached deftimeTable. If g3deftimestmp + g3deftimeintvl is less than the current value of the sysUpTime object then the agent refreshes the deftimeTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3deftimeTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 75, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3deftimeTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3deftimeTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3deftimeTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 75, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3deftimeTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3deftimeTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3deftimeDayOfMonth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 75, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3deftimeDayOfMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3deftimeDayOfMonth.setDescription('An INTEGER object containing the current system time Day of the Month (1-31).')
g3deftimeMonth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 75, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3deftimeMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3deftimeMonth.setDescription("A DisplayString Object that contains the name of the Month ('January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', or 'December').")
g3deftimeYear = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 75, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3deftimeYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3deftimeYear.setDescription('An INTEGER object containing the current system time Year (0000-9999).')
g3deftimeDayOfWeek = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 75, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3deftimeDayOfWeek.setStatus('mandatory')
if mibBuilder.loadTexts: g3deftimeDayOfWeek.setDescription("A DisplayString Object that contains the day of the week ('Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', or 'Sunday').")
g3deftimeHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 75, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3deftimeHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3deftimeHour.setDescription('An INTEGER object containing the current system time Hour (0-23).')
g3deftimeMinute = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 75, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3deftimeMinute.setStatus('mandatory')
if mibBuilder.loadTexts: g3deftimeMinute.setDescription('An INTEGER object containing the current system time Minute (0-59).')
g3deftimeSecond = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 75, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3deftimeSecond.setStatus('mandatory')
if mibBuilder.loadTexts: g3deftimeSecond.setDescription('An INTEGER object containing the current system time Second (0-59).')
g3trunkoutTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkoutTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkoutTage.setDescription('The number of timeticks since the trunk outage data was last extracted from the switch by the Proxy Agent. This object along with the g3trunkoutintvl object allows the Network Manager to determine the validity of the trunk outage data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3trunkoutTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trunkoutTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkoutTintvl.setDescription('An object containing the interval for which the trunk outage data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for trunk outage objects is received by the agent it uses the g3trunkoutage and g3trunkoutintvl objects to determine whether it should refresh the cached trunkoutTable. If g3trunkoutstmp + g3trunkoutintvl is less than the current value of the sysUpTime object then the agent refreshes the trunkoutTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3trunkoutTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkoutTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkoutTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3trunkoutTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trunkoutTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkoutTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3trunkoutTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkoutTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkoutTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3trunkoutTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76, 6), )
if mibBuilder.loadTexts: g3trunkoutTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkoutTable.setDescription('A list of g3trunkout entries.')
g3trunkoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3trunkoutTrunkGroup"), (0, "G3-AVAYA-MIB", "g3trunkoutMember"))
if mibBuilder.loadTexts: g3trunkoutEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkoutEntry.setDescription('A g3trunkout entry containing objects of the g3trunkout information sent by the switch.')
g3trunkoutTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkoutTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkoutTrunkGroup.setDescription('An object containing the trunk group number.')
g3trunkoutMember = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkoutMember.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkoutMember.setDescription('An object containing the group member number.')
g3trunkoutYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkoutYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkoutYear.setDescription('An object containing the Year the command was executed.')
g3trunkoutMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkoutMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkoutMonth.setDescription('An object containing the Month the command was executed.')
g3trunkoutDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkoutDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkoutDay.setDescription('An object containing the Day the command was executed.')
g3trunkoutHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkoutHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkoutHour.setDescription('An object containing the Hour the command was executed.')
g3trunkoutOutages = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 76, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunkoutOutages.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunkoutOutages.setDescription('An object containing the number of times the group member is sampled as out of service over the measurement period.')
g3trunklightTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunklightTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunklightTage.setDescription('The number of timeticks since the lightly used trunk data was last extracted from the switch by the Proxy Agent. This object along with the g3trunklightintvl object allows the Network Manager to determine the validity of the lightly used trunk data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3trunklightTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trunklightTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunklightTintvl.setDescription('An object containing the interval for which the lightly used trunk data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for lightly used trunk objects is received by the agent it uses the g3trunklightage and g3trunklightintvl objects to determine whether it should refresh the cached trunklightTable. If g3trunklightstmp+g3trunklightintvl is less than the current value of the sysUpTime object then the agent refreshes the trunklightTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3trunklightTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunklightTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunklightTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3trunklightTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trunklightTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunklightTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3trunklightTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunklightTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunklightTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3trunklightTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77, 6), )
if mibBuilder.loadTexts: g3trunklightTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunklightTable.setDescription('A list of g3trunklight entries.')
g3trunklightEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3trunklightTrunkGroup"), (0, "G3-AVAYA-MIB", "g3trunklightMember"))
if mibBuilder.loadTexts: g3trunklightEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunklightEntry.setDescription('A g3trunklight entry containing objects of the g3trunklight information sent by the switch.')
g3trunklightTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunklightTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunklightTrunkGroup.setDescription('An object containing the trunk group number.')
g3trunklightMember = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunklightMember.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunklightMember.setDescription('An object containing the group member number.')
g3trunklightYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunklightYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunklightYear.setDescription('An object containing the Year the command was executed.')
g3trunklightMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunklightMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunklightMonth.setDescription('An object containing the Month the command was executed.')
g3trunklightDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunklightDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunklightDay.setDescription('An object containing the Day the command was executed.')
g3trunklightHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunklightHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunklightHour.setDescription('An object containing the Hour the command was executed.')
g3trunklightCarried = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 77, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trunklightCarried.setStatus('mandatory')
if mibBuilder.loadTexts: g3trunklightCarried.setDescription('An object containing the number of calls carried on the trunk member over the measurement interval.')
g3loadtotalTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtotalTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalTage.setDescription('The number of timeticks since the data was last extracted from the switch by the Proxy Agent. This object along with the g3loadtotalintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3loadtotalTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3loadtotalTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these objects is received by the agent it uses the g3loadtotalage and g3loadtotalintvl objects to determine whether it should refresh the cached loadtotalTable. If g3loadtotalstmp + g3loadtotalintvl is less than the current value of the sysUpTime object then the agent refreshes the loadtotalTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3loadtotalTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtotalTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3loadtotalTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3loadtotalTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3loadtotalTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtotalTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3loadtotalTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 6), )
if mibBuilder.loadTexts: g3loadtotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalTable.setDescription('A list of g3loadtotal entries.')
g3loadtotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3loadtotalPNNumber"))
if mibBuilder.loadTexts: g3loadtotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalEntry.setDescription('A g3loadtotal entry containing objects of the g3loadtotal information sent by the switch.')
g3loadtotalPNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtotalPNNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalPNNumber.setDescription('An object containing the Port Network number.')
g3loadtotalYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtotalYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalYear.setDescription('An object containing the Year the command was executed.')
g3loadtotalMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtotalMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalMonth.setDescription('An object containing the Month the command was executed.')
g3loadtotalDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtotalDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalDay.setDescription('An object containing the Day the command was executed.')
g3loadtotalHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtotalHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalHour.setDescription('An object containing the Hour the command was executed.')
g3loadtotalPNOccupancy = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtotalPNOccupancy.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalPNOccupancy.setDescription('An object containing the percentage of port network link occupancy.')
g3loadtotalPNUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtotalPNUtil.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalPNUtil.setDescription('An object containing the percentage of the total capacity of the processor on the measured EI board.')
g3loadtotalTDMOccupancy = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 78, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtotalTDMOccupancy.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtotalTDMOccupancy.setDescription('An object containing the percentage of time division muliplexed occupancy.')
g3loadintTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadintTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintTage.setDescription('The number of timeticks since the data was last extracted from the switch by the Proxy Agent. This object along with the g3loadintintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3loadintTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3loadintTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these objects is received by the agent it uses the g3loadintage and g3loadintintvl objects to determine whether it should refresh the cached loadintTable. If g3loadintstmp + g3loadintintvl is less than the current value of the sysUpTime object then the agent refreshes the loadintTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3loadintTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadintTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3loadintTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3loadintTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3loadintTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadintTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3loadintTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 6), )
if mibBuilder.loadTexts: g3loadintTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintTable.setDescription('A list of g3loadint entries.')
g3loadintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3loadintPNNumber"))
if mibBuilder.loadTexts: g3loadintEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintEntry.setDescription('A g3loadint entry containing objects of the g3loadint information sent by the switch.')
g3loadintPNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadintPNNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintPNNumber.setDescription('An object containing the Port Network number.')
g3loadintYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadintYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintYear.setDescription('An object containing the Year the command was executed.')
g3loadintMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadintMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintMonth.setDescription('An object containing the Month the command was executed.')
g3loadintDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadintDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintDay.setDescription('An object containing the Day the command was executed.')
g3loadintHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadintHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintHour.setDescription('An object containing the Hour the command was executed.')
g3loadintIntIntraPNUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadintIntIntraPNUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintIntIntraPNUse.setDescription('An object containing the TDM time-slot usage caused by station-to-station calls between terminals on the same port network (displayed in CCS).')
g3loadintIntIntraPNPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadintIntIntraPNPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintIntIntraPNPeg.setDescription('An object containing the count of TDM time-slot seizures caused by station-to-station calls between terminals on the same PN.')
g3loadintIntInterPNUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadintIntInterPNUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintIntInterPNUse.setDescription('An object containing the TDM time-slot usage caused by station-to-station calls between terminals on different port networks (in CCS).')
g3loadintIntInterPNPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 79, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadintIntInterPNPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadintIntInterPNPeg.setDescription('An object containing the TDM time slot seizures caused by station-to-station calls between terminals on different PNs.')
g3loadincTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadincTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincTage.setDescription('The number of timeticks since the data was last extracted from the switch by the Proxy Agent. This object along with the g3loadincintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3loadincTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3loadincTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these objects is received by the agent it uses the g3loadincage and g3loadincintvl objects to determine whether it should refresh the cached loadincTable. If g3loadincstmp + g3loadincintvl is less than the current value of the sysUpTime object then the agent refreshes the loadincTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3loadincTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadincTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3loadincTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3loadincTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3loadincTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadincTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3loadincTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 6), )
if mibBuilder.loadTexts: g3loadincTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincTable.setDescription('A list of g3loadinc entries.')
g3loadincEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3loadincPNNumber"))
if mibBuilder.loadTexts: g3loadincEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincEntry.setDescription('A g3loadinc entry containing objects of the g3loadinc information sent by the switch.')
g3loadincPNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadincPNNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincPNNumber.setDescription('An object containing the Port Network number.')
g3loadincYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadincYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincYear.setDescription('An object containing the Year the command was executed.')
g3loadincMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadincMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincMonth.setDescription('An object containing the Month the command was executed.')
g3loadincDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadincDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincDay.setDescription('An object containing the Day the command was executed.')
g3loadincHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadincHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincHour.setDescription('An object containing the Hour the command was executed.')
g3loadincIncIntraPNUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadincIncIntraPNUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincIncIntraPNUse.setDescription('An object containing the TDM time-slot usage caused by incoming trunk calls to a station on the same port network (in CCS).')
g3loadincIncIntraPNPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadincIncIntraPNPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincIncIntraPNPeg.setDescription('An object containing the count of TDM time-slot seizures caused by incoming trunk calls to a station on the same port network.')
g3loadincIncIncomingUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadincIncIncomingUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincIncIncomingUse.setDescription('An object containing the TDM time-slot usage caused by calls to a station on the port network from an incoming trunk on another port network (in CCS).')
g3loadincIncIncomingPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadincIncIncomingPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincIncIncomingPeg.setDescription('An object containing the count of TDM time-slot seizures caused by calls to a station on the port network from an incoming trunk on another port network.')
g3loadincIncOutgoingUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadincIncOutgoingUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincIncOutgoingUse.setDescription('An object containing the TDM time-slot usage caused by calls to a station on another port network from an incoming trunk on the measured port network (in CCS).')
g3loadincIncOutgoingPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 80, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadincIncOutgoingPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadincIncOutgoingPeg.setDescription('An object containing the count of TDM time-slot seizures caused by calls to a station on another port network from an incoming trunk on the measured port network.')
g3loadoutTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadoutTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutTage.setDescription('The number of timeticks since the data was last extracted from the switch by the Proxy Agent. This object along with the g3loadoutintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3loadoutTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3loadoutTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these objects is received by the agent it uses the g3loadoutage and g3loadoutintvl objects to determine whether it should refresh the cached loadoutTable. If g3loadoutstmp + g3loadoutintvl is less than the current value of the sysUpTime object then the agent refreshes the loadoutTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3loadoutTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadoutTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3loadoutTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3loadoutTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3loadoutTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadoutTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3loadoutTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 6), )
if mibBuilder.loadTexts: g3loadoutTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutTable.setDescription('A list of g3loadout entries.')
g3loadoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3loadoutPNNumber"))
if mibBuilder.loadTexts: g3loadoutEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutEntry.setDescription('A g3loadout entry containing objects of the g3loadout information sent by the switch.')
g3loadoutPNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadoutPNNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutPNNumber.setDescription('An object containing the Port Network number.')
g3loadoutYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadoutYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutYear.setDescription('An object containing the Year the command was executed.')
g3loadoutMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadoutMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutMonth.setDescription('An object containing the Month the command was executed.')
g3loadoutDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadoutDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutDay.setDescription('An object containing the Day the command was executed.')
g3loadoutHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadoutHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutHour.setDescription('An object containing the Hour the command was executed.')
g3loadoutOutIntraPNUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadoutOutIntraPNUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutOutIntraPNUse.setDescription('An object containing the TDM time-slot usage caused by outgoing calls made by stations on the measured port network and serviced by outgoing trunks on the same port network (in CCS).')
g3loadoutOutIntraPNPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadoutOutIntraPNPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutOutIntraPNPeg.setDescription('An object containing the count of TDM time-slot seizures caused by outgoing calls made by stations on the measured port network and serviced by outgoing trunks on the same port network.')
g3loadoutOutIncomingUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadoutOutIncomingUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutOutIncomingUse.setDescription('An object containing the TDM time-slot usage resulting from outgoing calls originated at stations on another port network but serviced by trunks on the port network being measured (in CCS).')
g3loadoutOutIncomingPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadoutOutIncomingPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutOutIncomingPeg.setDescription('An object containing the count of TDM time-slot seizures resulting from outgoing calls originated at stations on another port network, but serviced by trunks on the port network being measured.')
g3loadoutOutOutgoingUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadoutOutOutgoingUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutOutOutgoingUse.setDescription('An object containing the TDM time-slot usage resulting from outgoing calls originated at stations on the port network being measured, but serviced by trunks on another port network (in CCS).')
g3loadoutOutOutgoingPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 81, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadoutOutOutgoingPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadoutOutOutgoingPeg.setDescription('An object containing the count of TDM time-slot seizures resulting from outgoing calls originated at stations on the port network being measured, but serviced by trunks on another port network.')
g3loadtanTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtanTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanTage.setDescription('The number of timeticks since the tandem load data was last extracted from the switch by the Proxy Agent. This object along with the g3loadtanintvl object allows the Network Manager to determine the validity of the tandem load data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3loadtanTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3loadtanTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanTintvl.setDescription('An object containing the interval for which the tandem load data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the tandem load objects is received by the agent it uses the g3loadtanage and g3loadtanintvl objects to determine whether it should refresh the cached loadtanTable. If g3loadtanstmp + g3loadtanintvl is less than the current value of the sysUpTime object then the agent refreshes the loadtanTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3loadtanTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtanTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3loadtanTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3loadtanTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3loadtanTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtanTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3loadtanTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 6), )
if mibBuilder.loadTexts: g3loadtanTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanTable.setDescription('A list of g3loadtan entries.')
g3loadtanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3loadtanPNNumber"))
if mibBuilder.loadTexts: g3loadtanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanEntry.setDescription('A g3loadtan entry containing objects of the g3loadtan information sent by the switch.')
g3loadtanPNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtanPNNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanPNNumber.setDescription('An object containing the Port Network number.')
g3loadtanYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtanYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanYear.setDescription('An object containing the Year the command was executed.')
g3loadtanMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtanMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanMonth.setDescription('An object containing the Month the command was executed.')
g3loadtanDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtanDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanDay.setDescription('An object containing the Day the command was executed.')
g3loadtanHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtanHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanHour.setDescription('An object containing the Hour the command was executed.')
g3loadtanTanIntraPNUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtanTanIntraPNUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanTanIntraPNUse.setDescription('An object containing the TDM usage caused by tandem trunk calls originating and terminating on the port network being measured (in CCS).')
g3loadtanTanIntraPNPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtanTanIntraPNPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanTanIntraPNPeg.setDescription('An object containing the count of TDM time-slot seizures caused by tandem trunk calls originating and terminating on the port network being measured.')
g3loadtanTanIncomingUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtanTanIncomingUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanTanIncomingUse.setDescription('An object containing the TDM usage resulting from tandem trunk calls originating on another port network, but terminating on the port network being measured (in CCS).')
g3loadtanTanIncomingPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtanTanIncomingPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanTanIncomingPeg.setDescription('An object containing the count of TDM time-slot seizures resulting from tandem trunk calls originating on another port network, but terminating on the port network being measured. that is, the number of times a PN link time-slot is denied.')
g3loadtanTanOutgoingUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtanTanOutgoingUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanTanOutgoingUse.setDescription('An object containing the TDM usage resulting from tandem trunk calls originating on the port network being measured, but terminating on another port network (in CCS).')
g3loadtanTanOutgoingPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 82, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3loadtanTanOutgoingPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3loadtanTanOutgoingPeg.setDescription('An object containing the count of TDM time-slot seizures resulting from tandem trunk calls originating on the port network being measured, but terminating on another port network.')
g3pkloadtotalTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtotalTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalTage.setDescription('The number of timeticks since the data was last extracted from the switch by the Proxy Agent. This object along with the g3pkloadtotalintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkloadtotalTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkloadtotalTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these objects is received by the agent it uses the g3pkloadtotalage and g3pkloadtotalintvl objects to determine whether it should refresh the cached pkloadtotalTable. If g3pkloadtotalstmp + g3pkloadtotalintvl is less than the current value of the sysUpTime object then the agent refreshes the pkloadtotalTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkloadtotalTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtotalTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkloadtotalTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkloadtotalTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkloadtotalTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtotalTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkloadtotalTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 6), )
if mibBuilder.loadTexts: g3pkloadtotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalTable.setDescription('A list of g3pkloadtotal entries.')
g3pkloadtotalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkloadtotalPNNumber"))
if mibBuilder.loadTexts: g3pkloadtotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalEntry.setDescription('A g3pkloadtotal entry containing objects of the g3pkloadtotal information sent by the switch.')
g3pkloadtotalPNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtotalPNNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalPNNumber.setDescription('An object containing the Port Network number.')
g3pkloadtotalYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtotalYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalYear.setDescription('An object containing the Year the command was executed.')
g3pkloadtotalMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtotalMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalMonth.setDescription('An object containing the Month the command was executed.')
g3pkloadtotalDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtotalDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalDay.setDescription('An object containing the Day the command was executed.')
g3pkloadtotalHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtotalHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalHour.setDescription('An object containing the Hour the command was executed.')
g3pkloadtotalPNOccupancy = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtotalPNOccupancy.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalPNOccupancy.setDescription('An object containing the percentage of port network link occupancy.')
g3pkloadtotalPNUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtotalPNUtil.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalPNUtil.setDescription('An object containing the percentage of the total capacity of the processor on the measured EI board (this field no longer is no longer populated).')
g3pkloadtotalTDMOccupancy = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 83, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtotalTDMOccupancy.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtotalTDMOccupancy.setDescription('An object containing the percentage of time division muliplexed occupancy.')
g3pkloadintTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadintTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintTage.setDescription('The number of timeticks since the data was last extracted from the switch by the Proxy Agent. This object along with the g3pkloadintintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkloadintTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkloadintTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these objects is received by the agent it uses the g3pkloadintage and g3pkloadintintvl objects to determine whether it should refresh the cached pkloadintTable. If g3pkloadintstmp + g3pkloadintintvl is less than the current value of the sysUpTime object then the agent refreshes the pkloadintTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkloadintTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadintTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkloadintTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkloadintTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkloadintTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadintTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkloadintTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 6), )
if mibBuilder.loadTexts: g3pkloadintTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintTable.setDescription('A list of g3pkloadint entries.')
g3pkloadintEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkloadintPNNumber"))
if mibBuilder.loadTexts: g3pkloadintEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintEntry.setDescription('A g3pkloadint entry containing objects of the g3pkloadint information sent by the switch.')
g3pkloadintPNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadintPNNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintPNNumber.setDescription('An object containing the Port Network number.')
g3pkloadintYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadintYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintYear.setDescription('An object containing the Year the command was executed.')
g3pkloadintMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadintMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintMonth.setDescription('An object containing the Month the command was executed.')
g3pkloadintDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadintDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintDay.setDescription('An object containing the Day the command was executed.')
g3pkloadintHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadintHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintHour.setDescription('An object containing the Hour the command was executed.')
g3pkloadintIntIntraPNUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadintIntIntraPNUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintIntIntraPNUse.setDescription('An object containing the TDM time-slot usage caused by station-to-station calls between terminals on the same port network (displayed in CCS).')
g3pkloadintIntIntraPNPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadintIntIntraPNPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintIntIntraPNPeg.setDescription('An object containing the count of TDM time-slot seizures caused by station-to-station calls between terminals on the same PN.')
g3pkloadintIntInterPNUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadintIntInterPNUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintIntInterPNUse.setDescription('An object containing the TDM time-slot usage caused by station-to-station calls between terminals on different port networks (in CCS).')
g3pkloadintIntInterPNPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 84, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadintIntInterPNPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadintIntInterPNPeg.setDescription('An object containing the TDM time slot seizures caused by station-to-station calls between terminals on different PNs.')
g3pkloadincTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadincTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincTage.setDescription('The number of timeticks since the data was last extracted from the switch by the Proxy Agent. This object along with the g3pkloadincintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkloadincTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkloadincTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these objects is received by the agent it uses the g3pkloadincage and g3pkloadincintvl objects to determine whether it should refresh the cached pkloadincTable. If g3pkloadincstmp + g3pkloadincintvl is less than the current value of the sysUpTime object then the agent refreshes the pkloadincTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkloadincTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadincTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkloadincTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkloadincTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkloadincTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadincTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkloadincTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 6), )
if mibBuilder.loadTexts: g3pkloadincTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincTable.setDescription('A list of g3pkloadinc entries.')
g3pkloadincEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkloadincPNNumber"))
if mibBuilder.loadTexts: g3pkloadincEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincEntry.setDescription('A g3pkloadinc entry containing objects of the g3pkloadinc information sent by the switch.')
g3pkloadincPNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadincPNNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincPNNumber.setDescription('An object containing the Port Network number.')
g3pkloadincYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadincYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincYear.setDescription('An object containing the Year the command was executed.')
g3pkloadincMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadincMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincMonth.setDescription('An object containing the Month the command was executed.')
g3pkloadincDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadincDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincDay.setDescription('An object containing the Day the command was executed.')
g3pkloadincHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadincHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincHour.setDescription('An object containing the Hour the command was executed.')
g3pkloadincIncIntraPNUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadincIncIntraPNUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincIncIntraPNUse.setDescription('An object containing the TDM time-slot usage caused by incoming trunk calls to a station on the same port network (in CCS).')
g3pkloadincIncIntraPNPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadincIncIntraPNPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincIncIntraPNPeg.setDescription('An object containing the count of TDM time-slot seizures caused by incoming trunk calls to a station on the same port network.')
g3pkloadincIncIncomingUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadincIncIncomingUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincIncIncomingUse.setDescription('An object containing the TDM time-slot usage caused by calls to a station on the port network from an incoming trunk on another port network (in CCS).')
g3pkloadincIncIncomingPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadincIncIncomingPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincIncIncomingPeg.setDescription('An object containing the count of TDM time-slot seizures caused by calls to a station on the port network from an incoming trunk on another port network.')
g3pkloadincIncOutgoingUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadincIncOutgoingUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincIncOutgoingUse.setDescription('An object containing the TDM time-slot usage caused by calls to a station on another port network from an incoming trunk on the measured port network (in CCS).')
g3pkloadincIncOutgoingPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 85, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadincIncOutgoingPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadincIncOutgoingPeg.setDescription('An object containing the count of TDM time-slot seizures caused by calls to a station on another port network from an incoming trunk on the measured port network.')
g3pkloadoutTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadoutTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutTage.setDescription('The number of timeticks since the data was last extracted from the switch by the Proxy Agent. This object along with the g3pkloadoutintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkloadoutTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkloadoutTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these objects is received by the agent it uses the g3pkloadoutage and g3pkloadoutintvl objects to determine whether it should refresh the cached pkloadoutTable. If g3pkloadoutstmp + g3pkloadoutintvl is less than the current value of the sysUpTime object then the agent refreshes the pkloadoutTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkloadoutTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadoutTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkloadoutTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkloadoutTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkloadoutTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadoutTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkloadoutTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 6), )
if mibBuilder.loadTexts: g3pkloadoutTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutTable.setDescription('A list of g3pkloadout entries.')
g3pkloadoutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkloadoutPNNumber"))
if mibBuilder.loadTexts: g3pkloadoutEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutEntry.setDescription('A g3pkloadout entry containing objects of the g3pkloadout information sent by the switch.')
g3pkloadoutPNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadoutPNNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutPNNumber.setDescription('An object containing the Port Network number.')
g3pkloadoutYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadoutYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutYear.setDescription('An object containing the Year the command was executed.')
g3pkloadoutMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadoutMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutMonth.setDescription('An object containing the Month the command was executed.')
g3pkloadoutDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadoutDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutDay.setDescription('An object containing the Day the command was executed.')
g3pkloadoutHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadoutHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutHour.setDescription('An object containing the Hour the command was executed.')
g3pkloadoutOutIntraPNUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadoutOutIntraPNUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutOutIntraPNUse.setDescription('An object containing the TDM time-slot usage caused by outgoing calls made by stations on the measured port network and serviced by outgoing trunks on the same port network (in CCS).')
g3pkloadoutOutIntraPNPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadoutOutIntraPNPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutOutIntraPNPeg.setDescription('An object containing the count of TDM time-slot seizures caused by outgoing calls made by stations on the measured port network and serviced by outgoing trunks on the same port network.')
g3pkloadoutOutIncomingUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadoutOutIncomingUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutOutIncomingUse.setDescription('An object containing the TDM time-slot usage resulting from outgoing calls originated at stations on another port network but serviced by trunks on the port network being measured (in CCS).')
g3pkloadoutOutIncomingPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadoutOutIncomingPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutOutIncomingPeg.setDescription('An object containing the count of TDM time-slot seizures resulting from outgoing calls originated at stations on another port network, but serviced by trunks on the port network being measured.')
g3pkloadoutOutOutgoingUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadoutOutOutgoingUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutOutOutgoingUse.setDescription('An object containing the TDM time-slot usage resulting from outgoing calls originated at stations on the port network being measured, but serviced by trunks on another port network (in CCS).')
g3pkloadoutOutOutgoingPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 86, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadoutOutOutgoingPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadoutOutOutgoingPeg.setDescription('An object containing the count of TDM time-slot seizures resulting from outgoing calls originated at stations on the port network being measured, but serviced by trunks on another port network.')
g3pkloadtanTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtanTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanTage.setDescription('The number of timeticks since the peak tandem load data was last extracted from the switch by the Proxy Agent. This object along with the g3pkloadtanintvl object allows the Network Manager to determine the validity of the peak tandem load data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkloadtanTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkloadtanTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the peak tandem load objects is received by the agent it uses the g3pkloadtanage and g3pkloadtanintvl objects to determine whether it should refresh the cached pkloadtanTable. If g3pkloadtanstmp + g3pkloadtanintvl is less than the current value of the sysUpTime object then the agent refreshes the pkloadtanTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkloadtanTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtanTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkloadtanTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkloadtanTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkloadtanTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtanTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkloadtanTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 6), )
if mibBuilder.loadTexts: g3pkloadtanTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanTable.setDescription('A list of g3pkloadtan entries.')
g3pkloadtanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkloadtanPNNumber"))
if mibBuilder.loadTexts: g3pkloadtanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanEntry.setDescription('A g3pkloadtan entry containing objects of the g3pkloadtan information sent by the switch.')
g3pkloadtanPNNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtanPNNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanPNNumber.setDescription('An object containing the Port Network number.')
g3pkloadtanYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtanYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanYear.setDescription('An object containing the Year the command was executed.')
g3pkloadtanMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtanMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanMonth.setDescription('An object containing the Month the command was executed.')
g3pkloadtanDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtanDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanDay.setDescription('An object containing the Day the command was executed.')
g3pkloadtanHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtanHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanHour.setDescription('An object containing the Hour the command was executed.')
g3pkloadtanTanIntraPNUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtanTanIntraPNUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanTanIntraPNUse.setDescription('An object containing the TDM usage caused by tandem trunk calls originating and terminating on the port network being measured (in CCS).')
g3pkloadtanTanIntraPNPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtanTanIntraPNPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanTanIntraPNPeg.setDescription('An object containing the count of TDM time-slot seizures caused by tandem trunk calls originating and terminating on the port network being measured.')
g3pkloadtanTanIncomingUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtanTanIncomingUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanTanIncomingUse.setDescription('An object containing the TDM usage resulting from tandem trunk calls originating on another port network, but terminating on the port network being measured (in CCS).')
g3pkloadtanTanIncomingPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtanTanIncomingPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanTanIncomingPeg.setDescription('An object containing the count of TDM time-slot seizures resulting from tandem trunk calls originating on another port network, but terminating on the port network being measured.')
g3pkloadtanTanOutgoingUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtanTanOutgoingUse.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanTanOutgoingUse.setDescription('An object containing the TDM usage resulting from tandem trunk calls originating on the port network being measured, but terminating on another port network (in CCS).')
g3pkloadtanTanOutgoingPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 87, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkloadtanTanOutgoingPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkloadtanTanOutgoingPeg.setDescription('An object containing the count of TDM time-slot seizures resulting from tandem trunk calls originating on the port network being measured, but terminating on another port network.')
g3atmlatencyTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyTage.setDescription('The number of timeticks since the atm pnc latency data was last extracted from the switch by the Proxy Agent. This object along with the g3atmlatencyintvl object allows the Network Manager to determine the validity of the atm pnc latency data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3atmlatencyTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3atmlatencyTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the atm pnc latency objects is received by the agent it uses the g3atmlatencyage and g3atmlatencyintvl objects to determine whether it should refresh the cached atmlatencyTable. If g3atmlatencystmp + g3atmlatencyintvl is less than the current value of the sysUpTime object then the agent refreshes the atmlatencyTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3atmlatencyTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3atmlatencyTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3atmlatencyTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3atmlatencyTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3atmlatencyTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6), )
if mibBuilder.loadTexts: g3atmlatencyTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyTable.setDescription('A list of g3atmlatency entries.')
g3atmlatencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3atmlatencyPNPair"))
if mibBuilder.loadTexts: g3atmlatencyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyEntry.setDescription('A g3atmlatency entry containing objects of the g3atmlatency information sent by the switch.')
g3atmlatencyPNPair = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyPNPair.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyPNPair.setDescription('An INTEGER object containing an index numbering the PN Pair.')
g3atmlatencyYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyYear.setDescription('An object containing the Year the command was executed.')
g3atmlatencyMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyMonth.setDescription('An object containing the Month the command was executed.')
g3atmlatencyDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyDay.setDescription('An object containing the Day the command was executed.')
g3atmlatencyHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyHour.setDescription('An object containing the Hour the command was executed.')
g3atmlatencyPNOrig1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyPNOrig1.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyPNOrig1.setDescription('Originating Port Network for the PN Pair.')
g3atmlatencyPNDest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyPNDest1.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyPNDest1.setDescription('Originating Port Network for the PN Pair.')
g3atmlatencyCount1A = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyCount1A.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyCount1A.setDescription('An object containing the number (count) of connections for the PN Pair on A-PNC.')
g3atmlatencySetup1A = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencySetup1A.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencySetup1A.setDescription('An object containing the average PN connection setup time (latency) in milliseconds for the PN Pair on A-PNC.')
g3atmlatencyATMCount1A = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyATMCount1A.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyATMCount1A.setDescription('An object containing the number (count) of ATM network connections for the PN Pair on A-PNC.')
g3atmlatencyATMSetup1A = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyATMSetup1A.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyATMSetup1A.setDescription('An object containing the average ATM network connection setup time (latency) in milliseconds for the PN Pair on A-PNC.')
g3atmlatencyMeasHour1A = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyMeasHour1A.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyMeasHour1A.setDescription('An object containing the Hour the PN Pair A-PNC measurement was taken.')
g3atmlatencyCount1B = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyCount1B.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyCount1B.setDescription('An object containing the number (count) of connections for the PN Pair on B-PNC.')
g3atmlatencySetup1B = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencySetup1B.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencySetup1B.setDescription('An object containing the average PN connection setup time (latency) in milliseconds for the PN Pair on B-PNC.')
g3atmlatencyATMCount1B = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyATMCount1B.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyATMCount1B.setDescription('An object containing the number (count) of ATM network connections for the PN Pair on B-PNC.')
g3atmlatencyATMSetup1B = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyATMSetup1B.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyATMSetup1B.setDescription('An object containing the average ATM network connection setup time (latency) in milliseconds for the PN Pair on B-PNC.')
g3atmlatencyMeasHour1B = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 88, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3atmlatencyMeasHour1B.setStatus('mandatory')
if mibBuilder.loadTexts: g3atmlatencyMeasHour1B.setDescription('An object containing the Hour the PN Pair B-PNC measurement was taken.')
g3pkatmlatencyTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyTage.setDescription('The number of timeticks since the peak atm latency data was last extracted from the switch by the Proxy Agent. This object along with the g3pkatmlatencyintvl object allows the Network Manager to determine the validity of the peak atm latency data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkatmlatencyTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkatmlatencyTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyTintvl.setDescription('An object containing the interval for which the peak atm latency data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the peak atm latency objects is received by the agent it uses the g3pkatmlatencyage and g3pkatmlatencyintvl objects to determine whether it should refresh the cached pkatmlatencyTable. If g3pkatmlatencystmp + g3pkatmlatencyintvl is less than the current value of the sysUpTime object then the agent refreshes the pkatmlatencyTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkatmlatencyTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkatmlatencyTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkatmlatencyTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkatmlatencyTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkatmlatencyTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6), )
if mibBuilder.loadTexts: g3pkatmlatencyTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyTable.setDescription('A list of g3pkatmlatency entries.')
g3pkatmlatencyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkatmlatencyPNPair"))
if mibBuilder.loadTexts: g3pkatmlatencyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyEntry.setDescription('A g3pkatmlatency entry containing objects of the g3pkatmlatency information sent by the switch.')
g3pkatmlatencyPNPair = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyPNPair.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyPNPair.setDescription('An INTEGER object containing an index numbering the PN Pair.')
g3pkatmlatencyYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyYear.setDescription('An object containing the Year the command was executed.')
g3pkatmlatencyMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyMonth.setDescription('An object containing the Month the command was executed.')
g3pkatmlatencyDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyDay.setDescription('An object containing the Day the command was executed.')
g3pkatmlatencyHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyHour.setDescription('An object containing the Hour the command was executed.')
g3pkatmlatencyPNOrig1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyPNOrig1.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyPNOrig1.setDescription('Originating Port Network for the PN Pair.')
g3pkatmlatencyPNDest1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyPNDest1.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyPNDest1.setDescription('Originating Port Network for the PN Pair.')
g3pkatmlatencyCount1A = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyCount1A.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyCount1A.setDescription('An object containing the number (count) of connections for the PN Pair on A-PNC.')
g3pkatmlatencySetup1A = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencySetup1A.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencySetup1A.setDescription('An object containing the average PN connection setup time (latency) in milliseconds for the PN Pair on A-PNC.')
g3pkatmlatencyATMCount1A = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyATMCount1A.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyATMCount1A.setDescription('An object containing the number (count) of ATM network connections for the PN Pair on A-PNC.')
g3pkatmlatencyATMSetup1A = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyATMSetup1A.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyATMSetup1A.setDescription('An object containing the average ATM network connection setup time (latency) in milliseconds for the PN Pair on A-PNC.')
g3pkatmlatencyMeasHour1A = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyMeasHour1A.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyMeasHour1A.setDescription('An object containing the Hour the PN Pair A-PNC measurement was taken.')
g3pkatmlatencyCount1B = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyCount1B.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyCount1B.setDescription('An object containing the number (count) of connections for the PN Pair on B-PNC.')
g3pkatmlatencySetup1B = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencySetup1B.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencySetup1B.setDescription('An object containing the average PN connection setup time (latency) in milliseconds for the PN Pair on B-PNC.')
g3pkatmlatencyATMCount1B = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyATMCount1B.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyATMCount1B.setDescription('An object containing the number (count) of ATM network connections for the PN Pair on B-PNC.')
g3pkatmlatencyATMSetup1B = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyATMSetup1B.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyATMSetup1B.setDescription('An object containing the average ATM network connection setup time (latency) in milliseconds for the PN Pair on B-PNC.')
g3pkatmlatencyMeasHour1B = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 89, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkatmlatencyMeasHour1B.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkatmlatencyMeasHour1B.setDescription('An object containing the Hour the PN Pair B-PNC measurement was taken.')
g3ipcodecsumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumTage.setDescription('The number of timeticks since the ip codec summary data was last extracted from the switch by the Proxy Agent. This object along with the g3ipcodecsumintvl object allows the Network Manager to determine the validity of the ip codec summary data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3ipcodecsumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipcodecsumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the ip codec summary objects is received by the agent it uses the g3ipcodecsumage and g3ipcodecsumintvl objects to determine whether it should refresh the cached ipcodecsumTable. If g3ipcodecsumstmp + g3ipcodecsumintvl is less than the current value of the sysUpTime object then the agent refreshes the ipcodecsumTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3ipcodecsumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3ipcodecsumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipcodecsumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3ipcodecsumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3ipcodecsumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6), )
if mibBuilder.loadTexts: g3ipcodecsumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumTable.setDescription('A list of g3ipcodecsum entries.')
g3ipcodecsumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3ipcodecsumRegion"))
if mibBuilder.loadTexts: g3ipcodecsumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumEntry.setDescription('A g3ipcodecsum entry containing objects of the g3ipcodecsum information sent by the switch.')
g3ipcodecsumRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumRegion.setDescription('An object containing The network region that the IP Media Processors and Medpros for this measurement are in. Range: 1-44.')
g3ipcodecsumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumMeasHour.setDescription('An object containing the Hour the measurement was taken')
g3ipcodecsumYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumYear.setDescription('An object containing the Year the command was executed')
g3ipcodecsumMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumMonth.setDescription('An object containing the Month the command was executed')
g3ipcodecsumDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumDay.setDescription('An object containing the Day the command was executed')
g3ipcodecsumHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumHour.setDescription('An object containing the Hour the command was executed')
g3ipcodecsumDSPRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumDSPRecs.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumDSPRecs.setDescription('An object containing the total IP codec resources (voice channels) in the region.')
g3ipcodecsumG711Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumG711Usage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumG711Usage.setDescription('An object containing the usage in Erlangs of G.711 codecs during the measurement interval. Includes time that the voice channels are on a call. Usage shall be measured from the time the voice channel is allocated until it is released.')
g3ipcodecsumG711InRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumG711InRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumG711InRegion.setDescription('An object containing the total number of times an IP media processor port in the region was allocated to a G.711 call. Range: 0-65535.')
g3ipcodecsumG711OutRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumG711OutRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumG711OutRegion.setDescription('An object containing the total number of times an IP media processor port was needed in the region for a G.711 call, but was successfully allocated to a resource in another region. Out of Region does not include denials.')
g3ipcodecsumG723Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumG723Usage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumG723Usage.setDescription('An object containing the usage in Erlangs of G.723 or G.729 codecs during the measurement interval. Includes time that the voice channels are on a call. Usage is measured from the time the voice channel is allocated until it is released.')
g3ipcodecsumG723InRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumG723InRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumG723InRegion.setDescription('An object containing the total number of times an IP media processor port in the region was allocated to a G.723 or G.729 call. Range: 0-65535.')
g3ipcodecsumG723OutRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 90, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipcodecsumG723OutRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipcodecsumG723OutRegion.setDescription('An object containing the total number of times an IP media processor port was needed in the region for a G.723 or G.729 call, but was successfully allocated to a resource in another region. Out of Region does not include denials.')
g3pkipcodecsumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumTage.setDescription('The number of timeticks since the peak ip codec summary data was last extracted from the switch by the Proxy Agent. This object along with the g3pkipcodecsumintvl object allows the Network Manager to determine the validity of the peak ip codec summary data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkipcodecsumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkipcodecsumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumTintvl.setDescription('An object containing the interval for which the peak ip codec summary data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the peak ip codec summary data objects is received by the agent it uses the g3pkipcodecsumage and g3pkipcodecsumintvl objects to determine whether it should refresh the cached pkipcodecsumTable. If g3pkipcodecsumstmp + g3pkipcodecsumintvl is less than the current value of the sysUpTime object then the agent refreshes the pkipcodecsumTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkipcodecsumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkipcodecsumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkipcodecsumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkipcodecsumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkipcodecsumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6), )
if mibBuilder.loadTexts: g3pkipcodecsumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumTable.setDescription('A list of g3pkipcodecsum entries.')
g3pkipcodecsumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkipcodecsumRegion"))
if mibBuilder.loadTexts: g3pkipcodecsumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumEntry.setDescription('A g3pkipcodecsum entry containing objects of the g3pkipcodecsum information sent by the switch.')
g3pkipcodecsumRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumRegion.setDescription('An object containing')
g3pkipcodecsumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumMeasHour.setDescription('An object containing the Hour the measurement was taken')
g3pkipcodecsumYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumYear.setDescription('An object containing the Year the command was executed')
g3pkipcodecsumMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumMonth.setDescription('An object containing the Month the command was executed')
g3pkipcodecsumDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumDay.setDescription('An object containing the Day the command was executed')
g3pkipcodecsumHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumHour.setDescription('An object containing the Hour the command was executed')
g3pkipcodecsumDSPRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumDSPRecs.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumDSPRecs.setDescription('An object containing the total IP codec resources (voice channels) in the region')
g3pkipcodecsumG711Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumG711Usage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumG711Usage.setDescription('An object containing the usage in Erlangs of G.711 codecs during the measurement interval. Includes time that the voice channels are on a call. Usage shall be measured from the time the voice channel is allocated until it is released')
g3pkipcodecsumG711InRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumG711InRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumG711InRegion.setDescription('An object containing the total number of times an IP media processor port in the region was allocated to a G.711 call. Range: 0-65535.')
g3pkipcodecsumG711OutRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumG711OutRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumG711OutRegion.setDescription('An object containing the total number of times an IP media processor port was needed in the region for a G.711 call, but was successfully allocated to a resource in another region. Out of Region does not include denials.')
g3pkipcodecsumG723Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumG723Usage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumG723Usage.setDescription('An object containing the usage in Erlangs of G.723 or G.729 codecs during the measurement interval. Includes time that the voice channels are on a call. Usage shall be measured from the time the voice channel is allocated until it is released.')
g3pkipcodecsumG723InRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumG723InRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumG723InRegion.setDescription('An object containing the total number of times an IP media processor port in the region was allocated to a G.723 or G.729 call. Range: 0-65535.')
g3pkipcodecsumG723OutRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 91, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipcodecsumG723OutRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipcodecsumG723OutRegion.setDescription('An object containing the total number of times an IP media processor port was needed in the region for a G.723 or G.729 call, but was successfully allocated to a resource in another region. Out of Region does not include denials.')
g3ipregionTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 92, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipregionTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipregionTage.setDescription('The number of timeticks since the ip network region data was last extracted from the switch by the Proxy Agent. This object along with the g3ipregionintvl object allows the Network Manager to determine the validity of the ip network region data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3ipregionTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 92, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipregionTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipregionTintvl.setDescription('An object containing the interval for which the ip network region data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the ip network region objects is received by the agent it uses the g3ipregionage and g3ipregionintvl objects to determine whether it should refresh the cached ipregionTable. If g3ipregionstmp + g3ipregionintvl is less than the current value of the sysUpTime object then the agent refreshes the ipregionTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3ipregionTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 92, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipregionTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipregionTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3ipregionTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 92, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipregionTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipregionTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3ipregionTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 92, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipregionTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipregionTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3ipregionTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 92, 6), )
if mibBuilder.loadTexts: g3ipregionTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipregionTable.setDescription('A list of g3ipregion entries.')
g3ipregionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 92, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3ipregionRegion"))
if mibBuilder.loadTexts: g3ipregionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipregionEntry.setDescription('A g3ipregion entry containing objects of the g3ipregion information sent by the switch.')
g3ipregionRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 92, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipregionRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipregionRegion.setDescription('An object containing the network region of the IP media processors being region number is assigned on the Ip-interfaces screen during switch administration. Range:1-44')
g3ipregionName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 92, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipregionName.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipregionName.setDescription('An object containing the name of the ip-network region')
g3ipdspsumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumTage.setDescription('The number of timeticks since the ip dsp resource data was last extracted from the switch by the Proxy Agent. This object along with the g3ipdspsumintvl object allows the Network Manager to determine the validity of the ip dsp resource data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3ipdspsumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipdspsumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumTintvl.setDescription('An object containing the interval for which the ip dsp resource data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the ip dsp resource objects is received by the agent it uses the g3ipdspsumage and g3ipdspsumintvl objects to determine whether it should refresh the cached ipdspsumTable. If g3ipdspsumstmp + g3ipdspsumintvl is less than the current value of the sysUpTime object then the agent refreshes the ipdspsumTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3ipdspsumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3ipdspsumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipdspsumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3ipdspsumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3ipdspsumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6), )
if mibBuilder.loadTexts: g3ipdspsumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumTable.setDescription('A list of g3ipdspsum entries.')
g3ipdspsumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3ipdspsumRegion"))
if mibBuilder.loadTexts: g3ipdspsumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumEntry.setDescription('A g3ipdspsum entry containing objects of the g3ipdspsum information sent by the switch.')
g3ipdspsumRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumRegion.setDescription('An object containing the network region of the IP media processors being measured. The region number is assigned on the Ip-interfaces screen during switch administration.Range:1-44')
g3ipdspsumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumMeasHour.setDescription('An object containing the hour the measurement was taken')
g3ipdspsumYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumYear.setDescription('An object containing the Year the command was executed')
g3ipdspsumMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumMonth.setDescription('An object containing the Month the command was executed')
g3ipdspsumDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumDay.setDescription('An object containing the Day the command was executed')
g3ipdspsumHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumHour.setDescription('An object containing the Hour the command was executed')
g3ipdspsumDSPRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumDSPRecs.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumDSPRecs.setDescription('An object containing the total number of IP codec resources, or voice channels, in the region. Range:0-9999')
g3ipdspsumDSPUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumDSPUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumDSPUsage.setDescription('An object containing the amount of time (in erlangs) that all codecs were in use during the measurement period. The time is measured from the time the voice channel is allocated until it is released,including the time that the voice channel is on a call. Range:0-9999')
g3ipdspsumInRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumInRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumInRegion.setDescription('An object containing the total number of times an IP media processor port in the region was allocated to a call. Range:0-65535')
g3ipdspsumOutRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumOutRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumOutRegion.setDescription('An object containing the total number of times an IP media processor port was needed in the region for a call, but was successfully allocated to a resource in another region. Range:0-65535')
g3ipdspsumDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumDenied.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumDenied.setDescription('An object containing the total number of times an IP media processor port was needed in the region for a call, but all media ports in all regions were busy and the call did not go through. Range:0-65535')
g3ipdspsumPctBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumPctBlk.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumPctBlk.setDescription('An object containing')
g3ipdspsumPctOutSrv = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 93, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipdspsumPctOutSrv.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipdspsumPctOutSrv.setDescription('An object containing')
g3pkipdspsumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumTage.setDescription('The number of timeticks since the peak ip dsp resource data was last extracted from the switch by the Proxy Agent. This object along with the g3pkipdspsumintvl object allows the Network Manager to determine the validity of the peak ip dsp resource data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkipdspsumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkipdspsumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumTintvl.setDescription('An object containing the interval for which the peak ip dsp resource data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the peak ip dsp resource objects is received by the agent it uses the g3pkipdspsumage and g3pkipdspsumintvl objects to determine whether it should refresh the cached pkipdspsumTable. If g3pkipdspsumstmp + g3pkipdspsumintvl is less than the current value of the sysUpTime object then the agent refreshes the pkipdspsumTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkipdspsumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkipdspsumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkipdspsumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkipdspsumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkipdspsumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6), )
if mibBuilder.loadTexts: g3pkipdspsumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumTable.setDescription('A list of g3pkipdspsum entries.')
g3pkipdspsumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkipdspsumRegion"))
if mibBuilder.loadTexts: g3pkipdspsumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumEntry.setDescription('A g3pkipdspsum entry containing objects of the g3pkipdspsum information sent by the switch.')
g3pkipdspsumRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumRegion.setDescription('An object containing')
g3pkipdspsumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumMeasHour.setDescription('An object containing the Hour the measurement was taken')
g3pkipdspsumYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumYear.setDescription('An object containing the Year the command was executed')
g3pkipdspsumMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumMonth.setDescription('An object containing the Month the command was executed')
g3pkipdspsumDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumDay.setDescription('An object containing the Day the command was executed')
g3pkipdspsumHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumHour.setDescription('An object containing the Hour the command was executed')
g3pkipdspsumDSPRecs = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumDSPRecs.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumDSPRecs.setDescription('An object containing total number of IP codec resources, or voice channels, in the region. Range:0-9999')
g3pkipdspsumDSPUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumDSPUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumDSPUsage.setDescription('An object containing amount of time (in erlangs) that all codecs were in use during the measurement period. The time is measured from the time the voice channel is allocated until it is released,including the time that the voice channel is on a call. Range:0-9999')
g3pkipdspsumInRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumInRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumInRegion.setDescription('An object containing the total number of times an IP media processor port in the region was allocated to a call.Range:0-65535')
g3pkipdspsumOutRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumOutRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumOutRegion.setDescription('An object containing the total number of times an IP media processor port was needed in the region for a call, but was successfully allocated to a resource in another region. Range: 0-65535')
g3pkipdspsumDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumDenied.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumDenied.setDescription('An object containing The total number of times an IP media processor port was needed in the region for a call, but all media ports in all regions were busy and the call did not go through. Range:0-65535')
g3pkipdspsumPctBlk = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumPctBlk.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumPctBlk.setDescription('An object containing the percent of attempted use of IP media processor ports in the region that were not successful (blocked). This percent includes calls that were denied after they were successfully allocated out of the region. ')
g3pkipdspsumPctOutSrv = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 94, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipdspsumPctOutSrv.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipdspsumPctOutSrv.setDescription('An object containing the percent of CCS time that any IP media processor ports were out of service during the measurement period. This percent includes ports that were manually busied out or maintenance busy during the measured interval.')
g3ipsignalTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalTage.setDescription('The number of timeticks since the ip signaling group data was last extracted from the switch by the Proxy Agent. This object along with the g3ipsignalintvl object allows the Network Manager to determine the validity of the ip signaling group data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3ipsignalTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipsignalTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalTintvl.setDescription('An object containing the interval for which the ip signaling group data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the ip signaling group objects is received by the agent it uses the g3ipsignalage and g3ipsignalintvl objects to determine whether it should refresh the cached ipsignalTable. If g3ipsignalstmp + g3ipsignalintvl is less than the current value of the sysUpTime object then the agent refreshes the ipsignalTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3ipsignalTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3ipsignalTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipsignalTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3ipsignalTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3ipsignalTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6), )
if mibBuilder.loadTexts: g3ipsignalTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalTable.setDescription('A list of g3ipsignal entries.')
g3ipsignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3ipsignalSigGroup"))
if mibBuilder.loadTexts: g3ipsignalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalEntry.setDescription('A g3ipsignal entry containing objects of the g3ipsignal information sent by the switch.')
g3ipsignalSigGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalSigGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalSigGroup.setDescription('An object containing the ip signaling group number')
g3ipsignalRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalRegion.setDescription('An object containing the network region of the ip signaling group')
g3ipsignalYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalYear.setDescription('An object containing the Year the command was executed')
g3ipsignalMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalMonth.setDescription('An object containing the Month the command was executed')
g3ipsignalDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalDay.setDescription('An object containing the Day the command was executed')
g3ipsignalHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalHour.setDescription('An object containing the Hour the command was executed')
g3ipsignalHourAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalHourAvgLatency.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalHourAvgLatency.setDescription('An object containing the average latency for the whole hour')
g3ipsignalHourPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalHourPacketsSent.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalHourPacketsSent.setDescription('An object containing the number of packets sent during the whole hour')
g3ipsignalHourPktsLostPct = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalHourPktsLostPct.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalHourPktsLostPct.setDescription('An object containing the percent lost packets for the whole hour')
g3ipsignalMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalMeasHour.setDescription('An object containing the Hour the measurement was taken')
g3ipsignalWorstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalWorstInterval.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalWorstInterval.setDescription('An object containing the hour and worst 3 minute interval within the hour.')
g3ipsignalIntvlAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalIntvlAvgLatency.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalIntvlAvgLatency.setDescription('An object containing the average latency for the interval.')
g3ipsignalIntvlPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalIntvlPacketsSent.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalIntvlPacketsSent.setDescription('An object containing the number of packets sent during the interval.')
g3ipsignalIntvlPktsLostPct = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 95, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipsignalIntvlPktsLostPct.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipsignalIntvlPktsLostPct.setDescription('An object containing the percent of packets lost for the interval')
g3pkipsignalTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalTage.setDescription('The number of timeticks since the peak ip signaling group data was last extracted from the switch by the Proxy Agent. This object along with the g3pkipsignalintvl object allows the Network Manager to determine the validity of the peak ip signaling group data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkipsignalTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkipsignalTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalTintvl.setDescription('An object containing the interval for which the peak ip signaling group data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the peak ip signaling group objects is received by the agent it uses the g3pkipsignalage and g3pkipsignalintvl objects to determine whether it should refresh the cached pkipsignalTable. If g3pkipsignalstmp + g3pkipsignalintvl is less than the current value of the sysUpTime object then the agent refreshes the pkipsignalTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkipsignalTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkipsignalTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkipsignalTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkipsignalTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkipsignalTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6), )
if mibBuilder.loadTexts: g3pkipsignalTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalTable.setDescription('A list of g3pkipsignal entries.')
g3pkipsignalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkipsignalSigGroup"), (0, "G3-AVAYA-MIB", "g3pkipsignalMeasHour"))
if mibBuilder.loadTexts: g3pkipsignalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalEntry.setDescription('A g3pkipsignal entry containing objects of the g3pkipsignal information sent by the switch.')
g3pkipsignalSigGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalSigGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalSigGroup.setDescription('An object containing the ip signaling group number')
g3pkipsignalRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalRegion.setDescription('An object containing the network region of the ip signaling group')
g3pkipsignalYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalYear.setDescription('An object containing the Year the command was executed')
g3pkipsignalMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalMonth.setDescription('An object containing the Month the command was executed')
g3pkipsignalDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalDay.setDescription('An object containing the Day the command was executed')
g3pkipsignalHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalHour.setDescription('An object containing the Hour the command was executed')
g3pkipsignalHourAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalHourAvgLatency.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalHourAvgLatency.setDescription('An object containing the average latency for the whole hour')
g3pkipsignalHourPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalHourPacketsSent.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalHourPacketsSent.setDescription('An object containing the number of packets sent during the whole hour')
g3pkipsignalHourPktsLostPct = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalHourPktsLostPct.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalHourPktsLostPct.setDescription('An object containing the percent of packets lost for the whole hour')
g3pkipsignalMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalMeasHour.setDescription('An object containing the Hour the measurement was taken')
g3pkipsignalWorstInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalWorstInterval.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalWorstInterval.setDescription('An object containing the hour and worst 3 minute interval within the hour')
g3pkipsignalIntvlAvgLatency = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalIntvlAvgLatency.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalIntvlAvgLatency.setDescription('An object containing the average latency for the interval')
g3pkipsignalIntvlPacketsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalIntvlPacketsSent.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalIntvlPacketsSent.setDescription('An object containing the number of packets sent during the interval')
g3pkipsignalIntvlPktsLostPct = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 96, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkipsignalIntvlPktsLostPct.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkipsignalIntvlPktsLostPct.setDescription('An object containing the percent of packets lost for the interval')
g3annallTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallTage.setDescription('The number of timeticks since the announcement data was last extracted from the switch by the Proxy Agent. This object along with the g3annallintvl object allows the Network Manager to determine the validity of the announcement data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3annallTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3annallTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallTintvl.setDescription('An object containing the interval for which the announcement data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the announcement objects is received by the agent it uses the g3annallage and g3annallintvl objects to determine whether it should refresh the cached annallTable. If g3annallstmp + g3annallintvl is less than the current value of the sysUpTime object then the agent refreshes the annallTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3annallTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3annallTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3annallTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3annallTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3annallTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6), )
if mibBuilder.loadTexts: g3annallTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallTable.setDescription('A list of g3annall entries.')
g3annallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3annallAnnNbr"))
if mibBuilder.loadTexts: g3annallEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallEntry.setDescription('A g3annall entry containing objects of the g3annall information sent by the switch.')
g3annallAnnNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallAnnNbr.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallAnnNbr.setDescription('An object containing the announcement number')
g3annallYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallYear.setDescription('An object containing the Year the command was executed')
g3annallMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallMonth.setDescription('An object containing the Month the command was executed')
g3annallDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallDay.setDescription('An object containing the Day the command was executed')
g3annallHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallHour.setDescription('An object containing the Hour the command was executed')
g3annallExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallExtension.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallExtension.setDescription('An object containing the extension number for the announcement')
g3annallName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallName.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallName.setDescription('An object containing the first 24 characters of the announcement')
g3annallMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallMeasHour.setDescription('An object containing the Hour the measurement was taken')
g3annallPlayRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallPlayRequests.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallPlayRequests.setDescription('An object containing total number of calls that requested a play of this announcement during the period')
g3annallCallsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallCallsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallCallsQueued.setDescription('An object containing the number of calls for an announcement that had to queue waiting for a port during the period')
g3annallASP = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallASP.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallASP.setDescription('An object containing from time waiting for announcement to play to when it starts playing in seconds averaged over the period. Calls abandoned while in the waiting for announcement port queue are not to be included')
g3annallQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallQueueDrops.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallQueueDrops.setDescription('An object containing - count of the individual calls that had to queue but dropped while waiting during the period - this includes calls abandoned by the caller and VOA (VDN of origin Announcements) aborts but should exclude calls that were waiting but answered by an agent')
g3annallMPortPlay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallMPortPlay.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallMPortPlay.setDescription('An object containing - count of how many times the announcement is being played out of more than one port at the same time during the period')
g3annallMaxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallMaxPorts.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallMaxPorts.setDescription('An object containing the peak number of ports used for the announcement during the period')
g3annallMaxCallers = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 97, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annallMaxCallers.setStatus('mandatory')
if mibBuilder.loadTexts: g3annallMaxCallers.setDescription('An object containing the peak number callers connected to a port at the same time for this announcement during the period')
g3pkannallTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallTage.setDescription('The number of timeticks since the announcement data was last extracted from the switch by the Proxy Agent. This object along with the g3pkannallintvl object allows the Network Manager to determine the validity of the announcement data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkannallTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkannallTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallTintvl.setDescription('An object containing the interval for which the Announcement data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the announcement objects is received by the agent it uses the g3pkannallage and g3pkannallintvl objects to determine whether it should refresh the cached pkannallTable. If g3pkannallstmp + g3pkannallintvl is less than the current value of the sysUpTime object then the agent refreshes the pkannallTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkannallTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkannallTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkannallTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkannallTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkannallTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6), )
if mibBuilder.loadTexts: g3pkannallTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallTable.setDescription('A list of g3pkannall entries.')
g3pkannallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkannallAnnNbr"))
if mibBuilder.loadTexts: g3pkannallEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallEntry.setDescription('A g3pkannall entry containing objects of the g3pkannall information sent by the switch.')
g3pkannallAnnNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallAnnNbr.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallAnnNbr.setDescription('An object containing the announcement number')
g3pkannallYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallYear.setDescription('An object containing the Year the command was executed')
g3pkannallMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallMonth.setDescription('An object containing the Month the command was executed')
g3pkannallDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallDay.setDescription('An object containing the Day the command was executed')
g3pkannallHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallHour.setDescription('An object containing the Hour the command was executed')
g3pkannallExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallExtension.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallExtension.setDescription('An object containing the extension number for the announcement')
g3pkannallName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallName.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallName.setDescription('An object containing the first 24 characters of the announcement')
g3pkannallMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallMeasHour.setDescription('An object containing the Hour the measurement was taken')
g3pkannallPlayRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallPlayRequests.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallPlayRequests.setDescription('An object containing total number of calls that requested a play of this announcement during the period')
g3pkannallCallsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallCallsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallCallsQueued.setDescription('An object containing number of calls for an announcement that had to queue waiting for a port during the period')
g3pkannallASP = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallASP.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallASP.setDescription('An object containing from time waiting for announcement to play to when it starts playing in seconds averaged over the period. Calls abandoned while in the waiting for announcement port queue are not to be included')
g3pkannallQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallQueueDrops.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallQueueDrops.setDescription('An object containing count of the individual calls that had to queue but dropped while waiting during the period - this includes calls abandoned by the caller and VOA (VDN of origin Announcements) aborts but should exclude calls that were waiting but answered by an agent)')
g3pkannallMPortPlay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallMPortPlay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallMPortPlay.setDescription('An object containing count of how many times the announcement is being played out of more than one port at the same time during the period')
g3pkannallMaxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallMaxPorts.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallMaxPorts.setDescription('An object containing the peak number of ports used for the announcement during the period')
g3pkannallMaxCall = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 98, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannallMaxCall.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannallMaxCall.setDescription('An object containing the peak number callers connected to a port at the same time for this announcement during the period')
g3annintegTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegTage.setDescription('The number of timeticks since the data was last extracted from the switch by the Proxy Agent. This object along with the g3annintegintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3annintegTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3annintegTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these data objects is received by the agent it uses the g3annintegage and g3annintegintvl objects to determine whether it should refresh the cached annintegTable. If g3annintegstmp + g3annintegintvl is less than the current value of the sysUpTime object then the agent refreshes the annintegTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3annintegTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3annintegTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3annintegTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3annintegTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3annintegTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6), )
if mibBuilder.loadTexts: g3annintegTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegTable.setDescription('A list of g3anninteg entries.')
g3annintegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3annintegAnnNbr"))
if mibBuilder.loadTexts: g3annintegEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegEntry.setDescription('A g3anninteg entry containing objects of the g3anninteg information sent by the switch.')
g3annintegBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegBoard.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegBoard.setDescription('An object containing the board number for the integrated announcement board')
g3annintegYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegYear.setDescription('An object containing the Year the command was executed')
g3annintegMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegMonth.setDescription('An object containing the Month the command was executed')
g3annintegDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegDay.setDescription('An object containing the Day the command was executed')
g3annintegHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegHour.setDescription('An object containing the Hour the command was executed')
g3annintegPlayPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegPlayPorts.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegPlayPorts.setDescription('An object containing ')
g3annintegMaxCallPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegMaxCallPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegMaxCallPeriod.setDescription('An object containing')
g3annintegAllPortsBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegAllPortsBusy.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegAllPortsBusy.setDescription('An object containing an indication of how frequently the all-ports-busy condition occurs within the period of time')
g3annintegAnnNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegAnnNbr.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegAnnNbr.setDescription('An object containing the announcement number')
g3annintegExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegExtension.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegExtension.setDescription('An object containing the extension number for the announcement')
g3annintegName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegName.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegName.setDescription('An object containing the first 24 characters of the announcement')
g3annintegMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegMeasHour.setDescription('An object containing the Hour the measurement was taken')
g3annintegPlayReqts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegPlayReqts.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegPlayReqts.setDescription('An object containing total number of calls that requested a play of this announcement during the period')
g3annintegCallsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegCallsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegCallsQueued.setDescription('An object containing number of calls for an announcement that had to queue waiting for a port during the period')
g3annintegASP = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegASP.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegASP.setDescription('An object containing from time waiting for announcement to play to when it starts playing in seconds averaged over the period. Calls abandoned while in the waiting for announcement port queue are not to be included')
g3annintegQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegQueueDrops.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegQueueDrops.setDescription('An object containing count of the individual calls that had to queue but dropped while waiting during the period - this includes calls abandoned by the caller and VOA (VDN of origin Announcements) aborts but should exclude calls that were waiting but answered by an agent')
g3annintegMPortPlay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegMPortPlay.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegMPortPlay.setDescription('An object containing count of how many times the announcement is being played out of more than one port at the same time during the period')
g3annintegMaxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegMaxPorts.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegMaxPorts.setDescription('An object containing the peak number of ports used for the announcement during the period')
g3annintegMaxCall = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 99, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3annintegMaxCall.setStatus('mandatory')
if mibBuilder.loadTexts: g3annintegMaxCall.setDescription('An object containing the peak number callers connected to a board (sum of the ports) at the same time')
g3pkannintegTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegTage.setDescription('The number of timeticks since the data was last extracted from the switch by the Proxy Agent. This object along with the g3pkannintegintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkannintegTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkannintegTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these data objects is received by the agent it uses the g3pkannintegage and g3pkannintegintvl objects to determine whether it should refresh the cached pkannintegTable. If g3pkannintegstmp + g3pkannintegintvl is less than the current value of the sysUpTime object then the agent refreshes the pkannintegTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkannintegTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkannintegTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkannintegTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkannintegTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkannintegTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6), )
if mibBuilder.loadTexts: g3pkannintegTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegTable.setDescription('A list of g3pkanninteg entries.')
g3pkannintegEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkannintegAnnNbr"))
if mibBuilder.loadTexts: g3pkannintegEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegEntry.setDescription('A g3pkanninteg entry containing objects of the g3pkanninteg information sent by the switch.')
g3pkannintegBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegBoard.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegBoard.setDescription('An object containing the number of the integrated announcement board')
g3pkannintegYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegYear.setDescription('An object containing the Year the command was executed')
g3pkannintegMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegMonth.setDescription('An object containing the Month the command was executed')
g3pkannintegDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegDay.setDescription('An object containing the Day the command was executed')
g3pkannintegHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegHour.setDescription('An object containing the Hour the command was executed')
g3pkannintegPlayPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegPlayPorts.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegPlayPorts.setDescription('An object containing the number of ports on the board which can play the announcements. ')
g3pkannintegMaxCallPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegMaxCallPeriod.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegMaxCallPeriod.setDescription('An object containing the Maximum number of Callers on Board in the Period')
g3pkannintegAllPortsBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegAllPortsBusy.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegAllPortsBusy.setDescription('An object containing an indication of how frequently the all-ports-busy condition occurs within the period of time')
g3pkannintegAnnNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegAnnNbr.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegAnnNbr.setDescription('An object containing the announcement number')
g3pkannintegExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegExtension.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegExtension.setDescription('An object containing the extension number for the announcement')
g3pkannintegName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegName.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegName.setDescription('An object containing the first 24 characters of the announcement')
g3pkannintegMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegMeasHour.setDescription('An object containing the Hour the measurement was taken')
g3pkannintegPlayReqts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegPlayReqts.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegPlayReqts.setDescription('An object containing total number of calls that requested a play of this announcement during the period')
g3pkannintegCallsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegCallsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegCallsQueued.setDescription('An object containing number of calls for an announcement that had to queue waiting for a port during the period')
g3pkannintegASP = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegASP.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegASP.setDescription('An object containing from time waiting for announcement to play to when it starts playing in seconds averaged over the period. Calls abandoned while in the waiting for announcement port queue are not to be included')
g3pkannintegQueueDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegQueueDrops.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegQueueDrops.setDescription('An object containing count of the individual calls that had to queue but dropped while waiting during the period - this includes calls abandoned by the caller and VOA (VDN of origin Announcements) aborts but should exclude calls that were waiting but answered by an agent')
g3pkannintegMPortPlay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegMPortPlay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegMPortPlay.setDescription('An object containing count of how many times the announcement is being played out of more than one port at the same time during the period')
g3pkannintegMaxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegMaxPorts.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegMaxPorts.setDescription('An object containing the peak number of ports used for the announcement during the period')
g3pkannintegMaxCall = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 100, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkannintegMaxCall.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkannintegMaxCall.setDescription('An object containing the peak number callers connected to a board (sum of the ports) at the same time')
g3nodenameTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 101, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3nodenameTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3nodenameTage.setDescription('The number of timeticks since the node name data was last extracted from the switch by the Proxy Agent. This object along with the g3nodenameintvl object allows the Network Manager to determine the validity of the node name data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3nodenameTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 101, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3nodenameTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3nodenameTintvl.setDescription('An object containing the interval for which the node name data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these node name objects is received by the agent it uses the g3nodenameage and g3nodenameintvl objects to determine whether it should refresh the cached nodenameTable. If g3nodenamestmp + g3nodenameintvl is less than the current value of the sysUpTime object then the agent refreshes the nodenameTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3nodenameTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 101, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3nodenameTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3nodenameTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3nodenameTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 101, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3nodenameTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3nodenameTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3nodenameTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 101, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3nodenameTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3nodenameTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3nodenameTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 101, 6), )
if mibBuilder.loadTexts: g3nodenameTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3nodenameTable.setDescription('A list of g3nodename entries.')
g3nodenameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 101, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3nodenameName"))
if mibBuilder.loadTexts: g3nodenameEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3nodenameEntry.setDescription('A g3nodename entry containing objects of the g3nodename information sent by the switch.')
g3nodenameName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 101, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3nodenameName.setStatus('mandatory')
if mibBuilder.loadTexts: g3nodenameName.setDescription('An object containing the name of the node')
g3nodenameType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 101, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3nodenameType.setStatus('mandatory')
if mibBuilder.loadTexts: g3nodenameType.setDescription('An object containing the type of the node')
g3nodenameIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 101, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3nodenameIP1.setStatus('mandatory')
if mibBuilder.loadTexts: g3nodenameIP1.setDescription('An object containing the first octet of the IP address')
g3nodenameIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 101, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3nodenameIP2.setStatus('mandatory')
if mibBuilder.loadTexts: g3nodenameIP2.setDescription('An object containing the second octet of the IP address')
g3nodenameIP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 101, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3nodenameIP3.setStatus('mandatory')
if mibBuilder.loadTexts: g3nodenameIP3.setDescription('An object containing the third octet of the IP address')
g3nodenameIP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 101, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3nodenameIP4.setStatus('mandatory')
if mibBuilder.loadTexts: g3nodenameIP4.setDescription('An object containing the fourth octet of the IP address')
g3trkgrpmemTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 102, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trkgrpmemTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3trkgrpmemTage.setDescription('The number of timeticks since the trunk group member data was last extracted from the switch by the Proxy Agent. This object along with the g3trkgrpmemintvl object allows the Network Manager to determine the validity of the trunk group member data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3trkgrpmemTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 102, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trkgrpmemTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3trkgrpmemTintvl.setDescription('An object containing the interval for which the trunk group member data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these trunk group member objects is received by the agent it uses the g3trkgrpmemage and g3trkgrpmemintvl objects to determine whether it should refresh the cached trkgrpmemTable. If g3trkgrpmemstmp + g3trkgrpmemintvl is less than the current value of the sysUpTime object then the agent refreshes the trkgrpmemTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3trkgrpmemTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 102, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trkgrpmemTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3trkgrpmemTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3trkgrpmemTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 102, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trkgrpmemTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3trkgrpmemTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3trkgrpmemTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 102, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trkgrpmemTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3trkgrpmemTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3trkgrpmemTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 102, 6), )
if mibBuilder.loadTexts: g3trkgrpmemTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3trkgrpmemTable.setDescription('A list of g3trkgrpmem entries.')
g3trkgrpmemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 102, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3trkgrpmemGroup"), (0, "G3-AVAYA-MIB", "g3trkgrpmemMember"))
if mibBuilder.loadTexts: g3trkgrpmemEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3trkgrpmemEntry.setDescription('A g3trkgrpmem entry containing objects of the g3trkgrpmem information sent by the switch.')
g3trkgrpmemGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 102, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trkgrpmemGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3trkgrpmemGroup.setDescription('An INTEGER Object that uniquely identifies an administered trunk group.')
g3trkgrpmemMember = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 102, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trkgrpmemMember.setStatus('mandatory')
if mibBuilder.loadTexts: g3trkgrpmemMember.setDescription('An INTEGER Object that uniquely identifies a trunk group member. Trunk group members range from 1 to 666 and exist whether or not they are assigned a port.')
g3trkgrpmemName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 102, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trkgrpmemName.setStatus('mandatory')
if mibBuilder.loadTexts: g3trkgrpmemName.setDescription('A DisplayString Object containing the name assigned to the trunk group member.')
g3trkgrpmemType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 102, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trkgrpmemType.setStatus('mandatory')
if mibBuilder.loadTexts: g3trkgrpmemType.setDescription('A DisplayString Object containing the Type of the trunk group member.')
g3trkgrpmemSigGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 102, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trkgrpmemSigGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3trkgrpmemSigGroup.setDescription('A DisplayString Object containing the Signaling Group assigned to the trunk group member.')
g3trkgrpmemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 102, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trkgrpmemPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3trkgrpmemPort.setDescription('A DisplayString Object that uniquely identifies the trunk port based on its location in the system. The syntax for the Port Number is as follows: cabinet(1-22):carrier(A-E):slot(01-20).')
g3ipinterfaceTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceTage.setDescription('The number of timeticks since the ip interface data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3ipinterfaceintvl object allows the Network Manager to determine the validity of the ip interface data in the cache and to control when the proxy agent extracts the ip interface data from the switch.')
g3ipinterfaceTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipinterfaceTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceTintvl.setDescription('An object containing the interval for which the ip interface data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for ip interface objects is received by the agent it uses the g3ipinterfaceage and g3ipinterfaceintvl objects to determine whether it should refresh the cached ipinterfaceTable. If g3ipinterfacestmp + g3ipinterfaceintvl is less than the current value of the sysUpTime object then the agent refreshes the ipinterfaceTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3ipinterfaceTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3ipinterfaceTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipinterfaceTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3ipinterfaceNodeName1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName1.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName1.setDescription('An object containing the the node-name for the ip interface')
g3ipinterfaceNodeName2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName2.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName2.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName3.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName3.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName4 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName4.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName4.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName5 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName5.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName5.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName6 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName6.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName6.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName7 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName7.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName7.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName8 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName8.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName8.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName9 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName9.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName9.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName10 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName10.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName10.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName11 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName11.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName11.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName12 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName12.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName12.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName13 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName13.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName13.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName14 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName14.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName14.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName15 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName15.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName15.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName16 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName16.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName16.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName17 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName17.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName17.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName18 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName18.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName18.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName19 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName19.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName19.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName20 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName20.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName20.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName21 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName21.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName21.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName22 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName22.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName22.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName23 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName23.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName23.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName24 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName24.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName24.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName25 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName25.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName25.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName26 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName26.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName26.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName27 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName27.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName27.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName28 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName28.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName28.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName29 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName29.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName29.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName30 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName30.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName30.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName31 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName31.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName31.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName32 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName32.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName32.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName33 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName33.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName33.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName34 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName34.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName34.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName35 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName35.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName35.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName36 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName36.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName36.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName37 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName37.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName37.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName38 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName38.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName38.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName39 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName39.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName39.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName40 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName40.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName40.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName41 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName41.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName41.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName42 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName42.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName42.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName43 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName43.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName43.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName44 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName44.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName44.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName45 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName45.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName45.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName46 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName46.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName46.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName47 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName47.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName47.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName48 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName48.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName48.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName49 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName49.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName49.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName50 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName50.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName50.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName51 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName51.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName51.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName52 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName52.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName52.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName53 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName53.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName53.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName54 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName54.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName54.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName55 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName55.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName55.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName56 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName56.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName56.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName57 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName57.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName57.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName58 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName58.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName58.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName59 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName59.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName59.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName60 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName60.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName60.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName61 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName61.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName61.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName62 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 66), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName62.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName62.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName63 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName63.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName63.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName64 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName64.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName64.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName65 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName65.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName65.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName66 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName66.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName66.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName67 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 71), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName67.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName67.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName68 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 72), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName68.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName68.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName69 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 73), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName69.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName69.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName70 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName70.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName70.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName71 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName71.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName71.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName72 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 76), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName72.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName72.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName73 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 77), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName73.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName73.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName74 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName74.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName74.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName75 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName75.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName75.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName76 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName76.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName76.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName77 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 81), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName77.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName77.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName78 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 82), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName78.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName78.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName79 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 83), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName79.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName79.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName80 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 84), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName80.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName80.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName81 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName81.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName81.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName82 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 86), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName82.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName82.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName83 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 87), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName83.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName83.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName84 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 88), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName84.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName84.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceNodeName85 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 89), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceNodeName85.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceNodeName85.setDescription('See DESCRIPTION of g3ipinterfaceNodeName1.')
g3ipinterfaceSlot1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot1.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot1.setDescription('An object containing the the VAL, CLAN or MEDPRO board slot number ')
g3ipinterfaceSlot2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot2.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot2.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 92), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot3.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot3.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot4 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 93), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot4.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot4.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot5 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 94), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot5.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot5.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot6 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 95), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot6.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot6.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot7 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 96), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot7.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot7.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot8 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 97), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot8.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot8.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot9 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 98), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot9.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot9.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot10 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 99), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot10.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot10.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot11 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 100), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot11.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot11.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot12 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 101), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot12.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot12.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot13 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 102), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot13.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot13.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot14 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 103), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot14.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot14.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot15 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 104), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot15.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot15.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot16 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 105), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot16.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot16.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot17 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 106), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot17.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot17.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot18 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 107), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot18.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot18.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot19 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 108), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot19.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot19.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot20 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 109), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot20.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot20.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot21 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 110), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot21.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot21.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot22 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 111), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot22.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot22.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot23 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 112), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot23.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot23.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot24 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 113), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot24.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot24.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot25 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 114), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot25.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot25.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot26 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 115), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot26.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot26.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot27 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 116), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot27.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot27.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot28 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 117), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot28.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot28.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot29 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 118), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot29.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot29.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot30 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 119), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot30.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot30.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot31 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 120), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot31.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot31.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot32 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 121), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot32.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot32.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot33 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 122), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot33.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot33.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot34 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 123), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot34.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot34.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot35 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 124), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot35.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot35.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot36 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 125), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot36.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot36.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot37 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 126), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot37.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot37.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot38 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 127), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot38.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot38.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot39 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 128), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot39.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot39.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot40 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 129), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot40.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot40.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot41 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 130), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot41.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot41.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot42 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 131), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot42.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot42.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot43 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 132), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot43.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot43.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot44 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 133), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot44.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot44.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot45 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 134), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot45.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot45.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot46 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 135), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot46.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot46.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot47 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 136), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot47.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot47.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot48 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 137), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot48.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot48.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot49 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 138), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot49.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot49.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot50 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 139), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot50.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot50.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot51 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 140), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot51.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot51.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot52 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 141), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot52.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot52.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot53 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 142), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot53.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot53.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot54 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 143), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot54.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot54.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot55 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 144), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot55.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot55.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot56 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 145), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot56.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot56.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot57 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 146), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot57.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot57.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot58 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 147), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot58.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot58.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot59 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 148), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot59.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot59.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot60 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 149), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot60.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot60.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot61 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 150), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot61.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot61.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot62 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 151), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot62.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot62.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot63 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 152), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot63.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot63.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot64 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 153), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot64.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot64.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot65 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 154), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot65.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot65.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot66 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 155), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot66.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot66.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot67 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 156), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot67.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot67.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot68 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 157), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot68.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot68.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot69 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 158), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot69.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot69.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot70 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 159), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot70.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot70.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot71 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 160), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot71.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot71.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot72 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 161), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot72.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot72.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot73 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 162), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot73.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot73.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot74 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 163), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot74.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot74.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot75 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 164), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot75.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot75.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot76 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 165), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot76.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot76.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot77 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 166), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot77.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot77.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot78 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 167), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot78.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot78.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot79 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 168), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot79.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot79.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot80 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 169), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot80.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot80.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot81 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 170), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot81.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot81.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot82 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 171), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot82.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot82.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot83 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 172), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot83.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot83.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot84 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 173), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot84.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot84.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3ipinterfaceSlot85 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 103, 174), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipinterfaceSlot85.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipinterfaceSlot85.setDescription('See DESCRIPTION of g3ipinterfaceSlot1.')
g3gatewayTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayTage.setDescription('The number of timeticks since the gateway data was last extracted from the switch by the Proxy Agent. This object along with the g3gatewayintvl object allows the Network Manager to determine the validity of the gateway data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3gatewayTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3gatewayTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayTintvl.setDescription('An object containing the interval for which the gateway data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these gateway objects is received by the agent it uses the g3gatewayage and g3gatewayintvl objects to determine whether it should refresh the cached gatewayTable. If g3gatewaystmp + g3gatewayintvl is less than the current value of the sysUpTime object then the agent refreshes the gatewayTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3gatewayTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3gatewayTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3gatewayTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3gatewayTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3gatewayTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6), )
if mibBuilder.loadTexts: g3gatewayTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayTable.setDescription('A list of g3gateway entries.')
g3gatewayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3gatewayNumber"))
if mibBuilder.loadTexts: g3gatewayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayEntry.setDescription('A g3gateway entry containing objects of the g3gateway information sent by the switch.')
g3gatewayNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayNumber.setDescription('An object containing the Media Gateway number')
g3gatewayName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayName.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayName.setDescription('An object containing the Media Gateway name')
g3gatewayIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayIdentifier.setDescription('An object containing the Media Gateway identifier (either the serial number or other alpha-numeric characters for identification)')
g3gatewayIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayIPAddress.setDescription('An object containing the IP adrress of the Media Gateway')
g3gatewayMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayMACAddress.setDescription('An object containing the MAC address of the Media Gateway')
g3gatewayRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayRegion.setDescription('An object containing the network region for the Media Gateway')
g3gatewayLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayLocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayLocation.setDescription('An object containing information about time-zone offset, daylight savings rule and number plan area code.')
g3gatewaySiteData1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewaySiteData1.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewaySiteData1.setDescription('An object containing general site information')
g3gatewaySiteData2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewaySiteData2.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewaySiteData2.setDescription('An object containing general site information')
g3gatewayG700ModTypeV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayG700ModTypeV1.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayG700ModTypeV1.setDescription('An object containing the hardware contained in the G700 media module slot V1 (if any).')
g3gatewayG700ModTypeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayG700ModTypeV2.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayG700ModTypeV2.setDescription('An object containing the hardware contained in the G700 media module slot V2 (if any).')
g3gatewayG700ModTypeV3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayG700ModTypeV3.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayG700ModTypeV3.setDescription('An object containing the hardware contained in the G700 media module slot V3 (if any).')
g3gatewayG700ModTypeV4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayG700ModTypeV4.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayG700ModTypeV4.setDescription('An object containing the hardware contained in the G700 media module slot V4 (if any).')
g3gatewayG700ModTypeV8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayG700ModTypeV8.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayG700ModTypeV8.setDescription('An object containing the hardware contained in the G700 media module slot V8 (if any).')
g3gatewayG700ModTypeV9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayG700ModTypeV9.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayG700ModTypeV9.setDescription('An object containing the hardware contained in the G700 media module slot V9 (if any).')
g3gatewayRegistered = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayRegistered.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayRegistered.setDescription('An object containing information about whether a Media Gateway is registered with a communications controller.')
g3gatewayType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayType.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayType.setDescription('An object containing the type of media gateway (G700 or G350).')
g3gatewayFWVintage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayFWVintage.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayFWVintage.setDescription('An object containing the firmware version of the media gateway processor (for G700) or the single firmware image on the motherboard (for G350). This value may not be available on a G700 with older firmware and is only available if the media gateway is registered. The object contains a set of three numbers in the format xxx.xxx.xxx.')
g3gatewayHWVintage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayHWVintage.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayHWVintage.setDescription('An object containing the hardware version of the media gateway. This value may not be available for a G700 with older firmware and is only available if th media gateway is registered.')
g3gatewayNearEndIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayNearEndIP.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayNearEndIP.setDescription('An object containing the IP address of the CLAN or S8300 to which the media gateway is registered.')
g3gatewayEncrypt = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayEncrypt.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayEncrypt.setDescription('An object indicating whether or not the media gateway is using encryption (y or n).')
g3gatewayG350ModTypeV1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayG350ModTypeV1.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayG350ModTypeV1.setDescription('An object containing the hardware contained in the G350 media module slot V1 (if any).')
g3gatewayG350ModTypeV2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayG350ModTypeV2.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayG350ModTypeV2.setDescription('An object containing the hardware contained in the G350 media module slot V2 (if any).')
g3gatewayG350ModTypeV3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayG350ModTypeV3.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayG350ModTypeV3.setDescription('An object containing the hardware contained in the G350 media module slot V3 (if any).')
g3gatewayG350ModTypeV4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayG350ModTypeV4.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayG350ModTypeV4.setDescription('An object containing the hardware contained in the G350 media module slot V4 (if any).')
g3gatewayG350ModTypeV5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayG350ModTypeV5.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayG350ModTypeV5.setDescription('An object containing the hardware contained in the G350 media module slot V5 (if any).')
g3gatewayG350ModTypeV6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayG350ModTypeV6.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayG350ModTypeV6.setDescription('An object containing the hardware contained in the G350 media module slot V6 (if any).')
g3gatewayG350ModTypeV7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayG350ModTypeV7.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayG350ModTypeV7.setDescription('An object containing the hardware contained in the G350 media module slot V7 (if any).')
g3gatewayG350ModTypeV9 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 21))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayG350ModTypeV9.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayG350ModTypeV9.setDescription('An object containing the hardware contained in the G350 media module slot V9 (if any).')
g3gatewayRecoveryRule = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 104, 6, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3gatewayRecoveryRule.setStatus('mandatory')
if mibBuilder.loadTexts: g3gatewayRecoveryRule.setDescription('An object containing the recovery rule that is to be used by this media gateway for auto fail back to primary; acceptable values are 1-250 or none; the default is none.')
g3mediacfgTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 105, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mediacfgTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3mediacfgTage.setDescription('The number of timeticks since the media config data was extracted from the switch by the G3 Proxy Agent. This object along with the g3mediacfgTintvl object allows the Network Manager to determine the validity of the media config data in the cache and to control when the proxy agent extracts the media config data from the switch.')
g3mediacfgTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 105, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3mediacfgTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3mediacfgTintvl.setDescription('An object containing the interval for which the media config data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for media config objects is received by the agent it uses the g3mediacfgTage and g3mediacfgTintvl objects to determine whether it should refresh the cached mediacfgTable. If g3mediacfgTstmp + g3mediacfgTintvl is less than the current value of the sysUpTime object then the agent refreshes the mediacfgTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3mediacfgTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 105, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mediacfgTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3mediacfgTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3mediacfgTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 105, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3mediacfgTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3mediacfgTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3mediacfgTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 105, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mediacfgTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3mediacfgTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3mediacfgTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 105, 6), )
if mibBuilder.loadTexts: g3mediacfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3mediacfgTable.setDescription('A list of g3mediacfg entries.')
g3mediacfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 105, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3mediacfgBoardNum"))
if mibBuilder.loadTexts: g3mediacfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3mediacfgEntry.setDescription('A g3mediacfg entry containing objects of the g3mediacfg information sent by the switch.')
g3mediacfgBoardNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 105, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mediacfgBoardNum.setStatus('mandatory')
if mibBuilder.loadTexts: g3mediacfgBoardNum.setDescription('A DisplayString Object that uniquely identifies a station board based on its location in the system. The syntax for the Board Number is as follows: cabinet(01-44):carrier(A-E):slot(01-20).')
g3mediacfgBoardType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 105, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 19))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mediacfgBoardType.setStatus('mandatory')
if mibBuilder.loadTexts: g3mediacfgBoardType.setDescription('A DisplayString Object that contains a text description of the type of media gateway board.')
g3mediacfgCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 105, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mediacfgCode.setStatus('mandatory')
if mibBuilder.loadTexts: g3mediacfgCode.setDescription('A DisplayString Object that contains the code that defines the type of media gateway board.')
g3mediacfgVintage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 105, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mediacfgVintage.setStatus('mandatory')
if mibBuilder.loadTexts: g3mediacfgVintage.setDescription('A DisplayString Object that contains the vintage of the media gateway board.')
g3mediacfgSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 105, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mediacfgSuffix.setStatus('mandatory')
if mibBuilder.loadTexts: g3mediacfgSuffix.setDescription('A DisplayString Object that contains the suffix to the code')
g3stamediaTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaTage.setDescription('The number of timeticks since the media gateway status data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3stamediaintvl object allows the Network Manager to determine the validity of the media gateway status data in the cache and to control when the proxy agent extracts the media gateway status data from the switch.')
g3stamediaTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3stamediaTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaTintvl.setDescription('An object containing the interval for which the media gateway data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for media gateway objects is received by the agent it uses the g3stamediaage and g3stamediaintvl objects to determine whether it should refresh the cached stamediaTable. If g3stamediastmp + g3stamediaintvl is less than the current value of the sysUpTime object then the agent refreshes the stamediaTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3stamediaTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3stamediaTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3stamediaTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3stamediaAlarmMajor = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaAlarmMajor.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaAlarmMajor.setDescription('An object containing the total number of major alarms existing on the media gateways administered in the system.')
g3stamediaAlarmMinor = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaAlarmMinor.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaAlarmMinor.setDescription('An object containing the total number of minor alarms existing on the media gateways administered in the system.')
g3stamediaAlarmWarning = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaAlarmWarning.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaAlarmWarning.setDescription('An object containing the total number of warnings existing on the media gateways administered in a system.')
g3stamediaBusyOutTrunks = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaBusyOutTrunks.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaBusyOutTrunks.setDescription('An object containing the total number of busied out trunks existing on the media gateways administered in the system.')
g3stamediaBusyOutStations = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaBusyOutStations.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaBusyOutStations.setDescription('An object containing the total number of busied out stations existing on the media gateways administered in the system.')
g3stamediaH248LinksDown = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaH248LinksDown.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaH248LinksDown.setDescription('An object containing the total number of media gateways administered in a system that do not have a H.248 link established to the media gateway controller.')
g3stamediaH248LinksUp = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaH248LinksUp.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaH248LinksUp.setDescription('An object containing the total number of media gateways administered in a system that do have a H.248 link established to the media gateway controller.')
g3stamediaNbrLogins = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaNbrLogins.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaNbrLogins.setDescription('An object containing the total number of logins into the system.')
g3stamediaGatewayStatus1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus1.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus1.setDescription('An object containing the status of the first set of eight media gateways, including the number of major alarms, minor alarms, warnings, and the H.248 link status for each specific media gateway number.')
g3stamediaGatewayStatus2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus2.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus2.setDescription('See DESCRIPTION of g3stamediaGatewayStatus1.')
g3stamediaGatewayStatus3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus3.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus3.setDescription('See DESCRIPTION of g3stamediaGatewayStatus1.')
g3stamediaGatewayStatus4 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus4.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus4.setDescription('See DESCRIPTION of g3stamediaGatewayStatus1.')
g3stamediaGatewayStatus5 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus5.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus5.setDescription('See DESCRIPTION of g3stamediaGatewayStatus1.')
g3stamediaGatewayStatus6 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus6.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus6.setDescription('See DESCRIPTION of g3stamediaGatewayStatus1.')
g3stamediaGatewayStatus7 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus7.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus7.setDescription('See DESCRIPTION of g3stamediaGatewayStatus1.')
g3stamediaGatewayStatus8 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus8.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus8.setDescription('See DESCRIPTION of g3stamediaGatewayStatus1.')
g3stamediaGatewayStatus9 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus9.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus9.setDescription('An object containing the status of the second set of eight media gateways, including the number of major alarms, minor alarms, warnings, and the H.248 link status for each specific media gateway number.')
g3stamediaGatewayStatus10 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus10.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus10.setDescription('See DESCRIPTION of g3stamediaGatewayStatus9.')
g3stamediaGatewayStatus11 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus11.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus11.setDescription('See DESCRIPTION of g3stamediaGatewayStatus9.')
g3stamediaGatewayStatus12 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus12.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus12.setDescription('See DESCRIPTION of g3stamediaGatewayStatus9.')
g3stamediaGatewayStatus13 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus13.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus13.setDescription('See DESCRIPTION of g3stamediaGatewayStatus9.')
g3stamediaGatewayStatus14 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus14.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus14.setDescription('See DESCRIPTION of g3stamediaGatewayStatus9.')
g3stamediaGatewayStatus15 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus15.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus15.setDescription('See DESCRIPTION of g3stamediaGatewayStatus9.')
g3stamediaGatewayStatus16 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus16.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus16.setDescription('See DESCRIPTION of g3stamediaGatewayStatus9.')
g3stamediaGatewayStatus17 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus17.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus17.setDescription('An object containing the status of the third set of eight media gateways, including the number of major alarms, minor alarms, warnings, and the H.248 link status for each specific media gateway number.')
g3stamediaGatewayStatus18 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus18.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus18.setDescription('See DESCRIPTION of g3stamediaGatewayStatus17.')
g3stamediaGatewayStatus19 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus19.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus19.setDescription('See DESCRIPTION of g3stamediaGatewayStatus17.')
g3stamediaGatewayStatus20 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus20.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus20.setDescription('See DESCRIPTION of g3stamediaGatewayStatus17.')
g3stamediaGatewayStatus21 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus21.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus21.setDescription('See DESCRIPTION of g3stamediaGatewayStatus17.')
g3stamediaGatewayStatus22 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus22.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus22.setDescription('See DESCRIPTION of g3stamediaGatewayStatus17.')
g3stamediaGatewayStatus23 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus23.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus23.setDescription('See DESCRIPTION of g3stamediaGatewayStatus17.')
g3stamediaGatewayStatus24 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus24.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus24.setDescription('See DESCRIPTION of g3stamediaGatewayStatus17.')
g3stamediaGatewayStatus25 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus25.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus25.setDescription('An object containing the status of the fourth set of eight media gateways, including the number of major alarms, minor alarms, warnings, and the H.248 link status for each specific media gateway number.')
g3stamediaGatewayStatus26 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus26.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus26.setDescription('See DESCRIPTION of g3stamediaGatewayStatus25.')
g3stamediaGatewayStatus27 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus27.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus27.setDescription('See DESCRIPTION of g3stamediaGatewayStatus25.')
g3stamediaGatewayStatus28 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus28.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus28.setDescription('See DESCRIPTION of g3stamediaGatewayStatus25.')
g3stamediaGatewayStatus29 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus29.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus29.setDescription('See DESCRIPTION of g3stamediaGatewayStatus25.')
g3stamediaGatewayStatus30 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus30.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus30.setDescription('See DESCRIPTION of g3stamediaGatewayStatus25.')
g3stamediaGatewayStatus31 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus31.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus31.setDescription('See DESCRIPTION of g3stamediaGatewayStatus25.')
g3stamediaGatewayStatus32 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus32.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus32.setDescription('See DESCRIPTION of g3stamediaGatewayStatus25.')
g3stamediaGatewayStatus33 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus33.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus33.setDescription('An object containing the status of the fifth set of eight media gateways, including the number of major alarms, minor alarms, warnings, and the H.248 link status for each specific media gateway number.')
g3stamediaGatewayStatus34 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus34.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus34.setDescription('See DESCRIPTION of g3stamediaGatewayStatus33.')
g3stamediaGatewayStatus35 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus35.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus35.setDescription('See DESCRIPTION of g3stamediaGatewayStatus33.')
g3stamediaGatewayStatus36 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus36.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus36.setDescription('See DESCRIPTION of g3stamediaGatewayStatus33.')
g3stamediaGatewayStatus37 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus37.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus37.setDescription('See DESCRIPTION of g3stamediaGatewayStatus33.')
g3stamediaGatewayStatus38 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus38.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus38.setDescription('See DESCRIPTION of g3stamediaGatewayStatus33.')
g3stamediaGatewayStatus39 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus39.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus39.setDescription('See DESCRIPTION of g3stamediaGatewayStatus33.')
g3stamediaGatewayStatus40 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus40.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus40.setDescription('See DESCRIPTION of g3stamediaGatewayStatus33.')
g3stamediaGatewayStatus41 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus41.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus41.setDescription('An object containing the status of the sixth set of eight media gateways, including the number of major alarms, minor alarms, warnings, and the H.248 link status for each specific media gateway number.')
g3stamediaGatewayStatus42 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus42.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus42.setDescription('See DESCRIPTION of g3stamediaGatewayStatus41.')
g3stamediaGatewayStatus43 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus43.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus43.setDescription('See DESCRIPTION of g3stamediaGatewayStatus41.')
g3stamediaGatewayStatus44 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus44.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus44.setDescription('See DESCRIPTION of g3stamediaGatewayStatus41.')
g3stamediaGatewayStatus45 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus45.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus45.setDescription('See DESCRIPTION of g3stamediaGatewayStatus41.')
g3stamediaGatewayStatus46 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus46.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus46.setDescription('See DESCRIPTION of g3stamediaGatewayStatus41.')
g3stamediaGatewayStatus47 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus47.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus47.setDescription('See DESCRIPTION of g3stamediaGatewayStatus41.')
g3stamediaGatewayStatus48 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus48.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus48.setDescription('See DESCRIPTION of g3stamediaGatewayStatus41.')
g3stamediaGatewayStatus49 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus49.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus49.setDescription('An object containing the status of the seventh set of eight media gateways, including the number of major alarms, minor alarms, warnings, and the H.248 link status for each specific media gateway number.')
g3stamediaGatewayStatus50 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus50.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus50.setDescription('See DESCRIPTION of g3stamediaGatewayStatus49.')
g3stamediaGatewayStatus51 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus51.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus51.setDescription('See DESCRIPTION of g3stamediaGatewayStatus49.')
g3stamediaGatewayStatus52 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus52.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus52.setDescription('See DESCRIPTION of g3stamediaGatewayStatus49.')
g3stamediaGatewayStatus53 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus53.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus53.setDescription('See DESCRIPTION of g3stamediaGatewayStatus49.')
g3stamediaGatewayStatus54 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 66), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus54.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus54.setDescription('See DESCRIPTION of g3stamediaGatewayStatus49.')
g3stamediaGatewayStatus55 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus55.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus55.setDescription('See DESCRIPTION of g3stamediaGatewayStatus49.')
g3stamediaGatewayStatus56 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus56.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus56.setDescription('See DESCRIPTION of g3stamediaGatewayStatus49.')
g3stamediaGatewayStatus57 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus57.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus57.setDescription('An object containing the status of the eighth set of eight media gateways, including the number of major alarms, minor alarms, warnings, and the H.248 link status for each specific media gateway number.')
g3stamediaGatewayStatus58 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus58.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus58.setDescription('See DESCRIPTION of g3stamediaGatewayStatus57.')
g3stamediaGatewayStatus59 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 71), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus59.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus59.setDescription('See DESCRIPTION of g3stamediaGatewayStatus57.')
g3stamediaGatewayStatus60 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 72), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus60.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus60.setDescription('See DESCRIPTION of g3stamediaGatewayStatus57.')
g3stamediaGatewayStatus61 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 73), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus61.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus61.setDescription('See DESCRIPTION of g3stamediaGatewayStatus57.')
g3stamediaGatewayStatus62 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus62.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus62.setDescription('See DESCRIPTION of g3stamediaGatewayStatus57.')
g3stamediaGatewayStatus63 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 75), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus63.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus63.setDescription('See DESCRIPTION of g3stamediaGatewayStatus57.')
g3stamediaGatewayStatus64 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 76), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus64.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus64.setDescription('See DESCRIPTION of g3stamediaGatewayStatus57.')
g3stamediaGatewayStatus65 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 77), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus65.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus65.setDescription('An object containing the status of the ninth set of eight media gateways, including the number of major alarms, minor alarms, warnings, and the H.248 link status for each specific media gateway number.')
g3stamediaGatewayStatus66 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus66.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus66.setDescription('See DESCRIPTION of g3stamediaGatewayStatus65.')
g3stamediaGatewayStatus67 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 79), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus67.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus67.setDescription('See DESCRIPTION of g3stamediaGatewayStatus65.')
g3stamediaGatewayStatus68 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 80), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus68.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus68.setDescription('See DESCRIPTION of g3stamediaGatewayStatus65.')
g3stamediaGatewayStatus69 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 81), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus69.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus69.setDescription('See DESCRIPTION of g3stamediaGatewayStatus65.')
g3stamediaGatewayStatus70 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 82), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus70.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus70.setDescription('See DESCRIPTION of g3stamediaGatewayStatus65.')
g3stamediaGatewayStatus71 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 83), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus71.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus71.setDescription('See DESCRIPTION of g3stamediaGatewayStatus65.')
g3stamediaGatewayStatus72 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 84), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus72.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus72.setDescription('See DESCRIPTION of g3stamediaGatewayStatus65.')
g3stamediaGatewayStatus73 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus73.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus73.setDescription('An object containing the status of the tenth set of eight media gateways, including the number of major alarms, minor alarms, warnings, and the H.248 link status for each specific media gateway number.')
g3stamediaGatewayStatus74 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 86), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus74.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus74.setDescription('See DESCRIPTION of g3stamediaGatewayStatus73.')
g3stamediaGatewayStatus75 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 87), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus75.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus75.setDescription('See DESCRIPTION of g3stamediaGatewayStatus73.')
g3stamediaGatewayStatus76 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 88), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus76.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus76.setDescription('See DESCRIPTION of g3stamediaGatewayStatus73.')
g3stamediaGatewayStatus77 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 89), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus77.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus77.setDescription('See DESCRIPTION of g3stamediaGatewayStatus73.')
g3stamediaGatewayStatus78 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 90), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus78.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus78.setDescription('See DESCRIPTION of g3stamediaGatewayStatus73.')
g3stamediaGatewayStatus79 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 91), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus79.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus79.setDescription('See DESCRIPTION of g3stamediaGatewayStatus73.')
g3stamediaGatewayStatus80 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 106, 92), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamediaGatewayStatus80.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamediaGatewayStatus80.setDescription('See DESCRIPTION of g3stamediaGatewayStatus73.')
g3stamgannTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 107, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamgannTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamgannTage.setDescription('The number of timeticks since the mg-announcment data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3stamgannintvl object allows the Network Manager to determine the validity of the mg-announcement data in the cache and to control when the proxy agent extracts the mg-announcement data from the switch.')
g3stamgannTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 107, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3stamgannTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamgannTintvl.setDescription('An object containing the interval for which the mg-announcement data extracted from the switch is considered valid by the proxy agent. When a GET or GET-NEXT request for mg-announcement objects is received by the agent it uses the g3stamgannage and g3stamgannintvl objects to determine whether it should refresh the cached stamgannTable. If g3stamgannstmp + g3stamgannintvl is less than the current value of the sysUpTime object then the agent refreshes the stamgannTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3stamgannTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 107, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamgannTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamgannTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3stamgannTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 107, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3stamgannTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamgannTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3stamgannTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 107, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamgannTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamgannTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3stamgannTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 107, 6), )
if mibBuilder.loadTexts: g3stamgannTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamgannTable.setDescription('A list of g3stamgann entries.')
g3stamgannEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 107, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3stamgannGatewayNbr"))
if mibBuilder.loadTexts: g3stamgannEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamgannEntry.setDescription('A g3stamgann entry containing objects of the g3stamgann information sent by the switch.')
g3stamgannGatewayNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 107, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamgannGatewayNbr.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamgannGatewayNbr.setDescription('An object containing the media gateway number of a G700 media gateway that has the virtual VAL board administered in the V9 slot.')
g3stamgannAnnActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 107, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamgannAnnActive.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamgannAnnActive.setDescription('An object containing the status of the administered virtual VAL board functionality in the Auser maintenance table. The status is active, either yes or no.')
g3ipserverTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverTage.setDescription('The number of timeticks since the data was last extracted from the switch by the Proxy Agent. This object along with the g3gatewayTintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3ipserverTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipserverTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these data objects is received by the agent it uses the g3gatewayTage and g3gatewayTintvl objects to determine whether it should refresh the cached gatewayTable. If g3gatewayTstmp + g3gatewayTintvl is less than the current value of the sysUpTime object then the agent refreshes the gatewayTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3ipserverTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3ipserverTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipserverTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3ipserverTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3ipserverTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6), )
if mibBuilder.loadTexts: g3ipserverTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverTable.setDescription('A list of g3ipserver entries.')
g3ipserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3ipserverPortNetwork"))
if mibBuilder.loadTexts: g3ipserverEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverEntry.setDescription('A g3ipserver entry containing objects of the g3ipserver information sent by the switch.')
g3ipserverPortNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverPortNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverPortNetwork.setDescription('An object containing the port network number where the ipserver interfaces are inserted')
g3ipserverSocketEncr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverSocketEncr.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverSocketEncr.setDescription('An object containing the state of socket encryption for the Server Interface Module (SIM) interface between the server and the IPSI board. Values are y(es) and n(o) for enabling/disabling socket encryption.')
g3ipserverSecServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverSecServer.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverSecServer.setDescription('An object containing an indicator as to whether or not a duplicated (secondary) ipserver interface (IPSI) board is administered within a port network.')
g3ipserverPrimLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverPrimLocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverPrimLocation.setDescription('An object containing the IPSI A Board Location')
g3ipserverPrimHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverPrimHost.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverPrimHost.setDescription('An object containing the IPSI A host name')
g3ipserverPrimDHCPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverPrimDHCPID.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverPrimDHCPID.setDescription('An object containing the IPSI A DHCP ID')
g3ipserverPrimIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverPrimIP1.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverPrimIP1.setDescription('An object containing the IPSI A IP address - segment 1')
g3ipserverPrimIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverPrimIP2.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverPrimIP2.setDescription('An object containing the IPSI A IP address - segment 2')
g3ipserverPrimIP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverPrimIP3.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverPrimIP3.setDescription('An object containing the IPSI A IP address - segment 3')
g3ipserverPrimIP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverPrimIP4.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverPrimIP4.setDescription('An object containing the IPSI A IP address - segment 4')
g3ipserverPrimIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverPrimIPPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverPrimIPPort.setDescription('An object containing the IPSI A IP port number')
g3ipserverPrimServState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverPrimServState.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverPrimServState.setDescription('An object containing the IPSI A Service State')
g3ipserverPrimCntlState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverPrimCntlState.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverPrimCntlState.setDescription('An object containing the IPSI A Control State')
g3ipserverPrimStHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverPrimStHealth.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverPrimStHealth.setDescription('An object containing the IPSI A State Of Health')
g3ipserverSecLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverSecLocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverSecLocation.setDescription('An object containing the IPSI B Board Location')
g3ipserverSecHost = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverSecHost.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverSecHost.setDescription('An object containing the IPSI B Host Name')
g3ipserverSecDHCPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverSecDHCPID.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverSecDHCPID.setDescription('An object containing the IPSI B DCHP ID')
g3ipserverSecIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverSecIP1.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverSecIP1.setDescription('An object containing the IPSI B IP Address - segment 1')
g3ipserverSecIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverSecIP2.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverSecIP2.setDescription('An object containing the IPSI B IP Address - segment 2')
g3ipserverSecIP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverSecIP3.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverSecIP3.setDescription('An object containing the IPSI B IP Address - segment 3')
g3ipserverSecIP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverSecIP4.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverSecIP4.setDescription('An object containing the IPSI B IP Address - segment 4 ')
g3ipserverSecIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverSecIPPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverSecIPPort.setDescription('An object containing the IPSI B IP port number')
g3ipserverSecServState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverSecServState.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverSecServState.setDescription('An object containing the IPSI B Service State')
g3ipserverSecCntlState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverSecCntlState.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverSecCntlState.setDescription('An object containing the IPSI B Control State')
g3ipserverSecStHealth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverSecStHealth.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverSecStHealth.setDescription('An object containing the IPSI B State Of Health')
g3ipserverCallCntl802 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverCallCntl802.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverCallCntl802.setDescription('An object containing the call control (signaling) 802.1p value for the IPSI board. Default is 6, with a range of 0 to 7.')
g3ipserverCallCntlDiff = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 108, 6, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipserverCallCntlDiff.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipserverCallCntlDiff.setDescription('An object containing the call control (signaling) DiffServ value for the IPSI board. Default is 40, with a range of 0 to 63.')
g3regipstatTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 109, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3regipstatTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3regipstatTage.setDescription('The number of timeticks since the registered ip stations data was last extracted from the switch by the Proxy Agent. This object along with the g3regipstatintvl object allows the Network Manager to determine the validity of the registered ip stations data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3regipstatTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 109, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3regipstatTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3regipstatTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these registered ip stations data objects is received by the agent it uses the g3regipstatage and g3regipstatintvl objects to determine whether it should refresh the cached regipstatTable. If g3regipstatstmp + g3regipstatintvl is less than the current value of the sysUpTime object then the agent refreshes the regipstatTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3regipstatTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 109, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3regipstatTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3regipstatTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3regipstatTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 109, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3regipstatTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3regipstatTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3regipstatTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 109, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3regipstatTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3regipstatTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3regipstatTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 109, 6), )
if mibBuilder.loadTexts: g3regipstatTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3regipstatTable.setDescription('A list of g3regipstat entries.')
g3regipstatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 109, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3regipstatExtension"))
if mibBuilder.loadTexts: g3regipstatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3regipstatEntry.setDescription('A g3regipstat entry containing objects of the g3regipstat information sent by the switch.')
g3regipstatExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 109, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3regipstatExtension.setStatus('mandatory')
if mibBuilder.loadTexts: g3regipstatExtension.setDescription('An object containing the registered IP station extension.')
g3callratedataTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataTage.setDescription('The number of timeticks since the call rate data was last extracted from the switch by the Proxy Agent. This object along with the g3callratedataTintvl object allows the Network Manager to determine the validity of the call rate data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3callratedataTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3callratedataTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these call rate data objects is received by the agent it uses the g3callratedataTage and g3callratedataTintvl objects to determine whether it should refresh the cached callratedataTable. If g3callratedataTstmp + g3callratedataTintvl is less than the current value of the sysUpTime object then the agent refreshes the callratedataTable cache.In either case it responds to the requests it receives with the data it currently has in the cache.')
g3callratedataTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3callratedataTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3callratedataTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3callratedataRunYear = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataRunYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataRunYear.setDescription('An object containing the Year the command was executed')
g3callratedataRunMonth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataRunMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataRunMonth.setDescription('An object containing the Month the command was executed')
g3callratedataRunDay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataRunDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataRunDay.setDescription('An object containing the Day the command was executed')
g3callratedataRunHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataRunHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataRunHour.setDescription('An object containing the Hour the command was executed')
g3callratedataMeasHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataMeasHour.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratedataNumCalls = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataNumCalls.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataNumCalls.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour. ')
g3callratedataBsyIntHr = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntHr.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntHr.setDescription('An object containing')
g3callratedataBsyIntMn = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntMn.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntMn.setDescription('An object containing')
g3callratedataBsyIntSc = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntSc.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntSc.setDescription('An object containing')
g3callratedataBsyCalCmpl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyCalCmpl.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyCalCmpl.setDescription('An object containing the total number of calls completed in the listed busy interval.')
g3callratedataMeasHour2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataMeasHour2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataMeasHour2.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded.')
g3callratedataNumCallsToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataNumCallsToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataNumCallsToday.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratedataBsyIntHrToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntHrToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntHrToday.setDescription("An object containing today's busiest hour.This is the hour with the largest number of completed calls")
g3callratedataBsyIntMnToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntMnToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntMnToday.setDescription("An object containing the minute field of today's busiest hour")
g3callratedataBsyIntScToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntScToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntScToday.setDescription("An object containing the second field of today's busiest hour")
g3callratedataBsyCalCmplToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyCalCmplToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyCalCmplToday.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratedataMeasHour3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataMeasHour3.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataMeasHour3.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratedataNumCallsToday1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataNumCallsToday1.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataNumCallsToday1.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratedataBsyIntTodayHr = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntTodayHr.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntTodayHr.setDescription('An object containing the hour field of the hour with the busiest 36-second interval for today')
g3callratedataBsyIntTodayMn = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntTodayMn.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntTodayMn.setDescription('An object containing the minute field of the hour with the busiest 36-second interval for today')
g3callratedataBsyIntTodaySc = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntTodaySc.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntTodaySc.setDescription('An object containing the second field of the hour with the busiest 36-second interval for today')
g3callratedataBsyCalCmplToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyCalCmplToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyCalCmplToday2.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratedataMeasHour4 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataMeasHour4.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataMeasHour4.setDescription('An object containing the starting time (using 24-hour clock)of the hour during which the data was recorded')
g3callratedataNumCallsToday3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataNumCallsToday3.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataNumCallsToday3.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratedataBsyIntHrYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntHrYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntHrYesterday.setDescription("An object containing yesterday's busiest hour.This is the hour with the largest number of completed calls")
g3callratedataBsyIntMnYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntMnYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntMnYesterday.setDescription("An object containing the minute field of yesterday's busiest hour")
g3callratedataBsyIntScYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntScYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntScYesterday.setDescription("An object containing the second field of yesterday's busiest hour")
g3callratedataBsyCalCmplYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyCalCmplYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyCalCmplYesterday.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratedataMeasHour5 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataMeasHour5.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataMeasHour5.setDescription('An object containing the starting time (using 24-hour clock)of the hour during which the data was recorded')
g3callratedataNumCallsYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataNumCallsYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataNumCallsYesterday.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratedataBsyIntHrYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntHrYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntHrYesterday2.setDescription('An object containing the hour field of the hour with the busiest 36-second interval for yesterday')
g3callratedataBsyIntMnYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntMnYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntMnYesterday2.setDescription('An object containing the minute field of the hour with the busiest 36-second interval for yesterday')
g3callratedataBsyIntScYesteday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyIntScYesteday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyIntScYesteday2.setDescription('An object containing the second field of the hour with the busiest 36-second interval for yesterday')
g3callratedataBsyCalCmplYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 110, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratedataBsyCalCmplYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratedataBsyCalCmplYesterday2.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratevoiceTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceTage.setDescription('The number of timeticks since the call rate data was last extracted from the switch by the Proxy Agent. This object along with the g3callratevoiceTintvl object allows the Network Manager to determine the validity of the call rate data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3callratevoiceTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3callratevoiceTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent.When a GET or GET-NEXT request for these call rate data objects is received by the agent it uses the g3callratevoiceTage and g3callratevoiceTintvl objects to determine whether it should refresh the cached callratevoiceTable. If g3callratevoiceTstmp + g3callratevoiceTintvl is less than the current value of the sysUpTime object then the agent refreshes the callrayevoiceTable cache.In either case it responds to the requests it receives with the data it currently has in the cache.')
g3callratevoiceTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3callratevoiceTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3callratevoiceTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3callratevoiceRunYear = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceRunYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceRunYear.setDescription('An object containing the Year the command was executed')
g3callratevoiceRunMonth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceRunMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceRunMonth.setDescription('An object containing the Month the command was executed')
g3callratevoiceRunDay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceRunDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceRunDay.setDescription('An object containing the Day the command was executed')
g3callratevoiceRunHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceRunHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceRunHour.setDescription('An object containing the Hour the command was executed')
g3callratevoiceMeasHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceMeasHour.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratevoiceNumCalls = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceNumCalls.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceNumCalls.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour. ')
g3callratevoiceBsyIntHr = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntHr.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntHr.setDescription('An object containing')
g3callratevoiceBsyIntMn = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntMn.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntMn.setDescription('An object containing')
g3callratevoiceBsyIntSc = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntSc.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntSc.setDescription('An object containing')
g3callratevoiceBsyCalCmpl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyCalCmpl.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyCalCmpl.setDescription('An object containing the total number of calls completed in the listed busy interval.')
g3callratevoiceMeasHour2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceMeasHour2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceMeasHour2.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded.')
g3callratevoiceNumCallsToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceNumCallsToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceNumCallsToday.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratevoiceBsyIntHrToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntHrToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntHrToday.setDescription("An object containing today's busiest hour.This is the hour with the largest number of completed calls")
g3callratevoiceBsyIntMnToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntMnToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntMnToday.setDescription("An object containing the minute field of today's busiest hour")
g3callratevoiceBsyIntScToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntScToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntScToday.setDescription("An object containing the second field of today's busiest hour")
g3callratevoiceBsyCalCmplToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyCalCmplToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyCalCmplToday.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratevoiceMeasHour3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceMeasHour3.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceMeasHour3.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratevoiceNumCallsToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceNumCallsToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceNumCallsToday2.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratevoiceBsyIntHrToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntHrToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntHrToday2.setDescription('An object containing the hour field of the hour with the busiest 36-second interval for today')
g3callratevoiceBsyIntMnToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntMnToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntMnToday2.setDescription('An object containing the minute field of the hour with the busiest 36-second interval for today')
g3callratevoiceBsyIntScToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntScToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntScToday2.setDescription('An object containing the second field of the hour with the busiest 36-second interval for today')
g3callratevoiceBsyCalCmplToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyCalCmplToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyCalCmplToday2.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratevoiceMeasHour4 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceMeasHour4.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceMeasHour4.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratevoiceNumCallsYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceNumCallsYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceNumCallsYesterday.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratevoiceBsyIntHrYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntHrYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntHrYesterday.setDescription("An object containing yesterday's busiest hour.This is the hour with the largest number of completed calls.")
g3callratevoiceBsyIntMnYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntMnYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntMnYesterday.setDescription("An object containing the minute field of yesterday's busiest hour")
g3callratevoiceBsyIntScYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntScYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntScYesterday.setDescription("An object containing the second field of yesterday's busiest hour")
g3callratevoiceBsyCalCmplYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyCalCmplYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyCalCmplYesterday.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratevoiceMeasHour5 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceMeasHour5.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceMeasHour5.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratevoiceNumCallsYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceNumCallsYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceNumCallsYesterday2.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratevoiceBsyIntHrYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntHrYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntHrYesterday2.setDescription('An object containing the hour field of the hour with the busiest 36-second interval for yesterday')
g3callratevoiceBsyIntMnYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntMnYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntMnYesterday2.setDescription('An object containing the minute field of the hour with the busiest 36-second interval for yesterday.')
g3callratevoiceBsyIntScYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyIntScYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyIntScYesterday2.setDescription('An object containing the second field of the hour with the busiest 36-second interval for yesterday.')
g3callratevoiceBsyCalCmplYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 111, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratevoiceBsyCalCmplYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratevoiceBsyCalCmplYesterday2.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratesrvTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvTage.setDescription('The number of timeticks since the call rate data was last extracted from the switch by the Proxy Agent. This object along with the g3callratesrvTintvl object allows the Network Manager to determine the validity of the call rate data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3callratesrvTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3callratesrvTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent.When a GET or GET-NEXT request for these call rate data objects is received by the agent it uses the g3callratesrvTage and g3callratesrvTintvl objects to determine whether it should refresh the cached callratesrvTable.If g3callratesrvTstmp + g3callratesrvTintvl is less than the current value of the sysUpTime object then the agent refreshes the callratesrvTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3callratesrvTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3callratesrvTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3callratesrvTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3callratesrvRunYear = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvRunYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvRunYear.setDescription('An object containing the Year the command was executed')
g3callratesrvRunMonth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvRunMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvRunMonth.setDescription('An object containing the Month the command was executed')
g3callratesrvRunDay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvRunDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvRunDay.setDescription('An object containing the Day the command was executed')
g3callratesrvRunHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvRunHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvRunHour.setDescription('An object containing the Hour the command was executed')
g3callratesrvMeasHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvMeasHour.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratesrvNumCalls = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvNumCalls.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvNumCalls.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour. ')
g3callratesrvBsyIntHr = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntHr.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntHr.setDescription('An object containing')
g3callratesrvBsyIntMn = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntMn.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntMn.setDescription('An object containing')
g3callratesrvBsyIntSc = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntSc.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntSc.setDescription('An object containing')
g3callratesrvBsyCalCmpl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyCalCmpl.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyCalCmpl.setDescription('An object containing the total number of calls completed in the listed busy interval.')
g3callratesrvMeasHour2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvMeasHour2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvMeasHour2.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded.')
g3callratesrvNumCallsToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvNumCallsToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvNumCallsToday.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratesrvBsyIntHrToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntHrToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntHrToday.setDescription("An object containing today's busiest hour.This is the hour with the largest number of completed calls.")
g3callratesrvBsyIntMnToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntMnToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntMnToday.setDescription("An object containing the minute field of today's busiest hour")
g3callratesrvBsyIntScToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntScToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntScToday.setDescription("An object containing the second field of today's busiest hour")
g3callratesrvBsyCalCmplToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyCalCmplToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyCalCmplToday.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratesrvMeasHour3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvMeasHour3.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvMeasHour3.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratesrvNumCallsToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvNumCallsToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvNumCallsToday2.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratesrvBsyIntHrToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntHrToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntHrToday2.setDescription('An object containing the hour field of the hour with the busiest 36-second interval for today')
g3callratesrvBsyIntMnToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntMnToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntMnToday2.setDescription('An object containing the minute field of the hour with the busiest 36-second interval for today')
g3callratesrvBsyIntScToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntScToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntScToday2.setDescription('An object containing the second field of the hour with the busiest 36-second interval for today')
g3callratesrvBsyCalCmplToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyCalCmplToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyCalCmplToday2.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratesrvMeasHour4 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvMeasHour4.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvMeasHour4.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratesrvNumCallsYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvNumCallsYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvNumCallsYesterday.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratesrvBsyIntHrYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntHrYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntHrYesterday.setDescription("An object containing yesterday's busiest hour.This is the hour with the largest number of completed calls.")
g3callratesrvBsyIntMnYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntMnYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntMnYesterday.setDescription("An object containing the minute field of yesterday's busiest hour")
g3callratesrvBsyIntScYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntScYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntScYesterday.setDescription("An object containing the second field of yesterday's busiest hour")
g3callratesrvBsyCalCmplYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyCalCmplYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyCalCmplYesterday.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratesrvMeasHour5 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvMeasHour5.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvMeasHour5.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratesrvNumCallsYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvNumCallsYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvNumCallsYesterday2.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratesrvBsyIntHrYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntHrYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntHrYesterday2.setDescription('An object containing the hour field of the hour with the busiest 36-second interval for yesterday.')
g3callratesrvBsyIntMnYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntMnYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntMnYesterday2.setDescription('An object containing the minute field of the hour with the busiest 36-second interval for yesterday.')
g3callratesrvBsyIntScYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyIntScYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyIntScYesterday2.setDescription('An object containing the second field of the hour with the busiest 36-second interval for yesterday.')
g3callratesrvBsyCalCmplYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 112, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratesrvBsyCalCmplYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratesrvBsyCalCmplYesterday2.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratemediaTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaTage.setDescription('The number of timeticks since the call rate data was last extracted from the switch by the Proxy Agent.This object along with the g3callratemediaTintvl object allows the Network Manager to determine the validity of the call rate data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3callratemediaTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3callratemediaTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these call rate data objects is received by the agent it uses the g3callratemediaTage and g3callratemediaTintvl objects to determine whether it ')
g3callratemediaTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3callratemediaTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3callratemediaTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3callratemediaRunYear = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaRunYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaRunYear.setDescription('An object containing the Year the command was executed')
g3callratemediaRunMonth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaRunMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaRunMonth.setDescription('An object containing the Month the command was executed')
g3callratemediaRunDay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaRunDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaRunDay.setDescription('An object containing the Day the command was executed')
g3callratemediaRunHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaRunHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaRunHour.setDescription('An object containing the Hour the command was executed')
g3callratemediaMeasHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaMeasHour.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratemediaNumCalls = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaNumCalls.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaNumCalls.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour. ')
g3callratemediaBsyIntHr = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntHr.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntHr.setDescription('An object containing')
g3callratemediaBsyIntMn = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntMn.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntMn.setDescription('An object containing')
g3callratemediaBsyIntSc = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntSc.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntSc.setDescription('An object containing')
g3callratemediaBsyCalCmpl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyCalCmpl.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyCalCmpl.setDescription('An object containing the total number of calls completed in the listed busy interval.')
g3callratemediaMeasHour2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaMeasHour2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaMeasHour2.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded.')
g3callratemediaNumCallsToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaNumCallsToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaNumCallsToday.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratemediaBsyIntHrToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntHrToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntHrToday.setDescription("An object containing today's busiest hour.This is the hour with the largest number of completed calls.")
g3callratemediaBsyIntMnToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntMnToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntMnToday.setDescription("An object containing the minute field of today's busiest hour")
g3callratemediaBsyIntScToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntScToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntScToday.setDescription("An object containing the minute field of today's busiest hour")
g3callratemediaBsyCalCmplToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyCalCmplToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyCalCmplToday.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratemediaMeasHour3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaMeasHour3.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaMeasHour3.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratemediaNumCallsToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaNumCallsToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaNumCallsToday2.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratemediaBsyIntHrToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntHrToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntHrToday2.setDescription('An object containing the hour field of the hour with the busiest 36-second interval for today')
g3callratemediaBsyIntMnToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntMnToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntMnToday2.setDescription('An object containing the minute field of the hour with the busiest 36-second interval for today')
g3callratemediaBsyIntScToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntScToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntScToday2.setDescription('An object containing the second field of the hour with the busiest 36-second interval for today')
g3callratemediaBsyCalCmplToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyCalCmplToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyCalCmplToday2.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratemediaMeasHour4 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaMeasHour4.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaMeasHour4.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratemediaNumCallsYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaNumCallsYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaNumCallsYesterday.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratemediaBsyIntHrYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntHrYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntHrYesterday.setDescription("An object containing yesterday's busiest hour.This is the hour with the largest number of completed calls.")
g3callratemediaBsyIntMnYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntMnYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntMnYesterday.setDescription("An object containing the minute field of yesterday's busiest hour")
g3callratemediaBsyIntScYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntScYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntScYesterday.setDescription("An object containing the second field of yesterday's busiest hour")
g3callratemediaBsyCalCmplYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyCalCmplYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyCalCmplYesterday.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratemediaMeasHour5 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaMeasHour5.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaMeasHour5.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratemediaNumCallsYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaNumCallsYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaNumCallsYesterday2.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratemediaBsyIntHrYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntHrYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntHrYesterday2.setDescription('An object containing the hour field of the hour with the busiest 36-second interval for yesterday')
g3callratemediaBsyIntMnYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntMnYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntMnYesterday2.setDescription('An object containing the minute field of the hour with the busiest 36-second interval for yesterday')
g3callratemediaBsyIntScYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyIntScYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyIntScYesterday2.setDescription('An object containing the second field of the hour with the busiest 36-second interval for yesterday')
g3callratemediaBsyCalCmplYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 113, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratemediaBsyCalCmplYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratemediaBsyCalCmplYesterday2.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratetotalTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalTage.setDescription('The number of timeticks since the call rate data was last extracted from the switch by the Proxy Agent.This object along with the g3callratedataTintvl object allows the Network Manager to determine the validity of the call rate data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3callratetotalTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3callratetotalTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these call rate data objects is received by the agent it uses the g3callratetotalTage and g3callratetotalTintvl objects to determine whether it should refresh the cached callratetotalTable. If g3callratetotalTstmp + g3callratetotalTintvl is less than the current value of the sysUpTime object then the agent refreshes the callratetotalTable cache.In either case it responds to the requests it receives with the data it currently has in the cache.')
g3callratetotalTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3callratetotalTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3callratetotalTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3callratetotalRunYear = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalRunYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalRunYear.setDescription('An object containing the Year the command was executed')
g3callratetotalRunMonth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalRunMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalRunMonth.setDescription('An object containing the Month the command was executed')
g3callratetotalRunDay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalRunDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalRunDay.setDescription('An object containing the Day the command was executed')
g3callratetotalRunHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalRunHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalRunHour.setDescription('An object containing the Hour the command was executed')
g3callratetotalMeasHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalMeasHour.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratetotalNumCalls = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalNumCalls.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalNumCalls.setDescription('The number of calls completed or answered (including incoming, outgoing, and intercom),during the listed hour. ')
g3callratetotalBsyIntHr = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntHr.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntHr.setDescription('An object containing')
g3callratetotalBsyIntMn = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntMn.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntMn.setDescription('An object containing')
g3callratetotalBsyIntSc = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntSc.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntSc.setDescription('An object containing')
g3callratetotalBsyCalCmpl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyCalCmpl.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyCalCmpl.setDescription('An object containing the total number of calls completed in the listed busy interval.')
g3callratetotalMeasHour2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalMeasHour2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalMeasHour2.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded.')
g3callratetotalNumCallsToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalNumCallsToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalNumCallsToday.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratetotalBsyIntHrToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntHrToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntHrToday.setDescription("An object containing today's busiest hour.This is the hour with the largest number of completed calls.")
g3callratetotalBsyIntMnToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntMnToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntMnToday.setDescription("An object containing the minute field of today's busiest hour")
g3callratetotalBsyIntScToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntScToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntScToday.setDescription("An object containing the second field of today's busiest hour")
g3callratetotalBsyCalCmplToday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyCalCmplToday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyCalCmplToday.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratetotalMeasHour3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalMeasHour3.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalMeasHour3.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratetotalNumCallsToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalNumCallsToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalNumCallsToday2.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratetotalBsyIntHrToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntHrToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntHrToday2.setDescription('An object containing the hour field of the hour with the busiest 36-second interval for today.')
g3callratetotalBsyIntMnToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntMnToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntMnToday2.setDescription('An object containing the minute field of the hour with the busiest 36-second interval for today.')
g3callratetotalBsyIntScToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntScToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntScToday2.setDescription('An object containing the second field of the hour with the busiest 36-second interval for today.')
g3callratetotalBsyCalCmplToday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyCalCmplToday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyCalCmplToday2.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratetotalMeasHour4 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalMeasHour4.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalMeasHour4.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratetotalNumCallsYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalNumCallsYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalNumCallsYesterday.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratetotalBsyIntHrYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntHrYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntHrYesterday.setDescription("An object containing yesterday's busiest hour.This is the hour with the largest number of completed calls.")
g3callratetotalBsyIntMnYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntMnYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntMnYesterday.setDescription("An object containing the minute field of yesterday's busiest hour")
g3callratetotalBsyIntScYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntScYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntScYesterday.setDescription("An object containing the second field of yesterday's busiest hour")
g3callratetotalBsyCalCmplYesterday = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyCalCmplYesterday.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyCalCmplYesterday.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3callratetotalMeasHour5 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalMeasHour5.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalMeasHour5.setDescription('An object containing the starting time (using 24-hour clock) of the hour during which the data was recorded')
g3callratetotalNumCallsYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalNumCallsYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalNumCallsYesterday2.setDescription('The number of calls completed,or answered (including incoming, outgoing, and intercom),during the listed hour')
g3callratetotalBsyIntHrYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntHrYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntHrYesterday2.setDescription('An object containing the hour with the busiest 36-second interval for yesterday.')
g3callratetotalBsyIntMnYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntMnYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntMnYesterday2.setDescription('An object containing the minute field of the hour with the busiest 36-second interval for yesterday.')
g3callratetotalBsyIntScYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyIntScYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyIntScYesterday2.setDescription('An object containing the second field of the hour with the busiest 36-second interval for yesterday.')
g3callratetotalBsyCalCmplYesterday2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 114, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3callratetotalBsyCalCmplYesterday2.setStatus('mandatory')
if mibBuilder.loadTexts: g3callratetotalBsyCalCmplYesterday2.setDescription('An object containing the total number of calls completed in the listed busy interval')
g3clansocsumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumTage.setDescription('The number of timeticks since the clan sockets summary data was last extracted from the switch by the Proxy Agent.This object along with the g3clansocsumTintvl object allows the Network Manager to determine the validity of the clan socket data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3clansocsumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3clansocsumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these clan sockets data objects is received by the agent it uses the g3clansocsumTage and g3clansocsumTintvl objects to determine whether it should refresh the cached clansocsumTable. If g3clansocsumTstmp + g3clansocsumTintvl is less than the current value of the sysUpTime object then the agent refreshes the clansocsumTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3clansocsumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3clansocsumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3clansocsumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3clansocsumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3clansocsumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 6), )
if mibBuilder.loadTexts: g3clansocsumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumTable.setDescription('A list of g3clansocsum entries.')
g3clansocsumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3clansocsumBoard"))
if mibBuilder.loadTexts: g3clansocsumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumEntry.setDescription('A g3clansocsum entry containing objects of the g3clansocsum information sent by the switch.')
g3clansocsumBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumBoard.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumBoard.setDescription('An object containing the cabinet, carrier, and slot for the specified board')
g3clansocsumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumMeasHour.setDescription('An object containing the hour the measurement was taken')
g3clansocsumYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumYear.setDescription('An object containing the Year the command was executed')
g3clansocsumMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumMonth.setDescription('An object containing the Month the command was executed')
g3clansocsumDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumDay.setDescription('An object containing the Day the command was executed')
g3clansocsumHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumHour.setDescription('An object containing the Hour the command was executed')
g3clansocsumRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumRegion.setDescription('An object containing the network region that the CLAN for this measurement is in. Range: 1-44')
g3clansocsumSockusage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumSockusage.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumSockusage.setDescription('An object containing the total time, in Erlangs, that is available from sockets on this C-lan board. Calculated by: (Total Socket Seconds of usage) / 3600. Range: 0-9999.9.')
g3clansocsumSockPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumSockPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumSockPeg.setDescription('An object containing the total number of times a C-lan socket on the board was allocated to a call or link. Range: 0-65535')
g3clansocsumDenialPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumDenialPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumDenialPeg.setDescription('An object containing the total number of times a C-lan socket on the board was needed for a call or link, but was not available. Range: 0-65535')
g3clansocsumPctDenial = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumPctDenial.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumPctDenial.setDescription('An object containing (Socket Denial peg)/(Socket Denial peg + Socket peg). Range: 0-99')
g3clansocsumPcttmASB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 115, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clansocsumPcttmASB.setStatus('mandatory')
if mibBuilder.loadTexts: g3clansocsumPcttmASB.setDescription('An object containing the percentage of time during the measured interval that all C-lan sockets on the board were unavailable for use. Range: 0-99')
g3pkclansocsumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumTage.setDescription('The number of timeticks since the clan sockets summary data was last extracted from the switch by the Proxy Agent. This object along with the g3clansumintvl object allows the Network Manager to determine the validity of the clan socket summary data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkclansocsumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkclansocsumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these clan socket sumary data objects is received by the agent it uses the g3clansocsumTage and g3clansocsumTintvl objects to determine whether it should refresh the cached clansocsumTable. If g3clasocsumTstmp + g3clansocsumTintvl is less than the current value of the sysUpTime object then the agent refreshes the clansocsumTable cache. In either case it responds to the requests it receives with the data it currently has in the cache.')
g3pkclansocsumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkclansocsumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkclansocsumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3pkclansocsumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkclansocsumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 6), )
if mibBuilder.loadTexts: g3pkclansocsumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumTable.setDescription('A list of g3pkclansocsum entries.')
g3pkclansocsumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkclansocsumBoard"))
if mibBuilder.loadTexts: g3pkclansocsumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumEntry.setDescription('A g3pkclansocsum entry containing objects of the g3pkclansocsum information sent by the switch.')
g3pkclansocsumBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumBoard.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumBoard.setDescription('An object containing the cabinet, carrier, and slot for the specified board')
g3pkclansocsumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumMeasHour.setDescription('An object containing the hour the measurement was taken')
g3pkclansocsumYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumYear.setDescription('An object containing the Year the command was executed')
g3pkclansocsumMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumMonth.setDescription('An object containing the Month the command was executed')
g3pkclansocsumDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumDay.setDescription('An object containing the Day the command was executed')
g3pkclansocsumHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumHour.setDescription('An object containing the Hour the command was executed')
g3pkclansocsumRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumRegion.setDescription('An object containing the network region that the CLAN for this measurement is in. Range: 1-44')
g3pkclansocsumSockusage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumSockusage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumSockusage.setDescription('An object containing the total time, in Erlangs, that is available from sockets on this C-lan board. Calculated by: (Total Socket Seconds of usage) / 3600. Range: 0-9999.9.')
g3pkclansocsumSockPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumSockPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumSockPeg.setDescription('An object containing the total number of times a C-lan socket on the board was allocated to a call or link. Range: 0-65535')
g3pkclansocsumDenialPeg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumDenialPeg.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumDenialPeg.setDescription('An object containing the total number of times a C-lan socket on the board was needed for a call or link, but was not available. Range: 0-65535')
g3pkclansocsumPctDenial = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumPctDenial.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumPctDenial.setDescription('An object containing (Socket Denial peg)/(Socket Denial peg + Socket peg). Range: 0-99')
g3pkclansocsumPcttmASB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 116, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkclansocsumPcttmASB.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkclansocsumPcttmASB.setDescription('An object containing the percentage of time during the measured interval that all C-lan sockets on the board were unavailable for use. Range: 0-99')
g3clanetherTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanetherTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherTage.setDescription('The number of timeticks since the clan ethernet data was last extracted from the switch by the Proxy Agent.This object along with the g3clanetherTintvl object allows the Network Manager to determine the validity of the clan ethernet data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3clanetherTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3clanetherTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these clan ethernet data objects is received by the agent it uses the g3clanetherTage and g3clanetherTintvl objects to determine whether it should refresh the cached clanetherTable. If g3clanetherTstmp + g3clanetherTintvl is less than the current value of the sysUpTime object then the agent refreshes the clanetherTable cache.In either case it responds to the requests it receives with the data it currently has in the cache.')
g3clanetherTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanetherTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3clanetherTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3clanetherTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3clanetherTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanetherTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3clanetherTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 6), )
if mibBuilder.loadTexts: g3clanetherTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherTable.setDescription('A list of g3clanether entries.')
g3clanetherEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3clanetherKey"), (0, "G3-AVAYA-MIB", "g3clanetherDate"), (0, "G3-AVAYA-MIB", "g3clanetherTime"))
if mibBuilder.loadTexts: g3clanetherEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherEntry.setDescription('A g3clanether entry containing objects of the g3clanether information sent by the switch.')
g3clanetherKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanetherKey.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherKey.setDescription('An object containing the index key')
g3clanetherYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanetherYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherYear.setDescription('An object containing the Year the command was executed')
g3clanetherMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanetherMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherMonth.setDescription('An object containing the Month the command was executed')
g3clanetherDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanetherDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherDay.setDescription('An object containing the Day the command was executed')
g3clanetherHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanetherHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherHour.setDescription('An object containing the Hour the command was executed')
g3clanetherDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanetherDate.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherDate.setDescription('An object containing the date that the data was collected')
g3clanetherTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanetherTime.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherTime.setDescription('An object containing the current 15-minute interval in which the action was performed')
g3clanetherCrcChkTot = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanetherCrcChkTot.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherCrcChkTot.setDescription('An object containing the total error count for CRC errors')
g3clanetherCrcChkDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanetherCrcChkDelta.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherCrcChkDelta.setDescription('An object containing the difference between the current and the previous sample for CRC errors')
g3clanetherCollCntTot = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanetherCollCntTot.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherCollCntTot.setDescription('An object containing the error count for collisions on the ethernet')
g3clanetherCollCntDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 117, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanetherCollCntDelta.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanetherCollCntDelta.setDescription('An object containing the difference between the current and previous samples for the error count for collisions on the ethernet')
g3clanpppTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppTage.setDescription('The number of timeticks since the clan ppp data was last extracted from the switch by the Proxy Agent. This object along with the g3clanpppTintvl object allows the Network Manager to determine the validity of the clan ppp data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3clanpppTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3clanpppTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these clan ppp data objects is received by the agent it uses the g3clanpppTage and g3clanpppTintvl objects to determine whether it should refresh the cached clanpppTable. If g3clanpppTstmp + g3clanpppTintvl is less than the current value of the sysUpTime object then the agent refreshes the clanpppTable cache.In either case it responds to the requests it receives with the data it currently has in the cache.')
g3clanpppTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3clanpppTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3clanpppTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3clanpppTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3clanpppTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6), )
if mibBuilder.loadTexts: g3clanpppTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppTable.setDescription('A list of g3clanppp entries.')
g3clanpppEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3clanpppKey"), (0, "G3-AVAYA-MIB", "g3clanpppDate"), (0, "G3-AVAYA-MIB", "g3clanpppTime"))
if mibBuilder.loadTexts: g3clanpppEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppEntry.setDescription('A g3clanppp entry containing objects of the g3clanppp information sent by the switch.')
g3clanpppKey = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppKey.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppKey.setDescription('An object containing the index key')
g3clanpppYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppYear.setDescription('An object containing the Year the command was executed')
g3clanpppMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppMonth.setDescription('An object containing the Month the command was executed')
g3clanpppDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppDay.setDescription('An object containing the Day the command was executed')
g3clanpppHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppHour.setDescription('An object containing the Hour the command was executed')
g3clanpppDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppDate.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppDate.setDescription('An object containing the date that the data was collected')
g3clanpppTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppTime.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppTime.setDescription('An object containing the current 15-minute interval in which the action was performed')
g3clanpppCrcChkTot = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppCrcChkTot.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppCrcChkTot.setDescription('An object containing the total error count for CRC errors')
g3clanpppCrcChkDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppCrcChkDelta.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppCrcChkDelta.setDescription('An object containing the difference between the current and the previous sample for CRC errors')
g3clanpppInvFrameTot = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppInvFrameTot.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppInvFrameTot.setDescription('An object containing the total number of invalid frames detected. Invalid frames are the frames that are misaligned.')
g3clanpppInvFrameDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppInvFrameDelta.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppInvFrameDelta.setDescription('An object containing the difference between the Invalid frames count between the current and previous samples for Invalid frames count')
g3clanpppChapFailTot = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppChapFailTot.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppChapFailTot.setDescription('An object containing the total number of failed attempts for ppp authentication')
g3clanpppChapFailDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 118, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clanpppChapFailDelta.setStatus('mandatory')
if mibBuilder.loadTexts: g3clanpppChapFailDelta.setDescription('An object containing the difference betwen the current and previous sample for number of failed')
g3mmisumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumTage.setDescription('The number of timeticks since the hourly multimedia interface traffic (MMI) summary data was last extracted from the switch by the Proxy Agent. This object along with the g3mmisumTintvl object allows the Network Manager to determine the validity of the hourly MMI summary data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3mmisumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3mmisumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these hourly MMI summary objects is received by the agent it uses the g3mmisumTage and g3mmisumTintvl objects to determine whether it should refresh the cached hourly MMI summary data.')
g3mmisumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3mmisumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3mmisumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3mmisumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3mmisumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6), )
if mibBuilder.loadTexts: g3mmisumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumTable.setDescription('A list of g3mmisum entries.')
g3mmisumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3mmisumMeasHour"))
if mibBuilder.loadTexts: g3mmisumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumEntry.setDescription('A g3mmisum entry containing objects of the g3mmisum information sent by the switch.')
g3mmisumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumMeasHour.setDescription('An object containing the hour for which these measurements apply (based on a 24-hour clock).')
g3mmisumYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumYear.setDescription('An object containing the Year the command was executed.')
g3mmisumMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumMonth.setDescription('An object containing the Month the command was executed.')
g3mmisumDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumDay.setDescription('An object containing the Day the command was executed.')
g3mmisumHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumHour.setDescription('An object containing the Hour the command was executed.')
g3mmisumAvailablePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumAvailablePorts.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumAvailablePorts.setDescription('An object containing the total network MMI ports in the system (does not include any MMIs that are cabled to an ESM).')
g3mmisumAvailableUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumAvailableUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumAvailableUsage.setDescription('An object containing the total time that is available in the system for network MMI ports (in CCS units).')
g3mmisumTotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumTotalUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumTotalUsage.setDescription('An object containing the total time, in CCS units, that MMI ports are in use on a call. It includes the time that the ports are out of service or maintenance busy. Usage is measured from the time the port is allocated until it is released.')
g3mmisumTotalAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumTotalAllocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumTotalAllocation.setDescription('An object containing the total number of times that an MMI port was allocated to a call. Keep in mind that a 2-channel call occupies 2 ports, so this number does not necessarily reflect the number of calls that took place. Point-to-point calls do not use MMI resources, so these allocations are for conversion calls of multimedia conferences.')
g3mmisumMMIDenials = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumMMIDenials.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumMMIDenials.setDescription('An object containing the total number of times an MMI port was needed but could not be allocated because all ports were busy.')
g3mmisumOutofService = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumOutofService.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumOutofService.setDescription('An object containing the total time, in CCS units, that any MMI ports were out of service during any part of the measured interval.')
g3mmisumPercentAPB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumPercentAPB.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumPercentAPB.setDescription('An object containing the percentage of time during the measured interval that all MMI ports are unavailable to carry a new call.')
g3mmisumPercentBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 119, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mmisumPercentBlock.setStatus('mandatory')
if mibBuilder.loadTexts: g3mmisumPercentBlock.setDescription('An object containing the percentage of attempted allocations of MMI ports that are not successful (calculated as percent blockage = (MMI Denials/(Total Alloc + MMI Denials)) * 100).')
g3pkmmisumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumTage.setDescription('The number of timeticks since the peak multimedia interface traffic (MMI) summary data was last extracted from the switch by the Proxy Agent. This object along with the g3pkmmisumTintvl object allows the Network Manager to determine the validity of the peak MMI summary data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkmmisumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkmmisumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these peak MMI summary objects is received by the agent it uses the g3pkmmisumTage and g3pkmmisumTintvl objects to determine whether it should refresh the cached peak MMI summary data.')
g3pkmmisumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkmmisumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkmmisumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3pkmmisumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkmmisumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6), )
if mibBuilder.loadTexts: g3pkmmisumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumTable.setDescription('A list of g3pkmmisum entries.')
g3pkmmisumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkmmisumMeasHour"))
if mibBuilder.loadTexts: g3pkmmisumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumEntry.setDescription('A g3pkmmisum entry containing objects of the g3pkmmisum information sent by the switch.')
g3pkmmisumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumMeasHour.setDescription('An object containing the hour for which these measurements apply (based on a 24-hour clock).')
g3pkmmisumYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumYear.setDescription('An object containing the Year the command was executed.')
g3pkmmisumMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumMonth.setDescription('An object containing the Month the command was executed.')
g3pkmmisumDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumDay.setDescription('An object containing the Day the command was executed.')
g3pkmmisumHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumHour.setDescription('An object containing the Hour the command was executed.')
g3pkmmisumAvailablePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumAvailablePorts.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumAvailablePorts.setDescription('An object containing the total network MMI ports in the system (does not include any MMIs that are cabled to an ESM).')
g3pkmmisumAvailableUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumAvailableUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumAvailableUsage.setDescription('An object containing the total time that is available in the system for network MMI ports (in CCS units).')
g3pkmmisumTotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumTotalUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumTotalUsage.setDescription('An object containing the total time, in CCS units, that MMI ports are in use on a call. It includes the time that the ports are out of service or maintenance busy. Usage is measured from the time the port is allocated until it is released.')
g3pkmmisumTotalAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumTotalAllocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumTotalAllocation.setDescription('An object containing the total number of times that an MMI port was allocated to a call. Keep in mind that a 2-channel call occupies 2 ports, so this number does not necessarily reflect the number of calls that took place. Point-to-point calls do not use MMI resources, so these allocations are for conversion calls of multimedia conferences.')
g3pkmmisumMMIDenials = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumMMIDenials.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumMMIDenials.setDescription('An object containing the total number of times an MMI port was needed but could not be allocated because all ports were busy.')
g3pkmmisumOutofService = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumOutofService.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumOutofService.setDescription('An object containing the total time, in CCS units, that any MMI ports were out of service during any part of the measured interval.')
g3pkmmisumPercentAPB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumPercentAPB.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumPercentAPB.setDescription('An object containing the percentage of time during the measured interval that all MMI ports are unavailable to carry a new call.')
g3pkmmisumPercentBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 120, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkmmisumPercentBlock.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkmmisumPercentBlock.setDescription('An object containing the percentage of attempted allocations of MMI ports that are not successful (calculated as percent blockage = (MMI Denials/(Total Alloc + MMI Denials)) * 100).')
g3esmsumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumTage.setDescription('The number of timeticks since the hourly expansion services module (ESM) summary data was last extracted from the switch by the Proxy Agent.This object along with the g3esmsumTintvl object allows the Network Manager to determine the validity of the hourly ESM summary data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3esmsumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3esmsumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these hourly ESM summary objects is received by the agent it uses the g3esmsumTage and g3esmsumTintvl objects to determine whether it should refresh the cached hourly ESM summary data.')
g3esmsumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3esmsumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3esmsumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3esmsumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3esmsumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6), )
if mibBuilder.loadTexts: g3esmsumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumTable.setDescription('A list of g3esmsum entries.')
g3esmsumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3esmsumMeasHour"))
if mibBuilder.loadTexts: g3esmsumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumEntry.setDescription('A g3esmsum entry containing objects of the g3esmsum information sent by the switch.')
g3esmsumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumMeasHour.setDescription('An object containing the hour for which these measurements apply (based on a 24-hour clock).')
g3esmsumYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumYear.setDescription('An object containing the Year the command was executed.')
g3esmsumMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumMonth.setDescription('An object containing the Month the command was executed.')
g3esmsumDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumDay.setDescription('An object containing the Day the command was executed.')
g3esmsumHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumHour.setDescription('An object containing the Hour the command was executed.')
g3esmsumAvailablePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumAvailablePorts.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumAvailablePorts.setDescription('An object containing the total network ESM-MMI ports in the system.')
g3esmsumAvailableUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumAvailableUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumAvailableUsage.setDescription('An object containing the total time that is available in the system for network ESM-MMI ports (in CCS units).')
g3esmsumTotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumTotalUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumTotalUsage.setDescription('An object containing the total time, in CCS units, that ESM-MMI ports are in use on a call. It includes the time that the ports are out of service or maintenance busy. Usage is measured from the time the port is allocated until it is released.')
g3esmsumTotalAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumTotalAllocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumTotalAllocation.setDescription('An object containing the total number of times that an ESM-MMI port was allocated to a call.')
g3esmsumESMDenials = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumESMDenials.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumESMDenials.setDescription('An object containing the total number of times an ESM-MMI port was needed but could not be allocated because all ports were busy.')
g3esmsumOutofService = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumOutofService.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumOutofService.setDescription('An object containing the total time, in CCS units, that any ESM-MMI ports were out of service during any part of the measured interval.')
g3esmsumPercentAPB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumPercentAPB.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumPercentAPB.setDescription('An object containing the percentage of time during the measured interval that all ESM-MMI ports are unavailable to carry a new call.')
g3esmsumPercentBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 121, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmsumPercentBlock.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmsumPercentBlock.setDescription('An object containing the percentage of attempted allocations of ESM-MMI ports that are not successful (calculated as percent blockage = ((ESM Denials/(Total Alloc + ESM Denials)) * 100)).')
g3pkesmsumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumTage.setDescription('The number of timeticks since the peak expansion services module (ESM) summary data was last extracted from the switch by the Proxy Agent.This object along with the g3pkesmsumTintvl object allows the Network Manager to determine the validity of the peak ESM summary data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkesmsumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkesmsumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these peak ESM summary objects is received by the agent it uses the g3pkesmsumTage and g3pkesmsumTintvl objects to determine whether it should refresh the cached peak ESM summary data.')
g3pkesmsumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkesmsumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkesmsumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3pkesmsumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkesmsumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6), )
if mibBuilder.loadTexts: g3pkesmsumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumTable.setDescription('A list of g3pkesmsum entries.')
g3pkesmsumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkesmsumMeasHour"))
if mibBuilder.loadTexts: g3pkesmsumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumEntry.setDescription('A g3pkesmsum entry containing objects of the g3pkesmsum information sent by the switch.')
g3pkesmsumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumMeasHour.setDescription('An object containing the hour for which these measurements apply (based on a 24-hour clock).')
g3pkesmsumYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumYear.setDescription('An object containing the Year the command was executed.')
g3pkesmsumMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumMonth.setDescription('An object containing the Month the command was executed.')
g3pkesmsumDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumDay.setDescription('An object containing the Day the command was executed.')
g3pkesmsumHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumHour.setDescription('An object containing the Hour the command was executed.')
g3pkesmsumAvailablePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumAvailablePorts.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumAvailablePorts.setDescription('An object containing the total network ESM-MMI ports in the system.')
g3pkesmsumAvailableUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumAvailableUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumAvailableUsage.setDescription('An object containing the total time that is available in the system for network ESM-MMI ports (in CCS units).')
g3pkesmsumTotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumTotalUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumTotalUsage.setDescription('An object containing the total time, in CCS units, that ESM-MMI ports are in use on a call. It includes the time that the ports are out of service or maintenance busy. Usage is measured from the time the port is allocated until it is released.')
g3pkesmsumTotalAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumTotalAllocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumTotalAllocation.setDescription('An object containing the total number of times that an ESM-MMI port was allocated to a call.')
g3pkesmsumESMDenials = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumESMDenials.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumESMDenials.setDescription('An object containing the total number of times an ESM-MMI port was needed but could not be allocated because all ports were busy.')
g3pkesmsumOutofService = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumOutofService.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumOutofService.setDescription('An object containing the total time, in CCS units, that any ESM-MMI ports were out of service during any part of the measured interval.')
g3pkesmsumPercentAPB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumPercentAPB.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumPercentAPB.setDescription('An object containing the percentage of time during the measured interval that all ESM-MMI ports are unavailable to carry a new call.')
g3pkesmsumPercentBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 122, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkesmsumPercentBlock.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkesmsumPercentBlock.setDescription('An object containing the percentage of attempted allocations of ESM-MMI ports that are not successful (calculated as percent blockage = ((ESM Denials/(Total Alloc + ESM Denials)) * 100)).')
g3voicesumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumTage.setDescription('The number of timeticks since the hourly voice conditioner (VC) summary data was last extracted from the switch by the Proxy Agent.This object along with the g3voicesumTintvl object allows the Network Manager to determine the validity of the hourly VC summary data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3voicesumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3voicesumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these hourly VC summary objects is received by the agent it uses the g3voicesumTage and g3voicesumTintvl objects to determine whether it should refresh the cached hourly VC summary data.')
g3voicesumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3voicesumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3voicesumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3voicesumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3voicesumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6), )
if mibBuilder.loadTexts: g3voicesumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumTable.setDescription('A list of g3voicesum entries.')
g3voicesumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3voicesumMeasHour"))
if mibBuilder.loadTexts: g3voicesumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumEntry.setDescription('A g3voicesum entry containing objects of the g3voicesum information sent by the switch.')
g3voicesumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumMeasHour.setDescription('An object containing the hour for which these measurements apply (based on a 24-hour clock).')
g3voicesumYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumYear.setDescription('An object containing the Year the command was executed.')
g3voicesumMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumMonth.setDescription('An object containing the Month the command was executed.')
g3voicesumDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumDay.setDescription('An object containing the Day the command was executed.')
g3voicesumHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumHour.setDescription('An object containing the Hour the command was executed.')
g3voicesumAvailablePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumAvailablePorts.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumAvailablePorts.setDescription('An object containing the total number of VC ports in the system.')
g3voicesumAvailableUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumAvailableUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumAvailableUsage.setDescription('An object containing the total time, in CCS units, that all VC ports are available in the system (calculated as number of MMI ports * 36).')
g3voicesumH320Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumH320Usage.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumH320Usage.setDescription('An object containing the total time that VC ports are allocated to H320 endpoints.')
g3voicesumVoiceUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumVoiceUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumVoiceUsage.setDescription('An object containing the total time that VC ports are allocated to voice endpoints.')
g3voicesumTotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumTotalUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumTotalUsage.setDescription('An object containing the total time, in CCS units, that VC ports are unavailable to carry a new call. This includes time that the ports are busy on a call, out or service, or maintenance busy. Measured from the time that the port is allocated until it is released.')
g3voicesumH320Allocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumH320Allocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumH320Allocation.setDescription('An object containing the total number of times a VC port was allocated to a H320 call.')
g3voicesumVoiceAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumVoiceAllocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumVoiceAllocation.setDescription('An object containing the total number of times a VC port was allocated to a voice call.')
g3voicesumTotalAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumTotalAllocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumTotalAllocation.setDescription('An object containing the total number of times a VC port was allocated to any call. Each B-channel used on a multimedia call counts as one allocation.')
g3voicesumH320Denials = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumH320Denials.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumH320Denials.setDescription('An object containing the number of times a port was needed for an H320 call, but was not available.')
g3voicesumVoiceDenials = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumVoiceDenials.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumVoiceDenials.setDescription('An object containing the number of times a port was need for a voice call, but was not available.')
g3voicesumTotalDenials = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumTotalDenials.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumTotalDenials.setDescription('An object containing the total number of times a VC port was needed for any call, but was not allocated because all VC ports were busy.')
g3voicesumOutofService = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumOutofService.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumOutofService.setDescription('An object containing the total time, in CCS units, that any VC ports were out of service during any part of the measured interval.')
g3voicesumPercentAPB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumPercentAPB.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumPercentAPB.setDescription('An object containing the percentage of time during the measured interval that all VC ports are unavailable to carry a new call.')
g3voicesumPercentBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 123, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3voicesumPercentBlock.setStatus('mandatory')
if mibBuilder.loadTexts: g3voicesumPercentBlock.setDescription('An object containing the percentage of attempted allocations of VC ports that are not successful. This value is calculated as percent blockage = ((Total VC Denials / (Total Alloc + Total VC Denials)) * 100).')
g3pkvoicesumTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumTage.setDescription('The number of timeticks since the peak voice conditioner (VC) summary data was last extracted from the switch by the Proxy Agent.This object along with the g3pkvoicesumTintvl object allows the Network Manager to determine the validity of the peak VC summary data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkvoicesumTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkvoicesumTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these peak VC summary objects is received by the agent it uses the g3pkvoicesumTage and g3pkvoicesumTintvl objects to determine whether it should refresh the cached peak VC summary data.')
g3pkvoicesumTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkvoicesumTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkvoicesumTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3pkvoicesumTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkvoicesumTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6), )
if mibBuilder.loadTexts: g3pkvoicesumTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumTable.setDescription('A list of g3pkvoicesum entries.')
g3pkvoicesumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkvoicesumMeasHour"))
if mibBuilder.loadTexts: g3pkvoicesumEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumEntry.setDescription('A g3pkvoicesum entry containing objects of the g3pkvoicesum information sent by the switch.')
g3pkvoicesumMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumMeasHour.setDescription('An object containing the hour for which these measurements apply (based on a 24-hour clock).')
g3pkvoicesumYear = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumYear.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumYear.setDescription('An object containing the Year the command was executed.')
g3pkvoicesumMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumMonth.setDescription('An object containing the Month the command was executed.')
g3pkvoicesumDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumDay.setDescription('An object containing the Day the command was executed.')
g3pkvoicesumHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumHour.setDescription('An object containing the Hour the command was executed.')
g3pkvoicesumAvailablePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumAvailablePorts.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumAvailablePorts.setDescription('An object containing the total number of VC ports in the system.')
g3pkvoicesumAvailableUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumAvailableUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumAvailableUsage.setDescription('An object containing the total time, in CCS units, that all VC ports are available in the system (calculated as number of MMI ports * 36).')
g3pkvoicesumH320Usage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumH320Usage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumH320Usage.setDescription('An object containing the total time that VC ports are allocated to H320 endpoints.')
g3pkvoicesumVoiceUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumVoiceUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumVoiceUsage.setDescription('An object containing the total time that VC ports are allocated to voice endpoints.')
g3pkvoicesumTotalUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumTotalUsage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumTotalUsage.setDescription('An object containing the total time, in CCS units, that VC ports are unavailable to carry a new call. This includes time that the ports are busy on a call, out or service, or maintenance busy. Measured from the time that the port is allocated until it is released.')
g3pkvoicesumH320Allocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumH320Allocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumH320Allocation.setDescription('An object containing the total number of times a VC port was allocated to a H320 call.')
g3pkvoicesumVoiceAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumVoiceAllocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumVoiceAllocation.setDescription('An object containing the total number of times a VC port was allocated to a voice call.')
g3pkvoicesumTotalAllocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumTotalAllocation.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumTotalAllocation.setDescription('An object containing the total number of times a VC port was allocated to any call. Each B-channel used on a multimedia call counts as one allocation.')
g3pkvoicesumH320Denials = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumH320Denials.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumH320Denials.setDescription('An object containing the number of times a port was needed for an H320 call, but was not available.')
g3pkvoicesumVoiceDenials = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumVoiceDenials.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumVoiceDenials.setDescription('An object containing the number of times a port was need for a voice call, but was not available.')
g3pkvoicesumTotalDenials = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumTotalDenials.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumTotalDenials.setDescription('An object containing the total number of times a VC port was needed for any call, but was not allocated because all VC ports were busy.')
g3pkvoicesumOutofService = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumOutofService.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumOutofService.setDescription('An object containing the total time, in CCS units, that any VC ports were out of service during any part of the measured interval.')
g3pkvoicesumPercentAPB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumPercentAPB.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumPercentAPB.setDescription('An object containing the percentage of time during the measured interval that all VC ports are unavailable to carry a new call.')
g3pkvoicesumPercentBlock = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 124, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkvoicesumPercentBlock.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkvoicesumPercentBlock.setDescription('An object containing the percentage of attempted allocations of VC ports that are not successful. This value is calculated as percent blockage = ((Total VC Denials / (Total Alloc + Total VC Denials)) * 100).')
g3ipintlistTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 125, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipintlistTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipintlistTage.setDescription('The number of timeticks since the ip interface data was last extracted from the switch by the Proxy Agent.This object along with the g3ipintlistTintvl object allows the Network Manager to determine the validity of the ip interface data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3ipintlistTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 125, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipintlistTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipintlistTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these ip interface objects is received by the agent it uses the g3ipintlistTage and g3ipintlistTintvl objects to determine whether it should refresh the cached ip interface data.')
g3ipintlistTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 125, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipintlistTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipintlistTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3ipintlistTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 125, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipintlistTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipintlistTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3ipintlistTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 125, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipintlistTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipintlistTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3ipintlistTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 125, 6), )
if mibBuilder.loadTexts: g3ipintlistTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipintlistTable.setDescription('A list of g3ipintlist entries.')
g3ipintlistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 125, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3ipintlistNodeName"))
if mibBuilder.loadTexts: g3ipintlistEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipintlistEntry.setDescription('A g3ipintlist entry containing objects of the g3ipintlist information sent by the switch.')
g3ipintlistNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 125, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipintlistNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipintlistNodeName.setDescription('An object containing the the node-name for the ip interface')
g3ipintlistSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 125, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipintlistSlot.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipintlistSlot.setDescription('An object containing the the VAL, CLAN or MEDPRO board slot number ')
g3stamedlistTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 126, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamedlistTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamedlistTage.setDescription('The number of timeticks since the media gateway status data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3stamedlistTintvl object allows the Network Manager to determine the validity of the media gateway status data in the cache and to control when the proxy agent extracts the status media gateway data from the switch.')
g3stamedlistTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 126, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3stamedlistTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamedlistTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these media gateway status objects is received by the agent it uses the g3stamedlistTage and g3stamedlistTintvl objects to determine whether it should refresh the cached media gateway status data.')
g3stamedlistTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 126, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamedlistTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamedlistTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3stamedlistTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 126, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3stamedlistTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamedlistTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3stamedlistTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 126, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamedlistTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamedlistTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3stamedlistTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 126, 6), )
if mibBuilder.loadTexts: g3stamedlistTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamedlistTable.setDescription('A list of g3stamedlist entries.')
g3stamedlistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 126, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3stamedlistGatewayStatus"))
if mibBuilder.loadTexts: g3stamedlistEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamedlistEntry.setDescription('A g3stamedlist entry containing objects of the g3stamedlist information sent by the switch.')
g3stamedlistGatewayStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 126, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3stamedlistGatewayStatus.setStatus('mandatory')
if mibBuilder.loadTexts: g3stamedlistGatewayStatus.setDescription('An object containing the status of the first set of eight media gateways, including the number of major alarms, minor alarms, warnings, and the H.248 link status for each specific media gateway number.')
g3lsplistTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3lsplistTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistTage.setDescription('The number of timeticks since the Local Survivable Processor (LSP) data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3lsplistTintvl object allows the Network Manager to determine the validity of the LSP data in the cache and to control when the proxy agent extracts the LSP data from the switch.')
g3lsplistTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3lsplistTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these LSP objects is received by the agent it uses the g3lsplistTage and g3lsplistTintvl objects to determine whether it should refresh the cached LSP data.')
g3lsplistTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3lsplistTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3lsplistTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3lsplistTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3lsplistTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3lsplistTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3lsplistTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 6), )
if mibBuilder.loadTexts: g3lsplistTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistTable.setDescription('A list of g3lsplist entries.')
g3lsplistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3lsplistNodeName"))
if mibBuilder.loadTexts: g3lsplistEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistEntry.setDescription('A g3lsplist entry containing objects of the g3lsplist information sent by the switch.')
g3lsplistNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3lsplistNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistNodeName.setDescription('An object containing the LSP node name.')
g3lsplistIPAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3lsplistIPAddr1.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistIPAddr1.setDescription('An object containing the first part of the LSP IP address.')
g3lsplistIPAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3lsplistIPAddr2.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistIPAddr2.setDescription('An object containing the second part of the LSP IP address.')
g3lsplistIPAddr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3lsplistIPAddr3.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistIPAddr3.setDescription('An object containing the third part of the LSP IP address.')
g3lsplistIPAddr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3lsplistIPAddr4.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistIPAddr4.setDescription('An object containing the fourth part of the LSP IP address.')
g3lsplistAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3lsplistAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistAvailable.setDescription('An object indicating the availability of the LSP (y(es) or n(o)).')
g3lsplistXlnUpdated = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3lsplistXlnUpdated.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistXlnUpdated.setDescription('An object containing the date and time of the last translation update in the format mm/dd/hh:mm.')
g3lsplistServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 127, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3lsplistServiceState.setStatus('mandatory')
if mibBuilder.loadTexts: g3lsplistServiceState.setDescription('An object containing the service state of the LSP.')
g3eventhourTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourTage.setDescription('The number of timeticks since the last hour denial event data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3eventhourTintvl object allows the Network Manager to determine the validity of the event data in the cache and to control when the proxy agent extracts the event data from the switch.')
g3eventhourTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3eventhourTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these event objects is received by the agent it uses the g3eventhourTage and g3eventhourTintvl objects to determine whether it should refresh the cached event data.')
g3eventhourTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3eventhourTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3eventhourTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3eventhourTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3eventhourTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6), )
if mibBuilder.loadTexts: g3eventhourTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourTable.setDescription('A list of g3eventhour entries.')
g3eventhourEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3eventhourEventType"), (0, "G3-AVAYA-MIB", "g3eventhourIndex"))
if mibBuilder.loadTexts: g3eventhourEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourEntry.setDescription('A g3eventhour entry containing objects of the g3eventhour information sent by the switch.')
g3eventhourEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourEventType.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourEventType.setDescription('An INTEGER object containing the event code number for a given denial event.')
g3eventhourIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourIndex.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourIndex.setDescription('An INTEGER object containing an index numbering the event entry for the type specified in EventType. This object along with EventType will serve as the instance identifier for the record entry.')
g3eventhourEventDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourEventDesc.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourEventDesc.setDescription('A DisplayString object containing the denial event description.')
g3eventhourEventData1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourEventData1.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourEventData1.setDescription('A DisplayString object containing the first half of the event data.')
g3eventhourEventData2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourEventData2.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourEventData2.setDescription('A DisplayString object containing the last half of the event data.')
g3eventhourFirstMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourFirstMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourFirstMonth.setDescription('A DisplayString object containing the Month of the first occurrence.')
g3eventhourFirstDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourFirstDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourFirstDay.setDescription('A DisplayString object containing the Day of the first occurrence.')
g3eventhourFirstHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourFirstHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourFirstHour.setDescription('A DisplayString object containing the Hour of the first occurrence.')
g3eventhourFirstMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourFirstMinute.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourFirstMinute.setDescription('A DisplayString object containing the Minute of the first occurrence.')
g3eventhourLastMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourLastMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourLastMonth.setDescription('A DisplayString object containing the Month of the last occurrence.')
g3eventhourLastDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourLastDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourLastDay.setDescription('A DisplayString object containing the Day of the last occurrence.')
g3eventhourLastHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourLastHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourLastHour.setDescription('A DisplayString object containing the Hour of the last occurrence.')
g3eventhourLastMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourLastMinute.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourLastMinute.setDescription('A DisplayString object containing the Minute of the last occurrence.')
g3eventhourEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 128, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventhourEventCount.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventhourEventCount.setDescription('A DisplayString object containing the number of occurrences of the denial event.')
g3eventdayTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayTage.setDescription('The number of timeticks since the last day denial event data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3eventdayTintvl object allows the Network Manager to determine the validity of the event data in the cache and to control when the proxy agent extracts the event data from the switch.')
g3eventdayTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3eventdayTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these event objects is received by the agent it uses the g3eventdayTage and g3eventdayTintvl objects to determine whether it should refresh the cached event data.')
g3eventdayTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3eventdayTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3eventdayTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3eventdayTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3eventdayTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6), )
if mibBuilder.loadTexts: g3eventdayTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayTable.setDescription('A list of g3eventday entries.')
g3eventdayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3eventdayEventType"), (0, "G3-AVAYA-MIB", "g3eventdayIndex"))
if mibBuilder.loadTexts: g3eventdayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayEntry.setDescription('A g3eventday entry containing objects of the g3eventday information sent by the switch.')
g3eventdayEventType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayEventType.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayEventType.setDescription('An INTEGER object containing the event code number for a given denial event.')
g3eventdayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayIndex.setDescription('An INTEGER object containing an index numbering the event entry for the type specified in EventType. This object along with EventType will serve as the instance identifier for the record entry.')
g3eventdayEventDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayEventDesc.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayEventDesc.setDescription('A DisplayString object containing the denial event description.')
g3eventdayEventData1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 9))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayEventData1.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayEventData1.setDescription('A DisplayString object containing the first half of the event data.')
g3eventdayEventData2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayEventData2.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayEventData2.setDescription('A DisplayString object containing the last half of the event data.')
g3eventdayFirstMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayFirstMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayFirstMonth.setDescription('A DisplayString object containing the Month of the first occurrence.')
g3eventdayFirstDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayFirstDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayFirstDay.setDescription('A DisplayString object containing the Day of the first occurrence.')
g3eventdayFirstHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayFirstHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayFirstHour.setDescription('A DisplayString object containing the Hour of the first occurrence.')
g3eventdayFirstMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayFirstMinute.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayFirstMinute.setDescription('A DisplayString object containing the Minute of the first occurrence.')
g3eventdayLastMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayLastMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayLastMonth.setDescription('A DisplayString object containing the Month of the last occurrence.')
g3eventdayLastDay = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayLastDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayLastDay.setDescription('A DisplayString object containing the Day of the last occurrence.')
g3eventdayLastHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayLastHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayLastHour.setDescription('A DisplayString object containing the Hour of the last occurrence.')
g3eventdayLastMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayLastMinute.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayLastMinute.setDescription('A DisplayString object containing the Minute of the last occurrence.')
g3eventdayEventCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 129, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3eventdayEventCount.setStatus('mandatory')
if mibBuilder.loadTexts: g3eventdayEventCount.setDescription('A DisplayString object containing the number of occurrences of the denial event.')
g3statregionTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statregionTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionTage.setDescription('The number of timeticks since the network region status data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3statregionTintvl object allows the Network Manager to determine the validity of the network region status data in the cache and to control when the proxy agent extracts the network region data from the switch.')
g3statregionTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3statregionTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these network region status objects is received by the agent it uses the g3statregionTage and g3statregionTintvl objects to determine whether it should refresh the cached network region status data.')
g3statregionTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statregionTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3statregionTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3statregionTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3statregionTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statregionTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3statregionTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 6), )
if mibBuilder.loadTexts: g3statregionTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionTable.setDescription('A list of g3statregion entries.')
g3statregionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3statregionSourceRegion"), (0, "G3-AVAYA-MIB", "g3statregionDestRegion"))
if mibBuilder.loadTexts: g3statregionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionEntry.setDescription('A g3statregion entry containing objects of the g3statregion information sent by the switch.')
g3statregionSourceRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statregionSourceRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionSourceRegion.setDescription('An INTEGER object containing the IP network region that is the source of the VoIP traffic.')
g3statregionDestRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statregionDestRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionDestRegion.setDescription('An INTEGER object containing the IP network region that is the destination of the VoIP traffic.')
g3statregionConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statregionConnType.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionConnType.setDescription('A DisplayString object containing the type of connection (either direct or indirect).')
g3statregionConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statregionConnStatus.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionConnStatus.setDescription('A DisplayString object containing the status of connection (either pass or fail).')
g3statregionBWLimitValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statregionBWLimitValue.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionBWLimitValue.setDescription('A DisplayString object containing the administered bandwidth value.')
g3statregionBWLimitUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statregionBWLimitUnits.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionBWLimitUnits.setDescription('A DisplayString object containing the administered bandwidth units (Calls, Kbits, Mbits, or NoLimit).')
g3statregionBWUsedTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statregionBWUsedTx.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionBWUsedTx.setDescription('A DisplayString object containing the transmit bandwidth used for direct connections only.')
g3statregionBWUsedRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statregionBWUsedRx.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionBWUsedRx.setDescription('A DisplayString object containing the receive bandwidth used for direct connections only.')
g3statregionNbrConnTx = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statregionNbrConnTx.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionNbrConnTx.setDescription('A DisplayString object containing the transmit connection count for direct connections only.')
g3statregionNbrConnRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statregionNbrConnRx.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionNbrConnRx.setDescription('A DisplayString object containing the receive connection count for direct connections only.')
g3statregionDenialCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 130, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statregionDenialCount.setStatus('mandatory')
if mibBuilder.loadTexts: g3statregionDenialCount.setDescription('A DisplayString object containing the denial count.')
g3ipnetregionTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipnetregionTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionTage.setDescription('The number of timeticks since the network region data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3ipnetregionTintvl object allows the Network Manager to determine the validity of the network region data in the cache and to control when the proxy agent extracts the network region data from the switch.')
g3ipnetregionTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipnetregionTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these network region objects is received by the agent it uses the g3ipnetregionTage and g3ipnetregionTintvl objects to determine whether it should refresh the cached network region data.')
g3ipnetregionTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipnetregionTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3ipnetregionTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipnetregionTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3ipnetregionTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipnetregionTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3ipnetregionTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 6), )
if mibBuilder.loadTexts: g3ipnetregionTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionTable.setDescription('A list of g3ipnetregion entries.')
g3ipnetregionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3ipnetregionRegion"))
if mibBuilder.loadTexts: g3ipnetregionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionEntry.setDescription('A g3ipnetregion entry containing objects of the g3ipnetregion information sent by the switch.')
g3ipnetregionRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 6, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipnetregionRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionRegion.setDescription('An INTEGER object containing the IP network region number (value 1-250).')
g3ipnetregionCCPHB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipnetregionCCPHB.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionCCPHB.setDescription('A DisplayString object containing the DiffServ/TOS Call Control PHB (value 0-63).')
g3ipnetregionAudioPHB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipnetregionAudioPHB.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionAudioPHB.setDescription('A DisplayString object containing the DiffServ/TOS Audio PHB (value 0-63).')
g3ipnetregionCC8021Pri = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 6, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipnetregionCC8021Pri.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionCC8021Pri.setDescription('A DisplayString object containing the Call Control 802.1p Priority (values 0-7).')
g3ipnetregionAudio8021Pri = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipnetregionAudio8021Pri.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionAudio8021Pri.setDescription('A DisplayString object containing the Audio 802.1p Priority (values 0-7).')
g3ipnetregionRSVPEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipnetregionRSVPEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionRSVPEnabled.setDescription('A DisplayString object containing a flag indicating whether RSVP is enabled (y or n).')
g3ipnetregionRSVPRefresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipnetregionRSVPRefresh.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionRSVPRefresh.setDescription('A DisplayString object containing the RSVP Refresh Rate (values 1-99).')
g3ipnetregionRSVPFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipnetregionRSVPFailure.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionRSVPFailure.setDescription('A DisplayString object containing a flag indicating whether retry on RSVP failure is enabled (y or n).')
g3ipnetregionRSVPProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipnetregionRSVPProfile.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionRSVPProfile.setDescription('A DisplayString object containing the RSVP profile (controlled-load or guaranteed-service).')
g3ipnetregionRSVPBBE = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 6, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipnetregionRSVPBBE.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionRSVPBBE.setDescription('A DisplayString object containing the RSVP unreserved BBE PHB (values 0-63).')
g3ipnetregionLastError = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 131, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipnetregionLastError.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipnetregionLastError.setDescription('A DisplayString Object that contains the last error message encountered when attempting to change ip-network-region parameters.')
g3statmedproTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproTage.setDescription('The number of timeticks since the media processor status data was extracted from the switch by the G3 Proxy Agent. This object along with the g3statmedproTintvl object allows the Network Manager to determine the validity of the media processor status data in the cache and to control when the proxy agent extracts the media processor status data from the switch.')
g3statmedproTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3statmedproTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these media processor status objects is received by the agent it uses the g3statmedproTage and g3statmedproTintvl objects to determine whether it should refresh the cached media processor status data.')
g3statmedproTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3statmedproTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3statmedproTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3statmedproTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3statmedproTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6), )
if mibBuilder.loadTexts: g3statmedproTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproTable.setDescription('A list of g3statmedpro entries.')
g3statmedproEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3statmedproBoardLoc"))
if mibBuilder.loadTexts: g3statmedproEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproEntry.setDescription('A g3statmedpro entry containing objects of the g3statmedpro information sent by the switch.')
g3statmedproBoardLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproBoardLoc.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproBoardLoc.setDescription('A DisplayString Object that uniquely identifies a media processor board based on its location in the system.')
g3statmedproState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 25))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproState.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproState.setDescription('A DisplayString Object that contains the link status for the media processor (indicates whether or not an ethernet connection is being detected by the board).')
g3statmedproNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproNodeName.setDescription('A DisplayString Object that contains the node name derived from the field in the IP interfaces data.')
g3statmedproSourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproSourceIP.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproSourceIP.setDescription('A DisplayString Object that contains the source IP address derived from the field in the IP interfaces data.')
g3statmedproSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproSubnetMask.setDescription('A DisplayString Object that contains the subnet mask derived from the field in the IP interfaces data.')
g3statmedproBroadCastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproBroadCastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproBroadCastAddr.setDescription('A DisplayString Object that contains the broadcast IP address derived from the field in the IP interfaces data.')
g3statmedproPhysicalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproPhysicalAddr.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproPhysicalAddr.setDescription('A DisplayString Object that contains the physical address (the ethernet address queried from the board).')
g3statmedproEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproEnabled.setDescription('A DisplayString Object that designates whether or not the IP interface is enabled (yes or no).')
g3statmedproDSPChanStatus1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDSPChanStatus1.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDSPChanStatus1.setDescription('A DisplayString Object that contains the service state of the respective DSP resource.')
g3statmedproDSPChanStatus2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDSPChanStatus2.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDSPChanStatus2.setDescription('See DESCRIPTION of g3statmedproDSPChanStatus1.')
g3statmedproDSPChanStatus3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDSPChanStatus3.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDSPChanStatus3.setDescription('See DESCRIPTION of g3statmedproDSPChanStatus1.')
g3statmedproDSPChanStatus4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDSPChanStatus4.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDSPChanStatus4.setDescription('See DESCRIPTION of g3statmedproDSPChanStatus1.')
g3statmedproDSPChanStatus5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDSPChanStatus5.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDSPChanStatus5.setDescription('A DisplayString Object that contains the service state of the respective DSP resource.')
g3statmedproDSPChanStatus6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDSPChanStatus6.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDSPChanStatus6.setDescription('See DESCRIPTION of g3statmedproDSPChanStatus5.')
g3statmedproDSPChanStatus7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDSPChanStatus7.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDSPChanStatus7.setDescription('See DESCRIPTION of g3statmedproDSPChanStatus5.')
g3statmedproDSPChanStatus8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDSPChanStatus8.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDSPChanStatus8.setDescription('See DESCRIPTION of g3statmedproDSPChanStatus5.')
g3statmedproNetworkRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproNetworkRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproNetworkRegion.setDescription('A DisplayString Object that contains the network region number.')
g3statmedproAltNetworkRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproAltNetworkRegion.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproAltNetworkRegion.setDescription('A DisplayString Object that contains the alternate network region number.')
g3statmedproStandbyRefreshed = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproStandbyRefreshed.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproStandbyRefreshed.setDescription('A DisplayString Object that indicates whether the standby board in a duplicated pair of TN2602AP boards in in sync with the active board (Yes or No).')
g3statmedproSharedIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproSharedIP.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproSharedIP.setDescription('A DisplayString Object that contains the virtual IP address between two duplicated TN2602AP boards).')
g3statmedproSharedVirtMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproSharedVirtMAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproSharedVirtMAC.setDescription('A DisplayString Object that contains the virtual MAC address shared between two duplicated TN2602AP boards).')
g3statmedproDupBoardLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDupBoardLoc.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDupBoardLoc.setDescription('A DisplayString Object that uniquely identifies a duplicate media processor board based on its location in the system.')
g3statmedproDupState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDupState.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDupState.setDescription('A DisplayString Object that contains the link status for the duplicate media processor (indicates whether or not an ethernet connection is being detected by the board).')
g3statmedproDupNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDupNodeName.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDupNodeName.setDescription('A DisplayString Object that contains the duplicate node name derived from the field in the IP interfaces data.')
g3statmedproDupSourceIP = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDupSourceIP.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDupSourceIP.setDescription('A DisplayString Object that contains the duplicate source IP address derived from the field in the IP interfaces data.')
g3statmedproDupSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDupSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDupSubnetMask.setDescription('A DisplayString Object that contains the duplicate subnet mask derived from the field in the IP interfaces data.')
g3statmedproDupBroadCastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDupBroadCastAddr.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDupBroadCastAddr.setDescription('A DisplayString Object that contains the duplicate broadcast IP address derived from the field in the IP interfaces data.')
g3statmedproDupPhysicalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDupPhysicalAddr.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDupPhysicalAddr.setDescription('A DisplayString Object that contains the duplicate physical address (the ethernet address queried from the board).')
g3statmedproDupEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDupEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDupEnabled.setDescription('A DisplayString Object that designates whether or not the IP interface is enabled for the duplicate board (yes or no).')
g3statmedproLinkCCL = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproLinkCCL.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproLinkCCL.setDescription("A DisplayString Object that indicates the status of the Crossfire Control Link ('up' or 'dn'; only applies to TN2602AP boards).")
g3statmedproLinkEth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproLinkEth.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproLinkEth.setDescription("A DisplayString Object that indicates the status of the Ethernet Link ('up' or 'dn').")
g3statmedproLinkPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproLinkPeer.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproLinkPeer.setDescription("A DisplayString Object that indicates the status of the Peer-to-Peer Link ('up' or 'dn'; applies only to duplicated TN2602AP boards).")
g3statmedproAlarmMaj = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproAlarmMaj.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproAlarmMaj.setDescription('A DisplayString Object that indicates the number of major alarms on the media processor board. ')
g3statmedproAlarmMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproAlarmMin.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproAlarmMin.setDescription('A DisplayString Object that indicates the number of minor alarms on the media processor board. ')
g3statmedproAlarmWrn = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproAlarmWrn.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproAlarmWrn.setDescription('A DisplayString Object that indicates the number of warning alarms on the media processor board. ')
g3statmedproDupLinkCCL = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDupLinkCCL.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDupLinkCCL.setDescription("A DisplayString Object that indicates the status of the duplicate Crossfire Control Link ('up' or 'dn'; only applies to TN2602AP boards).")
g3statmedproDupLinkEth = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDupLinkEth.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDupLinkEth.setDescription("A DisplayString Object that indicates the status of the duplicate Ethernet Link ('up' or 'dn').")
g3statmedproDupLinkPeer = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDupLinkPeer.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDupLinkPeer.setDescription("A DisplayString Object that indicates the status of the duplicate Peer-to-Peer Link ('up' or 'dn'; applies only to duplicated TN2602AP boards).")
g3statmedproDupAlarmMaj = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDupAlarmMaj.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDupAlarmMaj.setDescription('A DisplayString Object that indicates the number of major alarms on the duplicate media processor board. ')
g3statmedproDupAlarmMin = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDupAlarmMin.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDupAlarmMin.setDescription('A DisplayString Object that indicates the number of minor alarms on the duplicate media processor board. ')
g3statmedproDupAlarmWrn = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 132, 6, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statmedproDupAlarmWrn.setStatus('mandatory')
if mibBuilder.loadTexts: g3statmedproDupAlarmWrn.setDescription('A DisplayString Object that indicates the number of warning alarms on the duplicate media processor board. ')
g3ipunregTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 133, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipunregTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipunregTage.setDescription('The number of timeticks since the list of unregistered IP phones was last extracted from the switch by the Proxy Agent. This object along with the g3ipunregTintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3ipunregTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 133, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipunregTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipunregTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the data is received by the agent it uses the g3ipunregTage and g3ipunregTintvl objects to determine whether it should refresh the data.')
g3ipunregTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 133, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipunregTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipunregTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3ipunregTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 133, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3ipunregTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipunregTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3ipunregTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 133, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipunregTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipunregTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3ipunregTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 133, 6), )
if mibBuilder.loadTexts: g3ipunregTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipunregTable.setDescription('A list of g3ipunreg entries.')
g3ipunregEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 133, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3ipunregStatExtn"))
if mibBuilder.loadTexts: g3ipunregEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipunregEntry.setDescription('A g3ipunreg entry containing objects of the g3ipunreg information sent by the switch.')
g3ipunregStatExtn = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 133, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipunregStatExtn.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipunregStatExtn.setDescription('An object containing the extension of the unregistered IP telephone.')
g3ipunregStatPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 133, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipunregStatPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipunregStatPort.setDescription('An object containing the port location of the unregistered IP telephone.')
g3ipunregStatReg = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 133, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3ipunregStatReg.setStatus('mandatory')
if mibBuilder.loadTexts: g3ipunregStatReg.setDescription('An object containing the registration status of the IP telephone (y or n).')
g3commlinkTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 134, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3commlinkTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3commlinkTage.setDescription('The number of timeticks since the communication interface link data was last extracted from the switch by the G3 Proxy Agent. This object along with the g3commlinkTintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the proxy agent extracts the data from the switch.')
g3commlinkTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 134, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3commlinkTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3commlinkTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for these objects is received by the agent it uses the g3commlinkTage and g3commlinkTintvl objects to determine whether it should refresh the cached data.')
g3commlinkTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 134, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3commlinkTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3commlinkTdelay.setDescription('An object containing the delay encountered in updating the cached data')
g3commlinkTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 134, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3commlinkTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3commlinkTretrieve.setDescription("An INTEGER object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'. This object may be set to 'update' to force a refresh of the cache.")
g3commlinkTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 134, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3commlinkTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3commlinkTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3commlinkTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 134, 6), )
if mibBuilder.loadTexts: g3commlinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3commlinkTable.setDescription('A list of g3commlink entries.')
g3commlinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 134, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3commlinkLinkNumber"))
if mibBuilder.loadTexts: g3commlinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3commlinkEntry.setDescription('A g3commlink entry containing objects of the g3commlink information sent by the switch.')
g3commlinkLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 134, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3commlinkLinkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3commlinkLinkNumber.setDescription('An object containing the system link number (1-99).')
g3commlinkLinkType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 134, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3commlinkLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: g3commlinkLinkType.setDescription('An object containing the system link type.')
g3statlinkTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 135, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statlinkTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3statlinkTage.setDescription('The number of timeticks since the link status was last extracted from the switch by the Proxy Agent. This object along with the g3statlinkTintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3statlinkTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 135, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3statlinkTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3statlinkTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the data is received by the agent it uses the g3statlinkTage and g3statlinkTintvl objects to determine whether it should refresh the data.')
g3statlinkTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 135, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statlinkTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3statlinkTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3statlinkTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 135, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3statlinkTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3statlinkTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3statlinkTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 135, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statlinkTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3statlinkTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3statlinkTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 135, 6), )
if mibBuilder.loadTexts: g3statlinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3statlinkTable.setDescription('A list of g3statlink entries.')
g3statlinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 135, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3statlinkSysLinkNumber"))
if mibBuilder.loadTexts: g3statlinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3statlinkEntry.setDescription('A g3statlink entry containing objects of the g3statlink information sent by the switch.')
g3statlinkSysLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 135, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statlinkSysLinkNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3statlinkSysLinkNumber.setDescription('An object containing the system link number for the CLAN board.')
g3statlinkCLANBoardLoc = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 135, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statlinkCLANBoardLoc.setStatus('mandatory')
if mibBuilder.loadTexts: g3statlinkCLANBoardLoc.setDescription('An object containing the location of the CLAN board.')
g3statlinkDOLANSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 135, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3statlinkDOLANSessions.setStatus('mandatory')
if mibBuilder.loadTexts: g3statlinkDOLANSessions.setDescription('An object containing the number of current IP registrations through the CLAN board.')
g3covpathTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathTage.setDescription('The number of timeticks since the coverage path data was last extracted from the switch by the Proxy Agent. This object along with the g3covpathTintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3covpathTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3covpathTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the data is received by the agent it uses the g3covpathTage and g3covpathTintvl objects to determine whether it should refresh the data.')
g3covpathTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3covpathTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3covpathTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3covpathTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3covpathTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6), )
if mibBuilder.loadTexts: g3covpathTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathTable.setDescription('A list of g3covpath entries.')
g3covpathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3covpathCoveragePath"))
if mibBuilder.loadTexts: g3covpathEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathEntry.setDescription('A g3covpath entry containing objects of the g3covpath information sent by the switch.')
g3covpathCoveragePath = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathCoveragePath.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathCoveragePath.setDescription('An object containing the measured coverage path.')
g3covpathMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathMeasHour.setDescription('An object containing the starting time of the hour during which the greatest number of calls are offered to the coverage path.')
g3covpathCallsOffTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathCallsOffTotal.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathCallsOffTotal.setDescription('An object containing the number of calls offered to the coverage path.')
g3covpathCallsOffAct = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathCallsOffAct.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathCallsOffAct.setDescription('An object containing the number of calls offered to the coverage path due to the principal being active.')
g3covpathCallsOffBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathCallsOffBusy.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathCallsOffBusy.setDescription('An object containing the number of calls offered to the coverage path due to the principal being busy.')
g3covpathCallsOffDA = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathCallsOffDA.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathCallsOffDA.setDescription('An object containing the number of calls offered to the coverage path because the principal did not answer the call after the administered number of rings.')
g3covpathCallsOffCA = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathCallsOffCA.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathCallsOffCA.setDescription("An object containing the number of calls offered to the coverage path due to the principal's use of Cover All.")
g3covpathCallsOffSAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathCallsOffSAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathCallsOffSAC.setDescription("An object containing the number of calls offered to the coverage path due to the principal's use of Send All Calls or the calling party using Go To Coverage.")
g3covpathCallsOffCB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathCallsOffCB.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathCallsOffCB.setDescription('An object containing the number of calls offered to the coverage path where the calling party used LWC or ACB before a coverage point answered the call.')
g3covpathPoint1Ans = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathPoint1Ans.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathPoint1Ans.setDescription('An object containing the total number of calls answered by the specified point.')
g3covpathPoint2Ans = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathPoint2Ans.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathPoint2Ans.setDescription('An object containing the total number of calls answered by the specified point.')
g3covpathPoint3Ans = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathPoint3Ans.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathPoint3Ans.setDescription('An object containing the total number of calls answered by the specified point.')
g3covpathPoint4Ans = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathPoint4Ans.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathPoint4Ans.setDescription('An object containing the total number of calls answered by the specified point.')
g3covpathPoint5Ans = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathPoint5Ans.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathPoint5Ans.setDescription('An object containing the total number of calls answered by the specified point.')
g3covpathPoint6Ans = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathPoint6Ans.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathPoint6Ans.setDescription('An object containing the total number of calls answered by the specified point.')
g3covpathPoint1Aband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathPoint1Aband.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathPoint1Aband.setDescription('An object containing the total number of calls abandoned by the caller while ringing at the specified point.')
g3covpathPoint2Aband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathPoint2Aband.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathPoint2Aband.setDescription('An object containing the total number of calls abandoned by the caller while ringing at the specified point.')
g3covpathPoint3Aband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathPoint3Aband.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathPoint3Aband.setDescription('An object containing the total number of calls abandoned by the caller while ringing at the specified point.')
g3covpathPoint4Aband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathPoint4Aband.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathPoint4Aband.setDescription('An object containing the total number of calls abandoned by the caller while ringing at the specified point.')
g3covpathPoint5Aband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathPoint5Aband.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathPoint5Aband.setDescription('An object containing the total number of calls abandoned by the caller while ringing at the specified point.')
g3covpathPoint6Aband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 136, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3covpathPoint6Aband.setStatus('mandatory')
if mibBuilder.loadTexts: g3covpathPoint6Aband.setDescription('An object containing the total number of calls abandoned by the caller while ringing at the specified point.')
g3pkcovpathTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathTage.setDescription('The number of timeticks since the coverage path data was last extracted from the switch by the Proxy Agent. This object along with the g3pkcovpathTintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkcovpathTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkcovpathTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the data is received by the agent it uses the g3pkcovpathTage and g3pkcovpathTintvl objects to determine whether it should refresh the data.')
g3pkcovpathTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkcovpathTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkcovpathTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3pkcovpathTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkcovpathTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6), )
if mibBuilder.loadTexts: g3pkcovpathTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathTable.setDescription('A list of g3pkcovpath entries.')
g3pkcovpathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkcovpathCoveragePath"))
if mibBuilder.loadTexts: g3pkcovpathEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathEntry.setDescription('A g3pkcovpath entry containing objects of the g3pkcovpath information sent by the switch.')
g3pkcovpathCoveragePath = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathCoveragePath.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathCoveragePath.setDescription('An object containing the measured coverage path.')
g3pkcovpathMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathMeasHour.setDescription('An object containing the starting time of the hour during which the greatest number of calls are offered to the coverage path.')
g3pkcovpathCallsOffTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathCallsOffTotal.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathCallsOffTotal.setDescription('An object containing the number of calls offered to the coverage path.')
g3pkcovpathCallsOffAct = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathCallsOffAct.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathCallsOffAct.setDescription('An object containing the number of calls offered to the coverage path due to the principal being active.')
g3pkcovpathCallsOffBusy = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathCallsOffBusy.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathCallsOffBusy.setDescription('An object containing the number of calls offered to the coverage path due to the principal being busy.')
g3pkcovpathCallsOffDA = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathCallsOffDA.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathCallsOffDA.setDescription('An object containing the number of calls offered to the coverage path because the principal did not answer the call after the administered number of rings.')
g3pkcovpathCallsOffCA = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathCallsOffCA.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathCallsOffCA.setDescription("An object containing the number of calls offered to the coverage path due to the principal's use of Cover All.")
g3pkcovpathCallsOffSAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathCallsOffSAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathCallsOffSAC.setDescription("An object containing the number of calls offered to the coverage path due to the principal's use of Send All Calls or the calling party using Go To Coverage.")
g3pkcovpathCallsOffCB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathCallsOffCB.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathCallsOffCB.setDescription('An object containing the number of calls offered to the coverage path where the calling party used LWC or ACB before a coverage point answered the call.')
g3pkcovpathPoint1Ans = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathPoint1Ans.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathPoint1Ans.setDescription('An object containing the total number of calls answered by the specified point.')
g3pkcovpathPoint2Ans = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathPoint2Ans.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathPoint2Ans.setDescription('An object containing the total number of calls answered by the specified point.')
g3pkcovpathPoint3Ans = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathPoint3Ans.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathPoint3Ans.setDescription('An object containing the total number of calls answered by the specified point.')
g3pkcovpathPoint4Ans = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathPoint4Ans.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathPoint4Ans.setDescription('An object containing the total number of calls answered by the specified point.')
g3pkcovpathPoint5Ans = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathPoint5Ans.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathPoint5Ans.setDescription('An object containing the total number of calls answered by the specified point.')
g3pkcovpathPoint6Ans = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathPoint6Ans.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathPoint6Ans.setDescription('An object containing the total number of calls answered by the specified point.')
g3pkcovpathPoint1Aband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathPoint1Aband.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathPoint1Aband.setDescription('An object containing the total number of calls abandoned by the caller while ringing at the specified point.')
g3pkcovpathPoint2Aband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathPoint2Aband.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathPoint2Aband.setDescription('An object containing the total number of calls abandoned by the caller while ringing at the specified point.')
g3pkcovpathPoint3Aband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathPoint3Aband.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathPoint3Aband.setDescription('An object containing the total number of calls abandoned by the caller while ringing at the specified point.')
g3pkcovpathPoint4Aband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathPoint4Aband.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathPoint4Aband.setDescription('An object containing the total number of calls abandoned by the caller while ringing at the specified point.')
g3pkcovpathPoint5Aband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathPoint5Aband.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathPoint5Aband.setDescription('An object containing the total number of calls abandoned by the caller while ringing at the specified point.')
g3pkcovpathPoint6Aband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 137, 6, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkcovpathPoint6Aband.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkcovpathPoint6Aband.setDescription('An object containing the total number of calls abandoned by the caller while ringing at the specified point.')
g3principalTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalTage.setDescription('The number of timeticks since the coverage path data was last extracted from the switch by the Proxy Agent. This object along with the g3principalTintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3principalTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3principalTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the data is received by the agent it uses the g3principalTage and g3principalTintvl objects to determine whether it should refresh the data.')
g3principalTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3principalTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3principalTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3principalTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3principalTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6), )
if mibBuilder.loadTexts: g3principalTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalTable.setDescription('A list of g3principal entries.')
g3principalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3principalExtensionTAC"))
if mibBuilder.loadTexts: g3principalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalEntry.setDescription('A g3principal entry containing objects of the g3principal information sent by the switch.')
g3principalExtensionTAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalExtensionTAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalExtensionTAC.setDescription('An object containing the measured coverage path.')
g3principalMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalMeasHour.setDescription('An object containing the starting time of the hour during which the greatest number of calls are offered to the principal.')
g3principalCallsOffTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCallsOffTotal.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCallsOffTotal.setDescription('An object containing the number of calls offered to the principal. path.')
g3principalCallsAband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCallsAband.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCallsAband.setDescription('An object containing the total number of abandoned calls, where the calling party hung up before the call was answered or sent to coverage.')
g3principalCallsRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCallsRedirect.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCallsRedirect.setDescription('An object containing the total number of calls not answered by the principal and subsequently sent to coverage.')
g3principalCallsCAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCallsCAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCallsCAC.setDescription('An object containing the number of calls sent to coverage by this principal due to the principal being active.')
g3principalCallsCBC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCallsCBC.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCallsCBC.setDescription('An object containing the number of calls to coverage by this principal due to the principal being busy.')
g3principalCallsCDAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCallsCDAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCallsCDAC.setDescription("An object containing the number of calls sent to coverage by this principal because the principal didn't answer the call after the administered number of rings.")
g3principalCallsCCAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCallsCCAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCallsCCAC.setDescription("An object containing the number of calls sent to coverage by this principal due to the principal's use of Cover All.")
g3principalCallsCSAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCallsCSAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCallsCSAC.setDescription("An object containing the number of calls sent to coverage by this principal due to the principal's use of Send All Calls, or because the calling party used the Go To Cover feature.")
g3principalCallsCSCB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCallsCSCB.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCallsCSCB.setDescription('An object containing the number of calls offered to this principal where the calling party used LWC or ACB before the principal answered the call and before it went to coverage.')
g3principalCovPath1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCovPath1.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCovPath1.setDescription('An object containing a coverage path used by this principal.')
g3principalCovPath2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCovPath2.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCovPath2.setDescription('An object containing a coverage path used by this principal.')
g3principalCovPath3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCovPath3.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCovPath3.setDescription('An object containing a coverage path used by this principal.')
g3principalCovPath4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCovPath4.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCovPath4.setDescription('An object containing a coverage path used by this principal.')
g3principalCovPath5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCovPath5.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCovPath5.setDescription('An object containing a coverage path used by this principal.')
g3principalCovPath6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCovPath6.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCovPath6.setDescription('An object containing a coverage path used by this principal.')
g3principalCovPath7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCovPath7.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCovPath7.setDescription('An object containing a coverage path used by this principal.')
g3principalCovPath8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 138, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3principalCovPath8.setStatus('mandatory')
if mibBuilder.loadTexts: g3principalCovPath8.setDescription('An object containing a coverage path used by this principal.')
g3pkprincipalTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalTage.setDescription('The number of timeticks since the coverage path data was last extracted from the switch by the Proxy Agent. This object along with the g3principalTintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3pkprincipalTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkprincipalTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the data is received by the agent it uses the g3principalTage and g3principalTintvl objects to determine whether it should refresh the data.')
g3pkprincipalTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3pkprincipalTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3pkprincipalTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3pkprincipalTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3pkprincipalTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6), )
if mibBuilder.loadTexts: g3pkprincipalTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalTable.setDescription('A list of g3pkprincipal entries.')
g3pkprincipalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3pkprincipalExtensionTAC"))
if mibBuilder.loadTexts: g3pkprincipalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalEntry.setDescription('A g3pkprincipal entry containing objects of the g3pkprincipal information sent by the switch.')
g3pkprincipalExtensionTAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalExtensionTAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalExtensionTAC.setDescription('An object containing the measured coverage path.')
g3pkprincipalMeasHour = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalMeasHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalMeasHour.setDescription('An object containing the starting time of the hour during which the greatest number of calls are offered to the principal.')
g3pkprincipalCallsOffTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCallsOffTotal.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCallsOffTotal.setDescription('An object containing the number of calls offered to the principal. path.')
g3pkprincipalCallsAband = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCallsAband.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCallsAband.setDescription('An object containing the total number of abandoned calls, where the calling party hung up before the call was answered or sent to coverage.')
g3pkprincipalCallsRedirect = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCallsRedirect.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCallsRedirect.setDescription('An object containing the total number of calls not answered by the principal and subsequently sent to coverage.')
g3pkprincipalCallsCAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCallsCAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCallsCAC.setDescription('An object containing the number of calls sent to coverage by this principal due to the principal being active.')
g3pkprincipalCallsCBC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCallsCBC.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCallsCBC.setDescription('An object containing the number of calls to coverage by this principal due to the principal being busy.')
g3pkprincipalCallsCDAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCallsCDAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCallsCDAC.setDescription("An object containing the number of calls sent to coverage by this principal because the principal didn't answer the call after the administered number of rings.")
g3pkprincipalCallsCCAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCallsCCAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCallsCCAC.setDescription("An object containing the number of calls sent to coverage by this principal due to the principal's use of Cover All.")
g3pkprincipalCallsCSAC = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCallsCSAC.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCallsCSAC.setDescription("An object containing the number of calls sent to coverage by this principal due to the principal's use of Send All Calls, or because the calling party used the Go To Cover feature.")
g3pkprincipalCallsCSCB = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCallsCSCB.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCallsCSCB.setDescription('An object containing the number of calls offered to this principal where the calling party used LWC or ACB before the principal answered the call and before it went to coverage.')
g3pkprincipalCovPath1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCovPath1.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCovPath1.setDescription('An object containing a coverage path used by this principal.')
g3pkprincipalCovPath2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCovPath2.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCovPath2.setDescription('An object containing a coverage path used by this principal.')
g3pkprincipalCovPath3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCovPath3.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCovPath3.setDescription('An object containing a coverage path used by this principal.')
g3pkprincipalCovPath4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCovPath4.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCovPath4.setDescription('An object containing a coverage path used by this principal.')
g3pkprincipalCovPath5 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCovPath5.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCovPath5.setDescription('An object containing a coverage path used by this principal.')
g3pkprincipalCovPath6 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCovPath6.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCovPath6.setDescription('An object containing a coverage path used by this principal.')
g3pkprincipalCovPath7 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCovPath7.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCovPath7.setDescription('An object containing a coverage path used by this principal.')
g3pkprincipalCovPath8 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 139, 6, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3pkprincipalCovPath8.setStatus('mandatory')
if mibBuilder.loadTexts: g3pkprincipalCovPath8.setDescription('An object containing a coverage path used by this principal.')
g3esmainTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainTage.setDescription('The number of timeticks since the coverage path data was last extracted from the switch by the Proxy Agent. This object along with the g3esmainTintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3esmainTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3esmainTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the data is received by the agent it uses the g3esmainTage and g3esmainTintvl objects to determine whether it should refresh the data.')
g3esmainTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3esmainTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3esmainTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3esmainTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3esmainTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6), )
if mibBuilder.loadTexts: g3esmainTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainTable.setDescription('A list of g3esmain entries.')
g3esmainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3esmainClusterId"))
if mibBuilder.loadTexts: g3esmainEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainEntry.setDescription('A g3esmain entry containing objects of the g3esmain information sent by the switch.')
g3esmainClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainClusterId.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainClusterId.setDescription('An object containing the unique module id, for the main server, from the license file for this cluster.')
g3esmainPlatformType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainPlatformType.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainPlatformType.setDescription('An object containing the platform type (S8500 or S8700).')
g3esmainServerAId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainServerAId.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainServerAId.setDescription('An object containing the Server A id field. Acceptable values are 1-999 and it must be unique.')
g3esmainServerAIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainServerAIP1.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainServerAIP1.setDescription('An object containing the first part of the IP Address for Server A.')
g3esmainServerAIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainServerAIP2.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainServerAIP2.setDescription('An object containing the second part of the IP Address for Server A.')
g3esmainServerAIP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainServerAIP3.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainServerAIP3.setDescription('An object containing the third part of the IP Address for Server A.')
g3esmainServerAIP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainServerAIP4.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainServerAIP4.setDescription('An object containing the last part of the IP Address for Server A.')
g3esmainServerBId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainServerBId.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainServerBId.setDescription('An object containing the Server B id field. Acceptable values are 1-999 and it must be unique (only available if the platform type is S8700).')
g3esmainServerBIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainServerBIP1.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainServerBIP1.setDescription('An object containing the first part of the IP Address for Server B.')
g3esmainServerBIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainServerBIP2.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainServerBIP2.setDescription('An object containing the second part of the IP Address for Server B.')
g3esmainServerBIP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainServerBIP3.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainServerBIP3.setDescription('An object containing the third part of the IP Address for Server B.')
g3esmainServerBIP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainServerBIP4.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainServerBIP4.setDescription('An object containing the last part of the IP Address for Server B.')
g3esmainPriorityScore = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainPriorityScore.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainPriorityScore.setDescription('An object containing a numerical value that allows the customer to assign a preferred cluster (can accept values of 1-100; default is blank).')
g3esmainNetComm = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainNetComm.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainNetComm.setDescription('An object containing the region the ESS cluster is in (used for localization; can have values between 1-64; default is 1).')
g3esmainSystemPref = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainSystemPref.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainSystemPref.setDescription("An object containing a flag that provides the cluster with a weighting factor that makes it a candidate to provide service on a system-wide basis (values can be 'y' or 'n'; default is 'y').")
g3esmainLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainLocalPref.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainLocalPref.setDescription("An object containing a flag that provides the cluster with a weighting factor that makes it a candidate to provide service in the same network community before clusters in other network communities would be selected (values can be 'y' or 'n'; default is 'n').")
g3esmainLocalOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 140, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esmainLocalOnly.setStatus('mandatory')
if mibBuilder.loadTexts: g3esmainLocalOnly.setDescription("An object containing a flag indicating that only clusters in the same network community can provide service (values can be 'y' or 'n'; default is 'n').")
g3esserversTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversTage.setDescription('The number of timeticks since the coverage path data was last extracted from the switch by the Proxy Agent. This object along with the g3esserversTintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3esserversTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3esserversTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the data is received by the agent it uses the g3esserversTage and g3esserversTintvl objects to determine whether it should refresh the data.')
g3esserversTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3esserversTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3esserversTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3esserversTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3esserversTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6), )
if mibBuilder.loadTexts: g3esserversTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversTable.setDescription('A list of g3esservers entries.')
g3esserversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3esserversClusterId"))
if mibBuilder.loadTexts: g3esserversEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversEntry.setDescription('A g3esservers entry containing objects of the g3esservers information sent by the switch.')
g3esserversClusterId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversClusterId.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversClusterId.setDescription('An object containing the unique module id, for the enterprise survivable server, from the license file for this cluster.')
g3esserversPlatformType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversPlatformType.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversPlatformType.setDescription('An object containing the platform type (S8500 or S8700).')
g3esserversServerAId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversServerAId.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversServerAId.setDescription('An object containing the Server A id field. Acceptable values are 1-999 and it must be unique.')
g3esserversServerAIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversServerAIP1.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversServerAIP1.setDescription('An object containing the first part of the IP Address for Server A.')
g3esserversServerAIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversServerAIP2.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversServerAIP2.setDescription('An object containing the second part of the IP Address for Server A.')
g3esserversServerAIP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversServerAIP3.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversServerAIP3.setDescription('An object containing the third part of the IP Address for Server A.')
g3esserversServerAIP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversServerAIP4.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversServerAIP4.setDescription('An object containing the last part of the IP Address for Server A.')
g3esserversServerBId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversServerBId.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversServerBId.setDescription('An object containing the Server B id field. Acceptable values are 1-999 and it must be unique (only available if the platform type is S8700).')
g3esserversServerBIP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversServerBIP1.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversServerBIP1.setDescription('An object containing the first part of the IP Address for Server B.')
g3esserversServerBIP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversServerBIP2.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversServerBIP2.setDescription('An object containing the second part of the IP Address for Server B.')
g3esserversServerBIP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversServerBIP3.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversServerBIP3.setDescription('An object containing the third part of the IP Address for Server B.')
g3esserversServerBIP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversServerBIP4.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversServerBIP4.setDescription('An object containing the last part of the IP Address for Server B.')
g3esserversPriorityScore = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversPriorityScore.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversPriorityScore.setDescription('An object containing a numerical value that allows the customer to assign a preferred cluster (can accept values of 1-100; default is blank).')
g3esserversNetComm = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversNetComm.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversNetComm.setDescription('An object containing the region the ESS cluster is in (used for localization; can have values between 1-64; default is 1).')
g3esserversSystemPref = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversSystemPref.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversSystemPref.setDescription("An object containing a flag that provides the cluster with a weighting factor that makes it a candidate to provide service on a system-wide basis (values can be 'y' or 'n'; default is 'y').")
g3esserversLocalPref = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversLocalPref.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversLocalPref.setDescription("An object containing a flag that provides the cluster with a weighting factor that makes it a candidate to provide service in the same network community before clusters in other network communities would be selected (values can be 'y' or 'n'; default is 'n').")
g3esserversLocalOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 141, 6, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esserversLocalOnly.setStatus('mandatory')
if mibBuilder.loadTexts: g3esserversLocalOnly.setDescription("An object containing a flag indicating that only clusters in the same network community can provide service (values can be 'y' or 'n'; default is 'n').")
g3esparmsTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsTage.setDescription('The number of timeticks since the coverage path data was last extracted from the switch by the Proxy Agent. This object along with the g3esparmsTintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3esparmsTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3esparmsTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the data is received by the agent it uses the g3esparmsTage and g3esparmsTintvl objects to determine whether it should refresh the data.')
g3esparmsTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3esparmsTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3esparmsTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3esparmsTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3esparmsNetCommunity1 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity1.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity1.setDescription('An object containing a network community value for the corresponding port network (can have values between 1-64; default is 1).')
g3esparmsNetCommunity2 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity2.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity2.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity3 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity3.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity3.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity4 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity4.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity4.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity5 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity5.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity5.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity6 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity6.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity6.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity7 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity7.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity7.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity8 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity8.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity8.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity9 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity9.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity9.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity10 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity10.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity10.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity11 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity11.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity11.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity12 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity12.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity12.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity13 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity13.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity13.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity14 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity14.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity14.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity15 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity15.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity15.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity16 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity16.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity16.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity17 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity17.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity17.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity18 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity18.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity18.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity19 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity19.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity19.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity20 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity20.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity20.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity21 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity21.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity21.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity22 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 27), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity22.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity22.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity23 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity23.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity23.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity24 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity24.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity24.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity25 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity25.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity25.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity26 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity26.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity26.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity27 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity27.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity27.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity28 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity28.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity28.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity29 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity29.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity29.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity30 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity30.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity30.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity31 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 36), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity31.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity31.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity32 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 37), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity32.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity32.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity33 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity33.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity33.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity34 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 39), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity34.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity34.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity35 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity35.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity35.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity36 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity36.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity36.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity37 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity37.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity37.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity38 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity38.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity38.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity39 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity39.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity39.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity40 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 45), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity40.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity40.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity41 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 46), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity41.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity41.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity42 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 47), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity42.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity42.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity43 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 48), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity43.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity43.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity44 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 49), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity44.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity44.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity45 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity45.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity45.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity46 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity46.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity46.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity47 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity47.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity47.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity48 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity48.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity48.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity49 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity49.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity49.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity50 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 55), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity50.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity50.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity51 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 56), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity51.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity51.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity52 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 57), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity52.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity52.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity53 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity53.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity53.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity54 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 59), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity54.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity54.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity55 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity55.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity55.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity56 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity56.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity56.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity57 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 62), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity57.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity57.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity58 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 63), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity58.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity58.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity59 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 64), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity59.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity59.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity60 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 65), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity60.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity60.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity61 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 66), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity61.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity61.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity62 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 67), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity62.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity62.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity63 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 68), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity63.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity63.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsNetCommunity64 = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 69), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNetCommunity64.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNetCommunity64.setDescription('See DESCRIPTION of g3esparmsNetCommunity1.')
g3esparmsAutoReturn = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 70), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsAutoReturn.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsAutoReturn.setDescription("An object containing the state of auto return (values can be 'y' (yes), 'n' (no), or 's' (scheduled); default is 'n').")
g3esparmsDay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 71), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsDay.setDescription('An object containing the day of the week Saturday through Sunday (or every day) on which the auto return will occur (only applicable if AutoReturn is set to scheduled).')
g3esparmsHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 72), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsHour.setDescription('An object containing the hour of the day (0-23) at which the auto return will occur (only applicable if AutoReturn is set to scheduled).')
g3esparmsMinute = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 73), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsMinute.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsMinute.setDescription('An object containing the minute of the hour (0-59) at which the auto return will occur (only applicable if AutoReturn is set to scheduled).')
g3esparmsNoServerTO = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 142, 74), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3esparmsNoServerTO.setStatus('mandatory')
if mibBuilder.loadTexts: g3esparmsNoServerTO.setDescription('An object containing a no service timeout interval indicating when the fail over will occur (can have values between 3-15 minutes; default is 5 minutes).')
g3mgrecruleTage = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 143, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mgrecruleTage.setStatus('mandatory')
if mibBuilder.loadTexts: g3mgrecruleTage.setDescription('The number of timeticks since the coverage path data was last extracted from the switch by the Proxy Agent. This object along with the g3mgrecruleTintvl object allows the Network Manager to determine the validity of the data in the cache and to control when the Proxy Agent extracts the data from the switch.')
g3mgrecruleTintvl = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 143, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3mgrecruleTintvl.setStatus('mandatory')
if mibBuilder.loadTexts: g3mgrecruleTintvl.setDescription('An object containing the interval for which the data extracted from the switch is considered valid by the Proxy Agent. When a GET or GET-NEXT request for the data is received by the agent it uses the g3mgrecruleTage and g3mgrecruleTintvl objects to determine whether it should refresh the data.')
g3mgrecruleTdelay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 143, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mgrecruleTdelay.setStatus('mandatory')
if mibBuilder.loadTexts: g3mgrecruleTdelay.setDescription('An object containing the delay encountered in updating the cached data.')
g3mgrecruleTretrieve = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 143, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("failed", 1), ("update", 2), ("current", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3mgrecruleTretrieve.setStatus('mandatory')
if mibBuilder.loadTexts: g3mgrecruleTretrieve.setDescription("An object containing a flag that is 'update' if the cached data is being retrieved and otherwise 'current'.This object may be set to 'update' to force a refresh of the cache.")
g3mgrecruleTcount = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 143, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mgrecruleTcount.setStatus('mandatory')
if mibBuilder.loadTexts: g3mgrecruleTcount.setDescription('A Gauge object containing the number of data records in the cache.')
g3mgrecruleTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 143, 6), )
if mibBuilder.loadTexts: g3mgrecruleTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3mgrecruleTable.setDescription('A list of g3mgrecrule entries.')
g3mgrecruleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 143, 6, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3mgrecruleGatewayNbr"))
if mibBuilder.loadTexts: g3mgrecruleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3mgrecruleEntry.setDescription('A g3mgrecrule entry containing objects of the g3mgrecrule information sent by the switch.')
g3mgrecruleGatewayNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 143, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mgrecruleGatewayNbr.setStatus('mandatory')
if mibBuilder.loadTexts: g3mgrecruleGatewayNbr.setDescription('An object containing the media gateway number (1-250).')
g3mgrecruleGatewayName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 143, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mgrecruleGatewayName.setStatus('mandatory')
if mibBuilder.loadTexts: g3mgrecruleGatewayName.setDescription('An object containing the name of the media gateway.')
g3mgrecruleRecRule = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 143, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3mgrecruleRecRule.setStatus('mandatory')
if mibBuilder.loadTexts: g3mgrecruleRecRule.setDescription("An object containing the recovery rule type that has been selected for the media gateway (possible values are 'immediately', '0-active-calls', 'time-day-window', or 'time-window-OR-0-active-calls'.")
g3busyrlsAction = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 250, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("busyout", 1), ("release", 2), ("campon-busyout", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3busyrlsAction.setStatus('mandatory')
if mibBuilder.loadTexts: g3busyrlsAction.setDescription('The last action performed on a specified object. This field must be set in conjunction with the g3busyrlsObject field.')
g3busyrlsObject = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 250, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("trunk", 1), ("board", 2), ("media-processor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3busyrlsObject.setStatus('mandatory')
if mibBuilder.loadTexts: g3busyrlsObject.setDescription("The object associated with the last action. This field must be set in conjunction with the g3busyrlsTrunkGroup, g3busyrlsTrunkMember, g3busyrlsBoard, and g3busyrlsPort fields. This field can only be set to 'media-processor' if g3busyrlsAction is either 'campon-busyout' or 'release'.")
g3busyrlsTrunkGroup = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 250, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3busyrlsTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3busyrlsTrunkGroup.setDescription("The trunk group number associated with the g3busyrlsObject field. This field is only applicable if the g3busyrlsObject field is set to 'trunk'.")
g3busyrlsTrunkMember = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 250, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3busyrlsTrunkMember.setStatus('mandatory')
if mibBuilder.loadTexts: g3busyrlsTrunkMember.setDescription("The trunk group member associated with the g3busyrlsObject field. This field is only applicable if the g3busyrlsObject field is set to 'trunk'. This field either contains a trunk member number (1-255) or a '0' if an entire trunk group (all members) is to be operated on by the last action.")
g3busyrlsBoard = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 250, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3busyrlsBoard.setStatus('mandatory')
if mibBuilder.loadTexts: g3busyrlsBoard.setDescription("A DisplayString that uniquely identifies a board location (cabinet(01-22):carrier(A-E):slot(01-20)) associated with the g3busyrlsObject field. This field is only applicable if the g3busyrlsObject field is set to 'board' or 'media-processor'.")
g3busyrlsPort = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 1, 250, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3busyrlsPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3busyrlsPort.setDescription("The port location associated with the g3busyrlsObject field. This field is only applicable if the g3busyrlsObject field is set to 'board'. This field either contains a port location number (1-24) or a '0' if an entire board (all ports on the board) are to be operated on by the last action.")
g3clientTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1), )
if mibBuilder.loadTexts: g3clientTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientTable.setDescription('A list of g3client entries.')
g3clientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3clientTableIndex"))
if mibBuilder.loadTexts: g3clientEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientEntry.setDescription('A g3client entry containing objects of the g3client information for the G3 Proxy Agent.')
g3clientCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientCommunity.setDescription('A DisplayString Object containing the Community substring for a G3 client.')
g3clientCustomerId = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientCustomerId.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientCustomerId.setDescription('A DisplayString Object containing the Customer ID for a G3 client.')
g3clientDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientDescription.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientDescription.setDescription('A DisplayString Object containing the Description for a G3 client.')
g3clientExternalName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientExternalName.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientExternalName.setDescription('A DisplayString Object containing the External Name for a G3 client.')
g3clientConnectStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientConnectStatus.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientConnectStatus.setDescription('A DisplayString Object containing the Connection Status for a G3 client.')
g3clientSubmapType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientSubmapType.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientSubmapType.setDescription("The type of submap on which the managed node icon is to be placed on the NMS ('generic' = '0', 'usa' = '1', and 'custom' = '2').")
g3clientState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientState.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientState.setDescription("An INTEGER object containing a numeric value representing the state in which to place the managed node icon on the NMS if the g3connectSubmapType is set to 'usa' ('Alabama' = '0', 'Alaska' = 1, . . . 'Wyoming' = 49).")
g3clientSubmapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientSubmapName.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientSubmapName.setDescription("A DisplayString Object containing the submap name in which to place the managed node icon on the NMS if g3clientSubmapType is set to 'custom'.")
g3clientConnectType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientConnectType.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientConnectType.setDescription('A DisplayString Object containing the Connection Type for a G3 client.')
g3clientDynamicTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientDynamicTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientDynamicTimeout.setDescription('An INTEGER object containing the number of idle minutes to wait before a dynamic connection is dropped.')
g3clientEnumType = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("generic", 1), ("usa", 2), ("custom", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientEnumType.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientEnumType.setDescription('The enumerated type of submap on which the managed node icon is to be placed on the NMS.')
g3clientEnumState = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50))).clone(namedValues=NamedValues(("alabama", 1), ("alaska", 2), ("arizona", 3), ("arkansas", 4), ("california", 5), ("colorado", 6), ("connecticut", 7), ("delaware", 8), ("florida", 9), ("georgia", 10), ("hawaii", 11), ("idaho", 12), ("illinois", 13), ("indiana", 14), ("iowa", 15), ("kansas", 16), ("kentucky", 17), ("louisiana", 18), ("maine", 19), ("maryland", 20), ("massachusetts", 21), ("michigan", 22), ("minnesota", 23), ("mississippi", 24), ("missouri", 25), ("montana", 26), ("nebraska", 27), ("nevada", 28), ("new-hampshire", 29), ("new-jersey", 30), ("new-mexico", 31), ("new-york", 32), ("north-carolina", 33), ("north-dakota", 34), ("ohio", 35), ("oklahoma", 36), ("oregon", 37), ("pennsylvania", 38), ("rhode-island", 39), ("south-carolina", 40), ("south-dakota", 41), ("tennessee", 42), ("texas", 43), ("utah", 44), ("vermont", 45), ("virginia", 46), ("washington", 47), ("west-virginia", 48), ("wisconsin", 49), ("wyoming", 50)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientEnumState.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientEnumState.setDescription("An INTEGER object containing an enumerated value of the state in which to place the managed node icon on the NMS if the g3connectEnumType is set to 'usa'.")
g3clientDialString1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientDialString1.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientDialString1.setDescription('A DisplayString Object containing the first dial string administered for the managed node.')
g3clientDialString2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientDialString2.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientDialString2.setDescription('A DisplayString Object containing the second dial string administered for the managed node.')
g3clientProductID = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3clientProductID.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientProductID.setDescription('A DisplayString Object containing the product ID of the managed node.')
g3clientTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 1, 1, 1, 16), Integer32())
if mibBuilder.loadTexts: g3clientTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: g3clientTableIndex.setDescription('An INTEGER object containing an index numbering the G3 client entry.')
g3agentSubmapType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentSubmapType.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentSubmapType.setDescription("A DisplayString object containing a value that indicates the default type of submap used in administering managed node locations ('generic', 'usa', or 'custom').")
g3agentState = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentState.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentState.setDescription("A DisplayString object containing a value that indicates the default state used in administering managed node locations if the g3agentSubmapType field is set to 'usa'.")
g3agentSubmapName = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentSubmapName.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentSubmapName.setDescription("A DisplayString Object that contains the default Submap Name used in administering managed node locations if the g3agentSubmapType field is set to 'custom'.")
g3agentRelease = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentRelease.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentRelease.setDescription('A DisplayString object containing the release of the Proxy Agent.')
g3agentDomainName = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentDomainName.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentDomainName.setDescription('A DisplayString object containing the Domain Name of the Proxy Agent.')
g3agentSnmpPolling = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentSnmpPolling.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentSnmpPolling.setDescription('This field identifies whether or not the Proxy Agent is configured to connect to and poll G3, ECS, and MCU node types for data. The value of this field is determined at installation time or set by services personnel in the field. If this field is on, by default the g3agentSnmpTraps field is also turned on. If it is turned off, g3agentSnmpTraps can either be turned on or off.')
g3agentSnmpTraps = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentSnmpTraps.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentSnmpTraps.setDescription('This field identifies whether or not the Agent is configured to provide SNMP traps to the NMS.')
g3agentSnmpSet = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentSnmpSet.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentSnmpSet.setDescription('This field identifies whether or not the Proxy Agent is configured to provide the customer with limited ability to perform some maintenance commands on G3, ECS, and MCU node types. The value of this field is determined at installation time or set by services personnel in the field. Since the Proxy Agent does not currently support a secure version of SNMP, this field should only be turned on if security is not an issue.')
g3agentActiveName = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentActiveName.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentActiveName.setDescription('A DisplayString object containing the name of the aliased active server.')
g3agentActiveIP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentActiveIP.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentActiveIP.setDescription('A DisplayString object containing the IP address of the aliased active server.')
g3agentServer1Name = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentServer1Name.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentServer1Name.setDescription('A DisplayString object containing the name of server 1.')
g3agentServer1IP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentServer1IP.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentServer1IP.setDescription('A DisplayString object containing the IP address of server 1.')
g3agentServer1State = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("dormant", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentServer1State.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentServer1State.setDescription('This field identifies whether server 1 is currently active or on standby.')
g3agentServer2Name = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentServer2Name.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentServer2Name.setDescription('A DisplayString object containing the name of server 2.')
g3agentServer2IP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentServer2IP.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentServer2IP.setDescription('A DisplayString object containing the IP address of server 2.')
g3agentServer2State = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("active", 1), ("standby", 2), ("dormant", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentServer2State.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentServer2State.setDescription('This field identifies whether server 2 is currently active or on standby.')
g3agentCLANIP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentCLANIP.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentCLANIP.setDescription('A DisplayString object containing the LSP or ESS CLAN IP address.')
g3agentPrim1IP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentPrim1IP.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentPrim1IP.setDescription('A DisplayString object containing the LSP or ESS Primary Server 1 IP address.')
g3agentPrim2IP = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentPrim2IP.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentPrim2IP.setDescription('A DisplayString object containing the LSP or ESS Primary Server 2 IP address.')
g3agentServerType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentServerType.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentServerType.setDescription('A DisplayString object containing the hardware server type.')
g3agentOfferType = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentOfferType.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentOfferType.setDescription('A DisplayString object containing the software offer type.')
g3agentLspConfig = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentLspConfig.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentLspConfig.setDescription("A DisplayString object indicating whether the switch is configured as an LSP (possible values are 'lsp8700', 'lsp8300', 'icc', and 'unset').")
g3agentEssConfig = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3agentEssConfig.setStatus('mandatory')
if mibBuilder.loadTexts: g3agentEssConfig.setDescription("A DisplayString object indicating whether the switch is configured as an ESS (possible values are 'ess8700', 'ess8500', 'main', and 'unset').")
g3trapDestination = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapDestination.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapDestination.setDescription('A DisplayString Object containing the trap destination IP address.')
g3trapFilterNumber = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapFilterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapFilterNumber.setDescription('An INTEGER object containing the filter number for the specified trap destination IP address (1-500).')
g3trapFrequency = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapFrequency.setDescription('An INTEGER object containing the frequency (in minutes) in which the alarm filter is to be applied (1-60).')
g3trapOperation = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add-replace", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapOperation.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapOperation.setDescription('This field indicates whether the alarm filter is to be added or deleted from the set of filters.')
g3trapActive = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trapActive.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapActive.setDescription("This field indicates whether or not active alarms are to be collected. This is a future place holder. Currently setting of this field is not allowed. It is defaulted to 'yes'.")
g3trapResolved = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapResolved.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapResolved.setDescription("This field indicates whether or not resolved alarms are to be collected. It is defaulted to 'no'.")
g3trapMajor = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapMajor.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapMajor.setDescription("This field indicates whether or not major alarms are to be collected. It is defaulted to 'no'.")
g3trapMinor = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapMinor.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapMinor.setDescription("This field indicates whether or not minor alarms are to be collected. It is defaulted to 'no'.")
g3trapWarning = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapWarning.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapWarning.setDescription("This field indicates whether or not warning alarms are to be collected. It is defaulted to 'no'.")
g3trapInterval = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("hour", 1), ("day", 2), ("week", 3), ("month", 4), ("all", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trapInterval.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapInterval.setDescription("This field indicates the time window for which alarms are to be collected. This is a future place holder. Currently setting of this field is not allowed. It is defaulted to 'all'.")
g3trapFromMonth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trapFromMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapFromMonth.setDescription('This field indicates the month from which the alarm polling is to begin (1-12). This is a future place holder. Currently setting of this field is not allowed.')
g3trapFromDay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trapFromDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapFromDay.setDescription('This field indicates the day of the month from which the alarm polling is to begin (1-31). This is a future place holder. Currently setting of this field is not allowed.')
g3trapFromHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trapFromHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapFromHour.setDescription('This field indicates the hour of the day from which the alarm polling is to begin (0-23). This is a future place holder. Currently setting of this field is not allowed.')
g3trapFromMinute = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trapFromMinute.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapFromMinute.setDescription('This field indicates the minute of the hour from which the alarm polling is to begin (0-59). This is a future place holder. Currently setting of this field is not allowed.')
g3trapToMonth = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trapToMonth.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapToMonth.setDescription('This field indicates the month from which the alarm polling is to begin (1-12). This is a future place holder. Currently setting of this field is not allowed.')
g3trapToDay = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trapToDay.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapToDay.setDescription('This field indicates the day of the month from which the alarm polling is to begin (1-31). This is a future place holder. Currently setting of this field is not allowed.')
g3trapToHour = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trapToHour.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapToHour.setDescription('This field indicates the hour of the day from which the alarm polling is to begin (0-23). This is a future place holder. Currently setting of this field is not allowed.')
g3trapToMinute = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trapToMinute.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapToMinute.setDescription('This field indicates the minute of the hour from which the alarm polling is to begin (0-59). This is a future place holder. Currently setting of this field is not allowed.')
g3trapMediaGateway = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapMediaGateway.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapMediaGateway.setDescription('This field indicates the media gateway number (1-250) for which alarms are to be collected.')
g3trapCabinet = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapCabinet.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapCabinet.setDescription('This field indicates the cabinet number (1-64) for which alarms are to be collected.')
g3trapPortNetwork = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3trapPortNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapPortNetwork.setDescription('This field indicates the port network number (1-64) for which alarms are to be collected. This is a future place holder. Currently setting of this field is not allowed.')
g3trapBoardNumber = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapBoardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapBoardNumber.setDescription('A DisplayString Object containing the board number for which alarms are to be collected. This field is of the form cabinet(1-64):carrier(A-E):slot(0-20) or gateway(1-250):module(V1-V9).')
g3trapPort = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapPort.setDescription('A DisplayString Object containing the port number for which alarms are to be collected. This field is of the form cabinet(1-64):carrier(A-E):slot(0-20):circuit(1-256) or gateway(1-250):module(V1-V9):circuit(1-31).')
g3trapCategory = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapCategory.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapCategory.setDescription('This field contains the alarm category (if applicable).')
g3trapMaintenanceObject = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 25), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapMaintenanceObject.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapMaintenanceObject.setDescription('This field contains the alarm maintenance object (if applicable).')
g3trapExtension = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 26), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapExtension.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapExtension.setDescription('This field indicates the extension number for which alarms are to be collected.')
g3trapTrunkGroup = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapTrunkGroup.setDescription('This field indicates the trunk group number for which alarms are to be collected (1-2000).')
g3trapTrunkMember = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 3, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3trapTrunkMember.setStatus('mandatory')
if mibBuilder.loadTexts: g3trapTrunkMember.setDescription('This field indicates the trunk member with a given trunk group for which alarms are to be collected (1-255).')
g3filterFilterStatus = MibScalar((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("current", 1), ("update", 2), ("abort", 3), ("save", 4), ("clear", 5), ("off", 6), ("on", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: g3filterFilterStatus.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterFilterStatus.setDescription("This field indicates the state of alarm trap filter table. A value of 'current' indicates that the set of alarm filters are up-to-date and active and that no filter updates, via the g3trap MIB group are currently taking place. A value of 'update' means that filter updates are taking place via SNMP sets of the g3trap MIB group variables. The rest of the values are settable by the user. A value of 'abort' will cancelled any filter updates in progress and return the filter table to its original state before updates began. A value of 'save' will commit all pending filter updates and the new/modified set of filters will become active. A value of 'clear' will remove all active filters from the filter table. A value of 'off' will turn off the alarm trap handling processes, abort any filter updates in process, but will continue to store the current set of active filters. It's value will display when an SNMP get request is made if the user had previously set the filter status to that value or if alarm trap handling is on but no active filters exist. A value of 'on' will reactivate the alarm trap handling processes using the currently stored set of active filters (by default the alarm trap handling processes turned on at agent startup if any active filters exist).")
g3filterTable = MibTable((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2), )
if mibBuilder.loadTexts: g3filterTable.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterTable.setDescription('A list of g3filter entries.')
g3filterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1), ).setIndexNames((0, "G3-AVAYA-MIB", "g3filterDestination"), (0, "G3-AVAYA-MIB", "g3filterFilterNumber"))
if mibBuilder.loadTexts: g3filterEntry.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterEntry.setDescription('A g3filter entry containing objects of the active filter information stored in the SNMP agent.')
g3filterDestination = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterDestination.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterDestination.setDescription('A DisplayString Object containing the trap destination IP address.')
g3filterFilterNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterFilterNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterFilterNumber.setDescription('An INTEGER object containing the filter number for the specified trap destination IP address.')
g3filterFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterFrequency.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterFrequency.setDescription('An INTEGER object containing the frequency (in minutes) in which the alarm filter is to be applied.')
g3filterActive = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterActive.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterActive.setDescription('This field indicates whether or not active alarms are to be collected.')
g3filterResolved = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterResolved.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterResolved.setDescription('This field indicates whether or not resolved alarms are to be collected.')
g3filterMajor = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterMajor.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterMajor.setDescription('This field indicates whether or not major alarms are to be collected.')
g3filterMinor = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterMinor.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterMinor.setDescription('This field indicates whether or not minor alarms are to be collected.')
g3filterWarning = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterWarning.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterWarning.setDescription('This field indicates whether or not warning alarms are to be collected.')
g3filterMediaGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterMediaGateway.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterMediaGateway.setDescription('This field indicates the media gateway number (1-250) for which alarms are to be collected.')
g3filterCabinet = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterCabinet.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterCabinet.setDescription('This field indicates the cabinet number (1-64) for which alarms are to be collected.')
g3filterPortNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterPortNetwork.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterPortNetwork.setDescription('This field indicates the port network number (1-64) for which alarms are to be collected.')
g3filterBoardNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterBoardNumber.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterBoardNumber.setDescription('This field indicates the board location for which alarms are to be collected.')
g3filterPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterPort.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterPort.setDescription('This field indicates the port location for which alarms are to be collected.')
g3filterCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterCategory.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterCategory.setDescription('This field indicates the alarm category for which alarms are to be collected.')
g3filterMaintenanceObject = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterMaintenanceObject.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterMaintenanceObject.setDescription('This field indicates the maintenance object name for which alarms are to be collected.')
g3filterExtension = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterExtension.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterExtension.setDescription('This field indicates the extension number for which alarms are to be collected.')
g3filterTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterTrunkGroup.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterTrunkGroup.setDescription('This field indicates the trunk group number for which alarms are to be collected (1-2000).')
g3filterTrunkMember = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: g3filterTrunkMember.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterTrunkMember.setDescription('This field indicates the trunk member with a given trunk group for which alarms are to be collected (1-255).')
g3filterTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6889, 2, 8, 2, 4, 2, 1, 19), Integer32())
if mibBuilder.loadTexts: g3filterTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: g3filterTableIndex.setDescription('An INTEGER object containing an index numbering the filter entry.')
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3vintageSpeAupState1=g3vintageSpeAupState1, g3pkvoicesumTcount=g3pkvoicesumTcount, g3tonerecsumCCCPTRPReq=g3tonerecsumCCCPTRPReq, g3trkgrpmemGroup=g3trkgrpmemGroup, g3attdgrpTretrieve=g3attdgrpTretrieve, g3pkclansocsum=g3pkclansocsum, g3annallTretrieve=g3annallTretrieve, g3tonerecsumTdelay=g3tonerecsumTdelay, g3pktrunkoutDay=g3pktrunkoutDay, g3trunkoutTcount=g3trunkoutTcount, g3stamediaGatewayStatus22=g3stamediaGatewayStatus22, g3acaTdelay=g3acaTdelay, g3secviolateInvalidID=g3secviolateInvalidID, g3deftimeDayOfWeek=g3deftimeDayOfWeek, g3callratevoiceBsyIntScToday=g3callratevoiceBsyIntScToday, g3esparmsTcount=g3esparmsTcount, g3atmportpg2TGNumber97=g3atmportpg2TGNumber97, g3pkcovpathCallsOffCB=g3pkcovpathCallsOffCB, g3pkprincipalCovPath5=g3pkprincipalCovPath5, g3vintageVSPacketBus=g3vintageVSPacketBus, g3pkloadtotal=g3pkloadtotal, g3bulletinMessage15=g3bulletinMessage15, g3atmportpg1TGNumber35=g3atmportpg1TGNumber35, g3pkloadtotalTage=g3pkloadtotalTage, g3ipunregTcount=g3ipunregTcount, g3esparmsNetCommunity44=g3esparmsNetCommunity44, g3healthPncStat31to4425=g3healthPncStat31to4425, g3atmlatencyYear=g3atmlatencyYear, g3atmportpg1SGNumber66=g3atmportpg1SGNumber66, g3trunkgrpLongHold=g3trunkgrpLongHold, g3atmportpg1SGNumber42=g3atmportpg1SGNumber42, g3secviolateCountSince=g3secviolateCountSince, g3huntlistTintvl=g3huntlistTintvl, g3pktrunkwbsumTdelay=g3pktrunkwbsumTdelay, g3mmisumTintvl=g3mmisumTintvl, g3trunkstaTable=g3trunkstaTable, g3atmportpg3TGNumber218=g3atmportpg3TGNumber218, g3ipinterfaceSlot83=g3ipinterfaceSlot83, g3esmsumOutofService=g3esmsumOutofService, definity_one=definity_one, g3stamediaGatewayStatus54=g3stamediaGatewayStatus54, g3stamediaGatewayStatus70=g3stamediaGatewayStatus70, g3pkannintegHour=g3pkannintegHour, g3pktrunkwbsumIncSeize=g3pktrunkwbsumIncSeize, g3pktonerecsumCCCPTRPDeny=g3pktonerecsumCCCPTRPDeny, g3callratetotalMeasHour4=g3callratetotalMeasHour4, g3pkesmsumTintvl=g3pkesmsumTintvl, g3healthPncStat1to1515=g3healthPncStat1to1515, g3deftimeMonth=g3deftimeMonth, g3mmisumYear=g3mmisumYear, g3esparmsNetCommunity56=g3esparmsNetCommunity56, g3pkpnblockTdmPeg=g3pkpnblockTdmPeg, g3atmlatencySetup1A=g3atmlatencySetup1A, g3trunkgrp=g3trunkgrp, g3atmportpg1SGNumber17=g3atmportpg1SGNumber17, g3pkloadincIncIncomingPeg=g3pkloadincIncIncomingPeg, g3ipinterfaceNodeName40=g3ipinterfaceNodeName40, g3pkcovpathTintvl=g3pkcovpathTintvl, g3cabinetType=g3cabinetType, g3pkhuntTintvl=g3pkhuntTintvl, g3portId2=g3portId2, g3eventdayFirstMonth=g3eventdayFirstMonth, g3esmsumHour=g3esmsumHour, g3atmportpg1TGNumber83=g3atmportpg1TGNumber83, g3attdgrpEntry=g3attdgrpEntry, g3filterDestination=g3filterDestination, g3esparmsNetCommunity62=g3esparmsNetCommunity62, g3vintageOSSNumber1=g3vintageOSSNumber1, g3extdevDescription=g3extdevDescription, g3atmportpg1TGNumber66=g3atmportpg1TGNumber66, g3tonerecsumRunHour=g3tonerecsumRunHour, g3pkipsignalTintvl=g3pkipsignalTintvl, g3attdposTintvl=g3attdposTintvl, g3cabinetCarBType=g3cabinetCarBType, g3pkrpatTrunkGroup=g3pkrpatTrunkGroup, g3huntGroupSize=g3huntGroupSize, g3filterFrequency=g3filterFrequency, g3healthStaticOcc=g3healthStaticOcc, g3extdevBuilding=g3extdevBuilding, g3atmportpg1SGNumber23=g3atmportpg1SGNumber23, g3callratedataBsyIntScYesterday=g3callratedataBsyIntScYesterday, g3pkipcodecsum=g3pkipcodecsum, g3portEntry=g3portEntry, g3annintegTcount=g3annintegTcount, g3atmlatencyHour=g3atmlatencyHour, g3annintegMaxCall=g3annintegMaxCall, g3ipsignalRegion=g3ipsignalRegion, g3atmportpg1SGNumber26=g3atmportpg1SGNumber26, g3atmportpg3TGNumber190=g3atmportpg3TGNumber190, g3pkprincipalTable=g3pkprincipalTable, g3msgalmID=g3msgalmID, g3atmportpg3SGNumber187=g3atmportpg3SGNumber187, g3gatewayMACAddress=g3gatewayMACAddress, g3pktrunkwbsumTrunkGroup=g3pktrunkwbsumTrunkGroup, g3atmportpg3TGNumber206=g3atmportpg3TGNumber206, g3vintageTretrieve=g3vintageTretrieve, g3atmportpg2TGNumber149=g3atmportpg2TGNumber149, g3pksnblock=g3pksnblock, g3pkloadincTintvl=g3pkloadincTintvl, g3principalCovPath2=g3principalCovPath2, g3bulletinTintvl=g3bulletinTintvl, g3trunkcfgTage=g3trunkcfgTage, g3statregion=g3statregion, g3configPort6=g3configPort6, g3atmpncPncSELB=g3atmpncPncSELB, g3ipinterfaceNodeName9=g3ipinterfaceNodeName9, g3restartMinute=g3restartMinute, g3pkvoicesumMeasHour=g3pkvoicesumMeasHour, g3esmainLocalPref=g3esmainLocalPref, g3callratevoiceBsyCalCmplToday2=g3callratevoiceBsyCalCmplToday2, g3atmportpg1TGNumber80=g3atmportpg1TGNumber80, g3ipcodecsumYear=g3ipcodecsumYear, g3busybrdResult=g3busybrdResult, g3callratemediaBsyCalCmplYesterday2=g3callratemediaBsyCalCmplYesterday2, g3pnchealthPncBMode=g3pnchealthPncBMode, g3pkipcodecsumG723OutRegion=g3pkipcodecsumG723OutRegion, g3ipinterfaceNodeName27=g3ipinterfaceNodeName27, g3mmisumMonth=g3mmisumMonth, g3ipintlistTretrieve=g3ipintlistTretrieve, g3callratesrvTintvl=g3callratesrvTintvl, g3ipserverSecIPPort=g3ipserverSecIPPort, g3pkcovpathCallsOffTotal=g3pkcovpathCallsOffTotal, g3pkhuntHuntGroup=g3pkhuntHuntGroup, g3secviolateStnViolateAC=g3secviolateStnViolateAC, g3configPort16=g3configPort16, g3atmportpg2SGNumber132=g3atmportpg2SGNumber132, g3loadtotalTcount=g3loadtotalTcount, g3pkannallTage=g3pkannallTage, g3healthCab16to3028=g3healthCab16to3028, g3stamediaGatewayStatus67=g3stamediaGatewayStatus67, g3rpatcfgTage=g3rpatcfgTage, g3loadtotalTretrieve=g3loadtotalTretrieve, g3trapFromMonth=g3trapFromMonth, g3atmportpg3SGNumber183=g3atmportpg3SGNumber183, g3atmportpg2SGNumber107=g3atmportpg2SGNumber107, g3pktonerecsumRunDay=g3pktonerecsumRunDay, g3atmportpg3TGNumber205=g3atmportpg3TGNumber205, g3pkloadincDay=g3pkloadincDay, g3pkannallMaxCall=g3pkannallMaxCall, g3servalmTable=g3servalmTable, g3stamediaGatewayStatus24=g3stamediaGatewayStatus24, g3ipnetregionRSVPFailure=g3ipnetregionRSVPFailure, g3atmportpg2SGNumber162=g3atmportpg2SGNumber162, g3gatewayRecoveryRule=g3gatewayRecoveryRule, g3pkrpatDay=g3pkrpatDay, g3timedateSecond=g3timedateSecond, g3ipserverPrimHost=g3ipserverPrimHost, g3callratetotalTdelay=g3callratetotalTdelay, g3healthCab16to3027=g3healthCab16to3027, g3trunksum=g3trunksum, g3cabinetFloor=g3cabinetFloor, g3cartypeCab2CarCType=g3cartypeCab2CarCType, g3trunklight=g3trunklight, g3tonerecDTMFTotOffPN=g3tonerecDTMFTotOffPN, g3callratesrvMeasHour5=g3callratesrvMeasHour5, g3secviolateStnInvalidAC=g3secviolateStnInvalidAC, g3regipstatTage=g3regipstatTage, g3pkvoicesumVoiceDenials=g3pkvoicesumVoiceDenials, g3annallAnnNbr=g3annallAnnNbr, g3esmainTcount=g3esmainTcount, g3pkmmisumPercentBlock=g3pkmmisumPercentBlock, g3rpatcfgPattern1=g3rpatcfgPattern1, g3bulletinMessage20=g3bulletinMessage20, g3loadincDay=g3loadincDay, g3ipinterfaceNodeName43=g3ipinterfaceNodeName43, g3platcmdsTable=g3platcmdsTable, g3ipsignalDay=g3ipsignalDay, g3ipnetregionLastError=g3ipnetregionLastError, g3bulletinMessage6=g3bulletinMessage6, g3bulletinMessage39=g3bulletinMessage39, g3pkmmisumHour=g3pkmmisumHour, g3trunkcfgSuffix=g3trunkcfgSuffix, g3pkhunt=g3pkhunt, g3restartInterchange=g3restartInterchange, g3atmportpg3TGNumber195=g3atmportpg3TGNumber195, g3ipinterfaceNodeName29=g3ipinterfaceNodeName29, g3gatewayTdelay=g3gatewayTdelay, g3callratevoiceMeasHour4=g3callratevoiceMeasHour4, g3covpathTable=g3covpathTable, g3esparmsNetCommunity55=g3esparmsNetCommunity55, g3ipinterfaceNodeName78=g3ipinterfaceNodeName78, g3stationJack=g3stationJack, g3esparmsHour=g3esparmsHour, g3atmportpg1Entry=g3atmportpg1Entry, g3esmsumMonth=g3esmsumMonth, g3covpathPoint5Aband=g3covpathPoint5Aband, g3busytrkUDateStr=g3busytrkUDateStr, g3eventdayEventData1=g3eventdayEventData1, g3busytrkTable=g3busytrkTable, g3errorsIndex=g3errorsIndex, g3loadincIncIncomingUse=g3loadincIncIncomingUse, g3pkloadincEntry=g3pkloadincEntry, g3pkatmlatencyPNOrig1=g3pkatmlatencyPNOrig1, g3trunkwbsumMeasHour=g3trunkwbsumMeasHour, g3pnchealthPncBMinor=g3pnchealthPncBMinor, g3pktonerecDay=g3pktonerecDay, g3ipevtEntry=g3ipevtEntry, g3cartypeCab3CarCType=g3cartypeCab3CarCType, g3pnchealthSoftwreLck=g3pnchealthSoftwreLck, g3ipinterfaceSlot21=g3ipinterfaceSlot21, g3atmportpg2SGNumber122=g3atmportpg2SGNumber122, g3bulletinMessage37=g3bulletinMessage37, g3atmportpg3LTGNumber10=g3atmportpg3LTGNumber10, g3stamediaGatewayStatus11=g3stamediaGatewayStatus11, g3atmportpg3TGNumber232=g3atmportpg3TGNumber232, g3fiberlinkTage=g3fiberlinkTage, g3esparmsNetCommunity30=g3esparmsNetCommunity30, g3cabtypeTretrieve=g3cabtypeTretrieve, g3esparmsNetCommunity63=g3esparmsNetCommunity63, g3trunkoutTintvl=g3trunkoutTintvl, g3annintegAnnNbr=g3annintegAnnNbr, g3pktrunkwbsumYear=g3pktrunkwbsumYear, g3pktrunkwbsumTintvl=g3pktrunkwbsumTintvl, g3ipdspsumPctOutSrv=g3ipdspsumPctOutSrv, g3attdgrpTimeTalk=g3attdgrpTimeTalk, g3atmportpg1TGNumber61=g3atmportpg1TGNumber61, g3secviolateRAViolateAC=g3secviolateRAViolateAC, g3pktonerecGPTDPnReq=g3pktonerecGPTDPnReq, g3atmportpg2SGNumber157=g3atmportpg2SGNumber157, g3clanetherDay=g3clanetherDay, g3pkloadtotalPNOccupancy=g3pkloadtotalPNOccupancy, g3nodenameTretrieve=g3nodenameTretrieve, g3clanetherTage=g3clanetherTage, g3atmportpg3LTGNumber6=g3atmportpg3LTGNumber6, g3siggroupIntfNum4=g3siggroupIntfNum4, g3atmportpg1SGNumber6=g3atmportpg1SGNumber6, g3atmportpg1TGNumber88=g3atmportpg1TGNumber88, g3loadincPNNumber=g3loadincPNNumber, g3loadtanTage=g3loadtanTage, g3stamediaGatewayStatus52=g3stamediaGatewayStatus52, g3atmportpg3TGNumber181=g3atmportpg3TGNumber181, g3occsumRunYear=g3occsumRunYear, g3lsplistTdelay=g3lsplistTdelay, g3alarmsMinRslvd=g3alarmsMinRslvd, g3pkloadintTretrieve=g3pkloadintTretrieve, g3esserversServerAIP4=g3esserversServerAIP4, g3bulletinMessage2=g3bulletinMessage2, g3pkannallMeasHour=g3pkannallMeasHour, g3covpathPoint5Ans=g3covpathPoint5Ans, g3pkclansocsumDay=g3pkclansocsumDay, g3esmsumESMDenials=g3esmsumESMDenials, g3cbctrunkPlan5=g3cbctrunkPlan5, g3errorsMinFirst=g3errorsMinFirst, g3nodenameTcount=g3nodenameTcount, g3loadintIntInterPNUse=g3loadintIntInterPNUse, g3atmportpg2SGNumber146=g3atmportpg2SGNumber146, g3voicesumTintvl=g3voicesumTintvl, g3ipinterfaceNodeName18=g3ipinterfaceNodeName18, g3statstaTable=g3statstaTable, g3callratevoiceBsyIntHr=g3callratevoiceBsyIntHr, g3siggroupIntfNum3=g3siggroupIntfNum3, g3occsumTotCall=g3occsumTotCall, g3regipstatEntry=g3regipstatEntry, g3esparmsNetCommunity54=g3esparmsNetCommunity54)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3eventhourEventCount=g3eventhourEventCount, g3siggroupIntfNum18=g3siggroupIntfNum18, g3esparmsNetCommunity38=g3esparmsNetCommunity38, g3atmportpg3TGNumber223=g3atmportpg3TGNumber223, g3atmportpg3TGNumber191=g3atmportpg3TGNumber191, g3atmportpg2Entry=g3atmportpg2Entry, g3errorsDayLast=g3errorsDayLast, g3atmlatencyPNOrig1=g3atmlatencyPNOrig1, g3callratesrvNumCallsYesterday=g3callratesrvNumCallsYesterday, g3trunkstaServiceState=g3trunkstaServiceState, g3ipdspsumDSPRecs=g3ipdspsumDSPRecs, g3esparmsNetCommunity25=g3esparmsNetCommunity25, g3esserversLocalPref=g3esserversLocalPref, g3ipsignalTcount=g3ipsignalTcount, g3statmedproPhysicalAddr=g3statmedproPhysicalAddr, g3pktrunklightMonth=g3pktrunklightMonth, g3principalEntry=g3principalEntry, g3healthPower=g3healthPower, g3mmisumTcount=g3mmisumTcount, g3bulletinMessage49=g3bulletinMessage49, g3trunkwbsum=g3trunkwbsum, g3pktrunkoutHour=g3pktrunkoutHour, g3datamodTable=g3datamodTable, g3atmlatencyATMCount1A=g3atmlatencyATMCount1A, g3callratemediaBsyIntScYesterday=g3callratemediaBsyIntScYesterday, g3secviolateStnValidAC=g3secviolateStnValidAC, g3atmportpg1TGNumber25=g3atmportpg1TGNumber25, g3esparmsNetCommunity2=g3esparmsNetCommunity2, g3statstaSACactive=g3statstaSACactive, g3atmportpg2SGNumber137=g3atmportpg2SGNumber137, g3extdevAltName=g3extdevAltName, g3trunkcfgBoardNum=g3trunkcfgBoardNum, g3pktonerecCCCPTRPkOffPN=g3pktonerecCCCPTRPkOffPN, g3deftimeTretrieve=g3deftimeTretrieve, g3atmportpg2TGNumber112=g3atmportpg2TGNumber112, g3pktrunklightMember=g3pktrunklightMember, g3esparmsNetCommunity31=g3esparmsNetCommunity31, g3healthCab1to157=g3healthCab1to157, g3pktrunksumTage=g3pktrunksumTage, g3nodename=g3nodename, g3atmportpg3SGNumber230=g3atmportpg3SGNumber230, g3ipinterfaceSlot15=g3ipinterfaceSlot15, g3ipinterfaceSlot69=g3ipinterfaceSlot69, g3snblockYear=g3snblockYear, g3pktonerecsumCCTTRTDeny=g3pktonerecsumCCTTRTDeny, g3trunkcfgEntry=g3trunkcfgEntry, g3atmportpg3Tintvl=g3atmportpg3Tintvl, g3secviolateTtlValidSSC=g3secviolateTtlValidSSC, g3pkipcodecsumTdelay=g3pkipcodecsumTdelay, g3atmportpg1TGNumber49=g3atmportpg1TGNumber49, definity_proxy=definity_proxy, g3eventhourEventType=g3eventhourEventType, g3agentServer1State=g3agentServer1State, g3pkloadtotalTintvl=g3pkloadtotalTintvl, g3ipinterfaceSlot39=g3ipinterfaceSlot39, g3port=g3port, g3statmedproLinkCCL=g3statmedproLinkCCL, g3pkmmisumYear=g3pkmmisumYear, g3configEntry=g3configEntry, g3ipinterfaceTdelay=g3ipinterfaceTdelay, g3attdgrpMeasType=g3attdgrpMeasType, g3pkloadtotalTcount=g3pkloadtotalTcount, g3bulletinMessage56=g3bulletinMessage56, g3atmportpg2SGNumber141=g3atmportpg2SGNumber141, g3pkcovpathEntry=g3pkcovpathEntry, g3ipinterfaceSlot60=g3ipinterfaceSlot60, g3bulletinMessage24=g3bulletinMessage24, g3bulletinDate22=g3bulletinDate22, g3vintageTintvl=g3vintageTintvl, g3clientSubmapType=g3clientSubmapType, g3routepatternTGNumber10=g3routepatternTGNumber10, g3eventdayTage=g3eventdayTage, g3atmportpg1TGNumber73=g3atmportpg1TGNumber73, g3pkhuntQueSiz=g3pkhuntQueSiz, g3atmportpg1SGNumber53=g3atmportpg1SGNumber53, g3healthPncStat1to155=g3healthPncStat1to155, g3principalCovPath3=g3principalCovPath3, g3stamediaGatewayStatus38=g3stamediaGatewayStatus38, g3healthStnBusy=g3healthStnBusy, g3attdposTcount=g3attdposTcount, g3configPort32=g3configPort32, g3routepatternTGNumber13=g3routepatternTGNumber13, g3pktonerecTable=g3pktonerecTable, g3callratevoiceMeasHour=g3callratevoiceMeasHour, g3bulletinMessage55=g3bulletinMessage55, g3atmportpg1SGNumber1=g3atmportpg1SGNumber1, g3trunklightTretrieve=g3trunklightTretrieve, g3bulletinDate1=g3bulletinDate1, g3callratesrvMeasHour=g3callratesrvMeasHour, g3ipinterfaceSlot81=g3ipinterfaceSlot81, g3mmisumEntry=g3mmisumEntry, g3cbctrunkDur4=g3cbctrunkDur4, g3trunkoutTdelay=g3trunkoutTdelay, g3statmedproSharedIP=g3statmedproSharedIP, g3trunksumGroupSize=g3trunksumGroupSize, g3atmportpg3SGNumber225=g3atmportpg3SGNumber225, g3cbctrunkHour=g3cbctrunkHour, g3cabtypeTdelay=g3cabtypeTdelay, g3trunksumPercentOutBlk=g3trunksumPercentOutBlk, g3vintageTdelay=g3vintageTdelay, g3atmportpg1SGNumber12=g3atmportpg1SGNumber12, g3atmportpg2SGNumber126=g3atmportpg2SGNumber126, g3ipnetregionEntry=g3ipnetregionEntry, g3ipinterfaceNodeName5=g3ipinterfaceNodeName5, g3siggroupBoard13=g3siggroupBoard13, g3atmportpg3SGNumber238=g3atmportpg3SGNumber238, g3pkannintegTable=g3pkannintegTable, g3ipsignalTage=g3ipsignalTage, g3pktrunkoutYear=g3pktrunkoutYear, g3occsumTotAtt=g3occsumTotAtt, g3pkloadintEntry=g3pkloadintEntry, g3atmportpg1SGNumber55=g3atmportpg1SGNumber55, g3esparmsNetCommunity12=g3esparmsNetCommunity12, g3routepatternTGNumber7=g3routepatternTGNumber7, g3pktonerecDTMFPnAlloc=g3pktonerecDTMFPnAlloc, g3bulletinDate26=g3bulletinDate26, g3atmportpg3SGNumber242=g3atmportpg3SGNumber242, g3annintegTable=g3annintegTable, g3ipcodecsumHour=g3ipcodecsumHour, g3eventhourLastMonth=g3eventhourLastMonth, g3stationFloor=g3stationFloor, g3atmpncPncAddFmtB=g3atmpncPncAddFmtB, g3secviolateTrkValidAC=g3secviolateTrkValidAC, g3attdposEntry=g3attdposEntry, g3servalmLevel=g3servalmLevel, g3esserversServerAId=g3esserversServerAId, g3pkloadtotalTDMOccupancy=g3pkloadtotalTDMOccupancy, g3atmportpg2TGNumber95=g3atmportpg2TGNumber95, g3connectErrors=g3connectErrors, g3ipinterfaceNodeName61=g3ipinterfaceNodeName61, g3bulletinTdelay=g3bulletinTdelay, g3pkatmlatencyATMCount1A=g3pkatmlatencyATMCount1A, g3stamedlist=g3stamedlist, g3statregionConnType=g3statregionConnType, g3pkannallTdelay=g3pkannallTdelay, g3pkmmisumTcount=g3pkmmisumTcount, g3eventdayFirstHour=g3eventdayFirstHour, g3attdgrpRunDay=g3attdgrpRunDay, g3tonerecCCTTRPkAlloc=g3tonerecCCTTRPkAlloc, g3fiberlinkE2BDs1Board=g3fiberlinkE2BDs1Board, g3atmportpg1TGNumber77=g3atmportpg1TGNumber77, g3occsumTandCall=g3occsumTandCall, g3trunklightHour=g3trunklightHour, g3rpatCallsOffered=g3rpatCallsOffered, g3atmportpg1TGNumber38=g3atmportpg1TGNumber38, g3atmportpg3TGNumber228=g3atmportpg3TGNumber228, g3tonerecsumDTMFHour=g3tonerecsumDTMFHour, g3servalmDescription=g3servalmDescription, g3loadtotalTable=g3loadtotalTable, g3pnchealthStandbyBusd=g3pnchealthStandbyBusd, g3agentSnmpPolling=g3agentSnmpPolling, g3atmpncPncLocB=g3atmpncPncLocB, g3pkatmlatencyPNPair=g3pkatmlatencyPNPair, g3ipregion=g3ipregion, g3principalCovPath5=g3principalCovPath5, g3esmainServerAIP3=g3esmainServerAIP3, g3snblockTable=g3snblockTable, g3healthCab31to4425=g3healthCab31to4425, g3atmportpg2TGNumber147=g3atmportpg2TGNumber147, g3atmportpg1Tretrieve=g3atmportpg1Tretrieve, g3mgrecruleTdelay=g3mgrecruleTdelay, g3trunksumQueAbd=g3trunksumQueAbd, g3pkloadtanTanOutgoingPeg=g3pkloadtanTanOutgoingPeg, g3ipinterfaceNodeName47=g3ipinterfaceNodeName47, g3datamstaExtension=g3datamstaExtension, g3esserversEntry=g3esserversEntry, g3snblockSnPair=g3snblockSnPair, g3pksnblockTable=g3pksnblockTable, g3pkloadoutOutIntraPNPeg=g3pkloadoutOutIntraPNPeg, g3annallTdelay=g3annallTdelay, g3atmportpg1TGNumber20=g3atmportpg1TGNumber20, g3pkloadtotalTdelay=g3pkloadtotalTdelay, g3configPort5=g3configPort5, g3bulletinDate8=g3bulletinDate8, g3portEquipType2=g3portEquipType2, g3callratetotalNumCallsYesterday=g3callratetotalNumCallsYesterday, g3bulletinDate21=g3bulletinDate21, g3pkpnblockTdmBlockage=g3pkpnblockTdmBlockage, g3atmportpg3TGNumber200=g3atmportpg3TGNumber200, g3huntHour=g3huntHour, g3ipcodecsumTable=g3ipcodecsumTable, g3eventhourEntry=g3eventhourEntry, g3atmportpg2TGNumber134=g3atmportpg2TGNumber134, g3gatewayG350ModTypeV3=g3gatewayG350ModTypeV3, g3tonerecsumGPTDTReq=g3tonerecsumGPTDTReq, g3pnblockTintvl=g3pnblockTintvl, g3esmainServerBIP1=g3esmainServerBIP1, g3pkloadtotalPNNumber=g3pkloadtotalPNNumber, g3ipinterfaceSlot13=g3ipinterfaceSlot13, g3huntYear=g3huntYear, g3pkclansocsumSockusage=g3pkclansocsumSockusage, g3trunkgrpCommType=g3trunkgrpCommType, g3ipcodecsumRegion=g3ipcodecsumRegion, g3ipsignalMonth=g3ipsignalMonth, g3loadintIntIntraPNPeg=g3loadintIntIntraPNPeg, g3stamediaGatewayStatus17=g3stamediaGatewayStatus17, g3pksnblockLinkBlockage=g3pksnblockLinkBlockage, g3esmsumTdelay=g3esmsumTdelay, g3atmportpg3SGNumber199=g3atmportpg3SGNumber199, g3connectTimeout=g3connectTimeout, g3pkpnblockTdelay=g3pkpnblockTdelay, g3pktonerecsumRunHour=g3pktonerecsumRunHour, g3healthPncStat16to3027=g3healthPncStat16to3027, g3stamediaGatewayStatus50=g3stamediaGatewayStatus50, g3stationcfgTdelay=g3stationcfgTdelay, g3callratevoiceBsyIntMnYesterday=g3callratevoiceBsyIntMnYesterday, g3loadint=g3loadint, g3ipinterfaceNodeName19=g3ipinterfaceNodeName19, g3trunkgrpName=g3trunkgrpName, g3ipinterfaceSlot58=g3ipinterfaceSlot58, g3pkprincipalCovPath4=g3pkprincipalCovPath4, g3gatewayFWVintage=g3gatewayFWVintage, g3ipdspsum=g3ipdspsum, g3pkannallDay=g3pkannallDay, g3ipserverSecIP2=g3ipserverSecIP2, g3covpathCallsOffCB=g3covpathCallsOffCB, g3atmportpg2SGNumber159=g3atmportpg2SGNumber159, g3rpatcfgPattern9=g3rpatcfgPattern9, g3loadoutOutIntraPNUse=g3loadoutOutIntraPNUse, g3ipinterfaceSlot70=g3ipinterfaceSlot70, g3pkloadintTable=g3pkloadintTable, g3deftimeTdelay=g3deftimeTdelay, g3pktrunkoutMember=g3pktrunkoutMember, g3atmportpg2TGNumber151=g3atmportpg2TGNumber151, g3stamediaGatewayStatus59=g3stamediaGatewayStatus59, g3pkhuntCallsAns=g3pkhuntCallsAns, g3ipnetregionCC8021Pri=g3ipnetregionCC8021Pri, g3ipdspsumTdelay=g3ipdspsumTdelay, g3trunksumRunMonth=g3trunksumRunMonth, g3pkipsignalIntvlPacketsSent=g3pkipsignalIntvlPacketsSent, g3callratesrvRunMonth=g3callratesrvRunMonth, g3atmportpg3SGNumber224=g3atmportpg3SGNumber224, g3ipinterfaceNodeName46=g3ipinterfaceNodeName46, g3pkcovpathTretrieve=g3pkcovpathTretrieve, g3atmportpg3TGNumber194=g3atmportpg3TGNumber194, g3callratemediaBsyCalCmplToday2=g3callratemediaBsyCalCmplToday2, g3bulletinMessage18=g3bulletinMessage18, g3configPort7=g3configPort7, g3restartIndex=g3restartIndex, g3atmportpg1SGNumber15=g3atmportpg1SGNumber15, g3pkloadtanTanOutgoingUse=g3pkloadtanTanOutgoingUse, g3trunkgrpDCSSigType=g3trunkgrpDCSSigType, g3pkannintegBoard=g3pkannintegBoard, g3atmportpg3SGNumber186=g3atmportpg3SGNumber186, g3atmportpg1TGNumber44=g3atmportpg1TGNumber44, g3callratedataMeasHour4=g3callratedataMeasHour4, g3configVintage=g3configVintage, g3atmportpg1TGNumber41=g3atmportpg1TGNumber41, g3occsumIncAtt=g3occsumIncAtt, g3pkloadincMonth=g3pkloadincMonth, g3statstaMaintBusy=g3statstaMaintBusy, g3ipsignalIntvlPacketsSent=g3ipsignalIntvlPacketsSent, g3loadtanTanIncomingUse=g3loadtanTanIncomingUse, g3atmportpg3SGNumber227=g3atmportpg3SGNumber227)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3stamediaGatewayStatus36=g3stamediaGatewayStatus36, g3stationRoom=g3stationRoom, g3pkipsignalRegion=g3pkipsignalRegion, g3callratemediaMeasHour4=g3callratemediaMeasHour4, g3clanpppTdelay=g3clanpppTdelay, g3mmisumHour=g3mmisumHour, g3covpathPoint6Aband=g3covpathPoint6Aband, g3pktrunkwbsumTable=g3pktrunkwbsumTable, g3esserversNetComm=g3esserversNetComm, g3agentCLANIP=g3agentCLANIP, g3ipcodecsumG711InRegion=g3ipcodecsumG711InRegion, g3clanetherCollCntTot=g3clanetherCollCntTot, g3ipevtIPEvent=g3ipevtIPEvent, g3pkprincipalCallsAband=g3pkprincipalCallsAband, g3errorsTable=g3errorsTable, g3atmtrunkTintvl=g3atmtrunkTintvl, g3pkloadincTdelay=g3pkloadincTdelay, g3atmportpg3SGNumber215=g3atmportpg3SGNumber215, g3pktonerecsumCLASTAvail=g3pktonerecsumCLASTAvail, g3statmedproDupLinkPeer=g3statmedproDupLinkPeer, g3principalCallsCBC=g3principalCallsCBC, g3statstaSerialNbr=g3statstaSerialNbr, g3siggroupPriDChannel=g3siggroupPriDChannel, g3callratemediaBsyIntScToday2=g3callratemediaBsyIntScToday2, g3pkcovpathPoint2Ans=g3pkcovpathPoint2Ans, g3statstaPartID=g3statstaPartID, g3bulletinMessage29=g3bulletinMessage29, g3atmportpg3TGNumber211=g3atmportpg3TGNumber211, g3atmportpg1TGNumber45=g3atmportpg1TGNumber45, g3pktrunksumMeasHour=g3pktrunksumMeasHour, g3healthCab16to3023=g3healthCab16to3023, g3stamediaTintvl=g3stamediaTintvl, g3gatewaySiteData1=g3gatewaySiteData1, g3cartypeCab1CarAType=g3cartypeCab1CarAType, g3atmpncPncHoDsp1A=g3atmpncPncHoDsp1A, g3vintageLocalNodeNbr=g3vintageLocalNodeNbr, g3occsumTintvl=g3occsumTintvl, g3mmisumMeasHour=g3mmisumMeasHour, g3ipinterfaceSlot48=g3ipinterfaceSlot48, g3secviolateTintvl=g3secviolateTintvl, g3pktrunklightTable=g3pktrunklightTable, g3callratevoiceBsyIntScYesterday2=g3callratevoiceBsyIntScYesterday2, g3ipunregStatPort=g3ipunregStatPort, g3atmportpg1TGNumber11=g3atmportpg1TGNumber11, g3atmportpg1SGNumber34=g3atmportpg1SGNumber34, g3stamedlistTcount=g3stamedlistTcount, g3trunkcfgBoardType=g3trunkcfgBoardType, g3callratevoiceBsyIntScYesterday=g3callratevoiceBsyIntScYesterday, g3trapToHour=g3trapToHour, g3healthTimeSource=g3healthTimeSource, g3trunkmemMember=g3trunkmemMember, g3ipinterfaceSlot22=g3ipinterfaceSlot22, g3huntCallsAns=g3huntCallsAns, g3stamgannGatewayNbr=g3stamgannGatewayNbr, g3atmportpg2SGNumber156=g3atmportpg2SGNumber156, g3cartypeCab3CarAType=g3cartypeCab3CarAType, g3esparmsNoServerTO=g3esparmsNoServerTO, g3pkrpatTintvl=g3pkrpatTintvl, g3stamediaH248LinksDown=g3stamediaH248LinksDown, g3trkgrpmemTdelay=g3trkgrpmemTdelay, g3pkmmisumTable=g3pkmmisumTable, g3gatewayG350ModTypeV5=g3gatewayG350ModTypeV5, g3configPort27=g3configPort27, g3callratedataBsyIntMnYesterday2=g3callratedataBsyIntMnYesterday2, g3ipinterfaceNodeName63=g3ipinterfaceNodeName63, g3ipintlistTage=g3ipintlistTage, g3ipsignalTable=g3ipsignalTable, g3atmportpg2SGNumber130=g3atmportpg2SGNumber130, g3esmainServerBIP2=g3esmainServerBIP2, g3cabinetCarEPNN=g3cabinetCarEPNN, g3pktonerecDTMFPnReq=g3pktonerecDTMFPnReq, g3bulletinMessage23=g3bulletinMessage23, g3pnchealthPncBSNIntrIdx=g3pnchealthPncBSNIntrIdx, g3trunksumQueOvf=g3trunksumQueOvf, g3principalTage=g3principalTage, g3siggroupIntfNum19=g3siggroupIntfNum19, g3secviolateAtdInvalidAC=g3secviolateAtdInvalidAC, g3loadincTage=g3loadincTage, g3callratemediaMeasHour=g3callratemediaMeasHour, g3eventhourFirstMonth=g3eventhourFirstMonth, g3callratevoiceRunHour=g3callratevoiceRunHour, g3pktrunklight=g3pktrunklight, g3attdgrpRunHour=g3attdgrpRunHour, g3routepatternTGNumber12=g3routepatternTGNumber12, g3statmedproDupBroadCastAddr=g3statmedproDupBroadCastAddr, g3pktonerecsumDTMFHour=g3pktonerecsumDTMFHour, g3pktonerecsumCCCPTRTReq=g3pktonerecsumCCCPTRTReq, g3pkannintegName=g3pkannintegName, g3pkvoicesumAvailablePorts=g3pkvoicesumAvailablePorts, g3principalExtensionTAC=g3principalExtensionTAC, g3stamediaTretrieve=g3stamediaTretrieve, g3siggroupIntfNum8=g3siggroupIntfNum8, g3atmportpg3Tcount=g3atmportpg3Tcount, g3busyrlsObject=g3busyrlsObject, g3loadintTretrieve=g3loadintTretrieve, g3cbctrunkTGNumber=g3cbctrunkTGNumber, g3esparmsAutoReturn=g3esparmsAutoReturn, g3esmsumTretrieve=g3esmsumTretrieve, g3ipinterfaceSlot52=g3ipinterfaceSlot52, g3servalmEntry=g3servalmEntry, g3ipinterfaceSlot51=g3ipinterfaceSlot51, g3msgalmTable=g3msgalmTable, g3atmtrunkName=g3atmtrunkName, g3pnblockTdmPeg=g3pnblockTdmPeg, g3bulletinMessage8=g3bulletinMessage8, g3bulletinMessage45=g3bulletinMessage45, g3ipinterfaceSlot49=g3ipinterfaceSlot49, g3stamediaGatewayStatus21=g3stamediaGatewayStatus21, g3siggroupBoard8=g3siggroupBoard8, g3loadtanTretrieve=g3loadtanTretrieve, g3callratetotalMeasHour2=g3callratetotalMeasHour2, g3regipstatExtension=g3regipstatExtension, g3esmsumMeasHour=g3esmsumMeasHour, g3stamediaGatewayStatus64=g3stamediaGatewayStatus64, g3msgalmAPP=g3msgalmAPP, val_board=val_board, g3healthPncStat1to151=g3healthPncStat1to151, g3atmportpg2SGNumber173=g3atmportpg2SGNumber173, g3atmportpg3LSGNumber8=g3atmportpg3LSGNumber8, g3statstaSwitchPort=g3statstaSwitchPort, g3pkpnblockEntry=g3pkpnblockEntry, g3pkipsignalHourPktsLostPct=g3pkipsignalHourPktsLostPct, g3pkmmisumMeasHour=g3pkmmisumMeasHour, g3esparmsNetCommunity23=g3esparmsNetCommunity23, g3pkhuntTimeAvail=g3pkhuntTimeAvail, g3attdgrpSpeedAns=g3attdgrpSpeedAns, g3pkloadoutOutOutgoingPeg=g3pkloadoutOutOutgoingPeg, definity_ecs=definity_ecs, g3mgrecruleTcount=g3mgrecruleTcount, g3pnblockTdmBlockage=g3pnblockTdmBlockage, g3gatewaySiteData2=g3gatewaySiteData2, g3pnblockTdelay=g3pnblockTdelay, g3mmisumPercentBlock=g3mmisumPercentBlock, g3extdevTdelay=g3extdevTdelay, g3gatewayRegistered=g3gatewayRegistered, g3ipinterfaceNodeName6=g3ipinterfaceNodeName6, g3tonerecDTMFPkAlloc=g3tonerecDTMFPkAlloc, g3cabinetLayout=g3cabinetLayout, g3atmportpg3TGNumber184=g3atmportpg3TGNumber184, g3eventday=g3eventday, g3atmportpg2TGNumber156=g3atmportpg2TGNumber156, g3pkhuntGroupSize=g3pkhuntGroupSize, g3nodenameIP4=g3nodenameIP4, g3callratetotalRunHour=g3callratetotalRunHour, g3gatewayG700ModTypeV9=g3gatewayG700ModTypeV9, g3clientDescription=g3clientDescription, g3siggroupBoard15=g3siggroupBoard15, g3tonerecsumDTMFPQueue=g3tonerecsumDTMFPQueue, g3principalCovPath7=g3principalCovPath7, g3eventhourTcount=g3eventhourTcount, g3alarms=g3alarms, g3ipcodecsumTdelay=g3ipcodecsumTdelay, g3trapActive=g3trapActive, g3mediacfgVintage=g3mediacfgVintage, g3stationDataName=g3stationDataName, g3pktonerecPNNumber=g3pktonerecPNNumber, g3pktrunkwbsumHour=g3pktrunkwbsumHour, g3bulletinMessage43=g3bulletinMessage43, g3restartCraftDemand=g3restartCraftDemand, g3pkprincipalCallsCSCB=g3pkprincipalCallsCSCB, g3bulletinDate58=g3bulletinDate58, g3healthCab31to4422=g3healthCab31to4422, g3atmportpg1SGNumber84=g3atmportpg1SGNumber84, g3callratemediaMeasHour2=g3callratemediaMeasHour2, g3esservers=g3esservers, g3principalTintvl=g3principalTintvl, g3atmportpg2SGNumber151=g3atmportpg2SGNumber151, g3filterMediaGateway=g3filterMediaGateway, g3clientConnectType=g3clientConnectType, g3trunkwbsumPercentOutBlk=g3trunkwbsumPercentOutBlk, g3alarmsAck=g3alarmsAck, g3atmportpg1TGNumber54=g3atmportpg1TGNumber54, g3ipinterfaceSlot40=g3ipinterfaceSlot40, g3alarmsDayAlrmd=g3alarmsDayAlrmd, g3mmisumTage=g3mmisumTage, g3atmportpg3TGNumber210=g3atmportpg3TGNumber210, g3ds1Tretrieve=g3ds1Tretrieve, g3callratetotalNumCallsToday=g3callratetotalNumCallsToday, g3bulletinDate47=g3bulletinDate47, g3pkloadincIncOutgoingUse=g3pkloadincIncOutgoingUse, g3nodenameTable=g3nodenameTable, g3callratevoiceRunDay=g3callratevoiceRunDay, g3configTcount=g3configTcount, g3callratevoiceNumCallsYesterday2=g3callratevoiceNumCallsYesterday2, g3statregionTintvl=g3statregionTintvl, g3pkcovpathPoint5Aband=g3pkcovpathPoint5Aband, g3vintageCANotify=g3vintageCANotify, g3pkclansocsumTcount=g3pkclansocsumTcount, g3atmpncPncHoDsp1B=g3atmpncPncHoDsp1B, g3huntTcount=g3huntTcount, g3annallYear=g3annallYear, g3filterTable=g3filterTable, g3pkmmisumDay=g3pkmmisumDay, g3stamediaGatewayStatus23=g3stamediaGatewayStatus23, g3esparmsNetCommunity24=g3esparmsNetCommunity24, g3pktrunklightTcount=g3pktrunklightTcount, definity_g3=definity_g3, g3vintageACAFlag=g3vintageACAFlag, g3routepatternEntry=g3routepatternEntry, g3bulletinDate55=g3bulletinDate55, g3attdgrpTdelay=g3attdgrpTdelay, g3atmportpg2TGNumber115=g3atmportpg2TGNumber115, g3siggroupIntfNum14=g3siggroupIntfNum14, g3pktonerecCCTTRPnAlloc=g3pktonerecCCTTRPnAlloc, g3pktonerecsumCCTTRPReq=g3pktonerecsumCCTTRPReq, g3pktonerecsumDTMRTAvail=g3pktonerecsumDTMRTAvail, g3loadoutMonth=g3loadoutMonth, g3portNumber=g3portNumber, g3atmportpg1SGNumber65=g3atmportpg1SGNumber65, g3atmportpg1TGNumber1=g3atmportpg1TGNumber1, g3atmportpg3SGNumber245=g3atmportpg3SGNumber245, g3pkipcodecsumMeasHour=g3pkipcodecsumMeasHour, g3gateway=g3gateway, g3eventhourFirstHour=g3eventhourFirstHour, g3esparmsNetCommunity52=g3esparmsNetCommunity52, g3ds1Name=g3ds1Name, g3filter=g3filter, g3atmportpg1TGNumber62=g3atmportpg1TGNumber62, g3pkclansocsumBoard=g3pkclansocsumBoard, g3statmedproTintvl=g3statmedproTintvl, g3vintageIPStaAvail=g3vintageIPStaAvail, g3ipserverPrimIP1=g3ipserverPrimIP1, g3pkhuntHour=g3pkhuntHour, g3clanpppTage=g3clanpppTage, g3bulletinDate52=g3bulletinDate52, g3atmlatencyPNPair=g3atmlatencyPNPair, g3vintageSpeBupID=g3vintageSpeBupID, g3configPort19=g3configPort19, g3ipserverTable=g3ipserverTable, g3ipserverSecIP3=g3ipserverSecIP3, g3ipinterfaceNodeName44=g3ipinterfaceNodeName44, g3loadoutOutOutgoingUse=g3loadoutOutOutgoingUse, g3pkcovpathTcount=g3pkcovpathTcount, g3atmportpg3TGNumber209=g3atmportpg3TGNumber209, g3busyrlsBoard=g3busyrlsBoard, g3atmportpg3TGNumber233=g3atmportpg3TGNumber233, g3busytrkAltName=g3busytrkAltName, g3busybrdAction=g3busybrdAction, g3atmportpg1SGNumber13=g3atmportpg1SGNumber13, g3pksnblockHour=g3pksnblockHour, g3atmlatencyTdelay=g3atmlatencyTdelay, g3esparmsNetCommunity64=g3esparmsNetCommunity64, g3siggroupIntfNum5=g3siggroupIntfNum5, g3pkannallMaxPorts=g3pkannallMaxPorts, g3commlinkTable=g3commlinkTable, experimental=experimental, g3datamodName=g3datamodName, g3secviolateTtlInvalidSSC=g3secviolateTtlInvalidSSC, g3atmportpg1TGNumber6=g3atmportpg1TGNumber6, g3bulletinDate29=g3bulletinDate29, g3atmportpg1TGNumber3=g3atmportpg1TGNumber3, g3tonerecCCCPTRPkAlloc=g3tonerecCCCPTRPkAlloc, g3huntlistTretrieve=g3huntlistTretrieve, g3ipregionTcount=g3ipregionTcount)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3cabinetRack=g3cabinetRack, g3cbctrunkPlan1=g3cbctrunkPlan1, g3atmlatencyTage=g3atmlatencyTage, g3callratemediaBsyIntSc=g3callratemediaBsyIntSc, g3atmportpg2SGNumber161=g3atmportpg2SGNumber161, g3pkprincipalTdelay=g3pkprincipalTdelay, g3tonerecMonth=g3tonerecMonth, g3gatewayIPAddress=g3gatewayIPAddress, g3atmportpg3SGNumber243=g3atmportpg3SGNumber243, g3atmportpg2TGNumber180=g3atmportpg2TGNumber180, g3trapTrunkMember=g3trapTrunkMember, g3pktonerecCCMFCRTotOffPN=g3pktonerecCCMFCRTotOffPN, g3huntlistTable=g3huntlistTable, g3cbctrunkOvfTG=g3cbctrunkOvfTG, g3healthPncStat31to4430=g3healthPncStat31to4430, g3pktrunksumQueOvf=g3pktrunksumQueOvf, g3healthPncStat31to4424=g3healthPncStat31to4424, g3atmportpg2SGNumber176=g3atmportpg2SGNumber176, g3pksnblockTcount=g3pksnblockTcount, g3siggroupIntfNum10=g3siggroupIntfNum10, g3callratemediaBsyIntHrYesterday=g3callratemediaBsyIntHrYesterday, g3snblockSnPeg=g3snblockSnPeg, g3cbctrunkTotSeize=g3cbctrunkTotSeize, g3station=g3station, g3pkloadtanYear=g3pkloadtanYear, g3mmisumTotalUsage=g3mmisumTotalUsage, g3pkrpatCallsQueued=g3pkrpatCallsQueued, g3pkesmsumTretrieve=g3pkesmsumTretrieve, g3healthPncStat16to3029=g3healthPncStat16to3029, g3voicesumDay=g3voicesumDay, g3rpatcfgPattern19=g3rpatcfgPattern19, g3atmpncTintvl=g3atmpncTintvl, g3agentLspConfig=g3agentLspConfig, g3annintegMonth=g3annintegMonth, g3tonerecCCTTRPkOffPN=g3tonerecCCTTRPkOffPN, g3covpathPoint3Aband=g3covpathPoint3Aband, g3pktrunksumEntry=g3pktrunksumEntry, g3busyrlsPort=g3busyrlsPort, g3pkipcodecsumDay=g3pkipcodecsumDay, g3ipsignalMeasHour=g3ipsignalMeasHour, g3pktrunksum=g3pktrunksum, g3atmpncTage=g3atmpncTage, g3pkipcodecsumG711OutRegion=g3pkipcodecsumG711OutRegion, g3atmcfgVintage=g3atmcfgVintage, g3pkannintegMaxPorts=g3pkannintegMaxPorts, g3trkgrpmemPort=g3trkgrpmemPort, g3ipdspsumTage=g3ipdspsumTage, g3configBoardType=g3configBoardType, g3errorsAuxData=g3errorsAuxData, g3pkhuntTable=g3pkhuntTable, g3callratevoiceBsyCalCmplYesterday2=g3callratevoiceBsyCalCmplYesterday2, g3callratedataBsyIntMn=g3callratedataBsyIntMn, g3acaDay=g3acaDay, g3atmportpg3SGNumber208=g3atmportpg3SGNumber208, g3pkloadintIntIntraPNPeg=g3pkloadintIntIntraPNPeg, g3atmlatency=g3atmlatency, g3clientCommunity=g3clientCommunity, g3loadtanYear=g3loadtanYear, g3lsplistXlnUpdated=g3lsplistXlnUpdated, g3healthIdleOcc=g3healthIdleOcc, g3vintagePbxID=g3vintagePbxID, g3atmportpg3LTGNumber2=g3atmportpg3LTGNumber2, g3atmportpg1SGNumber44=g3atmportpg1SGNumber44, g3pkannintegEntry=g3pkannintegEntry, g3errorsAltName=g3errorsAltName, g3pktrunkoutTretrieve=g3pktrunkoutTretrieve, g3pkclansocsumRegion=g3pkclansocsumRegion, g3trkgrpmem=g3trkgrpmem, g3atmpncTcount=g3atmpncTcount, g3atmportpg2SGNumber112=g3atmportpg2SGNumber112, g3pktonerecTage=g3pktonerecTage, g3atmportpg2TGNumber101=g3atmportpg2TGNumber101, g3esparmsMinute=g3esparmsMinute, g3atmcfgEntry=g3atmcfgEntry, g3attdgrpRunYear=g3attdgrpRunYear, g3pktonerecsumGPTDHour=g3pktonerecsumGPTDHour, g3secviolateTage=g3secviolateTage, g3covpathCallsOffCA=g3covpathCallsOffCA, g3callratemedia=g3callratemedia, g3callratevoiceTdelay=g3callratevoiceTdelay, g3statregionTdelay=g3statregionTdelay, g3alarmsHourAlrmd=g3alarmsHourAlrmd, g3siggroupIntfNum6=g3siggroupIntfNum6, g3esserversTdelay=g3esserversTdelay, g3nodenameIP1=g3nodenameIP1, g3statlinkTdelay=g3statlinkTdelay, g3ipserverSecServer=g3ipserverSecServer, g3stamediaTage=g3stamediaTage, g3ipinterfaceTintvl=g3ipinterfaceTintvl, g3busytrkMember=g3busytrkMember, g3ipinterfaceNodeName42=g3ipinterfaceNodeName42, g3errorsDayFirst=g3errorsDayFirst, g3trapResolved=g3trapResolved, g3pkvoicesumTotalAllocation=g3pkvoicesumTotalAllocation, g3bulletinMessage4=g3bulletinMessage4, g3clientDialString1=g3clientDialString1, g3attdgrp=g3attdgrp, g3pkannallHour=g3pkannallHour, g3siggroupBoard3=g3siggroupBoard3, g3healthPncStat1to1513=g3healthPncStat1to1513, g3trunkmemTable=g3trunkmemTable, g3bulletinDate20=g3bulletinDate20, g3trunkwbsumMonth=g3trunkwbsumMonth, g3commlinkTdelay=g3commlinkTdelay, g3esparmsNetCommunity7=g3esparmsNetCommunity7, g3attdposPkTimeHeld=g3attdposPkTimeHeld, g3tonerecCCMFCRPkOffPN=g3tonerecCCMFCRPkOffPN, g3pktrunkwbsumTretrieve=g3pktrunkwbsumTretrieve, g3tonerecDay=g3tonerecDay, g3trunkgrpTable=g3trunkgrpTable, g3pnchealthTage=g3pnchealthTage, g3annintegAllPortsBusy=g3annintegAllPortsBusy, g3ipinterfaceNodeName76=g3ipinterfaceNodeName76, g3statmedproDupAlarmWrn=g3statmedproDupAlarmWrn, g3atmlatencyTcount=g3atmlatencyTcount, g3pksnblockSnPeg=g3pksnblockSnPeg, g3callratesrvBsyIntHr=g3callratesrvBsyIntHr, g3routepatternTGNumber8=g3routepatternTGNumber8, g3atmportpg3TGNumber219=g3atmportpg3TGNumber219, g3secviolateTrkInvalidAC=g3secviolateTrkInvalidAC, g3atmportpg2SGNumber117=g3atmportpg2SGNumber117, g3attdposPkCallsAns=g3attdposPkCallsAns, g3statmedproDupPhysicalAddr=g3statmedproDupPhysicalAddr, g3healthMajor=g3healthMajor, g3loadtotal=g3loadtotal, g3occsumSMOcc=g3occsumSMOcc, g3callratedataBsyCalCmplToday2=g3callratedataBsyCalCmplToday2, g3agentServer2Name=g3agentServer2Name, g3stamediaGatewayStatus58=g3stamediaGatewayStatus58, g3ipinterfaceSlot78=g3ipinterfaceSlot78, g3clanpppTretrieve=g3clanpppTretrieve, g3cabinetCarDType=g3cabinetCarDType, g3pkrpatCallsOffered=g3pkrpatCallsOffered, g3trapInterval=g3trapInterval, g3siggroupSecDChannel=g3siggroupSecDChannel, g3pkesmsumTable=g3pkesmsumTable, g3huntTotalUsage=g3huntTotalUsage, g3ipinterfaceNodeName48=g3ipinterfaceNodeName48, g3callratetotalNumCallsToday2=g3callratetotalNumCallsToday2, g3cartypeCab3CarBType=g3cartypeCab3CarBType, g3bulletinDate12=g3bulletinDate12, g3pktonerecsumRunYear=g3pktonerecsumRunYear, g3pkatmlatencyTable=g3pkatmlatencyTable, g3clanpppDate=g3clanpppDate, g3esmainServerAIP1=g3esmainServerAIP1, g3ipinterfaceNodeName31=g3ipinterfaceNodeName31, g3pnblockTage=g3pnblockTage, g3trunkcfgTcount=g3trunkcfgTcount, g3rpatcfgPattern10=g3rpatcfgPattern10, g3tonerecsumCCTTRPReq=g3tonerecsumCCTTRPReq, g3ipinterfaceSlot31=g3ipinterfaceSlot31, g3principal=g3principal, g3pnchealthIntchDisble=g3pnchealthIntchDisble, g3eventdayEventType=g3eventdayEventType, g3mediacfgTage=g3mediacfgTage, g3callratevoiceBsyIntMnToday=g3callratevoiceBsyIntMnToday, g3dmodulePort=g3dmodulePort, g3atmportpg1SGNumber57=g3atmportpg1SGNumber57, g3busytrkLastError=g3busytrkLastError, g3ds1Location=g3ds1Location, g3loadintDay=g3loadintDay, g3stamediaGatewayStatus2=g3stamediaGatewayStatus2, g3siggroupIntfNum11=g3siggroupIntfNum11, g3acaDayTime=g3acaDayTime, g3stationcfgVintage=g3stationcfgVintage, g3atmportpg1TGNumber85=g3atmportpg1TGNumber85, g3siggroupEntry=g3siggroupEntry, g3atmportpg2SGNumber153=g3atmportpg2SGNumber153, g3pkipsignalTcount=g3pkipsignalTcount, g3ds1cfgSuffix=g3ds1cfgSuffix, g3atmportpg1SGNumber63=g3atmportpg1SGNumber63, g3callratedataBsyIntHrToday=g3callratedataBsyIntHrToday, g3esserversLocalOnly=g3esserversLocalOnly, g3attdposTretrieve=g3attdposTretrieve, g3trunklightDay=g3trunklightDay, g3stamediaGatewayStatus42=g3stamediaGatewayStatus42, g3atmportpg3LSGNumber7=g3atmportpg3LSGNumber7, g3huntlistName=g3huntlistName, g3trapCabinet=g3trapCabinet, g3healthTintvl=g3healthTintvl, g3atmportpg2TGNumber155=g3atmportpg2TGNumber155, blade_server=blade_server, g3pkipcodecsumTable=g3pkipcodecsumTable, g3pkannallAnnNbr=g3pkannallAnnNbr, g3ipinterfaceSlot54=g3ipinterfaceSlot54, g3callratesrvBsyCalCmplYesterday=g3callratesrvBsyCalCmplYesterday, g3callratemediaTretrieve=g3callratemediaTretrieve, g3clansocsumMonth=g3clansocsumMonth, g3trunkwbsumPercentAtb=g3trunkwbsumPercentAtb, g3atmportpg2TGNumber129=g3atmportpg2TGNumber129, g3msgalmDescription=g3msgalmDescription, g3bulletinDate11=g3bulletinDate11, g3bulletinMessage42=g3bulletinMessage42, g3atmportpg2TGNumber92=g3atmportpg2TGNumber92, g3atmportpg2TGNumber125=g3atmportpg2TGNumber125, g3loadoutYear=g3loadoutYear, g3esparmsNetCommunity45=g3esparmsNetCommunity45, g3agentServer1IP=g3agentServer1IP, g3pkhuntSpeedAns=g3pkhuntSpeedAns, directory=directory, g3statstaConnPort2=g3statstaConnPort2, g3pnblock=g3pnblock, g3acaEntry=g3acaEntry, g3annallHour=g3annallHour, g3stamediaGatewayStatus37=g3stamediaGatewayStatus37, g3pkloadintHour=g3pkloadintHour, g3stamediaGatewayStatus18=g3stamediaGatewayStatus18, g3pnchealthPncAWarning=g3pnchealthPncAWarning, g3pktonerecsumGPTDPReq=g3pktonerecsumGPTDPReq, g3stamediaGatewayStatus27=g3stamediaGatewayStatus27, g3loadtanMonth=g3loadtanMonth, g3atmportpg3SGNumber223=g3atmportpg3SGNumber223, g3atmportpg3TGNumber234=g3atmportpg3TGNumber234, g3atmportpg1SGNumber73=g3atmportpg1SGNumber73, g3clanpppTcount=g3clanpppTcount, g3bulletinDate36=g3bulletinDate36, g3pnblockMonth=g3pnblockMonth, g3lsplistIPAddr3=g3lsplistIPAddr3, g3tonerecsumGPTDTDeny=g3tonerecsumGPTDTDeny, g3atmportpg2SGNumber166=g3atmportpg2SGNumber166, g3pkannintegTcount=g3pkannintegTcount, g3atmportpg3Location=g3atmportpg3Location, g3atmportpg2SGNumber131=g3atmportpg2SGNumber131, g3trunklightYear=g3trunklightYear, g3atmportpg2SGNumber172=g3atmportpg2SGNumber172, g3pktrunksumRunDay=g3pktrunksumRunDay, g3ipinterfaceSlot29=g3ipinterfaceSlot29, g3configTage=g3configTage, g3platcmdsCommand=g3platcmdsCommand, g3dmoduleTcount=g3dmoduleTcount, g3gatewayHWVintage=g3gatewayHWVintage, g3pkhuntCallsAban=g3pkhuntCallsAban, g3ipinterfaceSlot57=g3ipinterfaceSlot57, g3ipinterfaceSlot80=g3ipinterfaceSlot80, g3atmpncPncE164B=g3atmpncPncE164B, g3busybrd=g3busybrd, g3healthCab16to3018=g3healthCab16to3018, g3esparmsNetCommunity50=g3esparmsNetCommunity50, g3atmportpg2SGNumber174=g3atmportpg2SGNumber174, g3atmportpg1TGNumber28=g3atmportpg1TGNumber28, g3trkgrpmemEntry=g3trkgrpmemEntry, g3trunkmemGroup=g3trunkmemGroup, g3atmportpg3SGNumber193=g3atmportpg3SGNumber193, g3pkhuntMonth=g3pkhuntMonth, g3pkesmsumESMDenials=g3pkesmsumESMDenials, g3atmportpg1TGNumber47=g3atmportpg1TGNumber47, g3stamedia=g3stamedia, g3ipinterfaceSlot85=g3ipinterfaceSlot85, g3stamediaAlarmMajor=g3stamediaAlarmMajor, g3callratesrvBsyIntHrYesterday2=g3callratesrvBsyIntHrYesterday2, g3tonerecGPTDPkOffPN=g3tonerecGPTDPkOffPN, g3statmedproBroadCastAddr=g3statmedproBroadCastAddr, g3cabinetSRProductID=g3cabinetSRProductID, g3atmportpg2SGNumber165=g3atmportpg2SGNumber165)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3trunksumPercentAtb=g3trunksumPercentAtb, g3healthCab1to153=g3healthCab1to153, g3clientEntry=g3clientEntry, g3datamstaConnPort8=g3datamstaConnPort8, g3configPort24=g3configPort24, g3rpatcfgPattern13=g3rpatcfgPattern13, g3ipdspsumTable=g3ipdspsumTable, g3bulletinDate56=g3bulletinDate56, g3trkgrpmemType=g3trkgrpmemType, g3ipinterfaceSlot10=g3ipinterfaceSlot10, g3esserversServerAIP3=g3esserversServerAIP3, g3atmportpg1TGNumber9=g3atmportpg1TGNumber9, g3pkloadoutEntry=g3pkloadoutEntry, g3statmedproState=g3statmedproState, g3atmportpg2TGNumber103=g3atmportpg2TGNumber103, g3ipinterfaceSlot45=g3ipinterfaceSlot45, g3siggroupBoard17=g3siggroupBoard17, g3trunkstaConnPort6=g3trunkstaConnPort6, g3callratedataMeasHour=g3callratedataMeasHour, g3covpathTintvl=g3covpathTintvl, g3healthCallpOcc=g3healthCallpOcc, g3atmportpg1SGNumber56=g3atmportpg1SGNumber56, g3acaTretrieve=g3acaTretrieve, g3vintageATMPnc=g3vintageATMPnc, g3pkloadtotalTretrieve=g3pkloadtotalTretrieve, g3eventdayFirstMinute=g3eventdayFirstMinute, g3pkannintegASP=g3pkannintegASP, g3pkcovpathPoint6Ans=g3pkcovpathPoint6Ans, g3atmportpg2TGNumber104=g3atmportpg2TGNumber104, g3cbctrunkTdelay=g3cbctrunkTdelay, g3voicesumMeasHour=g3voicesumMeasHour, g3pkcovpathPoint1Aband=g3pkcovpathPoint1Aband, g3cartypeCab2CarAType=g3cartypeCab2CarAType, g3busytrkResult=g3busytrkResult, g3trunkwbsumTcount=g3trunkwbsumTcount, g3covpathCallsOffSAC=g3covpathCallsOffSAC, g3pkipsignalEntry=g3pkipsignalEntry, g3trapDestination=g3trapDestination, g3datamstaConnPort1=g3datamstaConnPort1, g3datamstaMaintBusy=g3datamstaMaintBusy, g3atmlatencyMeasHour1B=g3atmlatencyMeasHour1B, g3mediacfgTable=g3mediacfgTable, g3annintegBoard=g3annintegBoard, g3loadtotalTintvl=g3loadtotalTintvl, g3bulletinMessage7=g3bulletinMessage7, g3pkmmisumTretrieve=g3pkmmisumTretrieve, g3connectTimeReset=g3connectTimeReset, g3loadoutDay=g3loadoutDay, g3statmedproDSPChanStatus1=g3statmedproDSPChanStatus1, g3busybrdEntry=g3busybrdEntry, g3atmpncTretrieve=g3atmpncTretrieve, g3pkpnblockPNlinkBlockage=g3pkpnblockPNlinkBlockage, g3pnblockTdmPeak=g3pnblockTdmPeak, g3alarmsTintvl=g3alarmsTintvl, g3voicesumYear=g3voicesumYear, g3ds1Entry=g3ds1Entry, g3attdgrpTimeAvail=g3attdgrpTimeAvail, g3pkloadtanHour=g3pkloadtanHour, g3callratemediaNumCallsYesterday=g3callratemediaNumCallsYesterday, g3atmtrunkSynch=g3atmtrunkSynch, g3pkvoicesumH320Denials=g3pkvoicesumH320Denials, g3stamediaAlarmWarning=g3stamediaAlarmWarning, g3esparmsNetCommunity21=g3esparmsNetCommunity21, g3pktrunkwbsum=g3pktrunkwbsum, g3callratevoiceBsyIntMnYesterday2=g3callratevoiceBsyIntMnYesterday2, g3atmportpg3LSGNumber5=g3atmportpg3LSGNumber5, g3configPort25=g3configPort25, g3annallMeasHour=g3annallMeasHour, g3ipinterfaceNodeName70=g3ipinterfaceNodeName70, g3eventdayTintvl=g3eventdayTintvl, g3configPort22=g3configPort22, g3mgrecruleEntry=g3mgrecruleEntry, g3mediacfgTcount=g3mediacfgTcount, g3rpatcfgPattern23=g3rpatcfgPattern23, g3clansocsumMeasHour=g3clansocsumMeasHour, g3statmedproTdelay=g3statmedproTdelay, g3esparmsNetCommunity29=g3esparmsNetCommunity29, g3ipnetregionTretrieve=g3ipnetregionTretrieve, g3clanetherTime=g3clanetherTime, g3pksnblockUsage=g3pksnblockUsage, g3statmedproDSPChanStatus2=g3statmedproDSPChanStatus2, g3callratedataBsyIntSc=g3callratedataBsyIntSc, g3atmportpg2SGNumber171=g3atmportpg2SGNumber171, g3atmportpg1TGNumber57=g3atmportpg1TGNumber57, g3occsumPeakHour=g3occsumPeakHour, g3atmportpg2TGNumber128=g3atmportpg2TGNumber128, g3esparmsNetCommunity37=g3esparmsNetCommunity37, g3proxmib=g3proxmib, g3trapPortNetwork=g3trapPortNetwork, g3ipcodecsumDay=g3ipcodecsumDay, g3ipinterfaceNodeName66=g3ipinterfaceNodeName66, g3statmedproDSPChanStatus6=g3statmedproDSPChanStatus6, g3rpatcfgPattern5=g3rpatcfgPattern5, g3huntlist=g3huntlist, g3callratedataRunMonth=g3callratedataRunMonth, g3healthCab16to3026=g3healthCab16to3026, g3dmoduleTretrieve=g3dmoduleTretrieve, g3secviolateHour=g3secviolateHour, g3atmportpg1SGNumber22=g3atmportpg1SGNumber22, g3lsplistIPAddr4=g3lsplistIPAddr4, g3atmportpg1TGNumber84=g3atmportpg1TGNumber84, g3lsplistTcount=g3lsplistTcount, g3stamediaNbrLogins=g3stamediaNbrLogins, g3trkgrpmemTintvl=g3trkgrpmemTintvl, g3pkannintegCallsQueued=g3pkannintegCallsQueued, g3pkclansocsumPcttmASB=g3pkclansocsumPcttmASB, g3lsplistTable=g3lsplistTable, g3busybrdBoardVal=g3busybrdBoardVal, g3voicesumTretrieve=g3voicesumTretrieve, g3cartypeCab1CarBType=g3cartypeCab1CarBType, g3stamediaGatewayStatus51=g3stamediaGatewayStatus51, g3rpatQueueSize=g3rpatQueueSize, g3atmportpg2SGNumber149=g3atmportpg2SGNumber149, g3atmportpg2TGNumber100=g3atmportpg2TGNumber100, g3clientState=g3clientState, g3configPort23=g3configPort23, g3atmportpg2Tretrieve=g3atmportpg2Tretrieve, g3atmportpg3TGNumber231=g3atmportpg3TGNumber231, g3covpathTdelay=g3covpathTdelay, g3healthCab1to159=g3healthCab1to159, g3extdevTintvl=g3extdevTintvl, g3atmportpg1SGNumber48=g3atmportpg1SGNumber48, g3pkipcodecsumMonth=g3pkipcodecsumMonth, g3ipinterfaceSlot14=g3ipinterfaceSlot14, g3statmedproDupEnabled=g3statmedproDupEnabled, g3atmportpg3TGNumber203=g3atmportpg3TGNumber203, g3statmedproEnabled=g3statmedproEnabled, g3clanetherDate=g3clanetherDate, g3healthCab31to4430=g3healthCab31to4430, g3cabinetLocation=g3cabinetLocation, g3fiberlinkE1ADs1Board=g3fiberlinkE1ADs1Board, g3atmportpg1SGNumber2=g3atmportpg1SGNumber2, g3atmportpg3TGNumber192=g3atmportpg3TGNumber192, g3principalCallsCSCB=g3principalCallsCSCB, g3pkipsignal=g3pkipsignal, g3nodenameTdelay=g3nodenameTdelay, g3atmportpg2TGNumber135=g3atmportpg2TGNumber135, g3callratevoice=g3callratevoice, g3acaTable=g3acaTable, g3statregionTretrieve=g3statregionTretrieve, g3attdposHour=g3attdposHour, g3mgrecruleTable=g3mgrecruleTable, g3pkprincipalCovPath6=g3pkprincipalCovPath6, g3deftimeMinute=g3deftimeMinute, g3bulletinMessage51=g3bulletinMessage51, g3atmportpg3SGNumber200=g3atmportpg3SGNumber200, g3loadincIncOutgoingPeg=g3loadincIncOutgoingPeg, g3esparmsNetCommunity60=g3esparmsNetCommunity60, avaya_s8300=avaya_s8300, g3cbctrunkDay=g3cbctrunkDay, g3loadtotalTDMOccupancy=g3loadtotalTDMOccupancy, g3rpatcfgTdelay=g3rpatcfgTdelay, g3gatewayTable=g3gatewayTable, g3esparmsNetCommunity48=g3esparmsNetCommunity48, g3statmedproEntry=g3statmedproEntry, g3healthWarning=g3healthWarning, g3pkvoicesumEntry=g3pkvoicesumEntry, g3esparmsNetCommunity59=g3esparmsNetCommunity59, g3trapToDay=g3trapToDay, g3ipinterfaceNodeName71=g3ipinterfaceNodeName71, g3loadintIntIntraPNUse=g3loadintIntIntraPNUse, g3cartypeCab2CarEType=g3cartypeCab2CarEType, g3trunkstaConnPort1=g3trunkstaConnPort1, g3ipinterfaceNodeName54=g3ipinterfaceNodeName54, g3loadtan=g3loadtan, g3esserversClusterId=g3esserversClusterId, g3regipstatTcount=g3regipstatTcount, g3bulletinDate34=g3bulletinDate34, g3clanpppInvFrameDelta=g3clanpppInvFrameDelta, g3clanetherTcount=g3clanetherTcount, g3atmtrunkTable=g3atmtrunkTable, g3atmportpg1SGNumber40=g3atmportpg1SGNumber40, g3tonerecTage=g3tonerecTage, g3stamediaGatewayStatus7=g3stamediaGatewayStatus7, g3callratetotalBsyIntScToday2=g3callratetotalBsyIntScToday2, g3connectQueued=g3connectQueued, g3atmportpg3SGNumber191=g3atmportpg3SGNumber191, g3loadintYear=g3loadintYear, g3bulletinMessage32=g3bulletinMessage32, g3trunksumRunHour=g3trunksumRunHour, g3healthPncStat16to3023=g3healthPncStat16to3023, g3covpathTage=g3covpathTage, g3callratesrvBsyIntScToday=g3callratesrvBsyIntScToday, g3pkesmsumTotalUsage=g3pkesmsumTotalUsage, g3covpathPoint1Ans=g3covpathPoint1Ans, g3clanetherCrcChkDelta=g3clanetherCrcChkDelta, g3atmportpg1SGNumber88=g3atmportpg1SGNumber88, g3pkloadtanTanIncomingPeg=g3pkloadtanTanIncomingPeg, g3voicesumTdelay=g3voicesumTdelay, g3atmportpg1SGNumber18=g3atmportpg1SGNumber18, g3stationEntry=g3stationEntry, g3busytrkErrorCode=g3busytrkErrorCode, g3mmisumPercentAPB=g3mmisumPercentAPB, g3pkcovpathPoint3Aband=g3pkcovpathPoint3Aband, g3atmportpg2SGNumber170=g3atmportpg2SGNumber170, g3cabinetCarBPNN=g3cabinetCarBPNN, g3trunkgrpDirection=g3trunkgrpDirection, g3pkmmisumMMIDenials=g3pkmmisumMMIDenials, g3secviolateSecViolate=g3secviolateSecViolate, g3vintageAbbAlmRep1=g3vintageAbbAlmRep1, g3callratedataBsyIntMnYesterday=g3callratedataBsyIntMnYesterday, g3esserversServerAIP1=g3esserversServerAIP1, g3atmportpg1TGNumber87=g3atmportpg1TGNumber87, g3atmportpg1SGNumber27=g3atmportpg1SGNumber27, g3bulletinMessage10=g3bulletinMessage10, g3fiberlinkE1Type=g3fiberlinkE1Type, g3pktrunkwbsumMonth=g3pktrunkwbsumMonth, g3pkloadtanTintvl=g3pkloadtanTintvl, g3deftime=g3deftime, g3occsumStatOcc=g3occsumStatOcc, g3secviolateTtlValidAC=g3secviolateTtlValidAC, g3agentServer1Name=g3agentServer1Name, g3atmportpg2SGNumber178=g3atmportpg2SGNumber178, g3filterExtension=g3filterExtension, g3ipcodecsumG723Usage=g3ipcodecsumG723Usage, g3ds1cfgCode=g3ds1cfgCode, g3trap=g3trap, g3bulletinDate30=g3bulletinDate30, g3pktrunklightEntry=g3pktrunklightEntry, g3trunkgrpShortThreshold=g3trunkgrpShortThreshold, g3ipintlistTable=g3ipintlistTable, g3atmportpg2TGNumber139=g3atmportpg2TGNumber139, g3pkannallName=g3pkannallName, g3atmportpg1SGNumber37=g3atmportpg1SGNumber37, g3pkipdspsumMeasHour=g3pkipdspsumMeasHour, g3esserversTage=g3esserversTage, g3alarmsDayRslvd=g3alarmsDayRslvd, g3stamediaGatewayStatus31=g3stamediaGatewayStatus31, g3extdevTage=g3extdevTage, g3tonerecsumCCTTRPDeny=g3tonerecsumCCTTRPDeny, g3ipinterfaceNodeName67=g3ipinterfaceNodeName67, g3vintageTage=g3vintageTage, g3atmportpg1SGNumber29=g3atmportpg1SGNumber29, g3stamediaGatewayStatus47=g3stamediaGatewayStatus47, g3callratetotalTintvl=g3callratetotalTintvl, g3pkclansocsumTdelay=g3pkclansocsumTdelay, g3healthPncStat1to156=g3healthPncStat1to156, g3timedateMinute=g3timedateMinute, g3atmportpg3TGNumber182=g3atmportpg3TGNumber182, g3ipinterfaceNodeName53=g3ipinterfaceNodeName53, g3ipserverTcount=g3ipserverTcount, g3esparmsTretrieve=g3esparmsTretrieve, g3pkvoicesumYear=g3pkvoicesumYear, g3callratemediaBsyIntScYesterday2=g3callratemediaBsyIntScYesterday2, g3atmportpg3SGNumber197=g3atmportpg3SGNumber197, g3callratevoiceBsyIntHrToday=g3callratevoiceBsyIntHrToday, g3statmedproDupSourceIP=g3statmedproDupSourceIP, g3trunkoutTage=g3trunkoutTage, g3tonerecPNNumber=g3tonerecPNNumber, g3pkloadtanTdelay=g3pkloadtanTdelay, g3atmportpg1SGNumber41=g3atmportpg1SGNumber41, g3ipinterfaceSlot9=g3ipinterfaceSlot9, g3pkatmlatencyEntry=g3pkatmlatencyEntry, g3mgrecruleRecRule=g3mgrecruleRecRule)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3pkloadintTcount=g3pkloadintTcount, g3secviolateEntry=g3secviolateEntry, g3pktrunkoutMonth=g3pktrunkoutMonth, g3atmportpg1TGNumber86=g3atmportpg1TGNumber86, g3atmportpg3SGNumber202=g3atmportpg3SGNumber202, g3ipdspsumDay=g3ipdspsumDay, g3filterFilterStatus=g3filterFilterStatus, g3stamediaGatewayStatus74=g3stamediaGatewayStatus74, g3bulletinDate42=g3bulletinDate42, g3pktrunksumGroupSize=g3pktrunksumGroupSize, g3ipinterfaceNodeName77=g3ipinterfaceNodeName77, g3voicesumH320Usage=g3voicesumH320Usage, g3pkloadtotalMonth=g3pkloadtotalMonth, g3pktonerecGPTDTotOffPN=g3pktonerecGPTDTotOffPN, g3trunkwbsumTage=g3trunkwbsumTage, g3portId=g3portId, g3secviolatePortType=g3secviolatePortType, g3atmportpg1TGNumber33=g3atmportpg1TGNumber33, g3pkipdspsumRegion=g3pkipdspsumRegion, g3atmportpg1TGNumber34=g3atmportpg1TGNumber34, g3trunkoutMember=g3trunkoutMember, g3ipcodecsumMonth=g3ipcodecsumMonth, g3esparmsNetCommunity49=g3esparmsNetCommunity49, g3callratetotalBsyIntScToday=g3callratetotalBsyIntScToday, g3atmportpg2SGNumber121=g3atmportpg2SGNumber121, g3ipinterfaceSlot50=g3ipinterfaceSlot50, g3trunkoutOutages=g3trunkoutOutages, g3callratemediaBsyIntHrToday2=g3callratemediaBsyIntHrToday2, mgmt=mgmt, g3gatewayG350ModTypeV7=g3gatewayG350ModTypeV7, g3cbctrunkPlan6=g3cbctrunkPlan6, g3clansocsumTintvl=g3clansocsumTintvl, g3pktrunksumRunHour=g3pktrunksumRunHour, g3pkclansocsumHour=g3pkclansocsumHour, g3principalTretrieve=g3principalTretrieve, g3ipinterfaceNodeName3=g3ipinterfaceNodeName3, g3pkloadintIntIntraPNUse=g3pkloadintIntIntraPNUse, g3pkcovpathPoint6Aband=g3pkcovpathPoint6Aband, g3cbctrunkTcount=g3cbctrunkTcount, g3healthPncStat1to154=g3healthPncStat1to154, g3callratemediaRunHour=g3callratemediaRunHour, g3siggroupBoard9=g3siggroupBoard9, g3esserversSystemPref=g3esserversSystemPref, g3rpatTrunkGroup=g3rpatTrunkGroup, g3esparmsNetCommunity46=g3esparmsNetCommunity46, g3healthCab16to3030=g3healthCab16to3030, g3alarmsMaintName=g3alarmsMaintName, g3atmportpg1TGNumber12=g3atmportpg1TGNumber12, g3pkloadoutTretrieve=g3pkloadoutTretrieve, g3bulletinMessage25=g3bulletinMessage25, g3pkprincipalTcount=g3pkprincipalTcount, g3pkpnblockTretrieve=g3pkpnblockTretrieve, g3configTdelay=g3configTdelay, g3errorsHourFirst=g3errorsHourFirst, g3bulletinDate23=g3bulletinDate23, g3healthTretrieve=g3healthTretrieve, g3tonerecsumDTMFTQueue=g3tonerecsumDTMFTQueue, g3busyrlsTrunkGroup=g3busyrlsTrunkGroup, g3rpatcfgPattern22=g3rpatcfgPattern22, g3loadtanTcount=g3loadtanTcount, g3pkipdspsumTcount=g3pkipdspsumTcount, avaya_s8400=avaya_s8400, g3pksnblockMonth=g3pksnblockMonth, g3pnchealthTdelay=g3pnchealthTdelay, g3covpathCallsOffDA=g3covpathCallsOffDA, g3atmportpg2SGNumber150=g3atmportpg2SGNumber150, g3rpatcfgPattern24=g3rpatcfgPattern24, g3pktonerecHour=g3pktonerecHour, g3vintageIPStaReg=g3vintageIPStaReg, g3esmsumTotalAllocation=g3esmsumTotalAllocation, g3fiberlinkTcount=g3fiberlinkTcount, g3configPort13=g3configPort13, g3ipinterfaceNodeName73=g3ipinterfaceNodeName73, g3statmedproDupLinkCCL=g3statmedproDupLinkCCL, g3connectAlarmForward=g3connectAlarmForward, g3pktrunkoutTable=g3pktrunkoutTable, g3tonerecsumCCMFCRTReq=g3tonerecsumCCMFCRTReq, g3ipinterfaceNodeName2=g3ipinterfaceNodeName2, g3atmportpg3TGNumber222=g3atmportpg3TGNumber222, g3tonerecCCMFCRPkAlloc=g3tonerecCCMFCRPkAlloc, g3secviolateRAInvalidAC=g3secviolateRAInvalidAC, g3mediacfgCode=g3mediacfgCode, g3ipnetregionAudioPHB=g3ipnetregionAudioPHB, g3cabtype=g3cabtype, g3pkpnblockPNlinkUsage=g3pkpnblockPNlinkUsage, g3ipinterfaceSlot17=g3ipinterfaceSlot17, g3pktrunkwbsumGrpOvfl=g3pktrunkwbsumGrpOvfl, g3callratemediaTdelay=g3callratemediaTdelay, g3atmpncPncESIB=g3atmpncPncESIB, g3atmportpg3SGNumber233=g3atmportpg3SGNumber233, g3ds1cfgCsuMod=g3ds1cfgCsuMod, g3statregionBWUsedRx=g3statregionBWUsedRx, g3healthPncStat16to3021=g3healthPncStat16to3021, g3tonerecGPTDPkAlloc=g3tonerecGPTDPkAlloc, g3atmcfgTcount=g3atmcfgTcount, g3loadtanTanIncomingPeg=g3loadtanTanIncomingPeg, g3tonerecTretrieve=g3tonerecTretrieve, g3gatewayG700ModTypeV4=g3gatewayG700ModTypeV4, g3statmedproAlarmMaj=g3statmedproAlarmMaj, g3attdposTable=g3attdposTable, g3clanpppTintvl=g3clanpppTintvl, g3tonerecsumCCMFCRHour=g3tonerecsumCCMFCRHour, g3errorsMinLast=g3errorsMinLast, g3pkrpatTcount=g3pkrpatTcount, g3attdgrpCallsAns=g3attdgrpCallsAns, g3atmportpg3SGNumber231=g3atmportpg3SGNumber231, g3callratesrvBsyIntScYesterday=g3callratesrvBsyIntScYesterday, g3cartypeTintvl=g3cartypeTintvl, g3ds1cfgTable=g3ds1cfgTable, g3loadtanTdelay=g3loadtanTdelay, g3ipinterfaceSlot25=g3ipinterfaceSlot25, g3atmportpg2SGNumber115=g3atmportpg2SGNumber115, g3platcmdsSeqNumber=g3platcmdsSeqNumber, g3_mib=g3_mib, g3timedateHour=g3timedateHour, g3pkannintegTretrieve=g3pkannintegTretrieve, g3attdgrpTintvl=g3attdgrpTintvl, g3client=g3client, g3ipinterfaceSlot23=g3ipinterfaceSlot23, g3connectTimeUnused=g3connectTimeUnused, g3statstaSetIPAddr=g3statstaSetIPAddr, g3stamediaGatewayStatus29=g3stamediaGatewayStatus29, g3covpathMeasHour=g3covpathMeasHour, g3healthCab31to4419=g3healthCab31to4419, g3atmportpg2SGNumber163=g3atmportpg2SGNumber163, g3attdgrpTimeAbnd=g3attdgrpTimeAbnd, g3bulletinDate16=g3bulletinDate16, g3trunksumCallQued=g3trunksumCallQued, g3ipsignalYear=g3ipsignalYear, g3pkclansocsumMeasHour=g3pkclansocsumMeasHour, g3bulletinDate49=g3bulletinDate49, g3trunkmemPort=g3trunkmemPort, g3annintegMeasHour=g3annintegMeasHour, g3acaRefType=g3acaRefType, g3rpatEntry=g3rpatEntry, g3atmportpg2TGNumber179=g3atmportpg2TGNumber179, g3pkvoicesumTretrieve=g3pkvoicesumTretrieve, g3siggroupIntfNum2=g3siggroupIntfNum2, g3ipserverTretrieve=g3ipserverTretrieve, g3atmportpg1TGNumber81=g3atmportpg1TGNumber81, g3trunkstaConnPort7=g3trunkstaConnPort7, g3configBoardNum=g3configBoardNum, g3atmportpg2TGNumber107=g3atmportpg2TGNumber107, g3pktonerecsumTdelay=g3pktonerecsumTdelay, g3cbctrunkTable=g3cbctrunkTable, g3pktonerecTintvl=g3pktonerecTintvl, g3occsumMeasHour=g3occsumMeasHour, g3eventdayTable=g3eventdayTable, g3atmpncPncAFIB=g3atmpncPncAFIB, g3statregionBWLimitUnits=g3statregionBWLimitUnits, g3pkprincipalCallsOffTotal=g3pkprincipalCallsOffTotal, g3stamgannEntry=g3stamgannEntry, g3tonerecsumCCTTRTReq=g3tonerecsumCCTTRTReq, g3atmportpg3=g3atmportpg3, g3ipdspsumDenied=g3ipdspsumDenied, g3healthPncStat1to1510=g3healthPncStat1to1510, g3loadincTretrieve=g3loadincTretrieve, g3pkvoicesumTintvl=g3pkvoicesumTintvl, g3atmportpg3SGNumber244=g3atmportpg3SGNumber244, g3statmedproDupSubnetMask=g3statmedproDupSubnetMask, g3voicesumVoiceDenials=g3voicesumVoiceDenials, g3callratedataRunHour=g3callratedataRunHour, g3siggroupTretrieve=g3siggroupTretrieve, g3principalCovPath8=g3principalCovPath8, g3ipsignal=g3ipsignal, g3stamedlistTage=g3stamedlistTage, g3clansocsum=g3clansocsum, g3errorsTintvl=g3errorsTintvl, g3callratedataBsyIntScToday=g3callratedataBsyIntScToday, g3healthPncStat31to4418=g3healthPncStat31to4418, g3atmportpg3TGNumber240=g3atmportpg3TGNumber240, g3ipregionName=g3ipregionName, g3atmportpg1SGNumber7=g3atmportpg1SGNumber7, g3atmportpg1SGNumber60=g3atmportpg1SGNumber60, g3datamod=g3datamod, g3atmportpg1TGNumber15=g3atmportpg1TGNumber15, g3pksnblockEntry=g3pksnblockEntry, g3pkrpatCallsCarrd=g3pkrpatCallsCarrd, g3statmedproDSPChanStatus7=g3statmedproDSPChanStatus7, g3pkipdspsumDay=g3pkipdspsumDay, g3tonerecsumCCTTRHour=g3tonerecsumCCTTRHour, g3callratedataTintvl=g3callratedataTintvl, g3trapFromDay=g3trapFromDay, g3callratesrvBsyCalCmpl=g3callratesrvBsyCalCmpl, g3statlinkDOLANSessions=g3statlinkDOLANSessions, g3pkatmlatencyTage=g3pkatmlatencyTage, g3tonerecsumRunDay=g3tonerecsumRunDay, g3ipdspsumEntry=g3ipdspsumEntry, g3clanetherMonth=g3clanetherMonth, g3callratedataRunDay=g3callratedataRunDay, g3ds1cfgTcount=g3ds1cfgTcount, g3agentRelease=g3agentRelease, g3ipinterfaceSlot2=g3ipinterfaceSlot2, g3cabtypeTage=g3cabtypeTage, g3atmportpg3TGNumber245=g3atmportpg3TGNumber245, g3ipinterfaceSlot61=g3ipinterfaceSlot61, g3servalmAck=g3servalmAck, g3configPort11=g3configPort11, g3voicesumEntry=g3voicesumEntry, g3healthCab31to4417=g3healthCab31to4417, g3agentServer2IP=g3agentServer2IP, g3pkatmlatencyTdelay=g3pkatmlatencyTdelay, g3trapMediaGateway=g3trapMediaGateway, g3atmcfg=g3atmcfg, g3atmportpg3Tdelay=g3atmportpg3Tdelay, g3callratesrvNumCallsToday=g3callratesrvNumCallsToday, g3cbctrunkTotUsage=g3cbctrunkTotUsage, g3pktonerecsumTage=g3pktonerecsumTage, g3pkhuntTotalUsage=g3pkhuntTotalUsage, g3ipinterfaceNodeName38=g3ipinterfaceNodeName38, g3atmportpg2SGNumber111=g3atmportpg2SGNumber111, g3pkloadtotalDay=g3pkloadtotalDay, g3ipserverPrimCntlState=g3ipserverPrimCntlState, g3siggroupBoard16=g3siggroupBoard16, g3pkpnblockTdmUsage=g3pkpnblockTdmUsage, g3atmportpg3LTGNumber1=g3atmportpg3LTGNumber1, g3ipinterfaceSlot76=g3ipinterfaceSlot76, g3atmportpg1TGNumber40=g3atmportpg1TGNumber40, g3rpatcfgPattern3=g3rpatcfgPattern3, g3mgrecruleTretrieve=g3mgrecruleTretrieve, g3ipinterfaceNodeName56=g3ipinterfaceNodeName56, g3trunksumTable=g3trunksumTable, g3pkipdspsumInRegion=g3pkipdspsumInRegion, g3connectDelay=g3connectDelay, g3atmportpg3SGNumber201=g3atmportpg3SGNumber201, g3pkloadoutTdelay=g3pkloadoutTdelay, g3fiberlinkE1BDs1Board=g3fiberlinkE1BDs1Board, g3esmainTdelay=g3esmainTdelay, g3esmainPriorityScore=g3esmainPriorityScore, g3mmisumDay=g3mmisumDay, g3callratetotal=g3callratetotal, g3healthCab16to3020=g3healthCab16to3020, g3servalmEventID=g3servalmEventID, g3siggroupIntfNum1=g3siggroupIntfNum1, g3atmportpg2TGNumber150=g3atmportpg2TGNumber150, g3atmportpg3SGNumber181=g3atmportpg3SGNumber181, g3atmtrunkEntry=g3atmtrunkEntry, g3loadoutTable=g3loadoutTable, g3callratemediaNumCallsToday2=g3callratemediaNumCallsToday2, g3esmainClusterId=g3esmainClusterId, g3loadtotalHour=g3loadtotalHour, g3ipinterfaceNodeName65=g3ipinterfaceNodeName65, g3pkloadtotalHour=g3pkloadtotalHour, g3secviolateTtlViolateSSC=g3secviolateTtlViolateSSC, g3stamediaGatewayStatus32=g3stamediaGatewayStatus32, g3esmainNetComm=g3esmainNetComm, g3atmportpg2TGNumber124=g3atmportpg2TGNumber124, g3bulletinMessage3=g3bulletinMessage3, g3errorsHourLast=g3errorsHourLast, g3atmportpg2SGNumber114=g3atmportpg2SGNumber114, g3atmportpg2TGNumber120=g3atmportpg2TGNumber120, g3callratedataBsyCalCmplToday=g3callratedataBsyCalCmplToday, g3pktrunksumTretrieve=g3pktrunksumTretrieve, g3routepatternTGNumber3=g3routepatternTGNumber3)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3statregionTage=g3statregionTage, g3pkvoicesumPercentBlock=g3pkvoicesumPercentBlock, g3healthCab16to3029=g3healthCab16to3029, g3principalCovPath1=g3principalCovPath1, g3pkannintegQueueDrops=g3pkannintegQueueDrops, g3callratetotalBsyIntHrYesterday2=g3callratetotalBsyIntHrYesterday2, g3pktonerecsumCCMFCRTReq=g3pktonerecsumCCMFCRTReq, g3ipserverPrimIP4=g3ipserverPrimIP4, g3esmsumYear=g3esmsumYear, g3mediacfgBoardType=g3mediacfgBoardType, g3pkvoicesum=g3pkvoicesum, g3atmportpg1TGNumber82=g3atmportpg1TGNumber82, g3errorsTdelay=g3errorsTdelay, g3siggroupBoard5=g3siggroupBoard5, g3atmportpg2TGNumber176=g3atmportpg2TGNumber176, g3pkipdspsum=g3pkipdspsum, g3atmportpg1TGNumber32=g3atmportpg1TGNumber32, g3siggroupBoard1=g3siggroupBoard1, g3atmportpg3SGNumber185=g3atmportpg3SGNumber185, g3ipserverCallCntlDiff=g3ipserverCallCntlDiff, g3ipinterfaceSlot33=g3ipinterfaceSlot33, g3atmportpg1=g3atmportpg1, g3callratetotalTage=g3callratetotalTage, g3occsum=g3occsum, g3eventdayTretrieve=g3eventdayTretrieve, g3cabinetCarCType=g3cabinetCarCType, g3ipinterfaceSlot30=g3ipinterfaceSlot30, g3pkprincipalCovPath7=g3pkprincipalCovPath7, g3covpathTcount=g3covpathTcount, g3dmodule=g3dmodule, g3atmportpg3TGNumber188=g3atmportpg3TGNumber188, g3extdevAddress=g3extdevAddress, g3atmportpg3SGNumber194=g3atmportpg3SGNumber194, g3clanpppKey=g3clanpppKey, g3pkipsignalTable=g3pkipsignalTable, g3cabinetTable=g3cabinetTable, g3cabinetCarAType=g3cabinetCarAType, g3atmportpg1TGNumber23=g3atmportpg1TGNumber23, g3stationcfgEntry=g3stationcfgEntry, g3pkipsignalHourAvgLatency=g3pkipsignalHourAvgLatency, g3pkmmisumEntry=g3pkmmisumEntry, g3pkloadinc=g3pkloadinc, g3atmtrunkLocation=g3atmtrunkLocation, g3ipinterfaceNodeName11=g3ipinterfaceNodeName11, g3stamediaGatewayStatus28=g3stamediaGatewayStatus28, g3atmportpg2SGNumber125=g3atmportpg2SGNumber125, g3covpathPoint4Ans=g3covpathPoint4Ans, g3pnblockHour=g3pnblockHour, g3healthPncStat1to158=g3healthPncStat1to158, g3siggroupBoard7=g3siggroupBoard7, g3atmportpg1TGNumber75=g3atmportpg1TGNumber75, g3trunksumTcount=g3trunksumTcount, g3pkipcodecsumTage=g3pkipcodecsumTage, g3pkcovpathTage=g3pkcovpathTage, g3pkmmisum=g3pkmmisum, g3statmedproDSPChanStatus3=g3statmedproDSPChanStatus3, g3statstaEntry=g3statstaEntry, g3atmportpg2SGNumber105=g3atmportpg2SGNumber105, g3callratemediaRunMonth=g3callratemediaRunMonth, g3voicesumMonth=g3voicesumMonth, g3rpatcfgPattern21=g3rpatcfgPattern21, g3ipinterfaceNodeName74=g3ipinterfaceNodeName74, g3healthCab16to3024=g3healthCab16to3024, g3stamediaGatewayStatus65=g3stamediaGatewayStatus65, g3pnblockYear=g3pnblockYear, g3ds1Tdelay=g3ds1Tdelay, g3statregionEntry=g3statregionEntry, g3callratedataNumCalls=g3callratedataNumCalls, g3pkpnblockPNNumber=g3pkpnblockPNNumber, g3gatewayG350ModTypeV1=g3gatewayG350ModTypeV1, g3clansocsumYear=g3clansocsumYear, g3fiberlinkE2BBoard=g3fiberlinkE2BBoard, g3pkesmsumHour=g3pkesmsumHour, g3stamgannTdelay=g3stamgannTdelay, g3callratedataBsyIntTodaySc=g3callratedataBsyIntTodaySc, g3atmportpg2Location=g3atmportpg2Location, g3pkannintegMPortPlay=g3pkannintegMPortPlay, g3attdposAttdID=g3attdposAttdID, g3pkpnblockTdmPeak=g3pkpnblockTdmPeak, g3tonerecsumTretrieve=g3tonerecsumTretrieve, g3restartUnavailable=g3restartUnavailable, g3mediacfgEntry=g3mediacfgEntry, g3errorsErrRt=g3errorsErrRt, g3loadoutTcount=g3loadoutTcount, g3esparmsNetCommunity41=g3esparmsNetCommunity41, g3trunklightTintvl=g3trunklightTintvl, g3callratevoiceMeasHour5=g3callratevoiceMeasHour5, g3pktrunksumRunMonth=g3pktrunksumRunMonth, g3restartDay=g3restartDay, g3cartypeCab3CarDType=g3cartypeCab3CarDType, g3atmportpg1SGNumber11=g3atmportpg1SGNumber11, g3pkcovpathPoint4Aband=g3pkcovpathPoint4Aband, g3routepatternTretrieve=g3routepatternTretrieve, g3mmisumOutofService=g3mmisumOutofService, g3rpatcfgPattern20=g3rpatcfgPattern20, g3ipinterfaceTretrieve=g3ipinterfaceTretrieve, g3bulletinDate57=g3bulletinDate57, g3atmportpg1TGNumber67=g3atmportpg1TGNumber67, g3alarmsAck2=g3alarmsAck2, g3callratetotalBsyIntMn=g3callratetotalBsyIntMn, g3statmedproLinkEth=g3statmedproLinkEth, g3atmportpg2SGNumber136=g3atmportpg2SGNumber136, g3occsumTage=g3occsumTage, g3atmportpg1Location=g3atmportpg1Location, enterprises=enterprises, g3atmportpg2TGNumber110=g3atmportpg2TGNumber110, g3atmportpg1SGNumber71=g3atmportpg1SGNumber71, g3pkatmlatencySetup1A=g3pkatmlatencySetup1A, g3mmisumAvailablePorts=g3mmisumAvailablePorts, g3pkmmisumTdelay=g3pkmmisumTdelay, g3pkipdspsumDSPUsage=g3pkipdspsumDSPUsage, g3pkprincipalCovPath3=g3pkprincipalCovPath3, g3tonerecsumCLASTAvail=g3tonerecsumCLASTAvail, g3ipinterfaceSlot65=g3ipinterfaceSlot65, g3cbctrunkDur1=g3cbctrunkDur1, g3vintageSpeBrelease=g3vintageSpeBrelease, g3cabinetRoom=g3cabinetRoom, g3pktonerecTcount=g3pktonerecTcount, g3huntMeasHour=g3huntMeasHour, g3callratetotalBsyCalCmplYesterday=g3callratetotalBsyCalCmplYesterday, g3snblock=g3snblock, g3atmportpg1TGNumber39=g3atmportpg1TGNumber39, g3pnblockDay=g3pnblockDay, g3pkloadtotalEntry=g3pkloadtotalEntry, g3ipinterfaceSlot35=g3ipinterfaceSlot35, g3deftimeDayOfMonth=g3deftimeDayOfMonth, g3extdevID=g3extdevID, g3healthCab31to4423=g3healthCab31to4423, g3atmportpg3TGNumber239=g3atmportpg3TGNumber239, g3dmoduleTdelay=g3dmoduleTdelay, g3cbctrunkQueueSize=g3cbctrunkQueueSize, g3errorsErrCnt=g3errorsErrCnt, g3routepatternTintvl=g3routepatternTintvl, g3huntMonth=g3huntMonth, g3voicesumH320Allocation=g3voicesumH320Allocation, g3pkvoicesumH320Allocation=g3pkvoicesumH320Allocation, g3atmportpg3TGNumber185=g3atmportpg3TGNumber185, g3statstaSwitchIPPort=g3statstaSwitchIPPort, g3pkipsignalWorstInterval=g3pkipsignalWorstInterval, g3ipserverSecIP1=g3ipserverSecIP1, g3atmportpg1SGNumber19=g3atmportpg1SGNumber19, g3trunkstaMember=g3trunkstaMember, g3rpatcfgTretrieve=g3rpatcfgTretrieve, g3ipserverSocketEncr=g3ipserverSocketEncr, g3covpathPoint6Ans=g3covpathPoint6Ans, g3ipinterfaceSlot1=g3ipinterfaceSlot1, g3huntTage=g3huntTage, g3pnblockPNlinkPeg=g3pnblockPNlinkPeg, g3eventhourFirstMinute=g3eventhourFirstMinute, g3pkloadtanDay=g3pkloadtanDay, g3bulletinDate5=g3bulletinDate5, g3ipunregTage=g3ipunregTage, g3callratesrvRunDay=g3callratesrvRunDay, g3eventdayLastMonth=g3eventdayLastMonth, g3mediacfgTretrieve=g3mediacfgTretrieve, g3restartTable=g3restartTable, g3ipinterfaceNodeName64=g3ipinterfaceNodeName64, g3ipinterfaceNodeName82=g3ipinterfaceNodeName82, g3eventhourTage=g3eventhourTage, g3callratevoiceBsyIntScToday2=g3callratevoiceBsyIntScToday2, g3ipinterfaceNodeName75=g3ipinterfaceNodeName75, g3alarmsSvcState=g3alarmsSvcState, g3atmcfgTage=g3atmcfgTage, g3esmainServerBIP4=g3esmainServerBIP4, g3clientTableIndex=g3clientTableIndex, g3atmportpg3Table=g3atmportpg3Table, g3atmportpg3TGNumber237=g3atmportpg3TGNumber237, g3pkipcodecsumYear=g3pkipcodecsumYear, g3stamedlistTdelay=g3stamedlistTdelay, g3atmportpg1SGNumber85=g3atmportpg1SGNumber85, g3cartypeTdelay=g3cartypeTdelay, g3stationcfgBoardNum=g3stationcfgBoardNum, g3cabinetCarCPNN=g3cabinetCarCPNN, g3pnblockEntry=g3pnblockEntry, g3atmportpg3SGNumber196=g3atmportpg3SGNumber196, g3trunkoutTretrieve=g3trunkoutTretrieve, g3ipsignalTdelay=g3ipsignalTdelay, g3ipsignalWorstInterval=g3ipsignalWorstInterval, g3ipinterfaceSlot64=g3ipinterfaceSlot64, g3healthCab1to151=g3healthCab1to151, g3vintageSpeAupState2=g3vintageSpeAupState2, g3pkcovpathMeasHour=g3pkcovpathMeasHour, g3pkvoicesumTotalDenials=g3pkvoicesumTotalDenials, g3bulletinDate37=g3bulletinDate37, g3statregionTcount=g3statregionTcount, g3healthCab1to1511=g3healthCab1to1511, g3stationExtension=g3stationExtension, g3atmportpg2SGNumber98=g3atmportpg2SGNumber98, g3atmpnc=g3atmpnc, g3pkrpatMonth=g3pkrpatMonth, g3filterMajor=g3filterMajor, g3pkannintegMeasHour=g3pkannintegMeasHour, g3atmportpg2TGNumber173=g3atmportpg2TGNumber173, g3atmportpg2SGNumber129=g3atmportpg2SGNumber129, g3stationcfgCode=g3stationcfgCode, g3atmportpg3TGNumber186=g3atmportpg3TGNumber186, g3trunkoutTrunkGroup=g3trunkoutTrunkGroup, g3atmportpg2SGNumber144=g3atmportpg2SGNumber144, g3configTretrieve=g3configTretrieve, g3loadintEntry=g3loadintEntry, g3pkcovpathCallsOffCA=g3pkcovpathCallsOffCA, definity=definity, g3bulletinDate19=g3bulletinDate19, g3loadincIncIntraPNUse=g3loadincIncIntraPNUse, g3pkclansocsumPctDenial=g3pkclansocsumPctDenial, g3pkprincipalCovPath2=g3pkprincipalCovPath2, g3extdevTcount=g3extdevTcount, g3esparmsNetCommunity16=g3esparmsNetCommunity16, g3routepatternTGNumber2=g3routepatternTGNumber2, g3rpatcfg=g3rpatcfg, g3healthCab1to154=g3healthCab1to154, g3ipinterfaceSlot28=g3ipinterfaceSlot28, g3annallMPortPlay=g3annallMPortPlay, g3ipinterfaceNodeName33=g3ipinterfaceNodeName33, g3busytrkObject=g3busytrkObject, g3configCode=g3configCode, g3siggroupBoard14=g3siggroupBoard14, g3alarmsProductID=g3alarmsProductID, g3callratesrvNumCalls=g3callratesrvNumCalls, g3callratetotalBsyIntHrToday2=g3callratetotalBsyIntHrToday2, g3statlinkCLANBoardLoc=g3statlinkCLANBoardLoc, g3trunkoutDay=g3trunkoutDay, g3trunkcfgCode=g3trunkcfgCode, g3atmlatencyMonth=g3atmlatencyMonth, g3ipinterfaceSlot36=g3ipinterfaceSlot36, g3loadincTable=g3loadincTable, g3pkipsignalIntvlPktsLostPct=g3pkipsignalIntvlPktsLostPct, g3pktonerecMeasHour=g3pktonerecMeasHour, g3tonerecsumTintvl=g3tonerecsumTintvl, g3esmainTintvl=g3esmainTintvl, g3statmedproStandbyRefreshed=g3statmedproStandbyRefreshed, g3healthCab31to4421=g3healthCab31to4421, g3platcmds=g3platcmds, g3pkpnblock=g3pkpnblock, g3attdposTimeAvail=g3attdposTimeAvail, g3atmportpg3TGNumber215=g3atmportpg3TGNumber215, g3atmportpg3LTGNumber4=g3atmportpg3LTGNumber4, g3routepatternTGNumber11=g3routepatternTGNumber11, g3atmportpg2SGNumber142=g3atmportpg2SGNumber142, g3pkloadoutPNNumber=g3pkloadoutPNNumber, g3nodenameIP3=g3nodenameIP3, g3connectRequests=g3connectRequests, g3fiberlinkEntry=g3fiberlinkEntry, g3annintegEntry=g3annintegEntry, g3atmportpg2SGNumber120=g3atmportpg2SGNumber120, g3pksnblockTage=g3pksnblockTage, g3gatewayTintvl=g3gatewayTintvl, g3statlinkTage=g3statlinkTage, g3loadtanDay=g3loadtanDay, g3callratetotalBsyIntMnYesterday=g3callratetotalBsyIntMnYesterday, g3snblockDay=g3snblockDay, g3ipsignalHourAvgLatency=g3ipsignalHourAvgLatency, g3atmportpg3TGNumber208=g3atmportpg3TGNumber208, g3atmportpg3SGNumber217=g3atmportpg3SGNumber217)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3pktonerecsumTretrieve=g3pktonerecsumTretrieve, g3health=g3health, g3pkesmsumDay=g3pkesmsumDay, g3pktrunksumCallQued=g3pktrunksumCallQued, g3atmportpg1SGNumber90=g3atmportpg1SGNumber90, g3atmportpg1SGNumber49=g3atmportpg1SGNumber49, g3pkloadoutTintvl=g3pkloadoutTintvl, g3pksnblockSnPair=g3pksnblockSnPair, g3ds1cfgTintvl=g3ds1cfgTintvl, g3atmportpg3LSGNumber4=g3atmportpg3LSGNumber4, g3pkrpat=g3pkrpat, g3callratevoiceTintvl=g3callratevoiceTintvl, g3pnchealthPncBMajor=g3pnchealthPncBMajor, g3loadintTcount=g3loadintTcount, g3loadoutHour=g3loadoutHour, g3bulletinTage=g3bulletinTage, g3ipinterfaceNodeName57=g3ipinterfaceNodeName57, g3alarmsTage=g3alarmsTage, g3pkmmisumPercentAPB=g3pkmmisumPercentAPB, g3clientConnectStatus=g3clientConnectStatus, g3healthTdelay=g3healthTdelay, g3pkclansocsumTage=g3pkclansocsumTage, g3callratedataBsyIntHrYesterday=g3callratedataBsyIntHrYesterday, g3ipinterfaceSlot53=g3ipinterfaceSlot53, g3pkannintegYear=g3pkannintegYear, g3snblockTdelay=g3snblockTdelay, g3pksnblockMeasHour=g3pksnblockMeasHour, g3trunkstaConnPort3=g3trunkstaConnPort3, g3esparmsNetCommunity61=g3esparmsNetCommunity61, g3gatewayTcount=g3gatewayTcount, g3healthCab1to1515=g3healthCab1to1515, g3attdgrpRunMonth=g3attdgrpRunMonth, g3pktrunkwbsumPercentOutBlk=g3pktrunkwbsumPercentOutBlk, g3stamediaTdelay=g3stamediaTdelay, g3bulletinDate59=g3bulletinDate59, g3pkannallTcount=g3pkannallTcount, g3annintegExtension=g3annintegExtension, g3esserversPriorityScore=g3esserversPriorityScore, g3pkrpatIndex=g3pkrpatIndex, g3occsumTable=g3occsumTable, g3ipnetregionRSVPProfile=g3ipnetregionRSVPProfile, g3callratetotalBsyIntMnYesterday2=g3callratetotalBsyIntMnYesterday2, g3clanpppCrcChkTot=g3clanpppCrcChkTot, g3pkclansocsumYear=g3pkclansocsumYear, g3atmportpg3LSGNumber2=g3atmportpg3LSGNumber2, g3pktonerecDTMFPkOffPN=g3pktonerecDTMFPkOffPN, g3stationcfgTage=g3stationcfgTage, g3trunkwbsumOutSrv=g3trunkwbsumOutSrv, g3pkvoicesumTotalUsage=g3pkvoicesumTotalUsage, g3statmedproTable=g3statmedproTable, g3esparmsNetCommunity58=g3esparmsNetCommunity58, g3atmportpg1SGNumber83=g3atmportpg1SGNumber83, g3vintageIPAddress3=g3vintageIPAddress3, g3atmportpg1SGNumber58=g3atmportpg1SGNumber58, g3pkatmlatencyCount1A=g3pkatmlatencyCount1A, g3statlinkSysLinkNumber=g3statlinkSysLinkNumber, g3atmtrunkTcount=g3atmtrunkTcount, g3secviolateValidBC=g3secviolateValidBC, g3ipinterfaceNodeName68=g3ipinterfaceNodeName68, g3pkatmlatencySetup1B=g3pkatmlatencySetup1B, g3siggroupBoard20=g3siggroupBoard20, g3pkloadintDay=g3pkloadintDay, g3cartypeTage=g3cartypeTage, g3healthCab16to3021=g3healthCab16to3021, g3statmedproAlarmWrn=g3statmedproAlarmWrn, g3stationcfgTcount=g3stationcfgTcount, g3pktrunksumQueAbd=g3pktrunksumQueAbd, g3loadtotalPNNumber=g3loadtotalPNNumber, g3annallTage=g3annallTage, g3cabinetTcount=g3cabinetTcount, g3restartCause=g3restartCause, g3atmportpg2SGNumber164=g3atmportpg2SGNumber164, g3commlinkTintvl=g3commlinkTintvl, g3clanpppMonth=g3clanpppMonth, g3datamodEntry=g3datamodEntry, g3atmportpg1SGNumber8=g3atmportpg1SGNumber8, g3trunklightCarried=g3trunklightCarried, g3trunkgrpPbxID=g3trunkgrpPbxID, g3ipsignalSigGroup=g3ipsignalSigGroup, g3bulletinDate40=g3bulletinDate40, g3pkloadoutOutIntraPNUse=g3pkloadoutOutIntraPNUse, g3restartLevel=g3restartLevel, g3esparmsNetCommunity15=g3esparmsNetCommunity15, g3pnchealthStndbyRfsh=g3pnchealthStndbyRfsh, g3siggroupIntfNum7=g3siggroupIntfNum7, g3atmportpg1TGNumber60=g3atmportpg1TGNumber60, g3callratevoiceRunMonth=g3callratevoiceRunMonth, g3esmsumPercentAPB=g3esmsumPercentAPB, g3routepatternTable=g3routepatternTable, g3atmportpg3SGNumber206=g3atmportpg3SGNumber206, g3nodenameType=g3nodenameType, g3connectAttempts=g3connectAttempts, g3acaTGNumber=g3acaTGNumber, g3filterTrunkMember=g3filterTrunkMember, g3esmainEntry=g3esmainEntry, g3fiberlinkE2ABoard=g3fiberlinkE2ABoard, g3routepatternRPNumber=g3routepatternRPNumber, g3fiberlinkFLNumber=g3fiberlinkFLNumber, g3atmportpg1TGNumber69=g3atmportpg1TGNumber69, g3callratesrvBsyIntMnToday2=g3callratesrvBsyIntMnToday2, g3pkesmsumTage=g3pkesmsumTage, g3vintageIPAddress4=g3vintageIPAddress4, g3bulletinMessage36=g3bulletinMessage36, g3atmportpg1TGNumber70=g3atmportpg1TGNumber70, g3pkannallMonth=g3pkannallMonth, g3callratesrvBsyIntMnToday=g3callratesrvBsyIntMnToday, g3esparmsNetCommunity5=g3esparmsNetCommunity5, g3atmtrunk=g3atmtrunk, g3atmportpg1SGNumber62=g3atmportpg1SGNumber62, g3tonerecEntry=g3tonerecEntry, g3clanpppHour=g3clanpppHour, g3stationDataExt=g3stationDataExt, g3voicesumTcount=g3voicesumTcount, g3atmportpg1SGNumber64=g3atmportpg1SGNumber64, g3atmportpg1SGNumber74=g3atmportpg1SGNumber74, g3loadoutTintvl=g3loadoutTintvl, g3datamodType=g3datamodType, g3pkloadincTable=g3pkloadincTable, g3stationcfgTable=g3stationcfgTable, g3nodenameTintvl=g3nodenameTintvl, g3cabinetSREPN=g3cabinetSREPN, g3atmportpg2Tage=g3atmportpg2Tage, g3atmportpg2SGNumber135=g3atmportpg2SGNumber135, g3trunkwbsumTotalUsage=g3trunkwbsumTotalUsage, g3tonerecTintvl=g3tonerecTintvl, g3timedateMonth=g3timedateMonth, g3pkipdspsumPctOutSrv=g3pkipdspsumPctOutSrv, g3atmpncPncLocA=g3atmpncPncLocA, g3dmoduleTage=g3dmoduleTage, g3pkrpatHour=g3pkrpatHour, g3callratevoiceTretrieve=g3callratevoiceTretrieve, g3principalCallsCAC=g3principalCallsCAC, g3pkipdspsumHour=g3pkipdspsumHour, g3bulletinMessage16=g3bulletinMessage16, g3ipserverEntry=g3ipserverEntry, g3clansocsumBoard=g3clansocsumBoard, g3rpatcfgPattern6=g3rpatcfgPattern6, g3annallMaxPorts=g3annallMaxPorts, g3voicesumVoiceUsage=g3voicesumVoiceUsage, g3tonerecsumDTMFTReq=g3tonerecsumDTMFTReq, g3eventhour=g3eventhour, g3atmportpg2SGNumber148=g3atmportpg2SGNumber148, g3pkipsignalMeasHour=g3pkipsignalMeasHour, g3datamstaServiceState=g3datamstaServiceState, g3restartCarrier=g3restartCarrier, g3ipinterfaceNodeName72=g3ipinterfaceNodeName72, g3pkloadoutHour=g3pkloadoutHour, g3configPort8=g3configPort8, g3alarmsTdelay=g3alarmsTdelay, g3callratevoiceMeasHour3=g3callratevoiceMeasHour3, g3connectResponses=g3connectResponses, g3pktrunksumIncSeize=g3pktrunksumIncSeize, g3tonerecsumCCMFCRPReq=g3tonerecsumCCMFCRPReq, g3loadtanTanOutgoingUse=g3loadtanTanOutgoingUse, g3callratedataNumCallsToday3=g3callratedataNumCallsToday3, g3timedateLastError2=g3timedateLastError2, g3pkipdspsumTintvl=g3pkipdspsumTintvl, g3atmportpg2TGNumber132=g3atmportpg2TGNumber132, g3pkmmisumTage=g3pkmmisumTage, g3atmportpg2TGNumber177=g3atmportpg2TGNumber177, g3bulletinMessage50=g3bulletinMessage50, g3atmportpg3TGNumber216=g3atmportpg3TGNumber216, g3bulletinMessage22=g3bulletinMessage22, g3callratedataBsyIntTodayMn=g3callratedataBsyIntTodayMn, g3huntlistEntry=g3huntlistEntry, g3pkloadincHour=g3pkloadincHour, avaya_s8700i=avaya_s8700i, g3clanpppTime=g3clanpppTime, g3eventhourTintvl=g3eventhourTintvl, g3pkannallASP=g3pkannallASP, g3pktonerecGPTDPkAlloc=g3pktonerecGPTDPkAlloc, g3regipstatTdelay=g3regipstatTdelay, g3atmportpg1TGNumber46=g3atmportpg1TGNumber46, g3attdpos=g3attdpos, g3atmportpg2TGNumber145=g3atmportpg2TGNumber145, g3loadtanTintvl=g3loadtanTintvl, g3trkgrpmemTretrieve=g3trkgrpmemTretrieve, g3loadintTable=g3loadintTable, g3errorsAck=g3errorsAck, g3ipinterfaceNodeName83=g3ipinterfaceNodeName83, g3trapCategory=g3trapCategory, g3siggroupTdelay=g3siggroupTdelay, g3huntCallsQue=g3huntCallsQue, g3huntQueOvfl=g3huntQueOvfl, g3trapTrunkGroup=g3trapTrunkGroup, g3esmsumEntry=g3esmsumEntry, g3attdgrpTimeHeld=g3attdgrpTimeHeld, g3pkesmsum=g3pkesmsum, g3stamediaGatewayStatus41=g3stamediaGatewayStatus41, g3trunkcfgTretrieve=g3trunkcfgTretrieve, g3healthCab1to156=g3healthCab1to156, g3ipserverSecLocation=g3ipserverSecLocation, g3loadintPNNumber=g3loadintPNNumber, g3callratemediaBsyCalCmpl=g3callratemediaBsyCalCmpl, g3vintageSpeAupID=g3vintageSpeAupID, g3atmportpg1SGNumber21=g3atmportpg1SGNumber21, g3atmportpg1SGNumber80=g3atmportpg1SGNumber80, g3vintageResNotify=g3vintageResNotify, g3restartHour=g3restartHour, g3stamgann=g3stamgann, g3timedateDayOfMonth=g3timedateDayOfMonth, g3errorsTage=g3errorsTage, g3pktonerecsumDTMFTDeny=g3pktonerecsumDTMFTDeny, g3loadtotalPNUtil=g3loadtotalPNUtil, g3pkclansocsumSockPeg=g3pkclansocsumSockPeg, g3eventhourTretrieve=g3eventhourTretrieve, g3configPort1=g3configPort1, g3trkgrpmemTcount=g3trkgrpmemTcount, g3pktrunkoutTcount=g3pktrunkoutTcount, g3mgrecruleTintvl=g3mgrecruleTintvl, g3acaTGAccess=g3acaTGAccess, g3statstaConnPort4=g3statstaConnPort4, g3msgalmLevel=g3msgalmLevel, g3busytrkGroup=g3busytrkGroup, g3commlinkTretrieve=g3commlinkTretrieve, g3ipregionTintvl=g3ipregionTintvl, g3atmportpg1TGNumber79=g3atmportpg1TGNumber79, g3pkcovpathCallsOffDA=g3pkcovpathCallsOffDA, g3esserversServerBIP2=g3esserversServerBIP2, g3statmedproNetworkRegion=g3statmedproNetworkRegion, g3pksnblockTretrieve=g3pksnblockTretrieve, g3pkannintegMonth=g3pkannintegMonth, g3ds1cfgName=g3ds1cfgName, g3ipinterfaceSlot56=g3ipinterfaceSlot56, g3agentServer2State=g3agentServer2State, g3pkcovpathPoint1Ans=g3pkcovpathPoint1Ans, g3atmportpg3TGNumber224=g3atmportpg3TGNumber224, g3vintageRemoteOffAvail=g3vintageRemoteOffAvail, g3atmportpg1TGNumber17=g3atmportpg1TGNumber17, g3esserversTretrieve=g3esserversTretrieve, g3statstaConnPort1=g3statstaConnPort1, g3bulletinDate48=g3bulletinDate48, g3pkhuntCallsQue=g3pkhuntCallsQue, g3trunklightTcount=g3trunklightTcount, g3clientProductID=g3clientProductID, g3pktonerecsumGPRDTAvail=g3pktonerecsumGPRDTAvail, g3ipinterfaceNodeName15=g3ipinterfaceNodeName15, g3acaWideBand=g3acaWideBand, g3loadintTintvl=g3loadintTintvl, g3pktonerecsumCCMFCRPReq=g3pktonerecsumCCMFCRPReq, g3annallName=g3annallName, g3loadtanTanOutgoingPeg=g3loadtanTanOutgoingPeg, g3annallASP=g3annallASP, g3atmportpg3SGNumber190=g3atmportpg3SGNumber190, g3mediacfgTintvl=g3mediacfgTintvl, g3stamediaBusyOutStations=g3stamediaBusyOutStations, g3healthPncStat16to3019=g3healthPncStat16to3019, g3pkhuntTdelay=g3pkhuntTdelay, g3alarmsTretrieve=g3alarmsTretrieve, g3callratemediaRunDay=g3callratemediaRunDay, g3eventdayTdelay=g3eventdayTdelay, g3pkpnblockTintvl=g3pkpnblockTintvl, g3eventdayEntry=g3eventdayEntry, g3pkatmlatencyATMSetup1A=g3pkatmlatencyATMSetup1A)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3cbctrunkDur3=g3cbctrunkDur3, g3bulletinMessage21=g3bulletinMessage21, g3statmedproSubnetMask=g3statmedproSubnetMask, g3trunkout=g3trunkout, g3routepatternTGNumber5=g3routepatternTGNumber5, g3pktonerecsumCCMFCRTDeny=g3pktonerecsumCCMFCRTDeny, g3loadoutOutIntraPNPeg=g3loadoutOutIntraPNPeg, g3rpatTage=g3rpatTage, g3pktonerecCCTTRPnReq=g3pktonerecCCTTRPnReq, g3pkrpatYear=g3pkrpatYear, g3trkgrpmemName=g3trkgrpmemName, g3atmportpg1Tcount=g3atmportpg1Tcount, g3atmportpg1TGNumber22=g3atmportpg1TGNumber22, g3statmedproAlarmMin=g3statmedproAlarmMin, g3loadoutTdelay=g3loadoutTdelay, g3agentPrim2IP=g3agentPrim2IP, g3pkatmlatencyHour=g3pkatmlatencyHour, g3configTintvl=g3configTintvl, g3principalTdelay=g3principalTdelay, g3esparmsNetCommunity57=g3esparmsNetCommunity57, g3routepatternTdelay=g3routepatternTdelay, g3trunkstaTrunkGroup=g3trunkstaTrunkGroup, g3esparmsNetCommunity3=g3esparmsNetCommunity3, g3callratevoiceBsyCalCmplToday=g3callratevoiceBsyCalCmplToday, g3pkatmlatencyYear=g3pkatmlatencyYear, g3bulletinDate35=g3bulletinDate35, g3atmportpg2TGNumber165=g3atmportpg2TGNumber165, g3pktonerecsumCCCPTRPReq=g3pktonerecsumCCCPTRPReq, g3eventdayLastDay=g3eventdayLastDay, g3cartypeCab1CarCType=g3cartypeCab1CarCType, g3bulletinDate18=g3bulletinDate18, def_products=def_products, g3trunkgrpQsigValueAdd=g3trunkgrpQsigValueAdd, g3healthPncStat16to3018=g3healthPncStat16to3018, g3esserversServerAIP2=g3esserversServerAIP2, g3clansocsumSockPeg=g3clansocsumSockPeg, g3ipserverPrimIP3=g3ipserverPrimIP3, g3healthActivePNC=g3healthActivePNC, g3pktrunkwbsumPercentAtb=g3pktrunkwbsumPercentAtb, g3stamediaGatewayStatus8=g3stamediaGatewayStatus8, g3stamediaGatewayStatus14=g3stamediaGatewayStatus14, g3ipinterfaceNodeName36=g3ipinterfaceNodeName36, g3atmportpg1TGNumber5=g3atmportpg1TGNumber5, g3secviolateRAValidAC=g3secviolateRAValidAC, g3statregionDestRegion=g3statregionDestRegion, g3pktrunklightHour=g3pktrunklightHour, g3huntTretrieve=g3huntTretrieve, g3ipserverSecIP4=g3ipserverSecIP4, g3stamediaGatewayStatus53=g3stamediaGatewayStatus53, g3callratetotalBsyIntScYesterday=g3callratetotalBsyIntScYesterday, g3atmportpg2TGNumber142=g3atmportpg2TGNumber142, g3rpatcfgPattern16=g3rpatcfgPattern16, g3vintageLocalSpareProc=g3vintageLocalSpareProc, g3huntEntry=g3huntEntry, g3stamediaGatewayStatus79=g3stamediaGatewayStatus79, g3trunkgrpTcount=g3trunkgrpTcount, g3pkipcodecsumG711Usage=g3pkipcodecsumG711Usage, g3secviolateMonth=g3secviolateMonth, g3callratemediaTintvl=g3callratemediaTintvl, g3atmportpg1TGNumber18=g3atmportpg1TGNumber18, g3fiberlinkE1BBoard=g3fiberlinkE1BBoard, g3cabinetTdelay=g3cabinetTdelay, g3pkcovpathTdelay=g3pkcovpathTdelay, g3pkprincipalTage=g3pkprincipalTage, g3atmportpg2SGNumber177=g3atmportpg2SGNumber177, g3eventhourIndex=g3eventhourIndex, g3trunkgrpSigType=g3trunkgrpSigType, g3pkesmsumEntry=g3pkesmsumEntry, g3annallMonth=g3annallMonth, g3atmportpg2TGNumber118=g3atmportpg2TGNumber118, g3annallEntry=g3annallEntry, g3stamediaGatewayStatus39=g3stamediaGatewayStatus39, g3atmpncPncAddFmtA=g3atmpncPncAddFmtA, g3pktonerecsumCCTTRTQueue=g3pktonerecsumCCTTRTQueue, g3ipcodecsumEntry=g3ipcodecsumEntry, g3atmportpg2SGNumber96=g3atmportpg2SGNumber96, g3atmportpg2TGNumber175=g3atmportpg2TGNumber175, g3ipinterfaceNodeName25=g3ipinterfaceNodeName25, g3annintegTdelay=g3annintegTdelay, g3lsplistTretrieve=g3lsplistTretrieve, g3acaTintvl=g3acaTintvl, g3pkrpatEntry=g3pkrpatEntry, g3atmportpg2TGNumber164=g3atmportpg2TGNumber164, g3atmportpg1SGNumber31=g3atmportpg1SGNumber31, g3trkgrpmemSigGroup=g3trkgrpmemSigGroup, g3agentActiveIP=g3agentActiveIP, g3covpathPoint2Aband=g3covpathPoint2Aband, g3lsplistIPAddr2=g3lsplistIPAddr2, g3bulletinDate14=g3bulletinDate14, g3esparmsTdelay=g3esparmsTdelay, g3atmpncPncNameA=g3atmpncPncNameA, g3ipserver=g3ipserver, g3configPort2=g3configPort2, g3pktrunkwbsumTage=g3pktrunkwbsumTage, g3statlinkEntry=g3statlinkEntry, g3annintegYear=g3annintegYear, g3tonerecsumCCTTRTDeny=g3tonerecsumCCTTRTDeny, g3eventdayLastMinute=g3eventdayLastMinute, g3ipinterfaceSlot59=g3ipinterfaceSlot59, g3trunkstaConnPort9=g3trunkstaConnPort9, g3occsumOutAtt=g3occsumOutAtt, g3pkloadincIncIntraPNPeg=g3pkloadincIncIntraPNPeg, g3statstaServiceState=g3statstaServiceState, g3rpatcfgPattern2=g3rpatcfgPattern2, g3attdposPeakHour=g3attdposPeakHour, g3annallExtension=g3annallExtension, g3siggroupTable=g3siggroupTable, g3pksnblockOverflow=g3pksnblockOverflow, g3statregionNbrConnRx=g3statregionNbrConnRx, g3covpathPoint2Ans=g3covpathPoint2Ans, g3ds1cfgBoardNum=g3ds1cfgBoardNum, g3routepatternTcount=g3routepatternTcount, g3clientDynamicTimeout=g3clientDynamicTimeout, g3siggroupIntfNum17=g3siggroupIntfNum17, g3pkipdspsumEntry=g3pkipdspsumEntry, g3callratevoiceBsyIntMnToday2=g3callratevoiceBsyIntMnToday2, g3alarmsAlarmNumber=g3alarmsAlarmNumber, g3atmportpg2SGNumber155=g3atmportpg2SGNumber155, g3ipinterfaceNodeName22=g3ipinterfaceNodeName22, g3healthPncStat1to1511=g3healthPncStat1to1511, g3callratesrvBsyIntMn=g3callratesrvBsyIntMn, g3pkvoicesumDay=g3pkvoicesumDay, g3timedateLastError1=g3timedateLastError1, g3healthPncStat31to4427=g3healthPncStat31to4427, g3alarmsIndex=g3alarmsIndex, g3callratevoiceRunYear=g3callratevoiceRunYear, g3clientDialString2=g3clientDialString2, g3atmportpg1SGNumber70=g3atmportpg1SGNumber70, g3atmportpg3SGNumber205=g3atmportpg3SGNumber205, g3configPort28=g3configPort28, g3pkannintegPlayReqts=g3pkannintegPlayReqts, g3covpath=g3covpath, g3atmlatencyATMSetup1A=g3atmlatencyATMSetup1A, g3esparmsNetCommunity4=g3esparmsNetCommunity4, g3cabinetTintvl=g3cabinetTintvl, g3atmportpg1SGNumber82=g3atmportpg1SGNumber82, g3statmedproTretrieve=g3statmedproTretrieve, g3statstaSwitchIPAddr=g3statstaSwitchIPAddr, g3bulletinDate39=g3bulletinDate39, g3loadincIncOutgoingUse=g3loadincIncOutgoingUse, g3stamediaGatewayStatus3=g3stamediaGatewayStatus3, g3ipcodecsumTcount=g3ipcodecsumTcount, g3atmportpg3LTGNumber5=g3atmportpg3LTGNumber5, g3stamediaGatewayStatus77=g3stamediaGatewayStatus77, g3atmportpg1SGNumber43=g3atmportpg1SGNumber43, g3pktrunklightCarried=g3pktrunklightCarried, g3esmsumTage=g3esmsumTage, g3ipdspsumTintvl=g3ipdspsumTintvl, g3atmportpg2TGNumber148=g3atmportpg2TGNumber148, g3datamstaConnPort9=g3datamstaConnPort9, g3pkatmlatencyMonth=g3pkatmlatencyMonth, g3atmportpg3TGNumber217=g3atmportpg3TGNumber217, g3atmportpg3TGNumber197=g3atmportpg3TGNumber197, g3tonerecDTMFPnReq=g3tonerecDTMFPnReq, g3busytrkPort=g3busytrkPort, g3msgalm=g3msgalm, g3cabinetCarEType=g3cabinetCarEType, g3vintageIPAttdReg=g3vintageIPAttdReg, g3fiberlinkTretrieve=g3fiberlinkTretrieve, g3errorsPort=g3errorsPort, g3atmportpg1SGNumber61=g3atmportpg1SGNumber61, g3callratesrvBsyCalCmplToday2=g3callratesrvBsyCalCmplToday2, g3bulletinMessage26=g3bulletinMessage26, g3esmainTage=g3esmainTage, g3cbctrunkMonth=g3cbctrunkMonth, g3pkpnblockHour=g3pkpnblockHour, g3callratemediaBsyIntMnYesterday=g3callratemediaBsyIntMnYesterday, g3loadintIntInterPNPeg=g3loadintIntInterPNPeg, g3pktonerecCCMFCRPkAlloc=g3pktonerecCCMFCRPkAlloc, g3pkprincipalMeasHour=g3pkprincipalMeasHour, g3busybrdObject=g3busybrdObject, g3occsumIdleOcc=g3occsumIdleOcc, g3principalCovPath4=g3principalCovPath4, g3atmportpg3SGNumber195=g3atmportpg3SGNumber195, g3pkloadintPNNumber=g3pkloadintPNNumber, g3rpatTable=g3rpatTable, g3eventhourTdelay=g3eventhourTdelay, g3annallPlayRequests=g3annallPlayRequests, g3atmportpg3TGNumber202=g3atmportpg3TGNumber202, g3rpatcfgPattern14=g3rpatcfgPattern14, g3healthPncStat16to3026=g3healthPncStat16to3026, g3atmportpg3SGNumber214=g3atmportpg3SGNumber214, g3atmcfgTdelay=g3atmcfgTdelay, g3pkloadtanTanIntraPNUse=g3pkloadtanTanIntraPNUse, g3esparmsNetCommunity26=g3esparmsNetCommunity26, g3pkipsignalHour=g3pkipsignalHour, g3callratetotalBsyIntSc=g3callratetotalBsyIntSc, g3esparmsNetCommunity13=g3esparmsNetCommunity13, g3alarmsOnBrd=g3alarmsOnBrd, g3configPort12=g3configPort12, g3pkloadtanEntry=g3pkloadtanEntry, g3clanetherCollCntDelta=g3clanetherCollCntDelta, g3callratedataBsyCalCmpl=g3callratedataBsyCalCmpl, g3atmportpg3TGNumber187=g3atmportpg3TGNumber187, g3pkloadintIntInterPNUse=g3pkloadintIntInterPNUse, g3pkprincipalCallsCDAC=g3pkprincipalCallsCDAC, g3cabinetBuilding=g3cabinetBuilding, g3esparmsTintvl=g3esparmsTintvl, g3ds1cfg=g3ds1cfg, g3clansocsumPcttmASB=g3clansocsumPcttmASB, g3busybrdMaintName=g3busybrdMaintName, g3snblockHour=g3snblockHour, g3stamgannTintvl=g3stamgannTintvl, g3bulletinMessage30=g3bulletinMessage30, g3pkclansocsumEntry=g3pkclansocsumEntry, g3esmsum=g3esmsum, g3atmportpg1TGNumber89=g3atmportpg1TGNumber89, g3snblockTimeSlots=g3snblockTimeSlots, g3routepatternTGNumber14=g3routepatternTGNumber14, g3tonerecsumCCMFCRPDeny=g3tonerecsumCCMFCRPDeny, g3voicesumAvailablePorts=g3voicesumAvailablePorts, g3bulletinMessage35=g3bulletinMessage35, g3pktrunklightTintvl=g3pktrunklightTintvl, g3callratemediaTage=g3callratemediaTage, g3atmportpg2SGNumber100=g3atmportpg2SGNumber100, g3atmportpg2SGNumber94=g3atmportpg2SGNumber94, g3callratetotalBsyIntMnToday2=g3callratetotalBsyIntMnToday2, g3busyrlsAction=g3busyrlsAction, g3stationPort=g3stationPort, g3attdgrpMeasHour=g3attdgrpMeasHour, g3msgalmEventID=g3msgalmEventID, g3bulletin=g3bulletin, g3pksnblockTimeSlots=g3pksnblockTimeSlots, g3secviolateInvalidBC=g3secviolateInvalidBC, g3platcmdsPriority=g3platcmdsPriority, g3clansocsumRegion=g3clansocsumRegion, g3healthLogins=g3healthLogins, g3healthDupSPE=g3healthDupSPE, g3atmpncPncDCIB=g3atmpncPncDCIB, g3stationType=g3stationType, g3covpathPoint1Aband=g3covpathPoint1Aband, g3esparmsNetCommunity33=g3esparmsNetCommunity33, g3siggroupBoard6=g3siggroupBoard6, g3pksnblockYear=g3pksnblockYear, g3esserversTintvl=g3esserversTintvl, g3ipinterfaceNodeName1=g3ipinterfaceNodeName1, g3atmportpg1SGNumber50=g3atmportpg1SGNumber50, g3callratesrvNumCallsToday2=g3callratesrvNumCallsToday2, g3pkpnblockYear=g3pkpnblockYear, g3atmportpg2SGNumber119=g3atmportpg2SGNumber119, g3trunklightTdelay=g3trunklightTdelay, g3atmportpg2=g3atmportpg2, mibs=mibs, g3loadtotalDay=g3loadtotalDay, g3loadincYear=g3loadincYear, g3ipinterfaceSlot37=g3ipinterfaceSlot37, g3callratetotalNumCalls=g3callratetotalNumCalls, g3pktrunkwbsumTotalUsage=g3pktrunkwbsumTotalUsage, g3trunkmem=g3trunkmem, g3extdevTable=g3extdevTable, g3atmportpg2TGNumber123=g3atmportpg2TGNumber123, g3eventdayFirstDay=g3eventdayFirstDay, g3pkvoicesumH320Usage=g3pkvoicesumH320Usage, g3healthPncStat16to3020=g3healthPncStat16to3020)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3ipinterfaceNodeName35=g3ipinterfaceNodeName35, g3atmportpg3LSGNumber10=g3atmportpg3LSGNumber10, g3trunkgrpShortHold=g3trunkgrpShortHold, g3healthCab1to1512=g3healthCab1to1512, g3atmportpg2SGNumber118=g3atmportpg2SGNumber118, g3trunkwbsumEntry=g3trunkwbsumEntry, g3pnchealthPncAIntrIdx=g3pnchealthPncAIntrIdx, g3atmportpg2SGNumber158=g3atmportpg2SGNumber158, g3pkrpatCallsCarried=g3pkrpatCallsCarried, g3configPort30=g3configPort30, g3trunksumTage=g3trunksumTage, g3acaTGMember=g3acaTGMember, g3ipinterfaceNodeName81=g3ipinterfaceNodeName81, g3tonerecCCMFCRPnReq=g3tonerecCCMFCRPnReq, g3pktonerecsumGPTDTReq=g3pktonerecsumGPTDTReq, g3atmportpg1SGNumber59=g3atmportpg1SGNumber59, g3pkloadintMonth=g3pkloadintMonth, g3trunksumTintvl=g3trunksumTintvl, g3cbctrunkTanSeize=g3cbctrunkTanSeize, g3restartEscalated=g3restartEscalated, g3ipinterfaceNodeName79=g3ipinterfaceNodeName79, g3agentSubmapType=g3agentSubmapType, g3fiberlinkE2ADs1Board=g3fiberlinkE2ADs1Board, g3trunksumEntry=g3trunksumEntry, g3pktrunklightTretrieve=g3pktrunklightTretrieve, g3pkatmlatencyPNDest1=g3pkatmlatencyPNDest1, g3esmsumTcount=g3esmsumTcount, g3esserversServerBIP3=g3esserversServerBIP3, g3ipevtTable=g3ipevtTable, g3deftimeTage=g3deftimeTage, g3fiberlinkTdelay=g3fiberlinkTdelay, g3trunkwbsumIncSeize=g3trunkwbsumIncSeize, g3annallQueueDrops=g3annallQueueDrops, g3datamodExtension=g3datamodExtension, g3atmlatencyATMCount1B=g3atmlatencyATMCount1B, g3stamediaGatewayStatus6=g3stamediaGatewayStatus6, g3rpatcfgPattern11=g3rpatcfgPattern11, g3healthPncStat1to1514=g3healthPncStat1to1514, g3annallDay=g3annallDay, g3tonerecCCCPTRPnAlloc=g3tonerecCCCPTRPnAlloc, g3atmportpg1SGNumber9=g3atmportpg1SGNumber9, g3esparmsNetCommunity32=g3esparmsNetCommunity32, g3pktonerecCCTTRPkAlloc=g3pktonerecCCTTRPkAlloc, g3pnblockTable=g3pnblockTable, g3busytrkIndex=g3busytrkIndex, g3tonerecsumDTMFPReq=g3tonerecsumDTMFPReq, g3pnblockPNNumber=g3pnblockPNNumber, g3deftimeSecond=g3deftimeSecond, g3mmisumTdelay=g3mmisumTdelay, g3atmportpg3TGNumber214=g3atmportpg3TGNumber214, g3pkannallTintvl=g3pkannallTintvl, g3pktrunklightYear=g3pktrunklightYear, g3mmisumTable=g3mmisumTable, g3atmportpg2SGNumber108=g3atmportpg2SGNumber108, g3pktonerecCCCPTRTotOffPN=g3pktonerecCCCPTRTotOffPN, g3pktonerecGPTDPnAlloc=g3pktonerecGPTDPnAlloc, g3pkipcodecsumRegion=g3pkipcodecsumRegion, g3pnblockTcount=g3pnblockTcount, g3pkhuntTcount=g3pkhuntTcount, g3pkloadincPNNumber=g3pkloadincPNNumber, g3busybrdPortVal=g3busybrdPortVal, g3loadoutEntry=g3loadoutEntry, g3atmportpg1TGNumber72=g3atmportpg1TGNumber72, g3mmisumMMIDenials=g3mmisumMMIDenials, g3pkvoicesumHour=g3pkvoicesumHour, g3eventdayTcount=g3eventdayTcount, g3trapMinor=g3trapMinor, g3callratevoiceNumCallsYesterday=g3callratevoiceNumCallsYesterday, g3pkprincipalCallsRedirect=g3pkprincipalCallsRedirect, g3stationcfgTintvl=g3stationcfgTintvl, g3huntDay=g3huntDay, g3atmportpg2TGNumber137=g3atmportpg2TGNumber137, g3clanpppChapFailDelta=g3clanpppChapFailDelta, g3stamediaGatewayStatus16=g3stamediaGatewayStatus16, g3trunkmemType=g3trunkmemType, g3pkclansocsumDenialPeg=g3pkclansocsumDenialPeg, g3clansocsumTdelay=g3clansocsumTdelay, g3loadincMonth=g3loadincMonth, g3configPort18=g3configPort18, g3cbctrunkPlan3=g3cbctrunkPlan3, g3configPort15=g3configPort15, g3cbctrunkTrunksOOS=g3cbctrunkTrunksOOS, g3pkloadoutTcount=g3pkloadoutTcount, g3callratemediaRunYear=g3callratemediaRunYear, g3atmportpg2SGNumber145=g3atmportpg2SGNumber145, g3cabinetTretrieve=g3cabinetTretrieve, g3pktonerecsumRunMonth=g3pktonerecsumRunMonth, g3pnchealth=g3pnchealth, g3errorsMonthFirst=g3errorsMonthFirst, g3clanetherYear=g3clanetherYear, g3esparmsNetCommunity11=g3esparmsNetCommunity11, g3cbctrunkPlan2=g3cbctrunkPlan2, g3routepatternTGNumber6=g3routepatternTGNumber6, g3ipserverSecDHCPID=g3ipserverSecDHCPID, g3cartype=g3cartype, g3eventhourLastMinute=g3eventhourLastMinute, g3atmportpg1SGNumber38=g3atmportpg1SGNumber38, g3siggroupIntfNum15=g3siggroupIntfNum15, g3atmportpg3TGNumber189=g3atmportpg3TGNumber189, g3pkclansocsumTable=g3pkclansocsumTable, g3stamediaGatewayStatus46=g3stamediaGatewayStatus46, g3atmportpg2TGNumber99=g3atmportpg2TGNumber99, g3ipinterfaceSlot27=g3ipinterfaceSlot27, g3bulletinMessage9=g3bulletinMessage9, g3occsumPnetAtt=g3occsumPnetAtt, g3pkcovpathCallsOffBusy=g3pkcovpathCallsOffBusy, g3pktonerec=g3pktonerec, g3stationTable=g3stationTable, g3trunkgrpWideSupport=g3trunkgrpWideSupport, g3trapToMonth=g3trapToMonth, g3loadintTage=g3loadintTage, g3pkloadincIncOutgoingPeg=g3pkloadincIncOutgoingPeg, g3pktonerecTretrieve=g3pktonerecTretrieve, g3agentEssConfig=g3agentEssConfig, g3tonerecsumDTMFPDeny=g3tonerecsumDTMFPDeny, g3ipinterfaceSlot38=g3ipinterfaceSlot38, g3esparmsNetCommunity43=g3esparmsNetCommunity43, g3cabinetEntry=g3cabinetEntry, g3atmportpg2SGNumber109=g3atmportpg2SGNumber109, g3pkloadintTintvl=g3pkloadintTintvl, g3callratevoiceBsyIntHrYesterday=g3callratevoiceBsyIntHrYesterday, g3deftimeHour=g3deftimeHour, g3esmsumAvailableUsage=g3esmsumAvailableUsage, g3attdgrpCallsQued=g3attdgrpCallsQued, g3filterWarning=g3filterWarning, g3timedate=g3timedate, g3cbctrunkTretrieve=g3cbctrunkTretrieve, g3atmportpg1SGNumber46=g3atmportpg1SGNumber46, g3stationCable=g3stationCable, g3ipinterfaceNodeName32=g3ipinterfaceNodeName32, g3atmportpg3TGNumber236=g3atmportpg3TGNumber236, g3tonerecsumRunMonth=g3tonerecsumRunMonth, g3stationcfgBoardType=g3stationcfgBoardType, g3ipinterfaceNodeName60=g3ipinterfaceNodeName60, g3stamedlistEntry=g3stamedlistEntry, g3healthPncStat31to4429=g3healthPncStat31to4429, g3pkvoicesumVoiceAllocation=g3pkvoicesumVoiceAllocation, g3loadincTcount=g3loadincTcount, g3gatewayG350ModTypeV2=g3gatewayG350ModTypeV2, g3siggroupIntfNum9=g3siggroupIntfNum9, g3secviolateTable=g3secviolateTable, g3annintegMaxCallPeriod=g3annintegMaxCallPeriod, g3atmportpg3SGNumber232=g3atmportpg3SGNumber232, g3pkannintegDay=g3pkannintegDay, g3esmsumTable=g3esmsumTable, g3pkatmlatencyCount1B=g3pkatmlatencyCount1B, g3statmedproDupLinkEth=g3statmedproDupLinkEth, g3agentServerType=g3agentServerType, g3healthPncStat16to3024=g3healthPncStat16to3024, g3annallTable=g3annallTable, g3atmportpg1TGNumber51=g3atmportpg1TGNumber51, g3atmportpg2TGNumber102=g3atmportpg2TGNumber102, g3ds1cfgTdelay=g3ds1cfgTdelay, g3loadtanPNNumber=g3loadtanPNNumber, g3trapExtension=g3trapExtension, g3atmportpg2SGNumber138=g3atmportpg2SGNumber138, g3annallTcount=g3annallTcount, g3ipinterfaceSlot44=g3ipinterfaceSlot44, g3stamediaGatewayStatus61=g3stamediaGatewayStatus61, g3atmportpg3SGNumber218=g3atmportpg3SGNumber218, g3rpatTintvl=g3rpatTintvl, g3atmportpg1TGNumber13=g3atmportpg1TGNumber13, g3atmportpg2TGNumber174=g3atmportpg2TGNumber174, g3pkipcodecsumG723Usage=g3pkipcodecsumG723Usage, g3attdposTimeTalk=g3attdposTimeTalk, g3stamedlistGatewayStatus=g3stamedlistGatewayStatus, g3trunksumTotalUsage=g3trunksumTotalUsage, g3ds1BitRate=g3ds1BitRate, g3voicesumOutofService=g3voicesumOutofService, g3pkprincipalCovPath8=g3pkprincipalCovPath8, g3atmpncPncDCIA=g3atmpncPncDCIA, g3restartDateTime=g3restartDateTime, g3pkvoicesumVoiceUsage=g3pkvoicesumVoiceUsage, g3pkprincipalTretrieve=g3pkprincipalTretrieve, g3pkipcodecsumG711InRegion=g3pkipcodecsumG711InRegion, g3atmportpg3TGNumber193=g3atmportpg3TGNumber193, g3timedateYear=g3timedateYear, g3atmtrunkTdelay=g3atmtrunkTdelay, g3atmportpg2TGNumber127=g3atmportpg2TGNumber127, g3pkpnblockMeasHour=g3pkpnblockMeasHour, g3atmlatencyDay=g3atmlatencyDay, g3callratemediaNumCalls=g3callratemediaNumCalls, g3ipinterfaceNodeName45=g3ipinterfaceNodeName45, g3trunkgrpNumber=g3trunkgrpNumber, g3statmedproTage=g3statmedproTage, g3errorsTcount=g3errorsTcount, g3callratetotalNumCallsYesterday2=g3callratetotalNumCallsYesterday2, g3filterEntry=g3filterEntry, g3ipinterfaceSlot18=g3ipinterfaceSlot18, g3ipregionTable=g3ipregionTable, g3atmcfgTretrieve=g3atmcfgTretrieve, g3atmportpg2SGNumber123=g3atmportpg2SGNumber123, g3stamgannTage=g3stamgannTage, g3secviolateAtdValidAC=g3secviolateAtdValidAC, g3loadout=g3loadout, g3siggroupBoard12=g3siggroupBoard12, g3atmportpg3SGNumber192=g3atmportpg3SGNumber192, g3trunksumTrunkGroup=g3trunksumTrunkGroup, g3extdevEntry=g3extdevEntry, g3ipcodecsumTintvl=g3ipcodecsumTintvl, g3ipinterfaceNodeName12=g3ipinterfaceNodeName12, g3esparmsNetCommunity40=g3esparmsNetCommunity40, g3healthTrkBusy=g3healthTrkBusy, g3atmportpg2SGNumber147=g3atmportpg2SGNumber147, g3gatewayG700ModTypeV8=g3gatewayG700ModTypeV8, g3commlinkLinkNumber=g3commlinkLinkNumber, g3pkloadincYear=g3pkloadincYear, g3pkvoicesumPercentAPB=g3pkvoicesumPercentAPB, g3covpathEntry=g3covpathEntry, g3atmportpg3SGNumber219=g3atmportpg3SGNumber219, g3bulletinDate53=g3bulletinDate53, g3ipregionTdelay=g3ipregionTdelay, g3pkrpatQueueOvflo=g3pkrpatQueueOvflo, g3ds1Tintvl=g3ds1Tintvl, g3pkipdspsumTdelay=g3pkipdspsumTdelay, g3filterPortNetwork=g3filterPortNetwork, g3tonerecGPTDPnAlloc=g3tonerecGPTDPnAlloc, g3alarmsMonthAlrmd=g3alarmsMonthAlrmd, g3pnblockTretrieve=g3pnblockTretrieve, g3commlinkTcount=g3commlinkTcount, g3healthPncStat16to3017=g3healthPncStat16to3017, g3atmportpg2SGNumber116=g3atmportpg2SGNumber116, g3configPort4=g3configPort4, g3bulletinDate45=g3bulletinDate45, g3covpathTretrieve=g3covpathTretrieve, g3statlinkTretrieve=g3statlinkTretrieve, g3gatewayIdentifier=g3gatewayIdentifier, g3bulletinMessage47=g3bulletinMessage47, g3esparmsNetCommunity47=g3esparmsNetCommunity47, g3ds1=g3ds1, g3cbctrunkDur6=g3cbctrunkDur6, g3rpatHour=g3rpatHour, g3vintageOSSNumber2=g3vintageOSSNumber2, g3pkpnblockMonth=g3pkpnblockMonth, g3ipinterfaceSlot16=g3ipinterfaceSlot16, g3atmpncconnection=g3atmpncconnection, g3agentState=g3agentState, g3callratedataMeasHour3=g3callratedataMeasHour3, g3esparmsNetCommunity35=g3esparmsNetCommunity35, g3tonerecTdelay=g3tonerecTdelay, g3huntQueSiz=g3huntQueSiz, g3rpatCallsQueued=g3rpatCallsQueued, g3ipinterfaceNodeName55=g3ipinterfaceNodeName55, g3stamediaGatewayStatus73=g3stamediaGatewayStatus73, g3bulletinMessage11=g3bulletinMessage11, g3atmportpg3TGNumber230=g3atmportpg3TGNumber230, g3statmedproDupAlarmMaj=g3statmedproDupAlarmMaj, g3atmportpg1TGNumber36=g3atmportpg1TGNumber36, g3pkatmlatencyDay=g3pkatmlatencyDay, g3stamediaGatewayStatus9=g3stamediaGatewayStatus9, g3routepatternTGNumber16=g3routepatternTGNumber16, g3statmedproDupNodeName=g3statmedproDupNodeName, definity_ip600=definity_ip600, g3bulletinDate28=g3bulletinDate28)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3atmportpg2SGNumber140=g3atmportpg2SGNumber140, g3loadtotalTage=g3loadtotalTage, g3ipserverSecStHealth=g3ipserverSecStHealth, g3tonerecsumCCCPTRTReq=g3tonerecsumCCCPTRTReq, g3ipinterfaceNodeName69=g3ipinterfaceNodeName69, g3trapMajor=g3trapMajor, g3cbctrunkServiceName=g3cbctrunkServiceName, g3atmportpg2TGNumber170=g3atmportpg2TGNumber170, g3pkloadintTage=g3pkloadintTage, g3ipregionRegion=g3ipregionRegion, g3callratemediaBsyIntMnToday2=g3callratemediaBsyIntMnToday2, g3atmportpg2TGNumber168=g3atmportpg2TGNumber168, g3annintegDay=g3annintegDay, g3ipinterfaceSlot32=g3ipinterfaceSlot32, g3alarmsPort=g3alarmsPort, g3timedateLastError3=g3timedateLastError3, g3healthPncStat1to159=g3healthPncStat1to159, g3busytrkMaintName=g3busytrkMaintName, g3atmportpg3SGNumber229=g3atmportpg3SGNumber229, g3pkloadtanTcount=g3pkloadtanTcount, g3atmlatencyTintvl=g3atmlatencyTintvl, g3rpatCallsCarrd=g3rpatCallsCarrd, g3callratetotalRunDay=g3callratetotalRunDay, g3voicesumHour=g3voicesumHour, g3trapFromMinute=g3trapFromMinute, g3trunkgrpACAFlag=g3trunkgrpACAFlag, g3clanpppChapFailTot=g3clanpppChapFailTot, g3bulletinDate51=g3bulletinDate51, g3stamediaGatewayStatus13=g3stamediaGatewayStatus13, g3msgalmAck=g3msgalmAck, g3atmportpg3SGNumber207=g3atmportpg3SGNumber207, g3trunkgrpDCSFlag=g3trunkgrpDCSFlag, g3platcmdsTime=g3platcmdsTime, g3ipinterfaceSlot19=g3ipinterfaceSlot19, g3statstaCFdestExt=g3statstaCFdestExt, g3healthPncStat1to152=g3healthPncStat1to152, g3routepatternTGNumber15=g3routepatternTGNumber15, crossfire_board=crossfire_board, g3secviolateStnInvalidSSC=g3secviolateStnInvalidSSC, g3configPort3=g3configPort3, g3trunkcfgTable=g3trunkcfgTable, g3atmportpg2TGNumber161=g3atmportpg2TGNumber161, g3rpatMonth=g3rpatMonth, g3atmlatencyTretrieve=g3atmlatencyTretrieve, g3ipinterfaceSlot66=g3ipinterfaceSlot66, g3fiberlinkE1ABoard=g3fiberlinkE1ABoard, g3callratetotalBsyCalCmplYesterday2=g3callratetotalBsyCalCmplYesterday2, g3ipintlistSlot=g3ipintlistSlot, g3cbctrunkTintvl=g3cbctrunkTintvl, g3ipsignalIntvlPktsLostPct=g3ipsignalIntvlPktsLostPct, g3callratemediaBsyIntMn=g3callratemediaBsyIntMn, g3rpatTretrieve=g3rpatTretrieve, g3annintegHour=g3annintegHour, g3ipinterfaceSlot72=g3ipinterfaceSlot72, g3pkprincipalTintvl=g3pkprincipalTintvl, g3pkloadincTcount=g3pkloadincTcount, g3filterMaintenanceObject=g3filterMaintenanceObject, g3atmcfgTable=g3atmcfgTable, g3trunkwbsumTdelay=g3trunkwbsumTdelay, g3gatewayType=g3gatewayType, g3callratevoiceNumCalls=g3callratevoiceNumCalls, g3atmportpg3SGNumber222=g3atmportpg3SGNumber222, g3ipinterfaceSlot71=g3ipinterfaceSlot71, g3pkvoicesumMonth=g3pkvoicesumMonth, g3atmpncTdelay=g3atmpncTdelay, g3stamediaAlarmMinor=g3stamediaAlarmMinor, g3ipdspsumMeasHour=g3ipdspsumMeasHour, g3routepatternTGNumber4=g3routepatternTGNumber4, g3atmcfgBoardNum=g3atmcfgBoardNum, g3ipdspsumRegion=g3ipdspsumRegion, g3regipstatTable=g3regipstatTable, g3bulletinDate9=g3bulletinDate9, g3rpatQueueOvflo=g3rpatQueueOvflo, g3datamstaConnPort7=g3datamstaConnPort7, g3configPort31=g3configPort31, g3pkloadoutOutOutgoingUse=g3pkloadoutOutOutgoingUse, g3atmportpg1SGNumber47=g3atmportpg1SGNumber47, g3healthCab31to4429=g3healthCab31to4429, g3tonerecsumCCCPTRPDeny=g3tonerecsumCCCPTRPDeny, g3callratemediaBsyIntHr=g3callratemediaBsyIntHr, g3healthDupPNC=g3healthDupPNC, g3cbctrunkOvfMAX=g3cbctrunkOvfMAX, g3atmportpg2SGNumber99=g3atmportpg2SGNumber99, g3callratesrvBsyIntHrYesterday=g3callratesrvBsyIntHrYesterday, g3lsplistServiceState=g3lsplistServiceState, g3ipunregTretrieve=g3ipunregTretrieve, g3pkprincipal=g3pkprincipal, g3trunksumRunDay=g3trunksumRunDay, g3atmportpg1SGNumber77=g3atmportpg1SGNumber77, g3callratesrvBsyIntMnYesterday2=g3callratesrvBsyIntMnYesterday2, g3stationcfg=g3stationcfg, g3atmportpg3TGNumber212=g3atmportpg3TGNumber212, g3tonerecCCCPTRPkOffPN=g3tonerecCCCPTRPkOffPN, g3servalmID=g3servalmID, g3atmportpg2TGNumber146=g3atmportpg2TGNumber146, g3trunkwbsumDay=g3trunkwbsumDay, g3pkloadtanTanIntraPNPeg=g3pkloadtanTanIntraPNPeg, g3pkloadtanPNNumber=g3pkloadtanPNNumber, g3commlinkTage=g3commlinkTage, g3dmoduleExtension=g3dmoduleExtension, g3filterTrunkGroup=g3filterTrunkGroup, g3atmportpg3SGNumber203=g3atmportpg3SGNumber203, g3trunksumIncSeize=g3trunksumIncSeize, g3agent=g3agent, g3pkannallExtension=g3pkannallExtension, g3bulletinDate10=g3bulletinDate10, g3esparms=g3esparms, g3pkhuntDay=g3pkhuntDay, g3attdgrpTable=g3attdgrpTable, g3principalCallsRedirect=g3principalCallsRedirect, g3gatewayRegion=g3gatewayRegion, g3pktonerecDTMFTotOffPN=g3pktonerecDTMFTotOffPN, g3esmainLocalOnly=g3esmainLocalOnly, g3atmportpg1TGNumber58=g3atmportpg1TGNumber58, g3configPort10=g3configPort10, g3atmportpg2TGNumber159=g3atmportpg2TGNumber159, g3callratetotalMeasHour5=g3callratetotalMeasHour5, g3pktonerecsum=g3pktonerecsum, g3ipinterfaceSlot11=g3ipinterfaceSlot11, g3loadoutOutIncomingPeg=g3loadoutOutIncomingPeg, g3ipinterfaceSlot26=g3ipinterfaceSlot26, g3statmedproDupAlarmMin=g3statmedproDupAlarmMin, g3rpatcfgPattern8=g3rpatcfgPattern8, g3atmportpg1TGNumber24=g3atmportpg1TGNumber24, g3callratemediaBsyIntHrYesterday2=g3callratemediaBsyIntHrYesterday2, g3tonerecCCMFCRPnAlloc=g3tonerecCCMFCRPnAlloc, g3atmportpg1SGNumber76=g3atmportpg1SGNumber76, g3atmportpg2SGNumber103=g3atmportpg2SGNumber103, g3atmlatencyEntry=g3atmlatencyEntry, g3msgalmLocation=g3msgalmLocation, g3esmainPlatformType=g3esmainPlatformType, g3atmportpg2TGNumber111=g3atmportpg2TGNumber111, g3atmportpg3TGNumber227=g3atmportpg3TGNumber227, g3healthCab31to4418=g3healthCab31to4418, g3cbctrunkQueueAband=g3cbctrunkQueueAband, g3pkclansocsumTintvl=g3pkclansocsumTintvl, g3alarmsAlarmType=g3alarmsAlarmType, g3atmportpg3TGNumber213=g3atmportpg3TGNumber213, g3pktrunkwbsumMeasHour=g3pktrunkwbsumMeasHour, g3ipunregTable=g3ipunregTable, g3configSuffix=g3configSuffix, g3atmpncPncSELA=g3atmpncPncSELA, g3config=g3config, g3pnchealthPncAHealth=g3pnchealthPncAHealth, g3trunklightMonth=g3trunklightMonth, g3gatewayEncrypt=g3gatewayEncrypt, g3callratedataBsyIntHrYesterday2=g3callratedataBsyIntHrYesterday2, g3atmportpg1TGNumber76=g3atmportpg1TGNumber76, g3callratevoiceMeasHour2=g3callratevoiceMeasHour2, g3pkannintegMaxCallPeriod=g3pkannintegMaxCallPeriod, g3callratetotalBsyIntHrYesterday=g3callratetotalBsyIntHrYesterday, g3lsplistIPAddr1=g3lsplistIPAddr1, g3atmportpg1SGNumber24=g3atmportpg1SGNumber24, g3pkannintegTdelay=g3pkannintegTdelay, g3filterBoardNumber=g3filterBoardNumber, g3healthPncStat31to4419=g3healthPncStat31to4419, g3trunkstaConnPort5=g3trunkstaConnPort5, g3busytrkEntry=g3busytrkEntry, g3statmedproDupState=g3statmedproDupState, g3pkloadoutOutIncomingPeg=g3pkloadoutOutIncomingPeg, g3atmportpg3SGNumber209=g3atmportpg3SGNumber209, g3esparmsNetCommunity42=g3esparmsNetCommunity42, g3atmportpg2SGNumber95=g3atmportpg2SGNumber95, g3pktonerecsumCCCPTRHour=g3pktonerecsumCCCPTRHour, g3trunksumTotalSeize=g3trunksumTotalSeize, g3healthPncStat1to157=g3healthPncStat1to157, g3cabinetCarDPNN=g3cabinetCarDPNN, g3ds1cfgTretrieve=g3ds1cfgTretrieve, g3callratedataBsyIntScYesteday2=g3callratedataBsyIntScYesteday2, g3clanetherKey=g3clanetherKey, g3nodenameTage=g3nodenameTage, g3atmportpg3SGNumber182=g3atmportpg3SGNumber182, g3tonerecCCTTRPnReq=g3tonerecCCTTRPnReq, g3bulletinMessage59=g3bulletinMessage59, g3healthPncStat1to1512=g3healthPncStat1to1512, g3atmportpg2TGNumber108=g3atmportpg2TGNumber108, g3annintegMaxPorts=g3annintegMaxPorts, g3healthCab16to3025=g3healthCab16to3025, g3cartypeCab2CarDType=g3cartypeCab2CarDType, g3tonerecTcount=g3tonerecTcount, g3tonerecCCTTRPnAlloc=g3tonerecCCTTRPnAlloc, g3ipsignalEntry=g3ipsignalEntry, g3nodenameIP2=g3nodenameIP2, g3ipinterfaceNodeName39=g3ipinterfaceNodeName39, g3hunt=g3hunt, g3healthPncStat31to4428=g3healthPncStat31to4428, g3atmportpg1TGNumber4=g3atmportpg1TGNumber4, g3atmportpg2TGNumber106=g3atmportpg2TGNumber106, g3bulletinDate33=g3bulletinDate33, g3callratemediaBsyCalCmplYesterday=g3callratemediaBsyCalCmplYesterday, g3atmportpg3SGNumber235=g3atmportpg3SGNumber235, g3loadtotalEntry=g3loadtotalEntry, g3pkrpatTretrieve=g3pkrpatTretrieve, g3healthCab1to1514=g3healthCab1to1514, g3tonerecsumCCMFCRTDeny=g3tonerecsumCCMFCRTDeny, g3pkprincipalCallsCAC=g3pkprincipalCallsCAC, g3callratemediaNumCallsYesterday2=g3callratemediaNumCallsYesterday2, g3stamgannTcount=g3stamgannTcount, g3healthPncStat16to3031=g3healthPncStat16to3031, g3tonerecHour=g3tonerecHour, g3configPort17=g3configPort17, g3ipdspsumOutRegion=g3ipdspsumOutRegion, g3atmportpg3Tage=g3atmportpg3Tage, g3commlinkEntry=g3commlinkEntry, g3loadtanTable=g3loadtanTable, g3ipinterfaceNodeName49=g3ipinterfaceNodeName49, g3statregionDenialCount=g3statregionDenialCount, g3atmportpg2SGNumber92=g3atmportpg2SGNumber92, g3pkannintegAllPortsBusy=g3pkannintegAllPortsBusy, g3ipinterfaceSlot8=g3ipinterfaceSlot8, g3tonerec=g3tonerec, g3esparmsNetCommunity10=g3esparmsNetCommunity10, g3agentSubmapName=g3agentSubmapName, g3cbctrunkEntry=g3cbctrunkEntry, g3callratetotalMeasHour3=g3callratetotalMeasHour3, g3trunklightTage=g3trunklightTage, g3cbctrunkDur2=g3cbctrunkDur2, g3atmportpg2TGNumber169=g3atmportpg2TGNumber169, g3atmportpg3TGNumber244=g3atmportpg3TGNumber244, g3pkipdspsumOutRegion=g3pkipdspsumOutRegion, g3esparmsNetCommunity22=g3esparmsNetCommunity22, g3errorsEntry=g3errorsEntry, g3atmportpg2TGNumber122=g3atmportpg2TGNumber122, g3ipinterfaceNodeName84=g3ipinterfaceNodeName84, g3clansocsumHour=g3clansocsumHour, g3healthOthBusy=g3healthOthBusy, g3healthPncStat31to4423=g3healthPncStat31to4423, g3huntlistTdelay=g3huntlistTdelay, g3pkvoicesumTage=g3pkvoicesumTage, g3pkannintegAnnNbr=g3pkannintegAnnNbr, g3clanpppDay=g3clanpppDay, g3esparmsNetCommunity53=g3esparmsNetCommunity53, g3vintageRemoteOffReg=g3vintageRemoteOffReg, g3secviolateDay=g3secviolateDay, g3atmportpg2TGNumber121=g3atmportpg2TGNumber121, g3callratedataBsyCalCmplYesterday2=g3callratedataBsyCalCmplYesterday2, g3trunkgrpEntry=g3trunkgrpEntry, g3atmportpg3LSGNumber1=g3atmportpg3LSGNumber1, g3pkipdspsumDSPRecs=g3pkipdspsumDSPRecs, g3cabinetNum=g3cabinetNum, g3ipserverPrimLocation=g3ipserverPrimLocation, g3atmportpg2TGNumber167=g3atmportpg2TGNumber167, g3attdposTage=g3attdposTage, g3callratevoiceBsyCalCmplYesterday=g3callratevoiceBsyCalCmplYesterday, g3atmportpg1TGNumber31=g3atmportpg1TGNumber31, g3ipintlistNodeName=g3ipintlistNodeName, g3ipinterfaceNodeName58=g3ipinterfaceNodeName58, g3alarmsMonthRslvd=g3alarmsMonthRslvd, g3atmportpg2SGNumber139=g3atmportpg2SGNumber139, g3healthPncStat31to4426=g3healthPncStat31to4426, g3atmportpg2TGNumber163=g3atmportpg2TGNumber163, g3stamediaBusyOutTrunks=g3stamediaBusyOutTrunks, g3ipserverTage=g3ipserverTage, g3mmisumTotalAllocation=g3mmisumTotalAllocation)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3pktrunkoutTdelay=g3pktrunkoutTdelay, g3atmportpg3SGNumber237=g3atmportpg3SGNumber237, g3vintageAbbAlmRep2=g3vintageAbbAlmRep2, g3atmportpg2SGNumber180=g3atmportpg2SGNumber180, g3bulletinDate13=g3bulletinDate13, g3eventhourEventData1=g3eventhourEventData1, g3pkprincipalCovPath1=g3pkprincipalCovPath1, g3esmainServerAId=g3esmainServerAId, g3atmportpg3LSGNumber11=g3atmportpg3LSGNumber11, g3pktrunkwbsumDay=g3pktrunkwbsumDay, g3pkhuntTretrieve=g3pkhuntTretrieve, g3huntSpeedAns=g3huntSpeedAns, private=private, g3errorsErrType=g3errorsErrType, g3mmisum=g3mmisum, g3lsplistEntry=g3lsplistEntry, g3trapMaintenanceObject=g3trapMaintenanceObject, g3atmportpg1TGNumber43=g3atmportpg1TGNumber43, g3pktonerecMonth=g3pktonerecMonth, g3atmportpg2TGNumber105=g3atmportpg2TGNumber105, g3clientExternalName=g3clientExternalName, g3pktonerecsumDTMFPQueue=g3pktonerecsumDTMFPQueue, g3ipevtIndex=g3ipevtIndex, g3healthCab31to4427=g3healthCab31to4427, g3stamediaH248LinksUp=g3stamediaH248LinksUp, g3ds1Tcount=g3ds1Tcount, g3eventdayEventData2=g3eventdayEventData2, g3pkipsignalTretrieve=g3pkipsignalTretrieve, g3trunkwbsumTotalSeize=g3trunkwbsumTotalSeize, g3atmportpg1TGNumber19=g3atmportpg1TGNumber19, g3atmportpg1TGNumber59=g3atmportpg1TGNumber59, g3pkipsignalTage=g3pkipsignalTage, g3ipinterfaceNodeName17=g3ipinterfaceNodeName17, g3fiberlinkDS1Type=g3fiberlinkDS1Type, g3stamediaGatewayStatus78=g3stamediaGatewayStatus78, g3esmsumPercentBlock=g3esmsumPercentBlock, g3stamediaGatewayStatus25=g3stamediaGatewayStatus25, g3stamediaGatewayStatus76=g3stamediaGatewayStatus76, g3atmportpg3LTGNumber8=g3atmportpg3LTGNumber8, g3pkrpatPattern=g3pkrpatPattern, g3siggroupBoard10=g3siggroupBoard10, g3restart=g3restart, g3atmportpg1TGNumber50=g3atmportpg1TGNumber50, g3ipinterfaceSlot74=g3ipinterfaceSlot74, g3tonerecsumGPTDPDeny=g3tonerecsumGPTDPDeny, g3callratedataMeasHour5=g3callratedataMeasHour5, g3pkcovpathCallsOffSAC=g3pkcovpathCallsOffSAC, g3bulletinMessage14=g3bulletinMessage14, g3callratedataNumCallsToday1=g3callratedataNumCallsToday1, g3gatewayG700ModTypeV2=g3gatewayG700ModTypeV2, g3vintageIPStaLimit=g3vintageIPStaLimit, g3pnblockPNlinkUsage=g3pnblockPNlinkUsage, g3siggroupTintvl=g3siggroupTintvl, g3clanetherCrcChkTot=g3clanetherCrcChkTot, g3statlinkTable=g3statlinkTable, g3callratevoiceBsyIntSc=g3callratevoiceBsyIntSc, g3rpatDay=g3rpatDay, g3gatewayG350ModTypeV9=g3gatewayG350ModTypeV9, g3atmportpg2TGNumber141=g3atmportpg2TGNumber141, g3principalCallsCSAC=g3principalCallsCSAC, g3vintage=g3vintage, g3atmportpg2SGNumber179=g3atmportpg2SGNumber179, g3errors=g3errors, g3snblockEntry=g3snblockEntry, g3loadinc=g3loadinc, g3huntCallsAban=g3huntCallsAban, g3ipdspsumYear=g3ipdspsumYear, g3pkprincipalExtensionTAC=g3pkprincipalExtensionTAC, g3atmportpg1SGNumber75=g3atmportpg1SGNumber75, g3loadtanTanIntraPNPeg=g3loadtanTanIntraPNPeg, g3pkloadtanTage=g3pkloadtanTage, g3pkesmsumMeasHour=g3pkesmsumMeasHour, g3siggroupBoard4=g3siggroupBoard4, g3datamstaConnPort5=g3datamstaConnPort5, g3pkloadincIncIncomingUse=g3pkloadincIncIncomingUse, g3ipinterfaceSlot79=g3ipinterfaceSlot79, g3eventhourEventData2=g3eventhourEventData2, g3pkloadoutDay=g3pkloadoutDay, g3filterTableIndex=g3filterTableIndex, g3gatewayLocation=g3gatewayLocation, g3eventdayLastHour=g3eventdayLastHour, g3occsumRunMonth=g3occsumRunMonth, g3busyrls=g3busyrls, g3atmcfgName=g3atmcfgName, g3ipsignalHour=g3ipsignalHour, g3atmportpg1SGNumber51=g3atmportpg1SGNumber51, g3ipinterfaceNodeName13=g3ipinterfaceNodeName13, g3stamediaGatewayStatus43=g3stamediaGatewayStatus43, g3annintegName=g3annintegName, g3snblockMonth=g3snblockMonth, g3trunkgrpTretrieve=g3trunkgrpTretrieve, g3vintageIPAddress1=g3vintageIPAddress1, g3ipinterfaceNodeName7=g3ipinterfaceNodeName7, g3callratedata=g3callratedata, g3atmportpg2TGNumber114=g3atmportpg2TGNumber114, g3bulletinDate32=g3bulletinDate32, g3callratedataMeasHour2=g3callratedataMeasHour2, g3atmportpg1TGNumber63=g3atmportpg1TGNumber63, g3pktrunksumTable=g3pktrunksumTable, g3trunkwbsumTrunkGroup=g3trunkwbsumTrunkGroup, g3atmportpg2Table=g3atmportpg2Table, g3siggroupBoard11=g3siggroupBoard11, g3annallTintvl=g3annallTintvl, g3occsumCPOcc=g3occsumCPOcc, g3ipcodecsumG723OutRegion=g3ipcodecsumG723OutRegion, g3ipinterface=g3ipinterface, g3eventdayEventCount=g3eventdayEventCount, g3extdevType=g3extdevType, g3pkatmlatencyTcount=g3pkatmlatencyTcount, g3pkrpatQueueSize=g3pkrpatQueueSize, g3rpatcfgPattern17=g3rpatcfgPattern17, g3callratedataTretrieve=g3callratedataTretrieve, g3pkcovpathPoint2Aband=g3pkcovpathPoint2Aband, g3clientEnumType=g3clientEnumType, g3pkhuntYear=g3pkhuntYear, g3pktrunkout=g3pktrunkout, g3secviolateTdelay=g3secviolateTdelay, g3callratetotalBsyCalCmpl=g3callratetotalBsyCalCmpl, g3ds1cfgEntry=g3ds1cfgEntry, g3ds1cfgVintage=g3ds1cfgVintage, g3pksnblockDay=g3pksnblockDay, g3rpatTotalCalls=g3rpatTotalCalls, g3principalCallsCDAC=g3principalCallsCDAC, g3atmportpg2SGNumber104=g3atmportpg2SGNumber104, g3atmportpg3SGNumber240=g3atmportpg3SGNumber240, g3atmportpg3TGNumber226=g3atmportpg3TGNumber226, g3statstaConnPort3=g3statstaConnPort3, g3agentOfferType=g3agentOfferType, g3healthTage=g3healthTage, g3esparmsNetCommunity34=g3esparmsNetCommunity34, g3portTable=g3portTable, g3siggroupIntfNum16=g3siggroupIntfNum16, g3cbctrunkCallsQueued=g3cbctrunkCallsQueued, g3trapToMinute=g3trapToMinute, g3stamediaGatewayStatus44=g3stamediaGatewayStatus44, g3atmportpg2SGNumber124=g3atmportpg2SGNumber124, g3stamediaGatewayStatus1=g3stamediaGatewayStatus1, g3callratemediaBsyCalCmplToday=g3callratemediaBsyCalCmplToday, g3ds1cfgSignaling=g3ds1cfgSignaling, g3pkloadtanTretrieve=g3pkloadtanTretrieve, g3tonerecCCCPTRTotOffPN=g3tonerecCCCPTRTotOffPN, g3filterActive=g3filterActive, g3atmportpg3Entry=g3atmportpg3Entry, g3loadincEntry=g3loadincEntry, g3busyrlsTrunkMember=g3busyrlsTrunkMember, g3atmportpg1SGNumber72=g3atmportpg1SGNumber72, g3stamediaGatewayStatus45=g3stamediaGatewayStatus45, g3atmportpg2TGNumber154=g3atmportpg2TGNumber154, g3annintegTage=g3annintegTage, g3pkloadoutMonth=g3pkloadoutMonth, g3statmedproLinkPeer=g3statmedproLinkPeer, g3atmportpg3LSGNumber9=g3atmportpg3LSGNumber9, g3pktrunksumPercentAtb=g3pktrunksumPercentAtb, g3rpatCallsCarried=g3rpatCallsCarried, g3statmedproDSPChanStatus8=g3statmedproDSPChanStatus8, g3secviolateTcount=g3secviolateTcount, g3configTable=g3configTable, g3pkesmsumAvailablePorts=g3pkesmsumAvailablePorts, g3covpathCallsOffTotal=g3covpathCallsOffTotal, g3restartTdelay=g3restartTdelay, g3clanpppInvFrameTot=g3clanpppInvFrameTot, g3stamedlistTintvl=g3stamedlistTintvl, g3pnblockPNlinkBlockage=g3pnblockPNlinkBlockage, g3callratemediaMeasHour5=g3callratemediaMeasHour5, g3datamsta=g3datamsta, g3secviolateAtdViolateAC=g3secviolateAtdViolateAC, g3statmedproBoardLoc=g3statmedproBoardLoc, g3stamediaGatewayStatus15=g3stamediaGatewayStatus15, g3ipinterfaceNodeName28=g3ipinterfaceNodeName28, g3atmpncTable=g3atmpncTable, g3vintageIPAttdLimit=g3vintageIPAttdLimit, g3tonerecsumDTMFTDeny=g3tonerecsumDTMFTDeny, g3annintegCallsQueued=g3annintegCallsQueued, g3ipinterfaceNodeName26=g3ipinterfaceNodeName26, g3statmedproDSPChanStatus4=g3statmedproDSPChanStatus4, g3callratedataTdelay=g3callratedataTdelay, g3atmportpg1SGNumber35=g3atmportpg1SGNumber35, g3mgrecruleTage=g3mgrecruleTage, g3stamgannTretrieve=g3stamgannTretrieve, g3ipnetregionTcount=g3ipnetregionTcount, g3callratesrv=g3callratesrv, g3ipdspsumTretrieve=g3ipdspsumTretrieve, g3clanppp=g3clanppp, g3pkpnblockPNlinkPeak=g3pkpnblockPNlinkPeak, g3ipcodecsumMeasHour=g3ipcodecsumMeasHour, g3atmportpg2TGNumber160=g3atmportpg2TGNumber160, g3trunkstaConnPort8=g3trunkstaConnPort8, g3covpathCallsOffAct=g3covpathCallsOffAct, g3siggroup=g3siggroup, g3ipcodecsumG711OutRegion=g3ipcodecsumG711OutRegion, g3pkesmsumOutofService=g3pkesmsumOutofService, g3bulletinMessage12=g3bulletinMessage12, g3gatewayTretrieve=g3gatewayTretrieve, g3eventdayIndex=g3eventdayIndex, g3cbctrunkMinChan=g3cbctrunkMinChan, g3bulletinMessage33=g3bulletinMessage33, g3callratemediaBsyIntMnYesterday2=g3callratemediaBsyIntMnYesterday2, g3atmportpg2TGNumber109=g3atmportpg2TGNumber109, g3pktonerecsumDTMFTQueue=g3pktonerecsumDTMFTQueue, g3annintegASP=g3annintegASP, g3pnblockPNlinkPeak=g3pnblockPNlinkPeak, g3trunkcfgVintage=g3trunkcfgVintage, g3ipdspsumHour=g3ipdspsumHour, g3clansocsumTage=g3clansocsumTage, g3ipinterfaceNodeName4=g3ipinterfaceNodeName4, g3platcmdsServerName=g3platcmdsServerName, g3atmportpg1TGNumber2=g3atmportpg1TGNumber2, g3attdposYear=g3attdposYear, g3atmpncPncHoDsp2A=g3atmpncPncHoDsp2A, g3pktrunksumTintvl=g3pktrunksumTintvl, g3loadtanHour=g3loadtanHour, g3bulletinDate54=g3bulletinDate54, g3atmportpg2SGNumber91=g3atmportpg2SGNumber91, g3cabtypeCab3Type=g3cabtypeCab3Type, g3busybrdAltName=g3busybrdAltName, g3pkhuntMeasHour=g3pkhuntMeasHour, g3statmedproNodeName=g3statmedproNodeName, g3acaYear=g3acaYear, g3pktonerecsumCCTTRPDeny=g3pktonerecsumCCTTRPDeny, g3bulletinDate43=g3bulletinDate43, g3pkipsignalHourPacketsSent=g3pkipsignalHourPacketsSent, g3callratemediaBsyIntMnToday=g3callratemediaBsyIntMnToday, g3trapFrequency=g3trapFrequency, g3pkipcodecsumHour=g3pkipcodecsumHour, g3healthCab16to3017=g3healthCab16to3017, g3pkipdspsumTage=g3pkipdspsumTage, g3bulletinDate3=g3bulletinDate3, g3clanpppCrcChkDelta=g3clanpppCrcChkDelta, g3ipinterfaceNodeName24=g3ipinterfaceNodeName24, g3siggroupBoard18=g3siggroupBoard18, g3esparmsNetCommunity1=g3esparmsNetCommunity1, g3cartypeCab3CarEType=g3cartypeCab3CarEType, g3statstaConnPort6=g3statstaConnPort6, g3tonerecsumGPTDHour=g3tonerecsumGPTDHour, g3atmportpg2TGNumber162=g3atmportpg2TGNumber162, g3timedateLastError4=g3timedateLastError4, g3ipunregStatReg=g3ipunregStatReg, g3snblockTintvl=g3snblockTintvl, g3atmportpg1TGNumber8=g3atmportpg1TGNumber8, g3pkloadincTretrieve=g3pkloadincTretrieve, g3trunkcfgTintvl=g3trunkcfgTintvl, g3atmportpg1TGNumber42=g3atmportpg1TGNumber42, g3ipregionEntry=g3ipregionEntry, g3ipserverSecServState=g3ipserverSecServState, g3atmportpg2TGNumber153=g3atmportpg2TGNumber153, g3pkloadincTage=g3pkloadincTage, g3pkcovpathCallsOffAct=g3pkcovpathCallsOffAct, g3ipnetregionTdelay=g3ipnetregionTdelay, g3statregionTable=g3statregionTable, g3vintageSpeArelease=g3vintageSpeArelease, g3atmportpg3SGNumber211=g3atmportpg3SGNumber211, g3trkgrpmemTable=g3trkgrpmemTable, g3atmportpg2SGNumber113=g3atmportpg2SGNumber113, g3callratedataBsyCalCmplYesterday=g3callratedataBsyCalCmplYesterday)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3dmoduleTable=g3dmoduleTable, g3callratedataNumCallsYesterday=g3callratedataNumCallsYesterday, g3esparmsNetCommunity28=g3esparmsNetCommunity28, g3healthPncStat31to4421=g3healthPncStat31to4421, g3pktonerecCCMFCRPnReq=g3pktonerecCCMFCRPnReq, g3healthSysMgmtOcc=g3healthSysMgmtOcc, g3stamediaGatewayStatus5=g3stamediaGatewayStatus5, g3pktrunksumPercentOutBlk=g3pktrunksumPercentOutBlk, g3ipsignalHourPktsLostPct=g3ipsignalHourPktsLostPct, g3stamediaGatewayStatus26=g3stamediaGatewayStatus26, g3atmportpg2Tdelay=g3atmportpg2Tdelay, g3esparmsNetCommunity9=g3esparmsNetCommunity9, g3clanetherHour=g3clanetherHour, g3atmportpg3SGNumber236=g3atmportpg3SGNumber236, g3trapFromHour=g3trapFromHour, g3callratesrvMeasHour4=g3callratesrvMeasHour4, g3atmportpg1TGNumber52=g3atmportpg1TGNumber52, g3tonerecsumCCTTRTQueue=g3tonerecsumCCTTRTQueue, g3atmportpg1TGNumber74=g3atmportpg1TGNumber74, g3pkrpatTable=g3pkrpatTable, g3vintageRemoteOffLimit=g3vintageRemoteOffLimit, g3pkloadintYear=g3pkloadintYear, g3atmportpg1SGNumber54=g3atmportpg1SGNumber54, g3ipinterfaceSlot46=g3ipinterfaceSlot46, g3attdgrpCallsHAbd=g3attdgrpCallsHAbd, g3stamediaGatewayStatus35=g3stamediaGatewayStatus35, g3bulletinMessage40=g3bulletinMessage40, g3stamediaGatewayStatus48=g3stamediaGatewayStatus48, g3callratetotalRunMonth=g3callratetotalRunMonth, g3voicesumTage=g3voicesumTage, g3trunkstaMaintBusy=g3trunkstaMaintBusy, g3mediacfgBoardNum=g3mediacfgBoardNum, g3tonerecsumETRTAvail=g3tonerecsumETRTAvail, g3pktonerecsumTintvl=g3pktonerecsumTintvl, g3trunkstaConnPort4=g3trunkstaConnPort4, g3pkloadoutYear=g3pkloadoutYear, g3stamediaGatewayStatus60=g3stamediaGatewayStatus60, g3atmpncPncHoDsp2B=g3atmpncPncHoDsp2B, g3statlinkTcount=g3statlinkTcount, g3atmportpg3TGNumber220=g3atmportpg3TGNumber220, g3pktonerecsumCCMFCRHour=g3pktonerecsumCCMFCRHour, g3pnchealthTretrieve=g3pnchealthTretrieve, g3esserversServerBId=g3esserversServerBId, g3ipserverCallCntl802=g3ipserverCallCntl802, g3atmportpg1SGNumber10=g3atmportpg1SGNumber10, g3atmportpg3SGNumber228=g3atmportpg3SGNumber228, g3pktonerecCCCPTRPnAlloc=g3pktonerecCCCPTRPnAlloc, g3healthPncStat16to3028=g3healthPncStat16to3028, g3ipnetregionAudio8021Pri=g3ipnetregionAudio8021Pri, g3trunkgrpUsageAlloc=g3trunkgrpUsageAlloc, g3bulletinDate27=g3bulletinDate27, g3pktrunklightTage=g3pktrunklightTage, g3pkloadtotalYear=g3pkloadtotalYear, g3esparmsDay=g3esparmsDay, g3callratesrvBsyIntHrToday2=g3callratesrvBsyIntHrToday2, g3esmain=g3esmain, g3atmportpg3SGNumber188=g3atmportpg3SGNumber188, g3atmpncPncAFIA=g3atmpncPncAFIA, g3esmsumTintvl=g3esmsumTintvl, g3trunkgrpTrunkType=g3trunkgrpTrunkType, g3ipsignalTretrieve=g3ipsignalTretrieve, g3extdevTretrieve=g3extdevTretrieve, g3atmportpg1Tdelay=g3atmportpg1Tdelay, g3clansocsumTable=g3clansocsumTable, g3clientTable=g3clientTable, g3timedateLastError5=g3timedateLastError5, g3bulletinDate38=g3bulletinDate38, g3covpathCoveragePath=g3covpathCoveragePath, g3msgalmSource=g3msgalmSource, g3busytrkAction=g3busytrkAction, g3attdgrpCallsAbnd=g3attdgrpCallsAbnd, g3trunkwbsumTretrieve=g3trunkwbsumTretrieve, g3bulletinMessage41=g3bulletinMessage41, g3connectTimeUp=g3connectTimeUp, g3attdposCallsAns=g3attdposCallsAns, g3atmportpg1TGNumber7=g3atmportpg1TGNumber7, g3loadtotalYear=g3loadtotalYear, g3ipinterfaceSlot42=g3ipinterfaceSlot42, g3stamediaGatewayStatus56=g3stamediaGatewayStatus56, g3ipinterfaceSlot20=g3ipinterfaceSlot20, g3pkhuntEntry=g3pkhuntEntry, g3ipinterfaceNodeName8=g3ipinterfaceNodeName8, g3atmportpg1SGNumber5=g3atmportpg1SGNumber5, g3callratevoiceBsyCalCmpl=g3callratevoiceBsyCalCmpl, g3atmpncPncESIA=g3atmpncPncESIA, g3bulletinDate41=g3bulletinDate41, g3statlinkTintvl=g3statlinkTintvl, g3pkanninteg=g3pkanninteg, g3trunkgrpServiceType=g3trunkgrpServiceType, g3loadtanTanIntraPNUse=g3loadtanTanIntraPNUse, g3atmportpg1TGNumber68=g3atmportpg1TGNumber68, g3secviolateLoginSuccess=g3secviolateLoginSuccess, g3pkvoicesumAvailableUsage=g3pkvoicesumAvailableUsage, g3statregionConnStatus=g3statregionConnStatus, g3bulletinMessage19=g3bulletinMessage19, g3trunklightTrunkGroup=g3trunklightTrunkGroup, g3cbctrunkIncSeize=g3cbctrunkIncSeize, g3ipinterfaceSlot75=g3ipinterfaceSlot75, g3pktonerecsumGPTDPDeny=g3pktonerecsumGPTDPDeny, g3rpatcfgPattern7=g3rpatcfgPattern7, g3atmportpg2TGNumber140=g3atmportpg2TGNumber140, g3atmportpg1TGNumber26=g3atmportpg1TGNumber26, g3attdgrpCallsHeld=g3attdgrpCallsHeld, g3atmportpg2SGNumber154=g3atmportpg2SGNumber154, g3cbctrunkYear=g3cbctrunkYear, g3ipserverPrimIP2=g3ipserverPrimIP2, g3cbctrunkTage=g3cbctrunkTage, g3callratesrvTdelay=g3callratesrvTdelay, g3cbctrunk=g3cbctrunk, g3atmportpg3LTGNumber9=g3atmportpg3LTGNumber9, g3errorsMaintName=g3errorsMaintName, g3atmportpg2TGNumber144=g3atmportpg2TGNumber144, g3restartTage=g3restartTage, g3trunkwbsumTable=g3trunkwbsumTable, g3pkloadincIncIntraPNUse=g3pkloadincIncIntraPNUse, g3trunkcfg=g3trunkcfg, g3callratesrvBsyIntMnYesterday=g3callratesrvBsyIntMnYesterday, g3gatewayTage=g3gatewayTage, g3trunkoutYear=g3trunkoutYear, g3stamgannTable=g3stamgannTable, g3filterFilterNumber=g3filterFilterNumber, g3ipregionTage=g3ipregionTage, g3atmportpg3SGNumber239=g3atmportpg3SGNumber239, g3pkclansocsumTretrieve=g3pkclansocsumTretrieve, g3esmainServerBIP3=g3esmainServerBIP3, g3stamediaGatewayStatus68=g3stamediaGatewayStatus68, g3servalmSource=g3servalmSource, g3trunkgrpSuppServProt=g3trunkgrpSuppServProt, g3healthCab16to3019=g3healthCab16to3019, g3covpathCallsOffBusy=g3covpathCallsOffBusy, g3pkhuntQueOvfl=g3pkhuntQueOvfl, g3trunkgrpTintvl=g3trunkgrpTintvl, g3atmportpg2SGNumber143=g3atmportpg2SGNumber143, g3pkipdspsumMonth=g3pkipdspsumMonth, g3siggroupTcount=g3siggroupTcount, g3pktrunksumRunYear=g3pktrunksumRunYear, g3snblockUsage=g3snblockUsage, g3connectType=g3connectType, g3atmportpg2TGNumber126=g3atmportpg2TGNumber126, g3filterCabinet=g3filterCabinet, g3atmportpg1TGNumber27=g3atmportpg1TGNumber27, g3occsumTcount=g3occsumTcount, g3timedateLastError6=g3timedateLastError6, g3annintegMPortPlay=g3annintegMPortPlay, g3ipunregTintvl=g3ipunregTintvl, g3healthPncStat16to3025=g3healthPncStat16to3025, g3ipcodecsumDSPRecs=g3ipcodecsumDSPRecs, g3pktonerecsumCCMFCRPDeny=g3pktonerecsumCCMFCRPDeny, g3connectSuccess=g3connectSuccess, g3tonerecsumGPRDTAvail=g3tonerecsumGPRDTAvail, g3rpatcfgPattern12=g3rpatcfgPattern12, g3pktrunkwbsumEntry=g3pktrunkwbsumEntry, g3atmportpg1TGNumber90=g3atmportpg1TGNumber90, g3trunklightMember=g3trunklightMember, g3datamstaTable=g3datamstaTable, g3siggroupBoard19=g3siggroupBoard19, g3ipinterfaceSlot84=g3ipinterfaceSlot84, g3stamediaGatewayStatus33=g3stamediaGatewayStatus33, g3pkloadoutTable=g3pkloadoutTable, g3attdposPkTimeAvail=g3attdposPkTimeAvail, g3callratetotalTretrieve=g3callratetotalTretrieve, g3atmportpg1SGNumber33=g3atmportpg1SGNumber33, g3gatewayNumber=g3gatewayNumber, g3secviolate=g3secviolate, g3cartypeTretrieve=g3cartypeTretrieve, g3callratevoiceNumCallsToday2=g3callratevoiceNumCallsToday2, g3pkannintegTage=g3pkannintegTage, g3pktrunksumTdelay=g3pktrunksumTdelay, g3bulletinDate50=g3bulletinDate50, g3pkipsignalTdelay=g3pkipsignalTdelay, avaya_s8700m=avaya_s8700m, g3callratetotalBsyCalCmplToday=g3callratetotalBsyCalCmplToday, g3bulletinMessage5=g3bulletinMessage5, g3pkesmsumPercentBlock=g3pkesmsumPercentBlock, g3trunkmemName=g3trunkmemName, g3busybrdErrorCode=g3busybrdErrorCode, g3pkpnblockTimeSlots=g3pkpnblockTimeSlots, g3secviolateYear=g3secviolateYear, g3siggroupGrpNbr=g3siggroupGrpNbr, g3pkcovpathPoint3Ans=g3pkcovpathPoint3Ans, g3atmportpg2TGNumber94=g3atmportpg2TGNumber94, g3rpatcfgTcount=g3rpatcfgTcount, g3pkvoicesumTdelay=g3pkvoicesumTdelay, g3pktonerecCCTTRTotOffPN=g3pktonerecCCTTRTotOffPN, g3atmlatencyCount1A=g3atmlatencyCount1A, g3callratesrvRunYear=g3callratesrvRunYear, g3tonerecsumGPTDPReq=g3tonerecsumGPTDPReq, g3atmcfgSuffix=g3atmcfgSuffix, g3esserversPlatformType=g3esserversPlatformType, g3atmportpg3TGNumber196=g3atmportpg3TGNumber196, g3secviolateTretrieve=g3secviolateTretrieve, g3bulletinMessage1=g3bulletinMessage1, g3pkipcodecsumTintvl=g3pkipcodecsumTintvl, g3voicesumPercentAPB=g3voicesumPercentAPB, g3atmportpg2TGNumber138=g3atmportpg2TGNumber138, g3atmportpg1TGNumber30=g3atmportpg1TGNumber30, g3gatewayName=g3gatewayName, g3atmportpg1TGNumber64=g3atmportpg1TGNumber64, g3msgalmEntry=g3msgalmEntry, g3atmportpg2SGNumber168=g3atmportpg2SGNumber168, g3trunksta=g3trunksta, g3atmportpg3Tretrieve=g3atmportpg3Tretrieve, g3pkannallCallsQueued=g3pkannallCallsQueued, g3ipinterfaceNodeName80=g3ipinterfaceNodeName80, g3callratesrvMeasHour3=g3callratesrvMeasHour3, g3trunkwbsumGrpOvfl=g3trunkwbsumGrpOvfl, g3ipinterfaceNodeName30=g3ipinterfaceNodeName30, g3huntTimeAvail=g3huntTimeAvail, g3gatewayG700ModTypeV3=g3gatewayG700ModTypeV3, g3pkmmisumTotalUsage=g3pkmmisumTotalUsage, g3ipinterfaceSlot7=g3ipinterfaceSlot7, g3loadoutOutIncomingUse=g3loadoutOutIncomingUse, g3pkmmisumAvailableUsage=g3pkmmisumAvailableUsage, g3trunksumTretrieve=g3trunksumTretrieve, g3pkesmsumPercentAPB=g3pkesmsumPercentAPB, g3trunkcfgTdelay=g3trunkcfgTdelay, g3atmlatencyMeasHour1A=g3atmlatencyMeasHour1A, g3healthMinor=g3healthMinor, g3ipcodecsumG723InRegion=g3ipcodecsumG723InRegion, g3ipnetregionTintvl=g3ipnetregionTintvl, g3busytrk=g3busytrk, g3occsumRunHour=g3occsumRunHour, g3configIndex=g3configIndex, g3tonerecsum=g3tonerecsum, g3secviolateTtlInvalidAC=g3secviolateTtlInvalidAC, g3atmpncPncNameB=g3atmpncPncNameB, g3atmportpg3SGNumber212=g3atmportpg3SGNumber212, g3ipinterfaceSlot41=g3ipinterfaceSlot41, g3vintageIPAttdAvail=g3vintageIPAttdAvail, g3statmedproAltNetworkRegion=g3statmedproAltNetworkRegion, g3pkipcodecsumG723InRegion=g3pkipcodecsumG723InRegion, g3extdevPort=g3extdevPort, g3pkclansocsumMonth=g3pkclansocsumMonth, g3vintageAOActivate=g3vintageAOActivate, g3atmportpg1TGNumber16=g3atmportpg1TGNumber16, g3stamediaGatewayStatus57=g3stamediaGatewayStatus57, g3clanpppYear=g3clanpppYear, avaya=avaya, g3atmtrunkTage=g3atmtrunkTage, g3pktonerecCCMFCRPkOffPN=g3pktonerecCCMFCRPkOffPN, g3atmportpg2TGNumber158=g3atmportpg2TGNumber158, g3stamediaGatewayStatus19=g3stamediaGatewayStatus19, g3occsumRunDay=g3occsumRunDay, g3annintegTretrieve=g3annintegTretrieve, g3cbctrunkTBM=g3cbctrunkTBM, g3atmportpg1SGNumber79=g3atmportpg1SGNumber79, g3voicesum=g3voicesum, g3ipinterfaceNodeName14=g3ipinterfaceNodeName14, g3pktrunksumTotalSeize=g3pktrunksumTotalSeize, g3huntlistHGNumber=g3huntlistHGNumber, g3trunkgrpTAC=g3trunkgrpTAC, g3attdposDay=g3attdposDay, g3pkcovpathCoveragePath=g3pkcovpathCoveragePath, g3ipinterfaceTage=g3ipinterfaceTage)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3busybrdPort=g3busybrdPort, g3trunkwbsumYear=g3trunkwbsumYear, g3attdgrpTcount=g3attdgrpTcount, g3atmportpg3TGNumber242=g3atmportpg3TGNumber242, g3vintageSpeBupState1=g3vintageSpeBupState1, g3pnblockTdmUsage=g3pnblockTdmUsage, g3deftimeYear=g3deftimeYear, g3atmportpg2TGNumber171=g3atmportpg2TGNumber171, g3ipinterfaceNodeName41=g3ipinterfaceNodeName41, g3voicesumPercentBlock=g3voicesumPercentBlock, g3esparmsNetCommunity51=g3esparmsNetCommunity51, g3siggroupTage=g3siggroupTage, g3ipsignalTintvl=g3ipsignalTintvl, g3callratevoiceBsyIntHrYesterday2=g3callratevoiceBsyIntHrYesterday2, g3ipcodecsumTage=g3ipcodecsumTage, g3pkloadtanTable=g3pkloadtanTable, g3loadtanEntry=g3loadtanEntry, g3errorsRtperHr=g3errorsRtperHr, g3bulletinMessage53=g3bulletinMessage53, g3dmoduleEntry=g3dmoduleEntry, g3agentActiveName=g3agentActiveName, g3pktonerecsumETRTAvail=g3pktonerecsumETRTAvail, g3cabtypeCab1Type=g3cabtypeCab1Type, g3clanether=g3clanether, g3loadoutPNNumber=g3loadoutPNNumber, g3pkcovpath=g3pkcovpath, g3ipinterfaceNodeName37=g3ipinterfaceNodeName37, g3restartTretrieve=g3restartTretrieve, g3pkpnblockTage=g3pkpnblockTage, g3datamstaConnPort2=g3datamstaConnPort2, g3bulletinTretrieve=g3bulletinTretrieve, g3atmportpg1SGNumber30=g3atmportpg1SGNumber30, g3ipserverSecCntlState=g3ipserverSecCntlState, g3snblockLinkBlockage=g3snblockLinkBlockage, g3trunksumQueSiz=g3trunksumQueSiz, g3pktrunkwbsumOutSrv=g3pktrunkwbsumOutSrv, g3snblockTretrieve=g3snblockTretrieve, g3pktonerecDTMFPkAlloc=g3pktonerecDTMFPkAlloc, g3ipcodecsumTretrieve=g3ipcodecsumTretrieve, g3pkmmisumTotalAllocation=g3pkmmisumTotalAllocation, g3pkpnblockDay=g3pkpnblockDay, g3aca=g3aca, g3trunklightEntry=g3trunklightEntry, g3pktrunksumQueSiz=g3pktrunksumQueSiz, g3ipinterfaceSlot24=g3ipinterfaceSlot24, g3ipdspsumTcount=g3ipdspsumTcount, g3callratesrvBsyIntHrToday=g3callratesrvBsyIntHrToday, g3bulletinMessage27=g3bulletinMessage27, g3ipserverPrimIPPort=g3ipserverPrimIPPort, g3ipserverPrimServState=g3ipserverPrimServState, g3callratetotalBsyCalCmplToday2=g3callratetotalBsyCalCmplToday2, g3atmportpg1SGNumber14=g3atmportpg1SGNumber14, g3pkesmsumTcount=g3pkesmsumTcount, g3pkloadtotalTable=g3pkloadtotalTable, g3ipinterfaceNodeName50=g3ipinterfaceNodeName50, g3esserversTable=g3esserversTable, g3siggroupBoard2=g3siggroupBoard2, g3principalCallsAband=g3principalCallsAband, g3pktonerecsumGPTDTDeny=g3pktonerecsumGPTDTDeny, g3pkmmisumMonth=g3pkmmisumMonth, g3atmportpg2SGNumber152=g3atmportpg2SGNumber152, g3pkprincipalEntry=g3pkprincipalEntry, g3occsumIntcomAtt=g3occsumIntcomAtt, g3stamediaGatewayStatus49=g3stamediaGatewayStatus49, g3statregionSourceRegion=g3statregionSourceRegion, g3cabtypeTintvl=g3cabtypeTintvl, g3healthPncStat31to4420=g3healthPncStat31to4420, g3atmportpg2TGNumber157=g3atmportpg2TGNumber157, g3callratesrvBsyCalCmplYesterday2=g3callratesrvBsyCalCmplYesterday2, g3healthCab31to4424=g3healthCab31to4424, avaya_s8500=avaya_s8500, g3agentSnmpTraps=g3agentSnmpTraps, g3trunkmemSigGroup=g3trunkmemSigGroup, g3bulletinMessage17=g3bulletinMessage17, g3atmportpg2SGNumber133=g3atmportpg2SGNumber133, g3atmportpg3SGNumber226=g3atmportpg3SGNumber226, g3statregionBWLimitValue=g3statregionBWLimitValue, g3pktrunkwbsumTotalSeize=g3pktrunkwbsumTotalSeize, g3huntHuntGroup=g3huntHuntGroup, g3callratesrvTretrieve=g3callratesrvTretrieve, g3ipserverTintvl=g3ipserverTintvl, g3trunksumTdelay=g3trunksumTdelay, g3pktonerecCCCPTRPnReq=g3pktonerecCCCPTRPnReq, g3alarmsTable=g3alarmsTable, g3lsplistAvailable=g3lsplistAvailable, g3pktrunkwbsumTcount=g3pktrunkwbsumTcount, g3atmportpg3SGNumber198=g3atmportpg3SGNumber198, g3clanetherTable=g3clanetherTable, g3routepattern=g3routepattern, g3tonerecGPTDTotOffPN=g3tonerecGPTDTotOffPN, g3rpatTdelay=g3rpatTdelay, g3timedateDayOfWeek=g3timedateDayOfWeek, g3statmedpro=g3statmedpro, g3voicesumAvailableUsage=g3voicesumAvailableUsage, g3bulletinDate25=g3bulletinDate25, g3busybrdLastError=g3busybrdLastError, g3atmportpg1TGNumber53=g3atmportpg1TGNumber53, g3ipserverPortNetwork=g3ipserverPortNetwork, g3pkatmlatencyMeasHour1A=g3pkatmlatencyMeasHour1A, g3stamediaGatewayStatus72=g3stamediaGatewayStatus72, g3loadoutTage=g3loadoutTage, g3eventhourTable=g3eventhourTable, g3principalCallsOffTotal=g3principalCallsOffTotal, g3callratemediaNumCallsToday=g3callratemediaNumCallsToday, g3atmportpg2TGNumber116=g3atmportpg2TGNumber116, g3pktrunklightTrunkGroup=g3pktrunklightTrunkGroup, g3healthActiveSPE=g3healthActiveSPE, g3atmportpg3TGNumber201=g3atmportpg3TGNumber201, g3atmportpg2TGNumber178=g3atmportpg2TGNumber178, g3esparmsNetCommunity18=g3esparmsNetCommunity18, g3ipdspsumInRegion=g3ipdspsumInRegion, g3lsplistTintvl=g3lsplistTintvl, g3pktrunksumOutSrv=g3pktrunksumOutSrv, g3atmportpg3LTGNumber11=g3atmportpg3LTGNumber11, g3pnchealthPncBHealth=g3pnchealthPncBHealth, g3ipinterfaceSlot73=g3ipinterfaceSlot73, g3esparmsNetCommunity36=g3esparmsNetCommunity36, g3ipinterfaceNodeName20=g3ipinterfaceNodeName20, g3atmportpg1SGNumber45=g3atmportpg1SGNumber45, g3healthCab31to4428=g3healthCab31to4428, g3occsumTretrieve=g3occsumTretrieve, g3bulletinDate4=g3bulletinDate4, g3atmportpg2TGNumber131=g3atmportpg2TGNumber131, g3atmportpg2SGNumber97=g3atmportpg2SGNumber97, g3cbctrunkMeasHour=g3cbctrunkMeasHour, g3healthCab1to1513=g3healthCab1to1513, g3acaHour=g3acaHour, g3statmedproDupBoardLoc=g3statmedproDupBoardLoc, g3ipnetregionRSVPEnabled=g3ipnetregionRSVPEnabled, g3covpathPoint4Aband=g3covpathPoint4Aband, g3pkesmsumTotalAllocation=g3pkesmsumTotalAllocation, g3cabinetCarAPNN=g3cabinetCarAPNN, g3atmlatencySetup1B=g3atmlatencySetup1B, g3pkrpatTdelay=g3pkrpatTdelay, g3atmportpg3SGNumber204=g3atmportpg3SGNumber204, g3healthPncStat31to4422=g3healthPncStat31to4422, g3atmportpg2Tcount=g3atmportpg2Tcount, g3agentDomainName=g3agentDomainName, g3ipinterfaceSlot55=g3ipinterfaceSlot55, g3callratemediaBsyIntScToday=g3callratemediaBsyIntScToday, g3clansocsumDenialPeg=g3clansocsumDenialPeg, g3atmportpg2TGNumber166=g3atmportpg2TGNumber166, g3esparmsNetCommunity17=g3esparmsNetCommunity17, g3ipinterfaceSlot63=g3ipinterfaceSlot63, g3stationBuilding=g3stationBuilding, g3atmportpg1SGNumber78=g3atmportpg1SGNumber78, g3vintageCurMemory=g3vintageCurMemory, g3atmportpg2SGNumber134=g3atmportpg2SGNumber134, g3occsumEntry=g3occsumEntry, g3routepatternTGNumber1=g3routepatternTGNumber1, g3tonerecCCCPTRPnReq=g3tonerecCCCPTRPnReq, g3tonerecsumCCTTRPQueue=g3tonerecsumCCTTRPQueue, g3loadincTintvl=g3loadincTintvl, g3restartEntry=g3restartEntry, g3pktrunkoutTrunkGroup=g3pktrunkoutTrunkGroup, g3pkannallQueueDrops=g3pkannallQueueDrops, g3ipinterfaceNodeName21=g3ipinterfaceNodeName21, g3stamediaGatewayStatus66=g3stamediaGatewayStatus66, g3voicesumTable=g3voicesumTable, g3tonerecCCTTRTotOffPN=g3tonerecCCTTRTotOffPN, g3atmportpg1SGNumber28=g3atmportpg1SGNumber28, g3cbctrunkPlan4=g3cbctrunkPlan4, g3occsumTdelay=g3occsumTdelay, g3nodenameName=g3nodenameName, g3routepatternTGNumber9=g3routepatternTGNumber9, g3tonerecMeasHour=g3tonerecMeasHour, g3huntlistTcount=g3huntlistTcount, g3ipinterfaceNodeName34=g3ipinterfaceNodeName34, g3ipinterfaceSlot34=g3ipinterfaceSlot34, g3pkipdspsumYear=g3pkipdspsumYear, g3stamediaGatewayStatus40=g3stamediaGatewayStatus40, g3configPort20=g3configPort20, g3voicesumTotalUsage=g3voicesumTotalUsage, g3atmportpg2TGNumber98=g3atmportpg2TGNumber98, g3statmedproSharedVirtMAC=g3statmedproSharedVirtMAC, g3trunkwbsumTintvl=g3trunkwbsumTintvl, g3callratevoiceBsyIntMn=g3callratevoiceBsyIntMn, g3datamstaEntry=g3datamstaEntry, g3callratesrvNumCallsYesterday2=g3callratesrvNumCallsYesterday2, g3pkipdspsumTable=g3pkipdspsumTable, g3esmainSystemPref=g3esmainSystemPref, g3callratesrvBsyIntScYesterday2=g3callratesrvBsyIntScYesterday2, g3atmportpg2TGNumber130=g3atmportpg2TGNumber130, g3cartypeCab2CarBType=g3cartypeCab2CarBType, g3vintageProductID=g3vintageProductID, g3fiberlinkTable=g3fiberlinkTable, g3atmportpg2TGNumber133=g3atmportpg2TGNumber133, g3stamedlistTretrieve=g3stamedlistTretrieve, g3pkipcodecsumTcount=g3pkipcodecsumTcount, g3pnchealthPncAMajor=g3pnchealthPncAMajor, g3bulletinMessage34=g3bulletinMessage34, g3pkhuntTage=g3pkhuntTage, g3snblockMeasHour=g3snblockMeasHour, g3pkloadout=g3pkloadout, g3platcmdsDate=g3platcmdsDate, g3pkrpatTage=g3pkrpatTage, g3connect=g3connect, g3configPort21=g3configPort21, g3pktrunkoutEntry=g3pktrunkoutEntry, g3vintageIPAddress2=g3vintageIPAddress2, g3trunkoutEntry=g3trunkoutEntry, g3clanetherTretrieve=g3clanetherTretrieve, g3huntTintvl=g3huntTintvl, g3pkannintegTintvl=g3pkannintegTintvl, g3ipsignalHourPacketsSent=g3ipsignalHourPacketsSent, g3pkesmsumYear=g3pkesmsumYear, g3servalm=g3servalm, g3gatewayNearEndIP=g3gatewayNearEndIP, g3extdev=g3extdev, g3cabinet=g3cabinet, g3pktrunkoutOutages=g3pktrunkoutOutages, g3clanpppTable=g3clanpppTable, g3pkmmisumTintvl=g3pkmmisumTintvl, g3atmportpg1SGNumber68=g3atmportpg1SGNumber68, g3pnchealthPncASNIntrIdx=g3pnchealthPncASNIntrIdx, g3callratetotalRunYear=g3callratetotalRunYear, g3atmportpg1TGNumber21=g3atmportpg1TGNumber21, g3errorsMonthLast=g3errorsMonthLast, g3esparmsTage=g3esparmsTage, g3stamedlistTable=g3stamedlistTable, g3clientCustomerId=g3clientCustomerId, g3attdposTimeHeld=g3attdposTimeHeld, g3datamstaCFdestExt=g3datamstaCFdestExt, g3trkgrpmemMember=g3trkgrpmemMember, g3voicesumVoiceAllocation=g3voicesumVoiceAllocation, g3alarmsEntry=g3alarmsEntry, g3commlinkLinkType=g3commlinkLinkType, g3ipunregEntry=g3ipunregEntry, g3trapFilterNumber=g3trapFilterNumber, g3stamediaGatewayStatus71=g3stamediaGatewayStatus71, g3atmportpg3TGNumber241=g3atmportpg3TGNumber241, g3dmoduleTintvl=g3dmoduleTintvl, g3pkcovpathPoint4Ans=g3pkcovpathPoint4Ans, g3atmportpg2TGNumber143=g3atmportpg2TGNumber143, g3atmportpg3SGNumber213=g3atmportpg3SGNumber213, g3ipunreg=g3ipunreg, g3routepatternTage=g3routepatternTage, g3atmportpg3TGNumber235=g3atmportpg3TGNumber235, g3ipinterfaceNodeName85=g3ipinterfaceNodeName85, g3ipinterfaceSlot62=g3ipinterfaceSlot62, g3pktonerecsumCCTTRPQueue=g3pktonerecsumCCTTRPQueue, g3pnblockTimeSlots=g3pnblockTimeSlots, g3ipnetregionRSVPBBE=g3ipnetregionRSVPBBE, g3pktonerecsumDTMFPDeny=g3pktonerecsumDTMFPDeny, g3atmportpg2TGNumber136=g3atmportpg2TGNumber136, g3tonerecGPTDPnReq=g3tonerecGPTDPnReq, g3pkipcodecsumTretrieve=g3pkipcodecsumTretrieve, g3pkipdspsumTretrieve=g3pkipdspsumTretrieve, g3pkloadtan=g3pkloadtan, g3vintagePortNetSupport=g3vintagePortNetSupport, g3bulletinMessage58=g3bulletinMessage58, g3ipcodecsumG711Usage=g3ipcodecsumG711Usage, g3cbctrunkOutBlk=g3cbctrunkOutBlk, g3annintegPlayPorts=g3annintegPlayPorts)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3atmportpg1SGNumber32=g3atmportpg1SGNumber32, g3trunksumOutSrv=g3trunksumOutSrv, g3trkgrpmemTage=g3trkgrpmemTage, g3statmedproTcount=g3statmedproTcount, g3atmpncPncE164A=g3atmpncPncE164A, g3bulletinDate31=g3bulletinDate31, g3gatewayG350ModTypeV4=g3gatewayG350ModTypeV4, g3clientSubmapName=g3clientSubmapName, g3pkpnblockPNlinkPeg=g3pkpnblockPNlinkPeg, g3ipinterfaceSlot77=g3ipinterfaceSlot77, g3pktonerecsumDTMFTReq=g3pktonerecsumDTMFTReq, g3snblockTage=g3snblockTage, g3ipevt=g3ipevt, g3attdgrpGrpSiz=g3attdgrpGrpSiz, g3atmportpg1TGNumber29=g3atmportpg1TGNumber29, g3secviolateTrivialAttempt=g3secviolateTrivialAttempt, g3atmportpg2SGNumber101=g3atmportpg2SGNumber101, g3ipinterfaceSlot82=g3ipinterfaceSlot82, g3stationName=g3stationName, g3pkannintegPlayPorts=g3pkannintegPlayPorts, g3esmainServerAIP2=g3esmainServerAIP2, g3huntlistTage=g3huntlistTage, g3esparmsNetCommunity27=g3esparmsNetCommunity27, g3tonerecsumRunYear=g3tonerecsumRunYear, g3secviolateViolateBC=g3secviolateViolateBC, g3tonerecCCMFCRTotOffPN=g3tonerecCCMFCRTotOffPN, g3rpatcfgPattern18=g3rpatcfgPattern18, g3bulletinDate15=g3bulletinDate15, g3pkmmisumOutofService=g3pkmmisumOutofService, g3msgalmDate=g3msgalmDate, g3bulletinMessage38=g3bulletinMessage38, g3pkipcodecsumEntry=g3pkipcodecsumEntry, g3annintegPlayReqts=g3annintegPlayReqts, g3datamstaConnPort6=g3datamstaConnPort6, g3trunklightTable=g3trunklightTable, g3bulletinMessage28=g3bulletinMessage28, g3secviolateTrkViolateAC=g3secviolateTrkViolateAC, g3bulletinMessage46=g3bulletinMessage46, g3regipstatTretrieve=g3regipstatTretrieve, g3clanetherTdelay=g3clanetherTdelay, g3atmlatencyCount1B=g3atmlatencyCount1B, g3eventhourLastDay=g3eventhourLastDay, g3siggroupAsocSignal=g3siggroupAsocSignal, g3esparmsNetCommunity20=g3esparmsNetCommunity20, g3atmportpg1Tintvl=g3atmportpg1Tintvl, g3pkannallMPortPlay=g3pkannallMPortPlay, g3eventhourEventDesc=g3eventhourEventDesc, g3stamediaGatewayStatus10=g3stamediaGatewayStatus10, g3esserversTcount=g3esserversTcount, g3tonerecsumTage=g3tonerecsumTage, g3ipregionTretrieve=g3ipregionTretrieve, g3esparmsNetCommunity14=g3esparmsNetCommunity14, g3voicesumTotalAllocation=g3voicesumTotalAllocation, g3healthCab16to3031=g3healthCab16to3031, g3ipintlistTintvl=g3ipintlistTintvl, g3attdposMonth=g3attdposMonth, g3bulletinDate44=g3bulletinDate44, g3callratetotalBsyIntHr=g3callratetotalBsyIntHr, g3pnchealthTintvl=g3pnchealthTintvl, g3stamediaGatewayStatus80=g3stamediaGatewayStatus80, g3attdgrpTage=g3attdgrpTage, g3attdposTdelay=g3attdposTdelay, g3pkannallEntry=g3pkannallEntry, g3clansocsumPctDenial=g3clansocsumPctDenial, g3pkatmlatency=g3pkatmlatency, g3statstaConnPort5=g3statstaConnPort5, g3rpatTcount=g3rpatTcount, g3atmportpg1TGNumber10=g3atmportpg1TGNumber10, g3atmportpg3SGNumber221=g3atmportpg3SGNumber221, g3pktrunklightDay=g3pktrunklightDay, g3lsplistNodeName=g3lsplistNodeName, g3principalCovPath6=g3principalCovPath6, g3atmportpg1TGNumber71=g3atmportpg1TGNumber71, g3callratevoiceBsyIntHrToday2=g3callratevoiceBsyIntHrToday2, g3ipserverSecHost=g3ipserverSecHost, g3gatewayG700ModTypeV1=g3gatewayG700ModTypeV1, g3clansocsumSockusage=g3clansocsumSockusage, g3healthPncStat16to3022=g3healthPncStat16to3022, g3pktrunksumTrunkGroup=g3pktrunksumTrunkGroup, g3healthCab1to155=g3healthCab1to155, g3tonerecsumCCCPTRTDeny=g3tonerecsumCCCPTRTDeny, g3callratemediaBsyIntHrToday=g3callratemediaBsyIntHrToday, g3trunkgrpSize=g3trunkgrpSize, g3pktrunkoutTage=g3pktrunkoutTage, g3bulletinMessage44=g3bulletinMessage44, g3callratesrvBsyCalCmplToday=g3callratesrvBsyCalCmplToday, g3atmportpg1Table=g3atmportpg1Table, g3ds1Table=g3ds1Table, g3loadtotalTdelay=g3loadtotalTdelay, g3pkloadintTdelay=g3pkloadintTdelay, g3atmportpg2TGNumber119=g3atmportpg2TGNumber119, g3callratesrvBsyIntScToday2=g3callratesrvBsyIntScToday2, g3loadtotalPNOccupancy=g3loadtotalPNOccupancy, g3bulletinDate17=g3bulletinDate17, g3siggroupIntfNum20=g3siggroupIntfNum20, g3pkatmlatencyTintvl=g3pkatmlatencyTintvl, g3callratetotalBsyIntMnToday=g3callratetotalBsyIntMnToday, g3atmportpg2TGNumber152=g3atmportpg2TGNumber152, g3healthPncStat1to153=g3healthPncStat1to153, g3pnblockMeasHour=g3pnblockMeasHour, g3ipintlist=g3ipintlist, g3pkipdspsumDenied=g3pkipdspsumDenied, g3pkipsignalSigGroup=g3pkipsignalSigGroup, g3ipinterfaceNodeName59=g3ipinterfaceNodeName59, g3esmsumDay=g3esmsumDay, g3statstaExtension=g3statstaExtension, g3atmportpg1SGNumber3=g3atmportpg1SGNumber3, g3stamgannAnnActive=g3stamgannAnnActive, g3ipinterfaceNodeName51=g3ipinterfaceNodeName51, g3trunksumRunYear=g3trunksumRunYear, g3cabtypeCab2Type=g3cabtypeCab2Type, g3cbctrunkOvfSF=g3cbctrunkOvfSF, g3commlink=g3commlink, g3nodenameEntry=g3nodenameEntry, g3atmcfgBoardType=g3atmcfgBoardType, g3atmportpg2TGNumber172=g3atmportpg2TGNumber172, g3loadintMonth=g3loadintMonth, g3portEquipType=g3portEquipType, g3atmportpg3SGNumber216=g3atmportpg3SGNumber216, g3stamediaGatewayStatus69=g3stamediaGatewayStatus69, g3ipserverTdelay=g3ipserverTdelay, g3atmportpg3TGNumber183=g3atmportpg3TGNumber183, g3rpatcfgPattern25=g3rpatcfgPattern25, g3pkloadtanTanIncomingUse=g3pkloadtanTanIncomingUse, g3healthCab31to4420=g3healthCab31to4420, g3errorsTretrieve=g3errorsTretrieve, g3platcmdsEntry=g3platcmdsEntry, g3eventhourLastHour=g3eventhourLastHour, g3loadincTdelay=g3loadincTdelay, g3alarmsTcount=g3alarmsTcount, g3covpathPoint3Ans=g3covpathPoint3Ans, g3pktonerecCCCPTRPkAlloc=g3pktonerecCCCPTRPkAlloc, g3mgrecruleGatewayNbr=g3mgrecruleGatewayNbr, g3pkpnblockTable=g3pkpnblockTable, g3pnchealthPncBWarning=g3pnchealthPncBWarning, g3pktonerecTdelay=g3pktonerecTdelay, g3secviolateTrkValidSSC=g3secviolateTrkValidSSC, g3statstaRingCutOff=g3statstaRingCutOff, g3atmportpg2SGNumber102=g3atmportpg2SGNumber102, g3loadincHour=g3loadincHour, g3annintegTintvl=g3annintegTintvl, g3ipinterfaceNodeName10=g3ipinterfaceNodeName10, g3fiberlinkTintvl=g3fiberlinkTintvl, g3ipinterfaceSlot3=g3ipinterfaceSlot3, g3bulletinMessage54=g3bulletinMessage54, g3ipserverPrimDHCPID=g3ipserverPrimDHCPID, g3ipnetregionRegion=g3ipnetregionRegion, g3atmportpg3LTGNumber3=g3atmportpg3LTGNumber3, g3ipunregStatExtn=g3ipunregStatExtn, g3esparmsNetCommunity19=g3esparmsNetCommunity19, g3atmportpg3TGNumber229=g3atmportpg3TGNumber229, g3statstaSetIPPort=g3statstaSetIPPort, g3_products=g3_products, g3ipinterfaceNodeName62=g3ipinterfaceNodeName62, g3clansocsumTretrieve=g3clansocsumTretrieve, g3atmportpg1SGNumber69=g3atmportpg1SGNumber69, g3anninteg=g3anninteg, g3principalCallsCCAC=g3principalCallsCCAC, g3atmportpg1SGNumber39=g3atmportpg1SGNumber39, g3atmportpg3TGNumber198=g3atmportpg3TGNumber198, g3bulletinMessage52=g3bulletinMessage52, g3atmportpg3TGNumber199=g3atmportpg3TGNumber199, g3mediacfgTdelay=g3mediacfgTdelay, g3healthCab16to3022=g3healthCab16to3022, g3atmportpg3SGNumber220=g3atmportpg3SGNumber220, g3cartypeCab1CarDType=g3cartypeCab1CarDType, g3trunksumMeasHour=g3trunksumMeasHour, g3tonerecDTMFPnAlloc=g3tonerecDTMFPnAlloc, g3atmportpg2TGNumber93=g3atmportpg2TGNumber93, g3rpat=g3rpat, g3regipstat=g3regipstat, g3busybrdIndex=g3busybrdIndex, g3ipdspsumPctBlk=g3ipdspsumPctBlk, g3filterResolved=g3filterResolved, g3esserversServerBIP1=g3esserversServerBIP1, g3callratedataBsyIntMnToday=g3callratedataBsyIntMnToday, g3statsta=g3statsta, g3acaTage=g3acaTage, g3pkipsignalMonth=g3pkipsignalMonth, g3pkloadtotalPNUtil=g3pkloadtotalPNUtil, g3clansocsumEntry=g3clansocsumEntry, g3atmportpg1TGNumber56=g3atmportpg1TGNumber56, g3vintagePlatform=g3vintagePlatform, g3statmedproDSPChanStatus5=g3statmedproDSPChanStatus5, g3pkannallTable=g3pkannallTable, g3atmportpg2SGNumber167=g3atmportpg2SGNumber167, g3siggroupIntfNum13=g3siggroupIntfNum13, g3configPort26=g3configPort26, g3clanpppEntry=g3clanpppEntry, g3ipintlistEntry=g3ipintlistEntry, g3platcmdsLoginId=g3platcmdsLoginId, g3statregionBWUsedTx=g3statregionBWUsedTx, g3atmportpg2SGNumber160=g3atmportpg2SGNumber160, g3restartTintvl=g3restartTintvl, g3atmportpg2SGNumber175=g3atmportpg2SGNumber175, g3pktonerecsumDTMFPReq=g3pktonerecsumDTMFPReq, g3loadoutOutOutgoingPeg=g3loadoutOutOutgoingPeg, g3rpatIndex=g3rpatIndex, g3pktrunksumTcount=g3pktrunksumTcount, g3ipnetregion=g3ipnetregion, g3stamediaGatewayStatus30=g3stamediaGatewayStatus30, g3esmainTable=g3esmainTable, g3trunkmemEntry=g3trunkmemEntry, g3ipserverPrimStHealth=g3ipserverPrimStHealth, g3trapOperation=g3trapOperation, g3pkloadtanMonth=g3pkloadtanMonth, g3rpatPattern=g3rpatPattern, g3callratetotalBsyIntScYesterday2=g3callratetotalBsyIntScYesterday2, g3rpatYear=g3rpatYear, g3pktonerecGPTDPkOffPN=g3pktonerecGPTDPkOffPN, g3pkannall=g3pkannall, g3principalTable=g3principalTable, g3statregionNbrConnTx=g3statregionNbrConnTx, g3ipintlistTdelay=g3ipintlistTdelay, g3pnchealthPncAMode=g3pnchealthPncAMode, g3stationcfgTretrieve=g3stationcfgTretrieve, g3vintageOfferCategory=g3vintageOfferCategory, g3healthPncStat31to4417=g3healthPncStat31to4417, g3stamediaGatewayStatus34=g3stamediaGatewayStatus34, g3bulletinDate46=g3bulletinDate46, g3huntlistType=g3huntlistType, g3loadintHour=g3loadintHour, g3trunksumGrpOvfl=g3trunksumGrpOvfl, g3loadincIncIntraPNPeg=g3loadincIncIntraPNPeg, g3configPort29=g3configPort29, g3ds1cfgTage=g3ds1cfgTage, g3gatewayEntry=g3gatewayEntry, g3atmportpg2SGNumber110=g3atmportpg2SGNumber110, g3pkpnblockTcount=g3pkpnblockTcount, g3pnchealthPncBIntrIdx=g3pnchealthPncBIntrIdx, g3annall=g3annall, g3pnchealthPncAMinor=g3pnchealthPncAMinor, g3atmportpg3SGNumber184=g3atmportpg3SGNumber184, g3lsplistTage=g3lsplistTage, g3healthCab1to152=g3healthCab1to152, g3dmoduleName=g3dmoduleName, g3mmisumTretrieve=g3mmisumTretrieve, g3atmportpg1SGNumber67=g3atmportpg1SGNumber67, g3stamediaGatewayStatus4=g3stamediaGatewayStatus4, g3atmportpg3TGNumber238=g3atmportpg3TGNumber238, g3stamediaGatewayStatus20=g3stamediaGatewayStatus20, g3secviolateTtlViolateAC=g3secviolateTtlViolateAC, g3rpatCallsBlocked=g3rpatCallsBlocked, g3ipinterfaceSlot47=g3ipinterfaceSlot47, g3healthCab1to1510=g3healthCab1to1510, g3esparmsNetCommunity39=g3esparmsNetCommunity39, g3atmportpg1SGNumber36=g3atmportpg1SGNumber36, g3atmportpg3TGNumber225=g3atmportpg3TGNumber225, g3dmoduleType=g3dmoduleType, g3ipnetregionCCPHB=g3ipnetregionCCPHB, g3loadincIncIncomingPeg=g3loadincIncIncomingPeg, g3pkvoicesumTable=g3pkvoicesumTable, g3rpatcfgPattern15=g3rpatcfgPattern15, g3errorsAlSt=g3errorsAlSt)
mibBuilder.exportSymbols("G3-AVAYA-MIB", g3ds1Tage=g3ds1Tage, g3voicesumH320Denials=g3voicesumH320Denials, g3atmportpg3SGNumber189=g3atmportpg3SGNumber189, g3atmportpg2SGNumber127=g3atmportpg2SGNumber127, g3pkesmsumAvailableUsage=g3pkesmsumAvailableUsage, g3atmportpg1SGNumber16=g3atmportpg1SGNumber16, g3attdposLastHour=g3attdposLastHour, g3atmportpg1TGNumber37=g3atmportpg1TGNumber37, g3esmainServerAIP4=g3esmainServerAIP4, g3pktonerecCCMFCRPnAlloc=g3pktonerecCCMFCRPnAlloc, g3agentPrim1IP=g3agentPrim1IP, g3pkannallTretrieve=g3pkannallTretrieve, g3callratetotalMeasHour=g3callratetotalMeasHour, g3ipinterfaceSlot6=g3ipinterfaceSlot6, g3principalTcount=g3principalTcount, g3cabinetTage=g3cabinetTage, g3atmportpg2TGNumber96=g3atmportpg2TGNumber96, g3atmportpg1TGNumber55=g3atmportpg1TGNumber55, g3tonerecDTMFPkOffPN=g3tonerecDTMFPkOffPN, g3eventhourFirstDay=g3eventhourFirstDay, g3trapWarning=g3trapWarning, g3cbctrunkATB=g3cbctrunkATB, g3eventdayEventDesc=g3eventdayEventDesc, g3mgrecrule=g3mgrecrule, g3ipdspsumMonth=g3ipdspsumMonth, g3statmedproSourceIP=g3statmedproSourceIP, g3alarmsMinAlrmd=g3alarmsMinAlrmd, g3busybrdUDateStr=g3busybrdUDateStr, g3clientEnumState=g3clientEnumState, g3filterMinor=g3filterMinor, g3callratesrvMeasHour2=g3callratesrvMeasHour2, g3annintegQueueDrops=g3annintegQueueDrops, g3alarmsHourRslvd=g3alarmsHourRslvd, g3trunkgrpType=g3trunkgrpType, g3esserversServerBIP4=g3esserversServerBIP4, g3restartMonth=g3restartMonth, g3atmportpg3SGNumber210=g3atmportpg3SGNumber210, g3ipinterfaceSlot12=g3ipinterfaceSlot12, g3ipnetregionTable=g3ipnetregionTable, g3trunkoutMonth=g3trunkoutMonth, g3atmportpg3SGNumber234=g3atmportpg3SGNumber234, g3pkloadoutOutIncomingUse=g3pkloadoutOutIncomingUse, g3atmlatencyPNDest1=g3atmlatencyPNDest1, g3pkipcodecsumDSPRecs=g3pkipcodecsumDSPRecs, g3clansocsumTcount=g3clansocsumTcount, g3pktonerecCCTTRPkOffPN=g3pktonerecCCTTRPkOffPN, g3loadtotalMonth=g3loadtotalMonth, g3pkvoicesumOutofService=g3pkvoicesumOutofService, g3esmainServerBId=g3esmainServerBId, g3ipinterfaceSlot67=g3ipinterfaceSlot67, g3ipinterfaceSlot4=g3ipinterfaceSlot4, g3filterPort=g3filterPort, g3rpatcfgTintvl=g3rpatcfgTintvl, g3annallMaxCallers=g3annallMaxCallers, g3atmpncEntry=g3atmpncEntry, g3atmlatencyATMSetup1B=g3atmlatencyATMSetup1B, g3vintageSpeBupState2=g3vintageSpeBupState2, g3callratesrvRunHour=g3callratesrvRunHour, g3clansocsumDay=g3clansocsumDay, g3tonerecsumCCCPTRHour=g3tonerecsumCCCPTRHour, g3bulletinMessage31=g3bulletinMessage31, g3trapPort=g3trapPort, g3atmportpg2SGNumber169=g3atmportpg2SGNumber169, g3pkloadoutTage=g3pkloadoutTage, g3ipintlistTcount=g3ipintlistTcount, g3configPort14=g3configPort14, g3pkipdspsumPctBlk=g3pkipdspsumPctBlk, g3bulletinMessage57=g3bulletinMessage57, g3callratedataRunYear=g3callratedataRunYear, g3atmtrunkTretrieve=g3atmtrunkTretrieve, g3atmportpg3LTGNumber7=g3atmportpg3LTGNumber7, g3atmportpg3TGNumber221=g3atmportpg3TGNumber221, g3esparmsNetCommunity8=g3esparmsNetCommunity8, g3callratesrvTage=g3callratesrvTage, g3pkipsignalYear=g3pkipsignalYear, g3pkcovpathTable=g3pkcovpathTable, g3pkannintegMaxCall=g3pkannintegMaxCall, g3pktrunksumGrpOvfl=g3pktrunksumGrpOvfl, g3pktonerecsumCCTTRTReq=g3pktonerecsumCCTTRTReq, g3pksnblockTintvl=g3pksnblockTintvl, g3principalMeasHour=g3principalMeasHour, g3stamediaGatewayStatus75=g3stamediaGatewayStatus75, g3clanetherTintvl=g3clanetherTintvl, g3pkatmlatencyATMSetup1B=g3pkatmlatencyATMSetup1B, g3ipnetregionRSVPRefresh=g3ipnetregionRSVPRefresh, g3filterCategory=g3filterCategory, g3healthCab1to158=g3healthCab1to158, g3callratevoiceNumCallsToday=g3callratevoiceNumCallsToday, g3pkcovpathPoint5Ans=g3pkcovpathPoint5Ans, g3healthCab31to4426=g3healthCab31to4426, g3atmlatencyTable=g3atmlatencyTable, g3ipinterfaceNodeName23=g3ipinterfaceNodeName23, g3trunkstaConnPort2=g3trunkstaConnPort2, g3pksnblockTdelay=g3pksnblockTdelay, g3huntTdelay=g3huntTdelay, g3atmcfgCode=g3atmcfgCode, g3callratedataNumCallsToday=g3callratedataNumCallsToday, g3atmportpg2TGNumber113=g3atmportpg2TGNumber113, g3mediacfgSuffix=g3mediacfgSuffix, g3bulletinDate2=g3bulletinDate2, g3atmportpg1TGNumber14=g3atmportpg1TGNumber14, g3tonerecYear=g3tonerecYear, g3ipsignalIntvlAvgLatency=g3ipsignalIntvlAvgLatency, g3annallCallsQueued=g3annallCallsQueued, g3pkprincipalCallsCBC=g3pkprincipalCallsCBC, g3atmportpg1SGNumber4=g3atmportpg1SGNumber4, g3pktonerecYear=g3pktonerecYear, g3trunkoutTable=g3trunkoutTable, g3pktrunkoutTintvl=g3pktrunkoutTintvl, g3pktonerecEntry=g3pktonerecEntry, g3trunkwbsumHour=g3trunkwbsumHour, g3atmportpg3TGNumber204=g3atmportpg3TGNumber204, g3connectState=g3connectState, g3trunkoutHour=g3trunkoutHour, g3callratedataBsyIntTodayHr=g3callratedataBsyIntTodayHr, g3mmisumAvailableUsage=g3mmisumAvailableUsage, g3ipunregTdelay=g3ipunregTdelay, g3huntTable=g3huntTable, g3atmportpg1SGNumber87=g3atmportpg1SGNumber87, g3fiberlinkE2Type=g3fiberlinkE2Type, g3bulletinDate7=g3bulletinDate7, g3atmportpg2SGNumber128=g3atmportpg2SGNumber128, g3pktrunklightTdelay=g3pktrunklightTdelay, g3atmportpg1Tage=g3atmportpg1Tage, g3deftimeTintvl=g3deftimeTintvl, g3trunkstaEntry=g3trunkstaEntry, g3acaMonth=g3acaMonth, g3huntlistExtension=g3huntlistExtension, g3pkloadintIntInterPNPeg=g3pkloadintIntInterPNPeg, g3gatewayG350ModTypeV6=g3gatewayG350ModTypeV6, g3stamediaGatewayStatus63=g3stamediaGatewayStatus63, g3esmsumAvailablePorts=g3esmsumAvailablePorts, g3pkesmsumTdelay=g3pkesmsumTdelay, g3atmportpg1TGNumber78=g3atmportpg1TGNumber78, g3pkannallPlayRequests=g3pkannallPlayRequests, g3snblockOverflow=g3snblockOverflow, g3pkannallYear=g3pkannallYear, g3atmportpg1SGNumber89=g3atmportpg1SGNumber89, g3ipcodecsum=g3ipcodecsum, g3loadoutTretrieve=g3loadoutTretrieve, g3bulletinDate24=g3bulletinDate24, g3atmportpg3LSGNumber3=g3atmportpg3LSGNumber3, g3secviolateStnValidSSC=g3secviolateStnValidSSC, g3atmportpg3TGNumber207=g3atmportpg3TGNumber207, g3pkatmlatencyTretrieve=g3pkatmlatencyTretrieve, g3pkatmlatencyMeasHour1B=g3pkatmlatencyMeasHour1B, g3cbctrunkDur5=g3cbctrunkDur5, g3ipinterfaceSlot5=g3ipinterfaceSlot5, g3callratevoiceTage=g3callratevoiceTage, g3pkprincipalCallsCCAC=g3pkprincipalCallsCCAC, g3cbctrunkQueueOvflw=g3cbctrunkQueueOvflw, g3atmportpg1SGNumber52=g3atmportpg1SGNumber52, g3atmportpg1TGNumber65=g3atmportpg1TGNumber65, g3atmportpg2Tintvl=g3atmportpg2Tintvl, g3mgrecruleGatewayName=g3mgrecruleGatewayName, g3atmportpg3LSGNumber6=g3atmportpg3LSGNumber6, g3pkloadint=g3pkloadint, g3atmportpg1SGNumber20=g3atmportpg1SGNumber20, g3fiberlink=g3fiberlink, g3lsplist=g3lsplist, g3pkrpatTotalCalls=g3pkrpatTotalCalls, definity_mcu=definity_mcu, clan_board=clan_board, g3pktrunksumTotalUsage=g3pktrunksumTotalUsage, g3atmportpg1SGNumber25=g3atmportpg1SGNumber25, g3attdposPkTimeTalk=g3attdposPkTimeTalk, g3pkipsignalIntvlAvgLatency=g3pkipsignalIntvlAvgLatency, g3atmportpg3SGNumber241=g3atmportpg3SGNumber241, g3ipdspsumDSPUsage=g3ipdspsumDSPUsage, g3busybrdTable=g3busybrdTable, g3regipstatTintvl=g3regipstatTintvl, g3siggroupIntfNum12=g3siggroupIntfNum12, g3loadintTdelay=g3loadintTdelay, g3callratedataTage=g3callratedataTage, g3voicesumTotalDenials=g3voicesumTotalDenials, g3acaTcount=g3acaTcount, g3snblockTcount=g3snblockTcount, g3bulletinMessage13=g3bulletinMessage13, products=products, g3trunkgrpTage=g3trunkgrpTage, g3pktonerecsumCCCPTRTDeny=g3pktonerecsumCCCPTRTDeny, g3atmportpg2SGNumber93=g3atmportpg2SGNumber93, g3stamediaGatewayStatus62=g3stamediaGatewayStatus62, g3cartypeCab1CarEType=g3cartypeCab1CarEType, g3pkannintegExtension=g3pkannintegExtension, g3ipinterfaceNodeName16=g3ipinterfaceNodeName16, g3ipinterfaceSlot43=g3ipinterfaceSlot43, g3datamstaConnPort3=g3datamstaConnPort3, g3callratetotalBsyIntHrToday=g3callratetotalBsyIntHrToday, g3esmsumTotalUsage=g3esmsumTotalUsage, g3restartTcount=g3restartTcount, g3datamstaConnPort4=g3datamstaConnPort4, g3ipnetregionTage=g3ipnetregionTage, g3agentSnmpSet=g3agentSnmpSet, g3rpatcfgPattern4=g3rpatcfgPattern4, g3atmportpg2TGNumber117=g3atmportpg2TGNumber117, g3atmcfgTintvl=g3atmcfgTintvl, g3pkatmlatencyATMCount1B=g3pkatmlatencyATMCount1B, g3servalmDate=g3servalmDate, g3alarmsAltName=g3alarmsAltName, g3ipinterfaceSlot68=g3ipinterfaceSlot68, g3stamediaGatewayStatus55=g3stamediaGatewayStatus55, g3atmportpg3TGNumber243=g3atmportpg3TGNumber243, g3callratesrvBsyIntSc=g3callratesrvBsyIntSc, g3callratemediaMeasHour3=g3callratemediaMeasHour3, g3clanetherEntry=g3clanetherEntry, g3pkesmsumMonth=g3pkesmsumMonth, g3pkipsignalDay=g3pkipsignalDay, g3mediacfg=g3mediacfg, g3atmportpg1SGNumber81=g3atmportpg1SGNumber81, g3pkprincipalCallsCSAC=g3pkprincipalCallsCSAC, g3atmportpg1SGNumber86=g3atmportpg1SGNumber86, g3atmportpg1TGNumber48=g3atmportpg1TGNumber48, g3stamediaGatewayStatus12=g3stamediaGatewayStatus12, g3secviolateTrkInvalidSSC=g3secviolateTrkInvalidSSC, g3esmainTretrieve=g3esmainTretrieve, g3trapBoardNumber=g3trapBoardNumber, g3pkmmisumAvailablePorts=g3pkmmisumAvailablePorts, g3trunkgrpTdelay=g3trunkgrpTdelay, g3ds1Signaling=g3ds1Signaling, g3pkrpatCallsBlocked=g3pkrpatCallsBlocked, g3esparmsNetCommunity6=g3esparmsNetCommunity6, g3pktonerecsumCCTTRHour=g3pktonerecsumCCTTRHour, g3secviolateForceDsc=g3secviolateForceDsc, g3callratedataBsyIntHr=g3callratedataBsyIntHr, g3stationcfgSuffix=g3stationcfgSuffix, g3secviolateInvalidAttempt=g3secviolateInvalidAttempt, g3bulletinMessage48=g3bulletinMessage48, g3atmportpg2TGNumber91=g3atmportpg2TGNumber91, g3statlink=g3statlink, g3bulletinDate6=g3bulletinDate6, g3tonerecsumDTMRTAvail=g3tonerecsumDTMRTAvail, g3atmportpg2SGNumber106=g3atmportpg2SGNumber106, g3cbctrunkMaxChan=g3cbctrunkMaxChan, g3healthPncStat16to3030=g3healthPncStat16to3030, g3ipinterfaceNodeName52=g3ipinterfaceNodeName52, g3tonerecTable=g3tonerecTable, g3configPort9=g3configPort9)
