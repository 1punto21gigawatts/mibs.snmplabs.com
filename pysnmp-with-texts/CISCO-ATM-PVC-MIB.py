#
# PySNMP MIB module CISCO-ATM-PVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-ATM-PVC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:50:41 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
ModuleIdentity, Counter32, Gauge32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, NotificationType, Integer32, TimeTicks, ObjectIdentity, Bits, MibIdentifier, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Counter32", "Gauge32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "NotificationType", "Integer32", "TimeTicks", "ObjectIdentity", "Bits", "MibIdentifier", "Unsigned32", "IpAddress")
RowStatus, DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "DisplayString", "TextualConvention", "TruthValue")
ciscoAtmPvcMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 94))
ciscoAtmPvcMIB.setRevisions(('2002-04-11 00:00', '1997-11-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoAtmPvcMIB.setRevisionsDescriptions(('Imported Unsigned32 from SNMPv2-SMI instead of CISCO-TC', ' Initial version of this MIB module. ',))
if mibBuilder.loadTexts: ciscoAtmPvcMIB.setLastUpdated('200204110000Z')
if mibBuilder.loadTexts: ciscoAtmPvcMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoAtmPvcMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 800 553-NETS E-mail: cs-atm@cisco.com')
if mibBuilder.loadTexts: ciscoAtmPvcMIB.setDescription(" PVC's (Permanent Virtual Channel) can carry bridged PDUs (BPDUs) using the encapsulation method detailed in RFC1483. This is an alternative to using LAN Emulation to transfer BPDUs. This MIB allows users to configure a PVC on an ATM uplink card of a Catalyst 5000 device, and then bind that PVC to a Virtual LAN (VLAN). ")
ciscoAtmPvcMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 94, 1))
ciscoAtmPvcCreateBindGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1))
capvcTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1), )
if mibBuilder.loadTexts: capvcTable.setStatus('current')
if mibBuilder.loadTexts: capvcTable.setDescription('A table of all the PVCs configured on an ATM uplink card.')
capvcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-ATM-PVC-MIB", "capvcPort"), (0, "CISCO-ATM-PVC-MIB", "capvcVPI"), (0, "CISCO-ATM-PVC-MIB", "capvcVCI"))
if mibBuilder.loadTexts: capvcEntry.setStatus('current')
if mibBuilder.loadTexts: capvcEntry.setDescription(' An entry in the PVC table containing information about a single PVC that has been configured. To create a PVC at an ATM interface and bind it to a VLAN, either of the following procedures are used : Multi step process (1) The management application creates a PVC entry in the capvcTable by setting the capvcRowStatus to createAndWait(5). This may fail for the following reasons: - The selected vpi/vci is already being used. - The selected port is not available. Otherwise, the agent creates a row and reserves the vpi/vci on that port. (2) The manager then sets the values for the capvcVlanId, capvcType and optionally, the capvcPCR, capvcOAM and capvcFrequency. (3) The manager activates the PVC by setting the capvcRowStatus to active(1). One-Shot PVC establishment (1) A PVC may also be established in one step by a set-request with all necessary PVC parameter values and the capvcRowStatus set to createAndGo(4). In contrast to the multi step process which allows for detailed error checking (i.e., set errors are explicitly linked to particular resource acquisition failures), the one-shot PVC establishment performs the setup on one operation but does not have the advantage of step-wise error checking. PVC Retirement A PVC is released by setting the capvcRowStatus to destroy(6), and the agent may release all associated resources. ')
capvcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: capvcPort.setStatus('current')
if mibBuilder.loadTexts: capvcPort.setDescription(' The port number in the ATM module on which this PVC is being configured. ')
capvcVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095)))
if mibBuilder.loadTexts: capvcVPI.setStatus('current')
if mibBuilder.loadTexts: capvcVPI.setDescription(' The Virtual Path Identifier for the PVC. ')
capvcVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: capvcVCI.setStatus('current')
if mibBuilder.loadTexts: capvcVCI.setDescription(' The Virtual Channel Identifier for the PVC. ')
capvcVCD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: capvcVCD.setStatus('current')
if mibBuilder.loadTexts: capvcVCD.setDescription(' This is the Virtual Channel Descriptor, a value which uniquely identifies the PVC. This is a read-only variable and is not set by the user. When the PVC is created successfully, it is assigned a unique VCD number by the system.')
capvcType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("aal5snap", 1), ("ilmi", 2), ("qsaal", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: capvcType.setStatus('current')
if mibBuilder.loadTexts: capvcType.setDescription(' The type of traffic that will flow through the PVC. The user can configure the PVC as: (1) aal5snap PVC which carries network interconnect traffic over ATM AAL5 (RFC1483). (2) ilmi PVC which carries Interim Link Management Interface protocol traffic. (3) qsaal PVC which carries ATM UNI 3.x signalling traffic. ')
capvcPCR = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 155000))).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: capvcPCR.setStatus('current')
if mibBuilder.loadTexts: capvcPCR.setDescription(' The Peak Cell Rate for the PVC. This value denotes the bandwidth allocated for this PVC. The default value for this field is the maximum speed of the interface. This is 155000 Kbps for an OC3 Module and 45000 Kbps for a DS3 Module. ')
capvcOAM = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: capvcOAM.setStatus('current')
if mibBuilder.loadTexts: capvcOAM.setDescription(' A boolean that indicates if a F5 OAM loopback cell will be sent on this PVC or not. The default value for this field is false. ')
capvcFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 8), Unsigned32().clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: capvcFrequency.setStatus('current')
if mibBuilder.loadTexts: capvcFrequency.setDescription(' Indicates how often will a F5 OAM loopback cell be transmitted. If the value of capvcOAM is true, then the default value for this variable is 10 seconds. If the value of capvcOAM is false, then this variable is ignored. ')
capvcVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: capvcVlanId.setStatus('current')
if mibBuilder.loadTexts: capvcVlanId.setDescription(' The VLAN number of the VLAN that the PVC is bound to. Binding a PVC say with VCD number x, to a VLAN with a VlanId y, causes the traffic on VLAN y to pass through PVC x. Also a PVC that is bound to a VLAN can be unbound by the user. After the unbind operation the VLAN traffic stops flowing through the PVC. If the user changes the value of this variable then the PVC is unbound from the original VLAN and bound to the new VLAN. ')
capvcRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 94, 1, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: capvcRowStatus.setStatus('current')
if mibBuilder.loadTexts: capvcRowStatus.setDescription(" This object is used to create, delete or modify a row in this table. To create a new PVC, this object is initially set to 'createAndWait' or 'createAndGo'. This object must not be set to 'active' unless the following columnar objects exist in this row: capvcType and capvcVlanId. To delete a row, this object is set to 'destroy'(6).")
ciscoAtmPvcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 94, 3))
ciscoAtmPvcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 94, 3, 1))
ciscoAtmPvcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 94, 3, 2))
ciscoAtmPvcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 94, 3, 1, 1)).setObjects(("CISCO-ATM-PVC-MIB", "ciscoAtmPvcMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmPvcMIBCompliance = ciscoAtmPvcMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmPvcMIBCompliance.setDescription(' The compliance statement for entities which implement the Cisco Atm PVC MIB. This MIB is mandatory for all ATM uplink cards on the Catalyst 5000 device. ')
ciscoAtmPvcMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 94, 3, 2, 1)).setObjects(("CISCO-ATM-PVC-MIB", "capvcVCD"), ("CISCO-ATM-PVC-MIB", "capvcType"), ("CISCO-ATM-PVC-MIB", "capvcPCR"), ("CISCO-ATM-PVC-MIB", "capvcOAM"), ("CISCO-ATM-PVC-MIB", "capvcFrequency"), ("CISCO-ATM-PVC-MIB", "capvcVlanId"), ("CISCO-ATM-PVC-MIB", "capvcRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoAtmPvcMIBGroup = ciscoAtmPvcMIBGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoAtmPvcMIBGroup.setDescription(' A collection of objects providing ATM PVC configuration and VLAN binding. ')
mibBuilder.exportSymbols("CISCO-ATM-PVC-MIB", capvcVCI=capvcVCI, capvcType=capvcType, capvcEntry=capvcEntry, ciscoAtmPvcMIB=ciscoAtmPvcMIB, ciscoAtmPvcMIBConformance=ciscoAtmPvcMIBConformance, capvcVCD=capvcVCD, ciscoAtmPvcMIBObjects=ciscoAtmPvcMIBObjects, capvcFrequency=capvcFrequency, capvcVPI=capvcVPI, capvcRowStatus=capvcRowStatus, ciscoAtmPvcMIBCompliances=ciscoAtmPvcMIBCompliances, ciscoAtmPvcMIBGroup=ciscoAtmPvcMIBGroup, capvcTable=capvcTable, PYSNMP_MODULE_ID=ciscoAtmPvcMIB, capvcOAM=capvcOAM, capvcVlanId=capvcVlanId, ciscoAtmPvcMIBCompliance=ciscoAtmPvcMIBCompliance, capvcPort=capvcPort, ciscoAtmPvcCreateBindGroup=ciscoAtmPvcCreateBindGroup, ciscoAtmPvcMIBGroups=ciscoAtmPvcMIBGroups, capvcPCR=capvcPCR)
