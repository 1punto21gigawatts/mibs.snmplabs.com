#
# PySNMP MIB module ALCATEL-IND1-PARTITIONED-MGR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALCATEL-IND1-PARTITIONED-MGR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:18:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
softentIND1Partmgr, = mibBuilder.importSymbols("ALCATEL-IND1-BASE", "softentIND1Partmgr")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
VlanId, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanId")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
ModuleIdentity, TimeTicks, Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, IpAddress, Integer32, NotificationType, Gauge32, iso, Bits, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "IpAddress", "Integer32", "NotificationType", "Gauge32", "iso", "Bits", "MibIdentifier")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
alcatelIND1PartitionedMgrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1))
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIB.setLastUpdated('200704030000Z')
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIB.setOrganization('Alcatel-Lucent')
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIB.setContactInfo('Please consult with Customer Service to ensure the most appropriate version of this document is used with the products in question: Alcatel-Lucent, Enterprise Solutions Division (Formerly Alcatel Internetworking, Incorporated) 26801 West Agoura Road Agoura Hills, CA 91301-5122 United States Of America Telephone: North America +1 800 995 2696 Latin America +1 877 919 9526 Europe +31 23 556 0100 Asia +65 394 7933 All Other +1 818 878 4507 Electronic Mail: support@ind.alcatel.com World Wide Web: http://alcatel-lucent.com/wps/portal/enterprise File Transfer Protocol: ftp://ftp.ind.alcatel.com/pub/products/mibs')
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIB.setDescription('This module describes an authoritative enterprise-specific Simple Network Management Protocol (SNMP) Management Information Base (MIB): For the Birds Of Prey Product Line User Partitioned Manager Subsystem. The right to make changes in specification and other information contained in this document without prior notice is reserved. No liability shall be assumed for any incidental, indirect, special, or consequential damages whatsoever arising from or related to this document or the information contained herein. Vendors, end-users, and other interested parties are granted non-exclusive license to use this specification in connection with management of the products for which it is intended to be used. Copyright (C) 1995-2007 Alcatel-Lucent ALL RIGHTS RESERVED WORLDWIDE')
alcatelIND1PartitionedMgrMIBObjects = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1))
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIBObjects.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIBObjects.setDescription('Branch For Partitioned Manager Subsystem Managed Objects.')
alcatelIND1PartitionedMgrMIBConformance = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 2))
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIBConformance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIBConformance.setDescription('Branch For Partitioned Manager Subsystem Conformance Information.')
alcatelIND1PartitionedMgrMIBGroups = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 2, 1))
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIBGroups.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIBGroups.setDescription('Branch For Partitioned Manager Subsystem Units Of Conformance.')
alcatelIND1PartitionedMgrMIBCompliances = ObjectIdentity((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 2, 2))
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIBCompliances.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIBCompliances.setDescription('Branch For Partitioned Manager Subsystem Compliance Statements.')
endUserProfileMgrMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1))
class EndUserPortList(TextualConvention, Bits):
    description = 'The port number 1 to 64 for one slot'
    status = 'current'
    namedValues = NamedValues(("port1", 0), ("port2", 1), ("port3", 2), ("port4", 3), ("port5", 4), ("port6", 5), ("port7", 6), ("port8", 7), ("port9", 8), ("port10", 9), ("port11", 10), ("port12", 11), ("port13", 12), ("port14", 13), ("port15", 14), ("port16", 15), ("port17", 16), ("port18", 17), ("port19", 18), ("port20", 19), ("port21", 20), ("port22", 21), ("port23", 22), ("port24", 23), ("port25", 24), ("port26", 25), ("port27", 26), ("port28", 27), ("port29", 28), ("port30", 29), ("port31", 30), ("port32", 31), ("port33", 32), ("port34", 33), ("port35", 34), ("port36", 35), ("port37", 36), ("port38", 37), ("port39", 38), ("port40", 39), ("port41", 40), ("port42", 41), ("port43", 42), ("port44", 43), ("port45", 44), ("port46", 45), ("port47", 46), ("port48", 47), ("port49", 48), ("port50", 49), ("port51", 50), ("port52", 51), ("port53", 52), ("port54", 53), ("port55", 54), ("port56", 55), ("port57", 56), ("port58", 57), ("port59", 58), ("port60", 59), ("port61", 60), ("port62", 61), ("port63", 62), ("port64", 63))

class EndUserProfileArea(TextualConvention, Integer32):
    description = 'The accessible rights for an area.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("disable", 1), ("readOnly", 2), ("readWrite", 3))

endUserProfileTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1), )
if mibBuilder.loadTexts: endUserProfileTable.setStatus('current')
if mibBuilder.loadTexts: endUserProfileTable.setDescription('The configuration parameters of a end user profile.')
endUserProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1), ).setIndexNames((1, "ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileName"))
if mibBuilder.loadTexts: endUserProfileEntry.setStatus('current')
if mibBuilder.loadTexts: endUserProfileEntry.setDescription('An entry of the end user profile table.')
endUserProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endUserProfileName.setStatus('current')
if mibBuilder.loadTexts: endUserProfileName.setDescription('The End User profile name.')
endUserProfileAreaPhysical = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 2), EndUserProfileArea().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileAreaPhysical.setStatus('current')
if mibBuilder.loadTexts: endUserProfileAreaPhysical.setDescription('The accessible rights for the port area.')
endUserProfileAreaVlanTable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 3), EndUserProfileArea().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileAreaVlanTable.setStatus('current')
if mibBuilder.loadTexts: endUserProfileAreaVlanTable.setDescription('The accessible rights for the vlan area.')
endUserProfileAreaBasicIpRouting = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 4), EndUserProfileArea().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileAreaBasicIpRouting.setStatus('current')
if mibBuilder.loadTexts: endUserProfileAreaBasicIpRouting.setDescription('The accessible rights for the basic-routing area.')
endUserProfileAreaIpRoutesTable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 5), EndUserProfileArea().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileAreaIpRoutesTable.setStatus('current')
if mibBuilder.loadTexts: endUserProfileAreaIpRoutesTable.setDescription('The accessible rights for the ip-routes area.')
endUserProfileAreaMacFilteringTable = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 6), EndUserProfileArea().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileAreaMacFilteringTable.setStatus('current')
if mibBuilder.loadTexts: endUserProfileAreaMacFilteringTable.setDescription('The accessible rights for the mac-address-table area.')
endUserProfileAreaSpantree = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 7), EndUserProfileArea().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileAreaSpantree.setStatus('current')
if mibBuilder.loadTexts: endUserProfileAreaSpantree.setDescription('The accessible rights for the spanning-tree area.')
endUserProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 1, 1, 8), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: endUserProfileRowStatus.setDescription('The status of this table entry. Reading or writing values : - active (1) : end User Profile created and OK - notInService (2) : not used for end User Profile Only reading values : - notReady (3) : missing parameters for the end User profile Only writing values : - createAndGo (4) : to create an end User Profile - createAndWait (5) : not used for end User Profile - destroy (6) : to remove a end User Profile.')
endUserProfileSlotPortTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 2), )
if mibBuilder.loadTexts: endUserProfileSlotPortTable.setStatus('current')
if mibBuilder.loadTexts: endUserProfileSlotPortTable.setDescription('The list of slot/port of a end user.')
endUserProfileSlotPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 2, 1), ).setIndexNames((0, "ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileSlotNumber"), (1, "ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileName"))
if mibBuilder.loadTexts: endUserProfileSlotPortEntry.setStatus('current')
if mibBuilder.loadTexts: endUserProfileSlotPortEntry.setDescription('An entry of the end user profile slot/port table.')
endUserProfileSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: endUserProfileSlotNumber.setStatus('current')
if mibBuilder.loadTexts: endUserProfileSlotNumber.setDescription('The number of the physical slot contained in the profile.')
endUserProfilePortList = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 2, 1, 2), EndUserPortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfilePortList.setStatus('current')
if mibBuilder.loadTexts: endUserProfilePortList.setDescription('A string of 64 bits, corresponding to the port number 1 to 64. The first bit corresponds to port 1, the second bit to port 2 until the 64 bit corresponding to the port 64.')
endUserProfileSlotPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileSlotPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: endUserProfileSlotPortRowStatus.setDescription('The status of this table entry. Reading or writing values : - active (1) : end User Profile Slot/Port created and OK - notInService (2) : not used for end User Profile Slot/Port Only reading values : - notReady (3) : missing parameters for the end User profile Slot/Port Only writing values : - createAndGo (4) : to create an end User Profile Slot/Port - createAndWait (5) : not used for end User Profile Slot/Port - destroy (6) : to remove a end User Profile Slot/Port.')
endUserProfileVlanIdTable = MibTable((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 3), )
if mibBuilder.loadTexts: endUserProfileVlanIdTable.setStatus('current')
if mibBuilder.loadTexts: endUserProfileVlanIdTable.setDescription('The list of vlan ids of a end user.')
endUserProfileVlanIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 3, 1), ).setIndexNames((0, "ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileVlanIdStart"), (1, "ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileName"))
if mibBuilder.loadTexts: endUserProfileVlanIdEntry.setStatus('current')
if mibBuilder.loadTexts: endUserProfileVlanIdEntry.setDescription('An entry of the end user profile Vlan Ids table.')
endUserProfileVlanIdStart = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 3, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endUserProfileVlanIdStart.setStatus('current')
if mibBuilder.loadTexts: endUserProfileVlanIdStart.setDescription('The End User Profile Vlan Id Start in a range.')
endUserProfileVlanIdEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 3, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileVlanIdEnd.setStatus('current')
if mibBuilder.loadTexts: endUserProfileVlanIdEnd.setDescription('The End User Profile Vlan Id End in a range.')
endUserProfileVlanIdRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 1, 1, 3, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: endUserProfileVlanIdRowStatus.setStatus('current')
if mibBuilder.loadTexts: endUserProfileVlanIdRowStatus.setDescription('The status of this table entry. Reading or writing values : - active (1) : end User Profile Vlan Ids created and OK - notInService (2) : not used for end User Profile Vlan Ids Only reading values : - notReady (3) : missing parameters for the end User profile Vlan Ids Only writing values : - createAndGo (4) : to create an end User Profile Vlan Ids - createAndWait (5) : not used for end User Profile Vlan Ids - destroy (6) : to remove a end User Profile Vlan Ids.')
alcatelIND1PartitionedMgrMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 2, 2, 1)).setObjects(("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileGroup"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileSlotPortGroup"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileVlanIdGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    alcatelIND1PartitionedMgrMIBCompliance = alcatelIND1PartitionedMgrMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: alcatelIND1PartitionedMgrMIBCompliance.setDescription('Compliance statement for Partitioned Manager Subsystem.')
endUserProfileGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 2, 1, 1)).setObjects(("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileName"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileAreaPhysical"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileAreaVlanTable"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileAreaBasicIpRouting"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileAreaIpRoutesTable"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileAreaMacFilteringTable"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileAreaSpantree"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    endUserProfileGroup = endUserProfileGroup.setStatus('current')
if mibBuilder.loadTexts: endUserProfileGroup.setDescription('Collection of end UserProfile for management of Partitioned Manager.')
endUserProfileSlotPortGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 2, 1, 2)).setObjects(("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileSlotNumber"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfilePortList"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileSlotPortRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    endUserProfileSlotPortGroup = endUserProfileSlotPortGroup.setStatus('current')
if mibBuilder.loadTexts: endUserProfileSlotPortGroup.setDescription('Collection of end UserProfile slot/port for management of Partitioned Manager.')
endUserProfileVlanIdGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6486, 801, 1, 2, 1, 25, 1, 2, 1, 3)).setObjects(("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileVlanIdStart"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileVlanIdEnd"), ("ALCATEL-IND1-PARTITIONED-MGR-MIB", "endUserProfileVlanIdRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    endUserProfileVlanIdGroup = endUserProfileVlanIdGroup.setStatus('current')
if mibBuilder.loadTexts: endUserProfileVlanIdGroup.setDescription('Collection of end UserProfile Vlan ids for management of Partitioned Manager.')
mibBuilder.exportSymbols("ALCATEL-IND1-PARTITIONED-MGR-MIB", endUserProfileSlotNumber=endUserProfileSlotNumber, endUserProfileGroup=endUserProfileGroup, endUserProfileSlotPortEntry=endUserProfileSlotPortEntry, EndUserProfileArea=EndUserProfileArea, endUserProfileAreaVlanTable=endUserProfileAreaVlanTable, endUserProfileVlanIdStart=endUserProfileVlanIdStart, alcatelIND1PartitionedMgrMIBCompliances=alcatelIND1PartitionedMgrMIBCompliances, endUserProfileAreaIpRoutesTable=endUserProfileAreaIpRoutesTable, alcatelIND1PartitionedMgrMIB=alcatelIND1PartitionedMgrMIB, endUserProfileAreaSpantree=endUserProfileAreaSpantree, endUserProfileMgrMIB=endUserProfileMgrMIB, endUserProfileTable=endUserProfileTable, endUserProfileName=endUserProfileName, endUserProfilePortList=endUserProfilePortList, alcatelIND1PartitionedMgrMIBObjects=alcatelIND1PartitionedMgrMIBObjects, endUserProfileRowStatus=endUserProfileRowStatus, endUserProfileVlanIdEnd=endUserProfileVlanIdEnd, endUserProfileAreaBasicIpRouting=endUserProfileAreaBasicIpRouting, alcatelIND1PartitionedMgrMIBConformance=alcatelIND1PartitionedMgrMIBConformance, endUserProfileSlotPortGroup=endUserProfileSlotPortGroup, endUserProfileVlanIdRowStatus=endUserProfileVlanIdRowStatus, endUserProfileAreaPhysical=endUserProfileAreaPhysical, EndUserPortList=EndUserPortList, endUserProfileSlotPortRowStatus=endUserProfileSlotPortRowStatus, endUserProfileEntry=endUserProfileEntry, endUserProfileSlotPortTable=endUserProfileSlotPortTable, endUserProfileVlanIdTable=endUserProfileVlanIdTable, PYSNMP_MODULE_ID=alcatelIND1PartitionedMgrMIB, endUserProfileVlanIdGroup=endUserProfileVlanIdGroup, endUserProfileVlanIdEntry=endUserProfileVlanIdEntry, alcatelIND1PartitionedMgrMIBGroups=alcatelIND1PartitionedMgrMIBGroups, alcatelIND1PartitionedMgrMIBCompliance=alcatelIND1PartitionedMgrMIBCompliance, endUserProfileAreaMacFilteringTable=endUserProfileAreaMacFilteringTable)
