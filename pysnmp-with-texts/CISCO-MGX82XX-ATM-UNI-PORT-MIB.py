#
# PySNMP MIB module CISCO-MGX82XX-ATM-UNI-PORT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-MGX82XX-ATM-UNI-PORT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:07:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
NetPrefix, AtmAddress = mibBuilder.importSymbols("ATM-FORUM-TC-MIB", "NetPrefix", "AtmAddress")
atmAddressRegistration, = mibBuilder.importSymbols("BASIS-MIB", "atmAddressRegistration")
ciscoWan, = mibBuilder.importSymbols("CISCOWAN-SMI", "ciscoWan")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Integer32, Counter32, Gauge32, Unsigned32, Counter64, MibIdentifier, IpAddress, iso, TimeTicks, ObjectIdentity, Bits, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "Counter32", "Gauge32", "Unsigned32", "Counter64", "MibIdentifier", "IpAddress", "iso", "TimeTicks", "ObjectIdentity", "Bits", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ciscoMgx82xxAtmUniPortMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 351, 150, 71))
ciscoMgx82xxAtmUniPortMIB.setRevisions(('2003-04-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoMgx82xxAtmUniPortMIB.setRevisionsDescriptions(('Initial version of the MIB. The content of this MIB was originally available in CISCO-WAN-AXIPOP-MIB defined using SMIv1. The applicable objects from CISCO-WAN-AXIPOP-MIB are defined using SMIv2 in this MIB. Also the descriptions of some of the objects have been modified.',))
if mibBuilder.loadTexts: ciscoMgx82xxAtmUniPortMIB.setLastUpdated('200304180000Z')
if mibBuilder.loadTexts: ciscoMgx82xxAtmUniPortMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoMgx82xxAtmUniPortMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-wanatm@cisco.com')
if mibBuilder.loadTexts: ciscoMgx82xxAtmUniPortMIB.setDescription('The MIB module containing objects related to user-side of the ATM UNI Port. The mib is applicable for MGX8250 and MGX8220 products. Terminologies used: UNI : User Network Interface. ')
atmNetPrefixGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1))
atmAddressGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2))
atmAddressTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1), )
if mibBuilder.loadTexts: atmAddressTable.setStatus('current')
if mibBuilder.loadTexts: atmAddressTable.setDescription('A table implemented by the network-side of an ATM UNI port, containing the ATM-layer addresses in effect on the user-side of the UNI.')
atmAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-ATM-UNI-PORT-MIB", "axisAtmAddressPort"), (0, "CISCO-MGX82XX-ATM-UNI-PORT-MIB", "axisAtmAddressAtmAddress"))
if mibBuilder.loadTexts: atmAddressEntry.setStatus('current')
if mibBuilder.loadTexts: atmAddressEntry.setDescription('Information about a single ATM-layer address in effect on the user-side of a UNI port.')
axisAtmAddressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisAtmAddressPort.setStatus('current')
if mibBuilder.loadTexts: axisAtmAddressPort.setDescription('A unique value which identifies this port. The value of 0 has the special meaning of identifying the local UNI.')
axisAtmAddressAtmAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1, 1, 2), AtmAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisAtmAddressAtmAddress.setStatus('current')
if mibBuilder.loadTexts: axisAtmAddressAtmAddress.setDescription('The ATM address which is in effect on the user-side of the ATM UNI port.')
axisAtmAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisAtmAddressStatus.setStatus('current')
if mibBuilder.loadTexts: axisAtmAddressStatus.setDescription('An indication of the validity of the ATM address at the user-side of the UNI port.')
atmNetPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1), )
if mibBuilder.loadTexts: atmNetPrefixTable.setStatus('current')
if mibBuilder.loadTexts: atmNetPrefixTable.setDescription('A table implemented by the UNI Management Entity on the user-side of an ATM UNI port, containing the network-prefix(es) for ATM-layer addresses in effect on the user-side of the UNI.')
atmNetPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-MGX82XX-ATM-UNI-PORT-MIB", "axisAtmNetPrefixPort"), (0, "CISCO-MGX82XX-ATM-UNI-PORT-MIB", "axisAtmNetPrefixPrefix"))
if mibBuilder.loadTexts: atmNetPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: atmNetPrefixEntry.setDescription('An entry in the table, containing information about the ATM Prefix status.')
axisAtmNetPrefixPort = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisAtmNetPrefixPort.setStatus('current')
if mibBuilder.loadTexts: axisAtmNetPrefixPort.setDescription('The unique value which identifies the ILMI port.')
axisAtmNetPrefixPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1, 2), NetPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisAtmNetPrefixPrefix.setStatus('current')
if mibBuilder.loadTexts: axisAtmNetPrefixPrefix.setDescription('The network prefix for ATM addresses which is in effect on the user-side of the ATM UNI port.')
axisAtmNetPrefixAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: axisAtmNetPrefixAdminStatus.setStatus('current')
if mibBuilder.loadTexts: axisAtmNetPrefixAdminStatus.setDescription('An indication of the validity of the network prefix for ATM addresses, on the user-side of the UNI port.')
axisAtmNetPrefixOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 351, 110, 1, 4, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("registering", 1), ("de-registering", 2), ("registered", 3), ("de-registered", 4), ("failRegistering", 5), ("failDe-registering", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: axisAtmNetPrefixOperStatus.setStatus('current')
if mibBuilder.loadTexts: axisAtmNetPrefixOperStatus.setDescription('An indication of the current registration state for the prefix.')
cmauPortMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 71, 2))
cmauPortMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 71, 2, 1))
cmauPortMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 351, 150, 71, 2, 2))
cmauPortCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 351, 150, 71, 2, 2, 1)).setObjects(("CISCO-MGX82XX-ATM-UNI-PORT-MIB", "cmauAtmAddressGroup"), ("CISCO-MGX82XX-ATM-UNI-PORT-MIB", "cmauNetPrefixGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmauPortCompliance = cmauPortCompliance.setStatus('current')
if mibBuilder.loadTexts: cmauPortCompliance.setDescription('The compliance statement for objects related to ATM UNI ports.')
cmauAtmAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 71, 2, 1, 1)).setObjects(("CISCO-MGX82XX-ATM-UNI-PORT-MIB", "axisAtmAddressPort"), ("CISCO-MGX82XX-ATM-UNI-PORT-MIB", "axisAtmAddressAtmAddress"), ("CISCO-MGX82XX-ATM-UNI-PORT-MIB", "axisAtmAddressStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmauAtmAddressGroup = cmauAtmAddressGroup.setStatus('current')
if mibBuilder.loadTexts: cmauAtmAddressGroup.setDescription('The collection of objects which are used to represent ATM Port information.')
cmauNetPrefixGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 351, 150, 71, 2, 1, 2)).setObjects(("CISCO-MGX82XX-ATM-UNI-PORT-MIB", "axisAtmNetPrefixPort"), ("CISCO-MGX82XX-ATM-UNI-PORT-MIB", "axisAtmNetPrefixPrefix"), ("CISCO-MGX82XX-ATM-UNI-PORT-MIB", "axisAtmNetPrefixAdminStatus"), ("CISCO-MGX82XX-ATM-UNI-PORT-MIB", "axisAtmNetPrefixOperStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cmauNetPrefixGroup = cmauNetPrefixGroup.setStatus('current')
if mibBuilder.loadTexts: cmauNetPrefixGroup.setDescription('The collection of objects related to ATM address prefix.')
mibBuilder.exportSymbols("CISCO-MGX82XX-ATM-UNI-PORT-MIB", axisAtmNetPrefixOperStatus=axisAtmNetPrefixOperStatus, atmNetPrefixEntry=atmNetPrefixEntry, atmAddressGroup=atmAddressGroup, ciscoMgx82xxAtmUniPortMIB=ciscoMgx82xxAtmUniPortMIB, cmauNetPrefixGroup=cmauNetPrefixGroup, cmauPortMIBCompliances=cmauPortMIBCompliances, atmNetPrefixTable=atmNetPrefixTable, axisAtmAddressAtmAddress=axisAtmAddressAtmAddress, axisAtmAddressStatus=axisAtmAddressStatus, cmauPortCompliance=cmauPortCompliance, PYSNMP_MODULE_ID=ciscoMgx82xxAtmUniPortMIB, atmAddressEntry=atmAddressEntry, cmauAtmAddressGroup=cmauAtmAddressGroup, cmauPortMIBGroups=cmauPortMIBGroups, atmNetPrefixGroup=atmNetPrefixGroup, axisAtmNetPrefixPort=axisAtmNetPrefixPort, axisAtmNetPrefixPrefix=axisAtmNetPrefixPrefix, cmauPortMIBConformance=cmauPortMIBConformance, axisAtmAddressPort=axisAtmAddressPort, atmAddressTable=atmAddressTable, axisAtmNetPrefixAdminStatus=axisAtmNetPrefixAdminStatus)
