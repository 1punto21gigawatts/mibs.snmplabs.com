#
# PySNMP MIB module CODIMA-GLOBAL-REG (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CODIMA-GLOBAL-REG
# Produced by pysmi-0.3.4 at Wed May  1 12:25:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, ModuleIdentity, Unsigned32, Counter32, MibIdentifier, Gauge32, IpAddress, enterprises, Bits, TimeTicks, ObjectIdentity, iso, NotificationType, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "ModuleIdentity", "Unsigned32", "Counter32", "MibIdentifier", "Gauge32", "IpAddress", "enterprises", "Bits", "TimeTicks", "ObjectIdentity", "iso", "NotificationType", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
codima = ObjectIdentity((1, 3, 6, 1, 4, 1, 226))
if mibBuilder.loadTexts: codima.setStatus('current')
if mibBuilder.loadTexts: codima.setDescription('The root of the sub-tree assigned to CODIMA Technologies Ltd.')
codimaReg = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 1))
if mibBuilder.loadTexts: codimaReg.setStatus('current')
if mibBuilder.loadTexts: codimaReg.setDescription('Sub-tree for registrations, which includes modules.')
codimaModules = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 1, 1))
if mibBuilder.loadTexts: codimaModules.setStatus('current')
if mibBuilder.loadTexts: codimaModules.setDescription('Sub-tree to register the values assigned to modules with the MODULE-IDENTITY construct.')
codimaRegMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 226, 1, 1, 1))
codimaRegMIB.setRevisions(('2003-05-29 15:50',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: codimaRegMIB.setRevisionsDescriptions(('Initial version',))
if mibBuilder.loadTexts: codimaRegMIB.setLastUpdated('200305291550Z')
if mibBuilder.loadTexts: codimaRegMIB.setOrganization('CODIMA Technologies Ltd')
if mibBuilder.loadTexts: codimaRegMIB.setContactInfo('mailto:support@codimaTech.com http://www.codiamTech.com')
if mibBuilder.loadTexts: codimaRegMIB.setDescription('Global registration MIB module for the CODIMA framework.')
networkManagementProducts = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 1, 2))
if mibBuilder.loadTexts: networkManagementProducts.setStatus('current')
if mibBuilder.loadTexts: networkManagementProducts.setDescription('Computer Network Management product lines.')
expressConsoleManagerReg = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 1, 2, 1))
if mibBuilder.loadTexts: expressConsoleManagerReg.setStatus('current')
if mibBuilder.loadTexts: expressConsoleManagerReg.setDescription('The CODIMA Express Console Manager. A software console that allows a network manager to remotely manage from a central point any number of Express Probes. The software resides on the PC and uses any Network Adapter (including PCMCIA) to access the functionality of the Express Probes. Note: The Console Manager has no local monitoring and analysis capability unless it is combined with an S-Probe. All monitoring and analysis is undertaken by the Express Probes associated with the Console Manager.')
expressFoundationManagerReg = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 1, 2, 2))
if mibBuilder.loadTexts: expressFoundationManagerReg.setStatus('current')
if mibBuilder.loadTexts: expressFoundationManagerReg.setDescription('The CODIMA Express Foundation Manager. The foundation for the Express network management architecture. As well as providing a console for any number of Express Probes and any SNMP-compliant nodes, the Express Foundation Manager can manage and troubleshoot its local segment using the built in Express Card')
expressFProbeReg = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 1, 2, 3))
if mibBuilder.loadTexts: expressFProbeReg.setStatus('current')
if mibBuilder.loadTexts: expressFProbeReg.setDescription('The CODIMA Express F-Probe. A hardware probe that can be placed anywhere on your Fast Ethernet or Ethernet network to either locally manage or remote manage (via the Express Foundation Manager or Express Console Manager) a network segment.')
expressSProbeReg = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 1, 2, 4))
if mibBuilder.loadTexts: expressSProbeReg.setStatus('current')
if mibBuilder.loadTexts: expressSProbeReg.setDescription('The CODIMA Express S-Probe. A software probe that can be placed anywhere on your 1Gb, 100Mb or 10Mb Ethernet network to either locally manage or remotely manage (via the Express Foundation Manager or Express Console Manager) a network segment.')
expressPortableAnalyzerReg = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 1, 2, 5))
if mibBuilder.loadTexts: expressPortableAnalyzerReg.setStatus('current')
if mibBuilder.loadTexts: expressPortableAnalyzerReg.setDescription('The CODIMA Express Portable Analyzer. On-the-spot troubleshooting and diagnostic tool for the travelling network technician. If required, the Express Portable Analyzer can be left at a remote site and managed remotely by the Express Foundation Manager and/or Express Console Manager. The built-in Express 10/100 card provides full-line rate performance for monitoring, capturing and filtering.')
expressDeveloperReg = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 1, 2, 6))
if mibBuilder.loadTexts: expressDeveloperReg.setStatus('current')
if mibBuilder.loadTexts: expressDeveloperReg.setDescription('The CODIMA Express Developer Version. For internal development use only.')
codimaGeneric = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 2))
if mibBuilder.loadTexts: codimaGeneric.setStatus('current')
if mibBuilder.loadTexts: codimaGeneric.setDescription('Sub-tree for company-wide object and event definitions.')
codimaProducts = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 3))
if mibBuilder.loadTexts: codimaProducts.setStatus('current')
if mibBuilder.loadTexts: codimaProducts.setDescription('Sub-tree for product specific object and event definitions.')
codimaCaps = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 4))
if mibBuilder.loadTexts: codimaCaps.setStatus('current')
if mibBuilder.loadTexts: codimaCaps.setDescription('Sub-tree for agent profiles.')
codimaReqs = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 5))
if mibBuilder.loadTexts: codimaReqs.setStatus('current')
if mibBuilder.loadTexts: codimaReqs.setDescription('Sub-tree for management application requirements.')
codimaExpr = ObjectIdentity((1, 3, 6, 1, 4, 1, 226, 6))
if mibBuilder.loadTexts: codimaExpr.setStatus('current')
if mibBuilder.loadTexts: codimaExpr.setDescription('Sub-tree for experimental definitions.')
mibBuilder.exportSymbols("CODIMA-GLOBAL-REG", expressPortableAnalyzerReg=expressPortableAnalyzerReg, networkManagementProducts=networkManagementProducts, codimaGeneric=codimaGeneric, codimaModules=codimaModules, codimaReqs=codimaReqs, expressConsoleManagerReg=expressConsoleManagerReg, codimaReg=codimaReg, expressFProbeReg=expressFProbeReg, codima=codima, expressDeveloperReg=expressDeveloperReg, codimaProducts=codimaProducts, codimaRegMIB=codimaRegMIB, expressFoundationManagerReg=expressFoundationManagerReg, expressSProbeReg=expressSProbeReg, codimaExpr=codimaExpr, codimaCaps=codimaCaps, PYSNMP_MODULE_ID=codimaRegMIB)
