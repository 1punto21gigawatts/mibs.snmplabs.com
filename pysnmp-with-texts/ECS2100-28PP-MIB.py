#
# PySNMP MIB module ECS2100-28PP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ECS2100-28PP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:59:19 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
dot1dStpPortEntry, dot1dStpPort, Timeout, BridgeId = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dStpPortEntry", "dot1dStpPort", "Timeout", "BridgeId")
dot1agCfmMepIdentifier, Dot1agCfmMepId, dot1agCfmMepDbRMepIdentifier, dot1agCfmMaIndex, dot1agCfmMdIndex = mibBuilder.importSymbols("IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier", "Dot1agCfmMepId", "dot1agCfmMepDbRMepIdentifier", "dot1agCfmMaIndex", "dot1agCfmMdIndex")
dot1xAuthConfigEntry, = mibBuilder.importSymbols("IEEE8021-PAE-MIB", "dot1xAuthConfigEntry")
ifOperStatus, ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifOperStatus", "ifIndex", "InterfaceIndex")
InetAddress, InetAddressType, InetAddressIPv6 = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressIPv6")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
pethPsePortEntry, pethMainPseEntry = mibBuilder.importSymbols("POWER-ETHERNET-MIB", "pethPsePortEntry", "pethMainPseEntry")
dot1qVlanStaticEntry, dot1vProtocolPortEntry, VlanId, PortList, VlanIndex = mibBuilder.importSymbols("Q-BRIDGE-MIB", "dot1qVlanStaticEntry", "dot1vProtocolPortEntry", "VlanId", "PortList", "VlanIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, NotificationType, TimeTicks, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, Bits, ModuleIdentity, Gauge32, Unsigned32, IpAddress, MibIdentifier, enterprises, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "TimeTicks", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "Bits", "ModuleIdentity", "Gauge32", "Unsigned32", "IpAddress", "MibIdentifier", "enterprises", "Integer32")
DisplayString, TruthValue, MacAddress, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "MacAddress", "TextualConvention", "RowStatus")
accton = MibIdentifier((1, 3, 6, 1, 4, 1, 259))
edgecoreNetworks = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10))
edgecoreNetworksMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1))
ecs2100_28ppMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 259, 10, 1, 43)).setLabel("ecs2100-28ppMIB")
ecs2100_28ppMIB.setRevisions(('2015-08-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ecs2100_28ppMIB.setRevisionsDescriptions(('Initial version of this MIB.',))
if mibBuilder.loadTexts: ecs2100_28ppMIB.setLastUpdated('201508270000Z')
if mibBuilder.loadTexts: ecs2100_28ppMIB.setOrganization('Edgecore Networks, Inc.')
if mibBuilder.loadTexts: ecs2100_28ppMIB.setContactInfo('Edgecore Networks, Inc. Customer Service Postal: No. 1 Creation Rd. III, Science-based Industrial Park, Hsinchu 300-77, Taiwan, R.O.C. Tel: +886-3-5770270 Fax: +886-3-5780764 E-mail: brandsupport@edge-core.com company website:www.edge-core.com technical support:brandsupport@edge-core.com ')
if mibBuilder.loadTexts: ecs2100_28ppMIB.setDescription('The MIB module for ECS2100 series')
ecs2100_28ppMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1)).setLabel("ecs2100-28ppMIBObjects")
ecs2100_28ppNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2)).setLabel("ecs2100-28ppNotifications")
switchMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1))
portMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2))
trunkMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3))
lacpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 4))
staMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5))
restartMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 7))
mirrorMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8))
igmpSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9))
ipMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10))
vlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12))
priorityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13))
trapDestMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14))
qosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16))
securityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17))
sysLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19))
lineMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20))
sysTimeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23))
fileMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24))
poeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28))
stormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33))
sysResourceMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39))
mvrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44))
dhcpSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46))
ipSrcGuardMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48))
mldSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54))
dynamicArpInspectionMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56))
timeRangeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61))
lbdMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63))
ecs2100_10t = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 101)).setLabel("ecs2100-10t")
ecs2100_10pe = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 102)).setLabel("ecs2100-10pe")
ecs2100_10p = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 103)).setLabel("ecs2100-10p")
ecs2100_28t = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 104)).setLabel("ecs2100-28t")
ecs2100_28p = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 105)).setLabel("ecs2100-28p")
ecs2100_28pp = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 106)).setLabel("ecs2100-28pp")
ecs2100_52t = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 107)).setLabel("ecs2100-52t")
ecs2110_26t = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 108)).setLabel("ecs2110-26t")
class KeySegment(TextualConvention, OctetString):
    description = 'The total length of the key is 1024 characters, it is divided into 8 parts and stored in 8 separated mib variables as below: Key1: part 1 of the key (1-128) Key2: part 2 of the key (129-256) Key3: part 3 of the key (257-384) Key4: part 4 of the key (385-512) Key5: part 5 of the key (513-640) Key6: part 6 of the key (641-768) Key7: part 7 of the key (769-896) Key8: part 8 of the key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will be filled by a zero-length string. For example, if the length of the key is 129, we will get a string of length 128 in Key1, and a string of length 1 in Key2, moreover, Key3 to Key8 will all be zero-length strings.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 128)

class ValidStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object to create and destroy a table entry. This is a simplified variant of RowStatus as it supports only two values. Setting it to valid(1) creates an entry. Setting it to invalid(2) destroys an entry.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

class StaPathCostMode(TextualConvention, Integer32):
    description = 'The path cost mode of a spanning tree algorithm, short(1) indicates that we retrieve/configure the spanning tree path cost as a 16 bit value and long(2) indicates that we retrieve/configure the spanning tree path cost as a 32 bit value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("short", 1), ("long", 2))

switchNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNumber.setStatus('current')
if mibBuilder.loadTexts: switchNumber.setDescription('The total number of switches present on this system.')
switchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3), )
if mibBuilder.loadTexts: switchInfoTable.setStatus('current')
if mibBuilder.loadTexts: switchInfoTable.setDescription('Table of descriptive and status information about the switch units in this system.')
switchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "swUnitIndex"))
if mibBuilder.loadTexts: switchInfoEntry.setStatus('current')
if mibBuilder.loadTexts: switchInfoEntry.setDescription('Table providing descriptions and status information for switch units.')
swUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: swUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swUnitIndex.setDescription('This object identifies the switch within the system for which this entry contains information. This value can never be greater than switchNumber.')
swHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVer.setStatus('current')
if mibBuilder.loadTexts: swHardwareVer.setDescription('Hardware version of the main board.')
swMicrocodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMicrocodeVer.setStatus('current')
if mibBuilder.loadTexts: swMicrocodeVer.setDescription('Microcode version of the main board.')
swLoaderVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swLoaderVer.setStatus('current')
if mibBuilder.loadTexts: swLoaderVer.setDescription('Loader version of the main board.')
swBootRomVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootRomVer.setStatus('current')
if mibBuilder.loadTexts: swBootRomVer.setDescription('Boot ROM code version of the main board.')
swOpCodeVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swOpCodeVer.setStatus('current')
if mibBuilder.loadTexts: swOpCodeVer.setDescription('Operation code version of the main board.')
swPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortNumber.setStatus('current')
if mibBuilder.loadTexts: swPortNumber.setDescription('The number of ports on this switch.')
swPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("internalPower", 1), ("redundantPower", 2), ("internalAndRedundantPower", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerStatus.setStatus('current')
if mibBuilder.loadTexts: swPowerStatus.setDescription('Indicates the switch using internalPower(1), redundantPower(2) or both(3)')
swRoleInSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("backupMaster", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRoleInSystem.setStatus('current')
if mibBuilder.loadTexts: swRoleInSystem.setDescription('Indicates the switch is master(1), backupMaster(2) or slave(3) in this system.')
swSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSerialNumber.setStatus('current')
if mibBuilder.loadTexts: swSerialNumber.setDescription('Serial number of the switch.')
swServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swServiceTag.setStatus('current')
if mibBuilder.loadTexts: swServiceTag.setDescription('Service tag serial-number of the switch.')
swModelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swModelNumber.setStatus('current')
if mibBuilder.loadTexts: swModelNumber.setDescription('Model number of the switch.')
swEpldVer = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 3, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swEpldVer.setStatus('current')
if mibBuilder.loadTexts: swEpldVer.setDescription('The EPLD version of the switch.')
switchOperState = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("unknown", 2), ("ok", 3), ("noncritical", 4), ("critical", 5), ("nonrecoverable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchOperState.setStatus('current')
if mibBuilder.loadTexts: switchOperState.setDescription('Global operation state of the switch.')
switchProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5))
swProdName = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdName.setStatus('current')
if mibBuilder.loadTexts: swProdName.setDescription('The product name of this switch.')
swProdManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdManufacturer.setStatus('current')
if mibBuilder.loadTexts: swProdManufacturer.setDescription('The product manufacturer of this switch.')
swProdDescription = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdDescription.setStatus('current')
if mibBuilder.loadTexts: swProdDescription.setDescription('The product description of this switch.')
swProdVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdVersion.setStatus('current')
if mibBuilder.loadTexts: swProdVersion.setDescription('The runtime code version of this switch.')
swProdUrl = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdUrl.setStatus('current')
if mibBuilder.loadTexts: swProdUrl.setDescription('The URL of this switch, which we can connect through a web browser.')
swIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIdentifier.setStatus('current')
if mibBuilder.loadTexts: swIdentifier.setDescription('A unique identifier of which switch in the chassis is currently being looked at.')
swChassisServiceTag = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swChassisServiceTag.setStatus('current')
if mibBuilder.loadTexts: swChassisServiceTag.setDescription('The service tag of the chassis this switch resides in.')
switchIndivPowerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 6), )
if mibBuilder.loadTexts: switchIndivPowerTable.setStatus('current')
if mibBuilder.loadTexts: switchIndivPowerTable.setDescription('Table about the status of individual powers.')
switchIndivPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "swIndivPowerUnitIndex"), (0, "ECS2100-28PP-MIB", "swIndivPowerIndex"))
if mibBuilder.loadTexts: switchIndivPowerEntry.setStatus('current')
if mibBuilder.loadTexts: switchIndivPowerEntry.setDescription('Table about the status of individual power.')
swIndivPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swIndivPowerUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swIndivPowerUnitIndex.setDescription('This is defined as swUnitIndex.')
swIndivPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internalPower", 1), ("externalPower", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: swIndivPowerIndex.setStatus('current')
if mibBuilder.loadTexts: swIndivPowerIndex.setDescription('1 means internal power, 2 means external power.')
swIndivPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notPresent", 1), ("green", 2), ("red", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivPowerStatus.setStatus('current')
if mibBuilder.loadTexts: swIndivPowerStatus.setDescription('notPresent(1) means not present, green(2) means up, red(3) means down.')
switchJumboFrameStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchJumboFrameStatus.setStatus('current')
if mibBuilder.loadTexts: switchJumboFrameStatus.setDescription('enable(1) means the Jumbo Frame has enabled, disabled(2) means the Jumbo Frame has disabled.')
amtrMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 8))
amtrMacAddrAgingStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 1, 8, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: amtrMacAddrAgingStatus.setStatus('current')
if mibBuilder.loadTexts: amtrMacAddrAgingStatus.setDescription('If this is enabled(1), the MAC address table will age out according to its timer. If this is disabled(2), the MAC address table will not age out.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription('Table of descriptive and status information describing the configuration of each switch port. This table also contains information about each trunk.')
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
if mibBuilder.loadTexts: portEntry.setDescription('An entry in the table, describing the configuration of one switch port or trunk.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('The port and the trunk (including trunk members) interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription('The name of the port or trunk. This is the same as ifAlias in the IF-MIB (RFC2863 or later).')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseSfp", 8), ("hundredBaseFxScSingleMode", 9), ("hundredBaseFxScMultiMode", 10), ("thousandBaseCX", 11), ("tenG", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
if mibBuilder.loadTexts: portType.setDescription('Indicates the port type of the configuration of the switch.')
portSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("reserved", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7), ("halfDuplex10g", 8), ("fullDuplex10g", 9))).clone('halfDuplex10')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedDpxCfg.setStatus('current')
if mibBuilder.loadTexts: portSpeedDpxCfg.setDescription('Configures the speed and duplex mode for a port or trunk, according to: halfDuplex10(2) - 10Mbps and half duplex mode fullDuplex10(3) - 10Mbps and full duplex mode halfDuplex100(4) - 100Mbps and half duplex mode fullDuplex100(5) - 100Mbps and full duplex mode halfDuplex1000(6) - 1000Mbps and half duplex mode fullDuplex1000(7) - 1000Mbps and full duplex mode halfDuplex10g(8) - 10g and half duplex mode fullDuplex10g(9) - 10g and full duplex mode hundredBaseTX port can be set as: halfDuplex10(2) fullDuplex10(3) halfDuplex100(4) fullDuplex100(5) hundredBaseFX port can be set as: fullDuplex100(5) thousandBaseSX port can be set as: fullDuplex1000(7) thousandBaseLX port can be set as: fullDuplex1000(7) thousandBaseT port can be set as: halfDuplex10(2) fullDuplex10(3) halfDuplex100(4) fullDuplex100(5) thousandBaseGBIC port can be set as: fullDuplex1000(7) thousandBaseSfp port can be set as: fullDuplex1000(7) hundredBaseFxScSingleMode port can be set as: fullDuplex100(5) hundredBaseFxScMultiMode port can be set as: fullDuplex100(5) thousandBaseCX port can be set as: fullDuplex1000(7) tenG port can be set as: halfDuplex10g(8) fullDuplex10g(9) The actual operating speed and duplex of the port is given by portSpeedDpxStatus.')
portFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("tx", 5), ("rx", 6))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowCtrlCfg.setStatus('current')
if mibBuilder.loadTexts: portFlowCtrlCfg.setDescription('(1) Flow control mechanism is enabled with tx and rx pause mechansim. If the port type is hundredBaseTX or thousandBaseSX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, the port uses IEEE 802.3x flow control mechanism. If the port type is hundredBaseFX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, Flow control mechanism will not function. (2) Flow control mechanism is disabled. (5) Flow control mechanism is enabled with tx pause mechanism only. (6) Flow control mechansim is enabled with rx pause mechansim only. Fast ethernet ports can be set as: enabled(1), disabled(2). Gigabit ethernet ports can be set as: enabled(1), disabled(2), tx(5), rx(6). The actual flow control mechanism is used given by portFlowCtrlStatus.')
portCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("portCap10half", 0), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("portCap10gHalf", 6), ("portCap10gFull", 7), ("reserved8", 8), ("reserved9", 9), ("reserved10", 10), ("reserved11", 11), ("reserved12", 12), ("reserved13", 13), ("portCapSym", 14), ("portCapFlowCtrl", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCapabilities.setStatus('current')
if mibBuilder.loadTexts: portCapabilities.setDescription('Port or trunk capabilities.')
portAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: portAutonegotiation.setDescription('Whether auto-negotiation is enabled.')
portSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7), ("halfDuplex10g", 8), ("fullDuplex10g", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxStatus.setStatus('current')
if mibBuilder.loadTexts: portSpeedDpxStatus.setDescription('The operating speed and duplex mode of the switched port or trunk. If the entry represents a trunk, the speed is that of its individual members unless the member ports have been inconsistently configured in which case the value is error(1).')
portFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControl", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: portFlowCtrlStatus.setDescription('(2) BackPressure flow control mechanism is used. (3) IEEE 802.3 flow control mechanism is used. (4) Flow control mechanism is disabled. If the entry represents a trunk and the member ports have been inconsistently configured then this value is error(1).')
portTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: portTrunkIndex.setDescription('The trunk to which this port belongs. A value of 0 means that this port does not belong to any trunk. A value greater than zero means that this port belongs to a trunk in the trunkIndex, defined by the corresponding trunkPorts.')
portComboForcedMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("reserved2", 2), ("reserved3", 3), ("sfpForced", 4), ("reserved5", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portComboForcedMode.setStatus('current')
if mibBuilder.loadTexts: portComboForcedMode.setDescription('This determines the running mode of a combo port. For a non-combo port, this variable has a value of none(1), and setting this variable to none(1) has no effect. For a combo port, this has its own valid values not equal to none(1), and setting this variable to none(1) is not allowed. sfpForced(4) is set if user want to force this port running in fiber mode.')
portMasterSlaveModeCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("master", 1), ("slave", 2), ("auto", 3), ("autoPreferMaster", 4), ("autoPreferSlave", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMasterSlaveModeCfg.setStatus('current')
if mibBuilder.loadTexts: portMasterSlaveModeCfg.setDescription('Configures the PHY mode when auto negotiation is disabled and speed-duplex is 1000full for giga copper port.')
portMacAddrLearningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 17), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMacAddrLearningStatus.setStatus('current')
if mibBuilder.loadTexts: portMacAddrLearningStatus.setDescription('Set this variable to enabled(1) to start to learn MAC addresses. Set this variable to disabled(2) to stop to learn MAC addresses.')
portMacAddrLearningCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMacAddrLearningCount.setStatus('current')
if mibBuilder.loadTexts: portMacAddrLearningCount.setDescription('The current number of learned MAC addresses.')
portUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 19), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portUpTime.setStatus('current')
if mibBuilder.loadTexts: portUpTime.setDescription('The port up time (in hundredths of a second).')
portShutdownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 1, 1, 20), Bits().clone(namedValues=NamedValues(("admin", 0), ("stpLbd", 1), ("stpBpduGuard", 2), ("networkAccessPortLinkDetection", 3), ("networkAccessPortDynamicQos", 4), ("portSec", 5), ("lbd", 6), ("atcBstorm", 7), ("atcMstorm", 8), ("udld", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portShutdownReason.setStatus('current')
if mibBuilder.loadTexts: portShutdownReason.setDescription('The reason of port shutdown. The value is 0 if no shutdown action is applied to this port.')
cableDiagMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3))
cableDiagCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cableDiagCtlAction.setStatus('current')
if mibBuilder.loadTexts: cableDiagCtlAction.setDescription('To execute cable diagnostics on a port, assign cableDiagCtlAction to the value of ifIndex defined by the ifIndex in the IF-MIB. When read, this object always returns 0.')
cableDiagResultTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2), )
if mibBuilder.loadTexts: cableDiagResultTable.setStatus('current')
if mibBuilder.loadTexts: cableDiagResultTable.setDescription('Table for cable diagnostics result.')
cableDiagResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "cableDiagResultIfIndex"))
if mibBuilder.loadTexts: cableDiagResultEntry.setStatus('current')
if mibBuilder.loadTexts: cableDiagResultEntry.setDescription('Entry for cable diagnostics result.')
cableDiagResultIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cableDiagResultIfIndex.setStatus('current')
if mibBuilder.loadTexts: cableDiagResultIfIndex.setDescription('This is defined as the ifIndex.')
cableDiagResultStatusPairA = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notTestedYet", 1), ("ok", 2), ("open", 3), ("short", 4), ("impedanceMismatch", 8), ("failed", 9), ("notSupported", 10), ("noCable", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultStatusPairA.setStatus('current')
if mibBuilder.loadTexts: cableDiagResultStatusPairA.setDescription('The result of cable diagnostics. If there is no fault on the cable, the value is ok(2). Value notTestedYet(1) means the pair is not tested yet. Value ok(2) means the pair works well. Value open(3) means there is a lack of continuity between pins at each end of the pair. Value short(4) means conductors are short-circuited together on the pair. Value openShort(5) means the pair has open and short issues. Value crosstalk(6) means the pair is incorrectly connected at one end. Value unknown(7) means pair has an error matching none of the above. Value impedanceMismatch(8) means different quality cables connected together. Value failed(9) means test failed. Value notSupported(10) means cable diagnostics is not supported. Value noCable(11) means there is no connected cable.')
cableDiagResultStatusPairB = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notTestedYet", 1), ("ok", 2), ("open", 3), ("short", 4), ("impedanceMismatch", 8), ("failed", 9), ("notSupported", 10), ("noCable", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultStatusPairB.setStatus('current')
if mibBuilder.loadTexts: cableDiagResultStatusPairB.setDescription('The result of cable diagnostics. If there is no fault on the cable, the value is ok(2). Value notTestedYet(1) means the pair is not tested yet. Value ok(2) means the pair works well. Value open(3) means there is a lack of continuity between pins at each end of the pair. Value short(4) means conductors are short-circuited together on the pair. Value openShort(5) means the pair has open and short issues. Value crosstalk(6) means the pair is incorrectly connected at one end. Value unknown(7) means pair has an error matching none of the above. Value impedanceMismatch(8) means different quality cables connected together. Value failed(9) means test failed. Value notSupported(10) means cable diagnostics is not supported. Value noCable(11) means there is no connected cable.')
cableDiagResultStatusPairC = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notTestedYet", 1), ("ok", 2), ("open", 3), ("short", 4), ("impedanceMismatch", 8), ("failed", 9), ("notSupported", 10), ("noCable", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultStatusPairC.setStatus('current')
if mibBuilder.loadTexts: cableDiagResultStatusPairC.setDescription('The result of cable diagnostics. If there is no fault on the cable, the value is ok(2). Value notTestedYet(1) means the pair is not tested yet. Value ok(2) means the pair works well. Value open(3) means there is a lack of continuity between pins at each end of the pair. Value short(4) means conductors are short-circuited together on the pair. Value openShort(5) means the pair has open and short issues. Value crosstalk(6) means the pair is incorrectly connected at one end. Value unknown(7) means pair has an error matching none of the above. Value impedanceMismatch(8) means different quality cables connected together. Value failed(9) means test failed. Value notSupported(10) means cable diagnostics is not supported. Value noCable(11) means there is no connected cable.')
cableDiagResultStatusPairD = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 9, 10, 11))).clone(namedValues=NamedValues(("notTestedYet", 1), ("ok", 2), ("open", 3), ("short", 4), ("impedanceMismatch", 8), ("failed", 9), ("notSupported", 10), ("noCable", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultStatusPairD.setStatus('current')
if mibBuilder.loadTexts: cableDiagResultStatusPairD.setDescription('The result of cable diagnostics. If there is no fault on the cable, the value is ok(2). Value notTestedYet(1) means the pair is not tested yet. Value ok(2) means the pair works well. Value open(3) means there is a lack of continuity between pins at each end of the pair. Value short(4) means conductors are short-circuited together on the pair. Value openShort(5) means the pair has open and short issues. Value crosstalk(6) means the pair is incorrectly connected at one end. Value unknown(7) means pair has an error matching none of the above. Value impedanceMismatch(8) means different quality cables connected together. Value failed(9) means test failed. Value notSupported(10) means cable diagnostics is not supported. Value noCable(11) means there is no connected cable.')
cableDiagResultDistancePairA = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultDistancePairA.setStatus('current')
if mibBuilder.loadTexts: cableDiagResultDistancePairA.setDescription('Displays the fault distance of pair A of the cable in meters.')
cableDiagResultDistancePairB = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultDistancePairB.setStatus('current')
if mibBuilder.loadTexts: cableDiagResultDistancePairB.setDescription('Displays the fault distance of pair B of the cable in meters.')
cableDiagResultDistancePairC = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultDistancePairC.setStatus('current')
if mibBuilder.loadTexts: cableDiagResultDistancePairC.setDescription('Displays the fault distance of pair C of the cable in meters.')
cableDiagResultDistancePairD = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultDistancePairD.setStatus('current')
if mibBuilder.loadTexts: cableDiagResultDistancePairD.setDescription('Displays the fault distance of pair D of the cable in meters.')
cableDiagResultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 3, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cableDiagResultTime.setStatus('current')
if mibBuilder.loadTexts: cableDiagResultTime.setDescription("Displays the last time of cable diagnostics. For example, 'Jan 1 02:03:04 2002'.")
portUtilTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6), )
if mibBuilder.loadTexts: portUtilTable.setStatus('current')
if mibBuilder.loadTexts: portUtilTable.setDescription('Dispalys port utilization during recent 300 seconds.')
portUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portUtilIfIndex"))
if mibBuilder.loadTexts: portUtilEntry.setStatus('current')
if mibBuilder.loadTexts: portUtilEntry.setDescription('Dispalys port utilization during recent 300 seconds.')
portUtilIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portUtilIfIndex.setStatus('current')
if mibBuilder.loadTexts: portUtilIfIndex.setDescription('The port and trunk interface of the portUtilTable. The interface identified by a particular value of this index is the same interface identified by the same value of ifIndex in the IF-MIB.')
portInOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInOctetRate.setStatus('current')
if mibBuilder.loadTexts: portInOctetRate.setDescription('The input octet rate (kbits/sec) of the port.')
portInPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInPacketRate.setStatus('current')
if mibBuilder.loadTexts: portInPacketRate.setDescription('The input packet rate (pkts/sec) of the port.')
portInUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInUtil.setStatus('current')
if mibBuilder.loadTexts: portInUtil.setDescription('The input utilization of the port, in one per hundred.')
portOutOctetRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOutOctetRate.setStatus('current')
if mibBuilder.loadTexts: portOutOctetRate.setDescription('The output octet rate (kbits/sec) of the port.')
portOutPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOutPacketRate.setStatus('current')
if mibBuilder.loadTexts: portOutPacketRate.setDescription('The output packet rate (pkts/sec) of the port.')
portOutUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOutUtil.setStatus('current')
if mibBuilder.loadTexts: portOutUtil.setDescription('The output utilization of the port, in one per hundred.')
portHist = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8))
portHistControlTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1), )
if mibBuilder.loadTexts: portHistControlTable.setStatus('current')
if mibBuilder.loadTexts: portHistControlTable.setDescription('A list of history control entries.')
portHistControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portHistControlIndex"))
if mibBuilder.loadTexts: portHistControlEntry.setStatus('current')
if mibBuilder.loadTexts: portHistControlEntry.setDescription('A list of parameters that set up a periodic sampling of statistics.')
portHistControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistControlIndex.setStatus('current')
if mibBuilder.loadTexts: portHistControlIndex.setDescription('An index that uniquely identifies an entry in the portHistControl table.')
portHistControlName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portHistControlName.setStatus('current')
if mibBuilder.loadTexts: portHistControlName.setDescription('A textual name of the entity. It is mandatory that this only contain printable ASCII characters.')
portHistControlDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portHistControlDataSource.setStatus('current')
if mibBuilder.loadTexts: portHistControlDataSource.setDescription('This object identifies the source of the data for which historical data was collected and placed in a media-specific table on behalf of this portHistControlEntry. This source can be any interface on this device.')
portHistControlInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(1)).setUnits('Minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: portHistControlInterval.setStatus('current')
if mibBuilder.loadTexts: portHistControlInterval.setDescription('The interval in seconds over which the data is sampled for each bucket in the part of the media-specific table associated with this portHistControlEntry. This interval can be set to any number of seconds between 1 and 86400 (1 day).')
portHistControlBucketsRequested = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portHistControlBucketsRequested.setStatus('current')
if mibBuilder.loadTexts: portHistControlBucketsRequested.setDescription('The requested number of discrete time intervals over which data is to be saved in the part of the media-specific table associated with this portHistControlEntry.')
portHistControlBucketsGranted = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistControlBucketsGranted.setStatus('current')
if mibBuilder.loadTexts: portHistControlBucketsGranted.setDescription('The number of discrete sampling intervals over which data shall be saved in the part of the media-specific table associated with this portHistControlEntry.')
portHistControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: portHistControlStatus.setStatus('current')
if mibBuilder.loadTexts: portHistControlStatus.setDescription('The status of this portHistControl entry.')
portHistCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2), )
if mibBuilder.loadTexts: portHistCurrentTable.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentTable.setDescription('A list of Ethernet history entries.')
portHistCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portHistCurrentIndex"))
if mibBuilder.loadTexts: portHistCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentEntry.setDescription('An historical sample of Ethernet statistics on a particular Ethernet interface. This sample is associated with the portHistControlEntry which set up the parameters for a regular collection of these samples.')
portHistCurrentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentIndex.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentIndex.setDescription('The history of which this entry is a part. The history identified by a particular value of this index is the same history as identified by the same value of portHistControlIndex.')
portHistCurrentSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentSampleIndex.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentSampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same portHistControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
portHistCurrentIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentIntervalStart.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured.')
portHistCurrentInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInOctets.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
portHistCurrentInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentInUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were not addressed to a multicast or broadcast address at this sub-layer.')
portHistCurrentInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast address at this sub-layer. For a MAC layer protocol, this includes both Group and Functional addresses.')
portHistCurrentInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a broadcast address at this sub-layer.')
portHistCurrentInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInDiscards.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
portHistCurrentInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInErrors.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentInErrors.setDescription('For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. For character-oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol.')
portHistCurrentInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentInUnknownProtos.setDescription('For packet-oriented interfaces, the number of packets received via the interface which were discarded because of an unknown or unsupported protocol. For character-oriented or fixed-length interfaces that support protocol multiplexing the number of transmission units received via the interface which were discarded because of an unknown or unsupported protocol. For any interface that does not support protocol multiplexing, this counter will always be 0.')
portHistCurrentOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentOutOctets.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
portHistCurrentOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent.')
portHistCurrentOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentOutMulticastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a multicast address at this sub-layer, including those that were discarded or not sent. For a MAC layer protocol, this includes both Group and Functional addresses.')
portHistCurrentOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent.')
portHistCurrentOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentOutDiscards.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
portHistCurrentOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentOutErrors.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentOutErrors.setDescription('For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors.')
portHistCurrentInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentInUtilization.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentInUtilization.setDescription('The best estimate of the mean physical layer network utilization on this interface during this sampling interval, in hundredths of a percent.')
portHistCurrentOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistCurrentOutUtilization.setStatus('current')
if mibBuilder.loadTexts: portHistCurrentOutUtilization.setDescription('The best estimate of the mean physical layer network utilization on this interface during this sampling interval, in hundredths of a percent.')
portHistPreviousTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3), )
if mibBuilder.loadTexts: portHistPreviousTable.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousTable.setDescription('A list of Ethernet history entries.')
portHistPreviousEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portHistPreviousIndex"), (0, "ECS2100-28PP-MIB", "portHistPreviousSampleIndex"))
if mibBuilder.loadTexts: portHistPreviousEntry.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousEntry.setDescription('An historical sample of Ethernet statistics on a particular Ethernet interface. This sample is associated with the portHistControlEntry which set up the parameters for a regular collection of these samples.')
portHistPreviousIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousIndex.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousIndex.setDescription('The history of which this entry is a part. The history identified by a particular value of this index is the same history as identified by the same value of portHistControlIndex.')
portHistPreviousSampleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousSampleIndex.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousSampleIndex.setDescription('An index that uniquely identifies the particular sample this entry represents among all samples associated with the same portHistControlEntry. This index starts at 1 and increases by one as each new sample is taken.')
portHistPreviousIntervalStart = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousIntervalStart.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousIntervalStart.setDescription('The value of sysUpTime at the start of the interval over which this sample was measured.')
portHistPreviousInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInOctets.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
portHistPreviousInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousInUcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were not addressed to a multicast or broadcast address at this sub-layer.')
portHistPreviousInMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousInMulticastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast address at this sub-layer. For a MAC layer protocol, this includes both Group and Functional addresses.')
portHistPreviousInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a broadcast address at this sub-layer.')
portHistPreviousInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInDiscards.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
portHistPreviousInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInErrors.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousInErrors.setDescription('For packet-oriented interfaces, the number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol. For character-oriented or fixed-length interfaces, the number of inbound transmission units that contained errors preventing them from being deliverable to a higher-layer protocol.')
portHistPreviousInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousInUnknownProtos.setDescription('For packet-oriented interfaces, the number of packets received via the interface which were discarded because of an unknown or unsupported protocol. For character-oriented or fixed-length interfaces that support protocol multiplexing the number of transmission units received via the interface which were discarded because of an unknown or unsupported protocol. For any interface that does not support protocol multiplexing, this counter will always be 0.')
portHistPreviousOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousOutOctets.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
portHistPreviousOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were not addressed to a multicast or broadcast address at this sub-layer, including those that were discarded or not sent.')
portHistPreviousOutMulticastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousOutMulticastPkts.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousOutMulticastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a multicast address at this sub-layer, including those that were discarded or not sent. For a MAC layer protocol, this includes both Group and Functional addresses.')
portHistPreviousOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent.')
portHistPreviousOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousOutDiscards.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
portHistPreviousOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousOutErrors.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousOutErrors.setDescription('For packet-oriented interfaces, the number of outbound packets that could not be transmitted because of errors. For character-oriented or fixed-length interfaces, the number of outbound transmission units that could not be transmitted because of errors.')
portHistPreviousInUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousInUtilization.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousInUtilization.setDescription('The best estimate of the mean physical layer network utilization on this interface during this sampling interval, in hundredths of a percent.')
portHistPreviousOutUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 8, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portHistPreviousOutUtilization.setStatus('current')
if mibBuilder.loadTexts: portHistPreviousOutUtilization.setDescription('The best estimate of the mean physical layer network utilization on this interface during this sampling interval, in hundredths of a percent.')
portMediaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10), )
if mibBuilder.loadTexts: portMediaInfoTable.setStatus('current')
if mibBuilder.loadTexts: portMediaInfoTable.setDescription('This table lists the information of the media device (SFP/XFP/Copper) installed in the physical port. Only the ifIndices of Ethernet ports those are associated with the operational cards will be included in this table.')
portMediaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portMediaInfoIfIndex"))
if mibBuilder.loadTexts: portMediaInfoEntry.setStatus('current')
if mibBuilder.loadTexts: portMediaInfoEntry.setDescription('An entry in the Interface Media Information table. The ifIndices of ethernet interfaces will be used to index this table.')
portMediaInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portMediaInfoIfIndex.setStatus('current')
if mibBuilder.loadTexts: portMediaInfoIfIndex.setDescription('ifindex.')
portMediaInfoConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoConnectorType.setStatus('current')
if mibBuilder.loadTexts: portMediaInfoConnectorType.setDescription('The connector type.')
portMediaInfoFiberType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoFiberType.setStatus('current')
if mibBuilder.loadTexts: portMediaInfoFiberType.setDescription('The fiber type.')
portMediaInfoEthComplianceCodes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoEthComplianceCodes.setStatus('current')
if mibBuilder.loadTexts: portMediaInfoEthComplianceCodes.setDescription('The ethernet compliance codes.')
portMediaInfoBaudRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoBaudRate.setStatus('current')
if mibBuilder.loadTexts: portMediaInfoBaudRate.setDescription('The baud rate.')
portMediaInfoVendorOUI = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoVendorOUI.setStatus('current')
if mibBuilder.loadTexts: portMediaInfoVendorOUI.setDescription('The OUI of the vendor.')
portMediaInfoVendorName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoVendorName.setStatus('current')
if mibBuilder.loadTexts: portMediaInfoVendorName.setDescription('The media vendor name, full name of the corporation.')
portMediaInfoPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoPartNumber.setStatus('current')
if mibBuilder.loadTexts: portMediaInfoPartNumber.setDescription('The media vendor part number.')
portMediaInfoRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoRevision.setStatus('current')
if mibBuilder.loadTexts: portMediaInfoRevision.setDescription('The media vendor product version number.')
portMediaInfoSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoSerialNumber.setStatus('current')
if mibBuilder.loadTexts: portMediaInfoSerialNumber.setDescription('The vendor serial number of the media device.')
portMediaInfoDateCode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 10, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMediaInfoDateCode.setStatus('current')
if mibBuilder.loadTexts: portMediaInfoDateCode.setDescription('The date code of the media device.')
portOpticalMonitoringInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11), )
if mibBuilder.loadTexts: portOpticalMonitoringInfoTable.setReference('ITU recommendations G.783, G.784, G.953')
if mibBuilder.loadTexts: portOpticalMonitoringInfoTable.setStatus('current')
if mibBuilder.loadTexts: portOpticalMonitoringInfoTable.setDescription('This table lists the instrumented parameters of all optical interfaces.')
portOpticalMonitoringInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portOpticalMonitoringInfoIfIndex"))
if mibBuilder.loadTexts: portOpticalMonitoringInfoEntry.setStatus('current')
if mibBuilder.loadTexts: portOpticalMonitoringInfoEntry.setDescription('Only the ifIndices of optical interfaces whose parameters need to be monitored will be used to index this table.')
portOpticalMonitoringInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portOpticalMonitoringInfoIfIndex.setStatus('current')
if mibBuilder.loadTexts: portOpticalMonitoringInfoIfIndex.setDescription('ifindex.')
portOpticalMonitoringInfoTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOpticalMonitoringInfoTemperature.setStatus('current')
if mibBuilder.loadTexts: portOpticalMonitoringInfoTemperature.setDescription('This object holds the value of the transmitter laser diode temperature for the interface. This object indicates the health of the transmitter. The format is xxx.yyyy C(elcius). If the device supports ALARM WARNING TRAP, then followed by whether the measured value is normal, high/low alarm or high/low warning.')
portOpticalMonitoringInfoVcc = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOpticalMonitoringInfoVcc.setStatus('current')
if mibBuilder.loadTexts: portOpticalMonitoringInfoVcc.setDescription('This object holds the value of the Vcc. It is measured in V. If the device supports ALARM WARNING TRAP, then followed by whether the measured value is normal, high/low alarm or high/low warning.')
portOpticalMonitoringInfoTxBiasCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOpticalMonitoringInfoTxBiasCurrent.setStatus('current')
if mibBuilder.loadTexts: portOpticalMonitoringInfoTxBiasCurrent.setDescription('Tx Bias Current. It is measured in mA. If the device supports ALARM WARNING TRAP, then followed by whether the measured value is normal, high/low alarm or high/low warning.')
portOpticalMonitoringInfoTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOpticalMonitoringInfoTxPower.setStatus('current')
if mibBuilder.loadTexts: portOpticalMonitoringInfoTxPower.setDescription('This object holds the value of the transmitter optical signal power for the interface, measured in dBm. If the device supports ALARM WARNING TRAP, then followed by whether the measured value is normal, high/low alarm or high/low warning.')
portOpticalMonitoringInfoRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 11, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOpticalMonitoringInfoRxPower.setStatus('current')
if mibBuilder.loadTexts: portOpticalMonitoringInfoRxPower.setDescription('This object holds the value of the receiver optical signal power for the interface, measured in dBm. If the device support ALARM WARNING TRAP, then followed by whether the measured value is normal, high/low alarm or high/low warning.')
portTransceiverThresholdInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12), )
if mibBuilder.loadTexts: portTransceiverThresholdInfoTable.setReference('ITU recommendations G.783, G.784, G.953')
if mibBuilder.loadTexts: portTransceiverThresholdInfoTable.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoTable.setDescription('This table lists the threshold of transceivers.')
portTransceiverThresholdInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portTransceiverThresholdInfoIfIndex"))
if mibBuilder.loadTexts: portTransceiverThresholdInfoEntry.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoEntry.setDescription('Identify the index of the transceiver')
portTransceiverThresholdInfoIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portTransceiverThresholdInfoIfIndex.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoIfIndex.setDescription('ifindex.')
portTransceiverThresholdInfoTemperatureLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTemperatureLowAlarm.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoTemperatureLowAlarm.setDescription('This object holds the low alarm threshold of the transmitter laser diode temperature for the interface.')
portTransceiverThresholdInfoTemperatureLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTemperatureLowWarn.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoTemperatureLowWarn.setDescription('This object holds the low warning threshold of the transmitter laser diode temperature for the interface.')
portTransceiverThresholdInfoTemperatureHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTemperatureHighWarn.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoTemperatureHighWarn.setDescription('This object holds the high warning threshold of the transmitter laser diode temperature for the interface.')
portTransceiverThresholdInfoTemperatureHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTemperatureHighAlarm.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoTemperatureHighAlarm.setDescription('This object holds the high alarm threshold of the transmitter laser diode temperature for the interface.')
portTransceiverThresholdInfoVccLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoVccLowAlarm.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoVccLowAlarm.setDescription('This object holds the low alarm threshold of the Vcc.')
portTransceiverThresholdInfoVccLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoVccLowWarn.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoVccLowWarn.setDescription('This object holds the low warning threshold of the Vcc.')
portTransceiverThresholdInfoVccHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoVccHighWarn.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoVccHighWarn.setDescription('This object holds the high warning threshold of the Vcc.')
portTransceiverThresholdInfoVccHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoVccHighAlarm.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoVccHighAlarm.setDescription('This object holds the high alarm threshold of the Vcc.')
portTransceiverThresholdInfoTxBiasCurrentLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxBiasCurrentLowAlarm.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxBiasCurrentLowAlarm.setDescription('low alarm threshold of Tx Bias Current.')
portTransceiverThresholdInfoTxBiasCurrentLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxBiasCurrentLowWarn.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxBiasCurrentLowWarn.setDescription('low warning threshold of Tx Bias Current.')
portTransceiverThresholdInfoTxBiasCurrentHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxBiasCurrentHighWarn.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxBiasCurrentHighWarn.setDescription('high warning threshold of Tx Bias Current.')
portTransceiverThresholdInfoTxBiasCurrentHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxBiasCurrentHighAlarm.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxBiasCurrentHighAlarm.setDescription('high alarm threshold of Tx Bias Current.')
portTransceiverThresholdInfoTxPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxPowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxPowerLowAlarm.setDescription('This object holds the low alarm threshold of the transmitter optical signal power for theinterface.')
portTransceiverThresholdInfoTxPowerLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxPowerLowWarn.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxPowerLowWarn.setDescription('This object holds the low warning threshold of the transmitter optical signal power for the interface.')
portTransceiverThresholdInfoTxPowerHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxPowerHighWarn.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxPowerHighWarn.setDescription('This object holds the high warning threshold of the transmitter optical signal power for the interface.')
portTransceiverThresholdInfoTxPowerHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxPowerHighAlarm.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoTxPowerHighAlarm.setDescription('This object holds the high alarm threshold of the transmitter optical signal power for the interface.')
portTransceiverThresholdInfoRxPowerLowAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoRxPowerLowAlarm.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoRxPowerLowAlarm.setDescription('This object holds the low alarm threshold of the receiver optical signal power for the interface.')
portTransceiverThresholdInfoRxPowerLowWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoRxPowerLowWarn.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoRxPowerLowWarn.setDescription('This object holds the low warning threshold of the receiver optical signal power for the interface.')
portTransceiverThresholdInfoRxPowerHighWarn = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoRxPowerHighWarn.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoRxPowerHighWarn.setDescription('This object holds the high warning threshold of the receiver optical signal power for the interface.')
portTransceiverThresholdInfoRxPowerHighAlarm = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdInfoRxPowerHighAlarm.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdInfoRxPowerHighAlarm.setDescription('This object holds the high alarm threshold of the receiver optical signal power for the interface.')
portTransceiverThresholdAutoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 12, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portTransceiverThresholdAutoMode.setStatus('current')
if mibBuilder.loadTexts: portTransceiverThresholdAutoMode.setDescription('Indicate the transceiver threshold is retrieved from EEPROM or configured by user.')
powerSavingTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 14), )
if mibBuilder.loadTexts: powerSavingTable.setStatus('current')
if mibBuilder.loadTexts: powerSavingTable.setDescription('Table for power saving configuration.')
powerSavingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 14, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "powerSavingIfIndex"))
if mibBuilder.loadTexts: powerSavingEntry.setStatus('current')
if mibBuilder.loadTexts: powerSavingEntry.setDescription('An entry describing the configuration and status for power saving.')
powerSavingIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 14, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: powerSavingIfIndex.setStatus('current')
if mibBuilder.loadTexts: powerSavingIfIndex.setDescription('The port interface of the powerSavingTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
powerSavingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 2, 14, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSavingStatus.setStatus('current')
if mibBuilder.loadTexts: powerSavingStatus.setDescription('Power saving enabled status.')
trunkMaxId = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkMaxId.setStatus('current')
if mibBuilder.loadTexts: trunkMaxId.setDescription('The maximum number for a trunk identifier.')
trunkValidNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkValidNumber.setStatus('current')
if mibBuilder.loadTexts: trunkValidNumber.setDescription('The number of valid trunks.')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 3), )
if mibBuilder.loadTexts: trunkTable.setStatus('current')
if mibBuilder.loadTexts: trunkTable.setDescription('Table describing the configuration and status of each trunk.')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "trunkIndex"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
if mibBuilder.loadTexts: trunkEntry.setDescription('An entry describing the configuration and status of a particular trunk.')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 28)))
if mibBuilder.loadTexts: trunkIndex.setStatus('current')
if mibBuilder.loadTexts: trunkIndex.setDescription('Identifies the trunk within the switch that is described by the table entry.')
trunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 3, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkPorts.setStatus('current')
if mibBuilder.loadTexts: trunkPorts.setDescription('The complete set of ports currently associated with this trunk.')
trunkCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCreation.setStatus('current')
if mibBuilder.loadTexts: trunkCreation.setDescription('A value of static(1) means a statically configured trunk. A value of lacp(2) means an LACP-configured trunk.')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 3, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkStatus.setStatus('current')
if mibBuilder.loadTexts: trunkStatus.setDescription('Writing this to valid(1) creates an entry. Writing this to invalid(2) destroys an entry. A trunk created by LACP cannot be manually destroyed or (re)configured.')
trunkBalanceMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("macSrc", 1), ("macDst", 2), ("macSrcDst", 3), ("ipSrc", 4), ("ipDst", 5), ("ipSrcDst", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkBalanceMode.setStatus('current')
if mibBuilder.loadTexts: trunkBalanceMode.setDescription('This defines the load balancing mode of trunks in the system. It may be based on source and/or destination MAC address or IP address. macSrc(1) means source MAC address. macDst(2) means destination MAC address. macSrcDst(3) means source and destination MAC address. ipSrc(4) means source IP address. ipDst(5) means destination IP address. ipSrcDst(6) means source and destination IP address.')
lacpPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 4, 1), )
if mibBuilder.loadTexts: lacpPortTable.setStatus('current')
if mibBuilder.loadTexts: lacpPortTable.setDescription('Table for LACP port configuration.')
lacpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 4, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "lacpPortIndex"))
if mibBuilder.loadTexts: lacpPortEntry.setStatus('current')
if mibBuilder.loadTexts: lacpPortEntry.setDescription('Entry for LACP port configuration. While an entry may exist for a particular port, the port may not support LACP and an attempt to enable LACP may result in failure.')
lacpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: lacpPortIndex.setStatus('current')
if mibBuilder.loadTexts: lacpPortIndex.setDescription('The port interface of the lacpPortTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
lacpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 4, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpPortStatus.setStatus('current')
if mibBuilder.loadTexts: lacpPortStatus.setDescription('Whether 802.3ad LACP is enabled.')
staSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staSystemStatus.setStatus('current')
if mibBuilder.loadTexts: staSystemStatus.setDescription('Global spanning tree status. (1) Spanning tree protocol is enabled. (2) Spanning tree protocol is disabled.')
staPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2), )
if mibBuilder.loadTexts: staPortTable.setReference('IEEE 802.1d, IEEE 802.1w, IEEE 802.1s.')
if mibBuilder.loadTexts: staPortTable.setStatus('current')
if mibBuilder.loadTexts: staPortTable.setDescription('The table manages port settings for Spanning Tree Protocol 802.1d, 802.1w or 802.1s depending on the value specified by staProtocolType.')
staPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1), )
dot1dStpPortEntry.registerAugmentions(("ECS2100-28PP-MIB", "staPortEntry"))
staPortEntry.setIndexNames(*dot1dStpPortEntry.getIndexNames())
if mibBuilder.loadTexts: staPortEntry.setStatus('current')
if mibBuilder.loadTexts: staPortEntry.setDescription('The conceptual entry of staPortTable.')
staPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortProtocolMigration.setReference('IEEE 802.1w clause 14.8.2.4, 17.18.10, 17.26')
if mibBuilder.loadTexts: staPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: staPortProtocolMigration.setDescription('When operating in RSTP (version 2) mode, writing true(1) to this object forces this port to transmit RSTP BPDUs. Any other operation on this object has no effect and it always returns false(2) when read.')
staPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperEdgePort.setReference('IEEE 802.1t clause 14.8.2, 18.3.4')
if mibBuilder.loadTexts: staPortOperEdgePort.setStatus('current')
if mibBuilder.loadTexts: staPortOperEdgePort.setDescription('The operational value of the edge port parameter. The object is initialized to the value of staPortAdminEdgePort and is set false when a BPDU is received.')
staPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminPointToPoint.setReference('IEEE 802.1w clause 6.4.3, 6.5, 14.8.2')
if mibBuilder.loadTexts: staPortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: staPortAdminPointToPoint.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of forceTrue(0) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of forceFalse(1) indicates that this port should be treated as having a shared media connection. A value of auto(2) indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means.')
staPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperPointToPoint.setReference('IEEE 802.1w clause 6.4.3, 6.5, 14.8.2')
if mibBuilder.loadTexts: staPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: staPortOperPointToPoint.setDescription('The operational point-to-point status of the LAN segment attached to this port. This indicates whether a port is considered to have a point-to-point connection or not. The value is determined by management or by auto-detection, as described in the staPortAdminPointToPoint object.')
staPortSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 9), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortSystemStatus.setStatus('current')
if mibBuilder.loadTexts: staPortSystemStatus.setDescription('Per-port spanning tree status. (1) Spanning tree protocol is enabled. (2) Spanning tree protocol is disabled.')
staPortLongAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortLongAdminPathCost.setStatus('current')
if mibBuilder.loadTexts: staPortLongAdminPathCost.setDescription('The admin value of the RSTP path cost or MST external pathcost. The contribution of this port to the path cost (in 32 bits value) of paths towards the spanning tree root which include this port. This object is used to configure the spanning tree port path cost in the 32-bit value range when the staPathCostMethod is long(2). If the staPathCostMethod is short(1), this mib object is not instantiated. Setting this to 0 means that the path cost is automatically determined. In this case, read staPortLongOperPathCost to get the oper value.')
staPortLongOperPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortLongOperPathCost.setStatus('current')
if mibBuilder.loadTexts: staPortLongOperPathCost.setDescription('The oper value of the RSTP path cost or MST external pathcost. The contribution of this port to the path cost (in 32 bits value) of paths towards the spanning tree root which include this port. This object is used to configure the spanning tree port path cost in the 32-bit value range when the staPathCostMethod is long(2). If the staPathCostMethod is short(1), this mib object is not instantiated.')
staPortBpduFlooding = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 12), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortBpduFlooding.setStatus('current')
if mibBuilder.loadTexts: staPortBpduFlooding.setDescription('This parameter is used to configure the capability of BPDUs flooding.')
staPortBpduGuard = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 15), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortBpduGuard.setStatus('current')
if mibBuilder.loadTexts: staPortBpduGuard.setDescription('A value of enabled(1) indicates that BPDU port guard feature is enabled for each port. A value of disabled(2) indicates that the feature is disabled.')
staPortAdminEdgePortWithAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("true", 1), ("false", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminEdgePortWithAuto.setStatus('current')
if mibBuilder.loadTexts: staPortAdminEdgePortWithAuto.setDescription('The administrative value of the edge port parameter. A value of enable(1) indicates that this port should be assumed as an edge-port, a value of disable(2) indicates that this port should be assumed as a non-edge-port and a value of auot (3) indicates this port in RSPT or MSTP mode should be assumed as an edge-port after migration or max age expire without receiving any BPDU and sending BPDU with proposal flag on.')
staPortBpduFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 17), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortBpduFilter.setStatus('current')
if mibBuilder.loadTexts: staPortBpduFilter.setDescription('The administrative value of the BPDU filter parameter. A value of enabled(1) indicates that this port will avoid transmitting BPDUs on edge-port and the value of disabled(2) indicates that this port will not avoid transmitting BPDUs on edge-port.')
staPortRootGuardStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 18), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortRootGuardStatus.setStatus('current')
if mibBuilder.loadTexts: staPortRootGuardStatus.setDescription('Specifies the desired status of the root guard. This variable configures the root guard feature to enforce the root bridge placement in the network.')
staPortBpduGuardAutoRecovery = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 19), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortBpduGuardAutoRecovery.setStatus('current')
if mibBuilder.loadTexts: staPortBpduGuardAutoRecovery.setDescription('A value of enabled(1) indicates that BPDU port guard auto recovery mechanism is enabled for this port. A value of disabled(2) indicates that the mechanism is disabled.')
staPortBpduGuardAutoRecoveryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(30, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortBpduGuardAutoRecoveryInterval.setStatus('current')
if mibBuilder.loadTexts: staPortBpduGuardAutoRecoveryInterval.setDescription('The interval in seconds used by BPDU guard auto recovery mechanism.')
staPortTcPropStop = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 2, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortTcPropStop.setStatus('current')
if mibBuilder.loadTexts: staPortTcPropStop.setDescription("Stop topology change progate on this ifindex. Don't enable on potentially ring port. ")
staProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staProtocolType.setReference('IEEE 802.1w clause 14.8.1, 17.12, 17.16.1')
if mibBuilder.loadTexts: staProtocolType.setStatus('current')
if mibBuilder.loadTexts: staProtocolType.setDescription("The version of Spanning Tree Protocol the bridge is currently running. The value 'stp(1)' indicates the Spanning Tree Protocol is as specified in IEEE 802.1D,'rstp(2)' indicates that the Rapid Spanning Tree Protocol is as specified in IEEE 802.1w, and the value 'mstp(3)' indicates that the Multiple Spanning Tree Protocol is as specified in IEEE 802.1s. New values may be defined in the future as new or updated versions of the protocol become available.")
staTxHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staTxHoldCount.setReference('IEEE 802.1w clause 17.16.6')
if mibBuilder.loadTexts: staTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: staTxHoldCount.setDescription('The value used by the Port Transmit state machine to limit the maximum transmission rate.')
staPathCostMethod = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 5), StaPathCostMode().clone('short')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPathCostMethod.setStatus('current')
if mibBuilder.loadTexts: staPathCostMethod.setDescription("Indicates the type of spanning tree path cost mode configured on the switch. This mode applies to all instances of the spanning tree protocol running on the switch. When the value of this MIB object is changed, the path cost of all ports will be reassigned to the default path cost values based on the new spanning tree path cost mode and the ports' speed. When the value of this MIB object is set to long(2), the staPortLongPathCost MIB object must be used to retrieve/configure the spanning tree port path cost as a 32-bit value. The set operation on dot1dStpPortPathCost in BRIDGE-MIB will be rejected. While retrieving the value of dot1dStpPortPathCost, the maximum value of 65535 will be returned if the value of staPortLongPathCost for the same instance exceeds 65535. When the value of this MIB object is set to short(1), the dot1dStpPortPathCost in BRIDGE-MIB must be used.")
xstMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6))
mstName = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstName.setStatus('current')
if mibBuilder.loadTexts: mstName.setDescription('The name of the Multiple Spanning Tree region.')
mstRevision = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstRevision.setStatus('current')
if mibBuilder.loadTexts: mstRevision.setDescription('The Revision number of the Multiple Spanning Tree region.')
mstMaxHops = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mstMaxHops.setStatus('current')
if mibBuilder.loadTexts: mstMaxHops.setDescription('The max hop number counts of the Multiple Spanning Tree region.')
xstInstanceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4), )
if mibBuilder.loadTexts: xstInstanceCfgTable.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgTable.setDescription('This table is used to configure the property of a specific instance in Multiple Spanning Tree or Rapid Spanning Tree. If Rapid Spanning Tree protocol is in use, the mstInstanceEditIndex is always 0.')
xstInstanceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "xstInstanceCfgIndex"))
if mibBuilder.loadTexts: xstInstanceCfgEntry.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgEntry.setDescription('A conceptual row containing the property of the RST or MST instance.')
xstInstanceCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: xstInstanceCfgIndex.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgIndex.setDescription('An arbitrary integer within the range from 1 to the value of the maximum instance that uniquely identifies a spanning tree instance.')
xstInstanceCfgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstanceCfgPriority.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgPriority.setDescription('The priority of a specific spanning tree instance. The value assigned should be in the range 0-61440 in steps of 4096.')
xstInstanceCfgTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the last topology change detected by the bridge entity in RST or MST.')
xstInstanceCfgTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTopChanges.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgTopChanges.setDescription('The total number of topology changes detected by this bridge in RST or MST since the management entity was last reset or initialized.')
xstInstanceCfgDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgDesignatedRoot.setReference('IEEE 802.1w.')
if mibBuilder.loadTexts: xstInstanceCfgDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgDesignatedRoot.setDescription('The bridge identifier of the root of the spanning tree as determined by the Multiple Spanning Tree Protocol. (802.1s) or Rapid Spanning Tree Protocol (802.1w) executed by this node. This value is used as the root identifier parameter in all configuration bridge PDUs originated by this node.')
xstInstanceCfgRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootCost.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgRootCost.setDescription('The cost of the path to the root as seen from this bridge of the RST or MST.')
xstInstanceCfgRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgRootPort.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgRootPort.setDescription('The number of the port which offers the lowest cost path from this bridge to the root bridge of the RST or MST.')
xstInstanceCfgMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 8), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgMaxAge.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgMaxAge.setDescription('The maximum age of Multiple Spanning Tree Protocol (802.1s) or Rapid Spanning Tree Protocol (802.1w) information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
xstInstanceCfgHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 9), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHelloTime.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgHelloTime.setDescription('The amount of time between the transmission of configuration bridge PDUs by this node on any port when it is the root of the specific spanning tree or trying to become so, in units of hundredths of a second. This is the actual value that this bridge is currently using in RST or MST.')
xstInstanceCfgHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 10), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgHoldTime.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgHoldTime.setDescription('This time value determines the interval length during which no more than two configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
xstInstanceCfgForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 11), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgForwardDelay.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgForwardDelay.setDescription('For RST or MST protocol, this time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the forwarding state. The value determines how long the port stays in each of the listening and learning states, which precede the forwarding state. This value is also used, when a topology change has been detected and is underway, to age all dynamic entries in the forwarding database. This value is the current value being used by the bridge. xstInstanceCfgBridgeForwardDelay defines the value that this bridge and all others would start using if/when this bridge were to become the root.')
xstInstanceCfgBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 12), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeMaxAge.setReference('802.1D-1990.')
if mibBuilder.loadTexts: xstInstanceCfgBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgBridgeMaxAge.setDescription('For RST or MST protocol, the time (in hundredths of second) that all bridges use for MaxAge when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of xstInstanceCfgBridgeHelloTime. The granularity of this timer is specified by 802.1D-1990 to be 1 second.')
xstInstanceCfgBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 13), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeHelloTime.setReference('802.1D-1990.')
if mibBuilder.loadTexts: xstInstanceCfgBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgBridgeHelloTime.setDescription('For RST or MST protocol,the time (in hundredths of a second) that all bridges use for HelloTime when this bridge is acting as the root. The granularity of this timer is specified by 802.1D-1990 to be 1 second.')
xstInstanceCfgBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 14), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgBridgeForwardDelay.setReference('802.1D-1990.')
if mibBuilder.loadTexts: xstInstanceCfgBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgBridgeForwardDelay.setDescription('For RST or MST protocol, the time (in hundredths of a second) that all bridges use for ForwardDelay when this bridge is acting as the root. Note that 802.1D-1990 specifies that the range for this parameter is related to the value of xstInstanceCfgBridgeMaxAge. The granularity of this timer is specified by 802.1D-1990 to be 1 second.')
xstInstanceCfgTxHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgTxHoldCount.setDescription('For RST or MST protocol, the value used by the port transmit state machine to limit the maximum transmission rate.')
xstInstanceCfgPathCostMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 4, 1, 16), StaPathCostMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstanceCfgPathCostMethod.setStatus('current')
if mibBuilder.loadTexts: xstInstanceCfgPathCostMethod.setDescription("For RST or MST protocol, this indicates the type of spanning tree path cost mode used by the switch. The mode applies to all instances of the Spanning Tree protocol running on the switch. When the value of this MIB object is changed, the path cost of all ports will be reassigned to the default path cost values based on the new spanning tree path cost mode and the ports' speed. When the value of this MIB object is set to long(2), the xstInstancePortPathCost MIB object must be used in order to retrieve/configure the spanning tree port path cost as a 32-bit value. The set operation on dot1dStpPortPathCost in BRIDGE-MIB will be rejected. While retrieving the value of dot1dStpPortPathCost, the maximum value of 65535 will be returned if the value of xstInstancePortPathCost for the same instance exceeds 65535. When the value of this MIB object is set to short(1), the dot1dStpPortPathCost in BRIDGE-MIB must be used.")
xstInstancePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5), )
if mibBuilder.loadTexts: xstInstancePortTable.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortTable.setDescription('The extension table for dot1dStpPortEntry to provide additional Spanning Tree information and configuration.')
xstInstancePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "xstInstanceCfgIndex"), (0, "BRIDGE-MIB", "dot1dStpPort"))
if mibBuilder.loadTexts: xstInstancePortEntry.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortEntry.setDescription('The conceptual row for xstInstancePortTable.')
xstInstancePortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortPriority.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortPriority.setDescription('Defines the priority used for this port in the Spanning Tree Algorithm. If the path cost for all ports on a switch is the same, the port with the highest priority (i.e., lowest value) will be configured as an active link in the Spanning Tree. This makes a port with higher priority less likely to be blocked if the Spanning Tree Algorithm is detecting network loops. Where more than one port is assigned the highest priority, the port with lowest numeric identifier will be enabled.')
xstInstancePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discarding", 1), ("learning", 2), ("forwarding", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortState.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortState.setDescription("The port's current state as defined by application of the Spanning Tree Protocol. This state controls what action a port takes on reception of a frame: discarding(1): Port receives configuration messages, but does not forward packets. learning(2): Port has transmitted configuration messages for an interval set by the Forward Delay parameter without receiving contradictory information. Port address table is cleared, and the port begins learning addresses. forwarding(3): Port forwards packets, and continues learning addresses. For ports which are disabled (see xstInstancePortEnable), this object will have a value of discarding(1).")
xstInstancePortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 5), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortEnable.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortEnable.setDescription('The enabled/disabled status of the port.')
xstInstancePortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 7), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortDesignatedRoot.setDescription('The unique bridge identifier of the bridge recorded as the root in the configuration BPDUs transmitted by the designated bridge for the segment to which the port is attached.')
xstInstancePortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortDesignatedCost.setDescription('The path cost of the designated port of the segment connected to this port. This value is compared to the root path cost field in received bridge PDUs.')
xstInstancePortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortDesignatedBridge.setDescription("The bridge identifier of the bridge which this port considers to be the designated bridge for this port's segment.")
xstInstancePortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortDesignatedPort.setDescription("The port identifier of the port on the designated bridge for this port's segment.")
xstInstancePortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortForwardTransitions.setDescription('The number of times this port has transitioned from the learning state to the forwarding state.')
xstInstancePortPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("disabled", 1), ("root", 2), ("designated", 3), ("alternate", 4), ("backup", 5), ("master", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortPortRole.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortPortRole.setDescription('The role of the port in the RST or MST protocol: (1) The port has no role within the spanning tree (2) The port is part of the active topology connecting the bridge to the root bridge (i.e., root port) (3) The port is connecting a LAN through the bridge to the root bridge (i.e., designated port) (4) The port may provide connectivity if other bridges, bridge ports, or LANs fail or are removed. (5) The port provides backup if other bridges, bridge ports, or LANs fail or are removed. (6) For MST protocol only, indicates whether this instance is in a master role.')
xstInstancePortAdminPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: xstInstancePortAdminPathCost.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortAdminPathCost.setDescription('The admin value of the MST internal pathcost, in the range of 1 to 200000000. This parameter is used to determine the best path between devices. Therefore, lower values should be assigned to ports attached to faster media, and higher values assigned to ports with slower media. (Path cost takes precedence over port priority).')
xstInstancePortOperPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 5, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: xstInstancePortOperPathCost.setStatus('current')
if mibBuilder.loadTexts: xstInstancePortOperPathCost.setDescription('The oper value of the RST pathcost or MST internal pathcost, in the range of 1 to 200000000. This parameter is used to determine the best path between devices. Therefore, lower values should be assigned to ports attached to faster media, and higher values assigned to ports with slower media. (Path cost takes precedence over port priority).')
mstInstanceEditTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6), )
if mibBuilder.loadTexts: mstInstanceEditTable.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditTable.setDescription('The Multiple Spanning Tree region instance vlan configuration table. Please read the actual instance vlan mapped in the mstInstanceOperTable.')
mstInstanceEditEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mstInstanceEditIndex"))
if mibBuilder.loadTexts: mstInstanceEditEntry.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditEntry.setDescription('A conceptual row containing the status of the MSTP instance.')
mstInstanceEditIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: mstInstanceEditIndex.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditIndex.setDescription('An arbitrary integer within the range from 1 to the value of the maximum instance that uniquely identifies a spanning tree instance.')
mstInstanceEditVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditVlansMap.setDescription("A string of octets containing one bit per VLAN. The first octet corresponds to VLANs with vlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc., The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'. To create a row, write any of mstInstanceEditVlansMap, mstInstanceEditVlansMap2k, mstInstanceEditVlansMap3k or mstInstanceEditVlansMap4k, to a non-empty list. To destroy a row, write all of these four variables to an empty list.")
mstInstanceEditVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap2k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditVlansMap2k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 1024 through 2047. The first octet corresponds to VLANs with vlanIndex values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'. To create a row, write any of mstInstanceEditVlansMap, mstInstanceEditVlansMap2k, mstInstanceEditVlansMap3k or mstInstanceEditVlansMap4k, to a non-empty list. To destroy a row, write all of these four variables to an empty list.")
mstInstanceEditVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap3k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditVlansMap3k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 2048 through 3071. The first octet corresponds to VLANs with vlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'. To create a row, write any of mstInstanceEditVlansMap, mstInstanceEditVlansMap2k, mstInstanceEditVlansMap3k or mstInstanceEditVlansMap4k, to a non-empty list. To destroy a row, write all of these four variables to an empty list.")
mstInstanceEditVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mstInstanceEditVlansMap4k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditVlansMap4k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 3072 through 4095. The first octet corresponds to VLANs with vlanIndex values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'. To create a row, write any of mstInstanceEditVlansMap, mstInstanceEditVlansMap2k, mstInstanceEditVlansMap3k or mstInstanceEditVlansMap4k, to a non-empty list. To destroy a row, write all of these four variables to an empty list.")
mstInstanceEditRemainingHops = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceEditRemainingHops.setStatus('current')
if mibBuilder.loadTexts: mstInstanceEditRemainingHops.setDescription('The remaining hop count for this MST instance.')
mstInstanceOperTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 7), )
if mibBuilder.loadTexts: mstInstanceOperTable.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperTable.setDescription('The Multiple Spanning Tree region instance vlan mapped table.')
mstInstanceOperEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 7, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mstInstanceOperIndex"))
if mibBuilder.loadTexts: mstInstanceOperEntry.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperEntry.setDescription('A conceptual row containing the status of the MSTP instance.')
mstInstanceOperIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: mstInstanceOperIndex.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperIndex.setDescription('An arbitrary integer within the range from 1 to the value of the maximum instance that uniquely identifies a spanning tree instance.')
mstInstanceOperVlansMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 7, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperVlansMap.setDescription("A string of octets containing one bit per VLAN. The first octet corresponds to VLANs with vlanIndex values of 0 through 7; the second octet to VLANs 8 through 15; etc., The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'.")
mstInstanceOperVlansMap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap2k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperVlansMap2k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 1024 through 2047. The first octet corresponds to VLANs with vlanIndex values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'.")
mstInstanceOperVlansMap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap3k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperVlansMap3k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 2048 through 3071. The first octet corresponds to VLANs with vlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'.")
mstInstanceOperVlansMap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 6, 7, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mstInstanceOperVlansMap4k.setStatus('current')
if mibBuilder.loadTexts: mstInstanceOperVlansMap4k.setDescription("A string of octets containing one bit per VLAN for VLANS with vlanIndex values of 3072 through 4095. The first octet corresponds to VLANs with vlanIndex values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value vlanIndex in that octet. For each VLAN, if it is mapped to this MSTP instance, then the bit corresponding to that VLAN is set to '1'.")
staLoopbackDetectionPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8), )
if mibBuilder.loadTexts: staLoopbackDetectionPortTable.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortTable.setDescription('A table provides the mechanism to configure the spanning tree loopback detection of each port or trunk')
staLoopbackDetectionPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "staLoopbackDetectionPortIfIndex"))
if mibBuilder.loadTexts: staLoopbackDetectionPortEntry.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortEntry.setDescription('A conceptual row of staLoopbackDetectionPortTable.')
staLoopbackDetectionPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: staLoopbackDetectionPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortIfIndex.setDescription('The port and the trunk interfaces of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
staLoopbackDetectionPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortStatus.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortStatus.setDescription('Status of the port on whether spanning tree loopback detection is enabled.')
staLoopbackDetectionPortTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortTrapStatus.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortTrapStatus.setDescription('The parameter indicates whether the trap has to be sent when the loopback BPDUs have been detected.')
staLoopbackDetectionPortReleaseMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortReleaseMode.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortReleaseMode.setDescription('Setting it to auto(1) indicates that this port can be released from discarding state automatically after loopback has occurred. Setting it to manual(2) indicates that this port can be released from discarding state manually after loopback has occurred.')
staLoopbackDetectionPortRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noRelease", 1), ("release", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortRelease.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortRelease.setDescription('Set this to release(2) to release the port from discarding state. noRelease(1) will always be obtained when reading this variable.')
staLoopbackDetectionPortShutdownInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staLoopbackDetectionPortShutdownInterval.setStatus('current')
if mibBuilder.loadTexts: staLoopbackDetectionPortShutdownInterval.setDescription('Set the interval used when loopback detection action is shutdown.')
staSystemBPDUFlooding = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("to-vlan", 1), ("to-all", 2))).clone('to-vlan')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staSystemBPDUFlooding.setStatus('current')
if mibBuilder.loadTexts: staSystemBPDUFlooding.setDescription('Global BPDU flooding behavior configuration. When BPDU is received on spanning tree disabled port. (1) BPDU is flooded to all other spanning tree disabled ports in vlan that received BPDU. (2) BPDU is flooded to all other spanning tree disabled ports.')
staCiscoPrestandardCompatibility = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 5, 11), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staCiscoPrestandardCompatibility.setStatus('current')
if mibBuilder.loadTexts: staCiscoPrestandardCompatibility.setDescription('The feature makes spanning tree operation compatible with Cisco pre-standard versions.')
restartOpCodeFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartOpCodeFile.setStatus('current')
if mibBuilder.loadTexts: restartOpCodeFile.setDescription('Name of op-code file for start-up.')
restartConfigFile = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 7, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartConfigFile.setStatus('current')
if mibBuilder.loadTexts: restartConfigFile.setDescription('Name of configuration file for start-up.')
restartControl = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartControl.setStatus('current')
if mibBuilder.loadTexts: restartControl.setDescription("Setting this object to warmBoot(2) causes the device to reinitialize itself such that neither the agent configuration nor the protocol entity implementation is altered. Setting this object to coldBoot(3) causes the device to reinitialize itself such that the agent's configuration or the protocol entity implementation may be altered. When the device is running normally, this variable has a value of running(1).")
mirrorTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 1), )
if mibBuilder.loadTexts: mirrorTable.setStatus('current')
if mibBuilder.loadTexts: mirrorTable.setDescription('Table for port mirroring, enabling a port to be mirrored to/from another port. Not all ports can be mirrored and limitations may apply as to which ports can be used as either source or destination ports.')
mirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mirrorDestinationPort"), (0, "ECS2100-28PP-MIB", "mirrorSourcePort"))
if mibBuilder.loadTexts: mirrorEntry.setStatus('current')
if mibBuilder.loadTexts: mirrorEntry.setDescription('The conceptual row of mirrorTable.')
mirrorDestinationPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mirrorDestinationPort.setStatus('current')
if mibBuilder.loadTexts: mirrorDestinationPort.setDescription('The destination port interface for mirrored packets. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
mirrorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 1, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: mirrorSourcePort.setStatus('current')
if mibBuilder.loadTexts: mirrorSourcePort.setDescription('The source port interface for mirrored packets. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
mirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorType.setStatus('current')
if mibBuilder.loadTexts: mirrorType.setDescription('If this value is rx(1), receive packets will be mirrored. If this value is tx(2), transmit packets will be mirrored. If this value is both(3), both receive and transmit packets will be mirrored.')
mirrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 1, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorStatus.setStatus('current')
if mibBuilder.loadTexts: mirrorStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
rspanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3), )
if mibBuilder.loadTexts: rspanTable.setStatus('current')
if mibBuilder.loadTexts: rspanTable.setDescription('A table that contains the settings of RSPAN.')
rspanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "rspanSessionId"))
if mibBuilder.loadTexts: rspanEntry.setStatus('current')
if mibBuilder.loadTexts: rspanEntry.setDescription('The conceptual row of rspanTable.')
rspanSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: rspanSessionId.setStatus('current')
if mibBuilder.loadTexts: rspanSessionId.setDescription('The session ID that may specify an entry in the table which contains destination port(s) information.')
rspanSrcTxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanSrcTxPorts.setStatus('current')
if mibBuilder.loadTexts: rspanSrcTxPorts.setDescription('Specifies the source port list in tx mode.')
rspanSrcRxPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanSrcRxPorts.setStatus('current')
if mibBuilder.loadTexts: rspanSrcRxPorts.setDescription('Specifies the source port list in rx mode.')
rspanDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanDstPort.setStatus('current')
if mibBuilder.loadTexts: rspanDstPort.setDescription('The port number of a destination port. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
rspanDstPortTag = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("untagged", 2), ("tagged", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanDstPortTag.setStatus('current')
if mibBuilder.loadTexts: rspanDstPortTag.setDescription('Specifies the traffic which is sent out from source port with RSPAN VLAN ID or not.')
rspanSwitchRole = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("source", 2), ("intermediate", 3), ("destination", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanSwitchRole.setStatus('current')
if mibBuilder.loadTexts: rspanSwitchRole.setDescription('Specifies the role of current switch.')
rspanRemotePorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 7), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanRemotePorts.setStatus('current')
if mibBuilder.loadTexts: rspanRemotePorts.setDescription('Specifies the uplink port list.')
rspanRemoteVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanRemoteVlanId.setStatus('current')
if mibBuilder.loadTexts: rspanRemoteVlanId.setDescription('Specifies the ID of a RSPAN VLAN.')
rspanOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rspanOperStatus.setStatus('current')
if mibBuilder.loadTexts: rspanOperStatus.setDescription('The operational status of the entry. A status of up(1) means the setting of a session is complete and it has started performing its function. A status of down(2) means no function is performed because of incompleted session setting.')
rspanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 8, 3, 1, 10), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: rspanStatus.setStatus('current')
if mibBuilder.loadTexts: rspanStatus.setDescription('Set this to valid(1) to create an entry. Set this to invalid(2) to destroy an entry.')
igmpSnoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopStatus.setDescription('Parameter to enable or disable IGMP snooping on the device. When enabled, the device will examine IGMP packets and set up filters for IGMP ports. ')
igmpSnoopQuerier = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 2), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQuerier.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQuerier.setDescription('Enables (disables) whether the switch acts as an IGMP querier.')
igmpSnoopRouterPortExpireTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 500)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopRouterPortExpireTime.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterPortExpireTime.setDescription('Sets the time (in seconds) the switch waits after the previous querier has stopped querying before the router port (which received query packets from previous querier) expires.')
igmpSnoopVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopVersion.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVersion.setDescription('IGMP version snooped')
igmpSnoopRouterCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 8), )
if mibBuilder.loadTexts: igmpSnoopRouterCurrentTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentTable.setDescription('Table for current router ports.')
igmpSnoopRouterCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 8, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopRouterCurrentVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentEntry.setDescription('Entry for current router ports.')
igmpSnoopRouterCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterCurrentVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentVlanIndex.setDescription('The interface identified by a particular value of this index is the same interface as identified by the same value of dot1qVlanIndex in the Q-BRIDGE-MIB. The entry will only appear here after a configure to igmpSnoopRouterStaticTable.')
igmpSnoopRouterCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 8, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentPorts.setDescription('The set of ports which are current router ports, including static router ports. Please refer to igmpSnoopRouterStaticTable.')
igmpSnoopRouterCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 8, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentStatus.setDescription('The set of ports which are static router ports.')
igmpSnoopRouterStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 9), )
if mibBuilder.loadTexts: igmpSnoopRouterStaticTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticTable.setDescription('Table for static router ports.')
igmpSnoopRouterStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 9, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopRouterStaticVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterStaticEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticEntry.setDescription('Entry for static router ports.')
igmpSnoopRouterStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterStaticVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticVlanIndex.setDescription('The interface identified by a particular value of this index is the same interface as identified by the same value of dot1qVlanIndex in the Q-BRIDGE-MIB. The entry will only appear here after a configure to igmpSnoopRouterStaticTable.')
igmpSnoopRouterStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 9, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticPorts.setDescription('The set of ports which are static router ports.')
igmpSnoopRouterStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 9, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
igmpSnoopMulticastStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 11), )
if mibBuilder.loadTexts: igmpSnoopMulticastStaticTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticTable.setDescription('Table for static multicast addresses.')
igmpSnoopMulticastStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 11, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopMulticastStaticVlanIndex"), (0, "ECS2100-28PP-MIB", "igmpSnoopMulticastStaticIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastStaticEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticEntry.setDescription('Entry for static multicast addresses.')
igmpSnoopMulticastStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticVlanIndex.setDescription('The interface identified by a particular value of this index is the same interface as identified by the same value of dot1qVlanIndex in the Q-BRIDGE-MIB. The entry will only appear here after a configure to igmpSnoopMulticastStaticTable.')
igmpSnoopMulticastStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 11, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticIpAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticIpAddress.setDescription('IP address of multicast group.')
igmpSnoopMulticastStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 11, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticPorts.setDescription('The set of ports which are members.')
igmpSnoopMulticastStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 11, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
igmpSnoopCurrentVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14), )
if mibBuilder.loadTexts: igmpSnoopCurrentVlanTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanTable.setDescription('Table for enabling or disabling IGMP snooping per VLAN.')
igmpSnoopCurrentVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopCurrentVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopCurrentVlanEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanEntry.setDescription('Entry for enabling or disabling IGMP snooping.')
igmpSnoopCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 1), VlanIndex())
if mibBuilder.loadTexts: igmpSnoopCurrentVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanIndex.setDescription('Same is dot1qVlanIndex in the Q-BRIDGE-MIB. This table has only one entry - the entry for the VLAN of the management interface.')
igmpSnoopCurrentVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanStatus.setDescription('Parameter to enable or disable IGMP snooping on this VLAN. When enabled, the device will examine IGMP packets and set up filters for IGMP ports.')
igmpSnoopCurrentVlanImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanImmediateLeave.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanImmediateLeave.setDescription('The parameter to enable or disable the Immediate-Leave feature on this VLAN.')
igmpSnoopCurrentVlanGeneralQuerySuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanGeneralQuerySuppression.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanGeneralQuerySuppression.setDescription('The parameter to enable or disable the general query suppresion on this VLAN.')
igmpSnoopCurrentVlanLastMemQueryCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanLastMemQueryCount.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanLastMemQueryCount.setDescription('Represents the number of queries sent by the switch before it assumes there are no local members.')
igmpSnoopCurrentVlanLastMemQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 31744))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanLastMemQueryIntvl.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanLastMemQueryIntvl.setDescription('The last member query interval is the max response time inserted into group-specific queries sent in response to leave group messages,and is also the the max response time inserted into group-and-source-specific query messages.')
igmpSnoopCurrentVlanProxyAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanProxyAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanProxyAddress.setDescription('Represents the address of queries sent by the switch.')
igmpSnoopCurrentVlanQueryIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 31744))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanQueryIntvl.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanQueryIntvl.setDescription('Represents the query interval of queries sent by the switch.')
igmpSnoopCurrentVlanQueryRespIntvl = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 31740))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanQueryRespIntvl.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanQueryRespIntvl.setDescription('Represents the query response interval of queries sent by the switch.')
igmpSnoopCurrentVlanProxyReporting = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("default", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanProxyReporting.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanProxyReporting.setDescription('Set this variable to enabled(1) to enable the feature. Set this variable to disabled(2) to disable the feature. Set this variable to default(3), the status of the feature is decided by the global configuration.')
igmpSnoopCurrentVlanVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanVersion.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanVersion.setDescription('the version of igmp packets is supported by this vlan.')
igmpSnoopCurrentVlanVersionExclusive = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 12), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanVersionExclusive.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanVersionExclusive.setDescription('Enable/disable control of the IGMP Snooping exclusive supported version.')
igmpSnoopCurrentVlanImmediateLeaveByHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 14, 1, 14), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopCurrentVlanImmediateLeaveByHostIp.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurrentVlanImmediateLeaveByHostIp.setDescription('The parameter to enable or disable the Immediate-Leave feature by host ip on this VLAN.')
igmpSnoopMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15), )
if mibBuilder.loadTexts: igmpSnoopMulticastGroupTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastGroupTable.setDescription('Table for current multicast addresses.')
igmpSnoopMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopMulticastGroupVlanIndex"), (0, "ECS2100-28PP-MIB", "igmpSnoopMulticastGroupIpAddress"), (0, "ECS2100-28PP-MIB", "igmpSnoopMulticastGroupSourceIPAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastGroupEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastGroupEntry.setDescription('Entry for Group multicast addresses.')
igmpSnoopMulticastGroupVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15, 1, 1), VlanIndex())
if mibBuilder.loadTexts: igmpSnoopMulticastGroupVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastGroupVlanIndex.setDescription('The interface identified by a particular value of this index is the same interface as identified by the same value of dot1qVlanIndex in the Q-BRIDGE-MIB. The entry will only appear here after a configure to igmpSnoopMulticastStaticTable.')
igmpSnoopMulticastGroupIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastGroupIpAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastGroupIpAddress.setDescription('IP address of multicast group.')
igmpSnoopMulticastGroupSourceIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15, 1, 3), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastGroupSourceIPAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastGroupSourceIPAddress.setDescription('Source IP address of source.')
igmpSnoopMulticastGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastGroupPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastGroupPorts.setDescription('The set of ports which are members of a multicast group, including static members. Please refer to igmpSnoopMulticastStaticTable.')
igmpSnoopMulticastGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15, 1, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastGroupStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastGroupStatus.setDescription('The set of ports which are static IGMP member ports.')
igmpSnoopMulticastGroupPortCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 15, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastGroupPortCount.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastGroupPortCount.setDescription('The number of forwarding port in this group')
igmpSnoopFilterStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 17), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopFilterStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopFilterStatus.setDescription('Parameter to enable or disable IGMP filtering on the device.')
igmpSnoopProfileTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 18), )
if mibBuilder.loadTexts: igmpSnoopProfileTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileTable.setDescription('The table for configuring the IGMP snooping profile.')
igmpSnoopProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 18, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopProfileId"))
if mibBuilder.loadTexts: igmpSnoopProfileEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileEntry.setDescription('The entry for configuring the IGMP snooping profile.')
igmpSnoopProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopProfileId.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileId.setDescription('The ID of the IGMP snooping profile.')
igmpSnoopProfileAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileAction.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileAction.setDescription('The access mode of the IGMP snooping profile.')
igmpSnoopProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 18, 1, 3), ValidStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
igmpSnoopProfileCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 19))
igmpSnoopProfileCtlId = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 19, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlId.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileCtlId.setDescription('The ID of the IGMP snooping profile. The default value is zero, meaning that no ID is specified. In order to create a profile, a non-zero value must be specified.')
igmpSnoopProfileCtlInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 19, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlInetAddressType.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileCtlInetAddressType.setDescription('The address type is associated with this agent. Only ipv4(1) type is supported.')
igmpSnoopProfileCtlStartInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 19, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlStartInetAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileCtlStartInetAddress.setDescription('The specified addresses in the start of the controlled IP multicast addresses.')
igmpSnoopProfileCtlEndInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 19, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlEndInetAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileCtlEndInetAddress.setDescription('The specified addresses in the end of the controlled IP multicast addresses.')
igmpSnoopProfileCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("create", 2), ("destroy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProfileCtlAction.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileCtlAction.setDescription('Setting it to create(2) creates the range of the controlled IP multicast addresses. Setting it to destroy(3) destroys the range of the controlled IP multicast addresses. When the action is completed, this object becomes noAction(1).')
igmpSnoopProfileRangeTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 20), )
if mibBuilder.loadTexts: igmpSnoopProfileRangeTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileRangeTable.setDescription('The table for configuring the range of the IGMP snooping profile.')
igmpSnoopProfileRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 20, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopProfileRangeProfileId"), (0, "ECS2100-28PP-MIB", "igmpSnoopProfileRangeInetAddressType"), (0, "ECS2100-28PP-MIB", "igmpSnoopProfileRangeStartInetAddress"))
if mibBuilder.loadTexts: igmpSnoopProfileRangeEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileRangeEntry.setDescription('The entry for configuring the range of the IGMP snooping profile.')
igmpSnoopProfileRangeProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: igmpSnoopProfileRangeProfileId.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileRangeProfileId.setDescription('This is defined as igmpSnoopProfileId.')
igmpSnoopProfileRangeInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 20, 1, 2), InetAddressType())
if mibBuilder.loadTexts: igmpSnoopProfileRangeInetAddressType.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileRangeInetAddressType.setDescription('The address type is associated with this agent. Only ipv4(1) type is supported.')
igmpSnoopProfileRangeStartInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 20, 1, 3), InetAddress())
if mibBuilder.loadTexts: igmpSnoopProfileRangeStartInetAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileRangeStartInetAddress.setDescription('The specified addresses in the start of the controlled IP multicast addresses.')
igmpSnoopProfileRangeEndInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 20, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopProfileRangeEndInetAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileRangeEndInetAddress.setDescription('The specified addresses in the end of the controlled IP multicast addresses.')
igmpSnoopProfileRangeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopProfileRangeAction.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProfileRangeAction.setDescription('The access mode of the IGMP snooping profile.')
igmpSnoopFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 21), )
if mibBuilder.loadTexts: igmpSnoopFilterPortTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopFilterPortTable.setDescription('Table for port configuration in IGMP filtering.')
igmpSnoopFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 21, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopFilterPortIndex"))
if mibBuilder.loadTexts: igmpSnoopFilterPortEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopFilterPortEntry.setDescription('Entry for port configuration in IGMP filtering.')
igmpSnoopFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopFilterPortIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopFilterPortIndex.setDescription('The port and trunk (including trunk members) interface of the portTable. The interface identified by a particular value of this index is the same interface identified by the same value of ifIndex in the IF-MIB.')
igmpSnoopFilterPortProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 21, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopFilterPortProfileId.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopFilterPortProfileId.setDescription('The igmpSnoopProfileEntry identified by a particular value of this index is the same interface identified by the same value of the igmpSnoopProfileId object. If there is no corresponding entry in the igmpSnoopProfileTable, then no association exists. In particular, if this value is zero, no associated profile will be generated, as zero is not a valid profile index.')
igmpSnoopThrottlePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 22), )
if mibBuilder.loadTexts: igmpSnoopThrottlePortTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopThrottlePortTable.setDescription('Table for port configuration in IGMP throttling.')
igmpSnoopThrottlePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 22, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopThrottlePortIndex"))
if mibBuilder.loadTexts: igmpSnoopThrottlePortEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopThrottlePortEntry.setDescription('Entry for port configuration in IGMP throttling.')
igmpSnoopThrottlePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopThrottlePortIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopThrottlePortIndex.setDescription('The port and trunk (including trunk members) interface of the portTable. The interface identified by a particular value of this index is the same interface identified by the same value of ifIndex in the IF-MIB.')
igmpSnoopThrottlePortRunningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 22, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopThrottlePortRunningStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopThrottlePortRunningStatus.setDescription('Describes the running status of the IGMP throttling to the switch. A value of true(1) indicates the IGMP throttling mechanism is active. A value of false(2) indicates the IGMP throttling mechanism is inactive.')
igmpSnoopThrottlePortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("replace", 1), ("deny", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopThrottlePortAction.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopThrottlePortAction.setDescription('The action mode of the IGMP throttling. A value of replace(1) means to replace a joined multicast group randomly when an interface receives an IGMP report and the number of current joined multicast groups is equal to the maximum number of IGMP groups that the interface can join. A value of deny(2) means to deny the IGMP report request when an interface receives an IGMP report and the number of current joined multicast groups is equal to the maximum number of IGMP groups that the interface can join.')
igmpSnoopThrottlePortMaxGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopThrottlePortMaxGroups.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopThrottlePortMaxGroups.setDescription('The maximum number of IGMP groups that the interface can join.')
igmpSnoopThrottlePortCurrentGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopThrottlePortCurrentGroups.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopThrottlePortCurrentGroups.setDescription('The current number of IGMP groups that the interface has joined.')
igmpSnoopPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27), )
if mibBuilder.loadTexts: igmpSnoopPortTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortTable.setDescription('Table of IGMP Snooping service per port.')
igmpSnoopPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopPortIndex"))
if mibBuilder.loadTexts: igmpSnoopPortEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortEntry.setDescription('Entry of IGMP Snooping service per port.')
igmpSnoopPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopPortIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortIndex.setDescription('The port and the trunk (excluding trunk members) interface of the igmpSnoopPortTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
igmpSnoopQueryDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryDrop.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryDrop.setDescription('Parameter to enable or disable dropping IGMP Query packet.')
igmpSnoopMulticastDataDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopMulticastDataDrop.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastDataDrop.setDescription('Parameter to enable or disable dropping IP multicast data ')
igmpSnoopPortNumGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumGroups.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortNumGroups.setDescription('Current learned groups ')
igmpSnoopPortNumJoinSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumJoinSend.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortNumJoinSend.setDescription('Number of join send ')
igmpSnoopPortNumJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumJoins.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortNumJoins.setDescription('Number of join recieved ')
igmpSnoopPortNumJoinSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumJoinSuccess.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortNumJoinSuccess.setDescription('Number of join group success ')
igmpSnoopPortNumLeavesSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumLeavesSend.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortNumLeavesSend.setDescription('Number of leave send')
igmpSnoopPortNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumLeaves.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortNumLeaves.setDescription('Number of leave received ')
igmpSnoopPortNumGeneralQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumGeneralQuerySend.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortNumGeneralQuerySend.setDescription('Number of general query send. ')
igmpSnoopPortNumGeneralQueryRecevied = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumGeneralQueryRecevied.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortNumGeneralQueryRecevied.setDescription('Number of general query received. ')
igmpSnoopPortNumSepcificQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumSepcificQuerySend.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortNumSepcificQuerySend.setDescription('Number of specific query send. ')
igmpSnoopPortNumSpecificQueryReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumSpecificQueryReceived.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortNumSpecificQueryReceived.setDescription('Number of specific query received. ')
igmpSnoopPortNumInvalidReport = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopPortNumInvalidReport.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortNumInvalidReport.setDescription('Number of invalid report received. ')
igmpSnoopPortClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 27, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopPortClearStatistics.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopPortClearStatistics.setDescription('Clear this VLAN all statistics ')
igmpSnoopGlobalMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28))
igmpSnoopProxyReporting = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 1), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopProxyReporting.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopProxyReporting.setDescription('Parameter to enable or disable IGMP snooping proxy reporting on the device.')
igmpSnoopRouterAlertOptionCheck = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopRouterAlertOptionCheck.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterAlertOptionCheck.setDescription('Parameter to enable or disable IGMP snooping router alert option check on the device.')
igmpSnoopTcnFlood = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 3), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopTcnFlood.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopTcnFlood.setDescription('Parameter to enable or disable IGMP snooping tcn flood on the device.')
igmpSnoopTcnQuerySolicit = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 4), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopTcnQuerySolicit.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopTcnQuerySolicit.setDescription('Parameter to enable or disable IGMP snooping tcn query solicit on the device.')
igmpSnoopUnregisteredDataFlood = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 5), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopUnregisteredDataFlood.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopUnregisteredDataFlood.setDescription('Parameter to enable or disable IGMP snooping Unregistered data flood solicit on the device.')
igmpSnoopUnsolicitedReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopUnsolicitedReportInterval.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopUnsolicitedReportInterval.setDescription('Setting this value to specify how long (in seconds) the uplink ports should transmit unsolicited reports.')
igmpSnoopVersionExclusive = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 7), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopVersionExclusive.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVersionExclusive.setDescription('Parameter to enable or disable IGMP snooping version exclusive on the device.')
igmpSnoopMrouterForwardMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 28, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopMrouterForwardMode.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMrouterForwardMode.setDescription("Paremete to set IGMP snooping Mrouter port forward mode. When set dynamic, IGMP snooping Mrouter port won't forward multicast streams received from other mrouter port. When set forward, IGMP snooping Mrouter port will forward multicast streams received from other mrouter port. ")
igmpSnoopForwardingPriority = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopForwardingPriority.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopForwardingPriority.setDescription('Configure IGMP snooping multicast stream forwarding priority. If value is 65535, it means the priority is disabled')
igmpSnoopQueryDropTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 30), )
if mibBuilder.loadTexts: igmpSnoopQueryDropTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryDropTable.setDescription('Table of IGMP Snooping query drop per vlan and per vlan configuration.')
igmpSnoopQueryDropEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 30, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopQueryDropPortIndex"))
if mibBuilder.loadTexts: igmpSnoopQueryDropEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryDropEntry.setDescription('Entry of IGMP Snooping service per port and per VLAN.')
igmpSnoopQueryDropPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 30, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopQueryDropPortIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryDropPortIndex.setDescription('The port and the trunk (excluding trunk members) interface of the igmpSnoopPortTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
igmpSnoopQueryDropVlanBitmap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 30, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(512, 512)).setFixedLength(512)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryDropVlanBitmap.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryDropVlanBitmap.setDescription('The VLAN bitmap which query drop applied on this port. If all zero, it means disable, For all VLAN, please use igmpSnoopPortTable to configure.')
igmpSnoopClearDynamicGroups = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 32), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopClearDynamicGroups.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopClearDynamicGroups.setDescription('Clear all IGMP groups which are learned by IGMP report and MVR.')
igmpSnoopVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33), )
if mibBuilder.loadTexts: igmpSnoopVlanTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanTable.setDescription('Table of IGMP Snooping service per port.')
igmpSnoopVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "igmpSnoopVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopVlanEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanEntry.setDescription('Entry of IGMP Snooping service per VLAN.')
igmpSnoopVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 1), VlanIndex())
if mibBuilder.loadTexts: igmpSnoopVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanIndex.setDescription('VLAN ID')
igmpSnoopVlanNumGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumGroups.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanNumGroups.setDescription('Current learned groups ')
igmpSnoopVlanNumJoinSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumJoinSend.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanNumJoinSend.setDescription('Number of join send.')
igmpSnoopVlanNumJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumJoins.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanNumJoins.setDescription('Number of join received ')
igmpSnoopVlanNumJoinSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumJoinSuccess.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanNumJoinSuccess.setDescription('Number of jion success ')
igmpSnoopVlanNumLeavesSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumLeavesSend.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanNumLeavesSend.setDescription('Number of leave send.')
igmpSnoopVlanNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumLeaves.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanNumLeaves.setDescription('Number of leave received ')
igmpSnoopVlanNumGeneralQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumGeneralQuerySend.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanNumGeneralQuerySend.setDescription('Number of general query send ')
igmpSnoopVlanNumGeneralQueryRecevied = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumGeneralQueryRecevied.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanNumGeneralQueryRecevied.setDescription('Number of general query received ')
igmpSnoopVlanNumSepcificQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumSepcificQuerySend.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanNumSepcificQuerySend.setDescription('Number of specific query send')
igmpSnoopVlanNumSpecificQueryReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumSpecificQueryReceived.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanNumSpecificQueryReceived.setDescription('Number of sepcific query received ')
igmpSnoopVlanNumInvalidReport = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanNumInvalidReport.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanNumInvalidReport.setDescription('Number of invalid report received')
igmpSnoopVlanClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 9, 33, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopVlanClearStatistics.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanClearStatistics.setDescription('Clear this VLAN statistics')
netConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1), )
if mibBuilder.loadTexts: netConfigTable.setStatus('current')
if mibBuilder.loadTexts: netConfigTable.setDescription('A table of netConfigEntry.')
netConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "netConfigIfIndex"), (0, "ECS2100-28PP-MIB", "netConfigIPAddress"), (0, "ECS2100-28PP-MIB", "netConfigSubnetMask"))
if mibBuilder.loadTexts: netConfigEntry.setStatus('current')
if mibBuilder.loadTexts: netConfigEntry.setDescription('A set of configuration parameters for a particular network interface on this device. If the device has no network interface, this table is empty. The index is composed of the ifIndex assigned to the corresponding interface.')
netConfigIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1001, 5097)))
if mibBuilder.loadTexts: netConfigIfIndex.setStatus('current')
if mibBuilder.loadTexts: netConfigIfIndex.setDescription('The VLAN interface being used by this table entry. Only the VLAN interfaces which have an IP configured will appear in the table.')
netConfigIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: netConfigIPAddress.setStatus('current')
if mibBuilder.loadTexts: netConfigIPAddress.setDescription('The IP address of this Net interface. The default value for this object is 0.0.0.0. If either the netConfigIPAddress or netConfigSubnetMask is 0.0.0.0, then when the device boots, it may use BOOTP to try to figure out what these values should be. If BOOTP fails, before the device can talk on the network, this value must be configured (e.g., through a terminal attached to the device).')
netConfigSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1, 1, 3), IpAddress())
if mibBuilder.loadTexts: netConfigSubnetMask.setStatus('current')
if mibBuilder.loadTexts: netConfigSubnetMask.setDescription('The subnet mask of this Net interface. The default value for this object is 0.0.0.0. If either the netConfigIPAddress or netConfigSubnetMask are 0.0.0.0, then when the device boots, it may use BOOTP to try to figure out what these values should be. If BOOTP fails, before the device can talk on the network, this value must be configured (e.g., through a terminal attached to the device).')
netConfigPrimaryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigPrimaryInterface.setStatus('current')
if mibBuilder.loadTexts: netConfigPrimaryInterface.setDescription('Whether this is a primary interface.')
netConfigUnnumbered = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unnumbered", 1), ("notUnnumbered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: netConfigUnnumbered.setStatus('current')
if mibBuilder.loadTexts: netConfigUnnumbered.setDescription('Whether this is an unnumbered interface.')
netConfigStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: netConfigStatus.setStatus('current')
if mibBuilder.loadTexts: netConfigStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
netDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: netDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: netDefaultGateway.setDescription('The IP Address of the default gateway. If this value is undefined or unknown, it shall have the value 0.0.0.0.')
ipHttpState = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpState.setStatus('current')
if mibBuilder.loadTexts: ipHttpState.setDescription('Whether HTTP is enabled.')
ipHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpPort.setStatus('current')
if mibBuilder.loadTexts: ipHttpPort.setDescription('The port number for HTTP.')
ipDhcpRestart = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDhcpRestart.setStatus('current')
if mibBuilder.loadTexts: ipDhcpRestart.setDescription('When set to restart(1) the DHCP server will restart. When read, this value always returns noRestart(2).')
ipHttpsState = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsState.setStatus('current')
if mibBuilder.loadTexts: ipHttpsState.setDescription('Whether HTTPS is enabled.')
ipHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsPort.setStatus('current')
if mibBuilder.loadTexts: ipHttpsPort.setDescription('The port number for HTTPS.')
dhcpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11))
dhcpClient = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 1))
dhcpOption82 = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4))
dhcpcOptions = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 1, 1))
dhcpcInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 1, 1, 1), )
if mibBuilder.loadTexts: dhcpcInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: dhcpcInterfaceTable.setDescription('Table for DHCP client information listed by interface. Depending on the nature of the product, this table may have only one entry(e.g. for the management VLAN), or may have many entries(e.g. for all ports, or for all static VLANs).')
dhcpcInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 1, 1, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "dhcpcIfIndex"))
if mibBuilder.loadTexts: dhcpcInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpcInterfaceEntry.setDescription('Entry for DHCP client information listed by interface.')
dhcpcIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: dhcpcIfIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpcIfIndex.setDescription('This is defined by ifIndex in the IF-MIB.(static vlan if index)')
dhcpcIfVendorClassIdMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notSpecify", 1), ("text", 2), ("hex", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpcIfVendorClassIdMode.setStatus('current')
if mibBuilder.loadTexts: dhcpcIfVendorClassIdMode.setDescription('Whether the vendor class ID is in text mode or in Hex mode.')
dhcpcIfVendorClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 1, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpcIfVendorClassId.setStatus('current')
if mibBuilder.loadTexts: dhcpcIfVendorClassId.setDescription('The value that the DHCP client sets in the vendor class_id option of DHCPDISCOVER and DHCPREQUEST messages. This value may be used by DHCP servers to identify vendor classof the client.')
dhcpRelay = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2))
dhcpRelayRestart = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("restart", 1), ("noRestart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayRestart.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayRestart.setDescription('Set this object to restart(1) to restart DCHP Relay. Always get noRestart(2) when you read this variable.')
dhcpRelayServerInetAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2, 4), )
if mibBuilder.loadTexts: dhcpRelayServerInetAddrTable.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerInetAddrTable.setDescription('The role of DHCP Relay Agent is to forward requests and replies between server and client when they are not in the same subnet. To enable DHCP Relay service user needs to specify Relay Server IP address and then restart DHCP Relay. This Table is to specify Relay Server IP address,the maximum numbers of server IP address user can specify is 5.To Restart DHCP Relay, please use the dhcpRelayRestart variable.')
dhcpRelayServerInetAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "dhcpRelayServerInetAddrIfIndex"), (0, "ECS2100-28PP-MIB", "dhcpRelayServerInetAddrIndex"))
if mibBuilder.loadTexts: dhcpRelayServerInetAddrEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerInetAddrEntry.setDescription('A conceptual row of dhcpRelayServerAddrTable. ')
dhcpRelayServerInetAddrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: dhcpRelayServerInetAddrIfIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerInetAddrIfIndex.setDescription('The VLAN interface being used by this table entry.')
dhcpRelayServerInetAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: dhcpRelayServerInetAddrIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerInetAddrIndex.setDescription('The Index of the Relay server IP address.')
dhcpRelayServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2, 4, 1, 3), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerInetAddressType.setDescription('The INET address type of the relay server.')
dhcpRelayServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 2, 4, 1, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpRelayServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpRelayServerInetAddress.setDescription('The INET address of the relay server.')
pingMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15))
pingIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingIpAddress.setStatus('current')
if mibBuilder.loadTexts: pingIpAddress.setDescription('Specifies the IP address of the device that is planned to ping.')
pingPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 512)).clone(32)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingPacketSize.setStatus('current')
if mibBuilder.loadTexts: pingPacketSize.setDescription('Specifies the size of each data potion of ping packets in bytes.')
pingCompleted = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingCompleted.setStatus('current')
if mibBuilder.loadTexts: pingCompleted.setDescription('A value of true(1) will be read when this ping operation has been either responded to or changed to the time-out status. A value of false(2) will be read when there is a ping operation running and all associated objects in the pingMgt operation cannot be modified during this period.')
pingAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("pingStart", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingAction.setStatus('current')
if mibBuilder.loadTexts: pingAction.setDescription('The action of the pingMgt operation. Sets these objects to pingStart(2) to begin the ping operation. Once the action is set to pingStart(2), the associated pingMgt objects cannot be modified until this ping operation is completed (pingCompleted is true). When the ping has ended or there is no ping operation performing, this object will get a value of noAction(1).')
pingProbeCount = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pingProbeCount.setStatus('current')
if mibBuilder.loadTexts: pingProbeCount.setDescription('Specifies the number of times to perform a ping operation at a remote host.')
pingSentPackets = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingSentPackets.setStatus('current')
if mibBuilder.loadTexts: pingSentPackets.setDescription('The value of this object reflects the number of probes sent. The value of this object must be reported as 0 when no probes have been sent.')
pingReceivedPackets = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingReceivedPackets.setStatus('current')
if mibBuilder.loadTexts: pingReceivedPackets.setDescription('Number of responses received. The value of this object must be reported as 0 when no probe responses have been received.')
pingPacketLossRate = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pingPacketLossRate.setStatus('current')
if mibBuilder.loadTexts: pingPacketLossRate.setDescription('Packet loss rate of this ping operation. This variable is calculated by pingReceivedPackets and pingSentPackets. The rate is expressed as a percentage.')
pingHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 10), )
if mibBuilder.loadTexts: pingHistoryTable.setStatus('current')
if mibBuilder.loadTexts: pingHistoryTable.setDescription('Contains the executive result information for the ping operation.')
pingHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 10, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "pingHistoryIndex"))
if mibBuilder.loadTexts: pingHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: pingHistoryEntry.setDescription('A conceptual row in the pingHistory table.')
pingHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)))
if mibBuilder.loadTexts: pingHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: pingHistoryIndex.setDescription('A new entry in this table is created when the result of a ping probe is determined. The old entries will be cleared when a new ping action is started.')
pingHistoryResponse = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 15, 10, 1, 2), Integer32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pingHistoryResponse.setStatus('current')
if mibBuilder.loadTexts: pingHistoryResponse.setDescription('This variable represents the round trip time and is measured in milliseconds. The variable is the difference between received time and sent time for a ping probe. If the difference value is more than the time-out value or no response is received, then the variable will be 5000 milliseconds.')
dhcpOption82Status = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82Status.setStatus('current')
if mibBuilder.loadTexts: dhcpOption82Status.setDescription('Set enabled(1) to enable DHCP Relay Option 82, set disabled(2) to disable it.')
dhcpOption82Policy = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("replace", 2), ("keep", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82Policy.setStatus('current')
if mibBuilder.loadTexts: dhcpOption82Policy.setDescription('Provide three policies to handle packet')
dhcpOption82RemoteIDMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mac-address-in-hex", 1), ("mac-address-in-ascii", 2), ("ip-address-in-hex", 3), ("ip-address-in-ascii", 4), ("configured-string", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82RemoteIDMode.setStatus('current')
if mibBuilder.loadTexts: dhcpOption82RemoteIDMode.setDescription('Provide five mode for insertion remote-id sub-option of option 82. If configured-string(5) has been set, dhcpOption82RemoteIDString will take effect.')
dhcpOption82RemoteIDString = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82RemoteIDString.setStatus('current')
if mibBuilder.loadTexts: dhcpOption82RemoteIDString.setDescription('Set string to remote-id sub-option of option 82. It only take effect when dhcpOption82RemoteIDMode is set to configured-string(5)')
dhcpOption82EncodeFormat = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("extra-subtype-included", 1), ("no-extra-subtype-included", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82EncodeFormat.setStatus('current')
if mibBuilder.loadTexts: dhcpOption82EncodeFormat.setDescription('Set encode format for CID and RID in option82. Set extra-subtype-included(1) will have extra subtype and length field in CID and RID. Set no-extra-subtype-included(2) will only have TLV format for CID and RID.')
dhcpOption82RelayServerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 6), )
if mibBuilder.loadTexts: dhcpOption82RelayServerAddrTable.setStatus('current')
if mibBuilder.loadTexts: dhcpOption82RelayServerAddrTable.setDescription(' This table is to specify relay server IP address, the maximum number of server IP addresses user can specify is 5. ')
dhcpOption82RelayServerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "dhcpOption82RelayServerAddrIndex"))
if mibBuilder.loadTexts: dhcpOption82RelayServerAddrEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpOption82RelayServerAddrEntry.setDescription('A conceptual row of dhcpOption82RelayServerAddrTable.')
dhcpOption82RelayServerAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: dhcpOption82RelayServerAddrIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpOption82RelayServerAddrIndex.setDescription('The index of the relay server IP address.')
dhcpOption82RelayServerAddrServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 11, 4, 6, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82RelayServerAddrServerIp.setStatus('current')
if mibBuilder.loadTexts: dhcpOption82RelayServerAddrServerIp.setDescription('The IP address of the relay server.')
arpCacheDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 10, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("delete", 1), ("noDelete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpCacheDeleteAll.setStatus('current')
if mibBuilder.loadTexts: arpCacheDeleteAll.setDescription('To delete all dynamic entries in the ARP cache, write this variable to delete(1). Writing this variable to noDelete(2) has no effect on the device. When read, this variable always returns noDelete(2). This object is only for Layer 2 switch.')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
if mibBuilder.loadTexts: vlanTable.setDescription('Table for VLAN configuration.')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
if mibBuilder.loadTexts: vlanEntry.setDescription('Entry for VLAN configuration.')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vlanIndex.setStatus('current')
if mibBuilder.loadTexts: vlanIndex.setDescription('Based on dot1qVlanIndex in the Q-BRIDGE-MIB. This table has only one entry - the entry for the VLAN of the management interface.')
vlanAddressMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("user", 1), ("bootp", 2), ("dhcp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAddressMethod.setStatus('current')
if mibBuilder.loadTexts: vlanAddressMethod.setDescription('Method to get the IP address.')
vlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 2), )
if mibBuilder.loadTexts: vlanPortTable.setStatus('current')
if mibBuilder.loadTexts: vlanPortTable.setDescription('Table for port configuration in VLAN.')
vlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "vlanPortIndex"))
if mibBuilder.loadTexts: vlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: vlanPortEntry.setDescription('Entry for port configuration in VLAN.')
vlanPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 40)))
if mibBuilder.loadTexts: vlanPortIndex.setStatus('current')
if mibBuilder.loadTexts: vlanPortIndex.setDescription('The port and the trunk (excluding trunk members) interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of dot1qPvid in the Q-BRIDGE-MIB.')
vlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hybrid", 1), ("dot1qTrunk", 2), ("access", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortMode.setStatus('current')
if mibBuilder.loadTexts: vlanPortMode.setDescription('This variable sets the 802.1Q VLAN mode. Setting it to hybrid(1) sets a hybrid link. Setting it to dot1qTrunk(2) sets a trunk link. Setting it to access(3) sets an access link.')
vlanPortPrivateVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("isolated", 2), ("community", 3), ("promiscous", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanPortPrivateVlanType.setStatus('current')
if mibBuilder.loadTexts: vlanPortPrivateVlanType.setDescription('The port type defined for private VLAN.')
voiceVlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6))
voiceVlanOuiTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 1), )
if mibBuilder.loadTexts: voiceVlanOuiTable.setStatus('current')
if mibBuilder.loadTexts: voiceVlanOuiTable.setDescription('A table containing the mac address which can be identified by Voice VLAN.')
voiceVlanOuiEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "voiceVlanOuiAddress"))
if mibBuilder.loadTexts: voiceVlanOuiEntry.setStatus('current')
if mibBuilder.loadTexts: voiceVlanOuiEntry.setDescription('A table containing the mac address which can be identified by Voice VLAN.')
voiceVlanOuiAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 1, 1, 1), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceVlanOuiAddress.setStatus('current')
if mibBuilder.loadTexts: voiceVlanOuiAddress.setDescription('MAC address can be identified by voice vlan.')
voiceVlanOuiMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 1, 1, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanOuiMask.setStatus('current')
if mibBuilder.loadTexts: voiceVlanOuiMask.setDescription('The mask of MAC address.')
voiceVlanOuiDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanOuiDescription.setStatus('current')
if mibBuilder.loadTexts: voiceVlanOuiDescription.setDescription('The description of OUI.')
voiceVlanOuiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 1, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: voiceVlanOuiStatus.setStatus('current')
if mibBuilder.loadTexts: voiceVlanOuiStatus.setDescription('Current operation status of the row.')
voiceVlanEnabledId = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(1, 4093), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanEnabledId.setStatus('current')
if mibBuilder.loadTexts: voiceVlanEnabledId.setDescription('Voice VLAN enabled status and VLAN ID: enabled (1..4093), disabled (-1).')
voiceVlanAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 43200)).clone(1440)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanAgingTime.setStatus('current')
if mibBuilder.loadTexts: voiceVlanAgingTime.setDescription('Voice VLAN aging time, the unit of which is minute.')
voiceVlanPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7), )
if mibBuilder.loadTexts: voiceVlanPortTable.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortTable.setDescription('A list of voice VLAN port entries.')
voiceVlanPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "voiceVlanPortIfIndex"))
if mibBuilder.loadTexts: voiceVlanPortEntry.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortEntry.setDescription('An entry containing Voice VLAN port information, which is applicable to a Voice VLAN enabled interface.')
voiceVlanPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: voiceVlanPortIfIndex.setReference('IfIndex in RFC1213.')
if mibBuilder.loadTexts: voiceVlanPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortIfIndex.setDescription('The index of interface on which Voice VLAN function is enabled.')
voiceVlanPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("manual", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPortMode.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortMode.setDescription('Voice VLAN configuration mode status.')
voiceVlanPortSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPortSecurity.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortSecurity.setDescription('If the security is enabled, the port only allows voice traffic for the Voice VLAN.')
voiceVlanPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPortPriority.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortPriority.setDescription('The priority of the voice vlan traffic in the port.')
voiceVlanPortRuleOui = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1, 5), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPortRuleOui.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortRuleOui.setDescription('The address of voice device is learned from OUI table.')
voiceVlanPortRuleLldp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voiceVlanPortRuleLldp.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortRuleLldp.setDescription('The address of voice device is learned from LLDP discovery.')
voiceVlanPortRemainAge = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 6, 7, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: voiceVlanPortRemainAge.setStatus('current')
if mibBuilder.loadTexts: voiceVlanPortRemainAge.setDescription('Remaining aging time, the unit of which is minute.')
dot1vProtocolExPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 10), )
if mibBuilder.loadTexts: dot1vProtocolExPortTable.setStatus('current')
if mibBuilder.loadTexts: dot1vProtocolExPortTable.setDescription('A table that contains protocol Vlan priority information.')
dot1vProtocolExPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 10, 1), )
dot1vProtocolPortEntry.registerAugmentions(("ECS2100-28PP-MIB", "dot1vProtocolExPortEntry"))
dot1vProtocolExPortEntry.setIndexNames(*dot1vProtocolPortEntry.getIndexNames())
if mibBuilder.loadTexts: dot1vProtocolExPortEntry.setStatus('current')
if mibBuilder.loadTexts: dot1vProtocolExPortEntry.setDescription('A list of protocol VLAN user priority sets for each port.')
dot1vProtocolExPortGroupPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1vProtocolExPortGroupPriority.setStatus('current')
if mibBuilder.loadTexts: dot1vProtocolExPortGroupPriority.setDescription('Specifies the priority in the added tag for qualified frames.')
macVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 11), )
if mibBuilder.loadTexts: macVlanTable.setStatus('current')
if mibBuilder.loadTexts: macVlanTable.setDescription('A table that contains the settings for MAC-based VLAN.')
macVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 11, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "macVlanMacMask"), (0, "ECS2100-28PP-MIB", "macVlanMacAddress"))
if mibBuilder.loadTexts: macVlanEntry.setStatus('current')
if mibBuilder.loadTexts: macVlanEntry.setDescription('A conceptual row in the macVlanTable.')
macVlanMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 11, 1, 1), MacAddress())
if mibBuilder.loadTexts: macVlanMacAddress.setStatus('current')
if mibBuilder.loadTexts: macVlanMacAddress.setDescription('The MAC address that may specify an entry in the table which contains MAC-based VLAN information.')
macVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 11, 1, 2), VlanId()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macVlanId.setStatus('current')
if mibBuilder.loadTexts: macVlanId.setDescription('Specifies the VLAN ID which the MAC address associates with.')
macVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macVlanPriority.setStatus('current')
if mibBuilder.loadTexts: macVlanPriority.setDescription('Specifies the priority whcich the MAC address associates with.')
macVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 11, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: macVlanStatus.setStatus('current')
if mibBuilder.loadTexts: macVlanStatus.setDescription('Set this to valid(1) to create an entry. Set this to invalid(2) to destroy an entry.')
macVlanMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 11, 1, 5), MacAddress())
if mibBuilder.loadTexts: macVlanMacMask.setStatus('current')
if mibBuilder.loadTexts: macVlanMacMask.setDescription('The MAC address mask that may specify an entry in the table which contains MAC-based VLAN information.')
macVlanClearAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noClear", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macVlanClearAction.setStatus('current')
if mibBuilder.loadTexts: macVlanClearAction.setDescription('Action for clearing macVlanTable. When this object is set to clear(2), all entries in macVlanTable will be cleared. When this object is read, the value of this object is always noClear(1).')
subnetVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 13), )
if mibBuilder.loadTexts: subnetVlanTable.setStatus('current')
if mibBuilder.loadTexts: subnetVlanTable.setDescription('A table that contains the settings for IP subnet-based VLAN.')
subnetVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 13, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "subnetVlanMask"), (0, "ECS2100-28PP-MIB", "subnetVlanIpAddress"))
if mibBuilder.loadTexts: subnetVlanEntry.setStatus('current')
if mibBuilder.loadTexts: subnetVlanEntry.setDescription('A conceptual row in the subnetVlanTable.')
subnetVlanIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 13, 1, 1), IpAddress())
if mibBuilder.loadTexts: subnetVlanIpAddress.setStatus('current')
if mibBuilder.loadTexts: subnetVlanIpAddress.setDescription('The IPv4 address of a subnet. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the subnetVlanMask object is not equal to x.')
subnetVlanMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 13, 1, 2), IpAddress())
if mibBuilder.loadTexts: subnetVlanMask.setStatus('current')
if mibBuilder.loadTexts: subnetVlanMask.setDescription('The netmask of a subnet. Any assignment (implicit or otherwise) of an instance of this object to a value x must be rejected if the bitwise logical-AND of x with the value of the corresponding instance of the subnetVlanIpAddress object is not equal to subnetVlanIpAddress.')
subnetVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subnetVlanId.setStatus('current')
if mibBuilder.loadTexts: subnetVlanId.setDescription('Specifies the VLAN ID which the subnet associates with.')
subnetVlanPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subnetVlanPriority.setStatus('current')
if mibBuilder.loadTexts: subnetVlanPriority.setDescription('Specifies the priority whcich the subnet associates with.')
subnetVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 13, 1, 5), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: subnetVlanStatus.setStatus('current')
if mibBuilder.loadTexts: subnetVlanStatus.setDescription('Set this to valid(1) to create an entry. Set this to invalid(2) to destroy an entry.')
subnetVlanClearAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noClear", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subnetVlanClearAction.setStatus('current')
if mibBuilder.loadTexts: subnetVlanClearAction.setDescription('Action for clearing subnetVlanTable. When this object is set to clear(2), all entries in subnetVlanTable will be cleared. When this object is read, the value of this object is always noClear(1).')
vlanStaticExtTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 15), )
if mibBuilder.loadTexts: vlanStaticExtTable.setStatus('current')
if mibBuilder.loadTexts: vlanStaticExtTable.setDescription('The extension table of dot1qVlanStaticTable. This table enhances the original table with extra vlanStaticExtRspanStatus to create and destroy RSPAN VLAN(s).')
vlanStaticExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 15, 1), )
dot1qVlanStaticEntry.registerAugmentions(("ECS2100-28PP-MIB", "vlanStaticExtEntry"))
vlanStaticExtEntry.setIndexNames(*dot1qVlanStaticEntry.getIndexNames())
if mibBuilder.loadTexts: vlanStaticExtEntry.setStatus('current')
if mibBuilder.loadTexts: vlanStaticExtEntry.setDescription('A conceptual row in the vlanStaticExtTable.')
vlanStaticExtRspanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("destroy", 1), ("vlan", 2), ("rspanVlan", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanStaticExtRspanStatus.setStatus('current')
if mibBuilder.loadTexts: vlanStaticExtRspanStatus.setDescription('Displays type of a VLAN is vlan(2) or rspanVlan(3). Set this to destroy(1) to destroy a RSPAN VLAN. Set this to rspanVlan(3) to create a RSPAN VLAN. Setting this to vlan(2) is not allowed.')
vlanStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 17), )
if mibBuilder.loadTexts: vlanStaticTable.setStatus('current')
if mibBuilder.loadTexts: vlanStaticTable.setDescription('Table for static VLAN configuration including VLAN aggregation support.')
vlanStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 17, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "vlanStaticIndex"))
if mibBuilder.loadTexts: vlanStaticEntry.setStatus('current')
if mibBuilder.loadTexts: vlanStaticEntry.setDescription('Static information for a VLAN configured on the device by (local or network) management.')
vlanStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 17, 1, 1), VlanIndex())
if mibBuilder.loadTexts: vlanStaticIndex.setStatus('current')
if mibBuilder.loadTexts: vlanStaticIndex.setDescription('The VLAN ID of the VLAN.')
vlanStaticInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 12, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(135, 136))).clone(namedValues=NamedValues(("l2vlan", 135), ("l3ipvlan", 136))).clone('l2vlan')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vlanStaticInterfaceType.setStatus('current')
if mibBuilder.loadTexts: vlanStaticInterfaceType.setDescription("The interface type of the VLAN (there is a subtype of IANAifType). l2vlan(135) refers to L2 interface and can't accept any L3 related configuration. l3ipvlan(136) refers to L3 interface and can accept L3 related configuration.")
prioWrrPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 12), )
if mibBuilder.loadTexts: prioWrrPortTable.setStatus('current')
if mibBuilder.loadTexts: prioWrrPortTable.setDescription('Table for per port weighted round robin (WRR).')
prioWrrPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 12, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "prioWrrPortIfIndex"), (0, "ECS2100-28PP-MIB", "prioWrrPortTrafficClass"))
if mibBuilder.loadTexts: prioWrrPortEntry.setStatus('current')
if mibBuilder.loadTexts: prioWrrPortEntry.setDescription('Entry for per port weighted round robin (WRR).')
prioWrrPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 12, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prioWrrPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: prioWrrPortIfIndex.setDescription('The port interface of the prioWrrPortEntry. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
prioWrrPortTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioWrrPortTrafficClass.setReference('MIB.IETF|Q-BRIDGE-MIB.dot1dTrafficClass.')
if mibBuilder.loadTexts: prioWrrPortTrafficClass.setStatus('current')
if mibBuilder.loadTexts: prioWrrPortTrafficClass.setDescription('Traffic class for this entry, as defined in dot1dTrafficClass in the P-BRIDGE-MIB. The actual maximum depends on the hardware, and is equal to dot1dPortNumTrafficClasses-1.')
prioWrrPortWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 12, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioWrrPortWeight.setStatus('current')
if mibBuilder.loadTexts: prioWrrPortWeight.setDescription('Weight for this entry. Value of the object should be ignored when prioQueueMode is strictAndWrr(3), and prioWrrPortStrictStatus is enabled(1).')
prioWrrPortStrictStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 12, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioWrrPortStrictStatus.setStatus('current')
if mibBuilder.loadTexts: prioWrrPortStrictStatus.setDescription('This object is used when prioSchedModePort is strictAndWrr(4).')
prioSchedModePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 15), )
if mibBuilder.loadTexts: prioSchedModePortTable.setStatus('current')
if mibBuilder.loadTexts: prioSchedModePortTable.setDescription('Table for per port scheduling mode.')
prioSchedModePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 15, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "prioSchedModePortIndex"))
if mibBuilder.loadTexts: prioSchedModePortEntry.setStatus('current')
if mibBuilder.loadTexts: prioSchedModePortEntry.setDescription('Entry for per port scheduling mode.')
prioSchedModePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 15, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prioSchedModePortIndex.setStatus('current')
if mibBuilder.loadTexts: prioSchedModePortIndex.setDescription('The port interface of the prioSchedModePortEntry.')
prioSchedModePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 13, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("wrr", 1), ("strict", 2), ("strict-wrr", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioSchedModePort.setStatus('current')
if mibBuilder.loadTexts: prioSchedModePort.setDescription('The scheduling mode status of ethernet port. wrr(1),strict(2), strict-wrr(4)')
trapVar = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2))
trapIpFilterRejectMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("web", 1), ("snmp", 2), ("telnet", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapIpFilterRejectMode.setStatus('current')
if mibBuilder.loadTexts: trapIpFilterRejectMode.setDescription('This variable is for trap var binding, indicated the ipfilter reject mode. web(1), snmp(2), telnet(3).')
trapIpFilterRejectIp = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 7), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapIpFilterRejectIp.setStatus('current')
if mibBuilder.loadTexts: trapIpFilterRejectIp.setDescription('This variable is for trap var binding, indicating the IP address that rejected by the ipfilter.')
trapVarMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 10), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapVarMacAddr.setStatus('current')
if mibBuilder.loadTexts: trapVarMacAddr.setDescription('The MAC address.')
trapVarLoginUserName = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapVarLoginUserName.setStatus('current')
if mibBuilder.loadTexts: trapVarLoginUserName.setDescription('The name of the user who logs into the switch.')
trapVarSessionType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("web", 1), ("snmp", 2), ("telnet", 3), ("console", 4), ("ssh", 5), ("http", 6), ("https", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapVarSessionType.setStatus('current')
if mibBuilder.loadTexts: trapVarSessionType.setDescription('The method by which the user logs in to control the switch.')
trapVarLoginInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 15), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapVarLoginInetAddressType.setStatus('current')
if mibBuilder.loadTexts: trapVarLoginInetAddressType.setDescription('The address type of the address associated with this agent. Only IPv4 and IPv6 types are supported.')
trapVarLoginInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 16), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapVarLoginInetAddress.setStatus('current')
if mibBuilder.loadTexts: trapVarLoginInetAddress.setDescription('The IP address from which the user logs into the switch.')
trapIpFilterRejectInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 17), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapIpFilterRejectInetAddressType.setStatus('current')
if mibBuilder.loadTexts: trapIpFilterRejectInetAddressType.setDescription('This variable is for trap var binding, indicating the IP address that was rejected by the IP filter.')
trapIpFilterRejectInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 18), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapIpFilterRejectInetAddress.setStatus('current')
if mibBuilder.loadTexts: trapIpFilterRejectInetAddress.setDescription('This variable is for trap var binding, indicating the IP address that was rejected by the IP filter.')
trapAutoUpgradeResult = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("succeeded", 1), ("failed", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapAutoUpgradeResult.setStatus('current')
if mibBuilder.loadTexts: trapAutoUpgradeResult.setDescription('The parameter indicates which result triggers the trap.')
trapAutoUpgradeNewVer = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapAutoUpgradeNewVer.setStatus('current')
if mibBuilder.loadTexts: trapAutoUpgradeNewVer.setDescription('The parameter indicates new version which was upgraded to. When trapAutoUpgradeResult was failed(2), it would be null string.')
trapIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 30), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapIfIndex.setStatus('current')
if mibBuilder.loadTexts: trapIfIndex.setDescription('This variable is for trap var binding, indicating the index of an interface.')
trapVlanId = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 31), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapVlanId.setStatus('current')
if mibBuilder.loadTexts: trapVlanId.setDescription('This variable is for trap var binding, indicating the identifier of a VLAN.')
trapDhcpClientPortIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 62), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDhcpClientPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: trapDhcpClientPortIfIndex.setDescription('ifIndex for the port connected to DHCP rogue server.')
trapDhcpServerIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 63), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDhcpServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: trapDhcpServerIpAddress.setDescription('The IP address of the rogue server.')
trapSfpThresholdAlarmWarnIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 64), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSfpThresholdAlarmWarnIfIndex.setStatus('current')
if mibBuilder.loadTexts: trapSfpThresholdAlarmWarnIfIndex.setDescription('ifIndex for the port issued alarm/warning trap.')
trapSfpThresholdAlarmWarnType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 65), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("rxPowerHighAlarm", 1), ("rxPowerLowAlarm", 2), ("rxPowerHighWarning", 3), ("rxPowerLowWarning", 4), ("txPowerHighAlarm", 5), ("txPowerLowAlarm", 6), ("txPowerHighWarning", 7), ("txPowerLowWarning", 8), ("temperatureHighAlarm", 9), ("temperatureLowAlarm", 10), ("temperatureHighWarning", 11), ("temperatureLowWarning", 12), ("voltageHighAlarm", 13), ("voltageLowAlarm", 14), ("voltageHighWarning", 15), ("voltageLowWarning", 16), ("currentHighAlarm", 17), ("currentLowAlarm", 18), ("currentHighWarning", 19), ("currentLowWarning", 20), ("rxPowerAlarmWarnCease", 21), ("txPowerAlarmWarnCease", 22), ("temperatureAlarmWarnCease", 23), ("voltageAlarmWarnCease", 24), ("currentAlarmWarnCease", 25)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSfpThresholdAlarmWarnType.setStatus('current')
if mibBuilder.loadTexts: trapSfpThresholdAlarmWarnType.setDescription("SFP's alarm/warning type .")
trapUdldPortShutdownReason = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 66), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unidirectionalLink", 1), ("mismatchWithNeighbor", 2), ("transmitToReceiveLoop", 3), ("aggressiveModeFailure", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapUdldPortShutdownReason.setStatus('current')
if mibBuilder.loadTexts: trapUdldPortShutdownReason.setDescription('This variable is for trap var binding, indicated the reason for the UDLD port shutdown. unidirectionalLink(1): unidirectional link detected, mismatchWithNeighbor(2): mismatch with neighbor state reported. transmitToReceiveLoop(3): transmit-to-receive loop detected. aggressiveModeFailure(4): aggressive mode failure detected.')
trapDhcpServerMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 67), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDhcpServerMacAddress.setStatus('current')
if mibBuilder.loadTexts: trapDhcpServerMacAddress.setDescription('The MAC address of the rogue server.')
trapMacNotifyAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 14, 2, 68), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("add", 1), ("remove", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapMacNotifyAction.setStatus('current')
if mibBuilder.loadTexts: trapMacNotifyAction.setDescription('The parameter indicates which result triggers the trap.')
rateLimitMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1))
rateLimitPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2), )
if mibBuilder.loadTexts: rateLimitPortTable.setStatus('current')
if mibBuilder.loadTexts: rateLimitPortTable.setDescription('Table for rate limit of each port.')
rateLimitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "rlPortIndex"))
if mibBuilder.loadTexts: rateLimitPortEntry.setStatus('current')
if mibBuilder.loadTexts: rateLimitPortEntry.setDescription('Entry for rate limit of each port.')
rlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: rlPortIndex.setStatus('current')
if mibBuilder.loadTexts: rlPortIndex.setDescription('The port and the trunk (including trunk member) interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
rlPortInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputStatus.setStatus('current')
if mibBuilder.loadTexts: rlPortInputStatus.setDescription('Whether input rate limit is enabled for this port.')
rlPortOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2, 1, 7), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputStatus.setStatus('current')
if mibBuilder.loadTexts: rlPortOutputStatus.setDescription('Whether output rate limit is enabled for this port.')
rlPortInputLimitInKilo = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputLimitInKilo.setStatus('current')
if mibBuilder.loadTexts: rlPortInputLimitInKilo.setDescription('Value of the input rate limit. Its unit is kilobits per second. For a 100 Mbps port, the range is 64 to 100000. For a 1000 Mbps port, the range is 64 to 1000000.')
rlPortOutputLimitInKilo = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputLimitInKilo.setStatus('current')
if mibBuilder.loadTexts: rlPortOutputLimitInKilo.setDescription('Value of the output rate limit. Its unit is kilobits per second. For a 100 Mbps port, the range is 64 to 100000. For a 1000 Mbps port, the range is 64 to 1000000.')
rlPortLimitInKiloResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rlPortLimitInKiloResolution.setStatus('current')
if mibBuilder.loadTexts: rlPortLimitInKiloResolution.setDescription("Present the rate's resolution. Its unit is kilobits per second")
cosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3))
prioIfClassificationModeTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 2), )
if mibBuilder.loadTexts: prioIfClassificationModeTable.setStatus('current')
if mibBuilder.loadTexts: prioIfClassificationModeTable.setDescription('Table for setting the interface Qos mapping classification mode.')
prioIfClassificationModeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "prioIfClassificationModeIf"))
if mibBuilder.loadTexts: prioIfClassificationModeEntry.setStatus('current')
if mibBuilder.loadTexts: prioIfClassificationModeEntry.setDescription('Entry for setting the interface Qos mapping classification mode.')
prioIfClassificationModeIf = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prioIfClassificationModeIf.setStatus('current')
if mibBuilder.loadTexts: prioIfClassificationModeIf.setDescription('The port or trunk interface of the device. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
prioIfClassificationModeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("cos", 0), ("ipPrecedence", 1), ("dscp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioIfClassificationModeStatus.setStatus('current')
if mibBuilder.loadTexts: prioIfClassificationModeStatus.setDescription("The Qos mapping classification mode of the interface. cos mode means that the internal priority is mapped from priority field of packet's VLAN tag if a VLAN tag exists; IP precedence mode means that the internal priority is mapped from the IP precedence value of IP packets; DSCP mode means the internal priority is mapped from the dscp value of IP packets.")
prioCosToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 3), )
if mibBuilder.loadTexts: prioCosToDscpTable.setStatus('current')
if mibBuilder.loadTexts: prioCosToDscpTable.setDescription('Table for CoS/CFI to internal QoS label mapping.')
prioCosToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "prioCosToDscpIfValue"), (0, "ECS2100-28PP-MIB", "prioCosToDscpCosValue"), (0, "ECS2100-28PP-MIB", "prioCosToDscpCFIValue"))
if mibBuilder.loadTexts: prioCosToDscpEntry.setStatus('current')
if mibBuilder.loadTexts: prioCosToDscpEntry.setDescription('Entry for CoS/CFI to internal QoS label mapping.')
prioCosToDscpIfValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 3, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prioCosToDscpIfValue.setStatus('current')
if mibBuilder.loadTexts: prioCosToDscpIfValue.setDescription('The port or the trunk interface of the device. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
prioCosToDscpCosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioCosToDscpCosValue.setStatus('current')
if mibBuilder.loadTexts: prioCosToDscpCosValue.setDescription('The CoS value (0 to 7) mapped to an internal QoS label value which is composed of PHB (3 bits) and drop precedence (2 bits).')
prioCosToDscpCFIValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1)))
if mibBuilder.loadTexts: prioCosToDscpCFIValue.setStatus('current')
if mibBuilder.loadTexts: prioCosToDscpCFIValue.setDescription('The CFI value (0 or 1) mapped to an internal QoS label value which is composed of PHB (3 bits) and drop precedence (2 bits).')
prioCosToDscpPhbValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioCosToDscpPhbValue.setStatus('current')
if mibBuilder.loadTexts: prioCosToDscpPhbValue.setDescription('The PHB value of internal QoS label.')
prioDscpToDscpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 5), )
if mibBuilder.loadTexts: prioDscpToDscpTable.setStatus('current')
if mibBuilder.loadTexts: prioDscpToDscpTable.setDescription('Table for DSCP to internal QoS label mapping. This table setting will take effect only when the interface Qos mapping classification mode is set to DSCP mode.')
prioDscpToDscpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 5, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "prioDscpToDscpIfValue"), (0, "ECS2100-28PP-MIB", "prioDscpToDscpIngressDscpValue"))
if mibBuilder.loadTexts: prioDscpToDscpEntry.setStatus('current')
if mibBuilder.loadTexts: prioDscpToDscpEntry.setDescription('Entry for ingress DSCP to internal QoS label mapping.')
prioDscpToDscpIfValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: prioDscpToDscpIfValue.setStatus('current')
if mibBuilder.loadTexts: prioDscpToDscpIfValue.setDescription('The port or trunk interface of the device. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
prioDscpToDscpIngressDscpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: prioDscpToDscpIngressDscpValue.setStatus('current')
if mibBuilder.loadTexts: prioDscpToDscpIngressDscpValue.setDescription('The ingress DSCP value which will be mapped to internal QoS label value.')
prioDscpToDscpPhbValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 3, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioDscpToDscpPhbValue.setStatus('current')
if mibBuilder.loadTexts: prioDscpToDscpPhbValue.setDescription('The PHB value of internal QoS label.')
diffServMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4))
diffServPolicyMapTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 10), )
if mibBuilder.loadTexts: diffServPolicyMapTable.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapTable.setDescription('Table for policy map.')
diffServPolicyMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 10, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServPolicyMapIndex"))
if mibBuilder.loadTexts: diffServPolicyMapEntry.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapEntry.setDescription('Entry for policy map.')
diffServPolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: diffServPolicyMapIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapIndex.setDescription('An index that uniquely identifies an entry in this table.')
diffServPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapName.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapName.setDescription('The name of this entry.')
diffServPolicyMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 10, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapDescription.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapDescription.setDescription('The description of this entry.')
diffServPolicyMapElementIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServPolicyMapElementIndexList.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementIndexList.setDescription('The octet string containes the diffServPolicyMapElementEntry indexes. Two octets express one index and it is represented in network order. This index list indicates the diffServPolicyMapEntrys which belong to this entry.')
diffServPolicyMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapStatus.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapStatus.setDescription("This object is used to create a new row, or modify or delete an existing row, in this table. The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active');it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServPolicyMapAttachCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 11))
diffServPolicyMapAttachCtlIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 11, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlIndex.setDescription('Index for attachment control. Specifies the policy map as the target to relate with the policy map element. The policy map identified by a particular value of this index is associated with the same diffServPolicyMapEntry as identified by the same value of diffServPolicyMapIndex.')
diffServPolicyMapAttachCtlElementIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 11, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlElementIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlElementIndex.setDescription('Element Index for attachment control.Specifies the policy map element to relate with the policy map. The policy map element identified by a particular value of this index is associated with the same diffServPolicyMapElementEntry as identified by the same value of diffServPolicyMapElementIndex.')
diffServPolicyMapAttachCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("attach", 2), ("detach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlAction.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapAttachCtlAction.setDescription('Action for attachment control. When setting this object to attach(2) to begin the attaching operation, a particular policy map element is attached to a particular policy map. When setting this object to detach(3) to begin the not attached operation, a particular policy map element is not attached to a particular policy map. When the action is finshed or no action is taken, the value of this object is noAction(1). A particular policy map is specified in the diffServPolicyMapAttachCtlIndex. A particularpolicy map element is specified in the diffServPolicyMapAttachCtlElementIndex.')
diffServPolicyMapElementTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 12), )
if mibBuilder.loadTexts: diffServPolicyMapElementTable.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementTable.setDescription('Table for policy map element.')
diffServPolicyMapElementEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 12, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServPolicyMapElementIndex"))
if mibBuilder.loadTexts: diffServPolicyMapElementEntry.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementEntry.setDescription('Entry for policy map element.')
diffServPolicyMapElementIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: diffServPolicyMapElementIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementIndex.setDescription('An index that uniquely identifies an entry in this table.')
diffServPolicyMapElementClassMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementClassMapIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementClassMapIndex.setDescription('Specifies the class map binding to this entry. The class map identified by a particular value of this index is associated with the same diffServClassMapEntry as identified by the same value of diffServClassMapIndex.')
diffServPolicyMapElementMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 12, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementMeterIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementMeterIndex.setDescription('Specifies the meter binding to this entry. The meter identified by a particular value of this index is associated with the same diffServMeterEntry as identified by the same value of diffServMeterIndex. If this value is zero, no associated meter will be associated, as zero is not a valid meter index.')
diffServPolicyMapElementActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementActionIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementActionIndex.setDescription('Specifies the action binding to this entry. The action identified by a particular value of this index is associated with the same diffServActionEntry as identified by the same value of diffServActionIndex.')
diffServPolicyMapElementStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapElementStatus.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapElementStatus.setDescription("This object is used to create a new row, or modify or delete an existing row, in this table. The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServClassMapTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13), )
if mibBuilder.loadTexts: diffServClassMapTable.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapTable.setDescription('Table for class map.')
diffServClassMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServClassMapIndex"))
if mibBuilder.loadTexts: diffServClassMapEntry.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapEntry.setDescription('Entry for class map.')
diffServClassMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: diffServClassMapIndex.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapIndex.setDescription('An index that uniquely identifies an entry in this table.')
diffServClassMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapName.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapName.setDescription('The name of this entry.')
diffServClassMapDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapDescription.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapDescription.setDescription('The description of this entry.')
diffServClassMapMatchType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("matchAny", 1), ("matchAll", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapMatchType.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapMatchType.setDescription('The map match type of this entry.')
diffServClassMapElementIndexTypeList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServClassMapElementIndexTypeList.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapElementIndexTypeList.setDescription('The octet string containes the type of class map element indexes. Two octets which are represented in network order express one type of the class map element index in network order and it maps the index of differServClasssMapElementIndexList in order. When the type is macAce(1), the maping index of differServClasssMapElementIndexList is the diffServMacAceEntry. When the type is ipAce(2), the maping index of differServClasssMapElementIndexList is the diffServIpAceEntry. When the type is acl(3), the maping index of differServClasssMapElementIndexList is the diffServAclEntry. When the type is ipv6Ace(4), the maping index of differServClasssMapElementIndexList is the diffServIpv6AceEntry.')
diffServClassMapElementIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServClassMapElementIndexList.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapElementIndexList.setDescription('The octet string containes the class map element indexes. Two octets express one index and it is represented in network order. This index list indicates the particular class map elements which belong to this table. The class map element uses type to indicate diffServAclEntry, the diffServIpAceEntry or diffServMacAceEntry. The type is two octet specified in differServClasssMapElementIndexTypeList in order. When the type is macAce(1), the maping index of differServClasssMapElementIndexList is the diffServMacAceEntry. When the type is ipAce(2), the maping index of differServClasssMapElementIndexList is the diffServIpAceEntry. When the type is acl(3), the maping index of differServClasssMapElementIndexList is the diffServAclEntry. When type is ipv6Ace(4), the maping index of differServClasssMapElementIndexList is the diffServIpv6AceEntry.')
diffServClassMapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 13, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServClassMapStatus.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table.The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServClassMapAttachCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 14))
diffServClassMapAttachCtlIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 14, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlIndex.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapAttachCtlIndex.setDescription('Index for attachment control. Specifies the class map as the target to relate with class map elements. The class map identified by a particular value of this index is associated with the same diffServClassMapEntry as identified by the same value of diffServClassMapIndex.')
diffServClassMapAttachCtlElementIndexType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 14, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("macAce", 1), ("ipAce", 2), ("acl", 3), ("ipv6Ace", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlElementIndexType.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapAttachCtlElementIndexType.setDescription('Element Index for attachment control. Specifies the type of class map element to relate with the class map. When type is macAce(1), the index of diffServClassMapAttachCtlElementIndex is the index of diffServMacAceEntry. When the type is ipAce(2), the index of diffServClassMapAttachCtlElementIndex is the index of diffServIpAceEntry. When the type is acl(3), the index of diffServClassMapAttachCtlElementIndex is the index of diffServAclEntry. When type is ipv6Ace(4), the index of diffServClassMapAttachCtlElementIndex is the index of diffServIpv6AceEntry.')
diffServClassMapAttachCtlElementIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 14, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlElementIndex.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapAttachCtlElementIndex.setDescription('Element Index for attachment control. Specifies the class map element related with the class map. The class map element uses type to indicate diffServAclEntry, the diffServIpAceEntry or diffServMacAceEntry. The type is specified in diffServClassMapAttachCtlElementIndexType. When the type is macAce(1), the maping index of differServClasssMapElementIndexList is the diffServMacAceEntry. When the type is ipAce(2), the maping index of differServClasssMapElementIndexList is the diffServIpAceEntry. When the type is acl(3), the maping index of differServClasssMapElementIndexList is the diffServAclEntry. When type is ipv6Ace(4), the maping index of differServClasssMapElementIndexList is the diffServIpv6AceEntry.')
diffServClassMapAttachCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 14, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("attach", 2), ("detach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServClassMapAttachCtlAction.setStatus('current')
if mibBuilder.loadTexts: diffServClassMapAttachCtlAction.setDescription('Action for attachment control. When setting this object to attach(2) to begin the attaching operation, a particular class map element is attached to a particular class map. When setting this object to detach(3) to begin the not attached operation, then a particular class map element is not attached to a particular class map. When the action is finshed whether successfully or not, or no action is taken, the value of this object always is noAction(1). The value of a particular class map is specified in the AclAttachCtlTargetIndex. The class map element is specified by diffServClassMapAttachCtlElementIndexType and diffServClassMapAttachCtlElementIndex.')
diffServAclTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 15), )
if mibBuilder.loadTexts: diffServAclTable.setStatus('current')
if mibBuilder.loadTexts: diffServAclTable.setDescription('Table for ACL.')
diffServAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 15, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServAclIndex"))
if mibBuilder.loadTexts: diffServAclEntry.setStatus('current')
if mibBuilder.loadTexts: diffServAclEntry.setDescription('Entry for ACL.')
diffServAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: diffServAclIndex.setStatus('current')
if mibBuilder.loadTexts: diffServAclIndex.setDescription('An index that uniquely identifies an entry in the ACL table.')
diffServAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 15, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServAclName.setStatus('current')
if mibBuilder.loadTexts: diffServAclName.setDescription('The name of this entry.')
diffServAclType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 15, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("mac", 1), ("ipstandard", 2), ("ipextended", 3), ("ipv6standard", 4), ("ipv6extended", 5), ("arp", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServAclType.setStatus('current')
if mibBuilder.loadTexts: diffServAclType.setDescription('The type of this entry. When the value of ACL type is modified, then the ACEs in the diffServAclAceIndexList of this entry will be auto-removed, and this entry will be auto- unbound from the diffServPortTable and the diffServClassMapTable.')
diffServAclAceIndexList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 15, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAclAceIndexList.setStatus('current')
if mibBuilder.loadTexts: diffServAclAceIndexList.setDescription('The octet string containes the ACE indexes. Two octets express one index and it is represented in network order. This index list indicates the particular ACEs which belong to this table. The ACE uses type to indicate the diffServMacAceEntry, the diffServIpAceEntry, the diffServIpv6AceEntry or the diffServArpAceEntry. The type is specified in diffServAclType. When the type is mac(1), the index of diffServAclAceIndexList is the diffServMacAceEntry. When the type is ipstandard(2) or ipextended(3), the index of diffServAclAceIndexList is the diffServIpAceEntry. When the type is ipv6standard(4) or ipv6extended(5), the index of diffServAclAceIndexList is the diffServIpv6AceEntry. When the type is arp(6), the index of diffServAclAceIndexList is the diffServArpAceEntry.')
diffServAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 15, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServAclStatus.setStatus('current')
if mibBuilder.loadTexts: diffServAclStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServAclAttachCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 16))
diffServAclAttachCtlIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 16, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlIndex.setStatus('current')
if mibBuilder.loadTexts: diffServAclAttachCtlIndex.setDescription('Index for attachment control. Specifies the ACL as the target to relate with the IP ACE, the MAC ACE or IPv6 ACE. The ACL identified by a particular value of this index is associated with the same diffServAclEntry as identified by the same value of diffServAclIndex.')
diffServAclAttachCtlAceType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 16, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("macAce", 1), ("ipAce", 2), ("ipv6Ace", 3), ("arpAce", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlAceType.setStatus('current')
if mibBuilder.loadTexts: diffServAclAttachCtlAceType.setDescription('Type for attachment control. Specifies the type of diffServAclAttachCtlAceIndex to relate with the diffServAclAttachCtlIndex. When the type is macAce(1), the index of diffServAclAceIndexList is the diffServMacAceEntry. When the type is ipAce(2), the index of diffServAclAceIndexList is the diffServIpAceEntry. When the type is ipv6Ace(3), the index of diffServAclAceIndexList is the diffServIpv6AceEntry. When the type is arpAce(4), the index of diffServAclAceIndexList is the diffServArpAceEntry.')
diffServAclAttachCtlAceIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 16, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlAceIndex.setStatus('current')
if mibBuilder.loadTexts: diffServAclAttachCtlAceIndex.setDescription('Index for attachment control. Specifies the ACE to relate with the diffServAclAttachCtlIndex. When diffServAclAttachCtlAceType is macAce(1), the value of diffServAclAttachCtlIndex is the diffServMacAceEntry. When diffServAclAttachCtlAceType is ipAce(2), the value of diffServAclAttachCtlIndex is the diffServIpAceEntry. When diffServAclAttachCtlAceType is ipv6Ace(3), the value of diffServAclAttachCtlIndex is the diffServIpv6AceEntry. When diffServAclAttachCtlAceType is arpAce(4), the value of diffServAclAttachCtlIndex is the diffServArpAceEntry.')
diffServAclAttachCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 16, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("attach", 2), ("detach", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAclAttachCtlAction.setStatus('current')
if mibBuilder.loadTexts: diffServAclAttachCtlAction.setDescription('Action for attachment control. When setting this object to attach(2) to begin the attaching operation, a particular ACE is attached to a particular ACL. When setting this object to detach(3) to begin the not attached operation, then a particular ACE is not attached to a particular ACL. When the action is finshed whether successfully or not, or no action is taken, the value of this object always is noAction(1), The value of a particular ACL is specified in the diffServAclAttachCtlAceType and diffServAclAttachCtlAceIndex.')
diffServIpAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17), )
if mibBuilder.loadTexts: diffServIpAceTable.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceTable.setDescription('Table for IP ACE.')
diffServIpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServIpAceIndex"))
if mibBuilder.loadTexts: diffServIpAceEntry.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceEntry.setDescription('Entry for IP ACE.')
diffServIpAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: diffServIpAceIndex.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceIndex.setDescription('An index that uniquely identifies an entry in the IP ACE table.')
diffServIpAceType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("extended", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceType.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceType.setDescription('The specified IP ACE type. When the type of this entry is modified, then this entry will be auto-unbound from the diffServAclEntry and the not supporting field of this entry will be set 0.')
diffServIpAceAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceAccess.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceAccess.setDescription('Indicates the action to be taken if a packet matches this ACE.')
diffServIpAceSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceSourceIpAddr.setDescription("The specified source IP address. The packet's source address is AND-ed with the value of IpAceSourceIpAddrBitmask and then compared against the value of this object.")
diffServIpAceSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourceIpAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceSourceIpAddrBitmask.setDescription("The specified source IP address mask. The packet's source address is AND-ed with the value of IpAceSourceIpAddr and then compared against the value of this object.")
diffServIpAceDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceDestIpAddr.setDescription("The specified destination IP address. The packet's destination address is AND-ed with the value of diffServIpAceDestIpAddrBitmask and then compared against the value of this object. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).")
diffServIpAceDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestIpAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceDestIpAddrBitmask.setDescription('The specified destination IP address mask. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceProtocol.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceProtocol.setDescription("The protocol number field in the IP header used to indicate the higher layer protocol as specified in RFC 1700. A value of 0 matches every IP packet. The object=256 means 'any'. For example: 0 is IP, 1 is ICMP, 2 is IGMP, 4 is IP in IP encapsulation, 6 is TCP, 9 is IGRP, 17 is UDP, 47 is GRE, 50 is ESP, 51 is AH, 88 is IGRP, 89 is OSPF, 94 is KA9Q/NOS compatible IP over IP, 103 is PIMv2, 108 is PCP. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).")
diffServIpAcePrec = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAcePrec.setStatus('current')
if mibBuilder.loadTexts: diffServIpAcePrec.setDescription('Specifies the IP precedence value to match against. The value of this object is ignored whenever the value of diffServIpAcePrec object is 8. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDscp.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceDscp.setDescription('Specifies the DSCP value to match against. The value of this object is ignored whenever the value of diffServIpAcePrec object is 64. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceSourcePortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourcePortOp.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceSourcePortOp.setDescription("Indicates how a packet's source TCP/UDP port number is to be compared. noOperator(1), which is the default value, means no comparison is to be made with the source TCP/UDP port number. equal(2), which is used the diffServIpAceSourcePortBitmask and the diffServIpAceMinSourcePort to match against. range(3),which is used the diffServIpAceMinSourcePort and the diffServIpAceMaxSourcePort to match against. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).")
diffServIpAceMinSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceMinSourcePort.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceMinSourcePort.setDescription('If the diffServIpAceSourcePortOp is range(3), this indicates the lower bound of the TCP/UDP port number value range. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceSourcePortBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceSourcePortBitmask.setDescription('If the diffServIpAceSourcePortOp is equal(2), this indicates the bitmask of the diffServIpAceMinSourcePort. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceDestPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestPortOp.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceDestPortOp.setDescription("Indicates how a packet's destination TCP/UDP port number is to be compared. noOperator(1), which is the default value, means that no comparison is to be made with the destination TCP/UDP port number. equal(2), which is used the diffServIpAceSourcePortBitmask and the diffServIpAceMinDestPort to match against. range(3),which is used the diffServIpAceMinDestPort and the diffServIpAceMaxDestPort to match against. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).")
diffServIpAceMinDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceMinDestPort.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceMinDestPort.setDescription('If the diffServIpAceDestPortOp is range(3), this indicates the lower bound of the TCP/UDP port number value range. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceDestPortBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceDestPortBitmask.setDescription('If the diffServIpAceDestPortOp is equal(2), this indicates the bitmask of the diffServIpAceMinDestPort. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceControlCode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceControlCode.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceControlCode.setDescription('Indicates how the control flags of TCP packets are to be compared. diffServIpAceControlCode is AND-ed with diffServIpAceControlCodeBitmask. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceControlCodeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceControlCodeBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceControlCodeBitmask.setDescription('Indicates how the control flags of TCP packets are to be compared. It can be used to check multiple flags of the FIN, SYN, RST, PSH, ACK, URG by the sum of FIN=1, SYN=2, RST=4, PSH=8, ACK=16, URG=32. This object may not be modified if the associated diffServIpAceType object is equal to standard(1).')
diffServIpAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 17, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpAceStatus.setStatus('current')
if mibBuilder.loadTexts: diffServIpAceStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServMacAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18), )
if mibBuilder.loadTexts: diffServMacAceTable.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceTable.setDescription('Table for MAC ACE.')
diffServMacAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServMacAceIndex"))
if mibBuilder.loadTexts: diffServMacAceEntry.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceEntry.setDescription('Entry for MAC ACE.')
diffServMacAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: diffServMacAceIndex.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceIndex.setDescription('An index that uniquely identifies an entry in the MAC ACE table.')
diffServMacAceAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceAccess.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceAccess.setDescription('Indicates the action to be taken if a packet matches this ACE.')
diffServMacAcePktformat = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("any", 1), ("untagged-Eth2", 2), ("untagged802Dot3", 3), ("tagggedEth2", 4), ("tagged802Dot3", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAcePktformat.setStatus('current')
if mibBuilder.loadTexts: diffServMacAcePktformat.setDescription('Used to check the packet format of the packets. This object cannot be configured when the status of the entry, diffServMacAceStatus, is active(1).')
diffServMacAceSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceSourceMacAddr.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceSourceMacAddr.setDescription("Indicates the 48-bit source MAC address. The specified source MAC of the packet. The packet's source MAC address is AND-ed with the value of diffServMacAceSourceMacAddrBitmask and then compared against the value of this object.")
diffServMacAceSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceSourceMacAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceSourceMacAddrBitmask.setDescription('The specified source MAC address mask.')
diffServMacAceDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 6), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceDestMacAddr.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceDestMacAddr.setDescription("Indicates the 48-bit destination MAC address. The specified destination MAC of the packet. The packet's destination MAC address is AND-ed with the value of diffServMacAceDestMacAddrBitmask and then compared against the value of this object.")
diffServMacAceDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 7), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceDestMacAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceDestMacAddrBitmask.setDescription('The specified destination MAC address mask.')
diffServMacAceVidOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceVidOp.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceVidOp.setDescription("Indicates how a packet's VID is to be compared. This object cannot be configured when the status of the entry, diffServMacAceStatus, is active(1).")
diffServMacAceMinVid = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceMinVid.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceMinVid.setDescription('Indicates the lower bound of the VID value range if the diffServMacAceVidOp is range(3).')
diffServMacAceVidBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceVidBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceVidBitmask.setDescription('The bit mask of the VID. The default value is 0.')
diffServMacAceEtherTypeOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceEtherTypeOp.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceEtherTypeOp.setDescription("Indicates how a packet's ether type is to be compared.")
diffServMacAceEtherTypeBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceEtherTypeBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceEtherTypeBitmask.setDescription('The bit mask of Ether type. The default value is 0.')
diffServMacAceMinEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceMinEtherType.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceMinEtherType.setDescription('Indicates the lower bound of the ether type value range if the diffServMacAceEtherTypeOp is range(3).')
diffServMacAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceStatus.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServMacAceCosOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2), ("range", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceCosOp.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceCosOp.setDescription("Indicates how a packet's CoS is compared. If the object type of diffServMacAceCosOp is equal(2), diffServMacAceMinCos indicates the CoS value for comparing, and diffServMacAceCosBitmask is used as the bitmask of the CoS value. If the object type of diffServMacAceCosOp is range(3), diffServMacAceMinCos should be used as the lower bound of the CoS value.")
diffServMacAceCosBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceCosBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceCosBitmask.setDescription('Indicates the bitmask of the CoS value if the object type of diffServMacAceCosOp is equal(2). The default value is 0.')
diffServMacAceMinCos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 18, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMacAceMinCos.setStatus('current')
if mibBuilder.loadTexts: diffServMacAceMinCos.setDescription('If the object type of diffServMacAceCosOp is equal(2), diffServMacAceMinCos indicates the CoS value for comparing. If the object type of diffServMacAceCosOp is range(3), diffServMacAceMinCos indicates the lower bound of the CoS value.')
diffServActionTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19), )
if mibBuilder.loadTexts: diffServActionTable.setStatus('current')
if mibBuilder.loadTexts: diffServActionTable.setDescription('Table for action.')
diffServActionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServActionIndex"))
if mibBuilder.loadTexts: diffServActionEntry.setStatus('current')
if mibBuilder.loadTexts: diffServActionEntry.setDescription('Entry for action.')
diffServActionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: diffServActionIndex.setStatus('current')
if mibBuilder.loadTexts: diffServActionIndex.setDescription('An index that uniquely identifies an entry in the action table.')
diffServActionList = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19, 1, 2), Bits().clone(namedValues=NamedValues(("actionPktNewPri", 0), ("actionPktNewPhb", 9), ("actionPktNewDscp", 11)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionList.setStatus('current')
if mibBuilder.loadTexts: diffServActionList.setDescription('The bitmap value used to identify which action capabilities are enabled on the entry. The actionPktNewPri and actionPktNewDscp can not be enabled at the same time on the entry. The actionRedPktNewDscp and actionRedDrop can not be enabled at the same time on the entry.')
diffServActionPktNewPri = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionPktNewPri.setStatus('current')
if mibBuilder.loadTexts: diffServActionPktNewPri.setDescription('Specifies the new priority value for the packet when the action is satisfied. If the actionPktNewPri bit of the diffServActionList is not enabled, this object can not be set.')
diffServActionPktNewPhb = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionPktNewPhb.setStatus('current')
if mibBuilder.loadTexts: diffServActionPktNewPhb.setDescription('Specifies the inner priority value for the packet when the action is satisfied. If the actionPktNewPhb bit of the diffServActionList is not enabled, this object can not be set.')
diffServActionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionStatus.setStatus('current')
if mibBuilder.loadTexts: diffServActionStatus.setDescription("This object is used to create a new row, modify or delete an existing row in this table. The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServActionPktNewDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 19, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServActionPktNewDscp.setStatus('current')
if mibBuilder.loadTexts: diffServActionPktNewDscp.setDescription('Specifies the new DSCP value for the packet when the action is satisfied. If the actionPktNewDscp bit of the diffServActionList is not enabled, this object can not be set.')
diffServMeterTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 20), )
if mibBuilder.loadTexts: diffServMeterTable.setStatus('current')
if mibBuilder.loadTexts: diffServMeterTable.setDescription('Table for meter.')
diffServMeterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 20, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServActionIndex"))
if mibBuilder.loadTexts: diffServMeterEntry.setStatus('current')
if mibBuilder.loadTexts: diffServMeterEntry.setDescription('Entry for meter.')
diffServMeterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: diffServMeterIndex.setStatus('current')
if mibBuilder.loadTexts: diffServMeterIndex.setDescription('An entry that describes a single set of token bucket parameters.')
diffServMeterModel = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 8))).clone(namedValues=NamedValues(("default", 0), ("rate", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterModel.setStatus('current')
if mibBuilder.loadTexts: diffServMeterModel.setDescription('The Metering algorithm associated with the Token Bucket parameters. The zeroDotZero indicates this is unknown.')
diffServMeterRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 20, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterRate.setStatus('current')
if mibBuilder.loadTexts: diffServMeterRate.setDescription('The token-bucket rate, in kilobits per second (kbps).')
diffServMeterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 20, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServMeterStatus.setStatus('current')
if mibBuilder.loadTexts: diffServMeterStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServIpv6AceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21), )
if mibBuilder.loadTexts: diffServIpv6AceTable.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceTable.setDescription('Table for IPv6 ACE.')
diffServIpv6AceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServIpv6AceIndex"))
if mibBuilder.loadTexts: diffServIpv6AceEntry.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceEntry.setDescription('Entry fo IPv6 ACE.')
diffServIpv6AceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 512)))
if mibBuilder.loadTexts: diffServIpv6AceIndex.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceIndex.setDescription('An index that uniquely identifies an entry in the IPv6 table.')
diffServIpv6AceType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("extended", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceType.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceType.setDescription('The specified IP v6 ACE type. When the type of this entry is modified, then this entry will be auto-unbound from the diffServAclEntry and the not supporting field of this entry will be set 0.')
diffServIpv6AceAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceAccess.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceAccess.setDescription('Indicates the action to be taken if a packet matches this ACE.')
diffServIpv6AceSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceSourceIpAddr.setDescription('Specifies the source IPv6 address.')
diffServIpv6AceSourceIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceSourceIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceSourceIpAddrPrefixLen.setDescription('The length (in bits) associated with the source IPv6 address prefix of this entry.')
diffServIpv6AceDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceDestIpAddr.setDescription('Specifies the destination IPv6 address. This object may not be modified if the associated diffServIpv6AceType object is equal to standard(1).')
diffServIpv6AceDestIpAddrPrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceDestIpAddrPrefixLen.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceDestIpAddrPrefixLen.setDescription('The length (in bits) associated with the destination IPv6 address prefix of this entry. This object may not be modified if the associated diffServIpv6AceType object is equal to standard(1).')
diffServIpv6AceNextHeader = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceNextHeader.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceNextHeader.setDescription('Specifies the next header to match against. This object may not be modified if the associated diffServIpv6AceType object is equal to standard(1).')
diffServIpv6AceDscp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceDscp.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceDscp.setDescription('Specifies the DSCP value to match against. This object may not be modified if the associated diffServIpv6AceType object is equal to standard(1).')
diffServIpv6AceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceStatus.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has the value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has the value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has the value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServIpv6AceSourcePortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceSourcePortOp.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceSourcePortOp.setDescription("Indicates how a packet's source TCP/UDP port number is to be compared. noOperator(1), which is the default value, means that no comparison is to be made with the source TCP/UDP port number. equal(2), which uses the diffServIpv6AceSourcePort and diffServIpv6AceSourcePortBitmask to match against. This object may not be modified if the associated diffServIpv6AceType object is equal to standard(1).")
diffServIpv6AceSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: diffServIpv6AceSourcePort.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceSourcePort.setDescription('If the diffServIpv6AceSourcePortOp is equal(2), this indicates the TCP/UDP port number value.')
diffServIpv6AceSourcePortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceSourcePortBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceSourcePortBitmask.setDescription('If the diffServIpv6AceSourcePortOp is equal(2), this indicates the bitmask of the diffServIpv6AceSourcePort.')
diffServIpv6AceDestPortOp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOperator", 1), ("equal", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceDestPortOp.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceDestPortOp.setDescription("Indicates how a packet's destination TCP/UDP port number is to be compared. noOperator(1), which is the default value, means that no comparison is to be made with the destination TCP/UDP port number. equal(2), which uses the diffServIpv6AceDestPort and diffServIpv6AceDestPortBitmask to match against. This object may not be modified if the associated diffServIpv6AceType object is equal to standard(1).")
diffServIpv6AceDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceDestPort.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceDestPort.setDescription('If the diffServIpv6AceDestPortOp is equal(2), this indicates the TCP/UDP port number value.')
diffServIpv6AceDestPortBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 21, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServIpv6AceDestPortBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServIpv6AceDestPortBitmask.setDescription('If the diffServIpv6AceDestPortOp is equal(2), this indicates the bitmask of the diffServIpv6AceDestPort.')
diffServArpAceTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23), )
if mibBuilder.loadTexts: diffServArpAceTable.setStatus('current')
if mibBuilder.loadTexts: diffServArpAceTable.setDescription('The conceptual table of all of diffServArpAceEntry.')
diffServArpAceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServArpAceIndex"))
if mibBuilder.loadTexts: diffServArpAceEntry.setStatus('current')
if mibBuilder.loadTexts: diffServArpAceEntry.setDescription('The conceptual row for diffServArpAceTable.')
diffServArpAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)))
if mibBuilder.loadTexts: diffServArpAceIndex.setStatus('current')
if mibBuilder.loadTexts: diffServArpAceIndex.setDescription('The unique index of an ACE within an ACL.')
diffServArpAceAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceAction.setStatus('current')
if mibBuilder.loadTexts: diffServArpAceAction.setDescription('Indicates the action to be taken if a packet matches this ACE. This object cannot not be configured when the status of the entry, diffServArpAceStatus, is active(1).')
diffServArpAcePktType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("request", 1), ("response", 2), ("both", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAcePktType.setStatus('current')
if mibBuilder.loadTexts: diffServArpAcePktType.setDescription('Indicates the packet type to be taken if a packet matches this ACE. This object can not be configured when the status of the entry, diffServArpAceStatus, is active(1).')
diffServArpAceSourceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceSourceIpAddr.setStatus('current')
if mibBuilder.loadTexts: diffServArpAceSourceIpAddr.setDescription("The specified source ARP address. The packet's source address is AND'ed with the value of diffServArpAceSourceIpAddrBitmask and then compared against the value of this object. This object cannot be configured when the status of the entry, diffServArpAceStatus, is active(1).")
diffServArpAceSourceIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceSourceIpAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServArpAceSourceIpAddrBitmask.setDescription("The specified source ARP address mask. The packet's destination address is AND'ed with the value of diffServArpAceSourceIpAddr and then compared against the value of this object.")
diffServArpAceDestIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceDestIpAddr.setStatus('current')
if mibBuilder.loadTexts: diffServArpAceDestIpAddr.setDescription("The specified destination IP address. The packet's destination address is AND'ed with the value of diffServArpAceDestIpAddrBitmask and then compared against the value of this object.")
diffServArpAceDestIpAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceDestIpAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServArpAceDestIpAddrBitmask.setDescription('The specified destination IP address mask.')
diffServArpAceSourceMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceSourceMacAddr.setStatus('current')
if mibBuilder.loadTexts: diffServArpAceSourceMacAddr.setDescription("Indicates the 48-bit destination MAC address. The specified source MAC of the packet. The packet's source MAC address is AND'ed with the value of aceArpSourceMacAddrBitmask and then compared against the value of this object. This object cannot be configured when the status of the entry, diffServArpAceStatus, is active(1).")
diffServArpAceSourceMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceSourceMacAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServArpAceSourceMacAddrBitmask.setDescription('The specified source MAC address mask. This object cannot be configured when the status of the entry, diffServArpAceStatus, is active(1).')
diffServArpAceDestMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceDestMacAddr.setStatus('current')
if mibBuilder.loadTexts: diffServArpAceDestMacAddr.setDescription("Indicates the 48-bit destination MAC address. The specified destination MAC of the packet. The packet's destination MAC address is AND'ed with the value of aceArpDestMacAddrBitmask and then compared against the value of this object. This object cannot be configured when the status of the entry, diffServArpAceStatus, is active(1).")
diffServArpAceDestMacAddrBitmask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceDestMacAddrBitmask.setStatus('current')
if mibBuilder.loadTexts: diffServArpAceDestMacAddrBitmask.setDescription('The specified destination MAC address mask. This object cannot be configured when the status of the entry, diffServArpAceStatus, is active(1).')
diffServArpAceLogStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 12), EnabledStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceLogStatus.setStatus('current')
if mibBuilder.loadTexts: diffServArpAceLogStatus.setDescription('Indicates whether to log messages against the packets. This object cannot be configured when the status of the entry, diffServArpAceStatus, is active(1).')
diffServArpAceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 23, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServArpAceStatus.setStatus('current')
if mibBuilder.loadTexts: diffServArpAceStatus.setDescription("The status of this conceptual row entry. This object isused to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB.")
diffServArpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 24), )
if mibBuilder.loadTexts: diffServArpTable.setStatus('current')
if mibBuilder.loadTexts: diffServArpTable.setDescription('The conceptual table of all of diffServArpEntry.')
diffServArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 24, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServArpAclName"))
if mibBuilder.loadTexts: diffServArpEntry.setStatus('current')
if mibBuilder.loadTexts: diffServArpEntry.setDescription('The conceptual row for diffServArpTable.')
diffServArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 24, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServArpAclName.setStatus('current')
if mibBuilder.loadTexts: diffServArpAclName.setDescription('The name of an ACL. Within a feature, a unique name is used to identify the list to which the entry belongs in the device.')
diffServAclHwCounterTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 26), )
if mibBuilder.loadTexts: diffServAclHwCounterTable.setStatus('current')
if mibBuilder.loadTexts: diffServAclHwCounterTable.setDescription('Table for differentiated services hardware counter on each port.')
diffServAclHwCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 26, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServAclHwCounterIfIndex"), (0, "ECS2100-28PP-MIB", "diffServAclHwCounterDirection"), (0, "ECS2100-28PP-MIB", "diffServAclHwCounterAclIndex"), (0, "ECS2100-28PP-MIB", "diffServAclHwCounterAceIndex"))
if mibBuilder.loadTexts: diffServAclHwCounterEntry.setStatus('current')
if mibBuilder.loadTexts: diffServAclHwCounterEntry.setDescription('Entry for differentiated services hardware counter on each port.')
diffServAclHwCounterIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 26, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAclHwCounterIfIndex.setStatus('current')
if mibBuilder.loadTexts: diffServAclHwCounterIfIndex.setDescription('This object is the interface index of diffServPortEntry. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
diffServAclHwCounterDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 26, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ingress", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAclHwCounterDirection.setStatus('current')
if mibBuilder.loadTexts: diffServAclHwCounterDirection.setDescription('Indicates a particular direction of traffic.')
diffServAclHwCounterAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 26, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAclHwCounterAclIndex.setStatus('current')
if mibBuilder.loadTexts: diffServAclHwCounterAclIndex.setDescription('An index that uniquely identifies an entry in the ACL table.')
diffServAclHwCounterAceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 26, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAclHwCounterAceIndex.setStatus('current')
if mibBuilder.loadTexts: diffServAclHwCounterAceIndex.setDescription('An index that uniquely identifies an entry of an ACL. This entry might be a compressed ACE (which index is bigger than SYS_ADPT_MAX_NBRS_OF_ACE_OF_SYSTEM) with multiple user configured ACEs, and the index of compressed ACE will not show in ACE table.')
diffServAclHwCounterAceHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 26, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServAclHwCounterAceHitCount.setStatus('current')
if mibBuilder.loadTexts: diffServAclHwCounterAceHitCount.setDescription('Specifies the hardware counter of an ACE entry.')
diffServPolicyMapPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 27), )
if mibBuilder.loadTexts: diffServPolicyMapPortTable.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapPortTable.setDescription('Table for policy map of each port.')
diffServPolicyMapPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 27, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServPolicyMapPortIfIndex"), (0, "ECS2100-28PP-MIB", "diffServPolicyMapPortDirection"))
if mibBuilder.loadTexts: diffServPolicyMapPortEntry.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapPortEntry.setDescription('Entry for diffServPolicyMapPortTable.')
diffServPolicyMapPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 27, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: diffServPolicyMapPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapPortIfIndex.setDescription('This object is the interface index of DiffServPolicyMapPortEntry. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
diffServPolicyMapPortDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 27, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ingress", 1))))
if mibBuilder.loadTexts: diffServPolicyMapPortDirection.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapPortDirection.setDescription('Indicates this policy map effect to which direction of traffic.')
diffServPolicyMapPortPolicyMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 27, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServPolicyMapPortPolicyMapIndex.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapPortPolicyMapIndex.setDescription('Specifies the policy map index binded to the interface. The policy map identified by a particular value of this index is associated with the same DiffServPolicyMapEntry as identified by the same value of diffServPolicyMapIndex.')
diffServPolicyMapPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 27, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServPolicyMapPortStatus.setStatus('current')
if mibBuilder.loadTexts: diffServPolicyMapPortStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table.The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB. ")
diffServAccessGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28), )
if mibBuilder.loadTexts: diffServAccessGroupTable.setStatus('current')
if mibBuilder.loadTexts: diffServAccessGroupTable.setDescription('Table for specifies access group for ACL on each port.')
diffServAccessGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServAccessGroupIfIndex"), (0, "ECS2100-28PP-MIB", "diffServAccessGroupDirection"), (0, "ECS2100-28PP-MIB", "diffServAccessGroupType"))
if mibBuilder.loadTexts: diffServAccessGroupEntry.setStatus('current')
if mibBuilder.loadTexts: diffServAccessGroupEntry.setDescription('Entry for diffServAccessGroupTable.')
diffServAccessGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: diffServAccessGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: diffServAccessGroupIfIndex.setDescription('This object is the interface index of diffServAccessGroupEntry. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB. If support global ACL, using the specific ifindex(65535).')
diffServAccessGroupDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("ingress", 1))))
if mibBuilder.loadTexts: diffServAccessGroupDirection.setStatus('current')
if mibBuilder.loadTexts: diffServAccessGroupDirection.setDescription('Indicates this access group effect to which direction of traffic.')
diffServAccessGroupType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mac", 1), ("ip", 2), ("ipv6", 3))))
if mibBuilder.loadTexts: diffServAccessGroupType.setStatus('current')
if mibBuilder.loadTexts: diffServAccessGroupType.setDescription('Specifies the access group type, only support bind one ACL per type on a port.')
diffServAccessGroupAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAccessGroupAclIndex.setStatus('current')
if mibBuilder.loadTexts: diffServAccessGroupAclIndex.setDescription('Specifies the ACL index apply to this access group. The index uniquely identifies an entry in diffServAclTable.')
diffServAccessGroupTimeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAccessGroupTimeRangeName.setStatus('current')
if mibBuilder.loadTexts: diffServAccessGroupTimeRangeName.setDescription('The name of the time range entry bound to the access group. This object should be equal to one of the timeRangeName objects in timeRangeTable.')
diffServAccessGroupCounterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: diffServAccessGroupCounterStatus.setStatus('current')
if mibBuilder.loadTexts: diffServAccessGroupCounterStatus.setDescription('The acl counter enable status of this access group.')
diffServAccessGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 28, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: diffServAccessGroupStatus.setStatus('current')
if mibBuilder.loadTexts: diffServAccessGroupStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table.The status column has six defined values: The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device (see NOTE below); - 'notReady', which indicates that the conceptual row exists in the agent, but is missing information necessary in order to be available for use by the managed device; - 'createAndGo', which is supplied by a management station wishing to create a new instance of a conceptual row and to have its status automatically set to active, making it available for use by the managed device; - 'createAndWait', which is supplied by a management station wishing to create a new instance of a conceptual row (but not make it available for use by the managed device); and, - 'destroy', which is supplied by a management station wishing to delete all of the instances associated with an existing conceptual row. Whereas five of the six values (all except 'notReady') may be specified in a management protocol set operation, only three values will be returned in response to a management protocol retrieval operation: 'notReady', 'notInService' or 'active'. That is, when queried, an existing conceptual row has only three states: it is either available for use by the managed device (the status column has value 'active'); it is not available for use by the managed device, though the agent has sufficient information to make it so (the status column has value 'notInService'); or, it is not available for use by the managed device, and an attempt to make it so would fail because the agent has insufficient information (the state column has value 'notReady'). For a detailed description of this object, please refer to SNMPv2-TC MIB. ")
diffServTcamTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29), )
if mibBuilder.loadTexts: diffServTcamTable.setStatus('current')
if mibBuilder.loadTexts: diffServTcamTable.setDescription('The conceptual table of all of DiffServTcamEntry.')
diffServTcamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "diffServTcamUnit"), (0, "ECS2100-28PP-MIB", "diffServTcamDevice"), (0, "ECS2100-28PP-MIB", "diffServTcamPool"))
if mibBuilder.loadTexts: diffServTcamEntry.setStatus('current')
if mibBuilder.loadTexts: diffServTcamEntry.setDescription('The conceptual row for diffServTcamTable.')
diffServTcamUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: diffServTcamUnit.setStatus('current')
if mibBuilder.loadTexts: diffServTcamUnit.setDescription('This object identifies the switch within the system for which this entry contains information.')
diffServTcamDevice = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1, 2), Integer32())
if mibBuilder.loadTexts: diffServTcamDevice.setStatus('current')
if mibBuilder.loadTexts: diffServTcamDevice.setDescription('The device id of the specified unit.')
diffServTcamPool = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1, 3), Integer32())
if mibBuilder.loadTexts: diffServTcamPool.setStatus('current')
if mibBuilder.loadTexts: diffServTcamPool.setDescription('The TCAM pool index of the specified unit and device.')
diffServTcamPoolCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1, 4), Bits().clone(namedValues=NamedValues(("macAcl", 0), ("ipAcl", 1), ("ipv6StdAcl", 2), ("ipv6ExtAcl", 3), ("macDiffServ", 4), ("ipDiffServ", 5), ("ipv6StdDiffServ", 6), ("ipv6ExtDiffServ", 7), ("egressMacAcl", 8), ("egressIpAcl", 9), ("egressIpv6StdAcl", 10), ("egressIpv6ExtAcl", 11), ("egressMacDiffServ", 12), ("egressIpDiffServ", 13), ("egressIpv6StdDiffServ", 14), ("egressIpv6ExtDiffServ", 15), ("webAuth", 16), ("ipSourceGuard", 17), ("ipv6SourceGuard", 18), ("cpuInterface", 19), ("rateLimit", 20), ("linkLocal", 21), ("reserved", 22)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServTcamPoolCapability.setStatus('current')
if mibBuilder.loadTexts: diffServTcamPoolCapability.setDescription('The bitmap value used to identify which functions supported on this pool.')
diffServTcamTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServTcamTotal.setStatus('current')
if mibBuilder.loadTexts: diffServTcamTotal.setDescription('The total number of TCAM pool entry.')
diffServTcamFree = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServTcamFree.setStatus('current')
if mibBuilder.loadTexts: diffServTcamFree.setDescription('The free number of TCAM pool entry.')
diffServTcamUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 16, 4, 29, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: diffServTcamUsed.setStatus('current')
if mibBuilder.loadTexts: diffServTcamUsed.setDescription('The used number of TCAM pool entry.')
privateVlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1))
portSecurityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2))
radiusMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4))
tacacsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5))
sshMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6))
ipFilterMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9))
userAuthMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10))
dot1xMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 11))
aaaMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12))
networkAccessMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13))
dosMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16))
privateVlanStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateVlanStatus.setStatus('current')
if mibBuilder.loadTexts: privateVlanStatus.setDescription('This controls whether private VLAN is enabled.')
privateVlanUplinkPorts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateVlanUplinkPorts.setStatus('current')
if mibBuilder.loadTexts: privateVlanUplinkPorts.setDescription('This is the list of uplink ports for private VLAN. They should not overlap with privateVlanDownlinkPorts. 0 will be displayed if the privateVlanStatus is disabled. You must enable the privateVlanStatus before setting this variable.')
privateVlanDownlinkPorts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateVlanDownlinkPorts.setStatus('current')
if mibBuilder.loadTexts: privateVlanDownlinkPorts.setDescription('This is the list of downlink ports for private VLAN. They should not overlap with privateVlanUplinkPorts. Multiple port setting is permitted. 0 will be displayed if the privateVlanStatus is disabled. You must enable the privateVlanStatus before setting this variable.')
privateVlanVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 4), )
if mibBuilder.loadTexts: privateVlanVlanTable.setStatus('current')
if mibBuilder.loadTexts: privateVlanVlanTable.setDescription('A table containing private VLAN information on the VLANs which currently exist.')
privateVlanVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "privateVlanVlanIndex"))
if mibBuilder.loadTexts: privateVlanVlanEntry.setStatus('current')
if mibBuilder.loadTexts: privateVlanVlanEntry.setDescription('A conceptual row containing the private VLAN information on the VLANs for a particular management domain.')
privateVlanVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094)))
if mibBuilder.loadTexts: privateVlanVlanIndex.setStatus('current')
if mibBuilder.loadTexts: privateVlanVlanIndex.setDescription('The VLAN ID of this private VLAN.')
privateVlanVlanType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("primary", 2), ("isolated", 3), ("community", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: privateVlanVlanType.setStatus('current')
if mibBuilder.loadTexts: privateVlanVlanType.setDescription("The VLAN type as defined for Private VLAN feature. Set the value to invalid(1) to destroy an entry. Set other values to create an entry. If an index already exists, set others to modifiy it. Note that a VLAN's private VLAN type cannot be changed once it has any port members.")
privateVlanAssoicatedPrimaryVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: privateVlanAssoicatedPrimaryVlan.setStatus('current')
if mibBuilder.loadTexts: privateVlanAssoicatedPrimaryVlan.setDescription('The VLAN ID of the associated primary VLAN used for the private VLAN feature if privateVlanVlanType has the value of isolated(3), community(4). If privateVlanVlanType has the value of primary(2), then this object has the value of 0. Note that one isolated VLAN can only be associated with one unique primary VLAN. One primary VLAN can only be associated with one isolated VLAN. One primary VLAN can be associated with multiple community VLANs; one community VLAN can only be associated with one unique primary VLAN.')
privateVlanPrivatePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 5), )
if mibBuilder.loadTexts: privateVlanPrivatePortTable.setStatus('current')
if mibBuilder.loadTexts: privateVlanPrivatePortTable.setDescription('A table containing information on the configuration of secondary VLANs on the device ports.')
privateVlanPrivatePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 5, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "privateVlanPrivatePortIfIndex"))
if mibBuilder.loadTexts: privateVlanPrivatePortEntry.setStatus('current')
if mibBuilder.loadTexts: privateVlanPrivatePortEntry.setDescription('A conceptual row containing information of the configuration of secondary VLANs for each port. An entry is created by the managed system for each interface which can be configured as a private port for Private VLAN feature.')
privateVlanPrivatePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: privateVlanPrivatePortIfIndex.setStatus('current')
if mibBuilder.loadTexts: privateVlanPrivatePortIfIndex.setDescription('This is defined as the ifIndex.')
privateVlanPrivatePortSecondaryVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateVlanPrivatePortSecondaryVlan.setStatus('current')
if mibBuilder.loadTexts: privateVlanPrivatePortSecondaryVlan.setDescription('The VLAN ID of the secondary VLAN configured on this private port. A private port is a port that allows ingress traffic of the secondary VLAN as well as egress traffic of its associated primary VLAN, but blocks the egress traffic of the isolated VLAN while allowing the egress traffic of the community or twoWayCommunity VLAN depending on the type of the secondary VLAN. Note that a port can join a secondary VLAN only after this secondary VLAN has been associated with a primary VLAN, i.e., the cpvlanVlanAssociatedPrimaryVlan has a non-zero value. The default value of 0 for this object means this port has not yet joined a secondary VLAN.')
privateVlanPromPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6), )
if mibBuilder.loadTexts: privateVlanPromPortTable.setStatus('current')
if mibBuilder.loadTexts: privateVlanPromPortTable.setDescription('A table containing secondary VLAN to primary VLAN remapping information on ports of the device.')
privateVlanPromPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "privateVlanPromPortIfIndex"))
if mibBuilder.loadTexts: privateVlanPromPortEntry.setStatus('current')
if mibBuilder.loadTexts: privateVlanPromPortEntry.setDescription('A conceptual row containing secondary VLAN to primary VLAN remapping information for each port. An entry is created by the managed system for each interface which can be configured as a promiscuous port for the private VLAN feature.')
privateVlanPromPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: privateVlanPromPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: privateVlanPromPortIfIndex.setDescription('This is defined as ifIndex.')
privateVlanPromPortPrimaryVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateVlanPromPortPrimaryVlanId.setStatus('current')
if mibBuilder.loadTexts: privateVlanPromPortPrimaryVlanId.setDescription('The primary VLAN ID of the promiscous port.')
privateVlanPromPortSecondaryRemap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: privateVlanPromPortSecondaryRemap.setStatus('current')
if mibBuilder.loadTexts: privateVlanPromPortSecondaryRemap.setDescription("A string of octets containing one bit per VLAN in the management domain on this port. The first octet corresponds to VLANs with VlanIndexOrZero values of 0 through 7; the second octet to VLANs 8 through 15; etc. The most significant bit of each octet corresponds to the lowest value VlanIndexOrZero in that octet. Note that if the length of this string is less than 128 octets, any 'missing' octets are assumed to contain the value zero. An NMS may omit any zero-valued octets from the end of this string in order to reduce SetPDU size, and the agent may also omit zero-valued trailing octets, to reduce the size of GetResponse PDUs.")
privateVlanPromPortSecondaryRemap2k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: privateVlanPromPortSecondaryRemap2k.setStatus('current')
if mibBuilder.loadTexts: privateVlanPromPortSecondaryRemap2k.setDescription("A string of octets containing one bit per VLAN for VLANs with VlanIndexOrZero values of 1024 through 2047 in the management domain on this port. The first octet corresponds to VLANs with VlanIndexOrZero values of 1024 through 1031; the second octet to VLANs 1032 through 1039; etc. The most significant bit of each octet corresponds to the lowest value VlanIndexOrZero in that octet. Note that if the length of this string is less than 128 octets, any 'missing' octets are assumed to contain the value zero. An NMS may omit any zero-valued octets from the end of this string in order to reduce SetPDU size, and the agent may also omit zero-valued trailing octets, to reduce the size of GetResponse PDUs. This object is only instantiated on devices which support the range of VlanIndexOrZero up to 4095.")
privateVlanPromPortSecondaryRemap3k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: privateVlanPromPortSecondaryRemap3k.setStatus('current')
if mibBuilder.loadTexts: privateVlanPromPortSecondaryRemap3k.setDescription("A string of octets containing one bit per VLAN for VLANs with VlanIndexOrZero values of 2048 through 3071 in the management domain on this port. The first octet corresponds to VLANs with VlanIndexOrZero values of 2048 through 2055; the second octet to VLANs 2056 through 2063; etc. The most significant bit of each octet corresponds to the lowest value VlanIndexOrZero in that octet. Note that if the length of this string is less than 128 octets, any 'missing' octets are assumed to contain the value zero. An NMS may omit any zero-valued octets from the end of this string in order to reduce SetPDU size, and the agent may also omit zero-valued trailing octets, to reduce the size of GetResponse PDUs. This object is only instantiated on devices which support the range of VlanIndexOrZero up to 4095.")
privateVlanPromPortSecondaryRemap4k = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: privateVlanPromPortSecondaryRemap4k.setStatus('current')
if mibBuilder.loadTexts: privateVlanPromPortSecondaryRemap4k.setDescription("A string of octets containing one bit per VLAN for VLANs with VlanIndexOrZero values of 3072 through 4095 in the management domain on this port. The first octet corresponds to VLANs with VlanIndexOrZero values of 3072 through 3079; the second octet to VLANs 3080 through 3087; etc. The most significant bit of each octet corresponds to the lowest value VlanIndexOrZero in that octet. Note that if the length of this string is less than 128 octets, any 'missing' octets are assumed to contain the value zero. An NMS may omit any zero-valued octets from the end of this string in order to reduce SetPDU size, and the agent may also omit zero-valued trailing octets, to reduce the size of GetResponse PDUs. This object is only instantiated on devices which support the range of VlanIndexOrZero up to 4095.")
privateVlanSessionTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 8), )
if mibBuilder.loadTexts: privateVlanSessionTable.setStatus('current')
if mibBuilder.loadTexts: privateVlanSessionTable.setDescription('Contains the settings for private VLAN Session.')
privateVlanSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 8, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "privateVlanSessionId"))
if mibBuilder.loadTexts: privateVlanSessionEntry.setStatus('current')
if mibBuilder.loadTexts: privateVlanSessionEntry.setDescription('A conceptual row in the privateVlanSession table.')
privateVlanSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: privateVlanSessionId.setStatus('current')
if mibBuilder.loadTexts: privateVlanSessionId.setDescription('The session ID that may specifiy certain entry in the table which contains private VLAN session information.')
privateVlanSessionUplinkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 8, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: privateVlanSessionUplinkPorts.setStatus('current')
if mibBuilder.loadTexts: privateVlanSessionUplinkPorts.setDescription('This is the list of uplink ports for a session of private VLAN. They should not overlap with the privateVlanSessionPortDownlink of the same session, and they also should not overlap with the privateVlanSessionPortUplink and the privateVlanSessionPortDownlink of other session.')
privateVlanSessionDownlinkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 8, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: privateVlanSessionDownlinkPorts.setStatus('current')
if mibBuilder.loadTexts: privateVlanSessionDownlinkPorts.setDescription('This is the list of downlink ports for a session of private VLAN. They should not overlap with the privateVlanSessionPortUplink of the same session, and they also should not overlap with the privateVlanSessionPortUplink and the privateVlanSessionPortDownlink of other session.')
privateVlanSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 8, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: privateVlanSessionStatus.setStatus('current')
if mibBuilder.loadTexts: privateVlanSessionStatus.setDescription('Set this to valid(1) to create an entry. Sets this to invalid(2) to destroy an entry.')
privateVlanUplinkToUplink = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("blocking", 1), ("forwarding", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: privateVlanUplinkToUplink.setStatus('current')
if mibBuilder.loadTexts: privateVlanUplinkToUplink.setDescription('Sets this to blocking(2) to deny the traffic of uplink ports between different sessions. Set this to forwarding(1) to allow the traffic of uplink ports between different sessions.')
portSecPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 1), )
if mibBuilder.loadTexts: portSecPortTable.setStatus('current')
if mibBuilder.loadTexts: portSecPortTable.setDescription('The port security(MAC binding) Table.')
portSecPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "portSecPortIndex"))
if mibBuilder.loadTexts: portSecPortEntry.setStatus('current')
if mibBuilder.loadTexts: portSecPortEntry.setDescription('The entry of portSecPortTable.')
portSecPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: portSecPortIndex.setStatus('current')
if mibBuilder.loadTexts: portSecPortIndex.setDescription('The port and the trunk (excluding trunk members) interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
portSecPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecPortStatus.setStatus('current')
if mibBuilder.loadTexts: portSecPortStatus.setDescription('Set enabled(1) to enable port security and set disabled(2) to disable port security.')
portSecAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("trap", 2), ("shutdown", 3), ("trapAndShutdown", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecAction.setStatus('current')
if mibBuilder.loadTexts: portSecAction.setDescription('The corresponding actions that will take place when a port is under intrusion, when this variable is set to none(1), no action will be performed, when this variable is set to trap(2), a swPortSecurityTrap trap will be sent, when this variable is set to shutdown(3), the port will shutdown, when this variable is set to trapAndShutdown(4), a swPortSecurityTrap will be sent and the port will shutdown.')
portSecMaxMacCount = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMaxMacCount.setStatus('current')
if mibBuilder.loadTexts: portSecMaxMacCount.setDescription('The maximun number of MAC addresses that will be learned and locked. When we change the value of this variable, if the portSecPortStatus is enabled, we will discard all secure MAC and begin to learn again, until the number of MAC has reached this value, and only the secure MAC addresses can enter this port. If the portSecPortStatus is disabled, we will begin to learn the MAC, and auto enabled the portSecPortStatus when the MAC has reached this value.')
portSecMacAsPermanentMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 6))
portSecMacAsPermanentPortIndex = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMacAsPermanentPortIndex.setStatus('current')
if mibBuilder.loadTexts: portSecMacAsPermanentPortIndex.setDescription("The port and the trunk (excluding trunk members) interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB. Specifies the interface to convert the learnt secured MAC address into manual configured. '0' represents that no interface is specified.")
portSecMacAsPermanentAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 2, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAction", 1), ("action", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSecMacAsPermanentAction.setStatus('current')
if mibBuilder.loadTexts: portSecMacAsPermanentAction.setDescription('Set action(2) to convert the learnt secured MAC address into manual configured. When action finsh or no action, the value of this object is noAction(1).')
radiusServerGlobalAuthPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalAuthPort.setStatus('current')
if mibBuilder.loadTexts: radiusServerGlobalAuthPort.setDescription('Aauthentication port number for RADIUS server. When specified radius server do not set aauthentication port number, this value is used.')
radiusServerGlobalAcctPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalAcctPort.setStatus('current')
if mibBuilder.loadTexts: radiusServerGlobalAcctPort.setDescription('Accounting port number of RADIUS server. When specified radius server do not set accounting port number, this value is used.')
radiusServerGlobalKey = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalKey.setStatus('current')
if mibBuilder.loadTexts: radiusServerGlobalKey.setDescription('Key for RADIUS. This variable can only be written. When this variable is read, it always returns a zero-length string. When specified radius server do not set key, this this value is used.')
radiusServerGlobalRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalRetransmit.setStatus('current')
if mibBuilder.loadTexts: radiusServerGlobalRetransmit.setDescription('Maximum number of retransmissions for RADIUS. When specified radius server do not set maximum number of retransmissions, this value is used.')
radiusServerGlobalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerGlobalTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusServerGlobalTimeout.setDescription('Timeout for RADIUS. When specified radius server do not set timeout, this value is used.')
radiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7), )
if mibBuilder.loadTexts: radiusServerTable.setStatus('current')
if mibBuilder.loadTexts: radiusServerTable.setDescription('The table for RADIUS server.')
radiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "radiusServerIndex"))
if mibBuilder.loadTexts: radiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: radiusServerEntry.setDescription('The conceptual row for radiusServerTable.')
radiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: radiusServerIndex.setStatus('current')
if mibBuilder.loadTexts: radiusServerIndex.setDescription('The RADIUS server index in the table.')
radiusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerAddress.setStatus('current')
if mibBuilder.loadTexts: radiusServerAddress.setDescription('IP address of a RADIUS server.')
radiusServerAuthPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerAuthPortNumber.setStatus('current')
if mibBuilder.loadTexts: radiusServerAuthPortNumber.setDescription('Authentication port number of RADIUS server.')
radiusServerAcctPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerAcctPortNumber.setStatus('current')
if mibBuilder.loadTexts: radiusServerAcctPortNumber.setDescription('Accounting port number of RADIUS server.')
radiusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerKey.setStatus('current')
if mibBuilder.loadTexts: radiusServerKey.setDescription('Key for RADIUS. This variable can only be written. When this variable is read, it always returns a zero-length string.')
radiusServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerRetransmit.setStatus('current')
if mibBuilder.loadTexts: radiusServerRetransmit.setDescription('Timeout for RADIUS.')
radiusServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusServerTimeout.setDescription('Timeout for RADIUS.')
radiusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 4, 7, 1, 8), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusServerStatus.setStatus('current')
if mibBuilder.loadTexts: radiusServerStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
tacacsPlusServerGlobalPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPlusServerGlobalPortNumber.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerGlobalPortNumber.setDescription('TCP port number of TACACS+ server. When specified TACACS+ server do not set TCP port number, this this value is used.')
tacacsPlusServerGlobalKey = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacacsPlusServerGlobalKey.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerGlobalKey.setDescription('The encryption key used to encrpt the traffic between client and TACACS+ server. Do not use blank spaces in the string. This variable can only be set. When this variable is read, it always returns a zero-length string.When specified TACACS+ server do not set the encryption key , this this value is used.')
tacacsPlusServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 4), )
if mibBuilder.loadTexts: tacacsPlusServerTable.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerTable.setDescription('The table for TACACS+ server.')
tacacsPlusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "tacacsPlusServerIndex"))
if mibBuilder.loadTexts: tacacsPlusServerEntry.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerEntry.setDescription('The conceptual row for tacacsPlusServerTable.')
tacacsPlusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: tacacsPlusServerIndex.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerIndex.setDescription('TACACS+ server index.')
tacacsPlusServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 4, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerAddress.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerAddress.setDescription('IP address of a TACACS+ server.')
tacacsPlusServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerPortNumber.setDescription('TCP port number of a TACACS+ server.')
tacacsPlusServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 48))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerKey.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerKey.setDescription('The encryption key used to encrpt the traffic between client and TACACS+ server. Do not use blank spaces in the string. This variable can only be set. When this variable is read, it always returns a zero-length string.')
tacacsPlusServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 5, 4, 1, 8), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tacacsPlusServerStatus.setStatus('current')
if mibBuilder.loadTexts: tacacsPlusServerStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setStatus('current')
if mibBuilder.loadTexts: sshServerStatus.setDescription('The status of Secure Shell Server. Set this value to enabled(1) to enable SSH server, set this value to disabled(2) to disable the SSH server.')
sshServerMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMajorVersion.setStatus('current')
if mibBuilder.loadTexts: sshServerMajorVersion.setDescription('The major version of the SSH Server.')
sshServerMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMinorVersion.setStatus('current')
if mibBuilder.loadTexts: sshServerMinorVersion.setDescription('The minor version of the SSH Server.')
sshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshTimeout.setStatus('current')
if mibBuilder.loadTexts: sshTimeout.setDescription('The time interval that the router waits for the SSH client to respond. The range is 1-120.')
sshAuthRetries = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshAuthRetries.setStatus('current')
if mibBuilder.loadTexts: sshAuthRetries.setDescription('The number of attempts after which the interface is reset. The range is 1-5.')
sshConnInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6), )
if mibBuilder.loadTexts: sshConnInfoTable.setStatus('current')
if mibBuilder.loadTexts: sshConnInfoTable.setDescription('The table for Secure Shell Connection.')
sshConnInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "sshConnID"))
if mibBuilder.loadTexts: sshConnInfoEntry.setStatus('current')
if mibBuilder.loadTexts: sshConnInfoEntry.setDescription('The conceptual row for sshConnInfoTable.')
sshConnID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: sshConnID.setStatus('current')
if mibBuilder.loadTexts: sshConnID.setDescription('The connection ID of the Secure Shell Connection.')
sshConnMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMajorVersion.setStatus('current')
if mibBuilder.loadTexts: sshConnMajorVersion.setDescription('The SSH major version.')
sshConnMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnMinorVersion.setStatus('current')
if mibBuilder.loadTexts: sshConnMinorVersion.setDescription('The SSH minor version.')
sshConnStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("negotiationStart", 1), ("authenticationStart", 2), ("sessionStart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnStatus.setStatus('current')
if mibBuilder.loadTexts: sshConnStatus.setDescription('The SSH connection State. negotiationStart(1) means the SSH is in its negotiation start state, authenticationStart(2) means the SSH is in authentication start state, sessionStart(3) means the SSH is in session start State.')
sshConnUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnUserName.setStatus('current')
if mibBuilder.loadTexts: sshConnUserName.setDescription('The user name of the connection.')
sshDisconnect = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDisconnect", 1), ("disconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshDisconnect.setStatus('current')
if mibBuilder.loadTexts: sshDisconnect.setDescription('Set the variable to disconnect the connection, noDisconnect(1) will always be obtained when reading this variable.')
sshConnEncryptionTypeStr = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshConnEncryptionTypeStr.setStatus('current')
if mibBuilder.loadTexts: sshConnEncryptionTypeStr.setDescription('The encryption type of the SSH.')
sshKeySize = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 896))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshKeySize.setStatus('current')
if mibBuilder.loadTexts: sshKeySize.setDescription('The SSH server key size.')
sshRsaHostKey1 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 8), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey1.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey1.setDescription('The RSA host key segment 1.')
sshRsaHostKey2 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 9), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey2.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey2.setDescription('The RSA host key segment 2.')
sshRsaHostKey3 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 10), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey3.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey3.setDescription('The RSA host key segment 3.')
sshRsaHostKey4 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 11), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey4.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey4.setDescription('The RSA host key segment 4.')
sshRsaHostKey5 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 12), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey5.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey5.setDescription('The RSA host key segment 5.')
sshRsaHostKey6 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 13), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey6.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey6.setDescription('The RSA host key segment 6.')
sshRsaHostKey7 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 14), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey7.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey7.setDescription('The RSA host key segment 7.')
sshRsaHostKey8 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 15), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey8.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey8.setDescription('The RSA host key segment 8.')
sshDsaHostKey1 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 16), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey1.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey1.setDescription('The DSA host key segment 1.')
sshDsaHostKey2 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 17), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey2.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey2.setDescription('The DSA host key segment 2.')
sshDsaHostKey3 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 18), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey3.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey3.setDescription('The DSA host key segment 3.')
sshDsaHostKey4 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 19), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey4.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey4.setDescription('The DSA host key segment 4.')
sshDsaHostKey5 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 20), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey5.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey5.setDescription('The DSA host key segment 5.')
sshDsaHostKey6 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 21), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey6.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey6.setDescription('The DSA host key segment 6.')
sshDsaHostKey7 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 22), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey7.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey7.setDescription('The DSA host key segment 7.')
sshDsaHostKey8 = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 23), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey8.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey8.setDescription('The DSA host key segment 8.')
sshHostKeyGenAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noGen", 1), ("genRsaKey", 2), ("genDsaKey", 3), ("genBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyGenAction.setStatus('current')
if mibBuilder.loadTexts: sshHostKeyGenAction.setDescription('This variable is for host key generating. For the set behavior: Set it to genRsaKey(2) to generate the RSA host key, and to genDsaKey(3) to generate the DSA host key, if genBothKeys(4) is set, both RSA and DSA host key are generated. For the get behavior: You will get genRsaKey(2), genDsaKey(3) or genBothKeys(4) when the key gen action is in progress. otherwise, you will get noGen(1).')
sshHostKeyGenStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshHostKeyGenStatus.setStatus('current')
if mibBuilder.loadTexts: sshHostKeyGenStatus.setDescription('The result of the last KeyGen status. if no key gen action has been performed. you will get unknown(1) status.')
sshHostKeySaveAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noSave", 1), ("save", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeySaveAction.setStatus('current')
if mibBuilder.loadTexts: sshHostKeySaveAction.setDescription('To save host key from memory to flash. For the set behavior: Set it to save(2) to perform the save operation. For the get behavior: You will get save(1) when the save action is in progress. Otherwise, you will get noSave(1).')
sshHostKeySaveStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshHostKeySaveStatus.setStatus('current')
if mibBuilder.loadTexts: sshHostKeySaveStatus.setDescription('The result of the last savekey status. If no save action has been performed, you will get unknown(1) status.')
sshHostKeyDelAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noDel", 1), ("delRsaKey", 2), ("delDsaKey", 3), ("delBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyDelAction.setStatus('current')
if mibBuilder.loadTexts: sshHostKeyDelAction.setDescription('To delete the host key. For the set behavior: Set it to delRsaKey(2) to delete the RSA host key, to delDsaKey(3) to delete the DSA host key, or to delBothKeys(4) to delete both RSA and DSA host key. For the get behavior: You will get delRsaKey(2), delDsaKey(3) or delBothKeys(4) when the delete operation is in progress. Otherwise, you will get noDel(1).')
sshUserTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29), )
if mibBuilder.loadTexts: sshUserTable.setStatus('current')
if mibBuilder.loadTexts: sshUserTable.setDescription('The conceptual table of all of sshUserEntry.')
sshUserEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1), ).setIndexNames((1, "ECS2100-28PP-MIB", "sshUserName"))
if mibBuilder.loadTexts: sshUserEntry.setStatus('current')
if mibBuilder.loadTexts: sshUserEntry.setDescription('The conceptual row for sshUserTable.')
sshUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: sshUserName.setStatus('current')
if mibBuilder.loadTexts: sshUserName.setDescription('User Name.')
sshUserRsaKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 2), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey1.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey1.setDescription('The RSA user key segment 1.')
sshUserRsaKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 3), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey2.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey2.setDescription('The RSA user key segment 2.')
sshUserRsaKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 4), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey3.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey3.setDescription('The RSA user key segment 3.')
sshUserRsaKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 5), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey4.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey4.setDescription('The RSA user key segment 4.')
sshUserRsaKey5 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 6), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey5.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey5.setDescription('The RSA user key segment 5.')
sshUserRsaKey6 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 7), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey6.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey6.setDescription('The RSA user key segment 6.')
sshUserRsaKey7 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 8), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey7.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey7.setDescription('The RSA user key segment 7.')
sshUserRsaKey8 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 9), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserRsaKey8.setStatus('current')
if mibBuilder.loadTexts: sshUserRsaKey8.setDescription('The RSA user key segment 8.')
sshUserDsaKey1 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 10), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey1.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey1.setDescription('The DSA user key segment 1.')
sshUserDsaKey2 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 11), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey2.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey2.setDescription('The DSA user key segment 2.')
sshUserDsaKey3 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 12), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey3.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey3.setDescription('The DSA user key segment 3.')
sshUserDsaKey4 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 13), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey4.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey4.setDescription('The DSA user key segment 4.')
sshUserDsaKey5 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 14), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey5.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey5.setDescription('The DSA user key segment 5.')
sshUserDsaKey6 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 15), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey6.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey6.setDescription('The DSA user key segment 6.')
sshUserDsaKey7 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 16), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey7.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey7.setDescription('The DSA user key segment 7.')
sshUserDsaKey8 = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 17), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshUserDsaKey8.setStatus('current')
if mibBuilder.loadTexts: sshUserDsaKey8.setDescription('The DSA user key segment 8.')
sshUserKeyDelAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 29, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noDel", 1), ("delRsaKey", 2), ("delDsaKey", 3), ("delBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshUserKeyDelAction.setStatus('current')
if mibBuilder.loadTexts: sshUserKeyDelAction.setDescription('To delete the user key. For the set behavior: Set it to delRsaKey(2) to delete the RSA user key, to delDsaKey(3) to delete the DSA user key, or to delBothKeys(4) to delete both RSA and DSA user key. For the get behavior: You will get delRsaKey(2), delDsaKey(3) or delBothKeys(4) when the delete operation is in progress. Otherwise, you will get noDel(1).')
sshRsaHostKeySHA1FingerPrint = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(65, 65)).setFixedLength(65)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKeySHA1FingerPrint.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKeySHA1FingerPrint.setDescription('The SHA1 finger print of the RSA host key.')
sshRsaHostKeyMD5FingerPrint = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(47, 47)).setFixedLength(47)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKeyMD5FingerPrint.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKeyMD5FingerPrint.setDescription('The MD5 finger print of RSA host key.')
sshDsaHostKeySHA1FingerPrint = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(65, 65)).setFixedLength(65)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKeySHA1FingerPrint.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKeySHA1FingerPrint.setDescription('The SHA1 finger print of the DSA host key.')
sshDsaHostKeyMD5FingerPrint = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 6, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(47, 47)).setFixedLength(47)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKeyMD5FingerPrint.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKeyMD5FingerPrint.setDescription('The MD5 finger print of the DSA host key.')
aaaMethodTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1), )
if mibBuilder.loadTexts: aaaMethodTable.setStatus('current')
if mibBuilder.loadTexts: aaaMethodTable.setDescription('Contains the settings needed for accounting.')
aaaMethodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "aaaMethodIndex"))
if mibBuilder.loadTexts: aaaMethodEntry.setStatus('current')
if mibBuilder.loadTexts: aaaMethodEntry.setDescription('A conceptual row in the aaaMethodTable.')
aaaMethodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: aaaMethodIndex.setStatus('current')
if mibBuilder.loadTexts: aaaMethodIndex.setDescription('Specifies the index for the entry.')
aaaMethodName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaMethodName.setStatus('current')
if mibBuilder.loadTexts: aaaMethodName.setDescription('Name for the method.')
aaaMethodGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaMethodGroupName.setStatus('current')
if mibBuilder.loadTexts: aaaMethodGroupName.setDescription('Name for the server to use, pointing to aaaRadiusGroupName or aaaTacacsPlusGroupName.')
aaaMethodMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("start-stop", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaMethodMode.setStatus('current')
if mibBuilder.loadTexts: aaaMethodMode.setDescription("start-stop(1),sends a 'start' accounting notice at the beginning of a process and a 'stop' accounting notice at the end of a process. The 'start' accounting record is sent in the background. The requested user process begins regardless of whether or not the 'start' accounting notice was received by the accounting server.")
aaaMethodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1, 5), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaMethodStatus.setStatus('current')
if mibBuilder.loadTexts: aaaMethodStatus.setDescription('Set to 1 to initiate the aaaMethodTable, 2 to destroy the table.')
aaaMethodClientType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("dot1x", 1), ("exec", 2), ("commands", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaMethodClientType.setStatus('current')
if mibBuilder.loadTexts: aaaMethodClientType.setDescription('dot1x(1): Provides accounting service for 802.1x activity; exec(2): Provides accounting service for EXEC connection such as Telnet, SSH or console; commands(3): Provides accounting service for command privileges.')
aaaMethodPrivilegeLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaMethodPrivilegeLevel.setStatus('current')
if mibBuilder.loadTexts: aaaMethodPrivilegeLevel.setDescription('Specifies the privilege level for the entry. When aaaMethodClientType is in the mode of command(3), the privilege level is enabled to be accessed.')
aaaRadiusGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 2), )
if mibBuilder.loadTexts: aaaRadiusGroupTable.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusGroupTable.setDescription('Uses a subset of RADIUS servers for accounting as defined by the server group')
aaaRadiusGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "aaaRadiusGroupIndex"))
if mibBuilder.loadTexts: aaaRadiusGroupEntry.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusGroupEntry.setDescription('A conceptual row of aaaRadiusGroupEntry.')
aaaRadiusGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: aaaRadiusGroupIndex.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusGroupIndex.setDescription('Specifies the index for the entry.')
aaaRadiusGroupServerBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaRadiusGroupServerBitMap.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusGroupServerBitMap.setDescription('Identifies which RADIUS sever to use, each bit points to each radius server. 80 (1000 0000) point to radius server 1, C0 (11000000) points to radius 1 and radius 2.')
aaaRadiusGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 2, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaRadiusGroupName.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusGroupName.setDescription('Uses a subset of servers for accounting as defined by the server group. The same name as aaaTacasPlusGroupName is not allowed.')
aaaRadiusGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 2, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaRadiusGroupStatus.setStatus('current')
if mibBuilder.loadTexts: aaaRadiusGroupStatus.setDescription('Set to 1 to initiate the aaaRadiusGroupTable, 2 to destroy the table.')
aaaTacacsPlusGroupTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 3), )
if mibBuilder.loadTexts: aaaTacacsPlusGroupTable.setStatus('current')
if mibBuilder.loadTexts: aaaTacacsPlusGroupTable.setDescription('Uses a subset of TACACS+ servers for accounting as defined by the server group')
aaaTacacsPlusGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "aaaTacacsPlusGroupIndex"))
if mibBuilder.loadTexts: aaaTacacsPlusGroupEntry.setStatus('current')
if mibBuilder.loadTexts: aaaTacacsPlusGroupEntry.setDescription('A conceptual row of aaaTacacsPlusGroupEntry.')
aaaTacacsPlusGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: aaaTacacsPlusGroupIndex.setStatus('current')
if mibBuilder.loadTexts: aaaTacacsPlusGroupIndex.setDescription('Specifies the index for the entry.')
aaaTacacsPlusGroupServerBitMap = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaTacacsPlusGroupServerBitMap.setStatus('current')
if mibBuilder.loadTexts: aaaTacacsPlusGroupServerBitMap.setDescription('Identifies which TACACS+ sever to use.')
aaaTacacsPlusGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 3, 1, 3), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaTacacsPlusGroupName.setStatus('current')
if mibBuilder.loadTexts: aaaTacacsPlusGroupName.setDescription("Uses a subset of servers for accounting as defined by the server group. We can't have the same name as aaaRadiusGroupName")
aaaTacacsPlusGroupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 3, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaTacacsPlusGroupStatus.setStatus('current')
if mibBuilder.loadTexts: aaaTacacsPlusGroupStatus.setDescription('Set to 1 to initiate the aaaRadiusGroupTable, 2 to destroy the table.')
aaaUpdate = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: aaaUpdate.setStatus('current')
if mibBuilder.loadTexts: aaaUpdate.setDescription('Specifies the periodic interim accounting records to be sent to the accounting server and periodic intervals to send accounting update records(in minutes).')
aaaAccountTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 5), )
if mibBuilder.loadTexts: aaaAccountTable.setStatus('current')
if mibBuilder.loadTexts: aaaAccountTable.setDescription('Specifies an interface or a set of interfaces that the accounting method list will be applied to.')
aaaAccountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 5, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "aaaAccountIfIndex"))
if mibBuilder.loadTexts: aaaAccountEntry.setStatus('current')
if mibBuilder.loadTexts: aaaAccountEntry.setDescription('A conceptual row of aaaAccountTable.')
aaaAccountIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: aaaAccountIfIndex.setStatus('current')
if mibBuilder.loadTexts: aaaAccountIfIndex.setDescription('Defined as the ifIndex')
aaaAccountMethodName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 5, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaAccountMethodName.setStatus('current')
if mibBuilder.loadTexts: aaaAccountMethodName.setDescription('Specifies the name of the list of accounting methods to use. If no method name is specified, the system uses the default.')
aaaAccountProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aaaAccountProtocol.setStatus('current')
if mibBuilder.loadTexts: aaaAccountProtocol.setDescription('Get the protocol type of a list method to know which server (RADIUS or TACACS+) is in use.')
aaaAccountStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 5, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaAccountStatus.setStatus('current')
if mibBuilder.loadTexts: aaaAccountStatus.setDescription('Set to 1 to initiate the aaaRadiusGroupTable, 2 to destroy the table.')
aaaCommandPrivilegesTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 8), )
if mibBuilder.loadTexts: aaaCommandPrivilegesTable.setStatus('current')
if mibBuilder.loadTexts: aaaCommandPrivilegesTable.setDescription('Contains the settings needed for command privileges.')
aaaCommandPrivilegesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 8, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "aaaCommandPrivilegesLevel"), (0, "ECS2100-28PP-MIB", "aaaCommandPrivilegesInterfaceIndex"))
if mibBuilder.loadTexts: aaaCommandPrivilegesEntry.setStatus('current')
if mibBuilder.loadTexts: aaaCommandPrivilegesEntry.setDescription('A conceptual row in the aaaCommandPrivilegesTable.')
aaaCommandPrivilegesLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)))
if mibBuilder.loadTexts: aaaCommandPrivilegesLevel.setStatus('current')
if mibBuilder.loadTexts: aaaCommandPrivilegesLevel.setDescription('Specifies the privilege level index for the entry.')
aaaCommandPrivilegesInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("console", 1), ("vty", 2))))
if mibBuilder.loadTexts: aaaCommandPrivilegesInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: aaaCommandPrivilegesInterfaceIndex.setDescription('Specifies the interface index for the entry.')
aaaCommandPrivilegesMethodName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 8, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaCommandPrivilegesMethodName.setStatus('current')
if mibBuilder.loadTexts: aaaCommandPrivilegesMethodName.setDescription('Specifies the method name in the lists under the mode of command privileges.')
aaaAccExecTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 9), )
if mibBuilder.loadTexts: aaaAccExecTable.setStatus('current')
if mibBuilder.loadTexts: aaaAccExecTable.setDescription('Specifies an interface or a set of interfaces that the accounting method list will be applied to.')
aaaAccExecEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 9, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "aaaAccExecIndex"))
if mibBuilder.loadTexts: aaaAccExecEntry.setStatus('current')
if mibBuilder.loadTexts: aaaAccExecEntry.setDescription('A conceptual row of aaaAccExecTable.')
aaaAccExecIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("console", 1), ("vty", 2))))
if mibBuilder.loadTexts: aaaAccExecIndex.setStatus('current')
if mibBuilder.loadTexts: aaaAccExecIndex.setDescription('The method of accessing CLI management.')
aaaAccExecMethodName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 12, 9, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: aaaAccExecMethodName.setStatus('current')
if mibBuilder.loadTexts: aaaAccExecMethodName.setDescription('Specifies the name of the list of accounting methods to use. If no method name is specified, the system uses the default.')
userAuthEnablePassword = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthEnablePassword.setStatus('current')
if mibBuilder.loadTexts: userAuthEnablePassword.setDescription('Set enable password or delete enable password. NULL is used to delete the enable password. The password is starting with alphanumeric.')
userAuthMethod = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("local", 1), ("localradius", 2), ("localradiustacacs", 3), ("localtacacs", 4), ("localtacacsradius", 5), ("radius", 6), ("radiuslocal", 7), ("radiuslocaltacacs", 8), ("radiustacacs", 9), ("radiustacacslocal", 10), ("tacacs", 11), ("tacacslocal", 12), ("tacacslocalradius", 13), ("tacacsradius", 14), ("tacacsradiuslocal", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: userAuthMethod.setStatus('current')
if mibBuilder.loadTexts: userAuthMethod.setDescription('Set user authencation method for system.')
userAuthTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 5), )
if mibBuilder.loadTexts: userAuthTable.setStatus('current')
if mibBuilder.loadTexts: userAuthTable.setDescription('This table is for creating the new user.')
userAuthEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 5, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "userAuthUserName"))
if mibBuilder.loadTexts: userAuthEntry.setStatus('current')
if mibBuilder.loadTexts: userAuthEntry.setDescription('Entries in this table correspond to the users entries in system.')
userAuthUserName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: userAuthUserName.setStatus('current')
if mibBuilder.loadTexts: userAuthUserName.setDescription('The name of the user. The user name is starting with alphanumeric.')
userAuthPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthPassword.setStatus('current')
if mibBuilder.loadTexts: userAuthPassword.setDescription('Specifies the user password. zero length input will set the user enrty without password. If the user is not exist, it will create the user with the giving password and privilege 0. The password is starting with alphanumeric.')
userAuthPrivilege = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthPrivilege.setStatus('current')
if mibBuilder.loadTexts: userAuthPrivilege.setDescription('Specifies the user level. If the user does not exist, it will create the user with the given privilege and no password. Privilege 15 indicates system administrator, privilege 0 indicates guest user.')
userAuthPublicKey = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 5, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userAuthPublicKey.setStatus('current')
if mibBuilder.loadTexts: userAuthPublicKey.setDescription("User public key, the value can be 'RSA' or 'DSA' or 'Both' or 'None'.")
userAuthStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 10, 5, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: userAuthStatus.setStatus('current')
if mibBuilder.loadTexts: userAuthStatus.setDescription("This node is used to create the user entry by '1' and to delete one user entry by '0'.")
ipFilterSnmpInetTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 12), )
if mibBuilder.loadTexts: ipFilterSnmpInetTable.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpInetTable.setDescription('A list of IP address entries.')
ipFilterSnmpInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 12, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "ipFilterSnmpInetAddressType"), (1, "ECS2100-28PP-MIB", "ipFilterSnmpInetAddressStart"))
if mibBuilder.loadTexts: ipFilterSnmpInetEntry.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpInetEntry.setDescription('This entry includes an IP address range which the system will allow to connect to this device through SNMP.')
ipFilterSnmpInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 12, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipFilterSnmpInetAddressType.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpInetAddressType.setDescription('The type of IP address filter. Only supports IPv4 and IPv6 address types.')
ipFilterSnmpInetAddressStart = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 12, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipFilterSnmpInetAddressStart.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpInetAddressStart.setDescription('The start IP address.')
ipFilterSnmpInetAddressEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 12, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSnmpInetAddressEnd.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpInetAddressEnd.setDescription('The end IP address.')
ipFilterSnmpInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 12, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSnmpInetStatus.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpInetStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
ipFilterHttpInetTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 13), )
if mibBuilder.loadTexts: ipFilterHttpInetTable.setStatus('current')
if mibBuilder.loadTexts: ipFilterHttpInetTable.setDescription('A list of IP address entries.')
ipFilterHttpInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 13, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "ipFilterHttpInetAddressType"), (1, "ECS2100-28PP-MIB", "ipFilterHttpInetAddressStart"))
if mibBuilder.loadTexts: ipFilterHttpInetEntry.setStatus('current')
if mibBuilder.loadTexts: ipFilterHttpInetEntry.setDescription('This entry includes an IP address range which the system will allow to connect to this device through SNMP.')
ipFilterHttpInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 13, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipFilterHttpInetAddressType.setStatus('current')
if mibBuilder.loadTexts: ipFilterHttpInetAddressType.setDescription('The type of IP address filter . Only supports IPv4 and IPv6 address types.')
ipFilterHttpInetAddressStart = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 13, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipFilterHttpInetAddressStart.setStatus('current')
if mibBuilder.loadTexts: ipFilterHttpInetAddressStart.setDescription('The start IP address.')
ipFilterHttpInetAddressEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 13, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterHttpInetAddressEnd.setStatus('current')
if mibBuilder.loadTexts: ipFilterHttpInetAddressEnd.setDescription('The end IP address.')
ipFilterHttpInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 13, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterHttpInetStatus.setStatus('current')
if mibBuilder.loadTexts: ipFilterHttpInetStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
ipFilterTelnetInetTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 14), )
if mibBuilder.loadTexts: ipFilterTelnetInetTable.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetInetTable.setDescription('A list of IP address entries.')
ipFilterTelnetInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 14, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "ipFilterTelnetInetAddressType"), (1, "ECS2100-28PP-MIB", "ipFilterTelnetInetAddressStart"))
if mibBuilder.loadTexts: ipFilterTelnetInetEntry.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetInetEntry.setDescription('This entry includes an IP address range which the system will allow them to connect to this device through SNMP.')
ipFilterTelnetInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 14, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ipFilterTelnetInetAddressType.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetInetAddressType.setDescription('The type of IP address filter . Only supports IPv4 and IPv6 address types.')
ipFilterTelnetInetAddressStart = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 14, 1, 2), InetAddress())
if mibBuilder.loadTexts: ipFilterTelnetInetAddressStart.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetInetAddressStart.setDescription('The start IP address.')
ipFilterTelnetInetAddressEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 14, 1, 3), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterTelnetInetAddressEnd.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetInetAddressEnd.setDescription('The end IP address.')
ipFilterTelnetInetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 14, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterTelnetInetStatus.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetInetStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
ipFilterAllClientCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 15))
ipFilterAllClientCtlInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 15, 1), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterAllClientCtlInetAddressType.setStatus('current')
if mibBuilder.loadTexts: ipFilterAllClientCtlInetAddressType.setDescription('The type of IP address filter. Only supports IPv4 and IPv6 address types.')
ipFilterAllClientCtlInetAddressStart = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 15, 2), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterAllClientCtlInetAddressStart.setStatus('current')
if mibBuilder.loadTexts: ipFilterAllClientCtlInetAddressStart.setDescription('The start IP address.')
ipFilterAllClientCtlInetAddressEnd = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 15, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterAllClientCtlInetAddressEnd.setStatus('current')
if mibBuilder.loadTexts: ipFilterAllClientCtlInetAddressEnd.setDescription('The end IP address.')
ipFilterAllClientCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 9, 15, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("create", 2), ("destroy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFilterAllClientCtlAction.setStatus('current')
if mibBuilder.loadTexts: ipFilterAllClientCtlAction.setDescription('Action for IP filter control. Set this object to create(2) to create entries in the ipFilterSnmpInetTable, ipFilterHttpInetTable and ipFilterTelnetInetTable. Set this object to destroy(3) to destroy specified entries in the ipFilterSnmpInetTable, ipFilterHttpInetTable and ipFilterTelnetInetTable. When the action is finshed, whether successfully or not, or no action is taken, the value of this object is always noAction(1).')
dot1xAuthConfigExtTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 11, 1), )
if mibBuilder.loadTexts: dot1xAuthConfigExtTable.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthConfigExtTable.setDescription('The extension table of dot1xAuthConfigTable.')
dot1xAuthConfigExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 11, 1, 1), )
dot1xAuthConfigEntry.registerAugmentions(("ECS2100-28PP-MIB", "dot1xAuthConfigExtEntry"))
dot1xAuthConfigExtEntry.setIndexNames(*dot1xAuthConfigEntry.getIndexNames())
if mibBuilder.loadTexts: dot1xAuthConfigExtEntry.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthConfigExtEntry.setDescription('The entry of dot1xAuthConfigExtTable.')
dot1xAuthConfigExtOperMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("singleHost", 1), ("multiHost", 2), ("macBasedAuth", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthConfigExtOperMode.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthConfigExtOperMode.setDescription('The operation mode of dot1x port which allows host connection to 802.1x-authorized ports.')
dot1xAuthConfigExtMultiHostMaxCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthConfigExtMultiHostMaxCnt.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthConfigExtMultiHostMaxCnt.setDescription('The maximum number of hosts when the dot1xAuthConfigExtOperMode is multiHost(2). When the operation Mode is singleHost(1), we can ignore this variables.')
dot1xAuthConfigExtPortIntrusionAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("block-traffic", 1), ("guest-vlan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dot1xAuthConfigExtPortIntrusionAction.setStatus('current')
if mibBuilder.loadTexts: dot1xAuthConfigExtPortIntrusionAction.setDescription('Responses to intrusion when the authentication is failed; block-traffic(1) means that to block traffic when the authentication is failed and guest-vlan(2) means that to join to a guest VLAN when the authentication is failed.')
networkAccessPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 2), )
if mibBuilder.loadTexts: networkAccessPortTable.setStatus('current')
if mibBuilder.loadTexts: networkAccessPortTable.setDescription('A table contains the information of network access about every port.')
networkAccessPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "networkAccessPortPortIndex"))
if mibBuilder.loadTexts: networkAccessPortEntry.setStatus('current')
if mibBuilder.loadTexts: networkAccessPortEntry.setDescription('A conceptual row in the networkAccessPort table.')
networkAccessPortPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: networkAccessPortPortIndex.setStatus('current')
if mibBuilder.loadTexts: networkAccessPortPortIndex.setDescription('The port and the trunk (excluding trunk members) interface of the portTable. The interface identified by a particular value of this port index is the same interface identified by the same value of ifIndex in the IF-MIB.')
networkAccessPortDynamicVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 2, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessPortDynamicVlan.setStatus('current')
if mibBuilder.loadTexts: networkAccessPortDynamicVlan.setDescription('Sets enabled(1) to enable dynamic VLAN assigment and sets disabled(2) to disable dynamic VLAN assigment.')
networkAccessPortMacFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessPortMacFilter.setStatus('current')
if mibBuilder.loadTexts: networkAccessPortMacFilter.setDescription('Specifies the MAC filter ID, Set this variable to zero to disable MAC filter.')
networkAccessPortGuestVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessPortGuestVlan.setStatus('current')
if mibBuilder.loadTexts: networkAccessPortGuestVlan.setDescription('Specifies the guest VLAN ID. To disable the VLAN, set the value to 0.')
networkAccessPortDynamicQos = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 2, 1, 10), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessPortDynamicQos.setStatus('current')
if mibBuilder.loadTexts: networkAccessPortDynamicQos.setDescription('Set this object to enabled(1) to enable Dynamic QoS. Set this object to disabled(2) to disable Dynamic QoS.')
networkAccessClearMacAddressMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 3))
networkAccessClearMacAddressAttribute = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("all", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessClearMacAddressAttribute.setStatus('current')
if mibBuilder.loadTexts: networkAccessClearMacAddressAttribute.setDescription('Attribute for clearing Mac address. Specifies the certain attribute in Mac address table. all(1) indicates both reauthorized and learnt secure MAC address; static(2) indicates reauthorized MAC address; dynamic(3) indicates learnt secure MAC address.')
networkAccessClearMacAddressMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 3, 2), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessClearMacAddressMacAddress.setStatus('current')
if mibBuilder.loadTexts: networkAccessClearMacAddressMacAddress.setDescription("Specifies MAC address in the MAC address table for clearing MAC address. '000000' represents that no MAC address is specified.")
networkAccessClearMacAddressPort = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessClearMacAddressPort.setStatus('current')
if mibBuilder.loadTexts: networkAccessClearMacAddressPort.setDescription("The specifies port in the MAC address table for clearing MAC address. '0' represents that no port is specified.")
networkAccessClearMacAddressAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noclear", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessClearMacAddressAction.setStatus('current')
if mibBuilder.loadTexts: networkAccessClearMacAddressAction.setDescription('Action for clearing MAC address . When setting this object to clear(2) to begin the clearing MAC address operation, a particular MAC address is cleared from the MAC address table. When the action is finshed whether or not it is successful or no action is taken, the value of this object is always noclear(1).')
networkAccessMacAddressTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4), )
if mibBuilder.loadTexts: networkAccessMacAddressTable.setStatus('current')
if mibBuilder.loadTexts: networkAccessMacAddressTable.setDescription('Contains the information of network access MAC addresses.')
networkAccessMacAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "networkAccessMacAddressAddress"), (0, "ECS2100-28PP-MIB", "networkAccessMacAddressPort"))
if mibBuilder.loadTexts: networkAccessMacAddressEntry.setStatus('current')
if mibBuilder.loadTexts: networkAccessMacAddressEntry.setDescription('A conceptual row in the networkAccessMacAddress table.')
networkAccessMacAddressAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4, 1, 1), MacAddress())
if mibBuilder.loadTexts: networkAccessMacAddressAddress.setStatus('current')
if mibBuilder.loadTexts: networkAccessMacAddressAddress.setDescription('Specifies the authenticated MAC address.')
networkAccessMacAddressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: networkAccessMacAddressPort.setStatus('current')
if mibBuilder.loadTexts: networkAccessMacAddressPort.setDescription('Specifies the port of authenticated MAC address.')
networkAccessMacAddressInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessMacAddressInetAddressType.setStatus('current')
if mibBuilder.loadTexts: networkAccessMacAddressInetAddressType.setDescription('This object indicates the type of IP address denoted in networkAccessMacAddressRadiusServerInetAddress type.')
networkAccessMacAddressRadiusServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessMacAddressRadiusServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: networkAccessMacAddressRadiusServerInetAddress.setDescription('Displays the IP address of radius server that authenticates the specified Mac address.')
networkAccessMacAddressTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessMacAddressTime.setStatus('current')
if mibBuilder.loadTexts: networkAccessMacAddressTime.setDescription("Displays the authentication time of the authenticated MAC address. The following form is a text string; 'yyyy MMm DDd HHh MMm SSs'. 'yyyy' is a four-digit year. 'MM' is a month. A single-digit month is preceded by a zero. 'DD' is the day of a month. A single-digit day is preceded by the value zero. 'HH', 'MM' and 'SS' are hour, minute, and second respectively. A single-digit hour, minute, and second are preceded by a zero value. An example is: '2001y 01m 01d 00h 04m 43s'.")
networkAccessMacAddressAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkAccessMacAddressAttribute.setStatus('current')
if mibBuilder.loadTexts: networkAccessMacAddressAttribute.setDescription('Displays the attribute of an authenticated MAC address. static(1) indicates resauthorized secure MAC address. dynamic(2) indicates learnt secure MAC address.')
networkAccessAging = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 5), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkAccessAging.setStatus('current')
if mibBuilder.loadTexts: networkAccessAging.setDescription('Set this object to enabled(1) to enable MAC address aging feature. Set this object to disabled(2) to disable MAC address aging feature.')
networkAccessMacFilterWithMaskTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 6), )
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskTable.setStatus('current')
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskTable.setDescription('Contains the settings for MAC filter.')
networkAccessMacFilterWithMaskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "networkAccessMacFilterWithMaskID"), (0, "ECS2100-28PP-MIB", "networkAccessMacFilterWithMaskMacAddress"), (0, "ECS2100-28PP-MIB", "networkAccessMacFilterWithMaskMacAddressMask"))
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskEntry.setStatus('current')
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskEntry.setDescription('A conceptual row in the networkAccessMacFilterWithMaskTable.')
networkAccessMacFilterWithMaskID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskID.setStatus('current')
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskID.setDescription('Specifies the MAC filter ID.')
networkAccessMacFilterWithMaskMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 6, 1, 2), MacAddress())
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskMacAddress.setStatus('current')
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskMacAddress.setDescription('Specifies the MAC address to be filtered.')
networkAccessMacFilterWithMaskMacAddressMask = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 6, 1, 3), MacAddress())
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskMacAddressMask.setStatus('current')
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskMacAddressMask.setDescription('Specifies the MAC mask to be filtered.')
networkAccessMacFilterWithMaskStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 13, 6, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskStatus.setStatus('current')
if mibBuilder.loadTexts: networkAccessMacFilterWithMaskStatus.setDescription('Set this object to valid(1) to create an entry. Set this object to invalid(2) to destroy an entry.')
system = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1))
dosSmurf = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 3))
dosSmurfStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 3, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosSmurfStatus.setStatus('current')
if mibBuilder.loadTexts: dosSmurfStatus.setDescription('The status of Smurf protection. Set this to enabled(1) to enable the feature, and set this to disabled(2) to disable the feature.')
dosTcpNullScan = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 5))
dosTcpNullScanStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 5, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosTcpNullScanStatus.setStatus('current')
if mibBuilder.loadTexts: dosTcpNullScanStatus.setDescription('The status of TCP Null-scan protection. Set this to enabled(1) to enable the feature, and set this to disabled(2) to disable the feature.')
dosTcpSynFinScan = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 6))
dosTcpSynFinScanStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosTcpSynFinScanStatus.setStatus('current')
if mibBuilder.loadTexts: dosTcpSynFinScanStatus.setDescription('The status of TCP SYN FIN scan protection. Set this to enabled(1) to enable the feature, and set this to disabled(2) to disable the feature.')
dosTcpXmasScan = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 7))
dosTcpXmasScanStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 7, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosTcpXmasScanStatus.setStatus('current')
if mibBuilder.loadTexts: dosTcpXmasScanStatus.setDescription('The status of TCP Xmas-scan protection. Set this to enabled(1) to enable the feature, and set this to disabled(2) to disable the feature.')
dosTcpUdpPortZero = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 11))
dosTcpUdpPortZeroStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 17, 16, 1, 11, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosTcpUdpPortZeroStatus.setStatus('current')
if mibBuilder.loadTexts: dosTcpUdpPortZeroStatus.setDescription('The status of checking for TCP/UDP packets with port 0. Set this to enabled(1) to enable the feature, and set this to disabled(2) to disable the feature.')
sysLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogStatus.setStatus('current')
if mibBuilder.loadTexts: sysLogStatus.setDescription('Whether the system log is enabled.')
sysLogHistoryFlashLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryFlashLevel.setStatus('current')
if mibBuilder.loadTexts: sysLogHistoryFlashLevel.setDescription('Severity level for logging to flash.')
sysLogHistoryRamLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryRamLevel.setStatus('current')
if mibBuilder.loadTexts: sysLogHistoryRamLevel.setDescription('Severity level for logging to RAM.')
remoteLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6))
remoteLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogStatus.setStatus('current')
if mibBuilder.loadTexts: remoteLogStatus.setDescription('Whether the remote log system is enabled.')
remoteLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogLevel.setStatus('current')
if mibBuilder.loadTexts: remoteLogLevel.setDescription('Severity level for remote log.')
remoteLogFacilityType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("localUse0", 16), ("localUse1", 17), ("localUse2", 18), ("localUse3", 19), ("localUse4", 20), ("localUse5", 21), ("localUse6", 22), ("localUse7", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogFacilityType.setStatus('current')
if mibBuilder.loadTexts: remoteLogFacilityType.setDescription(' The facility type for remote log.')
remoteLogServerInetTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 7), )
if mibBuilder.loadTexts: remoteLogServerInetTable.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerInetTable.setDescription('A table for storing the remote log server list.')
remoteLogServerInetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 7, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "remoteLogServerInetAddressType"), (0, "ECS2100-28PP-MIB", "remoteLogServerInetAddress"))
if mibBuilder.loadTexts: remoteLogServerInetEntry.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerInetEntry.setDescription('A conceptual row for remoteLogServerInetTable.')
remoteLogServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 7, 1, 1), InetAddressType())
if mibBuilder.loadTexts: remoteLogServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerInetAddressType.setDescription('Indicates the type of address denoted in remoteLogServerInetAddress type. Only ipv4(1), ipv6(2) and ipv6z(4) types are supported.')
remoteLogServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 7, 1, 2), InetAddress())
if mibBuilder.loadTexts: remoteLogServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerInetAddress.setDescription('The IP address of the remote log Server.')
remoteLogServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 7, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLogServerStatus.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
remoteLogServerUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogServerUdpPort.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerUdpPort.setDescription('The UDP port number of the remote log Server')
smtpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7))
smtpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpStatus.setStatus('current')
if mibBuilder.loadTexts: smtpStatus.setDescription('Set enabled(1) to enable the SMTP, set disabled(2) to disable the SMTP.')
smtpSeverityLevel = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSeverityLevel.setStatus('current')
if mibBuilder.loadTexts: smtpSeverityLevel.setDescription('Specify the SMTP minimum severity level to send the event message.')
smtpSourceEMail = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: smtpSourceEMail.setStatus('current')
if mibBuilder.loadTexts: smtpSourceEMail.setDescription("SMTP source email address, the sender's mail address that appears in the 'From' field of the mail.")
smtpServerIpTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 4), )
if mibBuilder.loadTexts: smtpServerIpTable.setStatus('current')
if mibBuilder.loadTexts: smtpServerIpTable.setDescription('The SMTP server IP table. The maximum servers to be added is 3.')
smtpServerIpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "smtpServerIp"))
if mibBuilder.loadTexts: smtpServerIpEntry.setStatus('current')
if mibBuilder.loadTexts: smtpServerIpEntry.setDescription('A conceptual row of the smtpServerIpTable.')
smtpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 4, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: smtpServerIp.setStatus('current')
if mibBuilder.loadTexts: smtpServerIp.setDescription("SMTP mail server's IP address.")
smtpServerIpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 4, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smtpServerIpStatus.setStatus('current')
if mibBuilder.loadTexts: smtpServerIpStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
smtpDestEMailTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 5), )
if mibBuilder.loadTexts: smtpDestEMailTable.setStatus('current')
if mibBuilder.loadTexts: smtpDestEMailTable.setDescription('The table of the destination e-mail address. The maximum numbers of destination email address to be added is 5.')
smtpDestEMailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 5, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "smtpDestEMail"))
if mibBuilder.loadTexts: smtpDestEMailEntry.setStatus('current')
if mibBuilder.loadTexts: smtpDestEMailEntry.setDescription('A conceptual row of the smtpDestEMailTable.')
smtpDestEMail = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 41)))
if mibBuilder.loadTexts: smtpDestEMail.setStatus('current')
if mibBuilder.loadTexts: smtpDestEMail.setDescription('SMTP destination e-mail address.')
smtpDestEMailStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 7, 5, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: smtpDestEMailStatus.setStatus('current')
if mibBuilder.loadTexts: smtpDestEMailStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
sysLogCommandLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 19, 10), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogCommandLogStatus.setStatus('current')
if mibBuilder.loadTexts: sysLogCommandLogStatus.setDescription('Set enabled(1) to enable command log, set disabled(2) to disable command log.')
consoleMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1))
telnetMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 2))
vtyMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 3))
consoleDataBits = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("databits7", 1), ("databits8", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleDataBits.setStatus('current')
if mibBuilder.loadTexts: consoleDataBits.setDescription('Number of data bits.')
consoleParity = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("partyNone", 1), ("partyEven", 2), ("partyOdd", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleParity.setStatus('current')
if mibBuilder.loadTexts: consoleParity.setDescription('Defines the generation of a parity bit.')
consoleBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("baudRate9600", 1), ("baudRate19200", 2), ("baudRate38400", 3), ("baudRate57600", 4), ("baudRate115200", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleBaudRate.setStatus('current')
if mibBuilder.loadTexts: consoleBaudRate.setDescription('Baud rate: Valid values are 115200, 57600, 38400, 19200, and 9600.')
consoleStopBits = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stopbits1", 1), ("stopbits2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleStopBits.setStatus('current')
if mibBuilder.loadTexts: consoleStopBits.setDescription('The console stop bits, valid values are stopbits1(1) or stopbits2(2)')
consoleExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleExecTimeout.setStatus('current')
if mibBuilder.loadTexts: consoleExecTimeout.setDescription('In a serial console, use the consoleExecTimeout variable to set the interval that the EXEC command interpreter waits until user input is detected; set the value to 0 to disable it.')
consolePasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 120), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consolePasswordThreshold.setStatus('current')
if mibBuilder.loadTexts: consolePasswordThreshold.setDescription('The number of failed console logon attempts that may be made before the system will not accept a further attempt in the time specified by consoleSilentTime. A value of 0 disables the functionality.')
consoleSilentTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleSilentTime.setStatus('current')
if mibBuilder.loadTexts: consoleSilentTime.setDescription('The length of time that the management console is inaccessible after the number of failed logon attempts has reached consolePasswordThreshold. A value of 0 disables the functionality.')
consoleLoginResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: consoleLoginResponseTimeout.setStatus('current')
if mibBuilder.loadTexts: consoleLoginResponseTimeout.setDescription('Console login response timeout setting.')
telnetStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 2, 4), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetStatus.setStatus('current')
if mibBuilder.loadTexts: telnetStatus.setDescription('To enable or disable the telnet function. Any new telnet request will be rejected and all current telnet sessions will be terminated if this status is set to disabled(2).')
telnetPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(23)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: telnetPortNumber.setStatus('current')
if mibBuilder.loadTexts: telnetPortNumber.setDescription('The telnet session port number.')
vtyExecTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtyExecTimeout.setStatus('current')
if mibBuilder.loadTexts: vtyExecTimeout.setDescription('Specifies the interval that the system waits for user input before terminating the current session.')
vtyPasswordThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 120), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtyPasswordThreshold.setStatus('current')
if mibBuilder.loadTexts: vtyPasswordThreshold.setDescription('The number of failed logon attempts that may be made before the system will not accept a further attempt to log on. Setting to 0 means disabled.')
vtyLoginResponseTimeout = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtyLoginResponseTimeout.setStatus('current')
if mibBuilder.loadTexts: vtyLoginResponseTimeout.setDescription('Login response timeout setting.')
vtyMaxSession = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)).clone(8)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtyMaxSession.setStatus('current')
if mibBuilder.loadTexts: vtyMaxSession.setDescription('The maximum number of allowed sessions.')
vtySilentTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 20, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 65535), ))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: vtySilentTime.setStatus('current')
if mibBuilder.loadTexts: vtySilentTime.setDescription('The time the system waits before etablishing a new session after the number of failed logins reaches the specified limit. Setting to 0 means disabled.')
sntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1))
ntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5))
sntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpStatus.setStatus('current')
if mibBuilder.loadTexts: sntpStatus.setDescription('Set enabled(1) to enable the SNTP, set disabled(2) to disable the SNTP.')
sntpServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unicast", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sntpServiceMode.setStatus('current')
if mibBuilder.loadTexts: sntpServiceMode.setDescription('Service mode.')
sntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPollInterval.setStatus('current')
if mibBuilder.loadTexts: sntpPollInterval.setDescription('Polling interval.')
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 4), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
if mibBuilder.loadTexts: sntpServerTable.setDescription('Table for SNTP servers. IP addresses must occupy contiguous indexes, starting from 1. If a removed entry is not the last entry, the table will be shifted to contiguous indexes automatically.')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "sntpServerIndex"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
if mibBuilder.loadTexts: sntpServerEntry.setDescription('Entry for SNTP servers.')
sntpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3)))
if mibBuilder.loadTexts: sntpServerIndex.setStatus('current')
if mibBuilder.loadTexts: sntpServerIndex.setDescription('The index of a server.')
sntpServerInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 4, 1, 4), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: sntpServerInetAddressType.setDescription('Indicates the type of address denoted in sntpServerInetAddress type. Only ipv4(1), ipv6(2) and ipv6z(4) types are supported.')
sntpServerInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 4, 1, 5), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: sntpServerInetAddress.setDescription('The IP address of a time server.')
sntpServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 1, 4, 1, 6), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerStatus.setStatus('current')
if mibBuilder.loadTexts: sntpServerStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
sysCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCurrentTime.setStatus('current')
if mibBuilder.loadTexts: sysCurrentTime.setDescription("This is a text string in the following form, based on Unix: 'Mmm _d hh:mm:ss yyyy'. 'Mmm' are the first three letters of the English name of the month. '_d' is the day of month. A single-digit day is preceded by a space. 'hh:mm:ss' is a 24-hour representations of hours, minutes, and seconds. A single-digit hour is preceded by a zero. 'yyyy' is a four-digit year. An example is: 'Jan 1 02:03:04 2002'.")
sysTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZone.setStatus('current')
if mibBuilder.loadTexts: sysTimeZone.setDescription("This is a text string in the following form: '[s]hh:mm'. '[s]' is a plus-or-minus sign. For UTC, this is omitted. For a positive offset, this is '+'. For a negative offset, this is '-'. 'hh:mm' in the hour and minute offset from UTC. A single-digit hour is preceded by a zero. When sysTimeZonePredefined object is set to any value other than none(1), this object will be empty string.")
sysTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZoneName.setStatus('current')
if mibBuilder.loadTexts: sysTimeZoneName.setDescription('The name of the time zone. When sysTimeZonePredefined object is set to any value other than none(1), this object will be empty string.')
ntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpStatus.setStatus('current')
if mibBuilder.loadTexts: ntpStatus.setDescription('Set enabled(1) to enable the NTP, set disabled(2) to disable the NTP.')
ntpServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("unicast", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServiceMode.setStatus('current')
if mibBuilder.loadTexts: ntpServiceMode.setDescription('Service mode.')
ntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPollInterval.setStatus('current')
if mibBuilder.loadTexts: ntpPollInterval.setDescription('Polling interval in seconds.')
ntpAuthenticateStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpAuthenticateStatus.setStatus('current')
if mibBuilder.loadTexts: ntpAuthenticateStatus.setDescription('Set enabled(1) to enable the NTP Authenticate, set disabled(2) to disable the NTP.')
ntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 5), )
if mibBuilder.loadTexts: ntpServerTable.setStatus('current')
if mibBuilder.loadTexts: ntpServerTable.setDescription('Table for NTP servers')
ntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 5, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "ntpServerIpAddress"))
if mibBuilder.loadTexts: ntpServerEntry.setStatus('current')
if mibBuilder.loadTexts: ntpServerEntry.setDescription('Entry for NTP servers.')
ntpServerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 5, 1, 1), IpAddress())
if mibBuilder.loadTexts: ntpServerIpAddress.setStatus('current')
if mibBuilder.loadTexts: ntpServerIpAddress.setDescription('The IP address of a server. Valid IP addresses must occupy contiguous indexes. All IP addresses after the last valid index is 0.')
ntpServerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpServerVersion.setStatus('current')
if mibBuilder.loadTexts: ntpServerVersion.setDescription('NTP version.')
ntpServerKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpServerKeyId.setStatus('current')
if mibBuilder.loadTexts: ntpServerKeyId.setDescription('Key for a NTP server. This variable can only be written.')
ntpServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 5, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpServerStatus.setStatus('current')
if mibBuilder.loadTexts: ntpServerStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
ntpAuthKeyTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 6), )
if mibBuilder.loadTexts: ntpAuthKeyTable.setStatus('current')
if mibBuilder.loadTexts: ntpAuthKeyTable.setDescription('Table for NTP Authentication keys')
ntpAuthKeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "ntpAuthKeyId"))
if mibBuilder.loadTexts: ntpAuthKeyEntry.setStatus('current')
if mibBuilder.loadTexts: ntpAuthKeyEntry.setDescription('Entry for NTP Authentication keys.')
ntpAuthKeyId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536)))
if mibBuilder.loadTexts: ntpAuthKeyId.setStatus('current')
if mibBuilder.loadTexts: ntpAuthKeyId.setDescription('The index of a Authentication key. This table has fixed size.')
ntpAuthKeyWord = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpAuthKeyWord.setStatus('current')
if mibBuilder.loadTexts: ntpAuthKeyWord.setDescription('The Authentication key word is used to created a key by the MD5 And the max length is 32.')
ntpAuthKeyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 23, 5, 6, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ntpAuthKeyStatus.setStatus('current')
if mibBuilder.loadTexts: ntpAuthKeyStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
fileCopyMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1))
fileInfoMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2))
fileCopySrcOperType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10))).clone(namedValues=NamedValues(("file", 1), ("runningCfg", 2), ("startUpCfg", 3), ("tftp", 4), ("unit", 5), ("http", 6), ("ftp", 7), ("sftp", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcOperType.setStatus('current')
if mibBuilder.loadTexts: fileCopySrcOperType.setDescription("fileCopySrcOperType specifies where to copy from, and fileCopyDestOperType specifies where to copy to. Possible combinations of 'fileCopySrcOperType to fileCopyDestOperType' and required parameters are listed in the following table. --------------+------------------+--------------------------------- Source | Destination | Required parameters --------------+------------------+--------------------------------- file(1) | file(1) | fileCopySrcFileName | | fileCopyDestFileName +------------------+--------------------------------- | runningCfg(2) | fileCopySrcFileName +------------------+--------------------------------- | startUpCfg(3) | fileCopySrcFileName | | fileCopyDestFileName +------------------+--------------------------------- | tftp(4) | fileCopySrcFileName | | fileCopyDestFileName | | fileCopyFileType | | fileCopyServerInetAddressType | | fileCopyServerInetAddress +------------------+--------------------------------- | unit(5) | fileCopySrcFileName | | fileCopyDestFileName | | fileCopyFileType | | fileCopyUnitId +------------------+--------------------------------- | ftp(7) | fileCopySrcFileName | | fileCopyDestFileName | | fileCopyFileType | | fileCopyServerInetAddressType | | fileCopyServerInetAddress | | fileCopyServerUserName | | fileCopyServerPassword +------------------+--------------------------------- | sftp(10) | fileCopySrcFileName | | fileCopyDestFileName | | fileCopyFileType | | fileCopyServerInetAddressType | | fileCopyServerInetAddress | | fileCopyServerUserName | | fileCopyServerPassword --------------+------------------+--------------------------------- runningCfg(2) | file(1) | fileCopyDestFileName +------------------+--------------------------------- | startUpCfg(3) | fileCopyDestFileName +------------------+--------------------------------- | tftp(4) | fileCopyDestFileName | | fileCopyServerInetAddressType | | fileCopyServerInetAddress +------------------+--------------------------------- | ftp(7) | fileCopyDestFileName | | fileCopyServerInetAddressType | | fileCopyServerInetAddress | | fileCopyServerUserName | | fileCopyServerPassword +------------------+--------------------------------- | sftp(10) | fileCopySrcFileName | | fileCopyDestFileName | | fileCopyFileType | | fileCopyServerInetAddressType | | fileCopyServerInetAddress | | fileCopyServerUserName | | fileCopyServerPassword --------------+------------------+--------------------------------- startUpCfg(3) | file(1) | fileCopyDestFileName +------------------+--------------------------------- | runningCfg(2) | None. +------------------+--------------------------------- | tftp(4) | fileCopyDestFileName | | fileCopyServerInetAddressType | | fileCopyServerInetAddress +------------------+--------------------------------- | ftp(7) | fileCopyDestFileName | | fileCopyServerInetAddressType | | fileCopyServerInetAddress | | fileCopyServerUserName | | fileCopyServerPassword +------------------+--------------------------------- | sftp(10) | fileCopySrcFileName | | fileCopyDestFileName | | fileCopyFileType | | fileCopyServerInetAddressType | | fileCopyServerInetAddress | | fileCopyServerUserName | | fileCopyServerPassword --------------+------------------+--------------------------------- tftp(4) | file(1) | fileCopySrcFileName | | fileCopyDestFileName | | fileCopyFileType | | fileCopyServerInetAddressType | | fileCopyServerInetAddress +------------------+--------------------------------- | runningCfg(2) | fileCopySrcFileName | | fileCopyServerInetAddressType | | fileCopyServerInetAddress +------------------+--------------------------------- | startUpCfg(3) | fileCopySrcFileName | | fileCopyDestFileName | | fileCopyServerInetAddressType | | fileCopyServerInetAddress +------------------+--------------------------------- | addRunningCfg(15)| fileCopySrcFileName | | fileCopyServerInetAddressType | | fileCopyServerInetAddress --------------+------------------+--------------------------------- unit(5) | file(1) | fileCopySrcFileName | | fileCopyDestFileName | | fileCopyFileType | | fileCopyUnitId --------------+------------------+--------------------------------- ftp(7) | file(1) | fileCopySrcFileName | | fileCopyDestFileName | | fileCopyFileType | | fileCopyServerInetAddressType | | fileCopyServerInetAddress | | fileCopyServerUserName | | fileCopyServerPassword +------------------+--------------------------------- | runningCfg(2) | fileCopySrcFileName | | fileCopyServerInetAddressType | | fileCopyServerInetAddress | | fileCopyServerUserName | | fileCopyServerPassword +------------------+--------------------------------- | startUpCfg(3) | fileCopySrcFileName | | fileCopyDestFileName | | fileCopyServerInetAddressType | | fileCopyServerInetAddress | | fileCopyServerUserName | | fileCopyServerPassword +------------------+--------------------------------- | addRunningCfg(15)| fileCopySrcFileName | | fileCopyServerInetAddressType | | fileCopyServerInetAddress | | fileCopyServerUserName | | fileCopyServerPassword --------------+------------------+--------------------------------- sftp(10) | file(1) | fileCopySrcFileName | | fileCopyDestFileName | | fileCopyFileType | | fileCopyServerInetAddressType | | fileCopyServerInetAddress | | fileCopyServerUserName | | fileCopyServerPassword +------------------+--------------------------------- | runningCfg(2) | fileCopySrcFileName | | fileCopyServerInetAddressType | | fileCopyServerInetAddress | | fileCopyServerUserName | | fileCopyServerPassword +------------------+--------------------------------- | startUpCfg(3) | fileCopySrcFileName | | fileCopyDestFileName | | fileCopyServerInetAddressType | | fileCopyServerInetAddress | | fileCopyServerUserName | | fileCopyServerPassword +------------------+--------------------------------- | addRunningCfg(15)| fileCopySrcFileName | | fileCopyServerInetAddressType | | fileCopyServerInetAddress | | fileCopyServerUserName | | fileCopyServerPassword --------------+------------------+---------------------------------")
fileCopySrcFileName = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopySrcFileName.setStatus('current')
if mibBuilder.loadTexts: fileCopySrcFileName.setDescription('The source file name for fileCopyMgt when a copy operation is next requested via this MIB. This value is set to a zero length string when no file name has been specified. Note: If the fileCopySrcOperType is runningCfg(2) or startUpCfg(3), this variable can be ignored.')
fileCopyDestOperType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 10, 15))).clone(namedValues=NamedValues(("file", 1), ("runningCfg", 2), ("startUpCfg", 3), ("tftp", 4), ("unit", 5), ("http", 6), ("ftp", 7), ("sftp", 10), ("addRunningCfg", 15)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDestOperType.setStatus('current')
if mibBuilder.loadTexts: fileCopyDestOperType.setDescription('See the description for fileCopySrcOperType.')
fileCopyDestFileName = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyDestFileName.setStatus('current')
if mibBuilder.loadTexts: fileCopyDestFileName.setDescription('The destination file name for fileCopyMgt when a copy operation is next requested via this MIB. This value is set to a zero length string when no file name has been specified. Note: If the fileCopyDestOperType is runningCfg(2) or startupCfg(3), this variable can be ignored.')
fileCopyFileType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5))).clone(namedValues=NamedValues(("opcode", 1), ("config", 2), ("bootRom", 3), ("loader", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyFileType.setStatus('current')
if mibBuilder.loadTexts: fileCopyFileType.setDescription('Type of file to copy in fileCopyMgt. opcode(1) indicates operation code, config(2) indicates configuration file, bootRom(3) indicates diagnostic image file and loader(5) indicates loader image file. If the fileCopySrcOperType or fileCopyDestOperType is either runningCfg(2) or startupCfg(3), this variable can be ignored. bootRom(3) and loader(5) can be set only when the fileCopySrcOperType is tftp(4) and fileCopyDestOperType is file(1).')
fileCopyUnitId = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyUnitId.setStatus('current')
if mibBuilder.loadTexts: fileCopyUnitId.setDescription("Specifies the switch unit for stackable devices. When performing the 'copy unit file' or 'copy file unit' action, if neither fileCopySrcOperType nor fileCopyDestOperType is unit(5), this variable can be ignored.")
fileCopyAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notCopying", 1), ("copy", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyAction.setStatus('current')
if mibBuilder.loadTexts: fileCopyAction.setDescription('Setting this object to copy(2) to begin the copy operation. When the device is not copying, this object will have a value of notCopying(1).')
fileCopyStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56))).clone(namedValues=NamedValues(("fileCopyTftpUndefError", 1), ("fileCopyTftpFileNotFound", 2), ("fileCopyTftpAccessViolation", 3), ("fileCopyTftpDiskFull", 4), ("fileCopyTftpIllegalOperation", 5), ("fileCopyTftpUnkownTransferId", 6), ("fileCopyTftpFileExisted", 7), ("fileCopyTftpNoSuchUser", 8), ("fileCopyTftpTimeout", 9), ("fileCopyTftpSendError", 10), ("fileCopyTftpReceiverError", 11), ("fileCopyTftpSocketOpenError", 12), ("fileCopyTftpSocketBindError", 13), ("fileCopyTftpUserCancel", 14), ("fileCopyTftpCompleted", 15), ("fileCopyParaError", 16), ("fileCopyBusy", 17), ("fileCopyUnknown", 18), ("fileCopyReadFileError", 19), ("fileCopySetStartupError", 20), ("fileCopyFileSizeExceed", 21), ("fileCopyMagicWordError", 22), ("fileCopyImageTypeError", 23), ("fileCopyHeaderChecksumError", 24), ("fileCopyImageChecksumError", 25), ("fileCopyWriteFlashFinish", 26), ("fileCopyWriteFlashError", 27), ("fileCopyWriteFlashProgramming", 28), ("fileCopyError", 29), ("fileCopySuccess", 30), ("fileCopyCompleted", 31), ("fileCopyFileNotFound", 41), ("fileCopyServerPermissionDenied", 42), ("fileCopyStorageFull", 43), ("fileCopyConnectError", 44), ("fileCopyServerNotInService", 45), ("fileCopyDataConnectionOpenError", 46), ("fileCopyLogInError", 47), ("fileCopyInvalidFileName", 48), ("fileCopyServerNotAcceptProvidedCiphers", 49), ("fileCopyServerNotSupportFtps", 50), ("fileCopyFileUnavailable", 51), ("fileCopyUnclassifiedError", 52), ("fileCopyTimeout", 53), ("fileCopyProjectIdError", 54), ("fileCopyFileNumExceed", 55), ("fileCopySameVersion", 56)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileCopyStatus.setStatus('current')
if mibBuilder.loadTexts: fileCopyStatus.setDescription('The status of the last copy procedure, if any. This object will have a value of fileCopyUnknown(18) if no copy operation has been performed. The listed values are identical to fileAutoDownloadResultStatus.')
fileCopyServerInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 20), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyServerInetAddressType.setStatus('current')
if mibBuilder.loadTexts: fileCopyServerInetAddressType.setDescription('Internet address type of the remote server. Only ipv4(1) type is supported.')
fileCopyServerInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 21), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyServerInetAddress.setStatus('current')
if mibBuilder.loadTexts: fileCopyServerInetAddress.setDescription('Internet address of the remote server.')
fileCopyServerUserName = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyServerUserName.setStatus('current')
if mibBuilder.loadTexts: fileCopyServerUserName.setDescription("Login user name for the remote server. When this variable is empty, the system will use 'anonymous' as user name to log in to the remote server.")
fileCopyServerPassword = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileCopyServerPassword.setStatus('current')
if mibBuilder.loadTexts: fileCopyServerPassword.setDescription('Login password for the remote server. This variable can only be written. When this variable is read, it always returns a zero-length string.')
fileInfoTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1), )
if mibBuilder.loadTexts: fileInfoTable.setStatus('current')
if mibBuilder.loadTexts: fileInfoTable.setDescription('This table contain the information of the file system; we can also perform the delete, set startup file operation.')
fileInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "fileInfoUnitID"), (1, "ECS2100-28PP-MIB", "fileInfoFileName"))
if mibBuilder.loadTexts: fileInfoEntry.setStatus('current')
if mibBuilder.loadTexts: fileInfoEntry.setDescription('A conceptually row for fileInfoTable.')
fileInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: fileInfoUnitID.setStatus('current')
if mibBuilder.loadTexts: fileInfoUnitID.setDescription('The switch unit in a stacking system, in a non-stacking system, this value is always 1.')
fileInfoFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: fileInfoFileName.setStatus('current')
if mibBuilder.loadTexts: fileInfoFileName.setDescription('The file Name of the file System in the device.')
fileInfoFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("diag", 1), ("runtime", 2), ("syslog", 3), ("cmdlog", 4), ("config", 5), ("postlog", 6), ("private", 7), ("certificate", 8), ("webarchive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileType.setStatus('current')
if mibBuilder.loadTexts: fileInfoFileType.setDescription('The file type of the file System in the device.')
fileInfoIsStartUp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoIsStartUp.setStatus('current')
if mibBuilder.loadTexts: fileInfoIsStartUp.setDescription('This flag indicate whether this file is a startup file. Set this object to true(1) to indicate that this is a startup file. Setting this object to false(2) is a invalid operation.')
fileInfoFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1, 5), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileSize.setStatus('current')
if mibBuilder.loadTexts: fileInfoFileSize.setDescription('The sizes( in bytes) of the file.')
fileInfoCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoCreationTime.setStatus('current')
if mibBuilder.loadTexts: fileInfoCreationTime.setDescription("The creation time of the file, This is a text string in the following form, based on Unix: 'Mmm _d hh:mm:ss yyyy'. 'Mmm' are the first three letters of the English name of the month. '_d' is the day of month. A single-digit day is preceded by a space. 'hh:mm:ss' is a 24-hour representations of hours, minutes, and seconds. A single-digit hour is preceded by a zero. 'yyyy' is the four-digit year. An example is: 'Jan 1 02:03:04 2002'.")
fileInfoDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDelete", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoDelete.setStatus('current')
if mibBuilder.loadTexts: fileInfoDelete.setDescription('Write this object to delete(2) to delete a file, when read, this always return noDelete(1).')
fileAutoDownloadResultTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 3), )
if mibBuilder.loadTexts: fileAutoDownloadResultTable.setStatus('current')
if mibBuilder.loadTexts: fileAutoDownloadResultTable.setDescription('This table contains file auto download result information.')
fileAutoDownloadResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "fileAutoDownloadResultUnitID"))
if mibBuilder.loadTexts: fileAutoDownloadResultEntry.setStatus('current')
if mibBuilder.loadTexts: fileAutoDownloadResultEntry.setDescription('A conceptual row for fileAutoDownloadResultTable.')
fileAutoDownloadResultUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1)))
if mibBuilder.loadTexts: fileAutoDownloadResultUnitID.setStatus('current')
if mibBuilder.loadTexts: fileAutoDownloadResultUnitID.setDescription('The switch unit in a stacking system, in a non-stacking system, this value is always 1.')
fileAutoDownloadResultAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notCopying", 1), ("copying", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileAutoDownloadResultAction.setStatus('current')
if mibBuilder.loadTexts: fileAutoDownloadResultAction.setDescription('The status of the auto download action. value copying(2) will be obtained if the auto download action is currently processing, or value notCopying(1) will be obtained if no auto download action is currently processing. You can check the download result through the fileAutoDownloadResultStatus object after the download action has finished. Please note that this object is read-only, since the auto download action is triggered automatically by the system when an image file or a config file is set as startup setting through the fileInfoIsStartUp, restartOpCodeFile or restartConfigFile objects, but not set by the user manually through this fileAutoDownloadResultAction object.')
fileAutoDownloadResultStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 24, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56))).clone(namedValues=NamedValues(("fileCopyTftpUndefError", 1), ("fileCopyTftpFileNotFound", 2), ("fileCopyTftpAccessViolation", 3), ("fileCopyTftpDiskFull", 4), ("fileCopyTftpIllegalOperation", 5), ("fileCopyTftpUnkownTransferId", 6), ("fileCopyTftpFileExisted", 7), ("fileCopyTftpNoSuchUser", 8), ("fileCopyTftpTimeout", 9), ("fileCopyTftpSendError", 10), ("fileCopyTftpReceiverError", 11), ("fileCopyTftpSocketOpenError", 12), ("fileCopyTftpSocketBindError", 13), ("fileCopyTftpUserCancel", 14), ("fileCopyTftpCompleted", 15), ("fileCopyParaError", 16), ("fileCopyBusy", 17), ("fileCopyUnknown", 18), ("fileCopyReadFileError", 19), ("fileCopySetStartupError", 20), ("fileCopyFileSizeExceed", 21), ("fileCopyMagicWordError", 22), ("fileCopyImageTypeError", 23), ("fileCopyHeaderChecksumError", 24), ("fileCopyImageChecksumError", 25), ("fileCopyWriteFlashFinish", 26), ("fileCopyWriteFlashError", 27), ("fileCopyWriteFlashProgramming", 28), ("fileCopyError", 29), ("fileCopySuccess", 30), ("fileCopyCompleted", 31), ("fileCopyFileNotFound", 41), ("fileCopyServerPermissionDenied", 42), ("fileCopyStorageFull", 43), ("fileCopyConnectError", 44), ("fileCopyServerNotInService", 45), ("fileCopyDataConnectionOpenError", 46), ("fileCopyLogInError", 47), ("fileCopyInvalidFileName", 48), ("fileCopyServerNotAcceptProvidedCiphers", 49), ("fileCopyServerNotSupportFtps", 50), ("fileCopyFileUnavailable", 51), ("fileCopyUnclassifiedError", 52), ("fileCopyTimeout", 53), ("fileCopyProjectIdError", 54), ("fileCopyFileNumExceed", 55), ("fileCopySameVersion", 56)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileAutoDownloadResultStatus.setStatus('current')
if mibBuilder.loadTexts: fileAutoDownloadResultStatus.setDescription('The last auto download result status. value fileCopyUnknown(18) will be obtained if no download action has been performed before. The listed values are identical to fileCopyStatus.')
pethPseMainExtTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 5), )
if mibBuilder.loadTexts: pethPseMainExtTable.setReference('IEEE 802.3af, POWER-ETHERNET-MIB.pethMainPseTable')
if mibBuilder.loadTexts: pethPseMainExtTable.setStatus('current')
if mibBuilder.loadTexts: pethPseMainExtTable.setDescription('A table of objects that display and control attributes of the main power source in a PSE device. Ethernet switches are one example of boxes that would support these objects. Values of all read-write objects in this table are persistent at restart/reboot.')
pethPseMainExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 5, 1), )
pethMainPseEntry.registerAugmentions(("ECS2100-28PP-MIB", "pethPseMainExtEntry"))
pethPseMainExtEntry.setIndexNames(*pethMainPseEntry.getIndexNames())
if mibBuilder.loadTexts: pethPseMainExtEntry.setStatus('current')
if mibBuilder.loadTexts: pethPseMainExtEntry.setDescription('A set of objects that display and control the Main power of a PSE.')
pethPseMainExtDllPowerType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("type2Pse", 0), ("type1Pse", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPseMainExtDllPowerType.setReference('IEEE Std 802.3at Section 30.9.1.1.12 aDLLPowerType')
if mibBuilder.loadTexts: pethPseMainExtDllPowerType.setStatus('current')
if mibBuilder.loadTexts: pethPseMainExtDllPowerType.setDescription('Indicates whether the local system is a PSE or a PD and whether it is Type 1 or Type 2.')
pethPseMainExtDllPowerSource = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unknown", 0), ("primary", 1), ("backup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPseMainExtDllPowerSource.setReference('IEEE Std 802.3at Section 30.9.1.1.14 aDLLPowerSource')
if mibBuilder.loadTexts: pethPseMainExtDllPowerSource.setStatus('current')
if mibBuilder.loadTexts: pethPseMainExtDllPowerSource.setDescription('The power sources of the local system.')
pethPsePortExtTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6), )
if mibBuilder.loadTexts: pethPsePortExtTable.setReference('IEEE 802.3af, POWER-ETHERNET-MIB.pethPsePortTable')
if mibBuilder.loadTexts: pethPsePortExtTable.setStatus('current')
if mibBuilder.loadTexts: pethPsePortExtTable.setDescription('A table of objects that display and control the power characteristics of power Ethernet ports on a Power Source Entity (PSE) device. This group will be implemented in managed power Ethernet switches and mid-span devices. Values of all read-write objects in this table are persistent at restart/reboot.')
pethPsePortExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6, 1), )
pethPsePortEntry.registerAugmentions(("ECS2100-28PP-MIB", "pethPsePortExtEntry"))
pethPsePortExtEntry.setIndexNames(*pethPsePortEntry.getIndexNames())
if mibBuilder.loadTexts: pethPsePortExtEntry.setStatus('current')
if mibBuilder.loadTexts: pethPsePortExtEntry.setDescription('A set of objects that display and control the power characteristics of a power Ethernet PSE port.')
pethPsePortExtMirroredDllPdRequestedPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortExtMirroredDllPdRequestedPowerValue.setReference('IEEE Std 802.3at Section 30.9.1.1.18 aMirroredDLLPDRequestedPowerValue')
if mibBuilder.loadTexts: pethPsePortExtMirroredDllPdRequestedPowerValue.setStatus('current')
if mibBuilder.loadTexts: pethPsePortExtMirroredDllPdRequestedPowerValue.setDescription('Returns the PD requested power value received from the remote system. The definition and encoding of PD requested power value is the same as described in pethPdPortDllPdRequestedPowerValue.')
pethPsePortExtDllPseAllocatedPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortExtDllPseAllocatedPowerValue.setReference('IEEE Std 802.3at Section 30.9.1.1.20 aDLLPSEAllocatedPowerValue')
if mibBuilder.loadTexts: pethPsePortExtDllPseAllocatedPowerValue.setStatus('current')
if mibBuilder.loadTexts: pethPsePortExtDllPseAllocatedPowerValue.setDescription('Returns the PSE allocated power value that the local system has currently allocated to the remote system. The PSE allocated power value is the maximum input average power that the PSE wants the PD to ever draw under this allocation if it is accepted. The PSE allocated power value is encoded according to Equation (33-20), where X is the decimal value of pethPsePortExtDllPseAllocatedPowerValue.')
pethPsePortTimeRange = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortTimeRange.setStatus('current')
if mibBuilder.loadTexts: pethPsePortTimeRange.setDescription('The name of the time range entry bound to the port. This object should be equal to one of the timeRangeName objects in timeRangeTable. The object works when pethPsePortAdminEnable is enabled(1).')
pethPsePortTimeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortTimeRangeStatus.setStatus('current')
if mibBuilder.loadTexts: pethPsePortTimeRangeStatus.setDescription('If no time range entry is bound to the port, value of this object is none(0). If PoE time range of the port is active, value of this object is active(1). If PoE time range of the port is inactive, value of this object is inactive(2).')
pethPsePortExtMaximumPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3000, 34200))).setUnits('milliwatts').setMaxAccess("readwrite")
if mibBuilder.loadTexts: pethPsePortExtMaximumPowerValue.setStatus('current')
if mibBuilder.loadTexts: pethPsePortExtMaximumPowerValue.setDescription('Returns the user-configurable maximum power value that the local system has currently allocated to the remote system. The units of this variable is milliwatts.')
pethPsePortExtUsedPowerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 28, 6, 1, 14), Integer32()).setUnits('milliwatts').setMaxAccess("readonly")
if mibBuilder.loadTexts: pethPsePortExtUsedPowerValue.setStatus('current')
if mibBuilder.loadTexts: pethPsePortExtUsedPowerValue.setDescription('Returns the currently used power value that the local system is delivering to the remote system. The units of this variable is milliwatts.')
mcastStormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 1))
mcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 1, 1), )
if mibBuilder.loadTexts: mcastStormTable.setStatus('current')
if mibBuilder.loadTexts: mcastStormTable.setDescription('Table to manage the control of multicast storms for ports.')
mcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 1, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mcastStormIfIndex"))
if mibBuilder.loadTexts: mcastStormEntry.setStatus('current')
if mibBuilder.loadTexts: mcastStormEntry.setDescription('The conceptual row of multiStormTable.')
mcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 1, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: mcastStormIfIndex.setStatus('current')
if mibBuilder.loadTexts: mcastStormIfIndex.setDescription('The port and the trunk (including trunk members) interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
mcastStormStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 1, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastStormStatus.setStatus('current')
if mibBuilder.loadTexts: mcastStormStatus.setDescription('Whether multicast storm protection is enabled.')
mcastStormPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 1, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastStormPktRate.setStatus('current')
if mibBuilder.loadTexts: mcastStormPktRate.setDescription('Multicast storm threshold as packets per second. If this entry is for a trunk, this is the value for each member port. The range is 500 to 1488100.')
mcastStormPktRateResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mcastStormPktRateResolution.setStatus('current')
if mibBuilder.loadTexts: mcastStormPktRateResolution.setDescription("Present the rate's resolution. Its unit is packets per second")
bcastStormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 3))
bcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 3, 1), )
if mibBuilder.loadTexts: bcastStormTable.setStatus('current')
if mibBuilder.loadTexts: bcastStormTable.setDescription('Table to manage the control of broadcast storms for ports.')
bcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 3, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "bcastStormIfIndex"))
if mibBuilder.loadTexts: bcastStormEntry.setStatus('current')
if mibBuilder.loadTexts: bcastStormEntry.setDescription('The conceptual row of bcastStormTable.')
bcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: bcastStormIfIndex.setStatus('current')
if mibBuilder.loadTexts: bcastStormIfIndex.setDescription('The port and the trunk (including trunk members) interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
bcastStormStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 3, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormStatus.setStatus('current')
if mibBuilder.loadTexts: bcastStormStatus.setDescription('Whether broadcast storm protection is enabled.')
bcastStormPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 3, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormPktRate.setStatus('current')
if mibBuilder.loadTexts: bcastStormPktRate.setDescription('Broadcast storm threshold as packets per second. If this entry is for a trunk, this is the value for each member port. The range is 500 to 1488100.')
bcastStormPktRateResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bcastStormPktRateResolution.setStatus('current')
if mibBuilder.loadTexts: bcastStormPktRateResolution.setDescription("Present the rate's resolution. Its unit is packets per second")
unknownUcastStormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 4))
unknownUcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 4, 1), )
if mibBuilder.loadTexts: unknownUcastStormTable.setStatus('current')
if mibBuilder.loadTexts: unknownUcastStormTable.setDescription('Table to manage the unknown unicast storm control.')
unknownUcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 4, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "unknownUcastStormIfIndex"))
if mibBuilder.loadTexts: unknownUcastStormEntry.setStatus('current')
if mibBuilder.loadTexts: unknownUcastStormEntry.setDescription('The conceptual row of unknownUcastStormTable.')
unknownUcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 4, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: unknownUcastStormIfIndex.setStatus('current')
if mibBuilder.loadTexts: unknownUcastStormIfIndex.setDescription('The port or trunk interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
unknownUcastStormStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 4, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownUcastStormStatus.setStatus('current')
if mibBuilder.loadTexts: unknownUcastStormStatus.setDescription('The parameter indicates that the unknown unicast storm protection is enabled/disabled.')
unknownUcastStormPktRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: unknownUcastStormPktRate.setStatus('current')
if mibBuilder.loadTexts: unknownUcastStormPktRate.setDescription('The parameter indicates the packet rate(packet per second) of the storm protection. The range is 500 to 1488100.')
unknownUcastStormPktRateResolution = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: unknownUcastStormPktRateResolution.setStatus('current')
if mibBuilder.loadTexts: unknownUcastStormPktRateResolution.setDescription("Present the rate's resolution. Its unit is packets per second")
atcMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5))
atcBcastStormTcApplyTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormTcApplyTime.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormTcApplyTime.setDescription('The parameter indicates the timing when the ATC (Auto Traffic Control) is activated after the broadcast traffic being detected as the storm.')
atcBcastStormTcReleaseTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormTcReleaseTime.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormTcReleaseTime.setDescription('The parameter indicates the timing when the ATC is released after the broadcast traffic being detected as no storm.')
atcBcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3), )
if mibBuilder.loadTexts: atcBcastStormTable.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormTable.setDescription('The table contains the Auto Traffic Control configuration and the status for broadcast traffic.')
atcBcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "atcBcastStormIfIndex"))
if mibBuilder.loadTexts: atcBcastStormEntry.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormEntry.setDescription('The conceptual row of the table.')
atcBcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atcBcastStormIfIndex.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormIfIndex.setDescription('The specified port on which the ATC is applied.')
atcBcastStormEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormEnable.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormEnable.setDescription('The parameter indicates whether the ATC of the broadcast traffic is applied.')
atcBcastStormAutoRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormAutoRelease.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormAutoRelease.setDescription('The parameter indicates whether the Auto-Release feature of ATC is applied.')
atcBcastStormSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("packet-rate", 1), ("octet-rate", 2), ("percent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormSampleType.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormSampleType.setDescription('The parameter indicates the unit of traffic rate and threshold.')
atcBcastStormCurrentTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atcBcastStormCurrentTrafficRate.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormCurrentTrafficRate.setDescription('The parameter indicates the current broadcast traffic rate.')
atcBcastStormAlarmFireThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormAlarmFireThreshold.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormAlarmFireThreshold.setDescription('The parameter indicates that if the current broadcast traffic rate exceeds the specified threshold, it will be treated as the storm.')
atcBcastStormAlarmClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormAlarmClearThreshold.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormAlarmClearThreshold.setDescription('The parameter indicates that if the current broadcast traffic falls below the specified threshold it will be treated as the normal traffic.')
atcBcastStormTcAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate-control", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormTcAction.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormTcAction.setDescription('The parameter indicates the protecting action which ATC will applied to the specified port.')
atcBcastStormAlarmFireTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 9), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormAlarmFireTrapStatus.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormAlarmFireTrapStatus.setDescription('The parameter indicates whether the trap has to be sent when the broadcast storm has been detected.')
atcBcastStormAlarmClearTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 10), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormAlarmClearTrapStatus.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormAlarmClearTrapStatus.setDescription('The parameter indicates whether the trap has to be sent when the broadcast storm has been detected as the normal traffic.')
atcBcastStormTcApplyTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 11), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormTcApplyTrapStatus.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormTcApplyTrapStatus.setDescription('The parameter indicates whether the trap has to be sent when the ATC is activated.')
atcBcastStormTcReleaseTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 3, 1, 12), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcBcastStormTcReleaseTrapStatus.setStatus('current')
if mibBuilder.loadTexts: atcBcastStormTcReleaseTrapStatus.setDescription('The parameter indicates whether the trap has to be sent when the ATC is released.')
atcMcastStormTcApplyTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormTcApplyTime.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormTcApplyTime.setDescription('The parameter indicates the timing when the ATC (Auto Traffic Control) is activated after the broadcast traffic being detected as the storm.')
atcMcastStormTcReleaseTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormTcReleaseTime.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormTcReleaseTime.setDescription('The parameter indicates the timing when the ATC is released after the broadcast traffic being detected as no storm.')
atcMcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6), )
if mibBuilder.loadTexts: atcMcastStormTable.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormTable.setDescription('The table contains the Auto Traffic Control configuration and the status for mulicast traffic.')
atcMcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "atcMcastStormIfIndex"))
if mibBuilder.loadTexts: atcMcastStormEntry.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormEntry.setDescription('The conceptual row of the table.')
atcMcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 1), InterfaceIndex()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: atcMcastStormIfIndex.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormIfIndex.setDescription('The specified port on which the ATC is applied.')
atcMcastStormEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormEnable.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormEnable.setDescription('The parameter indicates whether the ATC of the mulicast traffic is applied.')
atcMcastStormAutoRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormAutoRelease.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormAutoRelease.setDescription('The parameter indicates whether the Auto-Release feature of ATC is applied.')
atcMcastStormSampleType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("packet-rate", 1), ("octet-rate", 2), ("percent", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormSampleType.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormSampleType.setDescription('The parameter indicates the unit of traffic rate and threshold.')
atcMcastStormCurrentTrafficRate = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: atcMcastStormCurrentTrafficRate.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormCurrentTrafficRate.setDescription('The parameter indicates the current mulicast traffic rate.')
atcMcastStormAlarmFireThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormAlarmFireThreshold.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormAlarmFireThreshold.setDescription('The parameter indicates that if the current mulicast traffic rate exceeds the specified threshold, it will be treated as the storm.')
atcMcastStormAlarmClearThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormAlarmClearThreshold.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormAlarmClearThreshold.setDescription('The parameter indicates that if the current mulicast traffic falls below the specified threshold it will be treated as the normal traffic.')
atcMcastStormTcAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rate-control", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormTcAction.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormTcAction.setDescription('The parameter indicates the protecting action which ATC will applied to the specified port.')
atcMcastStormAlarmFireTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 9), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormAlarmFireTrapStatus.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormAlarmFireTrapStatus.setDescription('The parameter indicates whether the trap has to be sent when the mulicast storm has been detected.')
atcMcastStormAlarmClearTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 10), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormAlarmClearTrapStatus.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormAlarmClearTrapStatus.setDescription('The parameter indicates whether the trap has to be sent when the mulicast storm has been detected as the normal traffic.')
atcMcastStormTcApplyTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 11), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormTcApplyTrapStatus.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormTcApplyTrapStatus.setDescription('The parameter indicates whether the trap has to be sent when the ATC is activated.')
atcMcastStormTcReleaseTrapStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 33, 5, 6, 1, 12), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: atcMcastStormTcReleaseTrapStatus.setStatus('current')
if mibBuilder.loadTexts: atcMcastStormTcReleaseTrapStatus.setDescription('The parameter indicates whether the trap has to be sent when the ATC is released.')
cpuStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2))
memoryStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 3))
cpuCurrentUti = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuCurrentUti.setStatus('current')
if mibBuilder.loadTexts: cpuCurrentUti.setDescription('The current CPU utilization in percent in the past 5 seconds.')
cpuStatMaxUti = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatMaxUti.setStatus('current')
if mibBuilder.loadTexts: cpuStatMaxUti.setDescription('The maximum CPU utilization in percent in the past 60 seconds.')
cpuStatAvgUti = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStatAvgUti.setStatus('current')
if mibBuilder.loadTexts: cpuStatAvgUti.setDescription('The average CPU utilization in percent in the past 60 seconds.')
cpuPeakTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPeakTime.setStatus('current')
if mibBuilder.loadTexts: cpuPeakTime.setDescription("The time when the CPU utilization reaches cpuUtiRisingThreshold in the format of 'Mmm _d hh:mm:ss yyyy' as defined in sysCurrentTime of this MIB.")
cpuPeakDuration = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2, 5), Integer32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuPeakDuration.setStatus('current')
if mibBuilder.loadTexts: cpuPeakDuration.setDescription('The duration from the CPU utilization reaches cpuUtiRisingThreshold to reaches cpuUtiFallingThreshold, in seconds.')
cpuUtiRisingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuUtiRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: cpuUtiRisingThreshold.setDescription('The rising threshold of the cpu utilization.')
cpuUtiFallingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuUtiFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: cpuUtiFallingThreshold.setDescription('The falling threshold of the cpu utilization.')
memoryTotal = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryTotal.setStatus('current')
if mibBuilder.loadTexts: memoryTotal.setDescription('The total amount of the memory in kilobytes.')
memoryAllocated = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryAllocated.setStatus('current')
if mibBuilder.loadTexts: memoryAllocated.setDescription('The amount of the memory allocated in kilobytes.')
memoryFreed = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryFreed.setStatus('current')
if mibBuilder.loadTexts: memoryFreed.setDescription('The amount of the free memory in kilobytes.')
memoryFreedInPercent = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: memoryFreedInPercent.setStatus('current')
if mibBuilder.loadTexts: memoryFreedInPercent.setDescription('the memory freed in proportion to the total memory.')
memoryUtiRisingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: memoryUtiRisingThreshold.setStatus('current')
if mibBuilder.loadTexts: memoryUtiRisingThreshold.setDescription('The rising threshold of the memory utilization.')
memoryUtiFallingThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setUnits('%').setMaxAccess("readwrite")
if mibBuilder.loadTexts: memoryUtiFallingThreshold.setStatus('current')
if mibBuilder.loadTexts: memoryUtiFallingThreshold.setDescription('The falling threshold of the memory utilization.')
taskCpuTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 4), )
if mibBuilder.loadTexts: taskCpuTable.setStatus('current')
if mibBuilder.loadTexts: taskCpuTable.setDescription('Table of descriptive and status information describing the CPU utilization of each task.')
taskCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 4, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "taskCpuName"))
if mibBuilder.loadTexts: taskCpuEntry.setStatus('current')
if mibBuilder.loadTexts: taskCpuEntry.setDescription('An entry in the table, describing the CPU utilization of one task.')
taskCpuName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 4, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15)))
if mibBuilder.loadTexts: taskCpuName.setStatus('current')
if mibBuilder.loadTexts: taskCpuName.setDescription('The name of the task.')
taskCpuCurrentUti = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskCpuCurrentUti.setStatus('current')
if mibBuilder.loadTexts: taskCpuCurrentUti.setDescription('The current CPU utilization in hundredths of a percent in the past 5 seconds.')
taskCpuStatMaxUti = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskCpuStatMaxUti.setStatus('current')
if mibBuilder.loadTexts: taskCpuStatMaxUti.setDescription('The maximum CPU utilization in hundredths of a percent in the past 60 seconds.')
taskCpuStatAvgUti = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: taskCpuStatAvgUti.setStatus('current')
if mibBuilder.loadTexts: taskCpuStatAvgUti.setDescription('The average CPU utilization in hundredths of a percent in the past 60 seconds.')
cpuGuard = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5))
cpuGuardStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuGuardStatus.setStatus('current')
if mibBuilder.loadTexts: cpuGuardStatus.setDescription('The CPU guard status.')
cpuGuardHighWatermark = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuGuardHighWatermark.setStatus('current')
if mibBuilder.loadTexts: cpuGuardHighWatermark.setDescription('The CPU guard high-watermark.')
cpuGuardLowWatermark = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuGuardLowWatermark.setStatus('current')
if mibBuilder.loadTexts: cpuGuardLowWatermark.setDescription('The CPU guard low-watermark.')
cpuGuardMaxThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuGuardMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: cpuGuardMaxThreshold.setDescription('The CPU guard maximum threshold.')
cpuGuardMinThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuGuardMinThreshold.setStatus('current')
if mibBuilder.loadTexts: cpuGuardMinThreshold.setDescription('The CPU guard minimum threshold.')
cpuGuardTrapStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cpuGuardTrapStatus.setStatus('current')
if mibBuilder.loadTexts: cpuGuardTrapStatus.setDescription('The CPU guard trap status.')
cpuGuardCurrentThreshold = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 39, 5, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuGuardCurrentThreshold.setStatus('current')
if mibBuilder.loadTexts: cpuGuardCurrentThreshold.setDescription('The current CPU guard threshold.')
mvrForwardingPriority = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrForwardingPriority.setStatus('current')
if mibBuilder.loadTexts: mvrForwardingPriority.setDescription('Configure MVR multicast stream forwarding priority. If value is 65535, it means the priority is disabled.')
mvrDomainTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20), )
if mibBuilder.loadTexts: mvrDomainTable.setStatus('current')
if mibBuilder.loadTexts: mvrDomainTable.setDescription('The table for configuring the MVR port.')
mvrDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrDomainId"))
if mibBuilder.loadTexts: mvrDomainEntry.setStatus('current')
if mibBuilder.loadTexts: mvrDomainEntry.setDescription('The entry for configuring the MVR Domain.')
mvrDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mvrDomainId.setStatus('current')
if mibBuilder.loadTexts: mvrDomainId.setDescription('Speicfies which MVR domain to configure.')
mvrDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainStatus.setStatus('current')
if mibBuilder.loadTexts: mvrDomainStatus.setDescription('Parameter to enable or disable MVR(Multicast VLAN Registration) on the device.')
mvrDomainRunningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrDomainRunningStatus.setStatus('current')
if mibBuilder.loadTexts: mvrDomainRunningStatus.setDescription('Describes the running status of MVR (Multicast VLAN Registration) to the switch. A value of active(1) indicates that all necessary conditions in the MVR environment are satisfied. A value of inactive(2) indicates that some necessary conditions in the MVR environment are not satisfied.')
mvrDomainVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20, 1, 4), VlanIndex()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainVlanId.setStatus('current')
if mibBuilder.loadTexts: mvrDomainVlanId.setDescription('To set VLAN for MVR.The VLAN identified by a particular value of this index is the same VLAN as identified by the same value of dot1qVlanIndex in the Q-BRIDGE-MIB.')
mvrDomainUpstreamSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainUpstreamSourceIp.setStatus('current')
if mibBuilder.loadTexts: mvrDomainUpstreamSourceIp.setDescription('Set the source IP address which MVR will carry in IP header when send IGMP packet to upstream router through MVR source port.')
mvrDomainClearDynamicGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 20, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainClearDynamicGroups.setStatus('current')
if mibBuilder.loadTexts: mvrDomainClearDynamicGroups.setDescription('Clear dynamic learned groups')
mvrDomainPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21), )
if mibBuilder.loadTexts: mvrDomainPortTable.setStatus('current')
if mibBuilder.loadTexts: mvrDomainPortTable.setDescription('The table for configuring the MVR port.')
mvrDomainPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrPortDomainId"), (0, "ECS2100-28PP-MIB", "mvrDomainIfIndex"))
if mibBuilder.loadTexts: mvrDomainPortEntry.setStatus('current')
if mibBuilder.loadTexts: mvrDomainPortEntry.setDescription('The entry for configuring the MVR port.')
mvrPortDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mvrPortDomainId.setStatus('current')
if mibBuilder.loadTexts: mvrPortDomainId.setDescription('Speicfies which MVR domain to configure.')
mvrDomainIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: mvrDomainIfIndex.setStatus('current')
if mibBuilder.loadTexts: mvrDomainIfIndex.setDescription('The port interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
mvrDomainPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("source", 1), ("receiver", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainPortType.setStatus('current')
if mibBuilder.loadTexts: mvrDomainPortType.setDescription('For configuring the MVR port type. To disable the MVR port type, use the none(0).')
mvrDomainPortImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainPortImmediateLeave.setStatus('current')
if mibBuilder.loadTexts: mvrDomainPortImmediateLeave.setDescription('To enable immediate leave on MVR port.')
mvrDomainPortActive = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("inactive", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrDomainPortActive.setStatus('current')
if mibBuilder.loadTexts: mvrDomainPortActive.setDescription('To indicate if the port is associated with the MVR group. If the port is the MVR receiver port or the MVR source port in MVR vlan, the status is active(1); otherwise the status is inactive(2).')
mvrDomainPortImmediateLeaveByHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 21, 1, 6), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainPortImmediateLeaveByHostIp.setStatus('current')
if mibBuilder.loadTexts: mvrDomainPortImmediateLeaveByHostIp.setDescription('To enable immediate leave by host IP on MVR port.')
mvrProfileTable = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22))
mvrProfileCtlTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 1), )
if mibBuilder.loadTexts: mvrProfileCtlTable.setStatus('current')
if mibBuilder.loadTexts: mvrProfileCtlTable.setDescription('The entry for configuring the MVR profile.')
mvrProfileCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrProfileCtlId"))
if mibBuilder.loadTexts: mvrProfileCtlEntry.setStatus('current')
if mibBuilder.loadTexts: mvrProfileCtlEntry.setDescription('The entry for configuring the MVR profile.')
mvrProfileCtlId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: mvrProfileCtlId.setStatus('current')
if mibBuilder.loadTexts: mvrProfileCtlId.setDescription('Profile ID to index which MVR profile')
mvrProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 1, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProfileName.setStatus('current')
if mibBuilder.loadTexts: mvrProfileName.setDescription('MVR Profile name which identify a group range. NOTE: All mvrProfileCtlEntry use the same buffer to temply store the mvrProfileName before mvrProfileCtlAction really creat the profile.')
mvrProfileCtlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAction", 0), ("create", 1), ("destory", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProfileCtlAction.setStatus('current')
if mibBuilder.loadTexts: mvrProfileCtlAction.setDescription('Set this object to create(2) to create profile. Set this object to destory(3) to delete profile. When the action is complete, this object becomes noAction(1).')
mvrProfileGroupCtlTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 2), )
if mibBuilder.loadTexts: mvrProfileGroupCtlTable.setStatus('current')
if mibBuilder.loadTexts: mvrProfileGroupCtlTable.setDescription('The entry for configuring the MVR group ranges for MVR profile.')
mvrProfileGroupCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrProfileGropuCtlProfileId"), (0, "ECS2100-28PP-MIB", "mvrProfileGroupCtlId"))
if mibBuilder.loadTexts: mvrProfileGroupCtlEntry.setStatus('current')
if mibBuilder.loadTexts: mvrProfileGroupCtlEntry.setDescription('The entry for configuring the group ranges on MVR profile.')
mvrProfileGropuCtlProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)))
if mibBuilder.loadTexts: mvrProfileGropuCtlProfileId.setStatus('current')
if mibBuilder.loadTexts: mvrProfileGropuCtlProfileId.setDescription('Profile ID to index which MVR profile')
mvrProfileGroupCtlId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: mvrProfileGroupCtlId.setStatus('current')
if mibBuilder.loadTexts: mvrProfileGroupCtlId.setDescription('Profile ID to index which group range in MVR profile')
mvrProfileGroupStartIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProfileGroupStartIPAddress.setStatus('current')
if mibBuilder.loadTexts: mvrProfileGroupStartIPAddress.setDescription('MVR Profile range start IP address. NOTE: All mvrProfileGroupCtlEntry use the same buffer to temply store the mvrProfileStartIPAddress before mvrProfileGroupCtlAction really creat the group rang on profile.')
mvrProfileGroupEndIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProfileGroupEndIPAddress.setStatus('current')
if mibBuilder.loadTexts: mvrProfileGroupEndIPAddress.setDescription('MVR Profile range end IP address. NOTE: All mvrProfileGroupCtlEntry use the same buffer to temply store the mvrProfileEndIPAddress before mvrProfileGroupCtlAction really creat the group rang on profile.')
mvrProfileGroupCtlAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 22, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAction", 0), ("create", 1), ("destory", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProfileGroupCtlAction.setStatus('current')
if mibBuilder.loadTexts: mvrProfileGroupCtlAction.setDescription("Set this object to create(2) to create group range. Set this object to destory(3) to delete group range. When the action is complete, this object becomes noAction(1). NOTE: If mvrProfileGroupStartIPAddress and mvrProfileGroupEndIPAddress pattern already exist on other mvrProfileGroupCtlId, it won't be stored. ")
mvrDomainAssociatedProfileTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 23), )
if mibBuilder.loadTexts: mvrDomainAssociatedProfileTable.setStatus('current')
if mibBuilder.loadTexts: mvrDomainAssociatedProfileTable.setDescription('Configure MVR domain associate which MVR profile')
mvrDomainAssociatedProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 23, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrProfileDomainId"), (0, "ECS2100-28PP-MIB", "mvrProfileId"))
if mibBuilder.loadTexts: mvrDomainAssociatedProfileEntry.setStatus('current')
if mibBuilder.loadTexts: mvrDomainAssociatedProfileEntry.setDescription('The entry for configuring MVR domain associate MVR profile.')
mvrProfileDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mvrProfileDomainId.setStatus('current')
if mibBuilder.loadTexts: mvrProfileDomainId.setDescription('Profile ID to index which MVR profile')
mvrProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 23, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: mvrProfileId.setStatus('current')
if mibBuilder.loadTexts: mvrProfileId.setDescription('Profile ID to index which MVR profile')
mvrProfileAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 23, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noAction", 0), ("create", 1), ("destory", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProfileAction.setStatus('current')
if mibBuilder.loadTexts: mvrProfileAction.setDescription('Set this object to create(1) to associate profile. Set this object to destory(2) to deassociate profile. When the action is complete, this object becomes noAction(0).')
mvrDomainGroupStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 24), )
if mibBuilder.loadTexts: mvrDomainGroupStaticTable.setStatus('current')
if mibBuilder.loadTexts: mvrDomainGroupStaticTable.setDescription('The table for configuring the static members of the MVR group.')
mvrDomainGroupStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 24, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrGroupStaticDomainId"), (0, "ECS2100-28PP-MIB", "mvrDomainGroupStaticAddress"), (0, "ECS2100-28PP-MIB", "mvrDomainGroupStaticReceiverVlan"))
if mibBuilder.loadTexts: mvrDomainGroupStaticEntry.setStatus('current')
if mibBuilder.loadTexts: mvrDomainGroupStaticEntry.setDescription('The entry for configuring the static members of the MVR group.')
mvrGroupStaticDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 24, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mvrGroupStaticDomainId.setStatus('current')
if mibBuilder.loadTexts: mvrGroupStaticDomainId.setDescription('Profile ID to index which MVR profile')
mvrDomainGroupStaticAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 24, 1, 2), IpAddress())
if mibBuilder.loadTexts: mvrDomainGroupStaticAddress.setStatus('current')
if mibBuilder.loadTexts: mvrDomainGroupStaticAddress.setDescription('The multicast address of the MVR group.')
mvrDomainGroupStaticReceiverVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 24, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: mvrDomainGroupStaticReceiverVlan.setStatus('current')
if mibBuilder.loadTexts: mvrDomainGroupStaticReceiverVlan.setDescription('The receiver vlan of this MVR group')
mvrDomainGroupStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 24, 1, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrDomainGroupStaticPorts.setStatus('current')
if mibBuilder.loadTexts: mvrDomainGroupStaticPorts.setDescription('The set of ports configured by management in this entry. Ports entered in this list will be the static members of this MVR group.')
mvrDomainGroupCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 25), )
if mibBuilder.loadTexts: mvrDomainGroupCurrentTable.setStatus('current')
if mibBuilder.loadTexts: mvrDomainGroupCurrentTable.setDescription('The table for the current members of the MVR group.')
mvrDomainGroupCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 25, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrGroupCurrenDomainId"), (0, "ECS2100-28PP-MIB", "mvrDomainGroupCurrentAddress"), (0, "ECS2100-28PP-MIB", "mvrDomainGroupCurrentReceiverVlan"))
if mibBuilder.loadTexts: mvrDomainGroupCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: mvrDomainGroupCurrentEntry.setDescription('The entry for the current members of the MVR group.')
mvrGroupCurrenDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 25, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mvrGroupCurrenDomainId.setStatus('current')
if mibBuilder.loadTexts: mvrGroupCurrenDomainId.setDescription('Profile ID to index which MVR profile')
mvrDomainGroupCurrentAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 25, 1, 2), IpAddress())
if mibBuilder.loadTexts: mvrDomainGroupCurrentAddress.setStatus('current')
if mibBuilder.loadTexts: mvrDomainGroupCurrentAddress.setDescription('The multicast address of the MVR group.')
mvrDomainGroupCurrentReceiverVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 25, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4093)))
if mibBuilder.loadTexts: mvrDomainGroupCurrentReceiverVlan.setStatus('current')
if mibBuilder.loadTexts: mvrDomainGroupCurrentReceiverVlan.setDescription('This object indicates the receiver VLAN of the MVR group.')
mvrDomainGroupCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 25, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrDomainGroupCurrentPorts.setStatus('current')
if mibBuilder.loadTexts: mvrDomainGroupCurrentPorts.setDescription('The complete set of ports currently associated with this MVR group.')
mvrProxySwitching = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 27), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProxySwitching.setStatus('current')
if mibBuilder.loadTexts: mvrProxySwitching.setDescription('Parameter to enable or disable MVR(Multicast VLAN Registration) proxy switching ability on the device. ')
mvrRobustnessValue = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 28), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrRobustnessValue.setStatus('current')
if mibBuilder.loadTexts: mvrRobustnessValue.setDescription('Paremete to set IGMP robustness value. This value apply to proxy-switching for how many IGMP report/leave will be send out from source port, and how many g-s query will be send on receiver port. ')
mvrProxyQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 29), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrProxyQueryInterval.setStatus('current')
if mibBuilder.loadTexts: mvrProxyQueryInterval.setDescription('Set the query interval that active receiver port will use to send out general query ')
mvrSourcePortmode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("forward", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrSourcePortmode.setStatus('current')
if mibBuilder.loadTexts: mvrSourcePortmode.setDescription("Paremete to set MVR Source Port forward mode. When set dynamic, MVR source port won't forward multicast streams received from other source port. When set forward, MVR source port will forward multicast streams received from other source port. These multicast stream all are in MVR group range. ")
mvrPortStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32), )
if mibBuilder.loadTexts: mvrPortStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsTable.setDescription('Table of service per port.')
mvrPortStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrPortStatisticsDomainId"), (0, "ECS2100-28PP-MIB", "mvrPortStatisticsPortIndex"))
if mibBuilder.loadTexts: mvrPortStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsEntry.setDescription('Entry of service per port.')
mvrPortStatisticsDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mvrPortStatisticsDomainId.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsDomainId.setDescription('MVR domain ID.')
mvrPortStatisticsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: mvrPortStatisticsPortIndex.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsPortIndex.setDescription('The port and the trunk (excluding trunk members) interface of the mvrPortTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
mvrPortStatisticsNumGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumGroups.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsNumGroups.setDescription('Current learned groups ')
mvrPortStatisticsNumJoinSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumJoinSend.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsNumJoinSend.setDescription('Number of join send ')
mvrPortStatisticsNumJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumJoins.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsNumJoins.setDescription('Number of join recieved ')
mvrPortStatisticsNumJoinSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumJoinSuccess.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsNumJoinSuccess.setDescription('Number of join group success ')
mvrPortStatisticsNumLeavesSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumLeavesSend.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsNumLeavesSend.setDescription('Number of leave send')
mvrPortStatisticsNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumLeaves.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsNumLeaves.setDescription('Number of leave received ')
mvrPortStatisticsNumGeneralQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumGeneralQuerySend.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsNumGeneralQuerySend.setDescription('Number of general query send. ')
mvrPortStatisticsNumGeneralQueryRecevied = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumGeneralQueryRecevied.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsNumGeneralQueryRecevied.setDescription('Number of general query received. ')
mvrPortStatisticsNumSepcificQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumSepcificQuerySend.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsNumSepcificQuerySend.setDescription('Number of specific query send. ')
mvrPortStatisticsNumSpecificQueryReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumSpecificQueryReceived.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsNumSpecificQueryReceived.setDescription('Number of specific query received. ')
mvrPortStatisticsNumInvalidReport = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrPortStatisticsNumInvalidReport.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsNumInvalidReport.setDescription('Number of invalid report received. ')
mvrPortStatisticsClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 32, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrPortStatisticsClearStatistics.setStatus('current')
if mibBuilder.loadTexts: mvrPortStatisticsClearStatistics.setDescription('Clear this VLAN all statistics ')
mvrVlanStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33), )
if mibBuilder.loadTexts: mvrVlanStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsTable.setDescription('Table of Mvr statistics VLAN.')
mvrVlanStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mvrVlanStatisticsDomainId"), (0, "ECS2100-28PP-MIB", "mvrVlanStatisticsVlanId"))
if mibBuilder.loadTexts: mvrVlanStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsEntry.setDescription('Entry of Mvr statistics VLAN.')
mvrVlanStatisticsDomainId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)))
if mibBuilder.loadTexts: mvrVlanStatisticsDomainId.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsDomainId.setDescription('VLAN ID')
mvrVlanStatisticsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 2), VlanIndex())
if mibBuilder.loadTexts: mvrVlanStatisticsVlanId.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsVlanId.setDescription('VLAN ID')
mvrVlanStatisticsNumGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumGroups.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsNumGroups.setDescription('Current learned groups ')
mvrVlanStatisticsNumJoinSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumJoinSend.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsNumJoinSend.setDescription('Number of join send.')
mvrVlanStatisticsNumJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumJoins.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsNumJoins.setDescription('Number of join received ')
mvrVlanStatisticsNumJoinSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumJoinSuccess.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsNumJoinSuccess.setDescription('Number of jion success ')
mvrVlanStatisticsNumLeavesSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumLeavesSend.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsNumLeavesSend.setDescription('Number of leave send.')
mvrVlanStatisticsNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumLeaves.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsNumLeaves.setDescription('Number of leave received ')
mvrVlanStatisticsNumGeneralQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumGeneralQuerySend.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsNumGeneralQuerySend.setDescription('Number of general query send ')
mvrVlanStatisticsNumGeneralQueryRecevied = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumGeneralQueryRecevied.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsNumGeneralQueryRecevied.setDescription('Number of general query received ')
mvrVlanStatisticsNumSepcificQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumSepcificQuerySend.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsNumSepcificQuerySend.setDescription('Number of specific query send')
mvrVlanStatisticsNumSpecificQueryReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumSpecificQueryReceived.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsNumSpecificQueryReceived.setDescription('Number of sepcific query received ')
mvrVlanStatisticsNumInvalidReport = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mvrVlanStatisticsNumInvalidReport.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsNumInvalidReport.setDescription('Number of invalid report received')
mvrVlanStatisticsClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 44, 33, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mvrVlanStatisticsClearStatistics.setStatus('current')
if mibBuilder.loadTexts: mvrVlanStatisticsClearStatistics.setDescription('Clear this VLAN statistics')
dhcpSnoopGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1))
dhcpSnoopVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 2))
dhcpSnoopInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 3))
dhcpSnoopBindings = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4))
dhcpSnoopStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 5))
dhcpSnoopEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopEnable.setDescription('This object indicates whether the DHCP Snooping feature is enabled.')
dhcpSnoopVerifyMacAddressEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopVerifyMacAddressEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopVerifyMacAddressEnable.setDescription('This object indicates whether DHCP Snooping Mac address verification is enabled.')
dhcpSnoopInformationOptionEnable = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopInformationOptionEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopInformationOptionEnable.setDescription('This object indicates whether the DHCP snooping information option(option 82) feature is enabled.')
dhcpSnoopInformationOptionPolicy = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("drop", 1), ("keep", 2), ("replace", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopInformationOptionPolicy.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopInformationOptionPolicy.setDescription('This object indicates which reforwarding policy shall be used for DHCP snooping information option(option 82). A value of drop(1) means to drop the DHCP request packet which has the information option(option 82). A value of keep(2) means to keep the existing information option(option 82) of the DHCP request packet. A value of replace(3), which is the default value, means to replace the existing information option(option 82) of the DHCP request packet.')
dhcpSnoopBindingsTableCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("store", 2), ("clear", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopBindingsTableCtlAction.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsTableCtlAction.setDescription('Set this to store(2) to store DHCP snooping binding entries to flash. Set this to clear(3) to clear DHCP snooping binding entries from flash. noAction(1) will always be obtained when reading this variable.')
dhcpSnoopLimitRate = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopLimitRate.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopLimitRate.setDescription('This object indicates the limit rate that DHCP packet redirected to CPU. Set this to 0 means no rate limit for DHCP packet.')
dhcpSnoopInformationOptionEncodeFormat = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("extra-subtype-included", 1), ("no-extra-subtype-included", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopInformationOptionEncodeFormat.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopInformationOptionEncodeFormat.setDescription('Set encode format for CID and RID in option82. Set extra-subtype-included(1) will have extra subtype and length field in CID and RID. Set no-extra-subtype-included(2) will only have TLV format for CID and RID.')
dhcpSnoopVlanConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 2, 1), )
if mibBuilder.loadTexts: dhcpSnoopVlanConfigTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopVlanConfigTable.setDescription('A table contains DHCP Snooping configurations of existing VLANs.')
dhcpSnoopVlanConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 2, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "dhcpSnoopVlanIndex"))
if mibBuilder.loadTexts: dhcpSnoopVlanConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopVlanConfigEntry.setDescription('An instance contains the configuration to enable or disable DHCP Snooping at each existing VLAN.')
dhcpSnoopVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: dhcpSnoopVlanIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopVlanIndex.setDescription('This object indicates the VLAN ID on which DHCP Snooping feature is configured.')
dhcpSnoopVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopVlanEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopVlanEnable.setDescription('This object indicates whether DHCP Snooping is enabled in this VLAN.')
dhcpSnoopPortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 3, 1), )
if mibBuilder.loadTexts: dhcpSnoopPortConfigTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopPortConfigTable.setDescription('A table provides the mechanism to configure the trust state of each port or trunk for DHCP Snooping purpose.')
dhcpSnoopPortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 3, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "dhcpSnoopPortIfIndex"))
if mibBuilder.loadTexts: dhcpSnoopPortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopPortConfigEntry.setDescription('An instance contains the configuration to enable or disable trust state of each port or trunk for DHCP Snooping purpose.')
dhcpSnoopPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: dhcpSnoopPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopPortIfIndex.setDescription('The ifIndex value of the port or trunk.')
dhcpSnoopPortTrustEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 3, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopPortTrustEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopPortTrustEnable.setDescription('This object indicates whether the port or trunk is trusted for DHCP Snooping purpose.')
dhcpSnoopPortMaxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpSnoopPortMaxNumber.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopPortMaxNumber.setDescription('This object indicates the max client number of per port.')
dhcpSnoopBindingsTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1), )
if mibBuilder.loadTexts: dhcpSnoopBindingsTable.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsTable.setDescription('A table contains the DHCP bindings information learnt by the device.')
dhcpSnoopBindingsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "dhcpSnoopBindingsIpAddress"), (0, "ECS2100-28PP-MIB", "dhcpSnoopBindingsMacAddress"))
if mibBuilder.loadTexts: dhcpSnoopBindingsEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsEntry.setDescription('An instance contains the Mac address, IP address type, IP address, VLAN number, interface number, leased time and status.')
dhcpSnoopBindingsVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1, 1), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsVlanIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsVlanIndex.setDescription('This object indicates the VLAN which a DHCP client host belongs to.')
dhcpSnoopBindingsMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: dhcpSnoopBindingsMacAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsMacAddress.setDescription('This object indicates the MAC address of a DHCP client host.')
dhcpSnoopBindingsAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsAddrType.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsAddrType.setDescription('This object indicates the type of IP address denoted in dhcpSnoopBindingsIpAddress type.')
dhcpSnoopBindingsEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dynamic", 1), ("static", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsEntryType.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsEntryType.setDescription('This object indicates that this binding is obtained from dynamically learning or is a static configuraion.')
dhcpSnoopBindingsIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1, 5), IpAddress())
if mibBuilder.loadTexts: dhcpSnoopBindingsIpAddress.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsIpAddress.setDescription('This object indicates the allocated IP address of a DHCP client host.')
dhcpSnoopBindingsPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1, 6), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsPortIfIndex.setDescription('This object indicates the port or trunk where a DHCP client host connects to.')
dhcpSnoopBindingsLeaseTime = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 4, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopBindingsLeaseTime.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopBindingsLeaseTime.setDescription('This object indicates the leased time of this DHCP bindings.')
dhcpSnoopTotalForwardedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopTotalForwardedPkts.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopTotalForwardedPkts.setDescription('Indicates the total number of packets subjected to DHCP Snooping is forwarded.')
dhcpSnoopUntrustedPortDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 46, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpSnoopUntrustedPortDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: dhcpSnoopUntrustedPortDroppedPkts.setDescription('Indicates the number of packets subjected to DHCP Snooping is dropped because they come from untrusted interface.')
ipSrcGuardConfigTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 1), )
if mibBuilder.loadTexts: ipSrcGuardConfigTable.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardConfigTable.setDescription('A table contains the configurations to enable or disable IP Source Guard at each port or trunk.')
ipSrcGuardConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "ipSrcGuardPortIfIndex"))
if mibBuilder.loadTexts: ipSrcGuardConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardConfigEntry.setDescription('An instance contains the configuration to enable or disable IP Source Guard at each port or trunk.')
ipSrcGuardPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: ipSrcGuardPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardPortIfIndex.setDescription('This object idents the port or trunk which is capable of IP Source Guard feature.')
ipSrcGuardMode = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("diabled", 0), ("srcIp", 1), ("srcIpMac", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSrcGuardMode.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardMode.setDescription('This object indicates whether Ip Source Guard is enabled at this interface. If the value equals 0, it means Ip Source Guard is disabled. If the value equals 1, it means Ip Source Guard is enabled, and packets are filtered by checking source ip. If the value equals 2, it means Ip Source Guard is enabled and packets are filtered by checking source ip and source mac.')
ipSrcGuardAclTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3), )
if mibBuilder.loadTexts: ipSrcGuardAclTable.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardAclTable.setDescription('A table contains the IP Source Guard ACL binding information learned by the device or configured by the user.')
ipSrcGuardAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "ipSrcGuardAclBindingIpAddress"), (0, "ECS2100-28PP-MIB", "ipSrcGuardAclBindingMacAddress"), (0, "ECS2100-28PP-MIB", "ipSrcGuardAclBindingEntryType"))
if mibBuilder.loadTexts: ipSrcGuardAclEntry.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardAclEntry.setDescription('An instance contains the IP address, Mac address, entry type, VLAN number, interface number and status.')
ipSrcGuardAclBindingIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipSrcGuardAclBindingIpAddress.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardAclBindingIpAddress.setDescription('This object indicates the IP address of a ACL binding entry.')
ipSrcGuardAclBindingMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3, 1, 2), MacAddress())
if mibBuilder.loadTexts: ipSrcGuardAclBindingMacAddress.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardAclBindingMacAddress.setDescription('This object indicates the MAC address of a ACL binding entry.')
ipSrcGuardAclBindingEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2), ("bootp", 3))))
if mibBuilder.loadTexts: ipSrcGuardAclBindingEntryType.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardAclBindingEntryType.setDescription('This object indicates that this binding is obtained from dynamically learning or is a static configuraion.')
ipSrcGuardAclBindingVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3, 1, 4), VlanIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSrcGuardAclBindingVlanIndex.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardAclBindingVlanIndex.setDescription('This object indicates the VLAN which a ACL binding belongs to.')
ipSrcGuardAclBindingPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3, 1, 5), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSrcGuardAclBindingPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardAclBindingPortIfIndex.setDescription('This object indicates the port or trunk where a ACL binding associated.')
ipSrcGuardAclBindingStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 48, 3, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipSrcGuardAclBindingStatus.setStatus('current')
if mibBuilder.loadTexts: ipSrcGuardAclBindingStatus.setDescription("The status of this conceptual row entry. This object issued to manage the creation and deletion of conceptual rows. The status column has six defined values: - 'active', which indicates that the conceptual row is available for use by the managed device; - 'notInService', which indicates that the conceptual row exists in the agent, but is unavailable for use by the managed device.")
daiGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1))
daiVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 2))
daiInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 3))
daiLog = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4))
daiStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5))
daiGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiGlobalStatus.setStatus('current')
if mibBuilder.loadTexts: daiGlobalStatus.setDescription('Set enabled(1) to enable dynamic ARP inspection. Set disabled(2) to disable dynamic ARP inspection.')
daiGlobalSrcMacValidation = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiGlobalSrcMacValidation.setStatus('current')
if mibBuilder.loadTexts: daiGlobalSrcMacValidation.setDescription('Set enabled(1) to enable validation of source MAC address. Set disabled(2) to disable validation of source MAC address.')
daiGlobalDestMacValidation = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiGlobalDestMacValidation.setStatus('current')
if mibBuilder.loadTexts: daiGlobalDestMacValidation.setDescription('Set enabled(1) to enable validation of destination MAC address. Set disabled(2) to disable validation of destination MAC address.')
daiGlobalIpAddrValidation = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 4), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiGlobalIpAddrValidation.setStatus('current')
if mibBuilder.loadTexts: daiGlobalIpAddrValidation.setDescription('Set enabled(1) to enable validation of IP address. Set disabled(2) to disable validation of IP address.')
daiGlobalLogNumber = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiGlobalLogNumber.setStatus('current')
if mibBuilder.loadTexts: daiGlobalLogNumber.setDescription('The number of log buffers for saving log message. The value 0 means not generating system messages.')
daiGlobalLogInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 86400))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiGlobalLogInterval.setStatus('current')
if mibBuilder.loadTexts: daiGlobalLogInterval.setDescription('The value of the time interval for saving log messages.')
daiGlobalAdditionalValidStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 7), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiGlobalAdditionalValidStatus.setStatus('current')
if mibBuilder.loadTexts: daiGlobalAdditionalValidStatus.setDescription('The vaule of this object is disabled(2) when the status of daiGlobalSrcMacValidation, daiGlobalDestMacValidation, and daiGlobalIpAddrValidation are disabled; enabled(1) when one or more of these variables are enabled.')
daiGlobalIpAddrValidationAllowZeros = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 1, 8), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiGlobalIpAddrValidationAllowZeros.setStatus('current')
if mibBuilder.loadTexts: daiGlobalIpAddrValidationAllowZeros.setDescription('Set enabled(1) to enable validation of IP address allow zeros. Set disabled(2) to disable validation of IP address allow zeros.')
daiVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 2, 1), )
if mibBuilder.loadTexts: daiVlanTable.setStatus('current')
if mibBuilder.loadTexts: daiVlanTable.setDescription('A table contains dynamic ARP inspection configurations for existing VLANs.')
daiVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 2, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "daiVlanIndex"))
if mibBuilder.loadTexts: daiVlanEntry.setStatus('current')
if mibBuilder.loadTexts: daiVlanEntry.setDescription('An instance containing the configuration of dynamic ARP inspection for each existing VLAN.')
daiVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 2, 1, 1, 1), VlanIndex())
if mibBuilder.loadTexts: daiVlanIndex.setStatus('current')
if mibBuilder.loadTexts: daiVlanIndex.setDescription('This object indicates the VLAN ID on which dynamic ARP inspection is configured.')
daiVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 2, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiVlanStatus.setStatus('current')
if mibBuilder.loadTexts: daiVlanStatus.setDescription('This object indicates whether dynamic ARP inspection is enabled in this VLAN.')
daiVlanArpAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 2, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiVlanArpAclName.setStatus('current')
if mibBuilder.loadTexts: daiVlanArpAclName.setDescription('Specifies the ARP ACL name bound to the interface. The default value of daiVlanArpAclStatus is dynamic(2).')
daiVlanArpAclStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dynamic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiVlanArpAclStatus.setStatus('current')
if mibBuilder.loadTexts: daiVlanArpAclStatus.setDescription('Set to static(1) means packets not matching the ACL are dropped. Set to dynamic(2) means packets not matching the ACL are validated by the DHCP snooping binding table. When daiVlanArpAclName is configured, the default value of daiVlanArpAclStatus is dynamic(2).')
daiPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 3, 1), )
if mibBuilder.loadTexts: daiPortTable.setStatus('current')
if mibBuilder.loadTexts: daiPortTable.setDescription('A table containing dynamic ARP inspection configurations for port interfaces.')
daiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 3, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "daiPortIfIndex"))
if mibBuilder.loadTexts: daiPortEntry.setStatus('current')
if mibBuilder.loadTexts: daiPortEntry.setDescription('An instance containing the configuration of dynamic ARP inspection at each port interface.')
daiPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 3, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: daiPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: daiPortIfIndex.setDescription('The ifIndex value of the port.')
daiPortTrustStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 3, 1, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiPortTrustStatus.setStatus('current')
if mibBuilder.loadTexts: daiPortTrustStatus.setDescription('This object indicates whether the port is trusted for dynamic ARP inspection.')
daiPortRateLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 3, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 2048), ValueRangeConstraint(4294967295, 4294967295), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: daiPortRateLimit.setStatus('current')
if mibBuilder.loadTexts: daiPortRateLimit.setDescription('The value of rate limit threshold per second of disposing ARP messages. Set the value 0xFFFFFFFF as no rate limit.')
daiLogTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1), )
if mibBuilder.loadTexts: daiLogTable.setStatus('current')
if mibBuilder.loadTexts: daiLogTable.setDescription('A table containing dynamic ARP inspection log information.')
daiLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "daiLogIndex"))
if mibBuilder.loadTexts: daiLogEntry.setStatus('current')
if mibBuilder.loadTexts: daiLogEntry.setDescription('An instance containing log information of dynamic ARP inspection at each VLAN interface.')
daiLogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256)))
if mibBuilder.loadTexts: daiLogIndex.setStatus('current')
if mibBuilder.loadTexts: daiLogIndex.setDescription('This object indicates the index of dynamic ARP inspection log information.')
daiLogVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1, 2), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiLogVlan.setStatus('current')
if mibBuilder.loadTexts: daiLogVlan.setDescription('This object indicates the VLAN ID of dynamic ARP inspection log information.')
daiLogPort = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiLogPort.setStatus('current')
if mibBuilder.loadTexts: daiLogPort.setDescription('This object indicates the ifIndex of dynamic ARP inspection log information.')
daiLogSrcIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiLogSrcIpAddress.setStatus('current')
if mibBuilder.loadTexts: daiLogSrcIpAddress.setDescription('The source IP address of dynamic ARP inspection log information.')
daiLogDestIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiLogDestIpAddress.setStatus('current')
if mibBuilder.loadTexts: daiLogDestIpAddress.setDescription('The destination IP address of dynamic ARP inspection log information.')
daiLogSrcMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiLogSrcMacAddress.setStatus('current')
if mibBuilder.loadTexts: daiLogSrcMacAddress.setDescription('The source MAC address of dynamic ARP inspection log information.')
daiLogDestMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 4, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiLogDestMacAddress.setStatus('current')
if mibBuilder.loadTexts: daiLogDestMacAddress.setDescription('The destination MAC address of dynamic ARP inspection log information.')
daiTotalReceivedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalReceivedPkts.setStatus('current')
if mibBuilder.loadTexts: daiTotalReceivedPkts.setDescription('Indicates the total number of ARP packets received before rate limiting.')
daiTotalDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: daiTotalDroppedPkts.setDescription('Indicates the total number of ARP packets dropped due to rate limt.')
daiTotalProcessedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalProcessedPkts.setStatus('current')
if mibBuilder.loadTexts: daiTotalProcessedPkts.setDescription('Indicates the total number of ARP packets processed by ARP inspection.')
daiTotalSrcMacDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalSrcMacDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: daiTotalSrcMacDroppedPkts.setDescription('Indicates the total number of ARP packets dropped by source MAC address validation.')
daiTotalDestMacDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalDestMacDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: daiTotalDestMacDroppedPkts.setDescription('Indicates the total number of ARP packets dropped by destination MAC address validation.')
daiTotalIpAddrDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalIpAddrDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: daiTotalIpAddrDroppedPkts.setDescription('Indicates the total number of ARP packets dropped by IP address validation.')
daiTotalArpAclDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalArpAclDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: daiTotalArpAclDroppedPkts.setDescription('Indicates the total number of ARP packets dropped by ARP ACL.')
daiTotalDhcpSnoopingDroppedPkts = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 56, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: daiTotalDhcpSnoopingDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: daiTotalDhcpSnoopingDroppedPkts.setDescription('Indicates the total number of ARP packets dropped by DHCP snooping.')
timeRangeTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 1), )
if mibBuilder.loadTexts: timeRangeTable.setStatus('current')
if mibBuilder.loadTexts: timeRangeTable.setDescription('Table for time range.')
timeRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "timeRangeIndex"))
if mibBuilder.loadTexts: timeRangeEntry.setStatus('current')
if mibBuilder.loadTexts: timeRangeEntry.setDescription('Entry for time range.')
timeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeRangeIndex.setStatus('current')
if mibBuilder.loadTexts: timeRangeIndex.setDescription('The index of time range entry.')
timeRangeName = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: timeRangeName.setStatus('current')
if mibBuilder.loadTexts: timeRangeName.setDescription('The name of time range entry.')
timeRangeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 1, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeRangeStatus.setStatus('current')
if mibBuilder.loadTexts: timeRangeStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
timeRangePeriodicTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2), )
if mibBuilder.loadTexts: timeRangePeriodicTable.setStatus('current')
if mibBuilder.loadTexts: timeRangePeriodicTable.setDescription('Table for periodic time-range entries.')
timeRangePeriodicEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "timeRangePeriodicTimeRangeIndex"), (0, "ECS2100-28PP-MIB", "timeRangePeriodicStartDaysOfTheWeek"), (0, "ECS2100-28PP-MIB", "timeRangePeriodicStartHours"), (0, "ECS2100-28PP-MIB", "timeRangePeriodicStartMinutes"), (0, "ECS2100-28PP-MIB", "timeRangePeriodicEndDaysOfTheWeek"), (0, "ECS2100-28PP-MIB", "timeRangePeriodicEndHours"), (0, "ECS2100-28PP-MIB", "timeRangePeriodicEndMinutes"))
if mibBuilder.loadTexts: timeRangePeriodicEntry.setStatus('current')
if mibBuilder.loadTexts: timeRangePeriodicEntry.setDescription('Entry for periodic time-range.')
timeRangePeriodicTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: timeRangePeriodicTimeRangeIndex.setStatus('current')
if mibBuilder.loadTexts: timeRangePeriodicTimeRangeIndex.setDescription('The index of time range. The object should exist in timeRangeIndex of timeRangeTable.')
timeRangePeriodicStartDaysOfTheWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("daily", 7), ("weekdays", 8), ("weekend", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeRangePeriodicStartDaysOfTheWeek.setStatus('current')
if mibBuilder.loadTexts: timeRangePeriodicStartDaysOfTheWeek.setDescription('Specifies the start days-of-the-week of the periodic time-range entry. 1. If the start days-of-the-week is set to Sunday, MondayK or Saturday then the end days-of-the-week shall be set to Sunday, MondayK, or Saturday. 1-1. If the start time is equal to the end time (for example: 09:00 - 09:00), it means that the rule is active in the whole day. 1-2. If the end time is prior to the start time (for example: 05:00 - 01:00), it means that the rule is inactive from 01:01 to 04:59. 2. If the start days-of-the-week is set to Daily, Weekdays, or Weekend, then the end days-of-the-week shall be set the same as start, and the start time shall be before the end time.')
timeRangePeriodicStartHours = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: timeRangePeriodicStartHours.setStatus('current')
if mibBuilder.loadTexts: timeRangePeriodicStartHours.setDescription('Specifies the start hours of the periodic time-range entry.')
timeRangePeriodicStartMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59)))
if mibBuilder.loadTexts: timeRangePeriodicStartMinutes.setStatus('current')
if mibBuilder.loadTexts: timeRangePeriodicStartMinutes.setDescription('Specifies the start minutess of the periodic time-range entry.')
timeRangePeriodicEndDaysOfTheWeek = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("sunday", 0), ("monday", 1), ("tuesday", 2), ("wednesday", 3), ("thursday", 4), ("friday", 5), ("saturday", 6), ("daily", 7), ("weekdays", 8), ("weekend", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeRangePeriodicEndDaysOfTheWeek.setStatus('current')
if mibBuilder.loadTexts: timeRangePeriodicEndDaysOfTheWeek.setDescription('Specifies the end days-of-the-week of the periodic time-range entry. 1. If the start days-of-the-week is set to Sunday, MondayK or Saturday then the end days-of-the-week shall be set to Sunday, MondayK, or Saturday. 1-1. If the start time is equal to the end time (for example: 09:00 - 09:00), it means that the rule is active in the whole day. 1-2. If the end time is prior to the start time (for example: 05:00 - 01:00), it means that the rule is inactive from 01:01 to 04:59. 2. If the start days-of-the-week is set to Daily, Weekdays, or Weekend, then the end days-of-the-week shall be set the same as start, and the start time shall be before the end time.')
timeRangePeriodicEndHours = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23)))
if mibBuilder.loadTexts: timeRangePeriodicEndHours.setStatus('current')
if mibBuilder.loadTexts: timeRangePeriodicEndHours.setDescription('Specifies the end hours of the periodic time-range entry.')
timeRangePeriodicEndMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59)))
if mibBuilder.loadTexts: timeRangePeriodicEndMinutes.setStatus('current')
if mibBuilder.loadTexts: timeRangePeriodicEndMinutes.setDescription('Specifies the end minutess of the periodic time-range entry.')
timeRangePeriodicStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 2, 1, 8), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeRangePeriodicStatus.setStatus('current')
if mibBuilder.loadTexts: timeRangePeriodicStatus.setDescription('Setting this to valid(1) creates an periodic entry. Setting this to invalid(2) destroys an periodic entry.')
timeRangeAbsoluteTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3), )
if mibBuilder.loadTexts: timeRangeAbsoluteTable.setStatus('current')
if mibBuilder.loadTexts: timeRangeAbsoluteTable.setDescription('Table for absolute time-range entries.')
timeRangeAbsoluteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "timeRangeAbsoluteTimeRangeIndex"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteStartYears"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteStartMonths"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteStartDays"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteStartHours"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteStartMinutes"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteEndYears"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteEndMonths"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteEndDays"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteEndHours"), (0, "ECS2100-28PP-MIB", "timeRangeAbsoluteEndMinutes"))
if mibBuilder.loadTexts: timeRangeAbsoluteEntry.setStatus('current')
if mibBuilder.loadTexts: timeRangeAbsoluteEntry.setDescription('Entry for absolute time-range.')
timeRangeAbsoluteTimeRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: timeRangeAbsoluteTimeRangeIndex.setStatus('current')
if mibBuilder.loadTexts: timeRangeAbsoluteTimeRangeIndex.setDescription('The index of time range. The object should exist in timeRangeIndex of timeRangeTable.')
timeRangeAbsoluteStartYears = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2013, 2037), ValueRangeConstraint(65535, 65535), )))
if mibBuilder.loadTexts: timeRangeAbsoluteStartYears.setStatus('current')
if mibBuilder.loadTexts: timeRangeAbsoluteStartYears.setDescription("Specifies the start years of the absolute time-range entry. 65535 means don't care.")
timeRangeAbsoluteStartMonths = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 12), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteStartMonths.setStatus('current')
if mibBuilder.loadTexts: timeRangeAbsoluteStartMonths.setDescription("Specifies the start months of the absolute time-range entry. 255 means don't care.")
timeRangeAbsoluteStartDays = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 31), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteStartDays.setStatus('current')
if mibBuilder.loadTexts: timeRangeAbsoluteStartDays.setDescription("Specifies the start days of the absolute time-range entry. 255 means don't care.")
timeRangeAbsoluteStartHours = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteStartHours.setStatus('current')
if mibBuilder.loadTexts: timeRangeAbsoluteStartHours.setDescription("Specifies the start hours of the absolute time-range entry.\\ 255 means don't care.")
timeRangeAbsoluteStartMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 59), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteStartMinutes.setStatus('current')
if mibBuilder.loadTexts: timeRangeAbsoluteStartMinutes.setDescription("Specifies the start minutes of the absolute time-range entry.\\ 255 means don't care.")
timeRangeAbsoluteEndYears = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2013, 2037), ValueRangeConstraint(65535, 65535), )))
if mibBuilder.loadTexts: timeRangeAbsoluteEndYears.setStatus('current')
if mibBuilder.loadTexts: timeRangeAbsoluteEndYears.setDescription("Specifies the end years of the absolute time-range entry. 65535 means don't care.")
timeRangeAbsoluteEndMonths = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 12), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteEndMonths.setStatus('current')
if mibBuilder.loadTexts: timeRangeAbsoluteEndMonths.setDescription("Specifies the end months of the absolute time-range entry. 255 means don't care.")
timeRangeAbsoluteEndDays = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 31), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteEndDays.setStatus('current')
if mibBuilder.loadTexts: timeRangeAbsoluteEndDays.setDescription("Specifies the end days of the absolute time-range entry. 255 means don't care.")
timeRangeAbsoluteEndHours = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 23), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteEndHours.setStatus('current')
if mibBuilder.loadTexts: timeRangeAbsoluteEndHours.setDescription("Specifies the end hours of the absolute time-range entry.\\ 255 means don't care.")
timeRangeAbsoluteEndMinutes = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 59), ValueRangeConstraint(255, 255), )))
if mibBuilder.loadTexts: timeRangeAbsoluteEndMinutes.setStatus('current')
if mibBuilder.loadTexts: timeRangeAbsoluteEndMinutes.setDescription("Specifies the end minutes of the absolute time-range entry.\\ 255 means don't care.")
timeRangeAbsoluteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 61, 3, 1, 12), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: timeRangeAbsoluteStatus.setStatus('current')
if mibBuilder.loadTexts: timeRangeAbsoluteStatus.setDescription('Setting this to valid(1) creates an absolute entry. Setting this to invalid(2) destroys an absolute entry.')
lbdGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 1))
lbdInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 2))
lbdGlobalStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdGlobalStatus.setStatus('current')
if mibBuilder.loadTexts: lbdGlobalStatus.setDescription('Set enabled(1) to enable global LBD status. Set disabled(2) to disable global LBD status.')
lbdTransmitInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdTransmitInterval.setStatus('current')
if mibBuilder.loadTexts: lbdTransmitInterval.setDescription('The transmission interval for LBD control frames.')
lbdRecoverTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 1, 3), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(60, 1000000), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdRecoverTime.setStatus('current')
if mibBuilder.loadTexts: lbdRecoverTime.setDescription('The recover time used by LBD auto recovery mechanism. A value of 0 disables auto recovery.')
lbdMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("port-based", 1), ("vlan-based", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdMode.setStatus('deprecated')
if mibBuilder.loadTexts: lbdMode.setDescription('The detection mode of LBD.')
lbdAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdAction.setStatus('current')
if mibBuilder.loadTexts: lbdAction.setDescription('The protection action of LBD.')
lbdTrap = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("detect", 2), ("recover", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdTrap.setStatus('current')
if mibBuilder.loadTexts: lbdTrap.setDescription('The kind of SNMP traps for LBD will be sent.')
lbdPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 2, 1), )
if mibBuilder.loadTexts: lbdPortTable.setStatus('current')
if mibBuilder.loadTexts: lbdPortTable.setDescription('A table containing LBD configurations for all interfaces.')
lbdPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 2, 1, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "lbdPortIfIndex"))
if mibBuilder.loadTexts: lbdPortEntry.setStatus('current')
if mibBuilder.loadTexts: lbdPortEntry.setDescription('An instance containing the configuration of LBD at each interface.')
lbdPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 2, 1, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: lbdPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: lbdPortIfIndex.setDescription('The ifIndex value of the port.')
lbdPortAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lbdPortAdminState.setStatus('current')
if mibBuilder.loadTexts: lbdPortAdminState.setDescription('The LBD administrative port status.')
lbdPortOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("looped", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbdPortOperState.setStatus('current')
if mibBuilder.loadTexts: lbdPortOperState.setDescription('The LBD operative port status.')
lbdPortLoopedVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 63, 2, 1, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lbdPortLoopedVlan.setStatus('current')
if mibBuilder.loadTexts: lbdPortLoopedVlan.setDescription('The list of VLANs on which loopback is detected. Only when oper state is looped and mode is VLAN-based, the value is nonzero.')
mldSnoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 1), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopStatus.setStatus('current')
if mibBuilder.loadTexts: mldSnoopStatus.setDescription('Parameter to enable or disable MLD snooping on the device. When enabled, the device will examine MLD packets and set up filters for MLD ports. ')
mldSnoopQuerier = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 2), EnabledStatus().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopQuerier.setStatus('current')
if mibBuilder.loadTexts: mldSnoopQuerier.setDescription('Enables (disables) whether the switch acts as an MLD querier.')
mldSnoopRobustness = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopRobustness.setStatus('current')
if mibBuilder.loadTexts: mldSnoopRobustness.setDescription('The Robustness Variable allows tuning for the expected packet loss on a subnet. If a subnet is expected to be lossy, the Robustness Variable may be increased. MLD is robust to (Robustness Variable-1) packet losses. The discussion of the Robustness Variable is in Section 7.1 of RFC 2710.')
mldSnoopQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 125)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopQueryInterval.setStatus('current')
if mibBuilder.loadTexts: mldSnoopQueryInterval.setDescription('The interval (in seconds) between MLD host-query messages sent by the switch.')
mldSnoopQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopQueryMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: mldSnoopQueryMaxResponseTime.setDescription('The time after a query, during which a response is expected from an endstation. If a querier has sent a number of queries defined by mldSnoopRobustness, but an endstation has not responded, a countdown timer is started using an initial value set by mldSnoopQueryMaxResponseTime. If the countdown finishes, and the endstation still has not responded, then that the endstation is deemed to have left the multicast group.')
mldSnoopRouterPortExpireTime = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 500)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopRouterPortExpireTime.setStatus('current')
if mibBuilder.loadTexts: mldSnoopRouterPortExpireTime.setDescription('Sets the time (in seconds) the switch waits after the previous querier has stopped querying before the router port (which received query packets from previous querier) expires.')
mldSnoopVersion = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopVersion.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVersion.setDescription('MLD version snooped')
mldSnoopUnknownMcastMode = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("flood", 1), ("toRouterPort", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopUnknownMcastMode.setStatus('current')
if mibBuilder.loadTexts: mldSnoopUnknownMcastMode.setDescription('Sets the mldSnoopUnknownMcastMode to define the flooding behavior when receive the unknown multicast traffic.')
mldSnoopRouterCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 9), )
if mibBuilder.loadTexts: mldSnoopRouterCurrentTable.setStatus('current')
if mibBuilder.loadTexts: mldSnoopRouterCurrentTable.setDescription('Table for current router ports.')
mldSnoopRouterCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 9, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopRouterCurrentVlanIndex"))
if mibBuilder.loadTexts: mldSnoopRouterCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: mldSnoopRouterCurrentEntry.setDescription('Entry for current router ports.')
mldSnoopRouterCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopRouterCurrentVlanIndex.setStatus('current')
if mibBuilder.loadTexts: mldSnoopRouterCurrentVlanIndex.setDescription('The interface identified by a particular value of this index is the same interface as identified by the same value of dot1qVlanIndex in the Q-BRIDGE-MIB. The entry will only appear here after a configure to mldSnoopRouterStaticTable.')
mldSnoopRouterCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 9, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopRouterCurrentPorts.setStatus('current')
if mibBuilder.loadTexts: mldSnoopRouterCurrentPorts.setDescription('The set of ports which are current router ports, including static router ports. Please refer to mldSnoopRouterStaticTable.')
mldSnoopRouterStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 10), )
if mibBuilder.loadTexts: mldSnoopRouterStaticTable.setStatus('current')
if mibBuilder.loadTexts: mldSnoopRouterStaticTable.setDescription('Table for static router ports.')
mldSnoopRouterStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 10, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopRouterStaticVlanIndex"))
if mibBuilder.loadTexts: mldSnoopRouterStaticEntry.setStatus('current')
if mibBuilder.loadTexts: mldSnoopRouterStaticEntry.setDescription('Entry for static router ports.')
mldSnoopRouterStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopRouterStaticVlanIndex.setStatus('current')
if mibBuilder.loadTexts: mldSnoopRouterStaticVlanIndex.setDescription('The interface identified by a particular value of this index is the same interface as identified by the same value of dot1qVlanIndex in the Q-BRIDGE-MIB. The entry will only appear here after a configure to mldSnoopRouterStaticTable.')
mldSnoopRouterStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 10, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldSnoopRouterStaticPorts.setStatus('current')
if mibBuilder.loadTexts: mldSnoopRouterStaticPorts.setDescription('The set of ports which are static router ports.')
mldSnoopRouterStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 10, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldSnoopRouterStaticStatus.setStatus('current')
if mibBuilder.loadTexts: mldSnoopRouterStaticStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
mldSnoopMulticastCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 11), )
if mibBuilder.loadTexts: mldSnoopMulticastCurrentTable.setStatus('current')
if mibBuilder.loadTexts: mldSnoopMulticastCurrentTable.setDescription('Table for current multicast addresses.')
mldSnoopMulticastCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 11, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopMulticastCurrentVlanIndex"), (0, "ECS2100-28PP-MIB", "mldSnoopMulticastCurrentIpAddress"), (0, "ECS2100-28PP-MIB", "mldSnoopMulticastCurrentSourceIpAddress"))
if mibBuilder.loadTexts: mldSnoopMulticastCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: mldSnoopMulticastCurrentEntry.setDescription('Entry for current multicast addresses.')
mldSnoopMulticastCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopMulticastCurrentVlanIndex.setStatus('current')
if mibBuilder.loadTexts: mldSnoopMulticastCurrentVlanIndex.setDescription('The interface identified by a particular value of this index is the same interface as identified by the same value of dot1qVlanIndex in the Q-BRIDGE-MIB. The entry will only appear here after a configure to mldSnoopMulticastStaticTable.')
mldSnoopMulticastCurrentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 11, 1, 2), InetAddressIPv6())
if mibBuilder.loadTexts: mldSnoopMulticastCurrentIpAddress.setStatus('current')
if mibBuilder.loadTexts: mldSnoopMulticastCurrentIpAddress.setDescription('IPv6 address of multicast group.')
mldSnoopMulticastCurrentSourceIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 11, 1, 3), InetAddressIPv6())
if mibBuilder.loadTexts: mldSnoopMulticastCurrentSourceIpAddress.setStatus('current')
if mibBuilder.loadTexts: mldSnoopMulticastCurrentSourceIpAddress.setDescription('IPv6 address of the source.')
mldSnoopMulticastCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 11, 1, 4), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopMulticastCurrentPorts.setStatus('current')
if mibBuilder.loadTexts: mldSnoopMulticastCurrentPorts.setDescription('The set of ports which are members of a multicast group, including static members. Please refer to mldSnoopMulticastStaticTable.')
mldSnoopMulticastStaticTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 12), )
if mibBuilder.loadTexts: mldSnoopMulticastStaticTable.setStatus('current')
if mibBuilder.loadTexts: mldSnoopMulticastStaticTable.setDescription('Table for static multicast addresses.')
mldSnoopMulticastStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 12, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopMulticastStaticVlanIndex"), (0, "ECS2100-28PP-MIB", "mldSnoopMulticastStaticIpAddress"))
if mibBuilder.loadTexts: mldSnoopMulticastStaticEntry.setStatus('current')
if mibBuilder.loadTexts: mldSnoopMulticastStaticEntry.setDescription('Entry for static multicast addresses.')
mldSnoopMulticastStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 12, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopMulticastStaticVlanIndex.setStatus('current')
if mibBuilder.loadTexts: mldSnoopMulticastStaticVlanIndex.setDescription('The interface identified by a particular value of this index is the same interface as identified by the same value of dot1qVlanIndex in the Q-BRIDGE-MIB. The entry will only appear here after a configure to mldSnoopMulticastStaticTable.')
mldSnoopMulticastStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 12, 1, 2), InetAddressIPv6())
if mibBuilder.loadTexts: mldSnoopMulticastStaticIpAddress.setStatus('current')
if mibBuilder.loadTexts: mldSnoopMulticastStaticIpAddress.setDescription('IPv6 address of multicast group.')
mldSnoopMulticastStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 12, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldSnoopMulticastStaticPorts.setStatus('current')
if mibBuilder.loadTexts: mldSnoopMulticastStaticPorts.setDescription('The set of ports which are members.')
mldSnoopMulticastStaticStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 12, 1, 4), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mldSnoopMulticastStaticStatus.setStatus('current')
if mibBuilder.loadTexts: mldSnoopMulticastStaticStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
mldSnoopCurrentVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 13), )
if mibBuilder.loadTexts: mldSnoopCurrentVlanTable.setStatus('current')
if mibBuilder.loadTexts: mldSnoopCurrentVlanTable.setDescription('Table for configuring MLD snooping for each VLAN which exists in the device by (local or network) management, or dynamically created as a result of GVRP requests received.')
mldSnoopCurrentVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 13, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopCurrentVlanIndex"))
if mibBuilder.loadTexts: mldSnoopCurrentVlanEntry.setStatus('current')
if mibBuilder.loadTexts: mldSnoopCurrentVlanEntry.setDescription('Entry for configuring MLD snooping.')
mldSnoopCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 13, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopCurrentVlanIndex.setStatus('current')
if mibBuilder.loadTexts: mldSnoopCurrentVlanIndex.setDescription('Same is dot1qVlanIndex in the Q-BRIDGE-MIB. This table has only one entry - the entry for the VLAN of the management interface.')
mldSnoopCurrentVlanImmediateLeave = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 13, 1, 2), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopCurrentVlanImmediateLeave.setStatus('current')
if mibBuilder.loadTexts: mldSnoopCurrentVlanImmediateLeave.setDescription('The parameter to enable or disable the Immediate-Leave feature on this VLAN.')
mldSnoopCurrentVlanImmediateLeaveByHostIp = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 13, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopCurrentVlanImmediateLeaveByHostIp.setStatus('current')
if mibBuilder.loadTexts: mldSnoopCurrentVlanImmediateLeaveByHostIp.setDescription('The parameter to enable or disable the Immediate-Leave by-host-ip feature on this VLAN.')
mldSnoopProxyReporting = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 14), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProxyReporting.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProxyReporting.setDescription('Parameter to enable or disable MLD snooping proxy reporting on the device.')
mldSnoopUnsolicitedReportInterval = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(400)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopUnsolicitedReportInterval.setStatus('current')
if mibBuilder.loadTexts: mldSnoopUnsolicitedReportInterval.setDescription('Setting this value to specify how long (in seconds) the uplink ports should transmit unsolicited reports.')
mldSnoopPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16), )
if mibBuilder.loadTexts: mldSnoopPortTable.setStatus('current')
if mibBuilder.loadTexts: mldSnoopPortTable.setDescription('Table of MLD Snooping service per port.')
mldSnoopPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopPortIndex"))
if mibBuilder.loadTexts: mldSnoopPortEntry.setStatus('current')
if mibBuilder.loadTexts: mldSnoopPortEntry.setDescription('Entry of MLD Snooping service per port.')
mldSnoopPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopPortIndex.setStatus('current')
if mibBuilder.loadTexts: mldSnoopPortIndex.setDescription('The port and the trunk (excluding trunk members) interface of the mldsnpPortTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
mldSnoopQueryDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopQueryDrop.setStatus('current')
if mibBuilder.loadTexts: mldSnoopQueryDrop.setDescription('Parameter to enable or disable dropping MLD Query packet.')
mldSnoopMulticastDataDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopMulticastDataDrop.setStatus('current')
if mibBuilder.loadTexts: mldSnoopMulticastDataDrop.setDescription('Parameter to enable or disable dropping IPv6 multicast data ')
mldSnoopPortNumGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumGroups.setStatus('current')
if mibBuilder.loadTexts: mldSnoopPortNumGroups.setDescription('Current learned groups ')
mldSnoopPortNumJoinSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumJoinSend.setStatus('current')
if mibBuilder.loadTexts: mldSnoopPortNumJoinSend.setDescription('Number of join send ')
mldSnoopPortNumJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumJoins.setStatus('current')
if mibBuilder.loadTexts: mldSnoopPortNumJoins.setDescription('Number of join recieved ')
mldSnoopPortNumJoinSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumJoinSuccess.setStatus('current')
if mibBuilder.loadTexts: mldSnoopPortNumJoinSuccess.setDescription('Number of join group success ')
mldSnoopPortNumLeavesSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumLeavesSend.setStatus('current')
if mibBuilder.loadTexts: mldSnoopPortNumLeavesSend.setDescription('Number of leave send')
mldSnoopPortNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumLeaves.setStatus('current')
if mibBuilder.loadTexts: mldSnoopPortNumLeaves.setDescription('Number of leave received ')
mldSnoopPortNumGeneralQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumGeneralQuerySend.setStatus('current')
if mibBuilder.loadTexts: mldSnoopPortNumGeneralQuerySend.setDescription('Number of general query send. ')
mldSnoopPortNumGeneralQueryRecevied = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumGeneralQueryRecevied.setStatus('current')
if mibBuilder.loadTexts: mldSnoopPortNumGeneralQueryRecevied.setDescription('Number of general query received. ')
mldSnoopPortNumSepcificQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumSepcificQuerySend.setStatus('current')
if mibBuilder.loadTexts: mldSnoopPortNumSepcificQuerySend.setDescription('Number of specific query send. ')
mldsnoopPortNumSpecificQueryReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsnoopPortNumSpecificQueryReceived.setStatus('current')
if mibBuilder.loadTexts: mldsnoopPortNumSpecificQueryReceived.setDescription('Number of specific query received. ')
mldSnoopPortNumInvalidReport = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopPortNumInvalidReport.setStatus('current')
if mibBuilder.loadTexts: mldSnoopPortNumInvalidReport.setDescription('Number of invalid report received. ')
mldSnoopPortClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 16, 1, 16), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopPortClearStatistics.setStatus('current')
if mibBuilder.loadTexts: mldSnoopPortClearStatistics.setDescription('Clear this VLAN all statistics ')
mldSnoopFilterStatus = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 17), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopFilterStatus.setStatus('current')
if mibBuilder.loadTexts: mldSnoopFilterStatus.setDescription('Parameter to enable or disable MLD filtering on the device.')
mldSnoopProfileTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 18), )
if mibBuilder.loadTexts: mldSnoopProfileTable.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileTable.setDescription('The table for configuring the MLD snooping profile.')
mldSnoopProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 18, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopProfileId"))
if mibBuilder.loadTexts: mldSnoopProfileEntry.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileEntry.setDescription('The entry for configuring the MLD snooping profile.')
mldSnoopProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 18, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopProfileId.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileId.setDescription('The ID of the MLD snooping profile.')
mldSnoopProfileAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProfileAction.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileAction.setDescription('The access mode of the MLD snooping profile.')
mldSnoopProfileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 18, 1, 3), ValidStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProfileStatus.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
mldSnoopProfileCtl = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 19))
mldSnoopProfileCtlId = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 19, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProfileCtlId.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileCtlId.setDescription('The ID of the MLD snooping profile. The default value is zero, meaning that no ID is specified. In order to create a profile, a non-zero value must be specified.')
mldSnoopProfileCtlInetAddressType = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 19, 2), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProfileCtlInetAddressType.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileCtlInetAddressType.setDescription('The address type is associated with this agent. Only ipv4(1) type is supported.')
mldSnoopProfileCtlStartInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 19, 3), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProfileCtlStartInetAddress.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileCtlStartInetAddress.setDescription('The specified addresses in the start of the controlled IP multicast addresses.')
mldSnoopProfileCtlEndInetAddress = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 19, 4), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProfileCtlEndInetAddress.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileCtlEndInetAddress.setDescription('The specified addresses in the end of the controlled IP multicast addresses.')
mldSnoopProfileCtlAction = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 19, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("create", 2), ("destroy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopProfileCtlAction.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileCtlAction.setDescription('Setting it to create(2) creates the range of the controlled IP multicast addresses. Setting it to destroy(3) destroys the range of the controlled IP multicast addresses. When the action is completed, this object becomes noAction(1).')
mldSnoopProfileRangeTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 20), )
if mibBuilder.loadTexts: mldSnoopProfileRangeTable.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileRangeTable.setDescription('The table for configuring the range of the MLD snooping profile.')
mldSnoopProfileRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 20, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopProfileRangeProfileId"), (0, "ECS2100-28PP-MIB", "mldSnoopProfileRangeInetAddressType"), (0, "ECS2100-28PP-MIB", "mldSnoopProfileRangeStartInetAddress"), (0, "ECS2100-28PP-MIB", "mldSnoopProfileRangeEndInetAddress"))
if mibBuilder.loadTexts: mldSnoopProfileRangeEntry.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileRangeEntry.setDescription('The entry for configuring the range of the MLD snooping profile.')
mldSnoopProfileRangeProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 20, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: mldSnoopProfileRangeProfileId.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileRangeProfileId.setDescription('This is defined as mldSnoopProfileId.')
mldSnoopProfileRangeInetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 20, 1, 2), InetAddressType())
if mibBuilder.loadTexts: mldSnoopProfileRangeInetAddressType.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileRangeInetAddressType.setDescription('The address type is associated with this agent. Only ipv6(2) type is supported.')
mldSnoopProfileRangeStartInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 20, 1, 3), InetAddress())
if mibBuilder.loadTexts: mldSnoopProfileRangeStartInetAddress.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileRangeStartInetAddress.setDescription('The specified addresses in the start of the controlled IPv6 multicast addresses.')
mldSnoopProfileRangeEndInetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 20, 1, 4), InetAddress())
if mibBuilder.loadTexts: mldSnoopProfileRangeEndInetAddress.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileRangeEndInetAddress.setDescription('The specified addresses in the end of the controlled IPv6 multicast addresses.')
mldSnoopProfileRangeAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('deny')).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopProfileRangeAction.setStatus('current')
if mibBuilder.loadTexts: mldSnoopProfileRangeAction.setDescription('The access mode of the MLD snooping profile.')
mldSnoopFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 21), )
if mibBuilder.loadTexts: mldSnoopFilterPortTable.setStatus('current')
if mibBuilder.loadTexts: mldSnoopFilterPortTable.setDescription('Table for port configuration in MLD filtering.')
mldSnoopFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 21, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopFilterPortIndex"))
if mibBuilder.loadTexts: mldSnoopFilterPortEntry.setStatus('current')
if mibBuilder.loadTexts: mldSnoopFilterPortEntry.setDescription('Entry for port configuration in MLD filtering.')
mldSnoopFilterPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 21, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopFilterPortIndex.setStatus('current')
if mibBuilder.loadTexts: mldSnoopFilterPortIndex.setDescription('The port and trunk (including trunk members) interface of the portTable. The interface identified by a particular value of this index is the same interface identified by the same value of ifIndex in the IF-MIB.')
mldSnoopFilterPortProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 21, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopFilterPortProfileId.setStatus('current')
if mibBuilder.loadTexts: mldSnoopFilterPortProfileId.setDescription('The mldSnoopProfileEntry identified by a particular value of this index is the same interface identified by the same value of the mldSnoopProfileId object. If there is no corresponding entry in the mldSnoopProfileTable, then no association exists. In particular, if this value is zero, no associated profile will be generated, as zero is not a valid profile index.')
mldSnoopThrottlePortTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 22), )
if mibBuilder.loadTexts: mldSnoopThrottlePortTable.setStatus('current')
if mibBuilder.loadTexts: mldSnoopThrottlePortTable.setDescription('Table for port configuration in MLD throttling.')
mldSnoopThrottlePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 22, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopThrottlePortIndex"))
if mibBuilder.loadTexts: mldSnoopThrottlePortEntry.setStatus('current')
if mibBuilder.loadTexts: mldSnoopThrottlePortEntry.setDescription('Entry for port configuration in MLD throttling.')
mldSnoopThrottlePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 22, 1, 1), Unsigned32())
if mibBuilder.loadTexts: mldSnoopThrottlePortIndex.setStatus('current')
if mibBuilder.loadTexts: mldSnoopThrottlePortIndex.setDescription('The port and trunk (including trunk members) interface of the portTable. The interface identified by a particular value of this index is the same interface identified by the same value of ifIndex in the IF-MIB.')
mldSnoopThrottlePortRunningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 22, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopThrottlePortRunningStatus.setStatus('current')
if mibBuilder.loadTexts: mldSnoopThrottlePortRunningStatus.setDescription('Describes the running status of the MLD throttling to the switch. A value of true(1) indicates the MLD throttling mechanism is active. A value of false(2) indicates the MLD throttling mechanism is inactive.')
mldSnoopThrottlePortAction = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 22, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("replace", 1), ("deny", 2))).clone('deny')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopThrottlePortAction.setStatus('current')
if mibBuilder.loadTexts: mldSnoopThrottlePortAction.setDescription('The action mode of the MLD throttling. A value of replace(1) means to replace a joined multicast group randomly when an interface receives an MLD report and the number of current joined multicast groups is equal to the maximum number of MLD groups that the interface can join. A value of deny(2) means to deny the MLD report request when an interface receives an MLD report and the number of current joined multicast groups is equal to the maximum number of MLD groups that the interface can join.')
mldSnoopThrottlePortMaxGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 22, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopThrottlePortMaxGroups.setStatus('current')
if mibBuilder.loadTexts: mldSnoopThrottlePortMaxGroups.setDescription('The maximum number of MLD groups that the interface can join.')
mldSnoopThrottlePortCurrentGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 22, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopThrottlePortCurrentGroups.setStatus('current')
if mibBuilder.loadTexts: mldSnoopThrottlePortCurrentGroups.setDescription('The current number of MLD groups that the interface has joined.')
mldSnoopClearDynamicGroups = MibScalar((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 23), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopClearDynamicGroups.setStatus('current')
if mibBuilder.loadTexts: mldSnoopClearDynamicGroups.setDescription('The current number of MLD groups that the interface has joined.')
mldSnoopVlanTable = MibTable((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24), )
if mibBuilder.loadTexts: mldSnoopVlanTable.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVlanTable.setDescription('Table of MLD Snooping service per port.')
mldSnoopVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1), ).setIndexNames((0, "ECS2100-28PP-MIB", "mldSnoopVlanIndex"))
if mibBuilder.loadTexts: mldSnoopVlanEntry.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVlanEntry.setDescription('Entry of MLD Snooping service per VLAN.')
mldSnoopVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 1), VlanIndex())
if mibBuilder.loadTexts: mldSnoopVlanIndex.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVlanIndex.setDescription('VLAN ID')
mldSnoopVlanNumGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumGroups.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVlanNumGroups.setDescription('Current learned groups ')
mldSnoopVlanNumJoinSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumJoinSend.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVlanNumJoinSend.setDescription('Number of join send.')
mldSnoopVlanNumJoins = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumJoins.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVlanNumJoins.setDescription('Number of join received ')
mldSnoopVlanNumJoinSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumJoinSuccess.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVlanNumJoinSuccess.setDescription('Number of jion success ')
mldSnoopVlanNumLeavesSend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumLeavesSend.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVlanNumLeavesSend.setDescription('Number of leave send.')
mldSnoopVlanNumLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumLeaves.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVlanNumLeaves.setDescription('Number of leave received ')
mldSnoopVlanNumGeneralQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumGeneralQuerySend.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVlanNumGeneralQuerySend.setDescription('Number of general query send ')
mldSnoopVlanNumGeneralQueryRecevied = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumGeneralQueryRecevied.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVlanNumGeneralQueryRecevied.setDescription('Number of general query received ')
mldSnoopVlanNumSepcificQuerySend = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumSepcificQuerySend.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVlanNumSepcificQuerySend.setDescription('Number of specific query send')
mldsnoopVlanNumSpecificQueryReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldsnoopVlanNumSpecificQueryReceived.setStatus('current')
if mibBuilder.loadTexts: mldsnoopVlanNumSpecificQueryReceived.setDescription('Number of sepcific query received ')
mldSnoopVlanNumInvalidReport = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mldSnoopVlanNumInvalidReport.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVlanNumInvalidReport.setDescription('Number of invalid report received')
mldSnoopVlanClearStatistics = MibTableColumn((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 1, 54, 24, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mldSnoopVlanClearStatistics.setStatus('current')
if mibBuilder.loadTexts: mldSnoopVlanClearStatistics.setDescription('Clear this VLAN statistics')
ecs2100_28ppTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1)).setLabel("ecs2100-28ppTraps")
ecs2100_28ppTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0)).setLabel("ecs2100-28ppTrapsPrefix")
swPowerStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 1)).setObjects(("ECS2100-28PP-MIB", "swIndivPowerUnitIndex"), ("ECS2100-28PP-MIB", "swIndivPowerIndex"), ("ECS2100-28PP-MIB", "swIndivPowerStatus"))
if mibBuilder.loadTexts: swPowerStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: swPowerStatusChangeTrap.setDescription('This trap is sent when the power state changes.')
swPortSecurityTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 36)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: swPortSecurityTrap.setStatus('current')
if mibBuilder.loadTexts: swPortSecurityTrap.setDescription('This trap is sent when the port is being intruded. This trap will only be sent when the portSecActionTrap is enabled.')
swIpFilterRejectTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 40)).setObjects(("ECS2100-28PP-MIB", "trapIpFilterRejectMode"), ("ECS2100-28PP-MIB", "trapIpFilterRejectIp"))
if mibBuilder.loadTexts: swIpFilterRejectTrap.setStatus('current')
if mibBuilder.loadTexts: swIpFilterRejectTrap.setDescription('This trap is sent when an incorrect IP address is rejected by the ipfilter.')
pethPsePortOnOffNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 43)).setObjects(("ECS2100-28PP-MIB", "pethPsePortDetectionStatus"))
if mibBuilder.loadTexts: pethPsePortOnOffNotification.setStatus('current')
if mibBuilder.loadTexts: pethPsePortOnOffNotification.setDescription(' This Notification indicates if a Pse Port is delivering power to the PD. This notification SHOULD be sent on every status change except in searching mode.')
pethPsePortPowerMaintenanceStatusNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 44)).setObjects(("ECS2100-28PP-MIB", "pethPsePortPowerMaintenanceStatus"))
if mibBuilder.loadTexts: pethPsePortPowerMaintenanceStatusNotification.setStatus('current')
if mibBuilder.loadTexts: pethPsePortPowerMaintenanceStatusNotification.setDescription(' This Notification indicates a Port Change Status and SHOULD be sent on every status change.')
pethMainPowerUsageOnNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 45)).setObjects(("ECS2100-28PP-MIB", "pethMainPseConsumptionPower"))
if mibBuilder.loadTexts: pethMainPowerUsageOnNotification.setStatus('current')
if mibBuilder.loadTexts: pethMainPowerUsageOnNotification.setDescription(' This Notification indicates PSE Threshold usage indication is on; the power usage is above the threshold.')
pethMainPowerUsageOffNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 46)).setObjects(("ECS2100-28PP-MIB", "pethMainPseConsumptionPower"))
if mibBuilder.loadTexts: pethMainPowerUsageOffNotification.setStatus('current')
if mibBuilder.loadTexts: pethMainPowerUsageOffNotification.setDescription(' This Notification indicates that the PSE Threshold usage indication is off; the usage power is below the threshold.')
swAtcBcastStormAlarmFireTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 70)).setObjects(("ECS2100-28PP-MIB", "atcBcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcBcastStormSampleType"), ("ECS2100-28PP-MIB", "atcBcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcBcastStormAlarmFireThreshold"))
if mibBuilder.loadTexts: swAtcBcastStormAlarmFireTrap.setStatus('current')
if mibBuilder.loadTexts: swAtcBcastStormAlarmFireTrap.setDescription('When the broadcast traffic is detected as the storm, this trap will be fired.')
swAtcBcastStormAlarmClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 71)).setObjects(("ECS2100-28PP-MIB", "atcBcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcBcastStormSampleType"), ("ECS2100-28PP-MIB", "atcBcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcBcastStormAlarmClearThreshold"))
if mibBuilder.loadTexts: swAtcBcastStormAlarmClearTrap.setStatus('current')
if mibBuilder.loadTexts: swAtcBcastStormAlarmClearTrap.setDescription('When the broadcast storm is detected as the normal traffic, this trap will be fired.')
swAtcBcastStormTcApplyTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 72)).setObjects(("ECS2100-28PP-MIB", "atcBcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcBcastStormSampleType"), ("ECS2100-28PP-MIB", "atcBcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcBcastStormAlarmFireThreshold"), ("ECS2100-28PP-MIB", "atcBcastStormTcApplyTime"))
if mibBuilder.loadTexts: swAtcBcastStormTcApplyTrap.setStatus('current')
if mibBuilder.loadTexts: swAtcBcastStormTcApplyTrap.setDescription('When the ATC is activated, this trap will be fired.')
swAtcBcastStormTcReleaseTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 73)).setObjects(("ECS2100-28PP-MIB", "atcBcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcBcastStormSampleType"), ("ECS2100-28PP-MIB", "atcBcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcBcastStormAlarmClearThreshold"), ("ECS2100-28PP-MIB", "atcBcastStormTcReleaseTime"))
if mibBuilder.loadTexts: swAtcBcastStormTcReleaseTrap.setStatus('current')
if mibBuilder.loadTexts: swAtcBcastStormTcReleaseTrap.setDescription('When the ATC is released, this trap will be fired.')
swAtcMcastStormAlarmFireTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 74)).setObjects(("ECS2100-28PP-MIB", "atcMcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcMcastStormSampleType"), ("ECS2100-28PP-MIB", "atcMcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcMcastStormAlarmFireThreshold"))
if mibBuilder.loadTexts: swAtcMcastStormAlarmFireTrap.setStatus('current')
if mibBuilder.loadTexts: swAtcMcastStormAlarmFireTrap.setDescription('When the multicast traffic is detected as the storm, this trap will be fired.')
swAtcMcastStormAlarmClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 75)).setObjects(("ECS2100-28PP-MIB", "atcMcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcMcastStormSampleType"), ("ECS2100-28PP-MIB", "atcMcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcMcastStormAlarmClearThreshold"))
if mibBuilder.loadTexts: swAtcMcastStormAlarmClearTrap.setStatus('current')
if mibBuilder.loadTexts: swAtcMcastStormAlarmClearTrap.setDescription('When the multicast storm is detected as the normal traffic, this trap will be fired.')
swAtcMcastStormTcApplyTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 76)).setObjects(("ECS2100-28PP-MIB", "atcMcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcMcastStormSampleType"), ("ECS2100-28PP-MIB", "atcMcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcMcastStormAlarmFireThreshold"), ("ECS2100-28PP-MIB", "atcMcastStormTcApplyTime"))
if mibBuilder.loadTexts: swAtcMcastStormTcApplyTrap.setStatus('current')
if mibBuilder.loadTexts: swAtcMcastStormTcApplyTrap.setDescription('When the ATC is activated, this trap will be fired.')
swAtcMcastStormTcReleaseTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 77)).setObjects(("ECS2100-28PP-MIB", "atcMcastStormIfIndex"), ("ECS2100-28PP-MIB", "atcMcastStormSampleType"), ("ECS2100-28PP-MIB", "atcMcastStormCurrentTrafficRate"), ("ECS2100-28PP-MIB", "atcMcastStormAlarmClearThreshold"), ("ECS2100-28PP-MIB", "atcMcastStormTcReleaseTime"))
if mibBuilder.loadTexts: swAtcMcastStormTcReleaseTrap.setStatus('current')
if mibBuilder.loadTexts: swAtcMcastStormTcReleaseTrap.setDescription('When the ATC is released, this trap will be fired.')
stpBpduGuardPortShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 91)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: stpBpduGuardPortShutdownTrap.setStatus('current')
if mibBuilder.loadTexts: stpBpduGuardPortShutdownTrap.setDescription('This trap will be sent when an interface is shut down because of BPDU guard.')
swLoopbackDetectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 95)).setObjects(("ECS2100-28PP-MIB", "staLoopbackDetectionPortIfIndex"))
if mibBuilder.loadTexts: swLoopbackDetectionTrap.setStatus('current')
if mibBuilder.loadTexts: swLoopbackDetectionTrap.setDescription('This trap will be sent when loopback BPDUs have been detected.')
networkAccessPortLinkDetectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 96)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifOperStatus"), ("ECS2100-28PP-MIB", "networkAccessPortLinkDetectionMode"), ("ECS2100-28PP-MIB", "networkAccessPortLinkDetectionAciton"))
if mibBuilder.loadTexts: networkAccessPortLinkDetectionTrap.setStatus('current')
if mibBuilder.loadTexts: networkAccessPortLinkDetectionTrap.setDescription('This trap is sent when a networkAccessPortLinkDetection event is triggered.')
dot1agCfmMepUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 97)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepDbRMepIdentifier"))
if mibBuilder.loadTexts: dot1agCfmMepUpTrap.setStatus('current')
if mibBuilder.loadTexts: dot1agCfmMepUpTrap.setDescription('This trap is sent when a new remote MEP is discovered.')
dot1agCfmMepDownTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 98)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepDbRMepIdentifier"))
if mibBuilder.loadTexts: dot1agCfmMepDownTrap.setStatus('current')
if mibBuilder.loadTexts: dot1agCfmMepDownTrap.setDescription('This trap is sent when port status or interface status TLV received from remote MEP indicates it is not up.')
dot1agCfmConfigFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 99)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"))
if mibBuilder.loadTexts: dot1agCfmConfigFailTrap.setStatus('current')
if mibBuilder.loadTexts: dot1agCfmConfigFailTrap.setDescription('This trap is sent when a MEP receives a CCM with MPID which already exists on the same MA in this switch.')
dot1agCfmLoopFindTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 100)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"))
if mibBuilder.loadTexts: dot1agCfmLoopFindTrap.setStatus('current')
if mibBuilder.loadTexts: dot1agCfmLoopFindTrap.setDescription('This trap is sent when a MEP receives its own CCMs.')
dot1agCfmMepUnknownTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 101)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepIdentifier"))
if mibBuilder.loadTexts: dot1agCfmMepUnknownTrap.setStatus('current')
if mibBuilder.loadTexts: dot1agCfmMepUnknownTrap.setDescription('This trap is sent when a CCM is received from an unexpected MEP.')
dot1agCfmMepMissingTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 102)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMepDbRMepIdentifier"))
if mibBuilder.loadTexts: dot1agCfmMepMissingTrap.setStatus('current')
if mibBuilder.loadTexts: dot1agCfmMepMissingTrap.setDescription('This trap is sent when the cross-check enable timer expires and no CCMs were received from an expected (configured) MEP.')
dot1agCfmMaUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 103)).setObjects(("IEEE8021-CFM-MIB", "dot1agCfmMaIndex"))
if mibBuilder.loadTexts: dot1agCfmMaUpTrap.setStatus('current')
if mibBuilder.loadTexts: dot1agCfmMaUpTrap.setDescription('This trap is sent when all expected remote MEPs are up.')
autoUpgradeTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 104)).setObjects(("ECS2100-28PP-MIB", "fileCopyFileType"), ("ECS2100-28PP-MIB", "trapAutoUpgradeResult"), ("ECS2100-28PP-MIB", "trapAutoUpgradeNewVer"))
if mibBuilder.loadTexts: autoUpgradeTrap.setStatus('current')
if mibBuilder.loadTexts: autoUpgradeTrap.setDescription('This trap is sent when auto upgrade is executed.')
swCpuUtiRisingNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 107))
if mibBuilder.loadTexts: swCpuUtiRisingNotification.setStatus('current')
if mibBuilder.loadTexts: swCpuUtiRisingNotification.setDescription('This notification indicates that the CPU utilization has risen from cpuUtiFallingThreshold to cpuUtiRisingThreshold.')
swCpuUtiFallingNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 108))
if mibBuilder.loadTexts: swCpuUtiFallingNotification.setStatus('current')
if mibBuilder.loadTexts: swCpuUtiFallingNotification.setDescription('This notification indicates that the CPU utilization has fallen from cpuUtiRisingThreshold to cpuUtiFallingThreshold.')
swMemoryUtiRisingThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 109))
if mibBuilder.loadTexts: swMemoryUtiRisingThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: swMemoryUtiRisingThresholdNotification.setDescription('This notification indicates that the memory utilization has risen from memoryUtiFallingThreshold to memoryUtiRisingThreshold.')
swMemoryUtiFallingThresholdNotification = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 110))
if mibBuilder.loadTexts: swMemoryUtiFallingThresholdNotification.setStatus('current')
if mibBuilder.loadTexts: swMemoryUtiFallingThresholdNotification.setDescription('This notification indicates that the memory utilization has fallen from memoryUtiRisingThreshold to memoryUtiFallingThreshold.')
dhcpRogueServerAttackTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 114)).setObjects(("ECS2100-28PP-MIB", "trapDhcpClientPortIfIndex"), ("ECS2100-28PP-MIB", "trapDhcpServerIpAddress"), ("ECS2100-28PP-MIB", "trapDhcpServerMacAddress"))
if mibBuilder.loadTexts: dhcpRogueServerAttackTrap.setStatus('current')
if mibBuilder.loadTexts: dhcpRogueServerAttackTrap.setDescription('This trap is sent when receiving a DHCP packet from a rogue server.')
macNotificationTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 138)).setObjects(("ECS2100-28PP-MIB", "trapIfIndex"), ("ECS2100-28PP-MIB", "trapVlanId"), ("ECS2100-28PP-MIB", "trapVarMacAddr"), ("ECS2100-28PP-MIB", "trapMacNotifyAction"))
if mibBuilder.loadTexts: macNotificationTrap.setStatus('current')
if mibBuilder.loadTexts: macNotificationTrap.setDescription('This trap is sent when there are changes of the dynamic MAC addresses on the switch.')
lbdDetectionTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 141)).setObjects(("ECS2100-28PP-MIB", "trapIfIndex"), ("ECS2100-28PP-MIB", "trapVlanId"))
if mibBuilder.loadTexts: lbdDetectionTrap.setStatus('current')
if mibBuilder.loadTexts: lbdDetectionTrap.setDescription('This trap is sent when a loopback condition is detected by LBD.')
lbdRecoveryTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 142)).setObjects(("ECS2100-28PP-MIB", "trapIfIndex"))
if mibBuilder.loadTexts: lbdRecoveryTrap.setStatus('current')
if mibBuilder.loadTexts: lbdRecoveryTrap.setDescription('This trap is sent when a recovery is done by LBD.')
sfpThresholdAlarmWarnTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 189)).setObjects(("ECS2100-28PP-MIB", "trapSfpThresholdAlarmWarnIfIndex"), ("ECS2100-28PP-MIB", "trapSfpThresholdAlarmWarnType"))
if mibBuilder.loadTexts: sfpThresholdAlarmWarnTrap.setStatus('current')
if mibBuilder.loadTexts: sfpThresholdAlarmWarnTrap.setDescription("This trap is sent when the sfp's A/D quantity is not within alarm/warning thresholds.")
udldPortShutdownTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 192)).setObjects(("ECS2100-28PP-MIB", "udldPortIndex"), ("ECS2100-28PP-MIB", "trapUdldPortShutdownReason"))
if mibBuilder.loadTexts: udldPortShutdownTrap.setStatus('current')
if mibBuilder.loadTexts: udldPortShutdownTrap.setDescription('This trap is sent when the port is shut down by UDLD.')
userAuthenticationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 199)).setObjects(("ECS2100-28PP-MIB", "trapVarLoginUserName"), ("ECS2100-28PP-MIB", "trapVarSessionType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddressType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddress"))
if mibBuilder.loadTexts: userAuthenticationFailureTrap.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationFailureTrap.setDescription('This trap will be triggered if authentication is fail.')
userAuthenticationSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 200)).setObjects(("ECS2100-28PP-MIB", "trapVarLoginUserName"), ("ECS2100-28PP-MIB", "trapVarSessionType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddressType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddress"))
if mibBuilder.loadTexts: userAuthenticationSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: userAuthenticationSuccessTrap.setDescription('This trap will be triggered if authentication is successful.')
loginTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 201)).setObjects(("ECS2100-28PP-MIB", "trapVarLoginUserName"), ("ECS2100-28PP-MIB", "trapVarSessionType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddressType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddress"))
if mibBuilder.loadTexts: loginTrap.setStatus('current')
if mibBuilder.loadTexts: loginTrap.setDescription('This trap is sent when user login.')
logoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 202)).setObjects(("ECS2100-28PP-MIB", "trapVarLoginUserName"), ("ECS2100-28PP-MIB", "trapVarSessionType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddressType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddress"))
if mibBuilder.loadTexts: logoutTrap.setStatus('current')
if mibBuilder.loadTexts: logoutTrap.setDescription('This trap is sent when user logout.')
fileCopyTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 208)).setObjects(("ECS2100-28PP-MIB", "trapVarLoginUserName"), ("ECS2100-28PP-MIB", "trapVarSessionType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddressType"), ("ECS2100-28PP-MIB", "trapVarLoginInetAddress"), ("ECS2100-28PP-MIB", "fileCopySrcOperType"), ("ECS2100-28PP-MIB", "fileCopySrcFileName"), ("ECS2100-28PP-MIB", "fileCopyDestOperType"), ("ECS2100-28PP-MIB", "fileCopyDestFileName"), ("ECS2100-28PP-MIB", "fileCopyFileType"), ("ECS2100-28PP-MIB", "fileCopyUnitId"), ("ECS2100-28PP-MIB", "fileCopyStatus"), ("ECS2100-28PP-MIB", "fileCopyServerInetAddressType"), ("ECS2100-28PP-MIB", "fileCopyServerInetAddress"))
if mibBuilder.loadTexts: fileCopyTrap.setStatus('current')
if mibBuilder.loadTexts: fileCopyTrap.setDescription('This trap is sent when file copy is executed. If the copy action is triggered by system, the login user information(trapVarLoginUserName/ trapVarSessionType/trapVarLoginInetAddressTypes/ trapVarLoginInetAddres) will be null value.')
userauthCreateUserTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 209)).setObjects(("ECS2100-28PP-MIB", "userAuthUserName"))
if mibBuilder.loadTexts: userauthCreateUserTrap.setStatus('current')
if mibBuilder.loadTexts: userauthCreateUserTrap.setDescription('This trap is sent when create user account.')
userauthDeleteUserTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 210)).setObjects(("ECS2100-28PP-MIB", "userAuthUserName"))
if mibBuilder.loadTexts: userauthDeleteUserTrap.setStatus('current')
if mibBuilder.loadTexts: userauthDeleteUserTrap.setDescription('This trap is sent when delete user account.')
userauthModifyUserPrivilegeTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 211)).setObjects(("ECS2100-28PP-MIB", "userAuthUserName"), ("ECS2100-28PP-MIB", "userAuthPrivilege"))
if mibBuilder.loadTexts: userauthModifyUserPrivilegeTrap.setStatus('current')
if mibBuilder.loadTexts: userauthModifyUserPrivilegeTrap.setDescription('This trap is sent when modify user privilege.')
cpuGuardControlTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 213))
if mibBuilder.loadTexts: cpuGuardControlTrap.setStatus('current')
if mibBuilder.loadTexts: cpuGuardControlTrap.setDescription('This trap is sent when CPU utilization rises above the high-watermark first time or when CPU utilization rises from below the low-watermark to above the high-watermark.')
cpuGuardReleaseTrap = NotificationType((1, 3, 6, 1, 4, 1, 259, 10, 1, 43, 2, 1, 0, 214))
if mibBuilder.loadTexts: cpuGuardReleaseTrap.setStatus('current')
if mibBuilder.loadTexts: cpuGuardReleaseTrap.setDescription('This trap is sent when CPU utilization falls from above the high-watermark to below the low-watermark.')
mibBuilder.exportSymbols("ECS2100-28PP-MIB", portTransceiverThresholdInfoTxPowerLowWarn=portTransceiverThresholdInfoTxPowerLowWarn, daiPortIfIndex=daiPortIfIndex, pingMgt=pingMgt, mldSnoopFilterStatus=mldSnoopFilterStatus, diffServPolicyMapElementActionIndex=diffServPolicyMapElementActionIndex, cosMgt=cosMgt, diffServArpAceSourceMacAddr=diffServArpAceSourceMacAddr, fileCopyDestFileName=fileCopyDestFileName, ipFilterAllClientCtlInetAddressStart=ipFilterAllClientCtlInetAddressStart, diffServIpAceSourceIpAddrBitmask=diffServIpAceSourceIpAddrBitmask, pingSentPackets=pingSentPackets, vlanTable=vlanTable, userauthDeleteUserTrap=userauthDeleteUserTrap, networkAccessMacAddressPort=networkAccessMacAddressPort, diffServArpAceDestMacAddrBitmask=diffServArpAceDestMacAddrBitmask, diffServMacAceMinVid=diffServMacAceMinVid, igmpSnoopRouterStaticTable=igmpSnoopRouterStaticTable, dosTcpSynFinScanStatus=dosTcpSynFinScanStatus, dosTcpSynFinScan=dosTcpSynFinScan, qosMgt=qosMgt, sshHostKeySaveStatus=sshHostKeySaveStatus, daiTotalDroppedPkts=daiTotalDroppedPkts, mvrVlanStatisticsVlanId=mvrVlanStatisticsVlanId, diffServIpv6AceType=diffServIpv6AceType, mldSnoopProfileRangeProfileId=mldSnoopProfileRangeProfileId, portHistControlTable=portHistControlTable, vtyMaxSession=vtyMaxSession, diffServTcamUnit=diffServTcamUnit, prioIfClassificationModeIf=prioIfClassificationModeIf, privateVlanPrivatePortTable=privateVlanPrivatePortTable, dosTcpNullScanStatus=dosTcpNullScanStatus, mvrDomainAssociatedProfileTable=mvrDomainAssociatedProfileTable, radiusServerGlobalRetransmit=radiusServerGlobalRetransmit, mldSnoopProxyReporting=mldSnoopProxyReporting, sshUserDsaKey5=sshUserDsaKey5, radiusServerIndex=radiusServerIndex, portTransceiverThresholdInfoVccLowAlarm=portTransceiverThresholdInfoVccLowAlarm, networkAccessMacAddressEntry=networkAccessMacAddressEntry, tacacsPlusServerIndex=tacacsPlusServerIndex, igmpSnoopRouterPortExpireTime=igmpSnoopRouterPortExpireTime, stpBpduGuardPortShutdownTrap=stpBpduGuardPortShutdownTrap, diffServAclAceIndexList=diffServAclAceIndexList, privateVlanPromPortSecondaryRemap=privateVlanPromPortSecondaryRemap, dhcpSnoopBindingsPortIfIndex=dhcpSnoopBindingsPortIfIndex, mvrVlanStatisticsNumJoinSend=mvrVlanStatisticsNumJoinSend, portHistPreviousEntry=portHistPreviousEntry, dhcpSnoopVerifyMacAddressEnable=dhcpSnoopVerifyMacAddressEnable, dhcpRelay=dhcpRelay, igmpSnoopCurrentVlanIndex=igmpSnoopCurrentVlanIndex, sshUserDsaKey6=sshUserDsaKey6, pethPsePortExtUsedPowerValue=pethPsePortExtUsedPowerValue, ipFilterHttpInetStatus=ipFilterHttpInetStatus, unknownUcastStormStatus=unknownUcastStormStatus, mvrProfileGroupStartIPAddress=mvrProfileGroupStartIPAddress, portUpTime=portUpTime, ntpServerEntry=ntpServerEntry, mstInstanceOperVlansMap2k=mstInstanceOperVlansMap2k, ntpMgt=ntpMgt, ntpServerVersion=ntpServerVersion, vlanPortMode=vlanPortMode, sntpServerTable=sntpServerTable, dhcpSnoopVlan=dhcpSnoopVlan, restartMgt=restartMgt, daiLog=daiLog, taskCpuTable=taskCpuTable, privateVlanUplinkPorts=privateVlanUplinkPorts, diffServPolicyMapIndex=diffServPolicyMapIndex, staLoopbackDetectionPortStatus=staLoopbackDetectionPortStatus, mldSnoopPortEntry=mldSnoopPortEntry, userAuthPassword=userAuthPassword, igmpSnoopPortNumLeaves=igmpSnoopPortNumLeaves, igmpSnoopProfileAction=igmpSnoopProfileAction, mstInstanceOperVlansMap4k=mstInstanceOperVlansMap4k, mldSnoopProfileRangeInetAddressType=mldSnoopProfileRangeInetAddressType, portHistControlBucketsRequested=portHistControlBucketsRequested, networkAccessMacAddressTable=networkAccessMacAddressTable, diffServMeterIndex=diffServMeterIndex, autoUpgradeTrap=autoUpgradeTrap, accton=accton, diffServArpAceEntry=diffServArpAceEntry, staLoopbackDetectionPortRelease=staLoopbackDetectionPortRelease, pethPsePortExtDllPseAllocatedPowerValue=pethPsePortExtDllPseAllocatedPowerValue, dhcpOption82Policy=dhcpOption82Policy, aaaRadiusGroupName=aaaRadiusGroupName, ipFilterHttpInetAddressEnd=ipFilterHttpInetAddressEnd, swAtcMcastStormAlarmClearTrap=swAtcMcastStormAlarmClearTrap, portTransceiverThresholdInfoTemperatureLowWarn=portTransceiverThresholdInfoTemperatureLowWarn, pingHistoryEntry=pingHistoryEntry, netConfigPrimaryInterface=netConfigPrimaryInterface, sntpServiceMode=sntpServiceMode, prioIfClassificationModeEntry=prioIfClassificationModeEntry, memoryUtiFallingThreshold=memoryUtiFallingThreshold, swPortNumber=swPortNumber, ValidStatus=ValidStatus, rlPortOutputLimitInKilo=rlPortOutputLimitInKilo, networkAccessMacFilterWithMaskStatus=networkAccessMacFilterWithMaskStatus, atcBcastStormAlarmFireTrapStatus=atcBcastStormAlarmFireTrapStatus, mldSnoopThrottlePortTable=mldSnoopThrottlePortTable, lacpPortEntry=lacpPortEntry, mldSnoopStatus=mldSnoopStatus, smtpDestEMailEntry=smtpDestEMailEntry, timeRangeAbsoluteEndHours=timeRangeAbsoluteEndHours, sshUserRsaKey3=sshUserRsaKey3, vlanAddressMethod=vlanAddressMethod, aaaRadiusGroupEntry=aaaRadiusGroupEntry, networkAccessClearMacAddressAttribute=networkAccessClearMacAddressAttribute, diffServPolicyMapElementIndex=diffServPolicyMapElementIndex, staSystemBPDUFlooding=staSystemBPDUFlooding, diffServPolicyMapElementClassMapIndex=diffServPolicyMapElementClassMapIndex, privateVlanPrivatePortSecondaryVlan=privateVlanPrivatePortSecondaryVlan, sshUserTable=sshUserTable, aaaMethodIndex=aaaMethodIndex, mldSnoopFilterPortIndex=mldSnoopFilterPortIndex, trapVlanId=trapVlanId, diffServIpv6AceTable=diffServIpv6AceTable, cableDiagResultStatusPairD=cableDiagResultStatusPairD, portTransceiverThresholdInfoTemperatureLowAlarm=portTransceiverThresholdInfoTemperatureLowAlarm, portMediaInfoConnectorType=portMediaInfoConnectorType, trapVarSessionType=trapVarSessionType, rateLimitMgt=rateLimitMgt, taskCpuStatAvgUti=taskCpuStatAvgUti, ipSrcGuardAclBindingEntryType=ipSrcGuardAclBindingEntryType, diffServArpAceSourceMacAddrBitmask=diffServArpAceSourceMacAddrBitmask, daiInterface=daiInterface, dhcpOption82=dhcpOption82, switchInfoTable=switchInfoTable, radiusServerTable=radiusServerTable, privateVlanDownlinkPorts=privateVlanDownlinkPorts, igmpSnoopMulticastStaticStatus=igmpSnoopMulticastStaticStatus, sshServerMinorVersion=sshServerMinorVersion, diffServMacAcePktformat=diffServMacAcePktformat, privateVlanAssoicatedPrimaryVlan=privateVlanAssoicatedPrimaryVlan, userAuthPublicKey=userAuthPublicKey, portSecurityMgt=portSecurityMgt, portInOctetRate=portInOctetRate, sshConnMajorVersion=sshConnMajorVersion, igmpSnoopCurrentVlanLastMemQueryIntvl=igmpSnoopCurrentVlanLastMemQueryIntvl, prioCosToDscpPhbValue=prioCosToDscpPhbValue, tacacsMgt=tacacsMgt, ipSrcGuardMode=ipSrcGuardMode, fileCopyTrap=fileCopyTrap, portInPacketRate=portInPacketRate, sshDsaHostKey5=sshDsaHostKey5, ipHttpState=ipHttpState, ipFilterAllClientCtl=ipFilterAllClientCtl, taskCpuCurrentUti=taskCpuCurrentUti, cableDiagResultStatusPairC=cableDiagResultStatusPairC, portMediaInfoTable=portMediaInfoTable, igmpSnoopProfileCtlInetAddressType=igmpSnoopProfileCtlInetAddressType, timeRangeAbsoluteEndMinutes=timeRangeAbsoluteEndMinutes, ipFilterAllClientCtlInetAddressEnd=ipFilterAllClientCtlInetAddressEnd, atcMcastStormIfIndex=atcMcastStormIfIndex, trunkTable=trunkTable, igmpSnoopProfileRangeAction=igmpSnoopProfileRangeAction, cableDiagCtlAction=cableDiagCtlAction, unknownUcastStormPktRateResolution=unknownUcastStormPktRateResolution, mldSnoopCurrentVlanIndex=mldSnoopCurrentVlanIndex, fileInfoFileSize=fileInfoFileSize, igmpSnoopPortNumSepcificQuerySend=igmpSnoopPortNumSepcificQuerySend, diffServAclType=diffServAclType, igmpSnoopFilterPortTable=igmpSnoopFilterPortTable, diffServPolicyMapPortStatus=diffServPolicyMapPortStatus, mldSnoopMulticastCurrentPorts=mldSnoopMulticastCurrentPorts, diffServMacAceEtherTypeBitmask=diffServMacAceEtherTypeBitmask, diffServIpAceTable=diffServIpAceTable, diffServArpAceIndex=diffServArpAceIndex, diffServMacAceDestMacAddr=diffServMacAceDestMacAddr, mldSnoopPortIndex=mldSnoopPortIndex, mcastStormTable=mcastStormTable, dhcpSnoopEnable=dhcpSnoopEnable, igmpSnoopVlanNumLeavesSend=igmpSnoopVlanNumLeavesSend, vlanPortPrivateVlanType=vlanPortPrivateVlanType, vlanPortTable=vlanPortTable, networkAccessPortLinkDetectionTrap=networkAccessPortLinkDetectionTrap, xstInstancePortAdminPathCost=xstInstancePortAdminPathCost, portTransceiverThresholdAutoMode=portTransceiverThresholdAutoMode, igmpSnoopVlanNumJoinSuccess=igmpSnoopVlanNumJoinSuccess, dhcpSnoopBindingsAddrType=dhcpSnoopBindingsAddrType, timeRangeIndex=timeRangeIndex, staProtocolType=staProtocolType, consolePasswordThreshold=consolePasswordThreshold, sntpServerInetAddress=sntpServerInetAddress, diffServAclAttachCtlAceIndex=diffServAclAttachCtlAceIndex, dot1xAuthConfigExtOperMode=dot1xAuthConfigExtOperMode, fileInfoIsStartUp=fileInfoIsStartUp, cpuGuard=cpuGuard, xstInstanceCfgBridgeForwardDelay=xstInstanceCfgBridgeForwardDelay, staPortTable=staPortTable, portHistPreviousInUcastPkts=portHistPreviousInUcastPkts, igmpSnoopPortEntry=igmpSnoopPortEntry, switchOperState=switchOperState, sshConnInfoTable=sshConnInfoTable, udldPortShutdownTrap=udldPortShutdownTrap, igmpSnoopCurrentVlanVersion=igmpSnoopCurrentVlanVersion, cableDiagResultDistancePairD=cableDiagResultDistancePairD, lbdTransmitInterval=lbdTransmitInterval, fileInfoEntry=fileInfoEntry, networkAccessClearMacAddressPort=networkAccessClearMacAddressPort, pingHistoryIndex=pingHistoryIndex, mvrDomainUpstreamSourceIp=mvrDomainUpstreamSourceIp, atcBcastStormAutoRelease=atcBcastStormAutoRelease, dot1xAuthConfigExtMultiHostMaxCnt=dot1xAuthConfigExtMultiHostMaxCnt, dhcpcInterfaceEntry=dhcpcInterfaceEntry, timeRangeAbsoluteStartMonths=timeRangeAbsoluteStartMonths, rspanSrcTxPorts=rspanSrcTxPorts, diffServArpAceLogStatus=diffServArpAceLogStatus, mcastStormMgt=mcastStormMgt, voiceVlanOuiTable=voiceVlanOuiTable, dosMgt=dosMgt, swAtcMcastStormTcReleaseTrap=swAtcMcastStormTcReleaseTrap, vlanStaticInterfaceType=vlanStaticInterfaceType, portHistControlBucketsGranted=portHistControlBucketsGranted, igmpSnoopProfileCtlStartInetAddress=igmpSnoopProfileCtlStartInetAddress, portHistPreviousOutUcastPkts=portHistPreviousOutUcastPkts, diffServMacAceMinEtherType=diffServMacAceMinEtherType, mstName=mstName, sshUserRsaKey5=sshUserRsaKey5, portMediaInfoRevision=portMediaInfoRevision, aaaCommandPrivilegesInterfaceIndex=aaaCommandPrivilegesInterfaceIndex, portOpticalMonitoringInfoTemperature=portOpticalMonitoringInfoTemperature, voiceVlanPortEntry=voiceVlanPortEntry, portTransceiverThresholdInfoTxBiasCurrentLowAlarm=portTransceiverThresholdInfoTxBiasCurrentLowAlarm, fileCopyDestOperType=fileCopyDestOperType, portMediaInfoBaudRate=portMediaInfoBaudRate, sshRsaHostKey2=sshRsaHostKey2, igmpSnoopMulticastGroupPorts=igmpSnoopMulticastGroupPorts, xstInstancePortOperPathCost=xstInstancePortOperPathCost, lbdPortEntry=lbdPortEntry, ntpServerKeyId=ntpServerKeyId, rspanSwitchRole=rspanSwitchRole, ntpStatus=ntpStatus, dynamicArpInspectionMgt=dynamicArpInspectionMgt, igmpSnoopCurrentVlanQueryRespIntvl=igmpSnoopCurrentVlanQueryRespIntvl, diffServAccessGroupEntry=diffServAccessGroupEntry, atcBcastStormTcApplyTrapStatus=atcBcastStormTcApplyTrapStatus, ipFilterHttpInetEntry=ipFilterHttpInetEntry, igmpSnoopVlanNumSpecificQueryReceived=igmpSnoopVlanNumSpecificQueryReceived, subnetVlanMask=subnetVlanMask, radiusMgt=radiusMgt, pethPseMainExtDllPowerSource=pethPseMainExtDllPowerSource, igmpSnoopMulticastGroupSourceIPAddress=igmpSnoopMulticastGroupSourceIPAddress, macVlanEntry=macVlanEntry, sshUserEntry=sshUserEntry, mldSnoopVlanNumGroups=mldSnoopVlanNumGroups, lbdDetectionTrap=lbdDetectionTrap, fileAutoDownloadResultAction=fileAutoDownloadResultAction, networkAccessMacAddressAttribute=networkAccessMacAddressAttribute, mvrPortStatisticsPortIndex=mvrPortStatisticsPortIndex, xstInstancePortDesignatedRoot=xstInstancePortDesignatedRoot, mldSnoopProfileRangeAction=mldSnoopProfileRangeAction, prioDscpToDscpIngressDscpValue=prioDscpToDscpIngressDscpValue, diffServClassMapAttachCtlElementIndex=diffServClassMapAttachCtlElementIndex, timeRangePeriodicEndHours=timeRangePeriodicEndHours, portHistPreviousOutErrors=portHistPreviousOutErrors)
mibBuilder.exportSymbols("ECS2100-28PP-MIB", fileCopyStatus=fileCopyStatus, cpuGuardMinThreshold=cpuGuardMinThreshold, swIndivPowerStatus=swIndivPowerStatus, mldSnoopThrottlePortAction=mldSnoopThrottlePortAction, trapAutoUpgradeNewVer=trapAutoUpgradeNewVer, vtyExecTimeout=vtyExecTimeout, mvrProfileCtlId=mvrProfileCtlId, radiusServerStatus=radiusServerStatus, aaaTacacsPlusGroupServerBitMap=aaaTacacsPlusGroupServerBitMap, mvrProfileGroupCtlId=mvrProfileGroupCtlId, sntpStatus=sntpStatus, system=system, portHistPreviousIndex=portHistPreviousIndex, cableDiagResultStatusPairB=cableDiagResultStatusPairB, ipHttpsPort=ipHttpsPort, trunkPorts=trunkPorts, lacpPortStatus=lacpPortStatus, vtyPasswordThreshold=vtyPasswordThreshold, sshUserRsaKey8=sshUserRsaKey8, swProdDescription=swProdDescription, diffServArpEntry=diffServArpEntry, sshRsaHostKey5=sshRsaHostKey5, staPortOperPointToPoint=staPortOperPointToPoint, dot1agCfmConfigFailTrap=dot1agCfmConfigFailTrap, ipFilterSnmpInetEntry=ipFilterSnmpInetEntry, networkAccessPortEntry=networkAccessPortEntry, poeMgt=poeMgt, mvrPortStatisticsNumSpecificQueryReceived=mvrPortStatisticsNumSpecificQueryReceived, mvrDomainPortImmediateLeaveByHostIp=mvrDomainPortImmediateLeaveByHostIp, igmpSnoopCurrentVlanImmediateLeave=igmpSnoopCurrentVlanImmediateLeave, privateVlanPromPortSecondaryRemap2k=privateVlanPromPortSecondaryRemap2k, igmpSnoopTcnFlood=igmpSnoopTcnFlood, igmpSnoopRouterStaticPorts=igmpSnoopRouterStaticPorts, swAtcBcastStormTcApplyTrap=swAtcBcastStormTcApplyTrap, dhcpcIfIndex=dhcpcIfIndex, ipSrcGuardAclBindingMacAddress=ipSrcGuardAclBindingMacAddress, ipFilterTelnetInetEntry=ipFilterTelnetInetEntry, igmpSnoopVlanNumInvalidReport=igmpSnoopVlanNumInvalidReport, networkAccessMacFilterWithMaskTable=networkAccessMacFilterWithMaskTable, atcMcastStormTcReleaseTrapStatus=atcMcastStormTcReleaseTrapStatus, atcBcastStormAlarmClearTrapStatus=atcBcastStormAlarmClearTrapStatus, diffServArpTable=diffServArpTable, userAuthMethod=userAuthMethod, mirrorTable=mirrorTable, timeRangeAbsoluteEndMonths=timeRangeAbsoluteEndMonths, igmpSnoopVlanNumJoinSend=igmpSnoopVlanNumJoinSend, sshHostKeyGenStatus=sshHostKeyGenStatus, daiTotalSrcMacDroppedPkts=daiTotalSrcMacDroppedPkts, tacacsPlusServerPortNumber=tacacsPlusServerPortNumber, diffServClassMapIndex=diffServClassMapIndex, networkAccessPortTable=networkAccessPortTable, diffServIpv6AceDestPortOp=diffServIpv6AceDestPortOp, daiPortTable=daiPortTable, trapSfpThresholdAlarmWarnIfIndex=trapSfpThresholdAlarmWarnIfIndex, mvrForwardingPriority=mvrForwardingPriority, aaaMethodStatus=aaaMethodStatus, igmpSnoopProfileRangeEndInetAddress=igmpSnoopProfileRangeEndInetAddress, sshRsaHostKey4=sshRsaHostKey4, igmpSnoopFilterPortProfileId=igmpSnoopFilterPortProfileId, xstInstanceCfgTxHoldCount=xstInstanceCfgTxHoldCount, aaaAccountProtocol=aaaAccountProtocol, sshConnInfoEntry=sshConnInfoEntry, restartOpCodeFile=restartOpCodeFile, portHistCurrentOutUcastPkts=portHistCurrentOutUcastPkts, ntpServerTable=ntpServerTable, diffServPolicyMapStatus=diffServPolicyMapStatus, staPortLongAdminPathCost=staPortLongAdminPathCost, igmpSnoopCurrentVlanTable=igmpSnoopCurrentVlanTable, xstInstanceCfgPriority=xstInstanceCfgPriority, igmpSnoopCurrentVlanVersionExclusive=igmpSnoopCurrentVlanVersionExclusive, igmpSnoopMulticastGroupTable=igmpSnoopMulticastGroupTable, diffServMacAceVidBitmask=diffServMacAceVidBitmask, timeRangeAbsoluteStatus=timeRangeAbsoluteStatus, mstInstanceEditRemainingHops=mstInstanceEditRemainingHops, mldSnoopRouterStaticVlanIndex=mldSnoopRouterStaticVlanIndex, mvrVlanStatisticsNumGeneralQueryRecevied=mvrVlanStatisticsNumGeneralQueryRecevied, pethPsePortPowerMaintenanceStatusNotification=pethPsePortPowerMaintenanceStatusNotification, dhcpSnoopUntrustedPortDroppedPkts=dhcpSnoopUntrustedPortDroppedPkts, mvrDomainPortImmediateLeave=mvrDomainPortImmediateLeave, mldSnoopFilterPortProfileId=mldSnoopFilterPortProfileId, portHistCurrentInUtilization=portHistCurrentInUtilization, cpuStatMaxUti=cpuStatMaxUti, mldSnoopVlanNumGeneralQuerySend=mldSnoopVlanNumGeneralQuerySend, mldSnoopProfileRangeTable=mldSnoopProfileRangeTable, swAtcMcastStormAlarmFireTrap=swAtcMcastStormAlarmFireTrap, smtpServerIpTable=smtpServerIpTable, diffServMacAceIndex=diffServMacAceIndex, sysResourceMgt=sysResourceMgt, swIndivPowerIndex=swIndivPowerIndex, daiTotalArpAclDroppedPkts=daiTotalArpAclDroppedPkts, portSecPortEntry=portSecPortEntry, dhcpClient=dhcpClient, mvrDomainGroupStaticAddress=mvrDomainGroupStaticAddress, timeRangePeriodicStartHours=timeRangePeriodicStartHours, igmpSnoopVlanEntry=igmpSnoopVlanEntry, atcMcastStormTcApplyTime=atcMcastStormTcApplyTime, lacpPortTable=lacpPortTable, portTransceiverThresholdInfoTable=portTransceiverThresholdInfoTable, cpuGuardStatus=cpuGuardStatus, staSystemStatus=staSystemStatus, dot1agCfmMepUnknownTrap=dot1agCfmMepUnknownTrap, tacacsPlusServerTable=tacacsPlusServerTable, xstInstanceCfgRootPort=xstInstanceCfgRootPort, portSecPortStatus=portSecPortStatus, swAtcBcastStormAlarmFireTrap=swAtcBcastStormAlarmFireTrap, mcastStormStatus=mcastStormStatus, mvrPortStatisticsNumSepcificQuerySend=mvrPortStatisticsNumSepcificQuerySend, sysTimeMgt=sysTimeMgt, mvrMgt=mvrMgt, portTransceiverThresholdInfoTxPowerLowAlarm=portTransceiverThresholdInfoTxPowerLowAlarm, diffServActionPktNewPhb=diffServActionPktNewPhb, daiGlobalIpAddrValidation=daiGlobalIpAddrValidation, aaaAccExecIndex=aaaAccExecIndex, cpuCurrentUti=cpuCurrentUti, mldSnoopPortNumGroups=mldSnoopPortNumGroups, dhcpSnoopBindingsIpAddress=dhcpSnoopBindingsIpAddress, lbdPortIfIndex=lbdPortIfIndex, mldSnoopPortNumJoinSend=mldSnoopPortNumJoinSend, igmpSnoopProfileRangeTable=igmpSnoopProfileRangeTable, sshServerMajorVersion=sshServerMajorVersion, aaaCommandPrivilegesMethodName=aaaCommandPrivilegesMethodName, diffServIpAceSourceIpAddr=diffServIpAceSourceIpAddr, diffServAccessGroupAclIndex=diffServAccessGroupAclIndex, dhcpSnoopLimitRate=dhcpSnoopLimitRate, portMediaInfoSerialNumber=portMediaInfoSerialNumber, igmpSnoopVlanIndex=igmpSnoopVlanIndex, sshDsaHostKey7=sshDsaHostKey7, smtpServerIp=smtpServerIp, swAtcMcastStormTcApplyTrap=swAtcMcastStormTcApplyTrap, mldSnoopProfileRangeEntry=mldSnoopProfileRangeEntry, userAuthUserName=userAuthUserName, igmpSnoopVlanNumGeneralQueryRecevied=igmpSnoopVlanNumGeneralQueryRecevied, vlanMgt=vlanMgt, igmpSnoopProfileId=igmpSnoopProfileId, userAuthTable=userAuthTable, networkAccessMacAddressRadiusServerInetAddress=networkAccessMacAddressRadiusServerInetAddress, portHistCurrentInDiscards=portHistCurrentInDiscards, ipSrcGuardAclBindingIpAddress=ipSrcGuardAclBindingIpAddress, ipFilterTelnetInetAddressEnd=ipFilterTelnetInetAddressEnd, daiVlanStatus=daiVlanStatus, mcastStormEntry=mcastStormEntry, igmpSnoopMulticastGroupIpAddress=igmpSnoopMulticastGroupIpAddress, trapMacNotifyAction=trapMacNotifyAction, portIndex=portIndex, ipDhcpRestart=ipDhcpRestart, consoleParity=consoleParity, igmpSnoopCurrentVlanGeneralQuerySuppression=igmpSnoopCurrentVlanGeneralQuerySuppression, mldSnoopVlanTable=mldSnoopVlanTable, taskCpuStatMaxUti=taskCpuStatMaxUti, mldSnoopQuerier=mldSnoopQuerier, privateVlanSessionUplinkPorts=privateVlanSessionUplinkPorts, igmpSnoopQueryDrop=igmpSnoopQueryDrop, timeRangeAbsoluteEndYears=timeRangeAbsoluteEndYears, rlPortOutputStatus=rlPortOutputStatus, staLoopbackDetectionPortTrapStatus=staLoopbackDetectionPortTrapStatus, dhcpSnoopInformationOptionEnable=dhcpSnoopInformationOptionEnable, mvrGroupCurrenDomainId=mvrGroupCurrenDomainId, diffServAccessGroupCounterStatus=diffServAccessGroupCounterStatus, xstInstanceCfgBridgeHelloTime=xstInstanceCfgBridgeHelloTime, swProdVersion=swProdVersion, trapIfIndex=trapIfIndex, mvrDomainStatus=mvrDomainStatus, atcMcastStormAlarmClearThreshold=atcMcastStormAlarmClearThreshold, igmpSnoopRouterCurrentVlanIndex=igmpSnoopRouterCurrentVlanIndex, dhcpSnoopBindingsVlanIndex=dhcpSnoopBindingsVlanIndex, diffServMeterModel=diffServMeterModel, diffServActionStatus=diffServActionStatus, portOpticalMonitoringInfoTxBiasCurrent=portOpticalMonitoringInfoTxBiasCurrent, dhcpSnoopBindingsMacAddress=dhcpSnoopBindingsMacAddress, portTransceiverThresholdInfoVccLowWarn=portTransceiverThresholdInfoVccLowWarn, tacacsPlusServerStatus=tacacsPlusServerStatus, portMediaInfoIfIndex=portMediaInfoIfIndex, radiusServerAuthPortNumber=radiusServerAuthPortNumber, dhcpSnoopInformationOptionEncodeFormat=dhcpSnoopInformationOptionEncodeFormat, portHistCurrentTable=portHistCurrentTable, aaaTacacsPlusGroupTable=aaaTacacsPlusGroupTable, portHistCurrentSampleIndex=portHistCurrentSampleIndex, mvrDomainRunningStatus=mvrDomainRunningStatus, staLoopbackDetectionPortIfIndex=staLoopbackDetectionPortIfIndex, diffServClassMapAttachCtlIndex=diffServClassMapAttachCtlIndex, diffServTcamTable=diffServTcamTable, igmpSnoopCurrentVlanLastMemQueryCount=igmpSnoopCurrentVlanLastMemQueryCount, mvrSourcePortmode=mvrSourcePortmode, timeRangePeriodicTimeRangeIndex=timeRangePeriodicTimeRangeIndex, diffServIpAceIndex=diffServIpAceIndex, atcBcastStormAlarmFireThreshold=atcBcastStormAlarmFireThreshold, portHistCurrentOutErrors=portHistCurrentOutErrors, diffServAclHwCounterIfIndex=diffServAclHwCounterIfIndex, ecs2100_28ppMIB=ecs2100_28ppMIB, portHistPreviousInBroadcastPkts=portHistPreviousInBroadcastPkts, mvrVlanStatisticsNumSepcificQuerySend=mvrVlanStatisticsNumSepcificQuerySend, portHistPreviousInErrors=portHistPreviousInErrors, portHistCurrentInErrors=portHistCurrentInErrors, pethPseMainExtEntry=pethPseMainExtEntry, diffServMacAceVidOp=diffServMacAceVidOp, trapVarLoginInetAddress=trapVarLoginInetAddress, dhcpSnoopGlobal=dhcpSnoopGlobal, portHistPreviousInOctets=portHistPreviousInOctets, fileAutoDownloadResultEntry=fileAutoDownloadResultEntry, atcMcastStormAlarmClearTrapStatus=atcMcastStormAlarmClearTrapStatus, smtpMgt=smtpMgt, aaaTacacsPlusGroupName=aaaTacacsPlusGroupName, fileInfoFileType=fileInfoFileType, ipFilterSnmpInetAddressStart=ipFilterSnmpInetAddressStart, portHist=portHist, voiceVlanPortTable=voiceVlanPortTable, igmpSnoopPortNumJoins=igmpSnoopPortNumJoins, mcastStormPktRate=mcastStormPktRate, staPathCostMethod=staPathCostMethod, atcBcastStormEnable=atcBcastStormEnable, remoteLogMgt=remoteLogMgt, igmpSnoopQuerier=igmpSnoopQuerier, diffServMeterRate=diffServMeterRate, diffServPolicyMapElementEntry=diffServPolicyMapElementEntry, igmpSnoopMulticastStaticTable=igmpSnoopMulticastStaticTable, timeRangePeriodicStartMinutes=timeRangePeriodicStartMinutes, diffServMacAceCosBitmask=diffServMacAceCosBitmask, swPowerStatus=swPowerStatus, trunkCreation=trunkCreation, mldSnoopRobustness=mldSnoopRobustness, trunkMgt=trunkMgt, networkAccessMacFilterWithMaskMacAddress=networkAccessMacFilterWithMaskMacAddress, restartConfigFile=restartConfigFile, powerSavingStatus=powerSavingStatus, unknownUcastStormTable=unknownUcastStormTable, sshConnStatus=sshConnStatus, privateVlanPromPortPrimaryVlanId=privateVlanPromPortPrimaryVlanId, vlanEntry=vlanEntry, dhcpOption82RemoteIDString=dhcpOption82RemoteIDString, atcBcastStormTcApplyTime=atcBcastStormTcApplyTime, swIndivPowerUnitIndex=swIndivPowerUnitIndex, portTransceiverThresholdInfoIfIndex=portTransceiverThresholdInfoIfIndex, portOutOctetRate=portOutOctetRate, cpuGuardTrapStatus=cpuGuardTrapStatus, igmpSnoopPortNumSpecificQueryReceived=igmpSnoopPortNumSpecificQueryReceived, memoryStatus=memoryStatus, mvrVlanStatisticsNumInvalidReport=mvrVlanStatisticsNumInvalidReport, voiceVlanPortRuleOui=voiceVlanPortRuleOui, mvrDomainGroupCurrentAddress=mvrDomainGroupCurrentAddress, vtyMgt=vtyMgt, igmpSnoopProfileRangeEntry=igmpSnoopProfileRangeEntry, voiceVlanPortRuleLldp=voiceVlanPortRuleLldp, privateVlanPrivatePortIfIndex=privateVlanPrivatePortIfIndex, xstInstancePortTable=xstInstancePortTable, diffServIpAceDestIpAddr=diffServIpAceDestIpAddr, lbdMode=lbdMode, switchJumboFrameStatus=switchJumboFrameStatus, dot1agCfmMepUpTrap=dot1agCfmMepUpTrap, privateVlanSessionTable=privateVlanSessionTable, igmpSnoopMulticastStaticIpAddress=igmpSnoopMulticastStaticIpAddress, staPortBpduGuard=staPortBpduGuard, aaaMethodTable=aaaMethodTable, daiLogIndex=daiLogIndex, mvrProfileTable=mvrProfileTable)
mibBuilder.exportSymbols("ECS2100-28PP-MIB", aaaCommandPrivilegesTable=aaaCommandPrivilegesTable, ecs2100_28ppTrapsPrefix=ecs2100_28ppTrapsPrefix, mldSnoopPortNumGeneralQuerySend=mldSnoopPortNumGeneralQuerySend, prioDscpToDscpTable=prioDscpToDscpTable, vtyLoginResponseTimeout=vtyLoginResponseTimeout, mldSnoopFilterPortEntry=mldSnoopFilterPortEntry, portMgt=portMgt, privateVlanVlanIndex=privateVlanVlanIndex, igmpSnoopPortNumInvalidReport=igmpSnoopPortNumInvalidReport, portSpeedDpxCfg=portSpeedDpxCfg, portHistControlDataSource=portHistControlDataSource, rlPortLimitInKiloResolution=rlPortLimitInKiloResolution, atcMcastStormEnable=atcMcastStormEnable, atcBcastStormAlarmClearThreshold=atcBcastStormAlarmClearThreshold, igmpSnoopPortNumGeneralQuerySend=igmpSnoopPortNumGeneralQuerySend, sshRsaHostKey1=sshRsaHostKey1, pethPsePortExtMaximumPowerValue=pethPsePortExtMaximumPowerValue, igmpSnoopThrottlePortCurrentGroups=igmpSnoopThrottlePortCurrentGroups, subnetVlanEntry=subnetVlanEntry, igmpSnoopRouterCurrentTable=igmpSnoopRouterCurrentTable, cpuGuardMaxThreshold=cpuGuardMaxThreshold, diffServArpAceDestIpAddrBitmask=diffServArpAceDestIpAddrBitmask, mldSnoopVlanClearStatistics=mldSnoopVlanClearStatistics, timeRangePeriodicEntry=timeRangePeriodicEntry, ntpAuthKeyId=ntpAuthKeyId, diffServIpAceControlCode=diffServIpAceControlCode, swLoaderVer=swLoaderVer, timeRangePeriodicEndMinutes=timeRangePeriodicEndMinutes, mstInstanceEditTable=mstInstanceEditTable, mstInstanceEditVlansMap2k=mstInstanceEditVlansMap2k, mvrProxySwitching=mvrProxySwitching, daiVlanIndex=daiVlanIndex, remoteLogFacilityType=remoteLogFacilityType, cableDiagResultDistancePairA=cableDiagResultDistancePairA, dhcpSnoopBindingsEntry=dhcpSnoopBindingsEntry, sshHostKeySaveAction=sshHostKeySaveAction, mldSnoopUnknownMcastMode=mldSnoopUnknownMcastMode, diffServMeterEntry=diffServMeterEntry, mldSnoopRouterCurrentEntry=mldSnoopRouterCurrentEntry, mldSnoopQueryMaxResponseTime=mldSnoopQueryMaxResponseTime, aaaUpdate=aaaUpdate, dhcpSnoopBindings=dhcpSnoopBindings, rspanOperStatus=rspanOperStatus, cableDiagResultEntry=cableDiagResultEntry, privateVlanStatus=privateVlanStatus, mvrRobustnessValue=mvrRobustnessValue, diffServMacAceCosOp=diffServMacAceCosOp, mvrDomainPortEntry=mvrDomainPortEntry, swMemoryUtiRisingThresholdNotification=swMemoryUtiRisingThresholdNotification, prioDscpToDscpPhbValue=prioDscpToDscpPhbValue, smtpStatus=smtpStatus, mvrDomainPortTable=mvrDomainPortTable, swRoleInSystem=swRoleInSystem, diffServAclHwCounterDirection=diffServAclHwCounterDirection, smtpDestEMailStatus=smtpDestEMailStatus, radiusServerKey=radiusServerKey, sshDsaHostKey2=sshDsaHostKey2, consoleBaudRate=consoleBaudRate, unknownUcastStormIfIndex=unknownUcastStormIfIndex, timeRangeAbsoluteEndDays=timeRangeAbsoluteEndDays, xstInstancePortEnable=xstInstancePortEnable, diffServTcamPool=diffServTcamPool, sshMgt=sshMgt, portHistControlInterval=portHistControlInterval, mstMaxHops=mstMaxHops, ntpAuthKeyTable=ntpAuthKeyTable, igmpSnoopMulticastStaticEntry=igmpSnoopMulticastStaticEntry, mvrDomainClearDynamicGroups=mvrDomainClearDynamicGroups, staLoopbackDetectionPortShutdownInterval=staLoopbackDetectionPortShutdownInterval, prioCosToDscpEntry=prioCosToDscpEntry, mvrDomainGroupStaticReceiverVlan=mvrDomainGroupStaticReceiverVlan, igmpSnoopThrottlePortRunningStatus=igmpSnoopThrottlePortRunningStatus, swProdName=swProdName, diffServIpAceProtocol=diffServIpAceProtocol, prioIfClassificationModeStatus=prioIfClassificationModeStatus, sntpServerStatus=sntpServerStatus, ecs2110_26t=ecs2110_26t, diffServMeterTable=diffServMeterTable, mldSnoopRouterCurrentVlanIndex=mldSnoopRouterCurrentVlanIndex, ipFilterSnmpInetAddressType=ipFilterSnmpInetAddressType, mvrPortStatisticsNumGeneralQuerySend=mvrPortStatisticsNumGeneralQuerySend, dhcpRelayServerInetAddrIndex=dhcpRelayServerInetAddrIndex, mldSnoopQueryInterval=mldSnoopQueryInterval, cableDiagResultIfIndex=cableDiagResultIfIndex, mvrDomainPortType=mvrDomainPortType, swAtcBcastStormTcReleaseTrap=swAtcBcastStormTcReleaseTrap, dot1xMgt=dot1xMgt, sshRsaHostKey8=sshRsaHostKey8, atcBcastStormTcAction=atcBcastStormTcAction, userauthCreateUserTrap=userauthCreateUserTrap, mldSnoopCurrentVlanImmediateLeave=mldSnoopCurrentVlanImmediateLeave, atcMcastStormAlarmFireTrapStatus=atcMcastStormAlarmFireTrapStatus, timeRangePeriodicStatus=timeRangePeriodicStatus, mstInstanceEditVlansMap4k=mstInstanceEditVlansMap4k, igmpSnoopVersion=igmpSnoopVersion, pethPsePortOnOffNotification=pethPsePortOnOffNotification, portHistCurrentOutDiscards=portHistCurrentOutDiscards, mldSnoopMulticastStaticVlanIndex=mldSnoopMulticastStaticVlanIndex, rspanRemotePorts=rspanRemotePorts, igmpSnoopVlanNumJoins=igmpSnoopVlanNumJoins, diffServIpAceStatus=diffServIpAceStatus, portShutdownReason=portShutdownReason, timeRangeAbsoluteTimeRangeIndex=timeRangeAbsoluteTimeRangeIndex, diffServIpAceSourcePortOp=diffServIpAceSourcePortOp, cpuUtiRisingThreshold=cpuUtiRisingThreshold, xstInstancePortEntry=xstInstancePortEntry, prioSchedModePort=prioSchedModePort, diffServClassMapStatus=diffServClassMapStatus, mvrDomainAssociatedProfileEntry=mvrDomainAssociatedProfileEntry, swPortSecurityTrap=swPortSecurityTrap, netConfigStatus=netConfigStatus, staPortAdminEdgePortWithAuto=staPortAdminEdgePortWithAuto, timeRangeMgt=timeRangeMgt, sshDsaHostKeySHA1FingerPrint=sshDsaHostKeySHA1FingerPrint, mvrDomainIfIndex=mvrDomainIfIndex, mvrVlanStatisticsClearStatistics=mvrVlanStatisticsClearStatistics, swServiceTag=swServiceTag, swAtcBcastStormAlarmClearTrap=swAtcBcastStormAlarmClearTrap, vlanStaticIndex=vlanStaticIndex, staLoopbackDetectionPortTable=staLoopbackDetectionPortTable, diffServActionPktNewDscp=diffServActionPktNewDscp, diffServClassMapElementIndexList=diffServClassMapElementIndexList, diffServMacAceEtherTypeOp=diffServMacAceEtherTypeOp, sshHostKeyDelAction=sshHostKeyDelAction, timeRangePeriodicStartDaysOfTheWeek=timeRangePeriodicStartDaysOfTheWeek, fileInfoFileName=fileInfoFileName, dhcpcOptions=dhcpcOptions, diffServClassMapAttachCtl=diffServClassMapAttachCtl, atcMgt=atcMgt, mldSnoopRouterPortExpireTime=mldSnoopRouterPortExpireTime, mldSnoopCurrentVlanEntry=mldSnoopCurrentVlanEntry, portHistCurrentInUcastPkts=portHistCurrentInUcastPkts, mvrVlanStatisticsEntry=mvrVlanStatisticsEntry, diffServAccessGroupType=diffServAccessGroupType, igmpSnoopRouterStaticEntry=igmpSnoopRouterStaticEntry, igmpSnoopRouterAlertOptionCheck=igmpSnoopRouterAlertOptionCheck, aaaRadiusGroupServerBitMap=aaaRadiusGroupServerBitMap, mldSnoopVersion=mldSnoopVersion, mvrProfileGroupEndIPAddress=mvrProfileGroupEndIPAddress, dot1xAuthConfigExtTable=dot1xAuthConfigExtTable, dhcpSnoopPortConfigEntry=dhcpSnoopPortConfigEntry, sshUserRsaKey2=sshUserRsaKey2, telnetMgt=telnetMgt, tacacsPlusServerAddress=tacacsPlusServerAddress, ipFilterAllClientCtlInetAddressType=ipFilterAllClientCtlInetAddressType, portTable=portTable, igmpSnoopProfileCtl=igmpSnoopProfileCtl, mvrProfileAction=mvrProfileAction, sshKeySize=sshKeySize, igmpSnoopThrottlePortMaxGroups=igmpSnoopThrottlePortMaxGroups, portHistControlName=portHistControlName, mvrProfileGroupCtlTable=mvrProfileGroupCtlTable, portHistPreviousOutBroadcastPkts=portHistPreviousOutBroadcastPkts, mvrDomainTable=mvrDomainTable, pethPseMainExtDllPowerType=pethPseMainExtDllPowerType, diffServActionTable=diffServActionTable, aaaRadiusGroupStatus=aaaRadiusGroupStatus, mvrPortStatisticsNumJoinSend=mvrPortStatisticsNumJoinSend, mldSnoopRouterCurrentTable=mldSnoopRouterCurrentTable, mldSnoopPortNumInvalidReport=mldSnoopPortNumInvalidReport, ipFilterTelnetInetStatus=ipFilterTelnetInetStatus, ipSrcGuardAclEntry=ipSrcGuardAclEntry, diffServIpv6AceDestPortBitmask=diffServIpv6AceDestPortBitmask, mldSnoopMulticastStaticEntry=mldSnoopMulticastStaticEntry, atcBcastStormSampleType=atcBcastStormSampleType, ipFilterHttpInetTable=ipFilterHttpInetTable, igmpSnoopPortNumGroups=igmpSnoopPortNumGroups, cpuUtiFallingThreshold=cpuUtiFallingThreshold, switchProductId=switchProductId, radiusServerEntry=radiusServerEntry, networkAccessPortPortIndex=networkAccessPortPortIndex, dot1agCfmMepMissingTrap=dot1agCfmMepMissingTrap, sshRsaHostKeySHA1FingerPrint=sshRsaHostKeySHA1FingerPrint, consoleLoginResponseTimeout=consoleLoginResponseTimeout, dhcpSnoopInformationOptionPolicy=dhcpSnoopInformationOptionPolicy, sshDsaHostKey1=sshDsaHostKey1, atcMcastStormEntry=atcMcastStormEntry, diffServIpv6AceAccess=diffServIpv6AceAccess, igmpSnoopThrottlePortAction=igmpSnoopThrottlePortAction, portMediaInfoEntry=portMediaInfoEntry, vlanPortIndex=vlanPortIndex, portTransceiverThresholdInfoVccHighWarn=portTransceiverThresholdInfoVccHighWarn, memoryFreed=memoryFreed, bcastStormEntry=bcastStormEntry, timeRangeAbsoluteStartHours=timeRangeAbsoluteStartHours, voiceVlanOuiStatus=voiceVlanOuiStatus, pingPacketSize=pingPacketSize, mstInstanceOperVlansMap=mstInstanceOperVlansMap, igmpSnoopMrouterForwardMode=igmpSnoopMrouterForwardMode, portInUtil=portInUtil, sshUserRsaKey4=sshUserRsaKey4, ntpAuthenticateStatus=ntpAuthenticateStatus, sysTimeZone=sysTimeZone, portMediaInfoVendorName=portMediaInfoVendorName, ntpServiceMode=ntpServiceMode, mvrPortDomainId=mvrPortDomainId, rspanDstPort=rspanDstPort, aaaMethodPrivilegeLevel=aaaMethodPrivilegeLevel, bcastStormTable=bcastStormTable, unknownUcastStormPktRate=unknownUcastStormPktRate, daiVlanTable=daiVlanTable, timeRangePeriodicTable=timeRangePeriodicTable, networkAccessMacFilterWithMaskID=networkAccessMacFilterWithMaskID, diffServMgt=diffServMgt, ecs2100_10p=ecs2100_10p, edgecoreNetworksMgt=edgecoreNetworksMgt, mvrVlanStatisticsDomainId=mvrVlanStatisticsDomainId, diffServIpAceDestPortOp=diffServIpAceDestPortOp, ipSrcGuardAclTable=ipSrcGuardAclTable, consoleMgt=consoleMgt, portSecMacAsPermanentPortIndex=portSecMacAsPermanentPortIndex, voiceVlanPortRemainAge=voiceVlanPortRemainAge, diffServActionList=diffServActionList, privateVlanSessionStatus=privateVlanSessionStatus, portTransceiverThresholdInfoTemperatureHighAlarm=portTransceiverThresholdInfoTemperatureHighAlarm, portHistCurrentInUnknownProtos=portHistCurrentInUnknownProtos, staPortBpduGuardAutoRecoveryInterval=staPortBpduGuardAutoRecoveryInterval, igmpSnoopTcnQuerySolicit=igmpSnoopTcnQuerySolicit, daiTotalDestMacDroppedPkts=daiTotalDestMacDroppedPkts, trunkStatus=trunkStatus, mldSnoopProfileAction=mldSnoopProfileAction, swHardwareVer=swHardwareVer, fileInfoCreationTime=fileInfoCreationTime, igmpSnoopProfileTable=igmpSnoopProfileTable, prioDscpToDscpEntry=prioDscpToDscpEntry, trapVarLoginUserName=trapVarLoginUserName, igmpSnoopFilterStatus=igmpSnoopFilterStatus, swBootRomVer=swBootRomVer, portHistCurrentOutUtilization=portHistCurrentOutUtilization, atcMcastStormCurrentTrafficRate=atcMcastStormCurrentTrafficRate, igmpSnoopStatus=igmpSnoopStatus, diffServAclAttachCtlAceType=diffServAclAttachCtlAceType, portHistPreviousSampleIndex=portHistPreviousSampleIndex, netConfigSubnetMask=netConfigSubnetMask, remoteLogLevel=remoteLogLevel, mldSnoopProfileCtlAction=mldSnoopProfileCtlAction, portHistPreviousOutOctets=portHistPreviousOutOctets, diffServPolicyMapEntry=diffServPolicyMapEntry, aaaMethodClientType=aaaMethodClientType, diffServPolicyMapAttachCtlElementIndex=diffServPolicyMapAttachCtlElementIndex, mirrorType=mirrorType, fileCopyMgt=fileCopyMgt, igmpSnoopProfileCtlId=igmpSnoopProfileCtlId, ipFilterSnmpInetAddressEnd=ipFilterSnmpInetAddressEnd, mldSnoopRouterStaticPorts=mldSnoopRouterStaticPorts, ipFilterSnmpInetStatus=ipFilterSnmpInetStatus, portTransceiverThresholdInfoTxBiasCurrentLowWarn=portTransceiverThresholdInfoTxBiasCurrentLowWarn, telnetStatus=telnetStatus, igmpSnoopRouterCurrentPorts=igmpSnoopRouterCurrentPorts, mldSnoopVlanNumGeneralQueryRecevied=mldSnoopVlanNumGeneralQueryRecevied, diffServAclAttachCtlAction=diffServAclAttachCtlAction, mvrDomainGroupStaticEntry=mvrDomainGroupStaticEntry, mvrProfileName=mvrProfileName, staTxHoldCount=staTxHoldCount)
mibBuilder.exportSymbols("ECS2100-28PP-MIB", sysLogStatus=sysLogStatus, ipFilterAllClientCtlAction=ipFilterAllClientCtlAction, ipSrcGuardPortIfIndex=ipSrcGuardPortIfIndex, networkAccessPortGuestVlan=networkAccessPortGuestVlan, portFlowCtrlStatus=portFlowCtrlStatus, networkAccessMacFilterWithMaskEntry=networkAccessMacFilterWithMaskEntry, diffServPolicyMapDescription=diffServPolicyMapDescription, diffServIpAceDscp=diffServIpAceDscp, mldSnoopProfileEntry=mldSnoopProfileEntry, dhcpSnoopVlanConfigEntry=dhcpSnoopVlanConfigEntry, radiusServerTimeout=radiusServerTimeout, diffServAccessGroupStatus=diffServAccessGroupStatus, prioDscpToDscpIfValue=prioDscpToDscpIfValue, mldSnoopRouterCurrentPorts=mldSnoopRouterCurrentPorts, portHistPreviousInDiscards=portHistPreviousInDiscards, vtySilentTime=vtySilentTime, xstInstanceCfgBridgeMaxAge=xstInstanceCfgBridgeMaxAge, mldSnoopPortNumJoinSuccess=mldSnoopPortNumJoinSuccess, xstInstancePortForwardTransitions=xstInstancePortForwardTransitions, privateVlanPromPortSecondaryRemap4k=privateVlanPromPortSecondaryRemap4k, igmpSnoopFilterPortIndex=igmpSnoopFilterPortIndex, networkAccessPortMacFilter=networkAccessPortMacFilter, daiLogEntry=daiLogEntry, diffServAccessGroupIfIndex=diffServAccessGroupIfIndex, netConfigIfIndex=netConfigIfIndex, staPortTcPropStop=staPortTcPropStop, voiceVlanOuiDescription=voiceVlanOuiDescription, mldSnoopVlanEntry=mldSnoopVlanEntry, trunkIndex=trunkIndex, portTransceiverThresholdInfoTxBiasCurrentHighWarn=portTransceiverThresholdInfoTxBiasCurrentHighWarn, diffServPolicyMapElementIndexList=diffServPolicyMapElementIndexList, atcBcastStormTable=atcBcastStormTable, powerSavingTable=powerSavingTable, subnetVlanIpAddress=subnetVlanIpAddress, ipSrcGuardAclBindingVlanIndex=ipSrcGuardAclBindingVlanIndex, lineMgt=lineMgt, cpuGuardControlTrap=cpuGuardControlTrap, ipFilterHttpInetAddressType=ipFilterHttpInetAddressType, timeRangePeriodicEndDaysOfTheWeek=timeRangePeriodicEndDaysOfTheWeek, daiVlanArpAclName=daiVlanArpAclName, mldSnoopVlanNumJoinSend=mldSnoopVlanNumJoinSend, portAutonegotiation=portAutonegotiation, portHistPreviousInMulticastPkts=portHistPreviousInMulticastPkts, smtpSourceEMail=smtpSourceEMail, mvrDomainGroupStaticPorts=mvrDomainGroupStaticPorts, dot1xAuthConfigExtEntry=dot1xAuthConfigExtEntry, bcastStormPktRate=bcastStormPktRate, consoleExecTimeout=consoleExecTimeout, lbdPortAdminState=lbdPortAdminState, mirrorMgt=mirrorMgt, igmpSnoopUnsolicitedReportInterval=igmpSnoopUnsolicitedReportInterval, mldSnoopPortTable=mldSnoopPortTable, diffServActionPktNewPri=diffServActionPktNewPri, cableDiagResultTable=cableDiagResultTable, bcastStormStatus=bcastStormStatus, mstInstanceEditVlansMap=mstInstanceEditVlansMap, trapAutoUpgradeResult=trapAutoUpgradeResult, igmpSnoopMulticastDataDrop=igmpSnoopMulticastDataDrop, dhcpSnoopBindingsEntryType=dhcpSnoopBindingsEntryType, portHistControlEntry=portHistControlEntry, trapDhcpServerMacAddress=trapDhcpServerMacAddress, dot1agCfmMepDownTrap=dot1agCfmMepDownTrap, amtrMacAddrAgingStatus=amtrMacAddrAgingStatus, mldSnoopMulticastStaticStatus=mldSnoopMulticastStaticStatus, ipSrcGuardConfigTable=ipSrcGuardConfigTable, macVlanMacAddress=macVlanMacAddress, cableDiagResultTime=cableDiagResultTime, rspanEntry=rspanEntry, swEpldVer=swEpldVer, mvrPortStatisticsEntry=mvrPortStatisticsEntry, dhcpSnoopPortConfigTable=dhcpSnoopPortConfigTable, networkAccessMacAddressInetAddressType=networkAccessMacAddressInetAddressType, igmpSnoopThrottlePortTable=igmpSnoopThrottlePortTable, rspanStatus=rspanStatus, diffServIpAceDestPortBitmask=diffServIpAceDestPortBitmask, fileAutoDownloadResultStatus=fileAutoDownloadResultStatus, trunkEntry=trunkEntry, sntpServerIndex=sntpServerIndex, diffServArpAceTable=diffServArpAceTable, timeRangeAbsoluteTable=timeRangeAbsoluteTable, dhcpSnoopMgt=dhcpSnoopMgt, diffServArpAceSourceIpAddrBitmask=diffServArpAceSourceIpAddrBitmask, diffServMacAceTable=diffServMacAceTable, vlanStaticExtRspanStatus=vlanStaticExtRspanStatus, userAuthMgt=userAuthMgt, ntpPollInterval=ntpPollInterval, mldSnoopVlanNumSepcificQuerySend=mldSnoopVlanNumSepcificQuerySend, lbdPortOperState=lbdPortOperState, voiceVlanOuiAddress=voiceVlanOuiAddress, portUtilTable=portUtilTable, aaaAccountStatus=aaaAccountStatus, dhcpRelayServerInetAddress=dhcpRelayServerInetAddress, switchMgt=switchMgt, mstInstanceEditEntry=mstInstanceEditEntry, tacacsPlusServerKey=tacacsPlusServerKey, diffServIpv6AceDscp=diffServIpv6AceDscp, unknownUcastStormEntry=unknownUcastStormEntry, pethPsePortTimeRangeStatus=pethPsePortTimeRangeStatus, swIdentifier=swIdentifier, pingPacketLossRate=pingPacketLossRate, dot1agCfmMaUpTrap=dot1agCfmMaUpTrap, timeRangeTable=timeRangeTable, lbdPortTable=lbdPortTable, diffServAclAttachCtl=diffServAclAttachCtl, diffServPolicyMapElementMeterIndex=diffServPolicyMapElementMeterIndex, igmpSnoopProfileRangeStartInetAddress=igmpSnoopProfileRangeStartInetAddress, daiPortEntry=daiPortEntry, mldSnoopMulticastCurrentTable=mldSnoopMulticastCurrentTable, trapIpFilterRejectIp=trapIpFilterRejectIp, lbdTrap=lbdTrap, diffServClassMapTable=diffServClassMapTable, consoleDataBits=consoleDataBits, mldSnoopProfileCtlStartInetAddress=mldSnoopProfileCtlStartInetAddress, mldSnoopVlanNumInvalidReport=mldSnoopVlanNumInvalidReport, remoteLogServerStatus=remoteLogServerStatus, logoutTrap=logoutTrap, ecs2100_10t=ecs2100_10t, mldSnoopUnsolicitedReportInterval=mldSnoopUnsolicitedReportInterval, staPortBpduFilter=staPortBpduFilter, igmpSnoopVlanNumSepcificQuerySend=igmpSnoopVlanNumSepcificQuerySend, taskCpuEntry=taskCpuEntry, portSpeedDpxStatus=portSpeedDpxStatus, portOpticalMonitoringInfoRxPower=portOpticalMonitoringInfoRxPower, portTransceiverThresholdInfoTxBiasCurrentHighAlarm=portTransceiverThresholdInfoTxBiasCurrentHighAlarm, fileAutoDownloadResultTable=fileAutoDownloadResultTable, xstInstanceCfgForwardDelay=xstInstanceCfgForwardDelay, lbdPortLoopedVlan=lbdPortLoopedVlan, portFlowCtrlCfg=portFlowCtrlCfg, ecs2100_28t=ecs2100_28t, dot1agCfmLoopFindTrap=dot1agCfmLoopFindTrap, portComboForcedMode=portComboForcedMode, diffServActionIndex=diffServActionIndex, mldSnoopProfileCtlEndInetAddress=mldSnoopProfileCtlEndInetAddress, daiGlobalLogNumber=daiGlobalLogNumber, swChassisServiceTag=swChassisServiceTag, ecs2100_10pe=ecs2100_10pe, mvrProfileGropuCtlProfileId=mvrProfileGropuCtlProfileId, dhcpSnoopVlanIndex=dhcpSnoopVlanIndex, portOpticalMonitoringInfoVcc=portOpticalMonitoringInfoVcc, portSecMaxMacCount=portSecMaxMacCount, diffServAclHwCounterTable=diffServAclHwCounterTable, networkAccessMacFilterWithMaskMacAddressMask=networkAccessMacFilterWithMaskMacAddressMask, diffServIpAceEntry=diffServIpAceEntry, mvrProxyQueryInterval=mvrProxyQueryInterval, fileMgt=fileMgt, diffServPolicyMapElementTable=diffServPolicyMapElementTable, portTransceiverThresholdInfoVccHighAlarm=portTransceiverThresholdInfoVccHighAlarm, timeRangeAbsoluteStartYears=timeRangeAbsoluteStartYears, mldSnoopProfileCtlInetAddressType=mldSnoopProfileCtlInetAddressType, sshDsaHostKey8=sshDsaHostKey8, consoleStopBits=consoleStopBits, pethMainPowerUsageOnNotification=pethMainPowerUsageOnNotification, timeRangeStatus=timeRangeStatus, daiTotalProcessedPkts=daiTotalProcessedPkts, igmpSnoopVersionExclusive=igmpSnoopVersionExclusive, igmpSnoopProfileCtlEndInetAddress=igmpSnoopProfileCtlEndInetAddress, radiusServerGlobalAuthPort=radiusServerGlobalAuthPort, mvrProfileCtlAction=mvrProfileCtlAction, portHistCurrentInMulticastPkts=portHistCurrentInMulticastPkts, aaaTacacsPlusGroupStatus=aaaTacacsPlusGroupStatus, igmpSnoopPortNumLeavesSend=igmpSnoopPortNumLeavesSend, mstInstanceOperEntry=mstInstanceOperEntry, trapIpFilterRejectMode=trapIpFilterRejectMode, mldSnoopProfileTable=mldSnoopProfileTable, portHistCurrentOutBroadcastPkts=portHistCurrentOutBroadcastPkts, mstInstanceOperIndex=mstInstanceOperIndex, diffServMacAceStatus=diffServMacAceStatus, portTrunkIndex=portTrunkIndex, radiusServerGlobalKey=radiusServerGlobalKey, networkAccessClearMacAddressAction=networkAccessClearMacAddressAction, diffServMacAceEntry=diffServMacAceEntry, ecs2100_28ppNotifications=ecs2100_28ppNotifications, portHistCurrentIndex=portHistCurrentIndex, sshRsaHostKeyMD5FingerPrint=sshRsaHostKeyMD5FingerPrint, mstInstanceOperVlansMap3k=mstInstanceOperVlansMap3k, voiceVlanMgt=voiceVlanMgt, atcMcastStormAlarmFireThreshold=atcMcastStormAlarmFireThreshold, dhcpRelayServerInetAddrIfIndex=dhcpRelayServerInetAddrIfIndex, dhcpSnoopStatistics=dhcpSnoopStatistics, mstInstanceEditIndex=mstInstanceEditIndex, privateVlanPrivatePortEntry=privateVlanPrivatePortEntry, diffServAclAttachCtlIndex=diffServAclAttachCtlIndex, sshUserDsaKey4=sshUserDsaKey4, diffServIpv6AceStatus=diffServIpv6AceStatus, diffServMacAceSourceMacAddrBitmask=diffServMacAceSourceMacAddrBitmask, aaaRadiusGroupIndex=aaaRadiusGroupIndex, prioSchedModePortIndex=prioSchedModePortIndex, fileCopySrcOperType=fileCopySrcOperType, sshUserRsaKey6=sshUserRsaKey6, portMediaInfoFiberType=portMediaInfoFiberType, diffServPolicyMapAttachCtlIndex=diffServPolicyMapAttachCtlIndex, mvrProfileId=mvrProfileId, igmpSnoopCurrentVlanQueryIntvl=igmpSnoopCurrentVlanQueryIntvl, mvrDomainPortActive=mvrDomainPortActive, fileAutoDownloadResultUnitID=fileAutoDownloadResultUnitID, swCpuUtiFallingNotification=swCpuUtiFallingNotification, fileCopySrcFileName=fileCopySrcFileName, igmpSnoopCurrentVlanProxyReporting=igmpSnoopCurrentVlanProxyReporting, vlanStaticExtTable=vlanStaticExtTable, pethPsePortExtTable=pethPsePortExtTable, portMacAddrLearningCount=portMacAddrLearningCount, radiusServerGlobalTimeout=radiusServerGlobalTimeout, sysTimeZoneName=sysTimeZoneName, diffServAclName=diffServAclName, dhcpcIfVendorClassIdMode=dhcpcIfVendorClassIdMode, swProdManufacturer=swProdManufacturer, sshUserKeyDelAction=sshUserKeyDelAction, subnetVlanId=subnetVlanId, smtpServerIpStatus=smtpServerIpStatus, sshUserDsaKey1=sshUserDsaKey1, xstInstancePortDesignatedBridge=xstInstancePortDesignatedBridge, prioWrrPortWeight=prioWrrPortWeight, diffServIpAceType=diffServIpAceType, timeRangeEntry=timeRangeEntry, portSecMacAsPermanentMgt=portSecMacAsPermanentMgt, mldSnoopMulticastStaticTable=mldSnoopMulticastStaticTable, igmpSnoopProxyReporting=igmpSnoopProxyReporting, mldSnoopProfileRangeEndInetAddress=mldSnoopProfileRangeEndInetAddress, dhcpOption82EncodeFormat=dhcpOption82EncodeFormat, tacacsPlusServerEntry=tacacsPlusServerEntry, igmpSnoopRouterCurrentStatus=igmpSnoopRouterCurrentStatus, mvrDomainGroupCurrentEntry=mvrDomainGroupCurrentEntry, igmpSnoopPortNumJoinSend=igmpSnoopPortNumJoinSend, userAuthEntry=userAuthEntry, staPortAdminPointToPoint=staPortAdminPointToPoint, mvrVlanStatisticsNumSpecificQueryReceived=mvrVlanStatisticsNumSpecificQueryReceived, portTransceiverThresholdInfoRxPowerLowAlarm=portTransceiverThresholdInfoRxPowerLowAlarm, daiLogSrcMacAddress=daiLogSrcMacAddress, dhcpSnoopPortMaxNumber=dhcpSnoopPortMaxNumber, mstInstanceEditVlansMap3k=mstInstanceEditVlansMap3k, sshUserRsaKey7=sshUserRsaKey7, mvrVlanStatisticsNumLeavesSend=mvrVlanStatisticsNumLeavesSend, igmpSnoopCurrentVlanEntry=igmpSnoopCurrentVlanEntry, rspanSessionId=rspanSessionId, remoteLogStatus=remoteLogStatus, portTransceiverThresholdInfoTxPowerHighWarn=portTransceiverThresholdInfoTxPowerHighWarn, mldSnoopThrottlePortIndex=mldSnoopThrottlePortIndex, mldSnoopRouterStaticTable=mldSnoopRouterStaticTable, portMacAddrLearningStatus=portMacAddrLearningStatus, telnetPortNumber=telnetPortNumber, portSecAction=portSecAction, diffServAclHwCounterAclIndex=diffServAclHwCounterAclIndex, prioCosToDscpCosValue=prioCosToDscpCosValue, powerSavingEntry=powerSavingEntry, sshUserDsaKey3=sshUserDsaKey3, trapDestMgt=trapDestMgt, daiLogTable=daiLogTable, mvrDomainGroupCurrentReceiverVlan=mvrDomainGroupCurrentReceiverVlan, voiceVlanAgingTime=voiceVlanAgingTime, netConfigUnnumbered=netConfigUnnumbered, pingIpAddress=pingIpAddress, diffServIpv6AceSourcePortOp=diffServIpv6AceSourcePortOp, dhcpRelayServerInetAddrTable=dhcpRelayServerInetAddrTable, dhcpSnoopPortTrustEnable=dhcpSnoopPortTrustEnable)
mibBuilder.exportSymbols("ECS2100-28PP-MIB", igmpSnoopProfileCtlAction=igmpSnoopProfileCtlAction, mvrVlanStatisticsNumJoins=mvrVlanStatisticsNumJoins, daiLogDestIpAddress=daiLogDestIpAddress, privateVlanPromPortEntry=privateVlanPromPortEntry, sshRsaHostKey7=sshRsaHostKey7, StaPathCostMode=StaPathCostMode, atcMcastStormTable=atcMcastStormTable, cpuGuardCurrentThreshold=cpuGuardCurrentThreshold, mcastStormIfIndex=mcastStormIfIndex, dot1vProtocolExPortGroupPriority=dot1vProtocolExPortGroupPriority, mirrorEntry=mirrorEntry, macVlanStatus=macVlanStatus, diffServAclEntry=diffServAclEntry, cpuPeakTime=cpuPeakTime, igmpSnoopMulticastGroupVlanIndex=igmpSnoopMulticastGroupVlanIndex, diffServTcamUsed=diffServTcamUsed, switchIndivPowerEntry=switchIndivPowerEntry, pingReceivedPackets=pingReceivedPackets, mvrVlanStatisticsTable=mvrVlanStatisticsTable, fileCopyUnitId=fileCopyUnitId, portOutUtil=portOutUtil, cpuGuardHighWatermark=cpuGuardHighWatermark, mldSnoopMgt=mldSnoopMgt, vlanIndex=vlanIndex, dhcpOption82RemoteIDMode=dhcpOption82RemoteIDMode, timeRangeAbsoluteStartDays=timeRangeAbsoluteStartDays, xstInstancePortState=xstInstancePortState, dhcpOption82RelayServerAddrIndex=dhcpOption82RelayServerAddrIndex, dot1xAuthConfigExtPortIntrusionAction=dot1xAuthConfigExtPortIntrusionAction, ipHttpsState=ipHttpsState, pethPsePortTimeRange=pethPsePortTimeRange, cpuStatus=cpuStatus, ipSrcGuardMgt=ipSrcGuardMgt, pethPsePortExtEntry=pethPsePortExtEntry, diffServMacAceDestMacAddrBitmask=diffServMacAceDestMacAddrBitmask, diffServIpAceAccess=diffServIpAceAccess, fileCopyServerPassword=fileCopyServerPassword, mvrPortStatisticsNumGroups=mvrPortStatisticsNumGroups, prioWrrPortTrafficClass=prioWrrPortTrafficClass, portOpticalMonitoringInfoTable=portOpticalMonitoringInfoTable, xstInstanceCfgIndex=xstInstanceCfgIndex, igmpSnoopCurrentVlanImmediateLeaveByHostIp=igmpSnoopCurrentVlanImmediateLeaveByHostIp, diffServArpAceStatus=diffServArpAceStatus, sshDsaHostKey6=sshDsaHostKey6, portOpticalMonitoringInfoIfIndex=portOpticalMonitoringInfoIfIndex, lbdInterface=lbdInterface, daiGlobalLogInterval=daiGlobalLogInterval, voiceVlanPortIfIndex=voiceVlanPortIfIndex, diffServIpv6AceSourcePort=diffServIpv6AceSourcePort, xstInstanceCfgHoldTime=xstInstanceCfgHoldTime, mldSnoopThrottlePortCurrentGroups=mldSnoopThrottlePortCurrentGroups, trapVarMacAddr=trapVarMacAddr, diffServPolicyMapAttachCtl=diffServPolicyMapAttachCtl, xstInstancePortPriority=xstInstancePortPriority, igmpSnoopMulticastGroupStatus=igmpSnoopMulticastGroupStatus, xstInstanceCfgTable=xstInstanceCfgTable, diffServAccessGroupTable=diffServAccessGroupTable, portHistCurrentEntry=portHistCurrentEntry, staLoopbackDetectionPortEntry=staLoopbackDetectionPortEntry, portUtilEntry=portUtilEntry, diffServMacAceAccess=diffServMacAceAccess, daiGlobalDestMacValidation=daiGlobalDestMacValidation, atcBcastStormTcReleaseTime=atcBcastStormTcReleaseTime, remoteLogServerInetEntry=remoteLogServerInetEntry, mvrVlanStatisticsNumGroups=mvrVlanStatisticsNumGroups, privateVlanVlanEntry=privateVlanVlanEntry, staPortSystemStatus=staPortSystemStatus, fileInfoUnitID=fileInfoUnitID, mldSnoopMulticastStaticPorts=mldSnoopMulticastStaticPorts, securityMgt=securityMgt, aaaAccountEntry=aaaAccountEntry, cpuGuardReleaseTrap=cpuGuardReleaseTrap, privateVlanPromPortSecondaryRemap3k=privateVlanPromPortSecondaryRemap3k, subnetVlanPriority=subnetVlanPriority, mvrDomainEntry=mvrDomainEntry, diffServIpv6AceSourceIpAddrPrefixLen=diffServIpv6AceSourceIpAddrPrefixLen, edgecoreNetworks=edgecoreNetworks, ecs2100_28pp=ecs2100_28pp, igmpSnoopPortClearStatistics=igmpSnoopPortClearStatistics, igmpSnoopThrottlePortEntry=igmpSnoopThrottlePortEntry, diffServIpv6AceDestPort=diffServIpv6AceDestPort, portMasterSlaveModeCfg=portMasterSlaveModeCfg, staLoopbackDetectionPortReleaseMode=staLoopbackDetectionPortReleaseMode, swOpCodeVer=swOpCodeVer, rspanTable=rspanTable, mldSnoopMulticastCurrentVlanIndex=mldSnoopMulticastCurrentVlanIndex, dhcpSnoopBindingsLeaseTime=dhcpSnoopBindingsLeaseTime, trapIpFilterRejectInetAddressType=trapIpFilterRejectInetAddressType, daiGlobalAdditionalValidStatus=daiGlobalAdditionalValidStatus, bcastStormMgt=bcastStormMgt, aaaMethodMode=aaaMethodMode, remoteLogServerInetAddressType=remoteLogServerInetAddressType, sshHostKeyGenAction=sshHostKeyGenAction, portHistControlIndex=portHistControlIndex, igmpSnoopProfileStatus=igmpSnoopProfileStatus, vlanPortEntry=vlanPortEntry, aaaRadiusGroupTable=aaaRadiusGroupTable, diffServTcamPoolCapability=diffServTcamPoolCapability, daiTotalIpAddrDroppedPkts=daiTotalIpAddrDroppedPkts, macVlanId=macVlanId, igmpSnoopQueryDropTable=igmpSnoopQueryDropTable, diffServIpv6AceIndex=diffServIpv6AceIndex, restartControl=restartControl, prioIfClassificationModeTable=prioIfClassificationModeTable, mirrorDestinationPort=mirrorDestinationPort, portName=portName, staPortLongOperPathCost=staPortLongOperPathCost, mirrorSourcePort=mirrorSourcePort, daiVlanEntry=daiVlanEntry, staMgt=staMgt, diffServMeterStatus=diffServMeterStatus, sshConnUserName=sshConnUserName, diffServClassMapAttachCtlElementIndexType=diffServClassMapAttachCtlElementIndexType, cableDiagResultStatusPairA=cableDiagResultStatusPairA, daiGlobalIpAddrValidationAllowZeros=daiGlobalIpAddrValidationAllowZeros, timeRangeAbsoluteEntry=timeRangeAbsoluteEntry, atcBcastStormEntry=atcBcastStormEntry, diffServClassMapMatchType=diffServClassMapMatchType, igmpSnoopCurrentVlanProxyAddress=igmpSnoopCurrentVlanProxyAddress, diffServAccessGroupTimeRangeName=diffServAccessGroupTimeRangeName, igmpSnoopFilterPortEntry=igmpSnoopFilterPortEntry, mldSnoopPortClearStatistics=mldSnoopPortClearStatistics, vlanStaticExtEntry=vlanStaticExtEntry, swProdUrl=swProdUrl, staPortRootGuardStatus=staPortRootGuardStatus, diffServIpAceDestIpAddrBitmask=diffServIpAceDestIpAddrBitmask, mvrDomainVlanId=mvrDomainVlanId, portTransceiverThresholdInfoRxPowerHighWarn=portTransceiverThresholdInfoRxPowerHighWarn, networkAccessPortDynamicQos=networkAccessPortDynamicQos, swMemoryUtiFallingThresholdNotification=swMemoryUtiFallingThresholdNotification, dhcpcIfVendorClassId=dhcpcIfVendorClassId, diffServPolicyMapPortIfIndex=diffServPolicyMapPortIfIndex, mvrPortStatisticsNumInvalidReport=mvrPortStatisticsNumInvalidReport, portTransceiverThresholdInfoEntry=portTransceiverThresholdInfoEntry, cableDiagMgt=cableDiagMgt, trunkMaxId=trunkMaxId, mvrDomainGroupStaticTable=mvrDomainGroupStaticTable, atcMcastStormTcReleaseTime=atcMcastStormTcReleaseTime, staPortEntry=staPortEntry, diffServAclHwCounterAceHitCount=diffServAclHwCounterAceHitCount, trunkValidNumber=trunkValidNumber, diffServAclTable=diffServAclTable, mldSnoopVlanNumLeaves=mldSnoopVlanNumLeaves, ipFilterTelnetInetAddressStart=ipFilterTelnetInetAddressStart, dosSmurf=dosSmurf, diffServIpAceControlCodeBitmask=diffServIpAceControlCodeBitmask, mvrVlanStatisticsNumLeaves=mvrVlanStatisticsNumLeaves, diffServMacAceSourceMacAddr=diffServMacAceSourceMacAddr, mvrDomainId=mvrDomainId, igmpSnoopRouterCurrentEntry=igmpSnoopRouterCurrentEntry, igmpSnoopMulticastGroupPortCount=igmpSnoopMulticastGroupPortCount, trapDhcpClientPortIfIndex=trapDhcpClientPortIfIndex, dhcpSnoopVlanConfigTable=dhcpSnoopVlanConfigTable, igmpSnoopMulticastStaticVlanIndex=igmpSnoopMulticastStaticVlanIndex, mvrDomainGroupCurrentTable=mvrDomainGroupCurrentTable, diffServArpAceAction=diffServArpAceAction, remoteLogServerInetAddress=remoteLogServerInetAddress, voiceVlanEnabledId=voiceVlanEnabledId, mvrProfileCtlEntry=mvrProfileCtlEntry, igmpSnoopProfileEntry=igmpSnoopProfileEntry, sshUserRsaKey1=sshUserRsaKey1, igmpSnoopCurrentVlanStatus=igmpSnoopCurrentVlanStatus, fileCopyAction=fileCopyAction, igmpSnoopMulticastGroupEntry=igmpSnoopMulticastGroupEntry, macNotificationTrap=macNotificationTrap, diffServClassMapDescription=diffServClassMapDescription, sshUserName=sshUserName, sysCurrentTime=sysCurrentTime, memoryTotal=memoryTotal, sshServerStatus=sshServerStatus, mldSnoopCurrentVlanTable=mldSnoopCurrentVlanTable, dhcpSnoopBindingsTableCtlAction=dhcpSnoopBindingsTableCtlAction, aaaTacacsPlusGroupEntry=aaaTacacsPlusGroupEntry, memoryAllocated=memoryAllocated, diffServClassMapName=diffServClassMapName, swCpuUtiRisingNotification=swCpuUtiRisingNotification, switchNumber=switchNumber, diffServAclHwCounterAceIndex=diffServAclHwCounterAceIndex, dhcpOption82Status=dhcpOption82Status, portHistPreviousOutUtilization=portHistPreviousOutUtilization, sfpThresholdAlarmWarnTrap=sfpThresholdAlarmWarnTrap, rlPortInputLimitInKilo=rlPortInputLimitInKilo, sntpServerEntry=sntpServerEntry, networkAccessClearMacAddressMacAddress=networkAccessClearMacAddressMacAddress, sshDsaHostKey3=sshDsaHostKey3, userAuthEnablePassword=userAuthEnablePassword, igmpSnoopProfileRangeProfileId=igmpSnoopProfileRangeProfileId, privateVlanSessionId=privateVlanSessionId, userAuthenticationFailureTrap=userAuthenticationFailureTrap, dosTcpNullScan=dosTcpNullScan, mvrPortStatisticsNumLeaves=mvrPortStatisticsNumLeaves, prioSchedModePortEntry=prioSchedModePortEntry, pingProbeCount=pingProbeCount, aaaCommandPrivilegesLevel=aaaCommandPrivilegesLevel, lbdRecoveryTrap=lbdRecoveryTrap, mvrPortStatisticsNumJoinSuccess=mvrPortStatisticsNumJoinSuccess, xstInstanceCfgTopChanges=xstInstanceCfgTopChanges, mldSnoopPortNumJoins=mldSnoopPortNumJoins, lbdRecoverTime=lbdRecoverTime, igmpSnoopClearDynamicGroups=igmpSnoopClearDynamicGroups, ipFilterSnmpInetTable=ipFilterSnmpInetTable, igmpSnoopVlanNumGroups=igmpSnoopVlanNumGroups, privateVlanSessionEntry=privateVlanSessionEntry, mcastStormPktRateResolution=mcastStormPktRateResolution, daiGlobal=daiGlobal, sysLogHistoryRamLevel=sysLogHistoryRamLevel, ntpAuthKeyStatus=ntpAuthKeyStatus, atcMcastStormAutoRelease=atcMcastStormAutoRelease, ipFilterTelnetInetTable=ipFilterTelnetInetTable, unknownUcastStormMgt=unknownUcastStormMgt, prioWrrPortIfIndex=prioWrrPortIfIndex, privateVlanVlanType=privateVlanVlanType, pethMainPowerUsageOffNotification=pethMainPowerUsageOffNotification, mldSnoopClearDynamicGroups=mldSnoopClearDynamicGroups, mirrorStatus=mirrorStatus, mldSnoopProfileCtlId=mldSnoopProfileCtlId, sshRsaHostKey6=sshRsaHostKey6, fileCopyServerInetAddress=fileCopyServerInetAddress, diffServIpv6AceEntry=diffServIpv6AceEntry, userauthModifyUserPrivilegeTrap=userauthModifyUserPrivilegeTrap, staPortBpduGuardAutoRecovery=staPortBpduGuardAutoRecovery, mldSnoopRouterStaticEntry=mldSnoopRouterStaticEntry, mvrPortStatisticsDomainId=mvrPortStatisticsDomainId, dhcpOption82RelayServerAddrEntry=dhcpOption82RelayServerAddrEntry, mldSnoopProfileStatus=mldSnoopProfileStatus, ntpAuthKeyWord=ntpAuthKeyWord, ipSrcGuardConfigEntry=ipSrcGuardConfigEntry, aaaMgt=aaaMgt, arpCacheDeleteAll=arpCacheDeleteAll, remoteLogServerUdpPort=remoteLogServerUdpPort, dhcpOption82RelayServerAddrServerIp=dhcpOption82RelayServerAddrServerIp, xstInstanceCfgMaxAge=xstInstanceCfgMaxAge, portOutPacketRate=portOutPacketRate, igmpSnoopUnregisteredDataFlood=igmpSnoopUnregisteredDataFlood, netConfigEntry=netConfigEntry, dhcpRelayRestart=dhcpRelayRestart, swUnitIndex=swUnitIndex, mldSnoopThrottlePortMaxGroups=mldSnoopThrottlePortMaxGroups, pingAction=pingAction, igmpSnoopMgt=igmpSnoopMgt, aaaMethodGroupName=aaaMethodGroupName, sshUserDsaKey8=sshUserDsaKey8, diffServTcamEntry=diffServTcamEntry, xstInstanceCfgDesignatedRoot=xstInstanceCfgDesignatedRoot, subnetVlanTable=subnetVlanTable, mvrPortStatisticsTable=mvrPortStatisticsTable, trapSfpThresholdAlarmWarnType=trapSfpThresholdAlarmWarnType, mvrPortStatisticsClearStatistics=mvrPortStatisticsClearStatistics, prioWrrPortStrictStatus=prioWrrPortStrictStatus, voiceVlanPortPriority=voiceVlanPortPriority, diffServClassMapEntry=diffServClassMapEntry, voiceVlanPortMode=voiceVlanPortMode, daiLogDestMacAddress=daiLogDestMacAddress, dhcpOption82RelayServerAddrTable=dhcpOption82RelayServerAddrTable)
mibBuilder.exportSymbols("ECS2100-28PP-MIB", voiceVlanOuiMask=voiceVlanOuiMask, diffServIpAceMinDestPort=diffServIpAceMinDestPort, cpuGuardLowWatermark=cpuGuardLowWatermark, tacacsPlusServerGlobalKey=tacacsPlusServerGlobalKey, portHistPreviousOutDiscards=portHistPreviousOutDiscards, atcMcastStormTcApplyTrapStatus=atcMcastStormTcApplyTrapStatus, daiTotalReceivedPkts=daiTotalReceivedPkts, daiTotalDhcpSnoopingDroppedPkts=daiTotalDhcpSnoopingDroppedPkts, igmpSnoopThrottlePortIndex=igmpSnoopThrottlePortIndex, diffServAclStatus=diffServAclStatus, diffServActionEntry=diffServActionEntry, mstInstanceOperTable=mstInstanceOperTable, fileInfoMgt=fileInfoMgt, portTransceiverThresholdInfoRxPowerLowWarn=portTransceiverThresholdInfoRxPowerLowWarn, diffServIpAceMinSourcePort=diffServIpAceMinSourcePort, igmpSnoopQueryDropVlanBitmap=igmpSnoopQueryDropVlanBitmap, sshUserDsaKey7=sshUserDsaKey7, mvrProfileGroupCtlAction=mvrProfileGroupCtlAction, mldSnoopProfileRangeStartInetAddress=mldSnoopProfileRangeStartInetAddress, priorityMgt=priorityMgt, radiusServerAcctPortNumber=radiusServerAcctPortNumber, dhcpSnoopVlanEnable=dhcpSnoopVlanEnable, rspanSrcRxPorts=rspanSrcRxPorts, daiPortTrustStatus=daiPortTrustStatus, sysLogHistoryFlashLevel=sysLogHistoryFlashLevel, portHistCurrentInOctets=portHistCurrentInOctets, diffServIpv6AceDestIpAddrPrefixLen=diffServIpv6AceDestIpAddrPrefixLen, smtpDestEMailTable=smtpDestEMailTable, aaaAccExecMethodName=aaaAccExecMethodName, portTransceiverThresholdInfoTxPowerHighAlarm=portTransceiverThresholdInfoTxPowerHighAlarm, privateVlanSessionDownlinkPorts=privateVlanSessionDownlinkPorts, mldSnoopFilterPortTable=mldSnoopFilterPortTable, portHistCurrentOutOctets=portHistCurrentOutOctets, lbdGlobal=lbdGlobal, diffServIpv6AceNextHeader=diffServIpv6AceNextHeader, diffServPolicyMapPortPolicyMapIndex=diffServPolicyMapPortPolicyMapIndex, staPortBpduFlooding=staPortBpduFlooding, netConfigTable=netConfigTable, igmpSnoopPortTable=igmpSnoopPortTable, pethPseMainExtTable=pethPseMainExtTable, trapDhcpServerIpAddress=trapDhcpServerIpAddress, mldSnoopVlanNumJoinSuccess=mldSnoopVlanNumJoinSuccess, sshAuthRetries=sshAuthRetries, daiVlan=daiVlan, sntpMgt=sntpMgt, mvrPortStatisticsNumLeavesSend=mvrPortStatisticsNumLeavesSend, diffServAclHwCounterEntry=diffServAclHwCounterEntry, taskCpuName=taskCpuName, diffServArpAceDestMacAddr=diffServArpAceDestMacAddr, prioWrrPortTable=prioWrrPortTable, portHistPreviousTable=portHistPreviousTable, aaaMethodName=aaaMethodName, sshConnEncryptionTypeStr=sshConnEncryptionTypeStr, diffServIpv6AceSourcePortBitmask=diffServIpv6AceSourcePortBitmask, mldSnoopPortNumSepcificQuerySend=mldSnoopPortNumSepcificQuerySend, dhcpRelayServerInetAddressType=dhcpRelayServerInetAddressType, vlanStaticEntry=vlanStaticEntry, atcBcastStormCurrentTrafficRate=atcBcastStormCurrentTrafficRate, userAuthenticationSuccessTrap=userAuthenticationSuccessTrap, ecs2100_28p=ecs2100_28p, portTransceiverThresholdInfoRxPowerHighAlarm=portTransceiverThresholdInfoRxPowerHighAlarm, swSerialNumber=swSerialNumber, mldSnoopPortNumLeaves=mldSnoopPortNumLeaves, portTransceiverThresholdInfoTemperatureHighWarn=portTransceiverThresholdInfoTemperatureHighWarn, diffServMacAceMinCos=diffServMacAceMinCos, atcBcastStormIfIndex=atcBcastStormIfIndex, powerSavingIfIndex=powerSavingIfIndex, netDefaultGateway=netDefaultGateway, sshUserDsaKey2=sshUserDsaKey2, diffServTcamTotal=diffServTcamTotal, prioCosToDscpIfValue=prioCosToDscpIfValue, sntpPollInterval=sntpPollInterval, mstRevision=mstRevision, remoteLogServerInetTable=remoteLogServerInetTable, networkAccessMacAddressAddress=networkAccessMacAddressAddress, lbdGlobalStatus=lbdGlobalStatus, portHistCurrentInBroadcastPkts=portHistCurrentInBroadcastPkts, ipHttpPort=ipHttpPort, diffServArpAcePktType=diffServArpAcePktType, trapIpFilterRejectInetAddress=trapIpFilterRejectInetAddress, xstInstancePortDesignatedPort=xstInstancePortDesignatedPort, diffServPolicyMapPortEntry=diffServPolicyMapPortEntry, daiLogVlan=daiLogVlan, swModelNumber=swModelNumber, sshDisconnect=sshDisconnect, portHistPreviousInUnknownProtos=portHistPreviousInUnknownProtos, xstMgt=xstMgt, diffServArpAceDestIpAddr=diffServArpAceDestIpAddr, lbdAction=lbdAction, timeRangeName=timeRangeName, cpuPeakDuration=cpuPeakDuration, radiusServerRetransmit=radiusServerRetransmit, portHistPreviousOutMulticastPkts=portHistPreviousOutMulticastPkts, aaaTacacsPlusGroupIndex=aaaTacacsPlusGroupIndex, privateVlanUplinkToUplink=privateVlanUplinkToUplink, swIpFilterRejectTrap=swIpFilterRejectTrap, mldSnoopRouterStaticStatus=mldSnoopRouterStaticStatus, portMediaInfoVendorOUI=portMediaInfoVendorOUI, consoleSilentTime=consoleSilentTime, mldSnoopPortNumLeavesSend=mldSnoopPortNumLeavesSend, aaaAccountIfIndex=aaaAccountIfIndex, igmpSnoopVlanNumLeaves=igmpSnoopVlanNumLeaves, privateVlanMgt=privateVlanMgt, portEntry=portEntry, privateVlanPromPortIfIndex=privateVlanPromPortIfIndex, tacacsPlusServerGlobalPortNumber=tacacsPlusServerGlobalPortNumber, portUtilIfIndex=portUtilIfIndex, daiPortRateLimit=daiPortRateLimit, macVlanClearAction=macVlanClearAction, mldSnoopQueryDrop=mldSnoopQueryDrop, mldSnoopMulticastCurrentIpAddress=mldSnoopMulticastCurrentIpAddress, dhcpSnoopInterface=dhcpSnoopInterface, portSecMacAsPermanentAction=portSecMacAsPermanentAction, pingCompleted=pingCompleted, fileCopyServerInetAddressType=fileCopyServerInetAddressType, pingHistoryTable=pingHistoryTable, daiStatistics=daiStatistics, portOpticalMonitoringInfoEntry=portOpticalMonitoringInfoEntry, ntpServerIpAddress=ntpServerIpAddress, ipSrcGuardAclBindingPortIfIndex=ipSrcGuardAclBindingPortIfIndex, trapUdldPortShutdownReason=trapUdldPortShutdownReason, dot1vProtocolExPortTable=dot1vProtocolExPortTable, lacpPortIndex=lacpPortIndex, mldSnoopPortNumGeneralQueryRecevied=mldSnoopPortNumGeneralQueryRecevied, igmpSnoopPortNumGeneralQueryRecevied=igmpSnoopPortNumGeneralQueryRecevied, amtrMgt=amtrMgt, mvrProfileCtlTable=mvrProfileCtlTable, igmpSnoopPortIndex=igmpSnoopPortIndex, ecs2100_28ppMIBObjects=ecs2100_28ppMIBObjects, ipFilterTelnetInetAddressType=ipFilterTelnetInetAddressType, mldSnoopCurrentVlanImmediateLeaveByHostIp=mldSnoopCurrentVlanImmediateLeaveByHostIp, mvrProfileGroupCtlEntry=mvrProfileGroupCtlEntry, sshRsaHostKey3=sshRsaHostKey3, diffServClassMapElementIndexTypeList=diffServClassMapElementIndexTypeList, mldSnoopThrottlePortEntry=mldSnoopThrottlePortEntry, portHistCurrentIntervalStart=portHistCurrentIntervalStart, igmpSnoopRouterStaticStatus=igmpSnoopRouterStaticStatus, sshConnMinorVersion=sshConnMinorVersion, KeySegment=KeySegment, macVlanMacMask=macVlanMacMask, staPortOperEdgePort=staPortOperEdgePort, dhcpSnoopPortIfIndex=dhcpSnoopPortIfIndex, xstInstanceCfgHelloTime=xstInstanceCfgHelloTime, fileCopyFileType=fileCopyFileType, portOpticalMonitoringInfoTxPower=portOpticalMonitoringInfoTxPower, portCapabilities=portCapabilities, xstInstanceCfgPathCostMethod=xstInstanceCfgPathCostMethod, ipMgt=ipMgt, mldSnoopMulticastStaticIpAddress=mldSnoopMulticastStaticIpAddress, xstInstancePortDesignatedCost=xstInstancePortDesignatedCost, pingHistoryResponse=pingHistoryResponse, rlPortInputStatus=rlPortInputStatus, sysLogCommandLogStatus=sysLogCommandLogStatus, cableDiagResultDistancePairC=cableDiagResultDistancePairC, prioCosToDscpCFIValue=prioCosToDscpCFIValue, ntpAuthKeyEntry=ntpAuthKeyEntry, smtpSeverityLevel=smtpSeverityLevel, dhcpSnoopTotalForwardedPkts=dhcpSnoopTotalForwardedPkts, mldSnoopMulticastCurrentEntry=mldSnoopMulticastCurrentEntry, portType=portType, loginTrap=loginTrap, rateLimitPortTable=rateLimitPortTable, swPowerStatusChangeTrap=swPowerStatusChangeTrap, ecs2100_52t=ecs2100_52t, macVlanPriority=macVlanPriority, vlanStaticTable=vlanStaticTable, aaaAccExecEntry=aaaAccExecEntry, sysLogMgt=sysLogMgt, sshDsaHostKeyMD5FingerPrint=sshDsaHostKeyMD5FingerPrint, igmpSnoopGlobalMgt=igmpSnoopGlobalMgt, mldSnoopThrottlePortRunningStatus=mldSnoopThrottlePortRunningStatus, sntpServerInetAddressType=sntpServerInetAddressType, prioCosToDscpTable=prioCosToDscpTable, privateVlanPromPortTable=privateVlanPromPortTable, diffServIpAcePrec=diffServIpAcePrec, mldSnoopProfileCtl=mldSnoopProfileCtl, igmpSnoopRouterStaticVlanIndex=igmpSnoopRouterStaticVlanIndex, mvrPortStatisticsNumJoins=mvrPortStatisticsNumJoins, diffServPolicyMapAttachCtlAction=diffServPolicyMapAttachCtlAction, dosTcpXmasScan=dosTcpXmasScan, mldSnoopMulticastDataDrop=mldSnoopMulticastDataDrop, fileInfoTable=fileInfoTable, privateVlanVlanTable=privateVlanVlanTable, atcMcastStormSampleType=atcMcastStormSampleType, igmpSnoopVlanTable=igmpSnoopVlanTable, aaaMethodEntry=aaaMethodEntry, rspanRemoteVlanId=rspanRemoteVlanId, rlPortIndex=rlPortIndex, diffServIpAceSourcePortBitmask=diffServIpAceSourcePortBitmask, dhcpRelayServerInetAddrEntry=dhcpRelayServerInetAddrEntry, lacpMgt=lacpMgt, mvrProfileDomainId=mvrProfileDomainId, netConfigIPAddress=netConfigIPAddress, diffServPolicyMapName=diffServPolicyMapName, fileCopyServerUserName=fileCopyServerUserName, subnetVlanClearAction=subnetVlanClearAction, smtpServerIpEntry=smtpServerIpEntry, aaaAccountMethodName=aaaAccountMethodName, memoryUtiRisingThreshold=memoryUtiRisingThreshold, networkAccessClearMacAddressMgt=networkAccessClearMacAddressMgt, timeRangeAbsoluteStartMinutes=timeRangeAbsoluteStartMinutes, portHistCurrentOutMulticastPkts=portHistCurrentOutMulticastPkts, bcastStormIfIndex=bcastStormIfIndex, memoryFreedInPercent=memoryFreedInPercent, subnetVlanStatus=subnetVlanStatus, dosSmurfStatus=dosSmurfStatus, daiGlobalSrcMacValidation=daiGlobalSrcMacValidation, ntpServerStatus=ntpServerStatus, igmpSnoopQueryDropPortIndex=igmpSnoopQueryDropPortIndex, diffServAclIndex=diffServAclIndex, diffServIpv6AceSourceIpAddr=diffServIpv6AceSourceIpAddr, daiLogSrcIpAddress=daiLogSrcIpAddress, lbdMgt=lbdMgt, voiceVlanOuiEntry=voiceVlanOuiEntry, xstInstanceCfgRootCost=xstInstanceCfgRootCost, sshTimeout=sshTimeout, networkAccessPortDynamicVlan=networkAccessPortDynamicVlan, mldSnoopProfileId=mldSnoopProfileId, diffServArpAceSourceIpAddr=diffServArpAceSourceIpAddr, networkAccessMgt=networkAccessMgt, radiusServerAddress=radiusServerAddress, dosTcpUdpPortZeroStatus=dosTcpUdpPortZeroStatus, igmpSnoopPortNumJoinSuccess=igmpSnoopPortNumJoinSuccess, igmpSnoopProfileRangeInetAddressType=igmpSnoopProfileRangeInetAddressType, mldSnoopMulticastCurrentSourceIpAddress=mldSnoopMulticastCurrentSourceIpAddress, PYSNMP_MODULE_ID=ecs2100_28ppMIB, diffServTcamFree=diffServTcamFree, trunkBalanceMode=trunkBalanceMode, diffServPolicyMapElementStatus=diffServPolicyMapElementStatus, switchIndivPowerTable=switchIndivPowerTable, networkAccessMacAddressTime=networkAccessMacAddressTime, dosTcpUdpPortZero=dosTcpUdpPortZero, portHistPreviousInUtilization=portHistPreviousInUtilization, mvrVlanStatisticsNumGeneralQuerySend=mvrVlanStatisticsNumGeneralQuerySend, portMediaInfoPartNumber=portMediaInfoPartNumber, dhcpMgt=dhcpMgt, ecs2100_28ppTraps=ecs2100_28ppTraps, fileInfoDelete=fileInfoDelete, mldSnoopVlanIndex=mldSnoopVlanIndex, userAuthPrivilege=userAuthPrivilege, diffServIpv6AceDestIpAddr=diffServIpv6AceDestIpAddr, pethPsePortExtMirroredDllPdRequestedPowerValue=pethPsePortExtMirroredDllPdRequestedPowerValue, mvrVlanStatisticsNumJoinSuccess=mvrVlanStatisticsNumJoinSuccess, smtpDestEMail=smtpDestEMail, diffServTcamDevice=diffServTcamDevice, trapVarLoginInetAddressType=trapVarLoginInetAddressType, igmpSnoopVlanClearStatistics=igmpSnoopVlanClearStatistics, aaaAccountTable=aaaAccountTable, macVlanTable=macVlanTable, diffServPolicyMapTable=diffServPolicyMapTable, prioSchedModePortTable=prioSchedModePortTable, mvrGroupStaticDomainId=mvrGroupStaticDomainId, dhcpRogueServerAttackTrap=dhcpRogueServerAttackTrap, sshConnID=sshConnID)
mibBuilder.exportSymbols("ECS2100-28PP-MIB", diffServClassMapAttachCtlAction=diffServClassMapAttachCtlAction, portSecPortTable=portSecPortTable, portMediaInfoDateCode=portMediaInfoDateCode, prioWrrPortEntry=prioWrrPortEntry, rspanDstPortTag=rspanDstPortTag, trapVar=trapVar, swMicrocodeVer=swMicrocodeVer, cableDiagResultDistancePairB=cableDiagResultDistancePairB, bcastStormPktRateResolution=bcastStormPktRateResolution, atcBcastStormTcReleaseTrapStatus=atcBcastStormTcReleaseTrapStatus, dhcpcInterfaceTable=dhcpcInterfaceTable, dot1vProtocolExPortEntry=dot1vProtocolExPortEntry, ipFilterHttpInetAddressStart=ipFilterHttpInetAddressStart, diffServArpAclName=diffServArpAclName, networkAccessAging=networkAccessAging, diffServAccessGroupDirection=diffServAccessGroupDirection, staCiscoPrestandardCompatibility=staCiscoPrestandardCompatibility, ipSrcGuardAclBindingStatus=ipSrcGuardAclBindingStatus, igmpSnoopForwardingPriority=igmpSnoopForwardingPriority, radiusServerGlobalAcctPort=radiusServerGlobalAcctPort, dhcpSnoopBindingsTable=dhcpSnoopBindingsTable, igmpSnoopQueryDropEntry=igmpSnoopQueryDropEntry, switchInfoEntry=switchInfoEntry, atcMcastStormTcAction=atcMcastStormTcAction, cpuStatAvgUti=cpuStatAvgUti, mldSnoopVlanNumJoins=mldSnoopVlanNumJoins, portHistControlStatus=portHistControlStatus, mvrPortStatisticsNumGeneralQueryRecevied=mvrPortStatisticsNumGeneralQueryRecevied, mldsnoopVlanNumSpecificQueryReceived=mldsnoopVlanNumSpecificQueryReceived, aaaCommandPrivilegesEntry=aaaCommandPrivilegesEntry, ipFilterMgt=ipFilterMgt, mldsnoopPortNumSpecificQueryReceived=mldsnoopPortNumSpecificQueryReceived, portHistPreviousIntervalStart=portHistPreviousIntervalStart, userAuthStatus=userAuthStatus, daiVlanArpAclStatus=daiVlanArpAclStatus, xstInstanceCfgEntry=xstInstanceCfgEntry, diffServPolicyMapPortDirection=diffServPolicyMapPortDirection, mldSnoopVlanNumLeavesSend=mldSnoopVlanNumLeavesSend, portMediaInfoEthComplianceCodes=portMediaInfoEthComplianceCodes, diffServPolicyMapPortTable=diffServPolicyMapPortTable, rateLimitPortEntry=rateLimitPortEntry, xstInstanceCfgTimeSinceTopologyChange=xstInstanceCfgTimeSinceTopologyChange, daiLogPort=daiLogPort, sshDsaHostKey4=sshDsaHostKey4, igmpSnoopVlanNumGeneralQuerySend=igmpSnoopVlanNumGeneralQuerySend, igmpSnoopMulticastStaticPorts=igmpSnoopMulticastStaticPorts, aaaAccExecTable=aaaAccExecTable, stormMgt=stormMgt, xstInstancePortPortRole=xstInstancePortPortRole, voiceVlanPortSecurity=voiceVlanPortSecurity, daiGlobalStatus=daiGlobalStatus, portSecPortIndex=portSecPortIndex, staPortProtocolMigration=staPortProtocolMigration, dosTcpXmasScanStatus=dosTcpXmasScanStatus, mvrDomainGroupCurrentPorts=mvrDomainGroupCurrentPorts, swLoopbackDetectionTrap=swLoopbackDetectionTrap)
