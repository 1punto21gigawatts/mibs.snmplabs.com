#
# PySNMP MIB module JUNIPER-LSYSSP-CPU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-LSYSSP-CPU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:54 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
jnxLsysSpCPU, = mibBuilder.importSymbols("JUNIPER-LSYS-SECURITYPROFILE-MIB", "jnxLsysSpCPU")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter64, IpAddress, Gauge32, Counter32, ModuleIdentity, Bits, Integer32, Unsigned32, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "IpAddress", "Gauge32", "Counter32", "ModuleIdentity", "Bits", "Integer32", "Unsigned32", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxLsysSpCPUMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1))
if mibBuilder.loadTexts: jnxLsysSpCPUMIB.setLastUpdated('201005191644Z')
if mibBuilder.loadTexts: jnxLsysSpCPUMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxLsysSpCPUMIB.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: jnxLsysSpCPUMIB.setDescription('This module defines the CPU-specific MIB for Juniper Enterprise Logical-System (LSYS) security profiles. Juniper documentation is recommended as the reference. The LSYS security profile provides various static and dynamic resource management by observing resource quota limits. Security CPU resource is the focus in this MIB. ')
jnxLsysSpCPUObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1))
jnxLsysSpCPUSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2))
jnxLsysSpCPSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1))
jnxLsysSpSPUSummary = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2))
jnxLsysSpCPUTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1), )
if mibBuilder.loadTexts: jnxLsysSpCPUTable.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpCPUTable.setDescription('LSYSPROFILE CPU objects for CPU resource consumption per LSYS.')
jnxLsysSpCPUEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1), ).setIndexNames((1, "JUNIPER-LSYSSP-CPU-MIB", "jnxLsysSpCPULsysName"))
if mibBuilder.loadTexts: jnxLsysSpCPUEntry.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpCPUEntry.setDescription('An entry in CPU resource table.')
jnxLsysSpCPULsysName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: jnxLsysSpCPULsysName.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpCPULsysName.setDescription('The name of the logical system for which CPU resource information is retrieved. ')
jnxLsysSpCPUProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPUProfileName.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpCPUProfileName.setDescription('The security profile name string for the LSYS.')
jnxLsysSpCPUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 3), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPUsage.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpCPUsage.setDescription('The current CP resource usage count for the LSYS.')
jnxLsysSpSPUUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 4), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPUUsage.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpSPUUsage.setDescription('The current SPU resource usage count for the LSYS.')
jnxLsysSpCPUReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 5), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPUReserved.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpCPUReserved.setDescription('The reserved resource count for the LSYS.')
jnxLsysSpCPUMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 1, 1, 1, 6), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPUMaximum.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpCPUMaximum.setDescription('The maximum allowed resource usage count for the LSYS.')
jnxLsysSpCPUsedAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 1), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPUsedAmount.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpCPUsedAmount.setDescription('The CP resource consumption over all LSYS.')
jnxLsysSpCPMaxQuota = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 2), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPMaxQuota.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpCPMaxQuota.setDescription('The CP resource maximum quota for the whole device for all LSYS.')
jnxLsysSpCPAvailableAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 3), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPAvailableAmount.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpCPAvailableAmount.setDescription('The CP resource available in the whole device.')
jnxLsysSpCPHeaviestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 4), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPHeaviestUsage.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpCPHeaviestUsage.setDescription('The most amount of CP resource consumed of a LSYS.')
jnxLsysSpCPHeaviestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPHeaviestUser.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpCPHeaviestUser.setDescription('The LSYS name that consume the most CP resource.')
jnxLsysSpCPLightestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 6), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPLightestUsage.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpCPLightestUsage.setDescription('The least amount of CP resource consumed of a LSYS.')
jnxLsysSpCPLightestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpCPLightestUser.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpCPLightestUser.setDescription('The LSYS name that consume the least CP resource.')
jnxLsysSpSPUUsedAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 1), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPUUsedAmount.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpSPUUsedAmount.setDescription('The SPU resource consumption over all LSYS.')
jnxLsysSpSPUMaxQuota = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 2), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPUMaxQuota.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpSPUMaxQuota.setDescription('The SPU resource maximum quota for the whole device for all LSYS.')
jnxLsysSpSPUAvailableAmount = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 3), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPUAvailableAmount.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpSPUAvailableAmount.setDescription('The SPU resource available in the whole device.')
jnxLsysSpSPUHeaviestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 4), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPUHeaviestUsage.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpSPUHeaviestUsage.setDescription('The most amount of SPU resource consumed of a LSYS.')
jnxLsysSpSPUHeaviestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPUHeaviestUser.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpSPUHeaviestUser.setDescription('The LSYS name that consume the most SPU resource.')
jnxLsysSpSPULightestUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 6), Unsigned32()).setUnits('0.01 percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPULightestUsage.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpSPULightestUsage.setDescription('The least amount of SPU resource consumed of a LSYS.')
jnxLsysSpSPULightestUser = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 17, 18, 1, 2, 2, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxLsysSpSPULightestUser.setStatus('current')
if mibBuilder.loadTexts: jnxLsysSpSPULightestUser.setDescription('The LSYS name that consume the least SPU resource.')
mibBuilder.exportSymbols("JUNIPER-LSYSSP-CPU-MIB", jnxLsysSpCPUEntry=jnxLsysSpCPUEntry, jnxLsysSpCPAvailableAmount=jnxLsysSpCPAvailableAmount, jnxLsysSpCPHeaviestUsage=jnxLsysSpCPHeaviestUsage, jnxLsysSpCPSummary=jnxLsysSpCPSummary, jnxLsysSpCPLightestUser=jnxLsysSpCPLightestUser, jnxLsysSpCPUReserved=jnxLsysSpCPUReserved, jnxLsysSpCPMaxQuota=jnxLsysSpCPMaxQuota, jnxLsysSpCPLightestUsage=jnxLsysSpCPLightestUsage, jnxLsysSpCPUMaximum=jnxLsysSpCPUMaximum, jnxLsysSpSPULightestUsage=jnxLsysSpSPULightestUsage, PYSNMP_MODULE_ID=jnxLsysSpCPUMIB, jnxLsysSpSPUUsage=jnxLsysSpSPUUsage, jnxLsysSpCPUTable=jnxLsysSpCPUTable, jnxLsysSpSPUHeaviestUser=jnxLsysSpSPUHeaviestUser, jnxLsysSpCPUMIB=jnxLsysSpCPUMIB, jnxLsysSpSPUMaxQuota=jnxLsysSpSPUMaxQuota, jnxLsysSpCPULsysName=jnxLsysSpCPULsysName, jnxLsysSpCPHeaviestUser=jnxLsysSpCPHeaviestUser, jnxLsysSpSPUHeaviestUsage=jnxLsysSpSPUHeaviestUsage, jnxLsysSpCPUProfileName=jnxLsysSpCPUProfileName, jnxLsysSpCPUObjects=jnxLsysSpCPUObjects, jnxLsysSpSPUAvailableAmount=jnxLsysSpSPUAvailableAmount, jnxLsysSpCPUsedAmount=jnxLsysSpCPUsedAmount, jnxLsysSpSPULightestUser=jnxLsysSpSPULightestUser, jnxLsysSpCPUSummary=jnxLsysSpCPUSummary, jnxLsysSpSPUSummary=jnxLsysSpSPUSummary, jnxLsysSpSPUUsedAmount=jnxLsysSpSPUUsedAmount, jnxLsysSpCPUsage=jnxLsysSpCPUsage)
