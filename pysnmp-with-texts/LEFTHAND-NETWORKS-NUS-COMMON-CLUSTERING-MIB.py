#
# PySNMP MIB module LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:06:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint")
lhnModules, = mibBuilder.importSymbols("LEFTHAND-NETWORKS-GLOBAL-REG", "lhnModules")
lhnNusCommonClustering, = mibBuilder.importSymbols("LEFTHAND-NETWORKS-NUS-COMMON-MIB", "lhnNusCommonClustering")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Bits, TimeTicks, ObjectIdentity, Counter64, Unsigned32, MibIdentifier, iso, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "TimeTicks", "ObjectIdentity", "Counter64", "Unsigned32", "MibIdentifier", "iso", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity", "Gauge32")
RowStatus, TruthValue, DateAndTime, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "DateAndTime", "DisplayString", "TextualConvention")
lhnNusCommonClusteringModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 9804, 1, 1, 14))
if mibBuilder.loadTexts: lhnNusCommonClusteringModule.setLastUpdated('0203060000Z')
if mibBuilder.loadTexts: lhnNusCommonClusteringModule.setOrganization('LeftHand Networks, Inc.')
if mibBuilder.loadTexts: lhnNusCommonClusteringModule.setContactInfo(' Author: Jose Faria LeftHand Networks postal: 1688 Conestoga St. Boulder, CO 80301 USA email: jfaria@lefthandnetworks.com phone: +1 303 449-4100 ')
if mibBuilder.loadTexts: lhnNusCommonClusteringModule.setDescription('Clustering items for NSM Devices')
class ClusPermissionBits(TextualConvention, Bits):
    description = 'Bit field for permissions'
    status = 'current'
    namedValues = NamedValues(("read", 0), ("write", 1), ("exclusive", 2))

clusMgmtGroupName = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusMgmtGroupName.setStatus('current')
if mibBuilder.loadTexts: clusMgmtGroupName.setDescription('Name of management group')
clusMgmtGroupIsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusMgmtGroupIsEnabled.setStatus('current')
if mibBuilder.loadTexts: clusMgmtGroupIsEnabled.setDescription('True if the management group is enabled, false otherwise')
clusMgmtGroupQuorum = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusMgmtGroupQuorum.setStatus('current')
if mibBuilder.loadTexts: clusMgmtGroupQuorum.setDescription('Minimum number of managers required to participate in the management group')
clusMgmtGroupDescription = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusMgmtGroupDescription.setStatus('current')
if mibBuilder.loadTexts: clusMgmtGroupDescription.setDescription('Description of the management group')
clusMgmtGroupActiveManagerCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusMgmtGroupActiveManagerCount.setStatus('current')
if mibBuilder.loadTexts: clusMgmtGroupActiveManagerCount.setDescription('Number of active managers in this management group')
clusMgmtGroupManagerCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusMgmtGroupManagerCount.setStatus('current')
if mibBuilder.loadTexts: clusMgmtGroupManagerCount.setDescription('Number of managers in this management group')
clusManagerTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 7), )
if mibBuilder.loadTexts: clusManagerTable.setStatus('current')
if mibBuilder.loadTexts: clusManagerTable.setDescription('A table of managers in the system. The number of entries is given by clusSystemManagerCount.')
clusManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 7, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusManagerIndex"))
if mibBuilder.loadTexts: clusManagerEntry.setStatus('current')
if mibBuilder.loadTexts: clusManagerEntry.setDescription('A row of Manager parameters')
clusManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 7, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusManagerIndex.setStatus('current')
if mibBuilder.loadTexts: clusManagerIndex.setDescription('index for a manager')
clusManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 7, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusManagerName.setStatus('current')
if mibBuilder.loadTexts: clusManagerName.setDescription('name of the manager')
clusManagerVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 7, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusManagerVersion.setStatus('current')
if mibBuilder.loadTexts: clusManagerVersion.setDescription('version string of the manager')
clusManagerHostSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 7, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusManagerHostSerialNo.setStatus('current')
if mibBuilder.loadTexts: clusManagerHostSerialNo.setDescription('serial number of the manager host')
clusManagerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusManagerStatus.setStatus('current')
if mibBuilder.loadTexts: clusManagerStatus.setDescription('manager status')
clusManagerIsVirtual = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 7, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusManagerIsVirtual.setStatus('current')
if mibBuilder.loadTexts: clusManagerIsVirtual.setDescription('true if manager is virtual, false if not')
clusManagerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 7, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusManagerRowStatus.setStatus('current')
if mibBuilder.loadTexts: clusManagerRowStatus.setDescription('device row status')
clusModuleCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusModuleCount.setStatus('current')
if mibBuilder.loadTexts: clusModuleCount.setDescription('Number of network storage modules in this system')
clusModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9), )
if mibBuilder.loadTexts: clusModuleTable.setStatus('current')
if mibBuilder.loadTexts: clusModuleTable.setDescription('A table of modules in the system. The number of entries is given by clusModuleCount.')
clusModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusModuleIndex"))
if mibBuilder.loadTexts: clusModuleEntry.setStatus('current')
if mibBuilder.loadTexts: clusModuleEntry.setDescription('A row of module parameters')
clusModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusModuleIndex.setStatus('current')
if mibBuilder.loadTexts: clusModuleIndex.setDescription('index for a module')
clusModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusModuleName.setStatus('current')
if mibBuilder.loadTexts: clusModuleName.setDescription('hostname of module')
clusModuleVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusModuleVersion.setStatus('current')
if mibBuilder.loadTexts: clusModuleVersion.setDescription('version string of module')
clusModuleSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 4), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusModuleSerialNo.setStatus('current')
if mibBuilder.loadTexts: clusModuleSerialNo.setDescription('serial number of module')
clusModuleTotalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 5), Counter64()).setUnits('kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusModuleTotalSize.setStatus('current')
if mibBuilder.loadTexts: clusModuleTotalSize.setDescription('total storage size of module')
clusModuleAvailSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 6), Counter64()).setUnits('kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusModuleAvailSize.setStatus('current')
if mibBuilder.loadTexts: clusModuleAvailSize.setDescription('available storage size of module')
clusModuleIsManager = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusModuleIsManager.setStatus('current')
if mibBuilder.loadTexts: clusModuleIsManager.setDescription('True if module is a manager')
clusModuleRaidConfiguration = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusModuleRaidConfiguration.setStatus('current')
if mibBuilder.loadTexts: clusModuleRaidConfiguration.setDescription('raid configuration for a module')
clusModuleRaidStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusModuleRaidStatus.setStatus('current')
if mibBuilder.loadTexts: clusModuleRaidStatus.setDescription('raid status for a module')
clusModuleStorageStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusModuleStorageStatus.setStatus('current')
if mibBuilder.loadTexts: clusModuleStorageStatus.setDescription('storage status for a module')
clusModuleStorageIsReady = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusModuleStorageIsReady.setStatus('current')
if mibBuilder.loadTexts: clusModuleStorageIsReady.setDescription('True if storage in a module is ready')
clusModuleCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 12), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusModuleCreationTime.setStatus('current')
if mibBuilder.loadTexts: clusModuleCreationTime.setDescription('module creation time')
clusModuleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusModuleDescription.setStatus('current')
if mibBuilder.loadTexts: clusModuleDescription.setDescription('description of module')
clusModuleClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 14), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusModuleClusterName.setStatus('current')
if mibBuilder.loadTexts: clusModuleClusterName.setDescription('name of cluster to which this module belongs, empty if none')
clusModuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 9, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusModuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: clusModuleRowStatus.setDescription('module row status')
clusClusterCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusClusterCount.setStatus('current')
if mibBuilder.loadTexts: clusClusterCount.setDescription('Number of clusters in this system')
clusClusterTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 11), )
if mibBuilder.loadTexts: clusClusterTable.setStatus('current')
if mibBuilder.loadTexts: clusClusterTable.setDescription('A table of devices for a particular device group. The number of entries is given by clusClusterCount.')
clusClusterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 11, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusClusterIndex"))
if mibBuilder.loadTexts: clusClusterEntry.setStatus('current')
if mibBuilder.loadTexts: clusClusterEntry.setDescription('A row of cluster parameters')
clusClusterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 11, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusClusterIndex.setStatus('current')
if mibBuilder.loadTexts: clusClusterIndex.setDescription('index for a cluster')
clusClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 11, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusClusterName.setStatus('current')
if mibBuilder.loadTexts: clusClusterName.setDescription('name of cluster')
clusClusterModuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusClusterModuleCount.setStatus('current')
if mibBuilder.loadTexts: clusClusterModuleCount.setDescription('number of modules in this cluster')
clusClusterVolumeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusClusterVolumeCount.setStatus('current')
if mibBuilder.loadTexts: clusClusterVolumeCount.setDescription('number of volumes in this cluster')
clusClusterDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 11, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusClusterDescription.setStatus('current')
if mibBuilder.loadTexts: clusClusterDescription.setDescription('description of cluster')
clusClusterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 11, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusClusterRowStatus.setStatus('current')
if mibBuilder.loadTexts: clusClusterRowStatus.setDescription('cluster row status')
clusClusterModuleTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 12), )
if mibBuilder.loadTexts: clusClusterModuleTable.setStatus('current')
if mibBuilder.loadTexts: clusClusterModuleTable.setDescription('A table of modules for a particular cluster. The number of entries is given by clusClusterModuleCount.')
clusClusterModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 12, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusClusterIndex"), (0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusClusterModuleIndex"))
if mibBuilder.loadTexts: clusClusterModuleEntry.setStatus('current')
if mibBuilder.loadTexts: clusClusterModuleEntry.setDescription('A row of cluster modules')
clusClusterModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 12, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusClusterModuleIndex.setStatus('current')
if mibBuilder.loadTexts: clusClusterModuleIndex.setDescription('index for a cluster module entry')
clusClusterModuleName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 12, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusClusterModuleName.setStatus('current')
if mibBuilder.loadTexts: clusClusterModuleName.setDescription('name of the module')
clusClusterModuleSerialNo = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 12, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusClusterModuleSerialNo.setStatus('current')
if mibBuilder.loadTexts: clusClusterModuleSerialNo.setDescription('serial number of the module')
clusClusterModuleIsHotSpare = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 12, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusClusterModuleIsHotSpare.setStatus('current')
if mibBuilder.loadTexts: clusClusterModuleIsHotSpare.setDescription('true if this module is a hot spare')
clusClusterModuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 12, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusClusterModuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: clusClusterModuleRowStatus.setDescription('cluster module row status')
clusVolumeCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeCount.setStatus('current')
if mibBuilder.loadTexts: clusVolumeCount.setDescription('Number of volumes in this system')
clusVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14), )
if mibBuilder.loadTexts: clusVolumeTable.setStatus('current')
if mibBuilder.loadTexts: clusVolumeTable.setDescription('A table of volumes in a system. The number of entries is given by clusVolumeCount.')
clusVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusVolumeIndex"))
if mibBuilder.loadTexts: clusVolumeEntry.setStatus('current')
if mibBuilder.loadTexts: clusVolumeEntry.setDescription('A row of volumes')
clusVolumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusVolumeIndex.setStatus('current')
if mibBuilder.loadTexts: clusVolumeIndex.setDescription('index for a volume entry')
clusVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeName.setStatus('current')
if mibBuilder.loadTexts: clusVolumeName.setDescription('name of stacked volume')
clusVolumeCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeCreationTime.setStatus('current')
if mibBuilder.loadTexts: clusVolumeCreationTime.setDescription('volume creation time')
clusVolumeDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeDescription.setStatus('current')
if mibBuilder.loadTexts: clusVolumeDescription.setDescription('description for a volume entry')
clusVolumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 5), Counter64()).setUnits('kbytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeSize.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSize.setDescription('number of kbytes comprising the volume')
clusVolumeSoftThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 6), Counter64()).setUnits('kbytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeSoftThreshold.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSoftThreshold.setDescription('number of kbytes to be filled before alert is issued')
clusVolumeHardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 7), Counter64()).setUnits('kbytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeHardThreshold.setStatus('current')
if mibBuilder.loadTexts: clusVolumeHardThreshold.setDescription('number of kbytes to be filled before the volume stops')
clusVolumeReplicaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 8), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeReplicaCount.setStatus('current')
if mibBuilder.loadTexts: clusVolumeReplicaCount.setDescription('number of replicas')
clusVolumeSnapshotCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeSnapshotCount.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotCount.setDescription('number of snapshots associated with this volume')
clusVolumeACLCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeACLCount.setStatus('current')
if mibBuilder.loadTexts: clusVolumeACLCount.setDescription('number of ACLs associated with this volume')
clusVolumeClusterName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeClusterName.setStatus('current')
if mibBuilder.loadTexts: clusVolumeClusterName.setDescription('name of cluster to which this volume belongs, empty if none')
clusVolumeIsSoftThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeIsSoftThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: clusVolumeIsSoftThresholdExceeded.setDescription('true if soft threshold has been exceeded, false if not')
clusVolumeIsHardThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeIsHardThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: clusVolumeIsHardThresholdExceeded.setDescription('true if soft threshold has been exceeded, false if not')
clusVolumeReplicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeReplicationStatus.setStatus('current')
if mibBuilder.loadTexts: clusVolumeReplicationStatus.setDescription('status of replication for this volume')
clusVolumeIsRemoteIPCopy = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeIsRemoteIPCopy.setStatus('current')
if mibBuilder.loadTexts: clusVolumeIsRemoteIPCopy.setDescription('true if this volume is remote IP copy, false if not')
clusVolumeRemoteIPCopyFailureMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeRemoteIPCopyFailureMessage.setStatus('current')
if mibBuilder.loadTexts: clusVolumeRemoteIPCopyFailureMessage.setDescription('message indicating why a remote copy into this volume failed, empty if no errors')
clusVolumeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 14, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusVolumeRowStatus.setStatus('current')
if mibBuilder.loadTexts: clusVolumeRowStatus.setDescription('volume row status')
clusVolumeACLTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 15), )
if mibBuilder.loadTexts: clusVolumeACLTable.setStatus('current')
if mibBuilder.loadTexts: clusVolumeACLTable.setDescription('A table of ACL entries for each volume. The number of entries is given by clusVolumeACLCount.')
clusVolumeACLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 15, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusVolumeIndex"), (0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusVolumeACLIndex"))
if mibBuilder.loadTexts: clusVolumeACLEntry.setStatus('current')
if mibBuilder.loadTexts: clusVolumeACLEntry.setDescription('A row of authorization and permissions for a volume.')
clusVolumeACLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 15, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusVolumeACLIndex.setStatus('current')
if mibBuilder.loadTexts: clusVolumeACLIndex.setDescription("index of volume's ACL entry")
clusVolumeACLAuthGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 15, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeACLAuthGroup.setStatus('current')
if mibBuilder.loadTexts: clusVolumeACLAuthGroup.setDescription('authorization group name')
clusVolumeACLPermissions = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 15, 1, 3), ClusPermissionBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeACLPermissions.setStatus('current')
if mibBuilder.loadTexts: clusVolumeACLPermissions.setDescription('permissions bits')
clusVolumeACLRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 15, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusVolumeACLRowStatus.setStatus('current')
if mibBuilder.loadTexts: clusVolumeACLRowStatus.setDescription('The row status')
clusClusterVolumeTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 16), )
if mibBuilder.loadTexts: clusClusterVolumeTable.setStatus('current')
if mibBuilder.loadTexts: clusClusterVolumeTable.setDescription('A table of volumes for a particular cluster. The number of entries is given by clusClusterVolumeCount.')
clusClusterVolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 16, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusClusterIndex"), (0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusClusterVolumeIndex"))
if mibBuilder.loadTexts: clusClusterVolumeEntry.setStatus('current')
if mibBuilder.loadTexts: clusClusterVolumeEntry.setDescription('A row of volumes for a cluster')
clusClusterVolumeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 16, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusClusterVolumeIndex.setStatus('current')
if mibBuilder.loadTexts: clusClusterVolumeIndex.setDescription("index for a cluster's volume entry")
clusClusterVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 16, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusClusterVolumeName.setStatus('current')
if mibBuilder.loadTexts: clusClusterVolumeName.setDescription('cluster volume name')
clusClusterVolumeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 16, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusClusterVolumeRowStatus.setStatus('current')
if mibBuilder.loadTexts: clusClusterVolumeRowStatus.setDescription('cluster volume row status')
clusVolumeSnapshotTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17), )
if mibBuilder.loadTexts: clusVolumeSnapshotTable.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotTable.setDescription('A table of snapshots for a particular volume. The number of entries is given by clusVolumeSnapshotCount.')
clusVolumeSnapshotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusVolumeIndex"), (0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusVolumeSnapshotIndex"))
if mibBuilder.loadTexts: clusVolumeSnapshotEntry.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotEntry.setDescription('A row of volumes for a cluster')
clusVolumeSnapshotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusVolumeSnapshotIndex.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotIndex.setDescription("index for a volumes's snapshot entry")
clusVolumeSnapshotName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeSnapshotName.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotName.setDescription('volume snapshot name')
clusVolumeSnapshotCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeSnapshotCreationTime.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotCreationTime.setDescription('volume snapshot creation time')
clusVolumeSnapshotDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeSnapshotDescription.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotDescription.setDescription('volume snapshot name')
clusVolumeSnapshotSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 5), Counter64()).setUnits('kbytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeSnapshotSize.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotSize.setDescription('volume snapshot size')
clusVolumeSnapshotSoftThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 6), Counter64()).setUnits('kbytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeSnapshotSoftThreshold.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotSoftThreshold.setDescription('volume snapshot soft quota')
clusVolumeSnapshotHardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 7), Counter64()).setUnits('kbytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeSnapshotHardThreshold.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotHardThreshold.setDescription('volume snapshot hard quota')
clusVolumeSnapshotACLCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeSnapshotACLCount.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotACLCount.setDescription('number of ACLs associated with this snapshot')
clusVolumeSnapshotScheduleName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeSnapshotScheduleName.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotScheduleName.setDescription('volume snapshot schedule name (not displayed if a manual snapshot)')
clusVolumeSnapshotIsSoftThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeSnapshotIsSoftThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotIsSoftThresholdExceeded.setDescription('true if soft threshold has been exceeded, false if not')
clusVolumeSnapshotIsHardThresholdExceeded = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeSnapshotIsHardThresholdExceeded.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotIsHardThresholdExceeded.setDescription('true if soft threshold has been exceeded, false if not')
clusVolumeSnapshotReplicationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("faulty", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeSnapshotReplicationStatus.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotReplicationStatus.setDescription('status of replication for this volume')
clusVolumeSnapshotType = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeSnapshotType.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotType.setDescription('primary snapshots are normal, remote snapshots are remote copies')
clusVolumeSnapshotCopyProgress = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: clusVolumeSnapshotCopyProgress.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotCopyProgress.setDescription('percentage progress of a remote IP copy (if a remote copy)')
clusVolumeSnapshotRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 17, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusVolumeSnapshotRowStatus.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotRowStatus.setDescription('snapshot row status')
clusVolumeSnapshotACLTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 18), )
if mibBuilder.loadTexts: clusVolumeSnapshotACLTable.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotACLTable.setDescription('A table of authorization and permissions for each volume snapshot. The number of entries is given by clusVolumeSnapshotACLCount.')
clusVolumeSnapshotACLEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 18, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusVolumeIndex"), (0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusVolumeSnapshotIndex"), (0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusVolumeSnapshotACLIndex"))
if mibBuilder.loadTexts: clusVolumeSnapshotACLEntry.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotACLEntry.setDescription('A row of authorization and permissions for a volume snapshot')
clusVolumeSnapshotACLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 18, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusVolumeSnapshotACLIndex.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotACLIndex.setDescription("index of snapshot's ACL entry")
clusVolumeSnapshotACLAuthGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 18, 1, 2), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeSnapshotACLAuthGroup.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotACLAuthGroup.setDescription('name of authorization group')
clusVolumeSnapshotACLPermission = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 18, 1, 3), ClusPermissionBits()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusVolumeSnapshotACLPermission.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotACLPermission.setDescription('permissions associated with this ACL entry')
clusVolumeSnapshotACLRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 18, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusVolumeSnapshotACLRowStatus.setStatus('current')
if mibBuilder.loadTexts: clusVolumeSnapshotACLRowStatus.setDescription('The row status')
clusAuthGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusAuthGroupCount.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupCount.setDescription('number of authorization communities in this management group')
clusAuthGroupTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 20), )
if mibBuilder.loadTexts: clusAuthGroupTable.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupTable.setDescription('A table of hosts for each authorization group. The number of entries is given by clusAuthGroupCount.')
clusAuthGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 20, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusAuthGroupIndex"))
if mibBuilder.loadTexts: clusAuthGroupEntry.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupEntry.setDescription('A row of authorization group information')
clusAuthGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 20, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusAuthGroupIndex.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupIndex.setDescription('index of authorization group entry')
clusAuthGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 20, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusAuthGroupName.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupName.setDescription('name of authorization group')
clusAuthGroupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 20, 1, 3), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusAuthGroupDescription.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupDescription.setDescription('description of authorization group')
clusAuthGroupAcceptAll = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 20, 1, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusAuthGroupAcceptAll.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupAcceptAll.setDescription('accepts any IP addresses if true')
clusAuthGroupAcceptNone = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 20, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusAuthGroupAcceptNone.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupAcceptNone.setDescription('does not accept any IP addresses if true')
clusAuthGroupAcceptSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 20, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusAuthGroupAcceptSubnet.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupAcceptSubnet.setDescription('accepts addresses described by the subnet list if true')
clusAuthGroupSubnetCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 20, 1, 7), Counter32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusAuthGroupSubnetCount.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupSubnetCount.setDescription('number of subnets associated with this authorization group')
clusAuthGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 20, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusAuthGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupRowStatus.setDescription('The row status')
clusAuthGroupSubnetTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 21), )
if mibBuilder.loadTexts: clusAuthGroupSubnetTable.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupSubnetTable.setDescription('A table of subnets for a particular authorization group. The number of entries is given by clusAuthGroupMaskCount.')
clusAuthGroupSubnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 21, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusAuthGroupIndex"), (0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusAuthGroupNetmaskIndex"))
if mibBuilder.loadTexts: clusAuthGroupSubnetEntry.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupSubnetEntry.setDescription('A row of subnets for an authorization group')
clusAuthGroupSubnetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 21, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusAuthGroupSubnetIndex.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupSubnetIndex.setDescription('index for a authorization group subnet')
clusAuthGroupSubnetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 21, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusAuthGroupSubnetAddress.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupSubnetAddress.setDescription('address part of subnet')
clusAuthGroupSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 21, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusAuthGroupSubnetMask.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupSubnetMask.setDescription('mask part of subnet')
clusAuthGroupSubnetRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 21, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusAuthGroupSubnetRowStatus.setStatus('current')
if mibBuilder.loadTexts: clusAuthGroupSubnetRowStatus.setDescription('the row status')
clusCommunicationMode = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("multicast", 1), ("unicast", 2), ("multicastAndUnicast", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusCommunicationMode.setStatus('current')
if mibBuilder.loadTexts: clusCommunicationMode.setDescription('commication mode')
clusUnicastHostCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusUnicastHostCount.setStatus('current')
if mibBuilder.loadTexts: clusUnicastHostCount.setDescription('number of hosts part of the unicast group')
clusUnicastHostTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 24), )
if mibBuilder.loadTexts: clusUnicastHostTable.setStatus('current')
if mibBuilder.loadTexts: clusUnicastHostTable.setDescription('A table of hosts doing unicast communication. The number of entries is given by clusUnicastHostCount.')
clusUnicastHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 24, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusUnicastHostIndex"))
if mibBuilder.loadTexts: clusUnicastHostEntry.setStatus('current')
if mibBuilder.loadTexts: clusUnicastHostEntry.setDescription('A host entry in the unicast host list')
clusUnicastHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 24, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusUnicastHostIndex.setStatus('current')
if mibBuilder.loadTexts: clusUnicastHostIndex.setDescription('index for a unicast host entry')
clusUnicastHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 24, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusUnicastHostName.setStatus('current')
if mibBuilder.loadTexts: clusUnicastHostName.setDescription('unicast host name')
clusUnicastHostRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 24, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusUnicastHostRowStatus.setStatus('current')
if mibBuilder.loadTexts: clusUnicastHostRowStatus.setDescription('the row status')
clusSnapshotScheduleCount = MibScalar((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusSnapshotScheduleCount.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleCount.setDescription('number of snapshot schedules in the management group')
clusSnapshotScheduleTable = MibTable((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26), )
if mibBuilder.loadTexts: clusSnapshotScheduleTable.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleTable.setDescription('A table of volume snapshot schedules entries. The number of entries is given by clusSnapshotScheduleCount.')
clusSnapshotScheduleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1), ).setIndexNames((0, "LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", "clusSnapshotScheduleIndex"))
if mibBuilder.loadTexts: clusSnapshotScheduleEntry.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleEntry.setDescription('A host entry in the snapshot schedule list')
clusSnapshotScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusSnapshotScheduleIndex.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleIndex.setDescription('index for a unicast host entry')
clusSnapshotScheduleName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1, 2), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusSnapshotScheduleName.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleName.setDescription('schedule name')
clusSnapshotScheduleDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1, 3), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusSnapshotScheduleDescription.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleDescription.setDescription('schedule description')
clusSnapshotScheduleSoftThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1, 4), Counter64()).setUnits('kbytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusSnapshotScheduleSoftThreshold.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleSoftThreshold.setDescription('snapshot soft quota')
clusSnapshotScheduleHardThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1, 5), Counter64()).setUnits('kbytes').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusSnapshotScheduleHardThreshold.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleHardThreshold.setDescription('snapshot hard quota')
clusSnapshotScheduleFirstCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1, 6), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusSnapshotScheduleFirstCreationTime.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleFirstCreationTime.setDescription('first snapshot creation time')
clusSnapshotScheduleFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1, 7), Counter32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusSnapshotScheduleFrequency.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleFrequency.setDescription('snapshot frequency')
clusSnapshotScheduleVolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1, 8), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusSnapshotScheduleVolumeName.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleVolumeName.setDescription('name of volume from which to create snapshots')
clusSnapshotScheduleRetainType = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("byTime", 1), ("byNumber", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusSnapshotScheduleRetainType.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleRetainType.setDescription('schedule retain type')
clusSnapshotScheduleRetainCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1, 10), Counter32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusSnapshotScheduleRetainCount.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleRetainCount.setDescription('number of snapshot to retain (defaults to 0 if retain type is byTime)')
clusSnapshotScheduleRetainTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1, 11), Counter32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: clusSnapshotScheduleRetainTime.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleRetainTime.setDescription('how long to retain snapshots (defaults to 0 if retain type is byNumber)')
clusSnapshotScheduleType = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("primary", 2), ("remote", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusSnapshotScheduleType.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleType.setDescription('type of snapshot schedule, normal is without remote copy, primary is the original in a remote IP copy, remote is for remote IP copies')
clusSnapshotScheduleFailureMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: clusSnapshotScheduleFailureMessage.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleFailureMessage.setDescription('if a snapshot fails, this contains an error message, otherwise empty')
clusSnapshotScheduleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9804, 3, 1, 1, 2, 12, 26, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: clusSnapshotScheduleRowStatus.setStatus('current')
if mibBuilder.loadTexts: clusSnapshotScheduleRowStatus.setDescription('the row status')
mibBuilder.exportSymbols("LEFTHAND-NETWORKS-NUS-COMMON-CLUSTERING-MIB", clusModuleRowStatus=clusModuleRowStatus, clusVolumeSnapshotScheduleName=clusVolumeSnapshotScheduleName, clusVolumeCount=clusVolumeCount, clusVolumeACLIndex=clusVolumeACLIndex, clusModuleStorageStatus=clusModuleStorageStatus, clusVolumeSnapshotCopyProgress=clusVolumeSnapshotCopyProgress, clusMgmtGroupQuorum=clusMgmtGroupQuorum, clusVolumeSnapshotACLEntry=clusVolumeSnapshotACLEntry, clusSnapshotScheduleType=clusSnapshotScheduleType, clusSnapshotScheduleRetainType=clusSnapshotScheduleRetainType, clusManagerIndex=clusManagerIndex, clusVolumeSnapshotACLPermission=clusVolumeSnapshotACLPermission, clusModuleSerialNo=clusModuleSerialNo, clusSnapshotScheduleIndex=clusSnapshotScheduleIndex, clusModuleVersion=clusModuleVersion, clusMgmtGroupManagerCount=clusMgmtGroupManagerCount, clusAuthGroupSubnetEntry=clusAuthGroupSubnetEntry, clusVolumeSnapshotACLTable=clusVolumeSnapshotACLTable, clusModuleAvailSize=clusModuleAvailSize, ClusPermissionBits=ClusPermissionBits, clusModuleEntry=clusModuleEntry, clusVolumeClusterName=clusVolumeClusterName, clusVolumeSnapshotReplicationStatus=clusVolumeSnapshotReplicationStatus, clusVolumeSnapshotDescription=clusVolumeSnapshotDescription, clusSnapshotScheduleCount=clusSnapshotScheduleCount, clusVolumeSnapshotIsSoftThresholdExceeded=clusVolumeSnapshotIsSoftThresholdExceeded, clusAuthGroupSubnetRowStatus=clusAuthGroupSubnetRowStatus, clusVolumeACLRowStatus=clusVolumeACLRowStatus, clusVolumeIndex=clusVolumeIndex, clusAuthGroupRowStatus=clusAuthGroupRowStatus, clusManagerHostSerialNo=clusManagerHostSerialNo, clusVolumeReplicationStatus=clusVolumeReplicationStatus, clusVolumeReplicaCount=clusVolumeReplicaCount, clusSnapshotScheduleRowStatus=clusSnapshotScheduleRowStatus, clusModuleRaidConfiguration=clusModuleRaidConfiguration, clusAuthGroupName=clusAuthGroupName, clusVolumeSnapshotACLIndex=clusVolumeSnapshotACLIndex, clusVolumeSnapshotCount=clusVolumeSnapshotCount, clusManagerName=clusManagerName, clusVolumeACLAuthGroup=clusVolumeACLAuthGroup, clusUnicastHostEntry=clusUnicastHostEntry, clusAuthGroupIndex=clusAuthGroupIndex, clusSnapshotScheduleRetainTime=clusSnapshotScheduleRetainTime, clusModuleCreationTime=clusModuleCreationTime, clusSnapshotScheduleFailureMessage=clusSnapshotScheduleFailureMessage, clusClusterIndex=clusClusterIndex, clusVolumeSnapshotSize=clusVolumeSnapshotSize, clusClusterVolumeTable=clusClusterVolumeTable, clusUnicastHostName=clusUnicastHostName, clusVolumeHardThreshold=clusVolumeHardThreshold, clusVolumeSize=clusVolumeSize, clusVolumeRemoteIPCopyFailureMessage=clusVolumeRemoteIPCopyFailureMessage, clusClusterVolumeEntry=clusClusterVolumeEntry, clusVolumeSnapshotType=clusVolumeSnapshotType, clusAuthGroupAcceptSubnet=clusAuthGroupAcceptSubnet, clusClusterVolumeCount=clusClusterVolumeCount, clusClusterModuleRowStatus=clusClusterModuleRowStatus, clusVolumeTable=clusVolumeTable, clusModuleClusterName=clusModuleClusterName, clusCommunicationMode=clusCommunicationMode, clusModuleName=clusModuleName, clusSnapshotScheduleVolumeName=clusSnapshotScheduleVolumeName, clusClusterRowStatus=clusClusterRowStatus, clusClusterVolumeRowStatus=clusClusterVolumeRowStatus, clusClusterModuleIsHotSpare=clusClusterModuleIsHotSpare, clusUnicastHostRowStatus=clusUnicastHostRowStatus, clusClusterCount=clusClusterCount, clusClusterName=clusClusterName, clusAuthGroupSubnetTable=clusAuthGroupSubnetTable, clusManagerRowStatus=clusManagerRowStatus, clusMgmtGroupName=clusMgmtGroupName, clusClusterVolumeName=clusClusterVolumeName, clusAuthGroupSubnetAddress=clusAuthGroupSubnetAddress, clusModuleIndex=clusModuleIndex, clusModuleStorageIsReady=clusModuleStorageIsReady, clusModuleDescription=clusModuleDescription, clusSnapshotScheduleDescription=clusSnapshotScheduleDescription, clusClusterModuleTable=clusClusterModuleTable, clusVolumeRowStatus=clusVolumeRowStatus, clusSnapshotScheduleFirstCreationTime=clusSnapshotScheduleFirstCreationTime, clusVolumeEntry=clusVolumeEntry, clusClusterModuleIndex=clusClusterModuleIndex, clusVolumeSnapshotIndex=clusVolumeSnapshotIndex, clusClusterModuleSerialNo=clusClusterModuleSerialNo, clusVolumeIsHardThresholdExceeded=clusVolumeIsHardThresholdExceeded, clusVolumeIsRemoteIPCopy=clusVolumeIsRemoteIPCopy, clusAuthGroupAcceptNone=clusAuthGroupAcceptNone, clusVolumeSnapshotSoftThreshold=clusVolumeSnapshotSoftThreshold, clusUnicastHostTable=clusUnicastHostTable, clusClusterModuleName=clusClusterModuleName, clusManagerStatus=clusManagerStatus, clusVolumeSoftThreshold=clusVolumeSoftThreshold, clusAuthGroupCount=clusAuthGroupCount, clusVolumeSnapshotIsHardThresholdExceeded=clusVolumeSnapshotIsHardThresholdExceeded, clusAuthGroupTable=clusAuthGroupTable, clusModuleTotalSize=clusModuleTotalSize, clusUnicastHostIndex=clusUnicastHostIndex, clusSnapshotScheduleHardThreshold=clusSnapshotScheduleHardThreshold, clusAuthGroupDescription=clusAuthGroupDescription, clusSnapshotScheduleRetainCount=clusSnapshotScheduleRetainCount, clusAuthGroupSubnetMask=clusAuthGroupSubnetMask, clusAuthGroupAcceptAll=clusAuthGroupAcceptAll, clusSnapshotScheduleName=clusSnapshotScheduleName, clusModuleIsManager=clusModuleIsManager, clusManagerIsVirtual=clusManagerIsVirtual, clusClusterDescription=clusClusterDescription, clusVolumeACLCount=clusVolumeACLCount, clusMgmtGroupDescription=clusMgmtGroupDescription, clusSnapshotScheduleFrequency=clusSnapshotScheduleFrequency, clusVolumeSnapshotHardThreshold=clusVolumeSnapshotHardThreshold, clusSnapshotScheduleTable=clusSnapshotScheduleTable, clusVolumeSnapshotEntry=clusVolumeSnapshotEntry, PYSNMP_MODULE_ID=lhnNusCommonClusteringModule, clusClusterTable=clusClusterTable, clusSnapshotScheduleSoftThreshold=clusSnapshotScheduleSoftThreshold, clusVolumeACLTable=clusVolumeACLTable, clusClusterModuleCount=clusClusterModuleCount, clusClusterModuleEntry=clusClusterModuleEntry, clusVolumeCreationTime=clusVolumeCreationTime, clusVolumeACLEntry=clusVolumeACLEntry, clusAuthGroupSubnetIndex=clusAuthGroupSubnetIndex, clusMgmtGroupIsEnabled=clusMgmtGroupIsEnabled, clusVolumeSnapshotCreationTime=clusVolumeSnapshotCreationTime, clusAuthGroupEntry=clusAuthGroupEntry, clusModuleRaidStatus=clusModuleRaidStatus, clusManagerEntry=clusManagerEntry, clusMgmtGroupActiveManagerCount=clusMgmtGroupActiveManagerCount, clusSnapshotScheduleEntry=clusSnapshotScheduleEntry, clusVolumeSnapshotName=clusVolumeSnapshotName, clusVolumeSnapshotACLCount=clusVolumeSnapshotACLCount, clusManagerVersion=clusManagerVersion, clusVolumeSnapshotACLAuthGroup=clusVolumeSnapshotACLAuthGroup, clusClusterEntry=clusClusterEntry, clusVolumeSnapshotRowStatus=clusVolumeSnapshotRowStatus, clusManagerTable=clusManagerTable, clusVolumeIsSoftThresholdExceeded=clusVolumeIsSoftThresholdExceeded, clusUnicastHostCount=clusUnicastHostCount, lhnNusCommonClusteringModule=lhnNusCommonClusteringModule, clusVolumeACLPermissions=clusVolumeACLPermissions, clusClusterVolumeIndex=clusClusterVolumeIndex, clusAuthGroupSubnetCount=clusAuthGroupSubnetCount, clusModuleTable=clusModuleTable, clusVolumeName=clusVolumeName, clusVolumeSnapshotTable=clusVolumeSnapshotTable, clusModuleCount=clusModuleCount, clusVolumeSnapshotACLRowStatus=clusVolumeSnapshotACLRowStatus, clusVolumeDescription=clusVolumeDescription)
