#
# PySNMP MIB module Nortel-Magellan-Passport-UtpDpnTrunksMIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Nortel-Magellan-Passport-UtpDpnTrunksMIB
# Produced by pysmi-0.3.4 at Wed May  1 14:28:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
dpnGate, dpnGateIndex = mibBuilder.importSymbols("Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGate", "dpnGateIndex")
DisplayString, StorageType, Unsigned32, RowStatus, Counter32, Gauge32 = mibBuilder.importSymbols("Nortel-Magellan-Passport-StandardTextualConventionsMIB", "DisplayString", "StorageType", "Unsigned32", "RowStatus", "Counter32", "Gauge32")
NonReplicated, Link = mibBuilder.importSymbols("Nortel-Magellan-Passport-TextualConventionsMIB", "NonReplicated", "Link")
passportMIBs, = mibBuilder.importSymbols("Nortel-Magellan-Passport-UsefulDefinitionsMIB", "passportMIBs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, NotificationType, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, ObjectIdentity, Unsigned32, Counter64, Gauge32, Counter32, iso, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "NotificationType", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "Unsigned32", "Counter64", "Gauge32", "Counter32", "iso", "Bits", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
utpDpnTrunksMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 67))
dpnGateUtp = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2))
dpnGateUtpRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 1), )
if mibBuilder.loadTexts: dpnGateUtpRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpRowStatusTable.setDescription('This entry controls the addition and deletion of dpnGateUtp components.')
dpnGateUtpRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpIndex"))
if mibBuilder.loadTexts: dpnGateUtpRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpRowStatusEntry.setDescription('A single entry in the table represents a single dpnGateUtp component.')
dpnGateUtpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 1, 1, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateUtpRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpRowStatus.setDescription('This variable is used as the basis for SNMP naming of dpnGateUtp components. These components can be added and deleted.')
dpnGateUtpComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
dpnGateUtpStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpStorageType.setDescription('This variable represents the storage type value for the dpnGateUtp tables.')
dpnGateUtpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: dpnGateUtpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpIndex.setDescription('This variable represents the index for the dpnGateUtp tables.')
dpnGateUtpProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 10), )
if mibBuilder.loadTexts: dpnGateUtpProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpProvTable.setDescription('This group of provisionable attributes contains the parameters used by Unacknowledged, Utp, and FrAccess for monitoring link quality.')
dpnGateUtpProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpIndex"))
if mibBuilder.loadTexts: dpnGateUtpProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpProvEntry.setDescription('An entry in the dpnGateUtpProvTable.')
dpnGateUtpMaximumErroredInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 10, 1, 1), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateUtpMaximumErroredInterval.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpMaximumErroredInterval.setDescription('This attribute specifies the interval time over which the error threshold (as specified by receiveErrorSensitivity) must be continuously exceeded before the Unacknowledged, Utp, or FrAccess component can be degraded. Once the error interval count exceeds the provisioned value, the Unacknowledged, Utp, or FrAccess component issues an alarm indicating that link quality has degraded, and it disables its parent component. The exception to this is a value of zero, the default, which indicates that the mechanism is completely disabled.')
dpnGateUtpReceiveErrorSensitivity = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 10), )).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateUtpReceiveErrorSensitivity.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpReceiveErrorSensitivity.setDescription('This attribute is the allowable error rate beyond which the Unacknowledged, Utp, or FrAccess component can be degraded if it persists for a duration longer than the maximumErrorInterval. The threshold is expressed as a percentage of number of errored frames in the last interval per number of frames received in the last interval. The exception to this is a value of zero, which indicates that the mechanism is completely disabled. The configurable values are: 0 = the mechanism is completely disabled 1 = 1/(2**1) 2 = 1/(2**2) 3 = 1/(2**3) : 10 = 1/(2**10)')
dpnGateUtpStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 11), )
if mibBuilder.loadTexts: dpnGateUtpStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpStateTable.setDescription('This group contains the three OSI State attributes and the six OSI Status attributes. The descriptions generically indicate what each attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241- 7001-150, Passport Operations and Maintenance Guide.')
dpnGateUtpStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpIndex"))
if mibBuilder.loadTexts: dpnGateUtpStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpStateEntry.setDescription('An entry in the dpnGateUtpStateTable.')
dpnGateUtpAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
dpnGateUtpOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
dpnGateUtpUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time. The OSI Status attributes, if supported by the component, may provide more details, qualifying the state of the component.')
dpnGateUtpAvailabilityStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 11, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpAvailabilityStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpAvailabilityStatus.setDescription('If supported by the component, this attribute indicates the OSI Availability status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value inTest indicates that the resource is undergoing a test procedure. If adminState is locked or shuttingDown, the normal users are precluded from using the resource and controlStatus is reservedForTest. Tests that do not exclude additional users can be present in any operational or administrative state but the reservedForTest condition should not be present. The value failed indicates that the component has an internal fault that prevents it from operating. The operationalState is disabled. The value dependency indicates that the component cannot operate because some other resource on which it depends is unavailable. The operationalState is disabled. The value powerOff indicates the resource requires power to be applied and it is not powered on. The operationalState is disabled. The value offLine indicates the resource requires a routine operation (either manual, automatic, or both) to be performed to place it on-line and make it available for use. The operationalState is disabled. The value offDuty indicates the resource is inactive in accordance with a predetermined time schedule. In the absence of other disabling conditions, the operationalState is enabled or disabled. The value degraded indicates the service provided by the component is degraded in some way, such as in speed or operating capacity. However, the resource remains available for service. The operationalState is enabled. The value notInstalled indicates the resource is not present. The operationalState is disabled. The value logFull is not used. Description of bits: inTest(0) failed(1) powerOff(2) offLine(3) offDuty(4) dependency(5) degraded(6) notInstalled(7) logFull(8)')
dpnGateUtpProceduralStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 11, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpProceduralStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpProceduralStatus.setDescription("If supported by the component, this attribute indicates the OSI Procedural status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value initializationRequired indicates (for a resource which doesn't initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState is disabled. The value notInitialized indicates (for a resource which does initialize autonomously) that initialization is required before it can perform its normal functions, and this procedure has not been initiated. The operationalState may be enabled or disabled. The value initializing indicates that initialization has been initiated but is not yet complete. The operationalState may be enabled or disabled. The value reporting indicates the resource has completed some processing operation and is notifying the results. The operationalState is enabled. The value terminating indicates the component is in a termination phase. If the resource doesn't reinitialize autonomously, operationalState is disabled; otherwise it is enabled or disabled. Description of bits: initializationRequired(0) notInitialized(1) initializing(2) reporting(3) terminating(4)")
dpnGateUtpControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 11, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpControlStatus.setDescription('If supported by the component, this attribute indicates the OSI Control status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value subjectToTest indicates the resource is available but tests may be conducted simultaneously at unpredictable times, which may cause it to exhibit unusual characteristics. The value partOfServicesLocked indicates that part of the service is restricted from users of a resource. The adminState is unlocked. The value reservedForTest indicates that the component is administratively unavailable because it is undergoing a test procedure. The adminState is locked. The value suspended indicates that the service has been administratively suspended. Description of bits: subjectToTest(0) partOfServicesLocked(1) reservedForTest(2) suspended(3)')
dpnGateUtpAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 11, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpAlarmStatus.setDescription('If supported by the component, this attribute indicates the OSI Alarm status of the component. Note that, even though it is defined as a multi-valued set, at most one value is shown to the user. When no values are in the set, this indicates that either the attribute is not supported or that none of the status conditions described below are present. The value underRepair indicates the component is currently being repaired. The operationalState is enabled or disabled. The value critical indicates one or more critical alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value major indicates one or more major alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value minor indicates one or more minor alarms are outstanding against the component. Other, less severe, alarms may also be outstanding. The operationalState is enabled or disabled. The value alarmOutstanding generically indicates that an alarm of some severity is outstanding against the component. Description of bits: underRepair(0) critical(1) major(2) minor(3) alarmOutstanding(4)')
dpnGateUtpStandbyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 15))).clone(namedValues=NamedValues(("hotStandby", 0), ("coldStandby", 1), ("providingService", 2), ("notSet", 15))).clone('notSet')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpStandbyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpStandbyStatus.setDescription('If supported by the component, this attribute indicates the OSI Standby status of the component. The value notSet indicates that either the attribute is not supported or that none of the status conditions described below are present. Note that this is a non-standard value, used because the original specification indicated this attribute was set-valued and thus, did not provide a value to indicate that none of the other three are applicable. The value hotStandby indicates that the resource is not providing service but will be immediately able to take over the role of the resource to be backed up, without initialization activity, and containing the same information as the resource to be backed up. The value coldStandby indicates the resource is a backup for another resource but will not be immediately able to take over the role of the backed up resource and will require some initialization activity. The value providingService indicates that this component, as a backup resource, is currently backing up another resource.')
dpnGateUtpUnknownStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("false", 0), ("true", 1))).clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpUnknownStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpUnknownStatus.setDescription('This attribute indicates the OSI Unknown status of the component. The value false indicates that all of the other OSI State and Status attribute values can be considered accurate. The value true indicates that the actual state of the component is not known for sure.')
dpnGateUtpOpTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 12), )
if mibBuilder.loadTexts: dpnGateUtpOpTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpOpTable.setDescription('This group of attributes contains the set of UTP operational parameters measured and maintained by this component.')
dpnGateUtpOpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpIndex"))
if mibBuilder.loadTexts: dpnGateUtpOpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpOpEntry.setDescription('An entry in the dpnGateUtpOpTable.')
dpnGateUtpRoundTripDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 12, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 1500))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpRoundTripDelay.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpRoundTripDelay.setDescription('This is the measured Round Trip Delay (ms) discovered with the remote through the UTP staging protocol. The value includes emission, propagation, and queuing delays. A 2 byte control frame is used to perform the measurement. A value of zero is displayed when the link is disabled or the measured Round Trip Delay is unknown.')
dpnGateUtpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 13), )
if mibBuilder.loadTexts: dpnGateUtpStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpStatsTable.setDescription('This group of attributes contains the set of Utp frame counters collected by this component.')
dpnGateUtpStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpIndex"))
if mibBuilder.loadTexts: dpnGateUtpStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpStatsEntry.setDescription('An entry in the dpnGateUtpStatsTable.')
dpnGateUtpDiscardBadFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpDiscardBadFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpDiscardBadFromIf.setDescription('This attribute is the number of received frames discarded by the Utp component. UTP discards any received frame that is unknown to its protocol. This counter wraps around to zero when the maximum value is reached.')
dpnGateUtpDiscardExcessToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpDiscardExcessToIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpDiscardExcessToIf.setDescription('This attribute is the number of transmitted frames discarded by the Utp component. Transmitted frames are discarded if the wait for transmission queue is congested. This counter wraps around to zero when the maximum value is reached.')
dpnGateUtpFrmRexmtToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFrmRexmtToIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFrmRexmtToIf.setDescription('This attribute is the number of frames retransmitted by the Utp component. This counter wraps around to zero when the maximum value is reached.')
dpnGateUtpAreYouThereModeEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpAreYouThereModeEntries.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpAreYouThereModeEntries.setDescription('This attribute is the number of times the Utp component entered the AreYouThere mode. UTP enters this mode whenever the acknowledgment for the last transmitted frame has not been received within a certain time interval. In this mode UTP verifies that the remote end is still active. If so, it will retransmit all frames that were waiting to be acknowledged. This counter wraps around to zero when the maximum value is reached.')
dpnGateUtpWindowClosures = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpWindowClosures.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpWindowClosures.setDescription('This attribute is the number of times the Utp component closed its frame window. The frame window determines the maximum number of unacknowledged frames allowed. Typically, the frame window closes when the remote end cannot keep up with the frame arrival rate. This counter wraps around to zero when the maximum value is reached.')
dpnGateUtpFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2))
dpnGateUtpFramerRowStatusTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 1), )
if mibBuilder.loadTexts: dpnGateUtpFramerRowStatusTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerRowStatusTable.setDescription('This entry controls the addition and deletion of dpnGateUtpFramer components.')
dpnGateUtpFramerRowStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 1, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpFramerIndex"))
if mibBuilder.loadTexts: dpnGateUtpFramerRowStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerRowStatusEntry.setDescription('A single entry in the table represents a single dpnGateUtpFramer component.')
dpnGateUtpFramerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 1, 1, 1), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerRowStatus.setDescription('This variable is used as the basis for SNMP naming of dpnGateUtpFramer components. These components cannot be added nor deleted.')
dpnGateUtpFramerComponentName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerComponentName.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerComponentName.setDescription("This variable provides the component's string name for use with the ASCII Console Interface")
dpnGateUtpFramerStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 1, 1, 4), StorageType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerStorageType.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerStorageType.setDescription('This variable represents the storage type value for the dpnGateUtpFramer tables.')
dpnGateUtpFramerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 1, 1, 10), NonReplicated())
if mibBuilder.loadTexts: dpnGateUtpFramerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerIndex.setDescription('This variable represents the index for the dpnGateUtpFramer tables.')
dpnGateUtpFramerProvTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 10), )
if mibBuilder.loadTexts: dpnGateUtpFramerProvTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerProvTable.setDescription('This group contains the base provisioning data for the Framer component. Application or hardware interface specific provisioning data is contained in other provisionable Framer groups.')
dpnGateUtpFramerProvEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 10, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpFramerIndex"))
if mibBuilder.loadTexts: dpnGateUtpFramerProvEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerProvEntry.setDescription('An entry in the dpnGateUtpFramerProvTable.')
dpnGateUtpFramerInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 10, 1, 1), Link()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateUtpFramerInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerInterfaceName.setDescription("This attribute contains a hardware component name. The attribute associates the application with a specific link. This defines the module processor on which Framer's parent component (as well as Framer itself) will run.")
dpnGateUtpFramerLinkTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 11), )
if mibBuilder.loadTexts: dpnGateUtpFramerLinkTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerLinkTable.setDescription('This group contains attributes defining the framing of data on the link interface.')
dpnGateUtpFramerLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 11, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpFramerIndex"))
if mibBuilder.loadTexts: dpnGateUtpFramerLinkEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerLinkEntry.setDescription('An entry in the dpnGateUtpFramerLinkTable.')
dpnGateUtpFramerFramingType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0))).clone(namedValues=NamedValues(("hdlc", 0))).clone('hdlc')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateUtpFramerFramingType.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerFramingType.setDescription('This attribute defines the type of framing on the link.')
dpnGateUtpFramerDataInversion = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16))).clone(namedValues=NamedValues(("off", 0), ("on", 16))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateUtpFramerDataInversion.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerDataInversion.setDescription("This attribute determines whether data bits are to be inverted (1 to 0 and 0 to 1) before transmission of frames to the interface. If the value of this attribute is On, the incoming data bits will also be inverted when frames are received from the link before being processed. This option is typically used in hdlc framing mode when inversion is used to guarantee 1's density. Note that aborts (in hdlc and interrupting modes) are corrupted when data is inverted.")
dpnGateUtpFramerFrameCrcType = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("crc16", 0), ("crc32", 1), ("noCrc", 2))).clone('crc16')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateUtpFramerFrameCrcType.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerFrameCrcType.setDescription('This attribute defines the type of CRC used. The CRC value calculated is appended to the end of the frames transmitted to the link. The CRC value is removed from the end of frames received from the link and checked for correctness. NoCrc means that CRC is not used.')
dpnGateUtpFramerFlagsBetweenFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 11, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateUtpFramerFlagsBetweenFrames.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerFlagsBetweenFrames.setDescription('This attribute defines the number of flags that are inserted between frames sent to the link interface.')
dpnGateUtpFramerStateTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 12), )
if mibBuilder.loadTexts: dpnGateUtpFramerStateTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerStateTable.setDescription('This group contains the three OSI State attributes. The descriptions generically indicate what each state attribute implies about the component. Note that not all the values and state combinations described here are supported by every component which uses this group. For component-specific information and the valid state combinations, refer to NTP 241-7001-150, Passport Operations and Maintenance Guide.')
dpnGateUtpFramerStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 12, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpFramerIndex"))
if mibBuilder.loadTexts: dpnGateUtpFramerStateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerStateEntry.setDescription('An entry in the dpnGateUtpFramerStateTable.')
dpnGateUtpFramerAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1), ("shuttingDown", 2))).clone('unlocked')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerAdminState.setDescription('This attribute indicates the OSI Administrative State of the component. The value locked indicates that the component is administratively prohibited from providing services for its users. A Lock or Lock - force command has been previously issued for this component. When the value is locked, the value of usageState must be idle. The value shuttingDown indicates that the component is administratively permitted to provide service to its existing users only. A Lock command was issued against the component and it is in the process of shutting down. The value unlocked indicates that the component is administratively permitted to provide services for its users. To enter this state, issue an Unlock command to this component.')
dpnGateUtpFramerOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerOperationalState.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerOperationalState.setDescription('This attribute indicates the OSI Operational State of the component. The value enabled indicates that the component is available for operation. Note that if adminState is locked, it would still not be providing service. The value disabled indicates that the component is not available for operation. For example, something is wrong with the component itself, or with another component on which this one depends. If the value is disabled, the usageState must be idle.')
dpnGateUtpFramerUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("idle", 0), ("active", 1), ("busy", 2))).clone('idle')).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerUsageState.setDescription('This attribute indicates the OSI Usage State of the component. The value idle indicates that the component is not currently in use. The value active indicates that the component is in use and has spare capacity to provide for additional users. The value busy indicates that the component is in use and has no spare operating capacity for additional users at this time.')
dpnGateUtpFramerStatsTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13), )
if mibBuilder.loadTexts: dpnGateUtpFramerStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerStatsTable.setDescription('This group contains the operational statistics data for a UTP Framer component.')
dpnGateUtpFramerStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpFramerIndex"))
if mibBuilder.loadTexts: dpnGateUtpFramerStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerStatsEntry.setDescription('An entry in the dpnGateUtpFramerStatsTable.')
dpnGateUtpFramerFrmToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerFrmToIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerFrmToIf.setDescription('The number of frames transmitted to the link interface by Framer. Note: This does not include the number of frames transmitted directly to the hardware queue, thus bypassing the Framer component.')
dpnGateUtpFramerFrmFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerFrmFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerFrmFromIf.setDescription('The number of frames received from the link interface by Framer.')
dpnGateUtpFramerOctetFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerOctetFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerOctetFromIf.setDescription('The number of bytes received from the link interface by Framer.')
dpnGateUtpFramerAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerAborts.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerAborts.setDescription('This attribute is the total number of aborts received.')
dpnGateUtpFramerCrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerCrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerCrcErrors.setDescription('This attribute is the total number of frames with CRC errors, occurring in the receive direction from the link.')
dpnGateUtpFramerLrcErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerLrcErrors.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerLrcErrors.setDescription('This attribute is the total number of frames with LRC errors, occurring in the Tx link prior to transmission onto the link.')
dpnGateUtpFramerNonOctetErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerNonOctetErrors.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerNonOctetErrors.setDescription('This attribute is the total number of frames that were non octet aligned.')
dpnGateUtpFramerOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerOverruns.setDescription('This attribute is the total number of frames received from the link for which overruns occurred.')
dpnGateUtpFramerUnderruns = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerUnderruns.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerUnderruns.setDescription('This attribute is the total number of frames transmitted to the link for which underruns occurred.')
dpnGateUtpFramerLargeFrmErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerLargeFrmErrors.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerLargeFrmErrors.setDescription('This attribute is the total number of frames received which were too large. The frame execeeded the maximumFrameLengthLimit provisioned attribute or it contained more than the 255 block hardware limit.')
dpnGateUtpFramerFrmModeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerFrmModeErrors.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerFrmModeErrors.setDescription('This attribute is the total number of frames detected with framing mode errors. A framingModeError is flagged when frames are inconsistent with the specified framingType, that is when interrupting frames are used while running in hdlc mode.')
dpnGateUtpFramerOutOfSequenceFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerOutOfSequenceFrm.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerOutOfSequenceFrm.setDescription('This attribute is the total number of out of sequence frames in interrupting mode that have been received from the link.')
dpnGateUtpFramerRepeatedFrm = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 13, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerRepeatedFrm.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerRepeatedFrm.setDescription('This attribute is the total number of repeated frames (frames with the same sequence number) in interrupting mode that have been received from the link.')
dpnGateUtpFramerUtilTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 14), )
if mibBuilder.loadTexts: dpnGateUtpFramerUtilTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerUtilTable.setDescription('This group contains the link utilization operational data for a Framer component.')
dpnGateUtpFramerUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 14, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpFramerIndex"))
if mibBuilder.loadTexts: dpnGateUtpFramerUtilEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerUtilEntry.setDescription('An entry in the dpnGateUtpFramerUtilTable.')
dpnGateUtpFramerNormPrioLinkUtilToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 14, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerNormPrioLinkUtilToIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerNormPrioLinkUtilToIf.setDescription('This attribute is the utilization of the normal and high priority data traffic (interruptable traffic) sent to the link as a percentage of the available bandwidth on the link. Note that this includes traffic with Transfer Priorities (TP) of 0, 6 and 9 and/or Emission Priority of 2 and 3. The utilization is the average for the last minute.')
dpnGateUtpFramerHighPrioLinkUtilToIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 14, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerHighPrioLinkUtilToIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerHighPrioLinkUtilToIf.setDescription('This attribute is the utilization of the interrupting priority data traffic sent to the link as a percentage of the available bandwidth on the link. Note that this includes traffic with a Transfer Priority (TP) of 11 and/or Emission Priority of 1. The utilization is the average for the last minute.')
dpnGateUtpFramerNormPrioLinkUtilFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 14, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerNormPrioLinkUtilFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerNormPrioLinkUtilFromIf.setDescription('This attribute is the utilization of the normal and high priority data traffic (interruptable traffic) received from the link as a percentage of the available bandwidth on the link. Note that this includes traffic with Transfer Priorities (TP) of 0, 6 and 9 and/or Emission Priority of 2 and 3. The utilization is the average for the last minute.')
dpnGateUtpFramerHighPrioLinkUtilFromIf = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 14, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dpnGateUtpFramerHighPrioLinkUtilFromIf.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerHighPrioLinkUtilFromIf.setDescription('This attribute is the utilization of the interrupting priority data (interrupting traffic) received from the link as a percentage of the available bandwidth on the link. Note that this includes traffic with a Transfer Priority (TP) of 11 and/or Emission Priority of 1. The utilization is the average for the last minute.')
dpnGateUtpFramerUtilThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 15), )
if mibBuilder.loadTexts: dpnGateUtpFramerUtilThresholdTable.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerUtilThresholdTable.setDescription('This group contains all of the provisioning data required to set the link utilization alarm thresholds. All thresholds are percentages which can take on any value in the range of 0% through 100%. The value 100% is used to disable an individual threshold. For values other than 100%, a semantic check ensures that the minor alarm threshold is less than the other thresholds and that the major alarm threshold is less than the critical alarm threshold.')
dpnGateUtpFramerUtilThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 15, 1), ).setIndexNames((0, "Nortel-Magellan-Passport-DpnTrunksMIB", "dpnGateIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpIndex"), (0, "Nortel-Magellan-Passport-UtpDpnTrunksMIB", "dpnGateUtpFramerIndex"))
if mibBuilder.loadTexts: dpnGateUtpFramerUtilThresholdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerUtilThresholdEntry.setDescription('An entry in the dpnGateUtpFramerUtilThresholdTable.')
dpnGateUtpFramerMinorLinkUtilAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 15, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(75)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateUtpFramerMinorLinkUtilAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerMinorLinkUtilAlarmThreshold.setDescription('This attribute provides the threshold value which defines when a minor alarm would be issued, denoting a sustained total average link utilization. The total average link utilization is calculated based on the number of received bytes. The Set alarm is issued after 3 minutes of utilization greater than the given threshold. The corresponding Clear alarm is issued after a subsequent 3 minutes of utilization less than or equal to the given threshold. The value 100% is used to disable an individual threshold. For values other than 100%, a semantic check ensures that the minor alarm threshold is less than the other thresholds.')
dpnGateUtpFramerMajorLinkUtilAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 15, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(85)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateUtpFramerMajorLinkUtilAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerMajorLinkUtilAlarmThreshold.setDescription('This attribute provides the threshold value which defines when a major alarm would be issued, denoting a sustained total average link utilization. The total average link utilization is calculated based on the number of received bytes. The Set alarm is issued after 3 minutes of utilization greater than the given threshold. The corresponding Clear alarm is issued after a subsequent 3 minutes of utilization less than or equal to the given threshold. The value 100% is used to disable an individual threshold. For values other than 100%, a semantic check ensures that the major alarm threshold is greater than the minor threshold and less than the critical threshold.')
dpnGateUtpFramerCriticalLinkUtilAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 15, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(95)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateUtpFramerCriticalLinkUtilAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerCriticalLinkUtilAlarmThreshold.setDescription('This attribute provides the threshold value which defines when a critical alarm would be issued, denoting a sustained total average link utilization. The total average link utilization is calculated based on the number of received bytes. The Set alarm is issued after 3 minutes of utilization greater than the given threshold. The corresponding Clear alarm is issued after a subsequent 3 minutes of utilization less than or equal to the given threshold. The value 100% is used to disable an individual threshold. For values other than 100%, a semantic check ensures that the critical alarm threshold is greater than the other thresholds.')
dpnGateUtpFramerLinkUtilAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 562, 2, 4, 1, 61, 2, 2, 15, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dpnGateUtpFramerLinkUtilAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dpnGateUtpFramerLinkUtilAlarmStatus.setDescription('This attribute provides control of the generation of link utilization alarms. If the value is disabled, none of the alarms are generated (this is equivalent to setting all of the thresholds to 100%). If the value is enabled, the individual thresholds are handled.')
utpDpnTrunksGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 67, 1))
utpDpnTrunksGroupBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 67, 1, 5))
utpDpnTrunksGroupBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 67, 1, 5, 1))
utpDpnTrunksGroupBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 67, 1, 5, 1, 2))
utpDpnTrunksCapabilities = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 67, 3))
utpDpnTrunksCapabilitiesBE = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 67, 3, 5))
utpDpnTrunksCapabilitiesBE00 = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 67, 3, 5, 1))
utpDpnTrunksCapabilitiesBE00A = MibIdentifier((1, 3, 6, 1, 4, 1, 562, 2, 4, 2, 67, 3, 5, 1, 2))
mibBuilder.exportSymbols("Nortel-Magellan-Passport-UtpDpnTrunksMIB", utpDpnTrunksGroupBE00=utpDpnTrunksGroupBE00, dpnGateUtpFramerIndex=dpnGateUtpFramerIndex, dpnGateUtpFramerUtilEntry=dpnGateUtpFramerUtilEntry, dpnGateUtpIndex=dpnGateUtpIndex, dpnGateUtpProvEntry=dpnGateUtpProvEntry, utpDpnTrunksCapabilitiesBE00A=utpDpnTrunksCapabilitiesBE00A, dpnGateUtpFramerHighPrioLinkUtilToIf=dpnGateUtpFramerHighPrioLinkUtilToIf, dpnGateUtpDiscardBadFromIf=dpnGateUtpDiscardBadFromIf, dpnGateUtpFrmRexmtToIf=dpnGateUtpFrmRexmtToIf, dpnGateUtpFramerLinkUtilAlarmStatus=dpnGateUtpFramerLinkUtilAlarmStatus, dpnGateUtpFramerOperationalState=dpnGateUtpFramerOperationalState, dpnGateUtpFramerOctetFromIf=dpnGateUtpFramerOctetFromIf, dpnGateUtpStandbyStatus=dpnGateUtpStandbyStatus, dpnGateUtpProvTable=dpnGateUtpProvTable, dpnGateUtpAreYouThereModeEntries=dpnGateUtpAreYouThereModeEntries, dpnGateUtpFramerProvEntry=dpnGateUtpFramerProvEntry, dpnGateUtpFramerCriticalLinkUtilAlarmThreshold=dpnGateUtpFramerCriticalLinkUtilAlarmThreshold, dpnGateUtpRowStatus=dpnGateUtpRowStatus, dpnGateUtpFramerMajorLinkUtilAlarmThreshold=dpnGateUtpFramerMajorLinkUtilAlarmThreshold, dpnGateUtpFramerComponentName=dpnGateUtpFramerComponentName, dpnGateUtpControlStatus=dpnGateUtpControlStatus, dpnGateUtpFramerStatsEntry=dpnGateUtpFramerStatsEntry, dpnGateUtpFramerFrameCrcType=dpnGateUtpFramerFrameCrcType, dpnGateUtpFramerNonOctetErrors=dpnGateUtpFramerNonOctetErrors, dpnGateUtpFramerUtilThresholdEntry=dpnGateUtpFramerUtilThresholdEntry, utpDpnTrunksMIB=utpDpnTrunksMIB, dpnGateUtpFramerProvTable=dpnGateUtpFramerProvTable, dpnGateUtpFramerFrmModeErrors=dpnGateUtpFramerFrmModeErrors, dpnGateUtpFramerStatsTable=dpnGateUtpFramerStatsTable, dpnGateUtpStateTable=dpnGateUtpStateTable, dpnGateUtpUsageState=dpnGateUtpUsageState, utpDpnTrunksCapabilities=utpDpnTrunksCapabilities, dpnGateUtpFramerOutOfSequenceFrm=dpnGateUtpFramerOutOfSequenceFrm, dpnGateUtpFramerHighPrioLinkUtilFromIf=dpnGateUtpFramerHighPrioLinkUtilFromIf, utpDpnTrunksGroupBE=utpDpnTrunksGroupBE, utpDpnTrunksGroupBE00A=utpDpnTrunksGroupBE00A, dpnGateUtpFramerRowStatus=dpnGateUtpFramerRowStatus, dpnGateUtpFramerDataInversion=dpnGateUtpFramerDataInversion, dpnGateUtpOpTable=dpnGateUtpOpTable, dpnGateUtpDiscardExcessToIf=dpnGateUtpDiscardExcessToIf, dpnGateUtpFramerStateTable=dpnGateUtpFramerStateTable, dpnGateUtpUnknownStatus=dpnGateUtpUnknownStatus, dpnGateUtpFramerMinorLinkUtilAlarmThreshold=dpnGateUtpFramerMinorLinkUtilAlarmThreshold, dpnGateUtp=dpnGateUtp, dpnGateUtpFramerLinkEntry=dpnGateUtpFramerLinkEntry, dpnGateUtpFramerUnderruns=dpnGateUtpFramerUnderruns, dpnGateUtpStateEntry=dpnGateUtpStateEntry, dpnGateUtpFramerInterfaceName=dpnGateUtpFramerInterfaceName, utpDpnTrunksCapabilitiesBE=utpDpnTrunksCapabilitiesBE, dpnGateUtpFramerFramingType=dpnGateUtpFramerFramingType, dpnGateUtpRoundTripDelay=dpnGateUtpRoundTripDelay, dpnGateUtpFramerFrmToIf=dpnGateUtpFramerFrmToIf, dpnGateUtpAvailabilityStatus=dpnGateUtpAvailabilityStatus, dpnGateUtpFramerStateEntry=dpnGateUtpFramerStateEntry, dpnGateUtpFramerNormPrioLinkUtilFromIf=dpnGateUtpFramerNormPrioLinkUtilFromIf, dpnGateUtpFramerNormPrioLinkUtilToIf=dpnGateUtpFramerNormPrioLinkUtilToIf, dpnGateUtpStatsEntry=dpnGateUtpStatsEntry, dpnGateUtpFramerLargeFrmErrors=dpnGateUtpFramerLargeFrmErrors, dpnGateUtpAdminState=dpnGateUtpAdminState, dpnGateUtpOperationalState=dpnGateUtpOperationalState, dpnGateUtpReceiveErrorSensitivity=dpnGateUtpReceiveErrorSensitivity, dpnGateUtpFramer=dpnGateUtpFramer, utpDpnTrunksCapabilitiesBE00=utpDpnTrunksCapabilitiesBE00, dpnGateUtpRowStatusTable=dpnGateUtpRowStatusTable, dpnGateUtpOpEntry=dpnGateUtpOpEntry, dpnGateUtpFramerUtilTable=dpnGateUtpFramerUtilTable, dpnGateUtpFramerRowStatusEntry=dpnGateUtpFramerRowStatusEntry, dpnGateUtpFramerFlagsBetweenFrames=dpnGateUtpFramerFlagsBetweenFrames, dpnGateUtpFramerRowStatusTable=dpnGateUtpFramerRowStatusTable, dpnGateUtpFramerLinkTable=dpnGateUtpFramerLinkTable, dpnGateUtpFramerAdminState=dpnGateUtpFramerAdminState, dpnGateUtpFramerAborts=dpnGateUtpFramerAborts, dpnGateUtpProceduralStatus=dpnGateUtpProceduralStatus, dpnGateUtpFramerLrcErrors=dpnGateUtpFramerLrcErrors, dpnGateUtpAlarmStatus=dpnGateUtpAlarmStatus, dpnGateUtpFramerUtilThresholdTable=dpnGateUtpFramerUtilThresholdTable, dpnGateUtpComponentName=dpnGateUtpComponentName, dpnGateUtpFramerRepeatedFrm=dpnGateUtpFramerRepeatedFrm, dpnGateUtpFramerFrmFromIf=dpnGateUtpFramerFrmFromIf, dpnGateUtpFramerCrcErrors=dpnGateUtpFramerCrcErrors, dpnGateUtpMaximumErroredInterval=dpnGateUtpMaximumErroredInterval, dpnGateUtpFramerUsageState=dpnGateUtpFramerUsageState, utpDpnTrunksGroup=utpDpnTrunksGroup, dpnGateUtpStorageType=dpnGateUtpStorageType, dpnGateUtpFramerStorageType=dpnGateUtpFramerStorageType, dpnGateUtpWindowClosures=dpnGateUtpWindowClosures, dpnGateUtpRowStatusEntry=dpnGateUtpRowStatusEntry, dpnGateUtpStatsTable=dpnGateUtpStatsTable, dpnGateUtpFramerOverruns=dpnGateUtpFramerOverruns)
