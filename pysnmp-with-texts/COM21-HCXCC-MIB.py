#
# PySNMP MIB module COM21-HCXCC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COM21-HCXCC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
com21Hcx, com21, com21Traps = mibBuilder.importSymbols("COM21-HCX-MIB", "com21Hcx", "com21", "com21Traps")
hcxAlmSeverity, hcxEventLogTime = mibBuilder.importSymbols("COM21-HCXALM-MIB", "hcxAlmSeverity", "hcxEventLogTime")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, IpAddress, Counter32, Counter64, ModuleIdentity, Bits, Integer32, TimeTicks, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "IpAddress", "Counter32", "Counter64", "ModuleIdentity", "Bits", "Integer32", "TimeTicks", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
com21HcxCc = ModuleIdentity((1, 3, 6, 1, 4, 1, 1141, 2, 60))
if mibBuilder.loadTexts: com21HcxCc.setLastUpdated('9701080000Z')
if mibBuilder.loadTexts: com21HcxCc.setOrganization('Com21, Inc.')
if mibBuilder.loadTexts: com21HcxCc.setContactInfo(' Network Management Postal: Paul Gordon Com21, Inc. 750 Tasman Drive Milpitas, California 95035 USA Tel: +1 408 953 9100 Fax: +1 408 953 9299 E-mail: pgordon@com21.com')
if mibBuilder.loadTexts: com21HcxCc.setDescription('This is the Com21 ComController Common Control Unit MIB module. COM21 Part# 005-0025-00')
com21HcxCcUnitGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 61))
com21HcxCcNtpGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1141, 2, 62))
class PrimServiceState(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("is", 1), ("oos", 2))

class Com21RowStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("active", 1), ("create", 2), ("destroy", 3), ("deactive", 4))

hcxCcShelfId = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxCcShelfId.setStatus('current')
if mibBuilder.loadTexts: hcxCcShelfId.setDescription(' contains the associated shelf id.')
hcxCcSlotId = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxCcSlotId.setStatus('current')
if mibBuilder.loadTexts: hcxCcSlotId.setDescription(' contains the Common Controller slot id.')
hcxCcHardwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxCcHardwareVersion.setStatus('current')
if mibBuilder.loadTexts: hcxCcHardwareVersion.setDescription(' contains the hardware version of the CC card.')
hcxCcBootVersion = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxCcBootVersion.setStatus('current')
if mibBuilder.loadTexts: hcxCcBootVersion.setDescription(' contains the version of the CC card boot ROM.')
hcxSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxSoftwareRevision.setStatus('current')
if mibBuilder.loadTexts: hcxSoftwareRevision.setDescription(' The Common Controller Software Revision is a display string value which contains the software revision of the currently loaded COM21 Common Controller software downloaded from the software server device.')
hcxControlPrimServState = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 7), PrimServiceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxControlPrimServState.setStatus('current')
if mibBuilder.loadTexts: hcxControlPrimServState.setDescription(' contains primary service state of the Common Controller. This attribute indicates the overall service state of the Controller. OOS indicates that complete service cannot be provided. IS indicates that the Controller is operating as normal, though a non-service effecting error or test condition may exist.')
hcxControlPrimServStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 10)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXCC-MIB", "hcxCcShelfId"), ("COM21-HCXCC-MIB", "hcxCcSlotId"), ("COM21-HCXCC-MIB", "hcxControlPrimServState"))
if mibBuilder.loadTexts: hcxControlPrimServStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxControlPrimServStateChange.setDescription(' generated whenever hcxControlPrimaryServiceState changes value. This an event with no clear condition. Only severity is WARNING.')
hcxControlSecServState = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxControlSecServState.setStatus('current')
if mibBuilder.loadTexts: hcxControlSecServState.setDescription(' contains a string defining the secondary service states of the Common Controller. The states supported by the com21HcxControlGroup are: FAN - indicates Fan Failure, HIGH - indicates high temp condition, PWR - indicates power problem.')
hcxControlSecServStateChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 11)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXCC-MIB", "hcxCcShelfId"), ("COM21-HCXCC-MIB", "hcxCcSlotId"), ("COM21-HCXCC-MIB", "hcxControlSecServState"))
if mibBuilder.loadTexts: hcxControlSecServStateChange.setStatus('current')
if mibBuilder.loadTexts: hcxControlSecServStateChange.setDescription(' generated whenever hcxControlSecondaryServiceState changes value. This an event with no clear condition. Only severity is WARNING.')
hcxCcDiagTestAction = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxCcDiagTestAction.setStatus('current')
if mibBuilder.loadTexts: hcxCcDiagTestAction.setDescription(' This attribute is used to invoke the internal Common Controller diagnostic test. In order to activate this test, the card must be placed in the test state.')
hcxCcDiagTestComplete = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 12)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXCC-MIB", "hcxCcShelfId"), ("COM21-HCXCC-MIB", "hcxCcSlotId"), ("COM21-HCXCC-MIB", "hcxCcDiagTestResult"))
if mibBuilder.loadTexts: hcxCcDiagTestComplete.setStatus('current')
if mibBuilder.loadTexts: hcxCcDiagTestComplete.setDescription(' This notification is generated whenever the CC card internal diagnostic tests are completed. Event only, no clear. Only severity allowed is WARNING.')
hcxCcDiagTestResult = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inprogress", 1), ("success", 2), ("failure", 3), ("invalidState", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxCcDiagTestResult.setStatus('current')
if mibBuilder.loadTexts: hcxCcDiagTestResult.setDescription(' This attribute contains the result of the last CC card diagnostic test.')
hcxCcTestStatusLed = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxCcTestStatusLed.setStatus('current')
if mibBuilder.loadTexts: hcxCcTestStatusLed.setDescription(' The CC Test Status LED is a read-only attribute which describes the condition of the CC Test Status light emitting diode located on the CC. This indicates that a service effecting test is in progress and that the LED is illuminated.')
hcxCcTestStatusLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 13)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXCC-MIB", "hcxCcShelfId"), ("COM21-HCXCC-MIB", "hcxCcSlotId"), ("COM21-HCXCC-MIB", "hcxCcTestStatusLed"))
if mibBuilder.loadTexts: hcxCcTestStatusLedChange.setStatus('current')
if mibBuilder.loadTexts: hcxCcTestStatusLedChange.setDescription(' generated whenever there is a change in test LED status. This an event with no clear condition. Only severity is WARNING.')
hcxCcFaultStatusLed = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxCcFaultStatusLed.setStatus('current')
if mibBuilder.loadTexts: hcxCcFaultStatusLed.setDescription(' The Ethernet Fault Status LED is a read-only attribute which describes the condition of the ComController Ethernet Fault Status light emitting diode located on the Ethernet board. A value of on(1) indicates that an fault condition has been detected (for which a trap will have been issued) and the LED is illuminated.')
hcxCcFaultStatusLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 14)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXCC-MIB", "hcxCcShelfId"), ("COM21-HCXCC-MIB", "hcxCcSlotId"), ("COM21-HCXCC-MIB", "hcxCcFaultStatusLed"))
if mibBuilder.loadTexts: hcxCcFaultStatusLedChange.setStatus('current')
if mibBuilder.loadTexts: hcxCcFaultStatusLedChange.setDescription(' generated whenever there is a change in the Fault LED status. This an event with no clear condition. Only severity is WARNING.')
hcxCcEtherLinkStatusLed = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxCcEtherLinkStatusLed.setStatus('current')
if mibBuilder.loadTexts: hcxCcEtherLinkStatusLed.setDescription(' The Ethernet Link Status LED is a read-only attribute which describes the condition of the CC Ethernet Link Status light emitting diode located on the CC board. A value of on(1) indicates that the link is up and active, and that the LED is illuminated. Will be off if no card present.')
hcxCcEtherLinkStatusLedChange = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 15)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXCC-MIB", "hcxCcShelfId"), ("COM21-HCXCC-MIB", "hcxCcSlotId"), ("COM21-HCXCC-MIB", "hcxCcEtherLinkStatusLed"))
if mibBuilder.loadTexts: hcxCcEtherLinkStatusLedChange.setStatus('current')
if mibBuilder.loadTexts: hcxCcEtherLinkStatusLedChange.setDescription(' generated whenever there is a change in link LED status. This an event with no clear condition. Only severity is WARNING.')
hcxCcFlashBackupPeriod = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxCcFlashBackupPeriod.setStatus('current')
if mibBuilder.loadTexts: hcxCcFlashBackupPeriod.setDescription(' The period (in seconds) at which the CC shall automatically backup any configuration data to flash. This must be a multiple of 5 seconds upto 15 minutes. Default is 60 seconds.')
hcxCcFlashBackupAction = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nil", 1), ("execute", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxCcFlashBackupAction.setStatus('current')
if mibBuilder.loadTexts: hcxCcFlashBackupAction.setDescription(' This attribute is used to invoke the Common Controller to save all configuration data to flash.')
hcxCcFlashBackupComplete = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 16)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXCC-MIB", "hcxCcShelfId"), ("COM21-HCXCC-MIB", "hcxCcSlotId"), ("COM21-HCXCC-MIB", "hcxCcFlashBackupResult"))
if mibBuilder.loadTexts: hcxCcFlashBackupComplete.setStatus('current')
if mibBuilder.loadTexts: hcxCcFlashBackupComplete.setDescription(' This notification is generated whenever the CC card completes a user directed flash backup of configuration. Only severity allowed is WARNING.')
hcxCcFlashBackupResult = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("inprogress", 1), ("success", 2), ("failure", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxCcFlashBackupResult.setStatus('current')
if mibBuilder.loadTexts: hcxCcFlashBackupResult.setDescription(' This attribute contains the result of the last CC user directed flash backup.')
hcxSwitchSoftwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxSwitchSoftwareRevision.setStatus('current')
if mibBuilder.loadTexts: hcxSwitchSoftwareRevision.setDescription(' software revision of the image loaded on the embedded ATM switch. In the case of the compact ComController this attribute refers to the boot software version.')
hcxSwitchHardwareRevision = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxSwitchHardwareRevision.setStatus('current')
if mibBuilder.loadTexts: hcxSwitchHardwareRevision.setDescription(' hardware revision of the embedded ATM switch. This attribute is only applicable for the compact ComController.')
hcxSwitchSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(32, 32)).setFixedLength(32)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxSwitchSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hcxSwitchSerialNumber.setDescription(' serial number of the embedded ATM switch. This attribute is only applicable for the compact ComController.')
hcxNtpv3Control = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxNtpv3Control.setStatus('current')
if mibBuilder.loadTexts: hcxNtpv3Control.setDescription(' this attribute controls the NTPv3 feature. This features should NOT be enabled if NMAPS is in use. The timer servers are specified via com21HcxCcNtpGroup. Default diasble.')
hcxDiskFaultState = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noFault", 1), ("notInstalled", 2), ("notMounted", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDiskFaultState.setStatus('current')
if mibBuilder.loadTexts: hcxDiskFaultState.setDescription(' this attribute describes the fault state of the PCMCIA disk.')
hcxDiskIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(40, 40)).setFixedLength(40)).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxDiskIdentifier.setStatus('current')
if mibBuilder.loadTexts: hcxDiskIdentifier.setDescription(' this attribute indentifies the type of PCMCIA device.')
hcxDiskAccessFailure = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 17)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXCC-MIB", "hcxCcShelfId"), ("COM21-HCXCC-MIB", "hcxCcSlotId"), ("COM21-HCXCC-MIB", "hcxDiskFaultState"))
if mibBuilder.loadTexts: hcxDiskAccessFailure.setStatus('current')
if mibBuilder.loadTexts: hcxDiskAccessFailure.setDescription(' generated whenever there is a failure to access the PCMCIA disk. Default severity is MAJOR.')
hcxDiskAccessFailClear = NotificationType((1, 3, 6, 1, 4, 1, 1141, 4, 18)).setObjects(("COM21-HCXALM-MIB", "hcxAlmSeverity"), ("COM21-HCXALM-MIB", "hcxEventLogTime"), ("COM21-HCXCC-MIB", "hcxCcShelfId"), ("COM21-HCXCC-MIB", "hcxCcSlotId"))
if mibBuilder.loadTexts: hcxDiskAccessFailClear.setStatus('current')
if mibBuilder.loadTexts: hcxDiskAccessFailClear.setDescription(' generated whenever a previously reported disk failure is cleared. Severity is CLEARED.')
hcxMibVersion = MibScalar((1, 3, 6, 1, 4, 1, 1141, 2, 61, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxMibVersion.setStatus('current')
if mibBuilder.loadTexts: hcxMibVersion.setDescription(' this attribute specifies the MIB version used by CC.')
com21HcxCcNtpTable = MibTable((1, 3, 6, 1, 4, 1, 1141, 2, 62, 1), )
if mibBuilder.loadTexts: com21HcxCcNtpTable.setStatus('current')
if mibBuilder.loadTexts: com21HcxCcNtpTable.setDescription('.')
com21HcxCcNtpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1141, 2, 62, 1, 1), ).setIndexNames((0, "COM21-HCXCC-MIB", "hcxCcNtpServerIndex"))
if mibBuilder.loadTexts: com21HcxCcNtpEntry.setStatus('current')
if mibBuilder.loadTexts: com21HcxCcNtpEntry.setDescription('.')
hcxCcNtpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 62, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hcxCcNtpServerIndex.setStatus('current')
if mibBuilder.loadTexts: hcxCcNtpServerIndex.setDescription(' this attribute defines both the index of the address entry. The CC shall attempt to access each in order starting with index 1.')
hcxCcNtpServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 62, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hcxCcNtpServerAddress.setStatus('current')
if mibBuilder.loadTexts: hcxCcNtpServerAddress.setDescription(' this attribute defines both the IP address of a time server.')
hcxCcNtpServerAddrStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1141, 2, 62, 1, 1, 3), Com21RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hcxCcNtpServerAddrStatus.setStatus('current')
if mibBuilder.loadTexts: hcxCcNtpServerAddrStatus.setDescription(' Used to delete or create an entry.')
mibBuilder.exportSymbols("COM21-HCXCC-MIB", hcxCcEtherLinkStatusLedChange=hcxCcEtherLinkStatusLedChange, hcxCcFlashBackupComplete=hcxCcFlashBackupComplete, hcxCcNtpServerIndex=hcxCcNtpServerIndex, hcxCcNtpServerAddress=hcxCcNtpServerAddress, hcxControlSecServStateChange=hcxControlSecServStateChange, com21HcxCcNtpTable=com21HcxCcNtpTable, hcxNtpv3Control=hcxNtpv3Control, Com21RowStatus=Com21RowStatus, hcxCcFlashBackupResult=hcxCcFlashBackupResult, hcxCcFlashBackupPeriod=hcxCcFlashBackupPeriod, hcxSwitchHardwareRevision=hcxSwitchHardwareRevision, hcxSwitchSerialNumber=hcxSwitchSerialNumber, hcxCcDiagTestComplete=hcxCcDiagTestComplete, hcxCcDiagTestResult=hcxCcDiagTestResult, hcxCcFlashBackupAction=hcxCcFlashBackupAction, PYSNMP_MODULE_ID=com21HcxCc, hcxCcDiagTestAction=hcxCcDiagTestAction, hcxSoftwareRevision=hcxSoftwareRevision, hcxCcEtherLinkStatusLed=hcxCcEtherLinkStatusLed, hcxMibVersion=hcxMibVersion, hcxCcNtpServerAddrStatus=hcxCcNtpServerAddrStatus, com21HcxCcNtpEntry=com21HcxCcNtpEntry, hcxSwitchSoftwareRevision=hcxSwitchSoftwareRevision, hcxDiskAccessFailClear=hcxDiskAccessFailClear, com21HcxCcUnitGroup=com21HcxCcUnitGroup, hcxDiskIdentifier=hcxDiskIdentifier, hcxCcTestStatusLedChange=hcxCcTestStatusLedChange, hcxControlSecServState=hcxControlSecServState, hcxCcFaultStatusLedChange=hcxCcFaultStatusLedChange, com21HcxCcNtpGroup=com21HcxCcNtpGroup, hcxCcTestStatusLed=hcxCcTestStatusLed, hcxDiskFaultState=hcxDiskFaultState, hcxCcShelfId=hcxCcShelfId, com21HcxCc=com21HcxCc, hcxControlPrimServState=hcxControlPrimServState, hcxDiskAccessFailure=hcxDiskAccessFailure, hcxCcHardwareVersion=hcxCcHardwareVersion, hcxCcSlotId=hcxCcSlotId, hcxControlPrimServStateChange=hcxControlPrimServStateChange, hcxCcFaultStatusLed=hcxCcFaultStatusLed, PrimServiceState=PrimServiceState, hcxCcBootVersion=hcxCcBootVersion)
