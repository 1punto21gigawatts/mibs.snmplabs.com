#
# PySNMP MIB module DMswitch-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DMswitch-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:51:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion")
datacomAccessDevicesMIBs, = mibBuilder.importSymbols("DATACOM-SMI", "datacomAccessDevicesMIBs")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Unsigned32, TimeTicks, enterprises, MibIdentifier, Bits, Integer32, ObjectIdentity, Gauge32, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Unsigned32", "TimeTicks", "enterprises", "MibIdentifier", "Bits", "Integer32", "ObjectIdentity", "Gauge32", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "Counter32")
RowStatus, TextualConvention, DisplayString, TruthValue, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString", "TruthValue", "MacAddress")
dmSwitchMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201))
if mibBuilder.loadTexts: dmSwitchMIB.setLastUpdated('201512100000Z')
if mibBuilder.loadTexts: dmSwitchMIB.setOrganization('DATACOM')
if mibBuilder.loadTexts: dmSwitchMIB.setContactInfo('DATACOM -- -- Postal: DATACOM -- Rua Am√©rica, 1000 -- Eldorado do Sul - RS -- Brasil -- CEP: 92990-000 -- -- Tel: +55 51 3933 3000 -- Fax: +55 51 3933 3003 -- e-mail: datacom@datacom.ind.br')
if mibBuilder.loadTexts: dmSwitchMIB.setDescription('The MIB module for DMswitch.')
dmSwitchMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1))
dmSwitchNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2))
dmSwitchConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 3))
switchMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1))
portMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2))
trunkMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3))
lacpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 4))
staMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5))
tftpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 6))
restartMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 7))
mirrorMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 8))
igmpSnoopMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9))
ipMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10))
bcastStormMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 11))
vlanMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 12))
priorityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 13))
trapDestMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14))
rateLimitMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16))
securityMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17))
sysLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19))
sysTimeMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20))
fileMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21))
countMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 22))
filterCounterMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23))
eapsMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 24))
cfmProbeMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 25))
cpumonMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26))
queuePortMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27))
ddTransceiversMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28))
class ValidStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object to create and destroy a table entry. This is a simplified variant of RowStatus as it supports only two values. Setting it to valid(1) creates an entry. Setting it to invalid(2) destroys an entry.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("valid", 1), ("invalid", 2))

class KeySegment(DisplayString):
    description = 'The total length of the key is 1024 characters, it is divided into 8 parts and stored in 8 separated mib variables as below: Key1: part 1 of the key (1-128) Key2: part 2 of the key (129-256) Key3: part 3 of the key (257-384) Key4: part 4 of the key (385-512) Key5: part 5 of the key (513-640) Key6: part 6 of the key (641-768) Key7: part 7 of the key (769-896) Key8: part 8 of the key (897-1024) Please note that if the key string is less then 1024 characters, the remaining part of the string will be filled by a zero-length string. For example, if the length of the key is 129, we will get a string of length 128 in Key1, and a string of length 1 in Key2, moreover, Key3 to Key8 will all be zero-length strings.'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 128)

class StaPathCostMode(TextualConvention, Integer32):
    description = 'The path cost mode of a spanning tree algorithm, short(1) indicates that we retrieve/configure the spanning tree path cost as a 16 bit value and long(2) indicates that we retrieve/configure the spanning tree path cost as a 32 bit value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("short", 1), ("long", 2))

switchNumber = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchNumber.setStatus('current')
if mibBuilder.loadTexts: switchNumber.setDescription('The total number of switches present on this system.')
switchInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2), )
if mibBuilder.loadTexts: switchInfoTable.setStatus('current')
if mibBuilder.loadTexts: switchInfoTable.setDescription('Table of descriptive and status information about switches in this system.')
switchInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1), ).setIndexNames((0, "DMswitch-MIB", "swUnitIndex"))
if mibBuilder.loadTexts: switchInfoEntry.setStatus('current')
if mibBuilder.loadTexts: switchInfoEntry.setDescription('An entry in the table, containing information about a single switch in this system.')
swUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: swUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swUnitIndex.setDescription('This object identifies the switch within the system for which this entry contains information. This value can never be greater than switchNumber.')
swHardwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHardwareVer.setStatus('current')
if mibBuilder.loadTexts: swHardwareVer.setDescription('Hardware version of the main board.')
swBootLoaderVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBootLoaderVer.setStatus('current')
if mibBuilder.loadTexts: swBootLoaderVer.setDescription('Loader version of the main board.')
swFirmwareVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFirmwareVer.setStatus('current')
if mibBuilder.loadTexts: swFirmwareVer.setDescription('Operation code version of the main board.')
swPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortNumber.setStatus('current')
if mibBuilder.loadTexts: swPortNumber.setDescription('The total port number of this switch (including expansion slot).')
swPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("internalPower", 1), ("redundantPower", 2), ("internalAndRedundantPower", 3), ("externalPower", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPowerStatus.setStatus('current')
if mibBuilder.loadTexts: swPowerStatus.setDescription('Indicates the switch using internalPower(1), redundantPower(2), internalAndRedundantPower(3) or externalPower(4)')
swRoleInSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("master", 1), ("backupMaster", 2), ("slave", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swRoleInSystem.setStatus('current')
if mibBuilder.loadTexts: swRoleInSystem.setDescription('Indicates the switch is master(1), backupMaster(2) or slave(3) in this system.')
swSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSerialNumber.setStatus('current')
if mibBuilder.loadTexts: swSerialNumber.setDescription('Serial number of the switch.')
swProdName = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdName.setStatus('current')
if mibBuilder.loadTexts: swProdName.setDescription('')
swProdModelId = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71))).clone(namedValues=NamedValues(("dmSwitch2204G1", 1), ("dmSwitch2304G1", 2), ("dmSwitch3224F1", 3), ("dmSwitch3324F1", 4), ("dmSwitch3224F2", 5), ("dmSwitch3324F2", 6), ("dmSwitch3224F3", 7), ("dmSwitch3324F3", 8), ("mpu192", 9), ("mpu384", 10), ("eth12gx", 11), ("eth24gx", 12), ("eth1x10gx", 13), ("eth2x10gx", 14), ("eth12gxEth1x10gx", 15), ("eth24gt", 16), ("eth48gt", 17), ("eth24gxEth2x10gx", 20), ("eth48gx", 21), ("eth4x10gxhseries", 22), ("eth24gxEth2x10gxhseries", 23), ("eth48gxhseries", 24), ("eth24gxhseries", 25), ("eth2x10gxhseries", 26), ("eth10gx32xe1", 27), ("eth10gx4xstm1", 28), ("eth10gx2xstm4", 29), ("mpu512", 30), ("eth24gxlseries", 31), ("eth24gx4gx", 32), ("eth24gx2xx", 33), ("eth24gxs", 34), ("eth24gx2xxs", 35), ("eth24gx4xx", 36), ("eth20gt4gc", 37), ("eth20gt4gc2xx", 38), ("eth20gt4gcs", 39), ("eth20gt4gc2xxs", 40), ("eth20gt4gc4xx", 41), ("eth44gt4gc", 42), ("eth44gt4gc2xx", 43), ("eth44gt4gcs", 44), ("eth44gt4gc2xxs", 45), ("eth44gt4gc4xx", 46), ("eth44gt4gc2xs", 47), ("eth44gt4gc2xss", 48), ("eth44gt4gc4xs", 49), ("eth24gthseries", 50), ("eth48gthseries", 51), ("eth20gt4gc2xss", 52), ("eth20gx32xe1hseries", 53), ("eth20gx2x10gx32xe1hseries", 54), ("eth16gx2x10gx4xstm1hseries", 55), ("eth16gx4xstm1hseries", 56), ("eth24gx2x10gxeseries", 57), ("eth24gxeseries", 58), ("eth4x10gxeseries", 59), ("eth48gteseries", 60), ("mpu960", 61), ("eth44gt4gcsmplsdc", 62), ("eth44gt4gc2xxsmplsdc", 63), ("eth44gt4gc4xxmplsdc", 64), ("eth24gx2x10gxhseriesII", 65), ("eth20gt4gc4xs", 66), ("eth24gxhseriesII", 67), ("eth2x10gxhseriesII", 68), ("eth48gxhseriesII", 69), ("eth4x10gxhseriesII", 70), ("eth24gx4xs", 71)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdModelId.setStatus('current')
if mibBuilder.loadTexts: swProdModelId.setDescription('Product model identifier.')
swFirmwareReleaseDate = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swFirmwareReleaseDate.setStatus('current')
if mibBuilder.loadTexts: swFirmwareReleaseDate.setDescription('Release date of the firmware.')
swTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swTemperature.setStatus('current')
if mibBuilder.loadTexts: swTemperature.setDescription('Temperature of the switch.')
swG704IntfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swG704IntfNumber.setStatus('current')
if mibBuilder.loadTexts: swG704IntfNumber.setDescription('The number of G704 interfaces of this switch.')
swE1cIntfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swE1cIntfNumber.setStatus('current')
if mibBuilder.loadTexts: swE1cIntfNumber.setDescription('The number of E1c interfaces of this switch.')
swBundleIntfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swBundleIntfNumber.setStatus('current')
if mibBuilder.loadTexts: swBundleIntfNumber.setDescription('The number of Bundle interfaces of this switch.')
swPtpIntfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPtpIntfNumber.setStatus('current')
if mibBuilder.loadTexts: swPtpIntfNumber.setDescription('The number of PTP interfaces of this switch.')
swSdhIntfNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSdhIntfNumber.setStatus('current')
if mibBuilder.loadTexts: swSdhIntfNumber.setDescription('The number of SDH interfaces of this switch.')
swVC4Number = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVC4Number.setStatus('current')
if mibBuilder.loadTexts: swVC4Number.setDescription('The number of VC4 interfaces of this switch.')
swVC12Number = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVC12Number.setStatus('current')
if mibBuilder.loadTexts: swVC12Number.setDescription('The number of VC12 interfaces of this switch.')
switchProductId = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 3))
swProdManufacturer = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdManufacturer.setStatus('current')
if mibBuilder.loadTexts: swProdManufacturer.setDescription('')
swProdDescription = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdDescription.setStatus('current')
if mibBuilder.loadTexts: swProdDescription.setDescription('')
swProdUrl = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swProdUrl.setStatus('current')
if mibBuilder.loadTexts: swProdUrl.setDescription('')
swIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIdentifier.setStatus('current')
if mibBuilder.loadTexts: swIdentifier.setDescription('A unique identifier of which switch in the chassis is currently being looked at.')
swVendorId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 9, 2000000254, 2000000255))).clone(namedValues=NamedValues(("datacom", 1), ("ieru", 2), ("asga", 3), ("parks", 4), ("digitel", 5), ("none", 6), ("elebra", 7), ("osp", 9), ("objectNonexistentInModel", 2000000254), ("infNotAvailable", 2000000255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swVendorId.setStatus('mandatory')
if mibBuilder.loadTexts: swVendorId.setDescription(' Vendor information. The value 0 indicates a vendor not defined. ')
switchIndivPowerTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 4), )
if mibBuilder.loadTexts: switchIndivPowerTable.setStatus('current')
if mibBuilder.loadTexts: switchIndivPowerTable.setDescription('Table about status of individual powers.')
switchIndivPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 4, 1), ).setIndexNames((0, "DMswitch-MIB", "swIndivPowerUnitIndex"), (0, "DMswitch-MIB", "swIndivPowerIndex"))
if mibBuilder.loadTexts: switchIndivPowerEntry.setStatus('current')
if mibBuilder.loadTexts: switchIndivPowerEntry.setDescription('Table about status of individual powers.')
swIndivPowerUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivPowerUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swIndivPowerUnitIndex.setDescription('This is defined as swUnitIndex.')
swIndivPowerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivPowerIndex.setStatus('current')
if mibBuilder.loadTexts: swIndivPowerIndex.setDescription('1 means internal power. 2 means external power.')
swIndivPowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("red", 1), ("green", 2), ("notPresent", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivPowerStatus.setStatus('current')
if mibBuilder.loadTexts: swIndivPowerStatus.setDescription('notPresent(3) means not present. green(2) means up. red(1) means down.')
switchIndivFanTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 5), )
if mibBuilder.loadTexts: switchIndivFanTable.setStatus('current')
if mibBuilder.loadTexts: switchIndivFanTable.setDescription('Table about status of individual fans.')
switchIndivFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 5, 1), ).setIndexNames((0, "DMswitch-MIB", "swIndivFanUnitIndex"), (0, "DMswitch-MIB", "swIndivFanIndex"))
if mibBuilder.loadTexts: switchIndivFanEntry.setStatus('current')
if mibBuilder.loadTexts: switchIndivFanEntry.setDescription('Table about status of individual fans.')
swIndivFanUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivFanUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swIndivFanUnitIndex.setDescription('This is defined as swUnitIndex.')
swIndivFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivFanIndex.setStatus('current')
if mibBuilder.loadTexts: swIndivFanIndex.setDescription('')
swIndivFanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("red", 1), ("green", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivFanStatus.setStatus('current')
if mibBuilder.loadTexts: swIndivFanStatus.setDescription('red(1) means down. green(2) means up. ')
switchIndivAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 6), )
if mibBuilder.loadTexts: switchIndivAlarmTable.setStatus('current')
if mibBuilder.loadTexts: switchIndivAlarmTable.setDescription('Table about status of individual alarms.')
switchIndivAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 6, 1), ).setIndexNames((0, "DMswitch-MIB", "swIndivAlarmUnitIndex"), (0, "DMswitch-MIB", "swIndivAlarmIndex"))
if mibBuilder.loadTexts: switchIndivAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: switchIndivAlarmEntry.setDescription('Table about status of individual alarms.')
swIndivAlarmUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivAlarmUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swIndivAlarmUnitIndex.setDescription('This is defined as swUnitIndex.')
swIndivAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivAlarmIndex.setStatus('current')
if mibBuilder.loadTexts: swIndivAlarmIndex.setDescription('')
swIndivAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deactivated", 1), ("activated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: swIndivAlarmStatus.setDescription('')
switchResObj = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchResObj.setStatus('current')
if mibBuilder.loadTexts: switchResObj.setDescription('')
swHashConfig = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHashConfig.setStatus('current')
if mibBuilder.loadTexts: swHashConfig.setDescription('')
swHashStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHashStatus.setStatus('current')
if mibBuilder.loadTexts: swHashStatus.setDescription('')
swCpuUsage = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swCpuUsage.setStatus('current')
if mibBuilder.loadTexts: swCpuUsage.setDescription('The CPU usage (in hundredths of a percent) at the last minute.')
swMemUsage = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMemUsage.setStatus('current')
if mibBuilder.loadTexts: swMemUsage.setDescription('The memory usage (percentage).')
switchMacAddrUsageTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 12), )
if mibBuilder.loadTexts: switchMacAddrUsageTable.setStatus('current')
if mibBuilder.loadTexts: switchMacAddrUsageTable.setDescription('Table about the total of used MAC addresses entries.')
switchMacAddrUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 12, 1), ).setIndexNames((0, "DMswitch-MIB", "swMacAddrUnitIndex"))
if mibBuilder.loadTexts: switchMacAddrUsageEntry.setStatus('current')
if mibBuilder.loadTexts: switchMacAddrUsageEntry.setDescription('Table about the total of used MAC addresses entries.')
swMacAddrUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 12, 1, 1), Integer32())
if mibBuilder.loadTexts: swMacAddrUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swMacAddrUnitIndex.setDescription('This is defined as swUnitIndex.')
swMacAddrUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 12, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMacAddrUsageValue.setStatus('current')
if mibBuilder.loadTexts: swMacAddrUsageValue.setDescription('The total of used MAC addresses entries.')
swSlotNumber = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSlotNumber.setStatus('current')
if mibBuilder.loadTexts: swSlotNumber.setDescription('The total number of interface board slots present on the device.')
switchMpuTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 14), )
if mibBuilder.loadTexts: switchMpuTable.setStatus('current')
if mibBuilder.loadTexts: switchMpuTable.setDescription('Table of descriptive and status information about MPUs in this system.')
switchMpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 14, 1), ).setIndexNames((0, "DMswitch-MIB", "swMpuIndex"))
if mibBuilder.loadTexts: switchMpuEntry.setStatus('current')
if mibBuilder.loadTexts: switchMpuEntry.setDescription('An entry in the table, containing information about a single MPU in this system.')
swMpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMpuIndex.setStatus('current')
if mibBuilder.loadTexts: swMpuIndex.setDescription('This object identifies the MPU within the system for which this entry contains information.')
swMpuBootLoaderVer = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 14, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMpuBootLoaderVer.setStatus('current')
if mibBuilder.loadTexts: swMpuBootLoaderVer.setDescription('Loader version of the main board.')
swMpuRoleInSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMpuRoleInSystem.setStatus('current')
if mibBuilder.loadTexts: swMpuRoleInSystem.setDescription('Indicates the MPU is active(1) or standby(2) in this system.')
swMpuSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 14, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMpuSerialNumber.setStatus('current')
if mibBuilder.loadTexts: swMpuSerialNumber.setDescription('Serial number of the MPU.')
swMpuModelId = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(9, 10))).clone(namedValues=NamedValues(("mpu192", 9), ("mpu384", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swMpuModelId.setStatus('current')
if mibBuilder.loadTexts: swMpuModelId.setDescription('MPU model identifier.')
swHashHardware = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(16, 16)).setFixedLength(16)).setMaxAccess("readonly")
if mibBuilder.loadTexts: swHashHardware.setStatus('current')
if mibBuilder.loadTexts: swHashHardware.setDescription('')
switchIndivAlarmOutTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 16), )
if mibBuilder.loadTexts: switchIndivAlarmOutTable.setStatus('current')
if mibBuilder.loadTexts: switchIndivAlarmOutTable.setDescription('Table about status of output alarms.')
swChassisModel = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 2000000254, 2000000255))).clone(namedValues=NamedValues(("dmSwitch3000", 1), ("dmSwitch4001", 2), ("dmSwitch4001L", 3), ("dmSwitch4001S", 4), ("dmSwitch4004", 5), ("dmSwitch4008", 6), ("dmSwitch4008HighSpeed", 7), ("dmSwitch4001NewFan", 8), ("dmSwitch4100", 9), ("objectNonexistentInModel", 2000000254), ("infNotAvailable", 2000000255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swChassisModel.setStatus('current')
if mibBuilder.loadTexts: swChassisModel.setDescription('Chassis model for equipment')
switchSessionTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 18), )
if mibBuilder.loadTexts: switchSessionTable.setStatus('current')
if mibBuilder.loadTexts: switchSessionTable.setDescription('Table about CLI sessions informations.')
switchSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 18, 1), ).setIndexNames((0, "DMswitch-MIB", "swSessionUnitIndex"))
if mibBuilder.loadTexts: switchSessionEntry.setStatus('current')
if mibBuilder.loadTexts: switchSessionEntry.setDescription('An entry in the table, containing information about a single switch in this system.')
swSessionUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 18, 1, 1), Integer32())
if mibBuilder.loadTexts: swSessionUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swSessionUnitIndex.setDescription('This is defined as swUnitIndex.')
swSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 18, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSessionName.setStatus('current')
if mibBuilder.loadTexts: swSessionName.setDescription('Session username.')
swSessionUptime = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 18, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSessionUptime.setStatus('current')
if mibBuilder.loadTexts: swSessionUptime.setDescription('Login time and date (uptime).')
swSessionPid = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSessionPid.setStatus('current')
if mibBuilder.loadTexts: swSessionPid.setDescription('CLI Session Process ID.')
swSessionSrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 18, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swSessionSrcIP.setStatus('current')
if mibBuilder.loadTexts: swSessionSrcIP.setDescription('IP from process that called CLI - telnet, ssh or inetd.')
switchIndivAlarmOutEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 16, 1), ).setIndexNames((0, "DMswitch-MIB", "swIndivAlarmOutUnitIndex"))
if mibBuilder.loadTexts: switchIndivAlarmOutEntry.setStatus('current')
if mibBuilder.loadTexts: switchIndivAlarmOutEntry.setDescription('Table about status of output alarms.')
swIndivAlarmOutUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivAlarmOutUnitIndex.setStatus('current')
if mibBuilder.loadTexts: swIndivAlarmOutUnitIndex.setDescription('This is defined as swUnitIndex.')
swIndivAlarmOutStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 1, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("deactivated", 1), ("activated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swIndivAlarmOutStatus.setStatus('current')
if mibBuilder.loadTexts: swIndivAlarmOutStatus.setDescription('Indicates current alarm output status, as configured in external-alarm-output.')
portTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1), )
if mibBuilder.loadTexts: portTable.setStatus('current')
if mibBuilder.loadTexts: portTable.setDescription("Table of descriptive and status information about configuration of each switch port (including expansion slot) in this system. This table also contains information about each trunk (similar to Cisco's EtherChannel).")
portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: portEntry.setStatus('current')
if mibBuilder.loadTexts: portEntry.setDescription('An entry in the table, containing information about configuration in one switch port of the switch.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: portIndex.setStatus('current')
if mibBuilder.loadTexts: portIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
portName = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portName.setStatus('current')
if mibBuilder.loadTexts: portName.setDescription('Indicates the port name. This is same as ifAlias in the IF-MIB (RFC2863 or later).')
portType = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("other", 1), ("hundredBaseTX", 2), ("hundredBaseFX", 3), ("thousandBaseSX", 4), ("thousandBaseLX", 5), ("thousandBaseT", 6), ("thousandBaseGBIC", 7), ("thousandBaseSfp", 8), ("hundredBaseFxScSingleMode", 9), ("hundredBaseFxScMultiMode", 10), ("tenG", 11), ("tenGSfp", 12)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portType.setStatus('current')
if mibBuilder.loadTexts: portType.setDescription('Indicates the port type.')
portSpeedDpxCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("reserved", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7), ("fullDuplex10000", 8))).clone('halfDuplex10')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portSpeedDpxCfg.setStatus('current')
if mibBuilder.loadTexts: portSpeedDpxCfg.setDescription('Set the port speed and duplex mode as follows: halfDuplex10(2) - 10Mbps and half duplex mode fullDuplex10(3) - 10Mbps and full duplex mode halfDuplex100(4) - 100Mbps and half duplex mode fullDuplex100(5) - 100Mbps and full duplex mode halfDuplex1000(6) - 1000Mbps and half duplex mode fullDuplex1000(7) - 1000Mbps and full duplex mode fullDuplex10000(8) - 10000Mbps and full duplex mode hundredBaseTX port can be set as halfDuplex10(2) fullDuplex10(3) halfDuplex100(4) fullDuplex100(5) hundredBaseFX port can be set as halfDuplex100(4) fullDuplex100(5) thousandBaseSX port can be set as halfDuplex1000(6) fullDuplex1000(7) The actual operating speed and duplex of the port is given by portSpeedDpxStatus.')
portFlowCtrlCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("backPressure", 3), ("dot3xFlowControlRxTx", 4), ("dot3xFlowControlRx", 5), ("dot3xFlowControlTx", 6))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portFlowCtrlCfg.setStatus('current')
if mibBuilder.loadTexts: portFlowCtrlCfg.setDescription('(1) Flow control mechanism is enabled. If the port type is hundredBaseTX or thousandBaseSX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, the port uses IEEE 802.3x flow control mechanism. If the port type is hundredBaseFX: When the port is operating in halfDuplex mode, the port uses backPressure flow control mechanism. When the port is operating in fullDuplex mode, Flow control mechanism will not function. (2) Flow control mechanism is disabled. (3) Flow control mechanism is backPressure. when the port is in fullDuplex mode.This flow control mechanism will not function. (4) Flow control mechanism is IEEE 802.3x flow control. when the port is in halfDuplex mode.This flow control mechanism will not function. hundredBaseTX and thousandBaseSX port can be set as: enabled(1), disabled(2), backPressure(3), dot3xFlowControl(4). hundredBaseFX port can be set as: enabled(1), disabled(2), backPressure(3). The actual flow control mechanism is used given by portFlowCtrlStatus.')
portCapabilities = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 6), Bits().clone(namedValues=NamedValues(("portCap10half", 0), ("portCap10full", 1), ("portCap100half", 2), ("portCap100full", 3), ("portCap1000half", 4), ("portCap1000full", 5), ("portCap10000full", 6), ("dot3xFlowControlRxTx", 7), ("dot3xFlowControlRx", 8), ("dot3xFlowControlTx", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portCapabilities.setStatus('current')
if mibBuilder.loadTexts: portCapabilities.setDescription('Port capabilities.')
portAutonegotiation = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portAutonegotiation.setStatus('current')
if mibBuilder.loadTexts: portAutonegotiation.setDescription('Whether autonegotiation is enabled.')
portSpeedDpxStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("error", 1), ("halfDuplex10", 2), ("fullDuplex10", 3), ("halfDuplex100", 4), ("fullDuplex100", 5), ("halfDuplex1000", 6), ("fullDuplex1000", 7), ("fullDuplex10000", 8), ("down", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portSpeedDpxStatus.setStatus('current')
if mibBuilder.loadTexts: portSpeedDpxStatus.setDescription('The operating speed and duplex mode of the switched port. If this index is a trunk, the speed is the speed of its individual members. If this index is a trunk and the result is inconsistent among its member ports, this value is error(1).')
portFlowCtrlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("error", 1), ("backPressure", 2), ("dot3xFlowControlRxTx", 3), ("dot3xFlowControlRx", 4), ("dot3xFlowControlTx", 5), ("disable", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portFlowCtrlStatus.setStatus('current')
if mibBuilder.loadTexts: portFlowCtrlStatus.setDescription('(2) BackPressure flow control machanism is used. (3) IEEE 802.3 flow control machanism is used. (4) Flow control mechanism is disabled. If this index is a trunk and the result is inconsistent among its member ports, this value is error(1).')
portMdiStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("normal", 2), ("xover", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMdiStatus.setStatus('current')
if mibBuilder.loadTexts: portMdiStatus.setDescription('')
portTrunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portTrunkIndex.setStatus('current')
if mibBuilder.loadTexts: portTrunkIndex.setDescription('The trunk to which this port belongs. A value of 0 means that this port does not belong to any trunk. A value greater than zero means that this port belongs to trunk at trunkIndex, defined by the corresponding trunkPorts.')
trunkMaxId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkMaxId.setStatus('current')
if mibBuilder.loadTexts: trunkMaxId.setDescription('The maximum number for a trunk identifier.')
trunkValidNumber = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkValidNumber.setStatus('current')
if mibBuilder.loadTexts: trunkValidNumber.setDescription('The number of valid trunks.')
trunkTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 3), )
if mibBuilder.loadTexts: trunkTable.setStatus('current')
if mibBuilder.loadTexts: trunkTable.setDescription('Table of descriptive and status information about configuration of each trunk, similar to Cisco EtherChannel.')
trunkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 3, 1), ).setIndexNames((0, "DMswitch-MIB", "trunkIndex"))
if mibBuilder.loadTexts: trunkEntry.setStatus('current')
if mibBuilder.loadTexts: trunkEntry.setDescription('An entry in the table, containing information about configuration in one trunk of the switch.')
trunkIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: trunkIndex.setStatus('current')
if mibBuilder.loadTexts: trunkIndex.setDescription('This object identifies the trunk within the switch for which this entry contains information.')
trunkPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 3, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkPorts.setStatus('current')
if mibBuilder.loadTexts: trunkPorts.setDescription('The complete set of ports currently associated with this trunk.')
trunkCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("lacp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trunkCreation.setStatus('current')
if mibBuilder.loadTexts: trunkCreation.setDescription('A value of static(1) means a statically configured trunk. A value of lacp(2) means an LACP-configured trunk.')
trunkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkStatus.setStatus('current')
if mibBuilder.loadTexts: trunkStatus.setDescription('Writing this to valid(1) creates an entry. Writing this to invalid(2) destroys an entry.')
lacpPortTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 4, 1), )
if mibBuilder.loadTexts: lacpPortTable.setStatus('current')
if mibBuilder.loadTexts: lacpPortTable.setDescription('Table for LACP port configuration.')
lacpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 4, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "lacpPortIndex"))
if mibBuilder.loadTexts: lacpPortEntry.setStatus('current')
if mibBuilder.loadTexts: lacpPortEntry.setDescription('Entry for LACP port configuration.')
lacpPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 4, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: lacpPortIndex.setStatus('current')
if mibBuilder.loadTexts: lacpPortIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
lacpPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: lacpPortStatus.setStatus('current')
if mibBuilder.loadTexts: lacpPortStatus.setDescription('Whether 802.3ad LACP is enabled.')
staSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 1), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staSystemStatus.setStatus('current')
if mibBuilder.loadTexts: staSystemStatus.setDescription('Global spanning tree status. (1) Spanning tree protocol is enabled. (2) Spanning tree protocol is disabled.')
staPortTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2), )
if mibBuilder.loadTexts: staPortTable.setReference('IEEE 802.1d, IEEE 802.1w, IEEE 802.1s.')
if mibBuilder.loadTexts: staPortTable.setStatus('current')
if mibBuilder.loadTexts: staPortTable.setDescription('The table manages port settings for Spanning Tree Protocol 802.1d, 802.1w or 802.1s depending on the value specified by staProtocolType.')
staPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1), ).setIndexNames((0, "DMswitch-MIB", "staPortIndex"))
if mibBuilder.loadTexts: staPortEntry.setStatus('current')
if mibBuilder.loadTexts: staPortEntry.setDescription('The conceptual entry of staPortTable.')
staPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: staPortIndex.setStatus('current')
if mibBuilder.loadTexts: staPortIndex.setDescription('The port and the trunk (excluding trunk member ports) interface of the staPortTable. The interface identified by a particular value of this index is the same interface as identified by the same value of dot1dStpPort in the BRIDGE-MIB.')
staPortAdminEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminEdgePort.setReference('IEEE 802.1t clause 14.8.2, 18.3.3')
if mibBuilder.loadTexts: staPortAdminEdgePort.setStatus('current')
if mibBuilder.loadTexts: staPortAdminEdgePort.setDescription('The administrative value of the edge port parameter. A value of true(1) indicates that this port should be assumed as an edge-port and a value of false(2) indicates that this port should be assumed as a non-edge-port.')
staPortOperEdgePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperEdgePort.setReference('IEEE 802.1t clause 14.8.2, 18.3.4')
if mibBuilder.loadTexts: staPortOperEdgePort.setStatus('current')
if mibBuilder.loadTexts: staPortOperEdgePort.setDescription('The operational value of the edge port parameter. The object is initialized to the value of staPortAdminEdgePort and is set false when a BPDU is received.')
staPortAdminPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortAdminPointToPoint.setReference('IEEE 802.1w clause 6.4.3, 6.5, 14.8.2')
if mibBuilder.loadTexts: staPortAdminPointToPoint.setStatus('current')
if mibBuilder.loadTexts: staPortAdminPointToPoint.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of forceTrue(0) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of forceFalse(1) indicates that this port should be treated as having a shared media connection. A value of auto(2) indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means.')
staPortOperPointToPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: staPortOperPointToPoint.setReference('IEEE 802.1w clause 6.4.3, 6.5, 14.8.2')
if mibBuilder.loadTexts: staPortOperPointToPoint.setStatus('current')
if mibBuilder.loadTexts: staPortOperPointToPoint.setDescription('The operational point-to-point status of the LAN segment attached to this port. This indicates whether a port is considered to have a point-to-point connection or not. The value is determined by management or by auto-detection, as described in the staPortAdminPointToPoint object.')
staPortLongPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortLongPathCost.setStatus('current')
if mibBuilder.loadTexts: staPortLongPathCost.setDescription('The contribution of this port to the path cost (in 32 bits value) of paths towards the spanning tree root which include this port. This object is used to configure the spanning tree port path cost in the 32-bit value range when the staPathCostMethod is long(2). If the staPathCostMethod is short(1), this mib object is not instantiated.')
staPortSystemStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 2, 1, 7), EnabledStatus().clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staPortSystemStatus.setStatus('current')
if mibBuilder.loadTexts: staPortSystemStatus.setDescription('Per-port spanning tree status. (1) Spanning tree protocol is enabled. (2) Spanning tree protocol is disabled.')
staProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staProtocolType.setReference('IEEE 802.1w clause 14.8.1, 17.12, 17.16.1')
if mibBuilder.loadTexts: staProtocolType.setStatus('current')
if mibBuilder.loadTexts: staProtocolType.setDescription("The version of Spanning Tree Protocol the bridge is currently running. The value 'stp(1)' indicates the Spanning Tree Protocol is as specified in IEEE 802.1D,'rstp(2)' indicates that the Rapid Spanning Tree Protocol is as specified in IEEE 802.1w, and the value 'mstp(3)' indicates that the Multiple Spanning Tree Protocol is as specified in IEEE 802.1s. New values may be defined in the future as new or updated versions of the protocol become available.")
tftpFile = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 6, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFile.setStatus('current')
if mibBuilder.loadTexts: tftpFile.setDescription('The file name for TFTP transfer when a transfer is next requested via this MIB. This value is set to the zero length string when no file name has been specified.')
tftpFlashConfig = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpFlashConfig.setStatus('current')
if mibBuilder.loadTexts: tftpFlashConfig.setDescription('Number of flash config partition for to be used when the chosen action is the downloadToFlashConfig or the uploadFromFlashConfig. This values is set to the zero when no flash config has been specified.')
tftpServer = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 6, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpServer.setStatus('current')
if mibBuilder.loadTexts: tftpServer.setDescription("The IP address of the TFTP server for transfer when a download or upload is next requested via this MIB. This value is set to `0.0.0.0' when no IP address has been specified.")
tftpAction = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("downloadToFlashConfig", 1), ("downloadToRunningConfig", 2), ("downloadToStartupConfig", 3), ("downloadToFirmware", 4), ("uploadFromFlashConfig", 5), ("uploadFromRunningConfig", 6), ("uploadFromStartupConfig", 7), ("notDownloading", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tftpAction.setStatus('current')
if mibBuilder.loadTexts: tftpAction.setDescription('When this object is set to downloadToFlashConfig(1), the device will begin download of the file specified by tftpFile from the server specified by tftpServer to flash-config(specified by tftpFlashConfig) in the device using the TFTP protocol. When this object is set to downloadToRunningConfig(2), the device will begin download of the file specified by tftpFile from the server specified by tftpServer to running-config in the device using the TFTP protocol. When this object is set to downloadToStartupConfig(3), the device will begin download of the file specified by tftpFile from the server specified by tftpServer to Startup-config in the device using the TFTP protocol. When this object is set to downloadToFirmware(4), the device will begin download of the file specified by tftpFile from the server specified by tftpServer to firmware in the device using the TFTP protocol. When this object is set to uploadFromFlashConfig(5), the device will begin upload of the flash-config(specified by tftpFlashConfig) in the device to tftpFile in the server specified by tftpServer. When this object is set to uploadFromRunningConfig(6), the device will begin upload of the running-config in the device to tftpFile in the server specified by tftpServer. When this object is set to uploadFromStartupConfig(7), the device will begin upload of the startup-config in the device to tftpFile in the server specified by tftpServer. When the device is not downloading, this object will have a value of notDownloading(8).')
restartFirmware = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartFirmware.setStatus('current')
if mibBuilder.loadTexts: restartFirmware.setDescription('Number of firmware flash index for start-up.')
restartConfig = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartConfig.setStatus('current')
if mibBuilder.loadTexts: restartConfig.setDescription('Number of configuration flash index for start-up.')
restartControl = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 7, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("running", 1), ("warmBoot", 2), ("coldBoot", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: restartControl.setStatus('current')
if mibBuilder.loadTexts: restartControl.setDescription('Setting this object to warmBoot(2) causes the device to restart the application software with current configuration parameters saved in non-volatile memory. Setting this object to coldBoot(3) causes the device to reinitialize configuration parameters in non-volatile memory to default values and restart the application software. When the device is running normally, this variable has a value of running(1).')
mirrorDestinationPort = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mirrorDestinationPort.setStatus('current')
if mibBuilder.loadTexts: mirrorDestinationPort.setDescription('Destination port for mirrored packets. This is defined as ifIndex in the IF-MIB.')
mirrorTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 8, 2), )
if mibBuilder.loadTexts: mirrorTable.setStatus('current')
if mibBuilder.loadTexts: mirrorTable.setDescription('Table of descriptive and status information about switches in this system.')
mirrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 8, 2, 1), ).setIndexNames((0, "DMswitch-MIB", "mirrorSourcePort"))
if mibBuilder.loadTexts: mirrorEntry.setStatus('current')
if mibBuilder.loadTexts: mirrorEntry.setDescription('An entry in the table, containing information about a single switch in this system. ')
mirrorSourcePort = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 8, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: mirrorSourcePort.setStatus('current')
if mibBuilder.loadTexts: mirrorSourcePort.setDescription('Source port for mirrored packets. This is defined as ifIndex in the IF-MIB.')
mirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 8, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("rx", 1), ("tx", 2), ("all", 3), ("disable", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: mirrorType.setStatus('current')
if mibBuilder.loadTexts: mirrorType.setDescription('If this value is rx(1), receive packets will be mirrored. If this value is tx(2), transmit packets will be mirrored. If this value is all(3), all packts will be mirrored')
igmpSnoopStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopStatus.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopStatus.setDescription('Parameter to enable or disable IGMP snooping on the device. When enabled, the device will examine IGMP packets and set up filters for IGMP ports. ')
igmpSnoopQuerier = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQuerier.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQuerier.setDescription('Whether to act as querier.')
igmpSnoopQueryCount = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 10)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryCount.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryCount.setDescription('Maximum number of queries that have not been heard on the system before the system starts taking action to solicit reports.')
igmpSnoopQueryInterval = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 125)).clone(125)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryInterval.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryInterval.setDescription('Query interval.')
igmpSnoopQueryMaxResponseTime = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 25)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryMaxResponseTime.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryMaxResponseTime.setDescription('Timeout value (seconds) between IGMP reports received on a port for an IP Multicast Address that can pass before the system sends an IGMP Query out the port and removes it from the list.')
igmpSnoopQueryTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 500)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopQueryTimeout.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopQueryTimeout.setDescription('Query time-out.')
igmpSnoopVersion = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopVersion.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVersion.setDescription('Version.')
igmpSnoopRouterCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 8), )
if mibBuilder.loadTexts: igmpSnoopRouterCurrentTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentTable.setDescription('Table for current router ports.')
igmpSnoopRouterCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 8, 1), ).setIndexNames((0, "DMswitch-MIB", "igmpSnoopRouterCurrentVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentEntry.setDescription('Entry for current router ports.')
igmpSnoopRouterCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterCurrentVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentVlanIndex.setDescription('This is defined as dot1qVlanIndex in the Q-BRIDGE-MIB.')
igmpSnoopRouterCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 8, 1, 2), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopRouterCurrentPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterCurrentPorts.setDescription('The set of ports which are current router ports. Within this list, some router ports are static router ports. Please refer to igmpSnoopRouterStaticTable.')
igmpSnoopRouterStaticTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 9), )
if mibBuilder.loadTexts: igmpSnoopRouterStaticTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticTable.setDescription('Table for static router ports.')
igmpSnoopRouterStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 9, 1), ).setIndexNames((0, "DMswitch-MIB", "igmpSnoopRouterStaticVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopRouterStaticEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticEntry.setDescription('Entry for static router ports.')
igmpSnoopRouterStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopRouterStaticVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticVlanIndex.setDescription('This is defined as dot1qVlanIndex in the Q-BRIDGE-MIB.')
igmpSnoopRouterStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 9, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopRouterStaticPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopRouterStaticPorts.setDescription('The set of ports which are static router ports.')
igmpSnoopMulticastCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 10), )
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentTable.setDescription('Table for current multicast addresses.')
igmpSnoopMulticastCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 10, 1), ).setIndexNames((0, "DMswitch-MIB", "igmpSnoopMulticastCurrentVlanIndex"), (0, "DMswitch-MIB", "igmpSnoopMulticastCurrentIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentEntry.setDescription('Entry for current multicast addresses.')
igmpSnoopMulticastCurrentVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentVlanIndex.setDescription('This is defined as dot1qVlanIndex in the Q-BRIDGE-MIB.')
igmpSnoopMulticastCurrentIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 10, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentIpAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentIpAddress.setDescription('IP address of multicast group.')
igmpSnoopMulticastCurrentPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 10, 1, 3), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastCurrentPorts.setDescription('The set of ports which are members.')
igmpSnoopMulticastStaticTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 11), )
if mibBuilder.loadTexts: igmpSnoopMulticastStaticTable.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticTable.setDescription('Table for static multicast addresses.')
igmpSnoopMulticastStaticEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 11, 1), ).setIndexNames((0, "DMswitch-MIB", "igmpSnoopMulticastStaticVlanIndex"), (0, "DMswitch-MIB", "igmpSnoopMulticastStaticIpAddress"))
if mibBuilder.loadTexts: igmpSnoopMulticastStaticEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticEntry.setDescription('Entry for static multicast addresses.')
igmpSnoopMulticastStaticVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticVlanIndex.setDescription('This is defined as dot1qVlanIndex in the Q-BRIDGE-MIB.')
igmpSnoopMulticastStaticIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 11, 1, 2), IpAddress())
if mibBuilder.loadTexts: igmpSnoopMulticastStaticIpAddress.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticIpAddress.setDescription('IP address of multicast group.')
igmpSnoopMulticastStaticPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 9, 11, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpSnoopMulticastStaticPorts.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopMulticastStaticPorts.setDescription('The set of ports which are static members.')
ipAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("static", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipAddressMode.setStatus('current')
if mibBuilder.loadTexts: ipAddressMode.setDescription('')
ipDefaultGateway = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipDefaultGateway.setStatus('current')
if mibBuilder.loadTexts: ipDefaultGateway.setDescription('The IP Address of the default gateway. If this value is undefined or unknown, it shall have the value 0.0.0.0.')
ipPrimaryDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipPrimaryDnsServer.setStatus('current')
if mibBuilder.loadTexts: ipPrimaryDnsServer.setDescription('The IP Address of the primary DNS server. If this value is undefined or unknown, it shall have the value 0.0.0.0.')
ipSecondaryDnsServer = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipSecondaryDnsServer.setStatus('current')
if mibBuilder.loadTexts: ipSecondaryDnsServer.setDescription('The IP Address of the secondary DNS server. If this value is undefined or unknown, it shall have the value 0.0.0.0.')
ipHttpState = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpState.setStatus('current')
if mibBuilder.loadTexts: ipHttpState.setDescription('Whether HTTP is enabled.')
ipHttpPort = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpPort.setStatus('current')
if mibBuilder.loadTexts: ipHttpPort.setDescription('The port number for HTTP.')
ipHttpsState = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsState.setStatus('current')
if mibBuilder.loadTexts: ipHttpsState.setDescription('Whether HTTPS is enabled.')
ipHttpsPort = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipHttpsPort.setStatus('current')
if mibBuilder.loadTexts: ipHttpsPort.setDescription('The port number for HTTPS.')
ipTelnetState = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 10, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipTelnetState.setStatus('current')
if mibBuilder.loadTexts: ipTelnetState.setDescription('Whether telnet is enabled.')
bcastStormTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 11, 1), )
if mibBuilder.loadTexts: bcastStormTable.setStatus('current')
if mibBuilder.loadTexts: bcastStormTable.setDescription('Table of descriptive and status information about configuration of each switch ports(including expansion slot) in this system.')
bcastStormEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 11, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "bcastStormIfIndex"))
if mibBuilder.loadTexts: bcastStormEntry.setStatus('current')
if mibBuilder.loadTexts: bcastStormEntry.setDescription('An entry in the table, containing information about configuration in one switch port of the switch.')
bcastStormIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 11, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: bcastStormIfIndex.setStatus('current')
if mibBuilder.loadTexts: bcastStormIfIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
bcastStormStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormStatus.setStatus('current')
if mibBuilder.loadTexts: bcastStormStatus.setDescription('Whether broadcast storm protection is enabled.')
bcastStormPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 11, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcastStormPacketRate.setStatus('current')
if mibBuilder.loadTexts: bcastStormPacketRate.setDescription('Broadcast storm threshold as packets per second.')
vlanTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 12, 1), )
if mibBuilder.loadTexts: vlanTable.setStatus('current')
if mibBuilder.loadTexts: vlanTable.setDescription('Table for VLAN configuration.')
vlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 12, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "vlanIndex"))
if mibBuilder.loadTexts: vlanEntry.setStatus('current')
if mibBuilder.loadTexts: vlanEntry.setDescription('Entry for VLAN configuration.')
vlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 12, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: vlanIndex.setStatus('current')
if mibBuilder.loadTexts: vlanIndex.setDescription('Same is dot1qVlanIndex in the Q-BRIDGE-MIB. This table has only one entry - the entry for the VLAN of the management interface.')
vlanAddressMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("user", 1), ("dhcp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanAddressMethod.setStatus('current')
if mibBuilder.loadTexts: vlanAddressMethod.setDescription('Method to get the IP address.')
prioWrrTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 13, 1), )
if mibBuilder.loadTexts: prioWrrTable.setStatus('current')
if mibBuilder.loadTexts: prioWrrTable.setDescription('Table for weighted round robin (WRR).')
prioWrrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 13, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "prioWrrTrafficClass"))
if mibBuilder.loadTexts: prioWrrEntry.setStatus('current')
if mibBuilder.loadTexts: prioWrrEntry.setDescription('Entry for weighted round robin (WRR).')
prioWrrTrafficClass = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: prioWrrTrafficClass.setStatus('current')
if mibBuilder.loadTexts: prioWrrTrafficClass.setDescription('Traffic class for this entry, as defined in dot1dTrafficClass in the Q-BRIDGE-MIB. The actual maximum depends on the hardware, and is equal to dot1dPortNumTrafficClasses-1.')
prioWrrWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioWrrWeight.setStatus('current')
if mibBuilder.loadTexts: prioWrrWeight.setDescription('Weight for this entry.')
prioQueueMode = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 13, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("wrr", 1), ("strict", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prioQueueMode.setStatus('current')
if mibBuilder.loadTexts: prioQueueMode.setDescription('The global status for the prioQueue. wrr(1),strict(2)')
trapDestTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 1), )
if mibBuilder.loadTexts: trapDestTable.setStatus('current')
if mibBuilder.loadTexts: trapDestTable.setDescription('A list of trap destination entries.')
trapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "trapDestAddress"))
if mibBuilder.loadTexts: trapDestEntry.setStatus('current')
if mibBuilder.loadTexts: trapDestEntry.setDescription('This entry includes a destination IP address to which to send traps for this community.')
trapDestAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: trapDestAddress.setStatus('current')
if mibBuilder.loadTexts: trapDestAddress.setDescription('The address to send traps.')
trapDestCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestCommunity.setStatus('current')
if mibBuilder.loadTexts: trapDestCommunity.setDescription('A community to which this destination address belongs.')
trapDestStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("valid", 1), ("invalid", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestStatus.setStatus('current')
if mibBuilder.loadTexts: trapDestStatus.setDescription('Writing this to valid(1) creates an entry. Writing this to invalid(2) destroys an entry.')
trapDestVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trapDestVersion.setStatus('current')
if mibBuilder.loadTexts: trapDestVersion.setDescription('This variables represent the version of the Trap we wish to send to trap Receiver, if the value is 1, mean we wish to send Version 1 trap, if the value is 2, mean we wish to send version 2 trap.')
trapVar = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2))
trapForbiddenAccessMode = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("web", 1), ("snmp", 2), ("telnet", 3), ("ssh", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapForbiddenAccessMode.setStatus('current')
if mibBuilder.loadTexts: trapForbiddenAccessMode.setDescription('This variable is for trap var binding, indicated the ipfilter reject mode. web(1), snmp(2), telnet(3), ssh(4).')
trapForbiddenAccessIp = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 2), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapForbiddenAccessIp.setStatus('current')
if mibBuilder.loadTexts: trapForbiddenAccessIp.setDescription('This variable is for trap var binding, indicating the IP address that rejected by the ipfilter.')
trapLoginUserName = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapLoginUserName.setStatus('current')
if mibBuilder.loadTexts: trapLoginUserName.setDescription('This variable is for trap var binding, indicating the name used by user to logging.')
trapConfigSavePartition = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 4), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapConfigSavePartition.setStatus('current')
if mibBuilder.loadTexts: trapConfigSavePartition.setDescription('This variable is for trap var binding, indicating the partition witch the config was saved.')
trapSfpPresenceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absentee", 1), ("present", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSfpPresenceStatus.setStatus('current')
if mibBuilder.loadTexts: trapSfpPresenceStatus.setDescription('This variable is for trap var binding, indicating the presence status of a sfp connector.')
trapInfAlarmVal = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("deactivated", 1), ("activated", 2), ("unstable", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapInfAlarmVal.setStatus('current')
if mibBuilder.loadTexts: trapInfAlarmVal.setDescription('This variable is for trap var binding, indicating the alarm value. deactivated(1), actived(2), unstable(3).')
trapDuplicatedIpVlan = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDuplicatedIpVlan.setStatus('current')
if mibBuilder.loadTexts: trapDuplicatedIpVlan.setDescription('This variable is for trap var binding, indicating the vlan witch the duplicated ip was detected.')
trapDuplicatedIpAddress = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 8), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDuplicatedIpAddress.setStatus('current')
if mibBuilder.loadTexts: trapDuplicatedIpAddress.setDescription('This variable is for trap var binding, indicating the duplicated ip address.')
trapDuplicatedIpMacAddress = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 9), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDuplicatedIpMacAddress.setStatus('current')
if mibBuilder.loadTexts: trapDuplicatedIpMacAddress.setDescription('This variable is for trap var binding, indicating the mac address of the device that has the duplicated ip.')
trapEapsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 10), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapEapsDomainName.setStatus('current')
if mibBuilder.loadTexts: trapEapsDomainName.setDescription('This variable is for trap var binding, indicating the eaps domain name.')
trapEapsDomainId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 11), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapEapsDomainId.setStatus('current')
if mibBuilder.loadTexts: trapEapsDomainId.setDescription('This variable is for trap var binding, indicating the eaps domain identifier.')
trapEapsStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("idle", 0), ("complete", 1), ("failed", 2), ("links-up", 3), ("links-down", 4), ("pre-forwarding", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapEapsStatus.setStatus('current')
if mibBuilder.loadTexts: trapEapsStatus.setDescription('This variable is for trap var binding, indicating the eaps status. idle(0), complete(1), failed(2), links-up(3), links-down(4), pre-forwarding(5).')
trapTemperature = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 13), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapTemperature.setStatus('current')
if mibBuilder.loadTexts: trapTemperature.setDescription('This variable is for trap var binding, indicating the temperature in degrees Celsius.')
trapFuseId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 14), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapFuseId.setStatus('current')
if mibBuilder.loadTexts: trapFuseId.setDescription('This variable is for trap var binding, indicating the fuse indentifier.')
trapFuseStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("failed", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapFuseStatus.setStatus('current')
if mibBuilder.loadTexts: trapFuseStatus.setDescription('This variable is for trap var binding, indicating the fuse status. normal(1), failed(2).')
trapFansBoardPresenceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absentee", 1), ("present", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapFansBoardPresenceStatus.setStatus('current')
if mibBuilder.loadTexts: trapFansBoardPresenceStatus.setDescription('This variable is for trap var binding, indicating the presence status of the fans board.')
trapStandbyMpuPresenceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("absentee", 1), ("present", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapStandbyMpuPresenceStatus.setStatus('current')
if mibBuilder.loadTexts: trapStandbyMpuPresenceStatus.setDescription('This variable is for trap var binding, indicating the presence status of the standby MPU.')
trapMacAddressMove = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 18), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapMacAddressMove.setStatus('current')
if mibBuilder.loadTexts: trapMacAddressMove.setDescription('This variable is for trap var binding, indicating the MAC address of the device that has moved.')
trapMemFree = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 19), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapMemFree.setStatus('current')
if mibBuilder.loadTexts: trapMemFree.setDescription('This variable is for trap var binding, indicating the total memory free(in Kbytes).')
trapBootloaderNew = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 20), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapBootloaderNew.setStatus('current')
if mibBuilder.loadTexts: trapBootloaderNew.setDescription('This variable is for trap var binding, indicating the installed bootloader version.')
trapDevNo = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 21), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDevNo.setStatus('current')
if mibBuilder.loadTexts: trapDevNo.setDescription('This variable is for trap var binding, indicating the Dev no of equipment.')
trapDevLocalId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 22), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapDevLocalId.setStatus('current')
if mibBuilder.loadTexts: trapDevLocalId.setDescription('This variable is for trap var binding, indicating the Serial number of remote equipment.')
trapCesopTdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("ok", 0), ("los", 1), ("ais", 2), ("lof", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopTdmStatus.setStatus('current')
if mibBuilder.loadTexts: trapCesopTdmStatus.setDescription('This variable is for trap var binding, indicating the status of TDM interface.')
trapCesopTdmRemoteStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 5))).clone(namedValues=NamedValues(("ok", 0), ("ralm", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopTdmRemoteStatus.setStatus('current')
if mibBuilder.loadTexts: trapCesopTdmRemoteStatus.setDescription('This variable is for trap var binding, indicating the status of remote TDM interface.')
trapCesopTdmCasStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4))).clone(namedValues=NamedValues(("ok", 0), ("lom", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopTdmCasStatus.setStatus('current')
if mibBuilder.loadTexts: trapCesopTdmCasStatus.setDescription('This variable is for trap var binding, indicating the status of CAS TDM interface.')
trapCesopTdmCrcStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 6))).clone(namedValues=NamedValues(("ok", 0), ("crc", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopTdmCrcStatus.setStatus('current')
if mibBuilder.loadTexts: trapCesopTdmCrcStatus.setDescription('This variable is for trap var binding, indicating the status of CRC TDM interface.')
trapCesopBundleLocalTdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1), ("rdi", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopBundleLocalTdmStatus.setStatus('current')
if mibBuilder.loadTexts: trapCesopBundleLocalTdmStatus.setDescription('This variable is for trap var binding, indicating the status of Local TDM in bundle interface.')
trapCesopBundleRemoteTdmStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1), ("rdi", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopBundleRemoteTdmStatus.setStatus('current')
if mibBuilder.loadTexts: trapCesopBundleRemoteTdmStatus.setDescription('This variable is for trap var binding, indicating the status of Remote TDM in bundle interface.')
trapCesopBundleLocalStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopBundleLocalStatus.setStatus('current')
if mibBuilder.loadTexts: trapCesopBundleLocalStatus.setDescription('This variable is for trap var binding, indicating the status of Local bundle interface.')
trapCesopBundleRemoteStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("fail", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopBundleRemoteStatus.setStatus('current')
if mibBuilder.loadTexts: trapCesopBundleRemoteStatus.setDescription('This variable is for trap var binding, indicating the status of Remote bundle interface.')
trapCesopBundlePktMismatchStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3))).clone(namedValues=NamedValues(("ok", 0), ("mismatch", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopBundlePktMismatchStatus.setStatus('current')
if mibBuilder.loadTexts: trapCesopBundlePktMismatchStatus.setDescription('This variable is for trap var binding, indicating the status of packet mismatch in bundle interface.')
trapCesopBundleNextHopStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 4))).clone(namedValues=NamedValues(("up", 0), ("down", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopBundleNextHopStatus.setStatus('current')
if mibBuilder.loadTexts: trapCesopBundleNextHopStatus.setDescription('This variable is for trap var binding, indicating the status of Next Hop in bundle interface.')
trapCesopClockAdapLinkQuality = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 33), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopClockAdapLinkQuality.setStatus('current')
if mibBuilder.loadTexts: trapCesopClockAdapLinkQuality.setDescription('This variable is for trap var binding, indicating the Adaptative link quality of clock interface.')
trapCesopClockSourceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ok", 0), ("out-of-limits", 1)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopClockSourceStatus.setStatus('current')
if mibBuilder.loadTexts: trapCesopClockSourceStatus.setDescription('This variable is for trap var binding, indicating the status of Clock Source interface.')
trapBroadcastStormControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("out-of-limits", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapBroadcastStormControlStatus.setStatus('current')
if mibBuilder.loadTexts: trapBroadcastStormControlStatus.setDescription('This variable is for trap var binding, indicating the status of broadcsat storm control at this interface.')
trapBroadcastStormControlPPS = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 36), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapBroadcastStormControlPPS.setStatus('current')
if mibBuilder.loadTexts: trapBroadcastStormControlPPS.setDescription('This variable is for trap var binding, indicating the current average count of broadcast packets per second at this interface.')
trapMulticastStormControlStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("out-of-limits", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapMulticastStormControlStatus.setStatus('current')
if mibBuilder.loadTexts: trapMulticastStormControlStatus.setDescription('This variable is for trap var binding, indicating the status of multicsat storm control at this interface.')
trapMulticastStormControlPPS = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 38), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapMulticastStormControlPPS.setStatus('current')
if mibBuilder.loadTexts: trapMulticastStormControlPPS.setDescription('This variable is for trap var binding, indicating the current average count of multicast packets per second at this interface.')
trapStatusLDP = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("delete", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapStatusLDP.setStatus('current')
if mibBuilder.loadTexts: trapStatusLDP.setDescription('This variable is for trap var binding, indicating the status of condition the protocol LDP.')
trapIdLDP = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 40), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapIdLDP.setStatus('current')
if mibBuilder.loadTexts: trapIdLDP.setDescription('This variable is for trap var binding, indicating the entity identification the protocol LDP.')
trapStatusTunnelRSVP = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("deleted", 3), ("rerouted", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapStatusTunnelRSVP.setStatus('current')
if mibBuilder.loadTexts: trapStatusTunnelRSVP.setDescription('This variable is for trap var binding, indicating the status of condition tunnel on protocol RSVP.')
trapIdTunnelRSVP = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 42), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapIdTunnelRSVP.setStatus('current')
if mibBuilder.loadTexts: trapIdTunnelRSVP.setDescription('This variable is for trap var binding, indicating the entity identification the tunnel on protocol RSVP.')
trapPanelStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("closed", 1), ("open", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapPanelStatus.setStatus('current')
if mibBuilder.loadTexts: trapPanelStatus.setDescription('This variable is for trap var binding, indicating the panel status. closed(1), open(2)')
trapLSTGroup = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 44), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapLSTGroup.setStatus('current')
if mibBuilder.loadTexts: trapLSTGroup.setDescription('This variable is for trap var binding, indicating the Link-state Tracking Group.')
trapMemL3Free = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 45), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapMemL3Free.setStatus('current')
if mibBuilder.loadTexts: trapMemL3Free.setDescription('This variable is for trap var binding, indicating the total L3 memory free(in Kbytes).')
trapActiveMpuNsfId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 46), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapActiveMpuNsfId.setStatus('current')
if mibBuilder.loadTexts: trapActiveMpuNsfId.setDescription('This variable is for trap var binding, indicating the active mpu nsf-id.')
trapStandByMpuNsfId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 47), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapStandByMpuNsfId.setStatus('current')
if mibBuilder.loadTexts: trapStandByMpuNsfId.setDescription('This variable is for trap var binding, indicating the standby mpu nsf-id.')
trapErpsDomainName = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 48), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapErpsDomainName.setStatus('current')
if mibBuilder.loadTexts: trapErpsDomainName.setDescription('This variable is for trap var binding, indicating the erps domain name.')
trapErpsDomainId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 49), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapErpsDomainId.setStatus('current')
if mibBuilder.loadTexts: trapErpsDomainId.setDescription('This variable is for trap var binding, indicating the erps domain identifier.')
trapErpsStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("idle", 2), ("protection", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapErpsStatus.setStatus('current')
if mibBuilder.loadTexts: trapErpsStatus.setDescription('This variable is for trap var binding, indicating the erps status. init(1), idle(2), protection(3).')
trapCfmMdName = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 42))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCfmMdName.setStatus('current')
if mibBuilder.loadTexts: trapCfmMdName.setDescription('This variable is for trap var binding, indicating the Maintenance Domain (MD) name that originated the trap.')
trapCfmMaName = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 44))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCfmMaName.setStatus('current')
if mibBuilder.loadTexts: trapCfmMaName.setDescription('This variable is for trap var binding, indicating the Maintenance Association (MA) name that originated the trap.')
trapCfmMepId = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8192))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCfmMepId.setStatus('current')
if mibBuilder.loadTexts: trapCfmMepId.setDescription('This variable is for trap var binding, indicating the Maintenance End Point ID (MEPID) that originated the trap.')
trapCfmVlan = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 54), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCfmVlan.setStatus('current')
if mibBuilder.loadTexts: trapCfmVlan.setDescription('This variable is for trap var binding, indicating the VLAN that originated the trap.')
trapCfmDefect = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("defNone", 0), ("defRDICCM", 1), ("defMACstatus", 2), ("defRemoteCCM", 3), ("defErrorCCM", 4), ("defXconCCM", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCfmDefect.setStatus('current')
if mibBuilder.loadTexts: trapCfmDefect.setDescription('This variable is for trap var binding, indicating the defect condition being notified . defNone(0), defRDICCM(1), defMACstatus(2), defRemoteCCM(3), defErrorCCM(4), defXconCCM(5).')
trapEvcName = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 56), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapEvcName.setStatus('current')
if mibBuilder.loadTexts: trapEvcName.setDescription('This variable is for trap var binding, indicating the EVC name.')
trapEvcStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notActive", 0), ("newAndNotActive", 1), ("active", 2), ("newAndActive", 3), ("partiallyActive", 4), ("newAndPartiallyActive", 5)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapEvcStatus.setStatus('current')
if mibBuilder.loadTexts: trapEvcStatus.setDescription('This variable is for trap var binding, indicating the status of EVC being notified, notActive(0), newAndNotActive(1), active(2), newAndActive(3), partiallyActive(4), newAndPartiallyActive(5).')
trapSyncSystemClockStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("freerun", 1), ("holdover", 2), ("acquiring", 3), ("locked", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSyncSystemClockStatus.setStatus('current')
if mibBuilder.loadTexts: trapSyncSystemClockStatus.setDescription('This variable is for trap var binding, indicating the status of system clock')
trapCesopG704ClockSourceStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(7, 9, 10))).clone(namedValues=NamedValues(("dontcare", 7), ("locked", 9), ("fail", 10)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapCesopG704ClockSourceStatus.setStatus('current')
if mibBuilder.loadTexts: trapCesopG704ClockSourceStatus.setDescription('This variable is for trap var binding, indicating the status of g704 clock source.')
trapSystemWarningsUnits = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("sysWarUnitsHsEnNoError", 1), ("sysWarUnitsHsEnWES", 2), ("sysWarUnitsHsEnWHSDis", 3), ("sysWarUnitsHsEnWDifMod", 4), ("sysWarUnitsCommFail", 5), ("sysWarUnitsMPLS", 6), ("sysWarUnitsL3", 7)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSystemWarningsUnits.setStatus('current')
if mibBuilder.loadTexts: trapSystemWarningsUnits.setDescription('This variable is for trap var binding, indicating the system warnings units.')
trapSensorGroup = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 14, 2, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("boardSensors", 1), ("chipsetSensors", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: trapSensorGroup.setStatus('current')
if mibBuilder.loadTexts: trapSensorGroup.setDescription("This variable indicates the sensor's type informed in notification.")
rateLimitPortTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1), )
if mibBuilder.loadTexts: rateLimitPortTable.setStatus('current')
if mibBuilder.loadTexts: rateLimitPortTable.setDescription('Table for rate limit of each port.')
rateLimitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "rlPortIndex"))
if mibBuilder.loadTexts: rateLimitPortEntry.setStatus('current')
if mibBuilder.loadTexts: rateLimitPortEntry.setDescription('Entry for rate limit of each port.')
rlPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: rlPortIndex.setStatus('current')
if mibBuilder.loadTexts: rlPortIndex.setDescription('The port and the trunk (including trunk member) interface of the portTable. The interface identified by a particular value of this index is the same interface as identified by the same value of ifIndex in the IF-MIB.')
rlPortInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputStatus.setStatus('current')
if mibBuilder.loadTexts: rlPortInputStatus.setDescription('Whether input rate limit is enabled for this port.')
rlPortOutputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputStatus.setStatus('current')
if mibBuilder.loadTexts: rlPortOutputStatus.setDescription('Whether output rate limit is enabled for this port.')
rlPortInputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputRate.setStatus('current')
if mibBuilder.loadTexts: rlPortInputRate.setDescription('Rate-limit in kilobits per second. Must be multiple of 64.')
rlPortInputBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortInputBurst.setStatus('current')
if mibBuilder.loadTexts: rlPortInputBurst.setDescription('Maximum burst size in kilobits. Must be power of 2.')
rlPortOutputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(64, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputRate.setStatus('current')
if mibBuilder.loadTexts: rlPortOutputRate.setDescription('Rate-limit in kilobits per second. Must be multiple of 64.')
rlPortOutputBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 16, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(32, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rlPortOutputBurst.setStatus('current')
if mibBuilder.loadTexts: rlPortOutputBurst.setDescription('Maximum burst size in kilobits. Must be power of 2.')
radiusMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1))
sshMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2))
ipFilterMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3))
radiusServerPortNumber = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: radiusServerPortNumber.setDescription('IP port number of RADIUS server.')
radiusServerKey = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerKey.setStatus('current')
if mibBuilder.loadTexts: radiusServerKey.setDescription("Key for RADIUS. This variable can only be written. When this variable is read, it always returns a zero-length string. when this variable is written, it's max length is 48 characters.")
radiusServerRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerRetransmit.setStatus('current')
if mibBuilder.loadTexts: radiusServerRetransmit.setDescription('Maximum number of retransmissions for RADIUS.')
radiusServerTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusServerTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusServerTimeout.setDescription('Timeout for RADIUS.')
radiusMultipleServerTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7), )
if mibBuilder.loadTexts: radiusMultipleServerTable.setStatus('current')
if mibBuilder.loadTexts: radiusMultipleServerTable.setDescription('The table for multiple RADIUS server.')
radiusMultipleServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1), ).setIndexNames((0, "DMswitch-MIB", "radiusMultipleServerIndex"))
if mibBuilder.loadTexts: radiusMultipleServerEntry.setStatus('current')
if mibBuilder.loadTexts: radiusMultipleServerEntry.setDescription('The conceptual row for radiusMultipleServerTable.')
radiusMultipleServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: radiusMultipleServerIndex.setStatus('current')
if mibBuilder.loadTexts: radiusMultipleServerIndex.setDescription('The RADIUS multiple server index.')
radiusMultipleServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusMultipleServerAddress.setStatus('current')
if mibBuilder.loadTexts: radiusMultipleServerAddress.setDescription('IP address of a multiple RADIUS server. IP address will be set to system default value(e.g. 10.1.0.1) after creates an entry first by setting radiusMultipleServerStatus to valid. ')
radiusMultipleServerPortNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusMultipleServerPortNumber.setStatus('current')
if mibBuilder.loadTexts: radiusMultipleServerPortNumber.setDescription('IP port number of a multiple RADIUS server.')
radiusMultipleServerKey = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusMultipleServerKey.setStatus('current')
if mibBuilder.loadTexts: radiusMultipleServerKey.setDescription("Key for RADIUS. This variable can only be written. When this variable is read, it always returns a zero-length string. when this variable is written, it's max length is 48 characters.")
radiusMultipleServerRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusMultipleServerRetransmit.setStatus('current')
if mibBuilder.loadTexts: radiusMultipleServerRetransmit.setDescription('Maximum number of retransmissions for RADIUS.')
radiusMultipleServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radiusMultipleServerTimeout.setStatus('current')
if mibBuilder.loadTexts: radiusMultipleServerTimeout.setDescription('Timeout for RADIUS.')
radiusMultipleServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 1, 7, 1, 8), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: radiusMultipleServerStatus.setStatus('current')
if mibBuilder.loadTexts: radiusMultipleServerStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
sshServerStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshServerStatus.setStatus('current')
if mibBuilder.loadTexts: sshServerStatus.setDescription('The status of Secure Shell Server. Set this value to enabled(1) to enable SSH server, set this value to disabled(2) to disable the SSH server.')
sshServerMajorVersion = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMajorVersion.setStatus('current')
if mibBuilder.loadTexts: sshServerMajorVersion.setDescription('The major version of the SSH Server.')
sshServerMinorVersion = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshServerMinorVersion.setStatus('current')
if mibBuilder.loadTexts: sshServerMinorVersion.setDescription('The minor version of the SSH Server.')
sshTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshTimeout.setStatus('current')
if mibBuilder.loadTexts: sshTimeout.setDescription('The time interval that the router waits for the SSH client to respond. The range is 1-120.')
sshKeySize = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(512, 896))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshKeySize.setStatus('current')
if mibBuilder.loadTexts: sshKeySize.setDescription('The SSH server key size.')
sshRsaHostKey = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 6), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshRsaHostKey.setStatus('current')
if mibBuilder.loadTexts: sshRsaHostKey.setDescription('The RSA host key.')
sshDsaHostKey = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 7), KeySegment()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sshDsaHostKey.setStatus('current')
if mibBuilder.loadTexts: sshDsaHostKey.setDescription('The DSA host key.')
sshHostKeyGenAction = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noGen", 1), ("genRsaKey", 2), ("genDsaKey", 3), ("genBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyGenAction.setStatus('current')
if mibBuilder.loadTexts: sshHostKeyGenAction.setDescription('This variable is for host key generating. For the set behavior: Set it to genRsaKey(2) to generate the RSA host key, and to genDsaKey(3) to generate the DSA host key, if genBothKeys(4) is set, both RSA and DSA host key are generated. For the get behavior: You will get genRsaKey(2), genDsaKey(3) or genBothKeys(4) when the key gen action is in progress. otherwise, you will get noGen(1).')
sshHostKeyDelAction = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("noDel", 1), ("delRsaKey", 2), ("delDsaKey", 3), ("delBothKeys", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sshHostKeyDelAction.setStatus('current')
if mibBuilder.loadTexts: sshHostKeyDelAction.setDescription('To delete the host key. For the set behavior: Set it to delRsaKey(2) to delete the RSA host key, to delDsaKey(3) to delete the DSA host key, or to delBothKeys(4) to delete both RSA and DSA host key. For the get behavior: You will get delRsaKey(2), delDsaKey(3) or delBothKeys(4) when the delete operation is in progress. Otherwise, you will get noDel(1).')
ipFilterSnmpTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 1), )
if mibBuilder.loadTexts: ipFilterSnmpTable.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpTable.setDescription('A list of IP address entries.')
ipFilterSnmpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "ipFilterSnmpAddress"), (0, "DMswitch-MIB", "ipFilterSnmpMask"))
if mibBuilder.loadTexts: ipFilterSnmpEntry.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpEntry.setDescription('This entry includes an IP address range which the system will allow to connect to this device through SNMP.')
ipFilterSnmpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 1, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterSnmpAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpAddress.setDescription('The start IP address.')
ipFilterSnmpMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 1, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipFilterSnmpMask.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpMask.setDescription('The IP mask.')
ipFilterSnmpStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 1, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSnmpStatus.setStatus('current')
if mibBuilder.loadTexts: ipFilterSnmpStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
ipFilterHTTPTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 2), )
if mibBuilder.loadTexts: ipFilterHTTPTable.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPTable.setDescription('A list of IP address entries.')
ipFilterHTTPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 2, 1), ).setIndexNames((0, "DMswitch-MIB", "ipFilterHTTPAddress"), (0, "DMswitch-MIB", "ipFilterHTTPMask"))
if mibBuilder.loadTexts: ipFilterHTTPEntry.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPEntry.setDescription('This entry includes an IP address range which the system will allow to connect to this device through SNMP.')
ipFilterHTTPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 2, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterHTTPAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPAddress.setDescription('The start IP address.')
ipFilterHTTPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 2, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipFilterHTTPMask.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPMask.setDescription('The IP mask.')
ipFilterHTTPStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 2, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterHTTPStatus.setStatus('current')
if mibBuilder.loadTexts: ipFilterHTTPStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
ipFilterTelnetTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 3), )
if mibBuilder.loadTexts: ipFilterTelnetTable.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetTable.setDescription('A list of IP address entries.')
ipFilterTelnetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 3, 1), ).setIndexNames((0, "DMswitch-MIB", "ipFilterTelnetAddress"), (0, "DMswitch-MIB", "ipFilterTelnetMask"))
if mibBuilder.loadTexts: ipFilterTelnetEntry.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetEntry.setDescription('This entry includes an IP address range which the system will allow them to connect to this device through SNMP.')
ipFilterTelnetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 3, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterTelnetAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetAddress.setDescription('The start IP address.')
ipFilterTelnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 3, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipFilterTelnetMask.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetMask.setDescription('The IP mask.')
ipFilterTelnetStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 3, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterTelnetStatus.setStatus('current')
if mibBuilder.loadTexts: ipFilterTelnetStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
ipFilterSSHTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 4), )
if mibBuilder.loadTexts: ipFilterSSHTable.setStatus('current')
if mibBuilder.loadTexts: ipFilterSSHTable.setDescription('A list of IP address entries.')
ipFilterSSHEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 4, 1), ).setIndexNames((0, "DMswitch-MIB", "ipFilterSSHAddress"), (0, "DMswitch-MIB", "ipFilterSSHMask"))
if mibBuilder.loadTexts: ipFilterSSHEntry.setStatus('current')
if mibBuilder.loadTexts: ipFilterSSHEntry.setDescription('This entry includes an IP address range which the system will allow them to connect to this device through SNMP.')
ipFilterSSHAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: ipFilterSSHAddress.setStatus('current')
if mibBuilder.loadTexts: ipFilterSSHAddress.setDescription('The start IP address.')
ipFilterSSHMask = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: ipFilterSSHMask.setStatus('current')
if mibBuilder.loadTexts: ipFilterSSHMask.setDescription('The IP mask.')
ipFilterSSHStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 17, 3, 4, 1, 3), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipFilterSSHStatus.setStatus('current')
if mibBuilder.loadTexts: ipFilterSSHStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
sysLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogStatus.setStatus('current')
if mibBuilder.loadTexts: sysLogStatus.setDescription('Whether system log is enabled.')
sysLogHistoryFlashLevel = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryFlashLevel.setStatus('current')
if mibBuilder.loadTexts: sysLogHistoryFlashLevel.setDescription('Severity level for logging to flash.')
sysLogHistoryRamLevel = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysLogHistoryRamLevel.setStatus('current')
if mibBuilder.loadTexts: sysLogHistoryRamLevel.setDescription('Severity level for logging to RAM.')
remoteLogMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6))
remoteLogStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogStatus.setStatus('current')
if mibBuilder.loadTexts: remoteLogStatus.setDescription('Whether the remote log system is enabled.')
remoteLogLevel = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogLevel.setStatus('current')
if mibBuilder.loadTexts: remoteLogLevel.setDescription('Severity level for remote log.')
remoteLogFacilityType = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 18, 19, 20, 21, 22, 23))).clone(namedValues=NamedValues(("localUse0", 16), ("localUse1", 17), ("localUse2", 18), ("localUse3", 19), ("localUse4", 20), ("localUse5", 21), ("localUse6", 22), ("localUse7", 23)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: remoteLogFacilityType.setStatus('current')
if mibBuilder.loadTexts: remoteLogFacilityType.setDescription(' The FacilityType for remote log.')
remoteLogServerTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6, 4), )
if mibBuilder.loadTexts: remoteLogServerTable.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerTable.setDescription('A Table for storing the remote log Server list.')
remoteLogServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6, 4, 1), ).setIndexNames((0, "DMswitch-MIB", "remoteLogServerIp"))
if mibBuilder.loadTexts: remoteLogServerEntry.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerEntry.setDescription('A conceptually row for remoteLogServerTable.')
remoteLogServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6, 4, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLogServerIp.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerIp.setDescription('The IP address of the remote log Server.')
remoteLogServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 19, 6, 4, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: remoteLogServerStatus.setStatus('current')
if mibBuilder.loadTexts: remoteLogServerStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
sntpMgt = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 1))
sntpStatus = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpStatus.setStatus('current')
if mibBuilder.loadTexts: sntpStatus.setDescription('Set enabled(1) to enable the SNTP, set disabled(2) to disable the SNTP.')
sntpPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 16384))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sntpPollInterval.setStatus('current')
if mibBuilder.loadTexts: sntpPollInterval.setDescription('Polling interval.')
sntpServerTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 1, 3), )
if mibBuilder.loadTexts: sntpServerTable.setStatus('current')
if mibBuilder.loadTexts: sntpServerTable.setDescription('Table for SNTP servers')
sntpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 1, 3, 1), ).setIndexNames((0, "DMswitch-MIB", "sntpServerIp"))
if mibBuilder.loadTexts: sntpServerEntry.setStatus('current')
if mibBuilder.loadTexts: sntpServerEntry.setDescription('Entry for SNTP servers.')
sntpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 1, 3, 1, 1), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerIp.setStatus('current')
if mibBuilder.loadTexts: sntpServerIp.setDescription('The IP address of a server.')
sntpServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 1, 3, 1, 2), ValidStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: sntpServerStatus.setStatus('current')
if mibBuilder.loadTexts: sntpServerStatus.setDescription('Setting this to valid(1) creates an entry. Setting this to invalid(2) destroys an entry.')
sysCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysCurrentTime.setStatus('current')
if mibBuilder.loadTexts: sysCurrentTime.setDescription("It is a text string in the following form, based on Unix: 'Mmm _d hh:mm:ss yyyy'. 'Mmm' is the first three letters of the English name of the month. '_d' is the day of month. A single-digit day is preceded by the space. 'hh:mm:ss' is a 24-hour representations of hours, minutes, and seconds. A single-digit hour is preceded by a zero. 'yyyy' is the four-digit year. An example is: 'Jan 1 02:03:04 2002'.")
sysTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZone.setStatus('current')
if mibBuilder.loadTexts: sysTimeZone.setDescription("It is a text string in the following form: '[s]hh:mm'. '[s]' is a plus-or-minus sign. For UTC, this is omitted. For a positive offset, this is '+'. For a negative offset, this is '-'. 'hh:mm' in the hour and minute offset from UTC. A single-digit hour is preceded by a zero.")
sysTimeZoneName = MibScalar((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 20, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysTimeZoneName.setStatus('current')
if mibBuilder.loadTexts: sysTimeZoneName.setDescription('The name of the time zone.')
fileInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1), )
if mibBuilder.loadTexts: fileInfoTable.setStatus('current')
if mibBuilder.loadTexts: fileInfoTable.setDescription('This table contain the information of the file system; we can also perform the delete, set startup file operation.')
fileInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "fileInfoUnitID"), (0, "DMswitch-MIB", "fileInfoFileIndex"))
if mibBuilder.loadTexts: fileInfoEntry.setStatus('current')
if mibBuilder.loadTexts: fileInfoEntry.setDescription('A conceptually row for fileInfoTable.')
fileInfoUnitID = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: fileInfoUnitID.setStatus('current')
if mibBuilder.loadTexts: fileInfoUnitID.setDescription('The switch unit in a stacking system, in a non-stacking system, this value is always 1.')
fileInfoFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: fileInfoFileIndex.setStatus('current')
if mibBuilder.loadTexts: fileInfoFileIndex.setDescription('')
fileInfoFlashId = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFlashId.setStatus('current')
if mibBuilder.loadTexts: fileInfoFlashId.setDescription('')
fileInfoFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileName.setStatus('current')
if mibBuilder.loadTexts: fileInfoFileName.setDescription('The file Name of the file System in the device.')
fileInfoFileType = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("firmware", 1), ("config", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileType.setStatus('current')
if mibBuilder.loadTexts: fileInfoFileType.setDescription('The file type of the file System in the device.')
fileInfoIsStartUp = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 6), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoIsStartUp.setStatus('current')
if mibBuilder.loadTexts: fileInfoIsStartUp.setDescription('This flag indicate whether this file is a startup file. Set this object to true(1) to indicate that this is a startup file. Setting this object to false(2) is a invalid operation.')
fileInfoFileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 7), Integer32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoFileSize.setStatus('current')
if mibBuilder.loadTexts: fileInfoFileSize.setDescription('The sizes (in bytes) of the file.')
fileInfoCreationTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileInfoCreationTime.setStatus('current')
if mibBuilder.loadTexts: fileInfoCreationTime.setDescription("The creation time of the file, This is a text string in the following form, based on Unix: 'Mmm _d hh:mm:ss yyyy'. 'Mmm' are the first three letters of the English name of the month. '_d' is the day of month. A single-digit day is preceded by a space. 'hh:mm:ss' is a 24-hour representations of hours, minutes, and seconds. A single-digit hour is preceded by a zero. 'yyyy' is the four-digit year. An example is: 'Jan 1 02:03:04 2002'.")
fileInfoDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 21, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noDelete", 1), ("delete", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileInfoDelete.setStatus('current')
if mibBuilder.loadTexts: fileInfoDelete.setDescription('Write this object to delete(2) to delete a file, when read, this always return noDelete(1).')
dmSwitchTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1))
dmSwitchTrapsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0))
swLoginFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40001)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapLoginUserName"))
if mibBuilder.loadTexts: swLoginFailTrap.setStatus('current')
if mibBuilder.loadTexts: swLoginFailTrap.setDescription('This trap is sent when an user try logging with a incorrect username or password.')
swLoginSucessTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40002)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapLoginUserName"))
if mibBuilder.loadTexts: swLoginSucessTrap.setStatus('current')
if mibBuilder.loadTexts: swLoginSucessTrap.setDescription('This trap is sent when an user get logging.')
swStackAttachTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40003)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "swSerialNumber"))
if mibBuilder.loadTexts: swStackAttachTrap.setStatus('current')
if mibBuilder.loadTexts: swStackAttachTrap.setDescription('This trap is sent when a device is attached in stack.')
swStackDetachTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40004)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "swSerialNumber"))
if mibBuilder.loadTexts: swStackDetachTrap.setStatus('current')
if mibBuilder.loadTexts: swStackDetachTrap.setDescription('This trap is sent when a device is detached from stack.')
swForbiddenAccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40005)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapForbiddenAccessMode"), ("DMswitch-MIB", "trapForbiddenAccessIp"))
if mibBuilder.loadTexts: swForbiddenAccessTrap.setStatus('current')
if mibBuilder.loadTexts: swForbiddenAccessTrap.setDescription('This trap is sent when an incorrect IP address is rejected by the ipfilter.')
swSfpPresenceTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40006)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapSfpPresenceStatus"))
if mibBuilder.loadTexts: swSfpPresenceTrap.setStatus('current')
if mibBuilder.loadTexts: swSfpPresenceTrap.setDescription('This trap is sent when a sfp conector is taken off or placed.')
swConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40007)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swConfigChangeTrap.setStatus('current')
if mibBuilder.loadTexts: swConfigChangeTrap.setDescription("This trap is sent when the device's config change.")
swConfigSaveTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40008)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapConfigSavePartition"))
if mibBuilder.loadTexts: swConfigSaveTrap.setStatus('current')
if mibBuilder.loadTexts: swConfigSaveTrap.setDescription("This trap is sent when the device's config is saved.")
swFanStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40009)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "swIndivFanUnitIndex"), ("DMswitch-MIB", "swIndivFanIndex"), ("DMswitch-MIB", "swIndivFanStatus"))
if mibBuilder.loadTexts: swFanStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: swFanStatusChangeTrap.setDescription('This trap is sent when the status of one fan changes.')
swTrapsLostTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40010))
if mibBuilder.loadTexts: swTrapsLostTrap.setStatus('current')
if mibBuilder.loadTexts: swTrapsLostTrap.setDescription('This trap is sent when one or more traps are discarded.')
swPowerStatusChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40011)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "swIndivPowerUnitIndex"), ("DMswitch-MIB", "swIndivPowerIndex"), ("DMswitch-MIB", "swIndivPowerStatus"))
if mibBuilder.loadTexts: swPowerStatusChangeTrap.setStatus('current')
if mibBuilder.loadTexts: swPowerStatusChangeTrap.setDescription('This trap is sent when the status of one PSU changes.')
swAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40012)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "swIndivAlarmUnitIndex"), ("DMswitch-MIB", "swIndivAlarmIndex"), ("DMswitch-MIB", "swIndivAlarmStatus"))
if mibBuilder.loadTexts: swAlarmTrap.setStatus('current')
if mibBuilder.loadTexts: swAlarmTrap.setDescription('This trap is sent when the status of one alarm changes.')
swDuplicatedIp = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40013)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapDuplicatedIpVlan"), ("DMswitch-MIB", "trapDuplicatedIpAddress"), ("DMswitch-MIB", "trapDuplicatedIpMacAddress"))
if mibBuilder.loadTexts: swDuplicatedIp.setStatus('current')
if mibBuilder.loadTexts: swDuplicatedIp.setDescription('This trap is sent when a duplicate ip is detected.')
swLoopbackOnPortDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40014)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swLoopbackOnPortDetected.setStatus('current')
if mibBuilder.loadTexts: swLoopbackOnPortDetected.setDescription('This trap is sent when a loopback on port is detected.')
swLoopbackOnPortNoMoreDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40015)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swLoopbackOnPortNoMoreDetected.setStatus('current')
if mibBuilder.loadTexts: swLoopbackOnPortNoMoreDetected.setDescription('This trap is sent when a loopback on port is no more detected.')
swUnidirLinkDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40016)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swUnidirLinkDetected.setStatus('current')
if mibBuilder.loadTexts: swUnidirLinkDetected.setDescription('This trap is sent when a unidirectional link on port is detected.')
swUnidirLinkRecovered = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40017)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swUnidirLinkRecovered.setStatus('current')
if mibBuilder.loadTexts: swUnidirLinkRecovered.setDescription('This trap is sent when a unidirectional link on port is recovered.')
swCriticalEventDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40018)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swCriticalEventDetected.setStatus('current')
if mibBuilder.loadTexts: swCriticalEventDetected.setDescription('This trap is sent when a critical event on port is detected.')
swCriticalEventRecovered = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40019)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swCriticalEventRecovered.setStatus('current')
if mibBuilder.loadTexts: swCriticalEventRecovered.setDescription('This trap is sent when a critical event on port is recovered.')
swLinkFlapDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40020)).setObjects(("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swLinkFlapDetected.setStatus('current')
if mibBuilder.loadTexts: swLinkFlapDetected.setDescription('This trap is sent when a link-flap on port is detected.')
swLinkFlapNoMoreDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40021)).setObjects(("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swLinkFlapNoMoreDetected.setStatus('current')
if mibBuilder.loadTexts: swLinkFlapNoMoreDetected.setDescription('This trap is sent when a link-flap on port is no more detected.')
swEapsStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40022)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapEapsDomainId"), ("DMswitch-MIB", "trapEapsDomainName"), ("DMswitch-MIB", "trapEapsStatus"))
if mibBuilder.loadTexts: swEapsStatusChange.setStatus('current')
if mibBuilder.loadTexts: swEapsStatusChange.setDescription('This trap is sent when the eaps status change.')
swPortSecurityViolation = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40023)).setObjects(("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swPortSecurityViolation.setStatus('current')
if mibBuilder.loadTexts: swPortSecurityViolation.setDescription('This trap is sent when a port-security violation happens.')
swHighTemperatureDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40024)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapTemperature"))
if mibBuilder.loadTexts: swHighTemperatureDetected.setStatus('current')
if mibBuilder.loadTexts: swHighTemperatureDetected.setDescription('This trap is sent when a high temperature is detected.')
swHighTemperatureNoMoreDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40025)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapTemperature"))
if mibBuilder.loadTexts: swHighTemperatureNoMoreDetected.setStatus('current')
if mibBuilder.loadTexts: swHighTemperatureNoMoreDetected.setDescription('This trap is sent when a high temperature is no more detected.')
swFuseStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40026)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapFuseId"), ("DMswitch-MIB", "trapFuseStatus"))
if mibBuilder.loadTexts: swFuseStatusChange.setStatus('current')
if mibBuilder.loadTexts: swFuseStatusChange.setDescription('This trap is sent when the status of on fuse changes.')
swFansBoardPresenceTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40027)).setObjects(("DMswitch-MIB", "trapFansBoardPresenceStatus"))
if mibBuilder.loadTexts: swFansBoardPresenceTrap.setStatus('current')
if mibBuilder.loadTexts: swFansBoardPresenceTrap.setDescription('This trap is sent when the fans board is taken off or placed.')
swStandbyMpuTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40028)).setObjects(("DMswitch-MIB", "swMpuIndex"), ("DMswitch-MIB", "swMpuSerialNumber"), ("DMswitch-MIB", "swMpuModelId"), ("DMswitch-MIB", "trapStandbyMpuPresenceStatus"))
if mibBuilder.loadTexts: swStandbyMpuTrap.setStatus('current')
if mibBuilder.loadTexts: swStandbyMpuTrap.setDescription('This trap is sent when the standby MPU is taken off or placed.')
swNonHomologSfpTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40029)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swNonHomologSfpTrap.setStatus('current')
if mibBuilder.loadTexts: swNonHomologSfpTrap.setDescription('This trap is sent when a non-homologated SFP is placed.')
swHighCpuUsageDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40030)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swHighCpuUsageDetected.setStatus('current')
if mibBuilder.loadTexts: swHighCpuUsageDetected.setDescription('This trap is sent when the CPU utilization is greater than 90%.')
swHighCpuUsageNoMoreDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40031)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swHighCpuUsageNoMoreDetected.setStatus('current')
if mibBuilder.loadTexts: swHighCpuUsageNoMoreDetected.setDescription('This trap is sent when the CPU utilization is lower than 90%.')
swDuplicatedMac = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40032)).setObjects(("DMswitch-MIB", "trapMacAddressMove"))
if mibBuilder.loadTexts: swDuplicatedMac.setStatus('current')
if mibBuilder.loadTexts: swDuplicatedMac.setDescription('This trap is sent when a MAC address move is detected.')
swHighMemoryUsageDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40033)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapMemFree"))
if mibBuilder.loadTexts: swHighMemoryUsageDetected.setStatus('current')
if mibBuilder.loadTexts: swHighMemoryUsageDetected.setDescription('This trap is sent when the memory utilization is critical.')
swHighMemoryUsageNoMoreDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40034)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapMemFree"))
if mibBuilder.loadTexts: swHighMemoryUsageNoMoreDetected.setStatus('current')
if mibBuilder.loadTexts: swHighMemoryUsageNoMoreDetected.setDescription('This trap is sent when the memory utilization is normal.')
swNewBootloaderVersion = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40035)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapBootloaderNew"))
if mibBuilder.loadTexts: swNewBootloaderVersion.setStatus('current')
if mibBuilder.loadTexts: swNewBootloaderVersion.setDescription('This trap is sent when a new bootloader version is saved.')
swCesopTdmStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40036)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopTdmStatus"))
if mibBuilder.loadTexts: swCesopTdmStatusTrap.setStatus('current')
if mibBuilder.loadTexts: swCesopTdmStatusTrap.setDescription('This trap is sent when TDM status change.')
swCesopTdmRemoteStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40037)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopTdmRemoteStatus"))
if mibBuilder.loadTexts: swCesopTdmRemoteStatusTrap.setStatus('current')
if mibBuilder.loadTexts: swCesopTdmRemoteStatusTrap.setDescription('This trap is sent when TDM Remote status change (RALM).')
swCesopTdmCasStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40038)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopTdmCasStatus"))
if mibBuilder.loadTexts: swCesopTdmCasStatusTrap.setStatus('current')
if mibBuilder.loadTexts: swCesopTdmCasStatusTrap.setDescription('This trap is sent when TDM Cas status change (LOM).')
swCesopTdmCrcStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40039)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopTdmCrcStatus"))
if mibBuilder.loadTexts: swCesopTdmCrcStatusTrap.setStatus('current')
if mibBuilder.loadTexts: swCesopTdmCrcStatusTrap.setDescription('This trap is sent when TDM CRC status change (CRC).')
swCesopBundleLocalTdmStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40040)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopBundleLocalTdmStatus"))
if mibBuilder.loadTexts: swCesopBundleLocalTdmStatusTrap.setStatus('current')
if mibBuilder.loadTexts: swCesopBundleLocalTdmStatusTrap.setDescription('This trap is sent when Bundle Local TDM status change.')
swCesopBundleRemoteTdmStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40041)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopBundleRemoteTdmStatus"))
if mibBuilder.loadTexts: swCesopBundleRemoteTdmStatusTrap.setStatus('current')
if mibBuilder.loadTexts: swCesopBundleRemoteTdmStatusTrap.setDescription('This trap is sent when Bundle Remote TDM status change.')
swCesopBundleLocalStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40042)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopBundleLocalStatus"))
if mibBuilder.loadTexts: swCesopBundleLocalStatusTrap.setStatus('current')
if mibBuilder.loadTexts: swCesopBundleLocalStatusTrap.setDescription('This trap is sent when Bundle Local status change.')
swCesopBundleRemoteStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40043)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopBundleRemoteStatus"))
if mibBuilder.loadTexts: swCesopBundleRemoteStatusTrap.setStatus('current')
if mibBuilder.loadTexts: swCesopBundleRemoteStatusTrap.setDescription('This trap is sent when Bundle Remote status change.')
swCesopBundlePktMismatchTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40044)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopBundlePktMismatchStatus"))
if mibBuilder.loadTexts: swCesopBundlePktMismatchTrap.setStatus('current')
if mibBuilder.loadTexts: swCesopBundlePktMismatchTrap.setDescription('This trap is sent when Packet mismatch status chanege in Bundle Interface.')
swCesopBundleNextHopTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40045)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopBundleNextHopStatus"))
if mibBuilder.loadTexts: swCesopBundleNextHopTrap.setStatus('current')
if mibBuilder.loadTexts: swCesopBundleNextHopTrap.setDescription('This trap is sent when Packet mismatch status chanege in Bundle Interface.')
swCesopClockAdapLinkQualityTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40046)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopClockAdapLinkQuality"))
if mibBuilder.loadTexts: swCesopClockAdapLinkQualityTrap.setStatus('current')
if mibBuilder.loadTexts: swCesopClockAdapLinkQualityTrap.setDescription('This trap is sent when Adaptative link quality change in clock source interface.')
swCesopClockSourceTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40047)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCesopClockSourceStatus"))
if mibBuilder.loadTexts: swCesopClockSourceTrap.setStatus('current')
if mibBuilder.loadTexts: swCesopClockSourceTrap.setDescription('This trap is sent when Source clock status change.')
swRemoteDeviceReady = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40048)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swRemoteDeviceReady.setStatus('current')
if mibBuilder.loadTexts: swRemoteDeviceReady.setDescription('This trap is sent when a remote device becomes ready to be managed.')
swRemoteDeviceLost = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40049)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swRemoteDeviceLost.setStatus('current')
if mibBuilder.loadTexts: swRemoteDeviceLost.setDescription('This trap is sent when a remote device is no longer manageable.')
swRemoteDeviceConfigFail = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40050)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swRemoteDeviceConfigFail.setStatus('current')
if mibBuilder.loadTexts: swRemoteDeviceConfigFail.setDescription('This trap is sent when the configuration sent to a remote device is rejected.')
swRemoteDeviceConfigForced = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40051)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swRemoteDeviceConfigForced.setStatus('current')
if mibBuilder.loadTexts: swRemoteDeviceConfigForced.setDescription('This trap is sent when a remote device configuration is forced.')
swFanFuseStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40052)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapFuseId"), ("DMswitch-MIB", "trapFuseStatus"))
if mibBuilder.loadTexts: swFanFuseStatusChange.setStatus('current')
if mibBuilder.loadTexts: swFanFuseStatusChange.setDescription('This trap is sent when the fan board fuse change its status.')
swDyingGaspPackReceived = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40053)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swDyingGaspPackReceived.setStatus('current')
if mibBuilder.loadTexts: swDyingGaspPackReceived.setDescription('This trap is sent every time an OAM:Dying Gasp package is received on port')
swBroadcastStormCheckChange = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40054)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapBroadcastStormControlStatus"), ("DMswitch-MIB", "trapBroadcastStormControlPPS"))
if mibBuilder.loadTexts: swBroadcastStormCheckChange.setStatus('current')
if mibBuilder.loadTexts: swBroadcastStormCheckChange.setDescription('This trap is sent when a broadcast storm threshold is hit or recovers.')
swMulticastStormCheckChange = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40055)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapMulticastStormControlStatus"), ("DMswitch-MIB", "trapMulticastStormControlPPS"))
if mibBuilder.loadTexts: swMulticastStormCheckChange.setStatus('current')
if mibBuilder.loadTexts: swMulticastStormCheckChange.setDescription('This trap is sent when a multicast storm threshold is hit or recovers.')
swBpduProtectLimit = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40056)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swBpduProtectLimit.setStatus('current')
if mibBuilder.loadTexts: swBpduProtectLimit.setDescription('This trap is sent when a BPDU limit has reached.')
swChangeStatusLDP = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40057)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapStatusLDP"), ("DMswitch-MIB", "trapIdLDP"))
if mibBuilder.loadTexts: swChangeStatusLDP.setStatus('current')
if mibBuilder.loadTexts: swChangeStatusLDP.setDescription('This trap is sent when occurs one change on status the protocol LDP.')
swChangeStatusTunnelRSVP = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40058)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapStatusTunnelRSVP"), ("DMswitch-MIB", "trapIdTunnelRSVP"))
if mibBuilder.loadTexts: swChangeStatusTunnelRSVP.setStatus('current')
if mibBuilder.loadTexts: swChangeStatusTunnelRSVP.setDescription('This trap is sent when occurs one change on status the tunnels of protocol RSVP.')
swBpduProtect = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40059)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swBpduProtect.setStatus('current')
if mibBuilder.loadTexts: swBpduProtect.setDescription('This trap is sent when a BPDU protect block time expired.')
swRouteTableFull = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40060)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swRouteTableFull.setStatus('current')
if mibBuilder.loadTexts: swRouteTableFull.setDescription('This trap is sent when L3 Routing Table reaches its limits.')
swPanelStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40061)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapPanelStatus"))
if mibBuilder.loadTexts: swPanelStatusTrap.setStatus('current')
if mibBuilder.loadTexts: swPanelStatusTrap.setDescription('This trap is sent when the Panel status change.')
swLSTGroupLinkStatusDown = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40062)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapLSTGroup"))
if mibBuilder.loadTexts: swLSTGroupLinkStatusDown.setStatus('current')
if mibBuilder.loadTexts: swLSTGroupLinkStatusDown.setDescription('This trap is sent when a link-state tracking group is down')
swLSTGroupLinkStatusUp = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40063)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapLSTGroup"))
if mibBuilder.loadTexts: swLSTGroupLinkStatusUp.setStatus('current')
if mibBuilder.loadTexts: swLSTGroupLinkStatusUp.setDescription('This trap is sent when a link-state tracking group is up')
swHighCpuL3UsageDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40064)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swHighCpuL3UsageDetected.setStatus('current')
if mibBuilder.loadTexts: swHighCpuL3UsageDetected.setDescription('This trap is sent when the CPU L3 utilization is greater than 90%.')
swHighCpuL3UsageNoMoreDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40065)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swHighCpuL3UsageNoMoreDetected.setStatus('current')
if mibBuilder.loadTexts: swHighCpuL3UsageNoMoreDetected.setDescription('This trap is sent when the CPU L3 utilization is lower than 90%.')
swHighMemoryL3UsageDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40066)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapMemL3Free"))
if mibBuilder.loadTexts: swHighMemoryL3UsageDetected.setStatus('current')
if mibBuilder.loadTexts: swHighMemoryL3UsageDetected.setDescription('This trap is sent when the L3 memory utilization is critical.')
swHighMemoryL3UsageNoMoreDetected = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40067)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapMemL3Free"))
if mibBuilder.loadTexts: swHighMemoryL3UsageNoMoreDetected.setStatus('current')
if mibBuilder.loadTexts: swHighMemoryL3UsageNoMoreDetected.setDescription('This trap is sent when the L3 memory utilization is normal.')
swMpuNsfIdDiffers = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40068)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapActiveMpuNsfId"), ("DMswitch-MIB", "trapStandByMpuNsfId"))
if mibBuilder.loadTexts: swMpuNsfIdDiffers.setStatus('current')
if mibBuilder.loadTexts: swMpuNsfIdDiffers.setDescription('This trap is sent when the active and standby mpu nsf-id differs.')
swErpsStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40069)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapErpsDomainId"), ("DMswitch-MIB", "trapErpsDomainName"), ("DMswitch-MIB", "trapErpsStatus"))
if mibBuilder.loadTexts: swErpsStatusChange.setStatus('current')
if mibBuilder.loadTexts: swErpsStatusChange.setDescription('This trap is sent when the erps status change.')
swCfmDefect = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40070)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapCfmMdName"), ("DMswitch-MIB", "trapCfmMaName"), ("DMswitch-MIB", "trapCfmMepId"), ("DMswitch-MIB", "trapCfmVlan"), ("DMswitch-MIB", "trapCfmDefect"))
if mibBuilder.loadTexts: swCfmDefect.setStatus('current')
if mibBuilder.loadTexts: swCfmDefect.setDescription('This trap is sent when some CFM MEP enters or leave an error state.')
swLldpRemoteChange = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40071)).setObjects(("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swLldpRemoteChange.setStatus('current')
if mibBuilder.loadTexts: swLldpRemoteChange.setDescription('This trap is sent when LLDP remote table changes.')
swPoeOverCurrent = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40072)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swPoeOverCurrent.setStatus('current')
if mibBuilder.loadTexts: swPoeOverCurrent.setDescription('This trap is sent when a Power over Ethernet enabled port was shut down due an overcurrent.')
swPoePowerRestriction = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40073)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"))
if mibBuilder.loadTexts: swPoePowerRestriction.setStatus('current')
if mibBuilder.loadTexts: swPoePowerRestriction.setDescription('This trap is sent when an Power over Ethernet enabled port was shut down because the connected device announced an power consumption over the configured for the port.')
swCoreDump = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40074)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swCoreDump.setStatus('current')
if mibBuilder.loadTexts: swCoreDump.setDescription('This trap is sent when an application terminate abnormally and generates a core dump.')
swElmiEvcStatus = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40075)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapEvcName"), ("DMswitch-MIB", "trapEvcStatus"))
if mibBuilder.loadTexts: swElmiEvcStatus.setStatus('current')
if mibBuilder.loadTexts: swElmiEvcStatus.setDescription('This trap is sent when an EVC changes its state.')
swSyncSystemClockSwitchHier = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40076)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swSyncSystemClockSwitchHier.setStatus('current')
if mibBuilder.loadTexts: swSyncSystemClockSwitchHier.setDescription('This trap is sent when system changes active clock synchronize hierarchy ')
swSyncSystemClockStatus = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40077)).setObjects(("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapSyncSystemClockStatus"))
if mibBuilder.loadTexts: swSyncSystemClockStatus.setStatus('current')
if mibBuilder.loadTexts: swSyncSystemClockStatus.setDescription('This trap is sent when system clock changes its status ')
swHostTableFull = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40078)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"))
if mibBuilder.loadTexts: swHostTableFull.setStatus('current')
if mibBuilder.loadTexts: swHostTableFull.setDescription('This trap is sent when L3 Host Table reaches its limits.')
swSyncG704ClockStatus = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40079)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapCesopG704ClockSourceStatus"))
if mibBuilder.loadTexts: swSyncG704ClockStatus.setStatus('current')
if mibBuilder.loadTexts: swSyncG704ClockStatus.setDescription('This trap is sent when g704 clock source changes its status.')
swSystemWarningsUnits = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40080)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "trapSystemWarningsUnits"))
if mibBuilder.loadTexts: swSystemWarningsUnits.setStatus('current')
if mibBuilder.loadTexts: swSystemWarningsUnits.setDescription('This trap is sent when warnings in the system units are found.')
swRebootDueToOvertemp = NotificationType((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 2, 1, 0, 40081)).setObjects(("DMswitch-MIB", "trapDevNo"), ("DMswitch-MIB", "trapDevLocalId"), ("DMswitch-MIB", "swUnitIndex"), ("DMswitch-MIB", "portIndex"), ("DMswitch-MIB", "trapSensorGroup"), ("DMswitch-MIB", "trapTemperature"))
if mibBuilder.loadTexts: swRebootDueToOvertemp.setStatus('current')
if mibBuilder.loadTexts: swRebootDueToOvertemp.setDescription('This trap is sent when the device reboots due to overheat.')
countHoldPktsTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 22, 1), )
if mibBuilder.loadTexts: countHoldPktsTable.setStatus('current')
if mibBuilder.loadTexts: countHoldPktsTable.setDescription('Table of dropped packets counters by interface for QoS statistics.')
countHoldPktsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 22, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "interfaceNumber"))
if mibBuilder.loadTexts: countHoldPktsEntry.setStatus('current')
if mibBuilder.loadTexts: countHoldPktsEntry.setDescription('An entry in the table, containing the number of dropped packets in a single interface. ')
interfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 22, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceNumber.setStatus('current')
if mibBuilder.loadTexts: interfaceNumber.setDescription('Interface Number from dropped packets.')
countHoldPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 22, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: countHoldPkts.setStatus('current')
if mibBuilder.loadTexts: countHoldPkts.setDescription('Counter Hold shows the number of dropped packets in a single interface.')
filterCounterInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 1), )
if mibBuilder.loadTexts: filterCounterInfoTable.setStatus('current')
if mibBuilder.loadTexts: filterCounterInfoTable.setDescription('This table contain the description about counters, so they can be used to measure performance from user-based filters.')
filterCounterInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "filterCounterInfoIndex"))
if mibBuilder.loadTexts: filterCounterInfoEntry.setStatus('current')
if mibBuilder.loadTexts: filterCounterInfoEntry.setDescription('A conceptually row for filterCounterInfoTable.')
filterCounterInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterCounterInfoIndex.setStatus('current')
if mibBuilder.loadTexts: filterCounterInfoIndex.setDescription('Index for counter, matches current CLI information')
filterCounterInfoRemark = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterCounterInfoRemark.setStatus('current')
if mibBuilder.loadTexts: filterCounterInfoRemark.setDescription('Remark is a textual description, as configured by user.')
filterCounterValueTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 2), )
if mibBuilder.loadTexts: filterCounterValueTable.setStatus('current')
if mibBuilder.loadTexts: filterCounterValueTable.setDescription('This table contains current values for filter counters.')
filterCounterValueEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 2, 1), ).setIndexNames((0, "DMswitch-MIB", "filterCounterInfoIndex"), (0, "DMswitch-MIB", "filterCounterValueIndex"))
if mibBuilder.loadTexts: filterCounterValueEntry.setStatus('current')
if mibBuilder.loadTexts: filterCounterValueEntry.setDescription('A conceptually row for filterCounterValueTable.')
filterCounterValueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterCounterValueIndex.setStatus('current')
if mibBuilder.loadTexts: filterCounterValueIndex.setDescription('Subcounters index identifies each internal counter that a user-editable counter can have. Internal counters may differ from equipament model to other.')
filterCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 23, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filterCounterValue.setStatus('current')
if mibBuilder.loadTexts: filterCounterValue.setDescription('The total number of data which matches internal subcounter. It can be bytes or packets, according to equipment configuration. Discontinuities in the value of this counter can occur at re-initialization of the management system, and at other times.')
eapsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 24, 1), )
if mibBuilder.loadTexts: eapsInfoTable.setStatus('current')
if mibBuilder.loadTexts: eapsInfoTable.setDescription('This table contains EAPS information about all EAPS domains on this device.')
eapsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 24, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "eapsInfoId"))
if mibBuilder.loadTexts: eapsInfoEntry.setStatus('current')
if mibBuilder.loadTexts: eapsInfoEntry.setDescription('An individual entry of this table contains EAPS information related to that EAPS domain.')
eapsInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 24, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsInfoId.setStatus('current')
if mibBuilder.loadTexts: eapsInfoId.setDescription('This indicates the mode of the EAPS Id.')
eapsInfoName = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 24, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsInfoName.setStatus('current')
if mibBuilder.loadTexts: eapsInfoName.setDescription('The EAPS domain name.')
eapsInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 24, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("invalid", 0), ("master", 1), ("transit", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsInfoMode.setStatus('current')
if mibBuilder.loadTexts: eapsInfoMode.setDescription('This indicates the mode of the EAPS domain.')
eapsInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 24, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("idle", 0), ("complete", 1), ("failed", 2), ("linksup", 3), ("linkdown", 4), ("preforwarding", 5), ("init", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eapsInfoState.setStatus('current')
if mibBuilder.loadTexts: eapsInfoState.setDescription('This indicates the current EAPS state of this EAPS domain.')
cfmProbeDmTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 25, 1), )
if mibBuilder.loadTexts: cfmProbeDmTable.setStatus('current')
if mibBuilder.loadTexts: cfmProbeDmTable.setDescription('This table contains CFM delay measurements informationS.')
cfmProbeDmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 25, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "cfmProbeDmIndex"))
if mibBuilder.loadTexts: cfmProbeDmEntry.setStatus('current')
if mibBuilder.loadTexts: cfmProbeDmEntry.setDescription('An individual entry of this table contains CFM delay measurements information related to that probe.')
cfmProbeDmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 25, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmProbeDmIndex.setStatus('current')
if mibBuilder.loadTexts: cfmProbeDmIndex.setDescription('The index value used to identify the probe.')
cfmProbeDmAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 25, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmProbeDmAvgDelay.setStatus('current')
if mibBuilder.loadTexts: cfmProbeDmAvgDelay.setDescription('The average delay in microseconds of CFM delay measurement.')
cfmProbeDmAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 25, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmProbeDmAvgJitter.setStatus('current')
if mibBuilder.loadTexts: cfmProbeDmAvgJitter.setDescription('The average jitter in microseconds of CFM delay measurement.')
cfmProbeDmLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 25, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cfmProbeDmLoss.setStatus('current')
if mibBuilder.loadTexts: cfmProbeDmLoss.setDescription('The percentage of CFM frames lost on the indicate probe.')
cpuActiveUsageTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 1), )
if mibBuilder.loadTexts: cpuActiveUsageTable.setStatus('current')
if mibBuilder.loadTexts: cpuActiveUsageTable.setDescription('Table of cpu usage.')
cpuActiveUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "cpuActiveUsageIndex"))
if mibBuilder.loadTexts: cpuActiveUsageEntry.setStatus('current')
if mibBuilder.loadTexts: cpuActiveUsageEntry.setDescription('Table of cpu usage.')
cpuActiveUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: cpuActiveUsageIndex.setStatus('current')
if mibBuilder.loadTexts: cpuActiveUsageIndex.setDescription('This object identifies the switch within the system for which this entry contains information. This value can never be greater than switchNumber.')
cpuActiveUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuActiveUsageValue.setStatus('current')
if mibBuilder.loadTexts: cpuActiveUsageValue.setDescription('The CPU usage (in hundredths of a percent).')
memActiveUsageTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 2), )
if mibBuilder.loadTexts: memActiveUsageTable.setStatus('current')
if mibBuilder.loadTexts: memActiveUsageTable.setDescription('Table of memory usage.')
memActiveUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 2, 1), ).setIndexNames((0, "DMswitch-MIB", "memActiveUsageIndex"))
if mibBuilder.loadTexts: memActiveUsageEntry.setStatus('current')
if mibBuilder.loadTexts: memActiveUsageEntry.setDescription('Table of memory usage.')
memActiveUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: memActiveUsageIndex.setStatus('current')
if mibBuilder.loadTexts: memActiveUsageIndex.setDescription('This object identifies the switch within the system for which this entry contains information. This value can never be greater than switchNumber.')
memActiveUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memActiveUsageValue.setStatus('current')
if mibBuilder.loadTexts: memActiveUsageValue.setDescription('The memory usage (percentage).')
cpuStandbyUsageTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 3), )
if mibBuilder.loadTexts: cpuStandbyUsageTable.setStatus('current')
if mibBuilder.loadTexts: cpuStandbyUsageTable.setDescription('Table of cpu usage.')
cpuStandbyUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 3, 1), ).setIndexNames((0, "DMswitch-MIB", "cpuStandbyUsageIndex"))
if mibBuilder.loadTexts: cpuStandbyUsageEntry.setStatus('current')
if mibBuilder.loadTexts: cpuStandbyUsageEntry.setDescription('Table of cpu usage.')
cpuStandbyUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: cpuStandbyUsageIndex.setStatus('current')
if mibBuilder.loadTexts: cpuStandbyUsageIndex.setDescription('This object identifies the switch within the system for which this entry contains information. This value can never be greater than switchNumber.')
cpuStandbyUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cpuStandbyUsageValue.setStatus('current')
if mibBuilder.loadTexts: cpuStandbyUsageValue.setDescription('The CPU usage (in hundredths of a percent).')
memStandbyUsageTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 4), )
if mibBuilder.loadTexts: memStandbyUsageTable.setStatus('current')
if mibBuilder.loadTexts: memStandbyUsageTable.setDescription('Table of memory usage.')
memStandbyUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 4, 1), ).setIndexNames((0, "DMswitch-MIB", "memStandbyUsageIndex"))
if mibBuilder.loadTexts: memStandbyUsageEntry.setStatus('current')
if mibBuilder.loadTexts: memStandbyUsageEntry.setDescription('Table of memory usage.')
memStandbyUsageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: memStandbyUsageIndex.setStatus('current')
if mibBuilder.loadTexts: memStandbyUsageIndex.setDescription('This object identifies the switch within the system for which this entry contains information. This value can never be greater than switchNumber.')
memStandbyUsageValue = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 26, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memStandbyUsageValue.setStatus('current')
if mibBuilder.loadTexts: memStandbyUsageValue.setDescription('The memory usage (percentage).')
queuePortTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1), )
if mibBuilder.loadTexts: queuePortTable.setStatus('current')
if mibBuilder.loadTexts: queuePortTable.setDescription('Table for statistics of interface queues.')
queuePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "queuePortIfIndex"), (0, "DMswitch-MIB", "queuePortQueueIndex"))
if mibBuilder.loadTexts: queuePortEntry.setStatus('current')
if mibBuilder.loadTexts: queuePortEntry.setDescription('An entry in the table, containing information about configuration in one switch port of the switch.')
queuePortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: queuePortIfIndex.setStatus('current')
if mibBuilder.loadTexts: queuePortIfIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
queuePortQueueIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: queuePortQueueIndex.setStatus('current')
if mibBuilder.loadTexts: queuePortQueueIndex.setDescription('The COS queue from the interface.')
queuePortSentPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePortSentPackets.setStatus('current')
if mibBuilder.loadTexts: queuePortSentPackets.setDescription('Counter of sent packets.')
queuePortSentBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePortSentBytes.setStatus('current')
if mibBuilder.loadTexts: queuePortSentBytes.setDescription('Counter of sent bytes.')
queuePortDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePortDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: queuePortDroppedPackets.setDescription('Counter of dropped packets.')
queuePortDroppedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 27, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: queuePortDroppedBytes.setStatus('current')
if mibBuilder.loadTexts: queuePortDroppedBytes.setDescription('Counter of dropped bytes.')
ddTransceiversTable = MibTable((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1), )
if mibBuilder.loadTexts: ddTransceiversTable.setStatus('current')
if mibBuilder.loadTexts: ddTransceiversTable.setDescription('Transceivers digital diagnostic table.')
ddTransceiversEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1, 1), ).setIndexNames((0, "DMswitch-MIB", "ddTransceiversIfIndex"))
if mibBuilder.loadTexts: ddTransceiversEntry.setStatus('current')
if mibBuilder.loadTexts: ddTransceiversEntry.setDescription('An entry in the table, containing information about digital diagnostic.')
ddTransceiversIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ddTransceiversIfIndex.setStatus('current')
if mibBuilder.loadTexts: ddTransceiversIfIndex.setDescription('This is defined as ifIndex in the IF-MIB.')
ddTransceiversTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddTransceiversTemperature.setStatus('current')
if mibBuilder.loadTexts: ddTransceiversTemperature.setDescription('Transceiver temperature information in Celsius')
ddTransceiversVcc3v3 = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddTransceiversVcc3v3.setStatus('current')
if mibBuilder.loadTexts: ddTransceiversVcc3v3.setDescription('Transceiver Vcc 3v3 information in Volts')
ddTransceiversRxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddTransceiversRxPower.setStatus('current')
if mibBuilder.loadTexts: ddTransceiversRxPower.setDescription('Transceiver rx power information in Decibels')
ddTransceiversTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddTransceiversTxPower.setStatus('current')
if mibBuilder.loadTexts: ddTransceiversTxPower.setDescription('Transceiver tx power information in Decibels')
ddTransceiversTxBias = MibTableColumn((1, 3, 6, 1, 4, 1, 3709, 3, 5, 201, 1, 28, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ddTransceiversTxBias.setStatus('current')
if mibBuilder.loadTexts: ddTransceiversTxBias.setDescription('Transceiver tx bias information in Amperes')
mibBuilder.exportSymbols("DMswitch-MIB", cpuActiveUsageIndex=cpuActiveUsageIndex, swSyncG704ClockStatus=swSyncG704ClockStatus, rlPortOutputStatus=rlPortOutputStatus, staPortOperPointToPoint=staPortOperPointToPoint, dmSwitchTrapsPrefix=dmSwitchTrapsPrefix, igmpSnoopRouterCurrentEntry=igmpSnoopRouterCurrentEntry, ValidStatus=ValidStatus, lacpMgt=lacpMgt, restartControl=restartControl, trapCesopTdmCrcStatus=trapCesopTdmCrcStatus, fileMgt=fileMgt, trapPanelStatus=trapPanelStatus, sntpServerEntry=sntpServerEntry, tftpServer=tftpServer, ddTransceiversEntry=ddTransceiversEntry, cfmProbeDmIndex=cfmProbeDmIndex, trapDuplicatedIpVlan=trapDuplicatedIpVlan, swForbiddenAccessTrap=swForbiddenAccessTrap, memStandbyUsageEntry=memStandbyUsageEntry, ipFilterTelnetMask=ipFilterTelnetMask, igmpSnoopMulticastCurrentTable=igmpSnoopMulticastCurrentTable, trapDuplicatedIpAddress=trapDuplicatedIpAddress, fileInfoFlashId=fileInfoFlashId, trapForbiddenAccessIp=trapForbiddenAccessIp, swPoePowerRestriction=swPoePowerRestriction, trapBroadcastStormControlPPS=trapBroadcastStormControlPPS, radiusMultipleServerTable=radiusMultipleServerTable, ipFilterTelnetAddress=ipFilterTelnetAddress, swPanelStatusTrap=swPanelStatusTrap, swHighCpuL3UsageDetected=swHighCpuL3UsageDetected, igmpSnoopMulticastStaticEntry=igmpSnoopMulticastStaticEntry, rlPortInputBurst=rlPortInputBurst, swFuseStatusChange=swFuseStatusChange, vlanIndex=vlanIndex, filterCounterInfoIndex=filterCounterInfoIndex, trapDevNo=trapDevNo, swNonHomologSfpTrap=swNonHomologSfpTrap, sshDsaHostKey=sshDsaHostKey, fileInfoFileType=fileInfoFileType, switchSessionTable=switchSessionTable, trapMacAddressMove=trapMacAddressMove, igmpSnoopMulticastCurrentEntry=igmpSnoopMulticastCurrentEntry, memActiveUsageEntry=memActiveUsageEntry, swSerialNumber=swSerialNumber, queuePortEntry=queuePortEntry, trapDestAddress=trapDestAddress, swProdModelId=swProdModelId, remoteLogLevel=remoteLogLevel, swMpuNsfIdDiffers=swMpuNsfIdDiffers, igmpSnoopStatus=igmpSnoopStatus, swLinkFlapNoMoreDetected=swLinkFlapNoMoreDetected, trapDevLocalId=trapDevLocalId, rateLimitPortEntry=rateLimitPortEntry, rlPortInputStatus=rlPortInputStatus, bcastStormPacketRate=bcastStormPacketRate, trapIdLDP=trapIdLDP, portEntry=portEntry, swSessionUptime=swSessionUptime, cpuStandbyUsageEntry=cpuStandbyUsageEntry, swProdDescription=swProdDescription, radiusServerPortNumber=radiusServerPortNumber, queuePortTable=queuePortTable, igmpSnoopRouterStaticPorts=igmpSnoopRouterStaticPorts, queuePortSentPackets=queuePortSentPackets, igmpSnoopRouterStaticVlanIndex=igmpSnoopRouterStaticVlanIndex, ipFilterTelnetStatus=ipFilterTelnetStatus, trapCesopTdmCasStatus=trapCesopTdmCasStatus, swHostTableFull=swHostTableFull, rateLimitPortTable=rateLimitPortTable, trapMulticastStormControlStatus=trapMulticastStormControlStatus, eapsInfoState=eapsInfoState, sshMgt=sshMgt, trapInfAlarmVal=trapInfAlarmVal, cpuActiveUsageTable=cpuActiveUsageTable, swStackDetachTrap=swStackDetachTrap, swRemoteDeviceReady=swRemoteDeviceReady, remoteLogMgt=remoteLogMgt, igmpSnoopRouterStaticTable=igmpSnoopRouterStaticTable, trapEapsDomainId=trapEapsDomainId, ipFilterSSHEntry=ipFilterSSHEntry, tftpFlashConfig=tftpFlashConfig, trapEapsStatus=trapEapsStatus, filterCounterInfoRemark=filterCounterInfoRemark, swCriticalEventDetected=swCriticalEventDetected, filterCounterInfoTable=filterCounterInfoTable, radiusMultipleServerIndex=radiusMultipleServerIndex, ddTransceiversTxPower=ddTransceiversTxPower, radiusServerRetransmit=radiusServerRetransmit, radiusServerKey=radiusServerKey, igmpSnoopMgt=igmpSnoopMgt, swMpuRoleInSystem=swMpuRoleInSystem, vlanAddressMethod=vlanAddressMethod, swProdManufacturer=swProdManufacturer, swConfigSaveTrap=swConfigSaveTrap, staPortOperEdgePort=staPortOperEdgePort, swRouteTableFull=swRouteTableFull, trapStatusTunnelRSVP=trapStatusTunnelRSVP, tftpMgt=tftpMgt, swBundleIntfNumber=swBundleIntfNumber, swHashStatus=swHashStatus, fileInfoFileSize=fileInfoFileSize, trapConfigSavePartition=trapConfigSavePartition, memActiveUsageTable=memActiveUsageTable, trapCfmVlan=trapCfmVlan, swUnidirLinkRecovered=swUnidirLinkRecovered, swFirmwareReleaseDate=swFirmwareReleaseDate, swProdUrl=swProdUrl, cpuStandbyUsageIndex=cpuStandbyUsageIndex, sntpPollInterval=sntpPollInterval, eapsInfoId=eapsInfoId, tftpFile=tftpFile, swIndivAlarmIndex=swIndivAlarmIndex, trapCesopClockSourceStatus=trapCesopClockSourceStatus, trunkValidNumber=trunkValidNumber, swE1cIntfNumber=swE1cIntfNumber, memStandbyUsageTable=memStandbyUsageTable, swEapsStatusChange=swEapsStatusChange, trapMemL3Free=trapMemL3Free, bcastStormTable=bcastStormTable, staMgt=staMgt, swErpsStatusChange=swErpsStatusChange, staSystemStatus=staSystemStatus, radiusMgt=radiusMgt, switchNumber=switchNumber, swHardwareVer=swHardwareVer, memStandbyUsageIndex=memStandbyUsageIndex, staPortAdminPointToPoint=staPortAdminPointToPoint, trapFuseId=trapFuseId, sshHostKeyGenAction=sshHostKeyGenAction, radiusMultipleServerStatus=radiusMultipleServerStatus, trapCesopClockAdapLinkQuality=trapCesopClockAdapLinkQuality, sysLogHistoryFlashLevel=sysLogHistoryFlashLevel, swCesopTdmCasStatusTrap=swCesopTdmCasStatusTrap, swHighMemoryL3UsageNoMoreDetected=swHighMemoryL3UsageNoMoreDetected, igmpSnoopMulticastStaticVlanIndex=igmpSnoopMulticastStaticVlanIndex, switchMgt=switchMgt, swPoeOverCurrent=swPoeOverCurrent, mirrorType=mirrorType, sntpMgt=sntpMgt, sshServerStatus=sshServerStatus, countMgt=countMgt, sshHostKeyDelAction=sshHostKeyDelAction, rlPortOutputRate=rlPortOutputRate, eapsMgt=eapsMgt, sntpServerIp=sntpServerIp, memActiveUsageValue=memActiveUsageValue, switchInfoTable=switchInfoTable, memStandbyUsageValue=memStandbyUsageValue, switchMpuEntry=switchMpuEntry, swUnitIndex=swUnitIndex, staPortEntry=staPortEntry, sntpStatus=sntpStatus, countHoldPkts=countHoldPkts, ddTransceiversTemperature=ddTransceiversTemperature, portType=portType, portName=portName, ipFilterHTTPMask=ipFilterHTTPMask, eapsInfoName=eapsInfoName, trapSfpPresenceStatus=trapSfpPresenceStatus, staPortSystemStatus=staPortSystemStatus, staProtocolType=staProtocolType, restartFirmware=restartFirmware, queuePortDroppedPackets=queuePortDroppedPackets, mirrorEntry=mirrorEntry, swNewBootloaderVersion=swNewBootloaderVersion, ddTransceiversTxBias=ddTransceiversTxBias, trapEapsDomainName=trapEapsDomainName, fileInfoFileIndex=fileInfoFileIndex, vlanTable=vlanTable, ipHttpPort=ipHttpPort, trapCesopBundlePktMismatchStatus=trapCesopBundlePktMismatchStatus, ipFilterSSHTable=ipFilterSSHTable, queuePortMgmt=queuePortMgmt, mirrorDestinationPort=mirrorDestinationPort, prioWrrTable=prioWrrTable, swBpduProtect=swBpduProtect, trapDuplicatedIpMacAddress=trapDuplicatedIpMacAddress, vlanMgt=vlanMgt, swFanFuseStatusChange=swFanFuseStatusChange, ipMgt=ipMgt, swMemUsage=swMemUsage, portMdiStatus=portMdiStatus, swCfmDefect=swCfmDefect, StaPathCostMode=StaPathCostMode, rlPortInputRate=rlPortInputRate, fileInfoEntry=fileInfoEntry, trapCesopBundleRemoteStatus=trapCesopBundleRemoteStatus, trunkCreation=trunkCreation, trapSyncSystemClockStatus=trapSyncSystemClockStatus, restartConfig=restartConfig, sshServerMinorVersion=sshServerMinorVersion, filterCounterValueEntry=filterCounterValueEntry, swHighTemperatureDetected=swHighTemperatureDetected, swFansBoardPresenceTrap=swFansBoardPresenceTrap, swIndivFanUnitIndex=swIndivFanUnitIndex, ddTransceiversRxPower=ddTransceiversRxPower, filterCounterInfoEntry=filterCounterInfoEntry, swRemoteDeviceLost=swRemoteDeviceLost, swCesopTdmCrcStatusTrap=swCesopTdmCrcStatusTrap, igmpSnoopQueryCount=igmpSnoopQueryCount, swRoleInSystem=swRoleInSystem, mirrorMgt=mirrorMgt, sntpServerTable=sntpServerTable, swIdentifier=swIdentifier, swMpuBootLoaderVer=swMpuBootLoaderVer, trapCfmMdName=trapCfmMdName, sntpServerStatus=sntpServerStatus, igmpSnoopMulticastStaticTable=igmpSnoopMulticastStaticTable, switchMacAddrUsageTable=switchMacAddrUsageTable, igmpSnoopRouterCurrentPorts=igmpSnoopRouterCurrentPorts, swVC4Number=swVC4Number, swSessionPid=swSessionPid, swAlarmTrap=swAlarmTrap, swG704IntfNumber=swG704IntfNumber, swMpuIndex=swMpuIndex, ipHttpsPort=ipHttpsPort, swCesopBundleRemoteStatusTrap=swCesopBundleRemoteStatusTrap, tftpAction=tftpAction, swMpuModelId=swMpuModelId, memActiveUsageIndex=memActiveUsageIndex, trapForbiddenAccessMode=trapForbiddenAccessMode, countHoldPktsTable=countHoldPktsTable, sshTimeout=sshTimeout, swUnidirLinkDetected=swUnidirLinkDetected, fileInfoFileName=fileInfoFileName, trapCfmMaName=trapCfmMaName, sshRsaHostKey=sshRsaHostKey, cfmProbeDmLoss=cfmProbeDmLoss, dmSwitchMIBObjects=dmSwitchMIBObjects, swPowerStatus=swPowerStatus, filterCounterValue=filterCounterValue, portAutonegotiation=portAutonegotiation, remoteLogFacilityType=remoteLogFacilityType, igmpSnoopVersion=igmpSnoopVersion, trapBroadcastStormControlStatus=trapBroadcastStormControlStatus, swHighCpuUsageNoMoreDetected=swHighCpuUsageNoMoreDetected, swMacAddrUsageValue=swMacAddrUsageValue, swLoopbackOnPortDetected=swLoopbackOnPortDetected, swIndivAlarmUnitIndex=swIndivAlarmUnitIndex, swSessionName=swSessionName, swLoginFailTrap=swLoginFailTrap, sshServerMajorVersion=sshServerMajorVersion, trapCfmMepId=trapCfmMepId, trapDestCommunity=trapDestCommunity, swPowerStatusChangeTrap=swPowerStatusChangeTrap, trunkPorts=trunkPorts, fileInfoTable=fileInfoTable, switchIndivAlarmTable=switchIndivAlarmTable, cfmProbeDmAvgDelay=cfmProbeDmAvgDelay, swSlotNumber=swSlotNumber, trapSystemWarningsUnits=trapSystemWarningsUnits, fileInfoIsStartUp=fileInfoIsStartUp, radiusServerTimeout=radiusServerTimeout, radiusMultipleServerEntry=radiusMultipleServerEntry)
mibBuilder.exportSymbols("DMswitch-MIB", ipFilterSSHStatus=ipFilterSSHStatus, swHighMemoryL3UsageDetected=swHighMemoryL3UsageDetected, cfmProbeDmAvgJitter=cfmProbeDmAvgJitter, trapErpsDomainId=trapErpsDomainId, ipDefaultGateway=ipDefaultGateway, trapBootloaderNew=trapBootloaderNew, swCriticalEventRecovered=swCriticalEventRecovered, switchSessionEntry=switchSessionEntry, swSdhIntfNumber=swSdhIntfNumber, radiusMultipleServerPortNumber=radiusMultipleServerPortNumber, switchIndivFanEntry=switchIndivFanEntry, trapEvcStatus=trapEvcStatus, ipFilterTelnetTable=ipFilterTelnetTable, ipFilterHTTPStatus=ipFilterHTTPStatus, lacpPortIndex=lacpPortIndex, ipFilterSnmpStatus=ipFilterSnmpStatus, swStackAttachTrap=swStackAttachTrap, igmpSnoopRouterCurrentTable=igmpSnoopRouterCurrentTable, ipAddressMode=ipAddressMode, swSfpPresenceTrap=swSfpPresenceTrap, igmpSnoopQueryMaxResponseTime=igmpSnoopQueryMaxResponseTime, swLldpRemoteChange=swLldpRemoteChange, swIndivPowerUnitIndex=swIndivPowerUnitIndex, lacpPortTable=lacpPortTable, trapDestTable=trapDestTable, prioWrrTrafficClass=prioWrrTrafficClass, trapDestVersion=trapDestVersion, ipSecondaryDnsServer=ipSecondaryDnsServer, portFlowCtrlCfg=portFlowCtrlCfg, ddTransceiversMgmt=ddTransceiversMgmt, trapFansBoardPresenceStatus=trapFansBoardPresenceStatus, trunkMgt=trunkMgt, portIndex=portIndex, sysTimeZoneName=sysTimeZoneName, vlanEntry=vlanEntry, eapsInfoEntry=eapsInfoEntry, bcastStormMgt=bcastStormMgt, portTrunkIndex=portTrunkIndex, dmSwitchMIB=dmSwitchMIB, swDuplicatedMac=swDuplicatedMac, swSyncSystemClockSwitchHier=swSyncSystemClockSwitchHier, trapCesopBundleLocalTdmStatus=trapCesopBundleLocalTdmStatus, swCesopTdmRemoteStatusTrap=swCesopTdmRemoteStatusTrap, restartMgt=restartMgt, eapsInfoMode=eapsInfoMode, sshKeySize=sshKeySize, swHighCpuUsageDetected=swHighCpuUsageDetected, switchIndivAlarmEntry=switchIndivAlarmEntry, trapLSTGroup=trapLSTGroup, mirrorTable=mirrorTable, trapCfmDefect=trapCfmDefect, trapCesopG704ClockSourceStatus=trapCesopG704ClockSourceStatus, cpuActiveUsageValue=cpuActiveUsageValue, cpuStandbyUsageTable=cpuStandbyUsageTable, trapActiveMpuNsfId=trapActiveMpuNsfId, sysLogStatus=sysLogStatus, ipFilterTelnetEntry=ipFilterTelnetEntry, swRemoteDeviceConfigForced=swRemoteDeviceConfigForced, queuePortIfIndex=queuePortIfIndex, swLinkFlapDetected=swLinkFlapDetected, swHighMemoryUsageDetected=swHighMemoryUsageDetected, ddTransceiversIfIndex=ddTransceiversIfIndex, trapEvcName=trapEvcName, trapStandByMpuNsfId=trapStandByMpuNsfId, sysLogMgt=sysLogMgt, trapCesopBundleRemoteTdmStatus=trapCesopBundleRemoteTdmStatus, trunkStatus=trunkStatus, igmpSnoopRouterStaticEntry=igmpSnoopRouterStaticEntry, ipTelnetState=ipTelnetState, switchIndivAlarmOutTable=switchIndivAlarmOutTable, switchProductId=switchProductId, swIndivPowerStatus=swIndivPowerStatus, swCesopBundleLocalStatusTrap=swCesopBundleLocalStatusTrap, swVendorId=swVendorId, ipFilterMgt=ipFilterMgt, swLoginSucessTrap=swLoginSucessTrap, portCapabilities=portCapabilities, swHashConfig=swHashConfig, swHighMemoryUsageNoMoreDetected=swHighMemoryUsageNoMoreDetected, radiusMultipleServerKey=radiusMultipleServerKey, swChangeStatusTunnelRSVP=swChangeStatusTunnelRSVP, portSpeedDpxStatus=portSpeedDpxStatus, switchIndivPowerEntry=switchIndivPowerEntry, sysCurrentTime=sysCurrentTime, swChassisModel=swChassisModel, trapIdTunnelRSVP=trapIdTunnelRSVP, countHoldPktsEntry=countHoldPktsEntry, staPortIndex=staPortIndex, swBootLoaderVer=swBootLoaderVer, remoteLogServerStatus=remoteLogServerStatus, swBpduProtectLimit=swBpduProtectLimit, priorityMgt=priorityMgt, cfmProbeMgmt=cfmProbeMgmt, ipPrimaryDnsServer=ipPrimaryDnsServer, ipFilterSnmpTable=ipFilterSnmpTable, trapStatusLDP=trapStatusLDP, igmpSnoopMulticastStaticIpAddress=igmpSnoopMulticastStaticIpAddress, filterCounterValueIndex=filterCounterValueIndex, securityMgt=securityMgt, fileInfoCreationTime=fileInfoCreationTime, radiusMultipleServerRetransmit=radiusMultipleServerRetransmit, filterCounterMgt=filterCounterMgt, swMpuSerialNumber=swMpuSerialNumber, ipFilterSnmpAddress=ipFilterSnmpAddress, ipFilterHTTPAddress=ipFilterHTTPAddress, swTemperature=swTemperature, staPortLongPathCost=staPortLongPathCost, swLSTGroupLinkStatusUp=swLSTGroupLinkStatusUp, rlPortOutputBurst=rlPortOutputBurst, igmpSnoopQuerier=igmpSnoopQuerier, swLoopbackOnPortNoMoreDetected=swLoopbackOnPortNoMoreDetected, trapTemperature=trapTemperature, trapErpsStatus=trapErpsStatus, rlPortIndex=rlPortIndex, swElmiEvcStatus=swElmiEvcStatus, swSystemWarningsUnits=swSystemWarningsUnits, KeySegment=KeySegment, swIndivAlarmStatus=swIndivAlarmStatus, swSessionSrcIP=swSessionSrcIP, prioWrrWeight=prioWrrWeight, swFirmwareVer=swFirmwareVer, fileInfoDelete=fileInfoDelete, swChangeStatusLDP=swChangeStatusLDP, swIndivFanIndex=swIndivFanIndex, portFlowCtrlStatus=portFlowCtrlStatus, ipHttpsState=ipHttpsState, swProdName=swProdName, prioWrrEntry=prioWrrEntry, cpuStandbyUsageValue=cpuStandbyUsageValue, switchMpuTable=switchMpuTable, radiusMultipleServerTimeout=radiusMultipleServerTimeout, prioQueueMode=prioQueueMode, cfmProbeDmEntry=cfmProbeDmEntry, ddTransceiversVcc3v3=ddTransceiversVcc3v3, dmSwitchTraps=dmSwitchTraps, fileInfoUnitID=fileInfoUnitID, trunkTable=trunkTable, swBroadcastStormCheckChange=swBroadcastStormCheckChange, switchIndivAlarmOutEntry=switchIndivAlarmOutEntry, mirrorSourcePort=mirrorSourcePort, switchMacAddrUsageEntry=switchMacAddrUsageEntry, trapLoginUserName=trapLoginUserName, remoteLogServerEntry=remoteLogServerEntry, trapDestMgt=trapDestMgt, swSessionUnitIndex=swSessionUnitIndex, swCoreDump=swCoreDump, swRebootDueToOvertemp=swRebootDueToOvertemp, trapMemFree=trapMemFree, swCesopClockAdapLinkQualityTrap=swCesopClockAdapLinkQualityTrap, swCesopClockSourceTrap=swCesopClockSourceTrap, sysTimeZone=sysTimeZone, swLSTGroupLinkStatusDown=swLSTGroupLinkStatusDown, swIndivAlarmOutStatus=swIndivAlarmOutStatus, lacpPortStatus=lacpPortStatus, ipHttpState=ipHttpState, queuePortSentBytes=queuePortSentBytes, queuePortDroppedBytes=queuePortDroppedBytes, portTable=portTable, swHighTemperatureNoMoreDetected=swHighTemperatureNoMoreDetected, filterCounterValueTable=filterCounterValueTable, remoteLogStatus=remoteLogStatus, remoteLogServerIp=remoteLogServerIp, swTrapsLostTrap=swTrapsLostTrap, swCesopBundleLocalTdmStatusTrap=swCesopBundleLocalTdmStatusTrap, swPtpIntfNumber=swPtpIntfNumber, trapCesopTdmRemoteStatus=trapCesopTdmRemoteStatus, cpumonMgmt=cpumonMgmt, portMgt=portMgt, staPortAdminEdgePort=staPortAdminEdgePort, swConfigChangeTrap=swConfigChangeTrap, igmpSnoopQueryInterval=igmpSnoopQueryInterval, swDuplicatedIp=swDuplicatedIp, switchIndivPowerTable=switchIndivPowerTable, dmSwitchConformance=dmSwitchConformance, ipFilterHTTPEntry=ipFilterHTTPEntry, eapsInfoTable=eapsInfoTable, staPortTable=staPortTable, igmpSnoopMulticastStaticPorts=igmpSnoopMulticastStaticPorts, bcastStormStatus=bcastStormStatus, swDyingGaspPackReceived=swDyingGaspPackReceived, swCpuUsage=swCpuUsage, swIndivPowerIndex=swIndivPowerIndex, swMulticastStormCheckChange=swMulticastStormCheckChange, swPortNumber=swPortNumber, swCesopBundleRemoteTdmStatusTrap=swCesopBundleRemoteTdmStatusTrap, igmpSnoopMulticastCurrentIpAddress=igmpSnoopMulticastCurrentIpAddress, sysLogHistoryRamLevel=sysLogHistoryRamLevel, switchIndivFanTable=switchIndivFanTable, dmSwitchNotifications=dmSwitchNotifications, interfaceNumber=interfaceNumber, switchResObj=switchResObj, swCesopBundleNextHopTrap=swCesopBundleNextHopTrap, trapDestStatus=trapDestStatus, swMacAddrUnitIndex=swMacAddrUnitIndex, swCesopTdmStatusTrap=swCesopTdmStatusTrap, remoteLogServerTable=remoteLogServerTable, ipFilterHTTPTable=ipFilterHTTPTable, swPortSecurityViolation=swPortSecurityViolation, swRemoteDeviceConfigFail=swRemoteDeviceConfigFail, ipFilterSnmpEntry=ipFilterSnmpEntry, swVC12Number=swVC12Number, bcastStormEntry=bcastStormEntry, swSyncSystemClockStatus=swSyncSystemClockStatus, bcastStormIfIndex=bcastStormIfIndex, trapCesopTdmStatus=trapCesopTdmStatus, trapStandbyMpuPresenceStatus=trapStandbyMpuPresenceStatus, swIndivAlarmOutUnitIndex=swIndivAlarmOutUnitIndex, trapErpsDomainName=trapErpsDomainName, trunkEntry=trunkEntry, igmpSnoopQueryTimeout=igmpSnoopQueryTimeout, switchInfoEntry=switchInfoEntry, igmpSnoopRouterCurrentVlanIndex=igmpSnoopRouterCurrentVlanIndex, swCesopBundlePktMismatchTrap=swCesopBundlePktMismatchTrap, trapVar=trapVar, lacpPortEntry=lacpPortEntry, PYSNMP_MODULE_ID=dmSwitchMIB, cfmProbeDmTable=cfmProbeDmTable, ipFilterSnmpMask=ipFilterSnmpMask, trapDestEntry=trapDestEntry, portSpeedDpxCfg=portSpeedDpxCfg, radiusMultipleServerAddress=radiusMultipleServerAddress, trapCesopBundleNextHopStatus=trapCesopBundleNextHopStatus, swHighCpuL3UsageNoMoreDetected=swHighCpuL3UsageNoMoreDetected, rateLimitMgt=rateLimitMgt, swStandbyMpuTrap=swStandbyMpuTrap, trunkMaxId=trunkMaxId, swIndivFanStatus=swIndivFanStatus, ipFilterSSHAddress=ipFilterSSHAddress, cpuActiveUsageEntry=cpuActiveUsageEntry, swFanStatusChangeTrap=swFanStatusChangeTrap, trunkIndex=trunkIndex, sysTimeMgt=sysTimeMgt, queuePortQueueIndex=queuePortQueueIndex, trapSensorGroup=trapSensorGroup, ipFilterSSHMask=ipFilterSSHMask, igmpSnoopMulticastCurrentPorts=igmpSnoopMulticastCurrentPorts, trapCesopBundleLocalStatus=trapCesopBundleLocalStatus, trapMulticastStormControlPPS=trapMulticastStormControlPPS, ddTransceiversTable=ddTransceiversTable, igmpSnoopMulticastCurrentVlanIndex=igmpSnoopMulticastCurrentVlanIndex, swHashHardware=swHashHardware, trapFuseStatus=trapFuseStatus)
