#
# PySNMP MIB module ZHNSYSMON (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHNSYSMON
# Produced by pysmi-0.3.4 at Wed May  1 15:46:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, Counter32, Counter64, Gauge32, MibIdentifier, ModuleIdentity, IpAddress, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Bits, NotificationType, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter32", "Counter64", "Gauge32", "MibIdentifier", "ModuleIdentity", "IpAddress", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Bits", "NotificationType", "Integer32", "ObjectIdentity")
DateAndTime, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TextualConvention", "DisplayString", "RowStatus")
zhoneWtn, = mibBuilder.importSymbols("Zhone", "zhoneWtn")
zhnSysMon = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1))
zhnSysMon.setRevisions(('2010-09-24 00:00', '2010-06-21 00:00', '2009-12-14 00:00', '2009-05-20 00:00', '2009-04-06 00:00', '2009-01-06 00:00', '2008-05-21 00:00', '2007-11-26 00:00', '2006-12-26 00:00', '2006-12-12 00:00', '2006-11-17 00:00', '2006-08-31 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhnSysMon.setRevisionsDescriptions(('Added zhnSysMonAlarmTypes: onBatteryPower2(33), batteryPowerLow2(34), replaceBattery2(35), batteryRemoved2(36), doorOpened(37)', 'Added zhnSysMonAlarmType varbind to the zhnSysMonAlarmSetEvent and zhnSysMonAlarmClearEvent NOTIFICATION-TYPEs.', 'Added new alarm types for CPEs with battery-backup units. Also added a new NOTIFICATION-TYPE for database configuration changes.', 'Change MODULE-IDENTITY to zhnSysMon and removed unsupported objects. Since this MIB has not yet been published, the unsupported objects were removed, rather than deprecated.', 'Changed pwLOFS alarm to pwLOP ', 'Added new alarm types for PW Clock Stability alarm', 'Added new alarm types for PW and T1/E1 interfaces', 'Changed Zhone OID to zhoneWtn OID', "Added: - line power config table - SysMon ready and line power config update notifications - internal use use 'wanData' alarm severity", 'zhnSysMonAlarmTable, zhnSysMonAlarmSetEvent, zhnSysMonAlarmClearEvent: - Removed zhnSysMonAlarmInstance, added zhnSysMonAlarmInterfaceName zhnSysMonTestTable, zhnSysMonTestStartEvent, zhnSysMonTestStopEvent: - Removed zhnSysMonTestInstance, added zhnSysMonTestInterfaceName', '- Added notification definitions, - Reworked Test Table, - Had to change MAX-ACCESS of objects included in notifications from not-accessible to read-create', 'Initial release.',))
if mibBuilder.loadTexts: zhnSysMon.setLastUpdated('201009240000Z')
if mibBuilder.loadTexts: zhnSysMon.setOrganization('Zhone Technologies MIB Working Group Other information about group editing the MIB')
if mibBuilder.loadTexts: zhnSysMon.setContactInfo('Zhone Technologies, Inc. Florida Design Center 8545 126th Avenue North Largo, FL 33773 www.zhone.com General Comments to: largo-mibwg-team@zhone.com')
if mibBuilder.loadTexts: zhnSysMon.setDescription('This MIB contains objects that are used by the System Monitoring function. ============================================================== == == == Copyright (C) 2007-2010 Zhone Technologies, Inc. == == == ==============================================================')
zhnSysMonNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 0))
zhnSysMonObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1))
zhnSysMonConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 2))
zhnSysMonAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 1), )
if mibBuilder.loadTexts: zhnSysMonAlarmTable.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonAlarmTable.setDescription('This table contains the current system alarms.')
zhnSysMonAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 1, 1), ).setIndexNames((0, "ZHNSYSMON", "zhnSysMonAlarmType"), (0, "ZHNSYSMON", "zhnSysMonAlarmSeverity"), (0, "ZHNSYSMON", "zhnSysMonAlarmInterfaceName"))
if mibBuilder.loadTexts: zhnSysMonAlarmEntry.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonAlarmEntry.setDescription('An entry in the zhnSysMonAlarmTable.')
zhnSysMonAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 99))).clone(namedValues=NamedValues(("tempThresholdExceeded", 1), ("mainPowerLoss", 2), ("secondaryPowerLoss", 3), ("lowPowerMode", 4), ("selftestFailed", 5), ("interfaceDown", 6), ("processFailed", 7), ("pwDown", 8), ("pwDeleted", 9), ("pwMisconnected", 10), ("pwLOP", 11), ("pwLateFrame", 12), ("pwMalformedFrame", 13), ("pwJitterBufferOverrun", 14), ("dsx1RcvYellow", 15), ("dsx1XmtYellow", 16), ("dsx1RcvAIS", 17), ("dsx1XmtAIS", 18), ("dsx1LossOfFrame", 19), ("dsx1LossOfSignal", 20), ("dsx1LoopbackState", 21), ("dsx1TestingState", 22), ("pwClockStability", 23), ("pwClockHoldover", 24), ("pwClockStabilityIdle", 25), ("pwClockStabilityAcquisition", 26), ("pwClockStabilityTracking1", 27), ("pwClockStabilityRecovery", 28), ("onBatteryPower", 29), ("batteryPowerLow", 30), ("replaceBattery", 31), ("batteryRemoved", 32), ("onBatteryPower2", 33), ("batteryPowerLow2", 34), ("replaceBattery2", 35), ("batteryRemoved2", 36), ("doorOpened", 37), ("other", 99)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnSysMonAlarmType.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonAlarmType.setDescription('The type of alarm currently posted.')
zhnSysMonAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("minor", 1), ("major", 2), ("critical", 3), ("wanData", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnSysMonAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonAlarmSeverity.setDescription('The severity of the alarm.')
zhnSysMonAlarmInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnSysMonAlarmInterfaceName.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonAlarmInterfaceName.setDescription('This object specifies the interface name (e.g., wlan0), or instance (e.g., sensor 1, primary power source 3) associated with the alarm.')
zhnSysMonAlarmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnSysMonAlarmDescription.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonAlarmDescription.setDescription('This object is a textual description of an alarm type.')
zhnSysMonAlarmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnSysMonAlarmRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonAlarmRowStatus.setDescription('The SNMP RowStatus of the current row.')
zhnSysMonTestTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 2), )
if mibBuilder.loadTexts: zhnSysMonTestTable.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTestTable.setDescription('This table contains the current system tests.')
zhnSysMonTestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 2, 1), ).setIndexNames((0, "ZHNSYSMON", "zhnSysMonTestType"), (0, "ZHNSYSMON", "zhnSysMonTestInterfaceName"))
if mibBuilder.loadTexts: zhnSysMonTestEntry.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTestEntry.setDescription('An entry in the zhnSysMonTestTable.')
zhnSysMonTestType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("loopback", 1), ("led", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnSysMonTestType.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTestType.setDescription('The type of test currently running.')
zhnSysMonTestInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnSysMonTestInterfaceName.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTestInterfaceName.setDescription('This object specifies the interface name (e.g., wlan0) associated with the test.')
zhnSysMonTestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnSysMonTestRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTestRowStatus.setDescription('The SNMP RowStatus of the current row.')
zhnSysMonTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 3), )
if mibBuilder.loadTexts: zhnSysMonTempSensorTable.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTempSensorTable.setDescription('This table contains the system temperature sensors.')
zhnSysMonTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 3, 1), ).setIndexNames((0, "ZHNSYSMON", "zhnSysMonTempSensorId"))
if mibBuilder.loadTexts: zhnSysMonTempSensorEntry.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTempSensorEntry.setDescription('An entry in the zhnSysMonTempSensorTable.')
zhnSysMonTempSensorId = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 9999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnSysMonTempSensorId.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTempSensorId.setDescription('This object specifies the reference index for each detected temperature sensor.')
zhnSysMonTempSensorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnSysMonTempSensorRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTempSensorRowStatus.setDescription('The SNMP RowStatus of the current row.')
zhnSysMonTempSensorCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhnSysMonTempSensorCurr.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTempSensorCurr.setDescription('The current temperature reported by the sensor in degrees Celcius.')
zhnSysMonTempSensorOS = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnSysMonTempSensorOS.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTempSensorOS.setDescription('The configured Overtemperature Shutdown (OS) for the sensor in degrees Celcius. This is the temperature alarm threshold')
zhnSysMonTempSensorHyst = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnSysMonTempSensorHyst.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTempSensorHyst.setDescription('The configured temperature hysteresis for the sensor in degrees Celcius. This is the temperature at which the alarm condition goes away.')
zhnSysMonTempSensorName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhnSysMonTempSensorName.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTempSensorName.setDescription('A textual string describing the sensor.')
zhnSysMonLinePowerTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 4), )
if mibBuilder.loadTexts: zhnSysMonLinePowerTable.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonLinePowerTable.setDescription('This table contains the line power configuration.')
zhnSysMonLinePowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 4, 1), ).setIndexNames((0, "ZHNSYSMON", "zhnSysMonLinePowerLineNumber"))
if mibBuilder.loadTexts: zhnSysMonLinePowerEntry.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonLinePowerEntry.setDescription('An entry in the zhnSysMonLinePowerTable.')
zhnSysMonLinePowerLineNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 9999))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnSysMonLinePowerLineNumber.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonLinePowerLineNumber.setDescription('This object specifies the line number for each primary power source.')
zhnSysMonLinePowerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnSysMonLinePowerStatus.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonLinePowerStatus.setDescription('The current power configuration status of the line identified by zhnSysMonLinePowerLineNumber. A status of enabled(1) indicates that the line is being monitored as a primary power source for the unit (i.e., an alarm is posted if it fails).')
zhnSysMonLinePowerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhnSysMonLinePowerRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonLinePowerRowStatus.setDescription('The SNMP RowStatus of the current row.')
zhnSysMonAlarmSetEvent = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 0, 1)).setObjects(("ZHNSYSMON", "zhnSysMonAlarmType"), ("ZHNSYSMON", "zhnSysMonAlarmSeverity"), ("ZHNSYSMON", "zhnSysMonAlarmInterfaceName"), ("ZHNSYSMON", "zhnSysMonAlarmDescription"))
if mibBuilder.loadTexts: zhnSysMonAlarmSetEvent.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonAlarmSetEvent.setDescription('A zhnSysMonAlarmSetEvent notification is sent when an alarm condition is detected by a system component. The System Monitor is informed of the alarm and generates the alarm set notification. The objects in the notification correspond to the values in a row instance of in the zhnSysMonAlarmTable.')
zhnSysMonAlarmClearEvent = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 0, 2)).setObjects(("ZHNSYSMON", "zhnSysMonAlarmType"), ("ZHNSYSMON", "zhnSysMonAlarmSeverity"), ("ZHNSYSMON", "zhnSysMonAlarmInterfaceName"), ("ZHNSYSMON", "zhnSysMonAlarmDescription"))
if mibBuilder.loadTexts: zhnSysMonAlarmClearEvent.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonAlarmClearEvent.setDescription('A zhnSysMonAlarmClearEvent notification is sent when an alarm condition is cleared by a system component. The System Monitor is informed of the alarm state and generates the alarm clear notification. The objects in the notification correspond to the values in a row instance of in the zhnSysMonAlarmTable.')
zhnSysMonTestStartEvent = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 0, 3)).setObjects(("ZHNSYSMON", "zhnSysMonTestType"), ("ZHNSYSMON", "zhnSysMonTestInterfaceName"))
if mibBuilder.loadTexts: zhnSysMonTestStartEvent.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTestStartEvent.setDescription('A zhnSysMonTestStartEvent notification is sent by any system component that begins a test. The objects in the notification correspond to the values in a row instance of in the zhnSysMonTestTable.')
zhnSysMonTestStopEvent = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 0, 4)).setObjects(("ZHNSYSMON", "zhnSysMonTestType"), ("ZHNSYSMON", "zhnSysMonTestInterfaceName"))
if mibBuilder.loadTexts: zhnSysMonTestStopEvent.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTestStopEvent.setDescription('A zhnSysMonTestStopEvent notification is sent by any system component that ends a test. The objects in the notification correspond to the values in a row instance of in the zhnSysMonTestTable.')
zhnSysMonTempSensorCfgUpdateEvent = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 0, 5)).setObjects(("ZHNSYSMON", "zhnSysMonTempSensorId"), ("ZHNSYSMON", "zhnSysMonTempSensorOS"), ("ZHNSYSMON", "zhnSysMonTempSensorHyst"))
if mibBuilder.loadTexts: zhnSysMonTempSensorCfgUpdateEvent.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonTempSensorCfgUpdateEvent.setDescription('A zhnSysMonTempCfgUpdateEvent notification is sent by the System Monitor whenever it reconfigures a temperature sensor. The objects in the notification correspond to the values in a row instance of in the zhnSysMonTempSensorTable.')
zhnSysMonLinePowerCfgUpdateEvent = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 0, 6)).setObjects(("ZHNSYSMON", "zhnSysMonLinePowerLineNumber"), ("ZHNSYSMON", "zhnSysMonLinePowerStatus"))
if mibBuilder.loadTexts: zhnSysMonLinePowerCfgUpdateEvent.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonLinePowerCfgUpdateEvent.setDescription('A zhnSysMonLinePowerCfgUpdateEvent notification is sent by the System Monitor whenever it reconfigures a power source line. The objects in the notification correspond to the values in a row instance of in the zhnSysMonLinePowerTable.')
zhnSysMonReadyEvent = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 0, 7))
if mibBuilder.loadTexts: zhnSysMonReadyEvent.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonReadyEvent.setDescription('A zhnSysMonReadyEvent notification is sent by the System Monitor whenever it has completed initialization and is ready to accept requests.')
zhnSysMonConfigChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 5, 1, 0, 8))
if mibBuilder.loadTexts: zhnSysMonConfigChangeEvent.setStatus('current')
if mibBuilder.loadTexts: zhnSysMonConfigChangeEvent.setDescription('A zhnSysMonConfigChangeEvent notification is generated whenever the persistent database is saved.')
mibBuilder.exportSymbols("ZHNSYSMON", zhnSysMonTempSensorTable=zhnSysMonTempSensorTable, zhnSysMonConformance=zhnSysMonConformance, zhnSysMonTempSensorCfgUpdateEvent=zhnSysMonTempSensorCfgUpdateEvent, zhnSysMonConfigChangeEvent=zhnSysMonConfigChangeEvent, zhnSysMonLinePowerRowStatus=zhnSysMonLinePowerRowStatus, zhnSysMonTempSensorId=zhnSysMonTempSensorId, zhnSysMonTempSensorEntry=zhnSysMonTempSensorEntry, zhnSysMonTestStopEvent=zhnSysMonTestStopEvent, zhnSysMonTempSensorHyst=zhnSysMonTempSensorHyst, zhnSysMonAlarmInterfaceName=zhnSysMonAlarmInterfaceName, zhnSysMonLinePowerCfgUpdateEvent=zhnSysMonLinePowerCfgUpdateEvent, zhnSysMonAlarmSeverity=zhnSysMonAlarmSeverity, zhnSysMonAlarmRowStatus=zhnSysMonAlarmRowStatus, zhnSysMonTestRowStatus=zhnSysMonTestRowStatus, zhnSysMonTempSensorOS=zhnSysMonTempSensorOS, zhnSysMonAlarmDescription=zhnSysMonAlarmDescription, zhnSysMonTestTable=zhnSysMonTestTable, zhnSysMonTestType=zhnSysMonTestType, zhnSysMonTestInterfaceName=zhnSysMonTestInterfaceName, zhnSysMonLinePowerLineNumber=zhnSysMonLinePowerLineNumber, zhnSysMonTestStartEvent=zhnSysMonTestStartEvent, zhnSysMonLinePowerEntry=zhnSysMonLinePowerEntry, zhnSysMonAlarmTable=zhnSysMonAlarmTable, zhnSysMonTempSensorRowStatus=zhnSysMonTempSensorRowStatus, zhnSysMonTempSensorCurr=zhnSysMonTempSensorCurr, zhnSysMonNotifications=zhnSysMonNotifications, PYSNMP_MODULE_ID=zhnSysMon, zhnSysMon=zhnSysMon, zhnSysMonLinePowerStatus=zhnSysMonLinePowerStatus, zhnSysMonAlarmClearEvent=zhnSysMonAlarmClearEvent, zhnSysMonLinePowerTable=zhnSysMonLinePowerTable, zhnSysMonAlarmSetEvent=zhnSysMonAlarmSetEvent, zhnSysMonAlarmEntry=zhnSysMonAlarmEntry, zhnSysMonReadyEvent=zhnSysMonReadyEvent, zhnSysMonTempSensorName=zhnSysMonTempSensorName, zhnSysMonAlarmType=zhnSysMonAlarmType, zhnSysMonObjects=zhnSysMonObjects, zhnSysMonTestEntry=zhnSysMonTestEntry)
