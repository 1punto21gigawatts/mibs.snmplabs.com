#
# PySNMP MIB module RDN-EVT-NOTIFICATIONS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RDN-EVT-NOTIFICATIONS
# Produced by pysmi-0.3.4 at Wed May  1 14:54:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
docsDevEvText, docsDevEvLevel, docsDevEvId = mibBuilder.importSymbols("DOCS-CABLE-DEVICE-MIB", "docsDevEvText", "docsDevEvLevel", "docsDevEvId")
docsIfDocsisBaseCapability, = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfDocsisBaseCapability")
ifPhysAddress, = mibBuilder.importSymbols("IF-MIB", "ifPhysAddress")
riverdelta, = mibBuilder.importSymbols("RDN-MIB", "riverdelta")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, ModuleIdentity, IpAddress, NotificationType, Counter32, iso, Counter64, Gauge32, MibIdentifier, Unsigned32, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "IpAddress", "NotificationType", "Counter32", "iso", "Counter64", "Gauge32", "MibIdentifier", "Unsigned32", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
rdnEvtNotifications = ModuleIdentity((1, 3, 6, 1, 4, 1, 4981, 0))
rdnEvtNotifications.setRevisions(('2008-08-08 00:00', '2004-02-20 00:00', '2003-11-05 00:00', '2003-07-09 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: rdnEvtNotifications.setRevisionsDescriptions(("Added Copyright Statement into MIB modules's description.", 'Correct the follow Object Identifiers: * rdnEvtDraRxUnexpectedMsgSubType is 2473919755 (DRA.11) * rdnEvtDraTmrInitFailure is 247391961 (DRA.17) * rdnEvtDraInvalidFuncParam is 2473919767 (DRA.23) * rdnEvtDraInvalidMsgParam is 2473919768 (DRA.24)', 'Updated the CONTACT-INFO.', 'Initial creation.',))
if mibBuilder.loadTexts: rdnEvtNotifications.setLastUpdated('200808080000Z')
if mibBuilder.loadTexts: rdnEvtNotifications.setOrganization('Motorola')
if mibBuilder.loadTexts: rdnEvtNotifications.setContactInfo('Motorola Customer Service 101 Tournament Drive Horsham, PA 19044 US Tel: +1 888 944 4357 Int Tel: +1 215 323 0044 Fax: +1 215 323 1502 Email: CPSSupport@Motorola.com')
if mibBuilder.loadTexts: rdnEvtNotifications.setDescription("MIB module for EVT Notifications. The following notifications are generated by EVTs. The Event Id for each event is represented as the last sub identifier for each notification. The DOCSIS Event Id(docsDevEvId) or last sub-identifier is calculated by adding the Motorola Event Id Base + Vendor Specific Event Base + + the EVT subsystem base + index (1-255). Example of DRM.56 'Spare CMTS Active' event identifier is: Vendor Event Id Base 0x80000000 Motorola Event Base + 0x13750000 DRM Evt subsystem Base + 0x 700 56 (in hex) + 0x 38 ---------- 0x93750738 hex or 2473920312 decimal The CLI command 'show evt' also displays the bases for the EVT subsystems that are registered. All EVT notifications contain the same set variable-bindings: docsDevEvLevel - this event's severity level. docsDevEvId - the DOSIS Event Id for this particular event, and also the last sub identifier for this notification. docsDevEvText - The DOCSIS Event Text for this event, ASCII printable text that is displayed for this event. docsIfDocsisBaseCapability - The current DOCSIS capabilities of this agent. ifPhysAddress - Not used at this time. This MIB just list a few of the notifications generated by EVT, specifically all EVTs notification with a severity level of critical or higher. Copyright (C) 2003, 2008 by Motorola, Inc. All rights reserved.")
rdnEvtMacrtrGetQIdFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473918722)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtMacrtrGetQIdFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtMacrtrGetQIdFailure.setDescription('This is an internal software error. The MACRTR task was unable to get the DOCSIS Redundancy Agent(DRA) task main message queue id.')
rdnEvtMacrtrUnknownCase = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473918723)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtMacrtrUnknownCase.setStatus('current')
if mibBuilder.loadTexts: rdnEvtMacrtrUnknownCase.setDescription('This is an internal software error. The MACRTR task was received an unexpected case, which is not handled.')
rdnEvtMacrtrMsgQReceiveFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473918724)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtMacrtrMsgQReceiveFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtMacrtrMsgQReceiveFailure.setDescription('This is an internal software error. The MACRTR task caught an error when it was receiving a message.')
rdnEvtMacrtrRdbDefineTableFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473918726)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtMacrtrRdbDefineTableFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtMacrtrRdbDefineTableFailure.setDescription('This is an internal software error. The MACRTR task was unable to register a table with the Redundancy Runtime Record Database(RDB) for CMTS Redundancy.')
rdnEvtMacrtrRxUnexpectedMsgType = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473918730)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtMacrtrRxUnexpectedMsgType.setStatus('current')
if mibBuilder.loadTexts: rdnEvtMacrtrRxUnexpectedMsgType.setDescription('This is an internal software error. The MACRTR task received an unexpected message type.')
rdnEvtMacrtrRegTaskMonFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473918731)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtMacrtrRegTaskMonFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtMacrtrRegTaskMonFailure.setDescription('This is an internal software error. The MACRTR task was unable to register with the task monitor.')
rdnEvtMacrtrInvalidFuncParam = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473918732)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtMacrtrInvalidFuncParam.setStatus('current')
if mibBuilder.loadTexts: rdnEvtMacrtrInvalidFuncParam.setDescription('This is an internal software error. The MACRTR task detected an invalid function parameter.')
rdnEvtMacrtrUnknownCmId = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473918735)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtMacrtrUnknownCmId.setStatus('current')
if mibBuilder.loadTexts: rdnEvtMacrtrUnknownCmId.setDescription('This is an internal software error. During a CMTS Switchover, the MACRTR task was unable to determine the cable modem Id when loading the Cable Modem runtime record. This notification is only generated on the BSR 64000.')
rdnEvtBpiLoadAuthRunRecFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473919513)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtBpiLoadAuthRunRecFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtBpiLoadAuthRunRecFailure.setDescription('This is an internal software error. The Baseline Privacy Interface(BPI) task was unable to load the Authorization Key runtime record during a CMTS Switchover.')
rdnEvtBpiLoadTekRunRecFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473919514)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtBpiLoadTekRunRecFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtBpiLoadTekRunRecFailure.setDescription('This is an internal software error. The Baseline Privacy Interface(BPI) task was unable to load the TEK runtime record during a CMTS Switchover.')
rdnEvtBpiLoadCmCertificateFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473919525)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtBpiLoadCmCertificateFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtBpiLoadCmCertificateFailure.setDescription('This is an internal software error. The Baseline Privacy Interface(BPI) task was unable to load the Cable Modem Certificate during a CMTS Switchover.')
rdnEvtDraTaskSpawnFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473919745)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDraTaskSpawnFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDraTaskSpawnFailure.setDescription('This is an internal software error. Unable to create the DOCSIS Redundancy Agent(DRA) task. This notification is only generated on the BSR 64000.')
rdnEvtDraMsgQCreateFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473919746)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDraMsgQCreateFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDraMsgQCreateFailure.setDescription("This is an internal software error. Unable to create the DRA task's message queue. This notification is only generated on the BSR 64000.")
rdnEvtDraMsgQReceiveFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473919747)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDraMsgQReceiveFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDraMsgQReceiveFailure.setDescription("This is an internal software error. DRA task's caught an error when it was receiving a message. This notification is only generated on the BSR 64000.")
rdnEvtDraRegTaskMonFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473919748)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDraRegTaskMonFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDraRegTaskMonFailure.setDescription('This is an internal software error. DRA task was unable to register with the task monitor. This notification is only generated on the BSR 64000.')
rdnEvtDraCreateRdbFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473919749)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDraCreateRdbFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDraCreateRdbFailure.setDescription('This is an internal software error. DRA task was unable to create a Redundancy Runtime Database for CMTS Redundancy. This notification is only generated on the BSR 64000.')
rdnEvtDraRxUnexpectedMsgType = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473919754)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDraRxUnexpectedMsgType.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDraRxUnexpectedMsgType.setDescription('This is an internal software error. DRA task received an unexpected message type. This notification is only generated on the BSR 64000.')
rdnEvtDraRxUnexpectedMsgSubType = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473919755)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDraRxUnexpectedMsgSubType.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDraRxUnexpectedMsgSubType.setDescription('This is an internal software error. DRA task received an unexpected message sub-type. This notification is only generated on the BSR 64000.')
rdnEvtDraTmrInitFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473919761)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDraTmrInitFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDraTmrInitFailure.setDescription('This is an internal software error. DRA was unable to create its timers. This notification is only generated on the BSR 64000.')
rdnEvtDraInvalidFuncParam = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473919767)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDraInvalidFuncParam.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDraInvalidFuncParam.setDescription('This is an internal software error. The DRA task detected an invalid function parameter. This notification is only generated on the BSR 64000.')
rdnEvtDraInvalidMsgParam = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473919768)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDraInvalidMsgParam.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDraInvalidMsgParam.setDescription('This is an internal software error. The DRA task detected an invalid message parameter. This notification is only generated on the BSR 64000.')
rdnEvtRdbMsgQCheckFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920006)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtRdbMsgQCheckFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtRdbMsgQCheckFailure.setDescription("This is an internal resource error. The is a major component failure with on of RDB's message queues, that may lead to system failures. Try correcting this problem by resetting this CMTS. This notification is only generated on the BSR 64000.")
rdnEvtRdbCreateDatabaseFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920025)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtRdbCreateDatabaseFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtRdbCreateDatabaseFailure.setDescription('This is an internal error. There is a major component failure creating a database for CMTS redundancy, this could lead to system failures. This notification is only generated on the BSR 64000.')
rdnEvtRdbInitDatabaseFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920026)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtRdbInitDatabaseFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtRdbInitDatabaseFailure.setDescription('This is an internal error. There is a major component failure initializing a database for CMTS redundancy, this could lead to system failures. This notification is only generated on the BSR 64000.')
rdnEvtRdbSemCreateFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920048)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtRdbSemCreateFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtRdbSemCreateFailure.setDescription('This is an internal software error. RDB task was unable to create a semaphore for mutual exclusion. This notification is only generated on the BSR 64000.')
rdnEvtRdbUnknownTableFromPeer = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920145)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtRdbUnknownTableFromPeer.setStatus('current')
if mibBuilder.loadTexts: rdnEvtRdbUnknownTableFromPeer.setDescription('Software versions may not be the same on the Primary and the Spare. This may cause a loss of data on replications of the redundancy databases and lead to serious problem on a switchover. Upgrade the software so that the Primary and Spare have matching software versions.')
rdnEvtRdbDefineTableNotEnoughMemory = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920174)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtRdbDefineTableNotEnoughMemory.setStatus('current')
if mibBuilder.loadTexts: rdnEvtRdbDefineTableNotEnoughMemory.setDescription('Not Enough Memory to register a new table with RDB. This could lead loss of data on replications of the redundancy databases and lead to serious problem on a switchovers.')
rdnEvtRdbMsgBufAllocFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920179)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtRdbMsgBufAllocFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtRdbMsgBufAllocFailure.setDescription('Not Enough Memory to create message buffers in RDB. This could lead loss of data on replications of the redundancy databases and lead to serious problem on a switchovers. Reset the card reporting this problem.')
rdnEvtRdbMemPoolAllocFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920185)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtRdbMemPoolAllocFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtRdbMemPoolAllocFailure.setDescription('Not Enough Memory to create storage for the runtime records. This could lead to loss of data on replications of the redundancy databases and lead to serious problems on a switchover.')
rdnEvtRdbMallocFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920186)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtRdbMallocFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtRdbMallocFailure.setDescription('Memory allocation for internal RDB structure reported an error. This card is most like running low on memory. Reset the card reporting this problem.')
rdnEvtDrmSpareCmtsActive = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920312)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDrmSpareCmtsActive.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDrmSpareCmtsActive.setDescription('This is reported when a Spare CMTS becomes active for a redundant primary CMTS in a BSR 64000 chassis.')
rdnEvtDrmFailedAutoTakeover = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920313)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDrmFailedAutoTakeover.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDrmFailedAutoTakeover.setDescription('This is reported when a Primary CMTS goes down, and an auto-takeover fails to make Spare CMTS become the active CMTS in a BSR 64000 chassis.')
rdnEvtDrmFailedAutoGiveback = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920314)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDrmFailedAutoGiveback.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDrmFailedAutoGiveback.setDescription('This is reported when a active Spare CMTS goes down, and an auto-giveback fails to make Primary CMTS become the active CMTS in a BSR 64000 chassis.')
rdnEvtDrmSpareXmittersRcvrsMismatch = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920315)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDrmSpareXmittersRcvrsMismatch.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDrmSpareXmittersRcvrsMismatch.setDescription('This is reported when Spare CMTS has fewer transmitters or receivers than a Primary CMTS. The Spare CMTS must have at least as many transmitters and receivers as each Primary CMTS in order to have successful CMTS switchovers in a BSR 64000 chassis.')
rdnEvtDrmSpareDtxActive = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920431)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDrmSpareDtxActive.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDrmSpareDtxActive.setDescription('This is reported when a Spare DTX becomes active for a redundant primary DTX in a BSR 64000 chassis.')
rdnEvtDrmFailedDtxAutoTakeover = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920432)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDrmFailedDtxAutoTakeover.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDrmFailedDtxAutoTakeover.setDescription('This is reported when a Primary DTX goes down, and an auto-takeover fails to make Spare DTX become the active DTX in a BSR 64000 chassis.')
rdnEvtDrmFailedDtxAutoGiveback = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920433)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDrmFailedDtxAutoGiveback.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDrmFailedDtxAutoGiveback.setDescription('This is reported when a active Spare DTX goes down, and an auto-giveback fails to make Primary DTX become the active DTX in a BSR 64000 chassis.')
rdnEvtDrmSpareDrxActive = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920441)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDrmSpareDrxActive.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDrmSpareDrxActive.setDescription('This is reported when a Spare DRX becomes active for a redundant primary DRX in a BSR 64000 chassis.')
rdnEvtDrmFailedDrxAutoTakeover = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920442)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDrmFailedDrxAutoTakeover.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDrmFailedDrxAutoTakeover.setDescription('This is reported when a Primary DRX goes down, and an auto-takeover fails to make Spare DRX become the active DRX in a BSR 64000 chassis.')
rdnEvtDrmFailedDrxAutoGiveback = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920443)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDrmFailedDrxAutoGiveback.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDrmFailedDrxAutoGiveback.setDescription('This is reported when a active Spare DRX goes down, and an auto-giveback fails to make Primary DRX become the active DRX in a BSR 64000 chassis.')
rdnEvtAccrtrRdbDefineTableFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920769)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtAccrtrRdbDefineTableFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtAccrtrRdbDefineTableFailure.setDescription('This is an internal software error. The Accrtr task was unable to register a table with the Redundancy Runtime Record Database(RDB) for CMTS Redundancy.')
rdnEvtAccrtrRdbNextFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920775)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtAccrtrRdbNextFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtAccrtrRdbNextFailure.setDescription('This is an internal software error. The Accrtr task was unable retrieve the next runtime record from Redundancy Runtime Record Database(RDB) for CMTS Redundancy.')
rdnEvtAccrtrNotFrozenLoad = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473920781)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtAccrtrNotFrozenLoad.setStatus('current')
if mibBuilder.loadTexts: rdnEvtAccrtrNotFrozenLoad.setDescription('This is an internal software error. The Accrtr task was not frozen when trying to load the runtime records for a particular cable modem during a CMTS Switchover.')
rdnEvtArdrtrRdbDefineTableFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473921025)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtArdrtrRdbDefineTableFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtArdrtrRdbDefineTableFailure.setDescription('This is an internal software error. The Address Resolution Database Run Time Records(Ardrtr) task was unable to register a table with the Redundancy Runtime Record Database(RDB) for CMTS Redundancy.')
rdnEvtArdrtrRdbNextFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473921031)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtArdrtrRdbNextFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtArdrtrRdbNextFailure.setDescription('This is an internal software error. The Address Resolution Database Run Time Records(Ardrtr) task was unable retrieve the next runtime record from Redundancy Runtime Record Database(RDB) for CMTS Redundancy.')
rdnEvtArdrtrNotFrozenLoad = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473921035)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtArdrtrNotFrozenLoad.setStatus('current')
if mibBuilder.loadTexts: rdnEvtArdrtrNotFrozenLoad.setDescription('This is an internal software error. The Address Resolution Database Run Time Records(Ardrtr) task was not frozen when trying to load the runtime records for a particular cable modem during a CMTS Switchover.')
rdnEvtArdrtrLoadFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473921039)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtArdrtrLoadFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtArdrtrLoadFailure.setDescription('This is an internal software error. The Address Resolution Database Run Time Records(Ardrtr) task was unable to load the runtime records do to an invalid cable modem Id during a CMTS Switchover.')
rdnEvtMacmgrValidateCmError = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473921541)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtMacmgrValidateCmError.setStatus('current')
if mibBuilder.loadTexts: rdnEvtMacmgrValidateCmError.setDescription("This is an internal software error. The Macmgr task received a 'Validate Cable Modem' message from BPI, which contained an invalid cable modem index.")
rdnEvtMacmgrInvalidateCmError = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473921568)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtMacmgrInvalidateCmError.setStatus('current')
if mibBuilder.loadTexts: rdnEvtMacmgrInvalidateCmError.setDescription("This is an internal software error. The Macmgr task received a 'Invalidate Cable Modem' message from BPI, which contained an invalid cable modem index.")
rdnEvtMacmgrNullPtr = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473921577)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtMacmgrNullPtr.setStatus('current')
if mibBuilder.loadTexts: rdnEvtMacmgrNullPtr.setDescription('This is an internal software error. The Macmgr task called a function with a null pointer.')
rdnEvtDocsifCmtsCmIndexAddFreeListFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473924360)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDocsifCmtsCmIndexAddFreeListFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDocsifCmtsCmIndexAddFreeListFailure.setDescription('This is an internal software error. Unable to add the docsIfCmtsCmStatusIndex to a list of indexes available to use.')
rdnEvtDocsifCmtsCmIndexDelFreeListFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473924362)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDocsifCmtsCmIndexDelFreeListFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDocsifCmtsCmIndexDelFreeListFailure.setDescription('This is an internal software error. Unable to remove the docsIfCmtsCmStatusIndex from a list of indexes available to use.')
rdnEvtDocsifCmtsCmIndexReloadFreeListFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473924371)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtDocsifCmtsCmIndexReloadFreeListFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtDocsifCmtsCmIndexReloadFreeListFailure.setDescription('This is an internal software error. Unable to reload the docsIfCmtsCmStatusIndex from a list of indexes available to use.')
rdnEvtUpcTaskSpawnFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473925121)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtUpcTaskSpawnFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtUpcTaskSpawnFailure.setDescription('This is an internal software error. Unable to create the Up Converter(UPC) task.')
rdnEvtUpcMsgQCreateFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473925122)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtUpcMsgQCreateFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtUpcMsgQCreateFailure.setDescription("This is an internal software error. Unable to create the UPC task's message queue.")
rdnEvtUpcMsgQReceiveFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473925123)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtUpcMsgQReceiveFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtUpcMsgQReceiveFailure.setDescription("This is an internal software error. UPC task's caught an error when it was receiving a message.")
rdnEvtUpcRegTaskMonFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473925124)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtUpcRegTaskMonFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtUpcRegTaskMonFailure.setDescription('This is an internal software error. UPC task was unable to register with the task monitor.')
rdnEvtUpcRxUnexpectedMsgType = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473925126)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtUpcRxUnexpectedMsgType.setStatus('current')
if mibBuilder.loadTexts: rdnEvtUpcRxUnexpectedMsgType.setDescription('This is an internal software error. UPC task received an unexpected message type.')
rdnEvtUpcRxUnexpectedMsgSubType = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473925127)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtUpcRxUnexpectedMsgSubType.setStatus('current')
if mibBuilder.loadTexts: rdnEvtUpcRxUnexpectedMsgSubType.setDescription('This is an internal software error. UPC task received an unexpected message sub-type.')
rdnEvtUpcSemCreateFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473925142)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtUpcSemCreateFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtUpcSemCreateFailure.setDescription('This is an internal software error. UPC task was unable to create a semaphore for mutual exclusion.')
rdnEvtSvcfloNullPtr = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473925891)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtSvcfloNullPtr.setStatus('current')
if mibBuilder.loadTexts: rdnEvtSvcfloNullPtr.setDescription('This is an internal software error. The SVCFLO task called a function will a null pointer.')
rdnEvtSvcfloWriteNextFlowTlvError = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473925895)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtSvcfloWriteNextFlowTlvError.setStatus('current')
if mibBuilder.loadTexts: rdnEvtSvcfloWriteNextFlowTlvError.setDescription('This is an internal software error. The SVCFLO task detected an error when trying to backup a Service Flow TLV for CMTS Redundancy. This TLV is not replicated to the peer CMTS, and could cause this modem to de-register on a CMTS switchover.')
rdnEvtSvcfloSidInsertFailure = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473925899)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtSvcfloSidInsertFailure.setStatus('current')
if mibBuilder.loadTexts: rdnEvtSvcfloSidInsertFailure.setDescription('This is an internal software error. The SVCFLO task was unable to store the cable modems Service Id (SID).')
rdnEvtUbshaCollectionRspMallocError = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473927699)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtUbshaCollectionRspMallocError.setStatus('current')
if mibBuilder.loadTexts: rdnEvtUbshaCollectionRspMallocError.setDescription('This is an internal software error. Failed to allocate memory during upstream channel sampling response.')
rdnEvtUbshaTaskSuspended = NotificationType((1, 3, 6, 1, 4, 1, 4981, 0, 2473927709)).setObjects(("DOCS-CABLE-DEVICE-MIB", "docsDevEvLevel"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvId"), ("DOCS-CABLE-DEVICE-MIB", "docsDevEvText"), ("DOCS-IF-MIB", "docsIfDocsisBaseCapability"), ("IF-MIB", "ifPhysAddress"))
if mibBuilder.loadTexts: rdnEvtUbshaTaskSuspended.setStatus('current')
if mibBuilder.loadTexts: rdnEvtUbshaTaskSuspended.setDescription('This is an internal software error. The Upstream Bandwidth Scheduler(UBS) task suspended itself. Reset CMTS to clear the error.')
mibBuilder.exportSymbols("RDN-EVT-NOTIFICATIONS", rdnEvtMacrtrGetQIdFailure=rdnEvtMacrtrGetQIdFailure, rdnEvtDraRegTaskMonFailure=rdnEvtDraRegTaskMonFailure, rdnEvtArdrtrRdbNextFailure=rdnEvtArdrtrRdbNextFailure, rdnEvtUpcTaskSpawnFailure=rdnEvtUpcTaskSpawnFailure, rdnEvtMacmgrInvalidateCmError=rdnEvtMacmgrInvalidateCmError, rdnEvtRdbSemCreateFailure=rdnEvtRdbSemCreateFailure, rdnEvtDraTmrInitFailure=rdnEvtDraTmrInitFailure, rdnEvtArdrtrRdbDefineTableFailure=rdnEvtArdrtrRdbDefineTableFailure, rdnEvtAccrtrRdbNextFailure=rdnEvtAccrtrRdbNextFailure, rdnEvtDrmFailedAutoTakeover=rdnEvtDrmFailedAutoTakeover, rdnEvtMacrtrMsgQReceiveFailure=rdnEvtMacrtrMsgQReceiveFailure, rdnEvtRdbMallocFailure=rdnEvtRdbMallocFailure, rdnEvtMacrtrRdbDefineTableFailure=rdnEvtMacrtrRdbDefineTableFailure, rdnEvtDraMsgQReceiveFailure=rdnEvtDraMsgQReceiveFailure, rdnEvtAccrtrNotFrozenLoad=rdnEvtAccrtrNotFrozenLoad, rdnEvtUpcRegTaskMonFailure=rdnEvtUpcRegTaskMonFailure, rdnEvtUpcRxUnexpectedMsgSubType=rdnEvtUpcRxUnexpectedMsgSubType, rdnEvtSvcfloSidInsertFailure=rdnEvtSvcfloSidInsertFailure, rdnEvtBpiLoadTekRunRecFailure=rdnEvtBpiLoadTekRunRecFailure, rdnEvtDrmFailedDtxAutoTakeover=rdnEvtDrmFailedDtxAutoTakeover, rdnEvtAccrtrRdbDefineTableFailure=rdnEvtAccrtrRdbDefineTableFailure, rdnEvtMacmgrValidateCmError=rdnEvtMacmgrValidateCmError, rdnEvtBpiLoadAuthRunRecFailure=rdnEvtBpiLoadAuthRunRecFailure, rdnEvtDrmSpareDrxActive=rdnEvtDrmSpareDrxActive, rdnEvtMacrtrInvalidFuncParam=rdnEvtMacrtrInvalidFuncParam, rdnEvtDraMsgQCreateFailure=rdnEvtDraMsgQCreateFailure, rdnEvtRdbMsgQCheckFailure=rdnEvtRdbMsgQCheckFailure, rdnEvtDrmSpareDtxActive=rdnEvtDrmSpareDtxActive, rdnEvtDraCreateRdbFailure=rdnEvtDraCreateRdbFailure, rdnEvtSvcfloWriteNextFlowTlvError=rdnEvtSvcfloWriteNextFlowTlvError, rdnEvtArdrtrNotFrozenLoad=rdnEvtArdrtrNotFrozenLoad, rdnEvtArdrtrLoadFailure=rdnEvtArdrtrLoadFailure, rdnEvtSvcfloNullPtr=rdnEvtSvcfloNullPtr, rdnEvtRdbMsgBufAllocFailure=rdnEvtRdbMsgBufAllocFailure, rdnEvtDrmFailedAutoGiveback=rdnEvtDrmFailedAutoGiveback, rdnEvtDrmSpareCmtsActive=rdnEvtDrmSpareCmtsActive, rdnEvtDrmFailedDrxAutoGiveback=rdnEvtDrmFailedDrxAutoGiveback, PYSNMP_MODULE_ID=rdnEvtNotifications, rdnEvtRdbInitDatabaseFailure=rdnEvtRdbInitDatabaseFailure, rdnEvtDocsifCmtsCmIndexDelFreeListFailure=rdnEvtDocsifCmtsCmIndexDelFreeListFailure, rdnEvtUpcMsgQCreateFailure=rdnEvtUpcMsgQCreateFailure, rdnEvtUbshaTaskSuspended=rdnEvtUbshaTaskSuspended, rdnEvtDraInvalidFuncParam=rdnEvtDraInvalidFuncParam, rdnEvtMacrtrRxUnexpectedMsgType=rdnEvtMacrtrRxUnexpectedMsgType, rdnEvtDraInvalidMsgParam=rdnEvtDraInvalidMsgParam, rdnEvtRdbUnknownTableFromPeer=rdnEvtRdbUnknownTableFromPeer, rdnEvtDrmSpareXmittersRcvrsMismatch=rdnEvtDrmSpareXmittersRcvrsMismatch, rdnEvtRdbMemPoolAllocFailure=rdnEvtRdbMemPoolAllocFailure, rdnEvtDrmFailedDrxAutoTakeover=rdnEvtDrmFailedDrxAutoTakeover, rdnEvtDocsifCmtsCmIndexReloadFreeListFailure=rdnEvtDocsifCmtsCmIndexReloadFreeListFailure, rdnEvtDrmFailedDtxAutoGiveback=rdnEvtDrmFailedDtxAutoGiveback, rdnEvtUpcSemCreateFailure=rdnEvtUpcSemCreateFailure, rdnEvtDraRxUnexpectedMsgSubType=rdnEvtDraRxUnexpectedMsgSubType, rdnEvtUbshaCollectionRspMallocError=rdnEvtUbshaCollectionRspMallocError, rdnEvtDraTaskSpawnFailure=rdnEvtDraTaskSpawnFailure, rdnEvtMacrtrRegTaskMonFailure=rdnEvtMacrtrRegTaskMonFailure, rdnEvtDocsifCmtsCmIndexAddFreeListFailure=rdnEvtDocsifCmtsCmIndexAddFreeListFailure, rdnEvtUpcRxUnexpectedMsgType=rdnEvtUpcRxUnexpectedMsgType, rdnEvtBpiLoadCmCertificateFailure=rdnEvtBpiLoadCmCertificateFailure, rdnEvtMacrtrUnknownCase=rdnEvtMacrtrUnknownCase, rdnEvtNotifications=rdnEvtNotifications, rdnEvtMacmgrNullPtr=rdnEvtMacmgrNullPtr, rdnEvtDraRxUnexpectedMsgType=rdnEvtDraRxUnexpectedMsgType, rdnEvtRdbDefineTableNotEnoughMemory=rdnEvtRdbDefineTableNotEnoughMemory, rdnEvtMacrtrUnknownCmId=rdnEvtMacrtrUnknownCmId, rdnEvtRdbCreateDatabaseFailure=rdnEvtRdbCreateDatabaseFailure, rdnEvtUpcMsgQReceiveFailure=rdnEvtUpcMsgQReceiveFailure)
