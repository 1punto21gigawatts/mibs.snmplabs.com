#
# PySNMP MIB module CADANT-L2VPN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CADANT-L2VPN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:46:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
cadL2vpn, = mibBuilder.importSymbols("CADANT-PRODUCTS-MIB", "cadL2vpn")
DocsL2vpnIfList, clabProjDocsis = mibBuilder.importSymbols("CLAB-DEF-MIB", "DocsL2vpnIfList", "clabProjDocsis")
docsIfCmtsCmStatusIndex, = mibBuilder.importSymbols("DOCS-IF-MIB", "docsIfCmtsCmStatusIndex")
DocsL2vpnIdentifier, DocsNsiEncapSubtype, docsL2vpnIdx, DocsL2vpnIndex = mibBuilder.importSymbols("DOCS-L2VPN-MIB", "DocsL2vpnIdentifier", "DocsNsiEncapSubtype", "docsL2vpnIdx", "DocsL2vpnIndex")
docsQosServiceFlowId, docsQosPktClassId = mibBuilder.importSymbols("DOCS-QOS3-MIB", "docsQosServiceFlowId", "docsQosPktClassId")
InterfaceIndex, InterfaceIndexOrZero, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "InterfaceIndexOrZero", "ifIndex")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
NotificationType, TimeTicks, Bits, Integer32, Counter32, IpAddress, Unsigned32, ModuleIdentity, MibIdentifier, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "Bits", "Integer32", "Counter32", "IpAddress", "Unsigned32", "ModuleIdentity", "MibIdentifier", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64")
TruthValue, TextualConvention, DisplayString, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "MacAddress", "RowStatus")
cadL2vpnMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1))
cadL2vpnMIB.setRevisions(('2015-10-01 00:00', '2015-07-07 00:00', '2015-06-24 00:00', '2015-06-22 00:00', '2015-03-09 00:00', '2014-12-02 00:00', '2013-09-23 00:00', '2013-09-10 00:00', '2009-08-03 00:00', '2009-06-25 00:00', '2009-06-23 00:00', '2009-06-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cadL2vpnMIB.setRevisionsDescriptions(('Added CadNsiEncapValue', 'Changed mib object name from cadL2vpnInterfaceIpMcastFwdToCpeEnabled to cadL2vpnInterfaceIpIgmpSnooping', 'Changed the MAX-ACCESS of cadL2vpnInterfaceIpMcastFwdToCpeEnabled from read-write to read-create', 'Added cadL2vpnInterfaceIpMcastFwdToCpeEnabled', 'Added cadL2vpnGlobalTpid', 'Added cadL2vpnProvisionedCmTable and cadL2vpnProvisionedCmEsafeTable.', 'Added cadL2vpnDenyForwardingMplsPeerIp to cadL2vpnDenyForwardingEntry. Added cadL2vpnMplsPeerIpToCmTable', 'Remove cadL2vpnCmToInstanceIdTable and cadL2vpnCmStatsTable. Added cerL2vpnCmVpnIdTable and cerL2vpnCmStatsTable. Added cadL2vpnInstanceIdVpnId to cadL2vpnInstanceIdToCmEntry', 'change syntax of cadL2vpnVlanIdRangeNsiEncapSubtype to read-create.', 'rename cadl2vpnInstanceVlanId to cadL2vpnInstanceVpnId. rename cadL2vpnVlanIdx to cadL2vpnVpnIdx.', 'add cadL2vpnDenyForwardingTable, change syntax of cadL2vpnCmForwardingEnabled from read-write to read-only change cadL2vpnCmStatsEntry to cadL2vpnCmStatusEntry', 'initial version',))
if mibBuilder.loadTexts: cadL2vpnMIB.setLastUpdated('201510010000Z')
if mibBuilder.loadTexts: cadL2vpnMIB.setOrganization('Arris International, Inc.')
if mibBuilder.loadTexts: cadL2vpnMIB.setContactInfo('Arris Technical Support Postal: ARRIS E-Mail: support@arrisi.com')
if mibBuilder.loadTexts: cadL2vpnMIB.setDescription('This is the management MIB contains Cadant proprietary L2VPN MIB information. Copyright 2009 Arris International, Inc. All rights reserved.')
class CadNsiEncapValue(TextualConvention, OctetString):
    description = 'The encapsulation value for L2VPN forwarded packets on NSI ports. The value of an object of this type depends on the value of an associated object of type DocsEncapSubtype: other(1): vendor specific, ieee8021q(2): 802.1Q tag with VLAN ID in lower 12 bits, ieee8021ad(3): pair of 12-bit values with service provider in 12 most significant bits of the 24-bit value and customer VLAN ID in the 12 least significant bits of the 24-bit value, mpls(4): must be zero length string, l2tpv3(5): must be zero length string.'
    status = 'current'

cadL2vpnMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1))
cadL2vpnParams = MibIdentifier((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 1))
cadL2vpnPrimaryNetworkIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 1, 1), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadL2vpnPrimaryNetworkIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnPrimaryNetworkIfIndex.setDescription('ifIndex of the primary physical netowrk interface used for L2VPN traffic. Zero if no primary L2VPN network interface is configured.')
cadL2vpnSecondaryNetworkIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadL2vpnSecondaryNetworkIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnSecondaryNetworkIfIndex.setDescription('ifIndex of the secondary physical netowrk interface used for L2VPN traffic. Zero if no secondary L2VPN network interface is configured.')
cadL2vpnActiveNetworkIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadL2vpnActiveNetworkIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnActiveNetworkIfIndex.setDescription('ifIndex of the currently active physical netowrk interface being used for L2VPN traffic. Zero if no active L2VPN network interface is up.')
cadL2vpnForwardingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 1, 4), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadL2vpnForwardingEnabled.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnForwardingEnabled.setDescription('The global L2VPN forwarding state. The default is false(2).')
cadL2vpnCmCapEsafeIdentRequired = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 1, 5), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadL2vpnCmCapEsafeIdentRequired.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnCmCapEsafeIdentRequired.setDescription('When true eSAFE identity TLVs are required in REG-REQ message otherwise the CM registration will be rejected if L2VPN TLVs are present. When false a CM may register without these capability TLVs.')
cadL2vpnCmCapDutFilterRequired = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 1, 6), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadL2vpnCmCapDutFilterRequired.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnCmCapDutFilterRequired.setDescription('When true Downstream Unencrypted Traffic (DUT) filter capability TLV is required in REG-REQ message, otherwise the CM registration will be rejected if L2VPN TLVs are present. When false a CM may register without this capability TLV.')
cadL2vpnGlobalTpid = MibScalar((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tpid8100", 1), ("tpid88a8", 2), ("tpid9100", 3))).clone('tpid8100')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cadL2vpnGlobalTpid.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnGlobalTpid.setDescription('802.1QinQ tpid ethertype value.')
cadL2vpnInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 2), )
if mibBuilder.loadTexts: cadL2vpnInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnInterfaceTable.setDescription('L2VPN interface table contains an entry for each cable MAC interface declared for use with L2VPNs. ')
cadL2vpnInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 2, 1), ).setIndexNames((0, "CADANT-L2VPN-MIB", "cadL2vpnInterfaceIfIndex"))
if mibBuilder.loadTexts: cadL2vpnInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnInterfaceEntry.setDescription('each interface must be a unique DOCSIS 3.0 cable MAC interface')
cadL2vpnInterfaceIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 2, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: cadL2vpnInterfaceIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnInterfaceIfIndex.setDescription('Cable MAC layer ifIndex for this interface.')
cadL2vpnInterfaceIpIgmpSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 2, 1, 2), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnInterfaceIpIgmpSnooping.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnInterfaceIpIgmpSnooping.setDescription('If set to true(1), this attribute enables the L2VPN IGMP Snooping feature on this cable-mac interface. If set to false(2), this attribute disables the L2VPN IGMP Snooping feature on this cable-mac interface. The default is false(2).')
cadL2vpnInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnInterfaceRowStatus.setDescription('Row Status for this table.')
cadL2vpnVlanIdRangeTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 3), )
if mibBuilder.loadTexts: cadL2vpnVlanIdRangeTable.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnVlanIdRangeTable.setDescription('VPN VLANid range table. Contains ranges of outer VLANids declared for use with L2VPNs and L3VPNs.')
cadL2vpnVlanIdRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 3, 1), ).setIndexNames((0, "CADANT-L2VPN-MIB", "cadL2vpnVlanIdRangeBegin"), (0, "CADANT-L2VPN-MIB", "cadL2vpnVlanIdRangeEnd"))
if mibBuilder.loadTexts: cadL2vpnVlanIdRangeEntry.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnVlanIdRangeEntry.setDescription('contain a VPN VLANid range entry')
cadL2vpnVlanIdRangeBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094)))
if mibBuilder.loadTexts: cadL2vpnVlanIdRangeBegin.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnVlanIdRangeBegin.setDescription('Begin range from VLANid.')
cadL2vpnVlanIdRangeEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094)))
if mibBuilder.loadTexts: cadL2vpnVlanIdRangeEnd.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnVlanIdRangeEnd.setDescription('End range of VLANid. Must be greater than or equal to cadL2vpnVlanIdRangeBegin.')
cadL2vpnVlanIdRangeNsiEncapSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("single-qtag", 1), ("dual-qtag", 2), ("l3-vrf", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnVlanIdRangeNsiEncapSubtype.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnVlanIdRangeNsiEncapSubtype.setDescription('NSI Encapsulation subtype of the VLANid.')
cadL2vpnVlanIdRangeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnVlanIdRangeRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnVlanIdRangeRowStatus.setDescription('Row Status for this table.')
cadL2vpnInstanceIdToCmTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 4), )
if mibBuilder.loadTexts: cadL2vpnInstanceIdToCmTable.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnInstanceIdToCmTable.setDescription('L2 VLANid instance table.')
cadL2vpnInstanceIdToCmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 4, 1), ).setIndexNames((0, "CADANT-L2VPN-MIB", "cadL2vpnInstanceId"))
if mibBuilder.loadTexts: cadL2vpnInstanceIdToCmEntry.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnInstanceIdToCmEntry.setDescription('contain a L2VPN Instance entry')
cadL2vpnInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215)))
if mibBuilder.loadTexts: cadL2vpnInstanceId.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnInstanceId.setDescription('The 24-bit L2VPN instance identifier composed from 2 12-bit VLANids assigned to the L2VPN instance.')
cadL2vpnInstanceIdVlanIdOuter = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadL2vpnInstanceIdVlanIdOuter.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnInstanceIdVlanIdOuter.setDescription('Outer VLANid of this L2VPN Instance.')
cadL2vpnInstanceIdVlanIdInner = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadL2vpnInstanceIdVlanIdInner.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnInstanceIdVlanIdInner.setDescription('Inner VLANid of this L2VPN Instance.')
cadL2vpnInstanceIdCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 4, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadL2vpnInstanceIdCmMac.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnInstanceIdCmMac.setDescription('CM MAC address of this L2VPN Instance.')
cadL2vpnInstanceIdVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 4, 1, 5), DocsL2vpnIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadL2vpnInstanceIdVpnId.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnInstanceIdVpnId.setDescription('VPN ID of this L2VPN Instance.')
cadL2vpnIdxToCmVpnInstTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 6), )
if mibBuilder.loadTexts: cadL2vpnIdxToCmVpnInstTable.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnIdxToCmVpnInstTable.setDescription('This table contains all the VPN instances ordered by VPN Index, CM MAC and VPN Instance ID.')
cadL2vpnIdxToCmVpnInstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 6, 1), ).setIndexNames((0, "CADANT-L2VPN-MIB", "cadL2vpnVpnIdx"), (0, "CADANT-L2VPN-MIB", "cerL2vpnCmMac"), (0, "CADANT-L2VPN-MIB", "cerL2vpnInstanceId"))
if mibBuilder.loadTexts: cadL2vpnIdxToCmVpnInstEntry.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnIdxToCmVpnInstEntry.setDescription('contain a L2VPN Instance entry')
cadL2vpnVpnIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 6, 1, 1), DocsL2vpnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadL2vpnVpnIdx.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnVpnIdx.setDescription('An internally assigned index value for a known VLAD ID. Refer docsL2vpnIdx.')
cadL2vpnPktClassTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 8), )
if mibBuilder.loadTexts: cadL2vpnPktClassTable.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnPktClassTable.setDescription('This table provides the L2VPN-specific objects for packet classifiers that apply to only L2VPN traffic. The indices of this table are a subset of the indices of classifiers in docsQosPktClassTable.')
cadL2vpnPktClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "DOCS-QOS3-MIB", "docsQosServiceFlowId"), (0, "DOCS-QOS3-MIB", "docsQosPktClassId"))
if mibBuilder.loadTexts: cadL2vpnPktClassEntry.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnPktClassEntry.setDescription('An entry in this table extends a single row of docsQosPktClassTable for a rule that applies only to downstream L2VPN forwarded packets. The index ifIndex is an ifType of docsCableMaclayer(127).')
cadL2vpnPktClassL2vpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 8, 1, 1), DocsL2vpnIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadL2vpnPktClassL2vpnId.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnPktClassL2vpnId.setDescription('The locally assigned L2VPN index corresponding to the VPN Identifier subtype of a Downstream Classifier L2VPN Encoding.')
cadL2vpnPktClassUserPriRangeLow = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 8, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadL2vpnPktClassUserPriRangeLow.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnPktClassUserPriRangeLow.setDescription('The lower priority of the user Priority Range subtype of a Downstream Classifier L2VPN Encoding. If the subtype was omitted, this object has value 0.')
cadL2vpnPktClassUserPriRangeHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 8, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadL2vpnPktClassUserPriRangeHigh.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnPktClassUserPriRangeHigh.setDescription('The higher priority of the user Priority Range subtype of a Downstream Classifier L2VPN Encoding. If the subtype was omitted, this object has value 7.')
cadL2vpnPktClassCMIM = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 8, 1, 4), DocsL2vpnIfList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadL2vpnPktClassCMIM.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnPktClassCMIM.setDescription('The Cable Modem Interface Mask (CMIM) signaled in a Packet Classifier Encoding. In a Downstream Packet Classifier Encoding, a specified CMIM value restricts the classifier to match packets with a Destination MAC address corresponding to the interfaces indicated in the CMIM mask. The eCM self and any eSAFE interface bits correspond to the individual eCM and eSAFE host MAC addresses. In an Upstream Packet Classifier encoding, a specified CMIM value restricts the classifier to match packets with an ingress bridge port interface matching the bits in the CMIM value. If the CMIM subtype was omitted, this object should be reported as a zero length octet string.')
cadL2vpnPktClassVendorSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 8, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cadL2vpnPktClassVendorSpecific.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnPktClassVendorSpecific.setDescription('This object provides the set of configured Vendor Specific subtypes within a Packet Classifier Encoding for a CM. If no Vendor Specific subtype was specified, this object is a zero length octet string. If one or more Vendor Specific subtype parameters was specified, this object represents the concatenation of all such subtypes.')
cadL2vpnDenyForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 9), )
if mibBuilder.loadTexts: cadL2vpnDenyForwardingTable.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnDenyForwardingTable.setDescription('This table provides the L2VPN-specific deny data forwarding list. The index of this table is an arbitrary number.')
cadL2vpnDenyForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 9, 1), ).setIndexNames((0, "CADANT-L2VPN-MIB", "cadL2vpnDenyForwardingIndex"))
if mibBuilder.loadTexts: cadL2vpnDenyForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnDenyForwardingEntry.setDescription('An entry in this table can be a VPN Id, CM MAC or VLAN id. When a row is created or removed, SCM will set the associated VLANid cadL2vpnCmForwardingEnabled to true(1) or false(2).')
cadL2vpnDenyForwardingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cadL2vpnDenyForwardingIndex.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnDenyForwardingIndex.setDescription('The index of this table.')
cadL2vpnDenyForwardingVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnDenyForwardingVpnId.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnDenyForwardingVpnId.setDescription('When it is specified, data forwarding of all the VLANid within this VPN ID will be disabled.')
cadL2vpnDenyForwardingInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnDenyForwardingInstanceId.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnDenyForwardingInstanceId.setDescription('When it is specified, data forwarding of this VLAN instance will be disabled.')
cadL2vpnDenyForwardingCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 9, 1, 4), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnDenyForwardingCmMac.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnDenyForwardingCmMac.setDescription('When it is specified, data forwarding of all the VLANid within this CM will be disabled.')
cadL2vpnDenyForwardingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 9, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnDenyForwardingRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnDenyForwardingRowStatus.setDescription('row status of this table entry.')
cadL2vpnDenyForwardingMplsPeerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 9, 1, 6), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnDenyForwardingMplsPeerIp.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnDenyForwardingMplsPeerIp.setDescription('When it is specified, data forwarding of all the L2VPN Instances that have MPLS PW going to this peer will be disabled')
cerL2vpnCmVpnIdTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10), )
if mibBuilder.loadTexts: cerL2vpnCmVpnIdTable.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmVpnIdTable.setDescription('The L2VPN CM table.')
cerL2vpnCmVpnIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1), ).setIndexNames((0, "CADANT-L2VPN-MIB", "cerL2vpnCmMac"), (0, "CADANT-L2VPN-MIB", "cerL2vpnCmVpnId"), (0, "CADANT-L2VPN-MIB", "cerL2vpnCmNsiEncapSubtype"))
if mibBuilder.loadTexts: cerL2vpnCmVpnIdEntry.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmVpnIdEntry.setDescription('An entry is indexed by Cable Modem MAC address and L2VPN VPN ID.')
cerL2vpnCmMac = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 1), MacAddress())
if mibBuilder.loadTexts: cerL2vpnCmMac.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmMac.setDescription('The CM MAC address hosting this this L2VPN Instance.')
cerL2vpnCmVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 2), DocsL2vpnIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmVpnId.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmVpnId.setDescription('An externally configured octet string that identifies an L2VPN.')
cerL2vpnCmNsiEncapSubtype = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 3), DocsNsiEncapSubtype()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmNsiEncapSubtype.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmNsiEncapSubtype.setDescription('The General Encapsulation Information (GEI) subtype of the Network System Interface (NSI) encapsulation configured for the CM.')
cerL2vpnIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 4), DocsL2vpnIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnIdx.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnIdx.setDescription('An internally assigned index value for a known VLAD ID. Refer docsL2vpnIdx.')
cerL2vpnCmForwardingEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmForwardingEnabled.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmForwardingEnabled.setDescription('L2VPN forwarding state for all L2VPN instances hosted by this CM and VLAN instance.')
cerL2vpnInstanceId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215)))
if mibBuilder.loadTexts: cerL2vpnInstanceId.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnInstanceId.setDescription('The 24-bit L2VPN instance identifier composed from 2 12-bit VLANids assigned to the L2VPN instance.')
cerL2vpnInstanceOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 4094), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnInstanceOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnInstanceOuterVlanId.setDescription('L2VPN Instance outer VLAN id.')
cerL2vpnInstanceInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnInstanceInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnInstanceInnerVlanId.setDescription('L2VPN Instance inner VLAN id.')
cerL2vpnInstanceNsiEncapSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("not-applicable", 0), ("single-qtag", 1), ("dual-qtag", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnInstanceNsiEncapSubType.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnInstanceNsiEncapSubType.setDescription('NSI Encapsulation subtype.')
cerL2vpnCmCompliantCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmCompliantCapability.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmCompliantCapability.setDescription('Whether an L2VPN CM is compliant with DOCSIS specification. Refer docsL2vpnCmCompliantCapability.')
cerL2vpnCmDutFilteringCapability = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmDutFilteringCapability.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmDutFilteringCapability.setDescription('Whether an L2VPN forwarding CM is capable of Downstream Unencrypted Traffic(DUT) Filtering. Refer docsL2vpnCmDutFilteringCapability.')
cerL2vpnCmDutCMIM = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 12), DocsL2vpnIfList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmDutCMIM.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmDutCMIM.setDescription('Reports the value in a per-CM L2VPN Encoding for DUT Cable Modem Interface Mask(CMIM).')
cerL2vpnCmDhcpSnooping = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 13), DocsL2vpnIfList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmDhcpSnooping.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmDhcpSnooping.setDescription('Reports the value of the Enable DHCP Snooping subtype of a top-level L2VPN Encoding.')
cerL2vpnVpnCmCMIM = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 14), DocsL2vpnIfList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnVpnCmCMIM.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnVpnCmCMIM.setDescription('A Cable Modem Interface Mask represents a set of MAC bridge interfaces within the CM.')
cerL2vpnVpnCmIndividualSAID = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16383))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnVpnCmIndividualSAID.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnVpnCmIndividualSAID.setDescription('The BPI+ Security Association ID in which traffic intended for point-to-point forwarding through an individual CM is forwarded. If the CMTS does not allocate an individual SAID for multipoint forwarding (as is recommended),it MUST report this object as zero.')
cerL2vpnVpnCmVendorSpecific = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 16), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnVpnCmVendorSpecific.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnVpnCmVendorSpecific.setDescription('This object encodes the concatenation of all Vendor Specific Subtype encodings that appeared in any registration per-CM L2VPN Encoding associated with this entry.')
cerL2vpnCmNsiEncapValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 17), CadNsiEncapValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmNsiEncapValue.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmNsiEncapValue.setDescription('The encapsulation value for L2VPN forwarded packets on NSI ports.')
cerL2vpnMplsAcId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048575))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnMplsAcId.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnMplsAcId.setDescription('The 20 bit value of the MPLS AC ID. Assigned by the the UCAM. Has to be unique within a CMTS chassis.')
cerL2vpnCmMplsPwId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmMplsPwId.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmMplsPwId.setDescription(' This is the MPLS PW ID (4byte long non-zero).')
cerL2vpnCmMplsPeerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 20), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmMplsPeerAddrType.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmMplsPeerAddrType.setDescription('This is the MPLS Peer Address Type. Only IPv4(1) or IPv6(2) will be supported. unknown(0) ipv4(1) ipv6(2) ipv4z(3) ipv6z(4) dns(16)')
cerL2vpnCmMplsPeerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 21), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmMplsPeerAddr.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmMplsPeerAddr.setDescription('This is the IP address of the MPLS Peer. IPv4 and IPv6 addresses are supported.')
cerL2vpnCmBgpVpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmBgpVpnId.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmBgpVpnId.setDescription('This is the BGP VPN ID for L2VPN with BGP auto-discovery and LDP signaling (4byte long non-zero).')
cerL2vpnCmBgpRd = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmBgpRd.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmBgpRd.setDescription('BGP Route Distinguisher for L2VPN BGP auto-discovery (8 bytes long)')
cerL2vpnCmBgpRtImport = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmBgpRtImport.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmBgpRtImport.setDescription('BGP Route Target Import for L2VPN BGP auto-discovery (8 bytes long)')
cerL2vpnCmBgpRtExport = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmBgpRtExport.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmBgpRtExport.setDescription('BGP Route Target Export for L2VPN BGP auto-discovery (8 bytes long)')
cerL2vpnCmBgpCeVeId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 10, 1, 26), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmBgpCeVeId.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmBgpCeVeId.setDescription('This is the 2 byte long CE-ID/VE-ID for L2VPN with BGP auto-discovery and signaling.')
cerL2vpnCmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 11), )
if mibBuilder.loadTexts: cerL2vpnCmStatsTable.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmStatsTable.setDescription('This table is used to populate data to docsL2vpnCmStatusEntry.')
cerL2vpnCmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 11, 1), ).setIndexNames((0, "CADANT-L2VPN-MIB", "cerL2vpnCmMac"), (0, "CADANT-L2VPN-MIB", "cerL2vpnCmVpnId"), (0, "CADANT-L2VPN-MIB", "cerL2vpnCmNsiEncapSubtype"))
if mibBuilder.loadTexts: cerL2vpnCmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmStatsEntry.setDescription('An entry is indexed by Cable Modem MAC address and VPN ID.')
cerL2vpnCmStatsUpstreamPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 11, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmStatsUpstreamPkts.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmStatsUpstreamPkts.setDescription("The number of L2vpn-forwarded packets received from this instance's Cable Modem on this instance's L2VPN.")
cerL2vpnCmStatsUpstreamBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 11, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmStatsUpstreamBytes.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmStatsUpstreamBytes.setDescription("The number of L2vpn-forwarded bytes received from this instance's Cable Modem on this instance's L2VPN.")
cerL2vpnCmStatsUpstreamDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmStatsUpstreamDiscards.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmStatsUpstreamDiscards.setDescription("The number of L2-forwarded packets discarded from this instance's Cable Modem on this instance's VPN.")
cerL2vpnCmStatsDownstreamPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmStatsDownstreamPkts.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmStatsDownstreamPkts.setDescription("The number of L2-forwarded packets transmitted to this instance's Cable Modem on this instance's VPN.")
cerL2vpnCmStatsDownstreamBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 11, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmStatsDownstreamBytes.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmStatsDownstreamBytes.setDescription("The number of L2-forwarded bytes transmitted to this instance's Cable Modem on this instance's VPN.")
cerL2vpnCmStatsDownstreamDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmStatsDownstreamDiscards.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmStatsDownstreamDiscards.setDescription("The number of L2-forwarded packets that were discarded before they could be transmitted to this instance's Cable Modem on this instance's VPN.")
cadL2vpnMplsPeerIpToCmTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 12), )
if mibBuilder.loadTexts: cadL2vpnMplsPeerIpToCmTable.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnMplsPeerIpToCmTable.setDescription('This table contains all MPLS L2VPN instances with no auto-discovery ordered by MPLS Peer IP, CM MAC and VPN ID.')
cadL2vpnMplsPeerIpToCmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 12, 1), ).setIndexNames((0, "CADANT-L2VPN-MIB", "cerL2vpnCmMplsPeerAddrType"), (0, "CADANT-L2VPN-MIB", "cerL2vpnCmMplsPeerIpAddress"), (0, "CADANT-L2VPN-MIB", "cerL2vpnCmMac"), (0, "CADANT-L2VPN-MIB", "cerL2vpnCmVpnId"), (0, "CADANT-L2VPN-MIB", "cerL2vpnCmNsiEncapSubtype"))
if mibBuilder.loadTexts: cadL2vpnMplsPeerIpToCmEntry.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnMplsPeerIpToCmEntry.setDescription('contain a L2VPN Instance entry')
cerL2vpnCmMplsPeerIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 12, 1, 2), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cerL2vpnCmMplsPeerIpAddress.setStatus('current')
if mibBuilder.loadTexts: cerL2vpnCmMplsPeerIpAddress.setDescription('This is the IP address of the MPLS Peer. IPv4 and IPv6 addresses are supported.')
cadL2vpnProvisionedCmTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 13), )
if mibBuilder.loadTexts: cadL2vpnProvisionedCmTable.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnProvisionedCmTable.setDescription('This table contains all CMs that are statically provisioned with L2VPNs.')
cadL2vpnProvisionedCmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 13, 1), ).setIndexNames((0, "CADANT-L2VPN-MIB", "cadL2vpnProvisionedCmMacAddress"))
if mibBuilder.loadTexts: cadL2vpnProvisionedCmEntry.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnProvisionedCmEntry.setDescription('An entry contains a CM that is statically provisioned with L2VPNs. The CM MAC address is the unique key to an entry.')
cadL2vpnProvisionedCmMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 13, 1, 1), MacAddress())
if mibBuilder.loadTexts: cadL2vpnProvisionedCmMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnProvisionedCmMacAddress.setDescription('The CM MAC address used as a unique key to this table.')
cadL2vpnProvisionedCmL2vpnId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 13, 1, 2), DocsL2vpnIdentifier()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnProvisionedCmL2vpnId.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnProvisionedCmL2vpnId.setDescription("The provisioned CM's string form of the L2VPNid.")
cadL2vpnProvisionedCmOuterVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnProvisionedCmOuterVlanId.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnProvisionedCmOuterVlanId.setDescription("The provisoned CM's L2VPN outer VLAN id.")
cadL2vpnProvisionedCmInnerVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnProvisionedCmInnerVlanId.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnProvisionedCmInnerVlanId.setDescription("The provisoned CM's L2VPN inner VLAN id.")
cadL2vpnProvisionedCmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 13, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnProvisionedCmRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnProvisionedCmRowStatus.setDescription('Row insertion and deletion.')
cadL2vpnProvisionedCmEsafeTable = MibTable((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 14), )
if mibBuilder.loadTexts: cadL2vpnProvisionedCmEsafeTable.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnProvisionedCmEsafeTable.setDescription('This table contains all eSAFE devices that are statically provisioned behind a CM that are excluded from the L2VPN tunnel. This MIB is maintained by the CLI commands.')
cadL2vpnProvisionedCmEsafeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 14, 1), ).setIndexNames((0, "CADANT-L2VPN-MIB", "cadL2vpnProvisionedCmMacAddress"), (0, "CADANT-L2VPN-MIB", "cadL2vpnProvisionedCmEsafeMacAddress"))
if mibBuilder.loadTexts: cadL2vpnProvisionedCmEsafeEntry.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnProvisionedCmEsafeEntry.setDescription('An entry contains a Esafe device that is statically provisioned behind a CM that is excluded from the L2VPN tunnel.')
cadL2vpnProvisionedCmEsafeMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 14, 1, 1), MacAddress())
if mibBuilder.loadTexts: cadL2vpnProvisionedCmEsafeMacAddress.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnProvisionedCmEsafeMacAddress.setDescription('The eSAFE MAC address used as a key to this table.')
cadL2vpnProvisionedCmEsafeIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(16, 17, 19))).clone(namedValues=NamedValues(("mta", 16), ("stb", 17), ("tea", 19)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnProvisionedCmEsafeIfIndex.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnProvisionedCmEsafeIfIndex.setDescription("The provisioned eSAFE's ifindex value.")
cadL2vpnProvisionedCmEsafeRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4998, 1, 1, 120, 1, 1, 14, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cadL2vpnProvisionedCmEsafeRowStatus.setStatus('current')
if mibBuilder.loadTexts: cadL2vpnProvisionedCmEsafeRowStatus.setDescription('Row insertion and deletion.')
mibBuilder.exportSymbols("CADANT-L2VPN-MIB", cadL2vpnInstanceIdToCmEntry=cadL2vpnInstanceIdToCmEntry, cerL2vpnCmStatsUpstreamBytes=cerL2vpnCmStatsUpstreamBytes, cadL2vpnCmCapDutFilterRequired=cadL2vpnCmCapDutFilterRequired, cadL2vpnProvisionedCmEsafeTable=cadL2vpnProvisionedCmEsafeTable, cadL2vpnProvisionedCmOuterVlanId=cadL2vpnProvisionedCmOuterVlanId, cerL2vpnCmBgpRtExport=cerL2vpnCmBgpRtExport, cadL2vpnInterfaceIpIgmpSnooping=cadL2vpnInterfaceIpIgmpSnooping, cadL2vpnSecondaryNetworkIfIndex=cadL2vpnSecondaryNetworkIfIndex, cadL2vpnProvisionedCmMacAddress=cadL2vpnProvisionedCmMacAddress, cerL2vpnCmStatsUpstreamDiscards=cerL2vpnCmStatsUpstreamDiscards, cerL2vpnCmNsiEncapSubtype=cerL2vpnCmNsiEncapSubtype, cerL2vpnCmVpnIdTable=cerL2vpnCmVpnIdTable, cadL2vpnVlanIdRangeNsiEncapSubtype=cadL2vpnVlanIdRangeNsiEncapSubtype, CadNsiEncapValue=CadNsiEncapValue, cadL2vpnParams=cadL2vpnParams, cerL2vpnCmStatsEntry=cerL2vpnCmStatsEntry, cadL2vpnProvisionedCmL2vpnId=cadL2vpnProvisionedCmL2vpnId, cerL2vpnCmMplsPeerAddrType=cerL2vpnCmMplsPeerAddrType, cadL2vpnVlanIdRangeEnd=cadL2vpnVlanIdRangeEnd, cerL2vpnCmStatsTable=cerL2vpnCmStatsTable, cerL2vpnVpnCmCMIM=cerL2vpnVpnCmCMIM, cerL2vpnCmDhcpSnooping=cerL2vpnCmDhcpSnooping, cerL2vpnCmBgpRd=cerL2vpnCmBgpRd, cerL2vpnInstanceOuterVlanId=cerL2vpnInstanceOuterVlanId, cadL2vpnInterfaceRowStatus=cadL2vpnInterfaceRowStatus, cerL2vpnCmStatsUpstreamPkts=cerL2vpnCmStatsUpstreamPkts, cerL2vpnCmMplsPeerAddr=cerL2vpnCmMplsPeerAddr, cadL2vpnInstanceIdVlanIdInner=cadL2vpnInstanceIdVlanIdInner, cerL2vpnMplsAcId=cerL2vpnMplsAcId, cadL2vpnDenyForwardingVpnId=cadL2vpnDenyForwardingVpnId, cerL2vpnInstanceNsiEncapSubType=cerL2vpnInstanceNsiEncapSubType, cadL2vpnMIB=cadL2vpnMIB, cerL2vpnCmDutCMIM=cerL2vpnCmDutCMIM, cerL2vpnCmBgpVpnId=cerL2vpnCmBgpVpnId, cadL2vpnPktClassCMIM=cadL2vpnPktClassCMIM, cadL2vpnProvisionedCmInnerVlanId=cadL2vpnProvisionedCmInnerVlanId, cadL2vpnGlobalTpid=cadL2vpnGlobalTpid, cadL2vpnVlanIdRangeEntry=cadL2vpnVlanIdRangeEntry, cerL2vpnCmStatsDownstreamDiscards=cerL2vpnCmStatsDownstreamDiscards, cerL2vpnCmMplsPeerIpAddress=cerL2vpnCmMplsPeerIpAddress, cadL2vpnDenyForwardingEntry=cadL2vpnDenyForwardingEntry, cadL2vpnIdxToCmVpnInstTable=cadL2vpnIdxToCmVpnInstTable, cerL2vpnCmStatsDownstreamBytes=cerL2vpnCmStatsDownstreamBytes, cadL2vpnVpnIdx=cadL2vpnVpnIdx, cadL2vpnInstanceIdVpnId=cadL2vpnInstanceIdVpnId, cadL2vpnPktClassL2vpnId=cadL2vpnPktClassL2vpnId, cerL2vpnCmDutFilteringCapability=cerL2vpnCmDutFilteringCapability, cadL2vpnProvisionedCmEntry=cadL2vpnProvisionedCmEntry, cadL2vpnProvisionedCmEsafeMacAddress=cadL2vpnProvisionedCmEsafeMacAddress, cadL2vpnPktClassEntry=cadL2vpnPktClassEntry, cerL2vpnCmNsiEncapValue=cerL2vpnCmNsiEncapValue, cadL2vpnPktClassUserPriRangeLow=cadL2vpnPktClassUserPriRangeLow, cadL2vpnDenyForwardingInstanceId=cadL2vpnDenyForwardingInstanceId, cerL2vpnInstanceInnerVlanId=cerL2vpnInstanceInnerVlanId, cadL2vpnProvisionedCmRowStatus=cadL2vpnProvisionedCmRowStatus, cerL2vpnCmMplsPwId=cerL2vpnCmMplsPwId, cadL2vpnPktClassTable=cadL2vpnPktClassTable, cadL2vpnInstanceIdVlanIdOuter=cadL2vpnInstanceIdVlanIdOuter, cadL2vpnVlanIdRangeTable=cadL2vpnVlanIdRangeTable, cadL2vpnDenyForwardingIndex=cadL2vpnDenyForwardingIndex, cerL2vpnCmBgpRtImport=cerL2vpnCmBgpRtImport, cadL2vpnInstanceId=cadL2vpnInstanceId, cadL2vpnInstanceIdCmMac=cadL2vpnInstanceIdCmMac, cadL2vpnProvisionedCmTable=cadL2vpnProvisionedCmTable, cerL2vpnVpnCmIndividualSAID=cerL2vpnVpnCmIndividualSAID, cadL2vpnProvisionedCmEsafeIfIndex=cadL2vpnProvisionedCmEsafeIfIndex, cadL2vpnPrimaryNetworkIfIndex=cadL2vpnPrimaryNetworkIfIndex, cadL2vpnVlanIdRangeBegin=cadL2vpnVlanIdRangeBegin, cerL2vpnVpnCmVendorSpecific=cerL2vpnVpnCmVendorSpecific, cerL2vpnCmVpnId=cerL2vpnCmVpnId, cadL2vpnForwardingEnabled=cadL2vpnForwardingEnabled, cadL2vpnCmCapEsafeIdentRequired=cadL2vpnCmCapEsafeIdentRequired, cerL2vpnCmForwardingEnabled=cerL2vpnCmForwardingEnabled, cadL2vpnMIBObjects=cadL2vpnMIBObjects, cerL2vpnCmBgpCeVeId=cerL2vpnCmBgpCeVeId, cadL2vpnProvisionedCmEsafeRowStatus=cadL2vpnProvisionedCmEsafeRowStatus, cerL2vpnIdx=cerL2vpnIdx, cadL2vpnPktClassVendorSpecific=cadL2vpnPktClassVendorSpecific, cadL2vpnDenyForwardingMplsPeerIp=cadL2vpnDenyForwardingMplsPeerIp, PYSNMP_MODULE_ID=cadL2vpnMIB, cadL2vpnDenyForwardingCmMac=cadL2vpnDenyForwardingCmMac, cadL2vpnInstanceIdToCmTable=cadL2vpnInstanceIdToCmTable, cerL2vpnInstanceId=cerL2vpnInstanceId, cadL2vpnMplsPeerIpToCmEntry=cadL2vpnMplsPeerIpToCmEntry, cadL2vpnInterfaceIfIndex=cadL2vpnInterfaceIfIndex, cerL2vpnCmMac=cerL2vpnCmMac, cadL2vpnPktClassUserPriRangeHigh=cadL2vpnPktClassUserPriRangeHigh, cerL2vpnCmStatsDownstreamPkts=cerL2vpnCmStatsDownstreamPkts, cadL2vpnInterfaceEntry=cadL2vpnInterfaceEntry, cadL2vpnVlanIdRangeRowStatus=cadL2vpnVlanIdRangeRowStatus, cadL2vpnDenyForwardingRowStatus=cadL2vpnDenyForwardingRowStatus, cadL2vpnInterfaceTable=cadL2vpnInterfaceTable, cadL2vpnActiveNetworkIfIndex=cadL2vpnActiveNetworkIfIndex, cadL2vpnProvisionedCmEsafeEntry=cadL2vpnProvisionedCmEsafeEntry, cadL2vpnMplsPeerIpToCmTable=cadL2vpnMplsPeerIpToCmTable, cerL2vpnCmVpnIdEntry=cerL2vpnCmVpnIdEntry, cerL2vpnCmCompliantCapability=cerL2vpnCmCompliantCapability, cadL2vpnIdxToCmVpnInstEntry=cadL2vpnIdxToCmVpnInstEntry, cadL2vpnDenyForwardingTable=cadL2vpnDenyForwardingTable)
