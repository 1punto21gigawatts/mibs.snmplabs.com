#
# PySNMP MIB module POWERHUB-TCPIP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/POWERHUB-TCPIP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:41:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, NotificationType, Bits, ObjectIdentity, enterprises, TimeTicks, Gauge32, IpAddress, Integer32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, iso, Unsigned32, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "NotificationType", "Bits", "ObjectIdentity", "enterprises", "TimeTicks", "Gauge32", "IpAddress", "Integer32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "iso", "Unsigned32", "Counter32")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
fore = MibIdentifier((1, 3, 6, 1, 4, 1, 326))
systems = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2))
lsd = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6))
lsdproducts = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 1))
lsdcommon = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 2))
alrip = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4))
altcp = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5))
alip = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6))
alripControlType = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("vlan", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripControlType.setStatus('mandatory')
if mibBuilder.loadTexts: alripControlType.setDescription('control type to change the RIP update mechanism')
alRipNormalConfigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 2), )
if mibBuilder.loadTexts: alRipNormalConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: alRipNormalConfigTable.setDescription('Per port RIP configuration per segment method.')
alripNormalConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 2, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "alripNormalConfigPort"))
if mibBuilder.loadTexts: alripNormalConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alripNormalConfigEntry.setDescription('information about a specific RIP configuration entry ')
alripNormalConfigPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripNormalConfigPort.setStatus('mandatory')
if mibBuilder.loadTexts: alripNormalConfigPort.setDescription('Port number for which the RIP parameters are to be set or viewed.')
alripNormalConfigTalk = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripNormalConfigTalk.setStatus('mandatory')
if mibBuilder.loadTexts: alripNormalConfigTalk.setDescription('Controls whether the hub generates RIP packets on the port identified by the instance of ripConfigPort.')
alripNormalConfigListen = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripNormalConfigListen.setStatus('mandatory')
if mibBuilder.loadTexts: alripNormalConfigListen.setDescription('Controls whether the hub processes RIP packets received on the port identified by the instance of ripConfigPort.')
alripNormalConfigPoison = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripNormalConfigPoison.setStatus('mandatory')
if mibBuilder.loadTexts: alripNormalConfigPoison.setDescription('Controls what happens when a route goes down. If set to no(2), the hub simply stops reporting the route. If set to yes(1), the hub reports it one more time, but with a metric value of 16, which infinity as far as RIP is concerned. Thus other routers learn immediately that the route is down.')
alripNormalConfigRptStaticRt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripNormalConfigRptStaticRt.setStatus('mandatory')
if mibBuilder.loadTexts: alripNormalConfigRptStaticRt.setDescription('When RIP packets are generated on the port, controls whether the hub reports the static routes in its route table.')
alripNormalConfigRptDefaultRt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripNormalConfigRptDefaultRt.setStatus('mandatory')
if mibBuilder.loadTexts: alripNormalConfigRptDefaultRt.setDescription('When RIP packets are generated on the port, controls whether the hub reports the default routes, if any, in ints route table.')
alripNormalConfigAccptDefaultRt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripNormalConfigAccptDefaultRt.setStatus('mandatory')
if mibBuilder.loadTexts: alripNormalConfigAccptDefaultRt.setDescription('When RIP packets are received on the port, controls whether the hub accepts(learns) a default route that is reported in a RIP packet.')
alRipVLANConfigTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 3), )
if mibBuilder.loadTexts: alRipVLANConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: alRipVLANConfigTable.setDescription(' Per port RIP configuration per VLAN method.')
alripVLANConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 3, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "alripVLANConfigNetNumber"))
if mibBuilder.loadTexts: alripVLANConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alripVLANConfigEntry.setDescription('information about a specific RIP configuration entry')
alripVLANConfigNetNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripVLANConfigNetNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alripVLANConfigNetNumber.setDescription('IP network number for which the RIP parameters are to be set or viewed.')
alripVLANConfigTalk = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripVLANConfigTalk.setStatus('mandatory')
if mibBuilder.loadTexts: alripVLANConfigTalk.setDescription('Controls whether the hub generates RIP packets on the port identified by the instance of ripConfigPort.')
alripVLANConfigListen = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripVLANConfigListen.setStatus('mandatory')
if mibBuilder.loadTexts: alripVLANConfigListen.setDescription('Controls whether the hub processes RIP packets received on the port identified by the instance of ripConfigPort. This field cannot be activated if this interface is controlled by OSPF')
alripVLANConfigPoison = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripVLANConfigPoison.setStatus('mandatory')
if mibBuilder.loadTexts: alripVLANConfigPoison.setDescription('Controls what happens when a route goes down. If set to no(2), the hub simply stops reporting the route. If set to yes(1), the hub reports it one more time, but with a metric value of 16, which infinity as far as RIP is concerned. Thus other routers learn immediately that the route is down.')
alripVLANConfigRptStaticRt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripVLANConfigRptStaticRt.setStatus('mandatory')
if mibBuilder.loadTexts: alripVLANConfigRptStaticRt.setDescription('When RIP packets are generated on the port, controls whether the hub reports the static routes in its route table.')
alripVLANConfigRptDefaultRt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripVLANConfigRptDefaultRt.setStatus('mandatory')
if mibBuilder.loadTexts: alripVLANConfigRptDefaultRt.setDescription('When RIP packets are generated on the port, controls whether the hub reports the default routes, if any, in ints route table.')
alripVLANConfigAccptDefaultRt = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripVLANConfigAccptDefaultRt.setStatus('mandatory')
if mibBuilder.loadTexts: alripVLANConfigAccptDefaultRt.setDescription('When RIP packets are received on the port, controls whether the hub accepts(learns) a default')
alripVLANConfigDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripVLANConfigDelete.setStatus('mandatory')
if mibBuilder.loadTexts: alripVLANConfigDelete.setDescription('When set to 1, this entry is deleted.')
alripStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alripStatsClear.setStatus('mandatory')
if mibBuilder.loadTexts: alripStatsClear.setDescription('When set to 1, clears the RIP stats')
alRipStatPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatPktsRcvd.setDescription('Packets Received.')
alRipStatPktsXmitted = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatPktsXmitted.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatPktsXmitted.setDescription('Packets Sent.')
alRipStatReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatReqsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatReqsRcvd.setDescription('Requests Received.')
alRipStatRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatRespRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatRespRcvd.setDescription('Responses Received.')
alRipStatReqsXmitted = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatReqsXmitted.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatReqsXmitted.setDescription('Requests Sent.')
alRipStatRespXmitted = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatRespXmitted.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatRespXmitted.setDescription('Responses Sent.')
alRipStatRouteTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatRouteTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatRouteTimeOuts.setDescription('Route Timeouts.')
alRipStatShortPkts = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatShortPkts.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatShortPkts.setDescription('Short packets received.')
alRipStatBadVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatBadVer.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatBadVer.setDescription('Bad version pkts received.')
alRipStatBadZeroes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatBadZeroes.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatBadZeroes.setDescription('Bad zeroes received.')
alRipStatBadSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatBadSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatBadSrcPort.setDescription('Packets with bad Source port received.')
alRipStatBadSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatBadSrcIp.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatBadSrcIp.setDescription('Packets with bad source IP address received.')
alRipStatPktsSelf = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatPktsSelf.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatPktsSelf.setDescription('Packets from self received.')
alRipigUpdates = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipigUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: alRipigUpdates.setDescription('number of RIP update trigged.')
alRipStatPqueuePktsQueued = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatPqueuePktsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatPqueuePktsQueued.setDescription('Packets queued in RIP process queue.')
alRipStatPqueueFreeQueue = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatPqueueFreeQueue.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatPqueueFreeQueue.setDescription('Free entries in the RIP processing queue.')
alRipStatTqueuePktsQueued = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatTqueuePktsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatTqueuePktsQueued.setDescription('Packets queued in the RIP route timeout process queue.')
alRipStatTqueueFreeQueue = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipStatTqueueFreeQueue.setStatus('mandatory')
if mibBuilder.loadTexts: alRipStatTqueueFreeQueue.setDescription('Free entries in the RIP route timeout queue.')
alRipDynPktsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynPktsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynPktsRcvd.setDescription('Packets Received.')
alRipDynPktsXmitted = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynPktsXmitted.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynPktsXmitted.setDescription('Packets Sent.')
alRipDynReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynReqsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynReqsRcvd.setDescription('Requests Received.')
alRipDynRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynRespRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynRespRcvd.setDescription('Responses Received.')
alRipDynReqsXmitted = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynReqsXmitted.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynReqsXmitted.setDescription('Requests Sent.')
alRipDynRespXmitted = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynRespXmitted.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynRespXmitted.setDescription('Responses Sent.')
alRipDynRouteTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynRouteTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynRouteTimeOuts.setDescription('Route Timeouts.')
alRipDynShortPkts = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynShortPkts.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynShortPkts.setDescription('Short packets received.')
alRipDynBadVer = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynBadVer.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynBadVer.setDescription('Bad version pkts received.')
alRipDynBadZeroes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynBadZeroes.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynBadZeroes.setDescription('Bad zeroes received.')
alRipDynBadSrcPort = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynBadSrcPort.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynBadSrcPort.setDescription('Packets with bad Source port received.')
alRipDynBadSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynBadSrcIp.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynBadSrcIp.setDescription('Packets with bad source IP address received.')
alRipDynPktsSelf = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynPktsSelf.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynPktsSelf.setDescription('Packets from self received.')
alRipDynNumTrigUpdates = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynNumTrigUpdates.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynNumTrigUpdates.setDescription('number of RIP update trigged.')
alRipDyntPqueuePktsQueued = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDyntPqueuePktsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDyntPqueuePktsQueued.setDescription('Packets queued in RIP process queue.')
alRipDynPqueueFreeQueue = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynPqueueFreeQueue.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynPqueueFreeQueue.setDescription('Free entries in the RIP processing queue.')
alRipDynTqueuePktsQueued = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynTqueuePktsQueued.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynTqueuePktsQueued.setDescription('Packets queued in the RIP route timeout process queue.')
alRipDynTqueueFreeQueue = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alRipDynTqueueFreeQueue.setStatus('mandatory')
if mibBuilder.loadTexts: alRipDynTqueueFreeQueue.setDescription('Free entries in the RIP route timeout queue.')
alRipAccptFilTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 41), )
if mibBuilder.loadTexts: alRipAccptFilTable.setStatus('mandatory')
if mibBuilder.loadTexts: alRipAccptFilTable.setDescription('RIP Accept filter table')
ripAccptFilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 41, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "ripAccptFilNumber"))
if mibBuilder.loadTexts: ripAccptFilEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ripAccptFilEntry.setDescription('RIP Accept filter entry ')
ripAccptFilNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 41, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripAccptFilNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ripAccptFilNumber.setDescription('Filter Number; Range 1-64')
ripAccptFilAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 41, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripAccptFilAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ripAccptFilAddr.setDescription('Valid network or subnet address')
ripAccptFilMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 41, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripAccptFilMask.setStatus('mandatory')
if mibBuilder.loadTexts: ripAccptFilMask.setDescription('Accept filter Mask')
ripAccptFilPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 41, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripAccptFilPort.setStatus('mandatory')
if mibBuilder.loadTexts: ripAccptFilPort.setDescription('Port number on which network should be accepted or not. Range 1-14.')
alRipReportFilTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 42), )
if mibBuilder.loadTexts: alRipReportFilTable.setStatus('mandatory')
if mibBuilder.loadTexts: alRipReportFilTable.setDescription('RIP Report filter table')
ripReportFilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 42, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "ripReportFilNumber"))
if mibBuilder.loadTexts: ripReportFilEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ripReportFilEntry.setDescription('RIP Report filter entry ')
ripReportFilNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 42, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripReportFilNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ripReportFilNumber.setDescription('Filter Number; Range 1-64')
ripReportFilAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 42, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripReportFilAddr.setStatus('mandatory')
if mibBuilder.loadTexts: ripReportFilAddr.setDescription('Valid network or subnet address')
ripReportFilMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 42, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripReportFilMask.setStatus('mandatory')
if mibBuilder.loadTexts: ripReportFilMask.setDescription('Report filter Mask')
ripReportFilPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 4, 42, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripReportFilPort.setStatus('mandatory')
if mibBuilder.loadTexts: ripReportFilPort.setDescription('Port number on which network should be reported or not. Port number range 1-14')
alTcpConnIdleTime = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alTcpConnIdleTime.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnIdleTime.setDescription('Time in minutes before sending keep-alives. The range is 5 to 30 minutes.')
alTcpKeepAliveInt = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alTcpKeepAliveInt.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpKeepAliveInt.setDescription('Time interval in seconds between two successive keep-alive sends. The range is 30 to 240 seconds.')
alTcpDisconnectInt = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpDisconnectInt.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpDisconnectInt.setDescription('Time interval in seconds, before an idle connection is dropped. This equals to the sum of alTcpConnIdleTime plus eight times the alTcpKeepAliveInt interval.')
alTcpShortSegRcvd = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpShortSegRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpShortSegRcvd.setDescription('Number of short segments received.')
alTcpStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alTcpStatsClear.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpStatsClear.setDescription('When set to 1, clears the TCP stats.')
alTcpConnTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 6), )
if mibBuilder.loadTexts: alTcpConnTable.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnTable.setDescription('A table containing TCP connection-specific information.')
alTcpConnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 6, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "alTcpConnId"))
if mibBuilder.loadTexts: alTcpConnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnEntry.setDescription('Information about a particular current TCP connection. An object of this type is transient, in that it ceases to exist when (or soon after) the connection makes the transition to the CLOSED state.')
alTcpConnId = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnId.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnId.setDescription('The connection Identifier by which a connection is addressed.')
alTcpConnState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))).clone(namedValues=NamedValues(("closed", 1), ("listen", 2), ("synSent", 3), ("synReceived", 4), ("established", 5), ("finWait1", 6), ("finWait2", 7), ("closeWait", 8), ("lastAck", 9), ("closing", 10), ("timeWait", 11), ("deleteTCB", 12)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alTcpConnState.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnState.setDescription("The state of this TCP connection. The only value which may be set by a management station is deleteTCB(12). Accordingly, it is appropriate for an agent to return a `badValue' response if a management station attempts to set this object to any other value. If a management station sets this object to the value deleteTCB(12), then this has the effect of deleting the TCB (as defined in RFC 793) of the corresponding connection on the managed node, resulting in immediate termination of the connection.")
alTcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnLocalAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnLocalAddress.setDescription('The local IP address for this TCP connection. In the case of a connection in the listen state which is willing to accept connections for any IP interface associated with the node, the value 0.0.0.0 is used.')
alTcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnLocalPort.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnLocalPort.setDescription('The local port number for this TCP connection.')
alTcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 6, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnRemAddress.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnRemAddress.setDescription('The remote IP address for this TCP connection.')
alTcpConnRemPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alTcpConnRemPort.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpConnRemPort.setDescription('The remote port number for this TCP connection.')
alTcpFilTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 7), )
if mibBuilder.loadTexts: alTcpFilTable.setStatus('mandatory')
if mibBuilder.loadTexts: alTcpFilTable.setDescription('TCP filter table')
tcpFilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 7, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "tcpFilNumber"))
if mibBuilder.loadTexts: tcpFilEntry.setStatus('mandatory')
if mibBuilder.loadTexts: tcpFilEntry.setDescription('TCP filter entry ')
tcpFilNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 7, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilNumber.setStatus('mandatory')
if mibBuilder.loadTexts: tcpFilNumber.setDescription('Filter Number; Range 1-32')
tcpFilSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: tcpFilSrcAddr.setDescription('Source address')
tcpFilSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 7, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilSrcMask.setStatus('mandatory')
if mibBuilder.loadTexts: tcpFilSrcMask.setDescription('Mask')
tcpFilProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 7, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: tcpFilProtocol.setDescription('tcp(1) or udp(2)')
tcpFilDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 5, 7, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpFilDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: tcpFilDstPort.setDescription('smtp(1000), telnet(2000), ftp(3000) or valid port Number')
alArpTableClear = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alArpTableClear.setStatus('mandatory')
if mibBuilder.loadTexts: alArpTableClear.setDescription('When set, clears the ARP table.')
alArpAge = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alArpAge.setStatus('mandatory')
if mibBuilder.loadTexts: alArpAge.setDescription('Timeout in minutes for aging ARP entries; when set to zero, set-arpage is turned off.')
alArpStatReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatReqsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alArpStatReqsRcvd.setDescription('Requests Received.')
alArpStatRepliesRcvd = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatRepliesRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alArpStatRepliesRcvd.setDescription('Replies Received.')
alArpStatInvalidOpcodes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatInvalidOpcodes.setStatus('mandatory')
if mibBuilder.loadTexts: alArpStatInvalidOpcodes.setDescription('Invalid Opcodes Received.')
alArpStatRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatRequestsSent.setStatus('mandatory')
if mibBuilder.loadTexts: alArpStatRequestsSent.setDescription('Requests Sent.')
alArpStatRepliesSent = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatRepliesSent.setStatus('mandatory')
if mibBuilder.loadTexts: alArpStatRepliesSent.setDescription('Replies Sent.')
alArpStatProxyReplies = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpStatProxyReplies.setStatus('mandatory')
if mibBuilder.loadTexts: alArpStatProxyReplies.setDescription('number of proxy replied')
alArpDynReqsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynReqsRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alArpDynReqsRcvd.setDescription('Requests Received.')
alArpDynRepliesRcvd = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynRepliesRcvd.setStatus('mandatory')
if mibBuilder.loadTexts: alArpDynRepliesRcvd.setDescription('Replies Received.')
alArpDynInvalidOpcodes = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynInvalidOpcodes.setStatus('mandatory')
if mibBuilder.loadTexts: alArpDynInvalidOpcodes.setDescription('Invalid Opcodes Received.')
alArpDynRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynRequestsSent.setStatus('mandatory')
if mibBuilder.loadTexts: alArpDynRequestsSent.setDescription('Requests Sent.')
alArpDynRepliesSent = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynRepliesSent.setStatus('mandatory')
if mibBuilder.loadTexts: alArpDynRepliesSent.setDescription('Replies Sent.')
alArpDynProxyReplies = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alArpDynProxyReplies.setStatus('mandatory')
if mibBuilder.loadTexts: alArpDynProxyReplies.setDescription('number of proxy replied')
alArpStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alArpStatsClear.setStatus('mandatory')
if mibBuilder.loadTexts: alArpStatsClear.setDescription('When set to 1, clears the ARP statistics.')
alArpProxyTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 16), )
if mibBuilder.loadTexts: alArpProxyTable.setStatus('mandatory')
if mibBuilder.loadTexts: alArpProxyTable.setDescription(' Per port proxy arp enable/disable ')
arpProxyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 16, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "arpProxyPort"))
if mibBuilder.loadTexts: arpProxyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: arpProxyEntry.setDescription('information of a specific arp proxy entry ')
arpProxyPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpProxyPort.setStatus('mandatory')
if mibBuilder.loadTexts: arpProxyPort.setDescription('Port Number ')
arpProxyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 16, 1, 2), Integer32().clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpProxyEnable.setStatus('mandatory')
if mibBuilder.loadTexts: arpProxyEnable.setDescription('If set to Enable(1), enables proxy arp arp requests received on the port identified by the instance of arpProxyPort. If set to Disable(2), it disables the proxy arp for arp requests received on the ports identified by the instance of arpProxyPort.')
alIpTemplateTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 17), )
if mibBuilder.loadTexts: alIpTemplateTable.setStatus('mandatory')
if mibBuilder.loadTexts: alIpTemplateTable.setDescription(' Per template information')
alipTemplateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 17, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "alipTemplateNumber"))
if mibBuilder.loadTexts: alipTemplateEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alipTemplateEntry.setDescription('Information about a filtering template ')
alipTemplateNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipTemplateNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alipTemplateNumber.setDescription('The number of the template with which it is identified.')
alipTemplateDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 17, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipTemplateDelete.setStatus('mandatory')
if mibBuilder.loadTexts: alipTemplateDelete.setDescription('When set to 1, this entry is deleted.')
alipTemplateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("block", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipTemplateAction.setStatus('mandatory')
if mibBuilder.loadTexts: alipTemplateAction.setDescription('Whether the packet being filtered should be forwarded or blocked')
alipTemplateSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 17, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipTemplateSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: alipTemplateSrcAddr.setDescription("The portion of the packet's source address specified by ipTemplateSrcMask is matched with this address.")
alipTemplateSrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 17, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipTemplateSrcMask.setStatus('mandatory')
if mibBuilder.loadTexts: alipTemplateSrcMask.setDescription('Source Mask. The portion specified by this mask is matched with source address.')
alipTemplateDstAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 17, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipTemplateDstAddr.setStatus('mandatory')
if mibBuilder.loadTexts: alipTemplateDstAddr.setDescription("The portion of the packet's destination address specified by ipTemplateDstMask is matched with this address.")
alipTemplateDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 17, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipTemplateDstMask.setStatus('mandatory')
if mibBuilder.loadTexts: alipTemplateDstMask.setDescription('Destination mask. The portion specified by this mask is matched with destination address.')
alipTemplateProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 17, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipTemplateProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: alipTemplateProtocol.setDescription('Determines the type of packets that need to be filtered. PowerHub currently recognizes ip(1) , icmp(1), ipinip(4), tcp(6), udp(17), ospf(89). If all(0) is specified, the filter looks for all protocols other than the ones PowerHub currently accepts. The IP protocol numbers are listed in RFC 1340')
alipTemplateOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 17, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unknown", 1), ("equalto", 2), ("notequalto", 3), ("lessthan", 4), ("greaterthan", 5), ("conreq", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipTemplateOperator.setStatus('mandatory')
if mibBuilder.loadTexts: alipTemplateOperator.setDescription('Allowed only if the protocol field is tcp or udp. The following operators allowed: (1) Unknown =(2) Equal to ~=(3) Not equal to <(4) Less than >(5) Greater than conreq(6) Connect request. Connect request is valid only if protocol is tcp')
alipTemplateDstPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 17, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipTemplateDstPort.setStatus('mandatory')
if mibBuilder.loadTexts: alipTemplateDstPort.setDescription('This is expressed as either a well-known protocol name or a well-known tcp or udp port number. 0 means unknown')
alIpRuleTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 18), )
if mibBuilder.loadTexts: alIpRuleTable.setStatus('mandatory')
if mibBuilder.loadTexts: alIpRuleTable.setDescription(' Per template information')
alipRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 18, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "alipRuleNumber"))
if mibBuilder.loadTexts: alipRuleEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alipRuleEntry.setDescription('Information about a specific filtering rule')
alipRuleNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipRuleNumber.setStatus('mandatory')
if mibBuilder.loadTexts: alipRuleNumber.setDescription('The number of the rule with which it is Identified.')
alipRuleDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 18, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipRuleDelete.setStatus('mandatory')
if mibBuilder.loadTexts: alipRuleDelete.setDescription('If set to 1 the entry is deleted.')
alipRuleTemplates = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 18, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipRuleTemplates.setStatus('mandatory')
if mibBuilder.loadTexts: alipRuleTemplates.setDescription('The templates associated with the rule identified by the instance of ipRuleNumber.')
alipAcsCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 19), )
if mibBuilder.loadTexts: alipAcsCtrlTable.setStatus('mandatory')
if mibBuilder.loadTexts: alipAcsCtrlTable.setDescription('Per port IP access control filters ')
alipAcsCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 19, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "alipAcsCtrlPort"))
if mibBuilder.loadTexts: alipAcsCtrlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alipAcsCtrlEntry.setDescription(' information of a specific rule applied to segment')
alipAcsCtrlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 19, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipAcsCtrlPort.setStatus('mandatory')
if mibBuilder.loadTexts: alipAcsCtrlPort.setDescription('Port number of the port for which the source and destination access filter apply. ')
alipAcsCtrlDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 19, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipAcsCtrlDelete.setStatus('mandatory')
if mibBuilder.loadTexts: alipAcsCtrlDelete.setDescription('If set to 1, the entry is deleted.')
alipAcsCtrlSourceRule = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 19, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipAcsCtrlSourceRule.setStatus('mandatory')
if mibBuilder.loadTexts: alipAcsCtrlSourceRule.setDescription('the source rule is assigned to the segment')
alipAcsCtrlDestRule = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 19, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alipAcsCtrlDestRule.setStatus('mandatory')
if mibBuilder.loadTexts: alipAcsCtrlDestRule.setDescription('the destination rule is assigned to the segment')
alipFilStatStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 20), )
if mibBuilder.loadTexts: alipFilStatStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: alipFilStatStatsTable.setDescription(' Per template static statistics -- stats from the beginning of the last system reboot.')
alipFilStatStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 20, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "alipFilStatStatsTemplate"))
if mibBuilder.loadTexts: alipFilStatStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alipFilStatStatsEntry.setDescription('filter statistics entry ')
alipFilStatStatsTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 20, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alipFilStatStatsTemplate.setStatus('mandatory')
if mibBuilder.loadTexts: alipFilStatStatsTemplate.setDescription('The template number for which the stats are displayed')
alipFilStatStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 20, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alipFilStatStatsInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: alipFilStatStatsInPkts.setDescription('The number of packets that matched the template identified by the instance of alipFilStatStatsTemplate. The template has to be a Source template.')
alipFilStatStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alipFilStatStatsOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: alipFilStatStatsOutPkts.setDescription('The number of packets that matched the template identified by the instance of alipFilStatStatsTemplate. The template has to be a Destination template.')
alipFilDynStatsTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 21), )
if mibBuilder.loadTexts: alipFilDynStatsTable.setStatus('mandatory')
if mibBuilder.loadTexts: alipFilDynStatsTable.setDescription(' Per template dynamic statistics -- stats from the beginning of the last clear.')
alipFilDynStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 21, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "alipFilDynStatsTemplate"))
if mibBuilder.loadTexts: alipFilDynStatsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alipFilDynStatsEntry.setDescription('information of a specific statistic entry')
alipFilDynStatsTemplate = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 21, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alipFilDynStatsTemplate.setStatus('mandatory')
if mibBuilder.loadTexts: alipFilDynStatsTemplate.setDescription('The template number for which the stats are displayed')
alipFilDynStatsInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 21, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alipFilDynStatsInPkts.setStatus('mandatory')
if mibBuilder.loadTexts: alipFilDynStatsInPkts.setDescription('The number of packets that matched the template identified by the instance of alipFilDynStatsTemplate. The template has to be a Source template.')
alipFilDynStatsOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 21, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alipFilDynStatsOutPkts.setStatus('mandatory')
if mibBuilder.loadTexts: alipFilDynStatsOutPkts.setDescription('The number of packets that matched the template identified by the instance of alipFilDynStatsTemplate. The template has to be a Destination template.')
alipFilDynStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 21, 1, 4), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: alipFilDynStatsClear.setStatus('mandatory')
if mibBuilder.loadTexts: alipFilDynStatsClear.setDescription('Setting the value of 1, it will clear all the stats for the template identified by the instance of alipFilDynStatsTemplate.')
alipTotalFilPacketForward = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alipTotalFilPacketForward.setStatus('mandatory')
if mibBuilder.loadTexts: alipTotalFilPacketForward.setDescription('The total number of packets forwarded since last system reset.')
alipTotalFilPacketBlock = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alipTotalFilPacketBlock.setStatus('mandatory')
if mibBuilder.loadTexts: alipTotalFilPacketBlock.setDescription('The total number of packets blocked since last system reset.')
alipCurrentFilPacketForward = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alipCurrentFilPacketForward.setStatus('mandatory')
if mibBuilder.loadTexts: alipCurrentFilPacketForward.setDescription('The total number of packets forwarded since the last statistical clear.')
alipCurrentFilPacketBlock = MibScalar((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: alipCurrentFilPacketBlock.setStatus('mandatory')
if mibBuilder.loadTexts: alipCurrentFilPacketBlock.setDescription('The total number of packets blocked since the last statistical clear.')
alIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 26), )
if mibBuilder.loadTexts: alIpInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: alIpInterfaceTable.setDescription('IP interface table corresponding to the command - interface-table.')
alIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 26, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "ipInterfaceNumber"), (0, "POWERHUB-TCPIP-MIB", "ipInterfaceAddress"))
if mibBuilder.loadTexts: alIpInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alIpInterfaceEntry.setDescription('Entry of IP interface')
ipInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 26, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceNumber.setDescription('Segment number of the selecetd IP address interface entry.')
ipInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 26, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceAddress.setDescription('IP address of the selected IP segment number.')
ipInterfaceSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 26, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceSubnetMask.setDescription('IP subnet mask for the selected IP address.')
ipInterfaceBroadCast = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 26, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("br0", 1), ("br1", 2))).clone('br1')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceBroadCast.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceBroadCast.setDescription("Specifies style of broadcast address on a segment basis: when you specify 'br0', the hub sends an 'all-0s' broadcast; when you sepcify 'br1', the hub sends 'all-1s' broadcast. The default is 'br1'.")
ipInterfaceCost = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 26, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceCost.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceCost.setDescription('Specifies an additiopnal cost of using the subnet interface. This cost is the number of extra hops to the destination. The range is 1 thru 14. The default is 0. When you set the cost to a value greater than zero, routing is forced thru the other hub if it is alive.')
ipInterfaceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 26, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipInterfaceDelete.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceDelete.setDescription('When this object is set with value 1, the IP interface corresponds to the segment number will be deleted; otherwise this object returns value 0.')
ipInterfaceMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 26, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceMtu.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceMtu.setDescription('Displays the maximum transimission unit size allowed on this IP interface.')
ipInterfaceState = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 26, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceState.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceState.setDescription('Displays the up/down status of the IP interface.')
ipInterfacePktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 26, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfacePktsIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfacePktsIn.setDescription('Total number of packets received on this interface.')
ipInterfaceOctetsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 26, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceOctetsIn.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceOctetsIn.setDescription('Total number of bytes received on this interface.')
ipInterfacePktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 26, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfacePktsOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfacePktsOut.setDescription('Total number of packets transmitted to the network by this interface.')
ipInterfaceOctetsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 26, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceOctetsOut.setStatus('mandatory')
if mibBuilder.loadTexts: ipInterfaceOctetsOut.setDescription('Total number of bytes transimitted to the network by this interface.')
alIpRtCacheTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 27), )
if mibBuilder.loadTexts: alIpRtCacheTable.setStatus('mandatory')
if mibBuilder.loadTexts: alIpRtCacheTable.setDescription('IP Route Cache for all ports')
alIpRtCacheEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 27, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "ipRtCachePort"), (0, "POWERHUB-TCPIP-MIB", "ipRtCacheDstAddress"))
if mibBuilder.loadTexts: alIpRtCacheEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alIpRtCacheEntry.setDescription('IP Route cache for each port ')
ipRtCachePort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 27, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtCachePort.setStatus('mandatory')
if mibBuilder.loadTexts: ipRtCachePort.setDescription('Port number for the ip route cache.')
ipRtCacheDstAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 27, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipRtCacheDstAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipRtCacheDstAddress.setDescription('Ip route cache destination address.')
ipRtCacheClear = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 27, 1, 3), Integer32()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: ipRtCacheClear.setStatus('mandatory')
if mibBuilder.loadTexts: ipRtCacheClear.setDescription('Setting this to Clear(1), will clear the routecache for the port and Destination address identified by the instance of ipRtCachePort and ipRtCacheDstAddress.')
alVlanIpInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 28), )
if mibBuilder.loadTexts: alVlanIpInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: alVlanIpInterfaceTable.setDescription('Vlan IP interface table corresponding to the command - vlan add/del IP interface.')
alVlanIpInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 28, 1), ).setIndexNames((0, "POWERHUB-TCPIP-MIB", "vlanIpInterfaceNameLen"), (0, "POWERHUB-TCPIP-MIB", "vlanIpInterfaceName"), (0, "POWERHUB-TCPIP-MIB", "vlanIpInterfaceAddress"))
if mibBuilder.loadTexts: alVlanIpInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: alVlanIpInterfaceEntry.setDescription('Entry of Vlan IP interface')
vlanIpInterfaceNameLen = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 28, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanIpInterfaceNameLen.setStatus('mandatory')
if mibBuilder.loadTexts: vlanIpInterfaceNameLen.setDescription('The string length of Vlan name of the selecetd vlan IP interface entry.')
vlanIpInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 28, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanIpInterfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: vlanIpInterfaceName.setDescription('Vlan name of the selecetd vlan IP interface entry.')
vlanIpInterfaceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 28, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanIpInterfaceAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vlanIpInterfaceAddress.setDescription('IP address of the selected vlan IP interface entry.')
vlanIpInterfaceSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 28, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpInterfaceSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: vlanIpInterfaceSubnetMask.setDescription('IP subnet mask for the selected vlan IP interface entry.')
vlanIpInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 28, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 4))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: vlanIpInterfaceType.setDescription('Specifies type of interface of vlan The types are are broadcast, nbma (nonBroadcastMultiAccess i.e.,CLIP), ptop (i.e.,PVC). Default is broadcast. The discontinuos enumeration values actually mean bitmask value which maps to bit positions in the agent.')
vlanIpInterfaceNeighborAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 28, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpInterfaceNeighborAddress.setStatus('mandatory')
if mibBuilder.loadTexts: vlanIpInterfaceNeighborAddress.setDescription('Specifies the ip address of neightbors of the interfaces of the vlan. This object apply only when interface type is pointToPoint.')
vlanIpInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 6, 2, 6, 28, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("active", 1), ("notInservice", 2), ("notReady", 3), ("createAndGo", 4), ("createAndWait", 5), ("destroy", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanIpInterfaceRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: vlanIpInterfaceRowStatus.setDescription('The status of the table. The table can not be changed when it is active.')
mibBuilder.exportSymbols("POWERHUB-TCPIP-MIB", ipInterfaceDelete=ipInterfaceDelete, alRipDynRespRcvd=alRipDynRespRcvd, ipInterfaceSubnetMask=ipInterfaceSubnetMask, vlanIpInterfaceType=vlanIpInterfaceType, alArpDynProxyReplies=alArpDynProxyReplies, alArpStatReqsRcvd=alArpStatReqsRcvd, fore=fore, alripNormalConfigAccptDefaultRt=alripNormalConfigAccptDefaultRt, alripVLANConfigRptDefaultRt=alripVLANConfigRptDefaultRt, tcpFilSrcAddr=tcpFilSrcAddr, alArpDynRequestsSent=alArpDynRequestsSent, alArpAge=alArpAge, alipTemplateProtocol=alipTemplateProtocol, alIpRtCacheEntry=alIpRtCacheEntry, alipCurrentFilPacketBlock=alipCurrentFilPacketBlock, vlanIpInterfaceSubnetMask=vlanIpInterfaceSubnetMask, alIpInterfaceTable=alIpInterfaceTable, alipTemplateDstMask=alipTemplateDstMask, alRipStatBadSrcPort=alRipStatBadSrcPort, alTcpConnIdleTime=alTcpConnIdleTime, alTcpConnLocalAddress=alTcpConnLocalAddress, alArpDynReqsRcvd=alArpDynReqsRcvd, alRipDynPktsXmitted=alRipDynPktsXmitted, alRipDynReqsXmitted=alRipDynReqsXmitted, alRipDynTqueuePktsQueued=alRipDynTqueuePktsQueued, alipTemplateOperator=alipTemplateOperator, vlanIpInterfaceName=vlanIpInterfaceName, alipTemplateSrcMask=alipTemplateSrcMask, alRipStatPktsXmitted=alRipStatPktsXmitted, alRipVLANConfigTable=alRipVLANConfigTable, alripVLANConfigAccptDefaultRt=alripVLANConfigAccptDefaultRt, ripAccptFilPort=ripAccptFilPort, ipInterfacePktsOut=ipInterfacePktsOut, alRipStatRespXmitted=alRipStatRespXmitted, alripControlType=alripControlType, alRipStatRespRcvd=alRipStatRespRcvd, alipAcsCtrlEntry=alipAcsCtrlEntry, alipTotalFilPacketBlock=alipTotalFilPacketBlock, arpProxyEntry=arpProxyEntry, vlanIpInterfaceRowStatus=vlanIpInterfaceRowStatus, alRipDynBadSrcIp=alRipDynBadSrcIp, lsdproducts=lsdproducts, alTcpConnState=alTcpConnState, alipRuleDelete=alipRuleDelete, alipFilStatStatsOutPkts=alipFilStatStatsOutPkts, ipInterfaceNumber=ipInterfaceNumber, alTcpConnTable=alTcpConnTable, alIpTemplateTable=alIpTemplateTable, ripReportFilAddr=ripReportFilAddr, alTcpConnRemAddress=alTcpConnRemAddress, alArpProxyTable=alArpProxyTable, alTcpConnLocalPort=alTcpConnLocalPort, ipInterfaceBroadCast=ipInterfaceBroadCast, ipInterfaceMtu=ipInterfaceMtu, alRipDynRespXmitted=alRipDynRespXmitted, ripReportFilEntry=ripReportFilEntry, alTcpDisconnectInt=alTcpDisconnectInt, ripReportFilNumber=ripReportFilNumber, alipFilDynStatsEntry=alipFilDynStatsEntry, alrip=alrip, alipFilDynStatsClear=alipFilDynStatsClear, alRipStatPktsSelf=alRipStatPktsSelf, alipRuleEntry=alipRuleEntry, ripAccptFilNumber=ripAccptFilNumber, alripNormalConfigRptDefaultRt=alripNormalConfigRptDefaultRt, arpProxyPort=arpProxyPort, alipCurrentFilPacketForward=alipCurrentFilPacketForward, alTcpShortSegRcvd=alTcpShortSegRcvd, alipRuleTemplates=alipRuleTemplates, ripAccptFilAddr=ripAccptFilAddr, alRipStatReqsXmitted=alRipStatReqsXmitted, alArpStatRepliesSent=alArpStatRepliesSent, tcpFilProtocol=tcpFilProtocol, alipTemplateDstPort=alipTemplateDstPort, alRipDynTqueueFreeQueue=alRipDynTqueueFreeQueue, alripStatsClear=alripStatsClear, alripNormalConfigTalk=alripNormalConfigTalk, ipInterfacePktsIn=ipInterfacePktsIn, alipTemplateDelete=alipTemplateDelete, alRipDynRouteTimeOuts=alRipDynRouteTimeOuts, alRipStatPqueueFreeQueue=alRipStatPqueueFreeQueue, ipInterfaceOctetsOut=ipInterfaceOctetsOut, alripVLANConfigPoison=alripVLANConfigPoison, vlanIpInterfaceAddress=vlanIpInterfaceAddress, alArpStatRequestsSent=alArpStatRequestsSent, ipInterfaceOctetsIn=ipInterfaceOctetsIn, ipRtCacheClear=ipRtCacheClear, alripVLANConfigTalk=alripVLANConfigTalk, alipTemplateDstAddr=alipTemplateDstAddr, alArpDynRepliesRcvd=alArpDynRepliesRcvd, alripNormalConfigListen=alripNormalConfigListen, alipAcsCtrlDestRule=alipAcsCtrlDestRule, alRipStatPqueuePktsQueued=alRipStatPqueuePktsQueued, tcpFilEntry=tcpFilEntry, alRipDyntPqueuePktsQueued=alRipDyntPqueuePktsQueued, alArpStatInvalidOpcodes=alArpStatInvalidOpcodes, vlanIpInterfaceNameLen=vlanIpInterfaceNameLen, alArpStatProxyReplies=alArpStatProxyReplies, altcp=altcp, ipInterfaceAddress=ipInterfaceAddress, alipFilDynStatsInPkts=alipFilDynStatsInPkts, ipInterfaceCost=ipInterfaceCost, alripVLANConfigListen=alripVLANConfigListen, alipFilDynStatsOutPkts=alipFilDynStatsOutPkts, alRipReportFilTable=alRipReportFilTable, alRipDynShortPkts=alRipDynShortPkts, ripReportFilMask=ripReportFilMask, alRipDynPqueueFreeQueue=alRipDynPqueueFreeQueue, alRipigUpdates=alRipigUpdates, alipTemplateNumber=alipTemplateNumber, alripVLANConfigDelete=alripVLANConfigDelete, alIpRtCacheTable=alIpRtCacheTable, alipAcsCtrlSourceRule=alipAcsCtrlSourceRule, alVlanIpInterfaceTable=alVlanIpInterfaceTable, ripAccptFilMask=ripAccptFilMask, tcpFilDstPort=tcpFilDstPort, alipTemplateAction=alipTemplateAction, alRipDynNumTrigUpdates=alRipDynNumTrigUpdates, alRipDynPktsRcvd=alRipDynPktsRcvd, alripNormalConfigPort=alripNormalConfigPort, arpProxyEnable=arpProxyEnable, alRipNormalConfigTable=alRipNormalConfigTable, alArpStatsClear=alArpStatsClear, alripVLANConfigEntry=alripVLANConfigEntry, alipFilStatStatsEntry=alipFilStatStatsEntry, alRipAccptFilTable=alRipAccptFilTable, alipFilStatStatsTemplate=alipFilStatStatsTemplate, vlanIpInterfaceNeighborAddress=vlanIpInterfaceNeighborAddress, alRipStatBadVer=alRipStatBadVer, alipAcsCtrlDelete=alipAcsCtrlDelete, ipRtCachePort=ipRtCachePort, alTcpKeepAliveInt=alTcpKeepAliveInt, systems=systems, alripNormalConfigRptStaticRt=alripNormalConfigRptStaticRt, alRipDynPktsSelf=alRipDynPktsSelf, ripReportFilPort=ripReportFilPort, alArpStatRepliesRcvd=alArpStatRepliesRcvd, alRipDynBadVer=alRipDynBadVer, alTcpConnId=alTcpConnId, ripAccptFilEntry=ripAccptFilEntry, alRipStatBadSrcIp=alRipStatBadSrcIp, alRipStatTqueueFreeQueue=alRipStatTqueueFreeQueue, alipFilDynStatsTable=alipFilDynStatsTable, alArpDynInvalidOpcodes=alArpDynInvalidOpcodes, alip=alip, alRipDynBadSrcPort=alRipDynBadSrcPort, alipAcsCtrlPort=alipAcsCtrlPort, ipInterfaceState=ipInterfaceState, alipTemplateSrcAddr=alipTemplateSrcAddr, alTcpConnRemPort=alTcpConnRemPort, alIpRuleTable=alIpRuleTable, alripNormalConfigEntry=alripNormalConfigEntry, lsd=lsd, alipTemplateEntry=alipTemplateEntry, alripVLANConfigNetNumber=alripVLANConfigNetNumber, alipFilDynStatsTemplate=alipFilDynStatsTemplate, ipRtCacheDstAddress=ipRtCacheDstAddress, tcpFilNumber=tcpFilNumber, alRipStatRouteTimeOuts=alRipStatRouteTimeOuts, alTcpFilTable=alTcpFilTable, alArpTableClear=alArpTableClear, alRipDynBadZeroes=alRipDynBadZeroes, alRipStatBadZeroes=alRipStatBadZeroes, alRipDynReqsRcvd=alRipDynReqsRcvd, alIpInterfaceEntry=alIpInterfaceEntry, alipFilStatStatsInPkts=alipFilStatStatsInPkts, alipRuleNumber=alipRuleNumber, alipTotalFilPacketForward=alipTotalFilPacketForward, alRipStatShortPkts=alRipStatShortPkts, alipFilStatStatsTable=alipFilStatStatsTable, alTcpConnEntry=alTcpConnEntry, alripNormalConfigPoison=alripNormalConfigPoison, alVlanIpInterfaceEntry=alVlanIpInterfaceEntry, lsdcommon=lsdcommon, alTcpStatsClear=alTcpStatsClear, alArpDynRepliesSent=alArpDynRepliesSent, alRipStatReqsRcvd=alRipStatReqsRcvd, alRipStatTqueuePktsQueued=alRipStatTqueuePktsQueued, alipAcsCtrlTable=alipAcsCtrlTable, tcpFilSrcMask=tcpFilSrcMask, alRipStatPktsRcvd=alRipStatPktsRcvd, alripVLANConfigRptStaticRt=alripVLANConfigRptStaticRt)
