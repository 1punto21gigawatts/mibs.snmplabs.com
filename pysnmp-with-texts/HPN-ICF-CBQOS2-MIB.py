#
# PySNMP MIB module HPN-ICF-CBQOS2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-CBQOS2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint")
hpnicfCommon, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfCommon")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, Integer32, ObjectIdentity, iso, TimeTicks, NotificationType, Bits, MibIdentifier, Unsigned32, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "Integer32", "ObjectIdentity", "iso", "TimeTicks", "NotificationType", "Bits", "MibIdentifier", "Unsigned32", "ModuleIdentity", "Counter64")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
hpnicfCBQos2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2))
hpnicfCBQos2.setRevisions(('2012-07-02 00:00', '2005-07-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfCBQos2.setRevisionsDescriptions(('Modified to add new tables and new nodes.', 'The initial revision of this MIB module.',))
if mibBuilder.loadTexts: hpnicfCBQos2.setLastUpdated('201207020000Z')
if mibBuilder.loadTexts: hpnicfCBQos2.setOrganization('')
if mibBuilder.loadTexts: hpnicfCBQos2.setContactInfo('')
if mibBuilder.loadTexts: hpnicfCBQos2.setDescription('This MIB contains objects to manage configuration and monitor running state for Class Based QoS feature. ********************************* MIB Tables ********************************** This MIB consists of the following tables: 1 : hpnicfCBQoSClassifierCfgInfoTable 2 : hpnicfCBQoSMatchRuleCfgInfoTable 3 : hpnicfCBQoSMatchCpProtoCfgTable 4 : hpnicfCBQoSMatchCpGroupCfgTable 5 : hpnicfCBQoSBehaviorCfgInfoTable 6 : hpnicfCBQoSCarCfgInfoTable 7 : hpnicfCBQoSAggregativeCarCfgInfoTable 8 : hpnicfCBQoSGtsCfgInfoTable 9 : hpnicfCBQoSRemarkCfgInfoTable 10: hpnicfCBQoSQueueCfgInfoTable 11: hpnicfCBQoSWredCfgInfoTable 12: hpnicfCBQoSWredClassCfgInfoTable 13: hpnicfCBQoSPolicyRouteCfgInfoTable 14: hpnicfCBQoSNatCfgInfoTable 15: hpnicfCBQoSFirewallCfgInfoTable 16: hpnicfCBQoSSamplingCfgInfoTable 17: hpnicfCBQoSAccountCfgInfoTable 18: hpnicfCBQoSRedirectCfgInfoTable 19: hpnicfCBQoSPriorityMapCfgInfoTable 20: hpnicfCBQoSPolicyCfgInfoTable 21: hpnicfCBQoSPolicyClassCfgInfoTable 22: hpnicfCBQoSIfApplyPolicyTable 23: hpnicfCBQoSAtmPvcApplyPolicyTable 24: hpnicfCBQoSVlanApplyPolicyTable 25: hpnicfCBQoSFrClassApplyPolicyTable 26: hpnicfCBQoSFrPvcApplyPolicyTable 27: hpnicfCBQoSIfCbqRunInfoTable 28: hpnicfCBQoSIfClassMatchRunInfoTable 29: hpnicfCBQoSIfCarRunInfoTable 30: hpnicfCBQoSIfGtsRunInfoTable 31: hpnicfCBQoSIfRemarkRunInfoTable 32: hpnicfCBQoSIfQueueRunInfoTable 33: hpnicfCBQoSIfWredRunInfoTable 34: hpnicfCBQoSIfAccountingRunInfoTable 35: hpnicfCBQoSAtmPvcCbqRunInfoTable 36: hpnicfCBQoSAtmPvcClassMatchRunInfoTable 37: hpnicfCBQoSAtmPvcCarRunInfoTable 38: hpnicfCBQoSAtmPvcGtsRunInfoTable 39: hpnicfCBQoSAtmPvcRemarkRunInfoTable 40: hpnicfCBQoSAtmPvcQueueRunInfoTable 41: hpnicfCBQoSAtmPvcWredRunInfoTable 42: hpnicfCBQoSAtmPvcAccountingRunInfoTable 43: hpnicfCBQoSFrPvcCbqRunInfoTable 44: hpnicfCBQoSFrPvcClassMatchRunInfoTable 45: hpnicfCBQoSFrPvcCarRunInfoTable 46: hpnicfCBQoSFrPvcGtsRunInfoTable 47: hpnicfCBQoSFrPvcRemarkRunInfoTable 48: hpnicfCBQoSFrPvcQueueRunInfoTable 49: hpnicfCBQoSFrPvcWredRunInfoTable 50: hpnicfCBQoSFrPvcAccountingRunInfoTable 51: hpnicfCBQoSIfVlanClassMatchRunInfoTable 52: hpnicfCBQoSIfVlanAccountingRunInfoTable 53: hpnicfCBQoSMirrorCfgInfoTable 54: hpnicfCBQoSGlobalApplyTable 55: hpnicfCBQoSCpApplyPolicyTable 56: hpnicfCBQoSNestCfgInfoTable 57: hpnicfCBQoSNestPolicyCfgInfoTable 58: hpnicfCBQoSMirrorIfCfgInfoTable 59: hpnicfCBQoSColoredRemarkCfgTable 60: hpnicfCBQoSPrimapCfgInfoTable 61: hpnicfCBQoSColorMapDpCfgInfoTable 62: hpnicfCBQoSApplyObjectTable 63: hpnicfCBQoSIntApplyObjectTable 64: hpnicfCBQoSVlanApplyObjectTable 65: hpnicfCBQoSPvcApplyObjectTable 66: hpnicfCBQoSNestPolicyApplyObjectTable 67: hpnicfCBQoSCpApplyObjectTable 68: hpnicfCBQoSCbqRunInfoTable 69: hpnicfCBQoSClassMatchRunInfoTable 70: hpnicfCBQoSCarRunInfoTable 71: hpnicfCBQoSGtsRunInfoTable 72: hpnicfCBQoSRemarkRunInfoTable 73: hpnicfCBQoSQueueRunInfoTable 74: hpnicfCBQoSWredRunInfoTable 75: hpnicfCBQoSAccountingRunInfoTable 76: hpnicfCBQoSApplyingStatusObjects 77: hpnicfCBQoSNotifications ')
hpnicfQos2 = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65))
class MatchRuleType(TextualConvention, Integer32):
    description = 'Type of Match Rule. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31))
    namedValues = NamedValues(("matchRuleAny", 1), ("matchRuleIpv4Acl", 2), ("matchRuleIPv6Acl", 3), ("matchRuleIPv4Protocol", 4), ("matchRuleIPv6Protocol", 5), ("matchRuleIPXProtocol", 6), ("matchRuleDscp", 7), ("matchRuleIpPre", 8), ("matchRuleVlan8021p", 9), ("matchRuleMplsExp", 10), ("matchRuleAtmClp", 11), ("matchRuleFrDe", 12), ("matchRuleSourceMac", 13), ("matchRuleDestinationMac", 14), ("matchRuleQosLocalID", 15), ("matchRuleClassifier", 16), ("matchRuleInboundInterface", 17), ("matchRuleRtpPort", 18), ("matchRuleSourceIp", 19), ("matchRuleVlanID", 20), ("matchRuleTopMostVlanID", 21), ("matchRuleLocalPrecedence", 22), ("matchRuleDropPriority", 23), ("matchRuleBittorrent", 24), ("matchRuleServiceDot1p", 25), ("matchRuleMplsLabel", 26), ("matchRuleSecondMplsLabel", 27), ("matchRuleSecondMplsExp", 28), ("matchRulePacketLength", 29), ("matchRuleArpProtocol", 30), ("matchRuleForwardingLayer", 31))

class CarAction(TextualConvention, Integer32):
    description = 'The actions taken when packets conforming or exceeding the configured committed information rate(CIR).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("invalid", 0), ("pass", 1), ("continue", 2), ("discard", 3), ("remark", 4), ("remark-ip-continue", 5), ("remark-ip-pass", 6), ("remark-mplsexp-continue", 7), ("remark-mplsexp-pass", 8), ("remark-dscp-continue", 9), ("remark-dscp-pass", 10), ("remark-dot1p-continue", 11), ("remark-dot1p-pass", 12), ("remark-atm-clp-continue", 13), ("remark-atm-clp-pass", 14), ("remark-fr-de-continue", 15), ("remark-fr-de-pass", 16), ("remark-local-pre-pass", 17), ("remark-drop-pre-pass", 18))

class RemarkType(TextualConvention, Integer32):
    description = 'Type of remark.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12))
    namedValues = NamedValues(("typeIpPrecedence", 1), ("typeDscp", 2), ("typeMplsExp", 3), ("typeVlan8021p", 4), ("typeAtmClp", 5), ("typeFrDe", 6), ("typeVlanID", 7), ("typeQosLocalID", 8), ("typeDropPrecedence", 9), ("typeLocalPrecedence", 10), ("typeTopMostVlanID", 11), ("typeSecondMplsExp", 12))

class WredType(TextualConvention, Integer32):
    description = 'WRED type.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("typeIpPrecBased", 1), ("typeDscpBased", 2), ("typeDropLevelBased", 3), ("typeAtmClpBased", 4), ("typeVlan8021pBased", 5), ("typeMplsExpBased", 6))

class QueueType(TextualConvention, Integer32):
    description = 'Queueing Type: EF:(1) AF:(2) WFQ:(3) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("ef", 1), ("af", 2), ("wfq", 3))

class QueueBandwidthUnit(TextualConvention, Integer32):
    description = 'Bandwidth Unit: Absolute, Unit : Kbps(1) Percent, Unit : %(2) RemainPercent, Unit : %(3) '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("unitUnavailable", 0), ("unitAbsolute", 1), ("unitPercent", 2), ("unitRemainPercent", 3))

class DirectionType(TextualConvention, Integer32):
    description = 'The direction of policy apply on at interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("inbound", 1), ("outbound", 2))

class ApplyObjectType(TextualConvention, Integer32):
    description = 'Type of QoS apply object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("interface", 1), ("vlan", 2), ("atmPvc", 3), ("frDlci", 4), ("controlPlane", 5))

hpnicfCBQoSObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1))
hpnicfCBQoSClassifierObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1))
hpnicfCBQoSClassifierIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassifierIndexNext.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassifierIndexNext.setDescription('This object contains an appropriate value to be used for hpnicfCBQoSClassifierIndex when creating rows in the hpnicfCBQoSClassifierCfgInfoTable. ')
hpnicfCBQoSClassifierCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSClassifierCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassifierCfgInfoTable.setDescription('A table of Traffic Classifier configuration information.')
hpnicfCBQoSClassifierCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSClassifierIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSClassifierCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassifierCfgInfoEntry.setDescription('Traffic Classifier Configuration Information Entry.')
hpnicfCBQoSClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSClassifierIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassifierIndex.setDescription('Index of Traffic Classifier. Begin with 0.')
hpnicfCBQoSClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSClassifierName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassifierName.setDescription('Name of Traffic Classifier.')
hpnicfCBQoSClassifierRuleCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassifierRuleCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassifierRuleCount.setDescription('The counter of match rules of Traffic classifier.')
hpnicfCBQoSClassifierOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("and", 1), ("or", 2))).clone('and')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSClassifierOperator.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassifierOperator.setDescription('Operator of the match rules of traffic classifier. Software QoS supports and, or. Hardware QoS supports and. ')
hpnicfCBQoSClassifierLayer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unavailable", 1), ("l2", 2), ("l3", 3), ("both", 4))).clone('l3')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSClassifierLayer.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassifierLayer.setDescription("Configuration layer of traffic classifier. Only hardware QoS support it. 1(unavailable) is returned only when getting value from software QoS. 1(unavailable) can't be set. ")
hpnicfCBQoSClassifierType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("systemDefined", 1), ("userDefined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassifierType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassifierType.setDescription('The type of classifier.')
hpnicfCBQosClassifierMatchRuleNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQosClassifierMatchRuleNextIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQosClassifierMatchRuleNextIndex.setDescription('This object contains an appropriate value to be used for hpnicfCBQoSMatchRuleIndex when creating rows in the hpnicfCBQoSMatchRuleCfgInfoTable. ')
hpnicfCBQoSClassifierRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 2, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSClassifierRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassifierRowStatus.setDescription('RowStatus.')
hpnicfCBQoSMatchRuleCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleCfgInfoTable.setDescription('A table of Match Rule configuration information.')
hpnicfCBQoSMatchRuleCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSClassifierIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSMatchRuleIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleCfgInfoEntry.setDescription('Match Rule Configuration Information Entry.')
hpnicfCBQoSMatchRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleIndex.setDescription('Index of Match Rule.')
hpnicfCBQoSMatchRuleIfNot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("match", 1), ("matchNot", 2))).clone('match')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleIfNot.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleIfNot.setDescription('Whether the if-match rule is a match or matchNot statement. Software QoS supports match, matchNot. Hardware QoS supports match. ')
hpnicfCBQoSMatchRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 3), MatchRuleType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleType.setDescription('Type of Match Rule.')
hpnicfCBQoSMatchRuleStringValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleStringValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleStringValue.setDescription("Value of Match Rule. IPv4 ACL: SIZE (1..63) ACL name IPv6 ACL: SIZE (1..63) IPv6 ACL name SourceMAC: SIZE (12) HHHHHHHHHHHH for example: 010102020303 means the match rule is 'if-match source-mac 0101-0202-0303' DestinationMAC: SIZE (12) HHHHHHHHHHHH for example: 010102020303 means the match rule is 'if-match destination-mac 0101-0202-0303' Classifier: SIZE (1..31) classifier name InboundInterface: SIZE (1..47) interface description TopMostVlanID, VlanID: SIZE(1..109), up to 10 values can be input; for example: 1##5#11#111##114#1111 means the match rule is 'if-match vlanid 1 to 5 11 111 to 114 1111' SourceIp: SIZE (12) HHHHHHHHHHHH for example: 010102020303 means the match rule is 'if-match source-ip mac-address 0101-0202-0303' MplsLabel: SIZE (1..63), up to 8 values can be input; for example: 1#11#111#1111 means the match rule is 'if-match mpls-label 1 11 111 1111'; 1##1111 means the match rule is 'if-match mpls-label 1 to 1111'; SecondMplsLabel: SIZE (1..63), up to 8 values can be input; for example: 1#11#111#1111 means the match rule is 'if-match mpls-label 1 11 111 1111'; 1##1111 means the match rule is 'if-match mpls-label 1 to 1111'; other types: Set is not permitted. zero-length string will be returned when getting. ")
hpnicfCBQoSMatchRuleIntValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleIntValue1.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleIntValue1.setDescription("Value of Match Rule. IPv4 ACL: 2000~5999 IPv6 ACL: 2000~3999; 10000~42767 Software QoS: 2000~3999 Hardware Qos: 10000~42767 RtpPort: start-port: 2000~65535 IpPrec: value: 0~7, up to 8 values can be input. The bit set to 1 of the last 8 bits of hpnicfCBQoSMatchRuleIntValue1 is used to indicate the value 0~7. for example: 0x53(Binary format is 01010011) means the match rule is 'if-match ip-prec 0 1 4 6' Dscp: value:0~63, up to 8 values can be input. The bit set to 1 of hpnicfCBQoSMatchRuleIntValue1 is used to indicate the value 32~63. The bit set to 1 of hpnicfCBQoSMatchRuleIntValue2 is used to indicate the value 0~31. for example: 0x80000003 means the match rule is 'if-match dscp 32 33 63' Vlan8021p: value:0~7, up to 8 values can be input. The bit set to 1 of the last 8 bits of hpnicfCBQoSMatchRuleIntValue1 is used to indicate the value 0~7. for example: 0x53(Binary format is 01010011) means the match rule is 'if-match customer-dot1p 0 1 4 6' MplsExp: value:0~7, up to 8 values can be input. The bit set to 1 of the last 8 bits of hpnicfCBQoSMatchRuleIntValue1 is used to indicate the 8 value 0~7. for example: 0x53(Binary format is 01010011) means the match rule is 'if-match mpls 0 1 4 6' SourceIp: 1~4095 QosLocalID: 1~4095 AtmClp: 0~1 FrDe: 0~1 LocalPrecedence: 0~7, up to 8 values can be input. The bit set to 1 of the last 8 bits of hpnicfCBQoSMatchRuleIntValue1 is used to indicate the value 0~7. for example: 0x53(Binary format is 01010011) means the match rule is 'if-match localprecedence 0 1 4 6' DropPriority: 0~2, up to 3 values can be input. The bit set to 1 of the last 3 bits of hpnicfCBQoSMatchRuleIntValue1 is used to indicate the value 0~2. ServiceDot1p: 0~7, up to 8 values can be input. The bit set to 1 of the last 8 bits of hpnicfCBQoSMatchRuleIntValue1 is used to indicate the value 0~7. for example: 0x53(Binary format is 01010011) means the match rule is 'if-match service-dot1p 0 1 4 6' SecondMplsExp: value:0~7, up to 8 values can be input. The bit set to 1 of the last 8 bits of hpnicfCBQoSMatchRuleIntValue1 is used to indicate the 8 value 0~7. for example: 0x53(Binary format is 01010011) means the match rule is 'if-match mpls 0 1 4 6' PacketLength: 1~2000. hpnicfCBQoSMatchRuleIntValue1 is used to indicate the minimum value, hpnicfCBQoSMatchRuleIntValue2 is used to indicate the maximum value. ForwardingLayer: {bridge(1), route(2)} other types: Set is not permitted. 0xffffffff will be returned when getting. ")
hpnicfCBQoSMatchRuleIntValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleIntValue2.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleIntValue2.setDescription("Value of Match Rule. RtpPort: end-port: 2000~65535 Dscp: value:0~63, up to 8 values can be input. The bit set to 1 of hpnicfCBQoSMatchRuleIntValue1 is used to indicate the value 32~63. The bit set to 1 of hpnicfCBQoSMatchRuleIntValue2 is used to indicate the value 0~31. for example: 0x80000003 means the match rule is 'if-match dscp 0 1 31' PacketLength: 1~2000. hpnicfCBQoSMatchRuleIntValue1 is used to indicate the minimum value, hpnicfCBQoSMatchRuleIntValue2 is used to indicate the maximum value. other types: Set is not permitted. 0xffffffff will be returned when getting. ")
hpnicfCBQoSMatchIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 7), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchIpAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchIpAddressType.setDescription('A value that represents a type of Internet address. unknown(0) An unknown address type. This value MUST be used if the value of the corresponding InetAddress object is a zero-length string. It may also be used to indicate an IP address which is not in one of the formats defined below. ipv4(1) An IPv4 address as defined by the InetAddressIPv4 textual convention. ipv6(2) A global IPv6 address as defined by the InetAddressIPv6 textual convention. ipv4z(3) A non-global IPv4 address including a zone index as defined by the InetAddressIPv4z textual convention. ipv6z(4) A non-global IPv6 address including a zone index as defined by the InetAddressIPv6z textual convention. dns(16) A DNS domain name as defined by the InetAddressDNS textual convention. Value of match rule. SourceIp support this node. other types: Set is not permitted. Unknown will be returned when getting. ')
hpnicfCBQoSMatchIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchIpAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchIpAddress.setDescription('Denotes a generic Internet address. SourceIP support this node. other types: Set is not permitted. NULL will be returned when getting. ')
hpnicfCBQoSMatchRuleRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchRuleRowStatus.setDescription('RowStatus.')
hpnicfCBQoSMatchCpProtoCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoCfgTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoCfgTable.setDescription('A table of Matching CpProtocol Rule configuration information.')
hpnicfCBQoSMatchCpProtoCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSClassifierIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSMatchRuleIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoCfgEntry.setDescription('Matching CpProtocol Rule Configuration Information Entry.')
hpnicfCBQoSMatchCpProtoIfNot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("match", 1), ("matchNot", 2))).clone('match')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoIfNot.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoIfNot.setDescription('Whether the if-match rule is a match or matchNot statement. Software QoS supports match, matchNot. Hardware QoS supports match. ')
hpnicfCBQoSMatchCpProtoValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoValue.setDescription("Value of Cp Protocol, SIZE (1..23). Up to 8 values can be input. for example: 1#2#3#4#5 means the match rule is 'if-match control-plane protocol arp arp-snooping bgp bgp4+ bpdu-tunnel'; arp: 1 arp-snooping: 2 bgp: 3 bgp4+: 4 bpdu-tunnel: 5 cdp: 6 cfd: 7 dhcp: 8 dhcp-snooping: 9 dhcp6: 10 dldp: 11 dot1x: 12 gmrp: 13 gvrp: 14 http: 15 https: 16 icmp: 17 icmp6: 18 igmp: 19 igmp-snooping: 20 irdp: 21 isis: 22 lacp: 23 ldp: 24 ldp6: 25 lldp: 26 mld: 27 msdp: 28 ntp: 29 oam: 30 ospf-multicast: 31 ospf-unicast: 32 ospf3-multicast: 33 ospf3-unicast: 34 pagp: 35 pim-multicast: 36 pim-unicast: 37 pim6-multicast: 38 pim6-unicast: 39 portal: 40 pppoe-negotiation: 41 pvst: 42 radius: 43 rip: 44 ripng: 45 rrpp: 46 rsvp: 47 smart-link: 48 snmp: 49 stp: 50 tacas: 51 udld: 52 udp-helper: 53 vrrp: 54 vrrp6: 55 vtp: 56 ip-option: 57 ipv6-option: 58 ssh: 59 telnet: 60")
hpnicfCBQoSMatchCpProtoRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpProtoRowStatus.setDescription('RowStatus.')
hpnicfCBQoSMatchCpGroupCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupCfgTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupCfgTable.setDescription('A table of matching Cp protocol group rule configuration information.')
hpnicfCBQoSMatchCpGroupCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSClassifierIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSMatchRuleIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupCfgEntry.setDescription('Matching Cp protocol group Rule Configuration Information Entry.')
hpnicfCBQoSMatchCpGroupIfNot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("match", 1), ("matchNot", 2))).clone('match')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupIfNot.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupIfNot.setDescription('Whether the if-match rule is a match or matchNot statement. Software QoS supports match, matchNot. Hardware QoS supports match. ')
hpnicfCBQoSMatchCpGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("critical", 1), ("important", 2), ("management", 3), ("normal", 4), ("redirect", 5), ("monitor", 6), ("exception", 7)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupValue.setDescription('Type of Cp protocol group. ')
hpnicfCBQoSMatchCpGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 1, 5, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMatchCpGroupRowStatus.setDescription('RowStatus.')
hpnicfCBQoSBehaviorObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2))
hpnicfCBQoSBehaviorIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorIndexNext.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorIndexNext.setDescription('This object contains an appropriate value to be used for hpnicfCBQoSBehaviorIndex when creating rows in the hpnicfCBQoSBehaviorCfgInfoTable.')
hpnicfCBQoSBehaviorCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorCfgInfoTable.setDescription('A table of Traffic Behavior configuration information.')
hpnicfCBQoSBehaviorCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorCfgInfoEntry.setDescription('Traffic Behavior Configuration Information Entry.')
hpnicfCBQoSBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorIndex.setDescription('Index of Traffic Behavior.')
hpnicfCBQoSBehaviorName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorName.setDescription('Name of Traffic Behavior.')
hpnicfCBQoSBehaviorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("systemDefined", 1), ("userDefined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorType.setDescription('Type of behavior.')
hpnicfCBQoSBehaviorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSBehaviorRowStatus.setDescription('RowStatus.')
hpnicfCBQoSCarCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSCarCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarCfgInfoTable.setDescription('A table of CAR feature configuration information.')
hpnicfCBQoSCarCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSCarCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarCfgInfoEntry.setDescription('CAR Configuration Information Entry.')
hpnicfCBQoSCarCir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarCir.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarCir.setDescription('Committed Information Rate. Unit: kbps.')
hpnicfCBQoSCarCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarCbs.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarCbs.setDescription('Committed Burst Size. Unit: byte.')
hpnicfCBQoSCarEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarEbs.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarEbs.setDescription("Excess Burst Size. Unit: byte. Only software QoS support this node. 4294967295 is returned only when getting value from hardware QoS. 4294967295 can't be set.")
hpnicfCBQoSCarPir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 4), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarPir.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarPir.setDescription("Peak Information Rate. Unit: kbps. Only hardware QoS support this node. 4294967295 is returned only when getting value from software QoS. 4294967295 can't be set.")
hpnicfCBQoSCarPbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarPbs.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarPbs.setDescription("Peak Burst Size. Unit: byte. Only hardware QoS support this node. 4294967295 is returned only when getting value from software QoS. 4294967295 can't be set.")
hpnicfCBQoSCarGreenAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 6), CarAction().clone('pass')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarGreenAction.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarGreenAction.setDescription('Green Action Hardware QoS : pass, discard, remark. Software QoS : pass, discard, remark IP Precedence, remark DSCP, remark MPLS EXP. ')
hpnicfCBQoSCarGreenRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarGreenRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarGreenRemarkValue.setDescription("The value is to remark When green action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. 255 is returned only when getting value from hardware QoS or when action being pass,discard of software QoS. 255 can't be set. ")
hpnicfCBQoSCarYellowAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 8), CarAction().clone('remark')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarYellowAction.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarYellowAction.setDescription("Yellow Action: Only hardware QoS support this node. Hardware QoS support pass, discard, remark. invalid is returned only when getting value from software QoS. invalid can't be set. ")
hpnicfCBQoSCarYellowRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarYellowRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarYellowRemarkValue.setDescription("The value is to remark When red action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. 255 is returned only when getting value from hardware QoS or when action being pass, discard of software QoS. 255 can't be set.")
hpnicfCBQoSCarRedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 10), CarAction().clone('discard')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarRedAction.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarRedAction.setDescription('Red Action: Hardware QoS : pass, discard, remark. Software QoS : pass, discard, remark IP Precedence, remark DSCP, remark MPLS EXP. ')
hpnicfCBQoSCarRedRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 63), ValueRangeConstraint(255, 255), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarRedRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarRedRemarkValue.setDescription("The value is to remark When red action is remarking. For remarking DSCP, the range is 0~63; For remarking IP Precedence and MPLS EXP, the range is 0~7; Only software QoS support this node. 255 is returned only when getting value from hardware QoS or when action being pass, discard of software QoS. 255 can't be set.")
hpnicfCBQoSCarPolicedPriorityMapType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("policed-service-map", 1), ("local-precedence-dot1p-map", 2), ("drop-precedence-map", 3))).clone('none')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarPolicedPriorityMapType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarPolicedPriorityMapType.setDescription('Type of priority map.')
hpnicfCBQoSCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 3, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarRowStatus.setDescription('RowStatus.')
hpnicfCBQoSAggregativeCarCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSAggregativeCarCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAggregativeCarCfgInfoTable.setDescription('A table of aggregative CAR applied CBQ feature configuration information. Aggregative CAR is managed by HPN-ICF-IFQOS2-MIB. So, you can use HPN-ICF-IFQOS2-MIB to get some details information about aggregative CAR. ')
hpnicfCBQoSAggregativeCarCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSCarAggregativeCarIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAggregativeCarCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAggregativeCarCfgInfoEntry.setDescription('Aggregative CAR feature applied CBQ configuration information entry.')
hpnicfCBQoSCarAggregativeCarIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSCarAggregativeCarIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarAggregativeCarIndex.setDescription('Index of aggregative CAR. It is equal to hpnicfIfQoSAggregativeCarIndex at HPN-ICF-IFQOS2-MIB. ')
hpnicfCBQoSCarAggregativeCarName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCarAggregativeCarName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarAggregativeCarName.setDescription('Name of aggregative CAR. It is equal to hpnicfIfQoSAggregativeCarName at HPN-ICF-IFQOS2-MIB. ')
hpnicfCBQoSAggregativeCarRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSAggregativeCarRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAggregativeCarRowStatus.setDescription('RowStatus.')
hpnicfCBQoSGtsCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSGtsCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsCfgInfoTable.setDescription('A table of GTS feature configuration information.')
hpnicfCBQoSGtsCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSGtsCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsCfgInfoEntry.setDescription('GTS Configuration Information Entry.')
hpnicfCBQoSGtsCir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5, 1, 1), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGtsCir.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsCir.setDescription('Committed Information Rate. Unit: kbps')
hpnicfCBQoSGtsCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGtsCbs.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsCbs.setDescription('Committed Burst Size. Unit: byte default: max(cir*1/2,15000)')
hpnicfCBQoSGtsEbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGtsEbs.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsEbs.setDescription('Excess Burst Size. Unit: byte')
hpnicfCBQoSGtsQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(50)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGtsQueueLength.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsQueueLength.setDescription('The length of GTS buffer.')
hpnicfCBQoSGtsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGtsRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsRowStatus.setDescription('RowStatus.')
hpnicfCBQoSGtsPir = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 5, 1, 6), Unsigned32()).setUnits('kbps').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGtsPir.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsPir.setDescription('Peak Information Rate. ')
hpnicfCBQoSRemarkCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 6), )
if mibBuilder.loadTexts: hpnicfCBQoSRemarkCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRemarkCfgInfoTable.setDescription('A table of Remarking feature configuration information.')
hpnicfCBQoSRemarkCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 6, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSRemarkType"))
if mibBuilder.loadTexts: hpnicfCBQoSRemarkCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRemarkCfgInfoEntry.setDescription('Remarking Configuration Information Entry.')
hpnicfCBQoSRemarkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 6, 1, 1), RemarkType())
if mibBuilder.loadTexts: hpnicfCBQoSRemarkType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRemarkType.setDescription('Remark type.')
hpnicfCBQoSRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRemarkValue.setDescription('Value to remark: for IpPrecedence: 0~7 for Dscp: 0~63 for MplsExp: 0~7 for Vlan8021p: 0~7 for AtmClp: 0~1 for FrDe: 0~1 for VlanID: 1~4094 for QosLocalID: 1~4095 for DropPrecedence: 0~2 for LocalPrecedence: 0~7 for TopMostVlanID: 1~4094 for SecondMplsExp: 0~7 ')
hpnicfCBQoSRemarkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRemarkRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRemarkRowStatus.setDescription('RowStatus')
hpnicfCBQoSQueueCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7), )
if mibBuilder.loadTexts: hpnicfCBQoSQueueCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueCfgInfoTable.setDescription('A table of queue feature configuration information.')
hpnicfCBQoSQueueCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSQueueCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueCfgInfoEntry.setDescription('Queue Configuration Information Entry.')
hpnicfCBQoSQueueType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 1), QueueType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueType.setDescription('Queueing Type: EF:(1) AF:(2) WFQ:(3)')
hpnicfCBQoSQueueDropType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("typeUnavailable", 0), ("typeTailDrop", 1), ("typeWred", 2))).clone('typeTailDrop')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueDropType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueDropType.setDescription("The drop type of queue. Only valid for AF and WFQ queue. typeUnavailable is returned only when getting value about EF queue. typeUnavailable can't be set.")
hpnicfCBQoSQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(64)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueLength.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueLength.setDescription("The length of QueueLength. Only valid for tail-drop type of AF and WFQ queue. 2147483647 is returned only when getting value about EF queue or WRED type of AF and WFQ queue. 2147483647 can't be set.")
hpnicfCBQoSQueueBandwidthUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 4), QueueBandwidthUnit()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueBandwidthUnit.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueBandwidthUnit.setDescription("Bandwidth Unit: Absolute, Unit Kbps (1) Percent, Unit % (2) RemainPercent, Unit % of remained bandwidth (3) Only valid for EF and AF queue. 0 is returned only when getting value about WFQ queue. 0 can't be set. ")
hpnicfCBQoSQueueBandwidthValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 10000000), ValueRangeConstraint(2147483647, 2147483647), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueBandwidthValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueBandwidthValue.setDescription("Bandwidth value: Absolute value: 8~10000000. Unit: Kbps Percent value: 1~100. Only valid for EF and AF queue. 2147483647 is returned only when getting value about WFQ queue. 2147483647 can't be set.")
hpnicfCBQoSQueueCbs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(32, 1000000000), ValueRangeConstraint(2147483647, 2147483647), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueCbs.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueCbs.setDescription("Committed Burst Size. Unit: byte. Only valid for EF queue. Default: If the value of 'hpnicfCBQoSQueueBandwidthValue * 25' is between 1500 and 2000000, the default value of this object is 'hpnicfCBQoSQueueBandwidthValue * 25';If the value of 'hpnicfCBQoSQueueBandwidthValue * 25' is larger than or equal to 2000000, the default value of this object is 2000000; If the value of 'hpnicfCBQoSQueueBandwidthValue * 25' is less than or equal to 1500, the default value of this object is 1500. 2147483647 is returned only when getting value about AF or WFQ queue. 2147483647 can't be set.")
hpnicfCBQoSQueueQueueNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 16, 32, 64, 128, 256, 512, 1024, 2048, 4096))).clone(namedValues=NamedValues(("unavailable", 0), ("a16", 16), ("a32", 32), ("a64", 64), ("a128", 128), ("a256", 256), ("a512", 512), ("a1024", 1024), ("a2048", 2048), ("a4096", 4096))).clone('a256')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueQueueNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueQueueNumber.setDescription("Max number of hashed queues (a power of 2). Only valid for WFQ. 'unavailable' is returned only when getting value about AF or EF queue. 'unavailable' can't be set.")
hpnicfCBQoSQueueCbsRatio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(25, 500), ValueRangeConstraint(2147483647, 2147483647), )).clone(25)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueCbsRatio.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueCbsRatio.setDescription("Committed Burst Size Ratio. CBS = CBS_Ratio * Bandwidth(k bps) Only valid for EF queue. 2147483647 is returned only when getting value about AF or WFQ queue. 2147483647 can't be set. ")
hpnicfCBQoSQueueRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 7, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSQueueRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueRowStatus.setDescription('RowStatus.')
hpnicfCBQoSWredCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 8), )
if mibBuilder.loadTexts: hpnicfCBQoSWredCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSWredCfgInfoTable.setDescription('A table of WRED configuration information.')
hpnicfCBQoSWredCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 8, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSWredCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSWredCfgInfoEntry.setDescription('WRED Configuration Information Entry.')
hpnicfCBQoSWredType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 8, 1, 1), WredType().clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCBQoSWredType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSWredType.setDescription('WRED type.')
hpnicfCBQoSWredWeightConst = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16)).clone(9)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCBQoSWredWeightConst.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSWredWeightConst.setDescription('Specify weight for calculating mean queue depth.')
hpnicfCBQoSWredClassCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 9), )
if mibBuilder.loadTexts: hpnicfCBQoSWredClassCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSWredClassCfgInfoTable.setDescription('A table of WRED configuration information.')
hpnicfCBQoSWredClassCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 9, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSWredClassValue"))
if mibBuilder.loadTexts: hpnicfCBQoSWredClassCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSWredClassCfgInfoEntry.setDescription('WRED Class Configuration Information Entry.')
hpnicfCBQoSWredClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: hpnicfCBQoSWredClassValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSWredClassValue.setDescription('The class value. For IP precedence based WRED, the class is IP precedence, and range is 0~7. For DSCP based WRED, the class is DSCP, and range is 0~63. ')
hpnicfCBQoSWredClassLowLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCBQoSWredClassLowLimit.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSWredClassLowLimit.setDescription('The low limit of queue depth.')
hpnicfCBQoSWredClassHighLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCBQoSWredClassHighLimit.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSWredClassHighLimit.setDescription('The high limit of queue depth.')
hpnicfCBQoSWredClassDiscardProb = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfCBQoSWredClassDiscardProb.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSWredClassDiscardProb.setDescription('The discard probability denominator.')
hpnicfCBQoSPolicyRouteCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 10), )
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteCfgInfoTable.setDescription('A table of Policy Routing configuration information.')
hpnicfCBQoSPolicyRouteCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 10, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteCfgInfoEntry.setDescription('Policy Routeing Configuration Information Entry.')
hpnicfCBQoSPolicyRouteIpAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 10, 1, 1), InetAddressType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteIpAddrType.setDescription('Type of InetAddress.')
hpnicfCBQoSPolicyRouteNexthop = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 10, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteNexthop.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteNexthop.setDescription('The next-hop ip address for redirection.')
hpnicfCBQoSPolicyRouteBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("backup", 1), ("notbackup", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteBackup.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteBackup.setDescription('Whether forward the packet according to the routing table When the next-hop IP address for redirection is not valid. Backup means forwarding. NoBackup means not forwarding. ')
hpnicfCBQoSPolicyRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRouteRowStatus.setDescription('RowStatus.')
hpnicfCBQoSNatCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 11), )
if mibBuilder.loadTexts: hpnicfCBQoSNatCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNatCfgInfoTable.setDescription('A table of Nat configuration information.')
hpnicfCBQoSNatCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 11, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSNatCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNatCfgInfoEntry.setDescription('Nat Configuration Information Entry.')
hpnicfCBQoSNatMainNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNatMainNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNatMainNumber.setDescription('The main ISP number.')
hpnicfCBQoSNatBackupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNatBackupNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNatBackupNumber.setDescription('The backup ISP number')
hpnicfCBQoSNatServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 11, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNatServiceClass.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNatServiceClass.setDescription('The service class.')
hpnicfCBQoSNatRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 11, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNatRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNatRowStatus.setDescription('RowStatus.')
hpnicfCBQoSFirewallCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 12), )
if mibBuilder.loadTexts: hpnicfCBQoSFirewallCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFirewallCfgInfoTable.setDescription('A table of firewall configuration information.')
hpnicfCBQoSFirewallCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 12, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSFirewallCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFirewallCfgInfoEntry.setDescription('Firewall configuration information entry.')
hpnicfCBQoSFirewallAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 12, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2))).clone('permit')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSFirewallAction.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFirewallAction.setDescription('The firewall action ')
hpnicfCBQoSFirewallRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 12, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSFirewallRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFirewallRowStatus.setDescription('RowStatus.')
hpnicfCBQoSSamplingCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 13), )
if mibBuilder.loadTexts: hpnicfCBQoSSamplingCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSSamplingCfgInfoTable.setDescription('A table of sampling configuration information.')
hpnicfCBQoSSamplingCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 13, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSSamplingCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSSamplingCfgInfoEntry.setDescription('Sampling configuration information entry.')
hpnicfCBQoSSamplingNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSSamplingNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSSamplingNum.setDescription('The sampling number.')
hpnicfCBQoSSamplingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSSamplingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSSamplingRowStatus.setDescription('RowStatus.')
hpnicfCBQoSAccountCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 14), )
if mibBuilder.loadTexts: hpnicfCBQoSAccountCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAccountCfgInfoTable.setDescription('A table of account configuration information.')
hpnicfCBQoSAccountCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 14, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAccountCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAccountCfgInfoEntry.setDescription('Account configuration information entry.')
hpnicfCBQoSAccounting = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 14, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSAccounting.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAccounting.setDescription('Account action.')
hpnicfCBQoSAccountRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 14, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSAccountRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAccountRowStatus.setDescription('RowStatus.')
hpnicfCBQoSAccountingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 14, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("packet", 2), ("byte", 3), ("both", 4))).clone('auto')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSAccountingMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAccountingMode.setDescription('Account mode.')
hpnicfCBQoSRedirectCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15), )
if mibBuilder.loadTexts: hpnicfCBQoSRedirectCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRedirectCfgInfoTable.setDescription('A table of redirect configuration information.')
hpnicfCBQoSRedirectCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSRedirectCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRedirectCfgInfoEntry.setDescription('Redirect configuration information entry.')
hpnicfCBQoSRedirectType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("cpu", 1), ("interface", 2), ("nextHop", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRedirectType.setDescription('The type of redirect.')
hpnicfCBQoSRedirectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIfIndex.setDescription('ifIndex. Only the value of hpnicfCBQoSRedirectType is interface, can be set this node. ')
hpnicfCBQoSRedirectIpAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 3), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpAddressType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpAddressType.setDescription('A value that represents a type of Internet address. unknown(0) An unknown address type. This value MUST be used if the value of the corresponding InetAddress object is a zero-length string. It may also be used to indicate an IP address which is not in one of the formats defined below. ipv4(1) An IPv4 address as defined by the InetAddressIPv4 textual convention. ipv6(2) A global IPv6 address as defined by the InetAddressIPv6 textual convention. ipv4z(3) A non-global IPv4 address including a zone index as defined by the InetAddressIPv4z textual convention. ipv6z(4) A non-global IPv6 address including a zone index as defined by the InetAddressIPv6z textual convention. dns(16) A DNS domain name as defined by the InetAddressDNS textual convention. Now supports ipv4 and ipv6. Only the value of hpnicfCBQoSRedirectType is next-hop, can be set this node and hpnicfCBQoSRedirectIpAddress1 or hpnicfCBQoSRedirectIpAddress2. ')
hpnicfCBQoSRedirectIpAddress1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 4), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpAddress1.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpAddress1.setDescription('IP Address. If the value of hpnicfCBQoSRedirectType is not next-hop, zero-length string will be returned when getting. If the value of hpnicfCBQoSRedirectIpAddressType is ipv6, this node is set necessarily. ')
hpnicfCBQoSRedirectIpAddress2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpAddress2.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpAddress2.setDescription('IP Address. If the value of hpnicfCBQoSRedirectType is not next-hop, zero-length string will be returned when getting. If the value of hpnicfCBQoSRedirectIpAddressType is ipv6, this node is set optionally. ')
hpnicfCBQoSRedirectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRedirectRowStatus.setDescription('RowStatus.')
hpnicfCBQoSRedirectIpv6Interface1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpv6Interface1.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpv6Interface1.setDescription('IfIndex for ipv6 next hop . If and only if the value of hpnicfCBQoSRedirectIpAddressType is ipv6 and hpnicfCBQoSRedirectIpAddress1 is set, this node can be set. ')
hpnicfCBQoSRedirectIpv6Interface2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpv6Interface2.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIpv6Interface2.setDescription('IfIndex for ipv6 next hop . If and only if the value of hpnicfCBQoSRedirectIpAddressType is ipv6 and hpnicfCBQoSRedirectIpAddress2 is set, this node can be set. ')
hpnicfCBQoSRedirectIfVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 15, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 4094), ValueRangeConstraint(65535, 65535), )).clone(65535)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIfVlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRedirectIfVlanID.setDescription('VLAN-ID to tag. If and only if the value of hpnicfCBQoSRedirectType is interface, this node can be set. ')
hpnicfCBQoSPriorityMapCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16), )
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapCfgInfoTable.setDescription('A table of priority map configuration information.')
hpnicfCBQoSPriorityMapCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapCfgInfoEntry.setDescription('priority map configuration information entry.')
hpnicfCBQoSPriorityMapImportType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("invalid", 1), ("dscp", 2), ("dot1p", 3), ("exp", 4), ("ipPrecedence", 5), ("localPrecedence", 6), ("dropPrecedence", 7))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapImportType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapImportType.setDescription('Import type of map.')
hpnicfCBQoSPriorityMapExportType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("invalid", 1), ("dscp", 2), ("dot1p", 3), ("exp", 4), ("ipPrecedence", 5), ("localPrecedence", 6), ("dropPrecedence", 7))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapExportType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapExportType.setDescription('Export type of map.')
hpnicfCBQoSPriorityMapGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapGroupIndex.setDescription('Index of map group. Map group is managed by HPN-ICF-IFQOS2-MIB. ')
hpnicfCBQoSPriorityMapGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapGroupName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapGroupName.setDescription('Name of map group. Map group is managed by HPN-ICF-IFQOS2-MIB. ')
hpnicfCBQoSPriorityMapAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("autoDscp", 2), ("autoDot1p", 3), ("autoMplsExp", 4), ("autoIp", 5))).clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapAuto.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapAuto.setDescription('Type of priority MAP.')
hpnicfCBQoSPriorityMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 16, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPriorityMapRowStatus.setDescription('RowStatus.')
hpnicfCBQoSMirrorCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 17), )
if mibBuilder.loadTexts: hpnicfCBQoSMirrorCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMirrorCfgInfoTable.setDescription('A table of flow mirror configuration information.')
hpnicfCBQoSMirrorCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 17, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSMirrorCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMirrorCfgInfoEntry.setDescription('Flow mirror configuration information entry.')
hpnicfCBQoSMirrorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("interface", 1), ("cpu", 2), ("vlan", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMirrorType.setDescription('Type of flow mirror.')
hpnicfCBQoSMirrorIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfIndex.setDescription("IfIndex of destination interface. Only the value of hpnicfCBQoSMirrorType is interface, can be set this node. For example: 1#11#111#1111 means the flow mirror destination ifindex is 1,11,111 and 1111. '#' is list separator for all IfIndex value. ")
hpnicfCBQoSMirrorVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 17, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorVlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMirrorVlanID.setDescription('Destination vlan of flow mirror, Only the value of hpnicfCBQoSMirrorType is vlan, can be set this node. ')
hpnicfCBQoSMirrorRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 17, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMirrorRowStatus.setDescription('RowStatus.')
hpnicfCBQoSNestCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 18), )
if mibBuilder.loadTexts: hpnicfCBQoSNestCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestCfgInfoTable.setDescription('Insert a service VLAN tag or customer VLAN tag into a packet. A VLAN tag contains the VLAN ID field and the 802.1p priority field. Both the service VLAN ID and the customer VLAN ID can not be set at the same time. One of them must be set. The 802.1p priority of the service VLAN tag and that of the customer VLAN tag can be set optionally. However, both of them can not be set at the same time. The new setting overwrites the previous one.')
hpnicfCBQoSNestCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 18, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSNestCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestCfgInfoEntry.setDescription('VLAN nesting table entry.')
hpnicfCBQoSNestServiceVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 18, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNestServiceVlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestServiceVlanID.setDescription('VLAN ID of the service VLAN tag to be inserted. If the customer VLAN tag has been configured, 65535 is returned for the service VLAN ID. The service VLAN ID can not be set to 65535.')
hpnicfCBQoSNestServiceDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 18, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNestServiceDot1pValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestServiceDot1pValue.setDescription('802.1p priority value in the service VLAN tag to be inserted. If the 802.1p priority is not set, 65535 is returned. The 802.1p priority value can not be set to 65535.')
hpnicfCBQoSNestCustomerVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 18, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 4094), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNestCustomerVlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestCustomerVlanID.setDescription('VLAN ID of the customer VLAN tag to be inserted. If the service VLAN tag has been configured, 65535 is returned for the customer VLAN ID. The customer VLAN ID can not be set to 65535.')
hpnicfCBQoSNestCustomerDot1pValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 18, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 7), ValueRangeConstraint(65535, 65535), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNestCustomerDot1pValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestCustomerDot1pValue.setDescription('802.1p priority value in the customer VLAN tag to be inserted. If the 802.1p priority is not set, 65535 is returned. The 802.1p priority value can not be set to 65535.')
hpnicfCBQoSNestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 18, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNestRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestRowStatus.setDescription('RowStatus')
hpnicfCBQoSNestPolicyCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 19), )
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyCfgInfoTable.setDescription('This table is used for configuring nest policy.')
hpnicfCBQoSNestPolicyCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 19, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyCfgInfoEntry.setDescription('Nest policy configuration entry.')
hpnicfCBQoSNestPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 19, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyName.setDescription('Name of the nested policy.')
hpnicfCBQoSNestPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 19, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyRowStatus.setDescription('RowStatus')
hpnicfCBQoSMirrorIfCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 20), )
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfCfgInfoTable.setDescription('A table of flow mirroring to interface configuration information.')
hpnicfCBQoSMirrorIfCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 20, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSMirrorIfMainIfIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfCfgInfoEntry.setDescription('Flow mirroring to interface configuration information entry.')
hpnicfCBQoSMirrorIfMainIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 20, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfMainIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfMainIfIndex.setDescription('IfIndex of mirror interface.')
hpnicfCBQoSMirrorIfMainIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 20, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfMainIfStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfMainIfStatus.setDescription('Status of main interface.')
hpnicfCBQoSMirrorIfBackupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 20, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfBackupIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfBackupIfIndex.setDescription('IfIndex of backup mirror interface.')
hpnicfCBQoSMirrorIfBackupIfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 20, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2))).clone('active')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfBackupIfStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfBackupIfStatus.setDescription('Status of backup interface.')
hpnicfCBQoSMirrorIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 20, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSMirrorIfRowStatus.setDescription('RowStatus.')
hpnicfCBQoSColoredRemarkCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 21), )
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkCfgTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkCfgTable.setDescription('A table of colored remarking feature configuration information.')
hpnicfCBQoSColoredRemarkCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 21, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSColoredRemarkType"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSColoredRemarkColor"))
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkCfgEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkCfgEntry.setDescription('Colored remarking configuration information entry.')
hpnicfCBQoSColoredRemarkType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 21, 1, 1), RemarkType())
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkType.setDescription('Remark type.')
hpnicfCBQoSColoredRemarkColor = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 21, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("green", 1), ("yellow", 2), ("red", 3))))
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkColor.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkColor.setDescription('Remark color.')
hpnicfCBQoSColoredRemarkValue = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 21, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkValue.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkValue.setDescription('Value to remark: for IpPrecedence: 0~7 for Dscp: 0~63 for MplsExp: 0~7 for Vlan8021p: 0~7 for AtmClp: 0~1 for FrDe: 0~1 for VlanID: 1~4094 for QosLocalID: 1~4095 for DropPrecedence: 0~2 for LocalPrecedence: 0~7 for TopMostVlanID: 1~4094 for SecondMplsExp: 0~7 ')
hpnicfCBQoSColoredRemarkRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 21, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSColoredRemarkRowStatus.setDescription('RowStatus')
hpnicfCBQoSPrimapCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 22), )
if mibBuilder.loadTexts: hpnicfCBQoSPrimapCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPrimapCfgInfoTable.setDescription('A table of referencing priority map configuration information.')
hpnicfCBQoSPrimapCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 22, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPrimapColorType"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPrePriMapTableType"))
if mibBuilder.loadTexts: hpnicfCBQoSPrimapCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPrimapCfgInfoEntry.setDescription('Referencing priority map configuration information entry.')
hpnicfCBQoSPrimapColorType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 22, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noColorMap", 1), ("colorMap", 2))))
if mibBuilder.loadTexts: hpnicfCBQoSPrimapColorType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPrimapColorType.setDescription('Color type of priority map.')
hpnicfCBQoSPrePriMapTableType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 22, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34))).clone(namedValues=NamedValues(("dot1pToLp", 1), ("dot1pToDp", 2), ("expToLp", 3), ("dscpToLp", 4), ("expToDp", 5), ("dscpToDp", 6), ("dscpToDot1p", 7), ("dot1pToDscp", 8), ("dscpToDscp", 9), ("dscpToExp", 10), ("expToDscp", 11), ("expToDot1p", 12), ("expToExp", 13), ("lpToDot1p", 14), ("dot1pToRpr", 15), ("dscpToRpr", 16), ("expToRpr", 17), ("ippreToRpr", 18), ("upToDot1p", 19), ("upToDscp", 20), ("upToExp", 21), ("upToDp", 22), ("upToLp", 23), ("upToRpr", 24), ("upToFc", 25), ("lpTodscp", 26), ("dot11eToLp", 27), ("lpToDot11e", 28), ("lpToLp", 29), ("dot1pToExp", 30), ("lpToExp", 31), ("lpToDp", 32), ("upToUp", 33), ("dot1pToDot1p", 34))))
if mibBuilder.loadTexts: hpnicfCBQoSPrePriMapTableType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPrePriMapTableType.setDescription('The type of pre-defined priority mapping table.')
hpnicfCBQoSPrimapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 22, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPrimapRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPrimapRowStatus.setDescription('RowStatus')
hpnicfCBQoSColorMapDpCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 23), )
if mibBuilder.loadTexts: hpnicfCBQoSColorMapDpCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSColorMapDpCfgInfoTable.setDescription('A table of referencing color-map-DP action configuration information.')
hpnicfCBQoSColorMapDpCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 23, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSBehaviorIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSColorMapDpCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSColorMapDpCfgInfoEntry.setDescription('Referencing color-map-DP action configuration information entry.')
hpnicfCBQoSColorMapDpEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 23, 1, 1), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSColorMapDpEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSColorMapDpEnable.setDescription('Color-map-DP enable status.')
hpnicfCBQoSColorMapDpRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 2, 23, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSColorMapDpRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSColorMapDpRowStatus.setDescription('RowStatus')
hpnicfCBQoSPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3))
hpnicfCBQoSPolicyIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyIndexNext.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyIndexNext.setDescription('This object contains an appropriate value to be used for hpnicfCBQoSPolicyIndex when creating rows in the hpnicfCBQoSPolicyCfgInfoTable.')
hpnicfCBQoSPolicyCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSPolicyCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyCfgInfoTable.setDescription('A table of QoS policy configuration information.')
hpnicfCBQoSPolicyCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSPolicyCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyCfgInfoEntry.setDescription('Traffic policy configuration information entry.')
hpnicfCBQoSPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyIndex.setDescription('Index of Traffic Policy.')
hpnicfCBQoSPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyName.setDescription('Name of Traffic Policy.')
hpnicfCBQoSPolicyClassCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassCount.setDescription('The counter of policy classes of policy.')
hpnicfCBQoSPolicyConfigMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unavailable", 0), ("config", 1), ("auto", 2))).clone('config')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyConfigMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyConfigMode.setDescription("Configuration mode of Traffic Policy. Only hardware QoS support this node. 'unavailable' is returned only when getting value from software QoS. 'unavailable' can't be set.")
hpnicfCBQoSPolicyType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("systemDefined", 1), ("userDefined", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyType.setDescription('Type of policy.')
hpnicfCBQoSPolicyClassNextIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassNextIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassNextIndex.setDescription('This object contains an appropriate value to be used for hpnicfCBQoSPolicyClassIndex when creating rows in the hpnicfCBQoSPolicyClassCfgInfoTable. ')
hpnicfCBQoSPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyRowStatus.setDescription('RowStatus.')
hpnicfCBQoSPolicyClassCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassCfgInfoTable.setDescription('A table of QoS Policy classifier-behavior configuration information.')
hpnicfCBQoSPolicyClassCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassCfgInfoEntry.setDescription('Traffic policy classifier-behavior configuration information entry.')
hpnicfCBQoSPolicyClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassIndex.setDescription('PolicyClass Index in a QoS policy.')
hpnicfCBQoSPolicyClassClassifierIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassClassifierIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassClassifierIndex.setDescription('Index of classifier applied by a policy. It should exist in hpnicfCBQoSClassifierCfgInfoTable.')
hpnicfCBQoSPolicyClassClassifierName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassClassifierName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassClassifierName.setDescription('Name of classifier applied by a policy. It is corresponding to hpnicfCBQoSPolicyClassClassifierIndex.')
hpnicfCBQoSPolicyClassBehaviorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassBehaviorIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassBehaviorIndex.setDescription('Index of Behavior applied by a policy. It should exist in hpnicfCBQoSBehaviorCfgInfoTable.')
hpnicfCBQoSPolicyClassBehaviorName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassBehaviorName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassBehaviorName.setDescription('Name of Behavior applied by a policy. It is corresponding to hpnicfCBQoSPolicyClassBehaviorIndex.')
hpnicfCBQoSPolicyClassPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 16383), ValueRangeConstraint(2147483647, 2147483647), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassPrecedence.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassPrecedence.setDescription("The Precedence of the class in the policy. Only hardware QoS support this node. 2147483647 is returned only when getting value from software QoS. 2147483647 can't be set.")
hpnicfCBQoSPolicyClassRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassRowStatus.setDescription('RowStatus.')
hpnicfCBQoSPolicyClassMode = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("modeNo", 1), ("modeDot1q", 2), ("modeQppb", 3), ("modeIpSourceGuard", 4), ("modeVoiceVlan", 5), ("modeDCBX", 6))).clone('modeNo')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassMode.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassMode.setDescription('Set the mode of the classifier-behavior association. The default mode modeNo is a normal mode. modeDot1q indicates that the association is used for VLAN mapping. modeQppb indicates that the association is used for BGP routing policy. modeIpSourceGuard indicates that the association is used for packets undergo IP source guard. modeVoiceVlan indicates that the association is used for voice data packets. modeDCBX indicates that the association is used for DCBX. ')
hpnicfCBQoSPolicyClassCfgOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassCfgOrder.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPolicyClassCfgOrder.setDescription('A QoS policy contains multiple classifier-behavior associations. A node indicates the configuration order of the corresponding classifier-behavior association.')
hpnicfCBQoSApplyPolicyObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4))
hpnicfCBQoSIfApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1), )
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyTable.setDescription('A table of QoS policy instance.')
hpnicfCBQoSIfApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyEntry.setDescription('Policy applied on interface Configuration Information Entry.')
hpnicfCBQoSIfApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyIfIndex.setDescription('Interface Index, equal to ifIndex.')
hpnicfCBQoSIfApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1, 1, 2), DirectionType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2) ')
hpnicfCBQoSIfApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyName.setDescription('Name of Traffic Policy.')
hpnicfCBQoSIfApplyPolicyEnableDynamic = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unavailable", 1), ("true", 2), ("false", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyEnableDynamic.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyEnableDynamic.setDescription("If the value of it is specified 'true',Enable dynamic qos policy. 'unavailable' is returned if device don't support dynamic QoS. 'unavailable' can't be set. ")
hpnicfCBQoSIfApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyRowStatus.setDescription('RowStatus.')
hpnicfCBQoSIfApplyPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("proccessing", 1), ("success", 2), ("partialItemFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfApplyPolicyStatus.setDescription('Status of policy applied on interface.')
hpnicfCBQoSAtmPvcApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyTable.setDescription('A table of QoS policy instance.')
hpnicfCBQoSAtmPvcApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyEntry.setDescription('Policy applied on ATM PVC Configuration Information Entry.')
hpnicfCBQoSAtmPvcApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyIfIndex.setDescription('ATM Interface Index, equal to ifIndex.')
hpnicfCBQoSAtmPvcApplyPolicyVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyVPI.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyVPI.setDescription('VPI value of ATM Interface.')
hpnicfCBQoSAtmPvcApplyPolicyVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyVCI.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyVCI.setDescription('VCI value of ATM Interface.')
hpnicfCBQoSAtmPvcApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2, 1, 4), DirectionType())
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hpnicfCBQoSAtmPvcApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyName.setDescription('Name of Traffic Policy.')
hpnicfCBQoSAtmPvcApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcApplyPolicyRowStatus.setDescription('RowStatus')
hpnicfCBQoSVlanApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyTable.setDescription('A table of QoS policy instance.')
hpnicfCBQoSVlanApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyVlanid"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyEntry.setDescription('Policy applied on Ethernet VLAN Configuration Information Entry.')
hpnicfCBQoSVlanApplyPolicyVlanid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyVlanid.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyVlanid.setDescription('Vlan of Ethernet Interface.')
hpnicfCBQoSVlanApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3, 1, 2), DirectionType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hpnicfCBQoSVlanApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyName.setDescription('Name of Traffic Policy.')
hpnicfCBQoSVlanApplyPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPriority.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPriority.setDescription('The priority of policy.')
hpnicfCBQoSVlanApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyRowStatus.setDescription('RowStatus.')
hpnicfCBQoSVlanApplyPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("proccessing", 1), ("success", 2), ("partialItemFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyPolicyStatus.setDescription('Status of policy applied on VLAN.')
hpnicfCBQoSFrClassApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyTable.setDescription('A table of QoS policy instance.')
hpnicfCBQoSFrClassApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrClassApplyPolicyFrClassName"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrClassApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyEntry.setDescription('Policy applied on FR class Configuration Information Entry.')
hpnicfCBQoSFrClassApplyPolicyFrClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 4, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31)))
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyFrClassName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyFrClassName.setDescription('The name of FR class.')
hpnicfCBQoSFrClassApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 4, 1, 2), DirectionType())
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hpnicfCBQoSFrClassApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyName.setDescription('Name of Traffic Policy.')
hpnicfCBQoSFrClassApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrClassApplyPolicyRowStatus.setDescription('RowStatus.')
hpnicfCBQoSFrPvcApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyTable.setDescription('A table of QoS policy instance.')
hpnicfCBQoSFrPvcApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyEntry.setDescription('Policy applied on FR PVC Configuration Information Entry.')
hpnicfCBQoSFrPvcApplyPolicyIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyIfIndex.setDescription('Fr Interface Index, equal to ifIndex.')
hpnicfCBQoSFrPvcApplyPolicyDlciNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 1007)))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyDlciNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyDlciNum.setDescription('Fr DLCI number.')
hpnicfCBQoSFrPvcApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 5, 1, 3), DirectionType())
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hpnicfCBQoSFrPvcApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyName.setDescription('Name of Traffic Policy.')
hpnicfCBQoSFrPvcApplyPolicyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 5, 1, 5), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcApplyPolicyRowStatus.setDescription('RowStatus.')
hpnicfCBQoSGlobalApplyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 6), )
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyTable.setDescription('A table of QoS policies applied globally. A QoS policy applied globally takes effect on all ports of the device.')
hpnicfCBQoSGlobalApplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 6, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSGlobalApplyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyEntry.setDescription('A global policy entry.')
hpnicfCBQoSGlobalApplyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 6, 1, 1), DirectionType())
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyDirection.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hpnicfCBQoSGlobalApplyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyName.setDescription('Name of a global policy.')
hpnicfCBQoSGlobalApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 6, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyRowStatus.setDescription('RowStatus.')
hpnicfCBQoSGlobalApplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("proccessing", 1), ("success", 2), ("partialItemFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGlobalApplyStatus.setDescription('Status of policy applied globally.')
hpnicfCBQoSCpApplyPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7), )
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyTable.setDescription('A table of QoS policies applied on control plane.')
hpnicfCBQoSCpApplyPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSCpApplyPolicyChassis"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSCpApplyPolicySlot"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSCpApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyEntry.setDescription('Policy applied on control plane configuration information entry.')
hpnicfCBQoSCpApplyPolicyChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyChassis.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyChassis.setDescription('Chassis number.')
hpnicfCBQoSCpApplyPolicySlot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicySlot.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicySlot.setDescription('Slot number.')
hpnicfCBQoSCpApplyPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7, 1, 3), DirectionType())
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyDirection.setDescription('Policy direction: inbound (1) outbound (2)')
hpnicfCBQoSCpApplyPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyName.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyName.setDescription('Name of traffic policy.')
hpnicfCBQoSCpApplyPolicyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("proccessing", 1), ("success", 2), ("partialItemFailed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyPolicyStatus.setDescription('Status of policy applied on control plane.')
hpnicfCBQoSCpApplyRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 4, 7, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyRowStatus.setDescription('RowStatus.')
hpnicfCBQoSApplyPolicyStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5))
hpnicfCBQoSIfStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1))
hpnicfCBQoSIfCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1), )
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqRunInfoTable.setDescription('A table of interface CBQ Running statistics. When policy using queue behavior is applied on interface the interface will using Class Based Queuing.')
hpnicfCBQoSIfCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqRunInfoEntry.setDescription('Interface CBQ statistics entry.')
hpnicfCBQoSIfCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqQueueSize.setDescription('Packet number of CBQ queue')
hpnicfCBQoSIfCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqDiscard.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqDiscard.setDescription("The number of discarded packets which couldn't be enqueued.")
hpnicfCBQoSIfCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqEfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqEfQueueSize.setDescription('Packet number of EF queue.')
hpnicfCBQoSIfCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqAfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqAfQueueSize.setDescription('Packet number of AF queue.')
hpnicfCBQoSIfCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqBeQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqBeQueueSize.setDescription('Packet number of BE queue.')
hpnicfCBQoSIfCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqBeActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqBeActiveQueueNum.setDescription('The Packet number of Active BE Queue.')
hpnicfCBQoSIfCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqBeMaxActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqBeMaxActiveQueueNum.setDescription('The max Packet number of Active BE Queue.')
hpnicfCBQoSIfCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqBeTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqBeTotalQueueNum.setDescription('The total Packet number of BE Queue.')
hpnicfCBQoSIfCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqAfAllocatedQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCbqAfAllocatedQueueNum.setDescription('The Allocated Packet number of AF Queue.')
hpnicfCBQoSIfClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSIfClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on the interface.')
hpnicfCBQoSIfClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSIfClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfClassMatchRunInfoEntry.setDescription("Classifier's matching statistics information entry.")
hpnicfCBQoSIfClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
hpnicfCBQoSIfClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfClassMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfClassMatchedBytes.setDescription('Number of bytes matching a class in a QoS policy. Only software QoS support this node.')
hpnicfCBQoSIfClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfClassAverageRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfClassAverageRate.setDescription('Average rate matching a class of the last 5 minutes.')
hpnicfCBQoSIfCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSIfCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCarRunInfoTable.setDescription('A table of Running statistics for CAR in a QoS policy applied on the interface.')
hpnicfCBQoSIfCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSIfCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCarRunInfoEntry.setDescription('CAR statistics information entry.')
hpnicfCBQoSIfCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCarGreenPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCarGreenPackets.setDescription('Number of green packets.')
hpnicfCBQoSIfCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCarGreenBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCarGreenBytes.setDescription('Number of green bytes.')
hpnicfCBQoSIfCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCarRedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCarRedPackets.setDescription('Number of red packets.')
hpnicfCBQoSIfCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCarRedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCarRedBytes.setDescription('Number of red bytes.')
hpnicfCBQoSIfCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCarYellowPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCarYellowPackets.setDescription('Number of yellow packets.')
hpnicfCBQoSIfCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfCarYellowBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfCarYellowBytes.setDescription('Number of yellow bytes.')
hpnicfCBQoSIfGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsRunInfoTable.setDescription('A table of Running statistics for GTS in a QoS policy applied on the interface.')
hpnicfCBQoSIfGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsRunInfoEntry.setDescription('GTS statistics entry.')
hpnicfCBQoSIfGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsPassedPackets.setDescription('Number of packets passed by GTS.')
hpnicfCBQoSIfGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsPassedBytes.setDescription('Number of bytes passed by GTS.')
hpnicfCBQoSIfGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsDiscardedPackets.setDescription('Number of packets discarded by GTS.')
hpnicfCBQoSIfGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsDiscardedBytes.setDescription('Number of bytes discarded by GTS.')
hpnicfCBQoSIfGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsDelayedPackets.setDescription('Number of packets delayed by GTS.')
hpnicfCBQoSIfGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsDelayedBytes.setDescription('Number of bytes delayed by GTS.')
hpnicfCBQoSIfGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfGtsQueueSize.setDescription('Packet number of GTS queue.')
hpnicfCBQoSIfRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSIfRemarkRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfRemarkRunInfoTable.setDescription('A table of Running statistics for remarking in a QoS policy applied on the interface.')
hpnicfCBQoSIfRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSIfRemarkRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfRemarkRunInfoEntry.setDescription('Remarking statistics entry.')
hpnicfCBQoSIfRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfRemarkedPackets.setDescription('Number of packets remarked.')
hpnicfCBQoSIfQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6), )
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueRunInfoTable.setDescription('A table of Running statistics for queue in a QoS policy applied on the interface.')
hpnicfCBQoSIfQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueRunInfoEntry.setDescription('Queue statistics entry.')
hpnicfCBQoSIfQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueMatchedPackets.setDescription('Number of packets matched to enqueue.')
hpnicfCBQoSIfQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueMatchedBytes.setDescription('Number of bytes matched to enqueue.')
hpnicfCBQoSIfQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueEnqueuedPackets.setDescription('Number of packets enqueued.')
hpnicfCBQoSIfQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueEnqueuedBytes.setDescription('Number of bytes enqueued.')
hpnicfCBQoSIfQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueDiscardedPackets.setDescription('Number of packets discarded when enqueued by discard method.')
hpnicfCBQoSIfQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfQueueDiscardedBytes.setDescription('Number of bytes discarded when enqueued by discard method.')
hpnicfCBQoSIfWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 7), )
if mibBuilder.loadTexts: hpnicfCBQoSIfWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfWredRunInfoTable.setDescription('A table of Running statistics for WRED in a QoS policy applied on the interface.')
hpnicfCBQoSIfWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 7, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSWredClassValue"))
if mibBuilder.loadTexts: hpnicfCBQoSIfWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfWredRunInfoEntry.setDescription('WRED statistics entry.')
hpnicfCBQoSIfWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfWredRandomDiscardedPackets.setDescription('Number of packets that random-discarded by WRED.')
hpnicfCBQoSIfWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfWredTailDiscardedPackets.setDescription('Number of packets that tail-discarded by WRED.')
hpnicfCBQoSIfAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 8), )
if mibBuilder.loadTexts: hpnicfCBQoSIfAccountingRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfAccountingRunInfoTable.setDescription('A table of Running statistics for account in a QoS policy applied on the interface.')
hpnicfCBQoSIfAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 8, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSIfAccountingRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfAccountingRunInfoEntry.setDescription('Account statistics entry.')
hpnicfCBQoSIfAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfAccountingPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfAccountingPackets.setDescription('Number of packets.')
hpnicfCBQoSIfAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 1, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIfAccountingBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfAccountingBytes.setDescription('Number of bytes.')
hpnicfCBQoSAtmPvcStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2))
hpnicfCBQoSAtmPvcCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqRunInfoTable.setDescription('A table of ATM PVC CBQ Running statistics. When policy using queue behavior is applied on ATM PVC. ATM PVC will using Class Based Queuing.')
hpnicfCBQoSAtmPvcCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqRunInfoEntry.setDescription('FR PVC CBQ statistics entry.')
hpnicfCBQoSAtmPvcCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqQueueSize.setDescription('Packet number of CBQ queue.')
hpnicfCBQoSAtmPvcCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqDiscard.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqDiscard.setDescription("The number of discarded packets which couldn't be enqueued.")
hpnicfCBQoSAtmPvcCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqEfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqEfQueueSize.setDescription('Packet number of EF queue.')
hpnicfCBQoSAtmPvcCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqAfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqAfQueueSize.setDescription('Packet number of AF queue.')
hpnicfCBQoSAtmPvcCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqBeQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqBeQueueSize.setDescription('Packet number of BE queue.')
hpnicfCBQoSAtmPvcCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqBeActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqBeActiveQueueNum.setDescription('The packet number of Active Be Queue.')
hpnicfCBQoSAtmPvcCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqBeMaxActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqBeMaxActiveQueueNum.setDescription('The max packet number of Active Be Queue.')
hpnicfCBQoSAtmPvcCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqBeTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqBeTotalQueueNum.setDescription('The total packet number of Be Queue.')
hpnicfCBQoSAtmPvcCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqAfAllocatedQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCbqAfAllocatedQueueNum.setDescription('The Allocated packet number of AF Queue.')
hpnicfCBQoSAtmPvcClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on ATM PVC.')
hpnicfCBQoSAtmPvcClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassMatchRunInfoEntry.setDescription('Classifier matching statistics entry.')
hpnicfCBQoSAtmPvcClassMatchPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassMatchPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassMatchPackets.setDescription('Number of packets matching a class in a QoS policy.')
hpnicfCBQoSAtmPvcClassMatchBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassMatchBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassMatchBytes.setDescription('Number of bytes matching a class in a QoS policy.')
hpnicfCBQoSAtmPvcClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassAverageRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcClassAverageRate.setDescription('Average rate matching a class in the last 5 minutes.')
hpnicfCBQoSAtmPvcCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarRunInfoTable.setDescription('A table of Running statistics for CAR in a QoS policy applied on ATM PVC.')
hpnicfCBQoSAtmPvcCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarRunInfoEntry.setDescription('CAR statistics entry.')
hpnicfCBQoSAtmPvcCarConformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarConformPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarConformPackets.setDescription('Number of packets that conforming specified CIR.')
hpnicfCBQoSAtmPvcCarConformBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarConformBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarConformBytes.setDescription('Number of bytes that conforming specified CIR.')
hpnicfCBQoSAtmPvcCarExceedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarExceedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarExceedPackets.setDescription('Number of packets exceeded CIR.')
hpnicfCBQoSAtmPvcCarExceedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarExceedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcCarExceedBytes.setDescription('Number of bytes exceeded CIR.')
hpnicfCBQoSAtmPvcGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsRunInfoTable.setDescription('A table of Running statistics for GTS in a QoS policy applied on ATM PVC.')
hpnicfCBQoSAtmPvcGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsRunInfoEntry.setDescription('GTS statistics entry.')
hpnicfCBQoSAtmPvcGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsPassedPackets.setDescription('Number of packets passed by GTS.')
hpnicfCBQoSAtmPvcGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsPassedBytes.setDescription('Number of bytes passed by GTS.')
hpnicfCBQoSAtmPvcGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsDiscardedPackets.setDescription('Number of packets discarded by GTS.')
hpnicfCBQoSAtmPvcGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsDiscardedBytes.setDescription('Number of bytes discarded by GTS.')
hpnicfCBQoSAtmPvcGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsDelayedPackets.setDescription('Number of packets delayed by GTS.')
hpnicfCBQoSAtmPvcGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsDelayedBytes.setDescription('Number of bytes delayed by GTS.')
hpnicfCBQoSAtmPvcGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcGtsQueueSize.setDescription('packet number of GTS queue.')
hpnicfCBQoSAtmPvcRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcRemarkRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcRemarkRunInfoTable.setDescription('A table of Running statistics for remarking in a QoS policy applied on ATM PVC.')
hpnicfCBQoSAtmPvcRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcRemarkRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcRemarkRunInfoEntry.setDescription('Remarking statistics entry.')
hpnicfCBQoSAtmPvcRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcRemarkedPackets.setDescription('Number of packets remarked.')
hpnicfCBQoSAtmPvcQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueRunInfoTable.setDescription('A table of Running statistics for queue in a QoS policy applied on ATM PVC.')
hpnicfCBQoSAtmPvcQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueRunInfoEntry.setDescription('Queue statistics entry.')
hpnicfCBQoSAtmPvcQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueMatchedPackets.setDescription('Number of packets matched to enqueue.')
hpnicfCBQoSAtmPvcQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueMatchedBytes.setDescription('Number of bytes matched to enqueue.')
hpnicfCBQoSAtmPvcQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueEnqueuedPackets.setDescription('Number of packets enqueued.')
hpnicfCBQoSAtmPvcQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueEnqueuedBytes.setDescription('Number of bytes enqueued.')
hpnicfCBQoSAtmPvcQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueDiscardedPackets.setDescription('Number of packets discard when enqueued by discard method.')
hpnicfCBQoSAtmPvcQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcQueueDiscardedBytes.setDescription('Number of bytes discard when enqueued by discard method.')
hpnicfCBQoSAtmPvcWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 7), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcWredRunInfoTable.setDescription('A table of Running statistics for WRED in a QoS policy applied on ATM PVC.')
hpnicfCBQoSAtmPvcWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 7, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSWredClassValue"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcWredRunInfoEntry.setDescription('WRED statistics entry.')
hpnicfCBQoSAtmPvcWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcWredRandomDiscardedPackets.setDescription('Number of packets randomly discarded by WRED.')
hpnicfCBQoSAtmPvcWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcWredTailDiscardedPackets.setDescription('Number of packets tail-discarded by WRED.')
hpnicfCBQoSAtmPvcAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 8), )
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcAccountingRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcAccountingRunInfoTable.setDescription('A table of Running statistics for account in a QoS policy applied on the ATM PVC.')
hpnicfCBQoSAtmPvcAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 8, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVPI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyVCI"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSAtmPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSWredClassValue"))
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcAccountingRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcAccountingRunInfoEntry.setDescription('Account statistics entry.')
hpnicfCBQoSAtmPvcAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcAccountingPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcAccountingPackets.setDescription('Number of packets.')
hpnicfCBQoSAtmPvcAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 2, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcAccountingBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAtmPvcAccountingBytes.setDescription('Number of bytes.')
hpnicfCBQoSFrPvcStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3))
hpnicfCBQoSFrPvcCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqRunInfoTable.setDescription('A table of FR PVC CBQ Running statistics. When policy using queue behavior is applied on FR PVC will using Class Based Queuing.')
hpnicfCBQoSFrPvcCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqRunInfoEntry.setDescription('FR PVC CBQ statistics entry.')
hpnicfCBQoSFrPvcCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqQueueSize.setDescription('Packet number of CBQ queue.')
hpnicfCBQoSFrPvcCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqDiscard.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqDiscard.setDescription('The number of discarded packets which could not be enqueued.')
hpnicfCBQoSFrPvcCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqEfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqEfQueueSize.setDescription('Packet number of EF queue.')
hpnicfCBQoSFrPvcCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqAfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqAfQueueSize.setDescription('Packet number of AF queue.')
hpnicfCBQoSFrPvcCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqBeQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqBeQueueSize.setDescription('Packet number of BE queue.')
hpnicfCBQoSFrPvcCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqBeActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqBeActiveQueueNum.setDescription('The packet number of Active Be Queue.')
hpnicfCBQoSFrPvcCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqBeMaxActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqBeMaxActiveQueueNum.setDescription('The max packet number of Active Be Queue.')
hpnicfCBQoSFrPvcCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqBeTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqBeTotalQueueNum.setDescription('The total packet number of Be Queue.')
hpnicfCBQoSFrPvcCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqAfAllocatedQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCbqAfAllocatedQueueNum.setDescription('The Allocated packet number of AF Queue.')
hpnicfCBQoSFrPvcClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on FR PVC.')
hpnicfCBQoSFrPvcClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassMatchRunInfoEntry.setDescription('Classifier matching statistics entry.')
hpnicfCBQoSFrPvcClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
hpnicfCBQoSFrPvcClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassMatchedBytes.setDescription('Number of bytes matching a class in a QoS policy.')
hpnicfCBQoSFrPvcClassAverageRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassAverageRate.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcClassAverageRate.setDescription('Average rate matching a class of the last 5 minutes.')
hpnicfCBQoSFrPvcCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarRunInfoTable.setDescription('A table of Running statistics for CAR in a QoS policy applied on FR PVC.')
hpnicfCBQoSFrPvcCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarRunInfoEntry.setDescription('CAR statistics entry.')
hpnicfCBQoSFrPvcCarConformPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarConformPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarConformPackets.setDescription('Number of packets conform CIR.')
hpnicfCBQoSFrPvcCarConformBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarConformBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarConformBytes.setDescription('Number of bytes conform CIR.')
hpnicfCBQoSFrPvcCarExceedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarExceedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarExceedPackets.setDescription('Number of packets exceed CIR.')
hpnicfCBQoSFrPvcCarExceedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarExceedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcCarExceedBytes.setDescription('Number of bytes exceed CIR.')
hpnicfCBQoSFrPvcGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsRunInfoTable.setDescription('A table of Running statistics for GTS in a QoS policy applied on FR PVC.')
hpnicfCBQoSFrPvcGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsRunInfoEntry.setDescription('GTS statistics entry.')
hpnicfCBQoSFrPvcGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsPassedPackets.setDescription('Number of packets passed by GTS.')
hpnicfCBQoSFrPvcGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsPassedBytes.setDescription('Number of bytes passed by GTS.')
hpnicfCBQoSFrPvcGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsDiscardedPackets.setDescription('Number of packets discarded by GTS.')
hpnicfCBQoSFrPvcGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsDiscardedBytes.setDescription('Number of bytes discarded by GTS.')
hpnicfCBQoSFrPvcGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsDelayedPackets.setDescription('Number of packets delayed by GTS.')
hpnicfCBQoSFrPvcGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsDelayedBytes.setDescription('Number of bytes delayed by GTS.')
hpnicfCBQoSFrPvcGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcGtsQueueSize.setDescription('Packet number of GTS queue.')
hpnicfCBQoSFrPvcRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcRemarkRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcRemarkRunInfoTable.setDescription('A table of Running statistics for remarking in a QoS policy applied on FR PVC.')
hpnicfCBQoSFrPvcRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcRemarkRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcRemarkRunInfoEntry.setDescription('Remarking statistics entry.')
hpnicfCBQoSFrPvcRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcRemarkedPackets.setDescription('Number of packets remarked.')
hpnicfCBQoSFrPvcQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueRunInfoTable.setDescription('A table of Running statistics for queue in a QoS policy applied on FR PVC.')
hpnicfCBQoSFrPvcQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueRunInfoEntry.setDescription('Queue statistics entry.')
hpnicfCBQoSFrPvcQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueMatchedPackets.setDescription('Number of packets matched to enqueue.')
hpnicfCBQoSFrPvcQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueMatchedBytes.setDescription('Number of bytes matched to en-queue.')
hpnicfCBQoSFrPvcQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueEnqueuedPackets.setDescription('Number of packets en-queued.')
hpnicfCBQoSFrPvcQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueEnqueuedBytes.setDescription('Number of bytes enqueued.')
hpnicfCBQoSFrPvcQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueDiscardedPackets.setDescription('Number of packets discarded when enqueued by discard method.')
hpnicfCBQoSFrPvcQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcQueueDiscardedBytes.setDescription('Number of bytes discarded when enqueued by discard method.')
hpnicfCBQoSFrPvcWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 7), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcWredRunInfoTable.setDescription('A table of Running statistics for WRED in a QoS policy applied on FR PVC. ')
hpnicfCBQoSFrPvcWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 7, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSWredClassValue"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcWredRunInfoEntry.setDescription('WRED statistics entry.')
hpnicfCBQoSFrPvcWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcWredRandomDiscardedPackets.setDescription('Number of packets randomly discarded by WRED.')
hpnicfCBQoSFrPvcWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcWredTailDiscardedPackets.setDescription('Number of packets tail-discarded by WRED.')
hpnicfCBQoSFrPvcAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 8), )
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcAccountingRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcAccountingRunInfoTable.setDescription('A table of Running statistics for account in a QoS policy applied on the interface.')
hpnicfCBQoSFrPvcAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 8, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDlciNum"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSFrPvcApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSWredClassValue"))
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcAccountingRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcAccountingRunInfoEntry.setDescription('Account statistics entry.')
hpnicfCBQoSFrPvcAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcAccountingPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcAccountingPackets.setDescription('Number of packets.')
hpnicfCBQoSFrPvcAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 3, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcAccountingBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSFrPvcAccountingBytes.setDescription('Number of bytes.')
hpnicfCBQoSVlanStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4))
hpnicfCBQoSVlanClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4, 1), )
if mibBuilder.loadTexts: hpnicfCBQoSVlanClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanClassMatchRunInfoTable.setDescription('A table of Running statistics for matching a classifier in a QoS policy applied on Ethernet VLAN. ')
hpnicfCBQoSVlanClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4, 1, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyVlanid"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSVlanClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanClassMatchRunInfoEntry.setDescription('Classifier matching statistics entry.')
hpnicfCBQoSVlanClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4, 1, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSVlanClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
hpnicfCBQoSVlanAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSVlanAccountingRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanAccountingRunInfoTable.setDescription('A table of Running statistics for account in a QoS policy applied on the interface.')
hpnicfCBQoSVlanAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyVlanid"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyDirection"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSVlanAccountingRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanAccountingRunInfoEntry.setDescription('Account statistics entry.')
hpnicfCBQoSVlanAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSVlanAccountingPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanAccountingPackets.setDescription('Number of packets.')
hpnicfCBQoSVlanAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 4, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSVlanAccountingBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanAccountingBytes.setDescription('Number of bytes.')
hpnicfCBQoSApplyPolicyIndexObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5))
hpnicfCBQoSApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1), )
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectTable.setDescription('A table of QoS apply object index. It provides the function of querying the information of QoS apply object, which consists of interface type, interface index, ATM PVC, FR DLCI and nesting policy index, using QoS apply object index.')
hpnicfCBQoSApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectEntry.setDescription('QoS apply object index entry.')
hpnicfCBQoSApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectIndex.setDescription('QoS apply object index. It represents the unique identifier of QoS policy applied position. It generates when QoS policy is applied considering ifIndex, VLAN ID, ATM PVC, FR DLCI and policy nesting.')
hpnicfCBQoSApplyObjectType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1, 2), ApplyObjectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectType.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectType.setDescription('Apply object type.')
hpnicfCBQoSApplyObjectDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1, 3), DirectionType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectDirection.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectDirection.setDescription('The direction of QoS apply object.')
hpnicfCBQoSApplyObjectMainSite = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectMainSite.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectMainSite.setDescription('Its value depends on hpnicfCBQoSApplyObjectType. It represents VLAN ID when hpnicfCBQoSApplyObjectType is vlan, and represents chassis ID when hpnicfCBQoSApplyObjectType is controlPlane, otherwise it represents ifIndex.')
hpnicfCBQoSApplyObjectSubChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectSubChannel.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectSubChannel.setDescription("Its value depends on hpnicfCBQoSApplyObjectType. It represents the value of VPI/VCI, of which high 16-bits is VPI and low 16-bits is VCI, when hpnicfCBQoSApplyObjectType is atmPvc. It represents the value of data link connection identifier in FR network, when hpnicfCBQoSApplyObjectType is frDlci. It represents slot ID, when hpnicfCBQoSApplyObjectType is controlPlane. Otherwise the value is '0xFFFFFFFF'.")
hpnicfCBQoSApplyObjectSubClass = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectSubClass.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectSubClass.setDescription("The value represents level-1 sub class index when the QoS apply object is level-2 or level-3 nesting policy. Otherwise the value is '0xFFFFFFFF'.")
hpnicfCBQoSApplyObjectSubClassSec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectSubClassSec.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSApplyObjectSubClassSec.setDescription("The value represents level-2 sub class index when the QoS apply object is level-3 nesting policy. Otherwise the value is '0xFFFFFFFF'.")
hpnicfCBQoSIntApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSIntApplyObjectTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIntApplyObjectTable.setDescription('A table used for querying the QoS apply object indexes by interface index. It is suitable for querying QoS apply object indexes for policies applied on Ethernet ports, ATM ports and FR ports.')
hpnicfCBQoSIntApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIntApplyObjectIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSIntApplyObjectEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIntApplyObjectEntry.setDescription('QoS apply object on interface index querying entry.')
hpnicfCBQoSIntApplyObjectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSIntApplyObjectIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIntApplyObjectIfIndex.setDescription('Interface index.')
hpnicfCBQoSIntApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSIntApplyObjectIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIntApplyObjectIndex.setDescription('QoS apply object index.')
hpnicfCBQoSVlanApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyObjectTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyObjectTable.setDescription('A table used for querying the QoS apply object indexes by VLAN ID and policy direction. It is suitable for querying QoS apply object indexes for policies applied on VLANs. If the value of hpnicfCBQoSVlanApplyObjectVlanID is 0, it means querying Qos apply object index for policy applied on global.')
hpnicfCBQoSVlanApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyObjectVlanID"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyObjectEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyObjectEntry.setDescription('VLAN apply object entry.')
hpnicfCBQoSVlanApplyObjectVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094)))
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyObjectVlanID.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyObjectVlanID.setDescription('VLAN ID.')
hpnicfCBQoSVlanApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 3, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyObjectIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanApplyObjectIndex.setDescription('QoS apply object index.')
hpnicfCBQoSPvcApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectTable.setDescription('A table used for querying the QoS apply object indexes by ATM PVC or FR DLCI, ifIndex and policy direction. It is suitable for querying QoS apply object indexes for policies applied on ATM PVCs or FR DLCIs.')
hpnicfCBQoSPvcApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPvcApplyObjectIfIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPvcApplyObjectPvcID"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectEntry.setDescription('QoS apply object querying entry for ATM PVC or FR DLCI.')
hpnicfCBQoSPvcApplyObjectIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectIfIndex.setDescription('Interface index.')
hpnicfCBQoSPvcApplyObjectPvcID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectPvcID.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectPvcID.setDescription('If the QoS apply object queried is a ATM PVC, its input value represents a VPI/VCI. If the QoS apply object queried is a FR DLCI, its input value represents a value of FR DLCI.')
hpnicfCBQoSPvcApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 4, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSPvcApplyObjectIndex.setDescription('QoS apply object index.')
hpnicfCBQoSNestPolicyApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyApplyObjectTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyApplyObjectTable.setDescription('A table used for querying the nested QoS policy apply object indexes. It is suitable for querying nested QoS apply object indexes for policies applied on ifIndex, VLAN ID, ATM PVC or FR DLCI.')
hpnicfCBQoSNestPolicyApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSNestPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyApplyObjectEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyApplyObjectEntry.setDescription('QoS apply object on policy querying entry.')
hpnicfCBQoSNestPolicyClassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 5, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyClassIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyClassIndex.setDescription('Policyclass index in father policy.')
hpnicfCBQoSNestPolicyApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 5, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyApplyObjectIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSNestPolicyApplyObjectIndex.setDescription('QoS apply object index of the son policy.')
hpnicfCBQoSCpApplyObjectTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 6), )
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectTable.setDescription('A table used for querying the QoS policy apply object indexes by chassis ID and slot ID. It is suitable for querying QoS apply object indexes for policies applied on control plane.')
hpnicfCBQoSCpApplyObjectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 6, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSCpApplyObjectChassis"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSCpApplyObjectSlot"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectEntry.setDescription('QoS policy apply object on control plane querying entry.')
hpnicfCBQoSCpApplyObjectChassis = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectChassis.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectChassis.setDescription('Chassis ID.')
hpnicfCBQoSCpApplyObjectSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 6, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectSlot.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectSlot.setDescription('Slot ID.')
hpnicfCBQoSCpApplyObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 5, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCpApplyObjectIndex.setDescription('QoS apply object index.')
hpnicfCBQoSStaticsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6))
hpnicfCBQoSCbqRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1), )
if mibBuilder.loadTexts: hpnicfCBQoSCbqRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCbqRunInfoTable.setDescription('A table of CBQ running statistics. When policy using queue behavior is applied on QoS apply object, the QoS apply object will use Class Based Queuing.')
hpnicfCBQoSCbqRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSCbqRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCbqRunInfoEntry.setDescription('CBQ statistics entry of QoS apply object.')
hpnicfCBQoSCbqQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCbqQueueSize.setDescription('Number of packets in CBQ queue.')
hpnicfCBQoSCbqDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqDiscard.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCbqDiscard.setDescription("Number of discarded packets which couldn't queue.")
hpnicfCBQoSCbqEfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqEfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCbqEfQueueSize.setDescription('Number of packets in EF queue.')
hpnicfCBQoSCbqAfQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqAfQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCbqAfQueueSize.setDescription('Number of packets in AF queue.')
hpnicfCBQoSCbqBeQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqBeQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCbqBeQueueSize.setDescription('Number of packets in BE Queue.')
hpnicfCBQoSCbqBeActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqBeActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCbqBeActiveQueueNum.setDescription('Number of Active BE Queues.')
hpnicfCBQoSCbqBeMaxActiveQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqBeMaxActiveQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCbqBeMaxActiveQueueNum.setDescription('The max number of Active BE Queues.')
hpnicfCBQoSCbqBeTotalQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqBeTotalQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCbqBeTotalQueueNum.setDescription('Number of total BE Queues.')
hpnicfCBQoSCbqAfAllocatedQueueNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCbqAfAllocatedQueueNum.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCbqAfAllocatedQueueNum.setDescription('Number of allocated AF Queues.')
hpnicfCBQoSClassMatchRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2), )
if mibBuilder.loadTexts: hpnicfCBQoSClassMatchRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassMatchRunInfoTable.setDescription('A table of running statistics for matching a classifier on a QoS apply object.')
hpnicfCBQoSClassMatchRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSClassMatchRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassMatchRunInfoEntry.setDescription("Classifier's matching statistics information entry.")
hpnicfCBQoSClassMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassMatchedPackets.setDescription('Number of packets matching a class in a QoS policy.')
hpnicfCBQoSClassMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassMatchedBytes.setDescription('Number of bytes matching a class in a QoS policy.')
hpnicfCBQoSClassFwdPktpps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassFwdPktpps.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassFwdPktpps.setDescription('Average number of packets macthing the class forwarded per second in the last interval. Unit: pps.')
hpnicfCBQoSClassFwdPktbps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassFwdPktbps.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassFwdPktbps.setDescription('Average bits of packets matching the class forwarded per second in the last interval. Unit: bps.')
hpnicfCBQoSClassDropPktpps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassDropPktpps.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassDropPktpps.setDescription('Average number of packets matching the class dropped per second in the last interval. Unit: pps.')
hpnicfCBQoSClassDropPktbps = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassDropPktbps.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassDropPktbps.setDescription('Average bits of packets matching the class dropped per second in the last interval. Unit: bps.')
hpnicfCBQoSClassFlowStatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassFlowStatInterval.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassFlowStatInterval.setDescription('Interval of collecting traffic statistics. Unit: minute.')
hpnicfCBQoSClassBehaviorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("success", 1), ("failure", 2), ("partialSuccess", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSClassBehaviorStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSClassBehaviorStatus.setDescription('Classifier-behavior applying status.')
hpnicfCBQoSCarRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3), )
if mibBuilder.loadTexts: hpnicfCBQoSCarRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarRunInfoTable.setDescription('A table of running statistics for CAR on a QoS apply object.')
hpnicfCBQoSCarRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSCarRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarRunInfoEntry.setDescription('CAR statistics information entry.')
hpnicfCBQoSCarGreenPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCarGreenPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarGreenPackets.setDescription('Number of green packets.')
hpnicfCBQoSCarGreenBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCarGreenBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarGreenBytes.setDescription('Number of green bytes.')
hpnicfCBQoSCarRedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCarRedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarRedPackets.setDescription('Number of red packets.')
hpnicfCBQoSCarRedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCarRedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarRedBytes.setDescription('Number of red bytes.')
hpnicfCBQoSCarYellowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCarYellowPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarYellowPackets.setDescription('Number of yellow packets.')
hpnicfCBQoSCarYellowBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSCarYellowBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSCarYellowBytes.setDescription('Number of yellow bytes.')
hpnicfCBQoSGtsRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4), )
if mibBuilder.loadTexts: hpnicfCBQoSGtsRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsRunInfoTable.setDescription('A table of running statistics for GTS on a QoS apply object.')
hpnicfCBQoSGtsRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSGtsRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsRunInfoEntry.setDescription('GTS statistics entry.')
hpnicfCBQoSGtsPassedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGtsPassedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsPassedPackets.setDescription('Number of packets passed by GTS.')
hpnicfCBQoSGtsPassedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGtsPassedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsPassedBytes.setDescription('Number of bytes passed by GTS.')
hpnicfCBQoSGtsDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGtsDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsDiscardedPackets.setDescription('Number of packets discarded by GTS.')
hpnicfCBQoSGtsDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGtsDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsDiscardedBytes.setDescription('Number of bytes discarded by GTS.')
hpnicfCBQoSGtsDelayedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGtsDelayedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsDelayedPackets.setDescription('Number of packets delayed by GTS.')
hpnicfCBQoSGtsDelayedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGtsDelayedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsDelayedBytes.setDescription('Number of bytes delayed by GTS.')
hpnicfCBQoSGtsQueueSize = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSGtsQueueSize.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSGtsQueueSize.setDescription('Number of packets in GTS queue.')
hpnicfCBQoSRemarkRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 5), )
if mibBuilder.loadTexts: hpnicfCBQoSRemarkRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRemarkRunInfoTable.setDescription('A table of running statistics for remarking on a QoS apply object.')
hpnicfCBQoSRemarkRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 5, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSRemarkRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRemarkRunInfoEntry.setDescription('Remarking statistics entry.')
hpnicfCBQoSRemarkedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSRemarkedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSRemarkedPackets.setDescription('Number of remarked packets.')
hpnicfCBQoSQueueRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6), )
if mibBuilder.loadTexts: hpnicfCBQoSQueueRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueRunInfoTable.setDescription('A table of running statistics for queue on a QoS apply object.')
hpnicfCBQoSQueueRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSQueueRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueRunInfoEntry.setDescription('Queue statistics entry.')
hpnicfCBQoSQueueMatchedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSQueueMatchedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueMatchedPackets.setDescription('Number of packets matched to queue.')
hpnicfCBQoSQueueMatchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSQueueMatchedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueMatchedBytes.setDescription('Number of bytes matched to queue.')
hpnicfCBQoSQueueEnqueuedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSQueueEnqueuedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueEnqueuedPackets.setDescription('Number of packets queued.')
hpnicfCBQoSQueueEnqueuedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSQueueEnqueuedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueEnqueuedBytes.setDescription('Number of bytes queued.')
hpnicfCBQoSQueueDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSQueueDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueDiscardedPackets.setDescription('Number of packets discarded when queued by discard method.')
hpnicfCBQoSQueueDiscardedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 6, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSQueueDiscardedBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSQueueDiscardedBytes.setDescription('Number of bytes discarded when queued by discard method.')
hpnicfCBQoSWredRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 7), )
if mibBuilder.loadTexts: hpnicfCBQoSWredRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSWredRunInfoTable.setDescription('A table of running statistics for WRED on a QoS apply object.')
hpnicfCBQoSWredRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 7, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSWredClassValue"))
if mibBuilder.loadTexts: hpnicfCBQoSWredRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSWredRunInfoEntry.setDescription('WRED statistics entry.')
hpnicfCBQoSWredRandomDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 7, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSWredRandomDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSWredRandomDiscardedPackets.setDescription('Number of packets random-discarded by WRED.')
hpnicfCBQoSWredTailDiscardedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 7, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSWredTailDiscardedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSWredTailDiscardedPackets.setDescription('Number of packets tail-discarded by WRED.')
hpnicfCBQoSAccountingRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 8), )
if mibBuilder.loadTexts: hpnicfCBQoSAccountingRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAccountingRunInfoTable.setDescription('A table of running statistics for account on a QoS apply object.')
hpnicfCBQoSAccountingRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 8, 1), ).setIndexNames((0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSApplyObjectIndex"), (0, "HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSPolicyClassIndex"))
if mibBuilder.loadTexts: hpnicfCBQoSAccountingRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAccountingRunInfoEntry.setDescription('Account statistics entry.')
hpnicfCBQoSAccountingPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 8, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAccountingPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAccountingPackets.setDescription('Number of packets matching a class in QoS policy.')
hpnicfCBQoSAccountingBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 5, 6, 8, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSAccountingBytes.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSAccountingBytes.setDescription('Number of bytes matching a class in QoS policy.')
hpnicfCBQoSApplyingStatusObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 6))
hpnicfCBQoSApplyingStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("busy", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfCBQoSApplyingStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSApplyingStatus.setDescription('This object shows the status of the system when applying policy. It is forbidden to set or read in this MIB module except current table when the value is busy.')
hpnicfCBQoSNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 7))
hpnicfCBQoSNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 7, 0))
hpnicfCBQoSIfPolicyChanged = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 7, 0, 1)).setObjects(("HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyIfIndex"), ("HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSIfApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSIfPolicyChanged.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSIfPolicyChanged.setDescription('This notification will be sent when the applying status of the policy on the interface is changed.')
hpnicfCBQoSVlanPolicyChanged = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 65, 2, 1, 7, 0, 2)).setObjects(("HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyVlanid"), ("HPN-ICF-CBQOS2-MIB", "hpnicfCBQoSVlanApplyPolicyDirection"))
if mibBuilder.loadTexts: hpnicfCBQoSVlanPolicyChanged.setStatus('current')
if mibBuilder.loadTexts: hpnicfCBQoSVlanPolicyChanged.setDescription('This notification will be sent when the applying status of the policy on the VLAN is changed.')
mibBuilder.exportSymbols("HPN-ICF-CBQOS2-MIB", hpnicfCBQoSApplyingStatusObjects=hpnicfCBQoSApplyingStatusObjects, hpnicfCBQoSIfAccountingRunInfoEntry=hpnicfCBQoSIfAccountingRunInfoEntry, hpnicfCBQoSCpApplyPolicyStatus=hpnicfCBQoSCpApplyPolicyStatus, hpnicfCBQoSFrPvcApplyPolicyRowStatus=hpnicfCBQoSFrPvcApplyPolicyRowStatus, hpnicfCBQoSIfGtsDiscardedBytes=hpnicfCBQoSIfGtsDiscardedBytes, hpnicfCBQoSPolicyRouteNexthop=hpnicfCBQoSPolicyRouteNexthop, hpnicfCBQoSNestCustomerVlanID=hpnicfCBQoSNestCustomerVlanID, hpnicfCBQoSAtmPvcCarExceedBytes=hpnicfCBQoSAtmPvcCarExceedBytes, hpnicfCBQoSMatchCpGroupCfgEntry=hpnicfCBQoSMatchCpGroupCfgEntry, hpnicfCBQoSAtmPvcQueueMatchedPackets=hpnicfCBQoSAtmPvcQueueMatchedPackets, hpnicfCBQoSQueueMatchedBytes=hpnicfCBQoSQueueMatchedBytes, hpnicfCBQoSClassMatchedBytes=hpnicfCBQoSClassMatchedBytes, hpnicfCBQoSWredClassCfgInfoEntry=hpnicfCBQoSWredClassCfgInfoEntry, hpnicfCBQoSQueueType=hpnicfCBQoSQueueType, hpnicfCBQoSFrPvcCarRunInfoEntry=hpnicfCBQoSFrPvcCarRunInfoEntry, CarAction=CarAction, hpnicfCBQoSColoredRemarkCfgEntry=hpnicfCBQoSColoredRemarkCfgEntry, hpnicfCBQoSColoredRemarkRowStatus=hpnicfCBQoSColoredRemarkRowStatus, hpnicfCBQoSClassifierLayer=hpnicfCBQoSClassifierLayer, hpnicfCBQoSCpApplyObjectSlot=hpnicfCBQoSCpApplyObjectSlot, hpnicfCBQoSPolicyObjects=hpnicfCBQoSPolicyObjects, hpnicfCBQoSFrPvcApplyPolicyDirection=hpnicfCBQoSFrPvcApplyPolicyDirection, hpnicfCBQoSCarAggregativeCarName=hpnicfCBQoSCarAggregativeCarName, hpnicfCBQoSCbqBeMaxActiveQueueNum=hpnicfCBQoSCbqBeMaxActiveQueueNum, hpnicfCBQoSIfQueueDiscardedBytes=hpnicfCBQoSIfQueueDiscardedBytes, hpnicfCBQoSGlobalApplyEntry=hpnicfCBQoSGlobalApplyEntry, hpnicfCBQoSMatchCpProtoIfNot=hpnicfCBQoSMatchCpProtoIfNot, hpnicfCBQoSIfAccountingRunInfoTable=hpnicfCBQoSIfAccountingRunInfoTable, hpnicfCBQoSCbqRunInfoEntry=hpnicfCBQoSCbqRunInfoEntry, hpnicfCBQoSIfGtsQueueSize=hpnicfCBQoSIfGtsQueueSize, hpnicfCBQoSRemarkType=hpnicfCBQoSRemarkType, hpnicfCBQoSMirrorVlanID=hpnicfCBQoSMirrorVlanID, hpnicfCBQoSFrPvcStaticsObjects=hpnicfCBQoSFrPvcStaticsObjects, hpnicfCBQoSFrPvcClassMatchRunInfoTable=hpnicfCBQoSFrPvcClassMatchRunInfoTable, hpnicfCBQoSFrPvcQueueMatchedPackets=hpnicfCBQoSFrPvcQueueMatchedPackets, hpnicfCBQoSNatServiceClass=hpnicfCBQoSNatServiceClass, hpnicfCBQoSGtsDelayedBytes=hpnicfCBQoSGtsDelayedBytes, hpnicfCBQoSVlanAccountingRunInfoEntry=hpnicfCBQoSVlanAccountingRunInfoEntry, hpnicfCBQoSApplyObjectSubClassSec=hpnicfCBQoSApplyObjectSubClassSec, hpnicfCBQoSAtmPvcAccountingRunInfoTable=hpnicfCBQoSAtmPvcAccountingRunInfoTable, hpnicfCBQoSRedirectIpAddress2=hpnicfCBQoSRedirectIpAddress2, hpnicfCBQoSQueueBandwidthValue=hpnicfCBQoSQueueBandwidthValue, hpnicfCBQoSAtmPvcApplyPolicyDirection=hpnicfCBQoSAtmPvcApplyPolicyDirection, hpnicfCBQoSMatchCpGroupIfNot=hpnicfCBQoSMatchCpGroupIfNot, hpnicfCBQoSAtmPvcQueueDiscardedPackets=hpnicfCBQoSAtmPvcQueueDiscardedPackets, hpnicfCBQoSCarYellowAction=hpnicfCBQoSCarYellowAction, hpnicfCBQoSGtsQueueLength=hpnicfCBQoSGtsQueueLength, hpnicfCBQoSIfGtsDelayedBytes=hpnicfCBQoSIfGtsDelayedBytes, hpnicfCBQoSCarRunInfoEntry=hpnicfCBQoSCarRunInfoEntry, hpnicfCBQoSNestRowStatus=hpnicfCBQoSNestRowStatus, hpnicfCBQoSCbqQueueSize=hpnicfCBQoSCbqQueueSize, hpnicfCBQoSApplyObjectType=hpnicfCBQoSApplyObjectType, hpnicfCBQoSAtmPvcStaticsObjects=hpnicfCBQoSAtmPvcStaticsObjects, hpnicfCBQoSFrPvcApplyPolicyDlciNum=hpnicfCBQoSFrPvcApplyPolicyDlciNum, hpnicfCBQoSAtmPvcClassMatchRunInfoEntry=hpnicfCBQoSAtmPvcClassMatchRunInfoEntry, hpnicfCBQoSFirewallCfgInfoTable=hpnicfCBQoSFirewallCfgInfoTable, hpnicfCBQoSFrPvcGtsDiscardedBytes=hpnicfCBQoSFrPvcGtsDiscardedBytes, hpnicfCBQoSIfCbqRunInfoTable=hpnicfCBQoSIfCbqRunInfoTable, hpnicfCBQoSFrPvcWredRunInfoTable=hpnicfCBQoSFrPvcWredRunInfoTable, hpnicfCBQoSAtmPvcApplyPolicyRowStatus=hpnicfCBQoSAtmPvcApplyPolicyRowStatus, hpnicfCBQoSBehaviorRowStatus=hpnicfCBQoSBehaviorRowStatus, hpnicfCBQoSIfGtsPassedPackets=hpnicfCBQoSIfGtsPassedPackets, hpnicfCBQoSCarYellowBytes=hpnicfCBQoSCarYellowBytes, hpnicfCBQoSIfGtsRunInfoEntry=hpnicfCBQoSIfGtsRunInfoEntry, hpnicfCBQoSFrPvcCarConformBytes=hpnicfCBQoSFrPvcCarConformBytes, hpnicfCBQoSQueueEnqueuedBytes=hpnicfCBQoSQueueEnqueuedBytes, hpnicfCBQoSRedirectIpAddress1=hpnicfCBQoSRedirectIpAddress1, hpnicfCBQoSVlanApplyObjectTable=hpnicfCBQoSVlanApplyObjectTable, hpnicfCBQoSSamplingCfgInfoEntry=hpnicfCBQoSSamplingCfgInfoEntry, hpnicfCBQoSWredClassValue=hpnicfCBQoSWredClassValue, hpnicfCBQoSPolicyRouteRowStatus=hpnicfCBQoSPolicyRouteRowStatus, hpnicfCBQoSSamplingNum=hpnicfCBQoSSamplingNum, hpnicfCBQoSFrPvcCbqAfQueueSize=hpnicfCBQoSFrPvcCbqAfQueueSize, hpnicfCBQoSNestCfgInfoEntry=hpnicfCBQoSNestCfgInfoEntry, hpnicfCBQoSPolicyRowStatus=hpnicfCBQoSPolicyRowStatus, hpnicfCBQoSVlanApplyPolicyDirection=hpnicfCBQoSVlanApplyPolicyDirection, hpnicfCBQoSBehaviorObjects=hpnicfCBQoSBehaviorObjects, hpnicfCBQoSIfWredRunInfoEntry=hpnicfCBQoSIfWredRunInfoEntry, hpnicfCBQoSRedirectIfVlanID=hpnicfCBQoSRedirectIfVlanID, hpnicfCBQoSIfCarYellowBytes=hpnicfCBQoSIfCarYellowBytes, hpnicfCBQoSPriorityMapGroupName=hpnicfCBQoSPriorityMapGroupName, hpnicfCBQoSIfApplyPolicyTable=hpnicfCBQoSIfApplyPolicyTable, hpnicfCBQoSAtmPvcQueueEnqueuedPackets=hpnicfCBQoSAtmPvcQueueEnqueuedPackets, hpnicfCBQoSAtmPvcGtsPassedBytes=hpnicfCBQoSAtmPvcGtsPassedBytes, hpnicfCBQoSColoredRemarkValue=hpnicfCBQoSColoredRemarkValue, hpnicfCBQoSFrPvcApplyPolicyTable=hpnicfCBQoSFrPvcApplyPolicyTable, hpnicfCBQoSGlobalApplyRowStatus=hpnicfCBQoSGlobalApplyRowStatus, hpnicfCBQoSAtmPvcRemarkedPackets=hpnicfCBQoSAtmPvcRemarkedPackets, hpnicfCBQoSVlanStaticsObjects=hpnicfCBQoSVlanStaticsObjects, hpnicfCBQoSClassifierCfgInfoEntry=hpnicfCBQoSClassifierCfgInfoEntry, hpnicfCBQoSAccountingRunInfoEntry=hpnicfCBQoSAccountingRunInfoEntry, hpnicfCBQoSApplyObjectTable=hpnicfCBQoSApplyObjectTable, hpnicfCBQoSCpApplyObjectIndex=hpnicfCBQoSCpApplyObjectIndex, hpnicfCBQoSIfQueueEnqueuedBytes=hpnicfCBQoSIfQueueEnqueuedBytes, hpnicfCBQoSAtmPvcCarRunInfoEntry=hpnicfCBQoSAtmPvcCarRunInfoEntry, hpnicfCBQoSAccountingPackets=hpnicfCBQoSAccountingPackets, hpnicfCBQoSFrClassApplyPolicyName=hpnicfCBQoSFrClassApplyPolicyName, hpnicfCBQoSCarRunInfoTable=hpnicfCBQoSCarRunInfoTable, hpnicfCBQoSAtmPvcClassMatchBytes=hpnicfCBQoSAtmPvcClassMatchBytes, hpnicfCBQoSFirewallAction=hpnicfCBQoSFirewallAction, hpnicfCBQoSFrPvcApplyPolicyEntry=hpnicfCBQoSFrPvcApplyPolicyEntry, hpnicfCBQoSVlanPolicyChanged=hpnicfCBQoSVlanPolicyChanged, hpnicfCBQoSIfWredRunInfoTable=hpnicfCBQoSIfWredRunInfoTable, hpnicfCBQoSCarCfgInfoEntry=hpnicfCBQoSCarCfgInfoEntry, hpnicfCBQoSClassDropPktpps=hpnicfCBQoSClassDropPktpps, hpnicfCBQoSObjects=hpnicfCBQoSObjects, hpnicfCBQoSCarPbs=hpnicfCBQoSCarPbs, hpnicfCBQoSVlanApplyPolicyEntry=hpnicfCBQoSVlanApplyPolicyEntry, hpnicfCBQoSCarYellowRemarkValue=hpnicfCBQoSCarYellowRemarkValue, hpnicfCBQoSAtmPvcCarExceedPackets=hpnicfCBQoSAtmPvcCarExceedPackets, hpnicfCBQoSCarRedAction=hpnicfCBQoSCarRedAction, hpnicfCBQoSWredRunInfoTable=hpnicfCBQoSWredRunInfoTable, hpnicfCBQoSIfApplyPolicyRowStatus=hpnicfCBQoSIfApplyPolicyRowStatus, hpnicfCBQoSBehaviorName=hpnicfCBQoSBehaviorName, hpnicfCBQoSCpApplyPolicyEntry=hpnicfCBQoSCpApplyPolicyEntry, hpnicfCBQoSPolicyClassCount=hpnicfCBQoSPolicyClassCount, hpnicfCBQoSIfApplyPolicyName=hpnicfCBQoSIfApplyPolicyName, hpnicfCBQoSPolicyClassClassifierIndex=hpnicfCBQoSPolicyClassClassifierIndex, hpnicfCBQoSGtsPir=hpnicfCBQoSGtsPir, hpnicfCBQoSMatchRuleIndex=hpnicfCBQoSMatchRuleIndex, hpnicfCBQoSAccountingRunInfoTable=hpnicfCBQoSAccountingRunInfoTable, hpnicfCBQoSAtmPvcRemarkRunInfoTable=hpnicfCBQoSAtmPvcRemarkRunInfoTable, hpnicfCBQoSQueueQueueNumber=hpnicfCBQoSQueueQueueNumber, hpnicfCBQoSIfCbqBeQueueSize=hpnicfCBQoSIfCbqBeQueueSize, hpnicfCBQoSFrPvcRemarkedPackets=hpnicfCBQoSFrPvcRemarkedPackets, hpnicfCBQoSFrPvcCarRunInfoTable=hpnicfCBQoSFrPvcCarRunInfoTable, hpnicfCBQoSCarGreenAction=hpnicfCBQoSCarGreenAction, hpnicfCBQoSClassifierRowStatus=hpnicfCBQoSClassifierRowStatus, hpnicfCBQoSAccountCfgInfoEntry=hpnicfCBQoSAccountCfgInfoEntry, hpnicfCBQoSQueueRunInfoEntry=hpnicfCBQoSQueueRunInfoEntry, hpnicfCBQoSNestPolicyApplyObjectIndex=hpnicfCBQoSNestPolicyApplyObjectIndex, hpnicfCBQoSAtmPvcApplyPolicyVPI=hpnicfCBQoSAtmPvcApplyPolicyVPI, hpnicfCBQoSClassifierIndex=hpnicfCBQoSClassifierIndex, hpnicfCBQoSApplyPolicyObjects=hpnicfCBQoSApplyPolicyObjects, hpnicfCBQoSPvcApplyObjectIndex=hpnicfCBQoSPvcApplyObjectIndex, hpnicfCBQoSPolicyClassRowStatus=hpnicfCBQoSPolicyClassRowStatus, hpnicfCBQoSNatCfgInfoTable=hpnicfCBQoSNatCfgInfoTable, hpnicfCBQoSClassMatchRunInfoTable=hpnicfCBQoSClassMatchRunInfoTable, hpnicfCBQoSMatchCpProtoCfgTable=hpnicfCBQoSMatchCpProtoCfgTable, hpnicfCBQoSApplyingStatus=hpnicfCBQoSApplyingStatus, hpnicfCBQoSWredClassCfgInfoTable=hpnicfCBQoSWredClassCfgInfoTable, hpnicfCBQoSCarYellowPackets=hpnicfCBQoSCarYellowPackets, hpnicfCBQoSGtsRunInfoTable=hpnicfCBQoSGtsRunInfoTable, hpnicfCBQoSWredRunInfoEntry=hpnicfCBQoSWredRunInfoEntry, hpnicfCBQoSRedirectIfIndex=hpnicfCBQoSRedirectIfIndex, hpnicfCBQoSAtmPvcApplyPolicyIfIndex=hpnicfCBQoSAtmPvcApplyPolicyIfIndex, hpnicfCBQoSFrPvcCbqQueueSize=hpnicfCBQoSFrPvcCbqQueueSize, hpnicfCBQoSBehaviorCfgInfoEntry=hpnicfCBQoSBehaviorCfgInfoEntry, hpnicfCBQoSIfClassAverageRate=hpnicfCBQoSIfClassAverageRate, hpnicfCBQoSIfGtsRunInfoTable=hpnicfCBQoSIfGtsRunInfoTable, hpnicfCBQoSMatchRuleIntValue2=hpnicfCBQoSMatchRuleIntValue2, hpnicfCBQoSGtsPassedPackets=hpnicfCBQoSGtsPassedPackets, hpnicfCBQoSClassMatchedPackets=hpnicfCBQoSClassMatchedPackets, hpnicfCBQoSCpApplyPolicySlot=hpnicfCBQoSCpApplyPolicySlot, hpnicfCBQoSFrPvcAccountingPackets=hpnicfCBQoSFrPvcAccountingPackets, hpnicfCBQoSCbqAfAllocatedQueueNum=hpnicfCBQoSCbqAfAllocatedQueueNum, hpnicfCBQoSClassifierIndexNext=hpnicfCBQoSClassifierIndexNext, hpnicfCBQoSPolicyCfgInfoEntry=hpnicfCBQoSPolicyCfgInfoEntry, hpnicfCBQoSVlanAccountingPackets=hpnicfCBQoSVlanAccountingPackets, hpnicfCBQoSGlobalApplyStatus=hpnicfCBQoSGlobalApplyStatus, hpnicfCBQoSPriorityMapAuto=hpnicfCBQoSPriorityMapAuto, hpnicfCBQoSClassBehaviorStatus=hpnicfCBQoSClassBehaviorStatus, hpnicfCBQoSIfWredRandomDiscardedPackets=hpnicfCBQoSIfWredRandomDiscardedPackets, hpnicfCBQoSFrPvcClassAverageRate=hpnicfCBQoSFrPvcClassAverageRate, hpnicfCBQoSIfCarRunInfoEntry=hpnicfCBQoSIfCarRunInfoEntry, hpnicfCBQoSFrClassApplyPolicyRowStatus=hpnicfCBQoSFrClassApplyPolicyRowStatus, hpnicfCBQoSQueueDiscardedBytes=hpnicfCBQoSQueueDiscardedBytes, hpnicfCBQoSIfCarGreenPackets=hpnicfCBQoSIfCarGreenPackets, hpnicfCBQoSAtmPvcCarConformBytes=hpnicfCBQoSAtmPvcCarConformBytes, hpnicfCBQoSColorMapDpEnable=hpnicfCBQoSColorMapDpEnable, hpnicfCBQoSFrPvcGtsRunInfoEntry=hpnicfCBQoSFrPvcGtsRunInfoEntry, hpnicfCBQoSMatchCpGroupValue=hpnicfCBQoSMatchCpGroupValue, hpnicfCBQoSPvcApplyObjectPvcID=hpnicfCBQoSPvcApplyObjectPvcID, hpnicfCBQoSIfAccountingBytes=hpnicfCBQoSIfAccountingBytes, hpnicfCBQoSClassFwdPktbps=hpnicfCBQoSClassFwdPktbps, hpnicfCBQoSSamplingCfgInfoTable=hpnicfCBQoSSamplingCfgInfoTable, hpnicfCBQoSPrimapCfgInfoTable=hpnicfCBQoSPrimapCfgInfoTable, hpnicfCBQoSIfClassMatchedPackets=hpnicfCBQoSIfClassMatchedPackets, hpnicfCBQoSIfQueueRunInfoTable=hpnicfCBQoSIfQueueRunInfoTable, hpnicfCBQoSPriorityMapGroupIndex=hpnicfCBQoSPriorityMapGroupIndex, hpnicfCBQoSAccountCfgInfoTable=hpnicfCBQoSAccountCfgInfoTable, hpnicfCBQoSPriorityMapCfgInfoEntry=hpnicfCBQoSPriorityMapCfgInfoEntry, hpnicfCBQoSCarCbs=hpnicfCBQoSCarCbs, hpnicfCBQoSAtmPvcCbqDiscard=hpnicfCBQoSAtmPvcCbqDiscard, hpnicfCBQosClassifierMatchRuleNextIndex=hpnicfCBQosClassifierMatchRuleNextIndex, hpnicfCBQoSRedirectRowStatus=hpnicfCBQoSRedirectRowStatus, hpnicfCBQoSPvcApplyObjectIfIndex=hpnicfCBQoSPvcApplyObjectIfIndex, hpnicfCBQoSGtsCfgInfoTable=hpnicfCBQoSGtsCfgInfoTable, hpnicfCBQoSPolicyRouteCfgInfoEntry=hpnicfCBQoSPolicyRouteCfgInfoEntry, hpnicfCBQoSAtmPvcGtsRunInfoTable=hpnicfCBQoSAtmPvcGtsRunInfoTable, hpnicfCBQoSPolicyName=hpnicfCBQoSPolicyName, hpnicfCBQoSBehaviorIndexNext=hpnicfCBQoSBehaviorIndexNext, hpnicfCBQoSFrClassApplyPolicyFrClassName=hpnicfCBQoSFrClassApplyPolicyFrClassName, hpnicfCBQoSPrimapRowStatus=hpnicfCBQoSPrimapRowStatus, hpnicfCBQoSNestPolicyCfgInfoEntry=hpnicfCBQoSNestPolicyCfgInfoEntry, hpnicfCBQoSAtmPvcAccountingBytes=hpnicfCBQoSAtmPvcAccountingBytes, hpnicfCBQoSMatchCpGroupCfgTable=hpnicfCBQoSMatchCpGroupCfgTable, hpnicfCBQoSPolicyIndexNext=hpnicfCBQoSPolicyIndexNext, hpnicfCBQoSBehaviorIndex=hpnicfCBQoSBehaviorIndex, hpnicfCBQoSIfCbqRunInfoEntry=hpnicfCBQoSIfCbqRunInfoEntry, hpnicfCBQoSPriorityMapExportType=hpnicfCBQoSPriorityMapExportType, hpnicfCBQoSFrPvcWredRandomDiscardedPackets=hpnicfCBQoSFrPvcWredRandomDiscardedPackets, hpnicfCBQoSCarEbs=hpnicfCBQoSCarEbs, hpnicfCBQoSAtmPvcQueueEnqueuedBytes=hpnicfCBQoSAtmPvcQueueEnqueuedBytes, hpnicfCBQoSFrPvcCbqBeQueueSize=hpnicfCBQoSFrPvcCbqBeQueueSize, hpnicfCBQoSIfClassMatchedBytes=hpnicfCBQoSIfClassMatchedBytes, hpnicfCBQoSAtmPvcGtsQueueSize=hpnicfCBQoSAtmPvcGtsQueueSize, hpnicfCBQoSSamplingRowStatus=hpnicfCBQoSSamplingRowStatus, hpnicfCBQoSQueueRunInfoTable=hpnicfCBQoSQueueRunInfoTable, hpnicfCBQoSIfCarYellowPackets=hpnicfCBQoSIfCarYellowPackets, hpnicfCBQoSAtmPvcCbqQueueSize=hpnicfCBQoSAtmPvcCbqQueueSize, hpnicfCBQoSVlanApplyPolicyVlanid=hpnicfCBQoSVlanApplyPolicyVlanid, hpnicfCBQoSIfApplyPolicyEntry=hpnicfCBQoSIfApplyPolicyEntry, hpnicfCBQoSWredWeightConst=hpnicfCBQoSWredWeightConst, hpnicfCBQoSMirrorType=hpnicfCBQoSMirrorType, hpnicfCBQoSCpApplyPolicyChassis=hpnicfCBQoSCpApplyPolicyChassis, hpnicfCBQoSColorMapDpCfgInfoEntry=hpnicfCBQoSColorMapDpCfgInfoEntry, hpnicfCBQoSIfQueueMatchedBytes=hpnicfCBQoSIfQueueMatchedBytes, hpnicfCBQoSRedirectCfgInfoTable=hpnicfCBQoSRedirectCfgInfoTable, hpnicfCBQoSCbqBeQueueSize=hpnicfCBQoSCbqBeQueueSize, hpnicfCBQoSAtmPvcCbqAfQueueSize=hpnicfCBQoSAtmPvcCbqAfQueueSize, hpnicfCBQoSFrPvcAccountingRunInfoTable=hpnicfCBQoSFrPvcAccountingRunInfoTable, hpnicfCBQoSMatchRuleType=hpnicfCBQoSMatchRuleType, hpnicfCBQoSFrPvcCbqDiscard=hpnicfCBQoSFrPvcCbqDiscard, hpnicfCBQoSFrPvcAccountingRunInfoEntry=hpnicfCBQoSFrPvcAccountingRunInfoEntry, hpnicfCBQoSVlanApplyPriority=hpnicfCBQoSVlanApplyPriority, hpnicfCBQoSApplyPolicyStaticsObjects=hpnicfCBQoSApplyPolicyStaticsObjects, hpnicfCBQoSFrPvcCbqRunInfoTable=hpnicfCBQoSFrPvcCbqRunInfoTable, hpnicfCBQoSFrPvcCarExceedPackets=hpnicfCBQoSFrPvcCarExceedPackets, hpnicfCBQoSIfQueueRunInfoEntry=hpnicfCBQoSIfQueueRunInfoEntry, hpnicfCBQoSFrPvcGtsPassedBytes=hpnicfCBQoSFrPvcGtsPassedBytes, hpnicfCBQoSPolicyClassPrecedence=hpnicfCBQoSPolicyClassPrecedence, hpnicfCBQoSAtmPvcGtsPassedPackets=hpnicfCBQoSAtmPvcGtsPassedPackets, hpnicfCBQoSIfCbqAfAllocatedQueueNum=hpnicfCBQoSIfCbqAfAllocatedQueueNum, hpnicfCBQoSApplyObjectIndex=hpnicfCBQoSApplyObjectIndex, hpnicfCBQoSAtmPvcWredTailDiscardedPackets=hpnicfCBQoSAtmPvcWredTailDiscardedPackets, hpnicfCBQoSApplyObjectDirection=hpnicfCBQoSApplyObjectDirection, hpnicfCBQoSIfCarRedPackets=hpnicfCBQoSIfCarRedPackets, hpnicfCBQoSRedirectIpv6Interface1=hpnicfCBQoSRedirectIpv6Interface1, hpnicfCBQoSVlanClassMatchRunInfoTable=hpnicfCBQoSVlanClassMatchRunInfoTable, hpnicfCBQoSCarRedBytes=hpnicfCBQoSCarRedBytes, hpnicfCBQoSIfStaticsObjects=hpnicfCBQoSIfStaticsObjects, hpnicfCBQoSFrPvcQueueMatchedBytes=hpnicfCBQoSFrPvcQueueMatchedBytes, hpnicfCBQoSMirrorRowStatus=hpnicfCBQoSMirrorRowStatus, hpnicfCBQoSMirrorIfBackupIfIndex=hpnicfCBQoSMirrorIfBackupIfIndex, hpnicfCBQoSCpApplyObjectChassis=hpnicfCBQoSCpApplyObjectChassis, hpnicfCBQoSFrPvcQueueEnqueuedPackets=hpnicfCBQoSFrPvcQueueEnqueuedPackets, hpnicfCBQoSCarPir=hpnicfCBQoSCarPir, hpnicfCBQoSColoredRemarkColor=hpnicfCBQoSColoredRemarkColor, PYSNMP_MODULE_ID=hpnicfCBQos2, hpnicfCBQoSPriorityMapRowStatus=hpnicfCBQoSPriorityMapRowStatus, hpnicfCBQoSColoredRemarkType=hpnicfCBQoSColoredRemarkType, DirectionType=DirectionType, hpnicfCBQoSFrPvcApplyPolicyIfIndex=hpnicfCBQoSFrPvcApplyPolicyIfIndex)
mibBuilder.exportSymbols("HPN-ICF-CBQOS2-MIB", hpnicfCBQoSFrPvcQueueDiscardedBytes=hpnicfCBQoSFrPvcQueueDiscardedBytes, hpnicfCBQoSAtmPvcCbqEfQueueSize=hpnicfCBQoSAtmPvcCbqEfQueueSize, hpnicfCBQoSAtmPvcGtsDelayedBytes=hpnicfCBQoSAtmPvcGtsDelayedBytes, hpnicfCBQoSIfGtsPassedBytes=hpnicfCBQoSIfGtsPassedBytes, hpnicfCBQoSWredClassDiscardProb=hpnicfCBQoSWredClassDiscardProb, hpnicfCBQoSMatchCpProtoRowStatus=hpnicfCBQoSMatchCpProtoRowStatus, hpnicfCBQoSMatchRuleIntValue1=hpnicfCBQoSMatchRuleIntValue1, hpnicfCBQoSVlanApplyObjectVlanID=hpnicfCBQoSVlanApplyObjectVlanID, hpnicfCBQoSPolicyType=hpnicfCBQoSPolicyType, hpnicfCBQoSFrPvcRemarkRunInfoTable=hpnicfCBQoSFrPvcRemarkRunInfoTable, hpnicfCBQoSApplyObjectMainSite=hpnicfCBQoSApplyObjectMainSite, hpnicfCBQoSQueueBandwidthUnit=hpnicfCBQoSQueueBandwidthUnit, hpnicfCBQoSMirrorCfgInfoEntry=hpnicfCBQoSMirrorCfgInfoEntry, hpnicfCBQoSVlanClassMatchedPackets=hpnicfCBQoSVlanClassMatchedPackets, hpnicfCBQoSIfCbqQueueSize=hpnicfCBQoSIfCbqQueueSize, hpnicfCBQoSIfQueueMatchedPackets=hpnicfCBQoSIfQueueMatchedPackets, hpnicfCBQoSQueueMatchedPackets=hpnicfCBQoSQueueMatchedPackets, hpnicfCBQoSPolicyRouteBackup=hpnicfCBQoSPolicyRouteBackup, hpnicfCBQoSRemarkRunInfoEntry=hpnicfCBQoSRemarkRunInfoEntry, hpnicfCBQoSApplyObjectSubChannel=hpnicfCBQoSApplyObjectSubChannel, hpnicfCBQos2=hpnicfCBQos2, hpnicfCBQoSRedirectType=hpnicfCBQoSRedirectType, hpnicfCBQoSMatchRuleCfgInfoEntry=hpnicfCBQoSMatchRuleCfgInfoEntry, hpnicfCBQoSBehaviorCfgInfoTable=hpnicfCBQoSBehaviorCfgInfoTable, hpnicfCBQoSGtsCir=hpnicfCBQoSGtsCir, hpnicfCBQoSIfRemarkRunInfoTable=hpnicfCBQoSIfRemarkRunInfoTable, hpnicfCBQoSIntApplyObjectEntry=hpnicfCBQoSIntApplyObjectEntry, hpnicfCBQoSIfCbqBeActiveQueueNum=hpnicfCBQoSIfCbqBeActiveQueueNum, hpnicfCBQoSAggregativeCarCfgInfoTable=hpnicfCBQoSAggregativeCarCfgInfoTable, hpnicfCBQoSQueueCfgInfoTable=hpnicfCBQoSQueueCfgInfoTable, hpnicfCBQoSIfCbqEfQueueSize=hpnicfCBQoSIfCbqEfQueueSize, hpnicfCBQoSCpApplyObjectEntry=hpnicfCBQoSCpApplyObjectEntry, hpnicfCBQoSGtsCfgInfoEntry=hpnicfCBQoSGtsCfgInfoEntry, hpnicfCBQoSFrPvcClassMatchedPackets=hpnicfCBQoSFrPvcClassMatchedPackets, hpnicfCBQoSAtmPvcApplyPolicyName=hpnicfCBQoSAtmPvcApplyPolicyName, hpnicfCBQoSFrPvcWredTailDiscardedPackets=hpnicfCBQoSFrPvcWredTailDiscardedPackets, hpnicfCBQoSVlanClassMatchRunInfoEntry=hpnicfCBQoSVlanClassMatchRunInfoEntry, hpnicfCBQoSClassifierType=hpnicfCBQoSClassifierType, hpnicfCBQoSCpApplyRowStatus=hpnicfCBQoSCpApplyRowStatus, hpnicfCBQoSCarGreenBytes=hpnicfCBQoSCarGreenBytes, hpnicfCBQoSIfCbqAfQueueSize=hpnicfCBQoSIfCbqAfQueueSize, hpnicfCBQoSMatchRuleStringValue=hpnicfCBQoSMatchRuleStringValue, hpnicfCBQoSAtmPvcCarConformPackets=hpnicfCBQoSAtmPvcCarConformPackets, hpnicfCBQoSQueueDropType=hpnicfCBQoSQueueDropType, hpnicfCBQoSColorMapDpRowStatus=hpnicfCBQoSColorMapDpRowStatus, hpnicfCBQoSIfClassMatchRunInfoEntry=hpnicfCBQoSIfClassMatchRunInfoEntry, hpnicfCBQoSMatchCpProtoValue=hpnicfCBQoSMatchCpProtoValue, hpnicfCBQoSPolicyClassIndex=hpnicfCBQoSPolicyClassIndex, hpnicfCBQoSMirrorIfCfgInfoTable=hpnicfCBQoSMirrorIfCfgInfoTable, hpnicfCBQoSWredRandomDiscardedPackets=hpnicfCBQoSWredRandomDiscardedPackets, hpnicfCBQoSFrPvcGtsDelayedPackets=hpnicfCBQoSFrPvcGtsDelayedPackets, hpnicfCBQoSAtmPvcAccountingRunInfoEntry=hpnicfCBQoSAtmPvcAccountingRunInfoEntry, hpnicfCBQoSNestServiceDot1pValue=hpnicfCBQoSNestServiceDot1pValue, hpnicfCBQoSColoredRemarkCfgTable=hpnicfCBQoSColoredRemarkCfgTable, hpnicfCBQoSIntApplyObjectTable=hpnicfCBQoSIntApplyObjectTable, hpnicfCBQoSCpApplyPolicyTable=hpnicfCBQoSCpApplyPolicyTable, hpnicfCBQoSFrPvcCbqBeActiveQueueNum=hpnicfCBQoSFrPvcCbqBeActiveQueueNum, hpnicfCBQoSGtsRowStatus=hpnicfCBQoSGtsRowStatus, hpnicfCBQoSIfRemarkedPackets=hpnicfCBQoSIfRemarkedPackets, hpnicfCBQoSGtsDiscardedPackets=hpnicfCBQoSGtsDiscardedPackets, QueueBandwidthUnit=QueueBandwidthUnit, hpnicfCBQoSMatchRuleCfgInfoTable=hpnicfCBQoSMatchRuleCfgInfoTable, hpnicfCBQoSFrPvcCbqBeTotalQueueNum=hpnicfCBQoSFrPvcCbqBeTotalQueueNum, hpnicfCBQoSPrimapColorType=hpnicfCBQoSPrimapColorType, hpnicfCBQoSAccountingBytes=hpnicfCBQoSAccountingBytes, hpnicfCBQoSWredClassLowLimit=hpnicfCBQoSWredClassLowLimit, hpnicfCBQoSCbqAfQueueSize=hpnicfCBQoSCbqAfQueueSize, hpnicfCBQoSFrPvcAccountingBytes=hpnicfCBQoSFrPvcAccountingBytes, hpnicfCBQoSNestServiceVlanID=hpnicfCBQoSNestServiceVlanID, hpnicfCBQoSGlobalApplyDirection=hpnicfCBQoSGlobalApplyDirection, hpnicfCBQoSCpApplyPolicyName=hpnicfCBQoSCpApplyPolicyName, hpnicfCBQoSAtmPvcCbqRunInfoTable=hpnicfCBQoSAtmPvcCbqRunInfoTable, hpnicfCBQoSPolicyConfigMode=hpnicfCBQoSPolicyConfigMode, hpnicfCBQoSAggregativeCarCfgInfoEntry=hpnicfCBQoSAggregativeCarCfgInfoEntry, hpnicfCBQoSIfQueueEnqueuedPackets=hpnicfCBQoSIfQueueEnqueuedPackets, hpnicfCBQoSIfCbqBeMaxActiveQueueNum=hpnicfCBQoSIfCbqBeMaxActiveQueueNum, hpnicfCBQoSFrPvcClassMatchedBytes=hpnicfCBQoSFrPvcClassMatchedBytes, hpnicfCBQoSIfCbqBeTotalQueueNum=hpnicfCBQoSIfCbqBeTotalQueueNum, hpnicfCBQoSPriorityMapCfgInfoTable=hpnicfCBQoSPriorityMapCfgInfoTable, hpnicfCBQoSMirrorIfMainIfStatus=hpnicfCBQoSMirrorIfMainIfStatus, hpnicfCBQoSFrPvcGtsRunInfoTable=hpnicfCBQoSFrPvcGtsRunInfoTable, hpnicfCBQoSCbqBeTotalQueueNum=hpnicfCBQoSCbqBeTotalQueueNum, hpnicfCBQoSCarPolicedPriorityMapType=hpnicfCBQoSCarPolicedPriorityMapType, hpnicfCBQoSApplyObjectEntry=hpnicfCBQoSApplyObjectEntry, hpnicfCBQoSVlanApplyObjectEntry=hpnicfCBQoSVlanApplyObjectEntry, hpnicfCBQoSFrClassApplyPolicyEntry=hpnicfCBQoSFrClassApplyPolicyEntry, hpnicfCBQoSAccountRowStatus=hpnicfCBQoSAccountRowStatus, hpnicfCBQoSApplyPolicyIndexObjects=hpnicfCBQoSApplyPolicyIndexObjects, hpnicfCBQoSNestPolicyClassIndex=hpnicfCBQoSNestPolicyClassIndex, hpnicfCBQoSRemarkRunInfoTable=hpnicfCBQoSRemarkRunInfoTable, hpnicfCBQoSVlanApplyPolicyTable=hpnicfCBQoSVlanApplyPolicyTable, hpnicfCBQoSAtmPvcCbqBeQueueSize=hpnicfCBQoSAtmPvcCbqBeQueueSize, hpnicfCBQoSAtmPvcWredRunInfoTable=hpnicfCBQoSAtmPvcWredRunInfoTable, hpnicfCBQoSIfGtsDiscardedPackets=hpnicfCBQoSIfGtsDiscardedPackets, hpnicfCBQoSFirewallCfgInfoEntry=hpnicfCBQoSFirewallCfgInfoEntry, hpnicfCBQoSQueueCfgInfoEntry=hpnicfCBQoSQueueCfgInfoEntry, hpnicfCBQoSVlanApplyPolicyName=hpnicfCBQoSVlanApplyPolicyName, hpnicfCBQoSAtmPvcWredRandomDiscardedPackets=hpnicfCBQoSAtmPvcWredRandomDiscardedPackets, hpnicfCBQoSIfGtsDelayedPackets=hpnicfCBQoSIfGtsDelayedPackets, hpnicfCBQoSRemarkCfgInfoEntry=hpnicfCBQoSRemarkCfgInfoEntry, ApplyObjectType=ApplyObjectType, hpnicfCBQoSIfClassMatchRunInfoTable=hpnicfCBQoSIfClassMatchRunInfoTable, hpnicfCBQoSPolicyClassClassifierName=hpnicfCBQoSPolicyClassClassifierName, hpnicfCBQoSFrClassApplyPolicyDirection=hpnicfCBQoSFrClassApplyPolicyDirection, hpnicfCBQoSAtmPvcAccountingPackets=hpnicfCBQoSAtmPvcAccountingPackets, hpnicfCBQoSAccounting=hpnicfCBQoSAccounting, hpnicfCBQoSNestPolicyName=hpnicfCBQoSNestPolicyName, hpnicfCBQoSQueueCbs=hpnicfCBQoSQueueCbs, hpnicfCBQoSVlanAccountingBytes=hpnicfCBQoSVlanAccountingBytes, hpnicfCBQoSAtmPvcWredRunInfoEntry=hpnicfCBQoSAtmPvcWredRunInfoEntry, hpnicfCBQoSGtsPassedBytes=hpnicfCBQoSGtsPassedBytes, hpnicfCBQoSFrPvcCarConformPackets=hpnicfCBQoSFrPvcCarConformPackets, hpnicfCBQoSRedirectIpv6Interface2=hpnicfCBQoSRedirectIpv6Interface2, hpnicfCBQoSAtmPvcGtsDiscardedBytes=hpnicfCBQoSAtmPvcGtsDiscardedBytes, hpnicfCBQoSFrPvcCbqEfQueueSize=hpnicfCBQoSFrPvcCbqEfQueueSize, hpnicfCBQoSPrimapCfgInfoEntry=hpnicfCBQoSPrimapCfgInfoEntry, hpnicfCBQoSCarAggregativeCarIndex=hpnicfCBQoSCarAggregativeCarIndex, hpnicfCBQoSPolicyClassCfgInfoEntry=hpnicfCBQoSPolicyClassCfgInfoEntry, hpnicfCBQoSCarRedPackets=hpnicfCBQoSCarRedPackets, hpnicfCBQoSGtsCbs=hpnicfCBQoSGtsCbs, hpnicfCBQoSPvcApplyObjectTable=hpnicfCBQoSPvcApplyObjectTable, hpnicfCBQoSQueueEnqueuedPackets=hpnicfCBQoSQueueEnqueuedPackets, hpnicfCBQoSMatchCpGroupRowStatus=hpnicfCBQoSMatchCpGroupRowStatus, hpnicfCBQoSNestPolicyRowStatus=hpnicfCBQoSNestPolicyRowStatus, WredType=WredType, hpnicfCBQoSNatCfgInfoEntry=hpnicfCBQoSNatCfgInfoEntry, hpnicfCBQoSBehaviorType=hpnicfCBQoSBehaviorType, hpnicfCBQoSCarGreenPackets=hpnicfCBQoSCarGreenPackets, hpnicfCBQoSFrPvcQueueDiscardedPackets=hpnicfCBQoSFrPvcQueueDiscardedPackets, hpnicfCBQoSFrPvcQueueEnqueuedBytes=hpnicfCBQoSFrPvcQueueEnqueuedBytes, hpnicfCBQoSClassFwdPktpps=hpnicfCBQoSClassFwdPktpps, hpnicfCBQoSPolicyClassCfgOrder=hpnicfCBQoSPolicyClassCfgOrder, hpnicfCBQoSAtmPvcQueueRunInfoEntry=hpnicfCBQoSAtmPvcQueueRunInfoEntry, hpnicfCBQoSIfCarRedBytes=hpnicfCBQoSIfCarRedBytes, hpnicfCBQoSFrPvcCarExceedBytes=hpnicfCBQoSFrPvcCarExceedBytes, hpnicfCBQoSFrPvcCbqRunInfoEntry=hpnicfCBQoSFrPvcCbqRunInfoEntry, hpnicfCBQoSNestCfgInfoTable=hpnicfCBQoSNestCfgInfoTable, hpnicfCBQoSNestPolicyApplyObjectTable=hpnicfCBQoSNestPolicyApplyObjectTable, hpnicfCBQoSCbqRunInfoTable=hpnicfCBQoSCbqRunInfoTable, hpnicfCBQoSFrPvcQueueRunInfoEntry=hpnicfCBQoSFrPvcQueueRunInfoEntry, hpnicfCBQoSWredCfgInfoTable=hpnicfCBQoSWredCfgInfoTable, hpnicfCBQoSQueueCbsRatio=hpnicfCBQoSQueueCbsRatio, hpnicfCBQoSVlanApplyPolicyRowStatus=hpnicfCBQoSVlanApplyPolicyRowStatus, hpnicfCBQoSColorMapDpCfgInfoTable=hpnicfCBQoSColorMapDpCfgInfoTable, hpnicfCBQoSPolicyClassCfgInfoTable=hpnicfCBQoSPolicyClassCfgInfoTable, hpnicfCBQoSMirrorIfBackupIfStatus=hpnicfCBQoSMirrorIfBackupIfStatus, hpnicfCBQoSPolicyClassNextIndex=hpnicfCBQoSPolicyClassNextIndex, hpnicfCBQoSNatBackupNumber=hpnicfCBQoSNatBackupNumber, hpnicfCBQoSAtmPvcQueueDiscardedBytes=hpnicfCBQoSAtmPvcQueueDiscardedBytes, hpnicfCBQoSAtmPvcCbqBeTotalQueueNum=hpnicfCBQoSAtmPvcCbqBeTotalQueueNum, hpnicfCBQoSAtmPvcClassMatchRunInfoTable=hpnicfCBQoSAtmPvcClassMatchRunInfoTable, hpnicfCBQoSNatMainNumber=hpnicfCBQoSNatMainNumber, hpnicfCBQoSMirrorIfCfgInfoEntry=hpnicfCBQoSMirrorIfCfgInfoEntry, hpnicfCBQoSFrPvcGtsPassedPackets=hpnicfCBQoSFrPvcGtsPassedPackets, hpnicfCBQoSAtmPvcCbqBeMaxActiveQueueNum=hpnicfCBQoSAtmPvcCbqBeMaxActiveQueueNum, hpnicfCBQoSQueueRowStatus=hpnicfCBQoSQueueRowStatus, hpnicfCBQoSPrePriMapTableType=hpnicfCBQoSPrePriMapTableType, hpnicfCBQoSIfApplyPolicyIfIndex=hpnicfCBQoSIfApplyPolicyIfIndex, hpnicfCBQoSCbqEfQueueSize=hpnicfCBQoSCbqEfQueueSize, hpnicfCBQoSIntApplyObjectIfIndex=hpnicfCBQoSIntApplyObjectIfIndex, hpnicfCBQoSRemarkValue=hpnicfCBQoSRemarkValue, hpnicfCBQoSFrPvcGtsDiscardedPackets=hpnicfCBQoSFrPvcGtsDiscardedPackets, hpnicfCBQoSQueueLength=hpnicfCBQoSQueueLength, hpnicfCBQoSAtmPvcCbqRunInfoEntry=hpnicfCBQoSAtmPvcCbqRunInfoEntry, hpnicfCBQoSAtmPvcApplyPolicyVCI=hpnicfCBQoSAtmPvcApplyPolicyVCI, hpnicfCBQoSClassDropPktbps=hpnicfCBQoSClassDropPktbps, hpnicfCBQoSVlanApplyPolicyStatus=hpnicfCBQoSVlanApplyPolicyStatus, hpnicfCBQoSCarRedRemarkValue=hpnicfCBQoSCarRedRemarkValue, hpnicfCBQoSAtmPvcCbqBeActiveQueueNum=hpnicfCBQoSAtmPvcCbqBeActiveQueueNum, hpnicfCBQoSPolicyRouteCfgInfoTable=hpnicfCBQoSPolicyRouteCfgInfoTable, hpnicfCBQoSPvcApplyObjectEntry=hpnicfCBQoSPvcApplyObjectEntry, hpnicfCBQoSNestPolicyCfgInfoTable=hpnicfCBQoSNestPolicyCfgInfoTable, hpnicfCBQoSAggregativeCarRowStatus=hpnicfCBQoSAggregativeCarRowStatus, hpnicfCBQoSQueueDiscardedPackets=hpnicfCBQoSQueueDiscardedPackets, hpnicfCBQoSNestCustomerDot1pValue=hpnicfCBQoSNestCustomerDot1pValue, hpnicfCBQoSFrPvcWredRunInfoEntry=hpnicfCBQoSFrPvcWredRunInfoEntry, hpnicfCBQoSMirrorIfMainIfIndex=hpnicfCBQoSMirrorIfMainIfIndex, hpnicfCBQoSAtmPvcClassMatchPackets=hpnicfCBQoSAtmPvcClassMatchPackets, hpnicfCBQoSAtmPvcCarRunInfoTable=hpnicfCBQoSAtmPvcCarRunInfoTable, hpnicfCBQoSIfCarGreenBytes=hpnicfCBQoSIfCarGreenBytes, hpnicfCBQoSMatchIpAddressType=hpnicfCBQoSMatchIpAddressType, hpnicfCBQoSAtmPvcRemarkRunInfoEntry=hpnicfCBQoSAtmPvcRemarkRunInfoEntry, hpnicfCBQoSFrPvcClassMatchRunInfoEntry=hpnicfCBQoSFrPvcClassMatchRunInfoEntry, hpnicfCBQoSGtsDelayedPackets=hpnicfCBQoSGtsDelayedPackets, hpnicfCBQoSWredTailDiscardedPackets=hpnicfCBQoSWredTailDiscardedPackets, hpnicfCBQoSFrPvcCbqAfAllocatedQueueNum=hpnicfCBQoSFrPvcCbqAfAllocatedQueueNum, hpnicfCBQoSStaticsObjects=hpnicfCBQoSStaticsObjects, hpnicfCBQoSAtmPvcCbqAfAllocatedQueueNum=hpnicfCBQoSAtmPvcCbqAfAllocatedQueueNum, hpnicfCBQoSGtsDiscardedBytes=hpnicfCBQoSGtsDiscardedBytes, hpnicfCBQoSPolicyCfgInfoTable=hpnicfCBQoSPolicyCfgInfoTable, hpnicfCBQoSClassifierCfgInfoTable=hpnicfCBQoSClassifierCfgInfoTable, hpnicfCBQoSAtmPvcGtsRunInfoEntry=hpnicfCBQoSAtmPvcGtsRunInfoEntry, hpnicfCBQoSRemarkedPackets=hpnicfCBQoSRemarkedPackets, hpnicfCBQoSMatchRuleRowStatus=hpnicfCBQoSMatchRuleRowStatus, MatchRuleType=MatchRuleType, hpnicfCBQoSMirrorCfgInfoTable=hpnicfCBQoSMirrorCfgInfoTable, hpnicfCBQoSClassifierName=hpnicfCBQoSClassifierName, hpnicfCBQoSGtsRunInfoEntry=hpnicfCBQoSGtsRunInfoEntry, hpnicfCBQoSFrClassApplyPolicyTable=hpnicfCBQoSFrClassApplyPolicyTable, hpnicfCBQoSNatRowStatus=hpnicfCBQoSNatRowStatus, hpnicfCBQoSRedirectIpAddressType=hpnicfCBQoSRedirectIpAddressType, hpnicfCBQoSRemarkCfgInfoTable=hpnicfCBQoSRemarkCfgInfoTable, hpnicfCBQoSCbqBeActiveQueueNum=hpnicfCBQoSCbqBeActiveQueueNum, hpnicfCBQoSClassFlowStatInterval=hpnicfCBQoSClassFlowStatInterval, hpnicfCBQoSMirrorIfIndex=hpnicfCBQoSMirrorIfIndex, hpnicfCBQoSAtmPvcGtsDelayedPackets=hpnicfCBQoSAtmPvcGtsDelayedPackets, hpnicfCBQoSClassifierOperator=hpnicfCBQoSClassifierOperator, hpnicfCBQoSIfApplyPolicyStatus=hpnicfCBQoSIfApplyPolicyStatus, hpnicfCBQoSIfApplyPolicyDirection=hpnicfCBQoSIfApplyPolicyDirection, hpnicfCBQoSWredCfgInfoEntry=hpnicfCBQoSWredCfgInfoEntry, hpnicfCBQoSAccountingMode=hpnicfCBQoSAccountingMode, hpnicfCBQoSFirewallRowStatus=hpnicfCBQoSFirewallRowStatus, hpnicfCBQoSIfWredTailDiscardedPackets=hpnicfCBQoSIfWredTailDiscardedPackets, hpnicfCBQoSIfApplyPolicyEnableDynamic=hpnicfCBQoSIfApplyPolicyEnableDynamic, hpnicfCBQoSPolicyIndex=hpnicfCBQoSPolicyIndex, hpnicfCBQoSVlanAccountingRunInfoTable=hpnicfCBQoSVlanAccountingRunInfoTable, hpnicfCBQoSMatchCpProtoCfgEntry=hpnicfCBQoSMatchCpProtoCfgEntry, hpnicfCBQoSAtmPvcApplyPolicyTable=hpnicfCBQoSAtmPvcApplyPolicyTable, hpnicfCBQoSNestPolicyApplyObjectEntry=hpnicfCBQoSNestPolicyApplyObjectEntry, hpnicfCBQoSIfPolicyChanged=hpnicfCBQoSIfPolicyChanged, hpnicfCBQoSCpApplyObjectTable=hpnicfCBQoSCpApplyObjectTable, hpnicfCBQoSIfRemarkRunInfoEntry=hpnicfCBQoSIfRemarkRunInfoEntry, hpnicfCBQoSClassifierRuleCount=hpnicfCBQoSClassifierRuleCount, hpnicfCBQoSFrPvcQueueRunInfoTable=hpnicfCBQoSFrPvcQueueRunInfoTable, RemarkType=RemarkType, hpnicfCBQoSCarRowStatus=hpnicfCBQoSCarRowStatus, hpnicfCBQoSPolicyClassMode=hpnicfCBQoSPolicyClassMode, hpnicfCBQoSIfQueueDiscardedPackets=hpnicfCBQoSIfQueueDiscardedPackets, hpnicfCBQoSCarCfgInfoTable=hpnicfCBQoSCarCfgInfoTable, hpnicfCBQoSFrPvcCbqBeMaxActiveQueueNum=hpnicfCBQoSFrPvcCbqBeMaxActiveQueueNum, hpnicfCBQoSPriorityMapImportType=hpnicfCBQoSPriorityMapImportType, hpnicfCBQoSIntApplyObjectIndex=hpnicfCBQoSIntApplyObjectIndex, hpnicfCBQoSFrPvcApplyPolicyName=hpnicfCBQoSFrPvcApplyPolicyName, hpnicfCBQoSIfAccountingPackets=hpnicfCBQoSIfAccountingPackets, hpnicfCBQoSMirrorIfRowStatus=hpnicfCBQoSMirrorIfRowStatus, hpnicfQos2=hpnicfQos2, hpnicfCBQoSClassifierObjects=hpnicfCBQoSClassifierObjects, hpnicfCBQoSIfCbqDiscard=hpnicfCBQoSIfCbqDiscard, hpnicfCBQoSVlanApplyObjectIndex=hpnicfCBQoSVlanApplyObjectIndex, hpnicfCBQoSAtmPvcClassAverageRate=hpnicfCBQoSAtmPvcClassAverageRate, hpnicfCBQoSCarCir=hpnicfCBQoSCarCir, hpnicfCBQoSPolicyClassBehaviorName=hpnicfCBQoSPolicyClassBehaviorName, hpnicfCBQoSFrPvcGtsQueueSize=hpnicfCBQoSFrPvcGtsQueueSize, hpnicfCBQoSCpApplyPolicyDirection=hpnicfCBQoSCpApplyPolicyDirection, hpnicfCBQoSWredType=hpnicfCBQoSWredType, hpnicfCBQoSCarGreenRemarkValue=hpnicfCBQoSCarGreenRemarkValue, hpnicfCBQoSNotifications=hpnicfCBQoSNotifications, hpnicfCBQoSAtmPvcGtsDiscardedPackets=hpnicfCBQoSAtmPvcGtsDiscardedPackets, hpnicfCBQoSIfCarRunInfoTable=hpnicfCBQoSIfCarRunInfoTable, hpnicfCBQoSWredClassHighLimit=hpnicfCBQoSWredClassHighLimit, hpnicfCBQoSPolicyClassBehaviorIndex=hpnicfCBQoSPolicyClassBehaviorIndex, hpnicfCBQoSMatchRuleIfNot=hpnicfCBQoSMatchRuleIfNot, hpnicfCBQoSAtmPvcQueueMatchedBytes=hpnicfCBQoSAtmPvcQueueMatchedBytes, hpnicfCBQoSGtsQueueSize=hpnicfCBQoSGtsQueueSize)
mibBuilder.exportSymbols("HPN-ICF-CBQOS2-MIB", hpnicfCBQoSPolicyRouteIpAddrType=hpnicfCBQoSPolicyRouteIpAddrType, hpnicfCBQoSGlobalApplyTable=hpnicfCBQoSGlobalApplyTable, hpnicfCBQoSAtmPvcApplyPolicyEntry=hpnicfCBQoSAtmPvcApplyPolicyEntry, hpnicfCBQoSAtmPvcQueueRunInfoTable=hpnicfCBQoSAtmPvcQueueRunInfoTable, hpnicfCBQoSFrPvcRemarkRunInfoEntry=hpnicfCBQoSFrPvcRemarkRunInfoEntry, hpnicfCBQoSGlobalApplyName=hpnicfCBQoSGlobalApplyName, hpnicfCBQoSClassMatchRunInfoEntry=hpnicfCBQoSClassMatchRunInfoEntry, hpnicfCBQoSCbqDiscard=hpnicfCBQoSCbqDiscard, hpnicfCBQoSApplyObjectSubClass=hpnicfCBQoSApplyObjectSubClass, hpnicfCBQoSMatchIpAddress=hpnicfCBQoSMatchIpAddress, hpnicfCBQoSRemarkRowStatus=hpnicfCBQoSRemarkRowStatus, QueueType=QueueType, hpnicfCBQoSGtsEbs=hpnicfCBQoSGtsEbs, hpnicfCBQoSRedirectCfgInfoEntry=hpnicfCBQoSRedirectCfgInfoEntry, hpnicfCBQoSFrPvcGtsDelayedBytes=hpnicfCBQoSFrPvcGtsDelayedBytes, hpnicfCBQoSNotificationsPrefix=hpnicfCBQoSNotificationsPrefix)
