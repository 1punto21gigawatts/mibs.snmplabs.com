#
# PySNMP MIB module TPT-NPSTATS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPT-NPSTATS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:26:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Integer32, MibIdentifier, ObjectIdentity, TimeTicks, IpAddress, Gauge32, Counter32, NotificationType, iso, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "MibIdentifier", "ObjectIdentity", "TimeTicks", "IpAddress", "Gauge32", "Counter32", "NotificationType", "iso", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
tpt_tpa_objs, = mibBuilder.importSymbols("TPT-TPAMIBS-MIB", "tpt-tpa-objs")
tpt_npstats = ModuleIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10)).setLabel("tpt-npstats")
tpt_npstats.setRevisions(('2016-05-25 18:54', '2016-05-03 17:26',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tpt_npstats.setRevisionsDescriptions(('Updated copyright information. Minor MIB syntax fixes.', 'Updated npstatsSslInspCurrentSessions and npstatsSslInspConnectionRate object descriptions correcting for misplaced connection rate calculation statement.',))
if mibBuilder.loadTexts: tpt_npstats.setLastUpdated('201605251854Z')
if mibBuilder.loadTexts: tpt_npstats.setOrganization('Trend Micro, Inc.')
if mibBuilder.loadTexts: tpt_npstats.setContactInfo('www.trendmicro.com')
if mibBuilder.loadTexts: tpt_npstats.setDescription("Network processor statistics. Copyright (C) 2016 Trend Micro Incorporated. All Rights Reserved. Trend Micro makes no warranty of any kind with regard to this material, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. Trend Micro shall not be liable for errors contained herein or for incidental or consequential damages in connection with the furnishing, performance, or use of this material. This document contains proprietary information, which is protected by copyright. No part of this document may be photocopied, reproduced, or translated into another language without the prior written consent of Trend Micro. The information is provided 'as is' without warranty of any kind and is subject to change without notice. The only warranties for Trend Micro products and services are set forth in the express warranty statements accompanying such products and services. Nothing herein should be construed as constituting an additional warranty. Trend Micro shall not be liable for technical or editorial errors or omissions contained herein. TippingPoint(R), the TippingPoint logo, and Digital Vaccine(R) are registered trademarks of Trend Micro. All other company and product names may be trademarks of their respective holders. All rights reserved. This document contains confidential information, trade secrets or both, which are the property of Trend Micro. No part of this documentation may be reproduced in any form or by any means or used to make any derivative work (such as translation, transformation, or adaptation) without written permission from Trend Micro or one of its subsidiaries. All other company and product names may be trademarks of their respective holders. ")
npstatsRulesTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 1), )
if mibBuilder.loadTexts: npstatsRulesTable.setStatus('current')
if mibBuilder.loadTexts: npstatsRulesTable.setDescription('Statistical information pertaining to network processor rules. Entries in the table are sorted in descending order of number of flows.')
npstatsRulesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 1, 1), ).setIndexNames((0, "TPT-NPSTATS-MIB", "npstatsRulesRank"))
if mibBuilder.loadTexts: npstatsRulesEntry.setStatus('current')
if mibBuilder.loadTexts: npstatsRulesEntry.setDescription('An entry in the network processor statistics rules table. Rows cannot be created or deleted. ')
npstatsRulesRank = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: npstatsRulesRank.setStatus('current')
if mibBuilder.loadTexts: npstatsRulesRank.setDescription('The numerical ranking in the network processor statistics rules table.')
npstatsRulesFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsRulesFilter.setStatus('current')
if mibBuilder.loadTexts: npstatsRulesFilter.setDescription('The filter number.')
npstatsRulesFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsRulesFlows.setStatus('current')
if mibBuilder.loadTexts: npstatsRulesFlows.setDescription('The number of flows that have triggered this filter.')
npstatsRulesSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsRulesSuccess.setStatus('current')
if mibBuilder.loadTexts: npstatsRulesSuccess.setDescription('The number of times this filter has been successfully matched.')
npstatsRulesTotalPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsRulesTotalPercent.setStatus('current')
if mibBuilder.loadTexts: npstatsRulesTotalPercent.setDescription('The number of flows for this filter as a percentage of all flows.')
npstatsRulesSuccessPer10K = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsRulesSuccessPer10K.setStatus('current')
if mibBuilder.loadTexts: npstatsRulesSuccessPer10K.setDescription('The number of matches for every 10000 flows triggered.')
npstatsTiersTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 2), )
if mibBuilder.loadTexts: npstatsTiersTable.setStatus('current')
if mibBuilder.loadTexts: npstatsTiersTable.setDescription('Statistical information pertaining to network processor tiers.')
npstatsTiersEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 2, 1), ).setIndexNames((0, "TPT-NPSTATS-MIB", "npstatsTierNumber"))
if mibBuilder.loadTexts: npstatsTiersEntry.setStatus('current')
if mibBuilder.loadTexts: npstatsTiersEntry.setDescription('An entry in the network processor statistics tiers table. Rows cannot be created or deleted. ')
npstatsTierNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: npstatsTierNumber.setStatus('current')
if mibBuilder.loadTexts: npstatsTierNumber.setDescription('The network processor statistics tier number.')
npstatsTiersReceiveMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 2, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTiersReceiveMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsTiersReceiveMbps.setDescription('The current receive rate in Mbps.')
npstatsTiersTransmitMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTiersTransmitMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsTiersTransmitMbps.setDescription('The current transmit rate in Mbps.')
npstatsTiersRxPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTiersRxPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: npstatsTiersRxPktsPerSec.setDescription('The current receive rate in packets per sec.')
npstatsTiersMaxPktsPerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 2, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTiersMaxPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: npstatsTiersMaxPktsPerSec.setDescription('The maximum receive rate in packets per sec.')
npstatsTiersAvgBytesPerPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTiersAvgBytesPerPkt.setStatus('current')
if mibBuilder.loadTexts: npstatsTiersAvgBytesPerPkt.setDescription('The average packet size in bytes.')
npstatsTiersUtilizationPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTiersUtilizationPercent.setStatus('current')
if mibBuilder.loadTexts: npstatsTiersUtilizationPercent.setDescription('The percent utilization of this tier.')
npstatsTiersRatioToNextPer10K = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 2, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTiersRatioToNextPer10K.setStatus('current')
if mibBuilder.loadTexts: npstatsTiersRatioToNextPer10K.setDescription("The ratio of this tier's throughput to the next per 10K (percent * 100).")
npstatsTiersMaxReceiveMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 2, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTiersMaxReceiveMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsTiersMaxReceiveMbps.setDescription('The maximum receive rate in Mbps.')
npstatsTiersMaxTransmitMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 2, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTiersMaxTransmitMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsTiersMaxTransmitMbps.setDescription('The maximum transmit rate in Mbps.')
npstatsTiersMaxUtilizationPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTiersMaxUtilizationPercent.setStatus('current')
if mibBuilder.loadTexts: npstatsTiersMaxUtilizationPercent.setDescription('The maximum percent utilization of this tier.')
npstatsTiersMaxRatioToNextPer10K = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 2, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTiersMaxRatioToNextPer10K.setStatus('current')
if mibBuilder.loadTexts: npstatsTiersMaxRatioToNextPer10K.setDescription("The maximum ratio of this tier's throughput to the next per 10K (percent * 100).")
npstatsTiersExtra = ObjectIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3))
if mibBuilder.loadTexts: npstatsTiersExtra.setStatus('current')
if mibBuilder.loadTexts: npstatsTiersExtra.setDescription('Additional statistical information pertaining to network processor tiers.')
npstatsTier1BypassMbps = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1BypassMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1BypassMbps.setDescription('The current bypass rate in Mbps.')
npstatsTier1Balance = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1Balance.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1Balance.setDescription('The load balance among network processors (1000 = exactly balanced, 0 = all to one processor).')
npstatsTier1MaxPktsPerSecA = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1MaxPktsPerSecA.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1MaxPktsPerSecA.setDescription('The maximum processor A receive rate in packets per second.')
npstatsTier1MaxPktsPerSecB = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1MaxPktsPerSecB.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1MaxPktsPerSecB.setDescription('The maximum processor B receive rate in packets per second.')
npstatsTier1TxPktsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1TxPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1TxPktsPerSec.setDescription('The transmit rate in packets per second.')
npstatsTier1MaxTxPktsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1MaxTxPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1MaxTxPktsPerSec.setDescription('The maximum transmit rate in packets per second.')
npstatsTier4TriggerMatchPer1000 = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier4TriggerMatchPer1000.setStatus('current')
if mibBuilder.loadTexts: npstatsTier4TriggerMatchPer1000.setDescription('Proportion of traffic inspected because of trigger match (percent * 10).')
npstatsTier4ReroutePer1000 = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier4ReroutePer1000.setStatus('current')
if mibBuilder.loadTexts: npstatsTier4ReroutePer1000.setDescription('Proportion of traffic inspected because of reroute (percent * 10).')
npstatsTier4TcpSequencePer1000 = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier4TcpSequencePer1000.setStatus('current')
if mibBuilder.loadTexts: npstatsTier4TcpSequencePer1000.setDescription('Proportion of traffic inspected because of TCP sequence (percent * 10).')
npstatsTier1MaxPktsPerSecC = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1MaxPktsPerSecC.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1MaxPktsPerSecC.setDescription('The maximum processor C receive rate in packets per second.')
npstatsTier4ProtoDcdPer1000 = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier4ProtoDcdPer1000.setStatus('current')
if mibBuilder.loadTexts: npstatsTier4ProtoDcdPer1000.setDescription('Proportion of reroute traffic inspected because of protocol decode (percent * 10).')
npstatsTier2TxTrustedPktsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier2TxTrustedPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: npstatsTier2TxTrustedPktsPerSec.setDescription('The Tier 2 Trusted packets transmit rate in packets per second.')
npstatsTier3TxTrustedPktsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier3TxTrustedPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: npstatsTier3TxTrustedPktsPerSec.setDescription('The Tier 3 Trusted packets transmit rate in packets per second.')
npstatsTier4TxTrustedPktsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier4TxTrustedPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: npstatsTier4TxTrustedPktsPerSec.setDescription('The Tier 4 Trusted packets transmit rate in packets per second.')
npstatsTier1BypassPktsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1BypassPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1BypassPktsPerSec.setDescription('The inspection bypass rate in packets per second.')
npstatsTier1MaxBypassPktsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1MaxBypassPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1MaxBypassPktsPerSec.setDescription('The maximum inspection bypass rate in packets per second.')
npstatsTier1BypassToRxPktsPerSecRatio = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1BypassToRxPktsPerSecRatio.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1BypassToRxPktsPerSecRatio.setDescription('The ratio of inspection bypass packets per second to Rx packets per second.')
npstatsTier1VlanTransPktsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1VlanTransPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1VlanTransPktsPerSec.setDescription('The VLAN translation rate in packets per second.')
npstatsTier1MaxVlanTransPktsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1MaxVlanTransPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1MaxVlanTransPktsPerSec.setDescription('The maximum VLAN translation rate in packets per second.')
npstatsTier1VlanTransToRxPktsPerSecRatio = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1VlanTransToRxPktsPerSecRatio.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1VlanTransToRxPktsPerSecRatio.setDescription('The ratio of VLAN translation packets per second to Rx packets per second.')
npstatsTier1PatternMatchToRxPktsPerSecRatio = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 21), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1PatternMatchToRxPktsPerSecRatio.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1PatternMatchToRxPktsPerSecRatio.setDescription('The ratio of pattern match packets per second to Rx packets per second.')
npstatsTier1MaxPatternMatchToRxPktsPerSecRatio = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier1MaxPatternMatchToRxPktsPerSecRatio.setStatus('current')
if mibBuilder.loadTexts: npstatsTier1MaxPatternMatchToRxPktsPerSecRatio.setDescription('The maximum ratio of pattern match packets per second to Rx packets per second.')
npstatsTier2MaxTxTrustedPktsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 23), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier2MaxTxTrustedPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: npstatsTier2MaxTxTrustedPktsPerSec.setDescription('The maximum Tier 2 Trusted packets transmit rate in packets per second.')
npstatsTier3MaxTxTrustedPktsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 24), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier3MaxTxTrustedPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: npstatsTier3MaxTxTrustedPktsPerSec.setDescription('The maximum Tier 3 Trusted packets transmit rate in packets per second.')
npstatsTier4MaxTxTrustedPktsPerSec = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 25), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier4MaxTxTrustedPktsPerSec.setStatus('current')
if mibBuilder.loadTexts: npstatsTier4MaxTxTrustedPktsPerSec.setDescription('The maximum Tier 4 Trusted packets transmit rate in packets per second.')
npstatsTier4MaxTriggerMatchPer1000 = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier4MaxTriggerMatchPer1000.setStatus('current')
if mibBuilder.loadTexts: npstatsTier4MaxTriggerMatchPer1000.setDescription('Maximum proportion of traffic inspected because of trigger match (percent * 10).')
npstatsTier4MaxReroutePer1000 = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 27), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier4MaxReroutePer1000.setStatus('current')
if mibBuilder.loadTexts: npstatsTier4MaxReroutePer1000.setDescription('Maximum proportion of traffic inspected because of reroute (percent * 10).')
npstatsTier4MaxTcpSequencePer1000 = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier4MaxTcpSequencePer1000.setStatus('current')
if mibBuilder.loadTexts: npstatsTier4MaxTcpSequencePer1000.setDescription('Maximum proportion of traffic inspected because of TCP sequence (percent * 10).')
npstatsTier4MaxProtoDcdPer1000 = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 3, 29), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsTier4MaxProtoDcdPer1000.setStatus('current')
if mibBuilder.loadTexts: npstatsTier4MaxProtoDcdPer1000.setDescription('Maximum proportion of reroute traffic inspected because of protocol decode (percent * 10).')
npstatsMisc = ObjectIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 4))
if mibBuilder.loadTexts: npstatsMisc.setStatus('current')
if mibBuilder.loadTexts: npstatsMisc.setDescription('Miscellaneous network processor statistical information.')
npstatsMiscTxPktsBestEffort = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 4, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsMiscTxPktsBestEffort.setStatus('current')
if mibBuilder.loadTexts: npstatsMiscTxPktsBestEffort.setDescription('The number of packets transmitted due to best effort mode.')
npstatsSslInsp = ObjectIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 5))
if mibBuilder.loadTexts: npstatsSslInsp.setStatus('current')
if mibBuilder.loadTexts: npstatsSslInsp.setDescription('Sub-tree for all SSL inspection statistics.')
npstatsSslInspCurrentSessions = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 5, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsSslInspCurrentSessions.setStatus('current')
if mibBuilder.loadTexts: npstatsSslInspCurrentSessions.setDescription('The current number of active SSL sessions.')
npstatsSslInspConnectionRate = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 5, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsSslInspConnectionRate.setStatus('current')
if mibBuilder.loadTexts: npstatsSslInspConnectionRate.setDescription('The average SSL connection rate in connections per second. This value is not real-time and will lag approximately 2 minutes from actual due to the time interval for calculating the rate.')
npstatsSslInspBlockedMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 5, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsSslInspBlockedMaxConns.setStatus('current')
if mibBuilder.loadTexts: npstatsSslInspBlockedMaxConns.setDescription('The number of blocked SSL sessions due to maximum connection limit.')
npstatsSslInspPassedMaxConns = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 5, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsSslInspPassedMaxConns.setStatus('current')
if mibBuilder.loadTexts: npstatsSslInspPassedMaxConns.setDescription('The number of passed (not inspected) SSL sessions due to maximum connection limit.')
npstatsSslInspTotalBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 5, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsSslInspTotalBytesIn.setStatus('current')
if mibBuilder.loadTexts: npstatsSslInspTotalBytesIn.setDescription('The number of inspected inbound SSL bytes.')
npstatsSslInspTotalBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 5, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsSslInspTotalBytesOut.setStatus('current')
if mibBuilder.loadTexts: npstatsSslInspTotalBytesOut.setDescription('The number of inspected outbound SSL bytes.')
npstatsStackSegmentPorts = ObjectIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10))
if mibBuilder.loadTexts: npstatsStackSegmentPorts.setStatus('current')
if mibBuilder.loadTexts: npstatsStackSegmentPorts.setDescription('Statistical information pertaining to customer-facing segment ports for a stack configuration.')
npstatsStackSegmentRecieveMbps = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackSegmentRecieveMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsStackSegmentRecieveMbps.setDescription('Aggregate rx rate in Mbps from all customer facing segment ports.')
npstatsStackSegmentMaxRecieveMbps = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackSegmentMaxRecieveMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsStackSegmentMaxRecieveMbps.setDescription('Maximum rx rate in Mbps from all customer facing segment ports.')
npstatsStackSegmentTransmitMbps = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackSegmentTransmitMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsStackSegmentTransmitMbps.setDescription('Aggregate tx rate in Mbps to all customer facing segment ports.')
npstatsStackSegmentMaxTransmitMbps = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackSegmentMaxTransmitMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsStackSegmentMaxTransmitMbps.setDescription('Maximum tx rate in Mbps to all customer facing segment ports.')
npstatsStackBalance = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackBalance.setStatus('current')
if mibBuilder.loadTexts: npstatsStackBalance.setDescription('The load balance percent accross all stack members')
npstatsStackMinBalance = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackMinBalance.setStatus('current')
if mibBuilder.loadTexts: npstatsStackMinBalance.setDescription('The minimum, non-zero load balance percent accross all stack members')
npstatsStackSegmentRatioToTier1Per10K = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackSegmentRatioToTier1Per10K.setStatus('current')
if mibBuilder.loadTexts: npstatsStackSegmentRatioToTier1Per10K.setDescription("The ratio of this tier's throughput to tier 1 per 10K (percent * 100).")
npstatsStackSegmentMaxRatioToTier1Per10K = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackSegmentMaxRatioToTier1Per10K.setStatus('current')
if mibBuilder.loadTexts: npstatsStackSegmentMaxRatioToTier1Per10K.setDescription("The maximum ratio of this tier's throughput to tier 1 per 10K (percent * 100).")
npstatsStackSegmentPortTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 9), )
if mibBuilder.loadTexts: npstatsStackSegmentPortTable.setStatus('current')
if mibBuilder.loadTexts: npstatsStackSegmentPortTable.setDescription('Statistical information related to customer-facing segment ports for each stack member')
npstatsStackSegmentPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 9, 1), ).setIndexNames((0, "TPT-NPSTATS-MIB", "npstatsStackMemberIndex"))
if mibBuilder.loadTexts: npstatsStackSegmentPortEntry.setStatus('current')
if mibBuilder.loadTexts: npstatsStackSegmentPortEntry.setDescription('An entry in the stacking port table.')
npstatsStackMemberIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 9, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackMemberIndex.setStatus('current')
if mibBuilder.loadTexts: npstatsStackMemberIndex.setDescription('Stack member index')
npstatsStackMemberKey = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackMemberKey.setStatus('current')
if mibBuilder.loadTexts: npstatsStackMemberKey.setDescription('Unique stack member identifier.')
npstatsStackMemberHostname = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackMemberHostname.setStatus('current')
if mibBuilder.loadTexts: npstatsStackMemberHostname.setDescription('The stack member hostname')
npstatsStackMemberSegmentReceiveMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 9, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackMemberSegmentReceiveMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsStackMemberSegmentReceiveMbps.setDescription('The current segment rx rate in Mbps for a stack member.')
npstatsStackMemberMaxSegmentReceiveMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 10, 9, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackMemberMaxSegmentReceiveMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsStackMemberMaxSegmentReceiveMbps.setDescription('The maximum segment rx rate in Mbps for a stack member.')
npstatsStackPorts = ObjectIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 11))
if mibBuilder.loadTexts: npstatsStackPorts.setStatus('current')
if mibBuilder.loadTexts: npstatsStackPorts.setDescription('Statistical information pertaining to stacking ports in a stack configuration.')
npstatsStackPortsRecieveMbps = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 11, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackPortsRecieveMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsStackPortsRecieveMbps.setDescription('Aggregate rx rate in Mbps from all stacking ports.')
npstatsStackPortsMaxRecieveMbps = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 11, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackPortsMaxRecieveMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsStackPortsMaxRecieveMbps.setDescription('Maximum rx rate in Mbps from all stacking ports.')
npstatsStackPortsTransmitMbps = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 11, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackPortsTransmitMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsStackPortsTransmitMbps.setDescription('Aggregate tx rate in Mbps for all stacking ports.')
npstatsStackPortsMaxTransmitMbps = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 11, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackPortsMaxTransmitMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsStackPortsMaxTransmitMbps.setDescription('Maximum tx rate in Mbps for all stacking ports.')
npstatsStackRxToStackTxMbps = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 11, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackRxToStackTxMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsStackRxToStackTxMbps.setDescription('Aggregate through traffic rate from segment ports to stacking ports')
npstatsStackMaxRxToStackTxMbps = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 11, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackMaxRxToStackTxMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsStackMaxRxToStackTxMbps.setDescription('The maximum through traffic rate from segment ports to stacking ports')
npstatsStackRxToSegmentTxMbps = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 11, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackRxToSegmentTxMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsStackRxToSegmentTxMbps.setDescription('Return rate in Mbps for traffic coming in on the stacking ports and transmitted to the segment ports')
npstatsStackMaxRxToSegmentTxMbps = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 11, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackMaxRxToSegmentTxMbps.setStatus('current')
if mibBuilder.loadTexts: npstatsStackMaxRxToSegmentTxMbps.setDescription('Maximum return rate in Mbps for traffic coming in on the stacking ports and transmitted to the segment ports')
npstatsStackRxToTier1 = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 11, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackRxToTier1.setStatus('current')
if mibBuilder.loadTexts: npstatsStackRxToTier1.setDescription('Aggregate receive rate from stacking ports to tier one')
npstatsStackMaxRxToTier1 = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 10, 11, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: npstatsStackMaxRxToTier1.setStatus('current')
if mibBuilder.loadTexts: npstatsStackMaxRxToTier1.setDescription('Maximnum receive rate from stacking ports to tier one')
mibBuilder.exportSymbols("TPT-NPSTATS-MIB", npstatsTiersExtra=npstatsTiersExtra, npstatsStackPortsMaxRecieveMbps=npstatsStackPortsMaxRecieveMbps, npstatsTiersMaxUtilizationPercent=npstatsTiersMaxUtilizationPercent, npstatsStackMinBalance=npstatsStackMinBalance, npstatsRulesTable=npstatsRulesTable, npstatsTier2MaxTxTrustedPktsPerSec=npstatsTier2MaxTxTrustedPktsPerSec, npstatsTiersRxPktsPerSec=npstatsTiersRxPktsPerSec, npstatsTier1Balance=npstatsTier1Balance, npstatsTiersEntry=npstatsTiersEntry, npstatsTier2TxTrustedPktsPerSec=npstatsTier2TxTrustedPktsPerSec, npstatsTiersAvgBytesPerPkt=npstatsTiersAvgBytesPerPkt, npstatsTier1BypassPktsPerSec=npstatsTier1BypassPktsPerSec, npstatsTierNumber=npstatsTierNumber, npstatsTier1MaxPatternMatchToRxPktsPerSecRatio=npstatsTier1MaxPatternMatchToRxPktsPerSecRatio, npstatsSslInspTotalBytesOut=npstatsSslInspTotalBytesOut, npstatsTier4ProtoDcdPer1000=npstatsTier4ProtoDcdPer1000, npstatsTier4ReroutePer1000=npstatsTier4ReroutePer1000, npstatsStackMaxRxToSegmentTxMbps=npstatsStackMaxRxToSegmentTxMbps, npstatsTiersMaxTransmitMbps=npstatsTiersMaxTransmitMbps, npstatsRulesRank=npstatsRulesRank, npstatsStackSegmentMaxTransmitMbps=npstatsStackSegmentMaxTransmitMbps, npstatsTiersMaxRatioToNextPer10K=npstatsTiersMaxRatioToNextPer10K, npstatsStackSegmentPortTable=npstatsStackSegmentPortTable, npstatsStackMemberHostname=npstatsStackMemberHostname, npstatsTier1VlanTransToRxPktsPerSecRatio=npstatsTier1VlanTransToRxPktsPerSecRatio, npstatsRulesSuccess=npstatsRulesSuccess, npstatsStackSegmentTransmitMbps=npstatsStackSegmentTransmitMbps, npstatsStackPorts=npstatsStackPorts, npstatsTier1BypassToRxPktsPerSecRatio=npstatsTier1BypassToRxPktsPerSecRatio, npstatsStackSegmentMaxRecieveMbps=npstatsStackSegmentMaxRecieveMbps, npstatsStackSegmentRecieveMbps=npstatsStackSegmentRecieveMbps, npstatsStackMemberSegmentReceiveMbps=npstatsStackMemberSegmentReceiveMbps, npstatsStackMemberMaxSegmentReceiveMbps=npstatsStackMemberMaxSegmentReceiveMbps, npstatsStackRxToSegmentTxMbps=npstatsStackRxToSegmentTxMbps, PYSNMP_MODULE_ID=tpt_npstats, npstatsStackSegmentRatioToTier1Per10K=npstatsStackSegmentRatioToTier1Per10K, npstatsTiersReceiveMbps=npstatsTiersReceiveMbps, npstatsRulesFlows=npstatsRulesFlows, npstatsTier4TcpSequencePer1000=npstatsTier4TcpSequencePer1000, npstatsSslInspTotalBytesIn=npstatsSslInspTotalBytesIn, npstatsTier1MaxPktsPerSecA=npstatsTier1MaxPktsPerSecA, npstatsStackMemberKey=npstatsStackMemberKey, npstatsStackBalance=npstatsStackBalance, npstatsSslInspCurrentSessions=npstatsSslInspCurrentSessions, npstatsTier1MaxPktsPerSecB=npstatsTier1MaxPktsPerSecB, npstatsMiscTxPktsBestEffort=npstatsMiscTxPktsBestEffort, npstatsTiersMaxPktsPerSec=npstatsTiersMaxPktsPerSec, npstatsStackSegmentPorts=npstatsStackSegmentPorts, npstatsTier1PatternMatchToRxPktsPerSecRatio=npstatsTier1PatternMatchToRxPktsPerSecRatio, tpt_npstats=tpt_npstats, npstatsTier4TriggerMatchPer1000=npstatsTier4TriggerMatchPer1000, npstatsTier1BypassMbps=npstatsTier1BypassMbps, npstatsTier1VlanTransPktsPerSec=npstatsTier1VlanTransPktsPerSec, npstatsTier4MaxTcpSequencePer1000=npstatsTier4MaxTcpSequencePer1000, npstatsStackRxToStackTxMbps=npstatsStackRxToStackTxMbps, npstatsTier4TxTrustedPktsPerSec=npstatsTier4TxTrustedPktsPerSec, npstatsRulesEntry=npstatsRulesEntry, npstatsTiersRatioToNextPer10K=npstatsTiersRatioToNextPer10K, npstatsTier1MaxVlanTransPktsPerSec=npstatsTier1MaxVlanTransPktsPerSec, npstatsTiersTransmitMbps=npstatsTiersTransmitMbps, npstatsRulesSuccessPer10K=npstatsRulesSuccessPer10K, npstatsSslInspPassedMaxConns=npstatsSslInspPassedMaxConns, npstatsStackPortsTransmitMbps=npstatsStackPortsTransmitMbps, npstatsTier1MaxTxPktsPerSec=npstatsTier1MaxTxPktsPerSec, npstatsTier4MaxTriggerMatchPer1000=npstatsTier4MaxTriggerMatchPer1000, npstatsRulesFilter=npstatsRulesFilter, npstatsStackPortsRecieveMbps=npstatsStackPortsRecieveMbps, npstatsStackRxToTier1=npstatsStackRxToTier1, npstatsTiersMaxReceiveMbps=npstatsTiersMaxReceiveMbps, npstatsStackPortsMaxTransmitMbps=npstatsStackPortsMaxTransmitMbps, npstatsStackSegmentMaxRatioToTier1Per10K=npstatsStackSegmentMaxRatioToTier1Per10K, npstatsSslInsp=npstatsSslInsp, npstatsSslInspBlockedMaxConns=npstatsSslInspBlockedMaxConns, npstatsTiersTable=npstatsTiersTable, npstatsTier3TxTrustedPktsPerSec=npstatsTier3TxTrustedPktsPerSec, npstatsTier4MaxProtoDcdPer1000=npstatsTier4MaxProtoDcdPer1000, npstatsStackSegmentPortEntry=npstatsStackSegmentPortEntry, npstatsTier3MaxTxTrustedPktsPerSec=npstatsTier3MaxTxTrustedPktsPerSec, npstatsTier1MaxBypassPktsPerSec=npstatsTier1MaxBypassPktsPerSec, npstatsTiersUtilizationPercent=npstatsTiersUtilizationPercent, npstatsTier1TxPktsPerSec=npstatsTier1TxPktsPerSec, npstatsStackMemberIndex=npstatsStackMemberIndex, npstatsTier4MaxTxTrustedPktsPerSec=npstatsTier4MaxTxTrustedPktsPerSec, npstatsTier4MaxReroutePer1000=npstatsTier4MaxReroutePer1000, npstatsSslInspConnectionRate=npstatsSslInspConnectionRate, npstatsRulesTotalPercent=npstatsRulesTotalPercent, npstatsStackMaxRxToTier1=npstatsStackMaxRxToTier1, npstatsMisc=npstatsMisc, npstatsTier1MaxPktsPerSecC=npstatsTier1MaxPktsPerSecC, npstatsStackMaxRxToStackTxMbps=npstatsStackMaxRxToStackTxMbps)
