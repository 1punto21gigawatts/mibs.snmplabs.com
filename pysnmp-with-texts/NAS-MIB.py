#
# PySNMP MIB module NAS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NAS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:17:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Counter32, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, ObjectIdentity, Bits, TimeTicks, iso, Unsigned32, enterprises, Counter64, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Counter32", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "ObjectIdentity", "Bits", "TimeTicks", "iso", "Unsigned32", "enterprises", "Counter64", "NotificationType", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
d_link = MibIdentifier((1, 3, 6, 1, 4, 1, 171)).setLabel("d-link")
productID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50))
projectID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1))
modelID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 5))
submodelID = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1))
nasAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1))
dns345AgentVer = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345AgentVer.setStatus('current')
if mibBuilder.loadTexts: dns345AgentVer.setDescription('Version information for the agent of SNMP of DNS345.')
dns345SoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345SoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: dns345SoftwareVersion.setDescription('The device software version.')
dns345HostName = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345HostName.setStatus('current')
if mibBuilder.loadTexts: dns345HostName.setDescription('The device host name.')
dns345FTPServer = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345FTPServer.setStatus('current')
if mibBuilder.loadTexts: dns345FTPServer.setDescription('Ftp Server status. 1 : enable 0 : disable ')
dns345NetType = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345NetType.setStatus('current')
if mibBuilder.loadTexts: dns345NetType.setDescription('The Network type. ( 0 : Workgroup 1 : Active Directory)')
dns345Temperature = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345Temperature.setStatus('current')
if mibBuilder.loadTexts: dns345Temperature.setDescription('The temperature of the system.')
dns345FanStatus = MibScalar((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345FanStatus.setStatus('current')
if mibBuilder.loadTexts: dns345FanStatus.setDescription('The status of the fan0 & fan1.')
dns345VolumeTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9), )
if mibBuilder.loadTexts: dns345VolumeTable.setStatus('current')
if mibBuilder.loadTexts: dns345VolumeTable.setDescription('A table of active volumes on the NAS device.')
dns345VolumeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9, 1), ).setIndexNames((0, "NAS-MIB", "dns345VolumeNum"))
if mibBuilder.loadTexts: dns345VolumeEntry.setStatus('current')
if mibBuilder.loadTexts: dns345VolumeEntry.setDescription('An entry in the volume table.')
dns345VolumeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345VolumeNum.setStatus('current')
if mibBuilder.loadTexts: dns345VolumeNum.setDescription('Instance number of the volume entry.')
dns345VolumeName = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345VolumeName.setStatus('current')
if mibBuilder.loadTexts: dns345VolumeName.setDescription('The name of the volume.')
dns345VolumeFsType = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345VolumeFsType.setStatus('current')
if mibBuilder.loadTexts: dns345VolumeFsType.setDescription('The type of file system of the volume. Example : ext3 or ext4')
dns345VolumeRaidLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345VolumeRaidLevel.setStatus('current')
if mibBuilder.loadTexts: dns345VolumeRaidLevel.setDescription('The RAID level of the volume. (STANDARD LINEAR RAID0 RAID1 RAID5 RAID10 RAID5+SPARE)')
dns345VolumeSize = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345VolumeSize.setStatus('current')
if mibBuilder.loadTexts: dns345VolumeSize.setDescription('The size of the volume in bytes.')
dns345VolumeFreeSpace = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 9, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345VolumeFreeSpace.setStatus('current')
if mibBuilder.loadTexts: dns345VolumeFreeSpace.setDescription('Free space on the volume in bytes.')
dns345DiskTable = MibTable((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10), )
if mibBuilder.loadTexts: dns345DiskTable.setStatus('current')
if mibBuilder.loadTexts: dns345DiskTable.setDescription('A table of physical disks attached to the NAS device.')
dns345DiskEntry = MibTableRow((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10, 1), ).setIndexNames((0, "NAS-MIB", "dns345DiskNum"))
if mibBuilder.loadTexts: dns345DiskEntry.setStatus('current')
if mibBuilder.loadTexts: dns345DiskEntry.setDescription('An entry in the physical disk table.')
dns345DiskNum = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345DiskNum.setStatus('current')
if mibBuilder.loadTexts: dns345DiskNum.setDescription('Instance number of the disk entry.')
dns345DiskVendor = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345DiskVendor.setStatus('current')
if mibBuilder.loadTexts: dns345DiskVendor.setDescription('The vendor of the disk drive.')
dns345DiskModel = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345DiskModel.setStatus('current')
if mibBuilder.loadTexts: dns345DiskModel.setDescription("The disk drive's model name.")
dns345DiskSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345DiskSerialNumber.setStatus('current')
if mibBuilder.loadTexts: dns345DiskSerialNumber.setDescription("The disk drive's serial number.")
dns345DiskTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345DiskTemperature.setStatus('current')
if mibBuilder.loadTexts: dns345DiskTemperature.setDescription('The centigrade temperature of this disk.')
dns345DiskCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 10, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dns345DiskCapacity.setStatus('current')
if mibBuilder.loadTexts: dns345DiskCapacity.setDescription('The capacity of the disk in GB.')
notifyEvts = MibIdentifier((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 200))
notifyPasswdChanged = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 200, 1))
if mibBuilder.loadTexts: notifyPasswdChanged.setStatus('current')
if mibBuilder.loadTexts: notifyPasswdChanged.setDescription("An indication that the Administrator's password has been changed.")
notifyFirmwareUpgraded = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 200, 2))
if mibBuilder.loadTexts: notifyFirmwareUpgraded.setStatus('current')
if mibBuilder.loadTexts: notifyFirmwareUpgraded.setDescription('An indication that firmware has been upgraded.')
notifyNetworkChanged = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 200, 3))
if mibBuilder.loadTexts: notifyNetworkChanged.setStatus('current')
if mibBuilder.loadTexts: notifyNetworkChanged.setDescription('An indication that the network settings has been changed.')
notifyTemperatureExceeded = NotificationType((1, 3, 6, 1, 4, 1, 171, 50, 1, 5, 1, 1, 200, 4))
if mibBuilder.loadTexts: notifyTemperatureExceeded.setStatus('current')
if mibBuilder.loadTexts: notifyTemperatureExceeded.setDescription('An indication that system temperature has exceeded.')
mibBuilder.exportSymbols("NAS-MIB", dns345VolumeTable=dns345VolumeTable, dns345DiskTable=dns345DiskTable, dns345DiskCapacity=dns345DiskCapacity, dns345VolumeName=dns345VolumeName, productID=productID, dns345Temperature=dns345Temperature, dns345DiskTemperature=dns345DiskTemperature, dns345NetType=dns345NetType, notifyNetworkChanged=notifyNetworkChanged, notifyPasswdChanged=notifyPasswdChanged, dns345DiskEntry=dns345DiskEntry, dns345FTPServer=dns345FTPServer, dns345SoftwareVersion=dns345SoftwareVersion, d_link=d_link, dns345HostName=dns345HostName, dns345VolumeFreeSpace=dns345VolumeFreeSpace, projectID=projectID, dns345AgentVer=dns345AgentVer, dns345VolumeFsType=dns345VolumeFsType, notifyFirmwareUpgraded=notifyFirmwareUpgraded, dns345VolumeEntry=dns345VolumeEntry, notifyEvts=notifyEvts, submodelID=submodelID, dns345FanStatus=dns345FanStatus, dns345DiskNum=dns345DiskNum, dns345VolumeSize=dns345VolumeSize, nasAgent=nasAgent, dns345VolumeNum=dns345VolumeNum, dns345DiskModel=dns345DiskModel, modelID=modelID, dns345VolumeRaidLevel=dns345VolumeRaidLevel, dns345DiskVendor=dns345DiskVendor, dns345DiskSerialNumber=dns345DiskSerialNumber, notifyTemperatureExceeded=notifyTemperatureExceeded)
