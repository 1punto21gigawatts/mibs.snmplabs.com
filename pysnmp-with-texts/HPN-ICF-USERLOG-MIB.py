#
# PySNMP MIB module HPN-ICF-USERLOG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-USERLOG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:41:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
hpnicfRhw, = mibBuilder.importSymbols("HPN-ICF-OID-MIB", "hpnicfRhw")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Integer32, MibIdentifier, ModuleIdentity, TimeTicks, Counter32, Unsigned32, IpAddress, Counter64, iso, ObjectIdentity, Gauge32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "ModuleIdentity", "TimeTicks", "Counter32", "Unsigned32", "IpAddress", "Counter64", "iso", "ObjectIdentity", "Gauge32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hpnicfUserLogMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18))
if mibBuilder.loadTexts: hpnicfUserLogMIB.setLastUpdated('200304100000Z')
if mibBuilder.loadTexts: hpnicfUserLogMIB.setOrganization('')
if mibBuilder.loadTexts: hpnicfUserLogMIB.setContactInfo('')
if mibBuilder.loadTexts: hpnicfUserLogMIB.setDescription('The HPN-ICF-USERLOG-MIB contains objects to Manage configuration and Monitor running state for userlog feature.')
hpnicfUserlogObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1))
hpnicfUserlogNatObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1))
hpnicfUserlogNatVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogNatVersion.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatVersion.setDescription('NAT LOG version. Currently only version 1 is developed.')
hpnicfUserlogNatSyslog = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogNatSyslog.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatSyslog.setDescription(' NAT LOG format. If 1, LOG format is sysLog. If 0, LOG format is UDP packet. UDP packet is the default format, and is recommended. ')
hpnicfUserlogNatSourceIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogNatSourceIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatSourceIP.setDescription('The Source IP address of NAT LOG UDP packet.')
hpnicfUserlogNatFlowBegin = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogNatFlowBegin.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatFlowBegin.setDescription(' Log the NAT flow when it is created. If 1, this function is enabled. If 0, this function is disabled. This function will be used when real-time monitor required. ')
hpnicfUserlogNatActiveTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogNatActiveTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatActiveTime.setDescription(' The active time for long-time existed NAT flow. Unit: minute. Range: 10 minutes ~ 120 minutes. When setting it, NAT flow can be logged after an interval of active time. This function will be used when real-time monitor required. The default value 0 means real-time monitor function is disabled. ')
hpnicfUserlogNatSlotCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 6), )
if mibBuilder.loadTexts: hpnicfUserlogNatSlotCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatSlotCfgInfoTable.setDescription('A table of NAT LOG configuration information for the specified slot.')
hpnicfUserlogNatSlotCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 6, 1), ).setIndexNames((0, "HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatCfgSlotNumber"))
if mibBuilder.loadTexts: hpnicfUserlogNatSlotCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatSlotCfgInfoEntry.setDescription('NAT LOG Configuration Information Entry for a slot.')
hpnicfUserlogNatCfgSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogNatCfgSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatCfgSlotNumber.setDescription('Slot number. Specify which slot is configured with NAT LOG. ')
hpnicfUserlogNatEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogNatEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatEnable.setDescription(' The NAT LOG feature Enable status. If 1, NAT LOG is enbled. If 0, NAT LOG is disabled. ')
hpnicfUserlogNatAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogNatAclNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatAclNumber.setDescription(' Access-list number. The value 0 means no ACL is specified. Only when NAT LOG is enabled, can ACL be configured. Only NAT flow which match the ACL will be logged. ')
hpnicfUserlogNatHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogNatHostAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatHostAddress.setDescription('The IP address of NAT LOG server. ')
hpnicfUserlogNatUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogNatUdpPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatUdpPort.setDescription('The UDP Port Number of NAT LOG UDP packet.')
hpnicfUserlogNatSlotRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 7), )
if mibBuilder.loadTexts: hpnicfUserlogNatSlotRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatSlotRunInfoTable.setDescription('A table of NAT LOG running information for the specified slot.')
hpnicfUserlogNatSlotRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 7, 1), ).setIndexNames((0, "HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatRunSlotNumber"))
if mibBuilder.loadTexts: hpnicfUserlogNatSlotRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatSlotRunInfoEntry.setDescription('NAT LOG Running Information Entry for a slot.')
hpnicfUserlogNatRunSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogNatRunSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatRunSlotNumber.setDescription('Slot number. Specify on which slot the NAT LOG statistics displayed.')
hpnicfUserlogNatTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogNatTotalEntries.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatTotalEntries.setDescription('The total number of NAT flow entries which are logged.')
hpnicfUserlogNatTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogNatTotalPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatTotalPackets.setDescription('The total number of NAT LOG UDP packets generated by the router.')
hpnicfUserlogNatFailedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogNatFailedEntries.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatFailedEntries.setDescription('The total number of NAT flow entries failed in outputting.')
hpnicfUserlogNatFailedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogNatFailedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatFailedPackets.setDescription('The total number of NAT LOG UDP packets failed in outputting.')
hpnicfUserlogNatClearRunStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 1, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogNatClearRunStat.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogNatClearRunStat.setDescription(' Clear the running statistics for NAT LOG. Write-only. If 1, the running statistics for NAT LOG is resetted. Other value is invalid. ')
hpnicfUserlogFlowObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2))
hpnicfUserlogFlowVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogFlowVersion.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowVersion.setDescription('BAS FLOW LOG version. Currently only version 1 is developed.')
hpnicfUserlogFlowSyslog = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogFlowSyslog.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowSyslog.setDescription(' BAS FLOW LOG format. If 1, LOG format is sysLog. If 0, LOG format is UDP packet. UDP packet is the default format, and is recommended. ')
hpnicfUserlogFlowSourceIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogFlowSourceIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowSourceIP.setDescription('The Source IP address of BAS FLOW LOG UDP packet.')
hpnicfUserlogFlowFlowBegin = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogFlowFlowBegin.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowFlowBegin.setDescription(' Log the BAS flow when it is created. If 1, this function is enabled. If 0, this function is disabled. This function will be used when real-time monitor required. ')
hpnicfUserlogFlowActiveTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogFlowActiveTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowActiveTime.setDescription(' The active time for long-time existed BAS flow. Unit: minute. Range: 10 minutes ~ 120 minutes. When setting it, BAS flow can be logged after an internal of active time. This function will be used when real-time monitor required. The default value 0 means real-time monitor function is disabled. ')
hpnicfUserlogFlowSlotCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 6), )
if mibBuilder.loadTexts: hpnicfUserlogFlowSlotCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowSlotCfgInfoTable.setDescription('A table of BAS FLOW LOG configuration information for the specified slot.')
hpnicfUserlogFlowSlotCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 6, 1), ).setIndexNames((0, "HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowCfgSlotNumber"))
if mibBuilder.loadTexts: hpnicfUserlogFlowSlotCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowSlotCfgInfoEntry.setDescription('BAS FLOW LOG Configuration Information Entry for a slot.')
hpnicfUserlogFlowCfgSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogFlowCfgSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowCfgSlotNumber.setDescription('Slot number. Specify which slot is configured with BAS FLOW LOG.')
hpnicfUserlogFlowEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogFlowEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowEnable.setDescription(' The BAS FLOW LOG feature Enable status. If 1, BAS FLOW LOG is enbled. If 0, BAS FLOW LOG is disabled. ')
hpnicfUserlogFlowAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogFlowAclNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowAclNumber.setDescription(' Access-list number. The value 0 means no ACL is specified. Only when BAS FLOW LOG is enabled, can ACL be configured. Only BAS flow which match the ACL will be logged. ')
hpnicfUserlogFlowHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogFlowHostAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowHostAddress.setDescription('The IP address of BAS FLOW LOG server. ')
hpnicfUserlogFlowUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogFlowUdpPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowUdpPort.setDescription('The UDP Port Number of BAS FLOW LOG UDP packet.')
hpnicfUserlogFlowSlotRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 7), )
if mibBuilder.loadTexts: hpnicfUserlogFlowSlotRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowSlotRunInfoTable.setDescription('A table of BAS FLOW LOG running information for the specified slot.')
hpnicfUserlogFlowSlotRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 7, 1), ).setIndexNames((0, "HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowRunSlotNumber"))
if mibBuilder.loadTexts: hpnicfUserlogFlowSlotRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowSlotRunInfoEntry.setDescription('Running Information Entry for a slot.')
hpnicfUserlogFlowRunSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogFlowRunSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowRunSlotNumber.setDescription('Slot number. Specify on which slot the BAS FLOW LOG statistics displayed.')
hpnicfUserlogFlowTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 7, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogFlowTotalEntries.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowTotalEntries.setDescription('The total number of BAS FLOW Entries which are logged.')
hpnicfUserlogFlowTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogFlowTotalPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowTotalPackets.setDescription('The total number of FLOW LOG UDP packet generated by the router.')
hpnicfUserlogFlowFailedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 7, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogFlowFailedEntries.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowFailedEntries.setDescription('The total number of BAS FLOW entries failed in outputting. ')
hpnicfUserlogFlowFailedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 7, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogFlowFailedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowFailedPackets.setDescription('The total number of BAS FLOW LOG UDP packet failed in outputting.')
hpnicfUserlogFlowClearRunStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 2, 7, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogFlowClearRunStat.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogFlowClearRunStat.setDescription(' Clear the running statistics for FLOW LOG. Write-only. If 1, the running statistics for FLOW LOG is resetted. Other value is invalid. ')
hpnicfUserlogAccessObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3))
hpnicfUserlogAccessVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogAccessVersion.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessVersion.setDescription('BAS ACCESS LOG version. Currently only version 1 is developed.')
hpnicfUserlogAccessSyslog = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogAccessSyslog.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessSyslog.setDescription(' BAS ACCESS LOG format. If 1, LOG format is sysLog; If 0, LOG format is UDP packet. UDP packet is the default format, and is recommended. ')
hpnicfUserlogAccessSourceIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogAccessSourceIP.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessSourceIP.setDescription('The Source IP address of BAS ACCESS LOG UDP packet.')
hpnicfUserlogAccessSlotCfgInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 4), )
if mibBuilder.loadTexts: hpnicfUserlogAccessSlotCfgInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessSlotCfgInfoTable.setDescription('A table of BAS ACCESS LOG configuration information for the specified slot.')
hpnicfUserlogAccessSlotCfgInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 4, 1), ).setIndexNames((0, "HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessCfgSlotNumber"))
if mibBuilder.loadTexts: hpnicfUserlogAccessSlotCfgInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessSlotCfgInfoEntry.setDescription('BAS ACCESS LOG Configuration Information Entry for a slot.')
hpnicfUserlogAccessCfgSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogAccessCfgSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessCfgSlotNumber.setDescription('Slot number. Specify which slot is configured with BAS ACCESS LOG.')
hpnicfUserlogAccessEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogAccessEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessEnable.setDescription(' The BAS ACCESS LOG feature Enable status. If 1, BAS ACCESS LOG is enbled. If 0, BAS ACCESS LOG is disabled. ')
hpnicfUserlogAccessHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 4, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogAccessHostAddress.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessHostAddress.setDescription('The IP address of BAS ACCESS LOG server.')
hpnicfUserlogAccessUdpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogAccessUdpPort.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessUdpPort.setDescription('The UDP Port Number of BAS ACCESS LOG UDP packet.')
hpnicfUserlogAccessSlotRunInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 5), )
if mibBuilder.loadTexts: hpnicfUserlogAccessSlotRunInfoTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessSlotRunInfoTable.setDescription('A table of BAS ACCESS LOG running information for the specified slot.')
hpnicfUserlogAccessSlotRunInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 5, 1), ).setIndexNames((0, "HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessRunSlotNumber"))
if mibBuilder.loadTexts: hpnicfUserlogAccessSlotRunInfoEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessSlotRunInfoEntry.setDescription('Running Information Entry for a slot.')
hpnicfUserlogAccessRunSlotNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogAccessRunSlotNumber.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessRunSlotNumber.setDescription('Slot number. Specify on which slot the BAS ACCESS LOG statistics displayed.')
hpnicfUserlogAccessTotalEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogAccessTotalEntries.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessTotalEntries.setDescription('The total number of BAS ACCESS Records which are logged.')
hpnicfUserlogAccessTotalPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogAccessTotalPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessTotalPackets.setDescription('The total number of ACCESS LOG UDP packet generated by the router.')
hpnicfUserlogAccessFailedEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogAccessFailedEntries.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessFailedEntries.setDescription('The total number of BAS ACCESS entries failed in outputting.')
hpnicfUserlogAccessFailedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfUserlogAccessFailedPackets.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessFailedPackets.setDescription('The total number of BAS ACCESS LOG UDP packet failed in outputting.')
hpnicfUserlogAccessClearRunStat = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 1, 3, 5, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfUserlogAccessClearRunStat.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogAccessClearRunStat.setDescription(' Clear the running statistics for ACCESS LOG. Write-only. If 1, the running statistics for ACCESS LOG is resetted. Other value is invalid. ')
hpnicfUserlogNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 2))
hpnicfUserlogConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 3))
hpnicfUserlogCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 3, 1))
hpnicfUserlogCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 3, 1, 1)).setObjects(("HPN-ICF-USERLOG-MIB", "hpnicfUserlogMandatoryGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfUserlogCompliance = hpnicfUserlogCompliance.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogCompliance.setDescription('The compliance statement for entities which implement the Userlog mib.')
hpnicfUserlogGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 3, 2))
hpnicfUserlogMandatoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 3, 2, 1)).setObjects(("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatEnable"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatHostAddress"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatUdpPort"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowEnable"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowHostAddress"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowUdpPort"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessEnable"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessHostAddress"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessUdpPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfUserlogMandatoryGroup = hpnicfUserlogMandatoryGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogMandatoryGroup.setDescription('A collection of objects providing mandatory Userlog information.')
hpnicfUserlogConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 3, 2, 2)).setObjects(("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatVersion"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatSyslog"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatSourceIP"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatFlowBegin"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatActiveTime"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatCfgSlotNumber"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatEnable"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatAclNumber"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatHostAddress"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatUdpPort"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowVersion"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowSyslog"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowSourceIP"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowFlowBegin"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowActiveTime"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowCfgSlotNumber"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowEnable"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowAclNumber"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowHostAddress"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowUdpPort"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessVersion"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessSyslog"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessSourceIP"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessCfgSlotNumber"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessEnable"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessHostAddress"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessUdpPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfUserlogConfigGroup = hpnicfUserlogConfigGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogConfigGroup.setDescription('All configurable parameters of Userlog feature.')
hpnicfUserlogInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 8, 18, 3, 2, 3)).setObjects(("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatTotalEntries"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatTotalPackets"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatFailedEntries"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogNatFailedPackets"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowTotalEntries"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowTotalPackets"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowFailedEntries"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogFlowFailedPackets"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessTotalEntries"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessTotalPackets"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessFailedEntries"), ("HPN-ICF-USERLOG-MIB", "hpnicfUserlogAccessFailedPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpnicfUserlogInfoGroup = hpnicfUserlogInfoGroup.setStatus('current')
if mibBuilder.loadTexts: hpnicfUserlogInfoGroup.setDescription('All running information of Userlog feature.')
mibBuilder.exportSymbols("HPN-ICF-USERLOG-MIB", hpnicfUserlogFlowObjects=hpnicfUserlogFlowObjects, hpnicfUserlogFlowTotalPackets=hpnicfUserlogFlowTotalPackets, hpnicfUserlogNatVersion=hpnicfUserlogNatVersion, hpnicfUserlogFlowClearRunStat=hpnicfUserlogFlowClearRunStat, hpnicfUserlogNatTotalPackets=hpnicfUserlogNatTotalPackets, hpnicfUserlogFlowFlowBegin=hpnicfUserlogFlowFlowBegin, hpnicfUserlogNatClearRunStat=hpnicfUserlogNatClearRunStat, hpnicfUserlogAccessFailedEntries=hpnicfUserlogAccessFailedEntries, hpnicfUserlogNatHostAddress=hpnicfUserlogNatHostAddress, hpnicfUserlogNatAclNumber=hpnicfUserlogNatAclNumber, hpnicfUserlogNatCfgSlotNumber=hpnicfUserlogNatCfgSlotNumber, hpnicfUserlogFlowTotalEntries=hpnicfUserlogFlowTotalEntries, hpnicfUserlogAccessHostAddress=hpnicfUserlogAccessHostAddress, hpnicfUserlogFlowSourceIP=hpnicfUserlogFlowSourceIP, hpnicfUserlogAccessFailedPackets=hpnicfUserlogAccessFailedPackets, hpnicfUserlogNatSlotCfgInfoEntry=hpnicfUserlogNatSlotCfgInfoEntry, hpnicfUserlogNatSlotRunInfoEntry=hpnicfUserlogNatSlotRunInfoEntry, hpnicfUserlogFlowSlotCfgInfoTable=hpnicfUserlogFlowSlotCfgInfoTable, PYSNMP_MODULE_ID=hpnicfUserLogMIB, hpnicfUserlogAccessCfgSlotNumber=hpnicfUserlogAccessCfgSlotNumber, hpnicfUserlogCompliances=hpnicfUserlogCompliances, hpnicfUserlogFlowSlotCfgInfoEntry=hpnicfUserlogFlowSlotCfgInfoEntry, hpnicfUserlogAccessTotalPackets=hpnicfUserlogAccessTotalPackets, hpnicfUserlogGroups=hpnicfUserlogGroups, hpnicfUserlogNatActiveTime=hpnicfUserlogNatActiveTime, hpnicfUserlogFlowActiveTime=hpnicfUserlogFlowActiveTime, hpnicfUserlogFlowSyslog=hpnicfUserlogFlowSyslog, hpnicfUserlogFlowUdpPort=hpnicfUserlogFlowUdpPort, hpnicfUserLogMIB=hpnicfUserLogMIB, hpnicfUserlogNatObjects=hpnicfUserlogNatObjects, hpnicfUserlogNatFailedEntries=hpnicfUserlogNatFailedEntries, hpnicfUserlogFlowVersion=hpnicfUserlogFlowVersion, hpnicfUserlogAccessSlotRunInfoTable=hpnicfUserlogAccessSlotRunInfoTable, hpnicfUserlogNatRunSlotNumber=hpnicfUserlogNatRunSlotNumber, hpnicfUserlogNotifications=hpnicfUserlogNotifications, hpnicfUserlogNatEnable=hpnicfUserlogNatEnable, hpnicfUserlogConformance=hpnicfUserlogConformance, hpnicfUserlogFlowSlotRunInfoEntry=hpnicfUserlogFlowSlotRunInfoEntry, hpnicfUserlogInfoGroup=hpnicfUserlogInfoGroup, hpnicfUserlogFlowCfgSlotNumber=hpnicfUserlogFlowCfgSlotNumber, hpnicfUserlogCompliance=hpnicfUserlogCompliance, hpnicfUserlogObjects=hpnicfUserlogObjects, hpnicfUserlogAccessObjects=hpnicfUserlogAccessObjects, hpnicfUserlogConfigGroup=hpnicfUserlogConfigGroup, hpnicfUserlogMandatoryGroup=hpnicfUserlogMandatoryGroup, hpnicfUserlogFlowHostAddress=hpnicfUserlogFlowHostAddress, hpnicfUserlogNatUdpPort=hpnicfUserlogNatUdpPort, hpnicfUserlogNatTotalEntries=hpnicfUserlogNatTotalEntries, hpnicfUserlogFlowRunSlotNumber=hpnicfUserlogFlowRunSlotNumber, hpnicfUserlogAccessSlotCfgInfoTable=hpnicfUserlogAccessSlotCfgInfoTable, hpnicfUserlogAccessEnable=hpnicfUserlogAccessEnable, hpnicfUserlogAccessSlotCfgInfoEntry=hpnicfUserlogAccessSlotCfgInfoEntry, hpnicfUserlogFlowAclNumber=hpnicfUserlogFlowAclNumber, hpnicfUserlogAccessUdpPort=hpnicfUserlogAccessUdpPort, hpnicfUserlogNatFailedPackets=hpnicfUserlogNatFailedPackets, hpnicfUserlogNatSlotCfgInfoTable=hpnicfUserlogNatSlotCfgInfoTable, hpnicfUserlogFlowSlotRunInfoTable=hpnicfUserlogFlowSlotRunInfoTable, hpnicfUserlogAccessRunSlotNumber=hpnicfUserlogAccessRunSlotNumber, hpnicfUserlogAccessSourceIP=hpnicfUserlogAccessSourceIP, hpnicfUserlogAccessTotalEntries=hpnicfUserlogAccessTotalEntries, hpnicfUserlogAccessClearRunStat=hpnicfUserlogAccessClearRunStat, hpnicfUserlogNatFlowBegin=hpnicfUserlogNatFlowBegin, hpnicfUserlogFlowFailedEntries=hpnicfUserlogFlowFailedEntries, hpnicfUserlogNatSlotRunInfoTable=hpnicfUserlogNatSlotRunInfoTable, hpnicfUserlogFlowEnable=hpnicfUserlogFlowEnable, hpnicfUserlogNatSourceIP=hpnicfUserlogNatSourceIP, hpnicfUserlogFlowFailedPackets=hpnicfUserlogFlowFailedPackets, hpnicfUserlogNatSyslog=hpnicfUserlogNatSyslog, hpnicfUserlogAccessSlotRunInfoEntry=hpnicfUserlogAccessSlotRunInfoEntry, hpnicfUserlogAccessVersion=hpnicfUserlogAccessVersion, hpnicfUserlogAccessSyslog=hpnicfUserlogAccessSyslog)
