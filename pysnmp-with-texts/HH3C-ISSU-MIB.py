#
# PySNMP MIB module HH3C-ISSU-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-ISSU-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:27:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter64, ObjectIdentity, iso, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, Bits, Counter32, Unsigned32, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "ObjectIdentity", "iso", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "Bits", "Counter32", "Unsigned32", "IpAddress", "Integer32")
TextualConvention, TruthValue, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "RowStatus", "DisplayString")
hh3cIssuUpgrade = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 133))
hh3cIssuUpgrade.setRevisions(('2013-01-15 15:36',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cIssuUpgrade.setRevisionsDescriptions(('Initial version of this MIB module. Added hh3cIssuUpgradeImageTable hh3cIssuOp hh3cIssuCompatibleResult hh3cIssuTestResultTable hh3cIssuUpgradeResultTable',))
if mibBuilder.loadTexts: hh3cIssuUpgrade.setLastUpdated('201301151536Z')
if mibBuilder.loadTexts: hh3cIssuUpgrade.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cIssuUpgrade.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Haidian District Beijing P.R. China http://www.h3c.com Zip:_100085')
if mibBuilder.loadTexts: hh3cIssuUpgrade.setDescription("This MIB provides objects for upgrading images on modules in the system, objects for showing the result of an upgrade operation, and objects for showing the result of a test operation. To perform an upgrade operation, a management application must first read the hh3cIssuUpgradeImageTable table and use the information in other tables, as explained below. You can configure a new image name for each image type as listed in hh3cIssuUpgradeImageTable. The system will use this image on the particular module at the next reboot. The management application used to perform an upgrade operation must first check if an upgrade operation is already in progress in the system. This is done by reading the hh3cIssuOpType ('none' indicates that no other upgrade operation is in progress. Any other value indicates that an upgrade is already in progress and a new upgrade operation is not allowed. To start an 'install' operation, the user must first perform a 'test' operation to examine the version compatibility between the given set of images and the running images. Only if the result of the 'test' operation is 'success' can the user proceed to do an install operation. The table hh3cIssuTestResultTable provides the result of the 'test' operation performed by using hh3cIssuOpType. The table hh3cIssuUpgradeResultTable provides the result of the 'install' operation performed by using hh3cIssuOpType. ")
hh3cIssuUpgradeMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1))
hh3cIssuUpgradeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1))
hh3cIssuUpgradeImageTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 1), )
if mibBuilder.loadTexts: hh3cIssuUpgradeImageTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeImageTable.setDescription('A table listing the image variable types that exist in the device.')
hh3cIssuUpgradeImageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 1, 1), ).setIndexNames((0, "HH3C-ISSU-MIB", "hh3cIssuUpgradeImageIndex"))
if mibBuilder.loadTexts: hh3cIssuUpgradeImageEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeImageEntry.setDescription('An hh3cIssuUpgradeImageEntry entry. Each entry provides an image variable type that exists in the device.')
hh3cIssuUpgradeImageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hh3cIssuUpgradeImageIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeImageIndex.setDescription('Index of each image.')
hh3cIssuUpgradeImageType = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("boot", 1), ("system", 2), ("feature", 3), ("ipe", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIssuUpgradeImageType.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeImageType.setDescription("Types of images that the system can run. The value of this object has four image variables names - 'boot', 'system', 'feature' and 'ipe'. This table will then list these four strings as follows: hh3cIssuUpgradeImageType boot system feature IPE The user can assign images (using hh3cIssuUpgradeImageURL) to these variables and the system will use the assigned images to boot.")
hh3cIssuUpgradeImageURL = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIssuUpgradeImageURL.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeImageURL.setDescription('This object contains the path of the image of this entity.')
hh3cIssuUpgradeImageRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cIssuUpgradeImageRowStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeImageRowStatus.setDescription('Row-status of image table.')
hh3cIssuOp = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 2))
hh3cIssuOpType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("done", 2), ("test", 3), ("install", 4), ("rollback", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIssuOpType.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuOpType.setDescription("Command to be executed. The 'test' command must be performed before the 'install' command can be executed. The 'install' command is allowed only if a read of this object returns 'test' and the value of object hh3cIssuOpStatus is 'success'. Command Remarks none If the user sets this object to 'none', the agent will return a success without performing an upgrade operation. done If this object returns any value other than 'none', setting this to 'done' will do the required cleanup of the previous upgrade operation and get the system ready for a new upgrade operation. test Check the version compatibility and upgrade method for the given set of image files. install For all the image entities listed in the hh3cIssuUpgradeImageTable, perform the required upgrade operation listed in that table. rollback Abort the current 'install' operation and roll back to the previous version. ")
hh3cIssuImageFileOverwrite = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 2, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIssuImageFileOverwrite.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuImageFileOverwrite.setDescription('If you want to overwrite the existing file, set the value of this object to enable. Otherwise, set the value of this object to disable.')
hh3cIssuOpTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 2, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cIssuOpTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuOpTrapEnable.setDescription('If you want to enable the trap, set the value of this object to enable. Otherwise, set the value of this object to disable.')
hh3cIssuOpStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("failure", 2), ("inProgress", 3), ("success", 4), ("rollbackInProgress", 5), ("rollbackSuccess", 6))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuOpStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuOpStatus.setDescription('Status of the specified operation. none - No operation was performed. failure - Specified operation has failed. inProgress - Specified operation is in progress. success - Specified operation completed successfully. rollbackInProgress - Rollback operation is in progress. rollbackSuccess - Rollback operation completed successfully. ')
hh3cIssuFailedReason = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuFailedReason.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuFailedReason.setDescription("Indicates the the cause of 'failure' state of the object 'hh3cIssuOpStatus'. This object would be a null string if the value of 'hh3cIssuOpStatus' is not 'failure'.")
hh3cIssuOpTimeCompleted = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 2, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuOpTimeCompleted.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuOpTimeCompleted.setDescription("Indicates the time when the upgrade operation was completed. This object would be a null string if hh3cIssuOpType is 'none'. ")
hh3cIssuLastOpType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("done", 2), ("test", 3), ("install", 4), ("rollback", 5))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuLastOpType.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuLastOpType.setDescription("This object indicates the previous hh3cIssuOp value. It will be updated after a new hh3cIssuOp is set and delivered to the upgrade process. Command Remarks none If the user sets this object to 'none', agent will return a success without performing an upgrade operation. done If this object returns any value other than 'none', setting this to 'done' will do the required cleanup of the previous upgrade operation and get the system ready for a new upgrade operation. test Check the version compatibility and upgrade method for the given set of image files. install For all the image entities listed in the hh3cIssuUpgradeImageTable, perform the required upgrade operation listed in that table. rollback Abort the current install operation and roll back to the previous version. ")
hh3cIssuLastOpStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("failure", 2), ("inProgress", 3), ("success", 4), ("rollbackInProgress", 5), ("rollbackSuccess", 6))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuLastOpStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuLastOpStatus.setDescription('This object indicates previous hh3cIssuOpStatus value. It will be updated after new hh3cIssuOp is set and delivered to upgrade process. none - No operation was performed. failure - Specified operation has failed. inProgress - Specified operation is active. success - Specified operation completed successfully. rollbackInProgress - Rollback operation is in progress. rollbackSuccess - Rollback operation completed successfully. ')
hh3cIssuLastOpFailedReason = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 2, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuLastOpFailedReason.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuLastOpFailedReason.setDescription("Indicates the cause of 'failure' state of the object 'hh3cIssuOpStatus'. This object would be a null string if the value of 'hh3cIssuOpStatus' is not 'failure'. The value will be updated when new hh3cIssuOp is set and delivered to the upgrade process.")
hh3cIssuLastOpTimeCompleted = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 1, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuLastOpTimeCompleted.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuLastOpTimeCompleted.setDescription('Indicates the previous hh3cIssuOpTimeCompleted value. The value will be updated when new hh3cIssuOp is set and delivered to the upgrade process.')
hh3cIssuUpgradeResultGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2))
hh3cIssuCompatibleResult = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 1))
hh3cIssuCompatibleResultStatus = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("inCompatible", 2), ("compatible", 3), ("failure", 4))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuCompatibleResultStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuCompatibleResultStatus.setDescription('Specifies whether the images provided in hh3cIssuUpgradeImageTable are compatible with each other as far as this module is concerned. none - No operation was performed. inCompatible - The images provided are compatible and can be run on this module. compatible - The images provided are incompatible and can be run on this module. failure - Failed to get the compatibility. ')
hh3cIssuCompatibleResultFailedReason = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuCompatibleResultFailedReason.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuCompatibleResultFailedReason.setDescription("Indicates the cause of 'failure' state of the object 'hh3cIssuCompatibleResultStatus'. This object would be a null string if the value of 'hh3cIssuCompatibleResultStatus' is not 'failure'.")
hh3cIssuTestResultTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 2), )
if mibBuilder.loadTexts: hh3cIssuTestResultTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuTestResultTable.setDescription('Shows the result of the test operation, from which you can see the upgrade method.')
hh3cIssuTestResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 2, 1), ).setIndexNames((0, "HH3C-ISSU-MIB", "hh3cIssuTestResultIndex"))
if mibBuilder.loadTexts: hh3cIssuTestResultEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuTestResultEntry.setDescription('An hh3cIssuTestResultEntry entry. Each entry provides the test result of a card in the device.')
hh3cIssuTestResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cIssuTestResultIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuTestResultIndex.setDescription('Internal index, not accessible.')
hh3cIssuTestDeviceChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuTestDeviceChassisID.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuTestDeviceChassisID.setDescription('Chassis ID of the card.')
hh3cIssuTestDeviceSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuTestDeviceSlotID.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuTestDeviceSlotID.setDescription('Slot ID of the card.')
hh3cIssuTestDeviceCpuID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuTestDeviceCpuID.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuTestDeviceCpuID.setDescription('CPU ID of the card.')
hh3cIssuTestDeviceUpgradeWay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("reboot", 2), ("sequenceReboot", 3), ("issuReboot", 4), ("serviceUpgrade", 5), ("fileUpgrade", 6), ("incompatibleUpgrade", 7))).clone('none')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuTestDeviceUpgradeWay.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuTestDeviceUpgradeWay.setDescription('Upgrade method of the device. none - No operation was performed. reboot - The upgrade method of this device is Reboot. sequenceReboot - The upgrade method of this device is SequenceReboot. issuReboot - The upgrade method of this device is IssuReboot. serviceUpgrade - The upgrade method of this device is ServiceReboot. fileUpgrade - The upgrade method of this device is FileReboot. incompatibleUpgrade - The upgrade method of this device is IncompatibleUpgrade. ')
hh3cIssuUpgradeResultTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 3), )
if mibBuilder.loadTexts: hh3cIssuUpgradeResultTable.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeResultTable.setDescription('Shows the result of the install operation.')
hh3cIssuUpgradeResultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 3, 1), ).setIndexNames((0, "HH3C-ISSU-MIB", "hh3cIssuUpgradeResultIndex"))
if mibBuilder.loadTexts: hh3cIssuUpgradeResultEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeResultEntry.setDescription('An hh3cIssuUpgradeResultEntry entry. Each entry provides the upgrade result of a card in the device.')
hh3cIssuUpgradeResultIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hh3cIssuUpgradeResultIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeResultIndex.setDescription('Internal Index, not accessible.')
hh3cIssuUpgradeDeviceChassisID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuUpgradeDeviceChassisID.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeDeviceChassisID.setDescription('Chassis ID of the card.')
hh3cIssuUpgradeDeviceSlotID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuUpgradeDeviceSlotID.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeDeviceSlotID.setDescription('Slot ID of the card.')
hh3cIssuUpgradeDeviceCpuID = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuUpgradeDeviceCpuID.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeDeviceCpuID.setDescription('CPU ID of the card.')
hh3cIssuUpgradeState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("init", 1), ("loading", 2), ("loaded", 3), ("switching", 4), ("switchover", 5), ("committing", 6), ("committed", 7), ("rollbacking", 8), ("rollbacked", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuUpgradeState.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeState.setDescription('Upgrade status of the device. init -The current status of the device is Init. loading -The current status of the device is Loading. loaded -The current status of the device is Loaded. switching -The current status of the device is Switching. switchover -The current status of the device is Switchover. committing -The current status of the device is Committing. committed -The current status of the device is Committed. rollbacking -The current status of the device is Rollbacking. rollbacked -The current status of the device is Rollbacked. ')
hh3cIssuDeviceUpgradeWay = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("reboot", 2), ("sequenceReboot", 3), ("issuReboot", 4), ("serviceUpgrade", 5), ("fileUpgrade", 6), ("incompatibleUpgrade", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuDeviceUpgradeWay.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuDeviceUpgradeWay.setDescription('Upgrade method of the card. none - No operation was performed. reboot - The upgrade method of this device is Reboot. sequenceReboot - The upgrade method of this device is SequenceReboot. issuReboot - The upgrade method of this device is IssuReboot. serviceUpgrade - The upgrade method of this device is ServiceReboot. fileUpgrade - The upgrade method of this device is FileReboot. incompatibleUpgrade - The upgrade method of this device is IncompatibleUpgrade. ')
hh3cIssuUpgradeDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("waitingUpgrade", 1), ("inProcess", 2), ("success", 3), ("failure", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuUpgradeDeviceStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeDeviceStatus.setDescription('Upgrade status of the device.')
hh3cIssuUpgradeFailedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 133, 1, 2, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cIssuUpgradeFailedReason.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeFailedReason.setDescription("Indicates the cause of 'failure' state of the object 'hh3cIssuUpgradeDeviceStatus'. This object would be a null string if the value of 'hh3cIssuCompatibleResultStatus' is not 'failure'.")
hh3cIssuUpgradeNotify = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 133, 2))
hh3cIssuUpgradeTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 133, 2, 0))
hh3cIssuUpgradeOpCompletionNotify = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 133, 2, 0, 1)).setObjects(("HH3C-ISSU-MIB", "hh3cIssuOpType"), ("HH3C-ISSU-MIB", "hh3cIssuOpStatus"), ("HH3C-ISSU-MIB", "hh3cIssuFailedReason"), ("HH3C-ISSU-MIB", "hh3cIssuOpTimeCompleted"))
if mibBuilder.loadTexts: hh3cIssuUpgradeOpCompletionNotify.setStatus('current')
if mibBuilder.loadTexts: hh3cIssuUpgradeOpCompletionNotify.setDescription('An hh3cIssuUpgradeOpCompletionNotify is sent at the completion of upgrade operation denoted by hh3cIssuOp object, if such a notification was requested when the operation was initiated. hh3cIssuOpType indicates the type of the operation. hh3cIssuOpStatus indicates the result of the operation. hh3cIssuFailedReason indicates the operation failure reason. hh3cIssuOpTimeCompleted indicates the time when the operation was completed.')
mibBuilder.exportSymbols("HH3C-ISSU-MIB", hh3cIssuUpgradeImageEntry=hh3cIssuUpgradeImageEntry, hh3cIssuOpTrapEnable=hh3cIssuOpTrapEnable, hh3cIssuLastOpTimeCompleted=hh3cIssuLastOpTimeCompleted, hh3cIssuUpgradeImageRowStatus=hh3cIssuUpgradeImageRowStatus, hh3cIssuUpgradeImageIndex=hh3cIssuUpgradeImageIndex, hh3cIssuLastOpStatus=hh3cIssuLastOpStatus, hh3cIssuUpgradeFailedReason=hh3cIssuUpgradeFailedReason, hh3cIssuUpgrade=hh3cIssuUpgrade, hh3cIssuCompatibleResultFailedReason=hh3cIssuCompatibleResultFailedReason, hh3cIssuLastOpType=hh3cIssuLastOpType, hh3cIssuOpTimeCompleted=hh3cIssuOpTimeCompleted, hh3cIssuCompatibleResult=hh3cIssuCompatibleResult, hh3cIssuUpgradeDeviceStatus=hh3cIssuUpgradeDeviceStatus, hh3cIssuUpgradeState=hh3cIssuUpgradeState, hh3cIssuUpgradeResultIndex=hh3cIssuUpgradeResultIndex, hh3cIssuUpgradeImageTable=hh3cIssuUpgradeImageTable, PYSNMP_MODULE_ID=hh3cIssuUpgrade, hh3cIssuTestResultEntry=hh3cIssuTestResultEntry, hh3cIssuTestDeviceSlotID=hh3cIssuTestDeviceSlotID, hh3cIssuOpType=hh3cIssuOpType, hh3cIssuTestDeviceChassisID=hh3cIssuTestDeviceChassisID, hh3cIssuUpgradeResultGroup=hh3cIssuUpgradeResultGroup, hh3cIssuImageFileOverwrite=hh3cIssuImageFileOverwrite, hh3cIssuUpgradeResultTable=hh3cIssuUpgradeResultTable, hh3cIssuOpStatus=hh3cIssuOpStatus, hh3cIssuTestResultTable=hh3cIssuTestResultTable, hh3cIssuUpgradeGroup=hh3cIssuUpgradeGroup, hh3cIssuFailedReason=hh3cIssuFailedReason, hh3cIssuUpgradeImageType=hh3cIssuUpgradeImageType, hh3cIssuLastOpFailedReason=hh3cIssuLastOpFailedReason, hh3cIssuOp=hh3cIssuOp, hh3cIssuUpgradeDeviceCpuID=hh3cIssuUpgradeDeviceCpuID, hh3cIssuTestResultIndex=hh3cIssuTestResultIndex, hh3cIssuUpgradeNotify=hh3cIssuUpgradeNotify, hh3cIssuUpgradeOpCompletionNotify=hh3cIssuUpgradeOpCompletionNotify, hh3cIssuDeviceUpgradeWay=hh3cIssuDeviceUpgradeWay, hh3cIssuCompatibleResultStatus=hh3cIssuCompatibleResultStatus, hh3cIssuUpgradeMibObjects=hh3cIssuUpgradeMibObjects, hh3cIssuUpgradeDeviceSlotID=hh3cIssuUpgradeDeviceSlotID, hh3cIssuUpgradeDeviceChassisID=hh3cIssuUpgradeDeviceChassisID, hh3cIssuTestDeviceCpuID=hh3cIssuTestDeviceCpuID, hh3cIssuTestDeviceUpgradeWay=hh3cIssuTestDeviceUpgradeWay, hh3cIssuUpgradeResultEntry=hh3cIssuUpgradeResultEntry, hh3cIssuUpgradeTrapPrefix=hh3cIssuUpgradeTrapPrefix, hh3cIssuUpgradeImageURL=hh3cIssuUpgradeImageURL)
