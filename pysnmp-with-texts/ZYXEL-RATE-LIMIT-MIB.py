#
# PySNMP MIB module ZYXEL-RATE-LIMIT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-RATE-LIMIT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:51:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
dot1dBasePort, = mibBuilder.importSymbols("BRIDGE-MIB", "dot1dBasePort")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, ObjectIdentity, iso, TimeTicks, Bits, MibIdentifier, ModuleIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, Counter64, Gauge32, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "ObjectIdentity", "iso", "TimeTicks", "Bits", "MibIdentifier", "ModuleIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "Counter64", "Gauge32", "IpAddress", "Unsigned32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelRateLimit = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 72))
if mibBuilder.loadTexts: zyxelRateLimit.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelRateLimit.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelRateLimit.setContactInfo('')
if mibBuilder.loadTexts: zyxelRateLimit.setDescription('The subtree for rate limit')
zyxelRateLimitSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 72, 1))
zyRateLimitState = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 72, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRateLimitState.setStatus('current')
if mibBuilder.loadTexts: zyRateLimitState.setDescription('Enabled/Disabled ingress/egress rate limiting for the switch.')
zyxelRateLimitPortTable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 72, 1, 2), )
if mibBuilder.loadTexts: zyxelRateLimitPortTable.setStatus('current')
if mibBuilder.loadTexts: zyxelRateLimitPortTable.setDescription('The table contains rate limit port configuration.')
zyxelRateLimitPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 72, 1, 2, 1), ).setIndexNames((0, "BRIDGE-MIB", "dot1dBasePort"))
if mibBuilder.loadTexts: zyxelRateLimitPortEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelRateLimitPortEntry.setDescription('An entry contains rate limit port configuration. ')
zyRateLimitPortCommitState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 72, 1, 2, 1, 1), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRateLimitPortCommitState.setStatus('current')
if mibBuilder.loadTexts: zyRateLimitPortCommitState.setDescription('Enabled/Disabled ingress commit rate limiting on the specified port.')
zyRateLimitPortCommitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 72, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRateLimitPortCommitRate.setStatus('current')
if mibBuilder.loadTexts: zyRateLimitPortCommitRate.setDescription('Specify the guaranteed bandwidth allowed in kilobits per second (Kbps) for the incoming traffic flow on the specified port. The commit rate should be less than the peak rate. The sum of commit rates cannot be greater than or equal to the uplink bandwidth.')
zyRateLimitPortPeakState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 72, 1, 2, 1, 3), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRateLimitPortPeakState.setStatus('current')
if mibBuilder.loadTexts: zyRateLimitPortPeakState.setDescription('Enabled/Disabled ingress peak rate limiting on the specified port.')
zyRateLimitPortPeakRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 72, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRateLimitPortPeakRate.setStatus('current')
if mibBuilder.loadTexts: zyRateLimitPortPeakRate.setDescription('Specify the maximum bandwidth allowed in kilobits per second (Kbps) for the incoming traffic flow on the specified port.')
zyRateLimitPortEgressState = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 72, 1, 2, 1, 5), EnabledStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRateLimitPortEgressState.setStatus('current')
if mibBuilder.loadTexts: zyRateLimitPortEgressState.setDescription('Enabled/Disabled egress rate limiting on the specified port.')
zyRateLimitPortEgressRate = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 72, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyRateLimitPortEgressRate.setStatus('current')
if mibBuilder.loadTexts: zyRateLimitPortEgressRate.setDescription('Specify the maximum bandwidth allowed in kilobits per second (Kbps) for the out-going traffic flow on the specified port.')
mibBuilder.exportSymbols("ZYXEL-RATE-LIMIT-MIB", zyxelRateLimitPortEntry=zyxelRateLimitPortEntry, zyxelRateLimit=zyxelRateLimit, zyRateLimitPortPeakState=zyRateLimitPortPeakState, zyxelRateLimitSetup=zyxelRateLimitSetup, zyRateLimitPortEgressRate=zyRateLimitPortEgressRate, zyRateLimitState=zyRateLimitState, zyxelRateLimitPortTable=zyxelRateLimitPortTable, zyRateLimitPortEgressState=zyRateLimitPortEgressState, zyRateLimitPortPeakRate=zyRateLimitPortPeakRate, PYSNMP_MODULE_ID=zyxelRateLimit, zyRateLimitPortCommitRate=zyRateLimitPortCommitRate, zyRateLimitPortCommitState=zyRateLimitPortCommitState)
