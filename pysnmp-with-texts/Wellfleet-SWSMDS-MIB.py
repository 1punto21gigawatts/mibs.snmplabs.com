#
# PySNMP MIB module Wellfleet-SWSMDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Wellfleet-SWSMDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:41:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, enterprises, Opaque, Counter32, mgmt, NotificationType, ObjectIdentity, ModuleIdentity, Bits, Gauge32, Unsigned32, Integer32, mib_2, NotificationType, Counter64, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "enterprises", "Opaque", "Counter32", "mgmt", "NotificationType", "ObjectIdentity", "ModuleIdentity", "Bits", "Gauge32", "Unsigned32", "Integer32", "mib-2", "NotificationType", "Counter64", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "MibIdentifier")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
wfSmdsSwGroup, = mibBuilder.importSymbols("Wellfleet-COMMON-MIB", "wfSmdsSwGroup")
wfSmdsSwSubTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1), )
if mibBuilder.loadTexts: wfSmdsSwSubTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubTable.setDescription('The Wellfleet SMDS Switch Circuit (SNI, subscriber) Record. This record holds information on a per circuit (SSI, SNI, subscriber) basis.')
wfSmdsSwSubEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1), ).setIndexNames((0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwSubCct"))
if mibBuilder.loadTexts: wfSmdsSwSubEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubEntry.setDescription('Per Wellfleet circuit SMDS Switch configuration parameters and counters. This table contains Subscriber-Network Interface (SNI) parameters and state variables, one entry per SIP port.')
wfSmdsSwSubDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSubDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubDelete.setDescription('create/delete parameter, dflt = created')
wfSmdsSwSubDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSubDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubDisable.setDescription('enable/disable parameter, dflt = enabled')
wfSmdsSwSubState = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubState.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubState.setDescription('SMDS Switch state variable, Up, Down Init, Not Present')
wfSmdsSwSubCct = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubCct.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubCct.setDescription('cct number for this instance')
wfSmdsSwSubDisableHrtbtPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSubDisableHrtbtPoll.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubDisableHrtbtPoll.setDescription('determine use of DXI heartbeat poll')
wfSmdsSwSubHrtbtPollAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cpe", 1), ("net", 2))).clone('net')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSubHrtbtPollAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubHrtbtPollAddr.setDescription('determine if heartbeat poll messages are sent as as CPE or network (CSU/DSU) messages.')
wfSmdsSwSubHrtbtPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSubHrtbtPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubHrtbtPollInterval.setDescription("heartbeat polling messages get sent every this many seconds - we don't want the polling interval to be less than or equal to the no-acknowledgment timer.")
wfSmdsSwSubHrtbtPollDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSubHrtbtPollDownCount.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubHrtbtPollDownCount.setDescription('if this many consecutive heartbeat polling messages go unacknowledged, log an event declaring the line down')
wfSmdsSwSubDisableNetMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSubDisableNetMgmt.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubDisableNetMgmt.setDescription('determine use of LMI network management')
wfSmdsSwSubInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sni", 1), ("ssi", 2))).clone('sni')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSubInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubInterfaceType.setDescription('defines whether this interface is a SNI or SSI.')
wfSmdsSwSubInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSubInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubInterfaceIndex.setDescription('The index number for the SSI/SNI. Each SNI in the network has a unique id. The value of this object identifies the SIP port interface for which this entry contains management information.')
wfSmdsSwSubDisableL3PduChecks = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSubDisableL3PduChecks.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubDisableL3PduChecks.setDescription('Enable/Disable L3_PDU verification. Default is disabled.')
wfSmdsSwSubDisableUsageGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSubDisableUsageGeneration.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubDisableUsageGeneration.setDescription('enable/disable usage data generation. Default is disabled.')
wfSmdsSwSubDisableMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSubDisableMIR.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubDisableMIR.setDescription('enable/disable MIR enforcement, default is disabled.')
wfSmdsSwSubUnassignedSAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubUnassignedSAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubUnassignedSAs.setDescription('The total number of SIP Level 3 PDUs discarded by the SMDS Switch because the Source Address was not assigned to the SNI.')
wfSmdsSwSubSAScreenViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubSAScreenViolations.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubSAScreenViolations.setDescription('The number of SIP L3_PDUs that violated the address screen based on source address screening for an SNI.')
wfSmdsSwSubDAScreenViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubDAScreenViolations.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubDAScreenViolations.setDescription('The total number of SIP Level 3 PDUs that violated the Destination Address Screening using either an Individual Address Screen or a Group Address Screen for the SNI.')
wfSmdsSwSubNumPDUExceededMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubNumPDUExceededMIR.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubNumPDUExceededMIR.setDescription('The total number of SIP L3_PDUs that exceeded the MIR on this interface.')
wfSmdsSwSubSipL3ReceivedIAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubSipL3ReceivedIAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubSipL3ReceivedIAs.setDescription('The total number of individually addressed SIP Level 3 PDUs received by the SMDS Switch from the CPE. The total includes only unerrored L3PDUs.')
wfSmdsSwSubSipL3ReceivedGAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubSipL3ReceivedGAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubSipL3ReceivedGAs.setDescription('The total number of group addressed SIP Level 3 PDUs received by the SMDS Switch from the CPE. The total includes only unerrored L3PDUs.')
wfSmdsSwSubSipL3UnrecIAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubSipL3UnrecIAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubSipL3UnrecIAs.setDescription('The number of SIP Level 3 PDUs received by the SMDS Switch from the CPE that have an unknown, valid, individual SMDS Destination Address.')
wfSmdsSwSubSipL3UnrecGAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubSipL3UnrecGAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubSipL3UnrecGAs.setDescription('The number of SIP Level 3 PDUs received by the SMDS Switch from the CPE that have an unknown, valid, group SMDS Destination Address.')
wfSmdsSwSubSipL3SentIAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubSipL3SentIAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubSipL3SentIAs.setDescription('The number of individually addressed SIP Level 3 PDUs that have been sent by this SMDS Switch to the CPE.')
wfSmdsSwSubSipL3SentGAs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubSipL3SentGAs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubSipL3SentGAs.setDescription('The number of group addressed SIP L3PDUs that have been sent by this SMDS Switch to the CPE.')
wfSmdsSwSubSipL3Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubSipL3Errors.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubSipL3Errors.setDescription('The total number of SIP Level 3 PDUs received by the SMDS Switch from the CPE that were discovered to have protocol errors.')
wfSmdsSwSubSipL3InvAddrTypes = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubSipL3InvAddrTypes.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubSipL3InvAddrTypes.setDescription('The total number of SIP Level 3 PDUs received by the SMDS Switch from the CPE that had a value in the Source or Destination Address type subfield other than group or individual. Or if the Source Address type subfield value indicates a group address.')
wfSmdsSwSubSipL3VersionSupport = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("version", 1))).clone('version')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubSipL3VersionSupport.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubSipL3VersionSupport.setDescription('A value which indicates the version(s) of SIP that this SNI supports. The value is a sum. This sum initially takes the value zero. For each version, V, that this interface supports, 2 raised to (V - 1) is added to the sum. For example, a port supporting versions 1 and 2 would have a value of (2^(1-1)+2^(2-1))=3. The SipL3VersionSupport is effectively a bit mask with Version 1 equal to the least significant bit (LSB).')
wfSmdsSwSubSAScrnViolationOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 28), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubSAScrnViolationOccur.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubSAScrnViolationOccur.setDescription('A string containing the SMDS Source Address, Destination Address, and Event time of the most recent occurance of an L3_PDU discarded as a result of a Source Address violation.')
wfSmdsSwSubDAScrnViolationOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 29), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubDAScrnViolationOccur.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubDAScrnViolationOccur.setDescription('A string containing the SMDS Source Address, Destination Address, and Event time of the most recent occurance of an L3_PDU discarded as a result of a Destination Address violation.')
wfSmdsSwSubUnassignedSAOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 30), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubUnassignedSAOccur.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubUnassignedSAOccur.setDescription('A string containing the SMDS Source Address, Destination Address, and Event time of the most recent occurance of an L3_PDU discarded as a result of a unassigned Source Address.')
wfSmdsSwSubSAErrorOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 31), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubSAErrorOccur.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubSAErrorOccur.setDescription('A string containing the SMDS Source Address, Destination Address, and Event time of the most recent occurance of an L3_PDU discarded because of a Source Address Field Format error.')
wfSmdsSwSubDAErrorOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 32), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubDAErrorOccur.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubDAErrorOccur.setDescription('A string containing the SMDS Source Address, Destination Address, and Event time of the most recent occurance of an L3_PDU discarded because of a Destination Address Field Format error.')
wfSmdsSwSubInvalidBASizeOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 33), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubInvalidBASizeOccur.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubInvalidBASizeOccur.setDescription('A string containing the SMDS Source Address, Destination Address, and Event time of the most recent occurance of an L3_PDU discarded because of an invalid BASize field value.')
wfSmdsSwSubInvalidHELenOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 34), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubInvalidHELenOccur.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubInvalidHELenOccur.setDescription('A string containing the SMDS Source Address, Destination Address, and Event time of the most recent occurance of an L3_PDU discarded because of an invalid Header Extension Length Field value.')
wfSmdsSwSubInvalidHEVerOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 35), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubInvalidHEVerOccur.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubInvalidHEVerOccur.setDescription('A string containing the SMDS Source Address, Destination Address, and Event time of the most recent occurance of an L3_PDU discarded because of an invalid Header Extension Version element.')
wfSmdsSwSubInvalidHECarOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 36), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubInvalidHECarOccur.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubInvalidHECarOccur.setDescription('A string containing the SMDS Source Address, Destination Address, and Event time of the most recent occurance of an L3_PDU discarded because of an invalid Header Extension Carrier element.')
wfSmdsSwSubInvalidHEPadOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 37), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubInvalidHEPadOccur.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubInvalidHEPadOccur.setDescription('A string containing the SMDS Source Address, Destination Address, and Event time of the most recent occurance of an L3_PDU discarded because of an invalid Header Extension Pad element.')
wfSmdsSwSubBEtagOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 38), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubBEtagOccur.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubBEtagOccur.setDescription('A string containing the SMDS Source Address, Destination Address, and Event time of the most recent occurance of an L3_PDU discarded because of a Beginning-End Tag mismatch.')
wfSmdsSwSubBAsizeNELenOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 39), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubBAsizeNELenOccur.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubBAsizeNELenOccur.setDescription('A string containing the SMDS Source Address, Destination Address, and Event time of the most recent occurance of an L3_PDU discarded because the BAsize and Length fields are not equal.')
wfSmdsSwSubIncorrectLenOccur = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 40), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubIncorrectLenOccur.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubIncorrectLenOccur.setDescription('A string containing the SMDS Source Address, Destination Address, and Event time of the most recent occurance of an L3_PDU discarded because of an incorrect length.')
wfSmdsSwSubExceededMIROccur = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 41), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubExceededMIROccur.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubExceededMIROccur.setDescription('A string containing the SMDS Source Address, Destination Address, and Event time of the most recent occurance of an L3_PDU discarded because it exceeded the MIR.')
wfSmdsSwSubInBandMgmtDisable = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSubInBandMgmtDisable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubInBandMgmtDisable.setDescription('In-Band Management enable/disable parameter. This attribute indicates whether the local WSNI (only) is enabled to run IP in Host mode, for in-band management purposes, in additional to being a switch interface. The default is disabled')
wfSmdsSwSubInBandMgmtLocalAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 43), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSubInBandMgmtLocalAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubInBandMgmtLocalAddr.setDescription('Special SMDS E.164 Individual address that identifies this local circuit. This attribute is only used when the wfSmdsSwSubInBandMgmtDisable attribute is set to ENABLED')
wfSmdsSwSubInBandMgmtReceivedPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubInBandMgmtReceivedPDUs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubInBandMgmtReceivedPDUs.setDescription('The total number of individually addressed In-Band Management PDUs received by the SMDS Switch from the CPE. The total includes only unerrored PDUs.')
wfSmdsSwSubInBandMgmtSentPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubInBandMgmtSentPDUs.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubInBandMgmtSentPDUs.setDescription('The number of individually addressed In-Band Management PDUs that have been sent by this SMDS Switch to the CPE.')
wfSmdsSwSubInBandMgmtMaxLenErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubInBandMgmtMaxLenErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubInBandMgmtMaxLenErrors.setDescription('The number of In-Band Management PDUs that have exceeded the MTU size configured for the line')
wfSmdsSwSubInBandMgmtEncapsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubInBandMgmtEncapsErrors.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubInBandMgmtEncapsErrors.setDescription('The number of In-Band Management PDUs that have invalid encapsulation schemes')
wfSmdsSwSubGAPartialResolve = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubGAPartialResolve.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubGAPartialResolve.setDescription("The number of times group addressed L3_PDU's could not be resolved due to congestion.")
wfSmdsSwSubDANotOnSni = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSubDANotOnSni.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSubDANotOnSni.setDescription('The number of times a L3_PDU was discarded at the egress because the destination address was not assigned to the SNI.')
wfSmdsSwEndpTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 2), )
if mibBuilder.loadTexts: wfSmdsSwEndpTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwEndpTable.setDescription('The Parameters for the Endpoint table. An Endpoint is defined as an IP address, SMDS E.164 address pair. Endpoint ranges should never overlap.')
wfSmdsSwEndpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 2, 1), ).setIndexNames((0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwEndpE164AddrHigh"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwEndpE164AddrDelta"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwEndpInterfaceIndex"))
if mibBuilder.loadTexts: wfSmdsSwEndpEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwEndpEntry.setDescription('The parameters for a particular Endpoint.')
wfSmdsSwEndpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwEndpDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwEndpDelete.setDescription('Indication to delete this endpoint entry.')
wfSmdsSwEndpE164AddrHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwEndpE164AddrHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwEndpE164AddrHigh.setDescription('The High end of the E.164 address range for this endpoint information.')
wfSmdsSwEndpE164AddrDelta = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 2, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwEndpE164AddrDelta.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwEndpE164AddrDelta.setDescription('The difference between wfSmdsSwEndpE164AddrHigh to the beginning of the endpoint information.')
wfSmdsSwEndpInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwEndpInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwEndpInterfaceIndex.setDescription('This number indicates which SNI the endpoint information refers to.')
wfSmdsSwInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 3), )
if mibBuilder.loadTexts: wfSmdsSwInterfaceTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwInterfaceTable.setDescription('This is the Interface Table. This table also holds the Maximum Information Rate (MIR) information.')
wfSmdsSwInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 3, 1), ).setIndexNames((0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwInterfaceType"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwInterfaceIndex"))
if mibBuilder.loadTexts: wfSmdsSwInterfaceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwInterfaceEntry.setDescription('This table defines the IP addresses and what interfaces they are associated with.')
wfSmdsSwInterfaceDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwInterfaceDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwInterfaceDelete.setDescription('Indication to delete this interface entry.')
wfSmdsSwInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sni", 1), ("ssi", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwInterfaceType.setDescription('This number determines whether the interface information refers to an SNI, SSI, or ICI.')
wfSmdsSwInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwInterfaceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwInterfaceIndex.setDescription('This number indicates which SNI, SSI, or ICI the interface information refers to.')
wfSmdsSwInterfaceIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwInterfaceIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwInterfaceIpAddr.setDescription('IP Address associated with the interface.')
wfSmdsSwInterfaceMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwInterfaceMIR.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwInterfaceMIR.setDescription('This number represents the MIR in octets per second.')
wfSmdsSwInterfaceCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwInterfaceCurrentRate.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwInterfaceCurrentRate.setDescription('This number indicates the current rate of traffic flow to the interface. The software updates this counter. When this attribute exceeds wfSmdsSwInterfaceMIR traffic to the interface is dropped. Periodically the sofware resets this counter to zero.')
wfSmdsSwAssocScrnTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 4), )
if mibBuilder.loadTexts: wfSmdsSwAssocScrnTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwAssocScrnTable.setDescription('This list identifies the associated SNI addresses per individualand group address screen. Different addresses on an SNI may be associated with different individual and group address screens (one individual address screen per associated address on an SNI, and one group address screen per associated address on an SNI ).')
wfSmdsSwAssocScrnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 4, 1), ).setIndexNames((0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwAssocScrnSniIndex"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwAssocScrnAddrInd"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwAssocScrnIndivIndex"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwAssocScrnGrpIndex"))
if mibBuilder.loadTexts: wfSmdsSwAssocScrnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwAssocScrnEntry.setDescription('An SNI index, group and individual screening list index, and the associated addresses for the SNI for the address screens.')
wfSmdsSwAssocScrnDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwAssocScrnDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwAssocScrnDelete.setDescription('Indication to delete this associated screen entry.')
wfSmdsSwAssocScrnSniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 4, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwAssocScrnSniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwAssocScrnSniIndex.setDescription('The value of this object identifies the SIP Port interface for which this entry contains management information. The value of this object for a particular interface has the same value as the ifIndex, defined in RFC1213, for the same interface.')
wfSmdsSwAssocScrnAddrInd = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwAssocScrnAddrInd.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwAssocScrnAddrInd.setDescription('The value of this object identifies one of the SMDS addresses for the SNI, identified by the wfSmdsSwAssocScrnSniIndex that belongs to this individual (or group) address screen (wfSmdsSwAssocScrnAddrInd). This list will contain both individual and group addresses, because this list is used for both Destination Address Screening and Source Address Screening; the destination address in the L3_PDU that is undergoing Source Address Screening may be either a group or individual address that is assigned to that SNI. One screen will have a maximum of 64 associated addresses; up to a maximum of 16 individual addresses identifying an SNI and up to a maximum of 48 group addresses identifying an SNI.')
wfSmdsSwAssocScrnIndivIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwAssocScrnIndivIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwAssocScrnIndivIndex.setDescription('The value of this object identifies the individual address screening list. There is at least one individual address screen and at most s individual address screens per SNI. The initial value of s is defined to be 4. In the future more screening lists per SNI may be allowed. The values of this object correspond to the values of wfSmdsSwIAScrnIndex in the wfSmdsSwIAScrnTable.')
wfSmdsSwAssocScrnGrpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwAssocScrnGrpIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwAssocScrnGrpIndex.setDescription('The value of this object identifies the group address screening list. There is at least one group address screen and at most s group address screens per SNI. The initial value of s is defined to be 4. In the future more screening lists per SNI may be allowed. The values of this object correspond to the values of wfSmdsSwGAScrnIndex in the wfSmdsSwGAScrnTable. This field applies only to individual addresses on the SNI because it applies only to destination address screening of group addresses.')
wfSmdsSwIAScrnTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 5), )
if mibBuilder.loadTexts: wfSmdsSwIAScrnTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwIAScrnTable.setDescription('This list identifies the individual addresses that will be screened per individual address screen table. The are up to s (s is equal to 4) individual address screens per SNI and at least one individual address screen per SNI. The Individual Address Screens and the Group Address Screens together consist of up to n addresses. The initial value of n is defined as 128. In the future a value of n up to 2048 may be supported. The Individual Address Screen is used to perform Destination Address Screening for individually addressed data units and Source Address Screening for all data units. The Group Address Screen is used to perform Destination Address Screening for group addressed data units.')
wfSmdsSwIAScrnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 5, 1), ).setIndexNames((0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwIAScrnSniIndex"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwIAScrnIndex"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwIAScrnAddr"))
if mibBuilder.loadTexts: wfSmdsSwIAScrnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwIAScrnEntry.setDescription('An SNI index, a screening list index, the individual addresses to be screened for the individual address screen, and whether the screened address is valid or invalid.')
wfSmdsSwIAScrnDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwIAScrnDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwIAScrnDelete.setDescription('Indication to delete this IA screen entry.')
wfSmdsSwIAScrnSniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwIAScrnSniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwIAScrnSniIndex.setDescription('The value of this object identifies the SIP Port interface for which this entry contains management information. The value of this object for a particular interface has the same value as the ifIndex, defined in RFC1213, for the same interface.')
wfSmdsSwIAScrnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwIAScrnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwIAScrnIndex.setDescription('The value of this object identifies the individual address screening list. There are at least one individual address screen and at most s individual address screens per SNI. The initial value of s is defined to be 4. In the future more screening lists per SNI may be allowed. The values of this object correspond to the values of wfSmdsSwScrnIndex in the wfSmdsSwScrnTable.')
wfSmdsSwIAScrnAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwIAScrnAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwIAScrnAddr.setDescription('The value of this object identifies one of the individual addresses to be screened for source and destination address screening for the SNI identified by the wfSmdsSwIAScrnSniIndex and for the particular individual address screen (wfSmdsSwIAScrnIndex).')
wfSmdsSwGAScrnTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 6), )
if mibBuilder.loadTexts: wfSmdsSwGAScrnTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwGAScrnTable.setDescription('This list identifies the group addresses that will be screened per group address screen table. The are up to s (s is equal to 4) group address screens per SNI and at least one group address screen per SNI. The Individual Address Screen and the Group Address Screen together consist of up to n addresses. The initial value of n is defined as 128. In the future a value of n up to 2048 may be supported. The Individual Address Screen is used to perform Destination Address Screening for individually addressed data units and Source Address Screening for all data units. The Group Address Screen is used to perform Destination Address Screening for group addressed data units.')
wfSmdsSwGAScrnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 6, 1), ).setIndexNames((0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwGAScrnSniIndex"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwGAScrnIndex"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwGAScrnAddr"))
if mibBuilder.loadTexts: wfSmdsSwGAScrnEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwGAScrnEntry.setDescription('An SNI index, a screening list index, the group addresses to be screened for the group address screen, and whether the screened address is valid or invalid.')
wfSmdsSwGAScrnDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwGAScrnDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwGAScrnDelete.setDescription('Indication to delete this GA screen entry.')
wfSmdsSwGAScrnSniIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwGAScrnSniIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwGAScrnSniIndex.setDescription('The value of this object identifies the SIP Port interface for which this entry contains management information. The value of this object for a particular interface has the same value as the ifIndex, defined in RFC1213, for the same interface.')
wfSmdsSwGAScrnIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwGAScrnIndex.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwGAScrnIndex.setDescription('The value of this object identifies the group address screening list. There is at least one group address screen and at most s group address screens per SNI. The initial value of s is defined to be 4. In the future more screening lists per SNI may be allowed. The values of this object correspond to the values of wfSmdsSwScrnIndex in the wfSmdsSwSmdsScrnTable.')
wfSmdsSwGAScrnAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwGAScrnAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwGAScrnAddr.setDescription('The value of this object identifies one of the group addresses to be screened for destination address screening for the SNI identified by the wfSmdsSwGAScrnSniIndex and for the particular group address screen (wfSmdsSwGAScrnIndex).')
wfSmdsSwGATable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 7), )
if mibBuilder.loadTexts: wfSmdsSwGATable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwGATable.setDescription('A table of all group addresses in the network and the associated individual addresses identified by each group address. A group address identifies up to m individual addresses. An SMDS SS supports up to n group addresses. A group address can be identified by up to p individual addresses. A particular SNI is identified by up to 48 group addresses. The initial values of m, n, and p are defined as 128, 1024, and 32, respectively. In the future values of m and n of 2048 and 8192, respectively, may be supported.')
wfSmdsSwGAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 7, 1), ).setIndexNames((0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwGASSI"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwGAGroupAddress"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwGAGroupMember"))
if mibBuilder.loadTexts: wfSmdsSwGAEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwGAEntry.setDescription('A Group Address and an address in that group and whether that association is valid or invalid.')
wfSmdsSwGADelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwGADelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwGADelete.setDescription('Indication to delete this group address entry.')
wfSmdsSwGASSI = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 7, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwGASSI.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwGASSI.setDescription('The SSI associated with this Group Address. An SSI of 0 is used to indicate that all interfaces can use the group address. An SSI other than 0 indicates that only the SSI, or an SNI associated with the SSI should use the group.')
wfSmdsSwGAGroupAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwGAGroupAddress.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwGAGroupAddress.setDescription('A Group Address.')
wfSmdsSwGAGroupMember = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 7, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwGAGroupMember.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwGAGroupMember.setDescription('An individual SMDS address that belongs to this Group Address.')
wfSmdsSwCurUsageTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 8), )
if mibBuilder.loadTexts: wfSmdsSwCurUsageTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwCurUsageTable.setDescription('This table contains the Current Usage Data. This is the interface between Billing and Switching. The Switch gates create these records. The Billing gates collect them to create billing data.')
wfSmdsSwCurUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 8, 1), ).setIndexNames((0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwCurUsageSni"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwCurUsageDestAddr"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwCurUsageSrcAddr"))
if mibBuilder.loadTexts: wfSmdsSwCurUsageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwCurUsageEntry.setDescription('The usage data for the current usage period indexed by destination,source address.')
wfSmdsSwCurUsageDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwCurUsageDelete.setStatus('obsolete')
if mibBuilder.loadTexts: wfSmdsSwCurUsageDelete.setDescription('Indication to delete this current usage entry.')
wfSmdsSwCurUsageSni = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwCurUsageSni.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwCurUsageSni.setDescription('The SNI number of the interface generating the usage information')
wfSmdsSwCurUsageDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwCurUsageDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwCurUsageDestAddr.setDescription('The destination address of a SMDS group or individual E.164 address.')
wfSmdsSwCurUsageSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 8, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwCurUsageSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwCurUsageSrcAddr.setDescription('The source address of a SMDS individual E.164 address.')
wfSmdsSwCurUsageGrpIndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 8, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwCurUsageGrpIndAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwCurUsageGrpIndAddr.setDescription('When the destination address of an L3_PDU is a group address, this attribute is set to one of the E.164 individual addresses that is in the group address and on the destination SNI.')
wfSmdsSwCurUsageNumL3Pdu = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 8, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwCurUsageNumL3Pdu.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwCurUsageNumL3Pdu.setDescription('This number represents the number of billable L3_PDUs counted by the circuit during the most recent collection interval.')
wfSmdsSwCurUsageNumOctet = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 8, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwCurUsageNumOctet.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwCurUsageNumOctet.setDescription('This number represents the number of billable octets counted by the circuit during the most recent collection interval.')
wfSmdsSwCurUsageToBeDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwCurUsageToBeDeleted.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwCurUsageToBeDeleted.setDescription('Indication to billing to delete this current usage entry.')
wfSmdsSwUsage = MibIdentifier((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9))
wfSmdsSwUsageEnable = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageEnable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageEnable.setDescription('Enable/Disable SMDS_SW billing.')
wfSmdsSwUsageVolume = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageVolume.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageVolume.setDescription("Indicates the file system volume number to which the billing usage data files will be written. The volume number corresponds to the slot number on which the volume resides. Note: Value 0 has the special meaning that no 'Store' and 'Flush' operations will take place. This translates to no Billing data will be written to the local file system. 'Update' operations will still be performed on each local slot. Full Billing statistics will still be available in the wfSmdsSwUsageTable MIB.")
wfSmdsSwUsageVolumeBackup = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageVolumeBackup.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageVolumeBackup.setDescription('Indicates the backup volume if wfSmdsSwUsageVolume becomes inoperative. Note: This feature is not implemented in this release.')
wfSmdsSwUsageDirectory = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageDirectory.setDescription('The name of the directory where the billing usage data files are stored. ')
wfSmdsSwUsageFilePrefix = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageFilePrefix.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageFilePrefix.setDescription('The base name of billing usage data files.')
wfSmdsSwUsageTimerInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageTimerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageTimerInterval.setDescription('This number determines the timer interval (number of seconds) unit for the Billing process to perform its various timer driven tasks. i.e. updating billing usage data, writing billing usage data to file system and file system management activities.')
wfSmdsSwUsageUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageUpdateInterval.setDescription('This number specifies the interval (number of minutes) for the Billing process to collect and update billing usage data in the wfSmdsSwUsage MIB. Note: When converted to seconds, this must be a multiple of wfSmdsSwUsageTimerInterval. ')
wfSmdsSwUsageStoreInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageStoreInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageStoreInterval.setDescription('This number specifies the interval (number of minutes) for the Billing process to write billing usage data on to the file system from the wfSmdsSwUsage MIB. Note: When converted to seconds, this must be a multiple of wfSmdsSwUsageTimerInterval. ')
wfSmdsSwUsageFlushInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageFlushInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageFlushInterval.setDescription('This number specifies the interval (number of minutes) for the Billing process to write billing usage data on to the file system from the wfSmdsSwUsage MIB followed by zeroing the wfSmdsSwUsage MIB. Note: When converted to seconds, this must be a multiple of wfSmdsSwUsageTimerInterval. ')
wfSmdsSwUsageCleanupInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageCleanupInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageCleanupInterval.setDescription('This is the interval (number of minutes) for the Billing process to check and delete old billing usage data files. Note: When converted to seconds, this must be a multilple of wfSmdsSwUsageTimerInterval. ')
wfSmdsSwUsageLocalTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageLocalTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageLocalTimeZone.setDescription('Indicates local time zone of the switch')
wfSmdsSwUsageUpdateTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageUpdateTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageUpdateTimeStamp.setDescription('Time stamp of last wfSmdsSwUsageUpdateInterval timer expiration or the starting time of the current wfSmdsSwUsageUpdateInterval. This value is number of seconds since midnight Jan 1, 1976 (GMT). ')
wfSmdsSwUsageStoreTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageStoreTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageStoreTimeStamp.setDescription('Time stamp of last wfSmdsSwUsageStoreInterval timer expiration or the starting time of the current wfSmdsSwUsageStoreInterval. This value is number of seconds since midnight Jan. 1, 1976 (GMT). ')
wfSmdsSwUsageFlushTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 14), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageFlushTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageFlushTimeStamp.setDescription('Time stamp of last wfSmdsSwUsageFlushInterval timer expiration or the starting time of the current wfSmdsSwUsageFlushInterval. This value is number of seconds since midnight Jan. 1, 1976 (GMT). ')
wfSmdsSwUsageCleanupTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 15), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageCleanupTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageCleanupTimeStamp.setDescription('Time stamp of last wfSmdsSwUsageCleanupInterval timer expiration or the starting time of the current wfSmdsSwUsageCleanupInterval. This value is number of seconds since midnight Jan. 1, 1976 (GMT). ')
wfSmdsSwUsageUpdateData = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageUpdateData.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageUpdateData.setDescription('Setting this attribute to a non-zero value will cause an immediate updating of the billing usage data. Once activated, this attribute should be reset to zero to allow subsequent activations. ')
wfSmdsSwUsageStoreData = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageStoreData.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageStoreData.setDescription('Setting this attribute to a non-zero value will cause an immediate updating and writing of the billing usage data. Once activated, this attribute should be reset to zero to allow subsequent activations. ')
wfSmdsSwUsageFlushData = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageFlushData.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageFlushData.setDescription('Setting this attribute to a non-zero value will cause an immediate updating and writing of the billing usage data and followed by zeroing the wfSmdsSwBillingUsage MIB. Once activated, this attribute should be reset to zero to allow subsequent activations. ')
wfSmdsSwUsageFileCleanup = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageFileCleanup.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageFileCleanup.setDescription('Setting this attribute to a non-zero value will cause an immediate checking and deleting old billing usage data files. Once activated, this attribute should be reset to zero to allow subsequent activations. ')
wfSmdsSwUsageState = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("init", 3), ("notpresent", 4))).clone('notpresent')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageState.setDescription('current state of SMDS_SW billing.')
wfSmdsSwUsageCurVolume = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageCurVolume.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageCurVolume.setDescription('current file system volume number used. This number is the same as wfSmdsSwUsageVolume except when the user sets wfSmdsSwUsageVolume to an invalid number.')
wfSmdsSwUsageCurVolumeBackup = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageCurVolumeBackup.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageCurVolumeBackup.setDescription('curent backup file system volume number used. This number is the same as wfSmdsSwUsageVolumeBackUp except when the user sets wfSmdsSwUsageVolume to an invalid number. Note: This feature is not implemented in this release.')
wfSmdsSwUsageCurDirectory = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageCurDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageCurDirectory.setDescription('current directory name used. This number is the same as wfSmdsSwUsageDirectory except when the user sets wfSmdsSwUsageDirectory to an invalid name.')
wfSmdsSwUsageCurFilePrefix = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageCurFilePrefix.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageCurFilePrefix.setDescription('current base file name used. This number is the same as wfSmdsSwUsageFilePrefix except when the user sets wfSmdsSwUsageFilePrefix to an invalid name.')
wfSmdsSwUsageCurTimerInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageCurTimerInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageCurTimerInterval.setDescription('current timer interval number used. This number is the same as wfSmdsSwUsageTimerInterval except when the user sets wfSmdsSwUsageTimerInterval to an invalid value.')
wfSmdsSwUsageCurUpdateInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageCurUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageCurUpdateInterval.setDescription('current update interval number used. This number is the same as wfSmdsSwUsageUpdateInterval except when the user sets wfSmdsSwUsageUpdateInterval to an invalid value.')
wfSmdsSwUsageCurStoreInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(10)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageCurStoreInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageCurStoreInterval.setDescription('current store timer interval number used. This number is the same as wfSmdsSwUsageStoreInterval except when the user sets wfSmdsSwUsageStoreInterval to an invalid value.')
wfSmdsSwUsageCurFlushInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageCurFlushInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageCurFlushInterval.setDescription('current flush timer interval number used. This number is the same as wfSmdsSwUsageFlushInterval except when the user sets wfSmdsSwUsageFlushInterval to an invalid value.')
wfSmdsSwUsageCurCleanupInterval = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)).clone(60)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageCurCleanupInterval.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageCurCleanupInterval.setDescription('current file cleanup timer interval number used. This number is the same as wfSmdsSwUsageCleanupInterval except when the user sets wfSmdsSwUsageCleanupInterval to an invalid value.')
wfSmdsSwUsageDebug = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwUsageDebug.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageDebug.setDescription('Enable/Disable printing of debug edl (trap) messages. NOTE: Do not enable this attribute in operational enviornment as it will likely flood the logging facility. This attribute is reserved for specialized debugging in a controlled lab enviornment.')
wfSmdsSwUsageCurDebug = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageCurDebug.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageCurDebug.setDescription('current debug value used. This value is the same as wfSmdsSwUsageDebug except when the user sets wfSmdsSwUsageDeubg to an invalid value.')
wfSmdsSwUsageSwitchId = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageSwitchId.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageSwitchId.setDescription('switch id used in the billing usage data file.')
wfSmdsSwUsageNumEntries = MibScalar((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 9, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageNumEntries.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageNumEntries.setDescription('number of entries in wfSmdsSwUsageTable')
wfSmdsSwUsageTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10), )
if mibBuilder.loadTexts: wfSmdsSwUsageTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageTable.setDescription('The Billing Usage Table.')
wfSmdsSwUsageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1), ).setIndexNames((0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwUsageSni"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwUsageDestAddr"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwUsageSrcAddr"))
if mibBuilder.loadTexts: wfSmdsSwUsageEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageEntry.setDescription('The parameters for Billing Usage.')
wfSmdsSwUsageDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageDelete.setDescription('Indicates status of this entry. SMDS_SW_USAGE_CREATED is the normal case. SMDS_SW_USAGE_DELETED means this billing instance will be deleted at the end of the next wfSmdsSwUsageFlush period after this billing record is written out to the file system.')
wfSmdsSwUsageSni = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageSni.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageSni.setDescription('The circuit number of the interface generating the usage information')
wfSmdsSwUsageDestAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageDestAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageDestAddr.setDescription('Instance identifier; the destination address of an L3_PDU. The SMDS Switch collects usage data based on the destination/source address pair.')
wfSmdsSwUsageSrcAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageSrcAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageSrcAddr.setDescription('Instance identifier; the source address of an L3_PDU. The SMDS Switch collects usage data based on the destination/source address pair.')
wfSmdsSwUsageStartTimeStampHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageStartTimeStampHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageStartTimeStampHigh.setDescription('Time stamp of the starting time (the high 32 bits) of last billing usage interval. This value is the number of 1/100th seconds since midnight Jan 1, 1976 (GMT).')
wfSmdsSwUsageStartTimeStampLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageStartTimeStampLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageStartTimeStampLow.setDescription('Time stamp of the starting time (the low 32 bits) of last billing usage interval. This value is the number of 1/100th seconds since midnight Jan 1, 1976 (GMT).')
wfSmdsSwUsageEndTimeStampHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageEndTimeStampHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageEndTimeStampHigh.setDescription('Time stamp of the ending time (the high 32 bits) of last billing usage interval. This value is the number of 1/100th seconds since midnight Jan 1, 1976 (GMT).')
wfSmdsSwUsageEndTimeStampLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageEndTimeStampLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageEndTimeStampLow.setDescription('Time stamp of the ending time (the low 32 bits) of last billing usage interval. This value is the number of 1/100th seconds since midnight Jan 1, 1976 (GMT).')
wfSmdsSwUsageSentL3PduHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageSentL3PduHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageSentL3PduHigh.setDescription('Number (the high 32 bits) of L3_PDUs sent to the CPE between wfSmdsSwUsageStartTimeStamp and wfSmdsSwUsageEndTimeStamp.')
wfSmdsSwUsageSentL3PduLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageSentL3PduLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageSentL3PduLow.setDescription('Number (the low 32 bits) of L3_PDUs sent to the CPE between wfSmdsSwUsageStartTimeStamp and wfSmdsSwUsageEndTimeStamp.')
wfSmdsSwUsageSentOctetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageSentOctetHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageSentOctetHigh.setDescription('Number (the high 32 bits) of octets sent to the CPE between wfSmdsSwUsageStartTimeStamp and wfSmdsSwUsageEndTimeStamp.')
wfSmdsSwUsageSentOctetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageSentOctetLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageSentOctetLow.setDescription('Number (the low 32 bits) of octets sent to the CPE between wfSmdsSwUsageStartTimeStamp and wfSmdsSwUsageEndTimeStamp.')
wfSmdsSwUsageLastL3PduHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageLastL3PduHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageLastL3PduHigh.setDescription('The (high 32 bits) value of wfSmdsSwCurUsageNumL3Pdu value at wfSmdsSwUsageEndTimeStamp. Note: Since wfSmdsSwCurUsageNumL3Pdu is a 32-bit COUNTER, this is really a counter keeping track of number of times wfSmdsSwCurUsageNumL3Pdu has wrapped around.')
wfSmdsSwUsageLastL3PduLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageLastL3PduLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageLastL3PduLow.setDescription('The (low 32 bits) value of wfSmdsSwCurUsageNumL3Pdu value at wfSmdsSwUsageEndTimeStamp.')
wfSmdsSwUsageLastOctetHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageLastOctetHigh.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageLastOctetHigh.setDescription('The (high 32 bits) value of wfSmdsSwCurUsageNumOctets value at wfSmdsSwUsageEndTimeStamp. Note: Since wfSmdsSwCurUsageNumOctets is a 32-bit COUNTER, this is really a counter keeping track of number of times wfSmdsSwCurUsageNumOctets has wrapped around.')
wfSmdsSwUsageLastOctetLow = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageLastOctetLow.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageLastOctetLow.setDescription('The (low 32 bits) value of wfSmdsSwCurUsageNumOctets value at wfSmdsSwUsageEndTimeStamp.')
wfSmdsSwUsageGrpIndAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 10, 1, 17), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwUsageGrpIndAddr.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwUsageGrpIndAddr.setDescription('When the destination address of an L3_PDU is a group address, this attribute is set to one of the E.164 individual addresses that is in the group address and on the destination SNI.')
wfSmdsSwSsiSniTable = MibTable((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 11), )
if mibBuilder.loadTexts: wfSmdsSwSsiSniTable.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSsiSniTable.setDescription("The Parameters for the SSI/SNI Object. This object associates SNI's with SSI's for Bellcore TR-TSV-001239 compliance.")
wfSmdsSwSsiSniEntry = MibTableRow((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 11, 1), ).setIndexNames((0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwSsiSniSSI"), (0, "Wellfleet-SWSMDS-MIB", "wfSmdsSwSsiSniSNI"))
if mibBuilder.loadTexts: wfSmdsSwSsiSniEntry.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSsiSniEntry.setDescription('The parameters for a particular SSI/SNI.')
wfSmdsSwSsiSniDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 11, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("created", 1), ("deleted", 2))).clone('created')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wfSmdsSwSsiSniDelete.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSsiSniDelete.setDescription('Indication to delete this SSI/SNI entry.')
wfSmdsSwSsiSniSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSsiSniSSI.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSsiSniSSI.setDescription('An SSI.')
wfSmdsSwSsiSniSNI = MibTableColumn((1, 3, 6, 1, 4, 1, 18, 3, 5, 9, 7, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wfSmdsSwSsiSniSNI.setStatus('mandatory')
if mibBuilder.loadTexts: wfSmdsSwSsiSniSNI.setDescription('An SNI.')
mibBuilder.exportSymbols("Wellfleet-SWSMDS-MIB", wfSmdsSwCurUsageToBeDeleted=wfSmdsSwCurUsageToBeDeleted, wfSmdsSwUsageUpdateTimeStamp=wfSmdsSwUsageUpdateTimeStamp, wfSmdsSwUsageEndTimeStampLow=wfSmdsSwUsageEndTimeStampLow, wfSmdsSwSubSipL3InvAddrTypes=wfSmdsSwSubSipL3InvAddrTypes, wfSmdsSwUsageSwitchId=wfSmdsSwUsageSwitchId, wfSmdsSwSubUnassignedSAOccur=wfSmdsSwSubUnassignedSAOccur, wfSmdsSwCurUsageDelete=wfSmdsSwCurUsageDelete, wfSmdsSwSubUnassignedSAs=wfSmdsSwSubUnassignedSAs, wfSmdsSwAssocScrnSniIndex=wfSmdsSwAssocScrnSniIndex, wfSmdsSwAssocScrnDelete=wfSmdsSwAssocScrnDelete, wfSmdsSwGASSI=wfSmdsSwGASSI, wfSmdsSwInterfaceType=wfSmdsSwInterfaceType, wfSmdsSwUsageSni=wfSmdsSwUsageSni, wfSmdsSwAssocScrnTable=wfSmdsSwAssocScrnTable, wfSmdsSwSubSipL3VersionSupport=wfSmdsSwSubSipL3VersionSupport, wfSmdsSwIAScrnTable=wfSmdsSwIAScrnTable, wfSmdsSwSubBAsizeNELenOccur=wfSmdsSwSubBAsizeNELenOccur, wfSmdsSwSubCct=wfSmdsSwSubCct, wfSmdsSwSubGAPartialResolve=wfSmdsSwSubGAPartialResolve, wfSmdsSwUsageStoreInterval=wfSmdsSwUsageStoreInterval, wfSmdsSwUsageVolumeBackup=wfSmdsSwUsageVolumeBackup, wfSmdsSwUsageStartTimeStampHigh=wfSmdsSwUsageStartTimeStampHigh, wfSmdsSwIAScrnAddr=wfSmdsSwIAScrnAddr, wfSmdsSwSubSipL3UnrecIAs=wfSmdsSwSubSipL3UnrecIAs, wfSmdsSwUsageStartTimeStampLow=wfSmdsSwUsageStartTimeStampLow, wfSmdsSwUsageLastL3PduLow=wfSmdsSwUsageLastL3PduLow, wfSmdsSwUsageStoreTimeStamp=wfSmdsSwUsageStoreTimeStamp, wfSmdsSwGAScrnDelete=wfSmdsSwGAScrnDelete, wfSmdsSwSubDisableUsageGeneration=wfSmdsSwSubDisableUsageGeneration, wfSmdsSwSubInBandMgmtLocalAddr=wfSmdsSwSubInBandMgmtLocalAddr, wfSmdsSwAssocScrnIndivIndex=wfSmdsSwAssocScrnIndivIndex, wfSmdsSwUsageSentOctetHigh=wfSmdsSwUsageSentOctetHigh, wfSmdsSwSubHrtbtPollAddr=wfSmdsSwSubHrtbtPollAddr, wfSmdsSwSubSipL3Errors=wfSmdsSwSubSipL3Errors, wfSmdsSwSubInBandMgmtEncapsErrors=wfSmdsSwSubInBandMgmtEncapsErrors, wfSmdsSwSubInvalidHELenOccur=wfSmdsSwSubInvalidHELenOccur, wfSmdsSwSubState=wfSmdsSwSubState, wfSmdsSwSubSipL3SentIAs=wfSmdsSwSubSipL3SentIAs, wfSmdsSwUsageUpdateInterval=wfSmdsSwUsageUpdateInterval, wfSmdsSwUsageSrcAddr=wfSmdsSwUsageSrcAddr, wfSmdsSwSubInterfaceIndex=wfSmdsSwSubInterfaceIndex, wfSmdsSwIAScrnIndex=wfSmdsSwIAScrnIndex, wfSmdsSwSubDAScrnViolationOccur=wfSmdsSwSubDAScrnViolationOccur, wfSmdsSwSubInterfaceType=wfSmdsSwSubInterfaceType, wfSmdsSwSsiSniSSI=wfSmdsSwSsiSniSSI, wfSmdsSwUsageCurUpdateInterval=wfSmdsSwUsageCurUpdateInterval, wfSmdsSwUsageFlushTimeStamp=wfSmdsSwUsageFlushTimeStamp, wfSmdsSwSubExceededMIROccur=wfSmdsSwSubExceededMIROccur, wfSmdsSwUsageLastOctetHigh=wfSmdsSwUsageLastOctetHigh, wfSmdsSwSubDANotOnSni=wfSmdsSwSubDANotOnSni, wfSmdsSwGAScrnEntry=wfSmdsSwGAScrnEntry, wfSmdsSwCurUsageEntry=wfSmdsSwCurUsageEntry, wfSmdsSwUsageLocalTimeZone=wfSmdsSwUsageLocalTimeZone, wfSmdsSwInterfaceMIR=wfSmdsSwInterfaceMIR, wfSmdsSwUsageLastOctetLow=wfSmdsSwUsageLastOctetLow, wfSmdsSwInterfaceIndex=wfSmdsSwInterfaceIndex, wfSmdsSwUsageTimerInterval=wfSmdsSwUsageTimerInterval, wfSmdsSwGAScrnAddr=wfSmdsSwGAScrnAddr, wfSmdsSwEndpInterfaceIndex=wfSmdsSwEndpInterfaceIndex, wfSmdsSwGAEntry=wfSmdsSwGAEntry, wfSmdsSwSubIncorrectLenOccur=wfSmdsSwSubIncorrectLenOccur, wfSmdsSwUsageCleanupInterval=wfSmdsSwUsageCleanupInterval, wfSmdsSwCurUsageGrpIndAddr=wfSmdsSwCurUsageGrpIndAddr, wfSmdsSwSubSipL3SentGAs=wfSmdsSwSubSipL3SentGAs, wfSmdsSwSubDelete=wfSmdsSwSubDelete, wfSmdsSwUsageCurStoreInterval=wfSmdsSwUsageCurStoreInterval, wfSmdsSwSsiSniSNI=wfSmdsSwSsiSniSNI, wfSmdsSwCurUsageNumL3Pdu=wfSmdsSwCurUsageNumL3Pdu, wfSmdsSwEndpE164AddrDelta=wfSmdsSwEndpE164AddrDelta, wfSmdsSwGATable=wfSmdsSwGATable, wfSmdsSwUsageCurVolumeBackup=wfSmdsSwUsageCurVolumeBackup, wfSmdsSwUsageCurFlushInterval=wfSmdsSwUsageCurFlushInterval, wfSmdsSwSubEntry=wfSmdsSwSubEntry, wfSmdsSwSubInvalidHEVerOccur=wfSmdsSwSubInvalidHEVerOccur, wfSmdsSwGAScrnSniIndex=wfSmdsSwGAScrnSniIndex, wfSmdsSwSubHrtbtPollDownCount=wfSmdsSwSubHrtbtPollDownCount, wfSmdsSwUsageUpdateData=wfSmdsSwUsageUpdateData, wfSmdsSwUsageDebug=wfSmdsSwUsageDebug, wfSmdsSwIAScrnEntry=wfSmdsSwIAScrnEntry, wfSmdsSwInterfaceTable=wfSmdsSwInterfaceTable, wfSmdsSwSsiSniEntry=wfSmdsSwSsiSniEntry, wfSmdsSwGADelete=wfSmdsSwGADelete, wfSmdsSwUsageState=wfSmdsSwUsageState, wfSmdsSwUsageDirectory=wfSmdsSwUsageDirectory, wfSmdsSwAssocScrnGrpIndex=wfSmdsSwAssocScrnGrpIndex, wfSmdsSwUsageEndTimeStampHigh=wfSmdsSwUsageEndTimeStampHigh, wfSmdsSwSubInBandMgmtSentPDUs=wfSmdsSwSubInBandMgmtSentPDUs, wfSmdsSwEndpDelete=wfSmdsSwEndpDelete, wfSmdsSwUsageSentL3PduHigh=wfSmdsSwUsageSentL3PduHigh, wfSmdsSwUsageSentOctetLow=wfSmdsSwUsageSentOctetLow, wfSmdsSwUsageEntry=wfSmdsSwUsageEntry, wfSmdsSwSubSAErrorOccur=wfSmdsSwSubSAErrorOccur, wfSmdsSwInterfaceIpAddr=wfSmdsSwInterfaceIpAddr, wfSmdsSwIAScrnSniIndex=wfSmdsSwIAScrnSniIndex, wfSmdsSwUsageFilePrefix=wfSmdsSwUsageFilePrefix, wfSmdsSwUsageFlushData=wfSmdsSwUsageFlushData, wfSmdsSwUsageCurFilePrefix=wfSmdsSwUsageCurFilePrefix, wfSmdsSwUsageCurDirectory=wfSmdsSwUsageCurDirectory, wfSmdsSwGAGroupAddress=wfSmdsSwGAGroupAddress, wfSmdsSwAssocScrnEntry=wfSmdsSwAssocScrnEntry, wfSmdsSwSubDAErrorOccur=wfSmdsSwSubDAErrorOccur, wfSmdsSwSubInvalidHECarOccur=wfSmdsSwSubInvalidHECarOccur, wfSmdsSwSubHrtbtPollInterval=wfSmdsSwSubHrtbtPollInterval, wfSmdsSwSsiSniTable=wfSmdsSwSsiSniTable, wfSmdsSwSubSipL3ReceivedGAs=wfSmdsSwSubSipL3ReceivedGAs, wfSmdsSwUsageSentL3PduLow=wfSmdsSwUsageSentL3PduLow, wfSmdsSwAssocScrnAddrInd=wfSmdsSwAssocScrnAddrInd, wfSmdsSwUsageLastL3PduHigh=wfSmdsSwUsageLastL3PduHigh, wfSmdsSwUsageEnable=wfSmdsSwUsageEnable, wfSmdsSwUsageNumEntries=wfSmdsSwUsageNumEntries, wfSmdsSwSubInBandMgmtDisable=wfSmdsSwSubInBandMgmtDisable, wfSmdsSwSubSipL3UnrecGAs=wfSmdsSwSubSipL3UnrecGAs, wfSmdsSwUsageGrpIndAddr=wfSmdsSwUsageGrpIndAddr, wfSmdsSwGAScrnTable=wfSmdsSwGAScrnTable, wfSmdsSwUsageFlushInterval=wfSmdsSwUsageFlushInterval, wfSmdsSwEndpEntry=wfSmdsSwEndpEntry, wfSmdsSwCurUsageNumOctet=wfSmdsSwCurUsageNumOctet, wfSmdsSwUsageCurVolume=wfSmdsSwUsageCurVolume, wfSmdsSwSubSAScrnViolationOccur=wfSmdsSwSubSAScrnViolationOccur, wfSmdsSwUsageTable=wfSmdsSwUsageTable, wfSmdsSwUsageCurTimerInterval=wfSmdsSwUsageCurTimerInterval, wfSmdsSwSubSAScreenViolations=wfSmdsSwSubSAScreenViolations, wfSmdsSwInterfaceDelete=wfSmdsSwInterfaceDelete, wfSmdsSwSubTable=wfSmdsSwSubTable, wfSmdsSwSubDisableNetMgmt=wfSmdsSwSubDisableNetMgmt, wfSmdsSwEndpTable=wfSmdsSwEndpTable, wfSmdsSwSubDisable=wfSmdsSwSubDisable, wfSmdsSwCurUsageSrcAddr=wfSmdsSwCurUsageSrcAddr, wfSmdsSwSubNumPDUExceededMIR=wfSmdsSwSubNumPDUExceededMIR, wfSmdsSwCurUsageTable=wfSmdsSwCurUsageTable, wfSmdsSwEndpE164AddrHigh=wfSmdsSwEndpE164AddrHigh, wfSmdsSwUsageDelete=wfSmdsSwUsageDelete, wfSmdsSwSubDisableMIR=wfSmdsSwSubDisableMIR, wfSmdsSwSubDisableHrtbtPoll=wfSmdsSwSubDisableHrtbtPoll, wfSmdsSwInterfaceCurrentRate=wfSmdsSwInterfaceCurrentRate, wfSmdsSwUsageVolume=wfSmdsSwUsageVolume, wfSmdsSwSubInBandMgmtReceivedPDUs=wfSmdsSwSubInBandMgmtReceivedPDUs, wfSmdsSwSsiSniDelete=wfSmdsSwSsiSniDelete, wfSmdsSwGAGroupMember=wfSmdsSwGAGroupMember, wfSmdsSwSubSipL3ReceivedIAs=wfSmdsSwSubSipL3ReceivedIAs, wfSmdsSwSubInvalidHEPadOccur=wfSmdsSwSubInvalidHEPadOccur, wfSmdsSwUsageFileCleanup=wfSmdsSwUsageFileCleanup, wfSmdsSwSubDisableL3PduChecks=wfSmdsSwSubDisableL3PduChecks, wfSmdsSwGAScrnIndex=wfSmdsSwGAScrnIndex, wfSmdsSwUsageCleanupTimeStamp=wfSmdsSwUsageCleanupTimeStamp, wfSmdsSwUsageCurCleanupInterval=wfSmdsSwUsageCurCleanupInterval, wfSmdsSwInterfaceEntry=wfSmdsSwInterfaceEntry, wfSmdsSwUsage=wfSmdsSwUsage, wfSmdsSwIAScrnDelete=wfSmdsSwIAScrnDelete, wfSmdsSwUsageCurDebug=wfSmdsSwUsageCurDebug, wfSmdsSwUsageStoreData=wfSmdsSwUsageStoreData, wfSmdsSwSubDAScreenViolations=wfSmdsSwSubDAScreenViolations, wfSmdsSwSubInBandMgmtMaxLenErrors=wfSmdsSwSubInBandMgmtMaxLenErrors, wfSmdsSwCurUsageSni=wfSmdsSwCurUsageSni, wfSmdsSwUsageDestAddr=wfSmdsSwUsageDestAddr, wfSmdsSwSubBEtagOccur=wfSmdsSwSubBEtagOccur, wfSmdsSwCurUsageDestAddr=wfSmdsSwCurUsageDestAddr, wfSmdsSwSubInvalidBASizeOccur=wfSmdsSwSubInvalidBASizeOccur)
