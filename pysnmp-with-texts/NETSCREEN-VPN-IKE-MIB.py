#
# PySNMP MIB module NETSCREEN-VPN-IKE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-VPN-IKE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
netscreenVpnMibModule, netscreenVpn = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenVpnMibModule", "netscreenVpn")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, TimeTicks, ObjectIdentity, Unsigned32, IpAddress, MibIdentifier, ModuleIdentity, Integer32, Counter64, Gauge32, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "TimeTicks", "ObjectIdentity", "Unsigned32", "IpAddress", "MibIdentifier", "ModuleIdentity", "Integer32", "Counter64", "Gauge32", "iso", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netscreenVpnIkeMibModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 4, 0, 3))
netscreenVpnIkeMibModule.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2003-11-13 00:00', '2001-09-28 00:00', '2001-05-14 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: netscreenVpnIkeMibModule.setRevisionsDescriptions(('Modified copyright and contact information', 'Converted to SMIv2 by Longview Software', 'Correct spelling mistake', 'No comment', 'Creation Date',))
if mibBuilder.loadTexts: netscreenVpnIkeMibModule.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: netscreenVpnIkeMibModule.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: netscreenVpnIkeMibModule.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: netscreenVpnIkeMibModule.setDescription('This module defines the object that are used to monitor VPN IKE info')
nsVpnIke = MibIdentifier((1, 3, 6, 1, 4, 1, 3224, 4, 3))
nsVpnIkeTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 4, 3, 1), )
if mibBuilder.loadTexts: nsVpnIkeTable.setStatus('current')
if mibBuilder.loadTexts: nsVpnIkeTable.setDescription('IPSec supports the automated generation and negotiation of keys and security associations using the Internet Key Exchange(IKE) protocol. This table collects the IKE configuration in NetScreen device.')
nsVpnIkeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 4, 3, 1, 1), ).setIndexNames((0, "NETSCREEN-VPN-IKE-MIB", "nsVpnIkeIndex"))
if mibBuilder.loadTexts: nsVpnIkeEntry.setStatus('current')
if mibBuilder.loadTexts: nsVpnIkeEntry.setDescription('Each entry in the nsVpnIkeTable holds a set of configuration parameters associated with an IKE.')
nsVpnIkeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnIkeIndex.setStatus('current')
if mibBuilder.loadTexts: nsVpnIkeIndex.setDescription('A unique value for ike table. Its value ranges between 0 and 65535 and may not be contiguous.')
nsVpnIkeName = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnIkeName.setStatus('current')
if mibBuilder.loadTexts: nsVpnIkeName.setDescription('Each IKE configuration can have a readable name.')
nsVpnIkeReplayProc = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnIkeReplayProc.setStatus('current')
if mibBuilder.loadTexts: nsVpnIkeReplayProc.setDescription('Enable Replay Protection')
nsVpnIkeGWTun = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 3, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnIkeGWTun.setStatus('current')
if mibBuilder.loadTexts: nsVpnIkeGWTun.setDescription('Remote Gateway Tunnel Name')
nsVpnIkePh2ProOne = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnIkePh2ProOne.setStatus('current')
if mibBuilder.loadTexts: nsVpnIkePh2ProOne.setDescription('Phase 2 Proposal one')
nsVpnIkePh2ProTwo = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnIkePh2ProTwo.setStatus('current')
if mibBuilder.loadTexts: nsVpnIkePh2ProTwo.setDescription('Phase 2 Proposal two')
nsVpnIkePh2ProThree = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnIkePh2ProThree.setStatus('current')
if mibBuilder.loadTexts: nsVpnIkePh2ProThree.setDescription('Phase 2 Proposal three')
nsVpnIkePh2ProFour = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnIkePh2ProFour.setStatus('current')
if mibBuilder.loadTexts: nsVpnIkePh2ProFour.setDescription('Phase 2 Proposal four')
nsVpnIkeMonitorEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnIkeMonitorEnable.setStatus('current')
if mibBuilder.loadTexts: nsVpnIkeMonitorEnable.setDescription("Enable to monitor VPN tunnel's link status.")
nsVpnIkeTransMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnIkeTransMode.setStatus('current')
if mibBuilder.loadTexts: nsVpnIkeTransMode.setDescription('Transport Mode Enable (For L2TP-over-IPSec only)')
nsVpnIkeVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 4, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsVpnIkeVsys.setStatus('current')
if mibBuilder.loadTexts: nsVpnIkeVsys.setDescription('vsys the configuration belongs to.')
mibBuilder.exportSymbols("NETSCREEN-VPN-IKE-MIB", nsVpnIke=nsVpnIke, nsVpnIkeVsys=nsVpnIkeVsys, nsVpnIkeGWTun=nsVpnIkeGWTun, nsVpnIkeTransMode=nsVpnIkeTransMode, nsVpnIkePh2ProFour=nsVpnIkePh2ProFour, nsVpnIkeName=nsVpnIkeName, nsVpnIkeEntry=nsVpnIkeEntry, nsVpnIkeTable=nsVpnIkeTable, nsVpnIkeReplayProc=nsVpnIkeReplayProc, nsVpnIkeIndex=nsVpnIkeIndex, nsVpnIkePh2ProTwo=nsVpnIkePh2ProTwo, nsVpnIkePh2ProOne=nsVpnIkePh2ProOne, nsVpnIkeMonitorEnable=nsVpnIkeMonitorEnable, netscreenVpnIkeMibModule=netscreenVpnIkeMibModule, PYSNMP_MODULE_ID=netscreenVpnIkeMibModule, nsVpnIkePh2ProThree=nsVpnIkePh2ProThree)
