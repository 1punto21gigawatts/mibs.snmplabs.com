#
# PySNMP MIB module FRAME-RELAY-DTE-SVC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FRAME-RELAY-DTE-SVC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:16:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
frame_relay, DLCI = mibBuilder.importSymbols("RFC1315-MIB", "frame-relay", "DLCI")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, Counter64, Unsigned32, Bits, Gauge32, IpAddress, TimeTicks, Counter32, MibIdentifier, NotificationType, ModuleIdentity, iso, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "Counter64", "Unsigned32", "Bits", "Gauge32", "IpAddress", "TimeTicks", "Counter32", "MibIdentifier", "NotificationType", "ModuleIdentity", "iso", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
RowStatus, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC-v1", "RowStatus", "TimeStamp", "DisplayString")
frameRelayDteSvc = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32, 7))
frDteSvc = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 32, 7, 1))
frSvcDlcmiTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1), )
if mibBuilder.loadTexts: frSvcDlcmiTable.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiTable.setDescription('The Parameters for the Switched Virtual Circuit Link Connection Management Interface for the frame relay service on this interface.')
frSvcDlcmiEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1), ).setIndexNames((0, "FRAME-RELAY-DTE-SVC-MIB", "frSvcDlcmiIfIndex"))
if mibBuilder.loadTexts: frSvcDlcmiEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiEntry.setDescription('The information regarding a single switched Data Link Connection Management Interface.')
frSvcDlcmiIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcDlcmiIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiIfIndex.setDescription('The ifIndex value of the corresponding ifEntry.')
frSvcDlcmiState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("q933SVC", 1), ("x36", 2), ("none", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcDlcmiState.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiState.setDescription('This variable states which Data Link Connection Management scheme is on the Frame Relay switched interface.')
frSvcDlcmiMaxNumCalls = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcDlcmiMaxNumCalls.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiMaxNumCalls.setDescription('Indicates the maximum number of calls allowed on the interface.')
frSvcDlcmiCallSetupTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 4), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcDlcmiCallSetupTimer.setReference('ITU-T Standard Q.931, Section 9.2: Timer T303.')
if mibBuilder.loadTexts: frSvcDlcmiCallSetupTimer.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiCallSetupTimer.setDescription('This timer is started when the CALL SETUP message is sent. The timer is stopped when the sender receives a CALL PROCEEDING message. If the timer, expressed in seconds, expires, it is retried once before the call is cleared. The default value is 4 seconds.')
frSvcDlcmiCallProceedingTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 5), Integer32().clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcDlcmiCallProceedingTimer.setReference('ITU-T Standard Q.931, Section 9.2: Timer T310.')
if mibBuilder.loadTexts: frSvcDlcmiCallProceedingTimer.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiCallProceedingTimer.setDescription('This timer is started when the CALL PROCEEDING message is sent. The timer is stopped when the sender receives a CALL CONNECT message. If the timer, expressed in seconds, expires, the call is cleared. The default value is 10 seconds.')
frSvcDlcmiCallDisconnectTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 6), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcDlcmiCallDisconnectTimer.setReference('ITU-T Standard Q.931, Section 9.2: Timer T305.')
if mibBuilder.loadTexts: frSvcDlcmiCallDisconnectTimer.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiCallDisconnectTimer.setDescription('This timer is started when the DISCONNECT message is sent. The timer is stopped when the sender receives a RELEASE message. The sender then responds with a RELEASE COMPLETE message. If the timer, expressed in seconds, expires, the sender starts up Timer T308, and sends a RELEASE message. The default value for this timer is 30 seconds.')
frSvcDlcmiCallReleaseTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 7), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcDlcmiCallReleaseTimer.setReference('ITU-T Standard Q.931, Section 9.2: Timer T308.')
if mibBuilder.loadTexts: frSvcDlcmiCallReleaseTimer.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiCallReleaseTimer.setDescription('This timer is started if timer T305 expires. This timer is stopped when the sender receives a RELEASE message. If the timer, expressed in seconds, expires, the timer sequence is reinitiated. If the timer expires a second time the call is cleared. The default value fo rthis timer is 4 seconds.')
frSvcDlcmiStatusEnquiryTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 8), Integer32().clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcDlcmiStatusEnquiryTimer.setReference('ITU-T Standard Q.931, Section 9.2: Timer T322.')
if mibBuilder.loadTexts: frSvcDlcmiStatusEnquiryTimer.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiStatusEnquiryTimer.setDescription('This timer is started when a STATUS ENQUIRY message is sent. If a STATUS message is received, the timer will be stopped. If the Timer expires it may be retried an implementation specific number (n) of times. Upon expiry of (n), the call is cleared. The default value is 4 retries.')
frSvcDlcmiErrorThreshold = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcDlcmiErrorThreshold.setReference('ITU-T Standard Q.931, Section 9.2.')
if mibBuilder.loadTexts: frSvcDlcmiErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiErrorThreshold.setDescription('This is the implementation specific number of times that the STATUS ENQUIRY Timer, T322, will be retried.')
frSvcDlcmiResetSentTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 10), Integer32().clone(120)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcDlcmiResetSentTimer.setReference('ITU-T Standard Q.931, Section 9.2: Timer T316.')
if mibBuilder.loadTexts: frSvcDlcmiResetSentTimer.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiResetSentTimer.setDescription('This timer is started when a RESTART message is sent. If a RESTART ACKNOWLEDGEmessage is received, the timer will be stopped. If the Timer expires expires it may be retried one or more times until a RESTART ACKNOWLEDGE message is returned. Meanwhile No calls shall be placed or accepted over the interface by the originator of the RESTART message. The network shall limit the number of consecutive unsuccessful attempts to a default of 2. The default value for the Timer is 120 seconds')
frSvcDlcmiResetAckTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcDlcmiResetAckTimer.setReference('ITU-T Standard Q.931, Section 9.2: Timer T317.')
if mibBuilder.loadTexts: frSvcDlcmiResetAckTimer.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiResetAckTimer.setDescription('This timer is started when a RESTART message is received. At this time the receiving entity shall initiate the appropriate internal actions to return the specified interface to the idle condition and call references to the Null state. Upon expiry of the timer, a notification shall be made to the maintenance entity. NOTE: This Timer MUST be less than Timer T316. ')
frSvcDlcmiIdleTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 12), Integer32().clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcDlcmiIdleTimer.setReference('ITU-T Standard Q.921, Section 5.9 / Q.922 Section 5.9: Timer T203.')
if mibBuilder.loadTexts: frSvcDlcmiIdleTimer.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiIdleTimer.setDescription('This is the maximum time allowed without any frames being exchanged. The default for this timer is 30 seconds.')
frSvcDlcmiRetransmissionTimer = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 13), TimeTicks().clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcDlcmiRetransmissionTimer.setReference('ITU-T Standard Q.921, Section 5.9 / Q.922 Section 5.9: Timer T200.')
if mibBuilder.loadTexts: frSvcDlcmiRetransmissionTimer.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiRetransmissionTimer.setDescription('This is the re-transmission timer. It is started upon transmission of frames. When a response is received, the timer will be shut down. If the timer expires , it may be retried N200 times. When N200 times have been reached, a DL-RELEASE message will be sent to the Layer 3 entity. The default for this timer is 1.5 seconds.')
frSvcDlcmiNumRetransmissions = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 14), Integer32().clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcDlcmiNumRetransmissions.setReference('ITU-T Standard Q.921, Section 5.9 / Q.922 Section 5.9: N200.')
if mibBuilder.loadTexts: frSvcDlcmiNumRetransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiNumRetransmissions.setDescription('This value indicates the number of times T200 timer will be retried. When N200 times have been reached, a DL-RELEASE message will be sent to the Layer 3 entity. The default for this value is 3 retries.')
frSvcDlcmiMaxInfoFieldSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 15), Integer32().clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcDlcmiMaxInfoFieldSize.setReference('ITU-T Standard Q.921, Section 5.9 / Q.922 Section 5.9: N201.')
if mibBuilder.loadTexts: frSvcDlcmiMaxInfoFieldSize.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiMaxInfoFieldSize.setDescription('This value indicates the maximum number of octets in an Information field. The default value is 260 octets.')
frSvcDlcmiMaxInfoFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcDlcmiMaxInfoFrames.setReference('ITU-T Standard Q.921, Section 5.9 / Q.922 Section 5.9: k.')
if mibBuilder.loadTexts: frSvcDlcmiMaxInfoFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiMaxInfoFrames.setDescription('This value indicates the maximum number of sequentially numbered I frames that may be outstanding (that is, unacknowledged) at any given time. This number shall not exceed 127. For a 16Kbps link: k = 3, 64Kbps: k = 7 (this is the default value), 384Kbps: k = 32, 1.5Mbps/1.92Mbps: k = 40.')
frSvcDlcmiQ922State = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("teiUnassigned", 1), ("assignAwaitingTei", 2), ("establishingAwaitingTei", 3), ("teiAssigned", 4), ("awaitingEstablishment", 5), ("awaitingRelease", 6), ("multipleFrameEstablished", 7), ("timerRecovery", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcDlcmiQ922State.setReference('ITU-T Standard Q.922, Appendix B.2')
if mibBuilder.loadTexts: frSvcDlcmiQ922State.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlcmiQ922State.setDescription('This value indicates the state of the Q.922 Point to Point Data Link Layer Negotiation. ')
frSvcTable = MibTable((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2), )
if mibBuilder.loadTexts: frSvcTable.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcTable.setDescription('A table containing information about specific Data Link Connection Identifiers and corresponding switched virtual circuits.')
frSvcEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1), ).setIndexNames((0, "FRAME-RELAY-DTE-SVC-MIB", "frSvcIfIndex"), (0, "FRAME-RELAY-DTE-SVC-MIB", "frSvcDlci"))
if mibBuilder.loadTexts: frSvcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcEntry.setDescription('The information regarding a single switched Data Link Connection Identifier.')
frSvcIfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcIfIndex.setDescription('The ifIndex Value of the ifEntry this virtual circuit is layered onto.')
frSvcDlci = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 2), DLCI()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcDlci.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcDlci.setDescription('The Data Link Connection Identifier for this virtual circuit.')
frSvcReceivedFECNs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcReceivedFECNs.setReference('Draft American National Standard T1.618-1991, Section 3.3.3')
if mibBuilder.loadTexts: frSvcReceivedFECNs.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcReceivedFECNs.setDescription('Number of frames received from the network in- dicating forward congestion since the virtual circuit was created.')
frSvcReceivedBECNs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcReceivedBECNs.setReference('Draft American National Standard T1.618-1991, Section 3.3.4')
if mibBuilder.loadTexts: frSvcReceivedBECNs.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcReceivedBECNs.setDescription('Number of frames received from the network in- dicating backward congestion since the virtual circuit was created.')
frSvcSentFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcSentFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcSentFrames.setDescription('The number of frames sent from this virtual circuit since it was created.')
frSvcSentOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcSentOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcSentOctets.setDescription('The number of octets sent from this virtual circuit since it was created.')
frSvcReceivedFrames = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcReceivedFrames.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcReceivedFrames.setDescription('Number of frames received over this virtual circuit since it was created.')
frSvcReceivedOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcReceivedOctets.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcReceivedOctets.setDescription('Number of octets received over this virtual circuit since it was created.')
frSvcCreationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcCreationTime.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcCreationTime.setDescription('The value of sysUpTime when the virtual cir- cuit was created.')
frSvcInMaxFmifSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 10), Integer32().clone(262)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcInMaxFmifSize.setReference('ITU-T Standard Q.933, Section 4.5.19')
if mibBuilder.loadTexts: frSvcInMaxFmifSize.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcInMaxFmifSize.setDescription('This variable indicates the maximum amount of end user data octets in a frame for in the direction of the calling user to the called user. The default value is 262 octets.')
frSvcOutMaxFmifSize = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 11), Integer32().clone(262)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcOutMaxFmifSize.setReference('ITU-T Standard Q.933, Section 4.5.19')
if mibBuilder.loadTexts: frSvcOutMaxFmifSize.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcOutMaxFmifSize.setDescription('This variable indicates the maximum amount of end user data octets in a frame for in the direction of the called user to the calling user. The default value is 262 octets.')
frSvcInCommittedBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcInCommittedBurst.setReference('ITU-T Standard Q.933, Section 4.5.19')
if mibBuilder.loadTexts: frSvcInCommittedBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcInCommittedBurst.setDescription('This variable indicates the maximum amount of data, in bits, that the network agrees to accept under normal conditions, during the measurement interval. The default value is 0.')
frSvcOutCommittedBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcOutCommittedBurst.setReference('ITU-T Standard Q.933, Section 4.5.19')
if mibBuilder.loadTexts: frSvcOutCommittedBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcOutCommittedBurst.setDescription('This variable indicates the maximum amount of data, in bits, that the network agrees to transfer under normal conditions, during the measurement interval. The default value is 0.')
frSvcInExcessBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcInExcessBurst.setReference('ITU-T Standard Q.933, Section 4.5.19')
if mibBuilder.loadTexts: frSvcInExcessBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcInExcessBurst.setDescription('This variable indicates the maximum amount of uncommitted data bits that the network will at- tempt to receive over the measurement interval. By default, if not configured when creating the entry, the Excess Information Burst Size is set to the value of ifSpeed.')
frSvcOutExcessBurst = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcOutExcessBurst.setReference('ITU-T Standard Q.933, Section 4.5.19')
if mibBuilder.loadTexts: frSvcOutExcessBurst.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcOutExcessBurst.setDescription('This variable indicates the maximum amount of uncommitted data bits that the network will at- tempt to deliver over the measurement interval. By default, if not configured when creating the entry, the Excess Information Burst Size is set to the value of ifSpeed.')
frSvcInCIR = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcInCIR.setReference('ITU-T Standard Q.933, Section 4.5.19')
if mibBuilder.loadTexts: frSvcInCIR.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcInCIR.setDescription("CIR is the average number of 'Frame Re- lay Information Field' bits received per second across a user network interface to the calling user, measured over the measurement inter- val. The default value is 0.")
frSvcOutCIR = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcOutCIR.setReference('ITU-T Standard Q.933, Section 4.5.19')
if mibBuilder.loadTexts: frSvcOutCIR.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcOutCIR.setDescription("CIR is the average number of 'Frame Re- lay Information Field' bits transferred per second across a user network interface from the calling user, measured over the measurement inter- val. The default value is 0.")
frSvcInMinCIR = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcInMinCIR.setReference('ITU-T Standard Q.933, Section 4.5.19')
if mibBuilder.loadTexts: frSvcInMinCIR.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcInMinCIR.setDescription('Minimum Acceptable CIR is the lowest throughput value, in the direction to the calling user, expressed in bits per second, that the calling user is willing to accept for the call. If the network or the called user is unable to support this throughput, the call will be cleared. The default value is 0.')
frSvcOutMinCIR = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcOutMinCIR.setReference('ITU-T Standard Q.933, Section 4.5.19')
if mibBuilder.loadTexts: frSvcOutMinCIR.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcOutMinCIR.setDescription('Minimum Acceptable CIR is the lowest throughput value, in the direction from the calling user, expressed in bits per second, that the calling user is willing to accept for the call. If the network or the called user is unable to support this throughput, the call will be cleared. The default value is 0.')
frSvcState = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inProcess", 1), ("complete", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcState.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcState.setDescription('Indicates whether the Connection has been completed and data can proceed (2), or if the call setup is still in process (1).')
frSvcCallReferenceValue = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcCallReferenceValue.setReference('ITU-T Standard Q.931, Section 4.5.6')
if mibBuilder.loadTexts: frSvcCallReferenceValue.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcCallReferenceValue.setDescription('Indicates the call identity number of the call on the interface.')
frSvcCallingAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 22), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcCallingAddr.setReference('ITU-T Standard Q.931, Section 4.5.9')
if mibBuilder.loadTexts: frSvcCallingAddr.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcCallingAddr.setDescription('Indicates the address of the calling party.')
frSvcCallingSubAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 23), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcCallingSubAddr.setReference('ITU-T Standard Q.931, Section 4.5.10')
if mibBuilder.loadTexts: frSvcCallingSubAddr.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcCallingSubAddr.setDescription('Indicates the sub-address of the calling party.')
frSvcCalledAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcCalledAddr.setReference('ITU-T Standard Q.931, Section 4.5.7')
if mibBuilder.loadTexts: frSvcCalledAddr.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcCalledAddr.setDescription('Indicates the address of the called party.')
frSvcCalledSubAddr = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcCalledSubAddr.setReference('ITU-T Standard Q.931, Section 4.5.8')
if mibBuilder.loadTexts: frSvcCalledSubAddr.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcCalledSubAddr.setDescription('Indicates the sub-address of the called party.')
frSvcCallSetup = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("setup", 1), ("disconnect", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: frSvcCallSetup.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcCallSetup.setDescription('Indicates whether the call should be Setup or Disconnected.')
frSvcCallOrigination = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 32, 7, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("remote", 1), ("local", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: frSvcCallOrigination.setReference('ITU-T Standard Q.931, Section 4.5.9')
if mibBuilder.loadTexts: frSvcCallOrigination.setStatus('mandatory')
if mibBuilder.loadTexts: frSvcCallOrigination.setDescription('Indicates the direction of the call. identifies the circuit as the calling (local) or the called side (remote).')
mibBuilder.exportSymbols("FRAME-RELAY-DTE-SVC-MIB", frSvcDlcmiCallProceedingTimer=frSvcDlcmiCallProceedingTimer, frSvcOutCIR=frSvcOutCIR, frSvcCallingSubAddr=frSvcCallingSubAddr, frSvcDlcmiResetSentTimer=frSvcDlcmiResetSentTimer, frSvcCalledAddr=frSvcCalledAddr, frSvcDlcmiIdleTimer=frSvcDlcmiIdleTimer, frSvcDlcmiIfIndex=frSvcDlcmiIfIndex, frSvcDlcmiTable=frSvcDlcmiTable, frSvcOutCommittedBurst=frSvcOutCommittedBurst, frSvcDlcmiStatusEnquiryTimer=frSvcDlcmiStatusEnquiryTimer, frSvcInExcessBurst=frSvcInExcessBurst, frSvcDlcmiCallDisconnectTimer=frSvcDlcmiCallDisconnectTimer, frSvcCallReferenceValue=frSvcCallReferenceValue, frSvcDlcmiMaxInfoFieldSize=frSvcDlcmiMaxInfoFieldSize, frSvcReceivedFECNs=frSvcReceivedFECNs, frSvcCallingAddr=frSvcCallingAddr, frSvcCallSetup=frSvcCallSetup, frDteSvc=frDteSvc, frSvcDlcmiEntry=frSvcDlcmiEntry, frSvcOutExcessBurst=frSvcOutExcessBurst, frSvcDlci=frSvcDlci, frSvcInMinCIR=frSvcInMinCIR, frSvcDlcmiMaxInfoFrames=frSvcDlcmiMaxInfoFrames, frSvcDlcmiNumRetransmissions=frSvcDlcmiNumRetransmissions, frameRelayDteSvc=frameRelayDteSvc, frSvcReceivedBECNs=frSvcReceivedBECNs, frSvcDlcmiErrorThreshold=frSvcDlcmiErrorThreshold, frSvcInMaxFmifSize=frSvcInMaxFmifSize, frSvcSentFrames=frSvcSentFrames, frSvcOutMinCIR=frSvcOutMinCIR, frSvcIfIndex=frSvcIfIndex, frSvcDlcmiCallSetupTimer=frSvcDlcmiCallSetupTimer, frSvcDlcmiCallReleaseTimer=frSvcDlcmiCallReleaseTimer, frSvcDlcmiRetransmissionTimer=frSvcDlcmiRetransmissionTimer, frSvcCalledSubAddr=frSvcCalledSubAddr, frSvcDlcmiResetAckTimer=frSvcDlcmiResetAckTimer, frSvcReceivedFrames=frSvcReceivedFrames, frSvcCreationTime=frSvcCreationTime, frSvcDlcmiMaxNumCalls=frSvcDlcmiMaxNumCalls, frSvcCallOrigination=frSvcCallOrigination, frSvcEntry=frSvcEntry, frSvcDlcmiState=frSvcDlcmiState, frSvcState=frSvcState, frSvcReceivedOctets=frSvcReceivedOctets, frSvcInCIR=frSvcInCIR, frSvcTable=frSvcTable, frSvcOutMaxFmifSize=frSvcOutMaxFmifSize, frSvcInCommittedBurst=frSvcInCommittedBurst, frSvcSentOctets=frSvcSentOctets, frSvcDlcmiQ922State=frSvcDlcmiQ922State)
