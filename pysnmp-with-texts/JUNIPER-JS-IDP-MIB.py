#
# PySNMP MIB module JUNIPER-JS-IDP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-JS-IDP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:59:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
jnxJsIdpRoot, = mibBuilder.importSymbols("JUNIPER-JS-SMI", "jnxJsIdpRoot")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, IpAddress, Counter32, TimeTicks, iso, ModuleIdentity, ObjectIdentity, Gauge32, MibIdentifier, Counter64, Bits, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "Counter32", "TimeTicks", "iso", "ModuleIdentity", "ObjectIdentity", "Gauge32", "MibIdentifier", "Counter64", "Bits", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxJsIdpMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1))
if mibBuilder.loadTexts: jnxJsIdpMIB.setLastUpdated('200706132153Z')
if mibBuilder.loadTexts: jnxJsIdpMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxJsIdpMIB.setContactInfo(' Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxJsIdpMIB.setDescription("This is Juniper Networks' implementation of enterprise specific MIB for IDP.")
jnxJsIdpObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1))
jnxJsIdpDataPlaneMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 1), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIdpDataPlaneMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpDataPlaneMemoryUsage.setDescription('Memory used by IDP in the data plane in percentage')
jnxJsIdpSessionsUsage = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 2), Unsigned32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIdpSessionsUsage.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpSessionsUsage.setDescription('Currently allocated sessions by IDP in percentage')
jnxJsIdpSessionsMaximum = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIdpSessionsMaximum.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpSessionsMaximum.setDescription('Maximum number of sessions supported by IDP')
jnxJsIdpPoliciesSupported = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIdpPoliciesSupported.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpPoliciesSupported.setDescription('Number of policies that can be simultaneously loaded on the IDP device')
jnxJsIdpPoliciesLoaded = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIdpPoliciesLoaded.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpPoliciesLoaded.setDescription('Number of policies that are currently loaded on the IDP device')
jnxJsIdpActivePolicyName = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIdpActivePolicyName.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpActivePolicyName.setDescription('The name of the policy currently active on the device')
jnxJsIdpAttackTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 7), )
if mibBuilder.loadTexts: jnxJsIdpAttackTable.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpAttackTable.setDescription('The attack table giving details of the attack and the number of hits')
jnxJsIdpAttackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 7, 1), ).setIndexNames((0, "JUNIPER-JS-IDP-MIB", "jnxJsIdpAttackIndex"))
if mibBuilder.loadTexts: jnxJsIdpAttackEntry.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpAttackEntry.setDescription('Attributes of an attack')
jnxJsIdpAttackIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: jnxJsIdpAttackIndex.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpAttackIndex.setDescription('The index for the attack table')
jnxJsIdpAttackName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIdpAttackName.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpAttackName.setDescription('The name of an attack identified by IDP')
jnxJsIdpAttackHits = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 7, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxJsIdpAttackHits.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpAttackHits.setDescription('Number of times an attack has been hit')
jnxJsIdpNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 2))
jnxJsIdpNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 2, 0))
jnxJsIdpRunningDetectorVersion = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsIdpRunningDetectorVersion.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpRunningDetectorVersion.setDescription('The version of the detector currently loaded')
jnxJsIdpSecurityPackageVersion = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsIdpSecurityPackageVersion.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpSecurityPackageVersion.setDescription('The version of the security package currently loaded')
jnxJsIdpLastSignatureUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 10), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsIdpLastSignatureUpdateTime.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpLastSignatureUpdateTime.setDescription('The value of sysUpTime when the signature was last updated successfully. Zero if unknown.')
jnxJsIdpSignatureUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: jnxJsIdpSignatureUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpSignatureUpdateStatus.setDescription('The status of the signature update i.e. success or failure')
jnxJsIdpSignatureUpdate = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 2, 0, 1)).setObjects(("JUNIPER-JS-IDP-MIB", "jnxJsIdpRunningDetectorVersion"), ("JUNIPER-JS-IDP-MIB", "jnxJsIdpSecurityPackageVersion"), ("JUNIPER-JS-IDP-MIB", "jnxJsIdpLastSignatureUpdateTime"), ("JUNIPER-JS-IDP-MIB", "jnxJsIdpSignatureUpdateStatus"))
if mibBuilder.loadTexts: jnxJsIdpSignatureUpdate.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpSignatureUpdate.setDescription('A trap which signifies that a signature update has occurred.')
jnxJsIdpAttackLog = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 39, 1, 11, 1, 2, 0, 2)).setObjects(("JUNIPER-JS-IDP-MIB", "jnxJsIdpAttackName"), ("JUNIPER-JS-IDP-MIB", "jnxJsIdpAttackHits"))
if mibBuilder.loadTexts: jnxJsIdpAttackLog.setStatus('current')
if mibBuilder.loadTexts: jnxJsIdpAttackLog.setDescription('A trap which signifies that attacks have been detected. jnxJsIdpAttackName is the name of the attacks that have been detected so far and jnxJsIdpAttackHits is the number of times each attack has been detected.')
mibBuilder.exportSymbols("JUNIPER-JS-IDP-MIB", PYSNMP_MODULE_ID=jnxJsIdpMIB, jnxJsIdpLastSignatureUpdateTime=jnxJsIdpLastSignatureUpdateTime, jnxJsIdpAttackHits=jnxJsIdpAttackHits, jnxJsIdpSessionsMaximum=jnxJsIdpSessionsMaximum, jnxJsIdpAttackTable=jnxJsIdpAttackTable, jnxJsIdpNotificationPrefix=jnxJsIdpNotificationPrefix, jnxJsIdpActivePolicyName=jnxJsIdpActivePolicyName, jnxJsIdpPoliciesSupported=jnxJsIdpPoliciesSupported, jnxJsIdpAttackName=jnxJsIdpAttackName, jnxJsIdpAttackEntry=jnxJsIdpAttackEntry, jnxJsIdpPoliciesLoaded=jnxJsIdpPoliciesLoaded, jnxJsIdpRunningDetectorVersion=jnxJsIdpRunningDetectorVersion, jnxJsIdpDataPlaneMemoryUsage=jnxJsIdpDataPlaneMemoryUsage, jnxJsIdpObjects=jnxJsIdpObjects, jnxJsIdpAttackLog=jnxJsIdpAttackLog, jnxJsIdpSecurityPackageVersion=jnxJsIdpSecurityPackageVersion, jnxJsIdpSessionsUsage=jnxJsIdpSessionsUsage, jnxJsIdpNotifications=jnxJsIdpNotifications, jnxJsIdpSignatureUpdate=jnxJsIdpSignatureUpdate, jnxJsIdpSignatureUpdateStatus=jnxJsIdpSignatureUpdateStatus, jnxJsIdpMIB=jnxJsIdpMIB, jnxJsIdpAttackIndex=jnxJsIdpAttackIndex)
