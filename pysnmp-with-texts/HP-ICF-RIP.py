#
# PySNMP MIB module HP-ICF-RIP (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-ICF-RIP
# Produced by pysmi-0.3.4 at Wed May  1 13:35:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
IANAipRouteProtocol, = mibBuilder.importSymbols("IANA-RTPROTO-MIB", "IANAipRouteProtocol")
rip2IfConfEntry, = mibBuilder.importSymbols("RIPv2-MIB", "rip2IfConfEntry")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
Integer32, IpAddress, Counter64, Counter32, ObjectIdentity, iso, ModuleIdentity, Bits, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, TimeTicks, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "Counter64", "Counter32", "ObjectIdentity", "iso", "ModuleIdentity", "Bits", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "TimeTicks", "Unsigned32")
TruthValue, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "DisplayString", "RowStatus")
hpicfRip = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13))
hpicfRip.setRevisions(('2003-05-13 02:17', '2001-11-13 03:39',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfRip.setRevisionsDescriptions(('Added an object for configuring a default administrative distance for RIP routes.', 'Initial revision.',))
if mibBuilder.loadTexts: hpicfRip.setLastUpdated('200305130217Z')
if mibBuilder.loadTexts: hpicfRip.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfRip.setContactInfo('Hewlett-Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfRip.setDescription('This MIB module contains HP proprietary extensions to the standard RIP MIB.')
hpicfRipObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1))
hpicfRipGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 1))
hpicfRipAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRipAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfRipAdminStatus.setDescription('The operational status of the RIP routing protocol.')
hpicfRipDefaultMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRipDefaultMetric.setStatus('current')
if mibBuilder.loadTexts: hpicfRipDefaultMetric.setDescription('Default metric value for routes redistributed to RIP.')
hpicfRipAutoSummary = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRipAutoSummary.setStatus('current')
if mibBuilder.loadTexts: hpicfRipAutoSummary.setDescription("A flag indicating whether RIP should perform border filtering on subnet routes when crossing a network boundary. Interfaces that are configured for RIPv1 or RIPv1-compatible mode must always filter subnets at network boundaries. Interfaces configured for RIPv2 mode will only filter subnets if this flag is set to 'true'. Setting this to 'true' will result in all subnets within a class-based network to be summarized using a single route for the subnet number, which can decrease the size of the routing tables. However, if any networks are discontiguous, this flag should be set to 'false' for proper routing.")
hpicfRipDistance = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRipDistance.setStatus('current')
if mibBuilder.loadTexts: hpicfRipDistance.setDescription('The administrative distance to associate with routes learned by RIP. Routes with lower distances are preferred. By default, RIP routes have an administrative distance of 120.')
hpicfRipIfConfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 2), )
if mibBuilder.loadTexts: hpicfRipIfConfTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRipIfConfTable.setDescription('HP extensions to the rip2IfConfTable.')
hpicfRipIfConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 2, 1), )
rip2IfConfEntry.registerAugmentions(("HP-ICF-RIP", "hpicfRipIfConfEntry"))
hpicfRipIfConfEntry.setIndexNames(*rip2IfConfEntry.getIndexNames())
if mibBuilder.loadTexts: hpicfRipIfConfEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRipIfConfEntry.setDescription('HP extensions for a single RIP interface.')
hpicfRipIfConfDoPoison = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 2, 1, 1), TruthValue().clone('true')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfRipIfConfDoPoison.setStatus('current')
if mibBuilder.loadTexts: hpicfRipIfConfDoPoison.setDescription('Flag indicating if router should perform poison reverse on this interface.')
hpicfRipIfConfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfRipIfConfCost.setStatus('current')
if mibBuilder.loadTexts: hpicfRipIfConfCost.setDescription('RIP metric for this interface.')
hpicfRipRedistTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 3), )
if mibBuilder.loadTexts: hpicfRipRedistTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRipRedistTable.setDescription('Table for configuring route redistribution into RIP.')
hpicfRipRedistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 3, 1), ).setIndexNames((0, "HP-ICF-RIP", "hpicfRipRedistSrcProto"))
if mibBuilder.loadTexts: hpicfRipRedistEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRipRedistEntry.setDescription('An entry in the table for configuring route redistribution into RIP from a single source protocol. Entries in this table are not created dynamically. There will be a single entry for each supported source protocol.')
hpicfRipRedistSrcProto = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 3, 1, 1), IANAipRouteProtocol())
if mibBuilder.loadTexts: hpicfRipRedistSrcProto.setStatus('current')
if mibBuilder.loadTexts: hpicfRipRedistSrcProto.setDescription('Source protocol to redistribute routes from.')
hpicfRipRedistEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 3, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfRipRedistEnabled.setStatus('current')
if mibBuilder.loadTexts: hpicfRipRedistEnabled.setDescription('A flag indicating whether RIP should redistribute routes from this source protocol.')
hpicfRipRedistRestrictTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 4), )
if mibBuilder.loadTexts: hpicfRipRedistRestrictTable.setStatus('current')
if mibBuilder.loadTexts: hpicfRipRedistRestrictTable.setDescription('A table of route prefixes for filtering out routes that RIP should not redistribute. Any route that is contained by a range in this table (in other words, has a longer mask than that specified by hpicfRipRedistRestrictMask and where the route destination ANDed with the hpicfRipRedistRestrictMask is equal to hpicfRipRedistRestrictAddr) will not be redistributed as an external route by RIP.')
hpicfRipRedistRestrictEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 4, 1), ).setIndexNames((0, "HP-ICF-RIP", "hpicfRipRedistRestrictAddr"), (0, "HP-ICF-RIP", "hpicfRipRedistRestrictMask"))
if mibBuilder.loadTexts: hpicfRipRedistRestrictEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfRipRedistRestrictEntry.setDescription('A single entry in the table. Any route, regardless of source protocol which is contained within the specified range will not be redistributed into RIP. Entries in this table are created dynamically using the hpicfRipRedistRestrictStatus object.')
hpicfRipRedistRestrictAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: hpicfRipRedistRestrictAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfRipRedistRestrictAddr.setDescription('The IP address of the range of route entries to exclude from redistribution into RIP.')
hpicfRipRedistRestrictMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 4, 1, 2), IpAddress())
if mibBuilder.loadTexts: hpicfRipRedistRestrictMask.setStatus('current')
if mibBuilder.loadTexts: hpicfRipRedistRestrictMask.setDescription('The mask for the range of route entries to exclude from redistribution into RIP.')
hpicfRipRedistRestrictStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 1, 4, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfRipRedistRestrictStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfRipRedistRestrictStatus.setDescription('The status of this entry.')
hpicfRipConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 2))
hpicfRipGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 2, 1))
hpicfRipBaseGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 2, 1, 1)).setObjects(("HP-ICF-RIP", "hpicfRipAdminStatus"), ("HP-ICF-RIP", "hpicfRipDefaultMetric"), ("HP-ICF-RIP", "hpicfRipAutoSummary"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRipBaseGroup = hpicfRipBaseGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRipBaseGroup.setDescription('Basic RIP configuration information that is not present in the standard RIP MIB.')
hpicfRipIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 2, 1, 2)).setObjects(("HP-ICF-RIP", "hpicfRipIfConfDoPoison"), ("HP-ICF-RIP", "hpicfRipIfConfCost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRipIfGroup = hpicfRipIfGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRipIfGroup.setDescription('RIP interface configuration information that is not present in the standard RIP MIB.')
hpicfRipRedistGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 2, 1, 3)).setObjects(("HP-ICF-RIP", "hpicfRipRedistEnabled"), ("HP-ICF-RIP", "hpicfRipRedistRestrictStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRipRedistGroup = hpicfRipRedistGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRipRedistGroup.setDescription('A collection of objects for controlling the redistribution of external routes by RIP.')
hpicfRipDistanceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 2, 1, 4)).setObjects(("HP-ICF-RIP", "hpicfRipDistance"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRipDistanceGroup = hpicfRipDistanceGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfRipDistanceGroup.setDescription('A collection of objects for configuring the administrative distance of routes learned by RIP.')
hpicfRipCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 2, 2))
hpicfRipCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 2, 2, 1)).setObjects(("HP-ICF-RIP", "hpicfRipBaseGroup"), ("HP-ICF-RIP", "hpicfRipIfGroup"), ("HP-ICF-RIP", "hpicfRipRedistGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRipCompliance = hpicfRipCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfRipCompliance.setDescription('The compliance statement for HP Routing switches that support RIP.')
hpicfRipDistanceCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 13, 2, 2, 2)).setObjects(("HP-ICF-RIP", "hpicfRipDistanceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfRipDistanceCompliance = hpicfRipDistanceCompliance.setStatus('current')
if mibBuilder.loadTexts: hpicfRipDistanceCompliance.setDescription('The compliance statement for HP Routing switches that support RIP.')
mibBuilder.exportSymbols("HP-ICF-RIP", hpicfRipDefaultMetric=hpicfRipDefaultMetric, hpicfRipGroups=hpicfRipGroups, hpicfRipRedistRestrictAddr=hpicfRipRedistRestrictAddr, hpicfRipRedistTable=hpicfRipRedistTable, hpicfRipRedistEntry=hpicfRipRedistEntry, hpicfRipConformance=hpicfRipConformance, hpicfRipRedistGroup=hpicfRipRedistGroup, hpicfRipAutoSummary=hpicfRipAutoSummary, hpicfRipIfConfTable=hpicfRipIfConfTable, hpicfRipRedistSrcProto=hpicfRipRedistSrcProto, hpicfRipDistanceCompliance=hpicfRipDistanceCompliance, hpicfRipCompliances=hpicfRipCompliances, hpicfRipCompliance=hpicfRipCompliance, hpicfRipIfGroup=hpicfRipIfGroup, hpicfRipIfConfEntry=hpicfRipIfConfEntry, hpicfRipDistance=hpicfRipDistance, hpicfRipIfConfDoPoison=hpicfRipIfConfDoPoison, hpicfRipRedistRestrictMask=hpicfRipRedistRestrictMask, hpicfRipRedistRestrictTable=hpicfRipRedistRestrictTable, hpicfRip=hpicfRip, hpicfRipGeneral=hpicfRipGeneral, hpicfRipObjects=hpicfRipObjects, hpicfRipBaseGroup=hpicfRipBaseGroup, hpicfRipDistanceGroup=hpicfRipDistanceGroup, PYSNMP_MODULE_ID=hpicfRip, hpicfRipRedistRestrictStatus=hpicfRipRedistRestrictStatus, hpicfRipRedistRestrictEntry=hpicfRipRedistRestrictEntry, hpicfRipIfConfCost=hpicfRipIfConfCost, hpicfRipRedistEnabled=hpicfRipRedistEnabled, hpicfRipAdminStatus=hpicfRipAdminStatus)
