#
# PySNMP MIB module PB-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PB-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:36 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, ObjectIdentity, iso, TimeTicks, NotificationType, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, ModuleIdentity, experimental, enterprises, Counter32, Integer32, IpAddress, Unsigned32, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "iso", "TimeTicks", "NotificationType", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "ModuleIdentity", "experimental", "enterprises", "Counter32", "Integer32", "IpAddress", "Unsigned32", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
pb = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 12))
pbCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 12, 1))
pbCfgTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 12, 1, 1), )
if mibBuilder.loadTexts: pbCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: pbCfgTable.setDescription('A table containing an configuration information for each Gateway NAC in the NAS chassis.')
pbCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 12, 1, 1, 1), ).setIndexNames((0, "PB-MIB", "pbCfgIndex"))
if mibBuilder.loadTexts: pbCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pbCfgEntry.setDescription('There is one Configuration row for each Gateway Card in the NAS chassis.')
pbCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pbCfgIndex.setDescription("A unique value for each Gateway Card in the chassis. The value of this object matches the value of the index of the corresponding Gateway Card's entry in the entity table of the chassis MIB.")
pbCfgMaxSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbCfgMaxSessions.setStatus('mandatory')
if mibBuilder.loadTexts: pbCfgMaxSessions.setDescription('This read-only object defines the maximum number of packet bus sessions supported by this entity. This value is used to determine the number of rows present in the pbSessionTable for this entity.')
pbSession = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 12, 2))
pbSessionTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1), )
if mibBuilder.loadTexts: pbSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionTable.setDescription('The Packet Bus Session table contains an entry for each manageable Gateway NAC in the chassis. It provides a means to configure packet bus connections and determine the status of the defined connections. This table resides in the NAC and can be impemented as either a dense or sparse table.')
pbSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1), ).setIndexNames((0, "PB-MIB", "pbSessionEntityIndex"), (0, "PB-MIB", "pbSessionIndex"))
if mibBuilder.loadTexts: pbSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionEntry.setDescription('There is an row for each Packet Bus connection.')
pbSessionEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbSessionEntityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionEntityIndex.setDescription('A unique value for each entity in the chassis. The value of this object matches the value of the index of the corresponding entry in the entity table of the chassis MIB.')
pbSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionIndex.setDescription('An index that uniquely identifies the packet bus session for this entity.')
pbSessionDestSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbSessionDestSlot.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionDestSlot.setDescription('A number that identifies the slot of the entity in the chassis to which a packet bus session has been assigned.')
pbSessionDestChan = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbSessionDestChan.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionDestChan.setDescription('A number that identifies a particular entity in a slot.')
pbSessionDestSess = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbSessionDestSess.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionDestSess.setDescription('A number that identifies the particular session from the other communicating Gateway.')
pbSessionRowState = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("free", 1), ("used", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbSessionRowState.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionRowState.setDescription('Set availability for this row of packet bus session. Default=free(1).')
pbSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unassigned", 1), ("assigned", 2), ("connected", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbSessionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionStatus.setDescription('Displays the current status of the packet bus session. A status of Unassigned coupled with a state of used indicates that a packet bus failure has occured.')
pbSessionReqStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disconnected", 1), ("connected", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbSessionReqStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionReqStatus.setDescription('Used to assign or delete a session between the entities specified by the table indecies. A request connect is a issue of packet bus session link start, and a request disconnect is a issue of packet bus session link terminate. Default=disconnected(1).')
pbSessionLastRequest = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("unknown", 1), ("open", 2), ("close", 3), ("listen", 4), ("dial", 5), ("disconnect", 6), ("transmit", 7), ("receive", 8), ("setMode", 9), ("query", 10), ("flush", 11), ("kill", 12), ("reserve", 13), ("answer", 14), ("attach", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbSessionLastRequest.setStatus('optional')
if mibBuilder.loadTexts: pbSessionLastRequest.setDescription('Indicates the type of communications contained in the last packet sent to the destination entity.')
pbSessionPktSents = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbSessionPktSents.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionPktSents.setDescription('A counter that indicates number of packets that have been sent.')
pbSessionPktRcvds = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbSessionPktRcvds.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionPktRcvds.setDescription('A counter that indicates number of packets that have been received.')
pbSessionPktSize = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbSessionPktSize.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionPktSize.setDescription('A number that indicates the packet size of the current or last established session.')
pbSessionBusTimeOuts = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbSessionBusTimeOuts.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionBusTimeOuts.setDescription('A counter that indicates number of packet bus timeout that have occurred.')
pbSessionErrorStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58))).clone(namedValues=NamedValues(("noError", 1), ("invalidParm", 2), ("socketNotOpened", 3), ("noMoreSocket", 4), ("connectionExist", 5), ("connectionFailed", 6), ("noMoreConnObj", 7), ("noActiveConn", 8), ("ackWaitTimeout", 9), ("hwNakRcvd", 10), ("otherBusError", 11), ("linkStartRcvd", 12), ("outOfSeqFrame", 13), ("noMemory", 14), ("nullPointer", 15), ("invalidBlock", 16), ("notInitialized", 17), ("failedToRecv", 18), ("invalidMsgType", 19), ("exceedMaxSends", 20), ("connectionReset", 21), ("socketClosed", 22), ("uiReqPending", 23), ("heartbeatTimeout", 24), ("remoteBusy", 25), ("localBusy", 26), ("noResponse", 27), ("linkdownNoTx", 28), ("noDataToTx", 29), ("txPreAck", 30), ("txTardyAck", 31), ("txBusTimeOut", 32), ("rxBusTimeOut", 33), ("txTAL", 34), ("rxTAL", 35), ("txMasterTimeOut", 36), ("clkVanished", 37), ("clkReturned", 38), ("shutdown", 39), ("frameError", 40), ("xIDTimeOut", 41), ("recvLSinInfoTransferState", 42), ("recvIFrameWithWrongSeq", 43), ("rxMsgBufferOverflow", 44), ("linkDown", 45), ("listenFailed", 46), ("listenRcvFailed", 47), ("dtrDrop", 48), ("answerFailed", 49), ("openFailed", 50), ("closeFailed", 51), ("readFailed", 52), ("writeFailed", 53), ("autoParityFailed", 54), ("setmodeFailed", 55), ("badDataBase", 56), ("padStreamsError", 57), ("padError", 58)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbSessionErrorStatus.setStatus('mandatory')
if mibBuilder.loadTexts: pbSessionErrorStatus.setDescription('Error return status from last packet command.')
pbTrapEna = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 12, 3))
pbTrapEnaTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 12, 3, 1), )
if mibBuilder.loadTexts: pbTrapEnaTable.setStatus('mandatory')
if mibBuilder.loadTexts: pbTrapEnaTable.setDescription('A table containing an enable for each trap that a manageable Gateway entity is capable of generating.')
pbTrapEnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 12, 3, 1, 1), ).setIndexNames((0, "PB-MIB", "pbTrapEnaIndex"), (0, "PB-MIB", "pbTrapSessionIndex"))
if mibBuilder.loadTexts: pbTrapEnaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pbTrapEnaEntry.setDescription('There is one Gateway trap enable row for each Gateway card in the NAS chassis.')
pbTrapEnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbTrapEnaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pbTrapEnaIndex.setDescription("A unique value for each Gateway Card in the chassis. The value of this object matches the value of the index of the corresponding Gateway Card's entry in the entity table of the chassis MIB.")
pbTrapSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pbTrapSessionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pbTrapSessionIndex.setDescription('A value that identifies the packet bus session for trap enable/disable.')
pbTrapEnaSessActive = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbTrapEnaSessActive.setStatus('mandatory')
if mibBuilder.loadTexts: pbTrapEnaSessActive.setDescription('An object which enables or disables the Active Session trap.')
pbTrapEnaPktBusCongest = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbTrapEnaPktBusCongest.setStatus('mandatory')
if mibBuilder.loadTexts: pbTrapEnaPktBusCongest.setDescription('An object to enable or disable the Packet Bus Congestion trap. The Packet Bus Congestion trap is generated when a valid packet bus session is in progress but either the Modem or the Gateway packet bus driver is experiencing congestion problem.')
pbTrapEnaPktBusSessLost = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbTrapEnaPktBusSessLost.setStatus('mandatory')
if mibBuilder.loadTexts: pbTrapEnaPktBusSessLost.setDescription('An object to enable or disable the trap that is generated when a valid Packet Bus session has been lost.')
pbTrapEnaSessionInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbTrapEnaSessionInactive.setStatus('mandatory')
if mibBuilder.loadTexts: pbTrapEnaSessionInactive.setDescription('An object to enable or disable a trap which is generated when a request is made to change a packet bus session from the active to inactive state.')
pbTrapEnaSessionError = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 12, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pbTrapEnaSessionError.setStatus('mandatory')
if mibBuilder.loadTexts: pbTrapEnaSessionError.setDescription('An object which enables or disables the packet bus session error trap.')
mibBuilder.exportSymbols("PB-MIB", pbSessionPktRcvds=pbSessionPktRcvds, pbSessionStatus=pbSessionStatus, pbSessionLastRequest=pbSessionLastRequest, pbSessionPktSize=pbSessionPktSize, pbSessionBusTimeOuts=pbSessionBusTimeOuts, pbCfgMaxSessions=pbCfgMaxSessions, pbTrapEnaIndex=pbTrapEnaIndex, nas=nas, pbSessionRowState=pbSessionRowState, pbCfgIndex=pbCfgIndex, pb=pb, pbSessionReqStatus=pbSessionReqStatus, pbSessionDestSess=pbSessionDestSess, pbTrapEnaEntry=pbTrapEnaEntry, pbTrapSessionIndex=pbTrapSessionIndex, pbTrapEnaSessActive=pbTrapEnaSessActive, pbTrapEnaSessionInactive=pbTrapEnaSessionInactive, pbCfgEntry=pbCfgEntry, pbTrapEnaPktBusSessLost=pbTrapEnaPktBusSessLost, pbSessionDestChan=pbSessionDestChan, pbSessionDestSlot=pbSessionDestSlot, pbCfg=pbCfg, pbSessionErrorStatus=pbSessionErrorStatus, pbTrapEnaPktBusCongest=pbTrapEnaPktBusCongest, pbSessionEntry=pbSessionEntry, pbSessionTable=pbSessionTable, pbTrapEnaTable=pbTrapEnaTable, pbSessionIndex=pbSessionIndex, pbSessionEntityIndex=pbSessionEntityIndex, pbSessionPktSents=pbSessionPktSents, usr=usr, pbSession=pbSession, pbTrapEnaSessionError=pbTrapEnaSessionError, pbCfgTable=pbCfgTable, pbTrapEna=pbTrapEna)
