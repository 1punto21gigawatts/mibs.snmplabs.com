#
# PySNMP MIB module NPCONFIG (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NPCONFIG
# Produced by pysmi-0.3.4 at Wed May  1 14:24:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
iso, snmpModules, IpAddress, Counter64, Gauge32, enterprises, Integer32, MibIdentifier, NotificationType, ObjectIdentity, Unsigned32, TimeTicks, Counter32, Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, mib_2 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "snmpModules", "IpAddress", "Counter64", "Gauge32", "enterprises", "Integer32", "MibIdentifier", "NotificationType", "ObjectIdentity", "Unsigned32", "TimeTicks", "Counter32", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "mib-2")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
zhoneWtn, = mibBuilder.importSymbols("Zhone", "zhoneWtn")
npconfig = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13))
npconfig.setRevisions(('2007-12-20 00:00', '2006-10-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: npconfig.setRevisionsDescriptions(('Added Config Change Trap.', 'First Draft',))
if mibBuilder.loadTexts: npconfig.setLastUpdated('200712200000Z')
if mibBuilder.loadTexts: npconfig.setOrganization('Zhone Technologies MIB Working Group Other information about group editing the MIB')
if mibBuilder.loadTexts: npconfig.setContactInfo('Zhone Technologies, Inc. Florida Design Center 8545 126th Avenue North Largo, FL 33773 www.zhone.com General Comments to: largo-mibwg-team@zhone.com')
if mibBuilder.loadTexts: npconfig.setDescription('This file defines the private Enterprise MIB extensions that define system-wide configuration related objects. ============================================================== == == == Copyright (C) 2007-2008 Zhone Technologies, Inc. == == == ==============================================================')
npconfigNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 0))
npconfigRowAction = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 1), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigRowAction.setStatus('current')
if mibBuilder.loadTexts: npconfigRowAction.setDescription('The action Data Type')
npconfigHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 2), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigHistorySize.setStatus('current')
if mibBuilder.loadTexts: npconfigHistorySize.setDescription('Maximum number of backups to be maintained')
npconfigCurrHistorySize = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 3), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigCurrHistorySize.setStatus('current')
if mibBuilder.loadTexts: npconfigCurrHistorySize.setDescription('Current history size')
npconfigUseRunningAsSaved = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigUseRunningAsSaved.setStatus('current')
if mibBuilder.loadTexts: npconfigUseRunningAsSaved.setDescription(' Use running configuration as saved configuration ')
npconfigRestoreType = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("scp", 1), ("sftp", 2), ("tftp", 3), ("http", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigRestoreType.setStatus('current')
if mibBuilder.loadTexts: npconfigRestoreType.setDescription('Protocol type')
npconfigBackupType = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("scp", 1), ("sftp", 2), ("tftp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigBackupType.setStatus('current')
if mibBuilder.loadTexts: npconfigBackupType.setDescription('Protocol type')
npconfigState = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 1), ("resetToDefaults", 2), ("restoreRemote", 3), ("restoreBackup", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigState.setStatus('current')
if mibBuilder.loadTexts: npconfigState.setDescription(' Current state of system ')
npconfigBackupTableTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 8), )
if mibBuilder.loadTexts: npconfigBackupTableTable.setStatus('current')
if mibBuilder.loadTexts: npconfigBackupTableTable.setDescription(' ')
npconfigBackupTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 8, 1), ).setIndexNames((0, "NPCONFIG", "npconfigBackupNo"))
if mibBuilder.loadTexts: npconfigBackupTableEntry.setStatus('current')
if mibBuilder.loadTexts: npconfigBackupTableEntry.setDescription('')
npconfigBackupNo = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigBackupNo.setStatus('current')
if mibBuilder.loadTexts: npconfigBackupNo.setDescription('Sequence No')
npconfigBackupName = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 8, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigBackupName.setStatus('current')
if mibBuilder.loadTexts: npconfigBackupName.setDescription('Unique name of the saved configuration')
npconfigBackupDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 8, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigBackupDescription.setStatus('current')
if mibBuilder.loadTexts: npconfigBackupDescription.setDescription('Description of the saved configuration')
npconfigBackupUrl = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 8, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigBackupUrl.setStatus('current')
if mibBuilder.loadTexts: npconfigBackupUrl.setDescription('This is the URL from where the current backup can be downloaded')
npconfigBackupStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 8, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigBackupStatus.setStatus('current')
if mibBuilder.loadTexts: npconfigBackupStatus.setDescription('status of the row')
npconfigBackupDate = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 8, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigBackupDate.setStatus('current')
if mibBuilder.loadTexts: npconfigBackupDate.setDescription('')
npconfigTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigTftpServer.setStatus('current')
if mibBuilder.loadTexts: npconfigTftpServer.setDescription('Address of tftp server')
npconfigServerIP = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigServerIP.setStatus('current')
if mibBuilder.loadTexts: npconfigServerIP.setDescription('Address of remote server')
npconfigRemoteFile = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigRemoteFile.setStatus('current')
if mibBuilder.loadTexts: npconfigRemoteFile.setDescription('Name of remote file to be downloaded')
npconfigLocalFile = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigLocalFile.setStatus('current')
if mibBuilder.loadTexts: npconfigLocalFile.setDescription('Name of local file.')
npconfiguser = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfiguser.setStatus('current')
if mibBuilder.loadTexts: npconfiguser.setDescription('User login for remote machine')
npconfigpassword = MibScalar((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: npconfigpassword.setStatus('current')
if mibBuilder.loadTexts: npconfigpassword.setDescription('Password for remote backup and restore')
npconfigConfigChangeEvent = NotificationType((1, 3, 6, 1, 4, 1, 5504, 2, 5, 13, 0, 1))
if mibBuilder.loadTexts: npconfigConfigChangeEvent.setStatus('current')
if mibBuilder.loadTexts: npconfigConfigChangeEvent.setDescription('A npconfigConfigChangeEvent notification is sent by the NP Config module whenever it has updated the persistent (i.e. saved) database.')
mibBuilder.exportSymbols("NPCONFIG", npconfigConfigChangeEvent=npconfigConfigChangeEvent, npconfig=npconfig, npconfigBackupStatus=npconfigBackupStatus, npconfigBackupUrl=npconfigBackupUrl, npconfigNotifications=npconfigNotifications, npconfiguser=npconfiguser, PYSNMP_MODULE_ID=npconfig, npconfigRestoreType=npconfigRestoreType, npconfigUseRunningAsSaved=npconfigUseRunningAsSaved, npconfigBackupTableEntry=npconfigBackupTableEntry, npconfigServerIP=npconfigServerIP, npconfigBackupName=npconfigBackupName, npconfigHistorySize=npconfigHistorySize, npconfigBackupDescription=npconfigBackupDescription, npconfigTftpServer=npconfigTftpServer, npconfigpassword=npconfigpassword, npconfigState=npconfigState, npconfigBackupNo=npconfigBackupNo, npconfigRowAction=npconfigRowAction, npconfigBackupDate=npconfigBackupDate, npconfigRemoteFile=npconfigRemoteFile, npconfigLocalFile=npconfigLocalFile, npconfigBackupTableTable=npconfigBackupTableTable, npconfigBackupType=npconfigBackupType, npconfigCurrHistorySize=npconfigCurrHistorySize)
