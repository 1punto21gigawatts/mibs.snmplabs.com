#
# PySNMP MIB module RMONitor-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RMONitor-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:58:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, enterprises, iso, Unsigned32, MibIdentifier, Bits, Counter64, Counter32, Integer32, ModuleIdentity, ObjectIdentity, NotificationType, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "enterprises", "iso", "Unsigned32", "MibIdentifier", "Bits", "Counter64", "Counter32", "Integer32", "ModuleIdentity", "ObjectIdentity", "NotificationType", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class OwnerString(DisplayString):
    pass

class EntryStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("valid", 1), ("createRequest", 2), ("underCreation", 3), ("invalid", 4))

ibm = MibIdentifier((1, 3, 6, 1, 4, 1, 2))
mib_2 = MibIdentifier((1, 3, 6, 1, 2, 1)).setLabel("mib-2")
ibmProd = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6))
rmonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 45))
security = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 45, 1))
protocols = MibIdentifier((1, 3, 6, 1, 4, 1, 2, 6, 45, 2))
authTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 1), )
if mibBuilder.loadTexts: authTable.setStatus('mandatory')
if mibBuilder.loadTexts: authTable.setDescription('The entries for the authentication table.')
authEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 1, 1), ).setIndexNames((0, "RMONitor-MIB", "authCommunity"))
if mibBuilder.loadTexts: authEntry.setStatus('mandatory')
if mibBuilder.loadTexts: authEntry.setDescription('The entries for authentication table.')
authCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 1, 1, 1), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: authCommunity.setDescription('The community string identifying an authentic/authorized manager.')
authTypeAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-applicable", 1), ("monitor", 2), ("not-applicable", 3), ("primary", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authTypeAccess.setStatus('mandatory')
if mibBuilder.loadTexts: authTypeAccess.setDescription('The type of access allowed for the community string identifying an authentic/authorized manager.')
authActions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 1), ("add", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authActions.setStatus('mandatory')
if mibBuilder.loadTexts: authActions.setDescription('The action on a row of the authentication table.')
subscriptTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 2), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscriptTable.setStatus('mandatory')
if mibBuilder.loadTexts: subscriptTable.setDescription('The entries for the subscription table.')
subscriptEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 2, 1), ).setMaxAccess("readwrite").setIndexNames((0, "RMONitor-MIB", "subscriptIpAddress"))
if mibBuilder.loadTexts: subscriptEntry.setStatus('mandatory')
if mibBuilder.loadTexts: subscriptEntry.setDescription('The entries for subscription table.')
subscriptIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 2, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscriptIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: subscriptIpAddress.setDescription('The IP address of the manager subscribing to traps.')
subscriptCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscriptCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: subscriptCommunity.setDescription('The community string to be used in trap PDUs sent to the subscribing manager.')
subscriptActions = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("not-applicable", 1), ("add", 2), ("delete", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: subscriptActions.setStatus('mandatory')
if mibBuilder.loadTexts: subscriptActions.setDescription('The action on a row of the subscription table.')
authFailTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 3), ).setMaxAccess("readwrite")
if mibBuilder.loadTexts: authFailTable.setStatus('mandatory')
if mibBuilder.loadTexts: authFailTable.setDescription('The entries for the authentication failure table.')
authFailEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 3, 1), ).setMaxAccess("readwrite").setIndexNames((0, "RMONitor-MIB", "authFailIndex"))
if mibBuilder.loadTexts: authFailEntry.setStatus('mandatory')
if mibBuilder.loadTexts: authFailEntry.setDescription('The entries for authentication failure table.')
authFailIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authFailIndex.setStatus('mandatory')
if mibBuilder.loadTexts: authFailIndex.setDescription('The index for this entry in the authentication failure table.')
authFailIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authFailIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: authFailIPAddress.setDescription('The IP address of the manager that sent the SNMP request that caused the authentication failure.')
authFailCommunity = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authFailCommunity.setStatus('mandatory')
if mibBuilder.loadTexts: authFailCommunity.setDescription('The community string used in the SNMP request that caused the authentication failure.')
protocolDistControlTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 1), )
if mibBuilder.loadTexts: protocolDistControlTable.setStatus('mandatory')
if mibBuilder.loadTexts: protocolDistControlTable.setDescription('')
protocolDistControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 1, 1), ).setIndexNames((0, "RMONitor-MIB", "protocolDistControlIndex"))
if mibBuilder.loadTexts: protocolDistControlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: protocolDistControlEntry.setDescription('')
protocolDistControlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistControlIndex.setStatus('mandatory')
if mibBuilder.loadTexts: protocolDistControlIndex.setDescription('')
protocolDistControlDataSource = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolDistControlDataSource.setStatus('mandatory')
if mibBuilder.loadTexts: protocolDistControlDataSource.setDescription('This object identifies the source of the data for which protocol distribution data is collected. This source can be any interface on this device. In order to identify a particular interface, this object shall identify the instance of the ifIndex object, for the desired interface. For example, if an entry were to receive data from interface #1, this object would be set to ifIndex.1. This object may not be modified if the associated protocolDistControlStatus object is equal to valid(1).')
protocolDistControlLastDeleteTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 1, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistControlLastDeleteTime.setStatus('mandatory')
if mibBuilder.loadTexts: protocolDistControlLastDeleteTime.setDescription('')
protocolDistControlOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 1, 1, 4), OwnerString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolDistControlOwner.setStatus('mandatory')
if mibBuilder.loadTexts: protocolDistControlOwner.setDescription('The entity that created this entry in the protocol distribution control table, and is therefore using the resources associated with it.')
protocolDistControlStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 1, 1, 5), EntryStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: protocolDistControlStatus.setStatus('mandatory')
if mibBuilder.loadTexts: protocolDistControlStatus.setDescription('The status of this protocol distribution control entry.')
protocolDistTable = MibTable((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 2), )
if mibBuilder.loadTexts: protocolDistTable.setStatus('mandatory')
if mibBuilder.loadTexts: protocolDistTable.setDescription("A table of protocol types and associated counts including entries for each different protocol seen by the monitor. Note that protocols are identified by examining the 'ethertype' field of DIX Ethernet frames, the SNAP protocol on IEEE 802 network frames, or the DSAP field of the LLC protocol, also found on IEEE 802 networks.")
protocolDistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 2, 1), ).setIndexNames((0, "RMONitor-MIB", "protocolDistIndex"), (0, "RMONitor-MIB", "protocolDistEthertype"))
if mibBuilder.loadTexts: protocolDistEntry.setStatus('mandatory')
if mibBuilder.loadTexts: protocolDistEntry.setDescription('A set of counts maintained for each different protocol seen by the agent.')
protocolDistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistIndex.setStatus('mandatory')
if mibBuilder.loadTexts: protocolDistIndex.setDescription('A value uniquely identifying this protocol distribution control table entry.')
protocolDistEthertype = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistEthertype.setStatus('mandatory')
if mibBuilder.loadTexts: protocolDistEthertype.setDescription("A protocol type identified by the 'ethertype' field found in DIX Ethernet, or in the SNAP protocol on IEEE 802 networks or the DSAP protocol on 802.5 networks.")
protocolDistPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistPkts.setStatus('mandatory')
if mibBuilder.loadTexts: protocolDistPkts.setDescription('A count of the number of packets seen using the protocol identified by the corresponding protocolDistEthertype.')
protocolDistOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2, 6, 45, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: protocolDistOctets.setStatus('mandatory')
if mibBuilder.loadTexts: protocolDistOctets.setDescription('A count of the number of octets in packets seen using the protocol identified by the corresponding protocolDistEthertype.')
mibBuilder.exportSymbols("RMONitor-MIB", rmonitor=rmonitor, security=security, protocolDistPkts=protocolDistPkts, ibm=ibm, protocolDistEthertype=protocolDistEthertype, subscriptActions=subscriptActions, authCommunity=authCommunity, subscriptEntry=subscriptEntry, authFailTable=authFailTable, authFailIPAddress=authFailIPAddress, subscriptCommunity=subscriptCommunity, protocolDistControlDataSource=protocolDistControlDataSource, protocolDistControlOwner=protocolDistControlOwner, protocolDistControlLastDeleteTime=protocolDistControlLastDeleteTime, EntryStatus=EntryStatus, protocolDistControlStatus=protocolDistControlStatus, authEntry=authEntry, ibmProd=ibmProd, protocolDistIndex=protocolDistIndex, subscriptTable=subscriptTable, protocolDistControlTable=protocolDistControlTable, authActions=authActions, mib_2=mib_2, authFailEntry=authFailEntry, protocols=protocols, protocolDistOctets=protocolDistOctets, authFailIndex=authFailIndex, OwnerString=OwnerString, authTable=authTable, authFailCommunity=authFailCommunity, protocolDistTable=protocolDistTable, authTypeAccess=authTypeAccess, subscriptIpAddress=subscriptIpAddress, protocolDistControlEntry=protocolDistControlEntry, protocolDistEntry=protocolDistEntry, protocolDistControlIndex=protocolDistControlIndex)
