#
# PySNMP MIB module TERAWAVE-teratca-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TERAWAVE-teratca-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:16:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, ModuleIdentity, enterprises, TimeTicks, ObjectIdentity, Counter64, IpAddress, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Integer32, iso, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "ModuleIdentity", "enterprises", "TimeTicks", "ObjectIdentity", "Counter64", "IpAddress", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Integer32", "iso", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
terawave = MibIdentifier((1, 3, 6, 1, 4, 1, 4513))
teratraps = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 1))
teraTCA = MibIdentifier((1, 3, 6, 1, 4, 1, 4513, 1, 4))
teraTcaTable = MibTable((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1), )
if mibBuilder.loadTexts: teraTcaTable.setStatus('mandatory')
if mibBuilder.loadTexts: teraTcaTable.setDescription(' table teraTcaTable')
teraTcaTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1), ).setIndexNames((0, "TERAWAVE-teratca-MIB", "teraTcaIndex"))
if mibBuilder.loadTexts: teraTcaTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: teraTcaTableEntry.setDescription(' table entry teraTcaTableEntry ')
teraTcaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTcaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: teraTcaIndex.setDescription('')
teraTcaInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("duration-15m", 1), ("duration-1day", 2), ("duration-Var", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaInterval.setStatus('mandatory')
if mibBuilder.loadTexts: teraTcaInterval.setDescription('')
teraTcaVariable = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 3), ObjectIdentifier()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaVariable.setStatus('mandatory')
if mibBuilder.loadTexts: teraTcaVariable.setDescription('')
teraTcaIntervalSec = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaIntervalSec.setStatus('mandatory')
if mibBuilder.loadTexts: teraTcaIntervalSec.setDescription('')
teraTcaValue = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: teraTcaValue.setStatus('mandatory')
if mibBuilder.loadTexts: teraTcaValue.setDescription('')
teraTcaType = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("risingTca", 1), ("fallingTca", 2), ("risingOrFalingTca", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaType.setStatus('mandatory')
if mibBuilder.loadTexts: teraTcaType.setDescription('')
teraTcaRisingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaRisingThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: teraTcaRisingThreshold.setDescription('')
teraTcaFallingThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaFallingThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: teraTcaFallingThreshold.setDescription('')
teraTcaRisingEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcaTrap", 1), ("tcaLog", 2), ("tcaIgnore", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaRisingEvent.setStatus('mandatory')
if mibBuilder.loadTexts: teraTcaRisingEvent.setDescription('')
teraTcaFallingEvent = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tcaTrap", 1), ("tcaLog", 2), ("tcaIgnore", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaFallingEvent.setStatus('mandatory')
if mibBuilder.loadTexts: teraTcaFallingEvent.setDescription('')
teraTcaOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 11), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaOwner.setStatus('mandatory')
if mibBuilder.loadTexts: teraTcaOwner.setDescription('')
teraTcaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 4513, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("valid", 1), ("createdRequest", 2), ("underCreation", 3), ("invalid", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: teraTcaStatus.setStatus('mandatory')
if mibBuilder.loadTexts: teraTcaStatus.setDescription('')
mibBuilder.exportSymbols("TERAWAVE-teratca-MIB", teraTcaStatus=teraTcaStatus, teraTcaTable=teraTcaTable, teraTcaTableEntry=teraTcaTableEntry, teraTcaInterval=teraTcaInterval, teratraps=teratraps, teraTcaIntervalSec=teraTcaIntervalSec, teraTcaIndex=teraTcaIndex, teraTcaVariable=teraTcaVariable, teraTcaOwner=teraTcaOwner, teraTCA=teraTCA, teraTcaFallingThreshold=teraTcaFallingThreshold, teraTcaRisingEvent=teraTcaRisingEvent, teraTcaType=teraTcaType, teraTcaFallingEvent=teraTcaFallingEvent, teraTcaValue=teraTcaValue, terawave=terawave, teraTcaRisingThreshold=teraTcaRisingThreshold)
