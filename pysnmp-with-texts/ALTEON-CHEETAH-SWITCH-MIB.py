#
# PySNMP MIB module ALTEON-CHEETAH-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ALTEON-CHEETAH-SWITCH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:20:59 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
aws_switch, = mibBuilder.importSymbols("ALTEON-ROOT-MIB", "aws-switch")
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, Unsigned32, iso, NotificationType, Counter64, MibIdentifier, Integer32, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter32, IpAddress, Gauge32, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Unsigned32", "iso", "NotificationType", "Counter64", "MibIdentifier", "Integer32", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter32", "IpAddress", "Gauge32", "ModuleIdentity")
DisplayString, TextualConvention, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "PhysAddress")
agent = ModuleIdentity((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1))
agent.setRevisions(('2004-09-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: agent.setRevisionsDescriptions(('Added revision clause for SMIv2 compliance.',))
if mibBuilder.loadTexts: agent.setLastUpdated('200409010000Z')
if mibBuilder.loadTexts: agent.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: agent.setContactInfo('Rekha Singamsetty Suresh Batchu Nortel Networks 4655 Great America Parkway Santa Clara CA 95054 +1 408 495 2400 rrekha@nortelnetworks.com sbatchu@nortelnetworks.com')
if mibBuilder.loadTexts: agent.setDescription('The MIB module for the Alteon OS Switch.')
agentConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1))
agentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2))
agentInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3))
agentOper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4))
agSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1))
agPortConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2))
agRadiusConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3))
agNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4))
agSyslog = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5))
agTrapHost = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6))
agTftp = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7))
agApply = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8))
agMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9))
agSslproc = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10))
agTacacsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11))
agMgmtNetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12))
agBoot = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 13))
agSecurity = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14))
agSonmp = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 15))
agPortAccessCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16))
agSave = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 17))
agFileTransfer = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18))
agPgroup = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1))
ipAclCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3))
udpBlastCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4))
secGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5))
dosAttackPrevCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6))
ipDstAclCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7))
symantecCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8))
pktStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1))
mpCpuStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 2))
portStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3))
spStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4))
mgmtStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5))
securityStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6))
agClearStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 7))
mpMemStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 8))
ntpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9))
portMirrorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1))
portInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2))
swKeyInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3))
agDiff = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 4))
agCfgDump = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 5))
mgmtInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 6))
securityInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7))
capacityInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9))
agNTPOper = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4, 2))
hwPartNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPartNumber.setStatus('current')
if mibBuilder.loadTexts: hwPartNumber.setDescription('The hardware part number of the Alteon Switch.')
hwRevision = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRevision.setStatus('current')
if mibBuilder.loadTexts: hwRevision.setDescription('The hardware revision. If the revision is not available, a zero length string should be returned.')
hwTemperatureStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("exceed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTemperatureStatus.setStatus('current')
if mibBuilder.loadTexts: hwTemperatureStatus.setDescription('The status of the temperature sensor.')
hwFanStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwFanStatus.setStatus('current')
if mibBuilder.loadTexts: hwFanStatus.setDescription('The status of the fan.')
switchCapL2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1))
switchCapL3Info = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2))
switchCapSlbInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3))
switchCapSlbPortInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4))
switchCapBwmInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5))
switchCapSecInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6))
switchCapGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7))
switchCapFDBMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapFDBMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapFDBMaxEnt.setDescription('Maximum number of entries for FDB in device.')
switchCapFDBCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapFDBCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapFDBCurrEnt.setDescription('Current number of entries for FDB in device.')
switchCapFDBPerSPMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapFDBPerSPMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapFDBPerSPMaxEnt.setDescription('Maximun number of entries for FDB per SP in device.')
switchCapVlanMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVlanMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapVlanMaxEnt.setDescription('Maximum number of entries for vlan in device.')
switchCapVlanCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVlanCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapVlanCurrEnt.setDescription("Current number of entries for vlan in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapStaticTrunkGrpsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapStaticTrunkGrpsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapStaticTrunkGrpsMaxEnt.setDescription('Maximum number of entries for static trunk groups in device.')
switchCapStaticTrunkGrpsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapStaticTrunkGrpsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapStaticTrunkGrpsCurrEnt.setDescription("Current number of entries for static trunk groups in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapLACPTrunkGRs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapLACPTrunkGRs.setStatus('current')
if mibBuilder.loadTexts: switchCapLACPTrunkGRs.setDescription('LACP Trunk groups in device.')
switchCapTrunksperTrunkGR = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapTrunksperTrunkGR.setStatus('current')
if mibBuilder.loadTexts: switchCapTrunksperTrunkGR.setDescription('Trunks per trunk group in device.')
switchCapSTGsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSTGsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapSTGsMaxEnt.setDescription('Maximum number of entries for STG in device.')
switchCapSTGsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSTGsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapSTGsCurrEnt.setDescription("Current number of entries for STG in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapPortTeamsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapPortTeamsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapPortTeamsMaxEnt.setDescription('Maximum number of entries for port teams in device.')
switchCapPortTeamsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapPortTeamsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapPortTeamsCurrEnt.setDescription("Current number of entries for port teams in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapMonitorPorts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapMonitorPorts.setStatus('current')
if mibBuilder.loadTexts: switchCapMonitorPorts.setDescription('Maximum number of monitor ports.')
switchCapIpIntfMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpIntfMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapIpIntfMaxEnt.setDescription('Maximum number of entries for interfaces in device.')
switchCapIpIntfCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpIntfCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapIpIntfCurrEnt.setDescription("Current number of entries for interfaces in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapIpGWMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpGWMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapIpGWMaxEnt.setDescription("Maximum number of entries for gateways in device, the value is in the form x+y where 'x' indicates number of default gateways and 'y' indicates number of VLAN gateways.")
switchCapIpGWCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpGWCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapIpGWCurrEnt.setDescription("Current number of entries for gateways in device, the value is in the form x+y(a+b) where 'x' indicates number of current default gateways, 'y' indicates number of current VLAN gateways, 'a' indicates number of enabled default gateways, 'b' indicates number of enabled VLAN gateways only.")
switchCapIpRoutesMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpRoutesMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapIpRoutesMaxEnt.setDescription('Maximum number of entries for routes in device.')
switchCapIpRoutesCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpRoutesCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapIpRoutesCurrEnt.setDescription('Current number of entries for routes in device.')
switchCapIpStaticRoutesMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpStaticRoutesMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapIpStaticRoutesMaxEnt.setDescription('Maximum number of entries for static routes in device.')
switchCapIpStaticRoutesCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpStaticRoutesCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapIpStaticRoutesCurrEnt.setDescription('Current number of entries for static routes in device.')
switchCapIpARPMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpARPMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapIpARPMaxEnt.setDescription('Maximum number of entries for ARP in device.')
switchCapIpARPCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpARPCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapIpARPCurrEnt.setDescription('Current number of entries for ARP in device.')
switchCapIpStaticARPMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpStaticARPMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapIpStaticARPMaxEnt.setDescription('Maximum number of entries for static ARP in device.')
switchCapIpStaticARPCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIpStaticARPCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapIpStaticARPCurrEnt.setDescription('Current number of entries for static ARP in device.')
switchCapLocNetsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapLocNetsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapLocNetsMaxEnt.setDescription('Maximum number of entries for local nets in device.')
switchCapLocNetsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapLocNetsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapLocNetsCurrEnt.setDescription('Current number of entries for local nets in device.')
switchCapDNSSerMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapDNSSerMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapDNSSerMaxEnt.setDescription('Maximum number of entries for DNS servers in device.')
switchCapDNSSerCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapDNSSerCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapDNSSerCurrEnt.setDescription('Current number of entries for DNS servers in device.')
switchCapBootpSerMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapBootpSerMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapBootpSerMaxEnt.setDescription('Maximum number of entries for BOOTP servers in device.')
switchCapBootpSerCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapBootpSerCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapBootpSerCurrEnt.setDescription('Current number of entries for BOOTP servers in device.')
switchCapRIPIntfMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRIPIntfMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapRIPIntfMaxEnt.setDescription('Maximum number of entries of RIP interfaces in device.')
switchCapRIPIntfCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRIPIntfCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapRIPIntfCurrEnt.setDescription('Current number of entries of RIP interfaces in device.')
switchCapOSPFIntfMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFIntfMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapOSPFIntfMaxEnt.setDescription('Maximum number of entries for OSPF interfaces in device.')
switchCapOSPFIntfCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFIntfCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapOSPFIntfCurrEnt.setDescription("Current number of entries for OSPF interfaces in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapOSPFAreasMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFAreasMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapOSPFAreasMaxEnt.setDescription('Maximum number of entries for OSPF areas in device.')
switchCapOSPFAreasCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFAreasCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapOSPFAreasCurrEnt.setDescription("Current number of entries for OSPF areas in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapOSPFSummaryRangesMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFSummaryRangesMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapOSPFSummaryRangesMaxEnt.setDescription('Maximum number of entries for OSPF summary ranges in device.')
switchCapOSPFSummaryRangesCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFSummaryRangesCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapOSPFSummaryRangesCurrEnt.setDescription("Current number of entries for OSPF summary ranges in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapOSPFVirtLinksMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFVirtLinksMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapOSPFVirtLinksMaxEnt.setDescription('Maximum number of entries for OSPF virtual links in device.')
switchCapOSPFVirtLinksCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFVirtLinksCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapOSPFVirtLinksCurrEnt.setDescription("Current number of entries for OSPF virtual links in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapOSPFHostsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFHostsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapOSPFHostsMaxEnt.setDescription('Maximum number of entries for OSPF hosts in device.')
switchCapOSPFHostsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapOSPFHostsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapOSPFHostsCurrEnt.setDescription("Current number of entries for OSPF hosts in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapLSDBLimit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapLSDBLimit.setStatus('current')
if mibBuilder.loadTexts: switchCapLSDBLimit.setDescription('LSDB limit in device.')
switchCapBGPPeersMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapBGPPeersMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapBGPPeersMaxEnt.setDescription('Maximum number of entries for BGP peers in device.')
switchCapBGPPeersCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapBGPPeersCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapBGPPeersCurrEnt.setDescription("Current number of entries for BGP peers in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapBGPRouteAggrsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapBGPRouteAggrsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapBGPRouteAggrsMaxEnt.setDescription('Maximum number of entries for BGP route aggregators in device.')
switchCapBGPRouteAggrsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapBGPRouteAggrsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapBGPRouteAggrsCurrEnt.setDescription("Current number of entries for BGP route aggregators in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapRouteMapsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRouteMapsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapRouteMapsMaxEnt.setDescription('Maximum number of entries for route maps in device.')
switchCapRouteMapsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 37), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRouteMapsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapRouteMapsCurrEnt.setDescription("Current number of entries for route maps in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapNwkFltsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapNwkFltsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapNwkFltsMaxEnt.setDescription('Maximum number of entries for network filters in device.')
switchCapNwkFltsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 39), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapNwkFltsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapNwkFltsCurrEnt.setDescription("Current number of entries for network filters in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapASFlts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapASFlts.setStatus('current')
if mibBuilder.loadTexts: switchCapASFlts.setDescription('Maximum number of entries for AS filters in device.')
switchCapVRRPRtrsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVRRPRtrsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapVRRPRtrsMaxEnt.setDescription('Maximum number of entries for VRRP routers in device.')
switchCapVRRPRtrsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 42), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVRRPRtrsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapVRRPRtrsCurrEnt.setDescription("Current number of entries for VRRP routers in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapVRRPRtrGRsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVRRPRtrGRsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapVRRPRtrGRsMaxEnt.setDescription('Maximum number of entries for VRRP router groups in device.')
switchCapVRRPRtrGRsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 44), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVRRPRtrGRsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapVRRPRtrGRsCurrEnt.setDescription("Current number of entries for VRRP router groups in device,the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapVRRPIntfsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVRRPIntfsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapVRRPIntfsMaxEnt.setDescription('Maximum number of entries for VRRP interfaces in device.')
switchCapVRRPIntfsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 2, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVRRPIntfsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapVRRPIntfsCurrEnt.setDescription('Current number of entries for VRRP interfaces in device.')
switchCapRealSersMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRealSersMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapRealSersMaxEnt.setDescription('Maximum number of entries for real servers in device.')
switchCapRealSersCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRealSersCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapRealSersCurrEnt.setDescription("Current number of entries for real servers in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapSerGRsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSerGRsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapSerGRsMaxEnt.setDescription('Maximum number of entries for real server groups in device.')
switchCapSerGRsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSerGRsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapSerGRsCurrEnt.setDescription('Current number of entries for real server groups in device.')
switchCapVirtSersMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVirtSersMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapVirtSersMaxEnt.setDescription('Maximum number of entries for virtual servers in device.')
switchCapVirtSersCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVirtSersCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapVirtSersCurrEnt.setDescription("Current number of entries for virtual servers in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapVirtServicesEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapVirtServicesEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapVirtServicesEnt.setDescription('Maximum number of entries for virtual services in device.')
switchCapRealServicesEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRealServicesEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapRealServicesEnt.setDescription('Current number of entries for real services in device.')
switchCapRealIDSSer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRealIDSSer.setStatus('current')
if mibBuilder.loadTexts: switchCapRealIDSSer.setDescription('Maximum number of entries for real IDS servers.')
switchCapIDSSerGRs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapIDSSerGRs.setStatus('current')
if mibBuilder.loadTexts: switchCapIDSSerGRs.setDescription('Maximum number of entries for IDS server groups.')
switchCapGSLBDomainsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBDomainsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBDomainsMaxEnt.setDescription('Maximum number of entries for global SLB domains in device.')
switchCapGSLBDomainsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBDomainsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBDomainsCurrEnt.setDescription("Current number of entries for global SLB domains in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapGSLBServicesMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBServicesMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBServicesMaxEnt.setDescription('Maximum number of entries for global SLB services in device.')
switchCapGSLBServicesCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBServicesCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBServicesCurrEnt.setDescription("Current number of entries for global SLB services in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapGSLBLocSersMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBLocSersMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBLocSersMaxEnt.setDescription('Maximum number of entries for global SLB local servers in device.')
switchCapGSLBLocSersCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBLocSersCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBLocSersCurrEnt.setDescription("Current number of entries for global SLB local servers in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapGSLBRemSersMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBRemSersMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBRemSersMaxEnt.setDescription('Maximum number of entries for global SLB remote servers in device.')
switchCapGSLBRemSersCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBRemSersCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBRemSersCurrEnt.setDescription("Current number of entries for global SLB remote servers in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapGSLBRemSitesMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBRemSitesMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBRemSitesMaxEnt.setDescription('Maximum number of entries for global SLB sites in device.')
switchCapGSLBRemSitesCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBRemSitesCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBRemSitesCurrEnt.setDescription("Current number of entries for global SLB sites in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapGSLBFailoversPerRemSiteMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBFailoversPerRemSiteMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBFailoversPerRemSiteMaxEnt.setDescription('Maximum number of entries for global SLB failovers per site in device.')
switchCapGSLBFailoversPerRemSiteCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBFailoversPerRemSiteCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBFailoversPerRemSiteCurrEnt.setDescription("Current number of entries for global SLB failovers per site in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapGSLBNetworksMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBNetworksMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBNetworksMaxEnt.setDescription('Maximum number of entries for global SLB networks in device.')
switchCapGSLBNetworksCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 24), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBNetworksCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBNetworksCurrEnt.setDescription("Current number of entries for global SLB networks in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapGSLBGeographicalRegionsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBGeographicalRegionsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBGeographicalRegionsMaxEnt.setDescription('Maximum number of entries for global geographical regions in device.')
switchCapGSLBGeographicalRegionsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 26), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBGeographicalRegionsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBGeographicalRegionsCurrEnt.setDescription("Current number of entries for global geographical regions in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapGSLBRulesMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBRulesMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBRulesMaxEnt.setDescription('Maximum number of entries for global SLB rules in device.')
switchCapGSLBRulesCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBRulesCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBRulesCurrEnt.setDescription("Current number of entries for global SLB rules in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapGSLBMetricsPerRuleMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBMetricsPerRuleMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBMetricsPerRuleMaxEnt.setDescription('Maximum number of entries for global SLB metrics per rule in device.')
switchCapGSLBMetricPerRuleCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBMetricPerRuleCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBMetricPerRuleCurrEnt.setDescription("Current number of entries for global SLB metrics per rule in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapGSLBDNSPersCacheMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBDNSPersCacheMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBDNSPersCacheMaxEnt.setDescription('Maximum number of entries for global SLB DNS persistence cache in device.')
switchCapGSLBDNSPersCacheCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 32), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapGSLBDNSPersCacheCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapGSLBDNSPersCacheCurrEnt.setDescription("Current number of entries for global SLB DNS persistence cache in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapFltsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapFltsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapFltsMaxEnt.setDescription('Maximum number of entries for filters in device.')
switchCapFltsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapFltsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapFltsCurrEnt.setDescription("Current number of entries for filters in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapPIPsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapPIPsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapPIPsMaxEnt.setDescription('Maximum number of entries for PIPs in device.')
switchCapPIPsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapPIPsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapPIPsCurrEnt.setDescription('Current number of entries for pips in device.')
switchCapScriptHealthChecksMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapScriptHealthChecksMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapScriptHealthChecksMaxEnt.setDescription('Maximum number of entries for scriptable health checks in device.')
switchCapScriptHealthChecksCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapScriptHealthChecksCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapScriptHealthChecksCurrEnt.setDescription('Current number of entries for scriptable health checks in device.')
switchCapSNMPHealthChecksMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSNMPHealthChecksMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapSNMPHealthChecksMaxEnt.setDescription('Maximum number of entries for SNMP health checks in device.')
switchCapSNMPHealthChecksCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSNMPHealthChecksCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapSNMPHealthChecksCurrEnt.setDescription('Current number of entries for snmp health checks in device.')
switchCapRulesforURLParsingMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRulesforURLParsingMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapRulesforURLParsingMaxEnt.setDescription('Maximum number of entries for rules for URL parsing in device.')
switchCapRulesforURLParsingCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapRulesforURLParsingCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapRulesforURLParsingCurrEnt.setDescription('Current number of entries for rules for URL parsing in device.')
switchCapSLBSessionsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSLBSessionsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapSLBSessionsMaxEnt.setDescription('Maximum number of entries for SLB sessions in device.')
switchCapSLBSessionsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSLBSessionsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapSLBSessionsCurrEnt.setDescription('Current number of entries for SLB sessions in device.')
switchCapNumofRportstoVport = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapNumofRportstoVport.setStatus('current')
if mibBuilder.loadTexts: switchCapNumofRportstoVport.setDescription('Maximum number of rports to vport.')
switchCapDomianRecordsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapDomianRecordsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapDomianRecordsMaxEnt.setDescription('Maximum number of entries for domain records in device.')
switchCapDomainRecordsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 47), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapDomainRecordsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: switchCapDomainRecordsCurrEnt.setDescription("Current number of entries for domain records in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
switchCapMappingPerDomainrecord = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 3, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapMappingPerDomainrecord.setStatus('current')
if mibBuilder.loadTexts: switchCapMappingPerDomainrecord.setDescription('Maximum number of entries for mapping per domain record in device.')
switchCapSlbPortInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4, 1), )
if mibBuilder.loadTexts: switchCapSlbPortInfoTable.setStatus('current')
if mibBuilder.loadTexts: switchCapSlbPortInfoTable.setDescription('The table of slb port information.')
switchCapSlbPortInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "switchCapSlbPortInfoIndx"))
if mibBuilder.loadTexts: switchCapSlbPortInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: switchCapSlbPortInfoTableEntry.setDescription('A row in the slb port information table.')
switchCapSlbPortInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSlbPortInfoIndx.setStatus('current')
if mibBuilder.loadTexts: switchCapSlbPortInfoIndx.setDescription('Index of switch port.')
switchCapSlbPortClientState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSlbPortClientState.setStatus('current')
if mibBuilder.loadTexts: switchCapSlbPortClientState.setDescription('Client state on the switch port.')
switchCapSlbPortSerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSlbPortSerState.setStatus('current')
if mibBuilder.loadTexts: switchCapSlbPortSerState.setDescription('Server state on the switch port.')
switchCapSlbPortFltState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSlbPortFltState.setStatus('current')
if mibBuilder.loadTexts: switchCapSlbPortFltState.setDescription('It is in the form E(x) where filter is enabled on the port and x is the number of filters configured for port. Otherwise disable.')
switchCapSlbPortRTSState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: switchCapSlbPortRTSState.setStatus('current')
if mibBuilder.loadTexts: switchCapSlbPortRTSState.setDescription('RTS processing state on the switch port.')
bwmPoliciesMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmPoliciesMaxEnt.setStatus('current')
if mibBuilder.loadTexts: bwmPoliciesMaxEnt.setDescription('Maximum number of entries for bwm policies in device .')
bwmPoliciesCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmPoliciesCurrEnt.setStatus('current')
if mibBuilder.loadTexts: bwmPoliciesCurrEnt.setDescription('Current number of entries for bwm policies in device.')
bwmContsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmContsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: bwmContsMaxEnt.setDescription('Maximum number of entries for bwm contracts in device.')
bwmContsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmContsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: bwmContsCurrEnt.setDescription("Current number of entries for bwm contracts in device, the value is in the form x(y) where 'x' indicates number of current entries and 'y' indicates number of enabled entries only.")
bwmGRsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmGRsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: bwmGRsMaxEnt.setDescription('Maximum number of entries for bwm groups in device.')
bwmGRsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmGRsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: bwmGRsCurrEnt.setDescription('Current number of entries for bwm groups in device.')
bwmContsPerGRs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmContsPerGRs.setStatus('current')
if mibBuilder.loadTexts: bwmContsPerGRs.setDescription('Maximum number of entries for bwm contracts per group in device.')
bwmTimePoliciesPerCont = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bwmTimePoliciesPerCont.setStatus('current')
if mibBuilder.loadTexts: bwmTimePoliciesPerCont.setDescription('Current number of entries for bwm time policies per contract.')
configSrcIPACLsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configSrcIPACLsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: configSrcIPACLsMaxEnt.setDescription('Maximum number of entries for configuration source IP ACLs.')
configSrcIPACLsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configSrcIPACLsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: configSrcIPACLsCurrEnt.setDescription('Current number of entries for configuration source IP ACLs.')
bogonSrcIPACLsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bogonSrcIPACLsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: bogonSrcIPACLsMaxEnt.setDescription('Maximum number of entries for bogon source IP ACLs.')
bogonSrcIPACLsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bogonSrcIPACLsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: bogonSrcIPACLsCurrEnt.setDescription('Current number of entries for bogon source IP ACLs.')
operSrcIPACLsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operSrcIPACLsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: operSrcIPACLsMaxEnt.setDescription('Maximum number of entries for operation source IP ACLs.')
operSrcIPACLsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operSrcIPACLsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: operSrcIPACLsCurrEnt.setDescription('Current number of entries for operaion source IP ACLs.')
totalSrcIPACLsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSrcIPACLsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: totalSrcIPACLsMaxEnt.setDescription('Maximum number of entries for total source IP ACLs.')
totalSrcIPACLsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalSrcIPACLsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: totalSrcIPACLsCurrEnt.setDescription('Current number of entries for total source IP ACLs.')
configDstIPACLsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configDstIPACLsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: configDstIPACLsMaxEnt.setDescription('Maximum number of entries for configuration destination IP ACLs.')
configDstIPACLsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: configDstIPACLsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: configDstIPACLsCurrEnt.setDescription('Current number of entries for configuration destination IP ACLs.')
operDstIPACLsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operDstIPACLsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: operDstIPACLsMaxEnt.setDescription('Maximum number of entries for operation destination IP ACLs.')
operDstIPACLsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: operDstIPACLsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: operDstIPACLsCurrEnt.setDescription('Current number of entries for operaion destination IP ACLs.')
totalDstIPACLsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDstIPACLsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: totalDstIPACLsMaxEnt.setDescription('Maximum number of entries for total destination IP ACLs.')
totalDstIPACLsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDstIPACLsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: totalDstIPACLsCurrEnt.setDescription('Current number of entries for total destination IP ACLs.')
ipDosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDosAtkPrevention.setStatus('current')
if mibBuilder.loadTexts: ipDosAtkPrevention.setDescription('Maximum number of entries for IP DOS attack prevention.')
tcpDosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tcpDosAtkPrevention.setStatus('current')
if mibBuilder.loadTexts: tcpDosAtkPrevention.setDescription('Maximum number of entries for TCP DOS attack prevention.')
udpDosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpDosAtkPrevention.setStatus('current')
if mibBuilder.loadTexts: udpDosAtkPrevention.setDescription('Maximum number of entries for UDP DOS attack prevention.')
icmpDosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: icmpDosAtkPrevention.setStatus('current')
if mibBuilder.loadTexts: icmpDosAtkPrevention.setDescription('Maximum number of entries for ICMP DOS attack prevention.')
igmpDosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpDosAtkPrevention.setStatus('current')
if mibBuilder.loadTexts: igmpDosAtkPrevention.setDescription('Maximum number of entries for IGMP DOS attack prevention.')
arpDosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpDosAtkPrevention.setStatus('current')
if mibBuilder.loadTexts: arpDosAtkPrevention.setDescription('Maximum number of entries for ARP DOS attack prevention.')
ipv6DosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipv6DosAtkPrevention.setStatus('current')
if mibBuilder.loadTexts: ipv6DosAtkPrevention.setDescription('Maximum number of entries for ipv6 DOS attack prevention.')
totalDosAtkPrevention = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDosAtkPrevention.setStatus('current')
if mibBuilder.loadTexts: totalDosAtkPrevention.setDescription('Total number of entries for DOS attack preventions.')
udpBlastProtection = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 6, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastProtection.setStatus('current')
if mibBuilder.loadTexts: udpBlastProtection.setDescription('Specifies UDP ports for UDP blast protection.')
syslogHostMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogHostMaxEnt.setStatus('current')
if mibBuilder.loadTexts: syslogHostMaxEnt.setDescription('Maximum number of entries for syslog hosts in device.')
syslogHostCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: syslogHostCurrEnt.setStatus('current')
if mibBuilder.loadTexts: syslogHostCurrEnt.setDescription('Current number of entries for syslog hosts in device.')
radiusSerMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSerMaxEnt.setStatus('current')
if mibBuilder.loadTexts: radiusSerMaxEnt.setDescription('Maximum number of entries for radius servers in device .')
radiusSerCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radiusSerCurrEnt.setStatus('current')
if mibBuilder.loadTexts: radiusSerCurrEnt.setDescription('Current number of entries for radius servers in device.')
tacacsSerMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacacsSerMaxEnt.setStatus('current')
if mibBuilder.loadTexts: tacacsSerMaxEnt.setDescription('Maximum number of entries for tacacs+ server in device.')
tacacsSerCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacacsSerCurrEnt.setStatus('current')
if mibBuilder.loadTexts: tacacsSerCurrEnt.setDescription('Current number of entries for tacacs+ server in device.')
ntpSerMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSerMaxEnt.setStatus('current')
if mibBuilder.loadTexts: ntpSerMaxEnt.setDescription('Maximum number of entries for ntp servers in device .')
ntpSerCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSerCurrEnt.setStatus('current')
if mibBuilder.loadTexts: ntpSerCurrEnt.setDescription('Current number of entries for ntp servers in device.')
smtpHostsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpHostsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: smtpHostsMaxEnt.setDescription('Maximum number of entries for smtp hosts in device.')
smtpHostsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: smtpHostsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: smtpHostsCurrEnt.setDescription('Current number of entries for smtp hosts in device.')
mgmtNetworksMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtNetworksMaxEnt.setStatus('current')
if mibBuilder.loadTexts: mgmtNetworksMaxEnt.setDescription('Maximum number of entries for management networks in device .')
mgmtNetworksCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtNetworksCurrEnt.setStatus('current')
if mibBuilder.loadTexts: mgmtNetworksCurrEnt.setDescription('Current number of entries for management networks in device.')
endUsers = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endUsers.setStatus('current')
if mibBuilder.loadTexts: endUsers.setDescription('Maximum number of entries for end users in device.')
panicDumps = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: panicDumps.setStatus('current')
if mibBuilder.loadTexts: panicDumps.setDescription('Maximum panic dumps in device.')
mpMemory = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpMemory.setStatus('current')
if mibBuilder.loadTexts: mpMemory.setDescription('Total capacity of MP memory in MBs in device.')
spMemory = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemory.setStatus('current')
if mibBuilder.loadTexts: spMemory.setDescription('Total capacity of SP memory in MBs in device.')
snmpv3UsersMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3UsersMaxEnt.setStatus('current')
if mibBuilder.loadTexts: snmpv3UsersMaxEnt.setDescription('Maximum number of entries for snmpv3 users in device.')
snmpv3UsersCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3UsersCurrEnt.setStatus('current')
if mibBuilder.loadTexts: snmpv3UsersCurrEnt.setDescription('Current number of entries for snmpv3 users in device.')
snmpv3ViewsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3ViewsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: snmpv3ViewsMaxEnt.setDescription('Maximum number of entries for snmpv3 views in device.')
snmpv3ViewsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3ViewsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: snmpv3ViewsCurrEnt.setDescription('Current number of entries for snmpv3 views in device.')
snmpv3AccessGRsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3AccessGRsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: snmpv3AccessGRsMaxEnt.setDescription('Maximum number of entries for snmpv3 access groups in device.')
snmpv3AccessGRsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3AccessGRsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: snmpv3AccessGRsCurrEnt.setDescription('Current number of entries for snmpv3 access groups in device.')
snmpv3TargetAddrMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3TargetAddrMaxEnt.setStatus('current')
if mibBuilder.loadTexts: snmpv3TargetAddrMaxEnt.setDescription('Maximum number of entries for snmpv3 target addresses in device.')
snmpv3TargetAddrCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3TargetAddrCurrEnt.setStatus('current')
if mibBuilder.loadTexts: snmpv3TargetAddrCurrEnt.setDescription('Current number of entries for snmpv3 target addresses in device.')
snmpv3TargetParamsMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3TargetParamsMaxEnt.setStatus('current')
if mibBuilder.loadTexts: snmpv3TargetParamsMaxEnt.setDescription('Maximum number of entries for snmpv3 target parameters in device.')
snmpv3TargetParamsCurrEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 9, 7, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpv3TargetParamsCurrEnt.setStatus('current')
if mibBuilder.loadTexts: snmpv3TargetParamsCurrEnt.setDescription('Current number of entries for snmpv3 target parameters in device.')
agPortOperTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4, 1), )
if mibBuilder.loadTexts: agPortOperTable.setStatus('current')
if mibBuilder.loadTexts: agPortOperTable.setDescription('The table of port operations.')
agPortOperTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "portOperIdx"))
if mibBuilder.loadTexts: agPortOperTableEntry.setStatus('current')
if mibBuilder.loadTexts: agPortOperTableEntry.setDescription('A row in the port operations table.')
portOperIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portOperIdx.setStatus('current')
if mibBuilder.loadTexts: portOperIdx.setDescription('The port index.')
portOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperState.setStatus('current')
if mibBuilder.loadTexts: portOperState.setDescription('Enable/Disable port.')
portOperRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portOperRmon.setStatus('current')
if mibBuilder.loadTexts: portOperRmon.setDescription('Enable/Disable RMON for port.')
ntpOperSendReq = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpOperSendReq.setStatus('current')
if mibBuilder.loadTexts: ntpOperSendReq.setDescription('Allows the user to send requests to the NTP server.')
portInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1), )
if mibBuilder.loadTexts: portInfoTable.setStatus('current')
if mibBuilder.loadTexts: portInfoTable.setDescription('The table of port information.')
portInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "portInfoIndx"))
if mibBuilder.loadTexts: portInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: portInfoTableEntry.setDescription('A row in the port information table.')
portInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoIndx.setStatus('current')
if mibBuilder.loadTexts: portInfoIndx.setDescription('The port index.')
portInfoSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("mbs1000", 4), ("any", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSpeed.setStatus('current')
if mibBuilder.loadTexts: portInfoSpeed.setDescription('The current operational speed of the port.')
portInfoMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoMode.setStatus('current')
if mibBuilder.loadTexts: portInfoMode.setDescription('The current operational mode of the port.')
portInfoFlowCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoFlowCtrl.setStatus('current')
if mibBuilder.loadTexts: portInfoFlowCtrl.setDescription('The current operational flow control of the port.')
portInfoLink = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3), ("inoperative", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoLink.setStatus('current')
if mibBuilder.loadTexts: portInfoLink.setDescription('The current operational link status of the port.')
portInfoPhyIfDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfDescr.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfDescr.setDescription('A textual string containing information about the interface. This string should include the name of the manufacturer, the product name and the version of the hardware interface.')
portInfoPhyIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32))).clone(namedValues=NamedValues(("other", 1), ("regular1822", 2), ("hdh1822", 3), ("ddn-x25", 4), ("rfc877-x25", 5), ("ethernet-csmacd", 6), ("iso88023-csmacd", 7), ("iso88024-tokenBus", 8), ("iso88025-tokenRing", 9), ("iso88026-man", 10), ("starLan", 11), ("proteon-10Mbit", 12), ("proteon-80Mbit", 13), ("hyperchannel", 14), ("fddi", 15), ("lapb", 16), ("sdlc", 17), ("ds1", 18), ("e1", 19), ("basicISDN", 20), ("primaryISDN", 21), ("propPointToPointSerial", 22), ("ppp", 23), ("softwareLoopback", 24), ("eon", 25), ("ethernet-3Mbit", 26), ("nsip", 27), ("slip", 28), ("ultra", 29), ("ds3", 30), ("sip", 31), ("frame-relay", 32)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfType.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfType.setDescription("The type of interface, distinguished according to the physical/link protocol(s) immediately `below' the network layer in the protocol stack.")
portInfoPhyIfMtu = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfMtu.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfMtu.setDescription('The size of the largest datagram which can be sent/received on the interface, specified in octets. For interfaces that are used for transmitting network datagrams, this is the size of the largest network datagram that can be sent on the interface.')
portInfoPhyIfPhysAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 9), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfPhysAddress.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfPhysAddress.setDescription("The interface's address at the protocol layer immediately `below' the network layer in the protocol stack. For interfaces which do not have such an address (e.g., a serial line), this object should contain an octet string of zero length.")
portInfoPhyIfOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfOperStatus.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfOperStatus.setDescription('The current operational state of the interface. The testing(3) state indicates that no operational packets can be passed.')
portInfoPhyIfLastChange = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyIfLastChange.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyIfLastChange.setDescription('The value of sysUpTime at the time the interface entered its current operational state. If the current state was entered prior to the last re- initialization of the local network management subsystem, then this object contains a zero value.')
portInfoPhyConnType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("feCopper", 1), ("geCopper", 2), ("geSFP", 3), ("unknown", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPhyConnType.setStatus('current')
if mibBuilder.loadTexts: portInfoPhyConnType.setDescription('The physical connection type, i.e. copper or SFP port.')
portInfoPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("copper", 2), ("sfp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoPreferred.setStatus('current')
if mibBuilder.loadTexts: portInfoPreferred.setDescription('The port preferred connection type. For dual ports only')
portInfoBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("invalid", 1), ("none", 2), ("copper", 3), ("sfp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoBackup.setStatus('current')
if mibBuilder.loadTexts: portInfoBackup.setDescription('The port backup setting. For dual ports only')
portInfoSFPName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSFPName.setStatus('current')
if mibBuilder.loadTexts: portInfoSFPName.setDescription('A textual string containing information about the SFP manufacturer. For valid ports only.')
portInfoSFPType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("invalid", 1), ("sfpTypeSX", 2), ("sfpTypeLX", 3), ("sfpTypeCX", 4), ("sfpTypeCopper", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: portInfoSFPType.setStatus('current')
if mibBuilder.loadTexts: portInfoSFPType.setDescription('The inserted SFP type. For valid ports only.')
agEnabledSwFeatures = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledSwFeatures.setStatus('current')
if mibBuilder.loadTexts: agEnabledSwFeatures.setDescription('The software features that are enabled on the switch.')
agEnabledGslbKey = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledGslbKey.setStatus('current')
if mibBuilder.loadTexts: agEnabledGslbKey.setDescription('Query if software key Global slb enabled on switch.')
agEnabledBwmKey = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledBwmKey.setStatus('current')
if mibBuilder.loadTexts: agEnabledBwmKey.setDescription('Query if software key Bandwidth Mgmt. enabled on switch.')
agEnabledSecurityKey = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledSecurityKey.setStatus('current')
if mibBuilder.loadTexts: agEnabledSecurityKey.setDescription('Query if software key Security enabled on switch.')
agEnabledLinklbKey = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agEnabledLinklbKey.setStatus('current')
if mibBuilder.loadTexts: agEnabledLinklbKey.setDescription('Query if software key Inbound Linklb is enabled on switch.')
agSymantecSwKeyInfo = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("expired", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSymantecSwKeyInfo.setStatus('current')
if mibBuilder.loadTexts: agSymantecSwKeyInfo.setDescription('Query about the Symantec Software key enabled(1) or disabled(2), or expired(3) in the switch.')
agSymantecSwKeyRemainingDays = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSymantecSwKeyRemainingDays.setStatus('current')
if mibBuilder.loadTexts: agSymantecSwKeyRemainingDays.setDescription('Query the number of remaining days for Symantec SwKey to expire.')
agSymLicenseSwKeyRenewalPending = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSymLicenseSwKeyRenewalPending.setStatus('current')
if mibBuilder.loadTexts: agSymLicenseSwKeyRenewalPending.setDescription('Symantec License Renewal Pending indicator.')
agApplyConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("apply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfiguration.setStatus('current')
if mibBuilder.loadTexts: agApplyConfiguration.setDescription('This is an action object to apply the changes made to configuration of the switch. By setting the value to apply(2), all the changes made since the last apply are written to the new_config block. other(1) is returned when this object ie read. ')
agSavePending = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("saveNeeded", 1), ("noSaveNeeded", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSavePending.setStatus('current')
if mibBuilder.loadTexts: agSavePending.setDescription('This object, when read, gives the user information whether an save action is needed and that the configuration has been applied but not saved to the flash.')
agSaveConfiguration = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("saveActive", 2), ("notSaveActive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSaveConfiguration.setStatus('current')
if mibBuilder.loadTexts: agSaveConfiguration.setDescription('This is an action object to write current configuration to nonvolatile storage. When issued with the saveActive, the active configuration in flash is saved to backup in flash and then the new configuration is saved to the active configuration in flash. When issued with notSaveActive, the active configuration is NOT saved to the flash and the active configuration is overwritten with the new configuration. ok(1) is returned always when read.')
agRevert = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revert", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevert.setStatus('current')
if mibBuilder.loadTexts: agRevert.setDescription('This is an action object to revert the unapplied changes made to the switch. By setting the value to revert(2), all the unapplied changes will be reverted. This action will copy the current_config to the new_config block. other(1) is returned when this object is read. ')
agRevertApply = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("revertApply", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRevertApply.setStatus('current')
if mibBuilder.loadTexts: agRevertApply.setDescription('This is an action object to revert the unsaved changes made to the switch. By setting the value to revertApply(2), all the unsaved as well as unapplied changes will be reverted. other(1) is returned when this object is read. ')
agReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agReset.setStatus('current')
if mibBuilder.loadTexts: agReset.setDescription('This is an action object to reboot the agent. other(1) is returned always when read.')
agConfigForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("active", 2), ("backup", 3), ("default", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agConfigForNxtReset.setStatus('current')
if mibBuilder.loadTexts: agConfigForNxtReset.setDescription('The configuration information to be loaded from at next reset. The following values are writable: active(2)...active configuration block backup(3)...backup configuration block default(4)..default configuration block')
agImageForNxtReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agImageForNxtReset.setStatus('current')
if mibBuilder.loadTexts: agImageForNxtReset.setDescription('The software image to be booted from at next reset. The following values are writable: image1(2)...image 1 image2(3)...image 2')
agSoftwareVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: agSoftwareVersion.setDescription("The version of the software image that is currently running on the system in the form of 'major.minor.maintenance.bugfix'. A zero length string is returned if version is not available.")
agBootVer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agBootVer.setStatus('current')
if mibBuilder.loadTexts: agBootVer.setDescription("The version of the boot code in the form of 'major.minor.bugfix'. A zero length string is returned if version is not available.")
agImage1Ver = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage1Ver.setStatus('current')
if mibBuilder.loadTexts: agImage1Ver.setDescription("The version of the software image stored in image 1 storage in the form of 'major.minor.bugfix'. A zero length string is returned if version is not available or there is no valid software image.")
agImage2Ver = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agImage2Ver.setStatus('current')
if mibBuilder.loadTexts: agImage2Ver.setDescription("The version of the software image stored in image 2 storage in the form of 'major.minor.bugfix'. A zero length string is returned if version is not available or there is no valid software image.")
agRtcDate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcDate.setStatus('current')
if mibBuilder.loadTexts: agRtcDate.setDescription("The date on the real time clock in the form of 'mm/dd/yy'. A zero length string is returned if date is not available.")
agRtcTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agRtcTime.setStatus('current')
if mibBuilder.loadTexts: agRtcTime.setDescription("The time on the real time clock in the form of 'hh:mm:ss'. A zero length string is returned if time is not available.")
agLastSetErrorReason = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agLastSetErrorReason.setStatus('current')
if mibBuilder.loadTexts: agLastSetErrorReason.setDescription('The error reason of the last SET failure.')
agCurCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setStatus('current')
if mibBuilder.loadTexts: agCurCfgHttpServerPort.setDescription('The TCP port number that the HTTP server is listening to in the current_configuration block.')
agNewCfgHttpServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setStatus('current')
if mibBuilder.loadTexts: agNewCfgHttpServerPort.setDescription('The TCP port number that the HTTP server is listening to in the new_configuration block.')
agCurCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgLoginBanner.setStatus('current')
if mibBuilder.loadTexts: agCurCfgLoginBanner.setDescription('The user defined login banner.')
agNewCfgLoginBanner = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 79))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgLoginBanner.setStatus('current')
if mibBuilder.loadTexts: agNewCfgLoginBanner.setDescription('The user defined login banner.')
agCurCfgSmtpHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSmtpHost.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSmtpHost.setDescription('The user defined SMTP host.')
agNewCfgSmtpHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSmtpHost.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSmtpHost.setDescription('The user defined SMTP host.')
agCurCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgConsole.setStatus('current')
if mibBuilder.loadTexts: agCurCfgConsole.setDescription('Enable or disable console output of syslog messages.')
agNewCfgConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgConsole.setStatus('current')
if mibBuilder.loadTexts: agNewCfgConsole.setDescription('Enable or disable console output of syslog messages.')
agCurCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgBootp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgBootp.setDescription('Enable or disable the use of BootP, as currently configured in the current_configuration block.')
agNewCfgBootp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgBootp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgBootp.setDescription('Enable or disable the use of BootP, in the new_configuration block.')
agCurCfgSnmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSnmpTimeout.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSnmpTimeout.setDescription("Once SNMP operations like agApplyConfig, agDiffState and agDumpState, which use the state machine are done the resources used by these operations need to be freed by setting the state back to 'idle' so others can issue the commands via SNMP. agSnmpTimeout indicates the number of minutes before the resources are freed and the state set back to 'idle' if this operation is not performed by the user.")
agNewCfgSnmpTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSnmpTimeout.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSnmpTimeout.setDescription("Once SNMP operations like agApplyConfig, agDiffState and agDumpState, which use the state machine are done the resources used by these operations need to be freed by setting the state back to 'idle' so others can issue the commands via SNMP. agSnmpTimeout indicates the number of minutes before the resources are freed and the state set back to 'idle' if this operation is not performed by the user.")
agCurCfgTelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTelnetServerPort.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTelnetServerPort.setDescription('The TCP port number that the telnet server listens for telnet sessions.')
agNewCfgTelnetServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTelnetServerPort.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTelnetServerPort.setDescription('The TCP port number that the telnet server listens for telnet sessions.')
agClearFlashDump = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agClearFlashDump.setStatus('current')
if mibBuilder.loadTexts: agClearFlashDump.setDescription('This is an action object to clear the FLASH dump. ok(1) is returned when this object is read. ')
agCurCfgNortelMultipleStgMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNortelMultipleStgMode.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNortelMultipleStgMode.setDescription('Enable or disable Nortel multiple STG mode.')
agNewCfgNortelMultipleStgMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNortelMultipleStgMode.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNortelMultipleStgMode.setDescription('Enable or disable Nortel multiple STG mode.')
agCurCfgTrapSrcIf = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapSrcIf.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTrapSrcIf.setDescription('The SNMP trap source interface number.')
agNewCfgTrapSrcIf = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 40), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapSrcIf.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTrapSrcIf.setDescription('The SNMP trap source interface number.')
agCurCfgARPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgARPMaxRate.setStatus('current')
if mibBuilder.loadTexts: agCurCfgARPMaxRate.setDescription('The maximum allowed rate of MP-destined ARP packets.')
agNewCfgARPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgARPMaxRate.setStatus('current')
if mibBuilder.loadTexts: agNewCfgARPMaxRate.setDescription('The maximum allowed rate of MP-destined ARP packets.')
agCurCfgICMPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgICMPMaxRate.setStatus('current')
if mibBuilder.loadTexts: agCurCfgICMPMaxRate.setDescription('The maximum allowed rate of MP-destined ICMP packets.')
agNewCfgICMPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgICMPMaxRate.setStatus('current')
if mibBuilder.loadTexts: agNewCfgICMPMaxRate.setDescription('The maximum allowed rate of MP-destined ICMP packets.')
agCurCfgTCPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTCPMaxRate.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTCPMaxRate.setDescription('The maximum allowed rate of MP-destined TCP packets.')
agNewCfgTCPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTCPMaxRate.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTCPMaxRate.setDescription('The maximum allowed rate of MP-destined TCP packets.')
agCurCfgUDPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgUDPMaxRate.setStatus('current')
if mibBuilder.loadTexts: agCurCfgUDPMaxRate.setDescription('The maximum allowed rate of MP-destined UDP packets.')
agNewCfgUDPMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgUDPMaxRate.setStatus('current')
if mibBuilder.loadTexts: agNewCfgUDPMaxRate.setDescription('The maximum allowed rate of MP-destined UDP packets.')
agCurCfgHttpsServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgHttpsServerPort.setStatus('current')
if mibBuilder.loadTexts: agCurCfgHttpsServerPort.setDescription('The TCP port number that the HTTPS server is listening to in the current_configuration block.')
agNewCfgHttpsServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgHttpsServerPort.setStatus('current')
if mibBuilder.loadTexts: agNewCfgHttpsServerPort.setDescription('The TCP port number that the HTTPS server is listening to in the new_configuration block.')
agCurDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420))).clone(namedValues=NamedValues(("none", 0), ("africa-Algeria", 1), ("africa-Angola", 2), ("africa-Benin", 3), ("africa-Botswana", 4), ("africa-Burkina-Faso", 5), ("africa-Burundi", 6), ("africa-Cameroon", 7), ("africa-Central-African-Rep", 8), ("africa-Chad", 9), ("africa-Congo-WestDemRepCongo", 10), ("africa-Congo-EastDemRepCongo", 11), ("africa-Congo-Rep", 12), ("africa-Cote-dIvoire", 13), ("africa-Djibouti", 14), ("africa-Egypt", 15), ("africa-Equatorial-Guinea", 16), ("africa-Eritrea", 17), ("africa-Ethiopia", 18), ("africa-Gabon", 19), ("africa-Gambia", 20), ("africa-Ghana", 21), ("africa-Guinea", 22), ("africa-Guinea-Bissau", 23), ("africa-Kenya", 24), ("africa-Lesotho", 25), ("africa-Liberia", 26), ("africa-Libya", 27), ("africa-Malawi", 28), ("africa-Mali-SouthWestMali", 29), ("africa-Mali-NorthEastMali", 30), ("africa-Mauritania", 31), ("africa-Morocco", 32), ("africa-Mozambique", 33), ("africa-Namibia", 34), ("africa-Niger", 35), ("africa-Nigeria", 36), ("africa-Rwanda", 37), ("africa-SaoTome-And-Principe", 38), ("africa-Senegal", 39), ("africa-SierraLeone", 40), ("africa-Somalia", 41), ("africa-SouthAfrica", 42), ("africa-Spain-Mainland", 43), ("africa-Spain-CeutaMelilla", 44), ("africa-Spain-CanaryIslands", 45), ("africa-Sudan", 46), ("africa-Swaziland", 47), ("africa-Tanzania", 48), ("africa-Togo", 49), ("africa-Tunisia", 50), ("africa-Uganda", 51), ("africa-Western-Sahara", 52), ("africa-Zambia", 53), ("africa-Zimbabwe", 54), ("americas-Anguilla", 55), ("americas-Antigua-Barbuda", 56), ("americas-Argentina-EArgentina", 57), ("americas-Argentina-MostLocations", 58), ("americas-Argentina-Jujuy", 59), ("americas-Argentina-Catamarca", 60), ("americas-Argentina-Mendoza", 61), ("americas-Aruba", 62), ("americas-Bahamas", 63), ("americas-Barbados", 64), ("americas-Belize", 65), ("americas-Bolivia", 66), ("americas-Brazil-AtlanticIslands", 67), ("americas-Brazil-AmapaEPara", 68), ("americas-Brazil-NEBrazil", 69), ("americas-Brazil-Pernambuco", 70), ("americas-Brazil-Tocantins", 71), ("americas-Brazil-AlagoasSergipe", 72), ("americas-Brazil-SSEBrazil", 73), ("americas-Brazil-MatoGrossoDoSul", 74), ("americas-Brazil-WParaRondonia", 75), ("americas-Brazil-Roraima", 76), ("americas-Brazil-EAmazonas", 77), ("americas-Brazil-WAmazonas", 78), ("americas-Brazil-Acre", 79), ("americas-Canada-NewfoundlandIsland", 80), ("americas-Canada-AtlanTime-NovaScotia", 81), ("americas-Canada-AtlanTime-ELabrador", 82), ("americas-Canada-EastTime-OntarioMostlocation", 83), ("americas-Canada-EastTime-ThunderBay", 84), ("americas-Canada-EastStdTime-PangnirtungNunavut", 85), ("americas-Canada-EastStdTime-EastNunavut", 86), ("americas-Canada-EastStdTime-CenNunavut", 87), ("americas-Canada-CenTime-ManitobaWestOntario", 88), ("americas-Canada-CenTime-RainyRiver", 89), ("americas-Canada-CenTime-WestNunavut", 90), ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91), ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92), ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93), ("americas-Canada-MountTime-CentralNorthwestTerritories", 94), ("americas-Canada-MountTime-WestNorthwestTerritories", 95), ("americas-Canada-MountStdTime-DawsonCrkStJohnBritColumbia", 96), ("americas-Canada-PacificTime-WestBritishColumbia", 97), ("americas-Canada-PacificTime-SouthYukon", 98), ("americas-Canada-PacificTime-NorthYukon", 99), ("americas-CaymanIslands", 100), ("americas-Chile-MostLocation", 101), ("americas-Chile-EasterIsland", 102), ("americas-Colombia", 103), ("americas-CostaRica", 104), ("americas-Cuba", 105), ("americas-Dominica", 106), ("americas-DominicanRepublic", 107), ("americas-Ecuador", 108), ("americas-ElSalvado", 109), ("americas-FrenchGuiana", 110), ("americas-Greenland-MostLocation", 111), ("americas-Greenland-EastCoastNorthScoresbysund", 112), ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113), ("americas-Greenland-ThulePituffik", 114), ("americas-Grenada", 115), ("americas-Guadeloupe", 116), ("americas-Guatemala", 117), ("americas-Guyana", 118), ("americas-Haiti", 119), ("americas-Honduras", 120), ("americas-Jamaica", 121), ("americas-Martinique", 122), ("americas-Mexico-CentTime-Mostlocations", 123), ("americas-Mexico-CentTime-QuintanaRoo", 124), ("americas-Mexico-CentTime-CampecheYucatan", 125), ("americas-Mexico-CentTime-CoahuilaDurangoNuevoLeonTamaulipas", 126), ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127), ("americas-Mexico-MountTime-Chihuahua", 128), ("americas-Mexico-MountStdTime-Sonora", 129), ("americas-Mexico-PacificTime", 130), ("americas-Montserrat", 131), ("americas-NetherlandsAntilles", 132), ("americas-Nicaragua", 133), ("americas-Panama", 134), ("americas-Paraguay", 135), ("americas-Peru", 136), ("americas-PuertoRico", 137), ("americas-StKittsAndNevis", 138), ("americas-StLucia", 139), ("americas-StPierreAndMiquelon", 140), ("americas-StVincent", 141), ("americas-Suriname", 142), ("americas-TrinidadAndTobago", 143), ("americas-TurksAndCaicosIs", 144), ("americas-USA-EastTime", 145), ("americas-USA-EastTime-MichiganMostLocation", 146), ("americas-USA-EastTime-KentuckyLouisvilleArea", 147), ("americas-USA-EastTime-KentuckyWayneCounty", 148), ("americas-USA-EastStdTime-IndianaMostLocations", 149), ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150), ("americas-USA-EastStdTime-IndianaStarkeCounty", 151), ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152), ("americas-USA-CentTime", 153), ("americas-USA-CentTime-MichiganWisconsinborder", 154), ("americas-USA-CentTime-NorthDakotaOliverCounty", 155), ("americas-USA-MountTime", 156), ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157), ("americas-USA-MountTime-Navajo", 158), ("americas-USA-MountStdTime-Arizona", 159), ("americas-USA-PacificTime", 160), ("americas-USA-AlaskaTime", 161), ("americas-USA-AlaskaTime-AlaskaPanhandle", 162), ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163), ("americas-USA-AlaskaTime-WestAlaska", 164), ("americas-USA-AleutianIslands", 165), ("americas-USA-Hawaii", 166), ("americas-Uruguay", 167), ("americas-Venezuela", 168), ("americas-VirginIslands-UK", 169), ("americas-VirginIslands-US", 170), ("antarctica-McMurdoStationRossIsland", 171), ("antarctica-Amundsen-ScottStationSouthPole", 172), ("antarctica-PalmerStationAnversIsland", 173), ("antarctica-MawsonStationHolmeBay", 174), ("antarctica-DavisStationVestfoldHills", 175), ("antarctica-CaseyStationBaileyPeninsula", 176), ("antarctica-VostokStationSMagneticPole", 177), ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178), ("antarctica-SyowaStationEOngulI", 179), ("arcticOcean-Svalbard", 180), ("arcticOcean-JanMayen", 181), ("asia-Afghanistan", 182), ("asia-Armenia", 183), ("asia-Azerbaijan", 184), ("asia-Bahrain", 185), ("asia-Bangladesh", 186), ("asia-Bhutan", 187), ("asia-Brunei", 188), ("asia-Cambodia", 189), ("asia-China-EastChinaBeijingGuangdongShanghai", 190), ("asia-China-Heilongjiang", 191), ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192), ("asia-China-TibetmostofXinjiangUyghur", 193), ("asia-China-SouthwestXinjiangUyghur", 194), ("asia-Cyprus", 195), ("asia-EastTimor", 196), ("asia-Georgia", 197), ("asia-HongKong", 198), ("asia-India", 199), ("asia-Indonesia-JavaAndSumatra", 200), ("asia-Indonesia-WestCentralBorneo", 201), ("asia-Indonesia-EastSouthBorneoCelebesBaliNusaTengarraWestTimor", 202), ("asia-Indonesia-IrianJayaAndMoluccas", 203), ("asia-Iran", 204), ("asia-Iraq", 205), ("asia-Israel", 206), ("asia-Japan", 207), ("asia-Jordan", 208), ("asia-Kazakhstan-MostLocations", 209), ("asia-Kazakhstan-QyzylordaKyzylorda", 210), ("asia-Kazakhstan-Aqtobe", 211), ("asia-Kazakhstan-AtyrauMangghystau", 212), ("asia-Kazakhstan-WestKazakhstan", 213), ("asia-Korea-North", 214), ("asia-Korea-South", 215), ("asia-Kuwait", 216), ("asia-Kyrgyzstan", 217), ("asia-Laos", 218), ("asia-Lebanon", 219), ("asia-Macau", 220), ("asia-Malaysia-PeninsularMalaysia", 221), ("asia-Malaysia-SabahSarawak", 222), ("asia-Mongolia-MostLocations", 223), ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224), ("asia-Mongolia-DornodSukhbaatar", 225), ("asia-Myanmar", 226), ("asia-Nepal", 227), ("asia-Oman", 228), ("asia-Pakistan", 229), ("asia-Palestine", 230), ("asia-Philippines", 231), ("asia-Qatar", 232), ("asia-Russia-Moscow-01Kaliningrad", 233), ("asia-Russia-Moscow00WestRussia", 234), ("asia-Russia-Moscow01CaspianSea", 235), ("asia-Russia-Moscow02Urals", 236), ("asia-Russia-Moscow03WestSiberia", 237), ("asia-Russia-Moscow03Novosibirsk", 238), ("asia-Russia-Moscow04YeniseiRiver", 239), ("asia-Russia-Moscow05LakeBaikal", 240), ("asia-Russia-Moscow06LenaRiver", 241), ("asia-Russia-Moscow07AmurRiver", 242), ("asia-Russia-Moscow07SakhalinIsland", 243), ("asia-Russia-Moscow08Magadan", 244), ("asia-Russia-Moscow09Kamchatka", 245), ("asia-Russia-Moscow10BeringSea", 246), ("asia-SaudiArabia", 247), ("asia-Singapore", 248), ("asia-SriLanka", 249), ("asia-Syria", 250), ("asia-Taiwan", 251), ("asia-Tajikistan", 252), ("asia-Thailand", 253), ("asia-Turkmenistan", 254)) + NamedValues(("asia-UnitedArabEmirates", 255), ("asia-Uzbekistan-WestUzbekistan", 256), ("asia-Uzbekistan-EastUzbekistan", 257), ("asia-Vietnam", 258), ("asia-Yemen", 259), ("atlanticOcean-Bermuda", 260), ("atlanticOcean-CapeVerde", 261), ("atlanticOcean-FaeroeIslands", 262), ("atlanticOcean-FalklandIslands", 263), ("atlanticOcean-Iceland", 264), ("atlanticOcean-Portugal-Mainland", 265), ("atlanticOcean-Portugal-MadeiraIslands", 266), ("atlanticOcean-Portugal-Azores", 267), ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268), ("atlanticOcean-Spain-Mainland", 269), ("atlanticOcean-Spain-CeutaMelilla", 270), ("atlanticOcean-Spain-CanaryIslands", 271), ("atlanticOcean-StHelena", 272), ("atlanticOcean-Svalbard-JanMayen", 273), ("australia-LordHoweIsland", 274), ("australia-Tasmania", 275), ("australia-Victoria", 276), ("australia-NewSouthWales-MostLocations", 277), ("australia-NewSouthWales-Yancowinna", 278), ("australia-Queensland-MostLocations", 279), ("australia-Queensland-HolidayIslands", 280), ("australia-SouthAustralia", 281), ("australia-NorthernTerritory", 282), ("australia-WesternAustralia", 283), ("europe-Albania", 284), ("europe-Andorra", 285), ("europe-Austria", 286), ("europe-Belarus", 287), ("europe-Belgium", 288), ("europe-BosniaHerzegovina", 289), ("europe-Britain-UKGreatBritain", 290), ("europe-Britain-UKNorthernIreland", 291), ("europe-Bulgaria", 292), ("europe-Croatia", 293), ("europe-CzechRepublic", 294), ("europe-Denmark", 295), ("europe-Estonia", 296), ("europe-Finland", 297), ("europe-France", 298), ("europe-Germany", 299), ("europe-Gibraltar", 300), ("europe-Greece", 301), ("europe-Hungary", 302), ("europe-Ireland", 303), ("europe-Italy", 304), ("europe-Latvia", 305), ("europe-Liechtenstein", 306), ("europe-Lithuania", 307), ("europe-Luxembourg", 308), ("europe-Macedonia", 309), ("europe-Malta", 310), ("europe-Moldova", 311), ("europe-Monaco", 312), ("europe-Netherlands", 313), ("europe-Norway", 314), ("europe-Poland", 315), ("europe-Portugal-Mainland", 316), ("europe-Portugal-MadeiraIslands", 317), ("europe-Portugal-Azores", 318), ("europe-Romania", 319), ("europe-Russia-Moscow-01Kaliningrad", 320), ("europe-Russia-Moscow00WestRussia", 321), ("europe-Russia-Moscow01CaspianSea", 322), ("europe-Russia-Moscow02Urals", 323), ("europe-Russia-Moscow03WestSiberia", 324), ("europe-Russia-Moscow03Novosibirsk", 325), ("europe-Russia-Moscow04YeniseiRiver", 326), ("europe-Russia-Moscow05LakeBaikal", 327), ("europe-Russia-Moscow06LenaRiver", 328), ("europe-Russia-Moscow07AmurRiver", 329), ("europe-Russia-Moscow07SakhalinIsland", 330), ("europe-Russia-Moscow08Magadan", 331), ("europe-Russia-Moscow09Kamchatka", 332), ("europe-Russia-Moscow10BeringSea", 333), ("europe-SanMarino", 334), ("europe-Slovakia", 335), ("europe-Slovenia", 336), ("europe-Spain-Mainland", 337), ("europe-Spain-CeutaAndMelilla", 338), ("europe-Spain-CanaryIslands", 339), ("europe-Sweden", 340), ("europe-Switzerland", 341), ("europe-Turkey", 342), ("europe-Ukraine-MostLocations", 343), ("europe-Ukraine-Ruthenia", 344), ("europe-Ukraine-Zaporozhye-ELugansk", 345), ("europe-Ukraine-CentralCrimea", 346), ("europe-VaticanCity", 347), ("europe-Yugoslavia", 348), ("indianOcean-BritishIndianOceanTerritory", 349), ("indianOcean-ChristmasIsland", 350), ("indianOcean-CocosOrKeelingIslands", 351), ("indianOcean-Comoros", 352), ("indianOcean-FrenchSouthernAndAntarcticLands", 353), ("indianOcean-Madagascar", 354), ("indianOcean-Maldives", 355), ("indianOcean-Mauritius", 356), ("indianOcean-Mayotte", 357), ("indianOcean-Reunion", 358), ("indianOcean-Seychelles", 359), ("pacificOcean-Chile-MostLocations", 360), ("pacificOcean-Chile-EasterIslandSalayGomez", 361), ("pacificOcean-CookIslands", 362), ("pacificOcean-Ecuador", 363), ("pacificOcean-Fiji", 364), ("pacificOcean-FrenchPolynesia-SocietyIslands", 365), ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366), ("pacificOcean-FrenchPolynesia-GambierIslands", 367), ("pacificOcean-Guam", 368), ("pacificOcean-Kiribati-GilbertIslands", 369), ("pacificOcean-Kiribati-PhoenixIslands", 370), ("pacificOcean-Kiribati-LineIslands", 371), ("pacificOcean-MarshallIslands-MostLocations", 372), ("pacificOcean-MarshallIslands-Kwajalein", 373), ("pacificOcean-Micronesia-Yap", 374), ("pacificOcean-Micronesia-TrukOrChuuk", 375), ("pacificOcean-Micronesia-PonapeOrPohnpei", 376), ("pacificOcean-Micronesia-Kosrae", 377), ("pacificOcean-Nauru", 378), ("pacificOcean-NewCaledonia", 379), ("pacificOcean-NewZealand-MostLocations", 380), ("pacificOcean-NewZealand-ChathamIslands", 381), ("pacificOcean-Niue", 382), ("pacificOcean-NorfolkIsland", 383), ("pacificOcean-NorthernMarianaIslands", 384), ("pacificOcean-Palau", 385), ("pacificOcean-PapuaNewGuinea", 386), ("pacificOcean-Pitcairn", 387), ("pacificOcean-SamoaAmerican", 388), ("pacificOcean-SamoaWestern", 389), ("pacificOcean-SolomonIslands", 390), ("pacificOcean-Tokelau", 391), ("pacificOcean-Tonga", 392), ("pacificOcean-Tuvalu", 393), ("pacificOceanUSA-EastTime", 394), ("pacificOceanUSA-EastTime-MichiganMostLocations", 395), ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396), ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397), ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398), ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399), ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400), ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401), ("pacificOceanUSA-CentTime", 402), ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403), ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404), ("pacificOceanUSA-MountTime", 405), ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406), ("pacificOceanUSA-MountTime-Navajo", 407), ("pacificOceanUSA-MountStdTime-Arizona", 408), ("pacificOceanUSA-PacificTime", 409), ("pacificOceanUSA-AlaskaTime", 410), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412), ("pacificOceanUSA-AlaskaTime-WestAlaska", 413), ("pacificOceanUSA-AleutianIslands", 414), ("pacificOceanUSA-Hawaii", 415), ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416), ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417), ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418), ("pacificOcean-Vanuatu", 419), ("pacificOcean-WallisAndFutuna", 420)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurDaylightSavings.setStatus('current')
if mibBuilder.loadTexts: agCurDaylightSavings.setDescription('The daylight savings location.')
agNewDaylightSavings = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254), SingleValueConstraint(255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420))).clone(namedValues=NamedValues(("none", 0), ("africa-Algeria", 1), ("africa-Angola", 2), ("africa-Benin", 3), ("africa-Botswana", 4), ("africa-Burkina-Faso", 5), ("africa-Burundi", 6), ("africa-Cameroon", 7), ("africa-Central-African-Rep", 8), ("africa-Chad", 9), ("africa-Congo-WestDemRepCongo", 10), ("africa-Congo-EastDemRepCongo", 11), ("africa-Congo-Rep", 12), ("africa-Cote-dIvoire", 13), ("africa-Djibouti", 14), ("africa-Egypt", 15), ("africa-Equatorial-Guinea", 16), ("africa-Eritrea", 17), ("africa-Ethiopia", 18), ("africa-Gabon", 19), ("africa-Gambia", 20), ("africa-Ghana", 21), ("africa-Guinea", 22), ("africa-Guinea-Bissau", 23), ("africa-Kenya", 24), ("africa-Lesotho", 25), ("africa-Liberia", 26), ("africa-Libya", 27), ("africa-Malawi", 28), ("africa-Mali-SouthWestMali", 29), ("africa-Mali-NorthEastMali", 30), ("africa-Mauritania", 31), ("africa-Morocco", 32), ("africa-Mozambique", 33), ("africa-Namibia", 34), ("africa-Niger", 35), ("africa-Nigeria", 36), ("africa-Rwanda", 37), ("africa-SaoTome-And-Principe", 38), ("africa-Senegal", 39), ("africa-SierraLeone", 40), ("africa-Somalia", 41), ("africa-SouthAfrica", 42), ("africa-Spain-Mainland", 43), ("africa-Spain-CeutaMelilla", 44), ("africa-Spain-CanaryIslands", 45), ("africa-Sudan", 46), ("africa-Swaziland", 47), ("africa-Tanzania", 48), ("africa-Togo", 49), ("africa-Tunisia", 50), ("africa-Uganda", 51), ("africa-Western-Sahara", 52), ("africa-Zambia", 53), ("africa-Zimbabwe", 54), ("americas-Anguilla", 55), ("americas-Antigua-Barbuda", 56), ("americas-Argentina-EArgentina", 57), ("americas-Argentina-MostLocations", 58), ("americas-Argentina-Jujuy", 59), ("americas-Argentina-Catamarca", 60), ("americas-Argentina-Mendoza", 61), ("americas-Aruba", 62), ("americas-Bahamas", 63), ("americas-Barbados", 64), ("americas-Belize", 65), ("americas-Bolivia", 66), ("americas-Brazil-AtlanticIslands", 67), ("americas-Brazil-AmapaEPara", 68), ("americas-Brazil-NEBrazil", 69), ("americas-Brazil-Pernambuco", 70), ("americas-Brazil-Tocantins", 71), ("americas-Brazil-AlagoasSergipe", 72), ("americas-Brazil-SSEBrazil", 73), ("americas-Brazil-MatoGrossoDoSul", 74), ("americas-Brazil-WParaRondonia", 75), ("americas-Brazil-Roraima", 76), ("americas-Brazil-EAmazonas", 77), ("americas-Brazil-WAmazonas", 78), ("americas-Brazil-Acre", 79), ("americas-Canada-NewfoundlandIsland", 80), ("americas-Canada-AtlanTime-NovaScotia", 81), ("americas-Canada-AtlanTime-ELabrador", 82), ("americas-Canada-EastTime-OntarioMostlocation", 83), ("americas-Canada-EastTime-ThunderBay", 84), ("americas-Canada-EastStdTime-PangnirtungNunavut", 85), ("americas-Canada-EastStdTime-EastNunavut", 86), ("americas-Canada-EastStdTime-CenNunavut", 87), ("americas-Canada-CenTime-ManitobaWestOntario", 88), ("americas-Canada-CenTime-RainyRiver", 89), ("americas-Canada-CenTime-WestNunavut", 90), ("americas-Canada-CenStdTime-SaskatchewanMostlocation", 91), ("americas-Canada-CenStdTime-SaskatchewanMidwest", 92), ("americas-Canada-MountTime-AlbertaEastBritishColumbia", 93), ("americas-Canada-MountTime-CentralNorthwestTerritories", 94), ("americas-Canada-MountTime-WestNorthwestTerritories", 95), ("americas-Canada-MountStdTime-DawsonCrkStJohnBritColumbia", 96), ("americas-Canada-PacificTime-WestBritishColumbia", 97), ("americas-Canada-PacificTime-SouthYukon", 98), ("americas-Canada-PacificTime-NorthYukon", 99), ("americas-CaymanIslands", 100), ("americas-Chile-MostLocation", 101), ("americas-Chile-EasterIsland", 102), ("americas-Colombia", 103), ("americas-CostaRica", 104), ("americas-Cuba", 105), ("americas-Dominica", 106), ("americas-DominicanRepublic", 107), ("americas-Ecuador", 108), ("americas-ElSalvado", 109), ("americas-FrenchGuiana", 110), ("americas-Greenland-MostLocation", 111), ("americas-Greenland-EastCoastNorthScoresbysund", 112), ("americas-Greenland-ScoresbysundIttoqqortoormiit", 113), ("americas-Greenland-ThulePituffik", 114), ("americas-Grenada", 115), ("americas-Guadeloupe", 116), ("americas-Guatemala", 117), ("americas-Guyana", 118), ("americas-Haiti", 119), ("americas-Honduras", 120), ("americas-Jamaica", 121), ("americas-Martinique", 122), ("americas-Mexico-CentTime-Mostlocations", 123), ("americas-Mexico-CentTime-QuintanaRoo", 124), ("americas-Mexico-CentTime-CampecheYucatan", 125), ("americas-Mexico-CentTime-CoahuilaDurangoNuevoLeonTamaulipas", 126), ("americas-Mexico-MountTime-SBajaNayaritSinaloa", 127), ("americas-Mexico-MountTime-Chihuahua", 128), ("americas-Mexico-MountStdTime-Sonora", 129), ("americas-Mexico-PacificTime", 130), ("americas-Montserrat", 131), ("americas-NetherlandsAntilles", 132), ("americas-Nicaragua", 133), ("americas-Panama", 134), ("americas-Paraguay", 135), ("americas-Peru", 136), ("americas-PuertoRico", 137), ("americas-StKittsAndNevis", 138), ("americas-StLucia", 139), ("americas-StPierreAndMiquelon", 140), ("americas-StVincent", 141), ("americas-Suriname", 142), ("americas-TrinidadAndTobago", 143), ("americas-TurksAndCaicosIs", 144), ("americas-USA-EastTime", 145), ("americas-USA-EastTime-MichiganMostLocation", 146), ("americas-USA-EastTime-KentuckyLouisvilleArea", 147), ("americas-USA-EastTime-KentuckyWayneCounty", 148), ("americas-USA-EastStdTime-IndianaMostLocations", 149), ("americas-USA-EastStdTime-IndianaCrawfordCounty", 150), ("americas-USA-EastStdTime-IndianaStarkeCounty", 151), ("americas-USA-EastStdTime-IndianaSwitzerlandCounty", 152), ("americas-USA-CentTime", 153), ("americas-USA-CentTime-MichiganWisconsinborder", 154), ("americas-USA-CentTime-NorthDakotaOliverCounty", 155), ("americas-USA-MountTime", 156), ("americas-USA-MountTime-SouthIdahoAndEastOregon", 157), ("americas-USA-MountTime-Navajo", 158), ("americas-USA-MountStdTime-Arizona", 159), ("americas-USA-PacificTime", 160), ("americas-USA-AlaskaTime", 161), ("americas-USA-AlaskaTime-AlaskaPanhandle", 162), ("americas-USA-AlaskaTime-AlaskaPanhandleNeck", 163), ("americas-USA-AlaskaTime-WestAlaska", 164), ("americas-USA-AleutianIslands", 165), ("americas-USA-Hawaii", 166), ("americas-Uruguay", 167), ("americas-Venezuela", 168), ("americas-VirginIslands-UK", 169), ("americas-VirginIslands-US", 170), ("antarctica-McMurdoStationRossIsland", 171), ("antarctica-Amundsen-ScottStationSouthPole", 172), ("antarctica-PalmerStationAnversIsland", 173), ("antarctica-MawsonStationHolmeBay", 174), ("antarctica-DavisStationVestfoldHills", 175), ("antarctica-CaseyStationBaileyPeninsula", 176), ("antarctica-VostokStationSMagneticPole", 177), ("antarctica-Dumont-dUrvilleBaseTerreAdelie", 178), ("antarctica-SyowaStationEOngulI", 179), ("arcticOcean-Svalbard", 180), ("arcticOcean-JanMayen", 181), ("asia-Afghanistan", 182), ("asia-Armenia", 183), ("asia-Azerbaijan", 184), ("asia-Bahrain", 185), ("asia-Bangladesh", 186), ("asia-Bhutan", 187), ("asia-Brunei", 188), ("asia-Cambodia", 189), ("asia-China-EastChinaBeijingGuangdongShanghai", 190), ("asia-China-Heilongjiang", 191), ("asia-China-CentralChinaGansuGuizhouSichuanYunnan", 192), ("asia-China-TibetmostofXinjiangUyghur", 193), ("asia-China-SouthwestXinjiangUyghur", 194), ("asia-Cyprus", 195), ("asia-EastTimor", 196), ("asia-Georgia", 197), ("asia-HongKong", 198), ("asia-India", 199), ("asia-Indonesia-JavaAndSumatra", 200), ("asia-Indonesia-WestCentralBorneo", 201), ("asia-Indonesia-EastSouthBorneoCelebesBaliNusaTengarraWestTimor", 202), ("asia-Indonesia-IrianJayaAndMoluccas", 203), ("asia-Iran", 204), ("asia-Iraq", 205), ("asia-Israel", 206), ("asia-Japan", 207), ("asia-Jordan", 208), ("asia-Kazakhstan-MostLocations", 209), ("asia-Kazakhstan-QyzylordaKyzylorda", 210), ("asia-Kazakhstan-Aqtobe", 211), ("asia-Kazakhstan-AtyrauMangghystau", 212), ("asia-Kazakhstan-WestKazakhstan", 213), ("asia-Korea-North", 214), ("asia-Korea-South", 215), ("asia-Kuwait", 216), ("asia-Kyrgyzstan", 217), ("asia-Laos", 218), ("asia-Lebanon", 219), ("asia-Macau", 220), ("asia-Malaysia-PeninsularMalaysia", 221), ("asia-Malaysia-SabahSarawak", 222), ("asia-Mongolia-MostLocations", 223), ("asia-Mongolia-BayanOlgiyGoviAltaiHovdUvsZavkhan", 224), ("asia-Mongolia-DornodSukhbaatar", 225), ("asia-Myanmar", 226), ("asia-Nepal", 227), ("asia-Oman", 228), ("asia-Pakistan", 229), ("asia-Palestine", 230), ("asia-Philippines", 231), ("asia-Qatar", 232), ("asia-Russia-Moscow-01Kaliningrad", 233), ("asia-Russia-Moscow00WestRussia", 234), ("asia-Russia-Moscow01CaspianSea", 235), ("asia-Russia-Moscow02Urals", 236), ("asia-Russia-Moscow03WestSiberia", 237), ("asia-Russia-Moscow03Novosibirsk", 238), ("asia-Russia-Moscow04YeniseiRiver", 239), ("asia-Russia-Moscow05LakeBaikal", 240), ("asia-Russia-Moscow06LenaRiver", 241), ("asia-Russia-Moscow07AmurRiver", 242), ("asia-Russia-Moscow07SakhalinIsland", 243), ("asia-Russia-Moscow08Magadan", 244), ("asia-Russia-Moscow09Kamchatka", 245), ("asia-Russia-Moscow10BeringSea", 246), ("asia-SaudiArabia", 247), ("asia-Singapore", 248), ("asia-SriLanka", 249), ("asia-Syria", 250), ("asia-Taiwan", 251), ("asia-Tajikistan", 252), ("asia-Thailand", 253), ("asia-Turkmenistan", 254)) + NamedValues(("asia-UnitedArabEmirates", 255), ("asia-Uzbekistan-WestUzbekistan", 256), ("asia-Uzbekistan-EastUzbekistan", 257), ("asia-Vietnam", 258), ("asia-Yemen", 259), ("atlanticOcean-Bermuda", 260), ("atlanticOcean-CapeVerde", 261), ("atlanticOcean-FaeroeIslands", 262), ("atlanticOcean-FalklandIslands", 263), ("atlanticOcean-Iceland", 264), ("atlanticOcean-Portugal-Mainland", 265), ("atlanticOcean-Portugal-MadeiraIslands", 266), ("atlanticOcean-Portugal-Azores", 267), ("atlanticOcean-SouthGeorgia-SouthSandwichIslands", 268), ("atlanticOcean-Spain-Mainland", 269), ("atlanticOcean-Spain-CeutaMelilla", 270), ("atlanticOcean-Spain-CanaryIslands", 271), ("atlanticOcean-StHelena", 272), ("atlanticOcean-Svalbard-JanMayen", 273), ("australia-LordHoweIsland", 274), ("australia-Tasmania", 275), ("australia-Victoria", 276), ("australia-NewSouthWales-MostLocations", 277), ("australia-NewSouthWales-Yancowinna", 278), ("australia-Queensland-MostLocations", 279), ("australia-Queensland-HolidayIslands", 280), ("australia-SouthAustralia", 281), ("australia-NorthernTerritory", 282), ("australia-WesternAustralia", 283), ("europe-Albania", 284), ("europe-Andorra", 285), ("europe-Austria", 286), ("europe-Belarus", 287), ("europe-Belgium", 288), ("europe-BosniaHerzegovina", 289), ("europe-Britain-UKGreatBritain", 290), ("europe-Britain-UKNorthernIreland", 291), ("europe-Bulgaria", 292), ("europe-Croatia", 293), ("europe-CzechRepublic", 294), ("europe-Denmark", 295), ("europe-Estonia", 296), ("europe-Finland", 297), ("europe-France", 298), ("europe-Germany", 299), ("europe-Gibraltar", 300), ("europe-Greece", 301), ("europe-Hungary", 302), ("europe-Ireland", 303), ("europe-Italy", 304), ("europe-Latvia", 305), ("europe-Liechtenstein", 306), ("europe-Lithuania", 307), ("europe-Luxembourg", 308), ("europe-Macedonia", 309), ("europe-Malta", 310), ("europe-Moldova", 311), ("europe-Monaco", 312), ("europe-Netherlands", 313), ("europe-Norway", 314), ("europe-Poland", 315), ("europe-Portugal-Mainland", 316), ("europe-Portugal-MadeiraIslands", 317), ("europe-Portugal-Azores", 318), ("europe-Romania", 319), ("europe-Russia-Moscow-01Kaliningrad", 320), ("europe-Russia-Moscow00WestRussia", 321), ("europe-Russia-Moscow01CaspianSea", 322), ("europe-Russia-Moscow02Urals", 323), ("europe-Russia-Moscow03WestSiberia", 324), ("europe-Russia-Moscow03Novosibirsk", 325), ("europe-Russia-Moscow04YeniseiRiver", 326), ("europe-Russia-Moscow05LakeBaikal", 327), ("europe-Russia-Moscow06LenaRiver", 328), ("europe-Russia-Moscow07AmurRiver", 329), ("europe-Russia-Moscow07SakhalinIsland", 330), ("europe-Russia-Moscow08Magadan", 331), ("europe-Russia-Moscow09Kamchatka", 332), ("europe-Russia-Moscow10BeringSea", 333), ("europe-SanMarino", 334), ("europe-Slovakia", 335), ("europe-Slovenia", 336), ("europe-Spain-Mainland", 337), ("europe-Spain-CeutaAndMelilla", 338), ("europe-Spain-CanaryIslands", 339), ("europe-Sweden", 340), ("europe-Switzerland", 341), ("europe-Turkey", 342), ("europe-Ukraine-MostLocations", 343), ("europe-Ukraine-Ruthenia", 344), ("europe-Ukraine-Zaporozhye-ELugansk", 345), ("europe-Ukraine-CentralCrimea", 346), ("europe-VaticanCity", 347), ("europe-Yugoslavia", 348), ("indianOcean-BritishIndianOceanTerritory", 349), ("indianOcean-ChristmasIsland", 350), ("indianOcean-CocosOrKeelingIslands", 351), ("indianOcean-Comoros", 352), ("indianOcean-FrenchSouthernAndAntarcticLands", 353), ("indianOcean-Madagascar", 354), ("indianOcean-Maldives", 355), ("indianOcean-Mauritius", 356), ("indianOcean-Mayotte", 357), ("indianOcean-Reunion", 358), ("indianOcean-Seychelles", 359), ("pacificOcean-Chile-MostLocations", 360), ("pacificOcean-Chile-EasterIslandSalayGomez", 361), ("pacificOcean-CookIslands", 362), ("pacificOcean-Ecuador", 363), ("pacificOcean-Fiji", 364), ("pacificOcean-FrenchPolynesia-SocietyIslands", 365), ("pacificOcean-FrenchPolynesia-MarquesasIslands", 366), ("pacificOcean-FrenchPolynesia-GambierIslands", 367), ("pacificOcean-Guam", 368), ("pacificOcean-Kiribati-GilbertIslands", 369), ("pacificOcean-Kiribati-PhoenixIslands", 370), ("pacificOcean-Kiribati-LineIslands", 371), ("pacificOcean-MarshallIslands-MostLocations", 372), ("pacificOcean-MarshallIslands-Kwajalein", 373), ("pacificOcean-Micronesia-Yap", 374), ("pacificOcean-Micronesia-TrukOrChuuk", 375), ("pacificOcean-Micronesia-PonapeOrPohnpei", 376), ("pacificOcean-Micronesia-Kosrae", 377), ("pacificOcean-Nauru", 378), ("pacificOcean-NewCaledonia", 379), ("pacificOcean-NewZealand-MostLocations", 380), ("pacificOcean-NewZealand-ChathamIslands", 381), ("pacificOcean-Niue", 382), ("pacificOcean-NorfolkIsland", 383), ("pacificOcean-NorthernMarianaIslands", 384), ("pacificOcean-Palau", 385), ("pacificOcean-PapuaNewGuinea", 386), ("pacificOcean-Pitcairn", 387), ("pacificOcean-SamoaAmerican", 388), ("pacificOcean-SamoaWestern", 389), ("pacificOcean-SolomonIslands", 390), ("pacificOcean-Tokelau", 391), ("pacificOcean-Tonga", 392), ("pacificOcean-Tuvalu", 393), ("pacificOceanUSA-EastTime", 394), ("pacificOceanUSA-EastTime-MichiganMostLocations", 395), ("pacificOceanUSA-EastTime-KentuckyLouisvilleArea", 396), ("pacificOceanUSA-EastTime-KentuckyWayneCounty", 397), ("pacificOceanUSA-EastStdTime-IndianaMostLocations", 398), ("pacificOceanUSA-EastStdTime-IndianaCrawfordCounty", 399), ("pacificOceanUSA-EastStdTime-IndianaStarkeCounty", 400), ("pacificOceanUSA-EastStdTime-IndianaSwitzerlandCounty", 401), ("pacificOceanUSA-CentTime", 402), ("pacificOceanUSA-CentTime-MichiganWisconsinborder", 403), ("pacificOceanUSA-CentTime-NorthDakotaOliverCounty", 404), ("pacificOceanUSA-MountTime", 405), ("pacificOceanUSA-MountTime-SouthIdahoAndEastOregon", 406), ("pacificOceanUSA-MountTime-Navajo", 407), ("pacificOceanUSA-MountStdTime-Arizona", 408), ("pacificOceanUSA-PacificTime", 409), ("pacificOceanUSA-AlaskaTime", 410), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandle", 411), ("pacificOceanUSA-AlaskaTime-AlaskaPanhandleNeck", 412), ("pacificOceanUSA-AlaskaTime-WestAlaska", 413), ("pacificOceanUSA-AleutianIslands", 414), ("pacificOceanUSA-Hawaii", 415), ("pacificOcean-USMinorOutlyingIslands-JohnstonAtoll", 416), ("pacificOcean-USMinorOutlyingIslands-MidwayIslands", 417), ("pacificOcean-USMinorOutlyingIslands-WakeIsland", 418), ("pacificOcean-Vanuatu", 419), ("pacificOceanWallisAndFutuna", 420)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewDaylightSavings.setStatus('current')
if mibBuilder.loadTexts: agNewDaylightSavings.setDescription('The daylight savings location.')
agCurCfgIdleCLITimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 57), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10080))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgIdleCLITimeout.setStatus('current')
if mibBuilder.loadTexts: agCurCfgIdleCLITimeout.setDescription('Set idle CLI sessions timeout.')
agNewCfgIdleCLITimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 58), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10080))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgIdleCLITimeout.setStatus('current')
if mibBuilder.loadTexts: agNewCfgIdleCLITimeout.setDescription('Set idle CLI sessions timeout.')
agCurCfgXMLCfgServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgXMLCfgServerPort.setStatus('current')
if mibBuilder.loadTexts: agCurCfgXMLCfgServerPort.setDescription('The TCP port number that the XML config server is listening to in the current_configuration block. If HTTPS is also enabled then the port numbers should be the same')
agNewCfgXMLCfgServerPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgXMLCfgServerPort.setStatus('current')
if mibBuilder.loadTexts: agNewCfgXMLCfgServerPort.setDescription('The TCP port number that the XML config server is listening to in the new_configuration block. If HTTPS is also enabled then the port numbers should be the same')
agSymantecGlobalState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSymantecGlobalState.setStatus('current')
if mibBuilder.loadTexts: agSymantecGlobalState.setDescription('This is an action object to globally enable or disable Symantec feature on the switch.')
agCurCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogHost.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogHost.setDescription('The syslog host IP address, as currently configured in the current_configuration block.')
agNewCfgSyslogHost = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogHost.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogHost.setDescription('The syslog host IP address, in the new_configuration block.')
agCurCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslog2Host.setDescription('The second syslog host IP address, as currently configured in the current_configuration block.')
agNewCfgSyslog2Host = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslog2Host.setDescription('The second syslog host IP address, in the new_configuration block.')
agCurCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogFac.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogFac.setDescription('The facility of syslog host in the current_configuration block.')
agNewCfgSyslogFac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogFac.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogFac.setDescription('The facility of syslog host in the new_configuration block.')
agCurCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslog2Fac.setDescription('The facility of syslog2 host in the current_configuration block.')
agNewCfgSyslog2Fac = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("local0", 1), ("local1", 2), ("local2", 3), ("local3", 4), ("local4", 5), ("local5", 6), ("local6", 7), ("local7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslog2Fac.setDescription('The facility of syslogs host in the new_configuration block.')
agCurCfgSyslogSev = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogSev.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogSev.setDescription('The severity of syslog host in the current configuration block.')
agNewCfgSyslogSev = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogSev.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogSev.setDescription('The severity of syslog host in the new configuration block.')
agCurCfgSyslog2Sev = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslog2Sev.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslog2Sev.setDescription('The severity of syslog2 host in the current configuration block.')
agNewCfgSyslog2Sev = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("emerg0", 1), ("alert1", 2), ("crit2", 3), ("err3", 4), ("warning4", 5), ("notice5", 6), ("info6", 7), ("debug7", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslog2Sev.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslog2Sev.setDescription('The severity of syslogs host in the new configuration block.')
agClrSyslogMsgs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agClrSyslogMsgs.setStatus('current')
if mibBuilder.loadTexts: agClrSyslogMsgs.setDescription('Clears all current Syslog messages.')
agSyslogMsgTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMsgTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: agSyslogMsgTableMaxSize.setDescription('The maximum number of rows in the syslog message table.')
agSyslogMsgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 11), )
if mibBuilder.loadTexts: agSyslogMsgTable.setStatus('current')
if mibBuilder.loadTexts: agSyslogMsgTable.setDescription('The table of syslog messages.')
agSyslogMsgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 11, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agSyslogMsgIndex"))
if mibBuilder.loadTexts: agSyslogMsgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agSyslogMsgTableEntry.setDescription('A syslog message stored on the switch.')
agSyslogMsgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMsgIndex.setStatus('current')
if mibBuilder.loadTexts: agSyslogMsgIndex.setDescription('The syslog message table index.')
agSyslogMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 11, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSyslogMessage.setStatus('current')
if mibBuilder.loadTexts: agSyslogMessage.setDescription('The syslog message.')
agLog = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12))
agNewCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapConsole.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapConsole.setDescription('Enable or disable console syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapConsole = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapConsole.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapConsole.setDescription('Enable or disable console syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSystem.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapSystem.setDescription('Enable or disable system level syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapSystem = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSystem.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapSystem.setDescription('Enable or disable system level syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapMgmt.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapMgmt.setDescription('Enable or disable management(flash, config, login) syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapMgmt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapMgmt.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapMgmt.setDescription('Enable or disable management(flash, config, login) syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapCli.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapCli.setDescription('Enable or disable CLI generated error syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapCli = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapCli.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapCli.setDescription('Enable or disable CLI generated error syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapStp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapStp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapStp.setDescription('Enable or disable spanning tree syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapStp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapStp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapStp.setDescription('Enable or disable spanning tree syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVlan.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapVlan.setDescription('Enable or disable VLAN syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapVlan = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVlan.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapVlan.setDescription('Enable or disable VLAN syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapSlb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSlb.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapSlb.setDescription('Enable or disable SLB syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapSlb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSlb.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapSlb.setDescription('Enable or disable SLB syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapGslb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapGslb.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapGslb.setDescription('Enable or disable GSLB syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapGslb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapGslb.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapGslb.setDescription('Enable or disable GSLB syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapFilter = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapFilter.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapFilter.setDescription('Enable or disable filter syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapFilter = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapFilter.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapFilter.setDescription('Enable or disable filter syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSsh.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapSsh.setDescription('Enable or disable SSH, RADIUS syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapSsh = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSsh.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapSsh.setDescription('Enable or disable SSH, RADIUS syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapVrrp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapVrrp.setDescription('Enable or disable VRRP syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapVrrp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapVrrp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapVrrp.setDescription('Enable or disable VRRP syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapBgp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapBgp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapBgp.setDescription('Enable or disable BGP syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapBgp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapBgp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapBgp.setDescription('Enable or disable BGP syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapNtp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapNtp.setDescription('Enable or disable NTP syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapNtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapNtp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapNtp.setDescription('Enable or disable NTP syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapIp.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapIp.setDescription('Enable or disable IP related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapIp.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapIp.setDescription('Enable or disable IP related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapWeb.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapWeb.setDescription('Enable or disable WEBUI related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapWeb = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapWeb.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapWeb.setDescription('Enable or disable WEBUI related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapSynAtk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSynAtk.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapSynAtk.setDescription('Enable or disable SYN attack detection related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapSynAtk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSynAtk.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapSynAtk.setDescription('Enable or disable SYN attack detection related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapTcpLim = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapTcpLim.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapTcpLim.setDescription('Enable or disable TCP rate limiting related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapTcpLim = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapTcpLim.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapTcpLim.setDescription('Enable or disable TCP rate limiting related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapOspf = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapOspf.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapOspf.setDescription('Enable or disable OSPF related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapOspf = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapOspf.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapOspf.setDescription('Enable or disable OSPF related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapSecurity = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSecurity.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapSecurity.setDescription('Enable or disable Security pack related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapSecurity = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSecurity.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapSecurity.setDescription('Enable or disable Security pack related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapRmon = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapRmon.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapRmon.setDescription('Enable or disable rmon related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapRmon = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapRmon.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapRmon.setDescription('Enable or disable rmon related syslog and SNMP trap, as currently configured in the current_configuration block.')
agNewCfgSyslogTrapSlbAtk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSyslogTrapSlbAtk.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSyslogTrapSlbAtk.setDescription('Enable or disable SLB ATK related syslog and SNMP trap, in the new_configuration block.')
agCurCfgSyslogTrapSlbAtk = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 5, 12, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSyslogTrapSlbAtk.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSyslogTrapSlbAtk.setDescription('Enable or disable SLB ATK related syslog and SNMP trap, as currently configured in the current_configuration block.')
agTrapHostTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTrapHostTableMaxEnt.setStatus('current')
if mibBuilder.loadTexts: agTrapHostTableMaxEnt.setDescription('The maximum number of rows in the trap host table.')
agCurCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 2), )
if mibBuilder.loadTexts: agCurCfgTrapHostTable.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTrapHostTable.setDescription('The table of trap hosts which to send SNMP traps in the current_configuration block.')
agCurCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agCurCfgTrapHostIndx"))
if mibBuilder.loadTexts: agCurCfgTrapHostEntry.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTrapHostEntry.setDescription('A row in the trap host table in the current_configuration block.')
agCurCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIndx.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTrapHostIndx.setDescription('The index of the row in trap host table.')
agCurCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostIpAddr.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTrapHostIpAddr.setDescription('The IP address of a trap host.')
agCurCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgTrapHostCommString.setStatus('current')
if mibBuilder.loadTexts: agCurCfgTrapHostCommString.setDescription('The SNMP community string to use with the trap host')
agNewCfgTrapHostTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 3), )
if mibBuilder.loadTexts: agNewCfgTrapHostTable.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTrapHostTable.setDescription('The table of trap hosts which to send SNMP traps in the new_configuration block.')
agNewCfgTrapHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agNewCfgTrapHostIndx"))
if mibBuilder.loadTexts: agNewCfgTrapHostEntry.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTrapHostEntry.setDescription('A row in the trap host table in the new_configuration block.')
agNewCfgTrapHostIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgTrapHostIndx.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTrapHostIndx.setDescription('The index of the row in trap host table.')
agNewCfgTrapHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostIpAddr.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTrapHostIpAddr.setDescription('The IP address of a trap host.')
agNewCfgTrapHostCommString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 6, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgTrapHostCommString.setStatus('current')
if mibBuilder.loadTexts: agNewCfgTrapHostCommString.setDescription('The SNMP community string to use with the trap host')
agTftpServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpServer.setStatus('current')
if mibBuilder.loadTexts: agTftpServer.setDescription('The TFTP server IP address or domain name.')
agTftpImage = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("image1", 2), ("image2", 3), ("boot", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImage.setStatus('current')
if mibBuilder.loadTexts: agTftpImage.setDescription('Whether the image file should be loaded in image1 or image2 in flash.')
agTftpImageFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpImageFileName.setStatus('current')
if mibBuilder.loadTexts: agTftpImageFileName.setDescription('The image file name to be downloaded.')
agTftpCfgFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpCfgFileName.setStatus('current')
if mibBuilder.loadTexts: agTftpCfgFileName.setDescription('The configuration file name.')
agTftpDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpDumpFileName.setStatus('current')
if mibBuilder.loadTexts: agTftpDumpFileName.setDescription('The file name for core dump.')
agTftpAction = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("other", 1), ("img-get", 2), ("cfg-get", 3), ("cfg-put", 4), ("dump-put", 5), ("bkpdump-put", 6), ("img-put", 7), ("tsdump-put", 8), ("bogon-get", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpAction.setStatus('current')
if mibBuilder.loadTexts: agTftpAction.setDescription('This is an action object to perform various TFTP Get or Put functions. The TFTP sever is specified in agTftpServer object. img-get(2) - Download switch image from a specified image file (agTftpImageFileName) on the TFTP server to the destinated storage (agTftpImage). cfg-get(3) - Download switch configuration from a specified file (agTftpCfgFileName) on the TFTP server. cfg-put(4) - Upload switch configuration to a specified file (agTftpCfgFileName) on the TFTP server. dump-put(5) - Download switch core dump to a specified file (agTftpDumpFileName) on the TFTP server. bkpdump-put(6)- Download switch backup core dump to a specified file (agTftpDumpFileName) on the TFTP server. img-put(7) - Upload specified switch image to a specified image file (agTftpImageFileName) on the TFTP server. tsdump-put(8) - Download switch tech support dump to a specified file (agTftpTSDumpFileName) on the TFTP server. bogon-get(9) - Download bogon config file from a specified bogon file (uses agTftpImageFileName) on the TFTP server. other(1) is returned always when read.')
agTftpLastActionStatus = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agTftpLastActionStatus.setStatus('current')
if mibBuilder.loadTexts: agTftpLastActionStatus.setDescription('The recorded status of the previous TFTP activity.')
agTftpPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpPort.setStatus('current')
if mibBuilder.loadTexts: agTftpPort.setDescription('Specify whether the TFTP operation should nbe performed over the data port or the management port.')
agTftpUserName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpUserName.setStatus('current')
if mibBuilder.loadTexts: agTftpUserName.setDescription('The username for FTP server or blank for TFTP server.')
agTftpPassword = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpPassword.setStatus('current')
if mibBuilder.loadTexts: agTftpPassword.setDescription('The password for FTP server.')
agTftpTSDumpFileName = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 7, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agTftpTSDumpFileName.setStatus('current')
if mibBuilder.loadTexts: agTftpTSDumpFileName.setDescription('The file name for TS dump.')
agPortTableMaxEnt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortTableMaxEnt.setStatus('current')
if mibBuilder.loadTexts: agPortTableMaxEnt.setDescription('The maximum number of rows in the port configuration host table.')
agPortCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2), )
if mibBuilder.loadTexts: agPortCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgTable.setDescription('The table of port configuration in the current_configuration block.')
agPortCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agPortCurCfgIndx"))
if mibBuilder.loadTexts: agPortCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgTableEntry.setDescription('A row in the port table in the current_configuration block.')
agPortCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgIndx.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgIndx.setDescription('The index of the row in port configurations table.')
agPortCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgState.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgState.setDescription('This is the state of the port.')
agPortCurCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgVlanTag.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgVlanTag.setDescription('This is VLAN tag state of the port')
agPortCurCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgRmon.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgRmon.setDescription('This object is used to turn RMON on or off on the port.')
agPortCurCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPVID.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgPVID.setDescription('The default VLAN ID for the port.')
agPortCurCfgFastEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthAutoNeg.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgFastEthAutoNeg.setDescription('This object is used to turn the autonegotiation on or off for fast Ethernet connection.')
agPortCurCfgFastEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("any", 4), ("mbs1000", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthSpeed.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgFastEthSpeed.setDescription('Selects the port speed for fast Ethernet connection.')
agPortCurCfgFastEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthMode.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgFastEthMode.setDescription('This object is used to select port mode for fast Ethernet connection.')
agPortCurCfgFastEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgFastEthFctl.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgFastEthFctl.setDescription('Selects the port flow control for fast Ethernet connection.')
agPortCurCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthAutoNeg.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgGigEthAutoNeg.setDescription('This object is used to turn the autonegotiation on or off for gigabit Ethernet connection.')
agPortCurCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthFctl.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgGigEthFctl.setDescription('This object is used to select port flow control for gigabit Ethernet connection.')
agPortCurCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPortName.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgPortName.setDescription('The switch port name.')
agPortCurCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBwmContract.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgBwmContract.setDescription('The switch port Bandwidth Management contract number.')
agPortCurCfgDiscardNonIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgDiscardNonIPs.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgDiscardNonIPs.setDescription('Enable or disable to discard all non-IP traffic on the switch port.')
agPortCurCfgLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgLinkTrap.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgLinkTrap.setDescription("Indicates whether linkUp/linkDown traps should be generated for this interface. By default, this object should have the value enabled(1) for interfaces which do not operate on 'top' of any other interface (as defined in the ifStackTable), and disabled(2) otherwise.")
agPortCurCfgPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("sfp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPreferred.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgPreferred.setDescription('This object is used to set the preferred port. Valid only on dual ports.')
agPortCurCfgBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("none", 2), ("copper", 3), ("sfp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgBackup.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgBackup.setDescription('This object is used to set the backup port. Valid only on dual ports.')
agPortCurCfgEgressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgEgressBW.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgEgressBW.setDescription('The configured egress bandwidth limit for this port. This is the maximum egress bandwidth available to this port if BWM is on.')
agPortCurCfgNonIPBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgNonIPBwmContract.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgNonIPBwmContract.setDescription('The BWM contract for non-IP traffic.')
agPortCurCfgGigEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("any", 4), ("mbs1000", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthSpeed.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgGigEthSpeed.setDescription('Selects the port speed for Gigabit Ethernet connection.')
agPortCurCfgGigEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgGigEthMode.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgGigEthMode.setDescription('This object is used to select port mode for Gigabit Ethernet connection.')
agPortCurCfgPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 2, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortCurCfgPortAlias.setStatus('current')
if mibBuilder.loadTexts: agPortCurCfgPortAlias.setDescription('The switch port alias.')
agPortNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3), )
if mibBuilder.loadTexts: agPortNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgTable.setDescription('The table of port configuration in the new_configuration block.')
agPortNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agPortNewCfgIndx"))
if mibBuilder.loadTexts: agPortNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgTableEntry.setDescription('A row in the port configuration table in the new_configuration block.')
agPortNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortNewCfgIndx.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgIndx.setDescription('The index of the row in port configurations table.')
agPortNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgState.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgState.setDescription('This is the state of the port.')
agPortNewCfgVlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("tagged", 2), ("untagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgVlanTag.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgVlanTag.setDescription('This is VLAN tag state of the port')
agPortNewCfgRmon = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgRmon.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgRmon.setDescription('This object is used to turn RMON on or off on the port.')
agPortNewCfgPVID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPVID.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgPVID.setDescription('The default VLAN ID for the port.')
agPortNewCfgFastEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthAutoNeg.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgFastEthAutoNeg.setDescription('This object is used to turn the autonegotiation on or off for fast Ethernet connection.')
agPortNewCfgFastEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("any", 4), ("mbs1000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthSpeed.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgFastEthSpeed.setDescription('Selects the port speed for fast Ethernet connection.')
agPortNewCfgFastEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthMode.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgFastEthMode.setDescription('This object is used to select port mode for fast Ethernet connection.')
agPortNewCfgFastEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgFastEthFctl.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgFastEthFctl.setDescription('Selects the port flow control for fast Ethernet connection.')
agPortNewCfgGigEthAutoNeg = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthAutoNeg.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgGigEthAutoNeg.setDescription('This object is used to turn the autonegotiation on or off for gigabit Ethernet connection.')
agPortNewCfgGigEthFctl = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("transmit", 2), ("receive", 3), ("both", 4), ("none", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthFctl.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgGigEthFctl.setDescription('This object is used to select port flow control for gigabit Ethernet connection.')
agPortNewCfgPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPortName.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgPortName.setDescription('The switch port name.')
agPortNewCfgBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBwmContract.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgBwmContract.setDescription('The switch port Bandwidth Management contract number.')
agPortNewCfgDiscardNonIPs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgDiscardNonIPs.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgDiscardNonIPs.setDescription('Enable or disable to discard all non-IP traffic on the switch port.')
agPortNewCfgLinkTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgLinkTrap.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgLinkTrap.setDescription("Indicates whether linkUp/linkDown traps should be generated for this interface. By default, this object should have the value enabled(1) for interfaces which do not operate on 'top' of any other interface (as defined in the ifStackTable), and disabled(2) otherwise.")
agPortNewCfgPreferred = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("sfp", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPreferred.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgPreferred.setDescription('This object is used to set the preferred port. Valid only on dual ports.')
agPortNewCfgBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("copper", 2), ("sfp", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgBackup.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgBackup.setDescription('This object is used to set the backup port. Valid only on dual ports.')
agPortNewCfgEgressBW = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 5))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgEgressBW.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgEgressBW.setDescription('The configured egress bandwidth limit for this port. This is the maximum egress bandwidth available to this port if BWM is on.')
agPortNewCfgNonIPBwmContract = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 20), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgNonIPBwmContract.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgNonIPBwmContract.setDescription('The BWM contract for non-IP traffic')
agPortNewCfgGigEthSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5))).clone(namedValues=NamedValues(("mbs10", 2), ("mbs100", 3), ("any", 4), ("mbs1000", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthSpeed.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgGigEthSpeed.setDescription('Selects the port speed for Gigabit Ethernet connection.')
agPortNewCfgGigEthMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("full-duplex", 2), ("half-duplex", 3), ("full-or-half-duplex", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgGigEthMode.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgGigEthMode.setDescription('This object is used to select port mode for Gigabit Ethernet connection.')
agPortNewCfgPortAlias = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 2, 3, 1, 24), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agPortNewCfgPortAlias.setStatus('current')
if mibBuilder.loadTexts: agPortNewCfgPortAlias.setDescription('The switch port alias.')
radCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: radCurCfgPrimaryIpAddr.setDescription('The IP address of the Primary RADIUS server.')
radNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: radNewCfgPrimaryIpAddr.setDescription('The IP address of the Primary RADIUS server.')
radCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgSecondaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: radCurCfgSecondaryIpAddr.setDescription('The IP address of the Secondary RADIUS server.')
radNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgSecondaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: radNewCfgSecondaryIpAddr.setDescription('The IP address of the Secondary RADIUS server.')
radCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgPort.setStatus('current')
if mibBuilder.loadTexts: radCurCfgPort.setDescription('Specify the RADIUS port number.')
radNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 3000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgPort.setStatus('current')
if mibBuilder.loadTexts: radNewCfgPort.setDescription('Specify the RADIUS port number.')
radCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: radCurCfgTimeout.setDescription('The maximum number of seconds before resending authentication to RADIUS server.')
radNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: radNewCfgTimeout.setDescription('The maximum number of seconds before resending authentication to RADIUS server.')
radCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgRetries.setStatus('current')
if mibBuilder.loadTexts: radCurCfgRetries.setDescription('Number of retries to the RADIUS server.')
radNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgRetries.setStatus('current')
if mibBuilder.loadTexts: radNewCfgRetries.setDescription('Number of retries to the RADIUS server.')
radCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgState.setStatus('current')
if mibBuilder.loadTexts: radCurCfgState.setDescription('Enable or disbale RADIUS authentication.')
radNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgState.setStatus('current')
if mibBuilder.loadTexts: radNewCfgState.setDescription('Enable or disable RADIUS authentication.')
radCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenString.setStatus('current')
if mibBuilder.loadTexts: radCurCfgAuthenString.setDescription('The RADIUS authentication string.')
radNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenString.setStatus('current')
if mibBuilder.loadTexts: radNewCfgAuthenString.setDescription('The RADIUS authentication string.')
radCurCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgTelnet.setStatus('current')
if mibBuilder.loadTexts: radCurCfgTelnet.setDescription('Enable or disbale RADIUS backdoor for telnet.')
radNewCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgTelnet.setStatus('current')
if mibBuilder.loadTexts: radNewCfgTelnet.setDescription('Enable or disable RADIUS backdoor for telnet.')
radCurCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: radCurCfgAuthenSecondString.setStatus('current')
if mibBuilder.loadTexts: radCurCfgAuthenSecondString.setDescription('The second RADIUS authentication string.')
radNewCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 3, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: radNewCfgAuthenSecondString.setStatus('current')
if mibBuilder.loadTexts: radNewCfgAuthenSecondString.setDescription('The second RADIUS authentication string.')
agCurCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPServer.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPServer.setDescription('The NTP Server Address.')
agNewCfgNTPServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPServer.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPServer.setDescription('The NTP Server Address.')
agCurCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44640))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPResyncInterval.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPResyncInterval.setDescription('The NTP Server resync interval in minutes.')
agNewCfgNTPResyncInterval = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 44640))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPResyncInterval.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPResyncInterval.setDescription('The NTP Server resync interval in minutes.')
agCurCfgNTPTzoneHHMM = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPTzoneHHMM.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPTzoneHHMM.setDescription('The NTP Server timezone offset from GMT formatted as (+/-)HH:MM.')
agNewCfgNTPTzoneHHMM = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPTzoneHHMM.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPTzoneHHMM.setDescription('The NTP Server timezone offset from GMT formatted as (+/-)HH:MM. The valid range is from -12:59 to +12:59.')
agCurCfgNTPDlight = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPDlight.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPDlight.setDescription('Enable/disable daylight savings time.')
agNewCfgNTPDlight = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPDlight.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPDlight.setDescription('Enable/disable daylight savings time.')
agCurCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPService.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPService.setDescription('Enable/disable NTP Service.')
agNewCfgNTPService = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPService.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPService.setDescription('Enable/disable NTP Service.')
agCurCfgNTPSecServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgNTPSecServer.setStatus('current')
if mibBuilder.loadTexts: agCurCfgNTPSecServer.setDescription('The Secondary NTP Server Address.')
agNewCfgNTPSecServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 4, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgNTPSecServer.setStatus('current')
if mibBuilder.loadTexts: agNewCfgNTPSecServer.setDescription('The Secondary NTP Server Address.')
agApplyPending = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("applyNeeded", 2), ("noApplyNeeded", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyPending.setStatus('current')
if mibBuilder.loadTexts: agApplyPending.setDescription('This object, when read, gives the user information whether an apply action is needed and that the configuration has been chaged by the user actions. The user then can apply the changes by setting proper value to the object agApplyConfiguration described above.')
agApplyConfig = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("apply", 1), ("idle", 2), ("inprogress", 3), ("complete", 4), ("failed", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agApplyConfig.setStatus('current')
if mibBuilder.loadTexts: agApplyConfig.setDescription("When this object is read the current state is returned. idle(2) indicates that there is no apply in progess. complete(4) indicates that the last apply operation is completed. Setting the value to apply(1), will write all the changes made since the last apply to the current configuration block. If the apply is successful this variable will return the state 'complete' else it will return 'failed'. In case of failure, to read the reason for failure use the agApplyTable. Once the operation is completed or the agApplyTable is read in case of failure, the apply buffer needs to be freed and the agApplyState should be set back to 'idle' state so others can issue the apply command via SNMP.")
agApplyTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyTableSize.setStatus('current')
if mibBuilder.loadTexts: agApplyTableSize.setDescription('The number of strings in the apply table.')
agApplyTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8, 5), )
if mibBuilder.loadTexts: agApplyTable.setStatus('current')
if mibBuilder.loadTexts: agApplyTable.setDescription('The table of URL path for URL load balancing in the current_config.')
agApplyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agApplyIndex"))
if mibBuilder.loadTexts: agApplyTableEntry.setStatus('current')
if mibBuilder.loadTexts: agApplyTableEntry.setDescription('Information about an URL path for URL load balancing.')
agApplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyIndex.setStatus('current')
if mibBuilder.loadTexts: agApplyIndex.setDescription('The table index.')
agApplyString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 8, 5, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agApplyString.setStatus('current')
if mibBuilder.loadTexts: agApplyString.setDescription('A string in the apply table.')
agMgmtCurCfgIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgIpAddr.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgIpAddr.setDescription('The IP address of the management port.')
agMgmtNewCfgIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgIpAddr.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgIpAddr.setDescription('The IP address of the management port.')
agMgmtCurCfgMask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgMask.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgMask.setDescription('The subnet mask of the management port.')
agMgmtNewCfgMask = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgMask.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgMask.setDescription('The subnet mask of the management port.')
agMgmtCurCfgGateway = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgGateway.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgGateway.setDescription('The default gateway for the management port.')
agMgmtNewCfgGateway = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgGateway.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgGateway.setDescription('The default gateway for the management port.')
agMgmtCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgState.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgState.setDescription('Enable/disable management port.')
agMgmtNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgState.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgState.setDescription('Enable/disable management port.')
agMgmtCurCfgNtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgNtp.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgNtp.setDescription('Specifies NTP access is over management port or data port.')
agMgmtNewCfgNtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgNtp.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgNtp.setDescription('Specifies NTP access is over management port or data port.')
agMgmtCurCfgRadius = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgRadius.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgRadius.setDescription('Specifies RADIUS server access is over management port or data port.')
agMgmtNewCfgRadius = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgRadius.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgRadius.setDescription('Specifies RADIUS server access is over management port or data port.')
agMgmtCurCfgSmtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgSmtp.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgSmtp.setDescription('Specifies SMTP access is over management port or data port.')
agMgmtNewCfgSmtp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgSmtp.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgSmtp.setDescription('Specifies SMTP access is over management port or data port.')
agMgmtCurCfgSnmp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgSnmp.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgSnmp.setDescription('Specifies SNMP trap host access is over management port or data port.')
agMgmtNewCfgSnmp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgSnmp.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgSnmp.setDescription('Specifies SNMP trap host access is over management port or data port.')
agMgmtCurCfgSyslog = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgSyslog.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgSyslog.setDescription('Specifies syslog host access is over management port or data port.')
agMgmtNewCfgSyslog = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgSyslog.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgSyslog.setDescription('Specifies syslog host access is over management port or data port.')
agMgmtCurCfgTftp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgTftp.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgTftp.setDescription('Specifies TFTP access is over management port or data port.')
agMgmtNewCfgTftp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgTftp.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgTftp.setDescription('Specifies TFTP access is over management port or data port.')
agMgmtCurCfgDns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgDns.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgDns.setDescription('Specifies DNS access is over management port or data port.')
agMgmtNewCfgDns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgDns.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgDns.setDescription('Specifies DNS access is over management port or data port.')
agMgmtCurCfgTacacs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgTacacs.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgTacacs.setDescription('Specifies TACACS+ server access is over management port or data port.')
agMgmtNewCfgTacacs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgTacacs.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgTacacs.setDescription('Specifies TACACS+ server access is over management port or data port.')
agMgmtCurCfgIntr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgIntr.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgIntr.setDescription('The management port gateway health check interval (in seconds).')
agMgmtNewCfgIntr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgIntr.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgIntr.setDescription('The management port gateway health check interval (in seconds).')
agMgmtCurCfgRetry = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgRetry.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgRetry.setDescription('The management port gateway retries before out of service.')
agMgmtNewCfgRetry = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgRetry.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgRetry.setDescription('The management port gateway retries before out of service.')
agMgmtCurCfgSonmp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgSonmp.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgSonmp.setDescription('Specifies whether to use management port IP address or interface IP address in the SONMP Hello packets.')
agMgmtNewCfgSonmp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgSonmp.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgSonmp.setDescription('Specifies whether to use management port IP address or interface IP address in the SONMP Hello packets.')
agMgmtCurCfgWlm = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgWlm.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgWlm.setDescription('Specifies WLM SASP is over management port or data port.')
agMgmtNewCfgWlm = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgWlm.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgWlm.setDescription('Specifies WLM SASP is over management port or data port.')
agMgmtCurCfgReport = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtCurCfgReport.setStatus('current')
if mibBuilder.loadTexts: agMgmtCurCfgReport.setDescription('Specifies reporting server is over management port or data port.')
agMgmtNewCfgReport = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("data", 1), ("mgmt", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtNewCfgReport.setStatus('current')
if mibBuilder.loadTexts: agMgmtNewCfgReport.setDescription('Specifies reporting server is over management port or data port.')
agMgmtPort = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 23))
agMgmtPortCurCfgSpeed = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 23, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbs10", 1), ("mbs100", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtPortCurCfgSpeed.setStatus('current')
if mibBuilder.loadTexts: agMgmtPortCurCfgSpeed.setDescription('Set Management port link speed.')
agMgmtPortNewCfgSpeed = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 23, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbs10", 1), ("mbs100", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtPortNewCfgSpeed.setStatus('current')
if mibBuilder.loadTexts: agMgmtPortNewCfgSpeed.setDescription('Set Management port link speed.')
agMgmtPortCurCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 23, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtPortCurCfgMode.setStatus('current')
if mibBuilder.loadTexts: agMgmtPortCurCfgMode.setDescription('Set Management port full or half duplex mode.')
agMgmtPortNewCfgMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 23, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("any", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtPortNewCfgMode.setStatus('current')
if mibBuilder.loadTexts: agMgmtPortNewCfgMode.setDescription('Set Management port full or half duplex mode.')
agMgmtPortCurCfgAuto = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 23, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtPortCurCfgAuto.setStatus('current')
if mibBuilder.loadTexts: agMgmtPortCurCfgAuto.setDescription('Set Management port autonegotiation.')
agMgmtPortNewCfgAuto = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 9, 23, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agMgmtPortNewCfgAuto.setStatus('current')
if mibBuilder.loadTexts: agMgmtPortNewCfgAuto.setDescription('Set Management port autonegotiation.')
agSslprocCurCfgIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSslprocCurCfgIpAddr.setStatus('current')
if mibBuilder.loadTexts: agSslprocCurCfgIpAddr.setDescription('The SSL cluster management IP.')
agSslprocNewCfgIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSslprocNewCfgIpAddr.setStatus('current')
if mibBuilder.loadTexts: agSslprocNewCfgIpAddr.setDescription('The SSL cluster management IP.')
agSslprocCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSslprocCurCfgPort.setStatus('current')
if mibBuilder.loadTexts: agSslprocCurCfgPort.setDescription('The SSL cluster management port.')
agSslprocNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSslprocNewCfgPort.setStatus('current')
if mibBuilder.loadTexts: agSslprocNewCfgPort.setDescription('The SSL cluster management port.')
agSslprocCurCfgRts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSslprocCurCfgRts.setStatus('current')
if mibBuilder.loadTexts: agSslprocCurCfgRts.setDescription('Enable/disable RTS processing.')
agSslprocNewCfgRts = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSslprocNewCfgRts.setStatus('current')
if mibBuilder.loadTexts: agSslprocNewCfgRts.setDescription('Enabled/disable RTS processing.')
agSslprocCurCfgFilt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSslprocCurCfgFilt.setStatus('current')
if mibBuilder.loadTexts: agSslprocCurCfgFilt.setDescription('Enable/disable filtering.')
agSslprocNewCfgFilt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 10, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSslprocNewCfgFilt.setStatus('current')
if mibBuilder.loadTexts: agSslprocNewCfgFilt.setDescription('Enabled/disable filtering.')
agCurCfgSonmpSrcIf = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSonmpSrcIf.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSonmpSrcIf.setDescription('The IP address used in the SONMP hello packets. The switch should be reachable via SNMP at this IP address.')
agNewCfgSonmpSrcIf = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 15, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSonmpSrcIf.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSonmpSrcIf.setDescription('The IP address used in the SONMP hello packets. The switch should be reachable via SNMP at this IP address.')
tacCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgPrimaryIpAddr.setDescription('The IP address of the Primary TACACS+ server.')
tacNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgPrimaryIpAddr.setDescription('The IP address of the Primary TACACS+ server.')
tacCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgSecondaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgSecondaryIpAddr.setDescription('The IP address of the Secondary TACSACS server.')
tacNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgSecondaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgSecondaryIpAddr.setDescription('The IP address of the Secondary TACACS+ server.')
tacCurCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgPort.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgPort.setDescription('Specify the TACACS+ port number.')
tacNewCfgPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgPort.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgPort.setDescription('Specify the TACACS+ port number.')
tacCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgTimeout.setDescription('The maximum number of seconds before resending authentication to TACACS+ server.')
tacNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgTimeout.setDescription('The maximum number of seconds before resending authentication to TACACS+ server.')
tacCurCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgRetries.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgRetries.setDescription('Number of retries to the TACACS+ server.')
tacNewCfgRetries = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgRetries.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgRetries.setDescription('Number of retries to the TACACS+ server.')
tacCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgState.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgState.setDescription('Enable or disbale TACACS+ authentication.')
tacNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgState.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgState.setDescription('Enable or disable TACACS+ authentication.')
tacCurCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgAuthenString.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgAuthenString.setDescription('The TACACS+ authentication string.')
tacNewCfgAuthenString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgAuthenString.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgAuthenString.setDescription('The TACACS+ authentication string.')
tacCurCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgTelnet.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgTelnet.setDescription('Enable or disbale TACACS+ backdoor for telnet.')
tacNewCfgTelnet = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgTelnet.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgTelnet.setDescription('Enable or disable TACACS+ backdoor for telnet.')
tacCurCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgAuthenSecondString.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgAuthenSecondString.setDescription('The second TACACS+ authentication string.')
tacNewCfgAuthenSecondString = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgAuthenSecondString.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgAuthenSecondString.setDescription('The second TACACS+ authentication string.')
tacCurCfgCmap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tacCurCfgCmap.setStatus('current')
if mibBuilder.loadTexts: tacCurCfgCmap.setDescription('Enable/Disable Tacacs+ new prividlege level maping.')
tacNewCfgCmap = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 11, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tacNewCfgCmap.setStatus('current')
if mibBuilder.loadTexts: tacNewCfgCmap.setDescription('Enable/Disable Tacacs+ new prividlege level maping.')
agMgmtNetTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agMgmtNetTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: agMgmtNetTableMaxSize.setDescription('The maximum number of entries in the Management Network Table.')
agCurCfgMgmtNetTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 2), )
if mibBuilder.loadTexts: agCurCfgMgmtNetTable.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetTable.setDescription('The table for Management Network definitions in the current configuration block.')
agCurCfgMgmtNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agCurCfgMgmtNetIndex"))
if mibBuilder.loadTexts: agCurCfgMgmtNetEntry.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetEntry.setDescription('A row in the management network definition table.')
agCurCfgMgmtNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetIndex.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetIndex.setDescription('The index of the Management Network Definition table.')
agCurCfgMgmtNetSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetSubnet.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetSubnet.setDescription('The Management Network Address in the current_configuration block.')
agCurCfgMgmtNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgMgmtNetMask.setStatus('current')
if mibBuilder.loadTexts: agCurCfgMgmtNetMask.setDescription('The Management Network Mask in the current_configuration block.')
agNewCfgMgmtNetTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 3), )
if mibBuilder.loadTexts: agNewCfgMgmtNetTable.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetTable.setDescription('The table for Management Network definitions in the new configuration block.')
agNewCfgMgmtNetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agNewCfgMgmtNetIndex"))
if mibBuilder.loadTexts: agNewCfgMgmtNetEntry.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetEntry.setDescription('A row in the management network definition table.')
agNewCfgMgmtNetIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgMgmtNetIndex.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetIndex.setDescription('The index of the Management Network Definition table.')
agNewCfgMgmtNetSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetSubnet.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetSubnet.setDescription('The Management Network Address in the new_configuration block.')
agNewCfgMgmtNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetMask.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetMask.setDescription('The Management Network Mask in the new_configuration block.')
agNewCfgMgmtNetDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 12, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgMgmtNetDelete.setStatus('current')
if mibBuilder.loadTexts: agNewCfgMgmtNetDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
agPgrpMatchTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPgrpMatchTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: agPgrpMatchTableMaxSize.setDescription('The maximum number of entries in the Pattern Match Group Table.')
agCurCfgPgrpMatchTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 2), )
if mibBuilder.loadTexts: agCurCfgPgrpMatchTable.setStatus('current')
if mibBuilder.loadTexts: agCurCfgPgrpMatchTable.setDescription('The table for Pattern Match Group definitions in the current configuration block.')
agCurCfgPgrpMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agCurCfgPgrpMatchIndex"))
if mibBuilder.loadTexts: agCurCfgPgrpMatchEntry.setStatus('current')
if mibBuilder.loadTexts: agCurCfgPgrpMatchEntry.setDescription('A row in the Pattern Match Group table.')
agCurCfgPgrpMatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgPgrpMatchIndex.setStatus('current')
if mibBuilder.loadTexts: agCurCfgPgrpMatchIndex.setDescription('The index of the Pattern Match Group Definition table.')
agCurCfgPgrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgPgrpName.setStatus('current')
if mibBuilder.loadTexts: agCurCfgPgrpName.setDescription('The name for the Pattern Match Group.')
agCurCfgPgrpMatchBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 2, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgPgrpMatchBmap.setStatus('current')
if mibBuilder.loadTexts: agCurCfgPgrpMatchBmap.setDescription('The pattern matching rules applied to the port. The pattern rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ string 9 || || || ||___ string 8 || |____ string 7 || . . . ||_________ string 2 |__________ string 1 (as index to slbCurCfgUrlLbPathTable) where x : 1 - The represented string matching rule applied 0 - The represented string matching rule applied')
agNewCfgPgrpMatchTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3), )
if mibBuilder.loadTexts: agNewCfgPgrpMatchTable.setStatus('current')
if mibBuilder.loadTexts: agNewCfgPgrpMatchTable.setDescription('The table for Pattern Match Group definitions in the new configuration block.')
agNewCfgPgrpMatchEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agNewCfgPgrpMatchIndex"))
if mibBuilder.loadTexts: agNewCfgPgrpMatchEntry.setStatus('current')
if mibBuilder.loadTexts: agNewCfgPgrpMatchEntry.setDescription('A row in the Pattern Match Group definition table.')
agNewCfgPgrpMatchIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgPgrpMatchIndex.setStatus('current')
if mibBuilder.loadTexts: agNewCfgPgrpMatchIndex.setDescription('The index of the Pattern Match Group Definition table.')
agNewCfgPgrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgPgrpName.setStatus('current')
if mibBuilder.loadTexts: agNewCfgPgrpName.setDescription('The name for the Pattern Match Group.')
agNewCfgPgrpMatchAdd = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgPgrpMatchAdd.setStatus('current')
if mibBuilder.loadTexts: agNewCfgPgrpMatchAdd.setDescription('The Pattern Match Group String added in the new_configuration block.')
agNewCfgPgrpMatchRem = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgPgrpMatchRem.setStatus('current')
if mibBuilder.loadTexts: agNewCfgPgrpMatchRem.setDescription('The Pattern Match Group String removed in the new_configuration block.')
agNewCfgPgrpMatchBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgPgrpMatchBmap.setStatus('current')
if mibBuilder.loadTexts: agNewCfgPgrpMatchBmap.setDescription('The pattern matching rules applied to the port. The pattern rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ string 9 || || || ||___ string 8 || |____ string 7 || . . . ||_________ string 2 |__________ string 1 (as index to slbCurCfgUrlLbPathTable) where x : 1 - The represented string matching rule applied 0 - The represented string matching rule applied')
agNewCfgPgrpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: agNewCfgPgrpDelete.setStatus('current')
if mibBuilder.loadTexts: agNewCfgPgrpDelete.setDescription('By setting the value to delete(2), the entire row is deleted.')
agCfgSecurityPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2), )
if mibBuilder.loadTexts: agCfgSecurityPortTable.setStatus('current')
if mibBuilder.loadTexts: agCfgSecurityPortTable.setDescription('The table of Security related features enabled/disabled for this port.')
agCfgSecurityPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agCfgSecurityPortIndx"))
if mibBuilder.loadTexts: agCfgSecurityPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: agCfgSecurityPortTableEntry.setDescription('A row in the Security related in the current configuration block.')
agCfgSecurityPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgSecurityPortIndx.setStatus('current')
if mibBuilder.loadTexts: agCfgSecurityPortIndx.setDescription('The port index.')
agCurCfgSecurityDosState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSecurityDosState.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSecurityDosState.setDescription('Enable/Disable DOS attack per port.')
agNewCfgSecurityDosState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecurityDosState.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSecurityDosState.setDescription('Enable/Disable DOS attack per port.')
agCurCfgSecurityIpAclState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSecurityIpAclState.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSecurityIpAclState.setDescription('Enable/Disable IP ACL per port.')
agNewCfgSecurityIpAclState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecurityIpAclState.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSecurityIpAclState.setDescription('Enable/Disable IP ACL per port.')
agCurCfgSecurityUbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSecurityUbState.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSecurityUbState.setDescription('Enable/Disable UDP Blast per port.')
agNewCfgSecurityUbState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecurityUbState.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSecurityUbState.setDescription('Enable/Disable UDP Blast per port.')
agCurCfgSecurityBogonState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSecurityBogonState.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSecurityBogonState.setDescription('Enable/Disable Bogon IP ACL per port.')
agNewCfgSecurityBogonState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecurityBogonState.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSecurityBogonState.setDescription('Enable/Disable Bogon IP ACL per port.')
agCurCfgSecurityAttacksBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSecurityAttacksBmap.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSecurityAttacksBmap.setDescription('The DoS Attacks added/removed for this port. The selected DoS Attacks are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_______ 9 || || || ||_________ 8 || |__________ 7 || . . . ||________________ 2 |________________ 1 1 - IPLen 2 - IPVersion 3 - Broadcast 4 - Loopback 5 - Land 6 - IPReserved 7 - IPTTL 8 - IPProt 9 - IPOptLen 10 - FragMoreDont 11 - FragData 12 - FragBoundary 13 - FragLast 14 - FragDontOff 15 - FragOpt 16 - FragOff 17 - FragOversize 18 - TCPLen 19 - TCPPortZero 20 - BlatAttack 21 - TCPReserved 22 - NullScanAttack 23 - FullXmasScan 24 - FinScan 25 - VecnaScan 26 - XmasScanAttack 27 - SynFinScan 28 - FlagAbnormal 29 - SYNData 30 - SYNFrag 31 - FTPPort 32 - DNSPort 33 - SeqZero 34 - AckZero 35 - TCPOptLen 36 - UDPLen 37 - UDPPortZero 38 - FraggleAttack 39 - Pepsi 40 - Rc8 41 - SNMPNull 42 - ICMPLen 43 - SmurfAttack 44 - ICMPData 45 - ICMPOff 46 - ICMPType 47 - IGMPLen 48 - IGMPFrag 49 - IGMPType 50 - ARPLen 51 - ARPNbCast 52 - ARPNuCast 53 - ARPSpoof 54 - GARP 55 - IP6Len 56 - IP6Version where x : 1 - The represented DoS Attack is enabled 0 - The represented DoS Attack is disabled')
agNewCfgSecurityAttacksBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgSecurityAttacksBmap.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSecurityAttacksBmap.setDescription('The DoS Attacks added/removed for this port. The selected DoS Attacks are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |______ 9 || || || ||________ 8 || |_________ 7 || . . . ||_______________ 2 |________________ 1 1 - IPLen 2 - IPVersion 3 - Broadcast 4 - Loopback 5 - Land 6 - IPReserved 7 - IPTTL 8 - IPProt 9 - IPOptLen 10 - FragMoreDont 11 - FragData 12 - FragBoundary 13 - FragLast 14 - FragDontOff 15 - FragOpt 16 - FragOff 17 - FragOversize 18 - TCPLen 19 - TCPPortZero 20 - BlatAttack 21 - TCPReserved 22 - NullScanAttack 23 - FullXmasScan 24 - FinScan 25 - VecnaScan 26 - XmasScanAttack 27 - SynFinScan 28 - FlagAbnormal 29 - SYNData 30 - SYNFrag 31 - FTPPort 32 - DNSPort 33 - SeqZero 34 - AckZero 35 - TCPOptLen 36 - UDPLen 37 - UDPPortZero 38 - FraggleAttack 39 - Pepsi 40 - Rc8 41 - SNMPNull 42 - ICMPLen 43 - SmurfAttack 44 - ICMPData 45 - ICMPOff 46 - ICMPType 47 - IGMPLen 48 - IGMPFrag 49 - IGMPType 50 - ARPLen 51 - ARPNbCast 52 - ARPNuCast 53 - ARPSpoof 54 - GARP 55 - IP6Len 56 - IP6Version where x : 1 - The represented DoS Attack is enabled 0 - The represented DoS Attack is disabled')
agNewCfgSecurityAddAttack = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56))).clone(namedValues=NamedValues(("iplen", 1), ("ipversion", 2), ("broadcast", 3), ("loopback", 4), ("land", 5), ("ipreserved", 6), ("ipttl", 7), ("ipprot", 8), ("ipoptlen", 9), ("fragmoredont", 10), ("fragdata", 11), ("fragboundary", 12), ("fraglast", 13), ("fragdontoff", 14), ("fragopt", 15), ("fragoff", 16), ("fragoversize", 17), ("tcplen", 18), ("tcpportzero", 19), ("blat", 20), ("tcpreserved", 21), ("nullscan", 22), ("fullxmasscan", 23), ("finscan", 24), ("vecnascan", 25), ("xmassscan", 26), ("synfinscan", 27), ("flagabnormal", 28), ("syndata", 29), ("synfrag", 30), ("ftpport", 31), ("dnsport", 32), ("seqzero", 33), ("ackzero", 34), ("tcpoptlen", 35), ("udplen", 36), ("udpportzero", 37), ("fraggle", 38), ("pepsi", 39), ("rc8", 40), ("snmpnull", 41), ("icmplen", 42), ("smurf", 43), ("icmpdata", 44), ("icmpoff", 45), ("icmptype", 46), ("igmplen", 47), ("igmpfrag", 48), ("igmptype", 49), ("arplen", 50), ("arpnbcast", 51), ("arpnucast", 52), ("arpspoof", 53), ("garp", 54), ("ip6len", 55), ("ip6version", 56)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecurityAddAttack.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSecurityAddAttack.setDescription("This is an action object to add a DoS Attack to a port. The value specified with this object is number given in this description. 1 - IPLen 2 - IPVersion 3 - Broadcast 4 - Loopback 5 - Land 6 - IPReserved 7 - IPTTL 8 - IPProt 9 - IPOptLen 10 - FragMoreDont 11 - FragData 12 - FragBoundary 13 - FragLast 14 - FragDontOff 15 - FragOpt 16 - FragOff 17 - FragOversize 18 - TCPLen 19 - TCPPortZero 20 - BlatAttack 21 - TCPReserved 22 - NullScanAttack 23 - FullXmasScan 24 - FinScan 25 - VecnaScan 26 - XmasScanAttack 27 - SynFinScan 28 - FlagAbnormal 29 - SYNData 30 - SYNFrag 31 - FTPPort 32 - DNSPort 33 - SeqZero 34 - AckZero 35 - TCPOptLen 36 - UDPLen 37 - UDPPortZero 38 - FraggleAttack 39 - Pepsi 40 - Rc8 41 - SNMPNull 42 - ICMPLen 43 - SmurfAttack 44 - ICMPData 45 - ICMPOff 46 - ICMPType 47 - IGMPLen 48 - IGMPFrag 49 - IGMPType 50 - ARPLen 51 - ARPNbCast 52 - ARPNuCast 53 - ARPSpoof 54 - GARP 55 - IP6Len 56 - IP6Version When read, the value '0' is returned always.")
agNewCfgSecurityRemAttack = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56))).clone(namedValues=NamedValues(("iplen", 1), ("ipversion", 2), ("broadcast", 3), ("loopback", 4), ("land", 5), ("ipreserved", 6), ("ipttl", 7), ("ipprot", 8), ("ipoptlen", 9), ("fragmoredont", 10), ("fragdata", 11), ("fragboundary", 12), ("fraglast", 13), ("fragdontoff", 14), ("fragopt", 15), ("fragoff", 16), ("fragoversize", 17), ("tcplen", 18), ("tcpportzero", 19), ("blat", 20), ("tcpreserved", 21), ("nullscan", 22), ("fullxmasscan", 23), ("finscan", 24), ("vecnascan", 25), ("xmassscan", 26), ("synfinscan", 27), ("flagabnormal", 28), ("syndata", 29), ("synfrag", 30), ("ftpport", 31), ("dnsport", 32), ("seqzero", 33), ("ackzero", 34), ("tcpoptlen", 35), ("udplen", 36), ("udpportzero", 37), ("fraggle", 38), ("pepsi", 39), ("rc8", 40), ("snmpnull", 41), ("icmplen", 42), ("smurf", 43), ("icmpdata", 44), ("icmpoff", 45), ("icmptype", 46), ("igmplen", 47), ("igmpfrag", 48), ("igmptype", 49), ("arplen", 50), ("arpnbcast", 51), ("arpnucast", 52), ("arpspoof", 53), ("garp", 54), ("ip6len", 55), ("ip6version", 56)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecurityRemAttack.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSecurityRemAttack.setDescription("This is an action object to remove a DoS attack for a port. The value specified with this object is number given in this description. 1 - IPLen 2 - IPVersion 3 - Broadcast 4 - Loopback 5 - Land 6 - IPReserved 7 - IPTTL 8 - IPProt 9 - IPOptLen 10 - FragMoreDont 11 - FragData 12 - FragBoundary 13 - FragLast 14 - FragDontOff 15 - FragOpt 16 - FragOff 17 - FragOversize 18 - TCPLen 19 - TCPPortZero 20 - BlatAttack 21 - TCPReserved 22 - NullScanAttack 23 - FullXmasScan 24 - FinScan 25 - VecnaScan 26 - XmasScanAttack 27 - SynFinScan 28 - FlagAbnormal 29 - SYNData 30 - SYNFrag 31 - FTPPort 32 - DNSPort 33 - SeqZero 34 - AckZero 35 - TCPOptLen 36 - UDPLen 37 - UDPPortZero 38 - FraggleAttack 39 - Pepsi 40 - Rc8 41 - SNMPNull 42 - ICMPLen 43 - SmurfAttack 44 - ICMPData 45 - ICMPOff 46 - ICMPType 47 - IGMPLen 48 - IGMPFrag 49 - IGMPType 50 - ARPLen 51 - ARPNbCast 52 - ARPNuCast 53 - ARPSpoof 54 - GARP 55 - IP6Len 56 - IP6Version When read, the value '0' is returned always.")
agNewCfgSecurityDoSAttacks = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("addall", 2), ("remall", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecurityDoSAttacks.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSecurityDoSAttacks.setDescription("Add all DoS attacks to the port by setting the value to '2'. Remove all DoS attacks from the port by setting the value to '3'. Do nothing by setting the value to '1'. When read, the value '0' is returned always.")
agCurCfgSecuritySymantecState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgSecuritySymantecState.setStatus('current')
if mibBuilder.loadTexts: agCurCfgSecuritySymantecState.setDescription('Enable/Disable Symantec IPS Processing per port.')
agNewCfgSecuritySymantecState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgSecuritySymantecState.setStatus('current')
if mibBuilder.loadTexts: agNewCfgSecuritySymantecState.setDescription('Enable/Disable Symantec IPS Processing per port.')
ipAclTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ipAclTableMaxSize.setDescription('The maximum number of rows in the IP ACL table.')
ipAclCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 2), )
if mibBuilder.loadTexts: ipAclCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: ipAclCurCfgTable.setDescription('The table of IP ACL in the current configuration block.')
ipAclCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "ipAclCurCfgIndx"))
if mibBuilder.loadTexts: ipAclCurCfgEntry.setStatus('current')
if mibBuilder.loadTexts: ipAclCurCfgEntry.setDescription('A row in the IP ACL table')
ipAclCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclCurCfgIndx.setStatus('current')
if mibBuilder.loadTexts: ipAclCurCfgIndx.setDescription('The index of the IP ACL table.')
ipAclCurCfgIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclCurCfgIp.setStatus('current')
if mibBuilder.loadTexts: ipAclCurCfgIp.setDescription('The IP address of the entry.')
ipAclCurCfgMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclCurCfgMask.setStatus('current')
if mibBuilder.loadTexts: ipAclCurCfgMask.setDescription('The IP address Mask of the entry.')
ipAclNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 3), )
if mibBuilder.loadTexts: ipAclNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: ipAclNewCfgTable.setDescription('The table of IP ACL in the new configuration block.')
ipAclNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "ipAclNewCfgIndx"))
if mibBuilder.loadTexts: ipAclNewCfgEntry.setStatus('current')
if mibBuilder.loadTexts: ipAclNewCfgEntry.setDescription('A row in the IP ACL table')
ipAclNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclNewCfgIndx.setStatus('current')
if mibBuilder.loadTexts: ipAclNewCfgIndx.setDescription('The index of the IP ACL table.')
ipAclNewCfgIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAclNewCfgIp.setStatus('current')
if mibBuilder.loadTexts: ipAclNewCfgIp.setDescription('The IP address of the entry.')
ipAclNewCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAclNewCfgAction.setStatus('current')
if mibBuilder.loadTexts: ipAclNewCfgAction.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipAclNewCfgMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 3, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipAclNewCfgMask.setStatus('current')
if mibBuilder.loadTexts: ipAclNewCfgMask.setDescription('The IP address Mask of the entry.')
udpBlastudpPortTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastudpPortTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: udpBlastudpPortTableMaxSize.setDescription('The maximum number of rows in the UDP Blast Port table.')
udpBlastCurCfgudpPortPacketLimit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastCurCfgudpPortPacketLimit.setStatus('current')
if mibBuilder.loadTexts: udpBlastCurCfgudpPortPacketLimit.setDescription('The default packet limit in the current configuration block.')
udpBlastCurCfgudpPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 3), )
if mibBuilder.loadTexts: udpBlastCurCfgudpPortTable.setStatus('current')
if mibBuilder.loadTexts: udpBlastCurCfgudpPortTable.setDescription('The UDP Blast port table in the current configuration block.')
udpBlastCurCfgudpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "udpBlastCurCfgudpPortLowIndx"), (0, "ALTEON-CHEETAH-SWITCH-MIB", "udpBlastCurCfgudpPortHighIndx"))
if mibBuilder.loadTexts: udpBlastCurCfgudpPortEntry.setStatus('current')
if mibBuilder.loadTexts: udpBlastCurCfgudpPortEntry.setDescription('A row in the UDP Blast UDP Port table')
udpBlastCurCfgudpPortLowIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastCurCfgudpPortLowIndx.setStatus('current')
if mibBuilder.loadTexts: udpBlastCurCfgudpPortLowIndx.setDescription('The low UDP port number of UDP port range in the UDP Port table.')
udpBlastCurCfgudpPortHighIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastCurCfgudpPortHighIndx.setStatus('current')
if mibBuilder.loadTexts: udpBlastCurCfgudpPortHighIndx.setDescription('The high UDP port number of UDP port range in the UDP Port table. If highIndx and lowIndx are set to the same, it is considered a single port instead of range')
udpBlastCurCfgudpPortEntryPacketLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastCurCfgudpPortEntryPacketLimit.setStatus('current')
if mibBuilder.loadTexts: udpBlastCurCfgudpPortEntryPacketLimit.setDescription('The Packet Limit of the UDP Port Entry.')
udpBlastNewCfgudpPortPacketLimit = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: udpBlastNewCfgudpPortPacketLimit.setStatus('current')
if mibBuilder.loadTexts: udpBlastNewCfgudpPortPacketLimit.setDescription('The default packet limit in the new configuration block.')
udpBlastNewCfgudpPortTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 5), )
if mibBuilder.loadTexts: udpBlastNewCfgudpPortTable.setStatus('current')
if mibBuilder.loadTexts: udpBlastNewCfgudpPortTable.setDescription('The UDP Blast table in the new configuration block.')
udpBlastNewCfgudpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "udpBlastNewCfgudpPortLowIndx"), (0, "ALTEON-CHEETAH-SWITCH-MIB", "udpBlastNewCfgudpPortHighIndx"))
if mibBuilder.loadTexts: udpBlastNewCfgudpPortEntry.setStatus('current')
if mibBuilder.loadTexts: udpBlastNewCfgudpPortEntry.setDescription('A row in the UDP Blast UDP Port table')
udpBlastNewCfgudpPortLowIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastNewCfgudpPortLowIndx.setStatus('current')
if mibBuilder.loadTexts: udpBlastNewCfgudpPortLowIndx.setDescription("The low UDP port number of UDP port range in the UDP Port table. The difference between the minimum of all the low UDP port number specified and the maximum of all the high UDP port number specified can't exceed 5000.")
udpBlastNewCfgudpPortHighIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: udpBlastNewCfgudpPortHighIndx.setStatus('current')
if mibBuilder.loadTexts: udpBlastNewCfgudpPortHighIndx.setDescription("The high UDP port number of UDP port range in the UDP Port table. The difference between the minimum of all the low UDP port number specified and the maximum of all the high UDP port number specified can't exceed 5000. If highIndx and lowIndx are set to the same, it is considered a single port instead of range.")
udpBlastNewCfgudpPortEntryDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: udpBlastNewCfgudpPortEntryDelete.setStatus('current')
if mibBuilder.loadTexts: udpBlastNewCfgudpPortEntryDelete.setDescription('This deletes the UDP port entry from lowIndx to highIndx.')
udpBlastNewCfgudpPortEntryPacketLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20000000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: udpBlastNewCfgudpPortEntryPacketLimit.setStatus('current')
if mibBuilder.loadTexts: udpBlastNewCfgudpPortEntryPacketLimit.setDescription('The Packet Limit of the UDP Port Entry.')
secCurCfgSecurityLogThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secCurCfgSecurityLogThreshold.setStatus('current')
if mibBuilder.loadTexts: secCurCfgSecurityLogThreshold.setDescription('The rate threshold for security logging in packets/sec. Rate zero indicates no rate threshold.')
secNewCfgSecurityLogThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1048576))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secNewCfgSecurityLogThreshold.setStatus('current')
if mibBuilder.loadTexts: secNewCfgSecurityLogThreshold.setDescription('The rate threshold for security logging in packets/sec. Rate zero indicates no rate threshold.')
secCurCfgPacketDepth = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: secCurCfgPacketDepth.setStatus('current')
if mibBuilder.loadTexts: secCurCfgPacketDepth.setDescription('Depth of match for pattern matching, in units of packets. A value of 0 means match all packets in the stream.')
secNewCfgPacketDepth = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secNewCfgPacketDepth.setStatus('current')
if mibBuilder.loadTexts: secNewCfgPacketDepth.setDescription('Depth of match for pattern matching, in units of packets. A value of 0 means match all packets in the stream.')
secCurCfgIpAclSyslogThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secCurCfgIpAclSyslogThreshold.setStatus('current')
if mibBuilder.loadTexts: secCurCfgIpAclSyslogThreshold.setDescription("Display syslog when threshold number of ACL's have been hit.")
secNewCfgIpAclSyslogThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secNewCfgIpAclSyslogThreshold.setStatus('current')
if mibBuilder.loadTexts: secNewCfgIpAclSyslogThreshold.setDescription("Display syslog when threshold number of ACL's have been hit.")
secCurCfgIpAclSyslogTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: secCurCfgIpAclSyslogTime.setStatus('current')
if mibBuilder.loadTexts: secCurCfgIpAclSyslogTime.setDescription('Display syslog after specified number of minutes have passed.')
secNewCfgIpAclSyslogTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 5, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: secNewCfgIpAclSyslogTime.setStatus('current')
if mibBuilder.loadTexts: secNewCfgIpAclSyslogTime.setDescription('Display syslog after specified number of minutes have passed.')
dosCurCfgIPTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosCurCfgIPTTL.setStatus('current')
if mibBuilder.loadTexts: dosCurCfgIPTTL.setDescription('The smallest allowable IP ttl.')
dosNewCfgIPTTL = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosNewCfgIPTTL.setStatus('current')
if mibBuilder.loadTexts: dosNewCfgIPTTL.setDescription('The smallest allowable IP ttl.')
dosCurCfgIPProt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosCurCfgIPProt.setStatus('current')
if mibBuilder.loadTexts: dosCurCfgIPProt.setDescription('The highest allowable IP protocol.')
dosNewCfgIPProt = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosNewCfgIPProt.setStatus('current')
if mibBuilder.loadTexts: dosNewCfgIPProt.setDescription('The highest allowable IP protocol.')
dosCurCfgFragdata = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosCurCfgFragdata.setStatus('current')
if mibBuilder.loadTexts: dosCurCfgFragdata.setDescription('The smallest allowable IP fragment payload.')
dosNewCfgFragdata = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosNewCfgFragdata.setStatus('current')
if mibBuilder.loadTexts: dosNewCfgFragdata.setDescription('The smallest allowable IP fragment payload.')
dosCurCfgFragoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 248))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosCurCfgFragoff.setStatus('current')
if mibBuilder.loadTexts: dosCurCfgFragoff.setDescription('The smallest allowable IP fragment offset.')
dosNewCfgFragoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(16, 248))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosNewCfgFragoff.setStatus('current')
if mibBuilder.loadTexts: dosNewCfgFragoff.setDescription('The smallest allowable IP fragment offset.')
dosCurCfgSYNdata = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosCurCfgSYNdata.setStatus('current')
if mibBuilder.loadTexts: dosCurCfgSYNdata.setDescription('The largest allowable TCP SYN payload.')
dosNewCfgSYNdata = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosNewCfgSYNdata.setStatus('current')
if mibBuilder.loadTexts: dosNewCfgSYNdata.setDescription('The largest allowable TCP SYN payload.')
dosCurCfgICMPdata = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9026))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosCurCfgICMPdata.setStatus('current')
if mibBuilder.loadTexts: dosCurCfgICMPdata.setDescription('The largest allowable ICMP payload.')
dosNewCfgICMPdata = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 9026))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosNewCfgICMPdata.setStatus('current')
if mibBuilder.loadTexts: dosNewCfgICMPdata.setDescription('The largest allowable ICMP payload.')
dosCurCfgICMPoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8190))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dosCurCfgICMPoff.setStatus('current')
if mibBuilder.loadTexts: dosCurCfgICMPoff.setDescription('The largest allowable ICMP fragment offset.')
dosNewCfgICMPoff = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 6, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8190))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dosNewCfgICMPoff.setStatus('current')
if mibBuilder.loadTexts: dosNewCfgICMPoff.setDescription('The largest allowable ICMP fragment offset.')
ipDstAclTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDstAclTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ipDstAclTableMaxSize.setDescription('The maximum number of rows in the DST IP ACL table.')
ipDstAclCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 2), )
if mibBuilder.loadTexts: ipDstAclCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: ipDstAclCurCfgTable.setDescription('The table of DST IP ACL in the current configuration block.')
ipDstAclCurCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "ipDstAclCurCfgIndx"))
if mibBuilder.loadTexts: ipDstAclCurCfgEntry.setStatus('current')
if mibBuilder.loadTexts: ipDstAclCurCfgEntry.setDescription('A row in the DST IP ACL table')
ipDstAclCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDstAclCurCfgIndx.setStatus('current')
if mibBuilder.loadTexts: ipDstAclCurCfgIndx.setDescription('The index of the DST IP ACL table.')
ipDstAclCurCfgIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDstAclCurCfgIp.setStatus('current')
if mibBuilder.loadTexts: ipDstAclCurCfgIp.setDescription('The IP address of the entry.')
ipDstAclCurCfgMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDstAclCurCfgMask.setStatus('current')
if mibBuilder.loadTexts: ipDstAclCurCfgMask.setDescription('The IP address Mask of the entry.')
ipDstAclNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 3), )
if mibBuilder.loadTexts: ipDstAclNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: ipDstAclNewCfgTable.setDescription('The table of DST IP ACL in the new configuration block.')
ipDstAclNewCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "ipDstAclNewCfgIndx"))
if mibBuilder.loadTexts: ipDstAclNewCfgEntry.setStatus('current')
if mibBuilder.loadTexts: ipDstAclNewCfgEntry.setDescription('A row in the DST IP ACL table')
ipDstAclNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipDstAclNewCfgIndx.setStatus('current')
if mibBuilder.loadTexts: ipDstAclNewCfgIndx.setDescription('The index of the DST IP ACL table.')
ipDstAclNewCfgIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDstAclNewCfgIp.setStatus('current')
if mibBuilder.loadTexts: ipDstAclNewCfgIp.setDescription('The IP address of the entry.')
ipDstAclNewCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDstAclNewCfgAction.setStatus('current')
if mibBuilder.loadTexts: ipDstAclNewCfgAction.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipDstAclNewCfgMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 7, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipDstAclNewCfgMask.setStatus('current')
if mibBuilder.loadTexts: ipDstAclNewCfgMask.setDescription('The IP address Mask of the entry.')
symSigBwmMappingTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symSigBwmMappingTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: symSigBwmMappingTableMaxSize.setDescription('The maximum number of entries in the Symantec Signature ID- BWM contract-Policy Mapping Table.')
symCurCfgSigBwmMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 2), )
if mibBuilder.loadTexts: symCurCfgSigBwmMappingTable.setStatus('current')
if mibBuilder.loadTexts: symCurCfgSigBwmMappingTable.setDescription('The Symantec Signature ID-BWM Contract-Policy Mapping table.')
symCurCfgSigBwmMappingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symCurCfgTblIndex"))
if mibBuilder.loadTexts: symCurCfgSigBwmMappingTableEntry.setStatus('current')
if mibBuilder.loadTexts: symCurCfgSigBwmMappingTableEntry.setDescription('A row in the Symantec Signature ID-BWM Contract-Policy Mapping table.')
symCurCfgTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symCurCfgTblIndex.setStatus('current')
if mibBuilder.loadTexts: symCurCfgTblIndex.setDescription('The Table Index.')
symCurCfgSignatureID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symCurCfgSignatureID.setStatus('current')
if mibBuilder.loadTexts: symCurCfgSignatureID.setDescription('The Symantec Signature ID.')
symCurCfgInContractID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symCurCfgInContractID.setStatus('current')
if mibBuilder.loadTexts: symCurCfgInContractID.setDescription('The BWM In-Contrat ID associated with the Signature ID.')
symCurCfgOutContractID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symCurCfgOutContractID.setStatus('current')
if mibBuilder.loadTexts: symCurCfgOutContractID.setDescription('The BWM Out-Contrat ID associated with the Signature ID.')
symNewCfgSigBwmMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 3), )
if mibBuilder.loadTexts: symNewCfgSigBwmMappingTable.setStatus('current')
if mibBuilder.loadTexts: symNewCfgSigBwmMappingTable.setDescription('The Symantec Signature ID-BWM Contract-Policy Mapping table.')
symNewCfgSigBwmMappingTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symNewCfgTblIndex"))
if mibBuilder.loadTexts: symNewCfgSigBwmMappingTableEntry.setStatus('current')
if mibBuilder.loadTexts: symNewCfgSigBwmMappingTableEntry.setDescription('A row in the Symantec Signature ID-BWM Contract-Policy Mapping table.')
symNewCfgTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symNewCfgTblIndex.setStatus('current')
if mibBuilder.loadTexts: symNewCfgTblIndex.setDescription('The Table Index.')
symNewCfgSignatureID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 3, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: symNewCfgSignatureID.setStatus('current')
if mibBuilder.loadTexts: symNewCfgSignatureID.setDescription('The Symantec Signature ID.')
symNewCfgInContractID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: symNewCfgInContractID.setStatus('current')
if mibBuilder.loadTexts: symNewCfgInContractID.setDescription('The BWM In-Contrat ID associated with the Signature ID.')
symNewCfgOutContractID = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 3, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: symNewCfgOutContractID.setStatus('current')
if mibBuilder.loadTexts: symNewCfgOutContractID.setDescription('The BWM Out-Contrat ID associated with the Signature ID.')
symNewCfgDeleteEntry = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("others", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: symNewCfgDeleteEntry.setStatus('current')
if mibBuilder.loadTexts: symNewCfgDeleteEntry.setDescription('Delete an table entry.')
symNewCfgDefaultAction = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: symNewCfgDefaultAction.setStatus('current')
if mibBuilder.loadTexts: symNewCfgDefaultAction.setDescription('The default action to be taken during LiveUpdate.')
symCurCfgDefaultAction = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symCurCfgDefaultAction.setStatus('current')
if mibBuilder.loadTexts: symCurCfgDefaultAction.setDescription('The default action to be taken during LiveUpdate.')
symSigFileVersionSeqNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 14, 8, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: symSigFileVersionSeqNumber.setStatus('current')
if mibBuilder.loadTexts: symSigFileVersionSeqNumber.setDescription('Symantec Signature File version sequence.')
agDosPortStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1), )
if mibBuilder.loadTexts: agDosPortStatsTable.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsTable.setDescription('The table of DOS port statistics.')
agDosPortStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agDosPortStatsIndx"))
if mibBuilder.loadTexts: agDosPortStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsTableEntry.setDescription('A row in the port stats table.')
agDosPortStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIndx.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsIndx.setDescription('The port index.')
agDosPortStatsIPLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIPLen.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsIPLen.setDescription('IPv4 packets with bad IP header or payload length.')
agDosPortStatsIPVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIPVersion.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsIPVersion.setDescription('IPv4 packets with IP version not 4.')
agDosPortStatsBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsBroadcast.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsBroadcast.setDescription('IPv4 packets with broadcast source or destination IP [0.0.0.0,255.255.255.255].')
agDosPortStatsLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsLoopback.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsLoopback.setDescription('IPv4 packets with loopback source or destination IP [127.0.0.0/8].')
agDosPortStatsLand = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsLand.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsLand.setDescription('IPv4 Packets with source IP equal to destination IP.')
agDosPortStatsIPReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIPReserved.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsIPReserved.setDescription('IPv4 packets with IP reserved bit is set.')
agDosPortStatsIPTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIPTTL.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsIPTTL.setDescription('IPv4 packets with small IP TTL.')
agDosPortStatsIPProt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIPProt.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsIPProt.setDescription('IPv4 packets with IP protocol is unassigned or reserved.')
agDosPortStatsIPOptLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIPOptLen.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsIPOptLen.setDescription('IPv4 packets with bad IP options length.')
agDosPortStatsFragMoreDont = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragMoreDont.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsFragMoreDont.setDescription("IPv4 packets with more fragments and don't fragment bits are set.")
agDosPortStatsFragData = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragData.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsFragData.setDescription('IPv4 packets with more fragments bit is set and small payload.')
agDosPortStatsFragBoundary = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragBoundary.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsFragBoundary.setDescription('IPv4 packets with more fragments bit is set and payload not at 8-byte boundary.')
agDosPortStatsFragLast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragLast.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsFragLast.setDescription('IPv4 packets last fragment without payload.')
agDosPortStatsFragDontOff = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragDontOff.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsFragDontOff.setDescription("IPv4 packets with non-zero fragment offset and don't fragment bits are set.")
agDosPortStatsFragOpt = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragOpt.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsFragOpt.setDescription('IPv4 packets with non-zero fragment offset and IP options.')
agDosPortStatsFragOff = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragOff.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsFragOff.setDescription('IPv4 packets with small non-zero fragment offset.')
agDosPortStatsFragOversize = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFragOversize.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsFragOversize.setDescription('IPv4 packets with non-zero fragment offset and oversize payload.')
agDosPortStatsTCPLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsTCPLen.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsTCPLen.setDescription('TCP packets with bad TCP header length.')
agDosPortStatsTCPPortZero = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsTCPPortZero.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsTCPPortZero.setDescription('TCP packets with source or destination port is zero.')
agDosPortStatsBlatAttack = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsBlatAttack.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsBlatAttack.setDescription('TCP packets source IP not equal to destination IP and source port equal to destination port.')
agDosPortStatsTCPReserved = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsTCPReserved.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsTCPReserved.setDescription('TCP packets with TCP reserved bit is set.')
agDosPortStatsNullScanAttack = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsNullScanAttack.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsNullScanAttack.setDescription('TCP packets were the TCP sequence number is zero and all control bits are zeroes.')
agDosPortStatsFullXmasScan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFullXmasScan.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsFullXmasScan.setDescription('TCP packets with all control bits are set.')
agDosPortStatsFinScan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFinScan.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsFinScan.setDescription('TCP packets with only FIN bit is set.')
agDosPortStatsVecnaScan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsVecnaScan.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsVecnaScan.setDescription('TCP packets with only URG or PUSH or URG|FIN or PSH|FIN or URG|PSH bits are set.')
agDosPortStatsXmasScanAttack = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsXmasScanAttack.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsXmasScanAttack.setDescription('TCP packets were the TCP sequence number is zero and FIN, URG and PSH bits are set.')
agDosPortStatsSynFinScan = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsSynFinScan.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsSynFinScan.setDescription('TCP packets were SYN and FIN bits are set.')
agDosPortStatsFlagAbnormal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFlagAbnormal.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsFlagAbnormal.setDescription('TCP packets with abnormal control bits combination.')
agDosPortStatsSYNData = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsSYNData.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsSYNData.setDescription('TCP packets with SYN bit is set and with payload.')
agDosPortStatsSYNFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsSYNFrag.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsSYNFrag.setDescription('TCP packets with SYN bit is set and more fragments bit is set.')
agDosPortStatsFTPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFTPPort.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsFTPPort.setDescription('TCP packets with SPORT=20, DPORT<1024 and SYN bit is set.')
agDosPortStatsDNSPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsDNSPort.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsDNSPort.setDescription('TCP packets with SPORT=53, DPORT<1024 and SYN bit is set.')
agDosPortStatsSeqZero = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsSeqZero.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsSeqZero.setDescription('TCP packets with sequence number is zero.')
agDosPortStatsAckZero = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsAckZero.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsAckZero.setDescription('TCP packets with acknowledgement number is zero and ACK bit is set.')
agDosPortStatsTCPOptLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsTCPOptLen.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsTCPOptLen.setDescription('TCP packets with bad TCP options length.')
agDosPortStatsUDPLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsUDPLen.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsUDPLen.setDescription('UDP packets with bad UDP header length.')
agDosPortStatsUDPPortZero = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 46), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsUDPPortZero.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsUDPPortZero.setDescription('UDP packets with source or destination port is zero.')
agDosPortStatsFraggleAttack = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsFraggleAttack.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsFraggleAttack.setDescription('UDP packets sent to a broadcast destination IP (x.x.x.255).')
agDosPortStatsPepsi = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsPepsi.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsPepsi.setDescription('UDP packets with SPORT=19, DPORT=7 or SPORT=7, DPORT=19.')
agDosPortStatsRc8 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 49), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsRc8.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsRc8.setDescription('UDP packets with SPORT=7 and DPORT=7.')
agDosPortStatsSNMPNull = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsSNMPNull.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsSNMPNull.setDescription('UDP packets with DPORT=161 and without payload.')
agDosPortStatsICMPLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsICMPLen.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsICMPLen.setDescription('ICMP packets with bad ICMP header length.')
agDosPortStatsSmurfAttack = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsSmurfAttack.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsSmurfAttack.setDescription('ICMP ping request to a broadcast destination IP x.x.x.255.')
agDosPortStatsICMPData = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsICMPData.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsICMPData.setDescription('ICMP packets with non-zero fragment offset and large payload.')
agDosPortStatsICMPOff = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsICMPOff.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsICMPOff.setDescription('ICMP packets with large fragment offset.')
agDosPortStatsICMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsICMPType.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsICMPType.setDescription('ICMP packets with type is reserved.')
agDosPortStatsIGMPLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIGMPLen.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsIGMPLen.setDescription('IGMP packets with bad IGMP header length.')
agDosPortStatsIGMPFrag = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIGMPFrag.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsIGMPFrag.setDescription('IGMP packets with more fragments bit is set.')
agDosPortStatsIGMPType = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 58), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIGMPType.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsIGMPType.setDescription('IGMP packets with type is reserved.')
agDosPortStatsARPLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsARPLen.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsARPLen.setDescription('ARP request or reply packets with bad length.')
agDosPortStatsARPNbCast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsARPNbCast.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsARPNbCast.setDescription('ARP request packets with non broadcast destination MAC.')
agDosPortStatsARPNuCast = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsARPNuCast.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsARPNuCast.setDescription('ARP reply packets with non unicast destination MAC.')
agDosPortStatsARPSpoof = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsARPSpoof.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsARPSpoof.setDescription('ARP request or reply packets with mismatch source with sender MACs or destination with target MACs.')
agDosPortStatsGARP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsGARP.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsGARP.setDescription('ARP request or reply packets with same source and destination IP.')
agDosPortStatsIP6Len = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIP6Len.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsIP6Len.setDescription('IPv6 packets with bad header length.')
agDosPortStatsIP6Version = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDosPortStatsIP6Version.setStatus('current')
if mibBuilder.loadTexts: agDosPortStatsIP6Version.setDescription('IPv6 packets with IP version not 6.')
agSecurityPgrpStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 2), )
if mibBuilder.loadTexts: agSecurityPgrpStatsTable.setStatus('current')
if mibBuilder.loadTexts: agSecurityPgrpStatsTable.setDescription('The table of pattern group statistics.')
agSecurityPgrpStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agSecurityPgrpStatsIndx"))
if mibBuilder.loadTexts: agSecurityPgrpStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: agSecurityPgrpStatsTableEntry.setDescription('A row in the port stats table.')
agSecurityPgrpStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityPgrpStatsIndx.setStatus('current')
if mibBuilder.loadTexts: agSecurityPgrpStatsIndx.setDescription('The Pattern Group index.')
agSecurityPgrpStatsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityPgrpStatsName.setStatus('current')
if mibBuilder.loadTexts: agSecurityPgrpStatsName.setDescription('The name of the Pattern Group.')
agSecurityPgrpStatsHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityPgrpStatsHits.setStatus('current')
if mibBuilder.loadTexts: agSecurityPgrpStatsHits.setDescription('The total hits for this Pattern Group.')
agSecurityUbStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 3), )
if mibBuilder.loadTexts: agSecurityUbStatsTable.setStatus('current')
if mibBuilder.loadTexts: agSecurityUbStatsTable.setDescription('The table of UDP Blast statistics.')
agSecurityUbStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agSecurityUbStatsIndx"))
if mibBuilder.loadTexts: agSecurityUbStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: agSecurityUbStatsTableEntry.setDescription('A row in the UDP Blast stats table.')
agSecurityUbStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityUbStatsIndx.setStatus('current')
if mibBuilder.loadTexts: agSecurityUbStatsIndx.setDescription('The UDP Blast Statistics Group index.')
agSecurityUbStatsPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityUbStatsPort.setStatus('current')
if mibBuilder.loadTexts: agSecurityUbStatsPort.setDescription('UDP Port Number.')
agSecurityUbStatsBlockedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityUbStatsBlockedPacket.setStatus('current')
if mibBuilder.loadTexts: agSecurityUbStatsBlockedPacket.setDescription('Total blocked packet.')
agSecurityUbStatsPacketRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityUbStatsPacketRate.setStatus('current')
if mibBuilder.loadTexts: agSecurityUbStatsPacketRate.setDescription('Current Packet rate per second.')
agSecurityIpAclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 4), )
if mibBuilder.loadTexts: agSecurityIpAclStatsTable.setStatus('current')
if mibBuilder.loadTexts: agSecurityIpAclStatsTable.setDescription('The table of IP ACL statistics.')
agSecurityIpAclStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agSecurityIpAclStatsIndx"))
if mibBuilder.loadTexts: agSecurityIpAclStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: agSecurityIpAclStatsTableEntry.setDescription('A row in the IP ACL stats table.')
agSecurityIpAclStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityIpAclStatsIndx.setStatus('current')
if mibBuilder.loadTexts: agSecurityIpAclStatsIndx.setDescription('The IP ACL Statistics Group index.')
agSecurityIpAclStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityIpAclStatsAddress.setStatus('current')
if mibBuilder.loadTexts: agSecurityIpAclStatsAddress.setDescription('IP ACL IP Address.')
agSecurityIpAclStatsBlockedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityIpAclStatsBlockedPacket.setStatus('current')
if mibBuilder.loadTexts: agSecurityIpAclStatsBlockedPacket.setDescription('Total blocked packet.')
agSecurityIpDstAclStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 5), )
if mibBuilder.loadTexts: agSecurityIpDstAclStatsTable.setStatus('current')
if mibBuilder.loadTexts: agSecurityIpDstAclStatsTable.setDescription('The table of DST IP ACL statistics.')
agSecurityIpDstAclStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 5, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agSecurityIpDstAclStatsIndx"))
if mibBuilder.loadTexts: agSecurityIpDstAclStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: agSecurityIpDstAclStatsTableEntry.setDescription('A row in the DST IP ACL stats table.')
agSecurityIpDstAclStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityIpDstAclStatsIndx.setStatus('current')
if mibBuilder.loadTexts: agSecurityIpDstAclStatsIndx.setDescription('The DST IP ACL Statistics Group index.')
agSecurityIpDstAclStatsAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityIpDstAclStatsAddress.setStatus('current')
if mibBuilder.loadTexts: agSecurityIpDstAclStatsAddress.setDescription('DST IP ACL IP Address.')
agSecurityIpDstAclStatsBlockedPacket = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSecurityIpDstAclStatsBlockedPacket.setStatus('current')
if mibBuilder.loadTexts: agSecurityIpDstAclStatsBlockedPacket.setDescription('Total blocked packet.')
symantecStats = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6))
symStatsTotalHits = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsTotalHits.setStatus('current')
if mibBuilder.loadTexts: symStatsTotalHits.setDescription('Total number of Symantec Hits.')
symStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: symStatsClear.setStatus('current')
if mibBuilder.loadTexts: symStatsClear.setDescription('Clear Symantec hit stats.')
symStatsSourceIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsSourceIp.setStatus('current')
if mibBuilder.loadTexts: symStatsSourceIp.setDescription('Source IP Address of the last hit.')
symStatsSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsSourcePort.setStatus('current')
if mibBuilder.loadTexts: symStatsSourcePort.setDescription('Source Port of the last hit.')
symStatsDestIp = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsDestIp.setStatus('current')
if mibBuilder.loadTexts: symStatsDestIp.setDescription('Destination IP Address of the lsat hit.')
symStatsDestPort = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsDestPort.setStatus('current')
if mibBuilder.loadTexts: symStatsDestPort.setDescription('Destination Port of the last hit.')
symStatsProtocol = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsProtocol.setStatus('current')
if mibBuilder.loadTexts: symStatsProtocol.setDescription('Protocol of the last hit.')
symStatsLastHitId = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsLastHitId.setStatus('current')
if mibBuilder.loadTexts: symStatsLastHitId.setDescription('Last Hit Id.')
symStatsConfiguredHitsMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsMax.setStatus('current')
if mibBuilder.loadTexts: symStatsConfiguredHitsMax.setDescription('Max number of entries in configured hits table and configured hits count on sp table.')
symStatsConfiguredHitsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10), )
if mibBuilder.loadTexts: symStatsConfiguredHitsTable.setStatus('current')
if mibBuilder.loadTexts: symStatsConfiguredHitsTable.setDescription('Symantec configured hits stats table.')
symStatsConfiguredHitsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symStatsConfiguredHitsTblIndex"))
if mibBuilder.loadTexts: symStatsConfiguredHitsTableEntry.setStatus('current')
if mibBuilder.loadTexts: symStatsConfiguredHitsTableEntry.setDescription('A Symantec configured hits stats table entry.')
symStatsConfiguredHitsTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsTblIndex.setStatus('current')
if mibBuilder.loadTexts: symStatsConfiguredHitsTblIndex.setDescription('The Symantec configured hits stats table index.')
symStatsConfiguredHitsSigId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsSigId.setStatus('current')
if mibBuilder.loadTexts: symStatsConfiguredHitsSigId.setDescription('Signature Id hit.')
symStatsConfiguredHitsTotalSpHCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsTotalSpHCount.setStatus('current')
if mibBuilder.loadTexts: symStatsConfiguredHitsTotalSpHCount.setDescription('Total Hit Count on all SPs.')
symStatsConfiguredHitsInCont = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsInCont.setStatus('current')
if mibBuilder.loadTexts: symStatsConfiguredHitsInCont.setDescription('In-Contract used.')
symStatsConfiguredHitsOutCont = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsOutCont.setStatus('current')
if mibBuilder.loadTexts: symStatsConfiguredHitsOutCont.setDescription('Out-Contract used.')
symStatsConfiguredHitsLastHitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 10, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsLastHitTime.setStatus('current')
if mibBuilder.loadTexts: symStatsConfiguredHitsLastHitTime.setDescription('Last hit Time.')
symStatsConfiguredHitsCountOnSpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 11), )
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTable.setStatus('current')
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTable.setDescription('Symantec configured hit count Sp stats table.')
symStatsConfiguredHitsCountOnSpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 11, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symStatsConfiguredHitsCountOnSpTblIndex"), (0, "ALTEON-CHEETAH-SWITCH-MIB", "symStatsConfiguredHitsCountOnSpTblSpIndex"))
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTableEntry.setStatus('current')
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTableEntry.setDescription('A Symantec configured hits stats table entry.')
symStatsConfiguredHitsCountOnSpTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTblIndex.setStatus('current')
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTblIndex.setDescription('The Symantec configured hit count SP table index.')
symStatsConfiguredHitsCountOnSpTblSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTblSpIndex.setStatus('current')
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTblSpIndex.setDescription('The Symantec configured hit count SP table SP index.')
symStatsConfiguredHitsCountOnSpTblHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 11, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTblHitCount.setStatus('current')
if mibBuilder.loadTexts: symStatsConfiguredHitsCountOnSpTblHitCount.setDescription('Hit Count on SP.')
symStatsUnconfiguredHitsMax = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsMax.setStatus('current')
if mibBuilder.loadTexts: symStatsUnconfiguredHitsMax.setDescription('Max number of entries in unconfigured hits table and unconfigured hits count on sp table.')
symStatsUnconfiguredHitsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 13), )
if mibBuilder.loadTexts: symStatsUnconfiguredHitsTable.setStatus('current')
if mibBuilder.loadTexts: symStatsUnconfiguredHitsTable.setDescription('Symantec unconfigured hits stats table.')
symStatsUnconfiguredHitsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 13, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symStatsUnconfiguredHitsTblIndex"))
if mibBuilder.loadTexts: symStatsUnconfiguredHitsTableEntry.setStatus('current')
if mibBuilder.loadTexts: symStatsUnconfiguredHitsTableEntry.setDescription('A Symantec unconfigured hits stats table entry.')
symStatsUnconfiguredHitsTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsTblIndex.setStatus('current')
if mibBuilder.loadTexts: symStatsUnconfiguredHitsTblIndex.setDescription('The Symantec unconfigured hits stats table index.')
symStatsUnconfiguredHitsSigId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsSigId.setStatus('current')
if mibBuilder.loadTexts: symStatsUnconfiguredHitsSigId.setDescription('Signature Id hit.')
symStatsUnconfiguredHitsTotalSpHCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 13, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsTotalSpHCount.setStatus('current')
if mibBuilder.loadTexts: symStatsUnconfiguredHitsTotalSpHCount.setDescription('Total Hit Count on all SPs.')
symStatsUnconfiguredHitsLastHitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 13, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsLastHitTime.setStatus('current')
if mibBuilder.loadTexts: symStatsUnconfiguredHitsLastHitTime.setDescription('Last hit Time.')
symStatsUnconfiguredHitsCountOnSpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 14), )
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTable.setStatus('current')
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTable.setDescription('Symantec unconfigured hit count Sp stats table.')
symStatsUnconfiguredHitsCountOnSpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 14, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symStatsUnconfiguredHitsCountOnSpTblIndex"), (0, "ALTEON-CHEETAH-SWITCH-MIB", "symStatsUnconfiguredHitsCountOnSpTblSpIndex"))
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTableEntry.setStatus('current')
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTableEntry.setDescription('A Symantec unconfigured hits stats table entry.')
symStatsUnconfiguredHitsCountOnSpTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTblIndex.setStatus('current')
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTblIndex.setDescription('The Symantec unconfigured hit count SP table index.')
symStatsUnconfiguredHitsCountOnSpTblSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTblSpIndex.setStatus('current')
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTblSpIndex.setDescription('The Symantec unconfigured hit count SP table SP index.')
symStatsUnconfiguredHitsCountOnSpTblHitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 6, 6, 14, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTblHitCount.setStatus('current')
if mibBuilder.loadTexts: symStatsUnconfiguredHitsCountOnSpTblHitCount.setDescription('Hit Count on SP.')
agCfgBootWeekday = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("sunday", 1), ("monday", 2), ("tuesday", 3), ("wednesday", 4), ("thursday", 5), ("friday", 6), ("saturday", 7), ("none", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgBootWeekday.setStatus('current')
if mibBuilder.loadTexts: agCfgBootWeekday.setDescription('The day of the week for reboot.')
agCfgBootHour = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 13, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgBootHour.setStatus('current')
if mibBuilder.loadTexts: agCfgBootHour.setDescription('The hour in 24-hour format for reboot.')
agCfgBootMin = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 13, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgBootMin.setStatus('current')
if mibBuilder.loadTexts: agCfgBootMin.setDescription('The minutes [00] for reboot.')
agCfgBootReset = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 13, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("cancel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgBootReset.setStatus('current')
if mibBuilder.loadTexts: agCfgBootReset.setDescription('Cancel pending switch reset.')
agCfgBootNxtResetTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 13, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgBootNxtResetTime.setStatus('current')
if mibBuilder.loadTexts: agCfgBootNxtResetTime.setDescription('Display the next scheduled reboot time.')
agPortAccessTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agPortAccessTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: agPortAccessTableMaxSize.setDescription('The maximum number of entries in Port Access Table.')
agCurCfgPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 2), )
if mibBuilder.loadTexts: agCurCfgPortAccessTable.setStatus('current')
if mibBuilder.loadTexts: agCurCfgPortAccessTable.setDescription('The table of ports and their access states')
agCurCfgPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agCurCfgPortAccessIndex"))
if mibBuilder.loadTexts: agCurCfgPortAccessEntry.setStatus('current')
if mibBuilder.loadTexts: agCurCfgPortAccessEntry.setDescription('A row in the port access table')
agCurCfgPortAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgPortAccessIndex.setStatus('current')
if mibBuilder.loadTexts: agCurCfgPortAccessIndex.setDescription('The port number in the table.')
agCurCfgPortAccessState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("allow", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCurCfgPortAccessState.setStatus('current')
if mibBuilder.loadTexts: agCurCfgPortAccessState.setDescription('The port access state of the port. deny(0) - port does not have management access allow(1) - port has management access')
agNewCfgPortAccessTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 3), )
if mibBuilder.loadTexts: agNewCfgPortAccessTable.setStatus('current')
if mibBuilder.loadTexts: agNewCfgPortAccessTable.setDescription('The table of ports and their access states')
agNewCfgPortAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agNewCfgPortAccessIndex"))
if mibBuilder.loadTexts: agNewCfgPortAccessEntry.setStatus('current')
if mibBuilder.loadTexts: agNewCfgPortAccessEntry.setDescription('A row in the port access table.')
agNewCfgPortAccessIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agNewCfgPortAccessIndex.setStatus('current')
if mibBuilder.loadTexts: agNewCfgPortAccessIndex.setDescription('The port number in the table.')
agNewCfgPortAccessState = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 16, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("deny", 0), ("allow", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agNewCfgPortAccessState.setStatus('current')
if mibBuilder.loadTexts: agNewCfgPortAccessState.setDescription('The port access state of the port. deny(0) - port does not have management access allow(1) - port has management access')
agSaveConfig = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 17, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("save", 1), ("idle", 2), ("inprogress", 3), ("complete", 4), ("failed", 5), ("saveNoBackup", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agSaveConfig.setStatus('current')
if mibBuilder.loadTexts: agSaveConfig.setDescription("When this object is read the current state is returned. idle(2) indicates that there is no save in progess. complete(4) indicates that the last save operation is completed. Setting the value to save(1), will write the current config block since the last save to the flash memory with backup, for saving without backup saveNoBackup(6) can be used. If the save is successful this variable will return the state 'complete' else it will return 'failed'. In case of failure, to read the reason for failure use the agSaveTable. Once the operation is completed or the agSaveTable is read , the save buffer needs to be freed and the agSaveState should be set back to 'idle' state so others can issue the save command via SNMP.")
agSaveTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 17, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSaveTableSize.setStatus('current')
if mibBuilder.loadTexts: agSaveTableSize.setDescription('The number of strings in the save table.')
agSaveTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 17, 3), )
if mibBuilder.loadTexts: agSaveTable.setStatus('current')
if mibBuilder.loadTexts: agSaveTable.setDescription('The table of error messages for asynchrnous save operation.')
agSaveTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 17, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agSaveIndex"))
if mibBuilder.loadTexts: agSaveTableEntry.setStatus('current')
if mibBuilder.loadTexts: agSaveTableEntry.setDescription('Error Strings generated while asynchronous save operation.')
agSaveIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 17, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSaveIndex.setStatus('current')
if mibBuilder.loadTexts: agSaveIndex.setDescription('The table index for save.')
agSaveString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 17, 3, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agSaveString.setStatus('current')
if mibBuilder.loadTexts: agSaveString.setDescription('A string in the Save table.')
agFileSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agFileSize.setStatus('current')
if mibBuilder.loadTexts: agFileSize.setDescription('This is the number of octets in the file. This is set to indicate the total size of the file that is being transfered. The value is set in bytes. File size range for Bogon File Transfer 1 - 2097152 and for Symantec Signature 1 - 178176')
agFileTransferState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 1), ("transfer", 2), ("inprogress", 3), ("missingrows", 4), ("complete", 5), ("error", 6), ("endoftransfer", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agFileTransferState.setStatus('current')
if mibBuilder.loadTexts: agFileTransferState.setDescription('When this object is read the current state is returned. idle(1) indicates that there is no transfer in progess. Any user must verify the state machine is in state idle before setting the state to transfer(2).Before setting transfer(2) state agFileSize and agFileType should be set and then transition changes to inprogress(3). While in this state, the agFileTable should be populated with all the rows needed to transfer the files entire contents. endoftransfer(7) should be set inorder to notify the agent that contents are transfered. If all the contents are received, then the state transitions to complete(5). If there are any missing rows, the agent will transition to the state missingrows(4). The user must either populate the missing rows, and give a endoftransfer(7) state, or give up the transfer by setting the state to idle(1). When the idle(1) state is set, the string with missing rows is cleared and the buffer is written to the file, state goes complete(5) to upon successful completion. Any transition to idle(1) will free any resources associated with the file transfer, that are no longer needed. The agFileTable will contain 0 rows. While in state missingrows(4), agFileTableMissingRows will contain a parseable string of missing row indexes seperated by a comma.')
agFileTableMissingRows = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agFileTableMissingRows.setStatus('current')
if mibBuilder.loadTexts: agFileTableMissingRows.setDescription('A string representing the missing rows of data for the file transfer. This is only valid while agFileTransferState is in the missingrows(4) state. The string will be numbers representing the missing row indexes seperated by commas e.g. 13,25,99')
agFileType = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bogon", 1), ("symantecSignature", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agFileType.setStatus('current')
if mibBuilder.loadTexts: agFileType.setDescription('This identifies the file type that is being transfered.')
agFileTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agFileTableSize.setStatus('current')
if mibBuilder.loadTexts: agFileTableSize.setDescription('The number of rows in the file table.')
agFileTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 6), )
if mibBuilder.loadTexts: agFileTable.setStatus('current')
if mibBuilder.loadTexts: agFileTable.setDescription('The table of octets that when combined create a file.')
agFileTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 6, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agFileIndex"))
if mibBuilder.loadTexts: agFileTableEntry.setStatus('current')
if mibBuilder.loadTexts: agFileTableEntry.setDescription('An entry in the file table.')
agFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agFileIndex.setStatus('current')
if mibBuilder.loadTexts: agFileIndex.setDescription('The table index.')
agFileString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agFileString.setStatus('current')
if mibBuilder.loadTexts: agFileString.setDescription('A string with bogon ip/mask pair.')
agFileErrorTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agFileErrorTableSize.setStatus('current')
if mibBuilder.loadTexts: agFileErrorTableSize.setDescription('The number of strings in the snmp file transfer error table.')
agFileErrorTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 8), )
if mibBuilder.loadTexts: agFileErrorTable.setStatus('current')
if mibBuilder.loadTexts: agFileErrorTable.setDescription('The table of error messages for asynchrnous snmp file transfer operation.')
agFileErrorTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 8, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agFileErrorIndex"))
if mibBuilder.loadTexts: agFileErrorTableEntry.setStatus('current')
if mibBuilder.loadTexts: agFileErrorTableEntry.setDescription('Error Strings generated while asynchronous snmp file transfer operation.')
agFileErrorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agFileErrorIndex.setStatus('current')
if mibBuilder.loadTexts: agFileErrorIndex.setDescription('The table index for snmp file transfer error table.')
agFileErrorString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 1, 18, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agFileErrorString.setStatus('current')
if mibBuilder.loadTexts: agFileErrorString.setDescription('A string in the snmp file transfer error table.')
pktStatsAllocs = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocs.setStatus('current')
if mibBuilder.loadTexts: pktStatsAllocs.setDescription('Total number of packet allocations from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsFrees = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsFrees.setStatus('current')
if mibBuilder.loadTexts: pktStatsFrees.setDescription('Total number of times the packet buffers are freed(released) to the packet buffer pool by the TCP/IP protocol stack.')
pktStatsAllocFails = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsAllocFails.setStatus('current')
if mibBuilder.loadTexts: pktStatsAllocFails.setDescription('Total number of packet allocation failures from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsMediums = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediums.setStatus('current')
if mibBuilder.loadTexts: pktStatsMediums.setDescription('Total number of packet allocations with size greater than 128 bytes and less than or equal to 1536 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsJumbos = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbos.setStatus('current')
if mibBuilder.loadTexts: pktStatsJumbos.setDescription('Total number of packet allocations with size larger than 1536 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsSmalls = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmalls.setStatus('current')
if mibBuilder.loadTexts: pktStatsSmalls.setDescription('Total number of packet allocations with size less than or eqaul to 128 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsMediumsHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsMediumsHiWatermark.setStatus('current')
if mibBuilder.loadTexts: pktStatsMediumsHiWatermark.setDescription('The highest number of packet allocations with size greater than 128 bytes and less than or equal to 1536 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsJumbosHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsJumbosHiWatermark.setStatus('current')
if mibBuilder.loadTexts: pktStatsJumbosHiWatermark.setDescription('The highest number of packet allocations with size larger than 1536 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsSmallsHiWatermark = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsSmallsHiWatermark.setStatus('current')
if mibBuilder.loadTexts: pktStatsSmallsHiWatermark.setDescription('The highest number of packet allocations with size less than or eqaul to 128 bytes from the packet buffer pool by the TCP/IP protocol stack.')
pktStatsDiscards = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pktStatsDiscards.setStatus('current')
if mibBuilder.loadTexts: pktStatsDiscards.setDescription('The total number of packets which were chosen to be discarded because the number of buffers available in the packet buffer pool is low.')
mpCpuStatsUtil1Second = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil1Second.setStatus('current')
if mibBuilder.loadTexts: mpCpuStatsUtil1Second.setDescription('The utilization of MP CPU over 1 second. It shows the percentage.')
mpCpuStatsUtil4Seconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil4Seconds.setStatus('current')
if mibBuilder.loadTexts: mpCpuStatsUtil4Seconds.setDescription('The utilization of MP CPU over 4 seconds. It shows the percentage.')
mpCpuStatsUtil64Seconds = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpCpuStatsUtil64Seconds.setStatus('current')
if mibBuilder.loadTexts: mpCpuStatsUtil64Seconds.setDescription('The utilization of MP CPU over 64 seconds. It shows the percentage.')
portStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1), )
if mibBuilder.loadTexts: portStatsTable.setStatus('current')
if mibBuilder.loadTexts: portStatsTable.setDescription('The table of port statistics.')
portStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "portStatsIndx"))
if mibBuilder.loadTexts: portStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: portStatsTableEntry.setDescription('A row in the port stats table.')
portStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsIndx.setStatus('current')
if mibBuilder.loadTexts: portStatsIndx.setDescription('The port index.')
portStatsPhyIfInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInOctets.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
portStatsPhyIfInUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInUcastPkts.setDescription('The number of subnetwork-unicast packets delivered to a higher-layer protocol.')
portStatsPhyIfInNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInNUcastPkts.setDescription('The number of non-unicast (i.e., subnetwork- broadcast or subnetwork-multicast) packets delivered to a higher-layer protocol.')
portStatsPhyIfInDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInDiscards.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInDiscards.setDescription('The number of inbound packets which were chosen to be discarded even though no errors had been detected to prevent their being deliverable to a higher-layer protocol. One possible reason for discarding such a packet could be to free up buffer space.')
portStatsPhyIfInErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInErrors.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
portStatsPhyIfInUnknownProtos = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInUnknownProtos.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInUnknownProtos.setDescription('The number of packets received via the interface which were discarded because of an unknown or unsupported protocol.')
portStatsPhyIfOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutOctets.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
portStatsPhyIfOutUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a subnetwork-unicast address, including those that were discarded or not sent.')
portStatsPhyIfOutNUcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutNUcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutNUcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted to a non- unicast (i.e., a subnetwork-broadcast or subnetwork-multicast) address, including those that were discarded or not sent.')
portStatsPhyIfOutDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutDiscards.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutDiscards.setDescription('The number of outbound packets which were chosen to be discarded even though no errors had been detected to prevent their being transmitted. One possible reason for discarding such a packet could be to free up buffer space.')
portStatsPhyIfOutErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutErrors.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutErrors.setDescription('The number of outbound packets that could not be transmitted because of errors.')
portStatsPhyIfOutQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutQLen.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutQLen.setDescription('The length of the output packet queue (in packets).')
portStatsPhyIfInBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInBroadcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a broadcast address at this sub-layer.')
portStatsPhyIfOutBroadcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutBroadcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutBroadcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a broadcast address at this sub-layer, including those that were discarded or not sent.')
portStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStatsClear.setStatus('current')
if mibBuilder.loadTexts: portStatsClear.setDescription('Setting this value to clear(2) clears the stats for this port.')
portStatsPhyIfInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfInMcastPkts.setDescription('The number of packets, delivered by this sub-layer to a higher (sub-)layer, which were addressed to a multicast address at this sub-layer. .')
portStatsPhyIfOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 3, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portStatsPhyIfOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: portStatsPhyIfOutMcastPkts.setDescription('The total number of packets that higher-level protocols requested be transmitted, and which were addressed to a multicast address at this sub-layer, including those that were discarded or not sent.')
portMirrorStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11, 1), )
if mibBuilder.loadTexts: portMirrorStatsTable.setStatus('current')
if mibBuilder.loadTexts: portMirrorStatsTable.setDescription('The table of port mirror statistics.')
portMirrorStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "portMirrorStatsIndx"))
if mibBuilder.loadTexts: portMirrorStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: portMirrorStatsTableEntry.setDescription('A row in the port mirror stats table.')
portMirrorStatsIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMirrorStatsIndx.setStatus('current')
if mibBuilder.loadTexts: portMirrorStatsIndx.setDescription('The port index.')
portMirrorStatsIngress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMirrorStatsIngress.setStatus('current')
if mibBuilder.loadTexts: portMirrorStatsIngress.setDescription('Specifies number of bytes mirrored in ingress port.')
portMirrorStatsEgress = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portMirrorStatsEgress.setStatus('current')
if mibBuilder.loadTexts: portMirrorStatsEgress.setDescription('Specifies number of bytes mirrored in egress port.')
portMirrorClear = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11, 2))
portMirrorStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 11, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portMirrorStatsClear.setStatus('current')
if mibBuilder.loadTexts: portMirrorStatsClear.setDescription('Setting this value to clear(2) clears the mirror stats.')
mpMemStatsTotal = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpMemStatsTotal.setStatus('current')
if mibBuilder.loadTexts: mpMemStatsTotal.setDescription('The total memory of MP.')
mpMemStatsUsed = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 8, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpMemStatsUsed.setStatus('current')
if mibBuilder.loadTexts: mpMemStatsUsed.setDescription('The used memory of MP.')
mpMemStatsFree = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 8, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpMemStatsFree.setStatus('current')
if mibBuilder.loadTexts: mpMemStatsFree.setDescription('The free memory of MP.')
mpMemStatsLowFree = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 8, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mpMemStatsLowFree.setStatus('current')
if mibBuilder.loadTexts: mpMemStatsLowFree.setDescription('The lowest free memory of MP.')
ntpPrimaryServerReqSent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerReqSent.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryServerReqSent.setDescription('The total number of NTP requests sent to Primary NTP Server.')
ntpPrimaryServerRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerRespRcvd.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryServerRespRcvd.setDescription('The total number of NTP responces received from Primary NTP Server.')
ntpPrimaryServerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpPrimaryServerUpdates.setStatus('current')
if mibBuilder.loadTexts: ntpPrimaryServerUpdates.setDescription('The total number of NTP Updates by Primary NTP Server.')
ntpSecondaryServerReqSent = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerReqSent.setStatus('current')
if mibBuilder.loadTexts: ntpSecondaryServerReqSent.setDescription('The total number of NTP requests sent to Secondary NTP Server.')
ntpSecondaryServerRespRcvd = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerRespRcvd.setStatus('current')
if mibBuilder.loadTexts: ntpSecondaryServerRespRcvd.setDescription('The total number of NTP responces received from Secondary NTP Server.')
ntpSecondaryServerUpdates = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSecondaryServerUpdates.setStatus('current')
if mibBuilder.loadTexts: ntpSecondaryServerUpdates.setDescription('The total number of NTP Updates by Secondary NTP Server.')
ntpLastUpdateServer = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastUpdateServer.setStatus('current')
if mibBuilder.loadTexts: ntpLastUpdateServer.setDescription('The type of ntp server updated last time.')
ntpLastUpdateTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpLastUpdateTime.setStatus('current')
if mibBuilder.loadTexts: ntpLastUpdateTime.setDescription('The last time updated by ntp server.')
ntpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ntpClearStats.setStatus('current')
if mibBuilder.loadTexts: ntpClearStats.setDescription('Setting this value to clear(2) clears the stats for ntp.')
ntpSystemCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 9, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntpSystemCurrentTime.setStatus('current')
if mibBuilder.loadTexts: ntpSystemCurrentTime.setDescription('The current system time.')
snmpClearStats = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpClearStats.setStatus('current')
if mibBuilder.loadTexts: snmpClearStats.setDescription('Setting this to clear(2) results in clearing the SNMP statistics.')
agDiffState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("diff", 1), ("flashdiff", 2), ("idle", 3), ("inprogress", 4), ("complete", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agDiffState.setStatus('current')
if mibBuilder.loadTexts: agDiffState.setDescription("When this object is read the current state is returned. idle(3) indicates that there is no diff in progess. complete(5) indicates that the last diff operation is completed. Setting the value to diff(1), will start a new diff operation Diff compares the new configuration with the current configuration and shows the pending configuration changes. Setting the value to flashdiff(1), will start a new diff operation. flashdiff compares new configuration with the flash configuration. To read the configuration changes use the agDiffTable once the state of this variable returns complete. Once the agDiffTable is read the state should be set back to 'idle' which frees the diff buffer and others can issue a diff command via SNMP.")
agDiffTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffTableSize.setStatus('current')
if mibBuilder.loadTexts: agDiffTableSize.setDescription('The number of strings in the diff table.')
agDiffTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 4, 4), )
if mibBuilder.loadTexts: agDiffTable.setStatus('current')
if mibBuilder.loadTexts: agDiffTable.setDescription('The table of diff strings.')
agDiffTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 4, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agDiffIndex"))
if mibBuilder.loadTexts: agDiffTableEntry.setStatus('current')
if mibBuilder.loadTexts: agDiffTableEntry.setDescription('An entry in the diff table.')
agDiffIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 4, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffIndex.setStatus('current')
if mibBuilder.loadTexts: agDiffIndex.setDescription('The table index.')
agDiffString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 4, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agDiffString.setStatus('current')
if mibBuilder.loadTexts: agDiffString.setDescription('A string in the diff table.')
agCfgDumpState = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("dump", 1), ("idle", 2), ("inprogress", 3), ("complete", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agCfgDumpState.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpState.setDescription("When this object is read the current state is returned. idle(2) indicates that there is no dump in progess. complete(4) indicates that the last dump operation is completed. Setting the value to dump(1), will start a new dump operation Dump will show the current configuration. To read the configuration dump use the agCfgDumpTable once the state of this variable returns complete. Once the agCfgDumpTable is read the state should be set back to 'idle' which frees the dump buffer and others can issue a dump command via SNMP.")
agCfgDumpTableSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpTableSize.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpTableSize.setDescription('The number of strings in the dump table.')
agCfgDumpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 5, 4), )
if mibBuilder.loadTexts: agCfgDumpTable.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpTable.setDescription('The table of dump strings.')
agCfgDumpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 5, 4, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "agCfgDumpIndex"))
if mibBuilder.loadTexts: agCfgDumpTableEntry.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpTableEntry.setDescription('An entry in the dump table.')
agCfgDumpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpIndex.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpIndex.setDescription('The table index.')
agCfgDumpString = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 5, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agCfgDumpString.setStatus('current')
if mibBuilder.loadTexts: agCfgDumpString.setDescription('A string in the dump table.')
spStatsCpuUtilTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 1), )
if mibBuilder.loadTexts: spStatsCpuUtilTable.setStatus('current')
if mibBuilder.loadTexts: spStatsCpuUtilTable.setDescription('The table of SP CPU utilization.')
spStatsCpuUtilTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 1, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "spStatsCpuUtilSpIndex"))
if mibBuilder.loadTexts: spStatsCpuUtilTableEntry.setStatus('current')
if mibBuilder.loadTexts: spStatsCpuUtilTableEntry.setDescription('A row in the SP CPU utilization table.')
spStatsCpuUtilSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatsCpuUtilSpIndex.setStatus('current')
if mibBuilder.loadTexts: spStatsCpuUtilSpIndex.setDescription('The SP index.')
spStatsCpuUtil1Second = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatsCpuUtil1Second.setStatus('current')
if mibBuilder.loadTexts: spStatsCpuUtil1Second.setDescription('The utilization of this SP over 1 second. It shows the percentage.')
spStatsCpuUtil4Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatsCpuUtil4Seconds.setStatus('current')
if mibBuilder.loadTexts: spStatsCpuUtil4Seconds.setDescription('The utilization of this SP over 4 seconds. It shows the percentage.')
spStatsCpuUtil64Seconds = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spStatsCpuUtil64Seconds.setStatus('current')
if mibBuilder.loadTexts: spStatsCpuUtil64Seconds.setDescription('The utilization of this SP over 64 seconds. It shows the percentage.')
spMaintStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2), )
if mibBuilder.loadTexts: spMaintStatsTable.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsTable.setDescription('The table of SP maintenance statistics.')
spMaintStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "spMaintStatsSpIndex"))
if mibBuilder.loadTexts: spMaintStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsTableEntry.setDescription('A row in the SP maintenance statistics table.')
spMaintStatsSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSpIndex.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsSpIndex.setDescription('The SP index.')
spMaintStatsPfdbFreeEmpty = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsPfdbFreeEmpty.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsPfdbFreeEmpty.setDescription('The number of times the attempts were made to add entries to an already full FDB.')
spMaintStatsResolveErrNoddw = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsResolveErrNoddw.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsResolveErrNoddw.setDescription('The number of times MAC address resolution failed because there were no DMA descriptors.')
spMaintStatsLearnErrNoddw = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsLearnErrNoddw.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsLearnErrNoddw.setDescription('The number of times MAC address learn failed because there were no DMA descriptors.')
spMaintStatsAgeMPNoddw = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsAgeMPNoddw.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsAgeMPNoddw.setDescription('The number of times MAC address aging failed because there were no DMA descriptors.')
spMaintStatsDeleteMiss = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsDeleteMiss.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsDeleteMiss.setDescription('The number of times MAC address could not be found.')
spMaintStatsRecvLetErrorsMP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsMP.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsMP.setDescription('The number of receive letter errors from MP.')
spMaintStatsRecvLetErrorsSP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsSP1.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsSP1.setDescription('The number of receive letter errors from SP1. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsRecvLetErrorsSP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsSP2.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsSP2.setDescription('The number of receive letter errors from SP2. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsRecvLetErrorsSP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsSP3.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsSP3.setDescription('The number of receive letter errors from SP3. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsRecvLetErrorsSP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsSP4.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsRecvLetErrorsSP4.setDescription('The number of receive letter errors from SP4. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsSendLetFailsMP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetFailsMP.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsSendLetFailsMP.setDescription('The number of send letter failures to MP.')
spMaintStatsSendLetFailsSP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetFailsSP1.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsSendLetFailsSP1.setDescription('The number of send letter failures to SP1. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsSendLetFailsSP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetFailsSP2.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsSendLetFailsSP2.setDescription('The number of send letter failures to SP2. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsSendLetFailsSP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetFailsSP3.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsSendLetFailsSP3.setDescription('The number of send letter failures to SP3. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsSendLetFailsSP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetFailsSP4.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsSendLetFailsSP4.setDescription('The number of send letter failures to SP4. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsRecvLetSuccessMP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessMP.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessMP.setDescription('The number of receive letter success from MP.')
spMaintStatsRecvLetSuccessSP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessSP1.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessSP1.setDescription('The number of receive letter success from SP1. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsRecvLetSuccessSP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessSP2.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessSP2.setDescription('The number of receive letter success from SP2. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsRecvLetSuccessSP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessSP3.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessSP3.setDescription('The number of receive letter success from SP3. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsRecvLetSuccessSP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessSP4.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsRecvLetSuccessSP4.setDescription('The number of receive letter success from SP4. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsSendLetSuccessMP = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessMP.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessMP.setDescription('The number of send letter success to MP.')
spMaintStatsSendLetSuccessSP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessSP1.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessSP1.setDescription('The number of send letter success to SP1. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsSendLetSuccessSP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessSP2.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessSP2.setDescription('The number of send letter success to SP2. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsSendLetSuccessSP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessSP3.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessSP3.setDescription('The number of send letter success to SP3. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsSendLetSuccessSP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessSP4.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsSendLetSuccessSP4.setDescription('The number of send letter success to SP4. If the current table index is the same as the SP number then a value of 0 is returned.')
spMaintStatsRateLimitArpDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRateLimitArpDrops.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsRateLimitArpDrops.setDescription('The total number of ARP packets dropped due to rate limiting.')
spMaintStatsRateLimitIcmpDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRateLimitIcmpDrops.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsRateLimitIcmpDrops.setDescription('The total number of ICMP packets are dropped due to rate limiting.')
spMaintStatsRateLimitTcpDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRateLimitTcpDrops.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsRateLimitTcpDrops.setDescription('The total number of TCP packets are dropped due to rate limiting.')
spMaintStatsRateLimitUdpDrops = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMaintStatsRateLimitUdpDrops.setStatus('current')
if mibBuilder.loadTexts: spMaintStatsRateLimitUdpDrops.setDescription('The total number of UDP packets are dropped due to rate limiting.')
spMemStatsTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3), )
if mibBuilder.loadTexts: spMemStatsTable.setStatus('current')
if mibBuilder.loadTexts: spMemStatsTable.setDescription('The table of SP memory statistics.')
spMemStatsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "spMemStatsIndex"))
if mibBuilder.loadTexts: spMemStatsTableEntry.setStatus('current')
if mibBuilder.loadTexts: spMemStatsTableEntry.setDescription('A row in the SP memory statistics table.')
spMemStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemStatsIndex.setStatus('current')
if mibBuilder.loadTexts: spMemStatsIndex.setDescription('The SP index.')
spMemStatsTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemStatsTotal.setStatus('current')
if mibBuilder.loadTexts: spMemStatsTotal.setDescription('The total memory of SP in bytes.')
spMemStatsCurr = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemStatsCurr.setStatus('current')
if mibBuilder.loadTexts: spMemStatsCurr.setDescription('The current memory of SP in bytes.')
spMemStatsAllocs = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemStatsAllocs.setStatus('current')
if mibBuilder.loadTexts: spMemStatsAllocs.setDescription('The total number of dynamic memory allocations in SP.')
spMemStatsFrees = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemStatsFrees.setStatus('current')
if mibBuilder.loadTexts: spMemStatsFrees.setDescription('The total number of dynamic memory frees in SP.')
spMemStatsAllocsFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemStatsAllocsFailures.setStatus('current')
if mibBuilder.loadTexts: spMemStatsAllocsFailures.setDescription('The total number of dynamic memory allocation failures in SP.')
spMemStatsHiWat = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 4, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: spMemStatsHiWat.setStatus('current')
if mibBuilder.loadTexts: spMemStatsHiWat.setDescription('The high watermark in SP.')
mgmtStatsRxpackets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsRxpackets.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsRxpackets.setDescription('Total number of packet allocations from the packet buffer pool by the TCP/IP protocol stack.')
mgmtStatsRxErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsRxErrors.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsRxErrors.setDescription('The number of inbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
mgmtStatsRxDropped = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsRxDropped.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsRxDropped.setDescription('The number of inbound packets that were dropped.')
mgmtStatsRxOverruns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsRxOverruns.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsRxOverruns.setDescription('The number of data overruns over this link.')
mgmtStatsRxFrame = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsRxFrame.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsRxFrame.setDescription('The number of frames received on this link.')
mgmtStatsTxpackets = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxpackets.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsTxpackets.setDescription('Total number of packet allocations from the packet buffer pool by the TCP/IP protocol stack.')
mgmtStatsTxErrors = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxErrors.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsTxErrors.setDescription('The number of outbound packets that contained errors preventing them from being deliverable to a higher-layer protocol.')
mgmtStatsTxDropped = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxDropped.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsTxDropped.setDescription('The number of outbound packets that were dropped.')
mgmtStatsTxOverruns = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxOverruns.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsTxOverruns.setDescription('The number of data overruns over this link.')
mgmtStatsTxCarrier = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxCarrier.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsTxCarrier.setDescription('The number of times that the carrier sense condition was lost or never asserted when attempting to transmit a frame on a this interface.')
mgmtStatsTxCollisions = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxCollisions.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsTxCollisions.setDescription('The number of collisions on this outbound segment.')
mgmtStatsTxQueueLen = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxQueueLen.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsTxQueueLen.setDescription('The length of the TCP transmit queue.')
mgmtStatsRxBytes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsRxBytes.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsRxBytes.setDescription('The total number of bytes received.')
mgmtStatsRxMulticast = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsRxMulticast.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsRxMulticast.setDescription('The total number of multicast packets received.')
mgmtStatsTxBytes = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 2, 5, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtStatsTxBytes.setStatus('current')
if mibBuilder.loadTexts: mgmtStatsTxBytes.setDescription('The total number of bytes transmitted.')
ipAclBogonInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 1))
ipAclBogonInfoTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclBogonInfoTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ipAclBogonInfoTableMaxSize.setDescription('The number of bogon IPs in IP ACL table.')
ipAclBogonInfoTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 1, 2), )
if mibBuilder.loadTexts: ipAclBogonInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipAclBogonInfoTable.setDescription('The table of bogons.')
ipAclBogonInfoTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 1, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "ipAclBogonInfoIndex"))
if mibBuilder.loadTexts: ipAclBogonInfoTableEntry.setStatus('current')
if mibBuilder.loadTexts: ipAclBogonInfoTableEntry.setDescription('An entry in the bogon IP ACL table.')
ipAclBogonInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclBogonInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ipAclBogonInfoIndex.setDescription('The table index.')
ipAclBogonInfoIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclBogonInfoIp.setStatus('current')
if mibBuilder.loadTexts: ipAclBogonInfoIp.setDescription('Bogon IP Address.')
ipAclBogonInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAclBogonInfoMask.setStatus('current')
if mibBuilder.loadTexts: ipAclBogonInfoMask.setDescription('Mask for the bogon IP.')
symantecInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2))
symIpsEngineVersion = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symIpsEngineVersion.setStatus('current')
if mibBuilder.loadTexts: symIpsEngineVersion.setDescription('Symantec IPS Engine Version.')
symMatchInfoSpTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2), )
if mibBuilder.loadTexts: symMatchInfoSpTable.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpTable.setDescription('Symantec Match Info SP table.')
symMatchInfoSpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symMatchInfoSpTableIndex"))
if mibBuilder.loadTexts: symMatchInfoSpTableEntry.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpTableEntry.setDescription('A Symantec Match Info SP table entry.')
symMatchInfoSpTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpTableIndex.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpTableIndex.setDescription('The Match Info SP table index which is the SP index.')
symMatchInfoSpClientIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpClientIp.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpClientIp.setDescription('The Client IP Address.')
symMatchInfoSpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpServerIp.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpServerIp.setDescription('The Server IP Address.')
symMatchInfoSpClientPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpClientPort.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpClientPort.setDescription('The Client Port.')
symMatchInfoSpServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpServerPort.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpServerPort.setDescription('The Server Port.')
symMatchInfoSpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpProtocol.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpProtocol.setDescription('The Protocol.')
symMatchInfoSpNumOfMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpNumOfMatches.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpNumOfMatches.setDescription('Number of matches.')
symMatchInfoSpSigActTable = MibTable((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 3), )
if mibBuilder.loadTexts: symMatchInfoSpSigActTable.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpSigActTable.setDescription('Symantec Match Info SP Signature-Action table.')
symMatchInfoSpSigActTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 3, 1), ).setIndexNames((0, "ALTEON-CHEETAH-SWITCH-MIB", "symMatchInfoSpSigActTblSpIndex"), (0, "ALTEON-CHEETAH-SWITCH-MIB", "symMatchInfoSpSigActTblIndex"))
if mibBuilder.loadTexts: symMatchInfoSpSigActTableEntry.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpSigActTableEntry.setDescription('A Symantec Match Info SP Signature-Action table entry.')
symMatchInfoSpSigActTblSpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpSigActTblSpIndex.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpSigActTblSpIndex.setDescription('The match info signature action table SP index.')
symMatchInfoSpSigActTblIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpSigActTblIndex.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpSigActTblIndex.setDescription('The Match Info signature action table index.')
symMatchInfoSpSigActTblSigId = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpSigActTblSigId.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpSigActTblSigId.setDescription('The Signature Id matched.')
symMatchInfoSpSigActTblAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 7, 2, 3, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: symMatchInfoSpSigActTblAction.setStatus('current')
if mibBuilder.loadTexts: symMatchInfoSpSigActTblAction.setDescription('Action taken for the signature Id.')
mgmtPortInfoSpeed = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbs10", 1), ("mbs100", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPortInfoSpeed.setStatus('current')
if mibBuilder.loadTexts: mgmtPortInfoSpeed.setDescription('The current operational speed of the management port.')
mgmtPortInfoMode = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full-duplex", 1), ("half-duplex", 2), ("any", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPortInfoMode.setStatus('current')
if mibBuilder.loadTexts: mgmtPortInfoMode.setDescription('The current operational mode of the management port.')
mgmtPortInfoLink = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mgmtPortInfoLink.setStatus('current')
if mibBuilder.loadTexts: mgmtPortInfoLink.setDescription('The current operational link status of the management port.')
hwOrderNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOrderNumber.setStatus('current')
if mibBuilder.loadTexts: hwOrderNumber.setDescription('The hardware order number of the Alteon Switch.')
hwMainBoardNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMainBoardNumber.setStatus('current')
if mibBuilder.loadTexts: hwMainBoardNumber.setDescription('The hardware main board number of the Alteon Switch.')
hwMainBoardRevision = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMainBoardRevision.setStatus('current')
if mibBuilder.loadTexts: hwMainBoardRevision.setDescription('The hardware main board revision. If the revision is not available, a zero length string should be returned.')
hwEthernetBoardNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetBoardNumber.setStatus('current')
if mibBuilder.loadTexts: hwEthernetBoardNumber.setDescription('The hardware ethernet board number of the Alteon Switch.')
hwEthernetBoardRevision = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwEthernetBoardRevision.setStatus('current')
if mibBuilder.loadTexts: hwEthernetBoardRevision.setDescription('The hardware ethernet board revision. If the revision is not available, a zero length string should be returned.')
hwChassisSerialNumber = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChassisSerialNumber.setStatus('current')
if mibBuilder.loadTexts: hwChassisSerialNumber.setDescription('The chassis serial number of the Alteon Switch.')
hwChassisRevision = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwChassisRevision.setStatus('current')
if mibBuilder.loadTexts: hwChassisRevision.setDescription('The chassis revision. If the revision is not available, a zero length string should be returned.')
hwPower = MibScalar((1, 3, 6, 1, 4, 1, 1872, 2, 5, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ac", 1), ("dc", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPower.setStatus('current')
if mibBuilder.loadTexts: hwPower.setDescription('The type of power supply.')
mibBuilder.exportSymbols("ALTEON-CHEETAH-SWITCH-MIB", ipAclCurCfgIp=ipAclCurCfgIp, agCurCfgXMLCfgServerPort=agCurCfgXMLCfgServerPort, symSigBwmMappingTableMaxSize=symSigBwmMappingTableMaxSize, agTftpPort=agTftpPort, spMaintStatsSendLetFailsSP1=spMaintStatsSendLetFailsSP1, switchCapGSLBServicesMaxEnt=switchCapGSLBServicesMaxEnt, agCurCfgSyslogTrapSlb=agCurCfgSyslogTrapSlb, agFileErrorString=agFileErrorString, agRtcDate=agRtcDate, agDosPortStatsIGMPFrag=agDosPortStatsIGMPFrag, agDosPortStatsLoopback=agDosPortStatsLoopback, agSecurityIpAclStatsTable=agSecurityIpAclStatsTable, agNewCfgPortAccessState=agNewCfgPortAccessState, dosCurCfgFragdata=dosCurCfgFragdata, switchCapPIPsCurrEnt=switchCapPIPsCurrEnt, switchCapOSPFVirtLinksMaxEnt=switchCapOSPFVirtLinksMaxEnt, portStatsTableEntry=portStatsTableEntry, hwChassisRevision=hwChassisRevision, agApplyPending=agApplyPending, agDosPortStatsIPVersion=agDosPortStatsIPVersion, agNewCfgSecurityIpAclState=agNewCfgSecurityIpAclState, agPortNewCfgFastEthAutoNeg=agPortNewCfgFastEthAutoNeg, portInfoPhyIfLastChange=portInfoPhyIfLastChange, agNewCfgPgrpMatchAdd=agNewCfgPgrpMatchAdd, portInfoPhyIfPhysAddress=portInfoPhyIfPhysAddress, switchCapOSPFVirtLinksCurrEnt=switchCapOSPFVirtLinksCurrEnt, agMgmtPortNewCfgSpeed=agMgmtPortNewCfgSpeed, agDosPortStatsSeqZero=agDosPortStatsSeqZero, switchCapPortTeamsMaxEnt=switchCapPortTeamsMaxEnt, tacCurCfgSecondaryIpAddr=tacCurCfgSecondaryIpAddr, agPortCurCfgTable=agPortCurCfgTable, agCfgDump=agCfgDump, agSslprocCurCfgRts=agSslprocCurCfgRts, udpBlastCurCfgudpPortEntryPacketLimit=udpBlastCurCfgudpPortEntryPacketLimit, switchCapGSLBRemSersCurrEnt=switchCapGSLBRemSersCurrEnt, agTftpAction=agTftpAction, agFileType=agFileType, agSecurityUbStatsPort=agSecurityUbStatsPort, ntpPrimaryServerRespRcvd=ntpPrimaryServerRespRcvd, agNewCfgSecurityAttacksBmap=agNewCfgSecurityAttacksBmap, agNewCfgSnmpTimeout=agNewCfgSnmpTimeout, agSave=agSave, agCurCfgNTPService=agCurCfgNTPService, agDosPortStatsFragOff=agDosPortStatsFragOff, operDstIPACLsCurrEnt=operDstIPACLsCurrEnt, spMemStatsAllocsFailures=spMemStatsAllocsFailures, ipAclCurCfgMask=ipAclCurCfgMask, portStatsPhyIfInNUcastPkts=portStatsPhyIfInNUcastPkts, agCurCfgSyslogTrapNtp=agCurCfgSyslogTrapNtp, agNewCfgSyslogTrapSlbAtk=agNewCfgSyslogTrapSlbAtk, switchCapStaticTrunkGrpsCurrEnt=switchCapStaticTrunkGrpsCurrEnt, agMgmtPort=agMgmtPort, portInfoPhyIfDescr=portInfoPhyIfDescr, portMirrorStatsIndx=portMirrorStatsIndx, agMgmtCurCfgGateway=agMgmtCurCfgGateway, symNewCfgInContractID=symNewCfgInContractID, agCurCfgSyslogTrapSystem=agCurCfgSyslogTrapSystem, snmpv3UsersCurrEnt=snmpv3UsersCurrEnt, ipAclCurCfgIndx=ipAclCurCfgIndx, PYSNMP_MODULE_ID=agent, switchCapRealSersCurrEnt=switchCapRealSersCurrEnt, ntpOperSendReq=ntpOperSendReq, spMaintStatsSendLetSuccessSP3=spMaintStatsSendLetSuccessSP3, radNewCfgTelnet=radNewCfgTelnet, spMaintStatsRecvLetSuccessMP=spMaintStatsRecvLetSuccessMP, agCurCfgPortAccessIndex=agCurCfgPortAccessIndex, radCurCfgSecondaryIpAddr=radCurCfgSecondaryIpAddr, switchCapScriptHealthChecksMaxEnt=switchCapScriptHealthChecksMaxEnt, agNewCfgTrapSrcIf=agNewCfgTrapSrcIf, tacNewCfgPort=tacNewCfgPort, agMgmtCurCfgSyslog=agMgmtCurCfgSyslog, symStatsConfiguredHitsInCont=symStatsConfiguredHitsInCont, symCurCfgSigBwmMappingTable=symCurCfgSigBwmMappingTable, agPortNewCfgGigEthSpeed=agPortNewCfgGigEthSpeed, switchCapNwkFltsMaxEnt=switchCapNwkFltsMaxEnt, ipDstAclNewCfgTable=ipDstAclNewCfgTable, bwmGRsCurrEnt=bwmGRsCurrEnt, agDosPortStatsIPTTL=agDosPortStatsIPTTL, symStatsDestPort=symStatsDestPort, switchCapBootpSerMaxEnt=switchCapBootpSerMaxEnt, ntpSecondaryServerRespRcvd=ntpSecondaryServerRespRcvd, spMemStatsCurr=spMemStatsCurr, symNewCfgDeleteEntry=symNewCfgDeleteEntry, spMaintStatsSpIndex=spMaintStatsSpIndex, agSecurityIpAclStatsTableEntry=agSecurityIpAclStatsTableEntry, agMgmtCurCfgIntr=agMgmtCurCfgIntr, agCurCfgTrapHostCommString=agCurCfgTrapHostCommString, agNTPOper=agNTPOper, bwmContsPerGRs=bwmContsPerGRs, agNewCfgSyslogTrapSecurity=agNewCfgSyslogTrapSecurity, icmpDosAtkPrevention=icmpDosAtkPrevention, agLog=agLog, agCurCfgTrapHostTable=agCurCfgTrapHostTable, agNewCfgNTPService=agNewCfgNTPService, agDosPortStatsTCPReserved=agDosPortStatsTCPReserved, spMaintStatsRecvLetSuccessSP2=spMaintStatsRecvLetSuccessSP2, agSaveTableEntry=agSaveTableEntry, agDosPortStatsICMPData=agDosPortStatsICMPData, portStatsPhyIfInErrors=portStatsPhyIfInErrors, agImage1Ver=agImage1Ver, switchCapVRRPIntfsCurrEnt=switchCapVRRPIntfsCurrEnt, agMgmtNewCfgTftp=agMgmtNewCfgTftp, agMgmtPortCurCfgAuto=agMgmtPortCurCfgAuto, agSecurityIpAclStatsBlockedPacket=agSecurityIpAclStatsBlockedPacket, syslogHostMaxEnt=syslogHostMaxEnt, spStatsCpuUtilSpIndex=spStatsCpuUtilSpIndex, agNewCfgUDPMaxRate=agNewCfgUDPMaxRate, radiusSerCurrEnt=radiusSerCurrEnt, pktStatsMediumsHiWatermark=pktStatsMediumsHiWatermark, symCurCfgOutContractID=symCurCfgOutContractID, spStatsCpuUtilTableEntry=spStatsCpuUtilTableEntry, agPortCurCfgPVID=agPortCurCfgPVID, symNewCfgSignatureID=symNewCfgSignatureID, agPortCurCfgPortName=agPortCurCfgPortName, radNewCfgSecondaryIpAddr=radNewCfgSecondaryIpAddr, mgmtStatsRxErrors=mgmtStatsRxErrors, symStatsUnconfiguredHitsLastHitTime=symStatsUnconfiguredHitsLastHitTime, portStatsClear=portStatsClear, agTftpImage=agTftpImage, agSecurityUbStatsIndx=agSecurityUbStatsIndx, dosAttackPrevCfg=dosAttackPrevCfg, ipDstAclNewCfgEntry=ipDstAclNewCfgEntry, agPortCurCfgRmon=agPortCurCfgRmon, ipDstAclCurCfgEntry=ipDstAclCurCfgEntry, mpMemStatsTotal=mpMemStatsTotal, spMaintStatsTable=spMaintStatsTable, mpMemStatsFree=mpMemStatsFree, spMaintStatsRecvLetSuccessSP3=spMaintStatsRecvLetSuccessSP3, pktStatsSmalls=pktStatsSmalls, swKeyInfo=swKeyInfo, portInfoPhyIfOperStatus=portInfoPhyIfOperStatus, agDosPortStatsIP6Len=agDosPortStatsIP6Len, agDosPortStatsFragLast=agDosPortStatsFragLast, agDosPortStatsARPLen=agDosPortStatsARPLen, agSystem=agSystem, agPortCurCfgGigEthAutoNeg=agPortCurCfgGigEthAutoNeg, ipAclNewCfgEntry=ipAclNewCfgEntry, agCurCfgNTPDlight=agCurCfgNTPDlight, portMirrorStatsClear=portMirrorStatsClear, switchCapStaticTrunkGrpsMaxEnt=switchCapStaticTrunkGrpsMaxEnt, portInfoMode=portInfoMode, agDosPortStatsBlatAttack=agDosPortStatsBlatAttack, radCurCfgRetries=radCurCfgRetries, agDosPortStatsSNMPNull=agDosPortStatsSNMPNull, agFileTable=agFileTable, agNewCfgSyslogTrapRmon=agNewCfgSyslogTrapRmon, agPortCurCfgVlanTag=agPortCurCfgVlanTag, agCurCfgLoginBanner=agCurCfgLoginBanner, agMgmtNewCfgIntr=agMgmtNewCfgIntr, agPortNewCfgDiscardNonIPs=agPortNewCfgDiscardNonIPs, symStatsConfiguredHitsCountOnSpTblHitCount=symStatsConfiguredHitsCountOnSpTblHitCount, spMemStatsTableEntry=spMemStatsTableEntry, agSyslog=agSyslog, totalSrcIPACLsMaxEnt=totalSrcIPACLsMaxEnt, agCurCfgHttpsServerPort=agCurCfgHttpsServerPort, agMgmtCurCfgMask=agMgmtCurCfgMask, agCurCfgMgmtNetTable=agCurCfgMgmtNetTable, agSecurityIpDstAclStatsAddress=agSecurityIpDstAclStatsAddress, radCurCfgTimeout=radCurCfgTimeout, agCfgDumpIndex=agCfgDumpIndex, agCurCfgPortAccessTable=agCurCfgPortAccessTable, pktStatsFrees=pktStatsFrees, pktStats=pktStats, agPortNewCfgPortName=agPortNewCfgPortName, radCurCfgAuthenString=radCurCfgAuthenString, dosCurCfgIPTTL=dosCurCfgIPTTL, agSecurityIpDstAclStatsIndx=agSecurityIpDstAclStatsIndx, agMgmtNewCfgRadius=agMgmtNewCfgRadius, switchCapScriptHealthChecksCurrEnt=switchCapScriptHealthChecksCurrEnt, dosNewCfgFragdata=dosNewCfgFragdata, mgmtStatsRxMulticast=mgmtStatsRxMulticast, symMatchInfoSpTableIndex=symMatchInfoSpTableIndex, hwOrderNumber=hwOrderNumber, hwTemperatureStatus=hwTemperatureStatus, agPortNewCfgGigEthMode=agPortNewCfgGigEthMode, spStatsCpuUtilTable=spStatsCpuUtilTable, secNewCfgIpAclSyslogTime=secNewCfgIpAclSyslogTime, switchCapNwkFltsCurrEnt=switchCapNwkFltsCurrEnt, switchCapOSPFAreasMaxEnt=switchCapOSPFAreasMaxEnt, portInfoPhyIfType=portInfoPhyIfType, ipDstAclCurCfgIndx=ipDstAclCurCfgIndx, udpBlastProtection=udpBlastProtection, ntpSerMaxEnt=ntpSerMaxEnt, switchCapSlbPortClientState=switchCapSlbPortClientState, agNewCfgSyslogTrapMgmt=agNewCfgSyslogTrapMgmt, portStats=portStats, agTftpServer=agTftpServer, spStats=spStats, agPortNewCfgFastEthMode=agPortNewCfgFastEthMode, agDiffState=agDiffState, switchCapOSPFHostsMaxEnt=switchCapOSPFHostsMaxEnt, agMgmtNewCfgSnmp=agMgmtNewCfgSnmp, agTftpPassword=agTftpPassword, switchCapSerGRsCurrEnt=switchCapSerGRsCurrEnt, dosNewCfgIPTTL=dosNewCfgIPTTL, agDosPortStatsICMPType=agDosPortStatsICMPType, agMgmtNewCfgIpAddr=agMgmtNewCfgIpAddr, agPortNewCfgTable=agPortNewCfgTable, agApplyTableEntry=agApplyTableEntry, operDstIPACLsMaxEnt=operDstIPACLsMaxEnt, spMaintStatsSendLetSuccessSP1=spMaintStatsSendLetSuccessSP1, agSecurity=agSecurity, switchCapVRRPRtrGRsCurrEnt=switchCapVRRPRtrGRsCurrEnt, agDosPortStatsICMPLen=agDosPortStatsICMPLen, agCurCfgPortAccessEntry=agCurCfgPortAccessEntry, ipDstAclCfg=ipDstAclCfg, dosCurCfgICMPdata=dosCurCfgICMPdata, switchCapRouteMapsCurrEnt=switchCapRouteMapsCurrEnt, switchCapVRRPRtrsMaxEnt=switchCapVRRPRtrsMaxEnt, agRevertApply=agRevertApply, agSslprocCurCfgPort=agSslprocCurCfgPort, agNewCfgPgrpDelete=agNewCfgPgrpDelete, ipAclTableMaxSize=ipAclTableMaxSize, switchCapGSLBMetricPerRuleCurrEnt=switchCapGSLBMetricPerRuleCurrEnt, symNewCfgDefaultAction=symNewCfgDefaultAction, agCurCfgNTPTzoneHHMM=agCurCfgNTPTzoneHHMM, smtpHostsCurrEnt=smtpHostsCurrEnt, agPortNewCfgPreferred=agPortNewCfgPreferred, symStatsConfiguredHitsTotalSpHCount=symStatsConfiguredHitsTotalSpHCount, mgmtStatsTxErrors=mgmtStatsTxErrors, switchCapFltsMaxEnt=switchCapFltsMaxEnt, agPortNewCfgState=agPortNewCfgState, agNewCfgBootp=agNewCfgBootp, agTftpCfgFileName=agTftpCfgFileName, tacacsSerMaxEnt=tacacsSerMaxEnt, symCurCfgInContractID=symCurCfgInContractID, agDiffTable=agDiffTable, configDstIPACLsMaxEnt=configDstIPACLsMaxEnt, spMaintStatsSendLetSuccessMP=spMaintStatsSendLetSuccessMP, switchCapGSLBServicesCurrEnt=switchCapGSLBServicesCurrEnt, agMgmtNewCfgReport=agMgmtNewCfgReport, agDosPortStatsIndx=agDosPortStatsIndx, switchCapRulesforURLParsingMaxEnt=switchCapRulesforURLParsingMaxEnt, totalDstIPACLsMaxEnt=totalDstIPACLsMaxEnt, tacNewCfgTimeout=tacNewCfgTimeout, portInfoLink=portInfoLink, agDosPortStatsIPLen=agDosPortStatsIPLen, spMaintStatsRecvLetErrorsSP1=spMaintStatsRecvLetErrorsSP1, radiusSerMaxEnt=radiusSerMaxEnt, agMgmt=agMgmt, agPortNewCfgTableEntry=agPortNewCfgTableEntry, ipAclCurCfgEntry=ipAclCurCfgEntry, mgmtInfo=mgmtInfo, agCfgDumpTableEntry=agCfgDumpTableEntry, switchCapGSLBRulesMaxEnt=switchCapGSLBRulesMaxEnt, agPortNewCfgLinkTrap=agPortNewCfgLinkTrap, agPortNewCfgIndx=agPortNewCfgIndx, agNewCfgXMLCfgServerPort=agNewCfgXMLCfgServerPort, agEnabledBwmKey=agEnabledBwmKey, agFileTableSize=agFileTableSize, portInfoBackup=portInfoBackup, symStatsUnconfiguredHitsSigId=symStatsUnconfiguredHitsSigId, secCurCfgIpAclSyslogThreshold=secCurCfgIpAclSyslogThreshold, agSecurityUbStatsPacketRate=agSecurityUbStatsPacketRate)
mibBuilder.exportSymbols("ALTEON-CHEETAH-SWITCH-MIB", switchCapFltsCurrEnt=switchCapFltsCurrEnt, switchCapOSPFAreasCurrEnt=switchCapOSPFAreasCurrEnt, tacCurCfgRetries=tacCurCfgRetries, agDosPortStatsARPNbCast=agDosPortStatsARPNbCast, agMgmtCurCfgSonmp=agMgmtCurCfgSonmp, agNewCfgSyslogTrapSynAtk=agNewCfgSyslogTrapSynAtk, agDosPortStatsSYNFrag=agDosPortStatsSYNFrag, switchCapBGPRouteAggrsMaxEnt=switchCapBGPRouteAggrsMaxEnt, spMemory=spMemory, agCfgSecurityPortTableEntry=agCfgSecurityPortTableEntry, agSecurityUbStatsTableEntry=agSecurityUbStatsTableEntry, agMgmtCurCfgNtp=agMgmtCurCfgNtp, portInfoTableEntry=portInfoTableEntry, spMaintStatsLearnErrNoddw=spMaintStatsLearnErrNoddw, agMgmtNewCfgMask=agMgmtNewCfgMask, ipDstAclNewCfgAction=ipDstAclNewCfgAction, agCurCfgSyslogTrapVlan=agCurCfgSyslogTrapVlan, agCurCfgSyslogTrapBgp=agCurCfgSyslogTrapBgp, agNewCfgMgmtNetDelete=agNewCfgMgmtNetDelete, agCurCfgTCPMaxRate=agCurCfgTCPMaxRate, agDosPortStatsIPProt=agDosPortStatsIPProt, agFileString=agFileString, syslogHostCurrEnt=syslogHostCurrEnt, agNewCfgTrapHostEntry=agNewCfgTrapHostEntry, agNewCfgSyslogTrapTcpLim=agNewCfgSyslogTrapTcpLim, agDosPortStatsFullXmasScan=agDosPortStatsFullXmasScan, symStatsLastHitId=symStatsLastHitId, agNewCfgSyslogTrapConsole=agNewCfgSyslogTrapConsole, snmpv3AccessGRsMaxEnt=snmpv3AccessGRsMaxEnt, switchCapDNSSerCurrEnt=switchCapDNSSerCurrEnt, bwmGRsMaxEnt=bwmGRsMaxEnt, agCurCfgSnmpTimeout=agCurCfgSnmpTimeout, dosNewCfgSYNdata=dosNewCfgSYNdata, agDosPortStatsPepsi=agDosPortStatsPepsi, switchCapPortTeamsCurrEnt=switchCapPortTeamsCurrEnt, portStatsPhyIfInOctets=portStatsPhyIfInOctets, agCurCfgSecurityAttacksBmap=agCurCfgSecurityAttacksBmap, portInfo=portInfo, agCurCfgTrapHostEntry=agCurCfgTrapHostEntry, tacCurCfgCmap=tacCurCfgCmap, switchCapLocNetsMaxEnt=switchCapLocNetsMaxEnt, switchCapGSLBLocSersMaxEnt=switchCapGSLBLocSersMaxEnt, agClrSyslogMsgs=agClrSyslogMsgs, bwmContsCurrEnt=bwmContsCurrEnt, agNewCfgSyslogTrapSlb=agNewCfgSyslogTrapSlb, agCurCfgSyslogTrapGslb=agCurCfgSyslogTrapGslb, agDosPortStatsUDPLen=agDosPortStatsUDPLen, switchCapBwmInfo=switchCapBwmInfo, agCurCfgSyslogTrapMgmt=agCurCfgSyslogTrapMgmt, symStatsConfiguredHitsTblIndex=symStatsConfiguredHitsTblIndex, switchCapGSLBRemSitesCurrEnt=switchCapGSLBRemSitesCurrEnt, spMaintStatsDeleteMiss=spMaintStatsDeleteMiss, switchCapGSLBMetricsPerRuleMaxEnt=switchCapGSLBMetricsPerRuleMaxEnt, agCfgSecurityPortTable=agCfgSecurityPortTable, spMaintStatsRecvLetErrorsSP2=spMaintStatsRecvLetErrorsSP2, switchCapSNMPHealthChecksMaxEnt=switchCapSNMPHealthChecksMaxEnt, switchCapVlanCurrEnt=switchCapVlanCurrEnt, agDosPortStatsTCPOptLen=agDosPortStatsTCPOptLen, switchCapTrunksperTrunkGR=switchCapTrunksperTrunkGR, agPortCurCfgGigEthFctl=agPortCurCfgGigEthFctl, agEnabledSwFeatures=agEnabledSwFeatures, portStatsPhyIfOutBroadcastPkts=portStatsPhyIfOutBroadcastPkts, tacCurCfgAuthenSecondString=tacCurCfgAuthenSecondString, radNewCfgAuthenSecondString=radNewCfgAuthenSecondString, snmpv3TargetAddrCurrEnt=snmpv3TargetAddrCurrEnt, configSrcIPACLsCurrEnt=configSrcIPACLsCurrEnt, agSecurityPgrpStatsHits=agSecurityPgrpStatsHits, symMatchInfoSpTableEntry=symMatchInfoSpTableEntry, agNewCfgSyslogTrapWeb=agNewCfgSyslogTrapWeb, switchCapSNMPHealthChecksCurrEnt=switchCapSNMPHealthChecksCurrEnt, udpBlastudpPortTableMaxSize=udpBlastudpPortTableMaxSize, agPortNewCfgPVID=agPortNewCfgPVID, agFileErrorTable=agFileErrorTable, agCurCfgUDPMaxRate=agCurCfgUDPMaxRate, switchCapIpStaticARPMaxEnt=switchCapIpStaticARPMaxEnt, radCurCfgState=radCurCfgState, hwEthernetBoardRevision=hwEthernetBoardRevision, agNewCfgTrapHostCommString=agNewCfgTrapHostCommString, portStatsPhyIfOutDiscards=portStatsPhyIfOutDiscards, agPortNewCfgRmon=agPortNewCfgRmon, agMgmtCurCfgRetry=agMgmtCurCfgRetry, agSaveTableSize=agSaveTableSize, agMgmtCurCfgSmtp=agMgmtCurCfgSmtp, tacNewCfgAuthenSecondString=tacNewCfgAuthenSecondString, agDosPortStatsSynFinScan=agDosPortStatsSynFinScan, agSoftwareVersion=agSoftwareVersion, switchCapGSLBGeographicalRegionsCurrEnt=switchCapGSLBGeographicalRegionsCurrEnt, agNewCfgTelnetServerPort=agNewCfgTelnetServerPort, agApplyIndex=agApplyIndex, agNewCfgPgrpMatchTable=agNewCfgPgrpMatchTable, agNewCfgPortAccessTable=agNewCfgPortAccessTable, symMatchInfoSpSigActTblIndex=symMatchInfoSpSigActTblIndex, symMatchInfoSpServerPort=symMatchInfoSpServerPort, portInfoTable=portInfoTable, switchCapVirtSersMaxEnt=switchCapVirtSersMaxEnt, agRevert=agRevert, agApplyTableSize=agApplyTableSize, symSigFileVersionSeqNumber=symSigFileVersionSeqNumber, portStatsPhyIfOutQLen=portStatsPhyIfOutQLen, agCurCfgBootp=agCurCfgBootp, bwmContsMaxEnt=bwmContsMaxEnt, portMirrorStatsIngress=portMirrorStatsIngress, switchCapGSLBRemSitesMaxEnt=switchCapGSLBRemSitesMaxEnt, agCurCfgMgmtNetEntry=agCurCfgMgmtNetEntry, agent=agent, switchCapVRRPRtrsCurrEnt=switchCapVRRPRtrsCurrEnt, symMatchInfoSpSigActTblSigId=symMatchInfoSpSigActTblSigId, switchCapSTGsMaxEnt=switchCapSTGsMaxEnt, agNewCfgSecurityRemAttack=agNewCfgSecurityRemAttack, agSecurityUbStatsTable=agSecurityUbStatsTable, dosNewCfgIPProt=dosNewCfgIPProt, agPortCurCfgEgressBW=agPortCurCfgEgressBW, tacNewCfgTelnet=tacNewCfgTelnet, symCurCfgTblIndex=symCurCfgTblIndex, agDosPortStatsIGMPType=agDosPortStatsIGMPType, tacCurCfgTelnet=tacCurCfgTelnet, ipDstAclCurCfgMask=ipDstAclCurCfgMask, portInfoPhyConnType=portInfoPhyConnType, agCurCfgHttpServerPort=agCurCfgHttpServerPort, agNewCfgPgrpMatchBmap=agNewCfgPgrpMatchBmap, igmpDosAtkPrevention=igmpDosAtkPrevention, agPortCurCfgFastEthMode=agPortCurCfgFastEthMode, dosNewCfgICMPdata=dosNewCfgICMPdata, agDosPortStatsUDPPortZero=agDosPortStatsUDPPortZero, symStatsProtocol=symStatsProtocol, symMatchInfoSpSigActTableEntry=symMatchInfoSpSigActTableEntry, agNewCfgSecurityBogonState=agNewCfgSecurityBogonState, bwmTimePoliciesPerCont=bwmTimePoliciesPerCont, agFileTableMissingRows=agFileTableMissingRows, symStatsUnconfiguredHitsCountOnSpTblSpIndex=symStatsUnconfiguredHitsCountOnSpTblSpIndex, switchCapSlbPortSerState=switchCapSlbPortSerState, agCurCfgSyslogTrapSlbAtk=agCurCfgSyslogTrapSlbAtk, agLastSetErrorReason=agLastSetErrorReason, tacacsSerCurrEnt=tacacsSerCurrEnt, portMirrorStatsTable=portMirrorStatsTable, switchCapOSPFIntfCurrEnt=switchCapOSPFIntfCurrEnt, snmpv3TargetParamsMaxEnt=snmpv3TargetParamsMaxEnt, agMgmtPortCurCfgSpeed=agMgmtPortCurCfgSpeed, agDosPortStatsBroadcast=agDosPortStatsBroadcast, symantecStats=symantecStats, switchCapIDSSerGRs=switchCapIDSSerGRs, agCurCfgSyslogFac=agCurCfgSyslogFac, spMaintStatsResolveErrNoddw=spMaintStatsResolveErrNoddw, radCurCfgPort=radCurCfgPort, spMemStatsAllocs=spMemStatsAllocs, agApplyString=agApplyString, switchCapLACPTrunkGRs=switchCapLACPTrunkGRs, switchCapDomainRecordsCurrEnt=switchCapDomainRecordsCurrEnt, agPortNewCfgFastEthSpeed=agPortNewCfgFastEthSpeed, agSecurityUbStatsBlockedPacket=agSecurityUbStatsBlockedPacket, agCurCfgSyslogTrapCli=agCurCfgSyslogTrapCli, symMatchInfoSpServerIp=symMatchInfoSpServerIp, dosCurCfgIPProt=dosCurCfgIPProt, portMirrorStatsEgress=portMirrorStatsEgress, agNewCfgNTPResyncInterval=agNewCfgNTPResyncInterval, symMatchInfoSpSigActTblSpIndex=symMatchInfoSpSigActTblSpIndex, hwRevision=hwRevision, agNewCfgSyslogTrapStp=agNewCfgSyslogTrapStp, agDosPortStatsFlagAbnormal=agDosPortStatsFlagAbnormal, agNewCfgSyslog2Host=agNewCfgSyslog2Host, secCurCfgSecurityLogThreshold=secCurCfgSecurityLogThreshold, agPortCurCfgDiscardNonIPs=agPortCurCfgDiscardNonIPs, radNewCfgAuthenString=radNewCfgAuthenString, ipAclCurCfgTable=ipAclCurCfgTable, agDosPortStatsTCPPortZero=agDosPortStatsTCPPortZero, agNewCfgMgmtNetEntry=agNewCfgMgmtNetEntry, symStatsUnconfiguredHitsTotalSpHCount=symStatsUnconfiguredHitsTotalSpHCount, switchCapBootpSerCurrEnt=switchCapBootpSerCurrEnt, agCurCfgMgmtNetMask=agCurCfgMgmtNetMask, configSrcIPACLsMaxEnt=configSrcIPACLsMaxEnt, agCurCfgNTPResyncInterval=agCurCfgNTPResyncInterval, bogonSrcIPACLsMaxEnt=bogonSrcIPACLsMaxEnt, portOperIdx=portOperIdx, symCurCfgDefaultAction=symCurCfgDefaultAction, agPortCurCfgFastEthAutoNeg=agPortCurCfgFastEthAutoNeg, agDosPortStatsFragData=agDosPortStatsFragData, agDosPortStatsIPReserved=agDosPortStatsIPReserved, portOperState=portOperState, portOperRmon=portOperRmon, agNewCfgPgrpMatchEntry=agNewCfgPgrpMatchEntry, ipDstAclCurCfgTable=ipDstAclCurCfgTable, agSaveTable=agSaveTable, agSymantecGlobalState=agSymantecGlobalState, hwChassisSerialNumber=hwChassisSerialNumber, switchCapSlbPortInfoIndx=switchCapSlbPortInfoIndx, securityInfo=securityInfo, switchCapSlbPortFltState=switchCapSlbPortFltState, switchCapSlbPortInfoTable=switchCapSlbPortInfoTable, agNewCfgSyslogHost=agNewCfgSyslogHost, spStatsCpuUtil1Second=spStatsCpuUtil1Second, spMaintStatsRateLimitTcpDrops=spMaintStatsRateLimitTcpDrops, agCurCfgPgrpMatchTable=agCurCfgPgrpMatchTable, tacCurCfgPort=tacCurCfgPort, agPgroup=agPgroup, ipAclNewCfgTable=ipAclNewCfgTable, symantecCfg=symantecCfg, spMaintStatsSendLetFailsSP3=spMaintStatsSendLetFailsSP3, symStatsUnconfiguredHitsTable=symStatsUnconfiguredHitsTable, agPortCurCfgTableEntry=agPortCurCfgTableEntry, switchCapL3Info=switchCapL3Info, agCurCfgNTPSecServer=agCurCfgNTPSecServer, radNewCfgTimeout=radNewCfgTimeout, agNewCfgHttpServerPort=agNewCfgHttpServerPort, agDosPortStatsXmasScanAttack=agDosPortStatsXmasScanAttack, ntpSecondaryServerReqSent=ntpSecondaryServerReqSent, totalDosAtkPrevention=totalDosAtkPrevention, endUsers=endUsers, agNewCfgSyslogTrapGslb=agNewCfgSyslogTrapGslb, agNewCfgTrapHostIpAddr=agNewCfgTrapHostIpAddr, ipAclBogonInfoIndex=ipAclBogonInfoIndex, agTacacsConfig=agTacacsConfig, ntpSecondaryServerUpdates=ntpSecondaryServerUpdates, switchCapMonitorPorts=switchCapMonitorPorts, agCurCfgSyslogHost=agCurCfgSyslogHost, agNewCfgLoginBanner=agNewCfgLoginBanner, agMgmtPortCurCfgMode=agMgmtPortCurCfgMode, symStatsUnconfiguredHitsCountOnSpTblIndex=symStatsUnconfiguredHitsCountOnSpTblIndex, agSavePending=agSavePending, switchCapMappingPerDomainrecord=switchCapMappingPerDomainrecord, agCurCfgSecuritySymantecState=agCurCfgSecuritySymantecState, symStatsSourceIp=symStatsSourceIp, ipDstAclCurCfgIp=ipDstAclCurCfgIp, symMatchInfoSpClientIp=symMatchInfoSpClientIp, agPortNewCfgBackup=agPortNewCfgBackup, spStatsCpuUtil4Seconds=spStatsCpuUtil4Seconds, mpCpuStatsUtil1Second=mpCpuStatsUtil1Second, agNewCfgSyslogTrapVlan=agNewCfgSyslogTrapVlan, agNewCfgPgrpMatchRem=agNewCfgPgrpMatchRem, switchCapBGPPeersMaxEnt=switchCapBGPPeersMaxEnt, switchCapIpGWMaxEnt=switchCapIpGWMaxEnt, switchCapVRRPIntfsMaxEnt=switchCapVRRPIntfsMaxEnt, agPortCurCfgBackup=agPortCurCfgBackup, agNewDaylightSavings=agNewDaylightSavings, agCurCfgNTPServer=agCurCfgNTPServer, agPortNewCfgGigEthAutoNeg=agPortNewCfgGigEthAutoNeg, agSslprocNewCfgFilt=agSslprocNewCfgFilt, agDosPortStatsGARP=agDosPortStatsGARP, agFileErrorTableEntry=agFileErrorTableEntry, mgmtStats=mgmtStats, switchCapNumofRportstoVport=switchCapNumofRportstoVport, agPortCurCfgLinkTrap=agPortCurCfgLinkTrap, agNewCfgSyslogTrapCli=agNewCfgSyslogTrapCli, agNewCfgSyslogTrapSystem=agNewCfgSyslogTrapSystem, switchCapBGPRouteAggrsCurrEnt=switchCapBGPRouteAggrsCurrEnt, agEnabledLinklbKey=agEnabledLinklbKey, tacNewCfgCmap=tacNewCfgCmap, agDosPortStatsNullScanAttack=agDosPortStatsNullScanAttack, symMatchInfoSpClientPort=symMatchInfoSpClientPort, agDosPortStatsFragDontOff=agDosPortStatsFragDontOff, agBootVer=agBootVer, portMirrorClear=portMirrorClear, radNewCfgRetries=radNewCfgRetries, mpMemory=mpMemory, agDosPortStatsAckZero=agDosPortStatsAckZero)
mibBuilder.exportSymbols("ALTEON-CHEETAH-SWITCH-MIB", mgmtStatsTxDropped=mgmtStatsTxDropped, switchCapGSLBFailoversPerRemSiteMaxEnt=switchCapGSLBFailoversPerRemSiteMaxEnt, portStatsPhyIfInDiscards=portStatsPhyIfInDiscards, secGeneralCfg=secGeneralCfg, agCurCfgSyslogTrapStp=agCurCfgSyslogTrapStp, agSslprocNewCfgRts=agSslprocNewCfgRts, symStatsUnconfiguredHitsCountOnSpTable=symStatsUnconfiguredHitsCountOnSpTable, agCurCfgNortelMultipleStgMode=agCurCfgNortelMultipleStgMode, agMgmtNewCfgRetry=agMgmtNewCfgRetry, agFileErrorTableSize=agFileErrorTableSize, switchCapPIPsMaxEnt=switchCapPIPsMaxEnt, agNewCfgSonmpSrcIf=agNewCfgSonmpSrcIf, hwPartNumber=hwPartNumber, agCurCfgSyslog2Fac=agCurCfgSyslog2Fac, agPortCurCfgPortAlias=agPortCurCfgPortAlias, symStatsConfiguredHitsMax=symStatsConfiguredHitsMax, tacCurCfgPrimaryIpAddr=tacCurCfgPrimaryIpAddr, agNewCfgConsole=agNewCfgConsole, udpBlastNewCfgudpPortTable=udpBlastNewCfgudpPortTable, tacNewCfgAuthenString=tacNewCfgAuthenString, agNewCfgTrapHostIndx=agNewCfgTrapHostIndx, ipAclNewCfgMask=ipAclNewCfgMask, portInfoSpeed=portInfoSpeed, switchCapGSLBGeographicalRegionsMaxEnt=switchCapGSLBGeographicalRegionsMaxEnt, switchCapGSLBFailoversPerRemSiteCurrEnt=switchCapGSLBFailoversPerRemSiteCurrEnt, agCurCfgMgmtNetSubnet=agCurCfgMgmtNetSubnet, tcpDosAtkPrevention=tcpDosAtkPrevention, spMaintStatsRecvLetSuccessSP1=spMaintStatsRecvLetSuccessSP1, dosCurCfgICMPoff=dosCurCfgICMPoff, switchCapGSLBDomainsMaxEnt=switchCapGSLBDomainsMaxEnt, agPortConfig=agPortConfig, tacNewCfgSecondaryIpAddr=tacNewCfgSecondaryIpAddr, radCurCfgPrimaryIpAddr=radCurCfgPrimaryIpAddr, agDosPortStatsFraggleAttack=agDosPortStatsFraggleAttack, agDosPortStatsSmurfAttack=agDosPortStatsSmurfAttack, radNewCfgPort=radNewCfgPort, symMatchInfoSpProtocol=symMatchInfoSpProtocol, switchCapFDBCurrEnt=switchCapFDBCurrEnt, tacNewCfgState=tacNewCfgState, tacNewCfgPrimaryIpAddr=tacNewCfgPrimaryIpAddr, agDosPortStatsFTPPort=agDosPortStatsFTPPort, agDosPortStatsFragBoundary=agDosPortStatsFragBoundary, portInfoPhyIfMtu=portInfoPhyIfMtu, agPortNewCfgVlanTag=agPortNewCfgVlanTag, agCurCfgSyslogTrapWeb=agCurCfgSyslogTrapWeb, agPortCurCfgIndx=agPortCurCfgIndx, tacNewCfgRetries=tacNewCfgRetries, pktStatsJumbos=pktStatsJumbos, switchCapGSLBNetworksCurrEnt=switchCapGSLBNetworksCurrEnt, mgmtStatsTxBytes=mgmtStatsTxBytes, agDosPortStatsTCPLen=agDosPortStatsTCPLen, symCurCfgSigBwmMappingTableEntry=symCurCfgSigBwmMappingTableEntry, agNewCfgSyslogTrapNtp=agNewCfgSyslogTrapNtp, switchCapDNSSerMaxEnt=switchCapDNSSerMaxEnt, agNewCfgSecurityUbState=agNewCfgSecurityUbState, switchCapIpStaticRoutesMaxEnt=switchCapIpStaticRoutesMaxEnt, mgmtStatsTxQueueLen=mgmtStatsTxQueueLen, spMemStatsFrees=spMemStatsFrees, switchCapRouteMapsMaxEnt=switchCapRouteMapsMaxEnt, snmpv3AccessGRsCurrEnt=snmpv3AccessGRsCurrEnt, mgmtStatsRxpackets=mgmtStatsRxpackets, agMgmtPortNewCfgAuto=agMgmtPortNewCfgAuto, ipAclBogonInfoTableEntry=ipAclBogonInfoTableEntry, agNewCfgTrapHostTable=agNewCfgTrapHostTable, agNewCfgNTPServer=agNewCfgNTPServer, switchCapRealServicesEnt=switchCapRealServicesEnt, portStatsPhyIfInUnknownProtos=portStatsPhyIfInUnknownProtos, ipAclNewCfgIndx=ipAclNewCfgIndx, mgmtPortInfoSpeed=mgmtPortInfoSpeed, agNewCfgSecurityDoSAttacks=agNewCfgSecurityDoSAttacks, switchCapIpGWCurrEnt=switchCapIpGWCurrEnt, agConfigForNxtReset=agConfigForNxtReset, mgmtStatsTxCollisions=mgmtStatsTxCollisions, pktStatsMediums=pktStatsMediums, arpDosAtkPrevention=arpDosAtkPrevention, agCurCfgSyslogTrapConsole=agCurCfgSyslogTrapConsole, symStatsUnconfiguredHitsTableEntry=symStatsUnconfiguredHitsTableEntry, ntpLastUpdateServer=ntpLastUpdateServer, agPortTableMaxEnt=agPortTableMaxEnt, agMgmtNetTableMaxSize=agMgmtNetTableMaxSize, agPortNewCfgPortAlias=agPortNewCfgPortAlias, switchCapSlbPortRTSState=switchCapSlbPortRTSState, mpCpuStatsUtil64Seconds=mpCpuStatsUtil64Seconds, switchCapASFlts=switchCapASFlts, agCurCfgSyslogTrapIp=agCurCfgSyslogTrapIp, agDosPortStatsFragOversize=agDosPortStatsFragOversize, dosCurCfgFragoff=dosCurCfgFragoff, spMaintStatsSendLetFailsMP=spMaintStatsSendLetFailsMP, agDosPortStatsTable=agDosPortStatsTable, udpBlastCurCfgudpPortEntry=udpBlastCurCfgudpPortEntry, mgmtStatsTxpackets=mgmtStatsTxpackets, spStatsCpuUtil64Seconds=spStatsCpuUtil64Seconds, agDosPortStatsLand=agDosPortStatsLand, udpBlastNewCfgudpPortEntryDelete=udpBlastNewCfgudpPortEntryDelete, radCurCfgAuthenSecondString=radCurCfgAuthenSecondString, spMemStatsTable=spMemStatsTable, agRadiusConfig=agRadiusConfig, udpBlastCurCfgudpPortHighIndx=udpBlastCurCfgudpPortHighIndx, ipAclNewCfgIp=ipAclNewCfgIp, switchCapVirtServicesEnt=switchCapVirtServicesEnt, mpCpuStats=mpCpuStats, agNewCfgSmtpHost=agNewCfgSmtpHost, symStatsConfiguredHitsOutCont=symStatsConfiguredHitsOutCont, agSecurityIpAclStatsIndx=agSecurityIpAclStatsIndx, agSaveConfig=agSaveConfig, agDosPortStatsDNSPort=agDosPortStatsDNSPort, switchCapGSLBDNSPersCacheCurrEnt=switchCapGSLBDNSPersCacheCurrEnt, agDosPortStatsRc8=agDosPortStatsRc8, ipDstAclNewCfgIndx=ipDstAclNewCfgIndx, spMaintStatsTableEntry=spMaintStatsTableEntry, agPortCurCfgGigEthSpeed=agPortCurCfgGigEthSpeed, udpBlastCurCfgudpPortPacketLimit=udpBlastCurCfgudpPortPacketLimit, agDiffTableSize=agDiffTableSize, bwmPoliciesCurrEnt=bwmPoliciesCurrEnt, switchCapSecInfo=switchCapSecInfo, agFileTransfer=agFileTransfer, agDiff=agDiff, switchCapIpStaticARPCurrEnt=switchCapIpStaticARPCurrEnt, dosNewCfgICMPoff=dosNewCfgICMPoff, portStatsTable=portStatsTable, snmpv3UsersMaxEnt=snmpv3UsersMaxEnt, agNewCfgSyslogSev=agNewCfgSyslogSev, agCurCfgIdleCLITimeout=agCurCfgIdleCLITimeout, spMaintStatsSendLetFailsSP2=spMaintStatsSendLetFailsSP2, agTftp=agTftp, agTftpDumpFileName=agTftpDumpFileName, agMgmtCurCfgDns=agMgmtCurCfgDns, symMatchInfoSpNumOfMatches=symMatchInfoSpNumOfMatches, capacityInfo=capacityInfo, switchCapVRRPRtrGRsMaxEnt=switchCapVRRPRtrGRsMaxEnt, udpDosAtkPrevention=udpDosAtkPrevention, agCurCfgMgmtNetIndex=agCurCfgMgmtNetIndex, agentOper=agentOper, symStatsConfiguredHitsCountOnSpTblSpIndex=symStatsConfiguredHitsCountOnSpTblSpIndex, agCfgDumpString=agCfgDumpString, tacCurCfgState=tacCurCfgState, agSecurityPgrpStatsIndx=agSecurityPgrpStatsIndx, symStatsConfiguredHitsLastHitTime=symStatsConfiguredHitsLastHitTime, agFileTableEntry=agFileTableEntry, udpBlastNewCfgudpPortPacketLimit=udpBlastNewCfgudpPortPacketLimit, smtpHostsMaxEnt=smtpHostsMaxEnt, ntpSerCurrEnt=ntpSerCurrEnt, agDosPortStatsFragMoreDont=agDosPortStatsFragMoreDont, agDiffTableEntry=agDiffTableEntry, udpBlastCurCfgudpPortTable=udpBlastCurCfgudpPortTable, switchCapOSPFSummaryRangesMaxEnt=switchCapOSPFSummaryRangesMaxEnt, agDosPortStatsICMPOff=agDosPortStatsICMPOff, agDosPortStatsTableEntry=agDosPortStatsTableEntry, agSaveConfiguration=agSaveConfiguration, agCurCfgPortAccessState=agCurCfgPortAccessState, snmpv3TargetAddrMaxEnt=snmpv3TargetAddrMaxEnt, hwEthernetBoardNumber=hwEthernetBoardNumber, agNewCfgSyslogTrapOspf=agNewCfgSyslogTrapOspf, agNewCfgPortAccessEntry=agNewCfgPortAccessEntry, agRtcTime=agRtcTime, agCurCfgSyslog2Host=agCurCfgSyslog2Host, symStatsConfiguredHitsTableEntry=symStatsConfiguredHitsTableEntry, agDosPortStatsIPOptLen=agDosPortStatsIPOptLen, agPortCurCfgPreferred=agPortCurCfgPreferred, configDstIPACLsCurrEnt=configDstIPACLsCurrEnt, agSyslogMsgTable=agSyslogMsgTable, agSyslogMsgIndex=agSyslogMsgIndex, portInfoSFPType=portInfoSFPType, agMgmtNetConfig=agMgmtNetConfig, switchCapRIPIntfCurrEnt=switchCapRIPIntfCurrEnt, agEnabledGslbKey=agEnabledGslbKey, agNewCfgSyslogTrapBgp=agNewCfgSyslogTrapBgp, agImageForNxtReset=agImageForNxtReset, agNewCfgPgrpName=agNewCfgPgrpName, spMaintStatsRecvLetErrorsMP=spMaintStatsRecvLetErrorsMP, agTftpLastActionStatus=agTftpLastActionStatus, symStatsTotalHits=symStatsTotalHits, switchCapRulesforURLParsingCurrEnt=switchCapRulesforURLParsingCurrEnt, agFileIndex=agFileIndex, spMaintStatsRecvLetErrorsSP4=spMaintStatsRecvLetErrorsSP4, udpBlastCfg=udpBlastCfg, portInfoIndx=portInfoIndx, agReset=agReset, agCurCfgTelnetServerPort=agCurCfgTelnetServerPort, agSecurityIpDstAclStatsTable=agSecurityIpDstAclStatsTable, agCurCfgSyslogTrapTcpLim=agCurCfgSyslogTrapTcpLim, agNewCfgSyslogTrapVrrp=agNewCfgSyslogTrapVrrp, hardware=hardware, agCurCfgSyslogTrapVrrp=agCurCfgSyslogTrapVrrp, spMaintStatsRateLimitArpDrops=spMaintStatsRateLimitArpDrops, agCfgBootMin=agCfgBootMin, mgmtNetworksCurrEnt=mgmtNetworksCurrEnt, agNewCfgSyslog2Sev=agNewCfgSyslog2Sev, spMaintStatsRateLimitUdpDrops=spMaintStatsRateLimitUdpDrops, agNewCfgNTPDlight=agNewCfgNTPDlight, ipAclBogonInfoMask=ipAclBogonInfoMask, portStatsPhyIfInUcastPkts=portStatsPhyIfInUcastPkts, snmpv3ViewsCurrEnt=snmpv3ViewsCurrEnt, spMemStatsTotal=spMemStatsTotal, spMaintStatsSendLetSuccessSP2=spMaintStatsSendLetSuccessSP2, spMaintStatsPfdbFreeEmpty=spMaintStatsPfdbFreeEmpty, mgmtStatsRxDropped=mgmtStatsRxDropped, secNewCfgPacketDepth=secNewCfgPacketDepth, agCurCfgSecurityIpAclState=agCurCfgSecurityIpAclState, agDiffIndex=agDiffIndex, agCfgBootReset=agCfgBootReset, hwMainBoardNumber=hwMainBoardNumber, tacCurCfgTimeout=tacCurCfgTimeout, switchCapIpRoutesMaxEnt=switchCapIpRoutesMaxEnt, agCurCfgARPMaxRate=agCurCfgARPMaxRate, agTrapHostTableMaxEnt=agTrapHostTableMaxEnt, spMaintStatsRateLimitIcmpDrops=spMaintStatsRateLimitIcmpDrops, symMatchInfoSpSigActTblAction=symMatchInfoSpSigActTblAction, hwMainBoardRevision=hwMainBoardRevision, switchCapIpIntfCurrEnt=switchCapIpIntfCurrEnt, agApplyConfiguration=agApplyConfiguration, agNewCfgIdleCLITimeout=agNewCfgIdleCLITimeout, agTrapHost=agTrapHost, agentInfo=agentInfo, agApplyTable=agApplyTable, agCurCfgTrapHostIpAddr=agCurCfgTrapHostIpAddr, mgmtPortInfoLink=mgmtPortInfoLink, agSslprocNewCfgPort=agSslprocNewCfgPort, switchCapBGPPeersCurrEnt=switchCapBGPPeersCurrEnt, agMgmtNewCfgGateway=agMgmtNewCfgGateway, switchCapGSLBLocSersCurrEnt=switchCapGSLBLocSersCurrEnt, udpBlastNewCfgudpPortLowIndx=udpBlastNewCfgudpPortLowIndx, symStatsConfiguredHitsCountOnSpTable=symStatsConfiguredHitsCountOnSpTable, agentConfig=agentConfig, switchCapIpARPCurrEnt=switchCapIpARPCurrEnt, agFileTransferState=agFileTransferState, agNewCfgSecurityDosState=agNewCfgSecurityDosState, agCurCfgTrapHostIndx=agCurCfgTrapHostIndx, switchCapIpARPMaxEnt=switchCapIpARPMaxEnt, ipDstAclTableMaxSize=ipDstAclTableMaxSize, mgmtPortInfoMode=mgmtPortInfoMode, agMgmtCurCfgRadius=agMgmtCurCfgRadius, switchCapLSDBLimit=switchCapLSDBLimit, ntpStats=ntpStats, agDosPortStatsIGMPLen=agDosPortStatsIGMPLen, agCfgBootHour=agCfgBootHour, agMgmtCurCfgTacacs=agMgmtCurCfgTacacs, agPortAccessTableMaxSize=agPortAccessTableMaxSize, mpCpuStatsUtil4Seconds=mpCpuStatsUtil4Seconds, agCurCfgSonmpSrcIf=agCurCfgSonmpSrcIf, agCfgDumpTable=agCfgDumpTable, agMgmtNewCfgWlm=agMgmtNewCfgWlm, totalSrcIPACLsCurrEnt=totalSrcIPACLsCurrEnt, agDosPortStatsSYNData=agDosPortStatsSYNData, spMemStatsHiWat=spMemStatsHiWat, symStatsSourcePort=symStatsSourcePort, agPortOperTable=agPortOperTable, mgmtStatsTxCarrier=mgmtStatsTxCarrier, symNewCfgSigBwmMappingTable=symNewCfgSigBwmMappingTable, spMaintStatsRecvLetErrorsSP3=spMaintStatsRecvLetErrorsSP3, agCurCfgPgrpName=agCurCfgPgrpName, switchCapSlbPortInfo=switchCapSlbPortInfo, agNewCfgICMPMaxRate=agNewCfgICMPMaxRate, symCurCfgSignatureID=symCurCfgSignatureID)
mibBuilder.exportSymbols("ALTEON-CHEETAH-SWITCH-MIB", portStatsPhyIfInMcastPkts=portStatsPhyIfInMcastPkts, portMirrorStats=portMirrorStats, ipAclBogonInfoTable=ipAclBogonInfoTable, agCfgSecurityPortIndx=agCfgSecurityPortIndx, radNewCfgState=radNewCfgState, agBoot=agBoot, switchCapGSLBDomainsCurrEnt=switchCapGSLBDomainsCurrEnt, agPortOperTableEntry=agPortOperTableEntry, symantecInfo=symantecInfo, agCurCfgSyslogTrapSecurity=agCurCfgSyslogTrapSecurity, mgmtStatsRxFrame=mgmtStatsRxFrame, agNewCfgTCPMaxRate=agNewCfgTCPMaxRate, agDosPortStatsIP6Version=agDosPortStatsIP6Version, agImage2Ver=agImage2Ver, agPortNewCfgFastEthFctl=agPortNewCfgFastEthFctl, switchCapL2Info=switchCapL2Info, spMaintStatsRecvLetSuccessSP4=spMaintStatsRecvLetSuccessSP4, agSecurityIpAclStatsAddress=agSecurityIpAclStatsAddress, mpMemStats=mpMemStats, agSyslogMsgTableEntry=agSyslogMsgTableEntry, symStatsUnconfiguredHitsMax=symStatsUnconfiguredHitsMax, portStatsPhyIfInBroadcastPkts=portStatsPhyIfInBroadcastPkts, agCurCfgSyslogSev=agCurCfgSyslogSev, secNewCfgSecurityLogThreshold=secNewCfgSecurityLogThreshold, agCurCfgPgrpMatchEntry=agCurCfgPgrpMatchEntry, secCurCfgIpAclSyslogTime=secCurCfgIpAclSyslogTime, portStatsPhyIfOutNUcastPkts=portStatsPhyIfOutNUcastPkts, symIpsEngineVersion=symIpsEngineVersion, tacCurCfgAuthenString=tacCurCfgAuthenString, agNewCfgSyslogFac=agNewCfgSyslogFac, agFileSize=agFileSize, agSslprocCurCfgFilt=agSslprocCurCfgFilt, agMgmtNewCfgState=agMgmtNewCfgState, ipAclNewCfgAction=ipAclNewCfgAction, ipAclBogonInfoIp=ipAclBogonInfoIp, symMatchInfoSpTable=symMatchInfoSpTable, ipAclCfg=ipAclCfg, switchCapRealSersMaxEnt=switchCapRealSersMaxEnt, symStatsUnconfiguredHitsCountOnSpTableEntry=symStatsUnconfiguredHitsCountOnSpTableEntry, agNewCfgMgmtNetTable=agNewCfgMgmtNetTable, pktStatsJumbosHiWatermark=pktStatsJumbosHiWatermark, switchCapGSLBRemSersMaxEnt=switchCapGSLBRemSersMaxEnt, symStatsConfiguredHitsCountOnSpTblIndex=symStatsConfiguredHitsCountOnSpTblIndex, switchCapGSLBNetworksMaxEnt=switchCapGSLBNetworksMaxEnt, switchCapDomianRecordsMaxEnt=switchCapDomianRecordsMaxEnt, symStatsConfiguredHitsCountOnSpTableEntry=symStatsConfiguredHitsCountOnSpTableEntry, ntpClearStats=ntpClearStats, snmpv3TargetParamsCurrEnt=snmpv3TargetParamsCurrEnt, udpBlastCurCfgudpPortLowIndx=udpBlastCurCfgudpPortLowIndx, agDosPortStatsFragOpt=agDosPortStatsFragOpt, agSslproc=agSslproc, agPortCurCfgFastEthSpeed=agPortCurCfgFastEthSpeed, agFileErrorIndex=agFileErrorIndex, agNewCfgHttpsServerPort=agNewCfgHttpsServerPort, udpBlastNewCfgudpPortEntryPacketLimit=udpBlastNewCfgudpPortEntryPacketLimit, agPortCurCfgNonIPBwmContract=agPortCurCfgNonIPBwmContract, portMirrorStatsTableEntry=portMirrorStatsTableEntry, agMgmtNewCfgSmtp=agMgmtNewCfgSmtp, agCurCfgSyslogTrapFilter=agCurCfgSyslogTrapFilter, agCurCfgSecurityUbState=agCurCfgSecurityUbState, mgmtStatsTxOverruns=mgmtStatsTxOverruns, hwPower=hwPower, portStatsIndx=portStatsIndx, agMgmtCurCfgSnmp=agMgmtCurCfgSnmp, bogonSrcIPACLsCurrEnt=bogonSrcIPACLsCurrEnt, portStatsPhyIfOutUcastPkts=portStatsPhyIfOutUcastPkts, symStatsConfiguredHitsSigId=symStatsConfiguredHitsSigId, agDosPortStatsARPNuCast=agDosPortStatsARPNuCast, agSecurityPgrpStatsTableEntry=agSecurityPgrpStatsTableEntry, mpMemStatsLowFree=mpMemStatsLowFree, agCfgDumpTableSize=agCfgDumpTableSize, dosNewCfgFragoff=dosNewCfgFragoff, ipv6DosAtkPrevention=ipv6DosAtkPrevention, totalDstIPACLsCurrEnt=totalDstIPACLsCurrEnt, agNewCfgMgmtNetMask=agNewCfgMgmtNetMask, agMgmtPortNewCfgMode=agMgmtPortNewCfgMode, agNewCfgPortAccessIndex=agNewCfgPortAccessIndex, agSslprocNewCfgIpAddr=agSslprocNewCfgIpAddr, secCurCfgPacketDepth=secCurCfgPacketDepth, agSecurityIpDstAclStatsBlockedPacket=agSecurityIpDstAclStatsBlockedPacket, agSymLicenseSwKeyRenewalPending=agSymLicenseSwKeyRenewalPending, pktStatsDiscards=pktStatsDiscards, ntpPrimaryServerUpdates=ntpPrimaryServerUpdates, agMgmtNewCfgDns=agMgmtNewCfgDns, agTftpUserName=agTftpUserName, agPortNewCfgBwmContract=agPortNewCfgBwmContract, agCfgBootNxtResetTime=agCfgBootNxtResetTime, agNewCfgSyslog2Fac=agNewCfgSyslog2Fac, agSonmp=agSonmp, portStatsPhyIfOutErrors=portStatsPhyIfOutErrors, agMgmtNewCfgSyslog=agMgmtNewCfgSyslog, agSslprocCurCfgIpAddr=agSslprocCurCfgIpAddr, agMgmtCurCfgTftp=agMgmtCurCfgTftp, agNewCfgARPMaxRate=agNewCfgARPMaxRate, operSrcIPACLsCurrEnt=operSrcIPACLsCurrEnt, agMgmtCurCfgWlm=agMgmtCurCfgWlm, agCurCfgSyslogTrapSsh=agCurCfgSyslogTrapSsh, dosCurCfgSYNdata=dosCurCfgSYNdata, agMgmtCurCfgIpAddr=agMgmtCurCfgIpAddr, agNewCfgSyslogTrapIp=agNewCfgSyslogTrapIp, switchCapFDBPerSPMaxEnt=switchCapFDBPerSPMaxEnt, switchCapIpRoutesCurrEnt=switchCapIpRoutesCurrEnt, switchCapVirtSersCurrEnt=switchCapVirtSersCurrEnt, agNewCfgNTPTzoneHHMM=agNewCfgNTPTzoneHHMM, agCfgDumpState=agCfgDumpState, switchCapLocNetsCurrEnt=switchCapLocNetsCurrEnt, switchCapRIPIntfMaxEnt=switchCapRIPIntfMaxEnt, bwmPoliciesMaxEnt=bwmPoliciesMaxEnt, agPortNewCfgNonIPBwmContract=agPortNewCfgNonIPBwmContract, agCurCfgPgrpMatchIndex=agCurCfgPgrpMatchIndex, agDiffString=agDiffString, agNewCfgSecuritySymantecState=agNewCfgSecuritySymantecState, pktStatsSmallsHiWatermark=pktStatsSmallsHiWatermark, pktStatsAllocFails=pktStatsAllocFails, spMemStatsIndex=spMemStatsIndex, portInfoSFPName=portInfoSFPName, spMaintStatsSendLetFailsSP4=spMaintStatsSendLetFailsSP4, ntpSystemCurrentTime=ntpSystemCurrentTime, agMgmtNewCfgNtp=agMgmtNewCfgNtp, spMaintStatsAgeMPNoddw=spMaintStatsAgeMPNoddw, portInfoFlowCtrl=portInfoFlowCtrl, agSaveString=agSaveString, switchCapSlbPortInfoTableEntry=switchCapSlbPortInfoTableEntry, switchCapSerGRsMaxEnt=switchCapSerGRsMaxEnt, switchCapVlanMaxEnt=switchCapVlanMaxEnt, switchCapSLBSessionsCurrEnt=switchCapSLBSessionsCurrEnt, agNewCfgSecurityAddAttack=agNewCfgSecurityAddAttack, switchCapRealIDSSer=switchCapRealIDSSer, agPortCurCfgBwmContract=agPortCurCfgBwmContract, udpBlastNewCfgudpPortHighIndx=udpBlastNewCfgudpPortHighIndx, agPortCurCfgFastEthFctl=agPortCurCfgFastEthFctl, ntpPrimaryServerReqSent=ntpPrimaryServerReqSent, switchCapFDBMaxEnt=switchCapFDBMaxEnt, panicDumps=panicDumps, mgmtNetworksMaxEnt=mgmtNetworksMaxEnt, snmpClearStats=snmpClearStats, switchCapOSPFIntfMaxEnt=switchCapOSPFIntfMaxEnt, ipDstAclNewCfgIp=ipDstAclNewCfgIp, agCurCfgICMPMaxRate=agCurCfgICMPMaxRate, switchCapOSPFHostsCurrEnt=switchCapOSPFHostsCurrEnt, agSecurityPgrpStatsTable=agSecurityPgrpStatsTable, portStatsPhyIfOutMcastPkts=portStatsPhyIfOutMcastPkts, switchCapSTGsCurrEnt=switchCapSTGsCurrEnt, agClearFlashDump=agClearFlashDump, agCurCfgTrapSrcIf=agCurCfgTrapSrcIf, radCurCfgTelnet=radCurCfgTelnet, symStatsUnconfiguredHitsTblIndex=symStatsUnconfiguredHitsTblIndex, ipDstAclNewCfgMask=ipDstAclNewCfgMask, secNewCfgIpAclSyslogThreshold=secNewCfgIpAclSyslogThreshold, switchCapOSPFSummaryRangesCurrEnt=switchCapOSPFSummaryRangesCurrEnt, agentStats=agentStats, agSyslogMessage=agSyslogMessage, agCurCfgSecurityBogonState=agCurCfgSecurityBogonState, agPortCurCfgGigEthMode=agPortCurCfgGigEthMode, switchCapIpIntfMaxEnt=switchCapIpIntfMaxEnt, snmpv3ViewsMaxEnt=snmpv3ViewsMaxEnt, portInfoPreferred=portInfoPreferred, switchCapGSLBDNSPersCacheMaxEnt=switchCapGSLBDNSPersCacheMaxEnt, agMgmtNewCfgSonmp=agMgmtNewCfgSonmp, agNewCfgMgmtNetSubnet=agNewCfgMgmtNetSubnet, agCfgBootWeekday=agCfgBootWeekday, pktStatsAllocs=pktStatsAllocs, switchCapGeneralInfo=switchCapGeneralInfo, agEnabledSecurityKey=agEnabledSecurityKey, agSyslogMsgTableMaxSize=agSyslogMsgTableMaxSize, switchCapSlbInfo=switchCapSlbInfo, agCurCfgSmtpHost=agCurCfgSmtpHost, agSecurityIpDstAclStatsTableEntry=agSecurityIpDstAclStatsTableEntry, agSaveIndex=agSaveIndex, operSrcIPACLsMaxEnt=operSrcIPACLsMaxEnt, agNewCfgSyslogTrapFilter=agNewCfgSyslogTrapFilter, switchCapSLBSessionsMaxEnt=switchCapSLBSessionsMaxEnt, agDosPortStatsARPSpoof=agDosPortStatsARPSpoof, agCurCfgConsole=agCurCfgConsole, mgmtStatsRxOverruns=mgmtStatsRxOverruns, agPortAccessCfg=agPortAccessCfg, agCurCfgSyslogTrapOspf=agCurCfgSyslogTrapOspf, mgmtStatsRxBytes=mgmtStatsRxBytes, agTftpImageFileName=agTftpImageFileName, agApplyConfig=agApplyConfig, symNewCfgSigBwmMappingTableEntry=symNewCfgSigBwmMappingTableEntry, agNewCfgSyslogTrapSsh=agNewCfgSyslogTrapSsh, agMgmtNewCfgTacacs=agMgmtNewCfgTacacs, agCurCfgPgrpMatchBmap=agCurCfgPgrpMatchBmap, udpBlastNewCfgudpPortEntry=udpBlastNewCfgudpPortEntry, agCurCfgSyslogTrapSynAtk=agCurCfgSyslogTrapSynAtk, symNewCfgTblIndex=symNewCfgTblIndex, agPortCurCfgState=agPortCurCfgState, hwFanStatus=hwFanStatus, switchCapIpStaticRoutesCurrEnt=switchCapIpStaticRoutesCurrEnt, agNewCfgNortelMultipleStgMode=agNewCfgNortelMultipleStgMode, agCurCfgSyslogTrapRmon=agCurCfgSyslogTrapRmon, agCurCfgSecurityDosState=agCurCfgSecurityDosState, radNewCfgPrimaryIpAddr=radNewCfgPrimaryIpAddr, ipAclBogonInfoTableMaxSize=ipAclBogonInfoTableMaxSize, ntpLastUpdateTime=ntpLastUpdateTime, agMgmtCurCfgReport=agMgmtCurCfgReport, agSymantecSwKeyRemainingDays=agSymantecSwKeyRemainingDays, agClearStats=agClearStats, agMgmtCurCfgState=agMgmtCurCfgState, agNewCfgMgmtNetIndex=agNewCfgMgmtNetIndex, agPortNewCfgEgressBW=agPortNewCfgEgressBW, switchCapGSLBRulesCurrEnt=switchCapGSLBRulesCurrEnt, agDosPortStatsFinScan=agDosPortStatsFinScan, symStatsUnconfiguredHitsCountOnSpTblHitCount=symStatsUnconfiguredHitsCountOnSpTblHitCount, ipAclBogonInfo=ipAclBogonInfo, agTftpTSDumpFileName=agTftpTSDumpFileName, agNTP=agNTP, ipDosAtkPrevention=ipDosAtkPrevention, symStatsDestIp=symStatsDestIp, agNewCfgPgrpMatchIndex=agNewCfgPgrpMatchIndex, symNewCfgOutContractID=symNewCfgOutContractID, symStatsClear=symStatsClear, spMaintStatsSendLetSuccessSP4=spMaintStatsSendLetSuccessSP4, agPortNewCfgGigEthFctl=agPortNewCfgGigEthFctl, agApply=agApply, agNewCfgNTPSecServer=agNewCfgNTPSecServer, mpMemStatsUsed=mpMemStatsUsed, agDosPortStatsVecnaScan=agDosPortStatsVecnaScan, agCurCfgSyslog2Sev=agCurCfgSyslog2Sev, agSecurityPgrpStatsName=agSecurityPgrpStatsName, agCurDaylightSavings=agCurDaylightSavings, agPgrpMatchTableMaxSize=agPgrpMatchTableMaxSize, agSymantecSwKeyInfo=agSymantecSwKeyInfo, portStatsPhyIfOutOctets=portStatsPhyIfOutOctets, symMatchInfoSpSigActTable=symMatchInfoSpSigActTable, securityStats=securityStats, symStatsConfiguredHitsTable=symStatsConfiguredHitsTable)
