#
# PySNMP MIB module WWP-LEOS-PBT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-PBT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
Bits, Counter64, Gauge32, iso, ModuleIdentity, Integer32, NotificationType, IpAddress, ObjectIdentity, MibIdentifier, TimeTicks, Counter32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "Gauge32", "iso", "ModuleIdentity", "Integer32", "NotificationType", "IpAddress", "ObjectIdentity", "MibIdentifier", "TimeTicks", "Counter32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention, TruthValue, RowStatus, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue", "RowStatus", "MacAddress")
wwpLeosVplsEncapTunnelId, wwpLeosVplsEncapTunnelName, wwpLeosVplsEncapTunnelBVID, wwpLeosVplsEncapTunnelActive = mibBuilder.importSymbols("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelId", "wwpLeosVplsEncapTunnelName", "wwpLeosVplsEncapTunnelBVID", "wwpLeosVplsEncapTunnelActive")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosPbtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38))
wwpLeosPbtMIB.setRevisions(('2011-07-05 00:00', '2011-05-05 16:00', '2011-01-31 00:00', '2007-03-02 17:00', '2006-08-25 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosPbtMIB.setRevisionsDescriptions(('Added wwpLeosPbtTransitTunnelEtypeRemark.', 'Deprecated object wwpLeosPbtTunnelFaultNotification.', 'Added wwpLeosPbtTunnelReversionState and wwpLeosPbtTunnelReversionHoldTime.', 'This MIB module defines the managed objects for the PBT (Provider Backbone Transport) feature for LEOS based WWP products.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosPbtMIB.setLastUpdated('201107050000Z')
if mibBuilder.loadTexts: wwpLeosPbtMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosPbtMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosPbtMIB.setDescription('Added objects wwpLeosPbtVirtualCircuitDestBridgeIndex, wwpLeosPbtTunnelSwitchOverHoldTime, WwpLeosTcePbtServiceEntry wwpLeosPbtLocalBridgeNameMacMapEntry, wwpLeosTcePbtTnlGroupEntry, wwpLeosTcePbtEncapTnlEntry, wwpLeosTcePbtDecapTnlEntry, wwpLeosTcePbtServiceUserFrameL2TransformEntry. Added Notifications wwpLeosTcePbtTunnelActivateNotification, wwpLeosTcePbtTunnelDeactivateNotification, wwpLeosTcePbtTunnelReversionNotification.')
wwpLeosPbtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1))
wwpLeosPbt = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1))
wwpLeosPbtMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 2))
wwpLeosPbtMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 2, 0))
wwpLeosPbtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 3))
wwpLeosPbtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 3, 1))
wwpLeosPbtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 3, 2))
wwpLeosPbtGlobalAttrs = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 1))
wwpLeosPbtBridgeMac = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 1, 1), MacAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPbtBridgeMac.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtBridgeMac.setDescription('This represents the provider mac address to be used as source mac during PBT encapsulation. If this object is not set then it will return default mac derived from chassis mac.')
wwpLeosPbtServiceTagEType = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPbtServiceTagEType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtServiceTagEType.setDescription('This represents the etype value to be used in I-Tag (Service tag) section of PBT encapsulation. The I-tag ether type cannot be modified in native mode PBT')
wwpLeosPbtTunnelTagEtype = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPbtTunnelTagEtype.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtTunnelTagEtype.setDescription('This represents the etype value to be used in B-Tag section of PBT encapsulation. Valid values are 8100, 9100 & 88a8')
wwpLeosPbtTunnelReversionState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPbtTunnelReversionState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtTunnelReversionState.setDescription('Setting this object will enable or disable automatic tunnel reversion from backup to primary if primary comes back up. Device will wait for wwpLeosPbtTunnelReversionHoldTime before switching that data traffic back to primary automatically.')
wwpLeosPbtTunnelReversionHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 1, 5), Unsigned32().clone(3000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPbtTunnelReversionHoldTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtTunnelReversionHoldTime.setDescription('This object represents the hold time before data traffic on the backup tunnel will automatically revert to the primary tunnel. ')
wwpLeosPbtTransitTunnelEtypeRemark = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPbtTransitTunnelEtypeRemark.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtTransitTunnelEtypeRemark.setDescription('Setting this object will enable or disable remarking of the EtherType field in the B-Tag (tunnel) portion of PBT frames that are transiting through the device without PBT encapsulation, nor decapsulation. While enabled, applicable PBT transit frames egressing a PBT enhanced port will have their B-Tag EtherType marked with the value configured as the wwpLeosPbtTunnelTagEtype.')
wwpLeosPbtAdminMode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonNative", 1), ("native", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPbtAdminMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtAdminMode.setDescription(' This object represents PBT Admin mode. Some platforms support either non-native or native mode.')
wwpLeosPbtOperMode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonNative", 1), ("native", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPbtOperMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtOperMode.setDescription(' This object represents PBT Oper mode. Some platforms support either non-native or native mode.')
wwpLeosPbtServiceVlanTpid = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPbtServiceVlanTpid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtServiceVlanTpid.setDescription('When operating in native mode, this is the value of the service vlan TPID that will be used if retain-stag is set to TRUE. This is configurable only in native mode PBT. In non-native mode, this value defaults to the 0x8100 and cannot be changed. Valid values are 8100, 9100 and 88a8')
wwpLeosPbtTunnelSwitchOverHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 1, 10), Unsigned32()).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosPbtTunnelSwitchOverHoldTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtTunnelSwitchOverHoldTime.setDescription('This object represents the hold time before data traffic on backup tunnel will automatically switchover to primary tunnel.')
wwpLeosPbtBridgeNameMacMapTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 2), )
if mibBuilder.loadTexts: wwpLeosPbtBridgeNameMacMapTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtBridgeNameMacMapTable.setDescription('The (conceptual) table listing the host names to mac mapping table. To create entry in this table use SNMP multiple set operation. - wwpLeosPbtBridgeNameMacMapBridgeName must be specified. - wwpLeosPbtBridgeNameMacMapMacAddr must be specified. - wwpLeosPbtBridgeNameMacMapRowStatus must be specified. ')
wwpLeosPbtBridgeNameMacMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 2, 1), ).setIndexNames((0, "WWP-LEOS-PBT-MIB", "wwpLeosPbtBridgeNameMacMapIndex"))
if mibBuilder.loadTexts: wwpLeosPbtBridgeNameMacMapEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtBridgeNameMacMapEntry.setDescription('The host name to mac address table entry indexed by wwpLeosPbtBridgeNameMacMapIndex.')
wwpLeosPbtBridgeNameMacMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPbtBridgeNameMacMapIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtBridgeNameMacMapIndex.setDescription('This represents the unique index in the table.')
wwpLeosPbtBridgeNameMacMapBridgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPbtBridgeNameMacMapBridgeName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtBridgeNameMacMapBridgeName.setDescription('This represents the host name of the provider edge device. This object is not allowed to be modified.')
wwpLeosPbtBridgeNameMacMapMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 2, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPbtBridgeNameMacMapMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtBridgeNameMacMapMacAddr.setDescription('This represents the mac address of the provider edge device. This object is not allowed to be modified.')
wwpLeosPbtBridgeNameMacMapUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPbtBridgeNameMacMapUseCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtBridgeNameMacMapUseCount.setDescription('This object specifies the total number of encap tunnels using this entry.')
wwpLeosPbtBridgeNameMacMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPbtBridgeNameMacMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtBridgeNameMacMapRowStatus.setDescription("Setting this object to 'createAndGo' will create the entry in the table. Setting this object to 'destroy' will delete the entry from the table.")
wwpLeosPbtReservedBVIDTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 3), )
if mibBuilder.loadTexts: wwpLeosPbtReservedBVIDTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtReservedBVIDTable.setDescription('The (conceptual) table listing the BVID vlans reserved for provider backbone bridge tunnels.')
wwpLeosPbtReservedBVIDEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 3, 1), ).setIndexNames((0, "WWP-LEOS-PBT-MIB", "wwpLeosPbtReservedBVID"))
if mibBuilder.loadTexts: wwpLeosPbtReservedBVIDEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtReservedBVIDEntry.setDescription('The entry to reserve BVID vlans vlans for provider backbone bridge tunnels.')
wwpLeosPbtReservedBVID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPbtReservedBVID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtReservedBVID.setDescription('This object is used to specify the VLAN ID to be reserved for PBT tunnels. ')
wwpLeosPbtReservedBVIDRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 3, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPbtReservedBVIDRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtReservedBVIDRowStatus.setDescription("Setting this object to 'createandgo' will reserve the BVID VLAN for provider backbone bridge tunnels. Setting this object to 'destroy will no longer have BVID VLAN reserved for the virtual switch.")
wwpLeosPbtVirtualCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 4), )
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitTable.setDescription('The (conceptual) table listing the virtual circuit mac in mac table. To create entry use SNMP multiple set operation because following mib objects needs to be set when creating entry in the table. - wwpLeosPbtVirtualCircuitName must be specified. - wwpLeosPbtVirtualCircuitIngressISID must be specified. - wwpLeosPbtVirtualCircuitEgressISID must be specified. - wwpLeosPbtVirtualCircuitRowStatus must be specified. - wwpLeosPbtVirtualCircuitIngressISID & wwpLeosPbtVirtualCircuitEgressISID must be the same values.')
wwpLeosPbtVirtualCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 4, 1), ).setIndexNames((0, "WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitIndex"))
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitEntry.setDescription('The virtual circuit table entry index by wwpLeosPbtVirtualCircuitIndex.')
wwpLeosPbtVirtualCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitIndex.setDescription('This represents the virtual circuit mac in mac index in the table. This number should be unique in the table.')
wwpLeosPbtVirtualCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitName.setDescription('This represents the name of the mac in mac virtual circuit.')
wwpLeosPbtVirtualCircuitFixedEncapTunnelId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 4, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitFixedEncapTunnelId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitFixedEncapTunnelId.setDescription('This represents the fixed tunnel this virtual circuit should be mapped to.')
wwpLeosPbtVirtualCircuitDestBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitDestBridgeIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitDestBridgeIndex.setDescription('This represents the provider destination host name used for this tunnel. This must be set to one of the value specified by wwpLeosPbtBridgeNameMacMapIndex. if set to 0, device will interpret it as not specified.')
wwpLeosPbtVirtualCircuitIngressISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitIngressISID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitIngressISID.setDescription('This represents the ingress ISID associated with the virtual circuit.')
wwpLeosPbtVirtualCircuitEgressISID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16777215))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitEgressISID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitEgressISID.setDescription('This represents the egress ISID associated with the virtual circuit.')
wwpLeosPbtVirtualCircuitOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitOperState.setDescription('This represents the operational state of this virtual circuit.')
wwpLeosPbtVirtualCircuitEncapTunnelIdInUse = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitEncapTunnelIdInUse.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitEncapTunnelIdInUse.setDescription('This represents the tunnels ID of the active tunnel this virtual circuit is currently using. This tunnel can be primary of backup tunnel.')
wwpLeosPbtVirtualCircuitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 4, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, a manager must set this object to 'destroy' If the entry exists, it will be displayed as 'active'.")
wwpLeosPbtVirtualCircuitRetainSTAG = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 4, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitRetainSTAG.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitRetainSTAG.setDescription('When operating in PBT mode, writing TRUE(1) to this object forces this vc to retain the S-Tag. When FALSE(0) is written, the S-Tag will be popped on egress and push the tag on ingress.')
wwpLeosPbtVirtualCircuitStag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 4, 1, 11), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitStag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitStag.setDescription('When operating in PBT mode, this is the value of the s-tag that will be used if retain-stag is set to TRUE. This is configurable only in native mode PBT. In non-native mode, this value defaults to the RVID and cannot be changed.')
wwpLeosPbtVirtualCircuitStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 5), )
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitStatsTable.setDescription('The (conceptual) table listing the mpls virtual circuit stats table.')
wwpLeosPbtVirtualCircuitStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitIndex"))
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitStatsEntry.setDescription('The mpls virtual circuit stats table entry index by wwpLeosPbtVirtualCircuitMplsIndex.')
wwpLeosPbtVirtualCircuitTxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 5, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitTxBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitTxBytesHi.setDescription('This represents the total number of higher 32 bits transmitted for given virtual circuit.')
wwpLeosPbtVirtualCircuitTxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 5, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitTxBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitTxBytesLo.setDescription('This represents the total number of lower 32 bits transmitted for given virtual circuit.')
wwpLeosPbtVirtualCircuitRxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitRxBytesHi.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitRxBytesHi.setDescription('This represents the total number of higher 32 bits received for given mpls virtual circuit.')
wwpLeosPbtVirtualCircuitRxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 5, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitRxBytesLo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtVirtualCircuitRxBytesLo.setDescription('This represents the total number of lower 32 bits received for given virtual circuit.')
wwpLeosPbtLocalBridgeNameMacMapTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 6), )
if mibBuilder.loadTexts: wwpLeosPbtLocalBridgeNameMacMapTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtLocalBridgeNameMacMapTable.setDescription('The (conceptual) table listing the host names to mac mapping table. To create entry in this table use SNMP multiple set operation. - wwpLeosPbtHostNameMacMapHostName must be specified. - wwpLeosPbtHostNameMacMapMacAddr must be specified. - wwpLeosPbtHostNameMacMapRowStatus must be specified. ')
wwpLeosPbtLocalBridgeNameMacMapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 6, 1), ).setIndexNames((0, "WWP-LEOS-PBT-MIB", "wwpLeosPbtLocalBridgeNameMacMapIndex"))
if mibBuilder.loadTexts: wwpLeosPbtLocalBridgeNameMacMapEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtLocalBridgeNameMacMapEntry.setDescription('The host name to mac address table entry indexed by wwpLeosPbtLocalBridgeNameMacMapIndex.')
wwpLeosPbtLocalBridgeNameMacMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPbtLocalBridgeNameMacMapIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtLocalBridgeNameMacMapIndex.setDescription('This represents the unique index in the table.')
wwpLeosPbtLocalBridgeNameMacMapBridgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPbtLocalBridgeNameMacMapBridgeName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtLocalBridgeNameMacMapBridgeName.setDescription('This represents the host name of the provider edge device. This object is not allowed to be modified.')
wwpLeosPbtLocalBridgeNameMacMapMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 6, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPbtLocalBridgeNameMacMapMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtLocalBridgeNameMacMapMacAddr.setDescription('This represents the mac address of the provider edge device. This object is not allowed to be modified.')
wwpLeosPbtLocalBridgeNameMacMapUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 6, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPbtLocalBridgeNameMacMapUseCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtLocalBridgeNameMacMapUseCount.setDescription('This object specifies the total number of encap tunnels using this entry.')
wwpLeosPbtLocalBridgeNameMacMapRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 6, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPbtLocalBridgeNameMacMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtLocalBridgeNameMacMapRowStatus.setDescription("Setting this object to 'createAndGo' will create the entry in the table. Setting this object to 'destroy' will delete the entry from the table.")
wwpLeosTcePbt = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10))
wwpLeosTcePbtServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1), )
if mibBuilder.loadTexts: wwpLeosTcePbtServiceTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceTable.setDescription('The (conceptual) table listing the Pbt Service table. To create entry in this table use SNMP multiple set operation. - wwpLeosTcePbtServiceName must be specified. - wwpLeosTcePbtServiceIngressIsId must be specified. - wwpLeosTcePbtServiceEgressIsId must be specified. - wwpLeosTcePbtServiceRowStatus must be specified. ')
wwpLeosTcePbtServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1), ).setIndexNames((0, "WWP-LEOS-PBT-MIB", "wwpLeosTcePbtServiceIndex"))
if mibBuilder.loadTexts: wwpLeosTcePbtServiceEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceEntry.setDescription('The Pbt Service table entry indexed by wwpLeosTcePbtServiceIndex.')
wwpLeosTcePbtServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wwpLeosTcePbtServiceIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceIndex.setDescription('This represents the unique index in the table.')
wwpLeosTcePbtServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceName.setDescription('This represents the Pbt service name. This object is not allowed to be modified.')
wwpLeosTcePbtServiceOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceOperStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceOperStatus.setDescription('This represents the operational state of this service.')
wwpLeosTcePbtServiceFloodContProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceFloodContProfileId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceFloodContProfileId.setDescription('Pbt Service Ingress Flood Container Profile Index')
wwpLeosTcePbtServiceFloodContProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceFloodContProfileName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceFloodContProfileName.setDescription('Pbt Service Ingress Flood Container Profile Name')
wwpLeosTcePbtServiceVsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 6), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceVsIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceVsIndex.setDescription('Vs Index to which Pbt service is attached. To detach Pbt Service with the VS, set this object to 0.')
wwpLeosTcePbtServiceVsName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceVsName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceVsName.setDescription('Virtual Switch Name to which Pbt Service is attached.')
wwpLeosTcePbtServiceTnlGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceTnlGroupIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceTnlGroupIndex.setDescription('Pbt Service Tunnel Group Index')
wwpLeosTcePbtServiceTnlGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceTnlGroupName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceTnlGroupName.setDescription('Pbt Service Tunnel Group Name')
wwpLeosTcePbtServiceIngressIsId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 10), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceIngressIsId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceIngressIsId.setDescription('Pbt Service Ingress Isid')
wwpLeosTcePbtServiceEgressIsId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 11), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceEgressIsId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceEgressIsId.setDescription('Pbt Service Egress-Isid')
wwpLeosTcePbtServiceFixedEgressPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(2)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceFixedEgressPcp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceFixedEgressPcp.setDescription('Pbt Service Fixed Egress Pcp')
wwpLeosTcePbtServiceFrameCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("isidPcPMap", 2))).clone('isidPcPMap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceFrameCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceFrameCosPolicy.setDescription('Pbt Service Frame Cos Policy')
wwpLeosTcePbtServiceFrameCosMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceFrameCosMapIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceFrameCosMapIndex.setDescription('Pbt Service Frame Cos Map Index')
wwpLeosTcePbtServiceFrameCosMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceFrameCosMapName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceFrameCosMapName.setDescription('Pbt Service Frame Cos Map Name')
wwpLeosTcePbtServiceResolvedCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("fixed", 2), ("isidPcpMap", 3))).clone('isidPcpMap')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceResolvedCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceResolvedCosPolicy.setDescription('Pbt Service Resolved Cos Policy')
wwpLeosTcePbtServiceResolvedCosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceResolvedCosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceResolvedCosProfileIndex.setDescription('Pbt Service Resolved Cos Profile Index')
wwpLeosTcePbtServiceResolvedCosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceResolvedCosProfileName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceResolvedCosProfileName.setDescription('Pbt Service Resolved Cos Profile Name')
wwpLeosTcePbtServiceIngressMeterProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceIngressMeterProfileId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceIngressMeterProfileId.setDescription('Ingress Meter Profile Id')
wwpLeosTcePbtServiceIngressMeterProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceIngressMeterProfileName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceIngressMeterProfileName.setDescription('Ingress Meter Profile Name')
wwpLeosTcePbtServiceIngressMeterPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nonhierarchical", 1), ("hierarchical", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceIngressMeterPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceIngressMeterPolicy.setDescription('Ingress Meter Policy')
wwpLeosTcePbtServiceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 1, 1, 64), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceRowStatus.setDescription("Setting this object to 'createAndGo' will create the entry in the table. Setting this object to 'destroy' will delete the entry from the table.")
wwpLeosTcePbtTnlGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 5), )
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupTable.setDescription('The (conceptual) table listing the Pbt tunnel group table. To create entry in this table use SNMP multiple set operation. - wwpLeosTcePbtTnlGroupName must be specified. - wwpLeosTcePbtTnlGroupRowStatus must be specified. ')
wwpLeosTcePbtTnlGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 5, 1), ).setIndexNames((0, "WWP-LEOS-PBT-MIB", "wwpLeosTcePbtTnlGroupIndex"))
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupEntry.setDescription('This represents an entry of the Pbt tunnel group table.')
wwpLeosTcePbtTnlGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 5, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupIndex.setDescription('This represents the unique index in the table.')
wwpLeosTcePbtTnlGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupName.setDescription('This represents the tunnel group name. This object is not allowed to be modified.')
wwpLeosTcePbtTnlGroupSyncEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 5, 1, 3), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupSyncEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupSyncEnabled.setDescription('TBD - .')
wwpLeosTcePbtTnlGroupOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupOperStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupOperStatus.setDescription('This represents the operational state of this service.')
wwpLeosTcePbtTnlGroupUseCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 5, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupUseCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupUseCount.setDescription('TBD ')
wwpLeosTcePbtTnlGroupActivePair = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupActivePair.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupActivePair.setDescription('An active PBT tunnel pair is two bidirectional tunnels, one inbound and the other outbound, between the same pair of devices paired together to represent a bidirectional PBT trunk. An inbound and an outbound tunnel must map to the same physical port of the device to qualify for the pairing. ')
wwpLeosTcePbtTnlGroupReverting = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 5, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupReverting.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupReverting.setDescription(' ')
wwpLeosTcePbtTnlGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 5, 1, 64), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtTnlGroupRowStatus.setDescription("Setting this object to 'createAndGo' will create the entry in the table. Setting this object to 'destroy' will delete the entry from the table.")
wwpLeosTcePbtEncapTnlTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6), )
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlTable.setDescription('The (conceptual) table listing the PBT encap tunnels. To create entry in this table use SNMP multiple set operation. - wwpLeosTcePbtEncapTnlName must be specified. - wwpLeosTcePbtEncapTnlRemoteBridgeIndex must be specified. - wwpLeosTcePbtEncapTnlBvId must be specified. - wwpLeosTcePbtEncapTnlPgId must be specified. - wwpLeosTcePbtEncapTnlRowStatus must be specified. ')
wwpLeosTcePbtEncapTnlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1), ).setIndexNames((0, "WWP-LEOS-PBT-MIB", "wwpLeosTcePbtEncapTnlIndex"))
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlEntry.setDescription(' ')
wwpLeosTcePbtEncapTnlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlIndex.setDescription('This represents the unique index in the table.')
wwpLeosTcePbtEncapTnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlName.setDescription('This represents the encap tunnel name. This object is not allowed to be modified.')
wwpLeosTcePbtEncapTnlRemoteBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlRemoteBridgeIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlRemoteBridgeIndex.setDescription(' ')
wwpLeosTcePbtEncapTnlRemoteBridgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlRemoteBridgeName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlRemoteBridgeName.setDescription(' ')
wwpLeosTcePbtEncapTnlGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlGroupIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlGroupIndex.setDescription(' ')
wwpLeosTcePbtEncapTnlGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlGroupName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlGroupName.setDescription(' ')
wwpLeosTcePbtEncapTnlBvId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlBvId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlBvId.setDescription(' ')
wwpLeosTcePbtEncapTnlPgId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlPgId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlPgId.setDescription(' ')
wwpLeosTcePbtEncapTnlPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlPortName.setDescription(' ')
wwpLeosTcePbtEncapTnlFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlFaults.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlFaults.setDescription('Each Bit Represents a fault. Value 0 represents no fault. First LSB represents port Fault. Second LSB represents CFM fault and third LSB represent Admin Fault.')
wwpLeosTcePbtEncapTnlAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlAdminState.setDescription(' ')
wwpLeosTcePbtEncapTnlOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlOperState.setDescription(' ')
wwpLeosTcePbtEncapTnlFwdState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlFwdState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlFwdState.setDescription(' ')
wwpLeosTcePbtEncapTnlPaired = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlPaired.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlPaired.setDescription(' ')
wwpLeosTcePbtEncapTnlPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlPairIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlPairIndex.setDescription(' ')
wwpLeosTcePbtEncapTnlPairOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlPairOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlPairOperState.setDescription(' ')
wwpLeosTcePbtEncapTnlFrameCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fixed", 1), ("isidPcPMap", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlFrameCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlFrameCosPolicy.setDescription(' ')
wwpLeosTcePbtEncapTnlFrameCosMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 18), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlFrameCosMapIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlFrameCosMapIndex.setDescription(' ')
wwpLeosTcePbtEncapTnlFrameCosMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlFrameCosMapName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlFrameCosMapName.setDescription(' ')
wwpLeosTcePbtEncapTnlFixedPcp = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlFixedPcp.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlFixedPcp.setDescription(' ')
wwpLeosTcePbtEncapTnlCfmConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 21), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlCfmConfigured.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlCfmConfigured.setDescription(' ')
wwpLeosTcePbtEncapTnlPairedDecapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 22), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlPairedDecapIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlPairedDecapIndex.setDescription(' ')
wwpLeosTcePbtEncapTnlPairedDecapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlPairedDecapName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlPairedDecapName.setDescription(' ')
wwpLeosTcePbtEncapTnlWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 24), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlWeight.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlWeight.setDescription(' ')
wwpLeosTcePbtEncapTnlStatsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlStatsEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlStatsEnabled.setDescription(' ')
wwpLeosTcePbtEncapTnlLocalBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 26), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlLocalBridgeIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlLocalBridgeIndex.setDescription(' ')
wwpLeosTcePbtEncapTnlLocalBridgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlLocalBridgeName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlLocalBridgeName.setDescription(' ')
wwpLeosTcePbtEncapTnlReversionToPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 28), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlReversionToPairIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlReversionToPairIndex.setDescription('Reversion occurs to this tunnel pair index in a tunnel group and is used in the definition of trap..')
wwpLeosTcePbtEncapTnlReversionFromPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 29), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlReversionFromPairIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlReversionFromPairIndex.setDescription('Reversion occurs from this tunnel pair index in a tunnel group and is used in the definition of trap.')
wwpLeosTcePbtEncapTnlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 6, 1, 64), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtEncapTnlRowStatus.setDescription("Setting this object to 'createAndGo' will create the entry in the table. Setting this object to 'destroy' will delete the entry from the table.")
wwpLeosTcePbtDecapTnlTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7), )
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlTable.setDescription('The (conceptual) table listing the PBT decap tunnels. To create entry in this table use SNMP multiple set operation. - wwpLeosTcePbtDecapTnlName must be specified. - wwpLeosTcePbtDecapTnlBvId must be specified. - wwpLeosTcePbtDecapTnlPgId must be specified. - wwpLeosTcePbtDecapTnlRowStatus must be specified. ')
wwpLeosTcePbtDecapTnlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1), ).setIndexNames((0, "WWP-LEOS-PBT-MIB", "wwpLeosTcePbtDecapTnlIndex"))
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlEntry.setDescription(' ')
wwpLeosTcePbtDecapTnlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlIndex.setDescription('This represents the unique index in the table.')
wwpLeosTcePbtDecapTnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlName.setDescription('This represents the decap tunnel name. This object is not allowed to be modified.')
wwpLeosTcePbtDecapTnlRemoteBridgeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 3), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlRemoteBridgeIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlRemoteBridgeIndex.setDescription(' ')
wwpLeosTcePbtDecapTnlRemoteBridgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlRemoteBridgeName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlRemoteBridgeName.setDescription(' ')
wwpLeosTcePbtDecapTnlGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 5), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlGroupIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlGroupIndex.setDescription(' ')
wwpLeosTcePbtDecapTnlGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlGroupName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlGroupName.setDescription(' ')
wwpLeosTcePbtDecapTnlBvId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 7), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlBvId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlBvId.setDescription(' not allow to modify ')
wwpLeosTcePbtDecapTnlPgId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 8), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlPgId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlPgId.setDescription(' not allow to modify ')
wwpLeosTcePbtDecapTnlPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlPortName.setDescription(' ')
wwpLeosTcePbtDecapTnlFaults = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlFaults.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlFaults.setDescription('Each Bit Represents a fault. Value 0 represents no fault. First LSB represents port Fault. Second LSB represents CFM fault and value 3 represents port and CFM fault.')
wwpLeosTcePbtDecapTnlOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlOperState.setDescription(' ')
wwpLeosTcePbtDecapTnlFwdState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("active", 1), ("standby", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlFwdState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlFwdState.setDescription(' ')
wwpLeosTcePbtDecapTnlPaired = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlPaired.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlPaired.setDescription(' ')
wwpLeosTcePbtDecapTnlPairIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlPairIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlPairIndex.setDescription(' ')
wwpLeosTcePbtDecapTnlPairOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlPairOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlPairOperState.setDescription(' ')
wwpLeosTcePbtDecapTnlResolvedCosPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ignore", 1), ("fixed", 2), ("isidPcpMap", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlResolvedCosPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlResolvedCosPolicy.setDescription(' ')
wwpLeosTcePbtDecapTnlResolvedCosMapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 17), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlResolvedCosMapIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlResolvedCosMapIndex.setDescription(' ')
wwpLeosTcePbtDecapTnlResolvedCosMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlResolvedCosMapName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlResolvedCosMapName.setDescription(' ')
wwpLeosTcePbtDecapTnlCfmConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 19), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlCfmConfigured.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlCfmConfigured.setDescription(' ')
wwpLeosTcePbtDecapTnlPairedEncapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlPairedEncapIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlPairedEncapIndex.setDescription(' ')
wwpLeosTcePbtDecapTnlPairedEncapName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlPairedEncapName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlPairedEncapName.setDescription(' ')
wwpLeosTcePbtDecapTnlStatsEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 22), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlStatsEnabled.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlStatsEnabled.setDescription(' ')
wwpLeosTcePbtDecapTnlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 7, 1, 64), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtDecapTnlRowStatus.setDescription("Setting this object to 'createAndGo' will create the entry in the table. Setting this object to 'destroy' will delete the entry from the table.")
wwpLeosTcePbtServiceUserFrameL2TransformTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 8), )
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformTable.setDescription('Table of pbt service user frame L2 Transform table. Two entries in this table are automatically created when a pbt service is created (one for ingress and one for egress). The entries are deleted from this table when the corresponding pbt service is deleted. Therefore, there is no rowStatus field exposed in this mib-table entry.')
wwpLeosTcePbtServiceUserFrameL2TransformEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 8, 1), ).setIndexNames((0, "WWP-LEOS-PBT-MIB", "wwpLeosTcePbtServiceIndex"), (0, "WWP-LEOS-PBT-MIB", "wwpLeosTcePbtServiceUserFrameL2TransformDirection"), (0, "WWP-LEOS-PBT-MIB", "wwpLeosTcePbtServiceUserFrameL2TransformTagIndex"))
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformEntry.setDescription('Logical Interface entry in the Logical Interfaces Table.')
wwpLeosTcePbtServiceUserFrameL2TransformDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2))))
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformDirection.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformDirection.setDescription('This object specifies pbt service L2 Transform direction of either ingress or egress.')
wwpLeosTcePbtServiceUserFrameL2TransformTagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformTagIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformTagIndex.setDescription('This object specifies pbt service user frame L2 Transform direction entry index. Initial deployment supports a single tag transform. As such, tag index 2 will always have tag action of none(1). ')
wwpLeosTcePbtServiceUserFrameL2TransformTagAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("push", 2), ("pop", 3), ("stamp1", 4), ("stamp2", 5))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformTagAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformTagAction.setDescription('This object specifies pbt service L2 Transform Action Type. Initial deployment supports egress/encap actions including none(1) and push(2). Initial deployment supports ingress/decap actions including none(1) and pop(3).')
wwpLeosTcePbtServiceUserFrameL2TransformTagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformTagValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformTagValue.setDescription('This object specifies pbt service L2 Transform tag value.')
wwpLeosTcePbtServiceUserFrameL2TransformTagEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65534))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformTagEtype.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformTagEtype.setDescription('This object specifies the L2 transform Etype. The Etype must be specified for a push action. The Etype MAY be specified for a stamp action.')
wwpLeosTcePbtServiceUserFrameL2TransformTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformTagPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformTagPriority.setDescription('This object specifies the L2 transform tag static or fixed priority. Use of this value depends on the L2 transform action, e.g., push or stamp, as well as the priority policy.')
wwpLeosTcePbtServiceUserFrameL2TransformPriPolicy = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 8, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("leave", 1), ("static", 2), ("mapped", 3))).clone('leave')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformPriPolicy.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformPriPolicy.setDescription('This object specifies L2 Transform for the L2 tag priority.')
wwpLeosTcePbtServiceUserFrameL2TransformUseTagValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 8, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformUseTagValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformUseTagValue.setDescription('This object specifies to use the tag value when stamping. If the action is to push, the tag value will always be used.')
wwpLeosTcePbtServiceUserFrameL2TransformUseTagEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 1, 1, 10, 8, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformUseTagEtype.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtServiceUserFrameL2TransformUseTagEtype.setDescription('This object specifies to use the tag etype when stamping. If the action is to push, the tag etype will always be used.')
wwpLeosPbtTunnelFaultNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 2, 0, 1)).setObjects(("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelId"))
if mibBuilder.loadTexts: wwpLeosPbtTunnelFaultNotification.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosPbtTunnelFaultNotification.setDescription('This notification is sent every time the tunnel becomes operationally down.')
wwpLeosPbtTunnelReversionNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 2, 0, 2)).setObjects(("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelId"), ("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelName"))
if mibBuilder.loadTexts: wwpLeosPbtTunnelReversionNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtTunnelReversionNotification.setDescription('This notification is sent every time backup tunnel reverts back to primary tunnel, once primary tunnel comes up. Var binding wwpLeosVplsEncapTunnelId represents the primary tunnel ID.')
wwpLeosPbtTunnelActivateNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 2, 0, 3)).setObjects(("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelId"), ("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelName"), ("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelId"), ("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelName"), ("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelActive"), ("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelBVID"))
if mibBuilder.loadTexts: wwpLeosPbtTunnelActivateNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtTunnelActivateNotification.setDescription('This notification is sent every time tunnel is activated. Var binding wwpLeosVplsEncapTunnelId represents the tunnel ID.')
wwpLeosPbtTunnelDeactivateNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 2, 0, 4)).setObjects(("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelId"), ("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelName"), ("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelId"), ("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelName"), ("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelActive"), ("WWP-LEOS-VPLS-MIB", "wwpLeosVplsEncapTunnelBVID"))
if mibBuilder.loadTexts: wwpLeosPbtTunnelDeactivateNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosPbtTunnelDeactivateNotification.setDescription('This notification is sent every time tunnel is de-activated. Var binding wwpLeosVplsEncapTunnelId represents the tunnel ID.')
wwpLeosTcePbtTunnelActivateNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 2, 0, 10)).setObjects(("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtEncapTnlIndex"), ("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtEncapTnlName"), ("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtTnlGroupIndex"), ("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtTnlGroupName"), ("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtEncapTnlFwdState"))
if mibBuilder.loadTexts: wwpLeosTcePbtTunnelActivateNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtTunnelActivateNotification.setDescription('This notification is sent everytime tunnel of the given tunnel group is activated.')
wwpLeosTcePbtTunnelDeactivateNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 2, 0, 11)).setObjects(("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtEncapTnlIndex"), ("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtEncapTnlName"), ("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtTnlGroupIndex"), ("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtTnlGroupName"), ("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtEncapTnlFwdState"))
if mibBuilder.loadTexts: wwpLeosTcePbtTunnelDeactivateNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtTunnelDeactivateNotification.setDescription('This notification is sent everytime tunnel of the given tunnel group is deactivated.')
wwpLeosTcePbtTunnelReversionNotification = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 2, 0, 12)).setObjects(("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtTnlGroupIndex"), ("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtTnlGroupName"), ("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtEncapTnlReversionToPairIndex"), ("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtEncapTnlReversionFromPairIndex"))
if mibBuilder.loadTexts: wwpLeosTcePbtTunnelReversionNotification.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTcePbtTunnelReversionNotification.setDescription('Upon the failure of the primary tunnel, traffic is moved over to the backup tunnel at the tunnel ingress. Tunnel reversion signifies the restoration of traffic from this backup tunnel (now active) to the primary (now standby) after the primary tunnel is restored. This notification is generated when this reversion occurs.')
pbtGlobalConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 3, 2, 1)).setObjects(("WWP-LEOS-PBT-MIB", "wwpLeosPbtBridgeMac"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtServiceTagEType"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtTunnelTagEtype"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtTunnelReversionState"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtTunnelReversionHoldTime"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtAdminMode"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtOperMode"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtServiceVlanTpid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbtGlobalConfigGroup = pbtGlobalConfigGroup.setStatus('current')
if mibBuilder.loadTexts: pbtGlobalConfigGroup.setDescription('A collection of objects providing information applicable global PBT confoguration.')
pbtBridgeNameMacMapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 3, 2, 2)).setObjects(("WWP-LEOS-PBT-MIB", "wwpLeosPbtBridgeNameMacMapIndex"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtBridgeNameMacMapBridgeName"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtBridgeNameMacMapMacAddr"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtBridgeNameMacMapUseCount"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtBridgeNameMacMapRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbtBridgeNameMacMapGroup = pbtBridgeNameMacMapGroup.setStatus('current')
if mibBuilder.loadTexts: pbtBridgeNameMacMapGroup.setDescription('A collection of objects providing information applicable to BridgeName to mac mapping.')
pbtReserveBvidGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 3, 2, 3)).setObjects(("WWP-LEOS-PBT-MIB", "wwpLeosPbtReservedBVID"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtReservedBVIDRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbtReserveBvidGroup = pbtReserveBvidGroup.setStatus('current')
if mibBuilder.loadTexts: pbtReserveBvidGroup.setDescription('A collection of objects providing information applicable to BVID reservation.')
pbtVirtualCircuitGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 3, 2, 4)).setObjects(("WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitIndex"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitName"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitFixedEncapTunnelId"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitDestBridgeIndex"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitIngressISID"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitEgressISID"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitOperState"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitEncapTunnelIdInUse"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbtVirtualCircuitGroup = pbtVirtualCircuitGroup.setStatus('current')
if mibBuilder.loadTexts: pbtVirtualCircuitGroup.setDescription('A collection of objects providing information applicable to PBT virtual circuit configuration.')
pbtVirtualCircuitStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 3, 2, 5)).setObjects(("WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitTxBytesHi"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitTxBytesLo"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitRxBytesHi"), ("WWP-LEOS-PBT-MIB", "wwpLeosPbtVirtualCircuitRxBytesLo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbtVirtualCircuitStatsGroup = pbtVirtualCircuitStatsGroup.setStatus('current')
if mibBuilder.loadTexts: pbtVirtualCircuitStatsGroup.setDescription('A collection of objects providing information applicable to virtual circuit stats group.')
pbtNotificationGroups = NotificationGroup((1, 3, 6, 1, 4, 1, 6141, 2, 60, 38, 3, 2, 6)).setObjects(("WWP-LEOS-PBT-MIB", "wwpLeosPbtTunnelFaultNotification"), ("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtTunnelActivateNotification"), ("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtTunnelDeactivateNotification"), ("WWP-LEOS-PBT-MIB", "wwpLeosTcePbtTunnelReversionNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pbtNotificationGroups = pbtNotificationGroups.setStatus('current')
if mibBuilder.loadTexts: pbtNotificationGroups.setDescription('Contains Notification supported for PBT.')
mibBuilder.exportSymbols("WWP-LEOS-PBT-MIB", wwpLeosTcePbtServiceIndex=wwpLeosTcePbtServiceIndex, wwpLeosTcePbtEncapTnlWeight=wwpLeosTcePbtEncapTnlWeight, wwpLeosTcePbtServiceUserFrameL2TransformPriPolicy=wwpLeosTcePbtServiceUserFrameL2TransformPriPolicy, wwpLeosTcePbtServiceIngressMeterPolicy=wwpLeosTcePbtServiceIngressMeterPolicy, wwpLeosTcePbtServiceFloodContProfileId=wwpLeosTcePbtServiceFloodContProfileId, wwpLeosTcePbtDecapTnlPaired=wwpLeosTcePbtDecapTnlPaired, wwpLeosPbtTunnelReversionHoldTime=wwpLeosPbtTunnelReversionHoldTime, wwpLeosTcePbtServiceRowStatus=wwpLeosTcePbtServiceRowStatus, wwpLeosPbtBridgeNameMacMapRowStatus=wwpLeosPbtBridgeNameMacMapRowStatus, wwpLeosTcePbtEncapTnlPortName=wwpLeosTcePbtEncapTnlPortName, wwpLeosPbtVirtualCircuitStatsTable=wwpLeosPbtVirtualCircuitStatsTable, wwpLeosTcePbtEncapTnlPairedDecapIndex=wwpLeosTcePbtEncapTnlPairedDecapIndex, wwpLeosTcePbtTnlGroupOperStatus=wwpLeosTcePbtTnlGroupOperStatus, wwpLeosTcePbtServiceIngressMeterProfileId=wwpLeosTcePbtServiceIngressMeterProfileId, wwpLeosTcePbtEncapTnlTable=wwpLeosTcePbtEncapTnlTable, wwpLeosPbtReservedBVIDRowStatus=wwpLeosPbtReservedBVIDRowStatus, wwpLeosPbtLocalBridgeNameMacMapIndex=wwpLeosPbtLocalBridgeNameMacMapIndex, wwpLeosTcePbtServiceVsName=wwpLeosTcePbtServiceVsName, wwpLeosPbtLocalBridgeNameMacMapMacAddr=wwpLeosPbtLocalBridgeNameMacMapMacAddr, wwpLeosTcePbtEncapTnlRowStatus=wwpLeosTcePbtEncapTnlRowStatus, wwpLeosTcePbtEncapTnlEntry=wwpLeosTcePbtEncapTnlEntry, wwpLeosTcePbtTunnelActivateNotification=wwpLeosTcePbtTunnelActivateNotification, wwpLeosTcePbtDecapTnlTable=wwpLeosTcePbtDecapTnlTable, wwpLeosPbtMIB=wwpLeosPbtMIB, wwpLeosTcePbtServiceUserFrameL2TransformTagAction=wwpLeosTcePbtServiceUserFrameL2TransformTagAction, wwpLeosTcePbtTnlGroupEntry=wwpLeosTcePbtTnlGroupEntry, wwpLeosPbtBridgeMac=wwpLeosPbtBridgeMac, wwpLeosTcePbtDecapTnlResolvedCosMapIndex=wwpLeosTcePbtDecapTnlResolvedCosMapIndex, pbtNotificationGroups=pbtNotificationGroups, wwpLeosTcePbtEncapTnlFrameCosMapName=wwpLeosTcePbtEncapTnlFrameCosMapName, wwpLeosTcePbtServiceIngressIsId=wwpLeosTcePbtServiceIngressIsId, wwpLeosPbtVirtualCircuitFixedEncapTunnelId=wwpLeosPbtVirtualCircuitFixedEncapTunnelId, wwpLeosPbtLocalBridgeNameMacMapUseCount=wwpLeosPbtLocalBridgeNameMacMapUseCount, wwpLeosTcePbt=wwpLeosTcePbt, wwpLeosTcePbtServiceFrameCosMapIndex=wwpLeosTcePbtServiceFrameCosMapIndex, wwpLeosTcePbtEncapTnlGroupIndex=wwpLeosTcePbtEncapTnlGroupIndex, wwpLeosTcePbtDecapTnlResolvedCosMapName=wwpLeosTcePbtDecapTnlResolvedCosMapName, wwpLeosTcePbtTnlGroupActivePair=wwpLeosTcePbtTnlGroupActivePair, wwpLeosTcePbtEncapTnlReversionFromPairIndex=wwpLeosTcePbtEncapTnlReversionFromPairIndex, wwpLeosPbtBridgeNameMacMapTable=wwpLeosPbtBridgeNameMacMapTable, wwpLeosPbtTunnelDeactivateNotification=wwpLeosPbtTunnelDeactivateNotification, wwpLeosPbtLocalBridgeNameMacMapEntry=wwpLeosPbtLocalBridgeNameMacMapEntry, wwpLeosTcePbtDecapTnlRemoteBridgeName=wwpLeosTcePbtDecapTnlRemoteBridgeName, wwpLeosPbtBridgeNameMacMapMacAddr=wwpLeosPbtBridgeNameMacMapMacAddr, wwpLeosTcePbtEncapTnlPairOperState=wwpLeosTcePbtEncapTnlPairOperState, wwpLeosTcePbtServiceTnlGroupName=wwpLeosTcePbtServiceTnlGroupName, wwpLeosTcePbtEncapTnlPairIndex=wwpLeosTcePbtEncapTnlPairIndex, wwpLeosTcePbtEncapTnlLocalBridgeIndex=wwpLeosTcePbtEncapTnlLocalBridgeIndex, wwpLeosTcePbtTnlGroupRowStatus=wwpLeosTcePbtTnlGroupRowStatus, wwpLeosPbtVirtualCircuitDestBridgeIndex=wwpLeosPbtVirtualCircuitDestBridgeIndex, wwpLeosTcePbtTunnelDeactivateNotification=wwpLeosTcePbtTunnelDeactivateNotification, wwpLeosPbtVirtualCircuitEgressISID=wwpLeosPbtVirtualCircuitEgressISID, wwpLeosTcePbtTnlGroupIndex=wwpLeosTcePbtTnlGroupIndex, wwpLeosTcePbtDecapTnlEntry=wwpLeosTcePbtDecapTnlEntry, wwpLeosPbtBridgeNameMacMapEntry=wwpLeosPbtBridgeNameMacMapEntry, wwpLeosPbtTunnelFaultNotification=wwpLeosPbtTunnelFaultNotification, wwpLeosTcePbtEncapTnlCfmConfigured=wwpLeosTcePbtEncapTnlCfmConfigured, wwpLeosTcePbtServiceUserFrameL2TransformTagValue=wwpLeosTcePbtServiceUserFrameL2TransformTagValue, wwpLeosPbtVirtualCircuitOperState=wwpLeosPbtVirtualCircuitOperState, wwpLeosTcePbtServiceUserFrameL2TransformDirection=wwpLeosTcePbtServiceUserFrameL2TransformDirection, pbtGlobalConfigGroup=pbtGlobalConfigGroup, wwpLeosPbtTunnelTagEtype=wwpLeosPbtTunnelTagEtype, wwpLeosPbtVirtualCircuitName=wwpLeosPbtVirtualCircuitName, wwpLeosTcePbtServiceResolvedCosProfileName=wwpLeosTcePbtServiceResolvedCosProfileName, pbtVirtualCircuitGroup=pbtVirtualCircuitGroup, wwpLeosTcePbtDecapTnlRowStatus=wwpLeosTcePbtDecapTnlRowStatus, wwpLeosTcePbtEncapTnlReversionToPairIndex=wwpLeosTcePbtEncapTnlReversionToPairIndex, wwpLeosTcePbtDecapTnlPgId=wwpLeosTcePbtDecapTnlPgId, wwpLeosTcePbtTnlGroupName=wwpLeosTcePbtTnlGroupName, wwpLeosTcePbtTnlGroupUseCount=wwpLeosTcePbtTnlGroupUseCount, wwpLeosPbtBridgeNameMacMapUseCount=wwpLeosPbtBridgeNameMacMapUseCount, wwpLeosTcePbtDecapTnlFwdState=wwpLeosTcePbtDecapTnlFwdState, wwpLeosPbtReservedBVIDEntry=wwpLeosPbtReservedBVIDEntry, wwpLeosPbtGlobalAttrs=wwpLeosPbtGlobalAttrs, wwpLeosTcePbtEncapTnlGroupName=wwpLeosTcePbtEncapTnlGroupName, wwpLeosTcePbtDecapTnlStatsEnabled=wwpLeosTcePbtDecapTnlStatsEnabled, wwpLeosTcePbtServiceFixedEgressPcp=wwpLeosTcePbtServiceFixedEgressPcp, wwpLeosTcePbtServiceFrameCosPolicy=wwpLeosTcePbtServiceFrameCosPolicy, wwpLeosTcePbtTnlGroupReverting=wwpLeosTcePbtTnlGroupReverting, wwpLeosTcePbtEncapTnlFwdState=wwpLeosTcePbtEncapTnlFwdState, wwpLeosTcePbtServiceName=wwpLeosTcePbtServiceName, wwpLeosTcePbtDecapTnlGroupIndex=wwpLeosTcePbtDecapTnlGroupIndex, pbtVirtualCircuitStatsGroup=pbtVirtualCircuitStatsGroup, wwpLeosTcePbtDecapTnlPortName=wwpLeosTcePbtDecapTnlPortName, wwpLeosPbtMIBNotificationPrefix=wwpLeosPbtMIBNotificationPrefix, wwpLeosTcePbtEncapTnlPgId=wwpLeosTcePbtEncapTnlPgId, wwpLeosTcePbtEncapTnlIndex=wwpLeosTcePbtEncapTnlIndex, wwpLeosTcePbtDecapTnlRemoteBridgeIndex=wwpLeosTcePbtDecapTnlRemoteBridgeIndex, wwpLeosPbtTransitTunnelEtypeRemark=wwpLeosPbtTransitTunnelEtypeRemark, wwpLeosTcePbtDecapTnlPairedEncapIndex=wwpLeosTcePbtDecapTnlPairedEncapIndex, wwpLeosTcePbtServiceResolvedCosProfileIndex=wwpLeosTcePbtServiceResolvedCosProfileIndex, wwpLeosPbtVirtualCircuitRxBytesLo=wwpLeosPbtVirtualCircuitRxBytesLo, wwpLeosTcePbtEncapTnlAdminState=wwpLeosTcePbtEncapTnlAdminState, wwpLeosTcePbtDecapTnlResolvedCosPolicy=wwpLeosTcePbtDecapTnlResolvedCosPolicy, wwpLeosPbtVirtualCircuitTable=wwpLeosPbtVirtualCircuitTable, wwpLeosPbtVirtualCircuitRetainSTAG=wwpLeosPbtVirtualCircuitRetainSTAG, wwpLeosPbtTunnelReversionNotification=wwpLeosPbtTunnelReversionNotification, wwpLeosPbtLocalBridgeNameMacMapRowStatus=wwpLeosPbtLocalBridgeNameMacMapRowStatus, wwpLeosTcePbtServiceVsIndex=wwpLeosTcePbtServiceVsIndex, wwpLeosTcePbtServiceUserFrameL2TransformEntry=wwpLeosTcePbtServiceUserFrameL2TransformEntry, wwpLeosTcePbtTnlGroupTable=wwpLeosTcePbtTnlGroupTable, wwpLeosPbtServiceVlanTpid=wwpLeosPbtServiceVlanTpid, wwpLeosTcePbtServiceTnlGroupIndex=wwpLeosTcePbtServiceTnlGroupIndex, pbtBridgeNameMacMapGroup=pbtBridgeNameMacMapGroup, wwpLeosPbtVirtualCircuitTxBytesLo=wwpLeosPbtVirtualCircuitTxBytesLo, wwpLeosTcePbtServiceTable=wwpLeosTcePbtServiceTable, wwpLeosTcePbtEncapTnlFixedPcp=wwpLeosTcePbtEncapTnlFixedPcp, pbtReserveBvidGroup=pbtReserveBvidGroup, wwpLeosPbtTunnelSwitchOverHoldTime=wwpLeosPbtTunnelSwitchOverHoldTime, wwpLeosPbtTunnelActivateNotification=wwpLeosPbtTunnelActivateNotification, wwpLeosPbtTunnelReversionState=wwpLeosPbtTunnelReversionState, wwpLeosPbtVirtualCircuitIngressISID=wwpLeosPbtVirtualCircuitIngressISID, wwpLeosTcePbtDecapTnlGroupName=wwpLeosTcePbtDecapTnlGroupName, wwpLeosTcePbtServiceEntry=wwpLeosTcePbtServiceEntry, wwpLeosTcePbtEncapTnlName=wwpLeosTcePbtEncapTnlName, wwpLeosTcePbtServiceUserFrameL2TransformTagPriority=wwpLeosTcePbtServiceUserFrameL2TransformTagPriority, wwpLeosPbtMIBObjects=wwpLeosPbtMIBObjects, wwpLeosTcePbtTunnelReversionNotification=wwpLeosTcePbtTunnelReversionNotification, wwpLeosTcePbtServiceFrameCosMapName=wwpLeosTcePbtServiceFrameCosMapName, wwpLeosPbtVirtualCircuitRxBytesHi=wwpLeosPbtVirtualCircuitRxBytesHi, wwpLeosTcePbtEncapTnlRemoteBridgeName=wwpLeosTcePbtEncapTnlRemoteBridgeName, wwpLeosPbtVirtualCircuitRowStatus=wwpLeosPbtVirtualCircuitRowStatus, wwpLeosTcePbtServiceFloodContProfileName=wwpLeosTcePbtServiceFloodContProfileName, wwpLeosPbtMIBGroups=wwpLeosPbtMIBGroups, wwpLeosPbtBridgeNameMacMapBridgeName=wwpLeosPbtBridgeNameMacMapBridgeName, wwpLeosPbtVirtualCircuitTxBytesHi=wwpLeosPbtVirtualCircuitTxBytesHi, wwpLeosTcePbtDecapTnlOperState=wwpLeosTcePbtDecapTnlOperState, wwpLeosPbtMIBNotifications=wwpLeosPbtMIBNotifications, PYSNMP_MODULE_ID=wwpLeosPbtMIB, wwpLeosPbtReservedBVID=wwpLeosPbtReservedBVID, wwpLeosPbtReservedBVIDTable=wwpLeosPbtReservedBVIDTable, wwpLeosTcePbtEncapTnlFaults=wwpLeosTcePbtEncapTnlFaults, wwpLeosTcePbtDecapTnlCfmConfigured=wwpLeosTcePbtDecapTnlCfmConfigured, wwpLeosTcePbtEncapTnlOperState=wwpLeosTcePbtEncapTnlOperState, wwpLeosTcePbtEncapTnlBvId=wwpLeosTcePbtEncapTnlBvId, wwpLeosTcePbtEncapTnlFrameCosMapIndex=wwpLeosTcePbtEncapTnlFrameCosMapIndex, wwpLeosPbtVirtualCircuitIndex=wwpLeosPbtVirtualCircuitIndex, wwpLeosTcePbtEncapTnlFrameCosPolicy=wwpLeosTcePbtEncapTnlFrameCosPolicy, wwpLeosTcePbtServiceUserFrameL2TransformUseTagEtype=wwpLeosTcePbtServiceUserFrameL2TransformUseTagEtype, wwpLeosTcePbtServiceUserFrameL2TransformTagEtype=wwpLeosTcePbtServiceUserFrameL2TransformTagEtype, wwpLeosPbtVirtualCircuitEntry=wwpLeosPbtVirtualCircuitEntry, wwpLeosTcePbtEncapTnlStatsEnabled=wwpLeosTcePbtEncapTnlStatsEnabled, wwpLeosPbtLocalBridgeNameMacMapBridgeName=wwpLeosPbtLocalBridgeNameMacMapBridgeName, wwpLeosPbtVirtualCircuitEncapTunnelIdInUse=wwpLeosPbtVirtualCircuitEncapTunnelIdInUse, wwpLeosTcePbtEncapTnlRemoteBridgeIndex=wwpLeosTcePbtEncapTnlRemoteBridgeIndex, wwpLeosTcePbtEncapTnlLocalBridgeName=wwpLeosTcePbtEncapTnlLocalBridgeName, wwpLeosTcePbtEncapTnlPaired=wwpLeosTcePbtEncapTnlPaired, wwpLeosPbtBridgeNameMacMapIndex=wwpLeosPbtBridgeNameMacMapIndex, wwpLeosPbtVirtualCircuitStatsEntry=wwpLeosPbtVirtualCircuitStatsEntry, wwpLeosTcePbtDecapTnlBvId=wwpLeosTcePbtDecapTnlBvId, wwpLeosTcePbtEncapTnlPairedDecapName=wwpLeosTcePbtEncapTnlPairedDecapName, wwpLeosTcePbtServiceUserFrameL2TransformUseTagValue=wwpLeosTcePbtServiceUserFrameL2TransformUseTagValue, wwpLeosTcePbtServiceOperStatus=wwpLeosTcePbtServiceOperStatus, wwpLeosTcePbtDecapTnlName=wwpLeosTcePbtDecapTnlName, wwpLeosPbtMIBConformance=wwpLeosPbtMIBConformance, wwpLeosTcePbtDecapTnlIndex=wwpLeosTcePbtDecapTnlIndex, wwpLeosPbtVirtualCircuitStag=wwpLeosPbtVirtualCircuitStag, wwpLeosTcePbtDecapTnlPairOperState=wwpLeosTcePbtDecapTnlPairOperState, wwpLeosTcePbtTnlGroupSyncEnabled=wwpLeosTcePbtTnlGroupSyncEnabled, wwpLeosPbtOperMode=wwpLeosPbtOperMode, wwpLeosTcePbtServiceUserFrameL2TransformTable=wwpLeosTcePbtServiceUserFrameL2TransformTable, wwpLeosPbtMIBCompliances=wwpLeosPbtMIBCompliances, wwpLeosTcePbtServiceUserFrameL2TransformTagIndex=wwpLeosTcePbtServiceUserFrameL2TransformTagIndex, wwpLeosTcePbtServiceEgressIsId=wwpLeosTcePbtServiceEgressIsId, wwpLeosPbt=wwpLeosPbt, wwpLeosPbtServiceTagEType=wwpLeosPbtServiceTagEType, wwpLeosTcePbtDecapTnlFaults=wwpLeosTcePbtDecapTnlFaults, wwpLeosTcePbtDecapTnlPairIndex=wwpLeosTcePbtDecapTnlPairIndex, wwpLeosTcePbtDecapTnlPairedEncapName=wwpLeosTcePbtDecapTnlPairedEncapName, wwpLeosPbtAdminMode=wwpLeosPbtAdminMode, wwpLeosPbtLocalBridgeNameMacMapTable=wwpLeosPbtLocalBridgeNameMacMapTable, wwpLeosTcePbtServiceIngressMeterProfileName=wwpLeosTcePbtServiceIngressMeterProfileName, wwpLeosTcePbtServiceResolvedCosPolicy=wwpLeosTcePbtServiceResolvedCosPolicy)
