#
# PySNMP MIB module CISCO-CAC-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CAC-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:52:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
cmgwIndex, cmgwSignalProtocolIndex = mibBuilder.importSymbols("CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex", "cmgwSignalProtocolIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Bits, iso, NotificationType, Unsigned32, Integer32, TimeTicks, Counter64, ModuleIdentity, Gauge32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, IpAddress, Counter32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "NotificationType", "Unsigned32", "Integer32", "TimeTicks", "Counter64", "ModuleIdentity", "Gauge32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "IpAddress", "Counter32", "MibIdentifier")
TextualConvention, TruthValue, TimeInterval, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "TimeInterval", "DisplayString")
ccacSysMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 322))
ccacSysMIB.setRevisions(('2003-04-24 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ccacSysMIB.setRevisionsDescriptions(('Initial version of the MIB.',))
if mibBuilder.loadTexts: ccacSysMIB.setLastUpdated('200304240000Z')
if mibBuilder.loadTexts: ccacSysMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ccacSysMIB.setContactInfo(' Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-voice@cisco.com')
if mibBuilder.loadTexts: ccacSysMIB.setDescription('This MIB module provides provisioning and monitoring Call Admission Control (CAC). ')
class CcacResourceType(TextualConvention, Integer32):
    description = 'This textual convention defines the type of resources which are involved in CAC (Call Admission Control) processing. cpu5Sec(1) - The last 5 seconds utilization of the CPU which is involved in the call processing. cpuAvg(2) - The average utilization of the CPU which is used in the call processing. The average is computed in the following formula over the period configured in ccacSysRpInterval seconds. cpuAvg = exp(- cpu5Sec / ccacSysRpInterval) * (cpuAvg - last cpu5Sec) + last cpu5Sec ioMem(3) - The I/O memory utilization used in the call processing in every ccacSysRpInterval seconds. procMem(4) - The processor memory utilization used in the call processing in every ccacSysRpInterval seconds. totMem(5) - The total memory, (I/O memory + Processor memory) utilization used in the call processing in every ccacSysRpInterval seconds. totCalls(6) - The total active call, based on the incoming call legs. staMem(7) - Static memory utilization used in the call processing. dynMem(8) - Dynamic memory utilization used in the call processing. commBuf(9) - The communication buffers between the processes involved in intercards communication for call processing. msgQueue(10)- The message queues between the processes used for call processing. dspQueue(11)- DSP queues which are shared by all different DSP channels used for call processing. svc(12) - SVCs used in call processing. ds0(13) - DS0 channels used in call processing. dspChannel(14) - DSP channel used in call processing. h248Mem(15) - H248 memory pools used in call processing. Each CAC module can choose the suitable resources for its CAC processing. It can select one or more than one resource types to monitor. It is not required to support all the resource types listed in CcacResourceType. Some resource types can be monitored for the whole system, some can be monitored per media gateway, some can be monitored per protocol, and some can be monitored per interface. It depends on the system implementation. For those resource types are applied to per media gateway should have their entries created in GatewayResTable automatically. For those resource types are applied to per protocol should have their entries created in ccacSysProtocolResTable automatically. For those resource types are applied to per interface should have their entries created automatically in ccacSysInterfaceResTable. '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("cpu5Sec", 1), ("cpuAvg", 2), ("ioMem", 3), ("procMem", 4), ("totMem", 5), ("totCalls", 6), ("staMem", 7), ("dynMem", 8), ("commBuf", 9), ("msgQueue", 10), ("dspQueue", 11), ("svc", 12), ("ds0", 13), ("dspChannel", 14), ("h248Mem", 15))

ccacSysObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 322, 1))
ccacSysConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 1))
ccacSysResPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2))
ccacSysStat = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 3))
ccacSysConfigTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 1, 1), )
if mibBuilder.loadTexts: ccacSysConfigTable.setStatus('current')
if mibBuilder.loadTexts: ccacSysConfigTable.setDescription('This table defines the general attributes of CAC (Call Admission Control) processing. ')
ccacSysConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"))
if mibBuilder.loadTexts: ccacSysConfigEntry.setStatus('current')
if mibBuilder.loadTexts: ccacSysConfigEntry.setDescription('Each entry contains the attributes applied to CAC processing. One entry will be automatically created by the system when it supports CAC processing. ')
ccacSysCacEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 1, 1, 1, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacSysCacEnable.setStatus('current')
if mibBuilder.loadTexts: ccacSysCacEnable.setDescription('This object specifies CAC (Call Admission Control) function is enabled or not.')
ccacSysNotifyEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 1, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacSysNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: ccacSysNotifyEnable.setDescription("This object controls generation of notifications in the MIB. When this object is 'true(1)', generation of notifications in the MIB is enabled. When this variable is 'false(2)', generation of notifications in the MIB is disabled.")
ccacSysTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hairpin", 1), ("reject", 2), ("playMessage", 3))).clone('reject')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacSysTreatment.setStatus('current')
if mibBuilder.loadTexts: ccacSysTreatment.setDescription("The type of call treatment to apply on a new call when a call resource threshold is exceeded. This treatment is applicable if the threshold action (ccacSysRpAction) includes 'treatment(3)' or 'busyoutAndTreatment(4)'. hairpin(1) - Connect the call back to the PSTN via another telephony port. reject(2) - Reject the call, using cause code specified in ccacSysRejectCode playMessage(3) - Reject the call and send the specified audio message. The audio file used for 'playMessage(3)' is specified in ccacSysPlayMessageFile. The 'playMessage(3)' option only applies to Voice over ATM, IP, or FrameRelay calls. For other types of calls, a value of 'playMessage(3)' is equivalent to 'reject(2)'.")
ccacSysRejectCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(44)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacSysRejectCode.setReference('ITU-T Recommendation Q.931, ISDN user-network interface layer 3 specification.')
if mibBuilder.loadTexts: ccacSysRejectCode.setStatus('current')
if mibBuilder.loadTexts: ccacSysRejectCode.setDescription('This object specifies the numeric code to be returned to the call control agent (MGC) when a call is rejected as a result of the call resource thresholds being exceeded. This code is used when the signalling protocol supports call rejection cause codes. This does not apply to channel associated signalling (CAS).')
ccacSysIsdnRejectCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(34, 47))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacSysIsdnRejectCode.setReference('ITU-T Recommendation Q.931, ISDN user-network interface layer 3 specification.')
if mibBuilder.loadTexts: ccacSysIsdnRejectCode.setStatus('current')
if mibBuilder.loadTexts: ccacSysIsdnRejectCode.setDescription("This object is used to reject the calls even when an interface is 'busyout' as the action of call treatment. ")
ccacSysPlayMessageFile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 1, 1, 1, 6), SnmpAdminString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacSysPlayMessageFile.setStatus('current')
if mibBuilder.loadTexts: ccacSysPlayMessageFile.setDescription("The name of the audio file to be played for call rejections if the value of ccacSysTreatment is 'playMessage(3)'. The format of the filename is system specific. If no file is configured, this object contains a zero length string.")
ccacSysSlidingWindowSteps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 10)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacSysSlidingWindowSteps.setStatus('current')
if mibBuilder.loadTexts: ccacSysSlidingWindowSteps.setDescription('This object defines the number of steps used for a sliding window of ccacSysCallSpike. ')
ccacSysSlidingWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 2000)).clone(200)).setUnits('millisecond').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacSysSlidingWindowSize.setStatus('current')
if mibBuilder.loadTexts: ccacSysSlidingWindowSize.setDescription('This object defines the time length for each step in a sliding window of ccacSysCallSpike. ')
ccacSysCallSpike = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('calls').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacSysCallSpike.setStatus('current')
if mibBuilder.loadTexts: ccacSysCallSpike.setDescription("This object is used to define a threshold for incoming call spike. The number of incoming calls is counted within a sliding window which is broken into ccacSysSlidingWindowSteps. Each step has an equally time interval defined in ccacSysSlidingWindowSize. The sliding window size can be calculated from ccacSysSlidingWindowSteps and ccacSysSlidingWindowSize two objects. The 'sliding window' = ccacSysSlidingWindowSteps * ccacSysSlidingWindowSize For example, if ccacSysSlidingWindowSteps is 5 AND ccacSysSlidingWindowSize is 200 (ms), then the 'sliding window' will be 1 second. ccacSysCallSpike sets the maximum number of incoming call in a sliding window. Set this object to value '0' will disable call spike threshold and will reset the value of ccacSysSlidingWindowSteps and ccacSysSlidingWindowSize to default value. The value of this object is '0', it indicates the call spike threshold is disabled.")
ccacSysGatewayResTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 1), )
if mibBuilder.loadTexts: ccacSysGatewayResTable.setStatus('current')
if mibBuilder.loadTexts: ccacSysGatewayResTable.setDescription('This table is a mapping table for the CAC policy with the CAC resources monitored in a media gateway. ')
ccacSysGatewayResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-CAC-SYSTEM-MIB", "ccacSysGwResIndex"))
if mibBuilder.loadTexts: ccacSysGatewayResEntry.setStatus('current')
if mibBuilder.loadTexts: ccacSysGatewayResEntry.setDescription('Each entry represents for the resource type which will be monitored for CAC processing per media gateway. Each entry will be automatically created by the system depending on the availability of the combination of CAC resources and its associated policies.')
ccacSysGwResIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: ccacSysGwResIndex.setStatus('current')
if mibBuilder.loadTexts: ccacSysGwResIndex.setDescription('This object uniquely identifies the CAC resource monitored in the gateway. ')
ccacSysGwResType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 1, 1, 2), CcacResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysGwResType.setStatus('current')
if mibBuilder.loadTexts: ccacSysGwResType.setDescription('The resource type for CAC monitor per media gateway. The value is assigned by the system automatically when the entry is created. ')
ccacSysGwResPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysGwResPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: ccacSysGwResPolicyIndex.setDescription('This object is the index (value of ccacSysRpIndex) to ccacSysResPolicyTable which defines the policies, such as high, medium, low threshold, and action function for CAC. ')
ccacSysProtocolResTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 2), )
if mibBuilder.loadTexts: ccacSysProtocolResTable.setStatus('current')
if mibBuilder.loadTexts: ccacSysProtocolResTable.setDescription('This table is a mapping table for the CAC policy with the CAC resources monitored per protocol supported in a media gateway. ')
ccacSysProtocolResEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwSignalProtocolIndex"), (0, "CISCO-CAC-SYSTEM-MIB", "ccacSysProResIndex"))
if mibBuilder.loadTexts: ccacSysProtocolResEntry.setStatus('current')
if mibBuilder.loadTexts: ccacSysProtocolResEntry.setDescription('Each entry represents for the resource type which will be monitored for CAC processing per protocol. Each entry will be automatically created by the system depending on the CAC resources monitored per protocol. Each system can choose to support the resource types which are required per protocol. ')
ccacSysProResIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 50)))
if mibBuilder.loadTexts: ccacSysProResIndex.setStatus('current')
if mibBuilder.loadTexts: ccacSysProResIndex.setDescription('This object uniquely identifies the CAC resource monitored in the protocol. ')
ccacSysProResType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 2, 1, 2), CcacResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysProResType.setStatus('current')
if mibBuilder.loadTexts: ccacSysProResType.setDescription('The resource type for CAC monitor per protocol. The value is assigned by the system automatically when the entry is created. ')
ccacSysProResPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysProResPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: ccacSysProResPolicyIndex.setDescription('This object is the index (value of ccacSysRpIndex) to ccacSysResPolicyTable which defines the policies, such as high, medium, low threshold, and action function for CAC. ')
ccacSysResPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 3), )
if mibBuilder.loadTexts: ccacSysResPolicyTable.setStatus('current')
if mibBuilder.loadTexts: ccacSysResPolicyTable.setDescription('This table defines the thresholds/policies configuration for a CAC resource involved in CAC processing. ')
ccacSysResPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 3, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-CAC-SYSTEM-MIB", "ccacSysRpIndex"))
if mibBuilder.loadTexts: ccacSysResPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: ccacSysResPolicyEntry.setDescription('Each entry in the table defines High, Medium, Low threshold, and an action for CAC resource. ')
ccacSysRpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000)))
if mibBuilder.loadTexts: ccacSysRpIndex.setStatus('current')
if mibBuilder.loadTexts: ccacSysRpIndex.setDescription('This object uniquely identifies the entry in the table.')
ccacSysRpResType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 3, 1, 2), CcacResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRpResType.setStatus('current')
if mibBuilder.loadTexts: ccacSysRpResType.setDescription('The type of CAC resource used in CAC processing. The value is assigned by the system automatically when the entry is created.')
ccacSysRpUserTunable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 3, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRpUserTunable.setStatus('current')
if mibBuilder.loadTexts: ccacSysRpUserTunable.setDescription("This object indicates the CAC resource is user tunable (can modify its thresholds) or not (Some CAC resources are too complicated for the user to tune, so their thresholds are predefined by the system). The value is assigned by the system automatically according to its resource type when the entry is created. If this object is set to 'false', then the following objects can't be modified by user. ccacSysRpHighThreshold, ccacSysRpMedThreshold, ccacSysRpLowThreshold.")
ccacSysRpAvgUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 3, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRpAvgUtilization.setStatus('current')
if mibBuilder.loadTexts: ccacSysRpAvgUtilization.setDescription("This object indicates the CAC resource is based on averaged utilization which is calculated by the average utilization of interval defined in ccacSysRpInterval. The value is assigned by the system automatically according to its resource type when the entry is created. If this object is set to 'false', then the object, ccacSysRpInterval can't be modified by user. ")
ccacSysRpPercentOrAbsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unitPercent", 1), ("unitAbsoluteNum", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRpPercentOrAbsNum.setStatus('current')
if mibBuilder.loadTexts: ccacSysRpPercentOrAbsNum.setDescription("This object indicates the unit of the utilization and the unit of the thresholds of this CAC resource is 'percent' or 'absolute number'. This object specifies the unit ('percent' or 'absolute number' of the following objects: ccacSysRpHighThreshold, ccacSysRpMedThreshold, ccacSysRpLowThreshold, ccacSysRpCurReading If it is set to unitPercent(1), the unit of the objects listed above is in range of 0 to 100 'percent'. If it is set to unitAbsoluteNum(2), the unit of the objects listed above is in range of 0 to 100000 'number'. The value of this object is set by the system according to its resource type. For example, if ccacSysRpResType is cpu5Sec(1), cpuAvg(2), ioMem(3) or procMem(4), this object will be set to unitPercent(1). If ccacSysRpResType is totCalls(6), then this object will be unitAbsoluteNum(2), the unit is the number of calls.")
ccacSysRpHighThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacSysRpHighThreshold.setStatus('current')
if mibBuilder.loadTexts: ccacSysRpHighThreshold.setDescription("The maximum utilization in percent or in absolute number allowed for this CAC resource. When the utilization of the resource reaches this value of the object, the action specified in ccacSysRpAction will be taken and the resource will be marked as unavailable and a trap of threshold exceed will be triggered if ccacSysNotifyEnable is 'true'. If ccacSysRpPercentOrAbsNum is unitPercent(1), the range of this object is from 0 to 100 percent. If it is unitAbsoluteNum(2), the range of this object is from 0 to 100000. The value of this object has to be greater than or equal to the value of ccacSysRpMedThreshold, and greater than the value of ccacSysRpLowThreshold. A SNMP SET to this object will be ignored if ccacSysRpUserTunable is set to 'false'. ")
ccacSysRpMedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacSysRpMedThreshold.setStatus('current')
if mibBuilder.loadTexts: ccacSysRpMedThreshold.setDescription("The utilization in percent or in absolute number of the resource reaches this value of the object, a trap of threshold warning will be triggered. If the value of this object is the same as the value of ccacSysRpHighThreshold, it means not to monitor medium utilization of the resource. If ccacSysRpPercentOrAbsNum is unitPercent(1), the range of this object is from 0 to 100 percent. If it is unitAbsoluteNum(2), the range of this object is from 0 to 100000. The value of this object has to be less than or equal to the value of ccacSysRpHighThreshold, but greater than the value of ccacSysRpLowThreshold. A SNMP SET to this object will be ignored if ccacSysRpUserTunable is set to 'false'. ")
ccacSysRpLowThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacSysRpLowThreshold.setStatus('current')
if mibBuilder.loadTexts: ccacSysRpLowThreshold.setDescription("The utilization in percent or in absolute number of a currently unavailable resource falls below this value of the object, the action will be removed, the resource will be marked as available and a trap of threshold clear will be triggered if ccacSysNotifyEnable is set to 'true'. If ccacSysRpPercentOrAbsNum is unitPercent(1), the range of this object is from 0 to 100 percent. If it is unitAbsoluteNum(2), the range of this object is from 0 to 100000. The value of this object has to be less than the value of ccacSysRpMedThreshold. A SNMP SET to this object will be ignored if ccacSysRpUserTunable is set to 'false'. ")
ccacSysRpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 300)).clone(60)).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacSysRpInterval.setStatus('current')
if mibBuilder.loadTexts: ccacSysRpInterval.setDescription("This object sets the time interval over which the average utilization is computed for comparison with the ccacSysRpHighThreshold, ccacSysRpMedThreshold and ccacSysRpLowThreshold of the entry which ccacSysRpResType is cpuAvg(2), ioMem(3), procMem(4) or totMem(5). This object will be ignored if its ccacSysRpAvgUtilization is set to 'false'. The formula is used for computation is defined in TC CcacResourceType. The recommended value for this object is 60 seconds. ")
ccacSysRpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("busyout", 2), ("treatment", 3), ("busyoutAndTreatment", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ccacSysRpAction.setStatus('current')
if mibBuilder.loadTexts: ccacSysRpAction.setDescription('The action to be taken when ccacSysRpHighThreshold is exceeded. The action will be reversed when the resource utilization falls below ccacSysRpLowThreshold. For instance, an entry with ccacSysRpHighThreshold 80, ccacSysRpLowThreshold 70, and ccacSysRpAction busyout. The busyout will be taken when the resource utilization exceeds 80 and a no busyout will be taken when the resource utilization below 70. none(1) - No action is taken. busyout(2) - Busyout the telephony ports after rejecting the current call treatment(3) - Apply the call treatment specified in ccacSysTreatment to the current call busyoutAndTreatment(4) - Apply the specified treatment to the current call and busyout the telephony ports ')
ccacSysRpCurReading = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRpCurReading.setStatus('current')
if mibBuilder.loadTexts: ccacSysRpCurReading.setDescription('The current utilization/number reading of the CAC resource in percent or in absolute number. If ccacSysRpPercentOrAbsNum is unitPercent(1), the range of this object is from 0 to 100. If it is unitAbsoluteNum(2), the range of this object is from 0 to 100000. ')
ccacSysRpAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 2, 3, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRpAvailable.setStatus('current')
if mibBuilder.loadTexts: ccacSysRpAvailable.setDescription('The CAC resource is available or not. A currently unavailable resource becomes available if its utilization is below the ccacSysRpLowThreshold. A currently available resource becomes unavailable if its utilization is over the ccacSysRpHighThreshold. ')
ccacSysResStatTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 3, 1), )
if mibBuilder.loadTexts: ccacSysResStatTable.setStatus('current')
if mibBuilder.loadTexts: ccacSysResStatTable.setDescription('This table is for CAC resource threshold statistics.')
ccacSysResStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 3, 1, 1), ).setIndexNames((0, "CISCO-MEDIA-GATEWAY-MIB", "cmgwIndex"), (0, "CISCO-CAC-SYSTEM-MIB", "ccacSysRpIndex"))
if mibBuilder.loadTexts: ccacSysResStatEntry.setStatus('current')
if mibBuilder.loadTexts: ccacSysResStatEntry.setDescription('Each entry in the table contains CAC statistics and duration for each resource corresponding entry in ccacSysResPolicyTable.')
ccacSysRsState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("thresholdClear", 1), ("thresholdExceed", 2), ("thresholdWarn", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRsState.setStatus('current')
if mibBuilder.loadTexts: ccacSysRsState.setDescription("This object indicates the current status of CAC resource. This object is 'thresholdExceed(2)' if the object ccacSysRpCurReading has exceeded the value of ccacSysRpHighThreshold and not yet fallen below the value of ccacSysRpLowThreshold in ccacSysResPolicyTable. It is 'thresholdWarn(3)' if the object ccacSysRpCurReading has exceeded the value of ccacSysRpMedThreshold and not yet greater than the value of ccacSysRpHighThreshold in ccacSysResPolicyTable. It is 'thresholdClear(1)' if the object ccacSysRpCurReading has fallen below the value of ccacSysRpLowThreshold in ccacSysResPolicyTable. ")
ccacSysRsDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 3, 1, 1, 2), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRsDuration.setStatus('current')
if mibBuilder.loadTexts: ccacSysRsDuration.setDescription('This object provides the elapsed time the system has been in its current state as shown in ccacSysRsState.')
ccacSysRsPrevDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 3, 1, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRsPrevDuration.setStatus('current')
if mibBuilder.loadTexts: ccacSysRsPrevDuration.setDescription('This object provides the elapsed time the system was in its previous state prior to the most recent transition of ccacSysRsState. This value is zero if the ccacSysRsState has not changed state.')
ccacSysRsExceedCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRsExceedCount.setStatus('current')
if mibBuilder.loadTexts: ccacSysRsExceedCount.setDescription("This object is the accumulated number of ccacSysRsState state transitions to 'thresholdExceed(2)' were detected since system startup.")
ccacSysRsCallsWhenExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysRsCallsWhenExceed.setStatus('current')
if mibBuilder.loadTexts: ccacSysRsCallsWhenExceed.setDescription('This object is the number of times that the new calls have arrived when the system was in a thresholdExceed(2) state. The calls may or may not have been rejected, depending on the value of the ccacSysRpAction. ')
ccacSysStatTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 3, 2), )
if mibBuilder.loadTexts: ccacSysStatTable.setStatus('current')
if mibBuilder.loadTexts: ccacSysStatTable.setDescription('This table defines the CAC statistics in CAC processing.')
ccacSysStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 3, 2, 1), )
ccacSysConfigEntry.registerAugmentions(("CISCO-CAC-SYSTEM-MIB", "ccacSysStatEntry"))
ccacSysStatEntry.setIndexNames(*ccacSysConfigEntry.getIndexNames())
if mibBuilder.loadTexts: ccacSysStatEntry.setStatus('current')
if mibBuilder.loadTexts: ccacSysStatEntry.setDescription('Each entry in the table contains CAC statistics applied to CAC processing. One entry will be automatically created by the system when it supports CAC processing.')
ccacSysCallRejections = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysCallRejections.setStatus('current')
if mibBuilder.loadTexts: ccacSysCallRejections.setDescription('Number of calls which have been rejected due to any of the CAC resource thresholds being exceeded since last system re-initialization. Multiple CAC resource thresholds may be exceeded per call, thus this object is not just a sum of the individual threshold counters (ccacSysRsCallsWhenExceed).')
ccacSysCallsInSWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 322, 1, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccacSysCallsInSWindow.setStatus('current')
if mibBuilder.loadTexts: ccacSysCallsInSWindow.setDescription('This object counts the total incoming calls within a given sliding window. This counter will be reset when the configuration (objects ccacSysSlidingWindowSteps and ccacSysSlidingWindowSize) of the sliding window is changed.')
ccacSysConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 322, 2))
ccacSysCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 322, 2, 1))
ccacSysGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 322, 2, 2))
ccacSysCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 322, 2, 1, 1)).setObjects(("CISCO-CAC-SYSTEM-MIB", "ccacSysConfigGroup"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysResPolicyGroup"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysDialCtrlConfigGroup"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysStatGroup"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysGatewayResGroup"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysProtocolResGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccacSysCompliance = ccacSysCompliance.setStatus('current')
if mibBuilder.loadTexts: ccacSysCompliance.setDescription('The compliance statement for SNMP entities which implement the ccacSysMIB')
ccacSysConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 322, 2, 2, 1)).setObjects(("CISCO-CAC-SYSTEM-MIB", "ccacSysCacEnable"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysNotifyEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccacSysConfigGroup = ccacSysConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ccacSysConfigGroup.setDescription('Objects for providing CAC provisioning for CAC processing.')
ccacSysDialCtrlConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 322, 2, 2, 2)).setObjects(("CISCO-CAC-SYSTEM-MIB", "ccacSysTreatment"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRejectCode"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysIsdnRejectCode"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysPlayMessageFile"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysSlidingWindowSteps"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysSlidingWindowSize"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysCallSpike"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccacSysDialCtrlConfigGroup = ccacSysDialCtrlConfigGroup.setStatus('current')
if mibBuilder.loadTexts: ccacSysDialCtrlConfigGroup.setDescription('Objects for providing CAC provisioning specific to dial control. ')
ccacSysResPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 322, 2, 2, 3)).setObjects(("CISCO-CAC-SYSTEM-MIB", "ccacSysRpResType"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRpUserTunable"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRpAvgUtilization"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRpPercentOrAbsNum"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRpHighThreshold"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRpMedThreshold"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRpLowThreshold"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRpInterval"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRpAction"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRpCurReading"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRpAvailable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccacSysResPolicyGroup = ccacSysResPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: ccacSysResPolicyGroup.setDescription('Objects for providing CAC resource provisioning.')
ccacSysStatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 322, 2, 2, 4)).setObjects(("CISCO-CAC-SYSTEM-MIB", "ccacSysRsState"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRsDuration"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRsPrevDuration"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRsExceedCount"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysRsCallsWhenExceed"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysCallRejections"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysCallsInSWindow"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccacSysStatGroup = ccacSysStatGroup.setStatus('current')
if mibBuilder.loadTexts: ccacSysStatGroup.setDescription('Objects for providing CAC resource statistics. ')
ccacSysGatewayResGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 322, 2, 2, 5)).setObjects(("CISCO-CAC-SYSTEM-MIB", "ccacSysGwResType"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysGwResPolicyIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccacSysGatewayResGroup = ccacSysGatewayResGroup.setStatus('current')
if mibBuilder.loadTexts: ccacSysGatewayResGroup.setDescription('A collection of objects providing media gateway related CAC resource provisioning feature.')
ccacSysProtocolResGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 322, 2, 2, 6)).setObjects(("CISCO-CAC-SYSTEM-MIB", "ccacSysProResType"), ("CISCO-CAC-SYSTEM-MIB", "ccacSysProResPolicyIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ccacSysProtocolResGroup = ccacSysProtocolResGroup.setStatus('current')
if mibBuilder.loadTexts: ccacSysProtocolResGroup.setDescription('A collection of objects providing media gateway control protocol related CAC resource provisioning feature.')
mibBuilder.exportSymbols("CISCO-CAC-SYSTEM-MIB", ccacSysMIB=ccacSysMIB, ccacSysGwResPolicyIndex=ccacSysGwResPolicyIndex, ccacSysConfigTable=ccacSysConfigTable, ccacSysProResPolicyIndex=ccacSysProResPolicyIndex, ccacSysRpIndex=ccacSysRpIndex, ccacSysResPolicyEntry=ccacSysResPolicyEntry, ccacSysRsState=ccacSysRsState, ccacSysNotifyEnable=ccacSysNotifyEnable, ccacSysPlayMessageFile=ccacSysPlayMessageFile, ccacSysGatewayResEntry=ccacSysGatewayResEntry, ccacSysStatTable=ccacSysStatTable, ccacSysConformance=ccacSysConformance, ccacSysCompliances=ccacSysCompliances, ccacSysRpMedThreshold=ccacSysRpMedThreshold, ccacSysStatEntry=ccacSysStatEntry, ccacSysCallSpike=ccacSysCallSpike, ccacSysTreatment=ccacSysTreatment, ccacSysRsCallsWhenExceed=ccacSysRsCallsWhenExceed, ccacSysSlidingWindowSize=ccacSysSlidingWindowSize, ccacSysRpAction=ccacSysRpAction, ccacSysCompliance=ccacSysCompliance, ccacSysProtocolResGroup=ccacSysProtocolResGroup, ccacSysRpCurReading=ccacSysRpCurReading, ccacSysDialCtrlConfigGroup=ccacSysDialCtrlConfigGroup, ccacSysGatewayResGroup=ccacSysGatewayResGroup, ccacSysRpUserTunable=ccacSysRpUserTunable, ccacSysRpLowThreshold=ccacSysRpLowThreshold, ccacSysGatewayResTable=ccacSysGatewayResTable, ccacSysRsExceedCount=ccacSysRsExceedCount, ccacSysProtocolResTable=ccacSysProtocolResTable, ccacSysRpAvailable=ccacSysRpAvailable, ccacSysCallsInSWindow=ccacSysCallsInSWindow, ccacSysStatGroup=ccacSysStatGroup, ccacSysRpResType=ccacSysRpResType, ccacSysResPolicy=ccacSysResPolicy, ccacSysRejectCode=ccacSysRejectCode, ccacSysGroups=ccacSysGroups, ccacSysConfigGroup=ccacSysConfigGroup, ccacSysResStatTable=ccacSysResStatTable, ccacSysProtocolResEntry=ccacSysProtocolResEntry, ccacSysStat=ccacSysStat, ccacSysSlidingWindowSteps=ccacSysSlidingWindowSteps, ccacSysIsdnRejectCode=ccacSysIsdnRejectCode, ccacSysRpAvgUtilization=ccacSysRpAvgUtilization, ccacSysCacEnable=ccacSysCacEnable, ccacSysRpPercentOrAbsNum=ccacSysRpPercentOrAbsNum, PYSNMP_MODULE_ID=ccacSysMIB, ccacSysGwResIndex=ccacSysGwResIndex, ccacSysResPolicyGroup=ccacSysResPolicyGroup, ccacSysRsDuration=ccacSysRsDuration, ccacSysResStatEntry=ccacSysResStatEntry, ccacSysRsPrevDuration=ccacSysRsPrevDuration, ccacSysRpInterval=ccacSysRpInterval, ccacSysProResType=ccacSysProResType, ccacSysGwResType=ccacSysGwResType, ccacSysResPolicyTable=ccacSysResPolicyTable, ccacSysCallRejections=ccacSysCallRejections, ccacSysObjects=ccacSysObjects, ccacSysConfig=ccacSysConfig, ccacSysConfigEntry=ccacSysConfigEntry, CcacResourceType=CcacResourceType, ccacSysProResIndex=ccacSysProResIndex, ccacSysRpHighThreshold=ccacSysRpHighThreshold)
