#
# PySNMP MIB module SONUS-ISDN-SERVICE-GROUP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-ISDN-SERVICE-GROUP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Gauge32, iso, TimeTicks, Bits, Unsigned32, ObjectIdentity, MibIdentifier, IpAddress, Integer32, ModuleIdentity, NotificationType, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Gauge32", "iso", "TimeTicks", "Bits", "Unsigned32", "ObjectIdentity", "MibIdentifier", "IpAddress", "Integer32", "ModuleIdentity", "NotificationType", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
sonusEventLevel, sonusEventDescription, sonusEventClass = mibBuilder.importSymbols("SONUS-COMMON-MIB", "sonusEventLevel", "sonusEventDescription", "sonusEventClass")
sonusSignallingMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusSignallingMIBs")
SonusServiceState, SonusName, SonusNameReference, SonusAdminState = mibBuilder.importSymbols("SONUS-TC", "SonusServiceState", "SonusName", "SonusNameReference", "SonusAdminState")
sonusIsdnServiceGroupMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4))
if mibBuilder.loadTexts: sonusIsdnServiceGroupMIB.setLastUpdated('200107310000Z')
if mibBuilder.loadTexts: sonusIsdnServiceGroupMIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusIsdnServiceGroupMIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 Carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusIsdnServiceGroupMIB.setDescription('The MIB Module for ISDN Service Group Management.')
sonusIsdnServiceGroupMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1))
sonusIsdnsgServiceGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1))
sonusIsdnsgServiceGroupNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupNextIndex.setDescription('The next valid index to use when creating a new sonusIsdnsgServiceGroupEntry')
sonusIsdnsgServiceGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2), )
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupTable.setDescription('This table contains information about each ISDN Service Group. A management entity may create rows for Service Group that are anticipated to be supported in the future.')
sonusIsdnsgServiceGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1), ).setIndexNames((0, "SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnsgServiceGroupListIndex"))
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupEntry.setDescription('This table describes the ISDN Service Groups that are configured on the GSX9000.')
sonusIsdnsgServiceGroupListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupListIndex.setDescription('The index of the ISDN Service Group entry.')
sonusIsdnsgServiceGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupName.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupName.setDescription('The name of the ISDN Service Group.')
sonusIsdnsgServiceGroupTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 3), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupTrunkGroup.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupTrunkGroup.setDescription('The Trunk Group, which the ISDN Service Group belongs to.')
sonusIsdnsgServiceGroupHuntAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lowlow", 1), ("highhigh", 2), ("circularforward", 3), ("circularbackward", 4))).clone('lowlow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupHuntAlgorithm.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupHuntAlgorithm.setDescription('The hunting method used to select channels for calls destined to the Service Group destination.')
sonusIsdnsgServiceGroupCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupCost.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupCost.setDescription('The routing cost to the ISDN Service Group.')
sonusIsdnsgServiceGroupSwitchSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("user", 2))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupSwitchSide.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupSwitchSide.setDescription('The switch side the ISDN Service Group should act as.')
sonusIsdnsgServiceGroupSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ni2", 1), ("dms250", 2), ("dms100", 3), ("lucent5ESS", 4), ("lucent4ESS", 5), ("euroIsdn", 6), ("ins1500", 7))).clone('ni2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupSwitchType.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupSwitchType.setDescription('The network switch type where the ISDN Service Group resides.')
sonusIsdnsgServiceGroupSwitchProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupSwitchProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupSwitchProfileName.setDescription('The ISDN Service Group switch profile name.')
sonusIsdnsgServiceGroupOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("outOfService", 1), ("maintenance", 2), ("inService", 3), ("restart", 4), ("clearStats", 5), ("dchannelSwitchover", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupOperation.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupOperation.setDescription('The operation to be applied to the the ISDN Service Group.')
sonusIsdnsgServiceGroupPrimaryDchannelInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupPrimaryDchannelInterface.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupPrimaryDchannelInterface.setDescription('The ISDN Service Group primary D-channel interface.')
sonusIsdnsgServiceGroupPrimaryDchannelTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupPrimaryDchannelTimeSlot.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupPrimaryDchannelTimeSlot.setDescription('The ISDN Service Group primary D-channel time slot.')
sonusIsdnsgServiceGroupPrimaryDchannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2))).clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupPrimaryDchannelMode.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupPrimaryDchannelMode.setDescription('The mode of operation of the primary D-channel in the ISDN Service Group.')
sonusIsdnsgServiceGroupBackupDchannelInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupBackupDchannelInterface.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupBackupDchannelInterface.setDescription('The ISDN Service Group backup D-channel interface.')
sonusIsdnsgServiceGroupBackupDchannelTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupBackupDchannelTimeSlot.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupBackupDchannelTimeSlot.setDescription('The ISDN Service Group backup D-channel time slot.')
sonusIsdnsgServiceGroupBackupDchannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("inService", 2), ("unEquipped", 3))).clone('unEquipped')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupBackupDchannelMode.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupBackupDchannelMode.setDescription('The mode of operation of the backup D-channel in the ISDN Service Group.')
sonusIsdnsgServiceGroupLayerTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("layer2", 2), ("layer3", 3), ("both", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupLayerTrace.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupLayerTrace.setDescription('Controls logging of layer events to the trace event log file.')
sonusIsdnsgServiceGroupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 17), SonusServiceState().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupMode.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupMode.setDescription('The mode of operation of channels in the ISDN Service Group.')
sonusIsdnsgServiceGroupAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dryUp", 1), ("force", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupAction.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupAction.setDescription('The action taken on the channels in the ISDN Service Group when sonusIsdnsgServiceGroupMode is set to out of service. This object should only be set in conjunction with sonusIsdnsgServiceGroupMode.')
sonusIsdnsgServiceGroupTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupTimeout.setDescription('The timeout value in minutes for dryup action on the ISDN Service Group. This object should only be set in conjunction with sonusIsdnsgServiceGroupAction, when sonusIsdnsgServiceGroupAction is set to dryUp.')
sonusIsdnsgServiceGroupAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 20), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupAdminState.setDescription('The admin state of the ISDN Service Group.')
sonusIsdnsgServiceGroupProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupProfileName.setDescription('The ISDN Service Group profile name.')
sonusIsdnsgServiceGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 22), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupRowStatus.setDescription('')
sonusIsdnsgServiceGroupDefaultDirectoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupDefaultDirectoryNumber.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupDefaultDirectoryNumber.setDescription('Default Directory number for the ISDN Service Group.')
sonusIsdnsgServiceGroupCallingPartyNumberProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("necessary", 1), ("notNecessary", 2))).clone('notNecessary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupCallingPartyNumberProvision.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupCallingPartyNumberProvision.setDescription('Specifies wether the Calling Party Number is required in the incoming SETUP.')
sonusIsdnsgServiceGroupCallingPartyNumberDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupCallingPartyNumberDiscard.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupCallingPartyNumberDiscard.setDescription('Controls discard of Calling Party Numbers not screened or that failed screening.')
sonusIsdnsgServiceGroupCallingPartyNumberDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupCallingPartyNumberDelivery.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupCallingPartyNumberDelivery.setDescription('Controls the delivery of the Calling Party Number within outgoing SETUP messages')
sonusIsdnsgServiceGroupCallingPartySubAddressTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("conditional", 3))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupCallingPartySubAddressTransfer.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupCallingPartySubAddressTransfer.setDescription('Controls the transfer of the Calling Party Subaddress Information Element')
sonusIsdnsgServiceGroupCallingPartySubAddressDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("conditional", 3))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupCallingPartySubAddressDelivery.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupCallingPartySubAddressDelivery.setDescription('Controls the delivery of the Calling Party Subaddress Information Element to the CPE')
sonusIsdnsgServiceGroupBchannelAvailabilitySignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupBchannelAvailabilitySignaling.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupBchannelAvailabilitySignaling.setDescription('Used to enable or disable the B-channel availability signaling procedures')
sonusIsdnsgServiceGroupVerboseTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('on')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupVerboseTrace.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupVerboseTrace.setDescription('Controls verbose mode in the logging of layer events to the trace event log file.')
sonusIsdnsgServiceGroupCallingPartyNumberPresentation = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupCallingPartyNumberPresentation.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupCallingPartyNumberPresentation.setDescription('Used as Calling Party Number presentation indicator when none available in incoming SETUP.')
sonusIsdnsgServiceGroupDiscTreatmentProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 32), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupDiscTreatmentProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupDiscTreatmentProfileName.setDescription('The disconnect treatment profile to be used for this service.')
sonusIsdnsgServiceGroupTonePackageName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 33), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupTonePackageName.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupTonePackageName.setDescription('The tone package to be used for this service.')
sonusIsdnsgServiceGroupT302 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT302.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT302.setDescription('This T302 of Q.931 timer is used for both user and network sides.')
sonusIsdnsgServiceGroupT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT303.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT303.setDescription('This T303 of Q.931 timer is used for both user and network sides.')
sonusIsdnsgServiceGroupT304 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT304.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT304.setDescription('This T304 of Q.931 timer is used for both user and network sides.')
sonusIsdnsgServiceGroupT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT305.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT305.setDescription('This T305 of Q.931 timer is used for both user and network sides.')
sonusIsdnsgServiceGroupT306 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(30)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT306.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT306.setDescription('This T306 of Q.931 timer is used for network side only.')
sonusIsdnsgServiceGroupT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT308.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT308.setDescription('This T308 of Q.931 timer is used for both user and network sides.')
sonusIsdnsgServiceGroupT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(90)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT309.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT309.setDescription('This T309 of Q.931 timer is used for both user and network sides.')
sonusIsdnsgServiceGroupT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT310.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT310.setDescription('This T310 of Q.931 timer is used for both user and network sides.')
sonusIsdnsgServiceGroupT312 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT312.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT312.setDescription('This T312 of Q.931 timer is used for network side only.')
sonusIsdnsgServiceGroupT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT313.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT313.setDescription('This T313 of Q.931 timer is used for user side only.')
sonusIsdnsgServiceGroupT314 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT314.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT314.setDescription('This T314 of Q.931 timer is used for both user and network sides')
sonusIsdnsgServiceGroupT318 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT318.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT318.setDescription('This T318 of Q.931 timer is used for user side only.')
sonusIsdnsgServiceGroupT319 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT319.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT319.setDescription('This T319 of Q.931 timer is used for user side only.')
sonusIsdnsgServiceGroupT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT322.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT322.setDescription('This T322 of Q.931 timer is used for network side only.')
sonusIsdnsgServiceGroupK = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupK.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupK.setDescription('The maximum number of outstanding I frames. This K of Q.921 parameter is used for both user and network sides.')
sonusIsdnsgServiceGroupT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT200.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT200.setDescription('This T200 of Q.921 timer is used for both user and network sides.')
sonusIsdnsgServiceGroupT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT203.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupT203.setDescription('This T203 of Q.921 timer is used for both user and network sides.')
sonusIsdnsgServiceGroupN200 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupN200.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupN200.setDescription('The maximum number of retransmissions of a frame. This N200 of Q.921 parameter is used for both user and network sides.')
sonusIsdnsgServiceGroupN201 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 260)).clone(260)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupN201.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupN201.setDescription('The maximum number of octets in an information field. This N201 of Q.921 parameter is used for both user and network sides.')
sonusIsdnsgServiceGroupBchannelInitialRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupBchannelInitialRestart.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupBchannelInitialRestart.setDescription('Controls wether RESTARTs are used to initially bring channels into service')
sonusIsdnsgServiceGroupIuaApplicationServer = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 54), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupIuaApplicationServer.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupIuaApplicationServer.setDescription('IUA Application server to which this D-channel belongs to')
sonusIsdnsgServiceGroupIuaAutoDatalinkEstablish = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 1, 2, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupIuaAutoDatalinkEstablish.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupIuaAutoDatalinkEstablish.setDescription('Controls automatic datalink establishment upon IUA application server activation')
sonusIsdnsgServiceGroupStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2), )
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatTable.setDescription('This table contains status information about each ISDN service group in the GSX9000 Switch node.')
sonusIsdnsgServiceGroupStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1), ).setIndexNames((0, "SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnsgServiceGroupStatListIndex"))
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatEntry.setDescription('This table describes the status of the Service Groups that are configured as destinations ISDN nodes for the GSX9000 Switch node.')
sonusIsdnsgServiceGroupStatListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatListIndex.setDescription('The index of the ISDN Service Group.')
sonusIsdnsgServiceGroupStatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("available", 1), ("unavailable", 2), ("dryup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatStatus.setDescription('The state of the ISDN Service Group.')
sonusIsdnsgServiceGroupStatTgMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatTgMode.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatTgMode.setDescription('The state of the Trunk Group that this ISDN Service Group belongs to.')
sonusIsdnsgServiceGroupStatNumBchConfigured = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatNumBchConfigured.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatNumBchConfigured.setDescription('Number of Bchannels configured for this ISDN service group.')
sonusIsdnsgServiceGroupStatNumBchAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatNumBchAvailable.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatNumBchAvailable.setDescription('Number of Bchannels available in this ISDN service group.')
sonusIsdnsgServiceGroupStatInCallsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatInCallsActive.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatInCallsActive.setDescription('Number of incoming active calls.')
sonusIsdnsgServiceGroupStatInCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatInCalls.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatInCalls.setDescription('Number of incoming call attemps.')
sonusIsdnsgServiceGroupStatInConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatInConnected.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatInConnected.setDescription('Number of incoming calls connected.')
sonusIsdnsgServiceGroupStatOutCallsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatOutCallsActive.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatOutCallsActive.setDescription('Number of outgoing active calls.')
sonusIsdnsgServiceGroupStatOutCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatOutCalls.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatOutCalls.setDescription('Number of outgoing call attemps.')
sonusIsdnsgServiceGroupStatOutConnected = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatOutConnected.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatOutConnected.setDescription('Number of outgoing calls connected.')
sonusIsdnsgServiceGroupStatPrimaryDchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2), ("manualOos", 3), ("standby", 4), ("maintenanceBusy", 5), ("unEquipped", 6), ("wait", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatPrimaryDchannel.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatPrimaryDchannel.setDescription('The state of the Primary Dchannel of the ISDN Service Group.')
sonusIsdnsgServiceGroupStatPrimaryDchInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatPrimaryDchInPkts.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatPrimaryDchInPkts.setDescription('Number of packets received on the primary D-channel.')
sonusIsdnsgServiceGroupStatPrimaryDchOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatPrimaryDchOutPkts.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatPrimaryDchOutPkts.setDescription('Number of packets sent on the primary D-channel.')
sonusIsdnsgServiceGroupStatPrimaryDchInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatPrimaryDchInBytes.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatPrimaryDchInBytes.setDescription('Number of bytes received on the primary D-channel.')
sonusIsdnsgServiceGroupStatPrimaryDchOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatPrimaryDchOutBytes.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatPrimaryDchOutBytes.setDescription('Number of bytes sent on the primary D-channel.')
sonusIsdnsgServiceGroupStatBackupDchannel = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2), ("manualOos", 3), ("standby", 4), ("maintenanceBusy", 5), ("unEquipped", 6), ("wait", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatBackupDchannel.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatBackupDchannel.setDescription('The state of the Backup Dchannel of the ISDN Service Group.')
sonusIsdnsgServiceGroupStatBackupDchInPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatBackupDchInPkts.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatBackupDchInPkts.setDescription('Number of packets received on the backup D-channel.')
sonusIsdnsgServiceGroupStatBackupDchOutPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatBackupDchOutPkts.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatBackupDchOutPkts.setDescription('Number of packets sent on the backup D-channel.')
sonusIsdnsgServiceGroupStatBackupDchInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatBackupDchInBytes.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatBackupDchInBytes.setDescription('Number of bytes received on the backup D-channel.')
sonusIsdnsgServiceGroupStatBackupDchOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatBackupDchOutBytes.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgServiceGroupStatBackupDchOutBytes.setDescription('Number of bytes sent on the backup D-channel.')
sonusIsdnsgProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3))
sonusIsdnsgProfileNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgProfileNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileNextIndex.setDescription('The next valid index to use when creating a new sonusIsdnsgProfileEntry')
sonusIsdnsgProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2), )
if mibBuilder.loadTexts: sonusIsdnsgProfileTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileTable.setDescription('This table contains ISDN Service Group Profiles.')
sonusIsdnsgProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1), ).setIndexNames((0, "SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnsgProfileListIndex"))
if mibBuilder.loadTexts: sonusIsdnsgProfileEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileEntry.setDescription('This table describes the ISDN Service Groups profile.')
sonusIsdnsgProfileListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgProfileListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileListIndex.setDescription('The index of the ISDN Service Group entry.')
sonusIsdnsgProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileName.setDescription('The name of the ISDN Service Group.')
sonusIsdnsgProfileTrunkGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 3), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileTrunkGroup.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileTrunkGroup.setDescription('The Trunk Group, which the ISDN Service Group belongs to.')
sonusIsdnsgProfileHuntAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("lowlow", 1), ("highhigh", 2), ("circularforward", 3), ("circularbackward", 4))).clone('lowlow')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileHuntAlgorithm.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileHuntAlgorithm.setDescription('The hunting method used to select channels for calls destined to the Service Group destination.')
sonusIsdnsgProfileCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100)).clone(50)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileCost.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileCost.setDescription('The routing cost to the ISDN Service Group.')
sonusIsdnsgProfileSwitchSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("network", 1), ("user", 2), ("usersym", 3))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileSwitchSide.setStatus('deprecated')
if mibBuilder.loadTexts: sonusIsdnsgProfileSwitchSide.setDescription('The switch side the ISDN Service Group should act as. This MIB object has been replaced by the sonusIsdnsgSwitchProfileSwitchSide MIB object.')
sonusIsdnsgProfileSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ni2", 1), ("dms250", 2), ("dms100", 3), ("lucent5ESS", 4), ("lucent4ESS", 5), ("euroIsdn", 6), ("ins1500", 7))).clone('ni2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileSwitchType.setStatus('deprecated')
if mibBuilder.loadTexts: sonusIsdnsgProfileSwitchType.setDescription('The network switch type where the ISDN Service Group resides. This MIB object has been replaced by the sonusIsdnsgSwitchProfileSwitchType MIB object.')
sonusIsdnsgProfileSwitchProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileSwitchProfile.setStatus('obsolete')
if mibBuilder.loadTexts: sonusIsdnsgProfileSwitchProfile.setDescription('The ISDN Service Group switch profile name. This MIB object is a duplicate of the sonusIsdnsgServiceGroupSwitchProfileName.')
sonusIsdnsgProfileMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 9), SonusServiceState().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileMode.setStatus('obsolete')
if mibBuilder.loadTexts: sonusIsdnsgProfileMode.setDescription('The mode of operation of channels in the ISDN Service Group. This MIB object is no longer applicable.')
sonusIsdnsgProfileAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 10), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileAdminState.setDescription('The admin state of the ISDN Service Group.')
sonusIsdnsgProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 11), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileRowStatus.setDescription('')
sonusIsdnsgProfileDefaultDirectoryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileDefaultDirectoryNumber.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileDefaultDirectoryNumber.setDescription('Default Directory number for the ISDN Service Profile.')
sonusIsdnsgProfileCallingPartyNumberProvision = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("necessary", 1), ("notNecessary", 2))).clone('necessary')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileCallingPartyNumberProvision.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileCallingPartyNumberProvision.setDescription('Specifies wether the Calling Party Number is required in the incoming SETUP.')
sonusIsdnsgProfileCallingPartyNumberDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('no')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileCallingPartyNumberDiscard.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileCallingPartyNumberDiscard.setDescription('Controls discard of Calling Party Numbers not screened or that failed screening.')
sonusIsdnsgProfileCallingPartyNumberDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileCallingPartyNumberDelivery.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileCallingPartyNumberDelivery.setDescription('Controls the delivery of the Calling Party Number within outgoing SETUP messages')
sonusIsdnsgProfileCallingPartySubAddressTransfer = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("conditional", 3))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileCallingPartySubAddressTransfer.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileCallingPartySubAddressTransfer.setDescription('Controls the transfer of the Calling Party Subaddress Information Element')
sonusIsdnsgProfileCallingPartySubAddressDelivery = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("yes", 1), ("no", 2), ("conditional", 3))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileCallingPartySubAddressDelivery.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileCallingPartySubAddressDelivery.setDescription('Controls the delivery of the Calling Party Subaddress Information Element to the CPE')
sonusIsdnsgProfileCallingPartyNumberPresentation = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 3, 2, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgProfileCallingPartyNumberPresentation.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgProfileCallingPartyNumberPresentation.setDescription('Used as Calling Party Number presentation indicator when none available in incoming SETUP.')
sonusIsdnsgInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 4), )
if mibBuilder.loadTexts: sonusIsdnsgInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgInterfaceTable.setDescription('The Isdnsg Interface table describes the interfaces in the indexed service group. This table is unavailable if the sonusIsdnsgServiceGroupStatStatus object indicates that this service group is unavailable.')
sonusIsdnsgInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 4, 1), ).setIndexNames((0, "SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnsgInterfaceServiceListIndex"), (0, "SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnsgInterfaceIdentifier"))
if mibBuilder.loadTexts: sonusIsdnsgInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgInterfaceEntry.setDescription('')
sonusIsdnsgInterfaceServiceListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgInterfaceServiceListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgInterfaceServiceListIndex.setDescription('The index of the ISDN Service Group interface is defined for.')
sonusIsdnsgInterfaceIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgInterfaceIdentifier.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgInterfaceIdentifier.setDescription('The Q931 interface identifier of the interface.')
sonusIsdnsgInterfacePortName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 4, 1, 3), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgInterfacePortName.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgInterfacePortName.setDescription('The name of the port interface is on.')
sonusIsdnsgInterfaceOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgInterfaceOperation.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgInterfaceOperation.setDescription('Apply operation to the ISDN Interface.')
sonusIsdnsgInterfaceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 4, 1, 5), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgInterfaceAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgInterfaceAdminState.setDescription('The admin state of the ISDN Interface.')
sonusIsdnsgInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 4, 1, 6), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgInterfaceRowStatus.setDescription('')
sonusIsdnsgBchannelTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 5), )
if mibBuilder.loadTexts: sonusIsdnsgBchannelTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelTable.setDescription('The Isdnsg B-channel table describes the B-channels in the indexed ISDN interface. This table is unavailable if the sonusisdnsgServiceGroupStatStatus object indicates that this service group is unavailable.')
sonusIsdnsgBchannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 5, 1), ).setIndexNames((0, "SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnsgBchannelServiceListIndex"), (0, "SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnsgBchannelInterfaceIdentifier"), (0, "SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnsgBchannelNumber"))
if mibBuilder.loadTexts: sonusIsdnsgBchannelEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelEntry.setDescription('')
sonusIsdnsgBchannelServiceListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgBchannelServiceListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelServiceListIndex.setDescription('The index of the ISDN Service Group of the ISDN B-channel.')
sonusIsdnsgBchannelInterfaceIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 5, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgBchannelInterfaceIdentifier.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelInterfaceIdentifier.setDescription('The Q931 interface identifier of the ISDN B-channel.')
sonusIsdnsgBchannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgBchannelNumber.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelNumber.setDescription('The channel number of the ISDN B-channel.')
sonusIsdnsgBchannelCircuitProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 5, 1, 4), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgBchannelCircuitProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelCircuitProfileName.setDescription('The circuit profile name assigned to the ISDN B-channel.')
sonusIsdnsgBchannelDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("twoWay", 1), ("oneWayIn", 2), ("oneWayOut", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgBchannelDirection.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelDirection.setDescription('Identifies the direction of traffic to be allowed on the ISDN B-channel.')
sonusIsdnsgBchannelOperation = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgBchannelOperation.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelOperation.setDescription('Apply an operation to the ISDN B-channel.')
sonusIsdnsgBchannelMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("outOfService", 1), ("maintenance", 2), ("inService", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgBchannelMode.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelMode.setDescription('The mode of operation of the ISDN B-channel.')
sonusIsdnsgBchannelAction = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dryUp", 1), ("force", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgBchannelAction.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelAction.setDescription('The action taken on the ISDN B-channel when sonusIsdnsgBchannelMode is set to out of service. This object should only be set in conjunction with sonusIsdnsgBchannelMode.')
sonusIsdnsgBchannelTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 5, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgBchannelTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelTimeout.setDescription('The timeout value in minutes for dryup action on the ISDN B-channel. This object should only be set in conjunction with sonusIsdnsgBchannelAction.')
sonusIsdnsgBchannelAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 5, 1, 10), SonusAdminState()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgBchannelAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelAdminState.setDescription('The admin state of the ISDN B-channel.')
sonusIsdnsgBchannelStatTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 6), )
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatTable.setDescription('The Isdnsg B-channel status table describes the status of the B-channels in the indexed ISDN interface. This table is unavailable if the sonusisdnsgServiceGroupStatStatus object indicates that this service group is unavailable.')
sonusIsdnsgBchannelStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 6, 1), ).setIndexNames((0, "SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnsgBchannelStatServiceListIndex"), (0, "SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnsgBchannelStatInterfaceIdentifier"), (0, "SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnsgBchannelStatNumber"))
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatEntry.setDescription('')
sonusIsdnsgBchannelStatServiceListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatServiceListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatServiceListIndex.setDescription('The index of the ISDN Service Group of the ISDN B-channel.')
sonusIsdnsgBchannelStatInterfaceIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatInterfaceIdentifier.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatInterfaceIdentifier.setDescription('The Q931 interface identifier of the ISDN B-channel.')
sonusIsdnsgBchannelStatNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatNumber.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatNumber.setDescription('The channel number of the ISDN B-channel.')
sonusIsdnsgBchannelStatUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("unequipped", 1), ("idle", 2), ("inBusy", 3), ("outBusy", 4), ("transientSetup", 5), ("transientRelease", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatUsage.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatUsage.setDescription('The usage state of the ISDN B-channel.')
sonusIsdnsgBchannelStatLocalMaint = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("inService", 1), ("maintenance", 2), ("outOfService", 3), ("transientInService", 4), ("transientMaintenance", 5), ("transientOutOfService", 6), ("dryup", 7), ("notAvailable", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatLocalMaint.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatLocalMaint.setDescription('The local maintenance state of the ISDN B-channel.')
sonusIsdnsgBchannelStatLocalHw = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("inService", 1), ("outOfService", 2), ("transientInService", 3), ("transientOutOfService", 4), ("notAvailable", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatLocalHw.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatLocalHw.setDescription('The local hardware state of the ISDN B-channel.')
sonusIsdnsgBchannelStatRemoteMaint = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("inService", 1), ("maintenance", 2), ("outOfService", 3), ("transientInService", 4), ("transientMaintenance", 5), ("transientOutOfService", 6), ("notAvailable", 7), ("restarting", 8), ("restartError", 9), ("autoOutOfService", 10)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatRemoteMaint.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgBchannelStatRemoteMaint.setDescription('The remote maintenance state of the ISDN B-channel.')
sonusIsdnsgSwitchProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7))
sonusIsdnsgSwitchProfileNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileNextIndex.setDescription('The next valid index to use when creating a new sonusIsdnsgSwitchProfileEntry')
sonusIsdnsgSwitchProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2), )
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileTable.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileTable.setDescription('This table contains ISDN switch profile information.')
sonusIsdnsgSwitchProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1), ).setIndexNames((0, "SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnsgSwitchProfileListIndex"))
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileEntry.setDescription('This table describes the ISDN Switch Profile that are configured on the GSX9000.')
sonusIsdnsgSwitchProfileListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileListIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileListIndex.setDescription('The index of the ISDN Switch Profile entry.')
sonusIsdnsgSwitchProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileName.setDescription('The name of the ISDN Switch Profile.')
sonusIsdnsgSwitchProfileSwitchSide = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("network", 1), ("user", 2))).clone('network')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileSwitchSide.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileSwitchSide.setDescription('The switch side the ISDN Switch Profile should act as.')
sonusIsdnsgSwitchProfileSwitchType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("ni2", 1), ("dms250", 2), ("dms100", 3), ("lucent5ESS", 4), ("lucent4ESS", 5), ("euroIsdn", 6), ("ins1500", 7))).clone('ni2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileSwitchType.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileSwitchType.setDescription('The network switch type where the ISDN Switch Profile resides.')
sonusIsdnsgSwitchProfileBchannelAvailabilitySignaling = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileBchannelAvailabilitySignaling.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileBchannelAvailabilitySignaling.setDescription('Used to enable or disable the B-channel availability signaling procedures.')
sonusIsdnsgSwitchProfileT302 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT302.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT302.setDescription('This T302 of Q.931 timer is used for both user and network sides.')
sonusIsdnsgSwitchProfileT303 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT303.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT303.setDescription('This T303 of Q.931 timer is used for both user and network sides.')
sonusIsdnsgSwitchProfileT304 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT304.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT304.setDescription('This T304 of Q.931 timer is used for both user and network sides.')
sonusIsdnsgSwitchProfileT305 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT305.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT305.setDescription('This T305 of Q.931 timer is used for both user and network sides.')
sonusIsdnsgSwitchProfileT306 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT306.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT306.setDescription('This T306 of Q.931 timer is used for network side only.')
sonusIsdnsgSwitchProfileT308 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT308.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT308.setDescription('This T308 of Q.931 timer is used for both user and network sides.')
sonusIsdnsgSwitchProfileT309 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT309.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT309.setDescription('This T309 of Q.931 timer is used for both user and network sides.')
sonusIsdnsgSwitchProfileT310 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT310.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT310.setDescription('This T310 of Q.931 timer is used for both user and network sides.')
sonusIsdnsgSwitchProfileT312 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT312.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT312.setDescription('This T312 of Q.931 timer is used for network side only.')
sonusIsdnsgSwitchProfileT313 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT313.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT313.setDescription('This T313 of Q.931 timer is used for user side only.')
sonusIsdnsgSwitchProfileT314 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT314.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT314.setDescription('This T314 of Q.931 timer is used for both user and network sides')
sonusIsdnsgSwitchProfileT318 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT318.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT318.setDescription('This T318 of Q.931 timer is used for user side only.')
sonusIsdnsgSwitchProfileT319 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT319.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT319.setDescription('This T319 of Q.931 timer is used for user side only.')
sonusIsdnsgSwitchProfileT322 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127)).clone(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT322.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT322.setDescription('This T322 of Q.931 timer is used for network side only.')
sonusIsdnsgSwitchProfileK = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileK.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileK.setDescription('The maximum number of outstanding I frames. This K of Q.921 parameter is used for both user and network sides.')
sonusIsdnsgSwitchProfileT200 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT200.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT200.setDescription('This T200 of Q.921 timer is used for both user and network sides.')
sonusIsdnsgSwitchProfileT203 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT203.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileT203.setDescription('This T203 of Q.921 timer is used for both user and network sides.')
sonusIsdnsgSwitchProfileN200 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileN200.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileN200.setDescription('The maximum number of retransmissions of a frame. This N200 of Q.921 parameter is used for both user and network sides.')
sonusIsdnsgSwitchProfileN201 = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 260)).clone(260)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileN201.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileN201.setDescription('The maximum number of octets in an information field. This N201 of Q.921 parameter is used for both user and network sides.')
sonusIsdnsgSwitchProfileAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 25), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileAdminState.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileAdminState.setDescription('The admin state of the ISDN Switch Profile.')
sonusIsdnsgSwitchProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 26), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileRowStatus.setDescription('The row status of the ISDN Switch Profile.')
sonusIsdnsgSwitchProfileBchannelInitialRestart = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 1, 7, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2))).clone('yes')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileBchannelInitialRestart.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnsgSwitchProfileBchannelInitialRestart.setDescription('Controls wether RESTARTs are used to initially bring channels into service')
sonusIsdnServiceGroupMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 2))
sonusIsdnServiceGroupMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 2, 0))
sonusIsdnServiceGroupMIBNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 2, 1))
sonusIsdnSvcGrpName = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnSvcGrpName.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnSvcGrpName.setDescription('Name of the ISDN service group.')
sonusIsdnInterfaceId = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnInterfaceId.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnInterfaceId.setDescription('The Q931 interface identifier of the ISDN interface.')
sonusIsdnBchannelOffsets = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 2, 1, 3), Bits().clone(namedValues=NamedValues(("bchOffset0", 0), ("bchOffset1", 1), ("bchOffset2", 2), ("bchOffset3", 3), ("bchOffset4", 4), ("bchOffset5", 5), ("bchOffset6", 6), ("bchOffset7", 7), ("bchOffset8", 8), ("bchOffset9", 9), ("bchOffset10", 10), ("bchOffset11", 11), ("bchOffset12", 12), ("bchOffset13", 13), ("bchOffset14", 14), ("bchOffset15", 15), ("bchOffset16", 16), ("bchOffset17", 17), ("bchOffset18", 18), ("bchOffset19", 19), ("bchOffset20", 20), ("bchOffset21", 21), ("bchOffset22", 22), ("bchOffset23", 23)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIsdnBchannelOffsets.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnBchannelOffsets.setDescription('B-channel maintenance status bitmap.')
sonusIsdnSvcGrpInServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 2, 0, 1)).setObjects(("SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnSvcGrpName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsdnSvcGrpInServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnSvcGrpInServiceNotification.setDescription('This trap indicates that the specified ISDN Service Group was placed in service.')
sonusIsdnSvcGrpOutOfServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 2, 0, 2)).setObjects(("SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnSvcGrpName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsdnSvcGrpOutOfServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnSvcGrpOutOfServiceNotification.setDescription('This trap indicates that the specified ISDN Service Group was taken out of service.')
sonusIsdnBChannelInServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 2, 0, 3)).setObjects(("SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnSvcGrpName"), ("SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnInterfaceId"), ("SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnBchannelOffsets"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsdnBChannelInServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnBChannelInServiceNotification.setDescription('This trap indicates that the specified ISDN B Channels are placed in service.')
sonusIsdnBChannelOutOfServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 2, 0, 4)).setObjects(("SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnSvcGrpName"), ("SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnInterfaceId"), ("SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnBchannelOffsets"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsdnBChannelOutOfServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnBChannelOutOfServiceNotification.setDescription('This trap indicates that the specified ISDN B Channels are taken out of service.')
sonusIsdnPrimaryDChannelInServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 2, 0, 5)).setObjects(("SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnSvcGrpName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsdnPrimaryDChannelInServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnPrimaryDChannelInServiceNotification.setDescription('This trap indicates that the Primary D Channel for the specified ISDN Service Group was placed in service.')
sonusIsdnPrimaryDChannelOutOfServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 2, 0, 6)).setObjects(("SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnSvcGrpName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsdnPrimaryDChannelOutOfServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnPrimaryDChannelOutOfServiceNotification.setDescription('This trap indicates that the Primary D Channel for the specified ISDN Service Group was taken out of service.')
sonusIsdnBackupDChannelInServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 2, 0, 7)).setObjects(("SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnSvcGrpName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsdnBackupDChannelInServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnBackupDChannelInServiceNotification.setDescription('This trap indicates that the Backup D Channel for the specified ISDN Service Group was placed in service.')
sonusIsdnBackupDChannelOutOfServiceNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 6, 4, 2, 0, 8)).setObjects(("SONUS-ISDN-SERVICE-GROUP-MIB", "sonusIsdnSvcGrpName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIsdnBackupDChannelOutOfServiceNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIsdnBackupDChannelOutOfServiceNotification.setDescription('This trap indicates that the Backup D Channel for the specified ISDN Service Group was taken out of service.')
mibBuilder.exportSymbols("SONUS-ISDN-SERVICE-GROUP-MIB", sonusIsdnBackupDChannelInServiceNotification=sonusIsdnBackupDChannelInServiceNotification, sonusIsdnsgProfileSwitchType=sonusIsdnsgProfileSwitchType, sonusIsdnsgServiceGroupLayerTrace=sonusIsdnsgServiceGroupLayerTrace, sonusIsdnsgServiceGroupCallingPartyNumberDiscard=sonusIsdnsgServiceGroupCallingPartyNumberDiscard, sonusIsdnsgSwitchProfileT312=sonusIsdnsgSwitchProfileT312, sonusIsdnsgServiceGroupDiscTreatmentProfileName=sonusIsdnsgServiceGroupDiscTreatmentProfileName, sonusIsdnsgSwitchProfileT305=sonusIsdnsgSwitchProfileT305, sonusIsdnsgServiceGroupCallingPartyNumberPresentation=sonusIsdnsgServiceGroupCallingPartyNumberPresentation, sonusIsdnsgServiceGroupT319=sonusIsdnsgServiceGroupT319, sonusIsdnsgBchannelStatUsage=sonusIsdnsgBchannelStatUsage, sonusIsdnsgServiceGroupTable=sonusIsdnsgServiceGroupTable, sonusIsdnsgServiceGroupStatListIndex=sonusIsdnsgServiceGroupStatListIndex, sonusIsdnsgBchannelAction=sonusIsdnsgBchannelAction, sonusIsdnsgBchannelStatLocalHw=sonusIsdnsgBchannelStatLocalHw, sonusIsdnSvcGrpName=sonusIsdnSvcGrpName, sonusIsdnsgServiceGroupVerboseTrace=sonusIsdnsgServiceGroupVerboseTrace, sonusIsdnsgBchannelStatNumber=sonusIsdnsgBchannelStatNumber, sonusIsdnsgServiceGroupRowStatus=sonusIsdnsgServiceGroupRowStatus, sonusIsdnsgServiceGroupBackupDchannelTimeSlot=sonusIsdnsgServiceGroupBackupDchannelTimeSlot, sonusIsdnsgProfileTrunkGroup=sonusIsdnsgProfileTrunkGroup, sonusIsdnsgServiceGroupT304=sonusIsdnsgServiceGroupT304, sonusIsdnsgServiceGroupStatTable=sonusIsdnsgServiceGroupStatTable, sonusIsdnsgServiceGroupStatBackupDchannel=sonusIsdnsgServiceGroupStatBackupDchannel, sonusIsdnsgServiceGroupT322=sonusIsdnsgServiceGroupT322, sonusIsdnsgSwitchProfileT322=sonusIsdnsgSwitchProfileT322, sonusIsdnsgProfileCallingPartyNumberProvision=sonusIsdnsgProfileCallingPartyNumberProvision, sonusIsdnsgSwitchProfileRowStatus=sonusIsdnsgSwitchProfileRowStatus, sonusIsdnsgServiceGroupCallingPartyNumberDelivery=sonusIsdnsgServiceGroupCallingPartyNumberDelivery, sonusIsdnsgSwitchProfileT200=sonusIsdnsgSwitchProfileT200, sonusIsdnsgBchannelNumber=sonusIsdnsgBchannelNumber, sonusIsdnsgSwitchProfileSwitchType=sonusIsdnsgSwitchProfileSwitchType, sonusIsdnsgServiceGroupT303=sonusIsdnsgServiceGroupT303, sonusIsdnsgServiceGroupT318=sonusIsdnsgServiceGroupT318, sonusIsdnServiceGroupMIB=sonusIsdnServiceGroupMIB, sonusIsdnsgBchannelServiceListIndex=sonusIsdnsgBchannelServiceListIndex, sonusIsdnsgServiceGroupListIndex=sonusIsdnsgServiceGroupListIndex, sonusIsdnsgProfileName=sonusIsdnsgProfileName, sonusIsdnsgBchannelAdminState=sonusIsdnsgBchannelAdminState, sonusIsdnsgServiceGroupT309=sonusIsdnsgServiceGroupT309, sonusIsdnServiceGroupMIBObjects=sonusIsdnServiceGroupMIBObjects, sonusIsdnsgServiceGroupMode=sonusIsdnsgServiceGroupMode, sonusIsdnsgProfile=sonusIsdnsgProfile, sonusIsdnsgBchannelStatLocalMaint=sonusIsdnsgBchannelStatLocalMaint, sonusIsdnsgProfileNextIndex=sonusIsdnsgProfileNextIndex, sonusIsdnsgSwitchProfileT203=sonusIsdnsgSwitchProfileT203, sonusIsdnsgSwitchProfile=sonusIsdnsgSwitchProfile, sonusIsdnsgServiceGroupBchannelAvailabilitySignaling=sonusIsdnsgServiceGroupBchannelAvailabilitySignaling, sonusIsdnsgSwitchProfileK=sonusIsdnsgSwitchProfileK, sonusIsdnsgServiceGroupStatNumBchAvailable=sonusIsdnsgServiceGroupStatNumBchAvailable, sonusIsdnsgSwitchProfileT303=sonusIsdnsgSwitchProfileT303, sonusIsdnsgServiceGroupStatBackupDchInBytes=sonusIsdnsgServiceGroupStatBackupDchInBytes, sonusIsdnsgServiceGroupCallingPartySubAddressDelivery=sonusIsdnsgServiceGroupCallingPartySubAddressDelivery, sonusIsdnsgSwitchProfileN201=sonusIsdnsgSwitchProfileN201, sonusIsdnsgServiceGroupStatPrimaryDchOutBytes=sonusIsdnsgServiceGroupStatPrimaryDchOutBytes, sonusIsdnsgServiceGroupTrunkGroup=sonusIsdnsgServiceGroupTrunkGroup, sonusIsdnsgProfileMode=sonusIsdnsgProfileMode, sonusIsdnBChannelOutOfServiceNotification=sonusIsdnBChannelOutOfServiceNotification, sonusIsdnsgServiceGroupSwitchProfileName=sonusIsdnsgServiceGroupSwitchProfileName, sonusIsdnsgProfileListIndex=sonusIsdnsgProfileListIndex, sonusIsdnsgServiceGroupAdminState=sonusIsdnsgServiceGroupAdminState, sonusIsdnsgProfileCallingPartyNumberDelivery=sonusIsdnsgProfileCallingPartyNumberDelivery, sonusIsdnsgSwitchProfileT302=sonusIsdnsgSwitchProfileT302, sonusIsdnsgProfileTable=sonusIsdnsgProfileTable, sonusIsdnsgServiceGroupStatOutCallsActive=sonusIsdnsgServiceGroupStatOutCallsActive, sonusIsdnsgSwitchProfileT314=sonusIsdnsgSwitchProfileT314, sonusIsdnsgServiceGroupN200=sonusIsdnsgServiceGroupN200, sonusIsdnsgSwitchProfileBchannelInitialRestart=sonusIsdnsgSwitchProfileBchannelInitialRestart, sonusIsdnsgServiceGroupStatTgMode=sonusIsdnsgServiceGroupStatTgMode, sonusIsdnsgSwitchProfileSwitchSide=sonusIsdnsgSwitchProfileSwitchSide, sonusIsdnsgProfileCallingPartyNumberPresentation=sonusIsdnsgProfileCallingPartyNumberPresentation, sonusIsdnsgServiceGroupBackupDchannelMode=sonusIsdnsgServiceGroupBackupDchannelMode, sonusIsdnServiceGroupMIBNotificationsObjects=sonusIsdnServiceGroupMIBNotificationsObjects, sonusIsdnPrimaryDChannelInServiceNotification=sonusIsdnPrimaryDChannelInServiceNotification, sonusIsdnsgBchannelCircuitProfileName=sonusIsdnsgBchannelCircuitProfileName, sonusIsdnsgServiceGroupStatInCalls=sonusIsdnsgServiceGroupStatInCalls, sonusIsdnsgServiceGroupT308=sonusIsdnsgServiceGroupT308, sonusIsdnsgBchannelStatInterfaceIdentifier=sonusIsdnsgBchannelStatInterfaceIdentifier, sonusIsdnsgServiceGroupIuaAutoDatalinkEstablish=sonusIsdnsgServiceGroupIuaAutoDatalinkEstablish, sonusIsdnsgServiceGroupN201=sonusIsdnsgServiceGroupN201, sonusIsdnsgServiceGroupStatOutCalls=sonusIsdnsgServiceGroupStatOutCalls, sonusIsdnsgInterfaceTable=sonusIsdnsgInterfaceTable, sonusIsdnsgBchannelStatTable=sonusIsdnsgBchannelStatTable, sonusIsdnsgServiceGroupAction=sonusIsdnsgServiceGroupAction, sonusIsdnBackupDChannelOutOfServiceNotification=sonusIsdnBackupDChannelOutOfServiceNotification, sonusIsdnSvcGrpInServiceNotification=sonusIsdnSvcGrpInServiceNotification, sonusIsdnsgServiceGroupStatEntry=sonusIsdnsgServiceGroupStatEntry, sonusIsdnsgServiceGroupSwitchSide=sonusIsdnsgServiceGroupSwitchSide, sonusIsdnsgServiceGroupStatBackupDchOutBytes=sonusIsdnsgServiceGroupStatBackupDchOutBytes, sonusIsdnsgServiceGroupTonePackageName=sonusIsdnsgServiceGroupTonePackageName, sonusIsdnsgServiceGroupT302=sonusIsdnsgServiceGroupT302, sonusIsdnsgBchannelStatEntry=sonusIsdnsgBchannelStatEntry, sonusIsdnsgServiceGroupStatPrimaryDchannel=sonusIsdnsgServiceGroupStatPrimaryDchannel, sonusIsdnsgProfileEntry=sonusIsdnsgProfileEntry, sonusIsdnsgServiceGroupBackupDchannelInterface=sonusIsdnsgServiceGroupBackupDchannelInterface, sonusIsdnsgSwitchProfileName=sonusIsdnsgSwitchProfileName, sonusIsdnsgSwitchProfileT306=sonusIsdnsgSwitchProfileT306, sonusIsdnsgProfileAdminState=sonusIsdnsgProfileAdminState, sonusIsdnsgSwitchProfileT319=sonusIsdnsgSwitchProfileT319, sonusIsdnsgServiceGroupDefaultDirectoryNumber=sonusIsdnsgServiceGroupDefaultDirectoryNumber, sonusIsdnsgBchannelMode=sonusIsdnsgBchannelMode, sonusIsdnsgServiceGroupStatNumBchConfigured=sonusIsdnsgServiceGroupStatNumBchConfigured, sonusIsdnsgSwitchProfileT318=sonusIsdnsgSwitchProfileT318, sonusIsdnsgSwitchProfileEntry=sonusIsdnsgSwitchProfileEntry, sonusIsdnsgBchannelEntry=sonusIsdnsgBchannelEntry, sonusIsdnsgServiceGroupT312=sonusIsdnsgServiceGroupT312, sonusIsdnsgBchannelTimeout=sonusIsdnsgBchannelTimeout, sonusIsdnsgSwitchProfileT308=sonusIsdnsgSwitchProfileT308, sonusIsdnsgServiceGroupStatBackupDchOutPkts=sonusIsdnsgServiceGroupStatBackupDchOutPkts, sonusIsdnsgServiceGroupBchannelInitialRestart=sonusIsdnsgServiceGroupBchannelInitialRestart, sonusIsdnsgProfileCallingPartyNumberDiscard=sonusIsdnsgProfileCallingPartyNumberDiscard, sonusIsdnsgServiceGroupStatPrimaryDchInPkts=sonusIsdnsgServiceGroupStatPrimaryDchInPkts, sonusIsdnsgServiceGroupOperation=sonusIsdnsgServiceGroupOperation, sonusIsdnsgServiceGroupProfileName=sonusIsdnsgServiceGroupProfileName, sonusIsdnServiceGroupMIBNotifications=sonusIsdnServiceGroupMIBNotifications, sonusIsdnsgInterfaceIdentifier=sonusIsdnsgInterfaceIdentifier, sonusIsdnsgServiceGroupTimeout=sonusIsdnsgServiceGroupTimeout, sonusIsdnsgProfileHuntAlgorithm=sonusIsdnsgProfileHuntAlgorithm, sonusIsdnsgServiceGroupK=sonusIsdnsgServiceGroupK, sonusIsdnsgSwitchProfileNextIndex=sonusIsdnsgSwitchProfileNextIndex, sonusIsdnsgServiceGroupEntry=sonusIsdnsgServiceGroupEntry, sonusIsdnsgProfileSwitchProfile=sonusIsdnsgProfileSwitchProfile, sonusIsdnsgSwitchProfileBchannelAvailabilitySignaling=sonusIsdnsgSwitchProfileBchannelAvailabilitySignaling, sonusIsdnServiceGroupMIBNotificationsPrefix=sonusIsdnServiceGroupMIBNotificationsPrefix, sonusIsdnPrimaryDChannelOutOfServiceNotification=sonusIsdnPrimaryDChannelOutOfServiceNotification, sonusIsdnsgServiceGroupStatPrimaryDchInBytes=sonusIsdnsgServiceGroupStatPrimaryDchInBytes, sonusIsdnsgBchannelInterfaceIdentifier=sonusIsdnsgBchannelInterfaceIdentifier, sonusIsdnInterfaceId=sonusIsdnInterfaceId, sonusIsdnsgSwitchProfileListIndex=sonusIsdnsgSwitchProfileListIndex, sonusIsdnsgBchannelStatRemoteMaint=sonusIsdnsgBchannelStatRemoteMaint, sonusIsdnsgSwitchProfileT310=sonusIsdnsgSwitchProfileT310, sonusIsdnsgProfileCallingPartySubAddressDelivery=sonusIsdnsgProfileCallingPartySubAddressDelivery, sonusIsdnsgServiceGroupT200=sonusIsdnsgServiceGroupT200, sonusIsdnsgInterfacePortName=sonusIsdnsgInterfacePortName, sonusIsdnsgServiceGroupT203=sonusIsdnsgServiceGroupT203, sonusIsdnsgSwitchProfileN200=sonusIsdnsgSwitchProfileN200, sonusIsdnsgServiceGroupT306=sonusIsdnsgServiceGroupT306, sonusIsdnsgServiceGroupNextIndex=sonusIsdnsgServiceGroupNextIndex, sonusIsdnSvcGrpOutOfServiceNotification=sonusIsdnSvcGrpOutOfServiceNotification, sonusIsdnsgServiceGroupStatInCallsActive=sonusIsdnsgServiceGroupStatInCallsActive, sonusIsdnsgBchannelDirection=sonusIsdnsgBchannelDirection, sonusIsdnsgServiceGroupStatOutConnected=sonusIsdnsgServiceGroupStatOutConnected, sonusIsdnsgServiceGroupT314=sonusIsdnsgServiceGroupT314, sonusIsdnsgServiceGroup=sonusIsdnsgServiceGroup, sonusIsdnsgServiceGroupCallingPartyNumberProvision=sonusIsdnsgServiceGroupCallingPartyNumberProvision, sonusIsdnsgProfileSwitchSide=sonusIsdnsgProfileSwitchSide, sonusIsdnsgBchannelTable=sonusIsdnsgBchannelTable, sonusIsdnsgServiceGroupT313=sonusIsdnsgServiceGroupT313, sonusIsdnsgSwitchProfileAdminState=sonusIsdnsgSwitchProfileAdminState, sonusIsdnsgServiceGroupT310=sonusIsdnsgServiceGroupT310, sonusIsdnsgInterfaceRowStatus=sonusIsdnsgInterfaceRowStatus, sonusIsdnsgBchannelOperation=sonusIsdnsgBchannelOperation, sonusIsdnsgServiceGroupCallingPartySubAddressTransfer=sonusIsdnsgServiceGroupCallingPartySubAddressTransfer, sonusIsdnsgServiceGroupPrimaryDchannelMode=sonusIsdnsgServiceGroupPrimaryDchannelMode, sonusIsdnBChannelInServiceNotification=sonusIsdnBChannelInServiceNotification, sonusIsdnsgServiceGroupHuntAlgorithm=sonusIsdnsgServiceGroupHuntAlgorithm, sonusIsdnsgServiceGroupStatPrimaryDchOutPkts=sonusIsdnsgServiceGroupStatPrimaryDchOutPkts, sonusIsdnBchannelOffsets=sonusIsdnBchannelOffsets, sonusIsdnsgProfileDefaultDirectoryNumber=sonusIsdnsgProfileDefaultDirectoryNumber, sonusIsdnsgServiceGroupCost=sonusIsdnsgServiceGroupCost, sonusIsdnsgServiceGroupT305=sonusIsdnsgServiceGroupT305, sonusIsdnsgServiceGroupName=sonusIsdnsgServiceGroupName, sonusIsdnsgSwitchProfileT304=sonusIsdnsgSwitchProfileT304, sonusIsdnsgServiceGroupPrimaryDchannelInterface=sonusIsdnsgServiceGroupPrimaryDchannelInterface, PYSNMP_MODULE_ID=sonusIsdnServiceGroupMIB, sonusIsdnsgInterfaceServiceListIndex=sonusIsdnsgInterfaceServiceListIndex, sonusIsdnsgServiceGroupIuaApplicationServer=sonusIsdnsgServiceGroupIuaApplicationServer, sonusIsdnsgBchannelStatServiceListIndex=sonusIsdnsgBchannelStatServiceListIndex, sonusIsdnsgSwitchProfileTable=sonusIsdnsgSwitchProfileTable, sonusIsdnsgSwitchProfileT309=sonusIsdnsgSwitchProfileT309, sonusIsdnsgInterfaceAdminState=sonusIsdnsgInterfaceAdminState, sonusIsdnsgProfileCallingPartySubAddressTransfer=sonusIsdnsgProfileCallingPartySubAddressTransfer, sonusIsdnsgServiceGroupStatInConnected=sonusIsdnsgServiceGroupStatInConnected, sonusIsdnsgInterfaceEntry=sonusIsdnsgInterfaceEntry, sonusIsdnsgSwitchProfileT313=sonusIsdnsgSwitchProfileT313, sonusIsdnsgServiceGroupStatBackupDchInPkts=sonusIsdnsgServiceGroupStatBackupDchInPkts, sonusIsdnsgServiceGroupPrimaryDchannelTimeSlot=sonusIsdnsgServiceGroupPrimaryDchannelTimeSlot, sonusIsdnsgInterfaceOperation=sonusIsdnsgInterfaceOperation, sonusIsdnsgProfileCost=sonusIsdnsgProfileCost, sonusIsdnsgServiceGroupSwitchType=sonusIsdnsgServiceGroupSwitchType, sonusIsdnsgProfileRowStatus=sonusIsdnsgProfileRowStatus, sonusIsdnsgServiceGroupStatStatus=sonusIsdnsgServiceGroupStatStatus)
