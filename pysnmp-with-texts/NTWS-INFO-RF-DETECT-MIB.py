#
# PySNMP MIB module NTWS-INFO-RF-DETECT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NTWS-INFO-RF-DETECT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:43 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
NtwsChannelNum, NtwsRssi = mibBuilder.importSymbols("NTWS-AP-TC", "NtwsChannelNum", "NtwsRssi")
NtwsRFDetectClassificationReason, NtwsRFDetectNetworkingMode, NtwsRFDetectClassification = mibBuilder.importSymbols("NTWS-RF-DETECT-TC", "NtwsRFDetectClassificationReason", "NtwsRFDetectNetworkingMode", "NtwsRFDetectClassification")
ntwsMibs, = mibBuilder.importSymbols("NTWS-ROOT-MIB", "ntwsMibs")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
TimeTicks, NotificationType, IpAddress, ObjectIdentity, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Counter32, Integer32, Counter64, iso, Bits, MibIdentifier, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "NotificationType", "IpAddress", "ObjectIdentity", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Counter32", "Integer32", "Counter64", "iso", "Bits", "MibIdentifier", "Gauge32")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
ntwsInfoRFDetectMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9))
ntwsInfoRFDetectMib.setRevisions(('2007-09-25 00:12', '2007-06-27 00:11', '2007-04-18 00:10', '2006-10-11 00:03',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ntwsInfoRFDetectMib.setRevisionsDescriptions(('v1.2.1, MRT v1.2: Made changes in order to make MIB comply with corporate MIB conventions.', 'v1.2.0: Added one scalar: ntwsInfoRFDetectCurrentXmtrTableSize', 'v1.1.0: Added three new columnar objects: - ntwsInfoRFDetectXmtrNetworkingMode, - ntwsInfoRFDetectXmtrClassification, - ntwsInfoRFDetectXmtrClassificationReason', 'v1.0.3: Initial version',))
if mibBuilder.loadTexts: ntwsInfoRFDetectMib.setLastUpdated('200709250012Z')
if mibBuilder.loadTexts: ntwsInfoRFDetectMib.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: ntwsInfoRFDetectMib.setContactInfo('www.nortelnetworks.com')
if mibBuilder.loadTexts: ntwsInfoRFDetectMib.setDescription("RF Detect MIB. Copyright 2007 Nortel Networks. All rights reserved. This Nortel Networks SNMP Management Information Base Specification (Specification) embodies Nortel Networks' confidential and proprietary intellectual property. This Specification is supplied 'AS IS' and Nortel Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
ntwsInfoRFDetectObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1))
ntwsInfoRFDetectDataObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1))
ntwsInfoRFDetectXmtrTable = MibTable((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1), )
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrTable.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrTable.setDescription('Transmitter table. May contain tens of thousands of entries (different Transmitter-Listener-Channel combinations).')
ntwsInfoRFDetectXmtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1), ).setIndexNames((0, "NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrTransmitterMacAddress"), (0, "NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrListenerMacAddress"), (0, "NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrChannelNum"))
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrEntry.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrEntry.setDescription('Transmitter-Listener-Channel combination.')
ntwsInfoRFDetectXmtrTransmitterMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 1), MacAddress())
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrTransmitterMacAddress.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrTransmitterMacAddress.setDescription('The MAC Address of this Transmitter.')
ntwsInfoRFDetectXmtrListenerMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 2), MacAddress())
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrListenerMacAddress.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrListenerMacAddress.setDescription('The MAC Address of this Listener.')
ntwsInfoRFDetectXmtrChannelNum = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 3), NtwsChannelNum())
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrChannelNum.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrChannelNum.setDescription('Channel Number this transmitter was using when this listener detected it.')
ntwsInfoRFDetectXmtrRssi = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 4), NtwsRssi()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrRssi.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrRssi.setDescription('Received Signal Strength Indicator at this listener.')
ntwsInfoRFDetectXmtrSsid = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrSsid.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrSsid.setDescription('The service/SSID name this transmitter was using. Zero-length string when unknown or not applicable.')
ntwsInfoRFDetectXmtrNetworkingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 6), NtwsRFDetectNetworkingMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrNetworkingMode.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrNetworkingMode.setDescription('The way this transmitter is doing wireless networking: ad-hoc mode networking or infrastructure mode networking.')
ntwsInfoRFDetectXmtrClassification = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 7), NtwsRFDetectClassification()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrClassification.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrClassification.setDescription('The RF classification of this transmitter.')
ntwsInfoRFDetectXmtrClassificationReason = MibTableColumn((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 1, 1, 8), NtwsRFDetectClassificationReason()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrClassificationReason.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrClassificationReason.setDescription('The reason why this transmitter was classified by RF detection the way it is.')
ntwsInfoRFDetectCurrentXmtrTableSize = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ntwsInfoRFDetectCurrentXmtrTableSize.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectCurrentXmtrTableSize.setDescription('Current number of Transmitter-Listener-Channel combinations found and recorded by RF detection.')
ntwsInfoRFDetectConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 2))
ntwsInfoRFDetectCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 2, 1))
ntwsInfoRFDetectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 2, 2))
ntwsInfoRFDetectCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 2, 1, 1)).setObjects(("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrGroup"), ("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrClassificationGroup"), ("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectCurrentXmtrTableSizeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsInfoRFDetectCompliance = ntwsInfoRFDetectCompliance.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectCompliance.setDescription('The compliance statement for devices that implement the RF Detect MIB.')
ntwsInfoRFDetectXmtrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 2, 2, 1)).setObjects(("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrRssi"), ("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrSsid"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsInfoRFDetectXmtrGroup = ntwsInfoRFDetectXmtrGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrGroup.setDescription('Mandatory group of objects implemented to provide RF Detect Transmitter info.')
ntwsInfoRFDetectXmtrClassificationGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 2, 2, 2)).setObjects(("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrNetworkingMode"), ("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrClassification"), ("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectXmtrClassificationReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsInfoRFDetectXmtrClassificationGroup = ntwsInfoRFDetectXmtrClassificationGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectXmtrClassificationGroup.setDescription('Group of objects implemented to provide RF Detect Classification info. Introduced in 6.2 release.')
ntwsInfoRFDetectCurrentXmtrTableSizeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 9, 1, 2, 2, 3)).setObjects(("NTWS-INFO-RF-DETECT-MIB", "ntwsInfoRFDetectCurrentXmtrTableSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ntwsInfoRFDetectCurrentXmtrTableSizeGroup = ntwsInfoRFDetectCurrentXmtrTableSizeGroup.setStatus('current')
if mibBuilder.loadTexts: ntwsInfoRFDetectCurrentXmtrTableSizeGroup.setDescription('Group for one object that provides the current number of Transmitter-Listener-Channel combinations found and recorded by RF detection. Introduced in 6.2 release.')
mibBuilder.exportSymbols("NTWS-INFO-RF-DETECT-MIB", ntwsInfoRFDetectCompliance=ntwsInfoRFDetectCompliance, ntwsInfoRFDetectXmtrClassificationGroup=ntwsInfoRFDetectXmtrClassificationGroup, ntwsInfoRFDetectCompliances=ntwsInfoRFDetectCompliances, ntwsInfoRFDetectXmtrNetworkingMode=ntwsInfoRFDetectXmtrNetworkingMode, ntwsInfoRFDetectMib=ntwsInfoRFDetectMib, ntwsInfoRFDetectXmtrTable=ntwsInfoRFDetectXmtrTable, ntwsInfoRFDetectGroups=ntwsInfoRFDetectGroups, ntwsInfoRFDetectDataObjects=ntwsInfoRFDetectDataObjects, ntwsInfoRFDetectXmtrClassification=ntwsInfoRFDetectXmtrClassification, ntwsInfoRFDetectXmtrListenerMacAddress=ntwsInfoRFDetectXmtrListenerMacAddress, ntwsInfoRFDetectXmtrGroup=ntwsInfoRFDetectXmtrGroup, ntwsInfoRFDetectXmtrRssi=ntwsInfoRFDetectXmtrRssi, ntwsInfoRFDetectCurrentXmtrTableSize=ntwsInfoRFDetectCurrentXmtrTableSize, ntwsInfoRFDetectXmtrEntry=ntwsInfoRFDetectXmtrEntry, ntwsInfoRFDetectConformance=ntwsInfoRFDetectConformance, ntwsInfoRFDetectXmtrSsid=ntwsInfoRFDetectXmtrSsid, ntwsInfoRFDetectCurrentXmtrTableSizeGroup=ntwsInfoRFDetectCurrentXmtrTableSizeGroup, ntwsInfoRFDetectXmtrTransmitterMacAddress=ntwsInfoRFDetectXmtrTransmitterMacAddress, PYSNMP_MODULE_ID=ntwsInfoRFDetectMib, ntwsInfoRFDetectXmtrChannelNum=ntwsInfoRFDetectXmtrChannelNum, ntwsInfoRFDetectXmtrClassificationReason=ntwsInfoRFDetectXmtrClassificationReason, ntwsInfoRFDetectObjects=ntwsInfoRFDetectObjects)
