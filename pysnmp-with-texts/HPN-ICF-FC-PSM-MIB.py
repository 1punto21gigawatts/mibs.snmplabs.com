#
# PySNMP MIB module HPN-ICF-FC-PSM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPN-ICF-FC-PSM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:38:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
HpnicfFcNameIdOrZero, = mibBuilder.importSymbols("HPN-ICF-FC-TC-MIB", "HpnicfFcNameIdOrZero")
hpnicfSan, = mibBuilder.importSymbols("HPN-ICF-VSAN-MIB", "hpnicfSan")
ifDescr, InterfaceIndexOrZero, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifDescr", "InterfaceIndexOrZero", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, NotificationType, Bits, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, MibIdentifier, IpAddress, TimeTicks, Integer32, ModuleIdentity, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "NotificationType", "Bits", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "MibIdentifier", "IpAddress", "TimeTicks", "Integer32", "ModuleIdentity", "iso", "Counter32")
TruthValue, RowStatus, TextualConvention, TimeStamp, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "TimeStamp", "DisplayString")
hpnicfFcPsm = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8))
hpnicfFcPsm.setRevisions(('2013-10-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpnicfFcPsm.setRevisionsDescriptions(('HPN-ICF-FC-PSM-MIB module is for managing the implementation of FC port security.',))
if mibBuilder.loadTexts: hpnicfFcPsm.setLastUpdated('201310170000Z')
if mibBuilder.loadTexts: hpnicfFcPsm.setOrganization('')
if mibBuilder.loadTexts: hpnicfFcPsm.setContactInfo('')
if mibBuilder.loadTexts: hpnicfFcPsm.setDescription('This MIB contains the objects for FC port security.')
hpnicfFcPsmNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 0))
hpnicfFcPsmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1))
hpnicfFcPsmScalarObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 1))
hpnicfFcPsmConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2))
hpnicfFcPsmStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3))
class HpnicfFcPsmPortBindDevType(TextualConvention, Integer32):
    description = 'The types of the instance of hpnicfFcPsmLoginDev, including nWWN(Node World Wide Name), pWWN(Port World Wide Name), sWWN(Switch World Wide Name), and wildCard.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("nWWN", 1), ("pWWN", 2), ("sWWN", 3), ("wildCard", 4))

class HpnicfFcPsmClearEntryType(TextualConvention, Integer32):
    description = 'This object when set to clearStatic, results in port bind static entries being cleared on this VSAN(Virtual Storage Area Networks). This object when set to clearAutoLearn, results in port bind auto-learnt entries being cleared on this VSAN. This object when set to clearAll, results in all of the port bind entries being cleared on this VSAN. No action is taken if this object is set to noop. The value of this object when read is always noop.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("clearStatic", 1), ("clearAutoLearn", 2), ("clearAll", 3), ("noop", 4))

hpnicfFcPsmNotifyEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfFcPsmNotifyEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmNotifyEnable.setDescription('Whether to generate the notification or not depends on the object.')
hpnicfFcPsmEnableTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 1), )
if mibBuilder.loadTexts: hpnicfFcPsmEnableTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmEnableTable.setDescription('Enable or disable the port security feature on a specified VSAN.')
hpnicfFcPsmEnableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 1, 1), ).setIndexNames((0, "HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmEnableVsanIndex"))
if mibBuilder.loadTexts: hpnicfFcPsmEnableEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmEnableEntry.setDescription('Detailed information about the port security.')
hpnicfFcPsmEnableVsanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095)))
if mibBuilder.loadTexts: hpnicfFcPsmEnableVsanIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmEnableVsanIndex.setDescription('The ID of VSAN on this entry.')
hpnicfFcPsmEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("enable", 1), ("enableWithAutoLearn", 2), ("disable", 3), ("noop", 4))).clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfFcPsmEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmEnable.setDescription('When set to enable, the port security is on, the value of hpnicfFcPsmEnableState will be true. When set to enableWithAutoLearn, the port security is on with auto-learning, the value of hpnicfFcPsmEnableState will be true. When set to disable, the port security is off, the value of hpnicfFcPsmEnableState will be false. The noop means no action. The value of this object when read is always noop.')
hpnicfFcPsmEnableState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 1, 1, 3), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPsmEnableState.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmEnableState.setDescription('The state of the port security. When the value is true, it means the port security is on, while the false means the port security is off.')
hpnicfFcPsmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 2), )
if mibBuilder.loadTexts: hpnicfFcPsmConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmConfigTable.setDescription('A table that contains the configured entries.')
hpnicfFcPsmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 2, 1), ).setIndexNames((0, "HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmEnableVsanIndex"), (0, "HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmIndex"))
if mibBuilder.loadTexts: hpnicfFcPsmConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmConfigEntry.setDescription('Detailed information about each configuration.')
hpnicfFcPsmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768)))
if mibBuilder.loadTexts: hpnicfFcPsmIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmIndex.setDescription('The index of this entry.')
hpnicfFcPsmLoginDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 2, 1, 2), HpnicfFcPsmPortBindDevType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFcPsmLoginDevType.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmLoginDevType.setDescription('This represents the type of the instance of hpnicfFcPsmLoginDev, which includes nWWN, pWWN, sWWN, and wildCard.')
hpnicfFcPsmLoginDev = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 2, 1, 3), HpnicfFcNameIdOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFcPsmLoginDev.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmLoginDev.setDescription('The logging-in device name, which is decided by the hpnicfFcPsmLoginDevType object. It represents node WWN when the value of hpnicfFcPsmLoginDevType is nWWN. It represents port WWN when the value of hpnicfFcPsmLoginDevType is pWWN. It represents switch WWN when the value of hpnicfFcPsmLoginDevType is sWWN. It represents any device when the value of hpnicfFcPsmLoginDevType is wildCard, and the value of the instance of this object should be zero-length string. The value of this object should not be invalid when hpnicfFcPsmRowStatus is set to createAndGo or active.')
hpnicfFcPsmLoginPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 2, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFcPsmLoginPoint.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmLoginPoint.setDescription('The address of the port on the local switch through which the instance of hpnicfFcPsmLoginDev can log in. It represents ifindex when the value is not zero. It represents any port when the value is zero.')
hpnicfFcPsmRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpnicfFcPsmRowStatus.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmRowStatus.setDescription('Entry status. When creating a new instance of this table, the following objects should be set simultaneously: hpnicfFcPsmLoginDevType, h3cFcPsmLoginDev, hpnicfFcPsmLoginPoint, hpnicfFcPsmRowStatus. If hpnicfFcPsmLoginDevType is set to wildCard, the value of the instance of hpnicfFcPsmLoginDev should be zero-length string. The value of hpnicfFcPsmLoginDevType and hpnicfFcPsmLoginPoint cannot be set to wildCard and zero at the same time.')
hpnicfFcPsmEnfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 3), )
if mibBuilder.loadTexts: hpnicfFcPsmEnfTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmEnfTable.setDescription('The FC port security enforced table. It contains not only the configured policies, but also the learning ones learnt by the switch itself.')
hpnicfFcPsmEnfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 3, 1), ).setIndexNames((0, "HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmEnableVsanIndex"), (0, "HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmEnfIndex"))
if mibBuilder.loadTexts: hpnicfFcPsmEnfEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmEnfEntry.setDescription('Detailed information about the FC port security enforced policy.')
hpnicfFcPsmEnfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768)))
if mibBuilder.loadTexts: hpnicfFcPsmEnfIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmEnfIndex.setDescription('The index of this entry.')
hpnicfFcPsmEnfLoginDevType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 3, 1, 2), HpnicfFcPsmPortBindDevType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPsmEnfLoginDevType.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmEnfLoginDevType.setDescription('This represents the type of the instance of hpnicfFcPsmEnfLoginDev, which includes nWWN, pWWN, sWWN, and wildCard.')
hpnicfFcPsmEnfLoginDev = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 3, 1, 3), HpnicfFcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPsmEnfLoginDev.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmEnfLoginDev.setDescription('The logging-in device name, which is decided by the hpnicfFcPsmEnfLoginDevType object. It represents node WWN when the value of hpnicfFcPsmEnfLoginDevType is nWWN. It represents port WWN when the value of hpnicfFcPsmEnfLoginDevType is pWWN. It represents switch WWN when the value of hpnicfFcPsmEnfLoginDevType is sWWN. It represents any device when the value of hpnicfFcPsmEnfLoginDevType is wildCard, and the value of the instance of this object should be zero-length string.')
hpnicfFcPsmEnfLoginPoint = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 3, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPsmEnfLoginPoint.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmEnfLoginPoint.setDescription('The address of the port on the local switch through which the instance of hpnicfFcPsmEnfLoginDev can log in. It represents ifindex when the value is not zero. It represents any port when the value is zero.')
hpnicfFcPsmEnfEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("learning", 1), ("learnt", 2), ("static", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPsmEnfEntryType.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmEnfEntryType.setDescription('When the value is learning, it represents the entry is learnt by the switch itself temporarily and will be deleted when the device log out. When the value is learnt, it represents the entry is learnt by the switch permanently. When the value is static, it represents the entry is configured.')
hpnicfFcPsmCopyToConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 4), )
if mibBuilder.loadTexts: hpnicfFcPsmCopyToConfigTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmCopyToConfigTable.setDescription('Specifies whether to copy the entries from enforced table to the ones on configured table.')
hpnicfFcPsmCopyToConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 4, 1), ).setIndexNames((0, "HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmEnableVsanIndex"))
if mibBuilder.loadTexts: hpnicfFcPsmCopyToConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmCopyToConfigEntry.setDescription('Detailed information about the operation.')
hpnicfFcPsmCopyToConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copy", 1), ("noop", 2))).clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfFcPsmCopyToConfig.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmCopyToConfig.setDescription('When the object is set to copy, the learned entries will be copied on to the configured table on this VSAN, while the noop means no operation. The value of this object when read is always noop.')
hpnicfFcPsmAutoLearnTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 5), )
if mibBuilder.loadTexts: hpnicfFcPsmAutoLearnTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmAutoLearnTable.setDescription('This table shows whether the auto-learning is enabled or not on specific VSANs.')
hpnicfFcPsmAutoLearnEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 5, 1), ).setIndexNames((0, "HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmEnableVsanIndex"))
if mibBuilder.loadTexts: hpnicfFcPsmAutoLearnEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmAutoLearnEntry.setDescription('Detailed information about the auto-learning.')
hpnicfFcPsmAutoLearnEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 5, 1, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfFcPsmAutoLearnEnable.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmAutoLearnEnable.setDescription('This object is set to true to enable, or false to disable auto-learning on the local switch. When set to true, the switch can learn the devices that have already logged in as learning entries on the enforced table, while the false can stop the learning operation with the learning entries transformed to learnt ones.')
hpnicfFcPsmClearTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 6), )
if mibBuilder.loadTexts: hpnicfFcPsmClearTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmClearTable.setDescription('This table is used for cleaning specific entries in enforced table.')
hpnicfFcPsmClearEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 6, 1), ).setIndexNames((0, "HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmEnableVsanIndex"))
if mibBuilder.loadTexts: hpnicfFcPsmClearEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmClearEntry.setDescription('Detailed information about the cleaning options.')
hpnicfFcPsmClearType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 6, 1, 1), HpnicfFcPsmClearEntryType().clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfFcPsmClearType.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmClearType.setDescription('This object when set to clearStatic, results in port bind static entries being cleared on this VSAN. This object when set to clearAutoLearn, results in auto-learnt entries being cleared on this VSAN. This object when set to clearAll, results in all of the port bind entries being cleared on this VSAN. No action is taken if this object is set to noop. The value of this object when read is always noop.')
hpnicfFcPsmClearIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 2, 6, 1, 2), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfFcPsmClearIntf.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmClearIntf.setDescription('The object specifies the interface on which the entries will be cleared. If the object is zero or not set, it means the specified entries on all interfaces will be cleared.')
hpnicfFcPsmStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3, 1), )
if mibBuilder.loadTexts: hpnicfFcPsmStatsTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmStatsTable.setDescription('This table contains statistics of devices, which had been allowed or denied to log into the switch.')
hpnicfFcPsmStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3, 1, 1), ).setIndexNames((0, "HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmEnableVsanIndex"))
if mibBuilder.loadTexts: hpnicfFcPsmStatsEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmStatsEntry.setDescription('Detailed information about the statistics.')
hpnicfFcPsmAllowedLogins = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPsmAllowedLogins.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmAllowedLogins.setDescription('The number of requests that have been allowed on the specified VSAN.')
hpnicfFcPsmDeniedLogins = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPsmDeniedLogins.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmDeniedLogins.setDescription('The number of requests that have been denied on the specified VSAN.')
hpnicfFcPsmStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("noop", 2))).clone('noop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpnicfFcPsmStatsClear.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmStatsClear.setDescription('The statistics on this VSAN will be cleared if this object is set to clear. No action is taken if this object is set to noop. The value of this object when read is always noop.')
hpnicfFcPsmViolationTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3, 2), )
if mibBuilder.loadTexts: hpnicfFcPsmViolationTable.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmViolationTable.setDescription('This table maintains the information about the violations happened, containing at most 1024 items. When the number exceeds 1024, the earliest item will be over-written.')
hpnicfFcPsmViolationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3, 2, 1), ).setIndexNames((0, "HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmEnableVsanIndex"), (0, "HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmViolationIndex"))
if mibBuilder.loadTexts: hpnicfFcPsmViolationEntry.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmViolationEntry.setDescription('Detailed information about the violation.')
hpnicfFcPsmViolationIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024)))
if mibBuilder.loadTexts: hpnicfFcPsmViolationIndex.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmViolationIndex.setDescription('The index of this entry. The entry is uniquely distinguished by WWN, WWN type and ifindex where the login was denied.')
hpnicfFcPsmLoginPWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3, 2, 1, 2), HpnicfFcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPsmLoginPWWN.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmLoginPWWN.setDescription('The pWWN of the device whose FLOGI(Fabric Login) request had been denied. If the device is an n-node, the value of the instance of hpnicfFcPsmLoginSWWN should be zero-length string.')
hpnicfFcPsmLoginNWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3, 2, 1, 3), HpnicfFcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPsmLoginNWWN.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmLoginNWWN.setDescription('The nWWN of the device whose FLOGI request had been denied. If the device is an n-node, the value of the instance of hpnicfFcPsmLoginSWWN should be zero-length string.')
hpnicfFcPsmLoginSWWN = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3, 2, 1, 4), HpnicfFcNameIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPsmLoginSWWN.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmLoginSWWN.setDescription('The sWWN of the device whose FLOGI request had been denied. If the device is a switch, the values of the instance of hpnicfFcPsmLoginPWWN and hpnicfFcPsmLoginNWWN should be zero-length string.')
hpnicfFcPsmLoginIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3, 2, 1, 5), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPsmLoginIntf.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmLoginIntf.setDescription('The ifindex of the port where the login was denied.')
hpnicfFcPsmLoginTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3, 2, 1, 6), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPsmLoginTime.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmLoginTime.setDescription('Specifies the value of SysUpTime when the last denied login happened.')
hpnicfFcPsmLoginCount = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 1, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpnicfFcPsmLoginCount.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmLoginCount.setDescription('The number of times for a certain nWWN/pWWN or sWWN had been denied to log into an interface of the local device.')
hpnicfFcPsmFPortDenyNotify = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 0, 1)).setObjects(("IF-MIB", "ifDescr"), ("HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmLoginPWWN"), ("HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmLoginIntf"), ("HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmLoginTime"))
if mibBuilder.loadTexts: hpnicfFcPsmFPortDenyNotify.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmFPortDenyNotify.setDescription('Notifies that a FLOGI is denied on an F port of the local device.')
hpnicfFcPsmEPortDenyNotify = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 15, 2, 127, 8, 0, 2)).setObjects(("IF-MIB", "ifDescr"), ("HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmLoginSWWN"), ("HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmLoginIntf"), ("HPN-ICF-FC-PSM-MIB", "hpnicfFcPsmLoginTime"))
if mibBuilder.loadTexts: hpnicfFcPsmEPortDenyNotify.setStatus('current')
if mibBuilder.loadTexts: hpnicfFcPsmEPortDenyNotify.setDescription('Notifies that a switch is denied on an E port of the local device.')
mibBuilder.exportSymbols("HPN-ICF-FC-PSM-MIB", hpnicfFcPsmClearIntf=hpnicfFcPsmClearIntf, hpnicfFcPsmStats=hpnicfFcPsmStats, hpnicfFcPsmClearType=hpnicfFcPsmClearType, hpnicfFcPsmLoginDevType=hpnicfFcPsmLoginDevType, hpnicfFcPsmClearTable=hpnicfFcPsmClearTable, hpnicfFcPsmEnfIndex=hpnicfFcPsmEnfIndex, hpnicfFcPsmConfiguration=hpnicfFcPsmConfiguration, hpnicfFcPsmStatsTable=hpnicfFcPsmStatsTable, hpnicfFcPsmConfigTable=hpnicfFcPsmConfigTable, hpnicfFcPsmEnable=hpnicfFcPsmEnable, hpnicfFcPsmLoginPWWN=hpnicfFcPsmLoginPWWN, hpnicfFcPsmEnfTable=hpnicfFcPsmEnfTable, hpnicfFcPsmLoginTime=hpnicfFcPsmLoginTime, hpnicfFcPsmEnfLoginPoint=hpnicfFcPsmEnfLoginPoint, hpnicfFcPsmClearEntry=hpnicfFcPsmClearEntry, hpnicfFcPsmIndex=hpnicfFcPsmIndex, HpnicfFcPsmPortBindDevType=HpnicfFcPsmPortBindDevType, hpnicfFcPsmCopyToConfigEntry=hpnicfFcPsmCopyToConfigEntry, hpnicfFcPsmLoginNWWN=hpnicfFcPsmLoginNWWN, hpnicfFcPsm=hpnicfFcPsm, hpnicfFcPsmAutoLearnTable=hpnicfFcPsmAutoLearnTable, hpnicfFcPsmEnfEntryType=hpnicfFcPsmEnfEntryType, hpnicfFcPsmEnfLoginDevType=hpnicfFcPsmEnfLoginDevType, hpnicfFcPsmEnableVsanIndex=hpnicfFcPsmEnableVsanIndex, hpnicfFcPsmViolationTable=hpnicfFcPsmViolationTable, hpnicfFcPsmLoginPoint=hpnicfFcPsmLoginPoint, hpnicfFcPsmScalarObjects=hpnicfFcPsmScalarObjects, hpnicfFcPsmViolationIndex=hpnicfFcPsmViolationIndex, hpnicfFcPsmLoginDev=hpnicfFcPsmLoginDev, hpnicfFcPsmNotifyEnable=hpnicfFcPsmNotifyEnable, hpnicfFcPsmDeniedLogins=hpnicfFcPsmDeniedLogins, hpnicfFcPsmCopyToConfig=hpnicfFcPsmCopyToConfig, hpnicfFcPsmObjects=hpnicfFcPsmObjects, hpnicfFcPsmEnfEntry=hpnicfFcPsmEnfEntry, hpnicfFcPsmViolationEntry=hpnicfFcPsmViolationEntry, hpnicfFcPsmConfigEntry=hpnicfFcPsmConfigEntry, PYSNMP_MODULE_ID=hpnicfFcPsm, hpnicfFcPsmEnfLoginDev=hpnicfFcPsmEnfLoginDev, hpnicfFcPsmLoginIntf=hpnicfFcPsmLoginIntf, hpnicfFcPsmEnableTable=hpnicfFcPsmEnableTable, hpnicfFcPsmEnableEntry=hpnicfFcPsmEnableEntry, hpnicfFcPsmFPortDenyNotify=hpnicfFcPsmFPortDenyNotify, hpnicfFcPsmNotifications=hpnicfFcPsmNotifications, hpnicfFcPsmAutoLearnEnable=hpnicfFcPsmAutoLearnEnable, hpnicfFcPsmLoginCount=hpnicfFcPsmLoginCount, hpnicfFcPsmAllowedLogins=hpnicfFcPsmAllowedLogins, hpnicfFcPsmEnableState=hpnicfFcPsmEnableState, hpnicfFcPsmAutoLearnEntry=hpnicfFcPsmAutoLearnEntry, hpnicfFcPsmRowStatus=hpnicfFcPsmRowStatus, hpnicfFcPsmLoginSWWN=hpnicfFcPsmLoginSWWN, hpnicfFcPsmStatsEntry=hpnicfFcPsmStatsEntry, hpnicfFcPsmStatsClear=hpnicfFcPsmStatsClear, hpnicfFcPsmCopyToConfigTable=hpnicfFcPsmCopyToConfigTable, HpnicfFcPsmClearEntryType=HpnicfFcPsmClearEntryType, hpnicfFcPsmEPortDenyNotify=hpnicfFcPsmEPortDenyNotify)
