#
# PySNMP MIB module DDN-WOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DDN-WOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:37:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter64, ObjectIdentity, IpAddress, Bits, Counter32, Unsigned32, Gauge32, iso, Integer32, NotificationType, MibIdentifier, ModuleIdentity, TimeTicks, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "ObjectIdentity", "IpAddress", "Bits", "Counter32", "Unsigned32", "Gauge32", "iso", "Integer32", "NotificationType", "MibIdentifier", "ModuleIdentity", "TimeTicks", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DateAndTime, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "DisplayString", "TextualConvention")
wosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6894, 4, 1))
wosMIB.setRevisions(('2012-01-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wosMIB.setRevisionsDescriptions(('First release.',))
if mibBuilder.loadTexts: wosMIB.setLastUpdated('201201040000Z')
if mibBuilder.loadTexts: wosMIB.setOrganization('DataDirect Networks, Inc.')
if mibBuilder.loadTexts: wosMIB.setContactInfo('DataDirect Networks, Inc. Phone: 1 800 TERABYTE Email: support@ddn.com')
if mibBuilder.loadTexts: wosMIB.setDescription('SMI v2 MIB module for WOS (Web Object Scalar).')
datadirect = MibIdentifier((1, 3, 6, 1, 4, 1, 6894))
wos = MibIdentifier((1, 3, 6, 1, 4, 1, 6894, 4))
class WosSeverityLevel(TextualConvention, Integer32):
    description = 'Specifies the severity level of an event: emergency: A panic condition - notify all tech staff on call. alert: Should be corrected immediately - notify staff who can fix the problem - e.g. drive down alert. critical: Should be corrected immediately. Indicates failure in a primary system - fix CRITICAL problems before ALERT error: Non-urgent failures - these should be relayed to developers or admins - each item must be resolved within a given time. warning: Warning messages - not an error, but indication that an error will occur if action is not taken - e.g. cluster capacity is 70% used - each item must be resolved within a given time. notice: Events that are unusual but not error conditions - might be summarized in an email to developers or admins to spot potential problems - no immediate action required. informational: Normal operational messages - may be harvested for reporting, measuring throughput, etc - no action required. debug: Info useful to developers for debugging the application - not useful during operations.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("emergency", 1), ("alert", 2), ("critical", 3), ("error", 4), ("warning", 5), ("notice", 6), ("informational", 7), ("debug", 8))

class WosSyslogFacility(TextualConvention, Integer32):
    description = 'The syslog standard Facilities (from RFC 3164). user (1) - random user-level messages mail (2) - mail system daemon (3) - system daemons auth (4) - security/authorization messages syslog (5) - messages generated internally by syslogd lpr (6) - line printer subsystem news (7) - network news subsystem uucp (8) - UUCP subsystem cron (9) - clock daemon authpriv (10) - security/authorization messages (private) ftp (11) - ftp daemon local0 (16) - reserved for local use local1 (17) - reserved for local use local2 (18) - reserved for local use local3 (19) - reserved for local use local4 (20) - reserved for local use local5 (21) - reserved for local use local6 (22) - reserved for local use local7 (23) - reserved for local use'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 16, 17, 18, 19, 20, 21, 22, 23))
    namedValues = NamedValues(("user", 1), ("mail", 2), ("daemon", 3), ("auth", 4), ("syslog", 5), ("lpr", 6), ("news", 7), ("uucp", 8), ("cron", 9), ("authpriv", 10), ("ftp", 11), ("local0", 16), ("local1", 17), ("local2", 18), ("local3", 19), ("local4", 20), ("local5", 21), ("local6", 22), ("local7", 23))

wosNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6894, 4, 1, 0))
wosObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1))
wosConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6894, 4, 1, 2))
wosNotificationInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 1))
wosStatsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 2))
wosAlertsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 3))
wosClusterInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4))
wosZonesInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 5))
wosNodesInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6))
wosPoliciesInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7))
wosPrefsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8))
wosTrapDesc = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 1, 1), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wosTrapDesc.setStatus('current')
if mibBuilder.loadTexts: wosTrapDesc.setDescription('Description of the notification.')
wosTrapSeverity = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 1, 2), WosSeverityLevel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wosTrapSeverity.setStatus('current')
if mibBuilder.loadTexts: wosTrapSeverity.setDescription('Severity of the notification. emergency: A panic condition - notify all tech staff on call. alert: Should be corrected immediately - notify staff who can fix the problem - e.g. drive down alert. critical: Should be corrected immediately. Indicates failure in a primary system - fix CRITICAL problems before ALERT error: Non-urgent failures - these should be relayed to developers or admins - each item must be resolved within a given time. warning: Warning messages - not an error, but indication that an error will occur if action is not taken - e.g. cluster capacity is 70% used - each item must be resolved within a given time. notice: Events that are unusual but not error conditions - might be summarized in an email to developers or admins to spot potential problems - no immediate action required. informational: Normal operational messages - may be harvested for reporting, measuring throughput, etc - no action required. debug: Info useful to developers for debugging the application - not useful during operations.')
wosTrapType = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wosTrapType.setStatus('current')
if mibBuilder.loadTexts: wosTrapType.setDescription('Identifies the type of the notification.')
wosTrapLocation = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 1, 4), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wosTrapLocation.setStatus('current')
if mibBuilder.loadTexts: wosTrapLocation.setDescription('A location pertaining to the notification (node IP address, cluster name, zone name, etc.)')
wosStatsFRPS = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 2, 1), Gauge32()).setUnits('file reads per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosStatsFRPS.setStatus('current')
if mibBuilder.loadTexts: wosStatsFRPS.setDescription('Object read rate in file reads per second.')
wosStatsFWPS = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 2, 2), Gauge32()).setUnits('file writes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosStatsFWPS.setStatus('current')
if mibBuilder.loadTexts: wosStatsFWPS.setDescription('Object write rate in file writes per second.')
wosStatsFDPS = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 2, 3), Gauge32()).setUnits('file deletes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosStatsFDPS.setStatus('current')
if mibBuilder.loadTexts: wosStatsFDPS.setDescription('Object delete rate in file deletes per second.')
wosStatsReadLatency = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 2, 4), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosStatsReadLatency.setStatus('current')
if mibBuilder.loadTexts: wosStatsReadLatency.setDescription('Object read latency in milliseconds.')
wosStatsWriteLatency = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 2, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosStatsWriteLatency.setStatus('current')
if mibBuilder.loadTexts: wosStatsWriteLatency.setDescription('Object write latency in milliseconds.')
wosStatsDeleteLatency = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 2, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosStatsDeleteLatency.setStatus('current')
if mibBuilder.loadTexts: wosStatsDeleteLatency.setDescription('Object delete latency in milliseconds.')
wosStatsReadThroughput = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 2, 7), Gauge32()).setUnits('kilobytes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosStatsReadThroughput.setStatus('current')
if mibBuilder.loadTexts: wosStatsReadThroughput.setDescription('Object read throughput.')
wosStatsWriteThroughput = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 2, 8), Gauge32()).setUnits('kilobytes per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosStatsWriteThroughput.setStatus('current')
if mibBuilder.loadTexts: wosStatsWriteThroughput.setDescription('Object write throughput.')
wosStatsReadCount = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 2, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosStatsReadCount.setStatus('current')
if mibBuilder.loadTexts: wosStatsReadCount.setDescription('Total number of read transactions since the last cluster restart.')
wosStatsWriteCount = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 2, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosStatsWriteCount.setStatus('current')
if mibBuilder.loadTexts: wosStatsWriteCount.setDescription('Total number of write transactions since the last cluster restart.')
wosStatsDeleteCount = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 2, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosStatsDeleteCount.setStatus('current')
if mibBuilder.loadTexts: wosStatsDeleteCount.setDescription('Total number of delete transactions since the last cluster restart.')
wosAlertTable = MibTable((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 3, 1), )
if mibBuilder.loadTexts: wosAlertTable.setStatus('current')
if mibBuilder.loadTexts: wosAlertTable.setDescription('Table containing cluster alerts.')
wosAlertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 3, 1, 1), ).setIndexNames((0, "DDN-WOS-MIB", "wosAlertIndex"))
if mibBuilder.loadTexts: wosAlertEntry.setStatus('current')
if mibBuilder.loadTexts: wosAlertEntry.setDescription('An entry in wosAlertTable.')
wosAlertIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 3, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wosAlertIndex.setStatus('current')
if mibBuilder.loadTexts: wosAlertIndex.setDescription('Alert table index. The most recent alert is assigned starting at index 1, and older alerts are assigned indices in ascending order.')
wosAlertSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 3, 1, 1, 2), WosSeverityLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosAlertSeverity.setStatus('current')
if mibBuilder.loadTexts: wosAlertSeverity.setDescription('Severity of the alert. emergency: A panic condition - notify all tech staff on call. alert: Should be corrected immediately - notify staff who can fix the problem - e.g. drive down alert. critical: Should be corrected immediately. Indicates failure in a primary system - fix CRITICAL problems before ALERT error: Non-urgent failures - these should be relayed to developers or admins - each item must be resolved within a given time. warning: Warning messages - not an error, but indication that an error will occur if action is not taken - e.g. cluster capacity is 70% used - each item must be resolved within a given time. notice: Events that are unusual but not error conditions - might be summarized in an email to developers or admins to spot potential problems - no immediate action required. informational: Normal operational messages - may be harvested for reporting, measuring throughput, etc - no action required. debug: Info useful to developers for debugging the application - not useful during operations.')
wosAlertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 3, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosAlertTime.setStatus('current')
if mibBuilder.loadTexts: wosAlertTime.setDescription('Date and time the alert was generated.')
wosAlertType = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 3, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosAlertType.setStatus('current')
if mibBuilder.loadTexts: wosAlertType.setDescription('Identifies the type of the alert.')
wosAlertLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 3, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosAlertLocation.setStatus('current')
if mibBuilder.loadTexts: wosAlertLocation.setDescription('A location pertaining to the alert (node IP address, cluster name, zone name, etc.)')
wosAlertDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 3, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosAlertDesc.setStatus('current')
if mibBuilder.loadTexts: wosAlertDesc.setDescription('Description of the alert.')
wosClusterName = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosClusterName.setStatus('current')
if mibBuilder.loadTexts: wosClusterName.setDescription('The name of the cluster.')
wosClusterId = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosClusterId.setStatus('current')
if mibBuilder.loadTexts: wosClusterId.setDescription('The ID number of the cluster.')
wosClusterStatus = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosClusterStatus.setStatus('current')
if mibBuilder.loadTexts: wosClusterStatus.setDescription('The cluster status.')
wosClusterPrimaryNodeAddressType = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosClusterPrimaryNodeAddressType.setStatus('current')
if mibBuilder.loadTexts: wosClusterPrimaryNodeAddressType.setDescription('The IP address type of the primary cluster node.')
wosClusterPrimaryNodeAddress = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosClusterPrimaryNodeAddress.setStatus('current')
if mibBuilder.loadTexts: wosClusterPrimaryNodeAddress.setDescription('The IP address of the cluster primary node. Refer to wosClusterPrimaryNodeAddress to determine the address type.')
wosClusterTotalNodeCount = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosClusterTotalNodeCount.setStatus('current')
if mibBuilder.loadTexts: wosClusterTotalNodeCount.setDescription('The total number of nodes in the cluster.')
wosClusterActiveNodeCount = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosClusterActiveNodeCount.setStatus('current')
if mibBuilder.loadTexts: wosClusterActiveNodeCount.setDescription('The number of nodes in the cluster that are active.')
wosClusterDisconnectedNodeCount = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosClusterDisconnectedNodeCount.setStatus('current')
if mibBuilder.loadTexts: wosClusterDisconnectedNodeCount.setDescription('Then number of nodes in the cluster that are disconnected.')
wosClusterConnectedClientsCount = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosClusterConnectedClientsCount.setStatus('current')
if mibBuilder.loadTexts: wosClusterConnectedClientsCount.setDescription('The number of active client connections to the cluster.')
wosClusterObjectCountLow = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosClusterObjectCountLow.setStatus('current')
if mibBuilder.loadTexts: wosClusterObjectCountLow.setDescription('The total number of objects stored in the cluster. Together with wosClusterObjectCountHigh this composes a 64-bit number.')
wosClusterObjectCountHigh = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosClusterObjectCountHigh.setStatus('current')
if mibBuilder.loadTexts: wosClusterObjectCountHigh.setDescription('The total number of objects stored in the cluster. Together with wosClusterObjectCountLow this composes a 64-bit number.')
wosClusterUsableCapacity = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4, 12), Unsigned32()).setUnits('gigabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosClusterUsableCapacity.setStatus('current')
if mibBuilder.loadTexts: wosClusterUsableCapacity.setDescription('The usable capacity of the cluster.')
wosClusterUsedCapacity = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4, 13), Unsigned32()).setUnits('gigabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosClusterUsedCapacity.setStatus('current')
if mibBuilder.loadTexts: wosClusterUsedCapacity.setDescription('The used capacity of the cluster.')
wosClusterFreeCapacity = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 4, 14), Unsigned32()).setUnits('gigabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosClusterFreeCapacity.setStatus('current')
if mibBuilder.loadTexts: wosClusterFreeCapacity.setDescription('Total free capacity of the cluster.')
wosZoneTable = MibTable((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 5, 1), )
if mibBuilder.loadTexts: wosZoneTable.setStatus('current')
if mibBuilder.loadTexts: wosZoneTable.setDescription('Table containing cluster zones.')
wosZoneEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 5, 1, 1), ).setIndexNames((0, "DDN-WOS-MIB", "wosZoneId"))
if mibBuilder.loadTexts: wosZoneEntry.setStatus('current')
if mibBuilder.loadTexts: wosZoneEntry.setDescription('An entry in wosZoneTable.')
wosZoneId = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wosZoneId.setStatus('current')
if mibBuilder.loadTexts: wosZoneId.setDescription('An integer that uniquely identifies the zone in the cluster and is the index value for wosZoneTable entries.')
wosZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 5, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosZoneName.setStatus('current')
if mibBuilder.loadTexts: wosZoneName.setDescription('The name of the zone.')
wosZoneNodeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosZoneNodeCount.setStatus('current')
if mibBuilder.loadTexts: wosZoneNodeCount.setDescription('The number of nodes accepted into the zone.')
wosNodeTable = MibTable((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 1), )
if mibBuilder.loadTexts: wosNodeTable.setStatus('current')
if mibBuilder.loadTexts: wosNodeTable.setDescription('Table containing cluster nodes.')
wosNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 1, 1), ).setIndexNames((0, "DDN-WOS-MIB", "wosZoneId"), (0, "DDN-WOS-MIB", "wosNodeIndex"))
if mibBuilder.loadTexts: wosNodeEntry.setStatus('current')
if mibBuilder.loadTexts: wosNodeEntry.setDescription('An entry in wosNodeTable.')
wosNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wosNodeIndex.setStatus('current')
if mibBuilder.loadTexts: wosNodeIndex.setDescription('An arbitrary integer used as the index value for wosNodeTable entries. The index value can change at any time.')
wosNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeName.setStatus('current')
if mibBuilder.loadTexts: wosNodeName.setDescription('The node name.')
wosNodeAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 1, 1, 3), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeAddressType.setStatus('current')
if mibBuilder.loadTexts: wosNodeAddressType.setDescription('The IP address type of the node.')
wosNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 1, 1, 4), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeAddress.setStatus('current')
if mibBuilder.loadTexts: wosNodeAddress.setDescription('The IP address of the node. Refer to wosNodeAddressType to determine the address type.')
wosNodeZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeZoneName.setStatus('current')
if mibBuilder.loadTexts: wosNodeZoneName.setDescription('The name of the zone that the node belongs to.')
wosNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeStatus.setStatus('current')
if mibBuilder.loadTexts: wosNodeStatus.setDescription('The status of the node (e.g. active, connecting, etc.).')
wosNodeFwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeFwVersion.setStatus('current')
if mibBuilder.loadTexts: wosNodeFwVersion.setDescription("The version number of the node's firmware.")
wosNodeObjectCountLow = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 1, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeObjectCountLow.setStatus('current')
if mibBuilder.loadTexts: wosNodeObjectCountLow.setDescription('The total number of objects stored on the node. Together with wosNodeObjectCountHigh this composes a 64-bit number.')
wosNodeObjectCountHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeObjectCountHigh.setStatus('current')
if mibBuilder.loadTexts: wosNodeObjectCountHigh.setDescription('The total number of objects stored on the node. Together with wosNodeObjectCountLow this composes a 64-bit number.')
wosNodeTotalCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 1, 1, 10), Unsigned32()).setUnits('gigabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeTotalCapacity.setStatus('current')
if mibBuilder.loadTexts: wosNodeTotalCapacity.setDescription('The total capacity of the node.')
wosNodeUsedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 1, 1, 11), Unsigned32()).setUnits('gigabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeUsedCapacity.setStatus('current')
if mibBuilder.loadTexts: wosNodeUsedCapacity.setDescription('The used capacity of the node.')
wosNodePercentFull = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 1, 1, 12), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodePercentFull.setStatus('current')
if mibBuilder.loadTexts: wosNodePercentFull.setDescription('The used capacity of the node as a percentage of the total capacity.')
wosPendingNodeTable = MibTable((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 2), )
if mibBuilder.loadTexts: wosPendingNodeTable.setStatus('current')
if mibBuilder.loadTexts: wosPendingNodeTable.setDescription('Table containing pending nodes.')
wosPendingNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 2, 1), ).setIndexNames((0, "DDN-WOS-MIB", "wosPendingNodeIndex"))
if mibBuilder.loadTexts: wosPendingNodeEntry.setStatus('current')
if mibBuilder.loadTexts: wosPendingNodeEntry.setDescription('An entry in wosPendingNodeTable.')
wosPendingNodeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wosPendingNodeIndex.setStatus('current')
if mibBuilder.loadTexts: wosPendingNodeIndex.setDescription('An arbitrary integer used as the index value for wosPendingNodeTable entries. The index value can change at any time.')
wosPendingNodeAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPendingNodeAddressType.setStatus('current')
if mibBuilder.loadTexts: wosPendingNodeAddressType.setDescription('The IP address type of the pending node.')
wosPendingNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPendingNodeAddress.setStatus('current')
if mibBuilder.loadTexts: wosPendingNodeAddress.setDescription('The IP address of the pending node. Refer to wosPendingNodeAddressType to determine the address type.')
wosPendingNodeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPendingNodeStatus.setStatus('current')
if mibBuilder.loadTexts: wosPendingNodeStatus.setDescription('The status of the pending node (e.g. pending, pending (upgrading), etc.).')
wosNodeDriveTable = MibTable((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 3), )
if mibBuilder.loadTexts: wosNodeDriveTable.setStatus('current')
if mibBuilder.loadTexts: wosNodeDriveTable.setDescription("Table containing details about a node's disk drives.")
wosNodeDriveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 3, 1), ).setIndexNames((0, "DDN-WOS-MIB", "wosNodeAddressType"), (0, "DDN-WOS-MIB", "wosNodeAddress"), (0, "DDN-WOS-MIB", "wosNodeDriveSlotNbr"))
if mibBuilder.loadTexts: wosNodeDriveEntry.setStatus('current')
if mibBuilder.loadTexts: wosNodeDriveEntry.setDescription('An entry in wosNodeDriveTable.')
wosNodeDriveSlotNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wosNodeDriveSlotNbr.setStatus('current')
if mibBuilder.loadTexts: wosNodeDriveSlotNbr.setDescription('The slot number of the node that the drive is installed in.')
wosNodeDriveNodeName = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeDriveNodeName.setStatus('current')
if mibBuilder.loadTexts: wosNodeDriveNodeName.setDescription('The name of the node that the drive is installed in.')
wosNodeDriveMfgr = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeDriveMfgr.setStatus('current')
if mibBuilder.loadTexts: wosNodeDriveMfgr.setDescription('The drive manufacturer.')
wosNodeDriveModel = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeDriveModel.setStatus('current')
if mibBuilder.loadTexts: wosNodeDriveModel.setDescription('The drive model number.')
wosNodeDriveSerialNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeDriveSerialNbr.setStatus('current')
if mibBuilder.loadTexts: wosNodeDriveSerialNbr.setDescription('The drive serial number.')
wosNodeDriveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeDriveStatus.setStatus('current')
if mibBuilder.loadTexts: wosNodeDriveStatus.setDescription('The status of the drive (e.g. down, not present, etc.).')
wosNodeDriveCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 6, 3, 1, 7), Unsigned32()).setUnits('gigabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosNodeDriveCapacity.setStatus('current')
if mibBuilder.loadTexts: wosNodeDriveCapacity.setDescription('The total capacity of the drive.')
wosPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1), )
if mibBuilder.loadTexts: wosPolicyTable.setStatus('current')
if mibBuilder.loadTexts: wosPolicyTable.setDescription('Table containing policies.')
wosPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1, 1), ).setIndexNames((0, "DDN-WOS-MIB", "wosPolicyIndex"), (0, "DDN-WOS-MIB", "wosPolicyReplicaIndex"))
if mibBuilder.loadTexts: wosPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: wosPolicyEntry.setDescription('An entry in wosPolicyTable.')
wosPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wosPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: wosPolicyIndex.setDescription('An arbitrary integer used as an index value for wosPolicyTable entries. The index value can change at any time.')
wosPolicyReplicaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: wosPolicyReplicaIndex.setStatus('current')
if mibBuilder.loadTexts: wosPolicyReplicaIndex.setDescription('An integer used as an index value for a zone replica in wosPolicyTable entries. The first zone replica in a policy is assigned starting at index 1 and the remaining zone replicas are assigned indices in ascending order.')
wosPolicyId = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPolicyId.setStatus('current')
if mibBuilder.loadTexts: wosPolicyId.setDescription('The ID number of the policy.')
wosPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPolicyName.setStatus('current')
if mibBuilder.loadTexts: wosPolicyName.setDescription('The name of the policy.')
wosPolicyReplicaZoneName = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPolicyReplicaZoneName.setStatus('current')
if mibBuilder.loadTexts: wosPolicyReplicaZoneName.setDescription('The name of the zone containing replicas for the policy.')
wosPolicyReplicaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPolicyReplicaCount.setStatus('current')
if mibBuilder.loadTexts: wosPolicyReplicaCount.setDescription('The number of replicas in the zone for the policy.')
wosPolicyReplicationType = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPolicyReplicationType.setStatus('current')
if mibBuilder.loadTexts: wosPolicyReplicationType.setDescription('The replication type of the policy.')
wosPolicyLocalDataProtection = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPolicyLocalDataProtection.setStatus('current')
if mibBuilder.loadTexts: wosPolicyLocalDataProtection.setDescription('True if local data protection is enabled for the policy.')
wosPolicyObjCountLow = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPolicyObjCountLow.setStatus('current')
if mibBuilder.loadTexts: wosPolicyObjCountLow.setDescription('The total number of objects stored against the policy. Together with wosPolicyObjCountHigh this composes a 64-bit number.')
wosPolicyObjCountHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPolicyObjCountHigh.setStatus('current')
if mibBuilder.loadTexts: wosPolicyObjCountHigh.setDescription('The total number of objects stored against the policy. Together with wosPolicyObjCountLow this composes a 64-bit number.')
wosPolicyNonComplObjCountLow = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPolicyNonComplObjCountLow.setStatus('current')
if mibBuilder.loadTexts: wosPolicyNonComplObjCountLow.setDescription('The total number of non-compliant objects stored against the policy. Together with wosPolicyObjCountHigh this composes a 64-bit number.')
wosPolicyNonComplObjCountHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPolicyNonComplObjCountHigh.setStatus('current')
if mibBuilder.loadTexts: wosPolicyNonComplObjCountHigh.setDescription('The total number of non-compliant objects stored against the policy. Together with wosPolicyObjCountLow this composes a 64-bit number.')
wosPolicyUsedCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 7, 1, 1, 13), Unsigned32()).setUnits('gigabytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPolicyUsedCapacity.setStatus('current')
if mibBuilder.loadTexts: wosPolicyUsedCapacity.setDescription('The total capacity used by the policy.')
wosPrefStoreUnderReplObjs = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPrefStoreUnderReplObjs.setStatus('current')
if mibBuilder.loadTexts: wosPrefStoreUnderReplObjs.setDescription('True if storage of under-replicated objects is allowed.')
wosPrefNodeDownDelay = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 2), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPrefNodeDownDelay.setStatus('current')
if mibBuilder.loadTexts: wosPrefNodeDownDelay.setDescription('The node down delay time.')
wosPrefEmailAlertNewInterval = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 3), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPrefEmailAlertNewInterval.setStatus('current')
if mibBuilder.loadTexts: wosPrefEmailAlertNewInterval.setDescription('The minimum delay time between notifications of new alerts.')
wosPrefEmailAlertRmndrInterval = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 4), Unsigned32()).setUnits('minutes').setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPrefEmailAlertRmndrInterval.setStatus('current')
if mibBuilder.loadTexts: wosPrefEmailAlertRmndrInterval.setDescription('The minimum delay time between reminders of existing alerts.')
wosPrefEmailAlertFromAddr = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPrefEmailAlertFromAddr.setStatus('current')
if mibBuilder.loadTexts: wosPrefEmailAlertFromAddr.setDescription('The From address for email alerts.')
wosPrefEmailAlertRecipientTable = MibTable((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 6), )
if mibBuilder.loadTexts: wosPrefEmailAlertRecipientTable.setStatus('current')
if mibBuilder.loadTexts: wosPrefEmailAlertRecipientTable.setDescription('Table containing email alert recipients.')
wosPrefEmailAlertRecipientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 6, 1), ).setIndexNames((0, "DDN-WOS-MIB", "wosPrefEmailAlertRecipientIndex"))
if mibBuilder.loadTexts: wosPrefEmailAlertRecipientEntry.setStatus('current')
if mibBuilder.loadTexts: wosPrefEmailAlertRecipientEntry.setDescription('An entry in wosPrefEmailAlertRecipientTable.')
wosPrefEmailAlertRecipientIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wosPrefEmailAlertRecipientIndex.setStatus('current')
if mibBuilder.loadTexts: wosPrefEmailAlertRecipientIndex.setDescription('Email alert table index.')
wosPrefEmailAlertRecipient = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 6, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPrefEmailAlertRecipient.setStatus('current')
if mibBuilder.loadTexts: wosPrefEmailAlertRecipient.setDescription('The email alert recipient.')
wosPrefEmailAlertServerTable = MibTable((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 7), )
if mibBuilder.loadTexts: wosPrefEmailAlertServerTable.setStatus('current')
if mibBuilder.loadTexts: wosPrefEmailAlertServerTable.setDescription('Table containing outgoing email servers for email alerts.')
wosPrefEmailAlertServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 7, 1), ).setIndexNames((0, "DDN-WOS-MIB", "wosPrefEmailAlertServerIndex"))
if mibBuilder.loadTexts: wosPrefEmailAlertServerEntry.setStatus('current')
if mibBuilder.loadTexts: wosPrefEmailAlertServerEntry.setDescription('An entry in wosPrefEmailAlertServerTable.')
wosPrefEmailAlertServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 7, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wosPrefEmailAlertServerIndex.setStatus('current')
if mibBuilder.loadTexts: wosPrefEmailAlertServerIndex.setDescription('Email alert server table index.')
wosPrefEmailAlertServer = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPrefEmailAlertServer.setStatus('current')
if mibBuilder.loadTexts: wosPrefEmailAlertServer.setDescription('The outgoing email server for email alerts.')
wosPrefSnmpManagerTable = MibTable((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 8), )
if mibBuilder.loadTexts: wosPrefSnmpManagerTable.setStatus('current')
if mibBuilder.loadTexts: wosPrefSnmpManagerTable.setDescription('Table containing SNMP managers.')
wosPrefSnmpManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 8, 1), ).setIndexNames((0, "DDN-WOS-MIB", "wosPrefSnmpManagerIndex"))
if mibBuilder.loadTexts: wosPrefSnmpManagerEntry.setStatus('current')
if mibBuilder.loadTexts: wosPrefSnmpManagerEntry.setDescription('An entry in wosPrefSnmpManagerTable.')
wosPrefSnmpManagerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 8, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wosPrefSnmpManagerIndex.setStatus('current')
if mibBuilder.loadTexts: wosPrefSnmpManagerIndex.setDescription('SNMP Manager table index.')
wosPrefSnmpManager = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 8, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPrefSnmpManager.setStatus('current')
if mibBuilder.loadTexts: wosPrefSnmpManager.setDescription('The SNMP manager.')
wosPrefSnmpTrapCommunityName = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPrefSnmpTrapCommunityName.setStatus('current')
if mibBuilder.loadTexts: wosPrefSnmpTrapCommunityName.setDescription('The community name for the SNMP traps.')
wosPrefMgmtIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 10), )
if mibBuilder.loadTexts: wosPrefMgmtIpFilterTable.setStatus('current')
if mibBuilder.loadTexts: wosPrefMgmtIpFilterTable.setDescription('Table containing management IP filters.')
wosPrefMgmtIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 10, 1), ).setIndexNames((0, "DDN-WOS-MIB", "wosPrefMgmtIpFilterIndex"))
if mibBuilder.loadTexts: wosPrefMgmtIpFilterEntry.setStatus('current')
if mibBuilder.loadTexts: wosPrefMgmtIpFilterEntry.setDescription('An entry in wosPrefMgmtIpFilterTable.')
wosPrefMgmtIpFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 10, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wosPrefMgmtIpFilterIndex.setStatus('current')
if mibBuilder.loadTexts: wosPrefMgmtIpFilterIndex.setDescription('Management IP filter table index.')
wosPrefMgmtIpFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 10, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPrefMgmtIpFilter.setStatus('current')
if mibBuilder.loadTexts: wosPrefMgmtIpFilter.setDescription('The management IP filter.')
wosPrefClientIpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 11), )
if mibBuilder.loadTexts: wosPrefClientIpFilterTable.setStatus('current')
if mibBuilder.loadTexts: wosPrefClientIpFilterTable.setDescription('Table containing client I/O IP filters.')
wosPrefClientIpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 11, 1), ).setIndexNames((0, "DDN-WOS-MIB", "wosPrefClientIpFilterIndex"))
if mibBuilder.loadTexts: wosPrefClientIpFilterEntry.setStatus('current')
if mibBuilder.loadTexts: wosPrefClientIpFilterEntry.setDescription('An entry in wosPrefClientIpFilterTable.')
wosPrefClientIpFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 11, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wosPrefClientIpFilterIndex.setStatus('current')
if mibBuilder.loadTexts: wosPrefClientIpFilterIndex.setDescription('Client I/O IP filter table index.')
wosPrefClientIpFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 11, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPrefClientIpFilter.setStatus('current')
if mibBuilder.loadTexts: wosPrefClientIpFilter.setDescription('The client I/O IP filter.')
wosPrefSyslogFacility = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 12), WosSyslogFacility()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPrefSyslogFacility.setStatus('current')
if mibBuilder.loadTexts: wosPrefSyslogFacility.setDescription('The Syslog Facility. user (1) - random user-level messages mail (2) - mail system daemon (3) - system daemons auth (4) - security/authorization messages syslog (5) - messages generated internally by syslogd lpr (6) - line printer subsystem news (7) - network news subsystem uucp (8) - UUCP subsystem cron (9) - clock daemon authpriv (10) - security/authorization messages (private) ftp (11) - ftp daemon local0 (16) - reserved for local use local1 (17) - reserved for local use local2 (18) - reserved for local use local3 (19) - reserved for local use local4 (20) - reserved for local use local5 (21) - reserved for local use local6 (22) - reserved for local use local7 (23) - reserved for local use')
wosPrefSyslogRemoteHost = MibScalar((1, 3, 6, 1, 4, 1, 6894, 4, 1, 1, 8, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wosPrefSyslogRemoteHost.setStatus('current')
if mibBuilder.loadTexts: wosPrefSyslogRemoteHost.setDescription('The remote syslog host.')
wosTrapMessage = NotificationType((1, 3, 6, 1, 4, 1, 6894, 4, 1, 0, 1)).setObjects(("DDN-WOS-MIB", "wosTrapSeverity"), ("DDN-WOS-MIB", "wosTrapType"), ("DDN-WOS-MIB", "wosTrapLocation"), ("DDN-WOS-MIB", "wosTrapDesc"))
if mibBuilder.loadTexts: wosTrapMessage.setStatus('current')
if mibBuilder.loadTexts: wosTrapMessage.setDescription('This notification is sent whenever a cluster alert is generated.')
wosCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6894, 4, 1, 2, 1))
wosGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6894, 4, 1, 2, 2))
wosCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6894, 4, 1, 2, 1, 1)).setObjects(("DDN-WOS-MIB", "wosEventsGroup"), ("DDN-WOS-MIB", "wosNotificationsGroup"), ("DDN-WOS-MIB", "wosStatsGroup"), ("DDN-WOS-MIB", "wosAlertsGroup"), ("DDN-WOS-MIB", "wosClusterGroup"), ("DDN-WOS-MIB", "wosZonesGroup"), ("DDN-WOS-MIB", "wosNodesGroup"), ("DDN-WOS-MIB", "wosPoliciesGroup"), ("DDN-WOS-MIB", "wosPrefsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wosCompliance = wosCompliance.setStatus('current')
if mibBuilder.loadTexts: wosCompliance.setDescription('The compliance statement for WOS nodes implementing the DDN-WOS-MIB.')
wosEventsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6894, 4, 1, 2, 2, 1)).setObjects(("DDN-WOS-MIB", "wosTrapMessage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wosEventsGroup = wosEventsGroup.setStatus('current')
if mibBuilder.loadTexts: wosEventsGroup.setDescription('This groups defines the set of notification types.')
wosNotificationsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6894, 4, 1, 2, 2, 2)).setObjects(("DDN-WOS-MIB", "wosTrapDesc"), ("DDN-WOS-MIB", "wosTrapSeverity"), ("DDN-WOS-MIB", "wosTrapType"), ("DDN-WOS-MIB", "wosTrapLocation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wosNotificationsGroup = wosNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: wosNotificationsGroup.setDescription('This group defines the set of notification objects.')
wosStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6894, 4, 1, 2, 2, 3)).setObjects(("DDN-WOS-MIB", "wosStatsFRPS"), ("DDN-WOS-MIB", "wosStatsFWPS"), ("DDN-WOS-MIB", "wosStatsFDPS"), ("DDN-WOS-MIB", "wosStatsReadLatency"), ("DDN-WOS-MIB", "wosStatsWriteLatency"), ("DDN-WOS-MIB", "wosStatsDeleteLatency"), ("DDN-WOS-MIB", "wosStatsReadThroughput"), ("DDN-WOS-MIB", "wosStatsWriteThroughput"), ("DDN-WOS-MIB", "wosStatsReadCount"), ("DDN-WOS-MIB", "wosStatsWriteCount"), ("DDN-WOS-MIB", "wosStatsDeleteCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wosStatsGroup = wosStatsGroup.setStatus('current')
if mibBuilder.loadTexts: wosStatsGroup.setDescription('This group defines the set of statistics objects.')
wosAlertsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6894, 4, 1, 2, 2, 4)).setObjects(("DDN-WOS-MIB", "wosAlertSeverity"), ("DDN-WOS-MIB", "wosAlertTime"), ("DDN-WOS-MIB", "wosAlertType"), ("DDN-WOS-MIB", "wosAlertLocation"), ("DDN-WOS-MIB", "wosAlertDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wosAlertsGroup = wosAlertsGroup.setStatus('current')
if mibBuilder.loadTexts: wosAlertsGroup.setDescription('This group defines the set of alert objects.')
wosClusterGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6894, 4, 1, 2, 2, 5)).setObjects(("DDN-WOS-MIB", "wosClusterName"), ("DDN-WOS-MIB", "wosClusterId"), ("DDN-WOS-MIB", "wosClusterStatus"), ("DDN-WOS-MIB", "wosClusterPrimaryNodeAddressType"), ("DDN-WOS-MIB", "wosClusterPrimaryNodeAddress"), ("DDN-WOS-MIB", "wosClusterTotalNodeCount"), ("DDN-WOS-MIB", "wosClusterActiveNodeCount"), ("DDN-WOS-MIB", "wosClusterDisconnectedNodeCount"), ("DDN-WOS-MIB", "wosClusterConnectedClientsCount"), ("DDN-WOS-MIB", "wosClusterObjectCountLow"), ("DDN-WOS-MIB", "wosClusterObjectCountHigh"), ("DDN-WOS-MIB", "wosClusterUsableCapacity"), ("DDN-WOS-MIB", "wosClusterUsedCapacity"), ("DDN-WOS-MIB", "wosClusterFreeCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wosClusterGroup = wosClusterGroup.setStatus('current')
if mibBuilder.loadTexts: wosClusterGroup.setDescription('This group defines the set of cluster objects.')
wosZonesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6894, 4, 1, 2, 2, 6)).setObjects(("DDN-WOS-MIB", "wosZoneName"), ("DDN-WOS-MIB", "wosZoneNodeCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wosZonesGroup = wosZonesGroup.setStatus('current')
if mibBuilder.loadTexts: wosZonesGroup.setDescription('This group defines the set of zone objects.')
wosNodesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6894, 4, 1, 2, 2, 7)).setObjects(("DDN-WOS-MIB", "wosNodeName"), ("DDN-WOS-MIB", "wosNodeAddressType"), ("DDN-WOS-MIB", "wosNodeAddress"), ("DDN-WOS-MIB", "wosNodeZoneName"), ("DDN-WOS-MIB", "wosNodeStatus"), ("DDN-WOS-MIB", "wosNodeFwVersion"), ("DDN-WOS-MIB", "wosNodeObjectCountLow"), ("DDN-WOS-MIB", "wosNodeObjectCountHigh"), ("DDN-WOS-MIB", "wosNodeTotalCapacity"), ("DDN-WOS-MIB", "wosNodeUsedCapacity"), ("DDN-WOS-MIB", "wosNodePercentFull"), ("DDN-WOS-MIB", "wosPendingNodeAddressType"), ("DDN-WOS-MIB", "wosPendingNodeAddress"), ("DDN-WOS-MIB", "wosPendingNodeStatus"), ("DDN-WOS-MIB", "wosNodeDriveNodeName"), ("DDN-WOS-MIB", "wosNodeDriveMfgr"), ("DDN-WOS-MIB", "wosNodeDriveModel"), ("DDN-WOS-MIB", "wosNodeDriveSerialNbr"), ("DDN-WOS-MIB", "wosNodeDriveStatus"), ("DDN-WOS-MIB", "wosNodeDriveCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wosNodesGroup = wosNodesGroup.setStatus('current')
if mibBuilder.loadTexts: wosNodesGroup.setDescription('This group defines the set of node objects.')
wosPoliciesGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6894, 4, 1, 2, 2, 8)).setObjects(("DDN-WOS-MIB", "wosPolicyId"), ("DDN-WOS-MIB", "wosPolicyName"), ("DDN-WOS-MIB", "wosPolicyReplicaZoneName"), ("DDN-WOS-MIB", "wosPolicyReplicaCount"), ("DDN-WOS-MIB", "wosPolicyReplicationType"), ("DDN-WOS-MIB", "wosPolicyLocalDataProtection"), ("DDN-WOS-MIB", "wosPolicyObjCountLow"), ("DDN-WOS-MIB", "wosPolicyObjCountHigh"), ("DDN-WOS-MIB", "wosPolicyNonComplObjCountLow"), ("DDN-WOS-MIB", "wosPolicyNonComplObjCountHigh"), ("DDN-WOS-MIB", "wosPolicyUsedCapacity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wosPoliciesGroup = wosPoliciesGroup.setStatus('current')
if mibBuilder.loadTexts: wosPoliciesGroup.setDescription('This group defines the set of policy objects.')
wosPrefsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6894, 4, 1, 2, 2, 9)).setObjects(("DDN-WOS-MIB", "wosPrefStoreUnderReplObjs"), ("DDN-WOS-MIB", "wosPrefNodeDownDelay"), ("DDN-WOS-MIB", "wosPrefEmailAlertNewInterval"), ("DDN-WOS-MIB", "wosPrefEmailAlertRmndrInterval"), ("DDN-WOS-MIB", "wosPrefEmailAlertFromAddr"), ("DDN-WOS-MIB", "wosPrefEmailAlertRecipient"), ("DDN-WOS-MIB", "wosPrefEmailAlertServer"), ("DDN-WOS-MIB", "wosPrefSnmpManager"), ("DDN-WOS-MIB", "wosPrefSnmpTrapCommunityName"), ("DDN-WOS-MIB", "wosPrefMgmtIpFilter"), ("DDN-WOS-MIB", "wosPrefClientIpFilter"), ("DDN-WOS-MIB", "wosPrefSyslogFacility"), ("DDN-WOS-MIB", "wosPrefSyslogRemoteHost"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    wosPrefsGroup = wosPrefsGroup.setStatus('current')
if mibBuilder.loadTexts: wosPrefsGroup.setDescription('This group defines the set of preferences objects.')
mibBuilder.exportSymbols("DDN-WOS-MIB", wosStatsFRPS=wosStatsFRPS, wosStatsFDPS=wosStatsFDPS, wosNodeDriveSerialNbr=wosNodeDriveSerialNbr, wosPrefEmailAlertNewInterval=wosPrefEmailAlertNewInterval, wosStatsGroup=wosStatsGroup, wosTrapLocation=wosTrapLocation, wosTrapDesc=wosTrapDesc, wosClusterDisconnectedNodeCount=wosClusterDisconnectedNodeCount, wosTrapMessage=wosTrapMessage, wosPrefNodeDownDelay=wosPrefNodeDownDelay, wosPolicyReplicaIndex=wosPolicyReplicaIndex, wosGroups=wosGroups, wosStatsDeleteCount=wosStatsDeleteCount, wosPolicyObjCountLow=wosPolicyObjCountLow, wosPrefEmailAlertServerTable=wosPrefEmailAlertServerTable, wosPrefMgmtIpFilterEntry=wosPrefMgmtIpFilterEntry, wosPrefSyslogRemoteHost=wosPrefSyslogRemoteHost, wosClusterUsedCapacity=wosClusterUsedCapacity, wosNodeAddress=wosNodeAddress, wosNodeName=wosNodeName, wosPendingNodeTable=wosPendingNodeTable, wosPolicyReplicationType=wosPolicyReplicationType, wosStatsInfo=wosStatsInfo, wosStatsReadLatency=wosStatsReadLatency, wosPrefEmailAlertRecipientIndex=wosPrefEmailAlertRecipientIndex, wosPolicyLocalDataProtection=wosPolicyLocalDataProtection, wosPrefEmailAlertRmndrInterval=wosPrefEmailAlertRmndrInterval, wosZoneName=wosZoneName, wosPendingNodeEntry=wosPendingNodeEntry, wosPrefSnmpManagerTable=wosPrefSnmpManagerTable, wosNodeDriveStatus=wosNodeDriveStatus, wosPrefEmailAlertRecipientEntry=wosPrefEmailAlertRecipientEntry, wosPrefMgmtIpFilterTable=wosPrefMgmtIpFilterTable, wosPrefMgmtIpFilter=wosPrefMgmtIpFilter, wosNodeZoneName=wosNodeZoneName, wosStatsReadThroughput=wosStatsReadThroughput, wosPrefClientIpFilter=wosPrefClientIpFilter, wosPrefsGroup=wosPrefsGroup, wosAlertTime=wosAlertTime, WosSyslogFacility=WosSyslogFacility, wosAlertsGroup=wosAlertsGroup, wosNodeObjectCountLow=wosNodeObjectCountLow, wosPendingNodeStatus=wosPendingNodeStatus, wosZoneId=wosZoneId, wosPrefEmailAlertServerIndex=wosPrefEmailAlertServerIndex, wosNodesInfo=wosNodesInfo, wosPoliciesGroup=wosPoliciesGroup, wosNodeEntry=wosNodeEntry, wosAlertEntry=wosAlertEntry, wosTrapType=wosTrapType, wosClusterObjectCountLow=wosClusterObjectCountLow, wosPolicyNonComplObjCountLow=wosPolicyNonComplObjCountLow, wosClusterConnectedClientsCount=wosClusterConnectedClientsCount, wosNotifications=wosNotifications, wosStatsWriteCount=wosStatsWriteCount, wos=wos, wosNodeTotalCapacity=wosNodeTotalCapacity, wosClusterPrimaryNodeAddress=wosClusterPrimaryNodeAddress, wosObjects=wosObjects, datadirect=datadirect, wosClusterStatus=wosClusterStatus, wosPrefEmailAlertServerEntry=wosPrefEmailAlertServerEntry, wosAlertIndex=wosAlertIndex, wosPolicyName=wosPolicyName, wosPolicyTable=wosPolicyTable, wosZonesInfo=wosZonesInfo, wosPendingNodeAddressType=wosPendingNodeAddressType, wosPrefSnmpManagerIndex=wosPrefSnmpManagerIndex, wosPrefEmailAlertRecipientTable=wosPrefEmailAlertRecipientTable, wosZoneTable=wosZoneTable, wosZonesGroup=wosZonesGroup, wosAlertsInfo=wosAlertsInfo, wosStatsWriteThroughput=wosStatsWriteThroughput, wosNodeDriveCapacity=wosNodeDriveCapacity, wosPrefClientIpFilterTable=wosPrefClientIpFilterTable, wosPolicyUsedCapacity=wosPolicyUsedCapacity, wosAlertDesc=wosAlertDesc, wosNodesGroup=wosNodesGroup, wosPendingNodeAddress=wosPendingNodeAddress, wosNodeDriveSlotNbr=wosNodeDriveSlotNbr, wosNodeDriveMfgr=wosNodeDriveMfgr, wosPrefSyslogFacility=wosPrefSyslogFacility, wosClusterFreeCapacity=wosClusterFreeCapacity, wosNodeTable=wosNodeTable, wosPrefsInfo=wosPrefsInfo, wosNodeDriveModel=wosNodeDriveModel, wosNodeDriveTable=wosNodeDriveTable, wosPrefSnmpManagerEntry=wosPrefSnmpManagerEntry, wosTrapSeverity=wosTrapSeverity, wosPolicyNonComplObjCountHigh=wosPolicyNonComplObjCountHigh, wosStatsReadCount=wosStatsReadCount, wosCompliances=wosCompliances, wosPolicyIndex=wosPolicyIndex, wosStatsDeleteLatency=wosStatsDeleteLatency, wosMIB=wosMIB, wosPrefEmailAlertServer=wosPrefEmailAlertServer, wosPrefStoreUnderReplObjs=wosPrefStoreUnderReplObjs, wosNodePercentFull=wosNodePercentFull, wosNodeDriveEntry=wosNodeDriveEntry, wosCompliance=wosCompliance, wosClusterInfo=wosClusterInfo, wosNotificationInfo=wosNotificationInfo, wosClusterName=wosClusterName, wosNotificationsGroup=wosNotificationsGroup, wosPrefMgmtIpFilterIndex=wosPrefMgmtIpFilterIndex, wosClusterGroup=wosClusterGroup, PYSNMP_MODULE_ID=wosMIB, wosStatsWriteLatency=wosStatsWriteLatency, wosPrefClientIpFilterEntry=wosPrefClientIpFilterEntry, WosSeverityLevel=WosSeverityLevel, wosPolicyId=wosPolicyId, wosNodeObjectCountHigh=wosNodeObjectCountHigh, wosClusterTotalNodeCount=wosClusterTotalNodeCount, wosNodeUsedCapacity=wosNodeUsedCapacity, wosNodeDriveNodeName=wosNodeDriveNodeName, wosZoneNodeCount=wosZoneNodeCount, wosPendingNodeIndex=wosPendingNodeIndex, wosClusterPrimaryNodeAddressType=wosClusterPrimaryNodeAddressType, wosEventsGroup=wosEventsGroup, wosPolicyEntry=wosPolicyEntry, wosZoneEntry=wosZoneEntry, wosNodeIndex=wosNodeIndex, wosConformance=wosConformance, wosClusterObjectCountHigh=wosClusterObjectCountHigh, wosPoliciesInfo=wosPoliciesInfo, wosPolicyObjCountHigh=wosPolicyObjCountHigh, wosPrefClientIpFilterIndex=wosPrefClientIpFilterIndex, wosPrefSnmpManager=wosPrefSnmpManager, wosPolicyReplicaZoneName=wosPolicyReplicaZoneName, wosPrefSnmpTrapCommunityName=wosPrefSnmpTrapCommunityName, wosAlertSeverity=wosAlertSeverity, wosNodeFwVersion=wosNodeFwVersion, wosClusterUsableCapacity=wosClusterUsableCapacity, wosNodeAddressType=wosNodeAddressType, wosAlertLocation=wosAlertLocation, wosPrefEmailAlertRecipient=wosPrefEmailAlertRecipient, wosClusterId=wosClusterId, wosAlertTable=wosAlertTable, wosPrefEmailAlertFromAddr=wosPrefEmailAlertFromAddr, wosPolicyReplicaCount=wosPolicyReplicaCount, wosClusterActiveNodeCount=wosClusterActiveNodeCount, wosAlertType=wosAlertType, wosNodeStatus=wosNodeStatus, wosStatsFWPS=wosStatsFWPS)
