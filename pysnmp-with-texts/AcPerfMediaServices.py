#
# PySNMP MIB module AcPerfMediaServices (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/AcPerfMediaServices
# Produced by pysmi-0.3.4 at Wed May  1 11:33:10 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Integer32, Counter64, MibIdentifier, IpAddress, Bits, iso, TimeTicks, ObjectIdentity, Counter32, Unsigned32, enterprises, NotificationType, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Integer32", "Counter64", "MibIdentifier", "IpAddress", "Bits", "iso", "TimeTicks", "ObjectIdentity", "Counter32", "Unsigned32", "enterprises", "NotificationType", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
audioCodes = MibIdentifier((1, 3, 6, 1, 4, 1, 5003))
acRegistrations = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 7))
acGeneric = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 8))
acProducts = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 9))
acPerformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10))
acPerfMediaServices = ModuleIdentity((1, 3, 6, 1, 4, 1, 5003, 10, 2))
acPerfMediaServices.setRevisions(('2003-11-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: acPerfMediaServices.setRevisionsDescriptions(('Version 4.4. November 20, 2003. Made these changes: o Initial revision',))
if mibBuilder.loadTexts: acPerfMediaServices.setLastUpdated('200407121505Z')
if mibBuilder.loadTexts: acPerfMediaServices.setOrganization('AudioCodes Ltd')
if mibBuilder.loadTexts: acPerfMediaServices.setContactInfo('Postal: Support AudioCodes LTD 1 Hayarden Street Airport City Lod, ISRAEL 70151 Tel: 972-3-9764000 Fax: 972-3-9764040 Email: support@audiocodes.com Web: www.audiocodes.com')
if mibBuilder.loadTexts: acPerfMediaServices.setDescription('This MIB defines the enterprise-specific objects needed to support performance management of the AudioCodes product. Performance measurements are grouped into the following MIB trees: acPerfIvr - performance measurements related to the IVR service acPerfBct - performance measurements related to the BCT service acPerfConf - performance measurements related to the Conferencing service acPerfTt - performance measurements related to the Test Trunk service')
acPerfIvr = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1))
acPerfIvrPlayRequests = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrPlayRequests.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrPlayRequests.setDescription('The total number of announcement requests received from the call agent. Products: IPmedia 2000')
acPerfIvrPlaySuccessful = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrPlaySuccessful.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrPlaySuccessful.setDescription('Number of announcement requests processed successfully. Products: IPmedia 2000')
acPerfIvrPlayFailedDueToLackOfResources = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrPlayFailedDueToLackOfResources.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrPlayFailedDueToLackOfResources.setDescription('Number of announcement requests which failed to be played because some resource was not available. Products: IPmedia 2000')
acPerfIvrPlayInProgress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrPlayInProgress.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrPlayInProgress.setDescription('The number of announcement operations that are currently in progress. Products: IPmedia 2000')
acPerfIvrPlayDuration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrPlayDuration.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrPlayDuration.setDescription('The duration, in seconds, of all successful announcement requests. The average duration of all requests (average hold time) can be computed by dividing acPerfPlayDuration by acPerfPlaySuccessful. Products: IPmedia 2000')
acPerfIvrPlayFailedDueToProvMismatch = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrPlayFailedDueToProvMismatch.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrPlayFailedDueToProvMismatch.setDescription('Number of announcement requests which failed because of a provisioning mismatch. Products: IPmedia 2000')
acPerfIvrPlayCollectRequests = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrPlayCollectRequests.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrPlayCollectRequests.setDescription('The number of play collect requests. Products: IPmedia 2000')
acPerfIvrPlayCollectSuccessful = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrPlayCollectSuccessful.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrPlayCollectSuccessful.setDescription('Number of play collects completed successfully. A request is considered successful if the entire sequence, from initial prompt to success/failure prompt, is played out without a failure due to lack of resources, provisioning mismatch, or any other media server failure. The failure of the user to enter the proper digits is not a reason for failure of the request. Products: IPmedia 2000')
acPerfIvrPlayCollectFailedDueToLackOfResources = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrPlayCollectFailedDueToLackOfResources.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrPlayCollectFailedDueToLackOfResources.setDescription('The number of play collect requests that failed due to lack of resources. Products: IPmedia 2000')
acPerfIvrPlayCollectFailedDueToProvMismatch = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrPlayCollectFailedDueToProvMismatch.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrPlayCollectFailedDueToProvMismatch.setDescription('The number of play collect requests that failed due a provisioning mismatch. Products: IPmedia 2000')
acPerfIvrPlayCollectInProgress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrPlayCollectInProgress.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrPlayCollectInProgress.setDescription('The number of play collect operations that are currently in progress. Products: IPmedia 2000')
acPerfIvrPlayCollectDuration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrPlayCollectDuration.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrPlayCollectDuration.setDescription('The duration, in seconds, of all successful play collect requests. The average duration of all requests can be computed by dividing acPlayCollectDuration by acPlayCollectSuccessful. Products: IPmedia 2000')
acPerfIvrContDigitCollectRequests = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrContDigitCollectRequests.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrContDigitCollectRequests.setDescription('The number of continuous digit collect requests. Products: IPmedia 2000')
acPerfIvrContDigitCollectSuccessful = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrContDigitCollectSuccessful.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrContDigitCollectSuccessful.setDescription('Number of continuous digit collects completed successfully. Products: IPmedia 2000')
acPerfIvrContDigitCollectFailedDueToLackOfResources = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrContDigitCollectFailedDueToLackOfResources.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrContDigitCollectFailedDueToLackOfResources.setDescription('The number of continuous digit collect requests that failed due to lack of resources. Products: IPmedia 2000')
acPerfIvrContDigitCollectInProgress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrContDigitCollectInProgress.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrContDigitCollectInProgress.setDescription('The number of continuous digit collect operations that are currently in progress. Products: IPmedia 2000')
acPerfIvrContDigitCollectDuration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfIvrContDigitCollectDuration.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfIvrContDigitCollectDuration.setDescription('The duration, in seconds, of all successful continuous digit collect requests. The average duration of all requests can be computed by dividing acDCCollectDuration by acDCCollectSuccessful. Products: IPmedia 2000')
acPerfBct = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 2, 2))
acPerfBctRequests = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfBctRequests.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfBctRequests.setDescription('The total number of BCT contexts opened since the media server initialized Products: IPmedia 2000')
acPerfBctSuccessful = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfBctSuccessful.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfBctSuccessful.setDescription('Number of BCT requests processed successfully. Products: IPmedia 2000')
acPerfBctFailedDueToLackOfResources = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfBctFailedDueToLackOfResources.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfBctFailedDueToLackOfResources.setDescription('Number of BCT requests which failed to be played because some resource was not available. Products: IPmedia 2000')
acPerfBctInProgress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfBctInProgress.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfBctInProgress.setDescription('The number of BCT calls that are currently in progress. Products: IPmedia 2000')
acPerfBctDuration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfBctDuration.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfBctDuration.setDescription('The duration, in seconds, of all successful BCT contexts. The average duration of all contexts can be computed by dividing acPerfBCTDuration by acPerfBCTSuccessful. Products: IPmedia 2000')
acPerfBctTotalParticipants = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfBctTotalParticipants.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfBctTotalParticipants.setDescription('The total number of BCT participants since the media server initialized Products: IPmedia 2000')
acPerfBctCurrentNumberOfParticipants = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfBctCurrentNumberOfParticipants.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfBctCurrentNumberOfParticipants.setDescription('The number of participants in all BCT calls that are currently in progress. Products: IPmedia 2000')
acPerfConf = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 2, 3))
acPerfConfRequests = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfConfRequests.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfConfRequests.setDescription('The total number of conferences processed since the last application restart. This is the number of conferences created and not the number of members. Products: IPmedia 2000')
acPerfConfSuccessful = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfConfSuccessful.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfConfSuccessful.setDescription('Number of conference requests processed successfully. Products: IPmedia 2000')
acPerfConfInProgress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfConfInProgress.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfConfInProgress.setDescription('The number of conferences currently in progress. Products: IPmedia 2000')
acPerfConfDuration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfConfDuration.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfConfDuration.setDescription('The duration, in seconds, of all successful conference requests. The average duration of all requests can be computed by dividing acPerfConfDuration by acPerfConfSuccessful. Products: IPmedia 2000')
acPerfConfFailedDueToLackOfResources = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfConfFailedDueToLackOfResources.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfConfFailedDueToLackOfResources.setDescription('The number of times a conference request was rejected due to lack of resources since the last application restart. Products: IPmedia 2000')
acPerfConfAddRequests = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfConfAddRequests.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfConfAddRequests.setDescription('The number of requests to add a conferee to an existing conference. Products: IPmedia 2000')
acPerfConfAddSuccessful = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfConfAddSuccessful.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfConfAddSuccessful.setDescription('The number of times a conferee was added successfuly to an existing conference. Products: IPmedia 2000')
acPerfConfAddFailedDueToLackOfResources = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 3, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfConfAddFailedDueToLackOfResources.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfConfAddFailedDueToLackOfResources.setDescription('The number of times a conferee could not be added to an existing conference due to a lack of resources. Products: IPmedia 2000')
acPerfConfPortsUsed = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 3, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfConfPortsUsed.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfConfPortsUsed.setDescription('The total number of ports that were reserved for conferences since the last application restart. Products: IPmedia 2000')
acPerfConfPortsReserved = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 3, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfConfPortsReserved.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfConfPortsReserved.setDescription('The number of conference ports currently reserved. This includes play ports, monitor ports and regular conferee ports. A monitor port may be reserved by the call agent when setting up a conference. The monitor port can then be used by one or more listen-only conferees. Products: IPmedia 2000')
acPerfTt = MibIdentifier((1, 3, 6, 1, 4, 1, 5003, 10, 2, 4))
acPerfTtRequests = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfTtRequests.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfTtRequests.setDescription('The number of test trunk calls requested. Products: IPmedia 2000')
acPerfTtSuccessful = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfTtSuccessful.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfTtSuccessful.setDescription('The number of test trunk calls that were successfully setup and torn down. This PM is not a reflection on whether the test actually passed or failed. Products: IPmedia 2000')
acPerfTtInProgress = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 4, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfTtInProgress.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfTtInProgress.setDescription('The number of test trunk calls that are currently in progress. Products: IPmedia 2000')
acPerfTtDuration = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfTtDuration.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfTtDuration.setDescription('The duration, in seconds, of all successful test trunk requests. This number is The time between a test trunk call being initiated and completed. The average duration of all requests can be computed by dividing acPerfTtDuration by acPerfTtSuccessful. Products: IPmedia 2000')
acPerfTtFailedDueToLackOfResources = MibScalar((1, 3, 6, 1, 4, 1, 5003, 10, 2, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: acPerfTtFailedDueToLackOfResources.setStatus('deprecated')
if mibBuilder.loadTexts: acPerfTtFailedDueToLackOfResources.setDescription('The number of times a test trunk request was rejected due to lack of resources since the last application restart. Products: IPmedia 2000')
mibBuilder.exportSymbols("AcPerfMediaServices", acPerfIvr=acPerfIvr, acPerfIvrPlayCollectFailedDueToProvMismatch=acPerfIvrPlayCollectFailedDueToProvMismatch, acPerfIvrContDigitCollectInProgress=acPerfIvrContDigitCollectInProgress, audioCodes=audioCodes, acGeneric=acGeneric, acPerfIvrPlayCollectRequests=acPerfIvrPlayCollectRequests, acProducts=acProducts, acPerfTtFailedDueToLackOfResources=acPerfTtFailedDueToLackOfResources, acPerfIvrPlayCollectSuccessful=acPerfIvrPlayCollectSuccessful, acPerfIvrPlayFailedDueToProvMismatch=acPerfIvrPlayFailedDueToProvMismatch, acPerfIvrPlayFailedDueToLackOfResources=acPerfIvrPlayFailedDueToLackOfResources, acPerfConfSuccessful=acPerfConfSuccessful, acPerfIvrContDigitCollectFailedDueToLackOfResources=acPerfIvrContDigitCollectFailedDueToLackOfResources, acPerfIvrPlaySuccessful=acPerfIvrPlaySuccessful, acPerfTtInProgress=acPerfTtInProgress, acPerfConfPortsReserved=acPerfConfPortsReserved, acPerfIvrPlayCollectInProgress=acPerfIvrPlayCollectInProgress, acPerfBctTotalParticipants=acPerfBctTotalParticipants, acPerfIvrContDigitCollectDuration=acPerfIvrContDigitCollectDuration, acPerfConfAddFailedDueToLackOfResources=acPerfConfAddFailedDueToLackOfResources, acPerfBctDuration=acPerfBctDuration, acPerfBctRequests=acPerfBctRequests, acPerfConfInProgress=acPerfConfInProgress, acPerfMediaServices=acPerfMediaServices, acPerfIvrPlayInProgress=acPerfIvrPlayInProgress, acPerfBctSuccessful=acPerfBctSuccessful, PYSNMP_MODULE_ID=acPerfMediaServices, acPerfBctInProgress=acPerfBctInProgress, acPerfIvrContDigitCollectRequests=acPerfIvrContDigitCollectRequests, acPerfBctCurrentNumberOfParticipants=acPerfBctCurrentNumberOfParticipants, acPerfConfAddSuccessful=acPerfConfAddSuccessful, acPerfBctFailedDueToLackOfResources=acPerfBctFailedDueToLackOfResources, acPerfIvrPlayCollectFailedDueToLackOfResources=acPerfIvrPlayCollectFailedDueToLackOfResources, acPerfConfRequests=acPerfConfRequests, acPerfIvrPlayCollectDuration=acPerfIvrPlayCollectDuration, acPerfTtSuccessful=acPerfTtSuccessful, acPerfTt=acPerfTt, acPerfConfAddRequests=acPerfConfAddRequests, acPerfIvrPlayDuration=acPerfIvrPlayDuration, acPerfTtDuration=acPerfTtDuration, acRegistrations=acRegistrations, acPerfConf=acPerfConf, acPerfConfPortsUsed=acPerfConfPortsUsed, acPerformance=acPerformance, acPerfConfDuration=acPerfConfDuration, acPerfBct=acPerfBct, acPerfIvrPlayRequests=acPerfIvrPlayRequests, acPerfIvrContDigitCollectSuccessful=acPerfIvrContDigitCollectSuccessful, acPerfTtRequests=acPerfTtRequests, acPerfConfFailedDueToLackOfResources=acPerfConfFailedDueToLackOfResources)
