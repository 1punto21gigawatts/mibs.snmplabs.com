#
# PySNMP MIB module JUNIPER-Services-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-Services-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:01:15 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
jnxMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxMibs")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Bits, iso, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Unsigned32, IpAddress, Gauge32, Counter64, ObjectIdentity, Integer32, TimeTicks, ModuleIdentity, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "iso", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Unsigned32", "IpAddress", "Gauge32", "Counter64", "ObjectIdentity", "Integer32", "TimeTicks", "ModuleIdentity", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
jnxServicesInfoMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 27))
jnxServicesInfoMib.setRevisions(('2004-01-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxServicesInfoMib.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: jnxServicesInfoMib.setLastUpdated('200307182154Z')
if mibBuilder.loadTexts: jnxServicesInfoMib.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxServicesInfoMib.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxServicesInfoMib.setDescription("This is Juniper Networks' implementation of enterprise specific MIB for monitoring services properties")
jnxSvcFlowTableAggStatsTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1), )
if mibBuilder.loadTexts: jnxSvcFlowTableAggStatsTable.setStatus('current')
if mibBuilder.loadTexts: jnxSvcFlowTableAggStatsTable.setDescription('Aggregated statistics information about all flow tables on the service PIC interface.')
jnxSvcFlowTableAggStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxSvcFlowTableAggStatsEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSvcFlowTableAggStatsEntry.setDescription('An entry containing aggregated statistics for all flow tables for a particular service pic interface.')
jnxSvcAggFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlow.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlow.setDescription('Total number of flows of any kind in the flow table.')
jnxSvcAggFlowMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowMaximum.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowMaximum.setDescription('Maximum number of flows of any kind in the flow table (high water mark).')
jnxSvcAggFlowCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowCreated.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowCreated.setDescription('Total number of flows of any kind that have been created in the flow table.')
jnxSvcAggFlowFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowFreed.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowFreed.setDescription('Total number of flows of any kind that have been freed from the flow table for any reason.')
jnxSvcAggFlowIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIdleFreed.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowIdleFreed.setDescription('Total number of flows of any kind that have been freed from the flow table by idle flow detection.')
jnxSvcAggFlowTcp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcp.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowTcp.setDescription('Total number of TCP flows in the flow table.')
jnxSvcAggFlowTcpMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpMaximum.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowTcpMaximum.setDescription('Maximum number of TCP flows in the flow table (high water mark).')
jnxSvcAggFlowTcpCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpCreated.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowTcpCreated.setDescription('Total number of TCP flows that have been created in the flow table.')
jnxSvcAggFlowTcpFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpFreed.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowTcpFreed.setDescription('Total number of TCP flows that have been freed from the flow table for any reason.')
jnxSvcAggFlowTcpIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpIdleFreed.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowTcpIdleFreed.setDescription('Total number of TCP flows that have been freed from the flow table by idle flow detection.')
jnxSvcAggFlowUdp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdp.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowUdp.setDescription('Total number of UDP flows in the flow table.')
jnxSvcAggFlowUdpMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpMaximum.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowUdpMaximum.setDescription('Maximum number of TCP flows in the flow table (high water mark).')
jnxSvcAggFlowUdpCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpCreated.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowUdpCreated.setDescription('Total number of TCP flows that have been created in the flow table.')
jnxSvcAggFlowUdpFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpFreed.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowUdpFreed.setDescription('Total number of UDP flows that have been freed from the flow table for any reason.')
jnxSvcAggFlowUdpIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpIdleFreed.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowUdpIdleFreed.setDescription('Total number of TCP flows that have been freed from the flow table by idle flow detection.')
jnxSvcAggFlowPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowPkt.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowPkt.setDescription('Total number of packets processed by all flows.')
jnxSvcAggFlowPktErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowPktErr.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowPktErr.setDescription('Total number of packets found to be in invalid in processing by all flows.')
jnxSvcAggFlowByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowByte.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowByte.setDescription('Total number of bytes for packets processed by all flows.')
jnxSvcAggFlowByteErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowByteErr.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowByteErr.setDescription('Total number of bytes for packets found to be in invalid in processing by all flows.')
jnxSvcAggFlowIcmpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpPkt.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpPkt.setDescription('Total number of ICMP packets processed.')
jnxSvcAggFlowIcmpPktErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpPktErr.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpPktErr.setDescription('Total number of ICMP packets found to be in invalid for any reason.')
jnxSvcAggFlowIcmpPktErrBadFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpPktErrBadFlow.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpPktErrBadFlow.setDescription('Total number of ICMP packets found to be in invalid because the flow was invalid.')
jnxSvcAggFlowIcmpByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpByte.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpByte.setDescription('Total number of bytes for all ICMP packets processed.')
jnxSvcAggFlowIcmpByteErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpByteErr.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowIcmpByteErr.setDescription('Total number of bytes for all ICMP packets found to be in invalid.')
jnxSvcAggFlowTcpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpPkt.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowTcpPkt.setDescription('Total number of TCP packets processed.')
jnxSvcAggFlowTcpPktErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpPktErr.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowTcpPktErr.setDescription('Total number of TCP packets found to be in invalid for any reason.')
jnxSvcAggFlowTcpPktErrBadFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpPktErrBadFlow.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowTcpPktErrBadFlow.setDescription('Total number of TCP packets found to be in invalid because the flow was invalid.')
jnxSvcAggFlowTcpByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpByte.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowTcpByte.setDescription('Total number of bytes for all TCP packets processed.')
jnxSvcAggFlowTcpByteErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowTcpByteErr.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowTcpByteErr.setDescription('Total number of bytes for all TCP packets found to be in invalid')
jnxSvcAggFlowUdpPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpPkt.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowUdpPkt.setDescription('Total number of UDP packets processed.')
jnxSvcAggFlowUdpPktErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpPktErr.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowUdpPktErr.setDescription('Total number of UDP packets found to be in invalid for any reason.')
jnxSvcAggFlowUdpPktErrBadFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpPktErrBadFlow.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowUdpPktErrBadFlow.setDescription('Total number of UDP packets found to be in invalid because the flow was invalid.')
jnxSvcAggFlowUdpByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpByte.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowUdpByte.setDescription('Total number of bytes for all UDP packets processed.')
jnxSvcAggFlowUdpByteErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 1, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcAggFlowUdpByteErr.setStatus('current')
if mibBuilder.loadTexts: jnxSvcAggFlowUdpByteErr.setDescription('Total number of bytes for all TCP packets found to be in invalid.')
jnxSvcServIdTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2), )
if mibBuilder.loadTexts: jnxSvcServIdTable.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdTable.setDescription('Information about the service-identification service for the service PIC interface.')
jnxSvcServIdTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: jnxSvcServIdTableEntry.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdTableEntry.setDescription('An entry containing aggregate Service Identification service information applicable to particular service pic interfaces.')
jnxSvcServIdPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdPkt.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdPkt.setDescription('Total count for all packets processed by service.')
jnxSvcServIdByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdByte.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdByte.setDescription('Total bytes for all packets processed by service.')
jnxSvcServIdErrPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdErrPkt.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdErrPkt.setDescription('Total number of all packets found to be in invalid by this service during or as a result of processing.')
jnxSvcServIdErrByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdErrByte.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdErrByte.setDescription('Total butes for all packets found to be in invalid by this service during or as a result of processing.')
jnxSvcServIdHeadExPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExPkt.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdHeadExPkt.setDescription('Packets processed by the service header examination function. This is the first packet for a flow for any service set specifying a header inspection rule set.')
jnxSvcServIdHeadExByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExByte.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdHeadExByte.setDescription('Bytes for all packets processed by the service header examination function. This is the first packet for a flow for any service set specifying a header inspection rule set.')
jnxSvcServIdHeadExFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExFlow.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdHeadExFlow.setDescription('Packets processed by the service header examination function. This is the first packet for a flow for any service set specifying a header inspection rule set and only includes processing of packets that result in the creation of a flow.')
jnxSvcServIdHeadExFlowMtch = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExFlowMtch.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdHeadExFlowMtch.setDescription('Flows that matched any rule configured for the header examination function for the service set associated with the flow.')
jnxSvcServIdHeadExProtoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExProtoReq.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdHeadExProtoReq.setDescription('Flows identified as requiring protocol inspection and URI extraction as a result of the header examination function.')
jnxSvcServIdHeadExHttpProtoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExHttpProtoReq.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdHeadExHttpProtoReq.setDescription('Flows identified by header examination function as potentially requiring HTTP protocol inspection and URI extraction.')
jnxSvcServIdHeadExWapProtoReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExWapProtoReq.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdHeadExWapProtoReq.setDescription('Flows identified by header examination function as potentially requiring WAP protocol inspection and URI extraction.')
jnxSvcServIdProtFlow = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtFlow.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdProtFlow.setDescription('Flows currently undergoing protocol inspection and URI extraction. Does not include flows that have been marked as no longer requiring inspection or flows that are in an error state.')
jnxSvcServIdProtInsPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsPkt.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdProtInsPkt.setDescription('Total number of packets processed by protocol inspection function while attempting to parse a transaction and extract URIs.')
jnxSvcServIdProtInsByte = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsByte.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdProtInsByte.setDescription('Total bytes for all packets processed by protocol inspection function while attempting to parse a transaction and extract URIs.')
jnxSvcServIdProtInsFlowInsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsFlowInsp.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdProtInsFlowInsp.setDescription('Total number of flows that have been inspected or are at present being inspected by the protocol inspection and identification function.')
jnxSvcServIdProtInsFlowProtIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsFlowProtIdent.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdProtInsFlowProtIdent.setDescription('Flows for which the protocol inspection and identification function has determined the protocol in use and begun transaction processing.')
jnxSvcServIdProtInsHttpUri = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsHttpUri.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdProtInsHttpUri.setDescription('Number of HTTP transactions that have successfully extracted a URI.')
jnxSvcServIdProtInsHttpUriMtch = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsHttpUriMtch.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdProtInsHttpUriMtch.setDescription('Number of HTTP transaction URIs that were matched by a URI rule configured for the active service set.')
jnxSvcServIdProtInsWapUri = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsWapUri.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdProtInsWapUri.setDescription('Number of WAP transactions that have successfully extracted a URI.')
jnxSvcServIdProtInsWapUriMtch = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsWapUriMtch.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdProtInsWapUriMtch.setDescription('Number of WAP transaction URIs that were matched by a URI rule configured for the active service set.')
jnxSvcServIdPktTcpMalform = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdPktTcpMalform.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdPktTcpMalform.setDescription('Number of TCP packets found to be in invalid due to being malformed, for an incorrect sequence number, or other reason.')
jnxSvcServIdWAPInvalidTxn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdWAPInvalidTxn.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdWAPInvalidTxn.setDescription('Numbee of packets found to be in invalid due to invalid WAP transaction identifier.')
jnxSvcServIdErrWAPTxn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdErrWAPTxn.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdErrWAPTxn.setDescription('Number of packets found to be in invalid because the WAP transaction or flow was in an error state.')
jnxSvcServIdErrHTTPTxn = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdErrHTTPTxn.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdErrHTTPTxn.setDescription('Number of packets found to be in invalid because the HTTP transaction or flow was in an error state.')
jnxSvcServIdHeadExFailCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdHeadExFailCfgState.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdHeadExFailCfgState.setDescription('Number of header inspections that failed due to internal configuration state.')
jnxSvcServIdProtInsFailCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServIdProtInsFailCfgState.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdProtInsFailCfgState.setDescription('Number of URI inspections that failed due to internal configuration state. ')
jnxSvcTransactionWapCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionWapCreated.setStatus('current')
if mibBuilder.loadTexts: jnxSvcTransactionWapCreated.setDescription('Number of WAP transaction sessions created.')
jnxSvcTransactionWapMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 35), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionWapMaximum.setStatus('current')
if mibBuilder.loadTexts: jnxSvcTransactionWapMaximum.setDescription('Peak number of simultaneous of WAP transaction sessions since start.')
jnxSvcTransactionWapFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionWapFreed.setStatus('current')
if mibBuilder.loadTexts: jnxSvcTransactionWapFreed.setDescription('Number of WAP transaction sessions freed.')
jnxSvcTransactionWapIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionWapIdleFreed.setStatus('current')
if mibBuilder.loadTexts: jnxSvcTransactionWapIdleFreed.setDescription('Number of WAP transaction sessions freed by idle clean-up.')
jnxSvcTransactionHttpCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionHttpCreated.setStatus('current')
if mibBuilder.loadTexts: jnxSvcTransactionHttpCreated.setDescription('Number of HTTP transaction sessions created.')
jnxSvcTransactionHttpMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 39), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionHttpMaximum.setStatus('current')
if mibBuilder.loadTexts: jnxSvcTransactionHttpMaximum.setDescription('Peak number of simultaneous of HTTP transaction sessions since start.')
jnxSvcTransactionHttpFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionHttpFreed.setStatus('current')
if mibBuilder.loadTexts: jnxSvcTransactionHttpFreed.setDescription('Number of WAP transaction sessions freed.')
jnxSvcTransactionHttpIdleFreed = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcTransactionHttpIdleFreed.setStatus('current')
if mibBuilder.loadTexts: jnxSvcTransactionHttpIdleFreed.setDescription('Number of WAP transaction sessions freed by idle clean-up.')
jnxSvcServidProtInsUriErrProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServidProtInsUriErrProcess.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServidProtInsUriErrProcess.setDescription('Number of URIs that failed to process due to internal processing error.')
jnxSvcServidProtInsUriErrTooLong = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServidProtInsUriErrTooLong.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServidProtInsUriErrTooLong.setDescription('Number of URIs that were not processed because they exceeded the maximum supported URI length.')
jnxSvcServidProtInsErrParseTx = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServidProtInsErrParseTx.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServidProtInsErrParseTx.setDescription('Number of flows which experienced a transaction parse error or any kind that prevented URI extraction. This does not include length limitations or processing errors.')
jnxSvcServidProtInsUriErrNoRes = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 27, 2, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxSvcServidProtInsUriErrNoRes.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServidProtInsUriErrNoRes.setDescription('Number of URIs that were not processed due to lack of system resources.')
jnxSvcMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20))
jnxSvcMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 1))
jnxSvcMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 2))
jnxSvcMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 1, 1)).setObjects(("JUNIPER-Services-MIB", "jnxSvcFlowTableAggStatsGroup"), ("JUNIPER-Services-MIB", "jnxSvcServIdiceGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxSvcMIBCompliance = jnxSvcMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: jnxSvcMIBCompliance.setDescription('Compliance statement for the Juniper enterprise-specific service PIC interface service information MIB.')
jnxSvcFlowTableAggStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 2, 1)).setObjects(("JUNIPER-Services-MIB", "jnxSvcAggFlow"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowMaximum"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowCreated"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcp"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpMaximum"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpCreated"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdp"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpMaximum"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpCreated"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowPkt"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowPktErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowByte"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowByteErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpPkt"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpPktErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpPktErrBadFlow"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpByte"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowIcmpByteErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpPkt"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpPktErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpPktErrBadFlow"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpByte"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowTcpByteErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpPkt"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpPktErr"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpPktErrBadFlow"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpByte"), ("JUNIPER-Services-MIB", "jnxSvcAggFlowUdpByteErr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxSvcFlowTableAggStatsGroup = jnxSvcFlowTableAggStatsGroup.setStatus('current')
if mibBuilder.loadTexts: jnxSvcFlowTableAggStatsGroup.setDescription('Basic aggregate statistics for flow table activity.')
jnxSvcServIdiceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2636, 3, 27, 20, 2, 2)).setObjects(("JUNIPER-Services-MIB", "jnxSvcServIdPkt"), ("JUNIPER-Services-MIB", "jnxSvcServIdByte"), ("JUNIPER-Services-MIB", "jnxSvcServIdErrPkt"), ("JUNIPER-Services-MIB", "jnxSvcServIdErrByte"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExPkt"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExByte"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExFlow"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExFlowMtch"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExProtoReq"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExHttpProtoReq"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExWapProtoReq"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtFlow"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsPkt"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsByte"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsFlowInsp"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsFlowProtIdent"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsHttpUri"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsHttpUriMtch"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsWapUri"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsWapUriMtch"), ("JUNIPER-Services-MIB", "jnxSvcServIdPktTcpMalform"), ("JUNIPER-Services-MIB", "jnxSvcServIdWAPInvalidTxn"), ("JUNIPER-Services-MIB", "jnxSvcServIdErrWAPTxn"), ("JUNIPER-Services-MIB", "jnxSvcServIdErrHTTPTxn"), ("JUNIPER-Services-MIB", "jnxSvcServIdHeadExFailCfgState"), ("JUNIPER-Services-MIB", "jnxSvcServIdProtInsFailCfgState"), ("JUNIPER-Services-MIB", "jnxSvcTransactionWapCreated"), ("JUNIPER-Services-MIB", "jnxSvcTransactionWapMaximum"), ("JUNIPER-Services-MIB", "jnxSvcTransactionWapFreed"), ("JUNIPER-Services-MIB", "jnxSvcTransactionWapIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcTransactionHttpCreated"), ("JUNIPER-Services-MIB", "jnxSvcTransactionHttpMaximum"), ("JUNIPER-Services-MIB", "jnxSvcTransactionHttpFreed"), ("JUNIPER-Services-MIB", "jnxSvcTransactionHttpIdleFreed"), ("JUNIPER-Services-MIB", "jnxSvcServidProtInsUriErrProcess"), ("JUNIPER-Services-MIB", "jnxSvcServidProtInsUriErrTooLong"), ("JUNIPER-Services-MIB", "jnxSvcServidProtInsErrParseTx"), ("JUNIPER-Services-MIB", "jnxSvcServidProtInsUriErrNoRes"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    jnxSvcServIdiceGroup = jnxSvcServIdiceGroup.setStatus('current')
if mibBuilder.loadTexts: jnxSvcServIdiceGroup.setDescription('Basic aggregate statistics for the Service Identification service.')
mibBuilder.exportSymbols("JUNIPER-Services-MIB", jnxSvcServIdTableEntry=jnxSvcServIdTableEntry, jnxSvcAggFlowTcpMaximum=jnxSvcAggFlowTcpMaximum, jnxSvcServidProtInsUriErrProcess=jnxSvcServidProtInsUriErrProcess, jnxSvcServIdProtInsWapUriMtch=jnxSvcServIdProtInsWapUriMtch, jnxSvcAggFlowMaximum=jnxSvcAggFlowMaximum, jnxSvcServIdProtInsWapUri=jnxSvcServIdProtInsWapUri, jnxSvcTransactionHttpMaximum=jnxSvcTransactionHttpMaximum, jnxSvcMIBCompliances=jnxSvcMIBCompliances, jnxSvcServIdErrHTTPTxn=jnxSvcServIdErrHTTPTxn, jnxSvcServIdHeadExFlow=jnxSvcServIdHeadExFlow, jnxSvcAggFlowUdpByteErr=jnxSvcAggFlowUdpByteErr, jnxSvcAggFlowUdpPktErrBadFlow=jnxSvcAggFlowUdpPktErrBadFlow, jnxSvcMIBConformance=jnxSvcMIBConformance, jnxSvcServidProtInsErrParseTx=jnxSvcServidProtInsErrParseTx, jnxSvcAggFlowTcpByte=jnxSvcAggFlowTcpByte, jnxSvcAggFlowUdpIdleFreed=jnxSvcAggFlowUdpIdleFreed, jnxSvcAggFlowFreed=jnxSvcAggFlowFreed, jnxSvcAggFlowIcmpPktErrBadFlow=jnxSvcAggFlowIcmpPktErrBadFlow, jnxSvcServIdWAPInvalidTxn=jnxSvcServIdWAPInvalidTxn, jnxSvcServIdProtInsHttpUriMtch=jnxSvcServIdProtInsHttpUriMtch, jnxSvcServIdHeadExProtoReq=jnxSvcServIdHeadExProtoReq, jnxServicesInfoMib=jnxServicesInfoMib, jnxSvcAggFlowTcpByteErr=jnxSvcAggFlowTcpByteErr, jnxSvcTransactionWapFreed=jnxSvcTransactionWapFreed, jnxSvcServIdHeadExByte=jnxSvcServIdHeadExByte, jnxSvcServIdPktTcpMalform=jnxSvcServIdPktTcpMalform, jnxSvcServIdProtInsFlowProtIdent=jnxSvcServIdProtInsFlowProtIdent, jnxSvcAggFlowTcpCreated=jnxSvcAggFlowTcpCreated, jnxSvcTransactionHttpFreed=jnxSvcTransactionHttpFreed, jnxSvcServIdErrWAPTxn=jnxSvcServIdErrWAPTxn, jnxSvcAggFlowPkt=jnxSvcAggFlowPkt, jnxSvcServIdHeadExFailCfgState=jnxSvcServIdHeadExFailCfgState, jnxSvcServIdHeadExPkt=jnxSvcServIdHeadExPkt, jnxSvcServIdErrPkt=jnxSvcServIdErrPkt, jnxSvcAggFlowTcpPktErrBadFlow=jnxSvcAggFlowTcpPktErrBadFlow, jnxSvcFlowTableAggStatsEntry=jnxSvcFlowTableAggStatsEntry, jnxSvcAggFlowTcpPkt=jnxSvcAggFlowTcpPkt, jnxSvcServIdHeadExFlowMtch=jnxSvcServIdHeadExFlowMtch, jnxSvcAggFlow=jnxSvcAggFlow, jnxSvcServidProtInsUriErrTooLong=jnxSvcServidProtInsUriErrTooLong, jnxSvcServIdProtInsFlowInsp=jnxSvcServIdProtInsFlowInsp, jnxSvcAggFlowUdpCreated=jnxSvcAggFlowUdpCreated, jnxSvcAggFlowPktErr=jnxSvcAggFlowPktErr, jnxSvcAggFlowUdpMaximum=jnxSvcAggFlowUdpMaximum, jnxSvcAggFlowIcmpByte=jnxSvcAggFlowIcmpByte, jnxSvcServIdErrByte=jnxSvcServIdErrByte, jnxSvcMIBCompliance=jnxSvcMIBCompliance, jnxSvcServIdTable=jnxSvcServIdTable, jnxSvcAggFlowTcp=jnxSvcAggFlowTcp, jnxSvcServIdProtInsHttpUri=jnxSvcServIdProtInsHttpUri, jnxSvcServIdiceGroup=jnxSvcServIdiceGroup, jnxSvcAggFlowUdpByte=jnxSvcAggFlowUdpByte, jnxSvcAggFlowCreated=jnxSvcAggFlowCreated, jnxSvcTransactionWapMaximum=jnxSvcTransactionWapMaximum, jnxSvcAggFlowUdpFreed=jnxSvcAggFlowUdpFreed, jnxSvcTransactionHttpCreated=jnxSvcTransactionHttpCreated, jnxSvcServIdByte=jnxSvcServIdByte, PYSNMP_MODULE_ID=jnxServicesInfoMib, jnxSvcAggFlowTcpPktErr=jnxSvcAggFlowTcpPktErr, jnxSvcServIdProtFlow=jnxSvcServIdProtFlow, jnxSvcServIdHeadExHttpProtoReq=jnxSvcServIdHeadExHttpProtoReq, jnxSvcAggFlowByte=jnxSvcAggFlowByte, jnxSvcTransactionWapIdleFreed=jnxSvcTransactionWapIdleFreed, jnxSvcAggFlowIcmpPkt=jnxSvcAggFlowIcmpPkt, jnxSvcServIdHeadExWapProtoReq=jnxSvcServIdHeadExWapProtoReq, jnxSvcAggFlowIdleFreed=jnxSvcAggFlowIdleFreed, jnxSvcAggFlowUdp=jnxSvcAggFlowUdp, jnxSvcServIdProtInsPkt=jnxSvcServIdProtInsPkt, jnxSvcMIBGroups=jnxSvcMIBGroups, jnxSvcAggFlowTcpFreed=jnxSvcAggFlowTcpFreed, jnxSvcAggFlowIcmpPktErr=jnxSvcAggFlowIcmpPktErr, jnxSvcAggFlowTcpIdleFreed=jnxSvcAggFlowTcpIdleFreed, jnxSvcAggFlowUdpPktErr=jnxSvcAggFlowUdpPktErr, jnxSvcFlowTableAggStatsTable=jnxSvcFlowTableAggStatsTable, jnxSvcAggFlowByteErr=jnxSvcAggFlowByteErr, jnxSvcFlowTableAggStatsGroup=jnxSvcFlowTableAggStatsGroup, jnxSvcServIdProtInsByte=jnxSvcServIdProtInsByte, jnxSvcTransactionWapCreated=jnxSvcTransactionWapCreated, jnxSvcTransactionHttpIdleFreed=jnxSvcTransactionHttpIdleFreed, jnxSvcServidProtInsUriErrNoRes=jnxSvcServidProtInsUriErrNoRes, jnxSvcServIdPkt=jnxSvcServIdPkt, jnxSvcAggFlowIcmpByteErr=jnxSvcAggFlowIcmpByteErr, jnxSvcAggFlowUdpPkt=jnxSvcAggFlowUdpPkt, jnxSvcServIdProtInsFailCfgState=jnxSvcServIdProtInsFailCfgState)
