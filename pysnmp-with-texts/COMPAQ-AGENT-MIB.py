#
# PySNMP MIB module COMPAQ-AGENT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/COMPAQ-AGENT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:26:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint")
compaq_common_mgmt, = mibBuilder.importSymbols("COMPAQ-ID-REC-MIB", "compaq-common-mgmt")
cpqRackAssetIndex, cpqRackNetConnectorChassis, cpqRackNetConnectorIndex, cpqRackNetConnectorRack, cpqRackCommonEnclosureRack, cpqRackCommonEnclosureIndex = mibBuilder.importSymbols("CPQRACK-MIB", "cpqRackAssetIndex", "cpqRackNetConnectorChassis", "cpqRackNetConnectorIndex", "cpqRackNetConnectorRack", "cpqRackCommonEnclosureRack", "cpqRackCommonEnclosureIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, MibIdentifier, NotificationType, ObjectIdentity, TimeTicks, IpAddress, Counter64, Counter32, iso, Gauge32, Bits, Integer32, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "MibIdentifier", "NotificationType", "ObjectIdentity", "TimeTicks", "IpAddress", "Counter64", "Counter32", "iso", "Gauge32", "Bits", "Integer32", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
agentGeneralMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 1))
agentBasicInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 1))
agentBasicConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2))
agentIpProtoConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 3))
agentIpTrapManager = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 4))
agentConsoleModeManager = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 5))
agentSlipModeManager = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 6))
agentSNTP = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 7))
agentDST = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8))
agentSwitchCommonMgmt = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 3))
agentSwitchCube = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 1))
agentSwitchPowerSupply = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 2))
agentSwitchFan = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 3))
agentSwitchTempSensor = MibIdentifier((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 4))
agentMgmtProtocolCapability = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("snmp-ip", 2), ("snmp-ipx", 3), ("snmp-ip-ipx", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMgmtProtocolCapability.setStatus('mandatory')
if mibBuilder.loadTexts: agentMgmtProtocolCapability.setDescription('The network management protocol(s) supported by this agent.')
agentMibCapabilityTable = MibTable((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 1, 2), )
if mibBuilder.loadTexts: agentMibCapabilityTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityTable.setDescription('A list of MIB capability entries supported by this agent.')
agentMibCapabilityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 1, 2, 1), ).setIndexNames((0, "COMPAQ-AGENT-MIB", "agentMibCapabilityIndex"))
if mibBuilder.loadTexts: agentMibCapabilityEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityEntry.setDescription('A MIB capability entry contains objects describing a particular MIB supported by this agent.')
agentMibCapabilityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityIndex.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityIndex.setDescription('A list of agentMibCapabilityDescr entries.')
agentMibCapabilityDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 35))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityDescr.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityDescr.setDescription('The name of the MIB supported by the agent.')
agentMibCapabilityVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityVersion.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityVersion.setDescription('The version of the MIB specified in this entry.')
agentMibCapabilityType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("standard", 2), ("proprietary", 3), ("experiment", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentMibCapabilityType.setStatus('mandatory')
if mibBuilder.loadTexts: agentMibCapabilityType.setDescription('The type of the MIB specified in this entry.')
agentStatusConsoleInUse = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("in-use", 2), ("not-in-use", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatusConsoleInUse.setStatus('mandatory')
if mibBuilder.loadTexts: agentStatusConsoleInUse.setDescription('This indicates whether console is currently in-use.')
agentStatusSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("proceeding", 2), ("completed", 3), ("changed-not-save", 4), ("failed", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentStatusSaveCfg.setStatus('mandatory')
if mibBuilder.loadTexts: agentStatusSaveCfg.setDescription('This indicates the status of the device configuration. other(1) - this entry is currently in use but the conditions under which it will remain so are different from each of the following values. proceeding(2) - the device configuration is being currently saved into the NV-RAM. completed(3) V all of the device configuration parameters have been saved into NV-RAM. changed-not-save(4)V some of the device configuration parameters have been changed but not saved into NV-RAM. failed(5) - The process to save device configuration is failed.')
agentSwitchMfgDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchMfgDate.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchMfgDate.setDescription('The switch manufacturing date and time.')
agentSwitchFirmwareMfgDate = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchFirmwareMfgDate.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchFirmwareMfgDate.setDescription('The switch firmware manufacturing date and time.')
agentBscSwFileTable = MibTable((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 1), )
if mibBuilder.loadTexts: agentBscSwFileTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentBscSwFileTable.setDescription('A list of MIB Basic Config entries supported file Update by this agent.')
agentBscSwFileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 1, 1), ).setIndexNames((0, "COMPAQ-AGENT-MIB", "agentBscSwFileIndex"))
if mibBuilder.loadTexts: agentBscSwFileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentBscSwFileEntry.setDescription('A basic config entry contains objects describing a particular MIB supported by this agent.')
agentBscSwFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: agentBscSwFileIndex.setDescription('The table index for the file entry')
agentBscSwFileDscr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileDscr.setStatus('mandatory')
if mibBuilder.loadTexts: agentBscSwFileDscr.setDescription('The description for the purpose of the software file in this entry. Note: For system which does not support change of this object, setting value to this object will cause the system to return bad-value error message. ')
agentBscSwFileAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentBscSwFileAddr.setDescription('The IP address where the File to be downloaded is located, or the IP address where the file will be uploaded to.')
agentBscSwFileTransferType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("network-load", 2), ("out-of-band-load", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileTransferType.setStatus('mandatory')
if mibBuilder.loadTexts: agentBscSwFileTransferType.setDescription('The channel through which the file will be downloaded or uploaded. Note: For system which does not support all channels, setting value to the unsupported channel will cause the system to return bad-value error message. ')
agentBscSwFile = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFile.setStatus('mandatory')
if mibBuilder.loadTexts: agentBscSwFile.setDescription('The name of the file to be downloaded from the TFTP server, or to be uploaded to.')
agentBscSwFileLocateId = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileLocateId.setStatus('mandatory')
if mibBuilder.loadTexts: agentBscSwFileLocateId.setDescription('This object describes the type of the file. runtime-code(1), log-file(2), cfg-file(3) Note: For system which does not support change of this object, setting value to this object will cause the system to return bad-value error message. ')
agentBscSwFileLoadType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("upload", 2), ("download", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileLoadType.setStatus('mandatory')
if mibBuilder.loadTexts: agentBscSwFileLoadType.setDescription('This object provides the user to select download or upload function for the file. Note: For system which does not support change of this object, setting value to this object will cause the system to return bad-value error message. ')
agentBscSwFileCtrl = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("inactive", 2), ("start", 3), ("delete", 4), ("create-and-go", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscSwFileCtrl.setStatus('mandatory')
if mibBuilder.loadTexts: agentBscSwFileCtrl.setDescription('This object provides the user to download runtime software. The setting will take effect when the system is restart. See Note(1) below Note: For system which does not support change of this object to some value, setting object to these values cause the system to return bad-value error message. ')
agentBscFileServerTftpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentBscFileServerTftpPort.setStatus('mandatory')
if mibBuilder.loadTexts: agentBscFileServerTftpPort.setDescription('The IP port used by the TFTP server.')
agentBscSwFileTime = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 1, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBscSwFileTime.setStatus('mandatory')
if mibBuilder.loadTexts: agentBscSwFileTime.setDescription('Configuration/firmware file last saved Date/Time, NULL if unknown. Unknown if time has not been set by SNTP or manual entry when the configuration/firmware file was saved ')
agentBscSwFileStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentBscSwFileStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agentBscSwFileStatus.setDescription('Status of last download attempt. See trap switchFileInvalid. Read-only initialized to NULL')
agentFileTransfer = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("start", 2), ("start-and-reset", 3), ("noaction", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentFileTransfer.setStatus('obsolete')
if mibBuilder.loadTexts: agentFileTransfer.setDescription('This object will execute the download or upload action. If start(2), it will begin to download/upload, but no reset as follow. If start-and-reset(3), then the reset will active after download or upload. No action if(4). Note: Because these funiction will be limited by the system support. Some of the select item will invalid. When one of the item user select,it will response with bad-value status.')
agentSystemReset = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("cold-start", 2), ("warm-start", 3), ("no-reset", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSystemReset.setStatus('mandatory')
if mibBuilder.loadTexts: agentSystemReset.setDescription('This object indicates the agent system reset state. Setting this object to no-reset(4) has no effect. Setting this object to cold-start(2) or warm-start(3) will reset the agent. The agent always returns no-reset(4) when this object is read.')
agentRs232PortConfig = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("console", 2), ("out-of-band", 3), ("notAvail", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentRs232PortConfig.setStatus('mandatory')
if mibBuilder.loadTexts: agentRs232PortConfig.setDescription('This object indicates the RS-232C mode while device restart.')
agentOutOfBandBaudRateConfig = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("baudRate-2400", 2), ("baudRate-9600", 3), ("baudRate-19200", 4), ("baudRate-38400", 5), ("baudRate-115200", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentOutOfBandBaudRateConfig.setStatus('obsolete')
if mibBuilder.loadTexts: agentOutOfBandBaudRateConfig.setDescription('This object allows user to specify out_of_band baud rate. It will take effect when the system is restart. Note: Because these funiction will be limited by the system support. Some of the select item will invalid. When one of the item user select,it will response with bad-value status. ')
agentSaveCfg = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("idle", 2), ("set", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSaveCfg.setStatus('mandatory')
if mibBuilder.loadTexts: agentSaveCfg.setDescription("As the object is set to 'set(3)', the current device configuration will be saved into to NV-RAM.")
agentIpNumOfIf = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpNumOfIf.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpNumOfIf.setDescription('The total number of IP interfaces supported by this agent.')
agentIpTftpServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpTftpServerAddr.setStatus('obsolete')
if mibBuilder.loadTexts: agentIpTftpServerAddr.setDescription('The IP Address of TFTP Server.')
agentIpGetIpFrom = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("bootp", 3), ("dhcp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpGetIpFrom.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpGetIpFrom.setDescription('This object indicates whether the agent get its system IP address from Bootp/DHCP server at start up.')
agentIpTrapManagerTable = MibTable((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 4, 1), )
if mibBuilder.loadTexts: agentIpTrapManagerTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerTable.setDescription('A list of trap managers to which SNMP traps will be sent.')
agentIpTrapManagerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 4, 1, 1), ).setIndexNames((0, "COMPAQ-AGENT-MIB", "agentIpTrapManagerIpAddr"))
if mibBuilder.loadTexts: agentIpTrapManagerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerEntry.setDescription('Each entry contains the particular trap manager settings.')
agentIpTrapManagerIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 4, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentIpTrapManagerIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerIpAddr.setDescription('The IP address where SNMP traps will be destined for')
agentIpTrapManagerComm = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 4, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpTrapManagerComm.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerComm.setDescription('The community string used to encode SNMP trap packet to be sent to the trap manager.')
agentIpTrapManagerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentIpTrapManagerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agentIpTrapManagerStatus.setDescription('This object indicates whether or not the trap should be sent to this trap manager.')
agentConsoleModeManagerDataBits = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("bits-7", 2), ("bits-8", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConsoleModeManagerDataBits.setStatus('mandatory')
if mibBuilder.loadTexts: agentConsoleModeManagerDataBits.setDescription('The DataBits for console mode, If the agentRs232PortConfig change to console mode then the device will use this group to make a setup for console value and agentSlipModeManager group will deactive automatically. ')
agentConsoleModeManagerStopBits = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("stopbits-1", 2), ("stopbits-2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConsoleModeManagerStopBits.setStatus('mandatory')
if mibBuilder.loadTexts: agentConsoleModeManagerStopBits.setDescription('The Stop Bits for console mode ')
agentConsoleModeManagerParity = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("odd", 2), ("even", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConsoleModeManagerParity.setStatus('mandatory')
if mibBuilder.loadTexts: agentConsoleModeManagerParity.setDescription('The Parity for console mode, If the agentRs232PortConfig change to console mode then the device will use this group to make a setup for console value and agentSlipModeManager group will deactive automatically. ')
agentConsoleModeManagerBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("baudRate-2400", 2), ("baudRate-9600", 3), ("baudRate-19200", 4), ("baudRate-38400", 5), ("baudRate-57200", 6), ("baudRate-115200", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentConsoleModeManagerBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: agentConsoleModeManagerBaudRate.setDescription('The transmit rate for console mode.')
agentSlipModeManagerLocalIP = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 6, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSlipModeManagerLocalIP.setStatus('mandatory')
if mibBuilder.loadTexts: agentSlipModeManagerLocalIP.setDescription('The Local IP address for slip mode, If the agentRs232PortConfig change to out-of-band mode then the device will use this group to make a setup for slip value and agentConsoleModeManager group will deactive automatically. ')
agentSlipModeManagerRemoteIP = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSlipModeManagerRemoteIP.setStatus('mandatory')
if mibBuilder.loadTexts: agentSlipModeManagerRemoteIP.setDescription('The Remote IP address for slip mode ')
agentSlipModeManagerMTU = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("mtu-1006", 2), ("mtu-1500", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSlipModeManagerMTU.setStatus('mandatory')
if mibBuilder.loadTexts: agentSlipModeManagerMTU.setDescription('The MTU Value for Slip Mode ')
agentSlipModeManagerBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("baudRate-2400", 2), ("baudRate-9600", 3), ("baudRate-19200", 4), ("baudRate-38400", 5), ("baudRate-57200", 6), ("baudRate-115200", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSlipModeManagerBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: agentSlipModeManagerBaudRate.setDescription('The MTU Value for Slip Mode ')
agentSNTPState = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disabled", 2), ("enabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSNTPState.setStatus('mandatory')
if mibBuilder.loadTexts: agentSNTPState.setDescription('This object enable/disable the SNTP function.')
agentSNTPTimeSource = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("system", 0), ("server1", 1), ("server2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSNTPTimeSource.setStatus('mandatory')
if mibBuilder.loadTexts: agentSNTPTimeSource.setDescription('the SNTP server status for time source changing')
agentSNTPServer1IPAddr = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSNTPServer1IPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentSNTPServer1IPAddr.setDescription('Configure the SNTP server #1 IP address')
agentSNTPServer2IPAddr = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 7, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSNTPServer2IPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: agentSNTPServer2IPAddr.setDescription('Configure the SNTP server #2 IP address')
agentSNTPTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 7, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-779, 839))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSNTPTimeZone.setStatus('mandatory')
if mibBuilder.loadTexts: agentSNTPTimeZone.setDescription('Local time offset in minutes from GMT.')
agentSNTPPollInterval = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 7, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(30, 99999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentSNTPPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: agentSNTPPollInterval.setDescription('Update time in seconds from SNTP server.')
agentSNTPCurrentTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 7, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSNTPCurrentTime.setStatus('mandatory')
if mibBuilder.loadTexts: agentSNTPCurrentTime.setDescription('the mandatory network time was got from the SNTP server')
agentSNTPUpTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 7, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSNTPUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: agentSNTPUpTime.setDescription('The time (in second) since the network management portion of the system was last re-initialized. It is the same as sysUptime.')
agentSNTPBootTime = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 7, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSNTPBootTime.setStatus('mandatory')
if mibBuilder.loadTexts: agentSNTPBootTime.setDescription('The boot time of the switch is equal to subtract systemUpTime from agentSNTPNetworkTime')
agentDSTStatus = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("repeating", 2), ("annual", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTStatus.setDescription('An indication of whether the DST(Daylight Saving Time) feature is enabled on this device. When this object is set to repeating(2), or annual(3) then all the other objects are set to default values. When this object is set to disable(1), then all the other objects are not instantiated and the DST feature is disabled')
agentDSTOffset = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTOffset.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTOffset.setDescription('The value of this object indicates number of minutes to add or to subtract during DST. This object is not instantiated when agentDSTStatus object is set to false.')
agentDSTRepeatingStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTRepeatingStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTRepeatingStartMonth.setDescription('the repeating start month (January = 1, .., Decenber = 12)')
agentDSTRepeatingStartWhichDay = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTRepeatingStartWhichDay.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTRepeatingStartWhichDay.setDescription('WhichDay means 0 = last week 1 = 1st week 2 = 2nd week 3 = 3th week 4 = 4th week ')
agentDSTRepeatingStartDayOfWeek = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTRepeatingStartDayOfWeek.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTRepeatingStartDayOfWeek.setDescription('Day Of Week Sun = 1 Mon = 2 Tue = 3 Wed = 4 Thu = 5 Fri = 6 Sat = 7 ')
agentDSTRepeatingStartHour = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTRepeatingStartHour.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTRepeatingStartHour.setDescription('the hour of the DST Repeating Start Day of Week')
agentDSTRepeatingStartMinute = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTRepeatingStartMinute.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTRepeatingStartMinute.setDescription('the minute of the DST Repeating Start Hour')
agentDSTRepeatingEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTRepeatingEndMonth.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTRepeatingEndMonth.setDescription('the repeating end month (January = 1, .., Decenber = 12)')
agentDSTRepeatingEndWhichDay = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTRepeatingEndWhichDay.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTRepeatingEndWhichDay.setDescription('WhichDay means 0 = last week 1 = 1st week 2 = 2nd week 3 = 3th week 4 = 4th week ')
agentDSTRepeatingEndDayOfWeek = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTRepeatingEndDayOfWeek.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTRepeatingEndDayOfWeek.setDescription('Day Of Week Sun = 1 Mon = 2 Tue = 3 Wed = 4 Thu = 5 Fri = 6 Sat = 7 ')
agentDSTRepeatingEndHour = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTRepeatingEndHour.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTRepeatingEndHour.setDescription('the hour of the DST Repeating End Day of Week')
agentDSTRepeatingEndMinute = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTRepeatingEndMinute.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTRepeatingEndMinute.setDescription('the minute of the DST Repeating End Hour')
agentDSTAnnualStartMonth = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTAnnualStartMonth.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTAnnualStartMonth.setDescription('the annual start month (January = 1, .., Decenber = 12)')
agentDSTAnnualStartDayOfMonth = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTAnnualStartDayOfMonth.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTAnnualStartDayOfMonth.setDescription('the day of annual start month')
agentDSTAnnualStartHour = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTAnnualStartHour.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTAnnualStartHour.setDescription('the hour of the annual start day')
agentDSTAnnualStartMinute = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTAnnualStartMinute.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTAnnualStartMinute.setDescription('the minute of the annual start hour')
agentDSTAnnualEndMonth = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTAnnualEndMonth.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTAnnualEndMonth.setDescription('the annual end month (January = 1, .., Decenber = 12)')
agentDSTAnnualEndDayOfMonth = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTAnnualEndDayOfMonth.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTAnnualEndDayOfMonth.setDescription('the day of annual end month')
agentDSTAnnualEndHour = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 23))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTAnnualEndHour.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTAnnualEndHour.setDescription('the hour of annual end day of month')
agentDSTAnnualEndMinute = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 1, 8, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 59))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: agentDSTAnnualEndMinute.setStatus('mandatory')
if mibBuilder.loadTexts: agentDSTAnnualEndMinute.setDescription('the minute of annual end hour')
agentSwitchCubeTable = MibTable((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 1, 1), )
if mibBuilder.loadTexts: agentSwitchCubeTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchCubeTable.setDescription('A table of cube information.')
agentSwitchCubeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 1, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackAssetIndex"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureIndex"), (0, "CPQRACK-MIB", "cpqRackNetConnectorRack"), (0, "CPQRACK-MIB", "cpqRackNetConnectorChassis"), (0, "CPQRACK-MIB", "cpqRackNetConnectorIndex"), (0, "COMPAQ-AGENT-MIB", "agentSwitchCubeType"))
if mibBuilder.loadTexts: agentSwitchCubeEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchCubeEntry.setDescription('A switch cube description.')
agentSwitchCubeType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dualTSX", 2), ("quadT", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCubeType.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchCubeType.setDescription('This specifies the type of this instance of cube. This value will be one of the following: other(1) Cube type could not be determined. dualTSX(2) Switch Dual Base-T plus Dual LC Fiber Interconnect Module. quadT(3) Switch Quad Base-T Copper Interconnect Module. ')
agentSwitchCubeSpareName = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCubeSpareName.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchCubeSpareName.setDescription('The name of the cube. The string will be empty if the cube does not report the name or it could not be determined.')
agentSwitchCubeSparePartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchCubeSparePartNumber.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchCubeSparePartNumber.setDescription('The spare part number of the cube. The string will be empty if the enclosure does not report this function.')
agentSwitchPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 2, 1), )
if mibBuilder.loadTexts: agentSwitchPowerSupplyTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchPowerSupplyTable.setDescription('A table of power supply information.')
agentSwitchPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 2, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackAssetIndex"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureIndex"), (0, "CPQRACK-MIB", "cpqRackNetConnectorRack"), (0, "CPQRACK-MIB", "cpqRackNetConnectorChassis"), (0, "CPQRACK-MIB", "cpqRackNetConnectorIndex"), (0, "COMPAQ-AGENT-MIB", "agentSwitchPowerSupplyIndex"))
if mibBuilder.loadTexts: agentSwitchPowerSupplyEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchPowerSupplyEntry.setDescription('A switch power supply description.')
agentSwitchPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchPowerSupplyIndex.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchPowerSupplyIndex.setDescription('A number that uniquely specifies this power supply in the enclosure.')
agentSwitchPowerSupplyMaxPwrOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchPowerSupplyMaxPwrOutput.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchPowerSupplyMaxPwrOutput.setDescription('The maximum power output of the power supply in watts. The value will be -1 if the power supply does not report the value.')
agentSwitchPowerSupplyCurPwrOutput = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchPowerSupplyCurPwrOutput.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchPowerSupplyCurPwrOutput.setDescription('The current power output of the power supply in watts. The value will be -1 if the power supply does not report the value.')
agentSwitchPowerSupplyIntakeTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchPowerSupplyIntakeTemp.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchPowerSupplyIntakeTemp.setDescription('The current air temperature at the intake of the power supply in degrees celsius. The value will be -1 if the power supply does not report the value.')
agentSwitchPowerSupplyExhaustTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchPowerSupplyExhaustTemp.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchPowerSupplyExhaustTemp.setDescription('The current air temperature at the exhaust of the power supply in degrees celsius. The value will be -1 if the power supply does not report the value.')
agentSwitchPowerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("noError", 1), ("generalFailure", 2), ("bistFailure", 3), ("fanFailure", 4), ("tempFailure", 5), ("interlockOpen", 6), ("epromFailed", 7), ("vrefFailed", 8), ("dacFailed", 9), ("ramTestFailed", 10), ("voltageChannelFailed", 11), ("orringdiodeFailed", 12), ("brownOut", 13), ("giveupOnStartup", 14), ("nvramInvalid", 15), ("calibrationTableInvalid", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchPowerSupplyStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchPowerSupplyStatus.setDescription('The status of the power supply.')
agentSwitchPowerSupplyInputLineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("noError", 1), ("lineOverVoltage", 2), ("lineUnderVoltage", 3), ("lineHit", 4), ("brownOut", 5), ("linePowerLoss", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchPowerSupplyInputLineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchPowerSupplyInputLineStatus.setDescription('The status of line input power.')
agentSwitchPowerSupplyCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchPowerSupplyCondition.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchPowerSupplyCondition.setDescription('The condition of the power supply. This value will be one of the following: other(1) The status could not be determined or not present. ok(2) The power supply is operating normally. degraded(3) A temperature sensor, fan or other power supply component is outside of normal operating range. failed(4) A power supply component detects a condition that could possibly damage the system.')
agentSwitchFanTable = MibTable((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 3, 1), )
if mibBuilder.loadTexts: agentSwitchFanTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchFanTable.setDescription('A table of fan information.')
agentSwitchFanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 3, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackAssetIndex"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureIndex"), (0, "CPQRACK-MIB", "cpqRackNetConnectorRack"), (0, "CPQRACK-MIB", "cpqRackNetConnectorChassis"), (0, "CPQRACK-MIB", "cpqRackNetConnectorIndex"), (0, "COMPAQ-AGENT-MIB", "agentSwitchFanIndex"))
if mibBuilder.loadTexts: agentSwitchFanEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchFanEntry.setDescription('A switch fan description.')
agentSwitchFanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchFanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchFanIndex.setDescription('A number that uniquely specifies this fan within this server enclosure in the rack.')
agentSwitchFanCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchFanCondition.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchFanCondition.setDescription('The condition of the fan. This value will be one of the following: other(1) Fan status detection is not supported. ok(2) The fan is operating properly. degraded(3) A redundant fan is not operating properly. failed(4) A non-redundant fan is not operating properly.')
agentSwitchTempSensorTable = MibTable((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 4, 1), )
if mibBuilder.loadTexts: agentSwitchTempSensorTable.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchTempSensorTable.setDescription('A table of temperature sensor information.')
agentSwitchTempSensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 4, 1, 1), ).setIndexNames((0, "CPQRACK-MIB", "cpqRackAssetIndex"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureRack"), (0, "CPQRACK-MIB", "cpqRackCommonEnclosureIndex"), (0, "CPQRACK-MIB", "cpqRackNetConnectorRack"), (0, "CPQRACK-MIB", "cpqRackNetConnectorChassis"), (0, "CPQRACK-MIB", "cpqRackNetConnectorIndex"), (0, "COMPAQ-AGENT-MIB", "agentSwitchTempSensorIndex"))
if mibBuilder.loadTexts: agentSwitchTempSensorEntry.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchTempSensorEntry.setDescription('A switch temperature sensor description.')
agentSwitchTempSensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchTempSensorIndex.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchTempSensorIndex.setDescription('A number that uniquely specifies this temperature sensor within this server enclosure in the rack.')
agentSwitchTempSensorCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchTempSensorCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchTempSensorCurrent.setDescription('This is the current temperature sensor reading in degrees celsius. If this value cannot be determined by software, then a value of -1 will be returned.')
agentSwitchTempSensorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchTempSensorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchTempSensorThreshold.setDescription('This is the threshold temperature sensor setting in degrees celsius. This is the temperature in which the sensor will be considered to be in a tripped state this causing some action to occur depending on the type of the sensor. The action of temperature sensor threshold will be indicated by the cpqRackCommonEnclosureTempType item. If the type is blowout(5), then the temperature sensor will cause the fans to speed up. If the type is caution(9), then the temperature sensor is in a degraded state. If the type is critical(15), then the server will be considered as in a failed state. If this value cannot be determined by software, then a value of -1 will be returned.')
agentSwitchTempSensorCondition = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ok", 2), ("degraded", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchTempSensorCondition.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchTempSensorCondition.setDescription('The Temperature sensor condition. This value will be one of the following: other(1) Temperature could not be determined. ok(2) The temperature sensor is within the normal operating range. degraded(3) The temperature sensor is outside of the normal operating range. failed(4) The temperature sensor detects a condition that could possibly damage the system. The system will automatically shutdown if the failed(4) condition results, so it is unlikely that this value will ever be returned by the agent.')
agentSwitchTempSensorTempType = MibTableColumn((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 9, 15))).clone(namedValues=NamedValues(("other", 1), ("blowout", 5), ("caution", 9), ("critical", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: agentSwitchTempSensorTempType.setStatus('mandatory')
if mibBuilder.loadTexts: agentSwitchTempSensorTempType.setDescription('This specifies the type of this instance of temperature sensor. This value will be one of the following: other(1) Temperature threshold type could not be determined. blowout(5) If a blowout(5) temperature sensor reaches its threshold, the fan or fans in the area of the temperature sensor will increase in speed in an attempt to reduce the temperature before a caution or critical threshold is reached. caution(9) If a caution(9) temperature sensor reaches its threshold, the cpqRackCommonEnclosureTempCondition will be set to degraded(3) and the system will either continue or shutdown depending on the user preferences. critical(15) If a critical(15) temperature sensor reaches its threshold, the cpqHeTemperatureCondition will be set to failed(4) and the system will shutdown.')
endOfMIB = MibScalar((1, 3, 6, 1, 4, 1, 232, 161, 3, 3, 9999), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: endOfMIB.setStatus('mandatory')
if mibBuilder.loadTexts: endOfMIB.setDescription('End of MIB')
mibBuilder.exportSymbols("COMPAQ-AGENT-MIB", agentSwitchFan=agentSwitchFan, agentBscSwFileLoadType=agentBscSwFileLoadType, agentBscSwFileDscr=agentBscSwFileDscr, agentBscSwFileTime=agentBscSwFileTime, agentSNTPPollInterval=agentSNTPPollInterval, agentSlipModeManagerBaudRate=agentSlipModeManagerBaudRate, agentDSTRepeatingEndHour=agentDSTRepeatingEndHour, agentDSTRepeatingEndMonth=agentDSTRepeatingEndMonth, agentSwitchCubeSparePartNumber=agentSwitchCubeSparePartNumber, agentSwitchTempSensor=agentSwitchTempSensor, agentSwitchPowerSupplyInputLineStatus=agentSwitchPowerSupplyInputLineStatus, agentBscSwFileEntry=agentBscSwFileEntry, agentDSTRepeatingStartWhichDay=agentDSTRepeatingStartWhichDay, agentIpNumOfIf=agentIpNumOfIf, agentDSTRepeatingStartDayOfWeek=agentDSTRepeatingStartDayOfWeek, agentSwitchTempSensorEntry=agentSwitchTempSensorEntry, agentDSTRepeatingEndMinute=agentDSTRepeatingEndMinute, agentConsoleModeManagerBaudRate=agentConsoleModeManagerBaudRate, agentBscSwFileIndex=agentBscSwFileIndex, agentIpTftpServerAddr=agentIpTftpServerAddr, agentSlipModeManagerRemoteIP=agentSlipModeManagerRemoteIP, agentBscFileServerTftpPort=agentBscFileServerTftpPort, agentSwitchFanTable=agentSwitchFanTable, agentIpGetIpFrom=agentIpGetIpFrom, agentDSTRepeatingStartHour=agentDSTRepeatingStartHour, agentIpTrapManagerComm=agentIpTrapManagerComm, agentSwitchFanIndex=agentSwitchFanIndex, agentBscSwFileLocateId=agentBscSwFileLocateId, agentSlipModeManagerLocalIP=agentSlipModeManagerLocalIP, agentSNTPState=agentSNTPState, agentFileTransfer=agentFileTransfer, agentMibCapabilityTable=agentMibCapabilityTable, agentSNTPTimeZone=agentSNTPTimeZone, agentSwitchCubeSpareName=agentSwitchCubeSpareName, agentSwitchTempSensorCurrent=agentSwitchTempSensorCurrent, endOfMIB=endOfMIB, agentMibCapabilityType=agentMibCapabilityType, agentSNTPUpTime=agentSNTPUpTime, agentSwitchPowerSupplyExhaustTemp=agentSwitchPowerSupplyExhaustTemp, agentConsoleModeManager=agentConsoleModeManager, agentBscSwFileTable=agentBscSwFileTable, agentMibCapabilityDescr=agentMibCapabilityDescr, agentIpTrapManagerTable=agentIpTrapManagerTable, agentGeneralMgmt=agentGeneralMgmt, agentSwitchTempSensorTempType=agentSwitchTempSensorTempType, agentSwitchPowerSupplyStatus=agentSwitchPowerSupplyStatus, agentSwitchTempSensorTable=agentSwitchTempSensorTable, agentDSTRepeatingEndDayOfWeek=agentDSTRepeatingEndDayOfWeek, agentDSTOffset=agentDSTOffset, agentSNTPTimeSource=agentSNTPTimeSource, agentSNTPServer1IPAddr=agentSNTPServer1IPAddr, agentSwitchFanCondition=agentSwitchFanCondition, agentBscSwFileCtrl=agentBscSwFileCtrl, agentDSTAnnualEndDayOfMonth=agentDSTAnnualEndDayOfMonth, agentSwitchPowerSupplyCurPwrOutput=agentSwitchPowerSupplyCurPwrOutput, agentBscSwFileStatus=agentBscSwFileStatus, agentBscSwFile=agentBscSwFile, agentIpTrapManagerEntry=agentIpTrapManagerEntry, agentSwitchTempSensorIndex=agentSwitchTempSensorIndex, agentStatusConsoleInUse=agentStatusConsoleInUse, agentConsoleModeManagerParity=agentConsoleModeManagerParity, agentDSTAnnualStartDayOfMonth=agentDSTAnnualStartDayOfMonth, agentSwitchTempSensorThreshold=agentSwitchTempSensorThreshold, agentSlipModeManagerMTU=agentSlipModeManagerMTU, agentDSTAnnualStartHour=agentDSTAnnualStartHour, agentBscSwFileTransferType=agentBscSwFileTransferType, agentBasicInfo=agentBasicInfo, agentMibCapabilityVersion=agentMibCapabilityVersion, agentSwitchMfgDate=agentSwitchMfgDate, agentSwitchPowerSupplyCondition=agentSwitchPowerSupplyCondition, agentRs232PortConfig=agentRs232PortConfig, agentSystemReset=agentSystemReset, agentSNTPCurrentTime=agentSNTPCurrentTime, agentStatusSaveCfg=agentStatusSaveCfg, agentOutOfBandBaudRateConfig=agentOutOfBandBaudRateConfig, agentDSTAnnualEndMonth=agentDSTAnnualEndMonth, agentDSTAnnualStartMinute=agentDSTAnnualStartMinute, agentDSTRepeatingStartMonth=agentDSTRepeatingStartMonth, agentSwitchPowerSupplyEntry=agentSwitchPowerSupplyEntry, agentBscSwFileAddr=agentBscSwFileAddr, agentDSTRepeatingEndWhichDay=agentDSTRepeatingEndWhichDay, agentDSTRepeatingStartMinute=agentDSTRepeatingStartMinute, agentSwitchCubeEntry=agentSwitchCubeEntry, agentSwitchCube=agentSwitchCube, agentDSTStatus=agentDSTStatus, agentDSTAnnualStartMonth=agentDSTAnnualStartMonth, agentMgmtProtocolCapability=agentMgmtProtocolCapability, agentMibCapabilityEntry=agentMibCapabilityEntry, agentSwitchCommonMgmt=agentSwitchCommonMgmt, agentIpTrapManagerStatus=agentIpTrapManagerStatus, agentDSTAnnualEndHour=agentDSTAnnualEndHour, agentSwitchFanEntry=agentSwitchFanEntry, agentSNTPServer2IPAddr=agentSNTPServer2IPAddr, agentDST=agentDST, agentConsoleModeManagerStopBits=agentConsoleModeManagerStopBits, agentSwitchPowerSupplyIntakeTemp=agentSwitchPowerSupplyIntakeTemp, agentDSTAnnualEndMinute=agentDSTAnnualEndMinute, agentIpProtoConfig=agentIpProtoConfig, agentSlipModeManager=agentSlipModeManager, agentMibCapabilityIndex=agentMibCapabilityIndex, agentSwitchFirmwareMfgDate=agentSwitchFirmwareMfgDate, agentSaveCfg=agentSaveCfg, agentSwitchPowerSupplyMaxPwrOutput=agentSwitchPowerSupplyMaxPwrOutput, agentSwitchPowerSupply=agentSwitchPowerSupply, agentSwitchCubeTable=agentSwitchCubeTable, agentIpTrapManager=agentIpTrapManager, agentSwitchPowerSupplyIndex=agentSwitchPowerSupplyIndex, agentIpTrapManagerIpAddr=agentIpTrapManagerIpAddr, agentSwitchPowerSupplyTable=agentSwitchPowerSupplyTable, agentSwitchTempSensorCondition=agentSwitchTempSensorCondition, agentSwitchCubeType=agentSwitchCubeType, agentConsoleModeManagerDataBits=agentConsoleModeManagerDataBits, agentSNTP=agentSNTP, agentSNTPBootTime=agentSNTPBootTime, agentBasicConfig=agentBasicConfig)
