#
# PySNMP MIB module CISCO-SYSTEM-EXT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SYSTEM-EXT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:13:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
TimeIntervalSec, EntPhysicalIndexOrZero = mibBuilder.importSymbols("CISCO-TC", "TimeIntervalSec", "EntPhysicalIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
MibIdentifier, ObjectIdentity, ModuleIdentity, Unsigned32, Bits, IpAddress, Gauge32, Counter32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, TimeTicks, NotificationType, iso = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "Bits", "IpAddress", "Gauge32", "Counter32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "TimeTicks", "NotificationType", "iso")
DateAndTime, TruthValue, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "TruthValue", "TextualConvention", "DisplayString")
ciscoSystemExtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 305))
ciscoSystemExtMIB.setRevisions(('2016-07-19 00:00', '2016-06-07 00:00', '2015-08-19 00:00', '2007-08-06 00:00', '2006-11-29 00:00', '2006-09-25 00:00', '2005-11-09 00:00', '2005-06-14 00:00', '2004-04-19 00:00', '2003-05-02 00:00', '2003-03-02 00:00', '2002-11-19 00:00', '2002-10-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSystemExtMIB.setRevisionsDescriptions(('Added support for ciscoSysReloadGroup.', 'Added cseMaintModeState object. Added new notifications cseNormalModeChangeNotify and cseMaintModeChangeNotify. Added new group ciscoSystemMaintModeGroup. Added new objects ciscoSystemNormalModeNotifEnable and ciscoSystemMaintModeNotifEnable. Added new group ciscoSystemMaintModeNotifControl. Added compilance ciscoSystemExtMIBComplianceRev10 to replace ciscoSystemExtMIBComplianceRev9. Added object group ciscoSystemMaintModeObjectsGroup and notification group ciscoSystemMaintModeNotificationGroup.', 'Added support for ciscoSystemSwitchingModeObjectsGroup.', "-Added a scalar object 'cseSysUpTime' -Added an Object Group ciscoSystemExtInfoGroupRev3 and a MODULE-COMPLIANCE ciscoSystemExtMIBComplianceRev8 to include the new object.", 'Added ciscoSystemExtInfoFIPSGroup. Added a new object cseSysFIPSModeActivation.', '-Added cseSwCoresFileName in cseSwCoresTable. -Added new notification cseFailSwCoreNotifyExtended. -Added new group ciscoSystemExtSwFailureGroup3. -Added new group ciscoSystemExtNotificationGroupSup2. -Added compliance ciscoSystemExtMIBComplianceRev6 to replace ciscoSystemExtMIBComplianceRev5. -Added new group ciscoSystemExtSwFailureControlGroup. -Added new ciscoSwFailureNotifEnable object.', 'Added a new group ciscoSystemExtInfoTelnetGroup. Added a new object cseSysTelnetServiceActivation.', 'Updated CseHaRestartReason Added a new table cseSwCoresTable. Added notifications - cseFailSwCoreNotify - cseShutDownNotify Added a new group ciscoSystemExtSwFailureGroup2. Added a new group ciscoSystemExtNotificationGroup1. Added a new object cseSysConsolePortStatus. Added a new group ciscoSystemExtInfoGroupRev2. Added a new compliance group ciscoSystemExtMIBComplianceRev4.', 'Added a new object cseSwCorePath.', 'Added a new object cseWriteErase. Added a new group ciscoSystemExtInfoGroupOptional. A new compliance ciscoSystemExtMIBComplianceRev2 added to replace ciscoSystemExtMIBComplianceRev1.', 'Added cseSysAutoSync and cseSysAutoSyncState.', 'Added cseSysConfLastChange.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSystemExtMIB.setLastUpdated('201606140000Z')
if mibBuilder.loadTexts: ciscoSystemExtMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoSystemExtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553 -NETS E-mail: cs-san@cisco.com')
if mibBuilder.loadTexts: ciscoSystemExtMIB.setDescription('MIB module for monitoring High Availability, SNMP SET errors and bandwidths. This mib module also provides the information on core files that are generated in the system. GLOSSARY FIPS Federal Information Processing Standards Publication.')
ciscoSystemExtMIBNotifsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 0))
ciscoSystemExtMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1))
ciscoSystemExtMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 2))
ciscoSysInfoGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 1))
ciscoSysErrorGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 2))
ciscoHaGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 3))
ciscoSwFailureGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4))
ciscoSwFailureNotifControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 5))
ciscoSystemSwitchingModeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 6))
ciscoSystemMaintModeGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 7))
ciscoSystemMaintModeNotifControl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 8))
ciscoSystemReloadGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 9))
class CseHaRestartReason(TextualConvention, Integer32):
    description = 'Reason codes for the restart of a service. unknown (1) - ungraceful exit ungracefulExit (2) - ungraceful exit otherSignal (3) - service got some other signal sigterm (4) - received SIGTERM softwareUpgrade (5) - software upgrade configUpdate (6) - config update configRemove (7) - config removal shutdown (8) - manually shutdown aborted (9) - aborted heartbeatFailure (10) - heartbeat failure userTerminate (11) - user termination gracefulExit (12) - graceful exit failureNoCallhome (13)- service exited but it does not want a callhome message to be generated serviceTimeout (14) - service timeout'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("unknown", 1), ("ungracefulExit", 2), ("otherSignal", 3), ("sigterm", 4), ("softwareUpgrade", 5), ("configUpdate", 6), ("configRemove", 7), ("shutdown", 8), ("aborted", 9), ("heartbeatFailure", 10), ("userTerminate", 11), ("gracefulExit", 12), ("noCallHomeFailure", 13), ("serviceTimeout", 14))

class CiscoMaintModeState(TextualConvention, Integer32):
    description = 'Maintenance Mode state for the system. normal (1) - normal operational state maintenance (2) - maintenance mode operational state unplannedMaint (3) - unplanned maintenance state'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("normal", 1), ("maintenance", 2), ("unplannedMaint", 3))

cseSysCPUUtilization = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 1, 1), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: cseSysCPUUtilization.setStatus('current')
if mibBuilder.loadTexts: cseSysCPUUtilization.setDescription('The average utilization of CPU on the active supervisor.')
cseSysMemoryUtilization = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('%').setMaxAccess("readonly")
if mibBuilder.loadTexts: cseSysMemoryUtilization.setStatus('current')
if mibBuilder.loadTexts: cseSysMemoryUtilization.setDescription('The average utilization of memory on the active supervisor.')
cseSysConfLastChange = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseSysConfLastChange.setStatus('current')
if mibBuilder.loadTexts: cseSysConfLastChange.setDescription('The local date and time when the configuration was last changed. This object will be set to zero on power cycle or on reboot of the system. Also, if the clock is changed on local system it is set to zero.')
cseSysAutoSync = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("sync", 1), ("noSync", 2))).clone('noSync')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseSysAutoSync.setStatus('current')
if mibBuilder.loadTexts: cseSysAutoSync.setDescription('The state of the auto synchronization of images between the active and standby supervisor. Setting the value to sync when the existing value is sync, has no effect on the operation.')
cseSysAutoSyncState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("inProgress", 1), ("succeeded", 2), ("failed", 3), ("notStarted", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseSysAutoSyncState.setStatus('current')
if mibBuilder.loadTexts: cseSysAutoSyncState.setDescription("The status of the current auto synchronization process, or if no such process is in progress, then the state of the most recent one. The value 'notStarted' indicates no auto synchronization process has occurred recently.")
cseWriteErase = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noOp", 1), ("eraseAll", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseWriteErase.setStatus('current')
if mibBuilder.loadTexts: cseWriteErase.setDescription("This object is used to initiate a write erase on the device's saved configuration file(s) from which the device loads its configuration when it restarts. If the value of this object is set to 'eraseAll', then all the saved configurations are removed. No action is taken when the this object is set to 'noOp'. When read, the value of this object is always 'noOp'.")
cseSysConsolePortStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("connected", 1), ("notConnected", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseSysConsolePortStatus.setStatus('current')
if mibBuilder.loadTexts: cseSysConsolePortStatus.setDescription("This object describes the status of the console port on this device. The status 'connected' means that there is a cable attached to the console port. The status 'notConnected' means that there is no connection out of the console port.")
cseSysTelnetServiceActivation = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 1, 8), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseSysTelnetServiceActivation.setStatus('current')
if mibBuilder.loadTexts: cseSysTelnetServiceActivation.setDescription('Enables or disables the Telnet service on the device. In other words, it enables or disables the telneting to the device.')
cseSysFIPSModeActivation = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 1, 9), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cseSysFIPSModeActivation.setReference('FIPS PUB 140-2 Security Requirements for Cryptographic Modules')
if mibBuilder.loadTexts: cseSysFIPSModeActivation.setStatus('current')
if mibBuilder.loadTexts: cseSysFIPSModeActivation.setDescription('The object to enable/disable FIPS mode on the device. FIPS 140-2 is a set of security requirements for cryptographic modules and it details the U.S. Government requirements for cryptographic modules. A module will comprise both hardware and software, eg a datacenter switching or routing module. The module is said to be in FIPS enabled mode when a request is recieved to enable the FIPS mode and a set of self-tests are successfully run in response to the request. If the self-tests fail, then an appropriate error is returned.')
cseSysUpTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 1, 10), TimeIntervalSec()).setUnits('Seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cseSysUpTime.setStatus('current')
if mibBuilder.loadTexts: cseSysUpTime.setDescription('The time (in seconds) since the entire system was last re-initialized as a result of reload. The initialization being system loaded and running with a system image software on the first active supervisor (SUP). In High Availibility (HA) capable system / System that provides Supervisor module redundancy, this uptime indicates time elapsed since the first active SUP was booted. This will not change even if the active SUP goes down and stand-by takes over as active.')
cseSnmpErrorTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 2, 1), )
if mibBuilder.loadTexts: cseSnmpErrorTable.setStatus('current')
if mibBuilder.loadTexts: cseSnmpErrorTable.setDescription("A table containing information about the errors which have recently caused the generation of a SNMP Response PDU with a non-zero value in its error-status field for SNMP Set Response PDU. This table serves as an extension to the SNMP's error status when a SNMP Set request fails. SNMP returns only a pre-defined set of standard error codes which does not convey the specific cause for an error. Typically, there is an incumbent and sizable burden on the configuration application to determine if the configuration request failure is the result of a resource issue, a security issue, or an application error (like an object depending on some other objects). So from a user perspective, it is important that a specific error be made known. Ideally, when a 'badValue' error occurs for a given set request, an application can query the command responder for more details on the error. This table provides a framework for the command responders to provide more information on the SET errors. It is up to the implementation to create entries in this table for either only certain SNMP errors or all of the SNMP errors. Note that only most recent incarnation of an entry is kept in this table.")
cseSnmpErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SYSTEM-EXT-MIB", "cseSnmpErrorAddressType"), (0, "CISCO-SYSTEM-EXT-MIB", "cseSnmpErrorAddress"), (0, "CISCO-SYSTEM-EXT-MIB", "cseSnmpErrorRequestId"))
if mibBuilder.loadTexts: cseSnmpErrorEntry.setStatus('current')
if mibBuilder.loadTexts: cseSnmpErrorEntry.setDescription('An entry (conceptual row) in the cseSnmpErrorTable, containing information about an error which has recently caused a SNMP SetRequest to fail. An entry is created by the agent on the occurrence of an error, and is deleted approximately 5 minutes later. The reasons for this are : - to prevent old entries clogging the table. - optimal utilization of the resources like memory.')
cseSnmpErrorAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 2, 1, 1, 1), InetAddressType())
if mibBuilder.loadTexts: cseSnmpErrorAddressType.setStatus('current')
if mibBuilder.loadTexts: cseSnmpErrorAddressType.setDescription('The type of address from which the error-ed SetRequest originated.')
cseSnmpErrorAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 2, 1, 1, 2), InetAddress())
if mibBuilder.loadTexts: cseSnmpErrorAddress.setStatus('current')
if mibBuilder.loadTexts: cseSnmpErrorAddress.setDescription('The address from which the error-ed SetRequest originated.')
cseSnmpErrorRequestId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 2, 1, 1, 3), Unsigned32())
if mibBuilder.loadTexts: cseSnmpErrorRequestId.setStatus('current')
if mibBuilder.loadTexts: cseSnmpErrorRequestId.setDescription('The request-id of the error-ed SetRequest.')
cseSnmpErrorCode = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 2, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseSnmpErrorCode.setStatus('current')
if mibBuilder.loadTexts: cseSnmpErrorCode.setDescription('The code for the Mib object specific error which caused a SetRequest to fail. This error code is platform-specific and for debugging purposes only. For information on this code, the corresponding instance of cseSnmpErrorDescription must be used. This code is not the same as the value contained in the error-status field of SNMP Response PDU.')
cseSnmpErrorDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 2, 1, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseSnmpErrorDescription.setStatus('current')
if mibBuilder.loadTexts: cseSnmpErrorDescription.setDescription('The error description for the error happened for the SetRequest.')
cseHaRestartReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 3, 2), CseHaRestartReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cseHaRestartReason.setStatus('current')
if mibBuilder.loadTexts: cseHaRestartReason.setDescription("The reason for most recent restart of a service on the 'active' supervisor.")
cseHaRestartStateless = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 3, 3), TruthValue()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cseHaRestartStateless.setStatus('current')
if mibBuilder.loadTexts: cseHaRestartStateless.setDescription("Tells if the most recent restart of a service on the 'active' supervisor was 'stateless' or not. A 'stateless' restart of a service is where no runtime information is preserved while restarting the service.")
cseHaRestartService = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 3, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cseHaRestartService.setStatus('current')
if mibBuilder.loadTexts: cseHaRestartService.setDescription("Name of the service (or process) that was restarted on the 'active' supervisor.")
cseHaShutDownReason = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 3, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cseHaShutDownReason.setStatus('current')
if mibBuilder.loadTexts: cseHaShutDownReason.setDescription('The description of the reason as to why the system is going to go down.')
cseSwCorePath = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseSwCorePath.setStatus('current')
if mibBuilder.loadTexts: cseSwCorePath.setDescription('Provides the path where the software cores are stored on the system. The management application can use this path to copy the cores from the system using CISCO-FLASH-MIB.')
cseSwCoresTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4, 2), )
if mibBuilder.loadTexts: cseSwCoresTable.setStatus('current')
if mibBuilder.loadTexts: cseSwCoresTable.setDescription('A table containing information about the system cores that have been generated as an effect of some system failures.')
cseSwCoresEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4, 2, 1), ).setIndexNames((0, "CISCO-SYSTEM-EXT-MIB", "cseSwCoresModule"), (0, "CISCO-SYSTEM-EXT-MIB", "cseSwCoresProcName"), (0, "CISCO-SYSTEM-EXT-MIB", "cseSwCoresInstance"))
if mibBuilder.loadTexts: cseSwCoresEntry.setStatus('current')
if mibBuilder.loadTexts: cseSwCoresEntry.setDescription('An entry (conceptual row) in the cseSwCoresTable, containing information about cores that have been generated.')
cseSwCoresModule = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4, 2, 1, 1), EntPhysicalIndexOrZero())
if mibBuilder.loadTexts: cseSwCoresModule.setStatus('current')
if mibBuilder.loadTexts: cseSwCoresModule.setDescription('The physical module on which the process crashed.')
cseSwCoresProcName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4, 2, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 64)))
if mibBuilder.loadTexts: cseSwCoresProcName.setStatus('current')
if mibBuilder.loadTexts: cseSwCoresProcName.setDescription('The name of the process that crashed and generated core.')
cseSwCoresInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4, 2, 1, 3), Unsigned32())
if mibBuilder.loadTexts: cseSwCoresInstance.setStatus('current')
if mibBuilder.loadTexts: cseSwCoresInstance.setDescription('The instance of the core for a process identified by cseSwCoresProcName and on the module identified by cseSwCoresModule. To uniquely identify a core, the module number and process name are not sufficient as there could be multiple cores for the same module number and process name.')
cseSwCoresPID = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4, 2, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseSwCoresPID.setStatus('current')
if mibBuilder.loadTexts: cseSwCoresPID.setDescription('The process identifier of the process that dumped the core.')
cseSwCoresTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4, 2, 1, 5), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseSwCoresTimeCreated.setStatus('current')
if mibBuilder.loadTexts: cseSwCoresTimeCreated.setDescription('The time at which the core was created.')
cseSwCoresSlotNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4, 2, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseSwCoresSlotNum.setStatus('current')
if mibBuilder.loadTexts: cseSwCoresSlotNum.setDescription('The slot number corresponding to the cseSwCoresModule in this chassis.')
cseSwCoresFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4, 2, 1, 7), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseSwCoresFileName.setStatus('current')
if mibBuilder.loadTexts: cseSwCoresFileName.setDescription('This object contains the core file-name(including the path, relative to the value in the cseSwCorePath object). If the cseSwCorePath contains zero length octet string, then this object will contain the filename with absolute path. If this object contains zero length octet string, then the core file is available in path identified in cseSwCorePath.')
ciscoSystemSwitchingModeAdmin = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("nexus3000", 3), ("nexus9000", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoSystemSwitchingModeAdmin.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemSwitchingModeAdmin.setDescription("Object to specify system's switching mode. 'other' - any other state not covered by below enumerations 'notApplicable' - switching mode configuration is not applicable for this system 'nexus3000' - system switching mode is configured as Nexus 3000 'nexus9000' - system switching mode is configured as Nexus 9000.")
ciscoSystemSwitchingModeOper = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 6, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("nexus3000", 3), ("nexus9000", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoSystemSwitchingModeOper.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemSwitchingModeOper.setDescription("Object indicate system's operational switching mode. 'other' - any other state not covered by below enumerations 'notApplicable' - switching mode configuration is not applicable for this system 'nexus3000' - system is opeerating in Nexus 3000 mode 'nexus9000' - system is opeerating in Nexus 9000 mode.")
cseMaintModeState = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 7, 1), CiscoMaintModeState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseMaintModeState.setStatus('current')
if mibBuilder.loadTexts: cseMaintModeState.setDescription('The maintenance mode operational state for the system.')
cseSystemReloadPending = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 9, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cseSystemReloadPending.setStatus('current')
if mibBuilder.loadTexts: cseSystemReloadPending.setDescription("This object is used to indicate if a system reload is needed to make feature configuration change effective. The object returns 'true' if a system reload is required; it returns 'false' if no system reload is required.")
ciscoSwFailureNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 5, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoSwFailureNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ciscoSwFailureNotifEnable.setDescription('This object is used for administratively enabling/disabling the cseFailSwCoreNotify or cseFailSwCoreNotifyExtended notifications.')
ciscoSystemNormalModeNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 8, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoSystemNormalModeNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemNormalModeNotifEnable.setDescription('This object is used for administratively enabling/disabling the cseNormalModeChangeNotify.')
ciscoSystemMaintModeNotifEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 8, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ciscoSystemMaintModeNotifEnable.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemMaintModeNotifEnable.setDescription('This object is used for administratively enabling/disabling the cseMaintModeChangeNotify.')
cseHaNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 3, 5))
cseHaNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 3, 5, 0))
cseHaRestartNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 3, 5, 0, 1)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseHaRestartReason"), ("CISCO-SYSTEM-EXT-MIB", "cseHaRestartService"), ("CISCO-SYSTEM-EXT-MIB", "cseHaRestartStateless"))
if mibBuilder.loadTexts: cseHaRestartNotify.setStatus('current')
if mibBuilder.loadTexts: cseHaRestartNotify.setDescription("A service restart notification is generated whenever a service (or a process) on the 'active' supervisor is restarted.")
cseShutDownNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 3, 5, 0, 2)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseHaShutDownReason"))
if mibBuilder.loadTexts: cseShutDownNotify.setStatus('current')
if mibBuilder.loadTexts: cseShutDownNotify.setDescription('A system shutdown notification is generated whenever a system is going to shut down. The cseHaShutDownReason, describes the reason as to why the system is going to go down.')
cseFailNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4, 3))
cseFailNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4, 3, 0))
cseFailSwCoreNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4, 3, 0, 1))
if mibBuilder.loadTexts: cseFailSwCoreNotify.setStatus('current')
if mibBuilder.loadTexts: cseFailSwCoreNotify.setDescription('A notification is generated whenever a software crash occurs and a core file is generated.')
cseFailSwCoreNotifyExtended = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 4, 3, 0, 2)).setObjects(("SNMPv2-MIB", "sysName"), ("CISCO-SYSTEM-EXT-MIB", "cseSwCoresFileName"), ("CISCO-SYSTEM-EXT-MIB", "cseSwCorePath"), ("CISCO-SYSTEM-EXT-MIB", "cseSwCoresPID"))
if mibBuilder.loadTexts: cseFailSwCoreNotifyExtended.setStatus('current')
if mibBuilder.loadTexts: cseFailSwCoreNotifyExtended.setDescription('A notification is generated whenever a software crash occurs and a core file is generated.')
cseMaintModeNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 7, 2))
cseMaintModeNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 7, 2, 0))
cseNormalModeChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 7, 2, 0, 1)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseMaintModeState"))
if mibBuilder.loadTexts: cseNormalModeChangeNotify.setStatus('current')
if mibBuilder.loadTexts: cseNormalModeChangeNotify.setDescription('A normal mode state change is generated when the system is changed from maintenance mode to normal mode.')
cseMaintModeChangeNotify = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 305, 1, 7, 2, 0, 2)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseMaintModeState"))
if mibBuilder.loadTexts: cseMaintModeChangeNotify.setStatus('current')
if mibBuilder.loadTexts: cseMaintModeChangeNotify.setDescription('A maintenance mode state change is generated when the system is changed from normal mode to maintenance mode.')
ciscoSystemExtMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 1))
ciscoSystemExtMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2))
ciscoSystemExtMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 1, 1)).setObjects(("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtErrorGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtMIBCompliance = ciscoSystemExtMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemExtMIBCompliance.setDescription('The compliance statement for entities which implement the CISCO-SYTEM-EXT-MIB.')
ciscoSystemExtMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 1, 2)).setObjects(("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtErrorGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtMIBComplianceRev1 = ciscoSystemExtMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemExtMIBComplianceRev1.setDescription('The compliance statement for entities which implement the CISCO-SYTEM-EXT-MIB.')
ciscoSystemExtMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 1, 3)).setObjects(("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtErrorGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupOptional"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtMIBComplianceRev2 = ciscoSystemExtMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemExtMIBComplianceRev2.setDescription('The compliance statement for entities which implement the CISCO-SYTEM-EXT-MIB.')
ciscoSystemExtMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 1, 4)).setObjects(("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtErrorGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupOptional"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtMIBComplianceRev3 = ciscoSystemExtMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemExtMIBComplianceRev3.setDescription('The compliance statement for entities which implement the CISCO-SYTEM-EXT-MIB.')
ciscoSystemExtMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 1, 5)).setObjects(("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev2"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtErrorGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroupSup1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroupRev1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupOptional"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtMIBComplianceRev4 = ciscoSystemExtMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemExtMIBComplianceRev4.setDescription('The compliance statement for entities which implement the CISCO-SYTEM-EXT-MIB.')
ciscoSystemExtMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 1, 6)).setObjects(("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev2"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtErrorGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroupSup1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroupRev1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupOptional"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup2"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoTelnetGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtMIBComplianceRev5 = ciscoSystemExtMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemExtMIBComplianceRev5.setDescription('The compliance statement for entities which implement the CISCO-SYTEM-EXT-MIB.')
ciscoSystemExtMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 1, 7)).setObjects(("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev2"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtErrorGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroupRev1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupOptional"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup2"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoTelnetGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup3"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroupSup2"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroupSup1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureControlGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtMIBComplianceRev6 = ciscoSystemExtMIBComplianceRev6.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemExtMIBComplianceRev6.setDescription('The compliance statement for entities which implement the CISCO-SYTEM-EXT-MIB.')
ciscoSystemExtMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 1, 8)).setObjects(("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev2"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtErrorGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroupSup1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroupRev1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupOptional"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup2"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoTelnetGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoFIPSGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtMIBComplianceRev7 = ciscoSystemExtMIBComplianceRev7.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemExtMIBComplianceRev7.setDescription('The compliance statement for entities which implement the CISCO-SYTEM-EXT-MIB.')
ciscoSystemExtMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 1, 9)).setObjects(("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev3"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev2"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtErrorGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroupSup1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroupRev1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupOptional"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup2"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoTelnetGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoFIPSGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtMIBComplianceRev8 = ciscoSystemExtMIBComplianceRev8.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemExtMIBComplianceRev8.setDescription('The compliance statement for entities which implement the CISCO-SYTEM-EXT-MIB.')
ciscoSystemExtMIBComplianceRev9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 1, 11)).setObjects(("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev3"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev2"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtErrorGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroupSup1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroupRev1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupOptional"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup2"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoTelnetGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoFIPSGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemSwitchingModeObjectsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtMIBComplianceRev9 = ciscoSystemExtMIBComplianceRev9.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemExtMIBComplianceRev9.setDescription('The compliance statement for entities which implement the CISCO-SYTEM-EXT-MIB.')
ciscoSystemExtMIBComplianceRev10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 1, 12)).setObjects(("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev3"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupRev2"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtErrorGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtNotificationGroupSup1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtHaGroupRev1"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoGroupOptional"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtSwFailureGroup2"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoTelnetGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemExtInfoFIPSGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemSwitchingModeObjectsGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemMaintModeObjectsGroup"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemMaintModeNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtMIBComplianceRev10 = ciscoSystemExtMIBComplianceRev10.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtMIBComplianceRev10.setDescription('The compliance statement for entities which implement the CISCO-SYTEM-EXT-MIB.')
ciscoSystemExtInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 1)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseSysCPUUtilization"), ("CISCO-SYSTEM-EXT-MIB", "cseSysMemoryUtilization"), ("CISCO-SYSTEM-EXT-MIB", "cseSysConfLastChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtInfoGroup = ciscoSystemExtInfoGroup.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemExtInfoGroup.setDescription('A collection of objects for system information. ciscoSystemExtInfoGroup object is superseded by ciscoSystemExtInfoGroupRev1.')
ciscoSystemExtErrorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 2)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseSnmpErrorCode"), ("CISCO-SYSTEM-EXT-MIB", "cseSnmpErrorDescription"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtErrorGroup = ciscoSystemExtErrorGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtErrorGroup.setDescription('A collection of objects for logging SNMP set error.')
ciscoSystemExtHaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 3)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseHaRestartReason"), ("CISCO-SYSTEM-EXT-MIB", "cseHaRestartService"), ("CISCO-SYSTEM-EXT-MIB", "cseHaRestartStateless"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtHaGroup = ciscoSystemExtHaGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtHaGroup.setDescription('A collection of objects for High Availability.')
ciscoSystemExtNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 4)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseHaRestartNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtNotificationGroup = ciscoSystemExtNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtNotificationGroup.setDescription('A collection of notifications for the High Availability.')
ciscoSystemExtInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 5)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseSysCPUUtilization"), ("CISCO-SYSTEM-EXT-MIB", "cseSysMemoryUtilization"), ("CISCO-SYSTEM-EXT-MIB", "cseSysConfLastChange"), ("CISCO-SYSTEM-EXT-MIB", "cseSysAutoSync"), ("CISCO-SYSTEM-EXT-MIB", "cseSysAutoSyncState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtInfoGroupRev1 = ciscoSystemExtInfoGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoSystemExtInfoGroupRev1.setDescription('A collection of objects for system information. ciscoSystemExtInfoGroupRev1 object is superseded by ciscoSystemExtInfoGroupRev3.')
ciscoSystemExtInfoGroupOptional = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 6)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseWriteErase"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtInfoGroupOptional = ciscoSystemExtInfoGroupOptional.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtInfoGroupOptional.setDescription('A collection of objects for system information which are optional.')
ciscoSystemExtSwFailureGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 7)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseSwCorePath"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtSwFailureGroup = ciscoSystemExtSwFailureGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtSwFailureGroup.setDescription('A collection of objects for system software failure information which are optional.')
ciscoSystemExtInfoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 8)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseSysConsolePortStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtInfoGroupRev2 = ciscoSystemExtInfoGroupRev2.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtInfoGroupRev2.setDescription('A collection of objects for system information.')
ciscoSystemExtSwFailureGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 9)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseSwCoresPID"), ("CISCO-SYSTEM-EXT-MIB", "cseSwCoresTimeCreated"), ("CISCO-SYSTEM-EXT-MIB", "cseSwCoresSlotNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtSwFailureGroup2 = ciscoSystemExtSwFailureGroup2.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtSwFailureGroup2.setDescription('A collection of objects for system software failure information which are optional.')
ciscoSystemExtNotificationGroupSup1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 10)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseShutDownNotify"), ("CISCO-SYSTEM-EXT-MIB", "cseFailSwCoreNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtNotificationGroupSup1 = ciscoSystemExtNotificationGroupSup1.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtNotificationGroupSup1.setDescription('A collection of notifications for the system MIB.')
ciscoSystemExtHaGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 11)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseHaShutDownReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtHaGroupRev1 = ciscoSystemExtHaGroupRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtHaGroupRev1.setDescription('A collection of objects for High Availability.')
ciscoSystemExtInfoTelnetGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 12)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseSysTelnetServiceActivation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtInfoTelnetGroup = ciscoSystemExtInfoTelnetGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtInfoTelnetGroup.setDescription('A collection of objects related to telnet support to the device.')
ciscoSystemExtNotificationGroupSup2 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 13)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseFailSwCoreNotifyExtended"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtNotificationGroupSup2 = ciscoSystemExtNotificationGroupSup2.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtNotificationGroupSup2.setDescription('A collection of notification related to core file creation.')
ciscoSystemExtSwFailureGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 14)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseSwCoresFileName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtSwFailureGroup3 = ciscoSystemExtSwFailureGroup3.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtSwFailureGroup3.setDescription('A collection of objects related to the core file.')
ciscoSystemExtSwFailureControlGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 15)).setObjects(("CISCO-SYSTEM-EXT-MIB", "ciscoSwFailureNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtSwFailureControlGroup = ciscoSystemExtSwFailureControlGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtSwFailureControlGroup.setDescription('This group of objects controls the sending of notifications defined in this MIB module.')
ciscoSystemExtInfoFIPSGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 16)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseSysFIPSModeActivation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtInfoFIPSGroup = ciscoSystemExtInfoFIPSGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtInfoFIPSGroup.setDescription('A collection of objects related to FIPS support to the device.')
ciscoSystemExtInfoGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 17)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseSysCPUUtilization"), ("CISCO-SYSTEM-EXT-MIB", "cseSysMemoryUtilization"), ("CISCO-SYSTEM-EXT-MIB", "cseSysConfLastChange"), ("CISCO-SYSTEM-EXT-MIB", "cseSysAutoSync"), ("CISCO-SYSTEM-EXT-MIB", "cseSysAutoSyncState"), ("CISCO-SYSTEM-EXT-MIB", "cseSysUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemExtInfoGroupRev3 = ciscoSystemExtInfoGroupRev3.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemExtInfoGroupRev3.setDescription('A collection of objects for system information.')
ciscoSystemSwitchingModeObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 18)).setObjects(("CISCO-SYSTEM-EXT-MIB", "ciscoSystemSwitchingModeAdmin"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemSwitchingModeOper"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemSwitchingModeObjectsGroup = ciscoSystemSwitchingModeObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemSwitchingModeObjectsGroup.setDescription('A collection of objects to support Switching Mode feature.')
ciscoSystemMaintModeObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 19)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseMaintModeState"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemNormalModeNotifEnable"), ("CISCO-SYSTEM-EXT-MIB", "ciscoSystemMaintModeNotifEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemMaintModeObjectsGroup = ciscoSystemMaintModeObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemMaintModeObjectsGroup.setDescription('A collection of objects to support Maint mode state feature.')
ciscoSystemMaintModeNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 20)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseNormalModeChangeNotify"), ("CISCO-SYSTEM-EXT-MIB", "cseMaintModeChangeNotify"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemMaintModeNotificationGroup = ciscoSystemMaintModeNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemMaintModeNotificationGroup.setDescription('A collection of notification related to core file creation.')
ciscoSystemReloadObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 305, 2, 2, 21)).setObjects(("CISCO-SYSTEM-EXT-MIB", "cseSystemReloadPending"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoSystemReloadObjectsGroup = ciscoSystemReloadObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoSystemReloadObjectsGroup.setDescription('A collection of objects to support system reload.')
mibBuilder.exportSymbols("CISCO-SYSTEM-EXT-MIB", ciscoSystemExtHaGroupRev1=ciscoSystemExtHaGroupRev1, cseHaRestartNotify=cseHaRestartNotify, cseShutDownNotify=cseShutDownNotify, cseSwCoresSlotNum=cseSwCoresSlotNum, cseMaintModeChangeNotify=cseMaintModeChangeNotify, cseSnmpErrorCode=cseSnmpErrorCode, cseSysTelnetServiceActivation=cseSysTelnetServiceActivation, cseSysCPUUtilization=cseSysCPUUtilization, cseFailSwCoreNotify=cseFailSwCoreNotify, cseMaintModeNotificationPrefix=cseMaintModeNotificationPrefix, cseSwCoresEntry=cseSwCoresEntry, cseMaintModeNotification=cseMaintModeNotification, ciscoSysErrorGroup=ciscoSysErrorGroup, cseHaNotification=cseHaNotification, ciscoSystemExtHaGroup=ciscoSystemExtHaGroup, cseSysUpTime=cseSysUpTime, cseSwCoresProcName=cseSwCoresProcName, ciscoHaGroup=ciscoHaGroup, ciscoSystemExtNotificationGroupSup2=ciscoSystemExtNotificationGroupSup2, ciscoSystemExtErrorGroup=ciscoSystemExtErrorGroup, ciscoSystemReloadGroup=ciscoSystemReloadGroup, cseHaShutDownReason=cseHaShutDownReason, ciscoSystemExtMIBCompliance=ciscoSystemExtMIBCompliance, ciscoSystemExtSwFailureControlGroup=ciscoSystemExtSwFailureControlGroup, ciscoSwFailureNotifControl=ciscoSwFailureNotifControl, ciscoSystemExtSwFailureGroup=ciscoSystemExtSwFailureGroup, ciscoSwFailureNotifEnable=ciscoSwFailureNotifEnable, cseFailSwCoreNotifyExtended=cseFailSwCoreNotifyExtended, cseSysConfLastChange=cseSysConfLastChange, cseSnmpErrorAddress=cseSnmpErrorAddress, cseHaRestartReason=cseHaRestartReason, ciscoSystemExtMIBComplianceRev3=ciscoSystemExtMIBComplianceRev3, ciscoSystemSwitchingModeGroup=ciscoSystemSwitchingModeGroup, PYSNMP_MODULE_ID=ciscoSystemExtMIB, cseHaRestartService=cseHaRestartService, cseSwCoresFileName=cseSwCoresFileName, cseSystemReloadPending=cseSystemReloadPending, cseHaNotificationPrefix=cseHaNotificationPrefix, ciscoSystemExtMIBNotifsPrefix=ciscoSystemExtMIBNotifsPrefix, ciscoSysInfoGroup=ciscoSysInfoGroup, cseSwCoresTable=cseSwCoresTable, ciscoSystemExtMIBComplianceRev7=ciscoSystemExtMIBComplianceRev7, ciscoSystemExtInfoGroup=ciscoSystemExtInfoGroup, cseFailNotification=cseFailNotification, cseSwCoresPID=cseSwCoresPID, ciscoSystemExtNotificationGroup=ciscoSystemExtNotificationGroup, ciscoSystemMaintModeNotifControl=ciscoSystemMaintModeNotifControl, cseSwCoresTimeCreated=cseSwCoresTimeCreated, cseSysAutoSync=cseSysAutoSync, cseSysAutoSyncState=cseSysAutoSyncState, cseSysFIPSModeActivation=cseSysFIPSModeActivation, cseSnmpErrorEntry=cseSnmpErrorEntry, cseMaintModeState=cseMaintModeState, cseHaRestartStateless=cseHaRestartStateless, ciscoSystemExtMIBComplianceRev1=ciscoSystemExtMIBComplianceRev1, cseSnmpErrorTable=cseSnmpErrorTable, cseSnmpErrorDescription=cseSnmpErrorDescription, ciscoSystemExtMIB=ciscoSystemExtMIB, cseSysMemoryUtilization=cseSysMemoryUtilization, ciscoSwFailureGroup=ciscoSwFailureGroup, ciscoSystemExtInfoGroupOptional=ciscoSystemExtInfoGroupOptional, ciscoSystemExtInfoGroupRev2=ciscoSystemExtInfoGroupRev2, ciscoSystemExtInfoGroupRev1=ciscoSystemExtInfoGroupRev1, ciscoSystemMaintModeNotifEnable=ciscoSystemMaintModeNotifEnable, ciscoSystemExtSwFailureGroup3=ciscoSystemExtSwFailureGroup3, ciscoSystemExtMIBConformance=ciscoSystemExtMIBConformance, cseSwCoresModule=cseSwCoresModule, ciscoSystemSwitchingModeAdmin=ciscoSystemSwitchingModeAdmin, cseWriteErase=cseWriteErase, cseSysConsolePortStatus=cseSysConsolePortStatus, ciscoSystemExtMIBGroups=ciscoSystemExtMIBGroups, ciscoSystemReloadObjectsGroup=ciscoSystemReloadObjectsGroup, ciscoSystemExtMIBComplianceRev10=ciscoSystemExtMIBComplianceRev10, ciscoSystemExtMIBCompliances=ciscoSystemExtMIBCompliances, ciscoSystemMaintModeObjectsGroup=ciscoSystemMaintModeObjectsGroup, ciscoSystemSwitchingModeObjectsGroup=ciscoSystemSwitchingModeObjectsGroup, ciscoSystemExtNotificationGroupSup1=ciscoSystemExtNotificationGroupSup1, ciscoSystemExtMIBComplianceRev9=ciscoSystemExtMIBComplianceRev9, cseNormalModeChangeNotify=cseNormalModeChangeNotify, CiscoMaintModeState=CiscoMaintModeState, cseFailNotificationPrefix=cseFailNotificationPrefix, ciscoSystemExtMIBComplianceRev2=ciscoSystemExtMIBComplianceRev2, ciscoSystemExtMIBObjects=ciscoSystemExtMIBObjects, ciscoSystemMaintModeNotificationGroup=ciscoSystemMaintModeNotificationGroup, cseSwCorePath=cseSwCorePath, ciscoSystemSwitchingModeOper=ciscoSystemSwitchingModeOper, ciscoSystemExtInfoTelnetGroup=ciscoSystemExtInfoTelnetGroup, ciscoSystemExtMIBComplianceRev4=ciscoSystemExtMIBComplianceRev4, ciscoSystemExtInfoGroupRev3=ciscoSystemExtInfoGroupRev3, ciscoSystemMaintModeGroup=ciscoSystemMaintModeGroup, ciscoSystemExtMIBComplianceRev5=ciscoSystemExtMIBComplianceRev5, ciscoSystemExtMIBComplianceRev8=ciscoSystemExtMIBComplianceRev8, cseSwCoresInstance=cseSwCoresInstance, cseSnmpErrorRequestId=cseSnmpErrorRequestId, ciscoSystemExtInfoFIPSGroup=ciscoSystemExtInfoFIPSGroup, ciscoSystemExtMIBComplianceRev6=ciscoSystemExtMIBComplianceRev6, ciscoSystemNormalModeNotifEnable=ciscoSystemNormalModeNotifEnable, cseSnmpErrorAddressType=cseSnmpErrorAddressType, CseHaRestartReason=CseHaRestartReason, ciscoSystemExtSwFailureGroup2=ciscoSystemExtSwFailureGroup2)
