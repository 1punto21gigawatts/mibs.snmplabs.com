#
# PySNMP MIB module NSLDAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSLDAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:08 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "SingleValueConstraint")
URLString, DistinguishedName, applIndex = mibBuilder.importSymbols("NETWORK-SERVICES-MIB", "URLString", "DistinguishedName", "applIndex")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
iso, NotificationType, Integer32, Counter32, ObjectIdentity, ModuleIdentity, Counter64, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, MibIdentifier, TimeTicks, enterprises, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "NotificationType", "Integer32", "Counter32", "ObjectIdentity", "ModuleIdentity", "Counter64", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "MibIdentifier", "TimeTicks", "enterprises", "IpAddress")
DisplayString, TimeStamp, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TextualConvention")
netscape = MibIdentifier((1, 3, 6, 1, 4, 1, 1450))
nsldap = ModuleIdentity((1, 3, 6, 1, 4, 1, 1450, 7))
if mibBuilder.loadTexts: nsldap.setLastUpdated('9707310000Z')
if mibBuilder.loadTexts: nsldap.setOrganization('Netscape Communications Corp')
if mibBuilder.loadTexts: nsldap.setContactInfo(' Frank Chen Postal: Netscape Communications Corp 501 East Middlefield Rd Mountain View, CA 94043 Tel: (415) 937 - 3703 Fax: (415) 937 - 4164 E-mail: frank@netscape.com')
if mibBuilder.loadTexts: nsldap.setDescription(' An implementation of the MADMAN mib for monitoring LDAP/CLDAP and X.500 directories described in internet draft: draft-ietf-madman-ds-mib-103.txt used for iPlanet Directory Server 5')
dsOpsTable = MibTable((1, 3, 6, 1, 4, 1, 1450, 7, 1), )
if mibBuilder.loadTexts: dsOpsTable.setStatus('current')
if mibBuilder.loadTexts: dsOpsTable.setDescription(' The table holding information related to the DS operations.')
dsOpsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: dsOpsEntry.setStatus('current')
if mibBuilder.loadTexts: dsOpsEntry.setDescription(' Entry containing operations related statistics for a DS.')
dsAnonymousBinds = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsAnonymousBinds.setStatus('current')
if mibBuilder.loadTexts: dsAnonymousBinds.setDescription(' Number of anonymous binds to this DS from UAs since application start.')
dsUnAuthBinds = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsUnAuthBinds.setStatus('current')
if mibBuilder.loadTexts: dsUnAuthBinds.setDescription(' Number of un-authenticated binds to this DS since application start.')
dsSimpleAuthBinds = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSimpleAuthBinds.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 8.1.2.1.1. and, RFC1777 Section 4.1')
if mibBuilder.loadTexts: dsSimpleAuthBinds.setStatus('current')
if mibBuilder.loadTexts: dsSimpleAuthBinds.setDescription(' Number of binds to this DS that were authenticated using simple authentication procedures since application start.')
dsStrongAuthBinds = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsStrongAuthBinds.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Sections 8.1.2.1.2 & 8.1.2.1.3. and, RFC1777 Section 4.1.')
if mibBuilder.loadTexts: dsStrongAuthBinds.setStatus('current')
if mibBuilder.loadTexts: dsStrongAuthBinds.setDescription(' Number of binds to this DS that were authenticated using the strong authentication procedures since application start. This includes the binds that were authenticated using external authentication procedures.')
dsBindSecurityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsBindSecurityErrors.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 12.7.2 and, RFC1777 Section 4.')
if mibBuilder.loadTexts: dsBindSecurityErrors.setStatus('current')
if mibBuilder.loadTexts: dsBindSecurityErrors.setDescription(' Number of bind operations that have been rejected by this DS due to inappropriateAuthentication or invalidCredentials.')
dsInOps = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsInOps.setStatus('current')
if mibBuilder.loadTexts: dsInOps.setDescription(' Number of operations forwarded to this DS from UAs or other DSs since application start up.')
dsReadOps = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsReadOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 9.1.')
if mibBuilder.loadTexts: dsReadOps.setStatus('current')
if mibBuilder.loadTexts: dsReadOps.setDescription(' Number of read operations serviced by this DS since application startup.')
dsCompareOps = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsCompareOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 9.2. and, RFC1777 section 4.8')
if mibBuilder.loadTexts: dsCompareOps.setStatus('current')
if mibBuilder.loadTexts: dsCompareOps.setDescription(' Number of compare operations serviced by this DS since application startup.')
dsAddEntryOps = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsAddEntryOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 11.1. and, RFC1777 Section 4.5.')
if mibBuilder.loadTexts: dsAddEntryOps.setStatus('current')
if mibBuilder.loadTexts: dsAddEntryOps.setDescription(' Number of addEntry operations serviced by this DS since application startup.')
dsRemoveEntryOps = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsRemoveEntryOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 11.2. and, RFC1777 Section 4.6.')
if mibBuilder.loadTexts: dsRemoveEntryOps.setStatus('current')
if mibBuilder.loadTexts: dsRemoveEntryOps.setDescription(' Number of removeEntry operations serviced by this DS since application startup.')
dsModifyEntryOps = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsModifyEntryOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 11.3. and, RFC1777 Section 4.4.')
if mibBuilder.loadTexts: dsModifyEntryOps.setStatus('current')
if mibBuilder.loadTexts: dsModifyEntryOps.setDescription(' Number of modifyEntry operations serviced by this DS since application startup.')
dsModifyRDNOps = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsModifyRDNOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 11.4.and, RFC1777 Section 4.7')
if mibBuilder.loadTexts: dsModifyRDNOps.setStatus('current')
if mibBuilder.loadTexts: dsModifyRDNOps.setDescription(' Number of modifyRDN operations serviced by this DS since application startup.')
dsListOps = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsListOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 10.1.')
if mibBuilder.loadTexts: dsListOps.setStatus('current')
if mibBuilder.loadTexts: dsListOps.setDescription(' Number of list operations serviced by this DS since application startup.')
dsSearchOps = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSearchOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 10.2. and, RFC1777 Section 4.3.')
if mibBuilder.loadTexts: dsSearchOps.setStatus('current')
if mibBuilder.loadTexts: dsSearchOps.setDescription(' Number of search operations- baseObject searches, oneLevel searches and wholeSubtree searches, serviced by this DS since application startup.')
dsOneLevelSearchOps = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsOneLevelSearchOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 10.2.2.2. and, RFC1777 Section 4.3.')
if mibBuilder.loadTexts: dsOneLevelSearchOps.setStatus('current')
if mibBuilder.loadTexts: dsOneLevelSearchOps.setDescription(' Number of oneLevel search operations serviced by this DS since application startup.')
dsWholeSubtreeSearchOps = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsWholeSubtreeSearchOps.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 10.2.2.2. and, RFC1777 Section 4.3.')
if mibBuilder.loadTexts: dsWholeSubtreeSearchOps.setStatus('current')
if mibBuilder.loadTexts: dsWholeSubtreeSearchOps.setDescription(' Number of wholeSubtree search operations serviced by this DS since application startup.')
dsReferrals = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsReferrals.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 12.6.')
if mibBuilder.loadTexts: dsReferrals.setStatus('current')
if mibBuilder.loadTexts: dsReferrals.setDescription(' Number of referrals returned by this DS in response to requests for operations since application startup.')
dsChainings = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsChainings.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.518, 1988: Section 14.')
if mibBuilder.loadTexts: dsChainings.setStatus('current')
if mibBuilder.loadTexts: dsChainings.setDescription(' Number of operations forwarded by this DS to other DSs since application startup.')
dsSecurityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSecurityErrors.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Section 12.7. and, RFC1777 Section 4.')
if mibBuilder.loadTexts: dsSecurityErrors.setStatus('current')
if mibBuilder.loadTexts: dsSecurityErrors.setDescription(' Number of operations forwarded to this DS which did not meet the security requirements. ')
dsErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsErrors.setReference(' CCITT Blue Book Fascicle VIII.8 - Rec. X.511, 1988: Sections 12.4, 12.5, 12.8 & 12.9. and, RFC1777 Section 4.')
if mibBuilder.loadTexts: dsErrors.setStatus('current')
if mibBuilder.loadTexts: dsErrors.setDescription(' Number of operations that could not be serviced due to errors other than security errors, and referrals. A partially serviced operation will not be counted as an error. The errors include NameErrors, UpdateErrors, Attribute errors and ServiceErrors.')
dsEntriesTable = MibTable((1, 3, 6, 1, 4, 1, 1450, 7, 2), )
if mibBuilder.loadTexts: dsEntriesTable.setStatus('current')
if mibBuilder.loadTexts: dsEntriesTable.setDescription(' The table holding information related to the entry statistics and cache performance of the DSs.')
dsEntriesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1450, 7, 2, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: dsEntriesEntry.setStatus('current')
if mibBuilder.loadTexts: dsEntriesEntry.setDescription(' Entry containing statistics pertaining to entries held by a DS.')
dsMasterEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsMasterEntries.setStatus('current')
if mibBuilder.loadTexts: dsMasterEntries.setDescription(' Number of entries mastered in the DS.')
dsCopyEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsCopyEntries.setStatus('current')
if mibBuilder.loadTexts: dsCopyEntries.setDescription(' Number of entries for which systematic (slave) copies are maintained in the DS.')
dsCacheEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsCacheEntries.setStatus('current')
if mibBuilder.loadTexts: dsCacheEntries.setDescription(' Number of entries cached (non-systematic copies) in the DS. This will include the entries that are cached partially. The negative cache is not counted.')
dsCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsCacheHits.setStatus('current')
if mibBuilder.loadTexts: dsCacheHits.setDescription(' Number of operations that were serviced from the locally held cache since application startup.')
dsSlaveHits = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSlaveHits.setStatus('current')
if mibBuilder.loadTexts: dsSlaveHits.setDescription(' Number of operations that were serviced from the locally held object replications ( shadow entries) since application startup.')
dsIntTable = MibTable((1, 3, 6, 1, 4, 1, 1450, 7, 3), )
if mibBuilder.loadTexts: dsIntTable.setStatus('current')
if mibBuilder.loadTexts: dsIntTable.setDescription(' Each row of this table contains some details related to the history of the interaction of the monitored DSs with their respective peer DSs.')
dsIntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1450, 7, 3, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"), (0, "NSLDAP-MIB", "dsIntIndex"))
if mibBuilder.loadTexts: dsIntEntry.setStatus('current')
if mibBuilder.loadTexts: dsIntEntry.setDescription(' Entry containing interaction details of a DS with a peer DS.')
dsIntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: dsIntIndex.setStatus('current')
if mibBuilder.loadTexts: dsIntIndex.setDescription(' Together with applIndex it forms the unique key to identify the conceptual row which contains useful info on the (attempted) interaction between the DS (referred to by applIndex) and a peer DS.')
dsName = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 3, 1, 2), DistinguishedName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsName.setStatus('current')
if mibBuilder.loadTexts: dsName.setDescription(' Distinguished Name of the peer DS to which this entry pertains.')
dsTimeOfCreation = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 3, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsTimeOfCreation.setStatus('current')
if mibBuilder.loadTexts: dsTimeOfCreation.setDescription(' The value of sysUpTime when this row was created. If the entry was created before the network management subsystem was initialized, this object will contain a value of zero.')
dsTimeOfLastAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 3, 1, 4), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsTimeOfLastAttempt.setStatus('current')
if mibBuilder.loadTexts: dsTimeOfLastAttempt.setDescription(' The value of sysUpTime when the last attempt was made to contact this DS. If the last attempt was made before the network management subsystem was initialized, this object will contain a value of zero.')
dsTimeOfLastSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsTimeOfLastSuccess.setStatus('current')
if mibBuilder.loadTexts: dsTimeOfLastSuccess.setDescription(' The value of sysUpTime when the last attempt made to contact this DS was successful. If there have been no successful attempts this entry will have a value of zero. If the last successful attempt was made before the network management subsystem was initialized, this object will contain a value of zero.')
dsFailuresSinceLastSuccess = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsFailuresSinceLastSuccess.setStatus('current')
if mibBuilder.loadTexts: dsFailuresSinceLastSuccess.setDescription(' The number of failures since the last time an attempt to contact this DS was successful. If there has been no successful attempts, this counter will contain the number of failures since this entry was created.')
dsFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsFailures.setStatus('current')
if mibBuilder.loadTexts: dsFailures.setDescription(' Cumulative failures since the creation of this entry.')
dsSuccesses = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsSuccesses.setStatus('current')
if mibBuilder.loadTexts: dsSuccesses.setDescription(' Cumulative successes since the creation of this entry.')
dsURL = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 3, 1, 9), URLString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsURL.setStatus('current')
if mibBuilder.loadTexts: dsURL.setDescription(' URL of the DS application.')
dsEntityTable = MibTable((1, 3, 6, 1, 4, 1, 1450, 7, 5), )
if mibBuilder.loadTexts: dsEntityTable.setStatus('current')
if mibBuilder.loadTexts: dsEntityTable.setDescription('This table holds general information related to an installed instance of a directory server')
dsEntityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1450, 7, 5, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: dsEntityEntry.setStatus('current')
if mibBuilder.loadTexts: dsEntityEntry.setDescription('Entry of general information about an installed instance of a directory server')
dsEntityDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 5, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsEntityDescr.setStatus('mandatory')
if mibBuilder.loadTexts: dsEntityDescr.setDescription('A general textual description of this directory server.')
dsEntityVers = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsEntityVers.setStatus('mandatory')
if mibBuilder.loadTexts: dsEntityVers.setDescription('The version of this directory server')
dsEntityOrg = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 5, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsEntityOrg.setStatus('mandatory')
if mibBuilder.loadTexts: dsEntityOrg.setDescription('Organization responsible for directory server at this installation')
dsEntityLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 5, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsEntityLocation.setStatus('mandatory')
if mibBuilder.loadTexts: dsEntityLocation.setDescription('Physical location of this entity (directory server). For example: hostname, building number, lab number, etc.')
dsEntityContact = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 5, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsEntityContact.setStatus('mandatory')
if mibBuilder.loadTexts: dsEntityContact.setDescription('Contact person(s)responsible for the directory server at this installation, together with information on how to conact.')
dsEntityName = MibTableColumn((1, 3, 6, 1, 4, 1, 1450, 7, 5, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dsEntityName.setStatus('mandatory')
if mibBuilder.loadTexts: dsEntityName.setDescription('Name assigned to this entity at the installation site')
nsDirectoryServerDown = NotificationType((1, 3, 6, 1, 4, 1, 1450) + (0,7001)).setObjects(("NSLDAP-MIB", "dsEntityDescr"), ("NSLDAP-MIB", "dsEntityVers"), ("NSLDAP-MIB", "dsEntityLocation"), ("NSLDAP-MIB", "dsEntityContact"))
if mibBuilder.loadTexts: nsDirectoryServerDown.setDescription('This trap is generated whenever the agent detects the directory server to be (potentially) Down.')
nsDirectoryServerStart = NotificationType((1, 3, 6, 1, 4, 1, 1450) + (0,7002)).setObjects(("NSLDAP-MIB", "dsEntityDescr"), ("NSLDAP-MIB", "dsEntityVers"), ("NSLDAP-MIB", "dsEntityLocation"))
if mibBuilder.loadTexts: nsDirectoryServerStart.setDescription('This trap is generated whenever the agent detects the directory server to have (re)started.')
mibBuilder.exportSymbols("NSLDAP-MIB", dsEntityTable=dsEntityTable, dsSuccesses=dsSuccesses, dsOpsTable=dsOpsTable, dsAnonymousBinds=dsAnonymousBinds, dsReadOps=dsReadOps, dsOpsEntry=dsOpsEntry, dsErrors=dsErrors, nsDirectoryServerDown=nsDirectoryServerDown, dsSimpleAuthBinds=dsSimpleAuthBinds, netscape=netscape, nsDirectoryServerStart=nsDirectoryServerStart, dsEntriesTable=dsEntriesTable, dsSearchOps=dsSearchOps, dsModifyEntryOps=dsModifyEntryOps, dsEntityVers=dsEntityVers, dsFailures=dsFailures, dsOneLevelSearchOps=dsOneLevelSearchOps, dsSecurityErrors=dsSecurityErrors, dsMasterEntries=dsMasterEntries, dsChainings=dsChainings, dsEntityName=dsEntityName, dsBindSecurityErrors=dsBindSecurityErrors, dsCacheEntries=dsCacheEntries, dsInOps=dsInOps, dsCompareOps=dsCompareOps, dsRemoveEntryOps=dsRemoveEntryOps, dsWholeSubtreeSearchOps=dsWholeSubtreeSearchOps, dsReferrals=dsReferrals, dsEntityOrg=dsEntityOrg, dsSlaveHits=dsSlaveHits, dsName=dsName, dsListOps=dsListOps, dsModifyRDNOps=dsModifyRDNOps, dsTimeOfLastAttempt=dsTimeOfLastAttempt, nsldap=nsldap, dsEntityLocation=dsEntityLocation, dsURL=dsURL, dsEntityEntry=dsEntityEntry, dsIntTable=dsIntTable, PYSNMP_MODULE_ID=nsldap, dsCacheHits=dsCacheHits, dsIntIndex=dsIntIndex, dsFailuresSinceLastSuccess=dsFailuresSinceLastSuccess, dsStrongAuthBinds=dsStrongAuthBinds, dsTimeOfLastSuccess=dsTimeOfLastSuccess, dsEntityContact=dsEntityContact, dsAddEntryOps=dsAddEntryOps, dsTimeOfCreation=dsTimeOfCreation, dsEntityDescr=dsEntityDescr, dsCopyEntries=dsCopyEntries, dsIntEntry=dsIntEntry, dsUnAuthBinds=dsUnAuthBinds, dsEntriesEntry=dsEntriesEntry)
