#
# PySNMP MIB module WWP-LEOS-CFM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-CFM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:37:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
sysName, = mibBuilder.importSymbols("SNMPv2-MIB", "sysName")
Integer32, MibIdentifier, TimeTicks, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, ObjectIdentity, Gauge32, Counter32, Counter64, Unsigned32, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibIdentifier", "TimeTicks", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "ObjectIdentity", "Gauge32", "Counter32", "Counter64", "Unsigned32", "iso", "ModuleIdentity")
TruthValue, TextualConvention, MacAddress, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TextualConvention", "MacAddress", "RowStatus", "DisplayString")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosCfmMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35))
wwpLeosCfmMIB.setRevisions(('2012-04-11 00:00', '2012-02-03 00:00', '2011-07-26 00:00', '2011-05-31 00:00', '2011-01-31 00:00', '2010-07-15 00:00', '2009-11-16 00:00', '2009-09-04 17:00', '2009-08-06 19:00', '2009-07-30 19:00', '2008-11-14 17:00', '2008-10-23 17:00', '2007-10-24 17:00', '2006-04-18 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosCfmMIB.setRevisionsDescriptions(("Expanded value ranges for Delay fields to allow setting of the 'default' value (-1 for threshold, 0 for msgcount). Merged 6.x changes back into 4.x MIB to make them identical. Cleaned up history section to conform to standard - REVISION comes before DESCRIPTION", 'Added new objects wwpLeosCfmServiceAccelerated,wwpLeosCfmRemoteMEPAccelerated and wwpLeosCfmExtMEPAccelerated. Added a new table for query for port OAM capability.', 'Added new objects wwpLeosCfmRemoteMEPServiceClear,wwpLeosCfmRemoteMEPServiceStatisticsClear', 'Deprecated objects wwpLeosCfmLBMDefaultCount,wwpLeosCfmLBMDefaultInterval,wwpLeosCfmLBMDefaultTimeout, wwpLeosCfmFrameClassifierMode under wwpLeosCfmGlobal. Added objects wwpLeosCfmGlobalLBMDefaultCount,wwpLeosCfmGlobalLBMDefaultInterval,wwpLeosCfmGlobalLBMDefaultTimeout, wwpLeosCfmGlobalFrameClassifierMode under wwpLeosCfmGlobal. Deprecated wwpLeosCfmServiceDefaultMEPType,wwpLeosCfmServiceMAID,wwpLeosCfmServiceMdIndex,wwpLeosCfmServiceMaintAssocNameType, wwpLeosCfmServiceMaintAssocName under WwpLeosCfmServiceEntry. Added wwpLeosCfmServiceY1731,wwpLeosCfmServiceCCMTxState,wwpLeosCfmServiceRMEPAging,wwpLeosCfmServiceMulticastDa, wwpLeosCfmServiceChargedAgainstGlobalFrameBudget,wwpLeosCfmServiceCfmDefaultMEPType,wwpLeosCfmServiceCfmMAID, wwpLeosCfmServiceCfmMdIndex,wwpLeosCfmServiceCfmMaintAssocNameType,wwpLeosCfmServiceCfmMaintAssocName, wwpLeosCfmServiceCfmControlModuleFrameBudget under WwpLeosCfmService. Added wwpLeosCfmLinkTraceMsgServiceName,wwpLeosCfmLinkTraceMsgSubPortName,wwpLeosCfmLinkTraceMsgVsIndex, wwpLeosCfmLinkTraceMsgTotalTxLtm,wwpLeosCfmLinkTraceMsgTotalRxLtr under wwpLeosCfmLinkTraceMsg. Added wwpLeosCfmLinkTraceMsgReplyIngressMacAddr,wwpLeosCfmLinkTraceMsgReplyEgressMacAddr under WwpLeosCfmLinkTraceMsgReplyEntry. Added wwpLeosCfmMEPDMMMinDelay,wwpLeosCfmMEPDMMMaxDelay,wwpLeosCfmMEPDMMMinJitter,wwpLeosCfmMEPDMMMaxJitter, wwpLeosCfmMEPServiceName,wwpLeosCfmMEPSubPortName,wwpLeosCfmMEPVsPbtName,wwpLeosCfmMEPLogicalPortName, wwpLeosCfmMEPSubPortIndex,wwpLeosCfmMEPEncapsulation,wwpLeosCfmMEPLeadPortBayIndex,wwpLeosCfmMEPLeadPortShelfIndex, wwpLeosCfmMEPLeadPortModuleIndex,wwpLeosCfmMEPPBTBvid,wwpLeosCfmMEPPBTEtype,wwpLeosCfmMEPNumLbmTxmt, wwpLeosCfmMEPNumLbmReceived, wwpLeosCfmMEPNumLoopbackRepliesReceived,wwpLeosCfmMEPNumLTRepliesTxmt, wwpLeosCfmMEPNumLTRepliesReceived, wwpLeosCfmMEPNumUnexpectedLTRepliesReceived,wwpLeosCfmMEPNumCCMReceived under wwpLeosCfmMEPEntry. Deprecated wwpLeosCfmRemoteMEPHoldState under wwpLeosCfmRemoteMEP. Added wwpLeosCfmRemoteMEPMinDelay,wwpLeosCfmRemoteMEPMaxDelay,wwpLeosCfmRemoteMEPMinJitter,wwpLeosCfmRemoteMEPMaxJitter, wwpLeosCfmRemoteCfmMEPHoldState,wwpLeosCfmRemoteMEPSubPortName,wwpLeosCfmRemoteMEPServiceName ,wwpLeosCfmRemoteMEPBayIndex, wwpLeosCfmRemoteMEPShelfIndex,wwpLeosCfmRemoteMEPModuleIndex ,wwpLeosCfmRemoteMEPPreviousBayIndex, wwpLeosCfmRemoteMEPPreviousShelfIndex ,wwpLeosCfmRemoteMEPPreviousModuleIndex,wwpLeosCfmRemoteMEPLastPortStatus, wwpLeosCfmRemoteMEPLastInterfaceStatus,wwpLeosCfmRemoteMEPLastSeqNum, wwpLeosCfmRemoteMEPCCMSeqErrors, wwpLeosCfmRemoteMEPCCMLevel,wwpLeosCfmRemoteMEPDeleteAll under wwpLeosCfmRemoteMEPEntry. Deprecated the table wwpLeosCfmPortStackTable . Added wwpLeosCfmServiceVsPbtName under WwpLeosCfmServiceFaultEntry. Added wwpLeosCfmDelayMsgMaxDelayThreshold, wwpLeosCfmDelayMsgMaxJitterThreshold under wwpLeosCfmDelayMsgEntry. Added wwpLeosCfmExtMEPDMMMinDelay,wwpLeosCfmExtMEPDMMMaxDelay,wwpLeosCfmExtMEPDMMMinJitter,wwpLeosCfmExtMEPDMMMaxJitter under wwpLeosCfmExtMEPEntry. Added wwpLeosCfmExtMEPLastStatsDMMMinDelay,wwpLeosCfmExtMEPLastStatsDMMMaxDelay,wwpLeosCfmExtMEPLastStatsDMMMinJitter, wwpLeosCfmExtMEPLastStatsDMMMaxJitter under wwpLeosCfmExtMEPLastStatsEntry. Added wwpLeosCfmExtDelayMsgMaxDelayThreshold,wwpLeosCfmExtDelayMsgMaxJitterThreshold under wwpLeosCfmExtDelayMsgEntry. Added new tables wwpLeosCfmGlobalFrameBudgetTable,wwpLeosCfmServiceFrameBudgetTable,wwpLeosCfmExtPortStackTable, wwpLeosCfmExtMEPDelayHistoryTable,wwpLeosTceCfmMipTable,wwpLeosTceCfmMipCCMDbTable,wwpLeosTceCfmLoopbackMsgTable, wwpLeosTceCfmPortStackTable,wwpLeosTceCfmMEPTable,wwpLeosTceCfmDelayMsgTable,wwpLeosTceCfmFrameLossMsgTable. Added new notifications wwpLeosCfmFaultTrapSet,wwpLeosCfmFaultTrapClear,wwpLeosCfmDmmTrap,wwpLeosCfmLmmTrap.', 'Deprecated object wwpLeosCfmPbtFaultTrap.', 'Added wwpLeosCfmLBMDefaultCount, wwpLeosCfmLBMDefaultInterval, wwpLeosCfmLBMDefaultTimeout, and wwpLeosCfmFrameClassifierMode under wwpLeosCfmGlobal. Added wwpLeosCfmTotalRxDropBlockedOppositeMep under wwpLeosCfmGlobalStats. Added wwpLeosCfmServiceMAID, wwpLeosCfmServiceMdIndex, wwpLeosCfmServiceMaintAssocNameType, and wwpLeosCfmServiceMaintAssocName under WwpLeosCfmServiceEntry. Added wwpLeosCfmLoopbackMsgDefaultInterval and wwpLeosCfmLoopbackMsgDefaultTimeout under WwpLeosCfmLoopbackMsgEntry. Added wwpLeosCfmMaintenanceDomainMdFormat, wwpLeosCfmMaintenanceDomainMdName, and wwpLeosCfmMaintenanceDomainStatus under WwpLeosCfmMaintenanceDomainEntry. Added wwpLeosCfmExtLoopbackMsgInterval, wwpLeosCfmExtLoopbackMsgTimeout, and wwpLeosCfmExtLoopbackMsgLoss under WwpLeosCfmExtLoopbackMsgEntry. Added wwpLeosCfmExtMEPBlockOppositeFaultCurrent, wwpLeosCfmExtMEPBlockOppositeFaultThreshold, and wwpLeosCfmExtMEPBlockOppositeFaultTime under WwpLeosCfmExtMEPEntry. Added wwpLeosCfmExtMEPStatsInvalidBlockedOppositeMep under WwpLeosCfmExtMEPStatsEntry. Added wwpLeosCfmBlockOppositeMEPSetTrap and wwpLeosCfmBlockOppositeMEPClearTrap under wwpLeosCfmNotifMIBNotification.', 'Added wwpLeosCfmExtMEPLMMMissingSequence under wwpLeosCfmExtMEPEntry', 'Added wwpLeosCfmExtMipTable under wwpLeosCfmExtMIBObj', 'Added wwpLeosCfmRemoteMEPBadSequence under wwpLeosCfmRemoteMEPEntry', 'Added wwpLeosCfmL2LoopDetectState, wwpLeosCfmDot1adStrict, wwpLeosCfmMipLevelEnforcement and wwpLeosCfmMipCcmDbState under wwpLeosGlobal Added wwpLeosCfmServiceDefaultMEPType under wwpLeosCfmServiceEntry. Added wwpLeosCfmRemoteMEPCCMComment under wwpLeosCfmRemoteMEPEntry. Added wwpLeosCfmExtMEPLMMBadSequence and wwpLeosCfmExtMEPCCMComment under wwpLeosCfmExtMEPEntry. Added wwpLeosCfmExtMEPLastStatsFrameLossBadSequence under wwpLeosCfmExtMEPLastStatsEntry. Added wwpLeosCfmExtFrameLossMsgSeqThreshold under wwpLeosCfmExtFrameLossMsgEntry. Added wwpLeosCfmBadSequenceFaultTrap under wwpLeosCfmNotifMIBNotification.', 'Added wwpLeosCfmExtInterfaceStackTable under wwpLeosCfmExtMIBObj Added wwpLeosCfmExtMepCfmServiceName, wwpLeosCfmExtMepInterfaceName, wwpLeosCfmExtMepServiceInstanceName, wwpLeosCfmExtMepLogicalPortName to wwpLeosCfmExtMepEntryTable Added wwpLeosCfmFaultTrapSet and wwpLeosCfmFaultTrapClear Notifications', 'Added wwpLeosCfmExtLoopback, wwpLeosCfmExtMEP, wwpLeosCfmExtLinkTrace, wwpLeosCfmExtDelay and wwpLeosCfmExtFrameLoss tables under wwpLeosCfmExtMIBObj. Added wwpLeosCfmServiceRemoteMepDiscovery under wwpLeosCfmServiceTableEntry. Added wwpLeosCfmRemoteMEPHoldState and wwpLeosCfmRemoteMEPRowStatus.', 'changed the properties on the WwpLeosCfmServiceFaultTable to read only', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosCfmMIB.setLastUpdated('201204110000Z')
if mibBuilder.loadTexts: wwpLeosCfmMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosCfmMIB.setContactInfo('Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosCfmMIB.setDescription('Connectivity Fault Management (CFM) MIB for configuration and monitoring CFM')
wwpLeosCfmMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1))
wwpLeosCfmGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1))
wwpLeosCfmService = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2))
wwpLeosCfmMIP = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 3))
wwpLeosCfmLinkTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4))
wwpLeosCfmLoopback = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 5))
wwpLeosCfmMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 6))
wwpLeosCfmMEP = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7))
wwpLeosCfmRemoteMEP = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8))
wwpLeosCfmStack = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 9))
wwpLeosCfmMipCCMDb = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 10))
wwpLeosCfmFaultNotif = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 11))
wwpLeosCfmDelay = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12))
wwpLeosCfmFrameLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 13))
wwpLeosCfmRemoteMEPCCMLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 14))
wwpLeosCfmExtStack = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 15))
wwpLeosCfmServiceFrameBudget = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 16))
wwpLeosCfmExtMIBObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21))
wwpLeosCfmGlobalFrameBudget = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 24))
wwpLeosCfmGlobalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25))
wwpLeosCfmGlobalCCMStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 26))
wwpLeosCfmGlobalLoopbackStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 27))
wwpLeosCfmGlobalLinkTraceStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 28))
wwpLeosCfmGlobalDelayMeasurementStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 29))
wwpLeosCfmGlobalLossMeasurementStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 30))
wwpLeosCfmExtLoopback = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 3))
wwpLeosCfmExtMEP = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7))
wwpLeosCfmExtLinkTrace = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8))
wwpLeosCfmExtDelay = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12))
wwpLeosCfmExtFrameLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 13))
wwpLeosCfmExtInterfaceStack = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14))
wwpLeosCfmExtMIP = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 15))
wwpLeosCfmExtInterfaceMIP = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 16))
wwpLeosCfmExtOamPort = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 17))
wwpLeosCfmNotifMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2))
wwpLeosCfmNotifMIBNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0))
wwpLeosCfmMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 3))
wwpLeosCfmMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 3, 1))
wwpLeosCfmMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 3, 2))
class CfmMAID(TextualConvention, OctetString):
    description = 'Binary data representing the md name and ma name.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 48)

class CfmDisplayString(TextualConvention, OctetString):
    description = 'Represents the cfm display string.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 2)

class EthType(TextualConvention, OctetString):
    description = 'Represents the ethernet type.'
    status = 'current'
    displayHint = '1x:'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 2)

class SendState(TextualConvention, Integer32):
    description = 'Represents the action for the row. Send (1): the message with the corresponding parameters is to be sent to the Target host Clear (2): Clears the counters of the particular entry Cancel (3)'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))
    namedValues = NamedValues(("send", 1), ("clear", 2), ("cancel", 3), ("none", 99))

class Dot1agCfmMaintDomainNameType(TextualConvention, Integer32):
    reference = '802.1ag clause 21.6.5, Table 21-19'
    description = 'A value that represents a type (and thereby the format) of a Dot1agCfmMaintDomainName. The value can be one of the following: ieeeReserved(0) Reserved for definition by IEEE 802.1 recommend to not use zero unless absolutely needed. none(1) No format specified, usually because there is not (yet) a Maintenance Domain Name. In this case, a zero length OCTET STRING for the Domain Name field is acceptable. dnsLikeName(2) Domain Name like string, globally unique text string derived from a DNS name. macAddrAndUint(3) MAC address + 2-octet (unsigned) integer. charString(4) RFC2579 DisplayString, except that the character codes 0-31 (decimal) are not used. ieeeReserved(xx) Reserved for definition by IEEE 802.1 xx values can be [5..31] and [64..255] ituReserved(xx) Reserved for definition by ITU-T Y.1731 xx values range from [32..63] '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("none", 1), ("dnsLikeName", 2), ("macAddressAndUint", 3), ("charString", 4))

class Dot1agCfmMaintDomainName(TextualConvention, OctetString):
    reference = '802.1ag clause 21.6.5'
    description = 'Denotes a generic Maintenance Domain Name.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 43)

class Dot1agCfmMaintAssocNameType(TextualConvention, Integer32):
    reference = '802.1ag clause 21.6.5.4, Table 21-20'
    description = 'A value that represents a type (and thereby the format) of a Dot1agCfmMaintAssocName. The value can be one of the following: ieeeReserved(0) Reserved for definition by IEEE 802.1 recommend to not use zero unless absolutely needed. primaryVid(1) Primary VLAN ID. 12 bits represented in a 2-octet integer: - 4 least significant bits of the first byte contains the 4 most significant bits of the 12 bits primary VID - second byte contains the 8 least significant bits of the primary VID 0 1 2 3 4 5 6 7 8 +-+-+-+-+-+-+-+-+ |0 0 0 0| (MSB) | +-+-+-+-+-+-+-+-+ | VID LSB | +-+-+-+-+-+-+-+-+ charString(2) RFC2579 DisplayString, except that the character codes 0-31 (decimal) are not used. (1..45) octets unsignedInt16 (3) 2-octet integer/big endian rfc2865VpnId(4) RFC 2685 VPN ID 3 octet VPN authority Organizationally Unique Identifier followed by 4 octet VPN index identifying VPN according to the OUI: 0 1 2 3 4 5 6 7 8 +-+-+-+-+-+-+-+-+ | VPN OUI (MSB) | +-+-+-+-+-+-+-+-+ | VPN OUI | +-+-+-+-+-+-+-+-+ | VPN OUI (LSB) | +-+-+-+-+-+-+-+-+ |VPN Index (MSB)| +-+-+-+-+-+-+-+-+ | VPN Index | +-+-+-+-+-+-+-+-+ | VPN Index | +-+-+-+-+-+-+-+-+ |VPN Index (LSB)| +-+-+-+-+-+-+-+-+ ieeeReserved(xx) Reserved for definition by IEEE 802.1 xx values can be [5..31] and [64..255] ituReserved(xx) Reserved for definition by ITU-T Y.1731 xx values range from [32..63] '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 32))
    namedValues = NamedValues(("primaryVid", 1), ("charString", 2), ("unsignedInt16", 3), ("rfc2865VpnId", 4), ("iccBased", 32))

class Dot1agCfmMaintAssocName(TextualConvention, OctetString):
    reference = '802.1ag clauses 21.6.5.4, 21.6.5.5, 21.6.5.6'
    description = 'Denotes a generic Maintenance Association Name. It is the part of the Maintenance Association Identifier which is unique within the Maintenance Domain Name and is appended to the Maintenance Domain Name to form the Maintenance Association Identifier (MAID). '
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(1, 45)

wwpLeosCfmState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmState.setDescription('This object allows to globally configure CFM state.')
wwpLeosCfmEtherType = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 2), EthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmEtherType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmEtherType.setDescription('This object specifies the Ethernet type value for CFM frames.')
wwpLeosCfmMEPHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmMEPHoldTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPHoldTime.setDescription('This object specifies the Time in ms to hold a MEP in an inactive state.')
wwpLeosCfmCcmAvailable = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmCcmAvailable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmCcmAvailable.setDescription('This object specifies the current CCM available.')
wwpLeosCfmY1731EtherType = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 5), EthType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmY1731EtherType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmY1731EtherType.setDescription('This object specifies the Optional Alternate Ethernet type for Y.1731 frames.')
wwpLeosCfmL2LoopDetectState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmL2LoopDetectState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmL2LoopDetectState.setDescription("This object allows to globally configure CFM's Layer 2 Loop detection state. Frames received by the switch that have a Source MAC of the the switch will be discarded.")
wwpLeosCfmDot1adStrict = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmDot1adStrict.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDot1adStrict.setDescription('Controls compliance of processing 802.1ad encapsulated CFM frames in accordance with the 8021.ag standard. When on (1) CFM frames containing more than one VLAN tag are forwarded as normal data frames, bypassing processing by MEPs and MIPs. When off (2) CFM frames with multiple VLAN tags are subject to normal CFM processing.')
wwpLeosCfmMipLevelEnforcement = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmMipLevelEnforcement.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipLevelEnforcement.setDescription('Controls enforcement of a MIPs associated MD Level. When on (1) a MIP will only process CFM messages received at its level. When off (2) a MIP will process frames received at any level.')
wwpLeosCfmMipCcmDbState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmMipCcmDbState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipCcmDbState.setDescription('The administrative state of the MIP CCM Database. A MIP only records CCMs in the MIP CCM Database when this object is set to enable (1).')
wwpLeosCfmLBMDefaultCount = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmLBMDefaultCount.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmLBMDefaultCount.setDescription('The global default loopback message count.')
wwpLeosCfmLBMDefaultInterval = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmLBMDefaultInterval.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmLBMDefaultInterval.setDescription('The global default loopback message interval.')
wwpLeosCfmLBMDefaultTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmLBMDefaultTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmLBMDefaultTimeout.setDescription('The global default loopback message timeout.')
wwpLeosCfmFrameClassifierMode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("etype", 1), ("etypeMd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmFrameClassifierMode.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmFrameClassifierMode.setDescription('Configures the hardware frame classification mode used to detect CFM and Y.1731 frames that should be sent to the CPU for processing. Changing this mode will cause a reboot of the device.')
wwpLeosCfmGlobalLBMDefaultCount = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmGlobalLBMDefaultCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmGlobalLBMDefaultCount.setDescription('The global default loopback message count.')
wwpLeosCfmGlobalLBMDefaultInterval = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmGlobalLBMDefaultInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmGlobalLBMDefaultInterval.setDescription('The global default loopback message interval.')
wwpLeosCfmGlobalLBMDefaultTimeout = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmGlobalLBMDefaultTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmGlobalLBMDefaultTimeout.setDescription('The global default loopback message timeout.')
wwpLeosCfmGlobalFrameClassifierMode = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("etype", 1), ("etypeMd", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmGlobalFrameClassifierMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmGlobalFrameClassifierMode.setDescription('Configures the hardware frame classification mode used to detect CFM and Y.1731 frames that should be sent to the CPU for processing. Changing this mode will cause a reboot of the device.')
wwpLeosCfmStatsTotalTx = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmStatsTotalTx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmStatsTotalTx.setDescription('The number of frames sent.')
wwpLeosCfmStatsTotalRx = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmStatsTotalRx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmStatsTotalRx.setDescription('The number of frames received.')
wwpLeosCfmStatsTxFloodedFrames = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmStatsTxFloodedFrames.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmStatsTxFloodedFrames.setDescription('The number of Flooded frames sent.')
wwpLeosCfmStatsTxFloodedIgnoredStpState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmStatsTxFloodedIgnoredStpState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmStatsTxFloodedIgnoredStpState.setDescription('The number of flooded ignored frames sent.')
wwpLeosCfmStatsRxTotalValidFrames = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmStatsRxTotalValidFrames.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmStatsRxTotalValidFrames.setDescription('The number of valid frames received.')
wwpLeosCfmStatsRxTotalNotValidatedFrames = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmStatsRxTotalNotValidatedFrames.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmStatsRxTotalNotValidatedFrames.setDescription('The number of not validated frames received.')
wwpLeosCfmStatsRxTotalInValidFrames = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmStatsRxTotalInValidFrames.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmStatsRxTotalInValidFrames.setDescription('The number of invalid frames received.')
wwpLeosCfmTotalRxInvalidMessageOverflow = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidMessageOverflow.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidMessageOverflow.setDescription('The number of invalid message overflow frames received.')
wwpLeosCfmTotalRxInvalidPortStatusTLV = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidPortStatusTLV.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidPortStatusTLV.setDescription('The number of invalid port status TLV received.')
wwpLeosCfmTotalRxInvalidInterfaceStatusTLV = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidInterfaceStatusTLV.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidInterfaceStatusTLV.setDescription('The number of invalid interface status TLV received.')
wwpLeosCfmTotalRxInvalidSenderIDTLV = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidSenderIDTLV.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidSenderIDTLV.setDescription('The number of invalid sender ID TLV received.')
wwpLeosCfmRxAdminDisableDropped = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRxAdminDisableDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRxAdminDisableDropped.setDescription('The number of frames dropped when in admin disable mode.')
wwpLesoCfmRxInvalidEtypeDropped = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLesoCfmRxInvalidEtypeDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLesoCfmRxInvalidEtypeDropped.setDescription('The number of frames dropped when in admin disable mode.')
wwpLeosCfmRxInvalidOpCodeDropped = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRxInvalidOpCodeDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRxInvalidOpCodeDropped.setDescription('The number of received Invalid Opcode frames dropped.')
wwpLeosCfmRxSTPStateNotForwardingDropped = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRxSTPStateNotForwardingDropped.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRxSTPStateNotForwardingDropped.setDescription('The number of frames dropped when system is not in STP forwarding mode.')
wwpLeosCfmGlobalStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmGlobalStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmGlobalStatsClear.setDescription('Setting this object to clear will clear statistics globally (Global Stats, Service Stats and Mep Stats). This object cannot be set to none.')
wwpLeosCfmGlobalLoopbackMsgStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmGlobalLoopbackMsgStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmGlobalLoopbackMsgStatsClear.setDescription('Setting this object to clear will clear Loopback Statistics globally(Global stats, Service Stats and Mep Stats).')
wwpLeosCfmGlobalLinkTraceMsgStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmGlobalLinkTraceMsgStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmGlobalLinkTraceMsgStatsClear.setDescription('Setting this object to clear will clear Link Trace Statistics globally(Global stats, Service Stats and Mep Stats).')
wwpLeosCfmGlobalDelayMeasurementMsgStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmGlobalDelayMeasurementMsgStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmGlobalDelayMeasurementMsgStatsClear.setDescription('Setting this object to clear will clear Delay Measurement Statistics globally(Global stats, Service Stats and Mep Stats).')
wwpLeosCfmGlobalLossMeasurementMsgStatsClear = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmGlobalLossMeasurementMsgStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmGlobalLossMeasurementMsgStatsClear.setDescription('Setting this object to clear will clear Loss Measurement Statistics globally(Global stats, Service Stats and Mep Stats).')
wwpLeosCfmTotalRxDropBlockedOppositeMep = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxDropBlockedOppositeMep.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxDropBlockedOppositeMep.setDescription('The number of received Blocked by Opposite Mep frames dropped.')
wwpLeosCfmTotalTxCCM = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 26, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalTxCCM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalTxCCM.setDescription('The total number of CCM frames sent.')
wwpLeosCfmTotalTxCCMFlooded = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 26, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalTxCCMFlooded.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalTxCCMFlooded.setDescription('The total number of flooded CCM frames sent.')
wwpLeosCfmTotalRxValidCCM = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 26, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxValidCCM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxValidCCM.setDescription('The number of valid frames received.')
wwpLeosCfmTotalRxCCMInSequence = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 26, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxCCMInSequence.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxCCMInSequence.setDescription('The number of CCM frames received in sequence.')
wwpLeosCfmTotalRxCCMSequenceError = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 26, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxCCMSequenceError.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxCCMSequenceError.setDescription('The number of errored CCM frames received in sequence.')
wwpLeosCfmTotalCCMRxMDLevelXcon = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 26, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalCCMRxMDLevelXcon.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalCCMRxMDLevelXcon.setDescription('The number of MD Level CFM frames received.')
wwpLeosCfmTotalCCMRxMAIDXcon = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 26, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalCCMRxMAIDXcon.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalCCMRxMAIDXcon.setDescription('The number of MAID Xcon CFM frames received.')
wwpLeosCfmTotalRxCCMErrorOnMepId = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 26, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxCCMErrorOnMepId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxCCMErrorOnMepId.setDescription('The number of frames dropped when in admin disable mode.')
wwpLeosCfmTotalRxCCMIntervalError = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 26, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxCCMIntervalError.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxCCMIntervalError.setDescription('The number of interval error frames received.')
wwpLeosCfmTotalRxInvalidCCM = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 26, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidCCM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidCCM.setDescription('The number of invalid CCM frames received.')
wwpLeosCfmTotalTxLBM = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 27, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalTxLBM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalTxLBM.setDescription('The number of Loopback messages sent.')
wwpLeosCfmTotalTxLBR = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 27, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalTxLBR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalTxLBR.setDescription('The total number of Loopback Replies frames sent.')
wwpLeosCfmTotalRxInOderLBR = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 27, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInOderLBR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInOderLBR.setDescription('The total number of In order LBR frames received.')
wwpLeosCfmTotalRxOOOLBR = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 27, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxOOOLBR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxOOOLBR.setDescription('The number of Out of Order LBR frames received.')
wwpLeosCfmTotalRxContentMismatchLBR = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 27, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxContentMismatchLBR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxContentMismatchLBR.setDescription('The number of Content Mismatch LBR frames received.')
wwpLeosCfmTotalRxUnexpectedLBR = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 27, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxUnexpectedLBR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxUnexpectedLBR.setDescription('The number of unexpected LBR frames received.')
wwpLeosCfmTotalRxInvalidLBR = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 27, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidLBR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidLBR.setDescription('The number of invalid LBR frames received.')
wwpLeosCfmTotalRxvalidLBM = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 27, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxvalidLBM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxvalidLBM.setDescription('The number of valid LBM frames received.')
wwpLeosCfmTotalRxInvalidLBM = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 27, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidLBM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidLBM.setDescription('The number of invalid LBM frames received.')
wwpLeosCfmTotalTxLTM = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 28, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalTxLTM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalTxLTM.setDescription('The number of LTM frames sent.')
wwpLeosCfmTotalTxLTR = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 28, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalTxLTR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalTxLTR.setDescription('The total number of LTR frames sent.')
wwpLeosCfmTotalRxValidLTM = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 28, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxValidLTM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxValidLTM.setDescription('The total number of LTM frames received.')
wwpLeosCfmTotalRxValidLTR = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 28, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxValidLTR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxValidLTR.setDescription('The total number of Valid LTR frames received.')
wwpLeosCfmTotalRxUnexpectedLTR = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 28, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxUnexpectedLTR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxUnexpectedLTR.setDescription('The total number of unexpected LTR frames received.')
wwpLeosCfmTotalRxInvalidLTR = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 28, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidLTR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidLTR.setDescription('The total number of Invalid LTR frames received.')
wwpLeosCfmInvalidLTRRelayAction = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 28, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmInvalidLTRRelayAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmInvalidLTRRelayAction.setDescription('The total number of Invalid LTR Action.')
wwpLeosCfmTotalRxInvalidLTM = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 28, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidLTM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxInvalidLTM.setDescription('The total number of Invalid LTM frames received.')
wwpLeosCfmRxUnresolvedLTM = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 28, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRxUnresolvedLTM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRxUnresolvedLTM.setDescription('The total number of Unresolved LTM frames received.')
wwpLeosCfmTotalTxDMM = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 29, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalTxDMM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalTxDMM.setDescription('The total number of Delay Measurements messages sent.')
wwpLeosCfmTotalTxDMR = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 29, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalTxDMR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalTxDMR.setDescription('The total number of Delay Measurements Reply sent.')
wwpLeosCfmTotalRxDMM = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 29, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxDMM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxDMM.setDescription('The total number of Delay Measurements Messages received.')
wwpLeosCfmTotalRxDMR = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 29, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxDMR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxDMR.setDescription('The total number of Delay Measurements Reply received.')
wwpLeosCfmTotalTxLMM = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 30, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalTxLMM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalTxLMM.setDescription('The total number of Loss Measurements messages sent.')
wwpLeosCfmTotalTxLMR = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 30, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalTxLMR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalTxLMR.setDescription('The total number of Loss Measurements Reply frames sent.')
wwpLeosCfmTotalRxLMM = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 30, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxLMM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxLMM.setDescription('The total number of LMM received.')
wwpLeosCfmTotalRxLMR = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 25, 30, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmTotalRxLMR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmTotalRxLMR.setDescription('The total number of LMR received.')
wwpLeosCfmGlobalControlModuleFrameBudget = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 24, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmGlobalControlModuleFrameBudget.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmGlobalControlModuleFrameBudget.setDescription('Control Module Frame Budget . Not applicable to 6.x')
wwpLeosCfmGlobalFrameBudgetTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 24, 2), )
if mibBuilder.loadTexts: wwpLeosCfmGlobalFrameBudgetTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmGlobalFrameBudgetTable.setDescription('Global Frame Budget Table')
wwpLeosCfmGlobalFrameBudgetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 24, 2, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmGlobalFrameBudgetSlotIndex"))
if mibBuilder.loadTexts: wwpLeosCfmGlobalFrameBudgetEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmGlobalFrameBudgetEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmServiceTable. Not applicable to 6.x')
wwpLeosCfmGlobalFrameBudgetSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 24, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wwpLeosCfmGlobalFrameBudgetSlotIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmGlobalFrameBudgetSlotIndex.setDescription('Slot Index')
wwpLeosCfmGlobalFrameBudgetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 1, 24, 2, 1, 2), Counter32()).setUnits('frames/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmGlobalFrameBudgetValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmGlobalFrameBudgetValue.setDescription('Frame budget value')
wwpLeosCfmServiceTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1), )
if mibBuilder.loadTexts: wwpLeosCfmServiceTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTable.setDescription('The (conceptual) table listing the configuration parameters for the CFM Service Table. To create an entry in this table the following criteria must be followed: wwpLeosCfmServiceType must be specified. wwpLeosCfmServiceValue must be specified. wwpLeosCfmServiceName must be specified. wwpLeosCfmServiceStatus must be set to createAndGo. ')
wwpLeosCfmServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"))
if mibBuilder.loadTexts: wwpLeosCfmServiceEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmServiceTable.')
wwpLeosCfmServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmServiceIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceIndex.setDescription('A unique identifier for CFM service entry.')
wwpLeosCfmServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 9))).clone(namedValues=NamedValues(("mplsVs", 1), ("ethVs", 2), ("vlan", 3), ("pbtTunnel", 4), ("vs", 5), ("other", 9)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmServiceType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceType.setDescription('This object is used to specify the service type. Interpretation of wwpLeosCfmServiceValue depends on the value of this MIB object. This MIB object along with wwpLeosCfmServiceValue must be unique for each entry in this table')
wwpLeosCfmServiceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmServiceValue.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceValue.setDescription('This object is used to specify the service value. Interpretation of this object depends on the value of wwpLeosCfmServiceType. This MIB object along with wwpLeosCfmServiceType must be unique for each entry in this table')
wwpLeosCfmServiceAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceAdminState.setDescription('This object specifies the admin state of CFM for this service type.')
wwpLeosCfmServiceOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceOperState.setDescription('The operational state of CFM for this service type.')
wwpLeosCfmServiceAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceAlarmTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceAlarmTime.setDescription('This MIB object allows to set the time interval that a service fault detected by wwpLeosCfmServiceType must be present prior to triggering a fault alarm.')
wwpLeosCfmServiceCCMInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceCCMInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceCCMInterval.setDescription('This MIB object allows to set the CCM transmission interval index for the service specified by wwpLeosCfmServiceType. This determines the frequency at which CCMs are transmitted. The length of the interval increases exponentially with the index value. Setting the interval to 0 disables CCM transmission from all MEPs in the MA.')
wwpLeosCfmServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmServiceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceName.setDescription('This MIB object allows to set the CFM service name.')
wwpLeosCfmServiceMdLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmServiceMdLevel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceMdLevel.setDescription('This MIB object sets the CFM service level which associates it with a Maintenance Domain.')
wwpLeosCfmServiceResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 36000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceResetTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceResetTime.setDescription('This MIB object set the time interval during which no service faults can be detected before the service will reset a fault alarm.')
wwpLeosCfmServiceLastFaultCCM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 12), CfmDisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceLastFaultCCM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceLastFaultCCM.setDescription('This MIB object shows last received CCM fault.')
wwpLeosCfmServiceRMEPFailureFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceRMEPFailureFlag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceRMEPFailureFlag.setDescription('This MIB object shows the RMEP failure flag.')
wwpLeosCfmServiceCCMErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceCCMErrorFlag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceCCMErrorFlag.setDescription('This MIB object shows the CCM Error flag.')
wwpLeosCfmServiceCrossConnectErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceCrossConnectErrorFlag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceCrossConnectErrorFlag.setDescription('This MIB object shows the cross-connect Error flag.')
wwpLeosCfmServiceNumMEP = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceNumMEP.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceNumMEP.setDescription('This MIB object shows Number of MEPs.')
wwpLeosCfmServiceNumRemoteMEP = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceNumRemoteMEP.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceNumRemoteMEP.setDescription('This MIB object shows the Number of Remote MEPs.')
wwpLeosCfmServiceNumActiveMEP = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceNumActiveMEP.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceNumActiveMEP.setDescription('This MIB object shows the Number of active MEPs.')
wwpLeosCfmServiceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 19), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmServiceStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set this object to 'destroy'.")
wwpLeosCfmServiceNextMepId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmServiceNextMepId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceNextMepId.setDescription('This mib object specifies the next MEP Id for given service.')
wwpLeosCfmServiceAlarmPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceAlarmPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceAlarmPriority.setDescription('This mib object specifies the alarm priority for given service.')
wwpLeosCfmServiceNumCCMForFault = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceNumCCMForFault.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceNumCCMForFault.setDescription('The number of CCM frames that must go undelivered for the service to be declared as operationally down.')
wwpLeosCfmServiceDMMInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceDMMInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceDMMInterval.setDescription('This MIB object allows to set the DMM transmission interval index for the service specified by wwpLeosCfmServiceType. This determines the frequency at which DMMs are transmitted. The length of the interval increases exponentially with the index value.')
wwpLeosCfmServiceLMMInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceLMMInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceLMMInterval.setDescription('This MIB object allows to set the LMM transmission interval index for the service specified by wwpLeosCfmServiceType. This determines the frequency at which LMMs are transmitted. The length of the interval increases exponentially with the index value.')
wwpLeosCfmServiceCCMLossStatsState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceCCMLossStatsState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceCCMLossStatsState.setDescription('This object specifies the operational state of CCM loss accounting for RMEPs learned by this service type.')
wwpLeosCfmServiceCCMLossBucketInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceCCMLossBucketInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceCCMLossBucketInterval.setDescription('This object specifies the interval in minutes that each of the 96 CCM loss history buckets spans. The default is 15 minutes, which means the default history covers 24 hours.')
wwpLeosCfmServiceRemoteMepDiscovery = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceRemoteMepDiscovery.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceRemoteMepDiscovery.setDescription('This object specifies whether remote meps should be discovered automatically. if this object is set to enable it will cause remote meps to be discovered automatically and if set to disable will not discover rempote meps.')
wwpLeosCfmServiceY1731 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 28), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceY1731.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceY1731.setDescription('Specifies if y1731 is enabled for the service.')
wwpLeosCfmServiceAccelerated = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 49), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmServiceAccelerated.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceAccelerated.setDescription('Specifies if the service is supported in hardware .')
wwpLeosCfmServiceTlvSenderIdType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 50), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("chassis", 2), ("manage", 3), ("chassisManage", 4))).clone('chassis')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmServiceTlvSenderIdType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTlvSenderIdType.setDescription('This mib object specifies the Sender Id Tlv Type.')
wwpLeosCfmServiceRMEPHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 51), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600000)).clone(2500)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmServiceRMEPHoldTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceRMEPHoldTime.setDescription('This mib object specifies the Remote MEP hold time in milliseconds.')
wwpLeosCfmServiceCCMTxState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmServiceCCMTxState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceCCMTxState.setDescription('This mib object specifies the admin state of the CCM Tx.')
wwpLeosCfmServicePortStatusFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 53), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServicePortStatusFlag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServicePortStatusFlag.setDescription('This mib object shows the Port Status defect flag.')
wwpLeosCfmServiceRDIFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 54), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceRDIFlag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceRDIFlag.setDescription('This mib object shows the RDI defect flag.')
wwpLeosCfmServiceInstabilityFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 55), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceInstabilityFlag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceInstabilityFlag.setDescription('This mib object shows the Instability defect flag.')
wwpLeosCfmServiceRMEPAging = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 56), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmServiceRMEPAging.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceRMEPAging.setDescription('Controls automatic Remote MEP aging for the service.')
wwpLeosCfmServiceDefaultMEPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmServiceDefaultMEPType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmServiceDefaultMEPType.setDescription("This object is used to specify the type of all MEP's created for the service. Services of type PBT must specify a MEP type of 'down'.")
wwpLeosCfmServiceMAID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 58), CfmMAID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceMAID.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmServiceMAID.setDescription("The MAID send by CCM's associated with the service.")
wwpLeosCfmServiceMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 59), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceMdIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmServiceMdIndex.setDescription('The unique index in the Maint Domain table.')
wwpLeosCfmServiceMaintAssocNameType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 60), Dot1agCfmMaintAssocNameType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceMaintAssocNameType.setReference('802.1ag clauses 21.6.5.4')
if mibBuilder.loadTexts: wwpLeosCfmServiceMaintAssocNameType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmServiceMaintAssocNameType.setDescription('The type (and thereby format) of the Maintenance Association Name.')
wwpLeosCfmServiceMaintAssocName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 61), Dot1agCfmMaintAssocName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceMaintAssocName.setReference('802.1ag clauses 21.6.5.6, and Table 21-20')
if mibBuilder.loadTexts: wwpLeosCfmServiceMaintAssocName.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmServiceMaintAssocName.setDescription('The Short Maintenance Association name. The type/format of this object is determined by the value of the dot1agCfmMaNetNameType object.')
wwpLeosCfmServiceMulticastDa = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 65), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceMulticastDa.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceMulticastDa.setDescription('Specifies if multicast DA mode is enabled for the service.')
wwpLeosCfmServiceChargedAgainstGlobalFrameBudget = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 71), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceChargedAgainstGlobalFrameBudget.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceChargedAgainstGlobalFrameBudget.setDescription('This MIB object reflects if this service is charged against the global frame budget.')
wwpLeosCfmServiceCfmDefaultMEPType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 72), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmServiceCfmDefaultMEPType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceCfmDefaultMEPType.setDescription("This object is used to specify the type of all MEP's created for the service. Services of type PBT must specify a MEP type of 'down'.")
wwpLeosCfmServiceCfmMAID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 73), CfmMAID()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceCfmMAID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceCfmMAID.setDescription("The MAID send by CCM's associated with the service.")
wwpLeosCfmServiceCfmMdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 74), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceCfmMdIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceCfmMdIndex.setDescription('The unique index in the Maint Domain table.')
wwpLeosCfmServiceCfmMaintAssocNameType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 75), Dot1agCfmMaintAssocNameType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceCfmMaintAssocNameType.setReference('802.1ag clauses 21.6.5.4')
if mibBuilder.loadTexts: wwpLeosCfmServiceCfmMaintAssocNameType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceCfmMaintAssocNameType.setDescription('The type (and thereby format) of the Maintenance Association Name.')
wwpLeosCfmServiceCfmMaintAssocName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 76), Dot1agCfmMaintAssocName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceCfmMaintAssocName.setReference('802.1ag clauses 21.6.5.6, and Table 21-20')
if mibBuilder.loadTexts: wwpLeosCfmServiceCfmMaintAssocName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceCfmMaintAssocName.setDescription('The Short Maintenance Association name. The type/format of this object is determined by the value of the dot1agCfmMaNetNameType object.')
wwpLeosCfmServiceCfmControlModuleFrameBudget = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 1, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceCfmControlModuleFrameBudget.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceCfmControlModuleFrameBudget.setDescription('Cfm Frame budget for control module for the given service.')
wwpLeosCfmServiceFrameBudgetTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 16, 1), )
if mibBuilder.loadTexts: wwpLeosCfmServiceFrameBudgetTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceFrameBudgetTable.setDescription('The (conceptual) table listing the config parameters for the CFM service frame budget table.')
wwpLeosCfmServiceFrameBudgetEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 16, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmSlotIndex"))
if mibBuilder.loadTexts: wwpLeosCfmServiceFrameBudgetEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceFrameBudgetEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmServiceFrameBudgetTable.')
wwpLeosCfmSlotIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8)))
if mibBuilder.loadTexts: wwpLeosCfmSlotIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmSlotIndex.setDescription('This object identifies the slot number.')
wwpLeosCfmServiceFrameBudgetSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 16, 1, 1, 2), Counter32()).setUnits('frames/sec').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceFrameBudgetSlot.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceFrameBudgetSlot.setDescription('This object specifies the CFM frame budget for the slot for the given service.')
wwpLeosCfmMipTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 3, 1), )
if mibBuilder.loadTexts: wwpLeosCfmMipTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipTable.setDescription('The (conceptual) table listing the configuration parameters for the CFM MIP Table. This table is not applicable if wwpLeosCfmServiceType is set to pbtTunnel. Any Get/Set/Walk will return error.')
wwpLeosCfmMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 3, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmMipVid"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmMipPort"))
if mibBuilder.loadTexts: wwpLeosCfmMipEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmMipTable.')
wwpLeosCfmMipVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMipVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipVid.setDescription('This object is used as index in the table and is used to specify the VLAN service type for which intermediate maintenance points can be created.')
wwpLeosCfmMipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMipPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipPort.setDescription('This object is used as index in the table and is used to specify the port.')
wwpLeosCfmMipLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmMipLevel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipLevel.setDescription('This object is used to specify the level attribute.')
wwpLeosCfmMipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 3, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmMipStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set it to 'destroy'.")
wwpLeosCfmLinkTraceMsgTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 1), )
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgTable.setDescription('The (conceptual) table listing the configuration parameters for the LinkTraceMsg. Not applicable to 6.x')
wwpLeosCfmLinkTraceMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmLinkTraceMsgPortId"))
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmLinkTraceMsgTable.')
wwpLeosCfmLinkTraceMsgPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgPortId.setDescription('This object is used to specify the port.')
wwpLeosCfmLinkTraceMsgTargetMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgTargetMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgTargetMEPID.setDescription('This object is used to specify the target MEPID. This object should only be set if wwpLeosCfmLinkTraceMsgTargetMacAddr is not specified else error will be returned.')
wwpLeosCfmLinkTraceMsgTargetMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgTargetMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgTargetMacAddr.setDescription('This object is used to specify the target MacAddress to be used when sending link LinkMsg. This object should only be set if wwpLeosCfmLinkTraceMsgTargetMEPID is not specified else error will be returned.')
wwpLeosCfmLinkTraceMsgTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgTTL.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgTTL.setDescription('This object is used to specify the TTL to be used when sending link LinkTraceMsg.')
wwpLeosCfmLinkTraceMsgSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgSequenceNumber.setDescription('This object is used to specify the sequence number in the linkTraceMsg.')
wwpLeosCfmLinkTraceMsgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set this to 'destroy'.")
wwpLeosCfmLinkTraceMsgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgPriority.setDescription('This object is used to specify the priority to be used when sending LinkTraceMsg. ')
wwpLeosCfmLinkTraceMsgServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 1, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgServiceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgServiceName.setDescription('This object is used to specify the service to be used when sending LinkTraceMsg.')
wwpLeosCfmLinkTraceMsgSubPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 1, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgSubPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgSubPortName.setDescription('This object represents the sub-port name where the LinkTraceMsg was sent.')
wwpLeosCfmLinkTraceMsgVsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 1, 1, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgVsIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgVsIndex.setDescription('This object represents the virtual switch where the LinkTraceMsg was sent.')
wwpLeosCfmLinkTraceMsgTotalTxLtm = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 1, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgTotalTxLtm.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgTotalTxLtm.setDescription('This object represents the total LinkTraceMsg were sent.')
wwpLeosCfmLinkTraceMsgTotalRxLtr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 1, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgTotalRxLtr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgTotalRxLtr.setDescription('This object represents the total LinkTraceMsg were received from the LinkTraceResponse.')
wwpLeosCfmLinkTraceMsgReplyTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2), )
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyTable.setDescription('The (conceptual) table listing the display parameters for the LinkTrace Msg Reply.')
wwpLeosCfmLinkTraceMsgReplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmLinkTraceMsgPortId"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmLinkTraceMsgReplyTTL"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmLinkTraceMsgReplyTTLIndex"))
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmLinkTraceMsgReplyTable.')
wwpLeosCfmLinkTraceMsgReplyTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyTTL.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyTTL.setDescription('This object is used to specify the ttl of the received LinkTrace msg reply.')
wwpLeosCfmLinkTraceMsgReplyTTLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyTTLIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyTTLIndex.setDescription('This object provides an additional index when multiple LinkTrace messages are received with the same TTL.')
wwpLeosCfmLinkTraceMsgReplySequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplySequenceNumber.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplySequenceNumber.setDescription('This object is used to specify the sequence number of the received LinkTrace msg reply.')
wwpLeosCfmLinkTraceMsgReplyMPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyMPMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyMPMacAddr.setDescription('This object is used to specify the mac address of the MP of received LinkTrace msg reply.')
wwpLeosCfmLinkTraceMsgReplyMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyMEPID.setDescription('This object is used to specify the MEP ID of the received LinkTrace msg reply.')
wwpLeosCfmLinkTraceMsgReplyTargetMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyTargetMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyTargetMacAddr.setDescription('This object is used to specify the Target Mac address of the received LinkTrace msg reply.')
wwpLeosCfmLinkTraceMsgReplyRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 1), ("unknown", 2), ("fdb", 3), ("mpdb", 4), ("noLearn", 5), ("hit", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyRelayAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyRelayAction.setDescription('This object is used to specify the message reply relay action.')
wwpLeosCfmLinkTraceMsgReplyIngressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyIngressPort.setStatus('obsolete')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyIngressPort.setDescription('This object is used to specify the message reply ingress port.')
wwpLeosCfmLinkTraceMsgReplyIngressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("blocked", 2), ("vid", 3), ("down", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyIngressAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyIngressAction.setDescription('This object is used to specify the message reply ingress action.')
wwpLeosCfmLinkTraceMsgReplyEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyEgressPort.setStatus('obsolete')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyEgressPort.setDescription('This object is used to specify the message reply egress port.')
wwpLeosCfmLinkTraceMsgReplyEgressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("ttl", 2), ("down", 3), ("blocked", 4), ("vid", 5), ("ok", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyEgressAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyEgressAction.setDescription('This object is used to specify the message reply egress action.')
wwpLeosCfmLinkTraceMsgReplyIngressPortStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyIngressPortStr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyIngressPortStr.setDescription('This mib object is used to specify the message reply ingress port.')
wwpLeosCfmLinkTraceMsgReplyEgressPortStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyEgressPortStr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyEgressPortStr.setDescription('This mib object is used to specify the message reply egress port.')
wwpLeosCfmLinkTraceMsgReplyIngressMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 50), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyIngressMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyIngressMacAddr.setDescription('This object is used to specify the message reply ingress mac address.')
wwpLeosCfmLinkTraceMsgReplyEgressMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 4, 2, 1, 51), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyEgressMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLinkTraceMsgReplyEgressMacAddr.setDescription('This object is used to specify the message reply egress mac address.')
wwpLeosCfmLoopbackMsgTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 5, 1), )
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgTable.setDescription('The (conceptual) table listing the configuration parameters for the LoopbackMsg.')
wwpLeosCfmLoopbackMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 5, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmLoopbackMsgPortId"))
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmLoopbackMsgTable.')
wwpLeosCfmLoopbackMsgPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgPortId.setDescription('This object is used to specify the port.')
wwpLeosCfmLoopbackMsgTargetMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 5, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgTargetMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgTargetMEPID.setDescription('This object is used to specify the MEPID. This object should only be set if wwpLeosCfmLoopbackMsgTargetMacAddr is not specified else error will be returned.')
wwpLeosCfmLoopbackMsgTargetMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 5, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgTargetMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgTargetMacAddr.setDescription('This object is used to specify the MacAddress to be used when sending link LoopbackMsg. This object should only be set if wwpLeosCfmLoopbackMsgTargetMEPID is not specified else error will be returned.')
wwpLeosCfmLoopbackMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgCount.setDescription('This object is used to specify the LoopbackMsg count to be used when sending link LoopbackMsg. ')
wwpLeosCfmLoopbackMsgData = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgData.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgData.setDescription('This object is used to specify the LoopbackMsg data to be used when sending link LoopbackMsg. ')
wwpLeosCfmLoopbackMsgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgPriority.setDescription('This object is used to specify the LoopbackMsg priority to be used when sending link LoopbackMsg. ')
wwpLeosCfmLoopbackMsgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 5, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set this to 'destroy'.")
wwpLeosCfmLoopbackMsgDefaultInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgDefaultInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgDefaultInterval.setDescription('The global default LoopbackMsg interval to be used when sending link LoopbackMsg ')
wwpLeosCfmLoopbackMsgDefaultTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgDefaultTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLoopbackMsgDefaultTimeout.setDescription('The global default LoopbackMsg timeout to be used when sending link LoopbackMsg ')
wwpLeosCfmMaintenanceDomainTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 6, 1), )
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainTable.setDescription('The (conceptual) table listing the configuration parameters for the CFM Maintenance Domain Table.')
wwpLeosCfmMaintenanceDomainEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 6, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmMaintenanceDomainIndex"))
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmMaintenanceDomainTable.')
wwpLeosCfmMaintenanceDomainIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 6, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainIndex.setDescription('This object specfies the unique index in the table.')
wwpLeosCfmMaintenanceDomainLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainLevel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainLevel.setDescription('This object specfies the domain level.')
wwpLeosCfmMaintenanceDomainName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 6, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainName.setDescription('The domain name which can be modified.')
wwpLeosCfmMaintenanceDomainServiceCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 6, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainServiceCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainServiceCount.setDescription('This object specfies number of cfm services mapped to this domain.')
wwpLeosCfmMaintenanceDomainMdFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 6, 1, 1, 5), Dot1agCfmMaintDomainNameType().clone('charString')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainMdFormat.setReference('802.1ag clause 21.6.5.1')
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainMdFormat.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainMdFormat.setDescription('The type (and thereby format) of the Maintenance Domain Name.')
wwpLeosCfmMaintenanceDomainMdName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 6, 1, 1, 6), Dot1agCfmMaintDomainName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainMdName.setReference('802.1ag clauses 3.24, 12.14.5, and 21.6.5.3')
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainMdName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainMdName.setDescription('The Maintenance Domain name. The type/format of this object is determined by the value of the wwpLeosCfmMaintenanceDomainMdFormat object.')
wwpLeosCfmMaintenanceDomainStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 6, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMaintenanceDomainStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo' and specify, at a minimum, the wwpLeosCfmMaintenanceDomainLevel and wwpLeosCfmMaintenanceDomainName objects. During a create/set operation, if a non-default MdFormat is required, both the wwpLeosCfmMaintenanceDomainMdFormat and wwpLeosCfmMaintenanceDomainMdName objects must also be specified. To delete a row in this table, set this object to 'destroy'.")
wwpLeosCfmMEPTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1), )
if mibBuilder.loadTexts: wwpLeosCfmMEPTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPTable.setDescription('The (conceptual) table listing the configuration parameters for the CFM MEP table.')
wwpLeosCfmMEPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmMEPPort"))
if mibBuilder.loadTexts: wwpLeosCfmMEPEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmMEPTable.')
wwpLeosCfmMEPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPPort.setDescription('This object is used as index in the table and is used to specify the port id.')
wwpLeosCfmMEPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmMEPAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPAdminState.setDescription('This object is used to specify the admin state of CFM MEP.')
wwpLeosCfmMEPOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPOperState.setStatus('obsolete')
if mibBuilder.loadTexts: wwpLeosCfmMEPOperState.setDescription('This object is obsolete and should not be used.')
wwpLeosCfmMEPDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmMEPDirection.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPDirection.setDescription('This object is used to specify the MEP direction of the service. This object can only be set if wwpLeosCfmServiceIndex is of type vlan.')
wwpLeosCfmMEPCCMState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmMEPCCMState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPCCMState.setDescription('This object specifies the CCM transmission for the service specified by wwpLeosCfmServiceType.')
wwpLeosCfmMEPCCMPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmMEPCCMPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPCCMPriority.setDescription('This object specified the priority of CCM messages transmitted.')
wwpLeosCfmMEPLTMPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmMEPLTMPriority.setStatus('obsolete')
if mibBuilder.loadTexts: wwpLeosCfmMEPLTMPriority.setDescription('This object specifies the priority received on the given service and port.')
wwpLeosCfmMEPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmMEPId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPId.setDescription('This object specifies the mep id for the given service and port.')
wwpLeosCfmMEPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPMacAddr.setDescription('This object specifies the mac address received on the given service and port..')
wwpLeosCfmMEPNextLbmSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNextLbmSeqNumber.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNextLbmSeqNumber.setDescription('This object specifies the next lbm sequence number received on the given service and port.')
wwpLeosCfmMEPRxValidInOrderLoopbackReply = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPRxValidInOrderLoopbackReply.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPRxValidInOrderLoopbackReply.setDescription('The total valid in order loopback replies received on the given service and port.')
wwpLeosCfmMEPRxValidOutOrderLoopbackReply = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPRxValidOutOrderLoopbackReply.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPRxValidOutOrderLoopbackReply.setDescription('This object specifies the total valid out of order loopback replies received on the given service and port.')
wwpLeosCfmMEPNextLTMSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNextLTMSeqNumber.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNextLTMSeqNumber.setDescription('This object specifies the next LTM serquence number received on the given service and port.')
wwpLeosCfmMEPNumLoopbackRepliesTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLoopbackRepliesTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLoopbackRepliesTxmt.setDescription('This object specifies the flags total loopback replies transmitted on the given service and port.')
wwpLeosCfmMEPNumLTMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLTMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLTMReceived.setDescription('This object specifies the total LTM messages received on the given service and port.')
wwpLeosCfmMEPNumLTMTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLTMTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLTMTxmt.setDescription('The total LTM transmitted on the given service and port.')
wwpLeosCfmMEPNumCCMTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumCCMTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumCCMTxmt.setDescription('This object specifies the total CCM messages transmitted on the given service and port.')
wwpLeosCfmMEPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 18), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmMEPRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set this to 'destroy'.")
wwpLeosCfmMEPNumDMMSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumDMMSent.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumDMMSent.setDescription('This object specifies the total delay measurement messages transmitted on the given service and port.')
wwpLeosCfmMEPDMMDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPDMMDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPDMMDelay.setDescription('This object specifies the average delay in microseconds measured during the last DMM performance test on the given service and port.')
wwpLeosCfmMEPDMMJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPDMMJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPDMMJitter.setDescription('This object specifies the average jitter in microseconds measured during the last DMM performance test on the given service and port.')
wwpLeosCfmMEPNumLMMSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLMMSent.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLMMSent.setDescription('The total frame loss measurement messages transmitted during the last test performed on the given service and port.')
wwpLeosCfmMEPLMMFrameLossNear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPLMMFrameLossNear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPLMMFrameLossNear.setDescription('This object specifies the number of lost frames on the near side measured during the last LMM performance test on the given service and port.')
wwpLeosCfmMEPLMMFrameLossFar = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPLMMFrameLossFar.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPLMMFrameLossFar.setDescription('This object specifies the number of lost frames on the far side measured during the last LMM performance test on the given service and port.')
wwpLeosCfmMEPNumLMRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLMRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLMRReceived.setDescription('This object specifies the total number of frame loss measurement replies received during the last test performed on the given service and port. If this count is zero, the near and far frame loss counts are probably invalid as connectivity to the device being tested was not available.')
wwpLeosCfmMEPNumDMRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumDMRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumDMRReceived.setDescription('This object specifies the total number of delay measurement replies received during the last test performed on the given service and port. If this count is not equal to the number of delay measurement frames sent, the jitter and delay are probably invalid as connectivity to the device being tested was not stable.')
wwpLeosCfmMEPDMMMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPDMMMinDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPDMMMinDelay.setDescription('The minimum delay in microseconds measured during the last DMM performance test on the given service and port.')
wwpLeosCfmMEPDMMMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPDMMMaxDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPDMMMaxDelay.setDescription('The maximum delay in microseconds measured during the last DMM performance test on the given service and port.')
wwpLeosCfmMEPDMMMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPDMMMinJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPDMMMinJitter.setDescription('The minimum jitter in microseconds measured during the last DMM performance test on the given service and port.')
wwpLeosCfmMEPDMMMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPDMMMaxJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPDMMMaxJitter.setDescription('The maximum jitter in microseconds measured during the last DMM performance test on the given service and port.')
wwpLeosCfmMEPServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPServiceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPServiceName.setDescription('This object is used to specify the service name assigned to this port.')
wwpLeosCfmMEPSubPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPSubPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPSubPortName.setDescription('This object represents the sub-port name assigned to the given service and port.')
wwpLeosCfmMEPVsPbtName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPVsPbtName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPVsPbtName.setDescription('This object represents the virtual switch or Pbt tunnel assigned to the given service and port.')
wwpLeosCfmMEPLogicalPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPLogicalPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPLogicalPortName.setDescription('This object represents the logical port name assigned to the given service and port.')
wwpLeosCfmMEPSubPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPSubPortIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPSubPortIndex.setDescription('This object is used to specify the CFM sub-port index.')
wwpLeosCfmMEPEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ieee802dot1d", 1), ("pbtCfmEncap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPEncapsulation.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPEncapsulation.setDescription('This object is used to specify the encapsulation applied to the service and port.')
wwpLeosCfmMEPLeadPortBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPLeadPortBayIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPLeadPortBayIndex.setDescription('This object is used as to specify the agent bay that MEP is in.')
wwpLeosCfmMEPLeadPortShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 57), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPLeadPortShelfIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPLeadPortShelfIndex.setDescription('This object is used as to specify the agent shelf that MEP is in.')
wwpLeosCfmMEPLeadPortModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 58), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPLeadPortModuleIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPLeadPortModuleIndex.setDescription('This object is used as to specify the agent module that MEP is in. Index = 255 is reserved for Lag ports and this this object cannot be set to 255 in this table.')
wwpLeosCfmMEPPBTBvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPPBTBvid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPPBTBvid.setDescription('This object specifies the BVID assigned to the given service and port.')
wwpLeosCfmMEPPBTEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 60), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPPBTEtype.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPPBTEtype.setDescription('This object specifies the E-type assigned to the given service and port.')
wwpLeosCfmMEPNumLbmTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLbmTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLbmTxmt.setDescription('This object specifies the total loopback messages transmitted on the given service and port.')
wwpLeosCfmMEPNumLbmReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLbmReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLbmReceived.setDescription('This object specifies the total loopback messages received on the given service and port.')
wwpLeosCfmMEPNumLoopbackRepliesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLoopbackRepliesReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLoopbackRepliesReceived.setDescription('This object specifies the total loopback replies received on the given service and port.')
wwpLeosCfmMEPNumLTRepliesTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLTRepliesTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLTRepliesTxmt.setDescription('This object specifies the total link trace replies transmitted on the given service and port.')
wwpLeosCfmMEPNumLTRepliesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLTRepliesReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumLTRepliesReceived.setDescription('This object specifies the total link trace replies received on the given service and port.')
wwpLeosCfmMEPNumUnexpectedLTRepliesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumUnexpectedLTRepliesReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumUnexpectedLTRepliesReceived.setDescription('This object specifies the total unexpected link trace replies received on the given service and port.')
wwpLeosCfmMEPNumCCMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 7, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMEPNumCCMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMEPNumCCMReceived.setDescription('This object specifies the total CCM messages received on the given service and port.')
wwpLeosCfmRemoteMEPTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1), )
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPTable.setDescription('The (conceptual) table listing the display parameters for the Remote MEP table.')
wwpLeosCfmRemoteMEPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmRemoteMEPID"))
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmRemoteMEPTable.')
wwpLeosCfmRemoteMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPID.setDescription('This object is used as index in the table and is used to specify the MEPID.')
wwpLeosCfmRemoteMEPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPAdminState.setDescription('The administrative state of the Remote MEP State Machine.')
wwpLeosCfmRemoteMEPOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("hold", 3), ("holdLocked", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPOperState.setDescription('The operational state of the Remote MEP State Machine. disabled represents that remote mep is admin disabled. enabled represents that remote mep is operationally enabled hold represents that remote mep is admin enabled but currently in operational hold state holdLocked represents that remote mep is locked in hold state.')
wwpLeosCfmRemoteMEPTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPTime.setDescription('This object is used to specify the time at which the Remote MEP State Machine last entered RMEP_FAILED or RMEP_OK states.')
wwpLeosCfmRemoteMEPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 5), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPMacAddr.setDescription('This object is used to specify the MAC address of the remote MEP.')
wwpLeosCfmRemoteMEPKLastMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPKLastMacStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPKLastMacStatus.setDescription('This object is used to specify the last MAC status received.')
wwpLeosCfmRemoteMEPFailureFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 7), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPFailureFlag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPFailureFlag.setDescription('This object is used to specify the Remote MEP failure flag.')
wwpLeosCfmRemoteMEPCCMErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMErrorFlag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMErrorFlag.setDescription('This object is used to specify the MEP CCM error flag.')
wwpLeosCfmRemoteMEPRDIErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPRDIErrorFlag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPRDIErrorFlag.setDescription('This object is used to specify the MEP RDI error flag.')
wwpLeosCfmRemoteMEPNumCCMRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPNumCCMRx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPNumCCMRx.setDescription('This object is used to show the number of MEP CCM frames received.')
wwpLeosCfmRemoteMEPNumDMMSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPNumDMMSent.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPNumDMMSent.setDescription('The number of DMM frames sent.')
wwpLeosCfmRemoteMEPDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPDelay.setDescription('This object is used to show the average Delay in microseconds during the last Delay Measurement test.')
wwpLeosCfmRemoteMEPJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPJitter.setDescription('This object is used to show the average Jitter in microseconds during the last Delay Measurement test.')
wwpLeosCfmRemoteMEPNumLMMSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPNumLMMSent.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPNumLMMSent.setDescription('This object is used to show the number of LMM frames sent.')
wwpLeosCfmRemoteMEPFrameLossNear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPFrameLossNear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPFrameLossNear.setDescription('This object is used to show the near side Frame Loss during the last Frame Loss Measurement test.')
wwpLeosCfmRemoteMEPFrameLossFar = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPFrameLossFar.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPFrameLossFar.setDescription('This object is used to show the far side Frame Loss during the last Frame Loss Measurement test.')
wwpLeosCfmRemoteMEPNumLMRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPNumLMRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPNumLMRReceived.setDescription('This object is used to show the number of LMR frames received.')
wwpLeosCfmRemoteMEPNumCCMLost = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPNumCCMLost.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPNumCCMLost.setDescription('This object is used to show the number of MEP CCM frames lost, as calculated by watching for CCM sequence errors.')
wwpLeosCfmRemoteMEPNumDMRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPNumDMRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPNumDMRReceived.setDescription('This object is used to show the number of DMR frames received.')
wwpLeosCfmRemoteMEPHoldState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("locked", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPHoldState.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPHoldState.setDescription('This object is used to set the remote MEP Hold State')
wwpLeosCfmRemoteMEPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 21), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPRowStatus.setDescription('This object is used to create entries in remote mep table')
wwpLeosCfmRemoteMEPCCMComment = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMComment.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMComment.setDescription('This mib object contains the CCM Comment, if available, that was sent by the remote Ciena device.')
wwpLeosCfmRemoteMEPBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPBadSequence.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPBadSequence.setDescription('This mib object contains the number of LMR frames received with bad sequence number, for a given service and remote mep.')
wwpLeosCfmRemoteMEPMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPMinDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPMinDelay.setDescription('The minimum Delay in microseconds during the last Delay Measurement test.')
wwpLeosCfmRemoteMEPMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPMaxDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPMaxDelay.setDescription('The maximum Delay in microseconds during the last Delay Measurement test.')
wwpLeosCfmRemoteMEPMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPMinJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPMinJitter.setDescription('The minimum jitter in microseconds during the last Delay Measurement test.')
wwpLeosCfmRemoteMEPMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPMaxJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPMaxJitter.setDescription('The maximum jitter in microseconds during the last Delay Measurement test.')
wwpLeosCfmRemoteCfmMEPHoldState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("lock", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmRemoteCfmMEPHoldState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteCfmMEPHoldState.setDescription('Hold-state for the remote-mep entry.')
wwpLeosCfmRemoteMEPServiceClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 29), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPServiceClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPServiceClear.setDescription('Setting this object to true causes the remote MEP for this service to be re-initialized .')
wwpLeosCfmRemoteMEPServiceStatisticsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 30), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPServiceStatisticsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPServiceStatisticsClear.setDescription('Setting this object to true resets the statistics for the remote MEP for this service.')
wwpLeosCfmRemoteMEPAccelerated = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 49), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPAccelerated.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPAccelerated.setDescription('Specifies if the remote-mep is monitored in the hardware.')
wwpLeosCfmRemoteMEPSubPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPSubPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPSubPortName.setDescription('The object indicates the unique index for the module.')
wwpLeosCfmRemoteMEPServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPServiceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPServiceName.setDescription('This object is used to specify the Service name.')
wwpLeosCfmRemoteMEPBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 52), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPBayIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPBayIndex.setDescription('This object is used as to specify the agent bay that MEP is in.')
wwpLeosCfmRemoteMEPShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 53), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPShelfIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPShelfIndex.setDescription('This object is used as to specify the agent shelf that MEP is in.')
wwpLeosCfmRemoteMEPModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 54), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPModuleIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPModuleIndex.setDescription('This object is used as to specify the agent module that MEP is in. Index = 255 is reserved for Lag ports and this this object cannot be set to 255 in this table.')
wwpLeosCfmRemoteMEPPreviousBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 55), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPPreviousBayIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPPreviousBayIndex.setDescription('This object is used as to specify the agent bay that MEP was previously in.')
wwpLeosCfmRemoteMEPPreviousShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPPreviousShelfIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPPreviousShelfIndex.setDescription('This object is used as to specify the agent shelf that MEP was previously in.')
wwpLeosCfmRemoteMEPPreviousModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 57), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPPreviousModuleIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPPreviousModuleIndex.setDescription('This object is used as to specify the agent module that MEP was previously in. Index = 255 is reserved for Lag ports and this this object cannot be set to 255 in this table.')
wwpLeosCfmRemoteMEPLastPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("blocked", 3), ("up", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPLastPortStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPLastPortStatus.setDescription('This object is used as to specify the remote MEP last port status.')
wwpLeosCfmRemoteMEPLastInterfaceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("up", 2), ("down", 3), ("testing", 4), ("dormant", 5), ("lowerLayerDown", 6), ("notPresent", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPLastInterfaceStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPLastInterfaceStatus.setDescription('This object is used as to specify the remote MEP interface status.')
wwpLeosCfmRemoteMEPLastSeqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPLastSeqNum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPLastSeqNum.setDescription('This object is used to show the tbd.')
wwpLeosCfmRemoteMEPCCMSeqErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 61), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMSeqErrors.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMSeqErrors.setDescription('This object is used to show the number of MEP CCM frames sequence errors.')
wwpLeosCfmRemoteMEPCCMLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMLevel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMLevel.setDescription('This object is used as to specify the CCM level.')
wwpLeosCfmRemoteMEPDeleteAll = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 8, 65), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPDeleteAll.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPDeleteAll.setDescription('Setting this object to true will delete all remote meps. This object will always return false.')
wwpLeosCfmPortStackTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 9, 1), )
if mibBuilder.loadTexts: wwpLeosCfmPortStackTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmPortStackTable.setDescription('The (conceptual) table listing the display parameters for the CFM port stack table.')
wwpLeosCfmPortStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 9, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmPortStackPort"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmPortStackVid"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmPortStackType"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmPortStackLevel"))
if mibBuilder.loadTexts: wwpLeosCfmPortStackEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmPortStackEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmPortStackTable.')
wwpLeosCfmPortStackPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmPortStackPort.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmPortStackPort.setDescription('This object is used as index in the table and is used to specify the port id.')
wwpLeosCfmPortStackVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmPortStackVid.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmPortStackVid.setDescription('This object is used as index in the table and is used to show the VLAN.')
wwpLeosCfmPortStackType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mepUp", 1), ("mepDown", 2), ("mip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmPortStackType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmPortStackType.setDescription('This object is used as index in the table and is used to show the type of Maintenance Point.')
wwpLeosCfmPortStackLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 9, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmPortStackLevel.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmPortStackLevel.setDescription('This object is used as index in the table and is used to show the level of stack.')
wwpLeosCfmPortStackMEPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmPortStackMEPId.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmPortStackMEPId.setDescription('The MEP ID.')
wwpLeosCfmExtPortStackTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 15, 1), )
if mibBuilder.loadTexts: wwpLeosCfmExtPortStackTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtPortStackTable.setDescription('The (conceptual) table listing the display parameters for the CFM port stack table.')
wwpLeosCfmExtPortStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 15, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtPortStackVid"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtPortStackPort"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtPortStackType"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtPortStackLevel"))
if mibBuilder.loadTexts: wwpLeosCfmExtPortStackEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtPortStackEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmPortStackTable.')
wwpLeosCfmExtPortStackVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtPortStackVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtPortStackVid.setDescription('This object is used as index in the table and is used to show the VLAN.')
wwpLeosCfmExtPortStackPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtPortStackPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtPortStackPort.setDescription('This object is used as index in the table and is used to specify the port id.')
wwpLeosCfmExtPortStackType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mepUp", 1), ("mepDown", 2), ("mip", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtPortStackType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtPortStackType.setDescription('This object is used as index in the table and is used to show the type of Maintenance Point.')
wwpLeosCfmExtPortStackLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 15, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtPortStackLevel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtPortStackLevel.setDescription('This object is used as index in the table and is used to show the level of stack.')
wwpLeosCfmExtPortStackMEPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 15, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtPortStackMEPId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtPortStackMEPId.setDescription('The MEP ID.')
wwpLeosCfmMipCCMDbTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 10, 1), )
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbTable.setDescription('The (conceptual) table listing the display parameters for the MIP CCM Db table.')
wwpLeosCfmMipCCMDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 10, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmMipCCMDbIndex"))
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmMipCCMDbTable.')
wwpLeosCfmMipCCMDbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 10, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbIndex.setDescription('This object shows the CCM DB vlan.')
wwpLeosCfmMipCCMDbVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 10, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbVid.setDescription('This object shows the CCM DB vlan.')
wwpLeosCfmMipCCMDbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 10, 1, 1, 3), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbMacAddr.setDescription('This object shows the mac address.')
wwpLeosCfmMipCCMDbPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbPort.setDescription('This object shows the CCM DB port.')
wwpLeosCfmMipCCMDbMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 10, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbMEPID.setDescription('This object shows the CCM DB MEP ID.')
wwpLeosCfmMipCCMdbNumCCMRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 10, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMipCCMdbNumCCMRx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipCCMdbNumCCMRx.setDescription('This object shows the number of CCM DB packets received.')
wwpLeosCfmMipCCMDbTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 10, 1, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbTime.setDescription('This object shows the CCM DB time.')
wwpLeosCfmMipCCMDbLastMacStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 10, 1, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbLastMacStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbLastMacStatus.setDescription('This object shows the CCM DB last mac status.')
wwpLeosCfmMipCCMDbRDIErrorFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 10, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbRDIErrorFlag.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmMipCCMDbRDIErrorFlag.setDescription('This object shows the CCM DB RDI error flag status.')
wwpLeosCfmServiceFaultTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 2), )
if mibBuilder.loadTexts: wwpLeosCfmServiceFaultTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceFaultTable.setDescription('The (conceptual) table used for Fault Traps. The last CFM error that occurred is reported.')
wwpLeosCfmServiceFaultEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 2, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"))
if mibBuilder.loadTexts: wwpLeosCfmServiceFaultEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceFaultEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmServiceFaultTable.')
wwpLeosCfmServiceFaultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 2, 1, 1), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceFaultTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceFaultTime.setDescription('This object is used to specify the Time at which the fault occurred.')
wwpLeosCfmServiceFaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("someRDIDefect", 2), ("someMACStatusDefect", 3), ("someRMEPCCMDefect", 4), ("errorCCMDefect", 5), ("xconCCMDefect", 6), ("instability", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceFaultType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceFaultType.setDescription('This object is used to specify the type of fault.')
wwpLeosCfmServiceFaultDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceFaultDesc.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceFaultDesc.setDescription('This object is used to specify the description of the fault.')
wwpLeosCfmServiceFaultMep = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceFaultMep.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceFaultMep.setDescription('This object is used to specify the Mepid of MEP reporting the fault.')
wwpLeosCfmServiceVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceVlan.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceVlan.setDescription('This object is used to specify the service VLAN.')
wwpLeosCfmServiceVsPbtName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 2, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceVsPbtName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceVsPbtName.setDescription('This object represents the virtual switch or Pbt tunnel assigned to the given service.')
wwpLeosCfmServiceStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3), )
if mibBuilder.loadTexts: wwpLeosCfmServiceStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceStatisticsTable.setDescription('The (conceptual) table listing the configuration parameters for the CFM Service Table. To create an entry in this table, the following criteria must be met: wwpLeosCfmServiceType must be specified. wwpLeosCfmServiceValue must be specified. wwpLeosCfmServiceName must be specified. wwpLeosCfmServiceStatus must be set to createAndGo. ')
wwpLeosCfmServiceStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"))
if mibBuilder.loadTexts: wwpLeosCfmServiceStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceStatisticsEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmServiceTable.')
wwpLeosCfmServiceRxTotalValidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceRxTotalValidFrames.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceRxTotalValidFrames.setDescription('The total valid Frames received.')
wwpLeosCfmServiceRxTotalInvalidFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceRxTotalInvalidFrames.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceRxTotalInvalidFrames.setDescription('The total invalid Frames received.')
wwpLeosCfmServiceInvalidMessageOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceInvalidMessageOverflow.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceInvalidMessageOverflow.setDescription('The total invalid message overflow Frames.')
wwpLeosCfmServiceInvalidPortStatusTLV = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceInvalidPortStatusTLV.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceInvalidPortStatusTLV.setDescription('The total invalid Port Status TLVs Frames.')
wwpLeosCfmServiceInvalidInterfaceStatusTLV = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceInvalidInterfaceStatusTLV.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceInvalidInterfaceStatusTLV.setDescription('The invalid interface Status TLVs Frames.')
wwpLeosCfmServiceInvalidSenderIDTLV = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceInvalidSenderIDTLV.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceInvalidSenderIDTLV.setDescription('The invalid SenderId TLV.')
wwpLeosCfmServiceTxTotalCCM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTxTotalCCM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTxTotalCCM.setDescription('The total CCM sent.')
wwpLeosCfmServiceTotalRxValidCCM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxValidCCM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxValidCCM.setDescription('The total valid CCM received.')
wwpLeosCfmServiceTotalRxInSequenceCCM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxInSequenceCCM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxInSequenceCCM.setDescription('The total CCM in sequence received.')
wwpLeosCfmServiceTotalRxNotInSequenceCCM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxNotInSequenceCCM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxNotInSequenceCCM.setDescription('The total CCM not in sequence received.')
wwpLeosCfmServiceTotalRxMDLevelXconCCM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxMDLevelXconCCM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxMDLevelXconCCM.setDescription('The total MD Level Xcon CCM received.')
wwpLeosCfmServiceTotalRxMAIDXconCCM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxMAIDXconCCM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxMAIDXconCCM.setDescription('The total MAID Xcon CCM received.')
wwpLeosCfmServiceTotalRxMEPIDErrorCCM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxMEPIDErrorCCM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxMEPIDErrorCCM.setDescription('The total MEPID Error CCM received.')
wwpLeosCfmServiceTotalRxCCMIntervalErrorCCM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxCCMIntervalErrorCCM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxCCMIntervalErrorCCM.setDescription('The total Interval Error CCM received.')
wwpLeosCfmServiceTotalRxInvalidCCM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxInvalidCCM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxInvalidCCM.setDescription('The total Internal Error CCM received.')
wwpLeosCfmServiceTotalTxLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxLTM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxLTM.setDescription('The total Internal Error CCM received.')
wwpLeosCfmServiceTotalTxLTR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxLTR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxLTR.setDescription('The total Internal Error CCM received.')
wwpLeosCfmServiceTotalRxValidLTR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxValidLTR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxValidLTR.setDescription('The valid LTR Received.')
wwpLeosCfmServiceTotalRxUnexpectedLTR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxUnexpectedLTR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxUnexpectedLTR.setDescription('The unexpected LTR received. ')
wwpLeosCfmServiceTotalRxInvalidLTR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxInvalidLTR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxInvalidLTR.setDescription('This object specifies invalid LTR received. ')
wwpLeosCfmServiceTotalRxInvalidRelayActionLTR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxInvalidRelayActionLTR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxInvalidRelayActionLTR.setDescription('The total invalid relay action LTR received.')
wwpLeosCfmServiceTotalRxValidLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxValidLTM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxValidLTM.setDescription('The valid LTM received.')
wwpLeosCfmServiceTotalTxInvalidLTM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxInvalidLTM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxInvalidLTM.setDescription('The total invalid LTM sent.')
wwpLeosCfmServiceTotalTxLBM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxLBM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxLBM.setDescription('The total LBM sent.')
wwpLeosCfmServiceTotalTxLBR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxLBR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxLBR.setDescription('The total LBR sent.')
wwpLeosCfmServiceTotalRxInorderLBR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxInorderLBR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxInorderLBR.setDescription('The total in order LBR received.')
wwpLeosCfmServiceTotalRxOutOfOrderLBR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxOutOfOrderLBR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxOutOfOrderLBR.setDescription('The toal out of order LBR received.')
wwpLeosCfmServiceTotalRxContentMismatchLBR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxContentMismatchLBR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxContentMismatchLBR.setDescription('The total content mismatch LBR received.')
wwpLeosCfmServiceTotalRxUnexpectedLBR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxUnexpectedLBR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxUnexpectedLBR.setDescription('The total unexpected LBR received.')
wwpLeosCfmServiceTotalRxInvalidLBR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxInvalidLBR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxInvalidLBR.setDescription('The invalid LBR received.')
wwpLeosCfmServiceTotalRxValidLBM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxValidLBM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxValidLBM.setDescription('The valid LBM received.')
wwpLeosCfmServiceTotalRxInvalidLBM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxInvalidLBM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxInvalidLBM.setDescription('The total invalid LBM received.')
wwpLeosCfmServiceTotalTxDMM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxDMM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxDMM.setDescription('The total DMM sent. ')
wwpLeosCfmServiceTotalTxDMR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxDMR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxDMR.setDescription('The total DMR sent.')
wwpLeosCfmServiceTotalRxDMM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxDMM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxDMM.setDescription('The total DMM received.')
wwpLeosCfmServiceTotalRxDMR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxDMR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxDMR.setDescription('The total DMR received.')
wwpLeosCfmServiceTotalTxLMM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxLMM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxLMM.setDescription('The total LMM sent.')
wwpLeosCfmServiceTotalTxLMR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxLMR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalTxLMR.setDescription('The total LMR sent.')
wwpLeosCfmServiceTotalRxLMM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxLMM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxLMM.setDescription('The total LMM received.')
wwpLeosCfmServiceTotalRxLMR = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxLMR.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceTotalRxLMR.setDescription('The total LMR received. ')
wwpLeosCfmServiceStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceStatsClear.setDescription("Setting this object to clear will clear statististics for the given service index. This object can't be set to none")
wwpLeosCfmServiceClearStats = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmServiceClearStats.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmServiceClearStats.setDescription('Setting this object to clear(1) will clear all service level statistics for all services in addition within each mep.')
wwpLeosCfmDelayMsgTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12, 1), )
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgTable.setDescription('The (conceptual) table listing the configuration parameters for the DelayMeasurementMsg.')
wwpLeosCfmDelayMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmDelayMsgPortId"))
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmDelayMsgTable.')
wwpLeosCfmDelayMsgPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgPortId.setDescription('This object is used to specify the port.')
wwpLeosCfmDelayMsgTargetMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgTargetMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgTargetMEPID.setDescription('This object is used to specify the MEPID. This object should only be set if wwpLeosCfmDelayMsgTargetMacAddr is not specified else error will be returned.')
wwpLeosCfmDelayMsgTargetMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgTargetMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgTargetMacAddr.setDescription('This object is used to specify the MacAddress to be used when sending link LoopbackMsg. This object should only be set if wwpLeosCfmDelayMsgTargetMEPID is not specified else error will be returned.')
wwpLeosCfmDelayMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgCount.setDescription('This object is used to specify the DelayMeasurementMsg count to be used when sending link DelayMeasurementMsg.')
wwpLeosCfmDelayMsgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgPriority.setDescription('This object is used to specify the DelayMeasurementMsg priority to be used when sending link DelayMeasurementMsg.')
wwpLeosCfmDelayMsgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set this to 'destroy'. If 'destroy' is used and either TargetMacAddr or TargetMEPID is specified, a cancel will be done for any repeating test on those items.")
wwpLeosCfmDelayMsgRepeat = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgRepeat.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgRepeat.setDescription('Used to make the Delay Measurement test a repeating test.')
wwpLeosCfmDelayMsgRepeatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgRepeatCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgRepeatCount.setDescription('The repeat time in minutes for the Delay Measurement test. If zero is specified, the test runs continuously.')
wwpLeosCfmDelayMsgDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgDelayThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgDelayThreshold.setDescription('The fault threshold for the Delay Measurement test, specified in microseconds. A value of -1 disables the generate of faults, 0 or greater will be compared to the average delay result of the test and a fault will be generated if the threshold is exceeded.')
wwpLeosCfmDelayMsgJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgJitterThreshold.setDescription('The fault threshold for the Jitter Measurement test, specified in microseconds. A value of -1 disables the generate of faults, 0 or greater will be compared to the average jitter result of the test and a fault will be generated if the threshold is exceeded.')
wwpLeosCfmDelayMsgMaxDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgMaxDelayThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgMaxDelayThreshold.setDescription('The fault threshold for the Delay Measurement test, specified in microseconds. A value of -1 disables the generate of faults, 0 or greater will be compared to the maximum delay result of the test and a fault will be generated if the threshold is exceeded.')
wwpLeosCfmDelayMsgMaxJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 12, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgMaxJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayMsgMaxJitterThreshold.setDescription('The fault threshold for the Jitter Measurement test, specified in microseconds. A value of -1 disables the generate of faults, 0 or greater will be compared to the maximum jitter result of the test and a fault will be generated if the threshold is exceeded.')
wwpLeosCfmFrameLossMsgTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 13, 1), )
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgTable.setDescription('The (conceptual) table listing the configuration parameters for the FrameLossMeasurementMsg.')
wwpLeosCfmFrameLossMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 13, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmFrameLossMsgPortId"))
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmFrameLossMsgTable.')
wwpLeosCfmFrameLossMsgPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgPortId.setDescription('This object is used to specify the port.')
wwpLeosCfmFrameLossMsgTargetMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 13, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgTargetMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgTargetMEPID.setDescription('This object is used to specify the MEPID. This object should only be set if wwpLeosCfmFrameLossMsgTargetMacAddr is not specified else error will be returned.')
wwpLeosCfmFrameLossMsgTargetMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 13, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgTargetMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgTargetMacAddr.setDescription('This object is used to specify the MacAddress to be used when sending link LoopbackMsg. This object should only be set if wwpLeosCfmFrameLossMsgTargetMEPID is not specified else error will be returned.')
wwpLeosCfmFrameLossMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgCount.setDescription('This object is used to specify the FrameLossMeasurementMsg count to be used when sending link FrameLossMeasurementMsg.')
wwpLeosCfmFrameLossMsgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgPriority.setDescription('This object is used to specify the FrameLossMeasurementMsg priority to be used when sending link FrameLossMeasurementMsg.')
wwpLeosCfmFrameLossMsgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 13, 1, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set this to 'destroy'. If 'destroy' is used and either TargetMacAddr or TargetMEPID is specified, a cancel will be done for any repeating test on those items.")
wwpLeosCfmFrameLossMsgRepeat = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgRepeat.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgRepeat.setDescription('Used to make the Frame Loss Measurement test a repeating test.')
wwpLeosCfmFrameLossMsgRepeatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgRepeatCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgRepeatCount.setDescription('The repeat time in minutes for the Frame Loss Measurement test. If zero is specified, the test runs continuously.')
wwpLeosCfmFrameLossMsgFlnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgFlnThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgFlnThreshold.setDescription('The fault threshold for the Frame Loss Measurement test. A value of -1 disables the generate of faults, 0 or greater will be compared to the frame loss near result of the test and a fault will be generated if the threshold is exceeded.')
wwpLeosCfmFrameLossMsgFlfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgFlfThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFrameLossMsgFlfThreshold.setDescription('The fault threshold for the Frame Loss Measurement test. A value of -1 disables the generate of faults, 0 or greater will be compared to the frame loss far result of the test and a fault will be generated if the threshold is exceeded.')
wwpLeosCfmRemoteMEPCCMLossTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 14, 1), )
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMLossTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMLossTable.setDescription('The (conceptual) table listing the display parameters for the Remote MEP CCM Loss table.')
wwpLeosCfmRemoteMEPCCMLossEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 14, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmRemoteMEPID"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmRemoteMEPCCMLossNum"))
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMLossEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMLossEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmRemoteMEPCCMLossTable.')
wwpLeosCfmRemoteMEPCCMLossNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 14, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMLossNum.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMLossNum.setDescription('This object is used as an index into the table and is used to specify the CCM Loss bucket to be returned.')
wwpLeosCfmRemoteMEPCCMLossCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 14, 1, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMLossCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmRemoteMEPCCMLossCount.setDescription("Count of the number of CCM's lost during the wwpLeosCfmServiceCCMLossBucketInterval sample period.")
wwpLeosCfmExtLoopbackMsgTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 3, 1), )
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgTable.setDescription('The (conceptual) table listing the configuration parameters for the LoopbackMsg. The following attributes are required to create a LoopbackMsg: -- wwpLeosCfmServiceIndex -- wwpLeosCfmExtLoopbackMsgTargetMEPID or -- wwpLeosCfmExtLoopbackMsgTargetMacAddr -- wwpLeosCfmExtLoopbackMsgCount -- wwpLeosCfmExtLoopbackMsgData -- wwpLeosCfmExtLoopbackMsgPriority -- wwpLeosCfmExtLoopbackMsgAction -- wwpLeosCfmExtLoopbackMsgInterval -- wwpLeosCfmExtLoopbackMsgTimeout -- wwpLeosCfmExtLoopbackMsgLoss')
wwpLeosCfmExtLoopbackMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 3, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtLoopbackMsgLocalMEPID"))
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmExtLoopbackMsgTable.')
wwpLeosCfmExtLoopbackMsgLocalMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgLocalMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgLocalMEPID.setDescription('This object is used to specify the port.')
wwpLeosCfmExtLoopbackMsgTargetMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgTargetMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgTargetMEPID.setDescription('This object is used to specify the MEPID. This object should only be set if wwpLeosCfmExtLoopbackMsgTargetMacAddr is not specified else error will be returned.')
wwpLeosCfmExtLoopbackMsgTargetMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 3, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgTargetMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgTargetMacAddr.setDescription('This object is used to specify the MacAddress to be used when sending link LoopbackMsg. This object should only be set if wwpLeosCfmExtLoopbackMsgTargetMEPID is not specified else error will be returned.')
wwpLeosCfmExtLoopbackMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgCount.setDescription('This object is used to specify the LoopbackMsg count to be used when sending link LoopbackMsg. ')
wwpLeosCfmExtLoopbackMsgData = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgData.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgData.setDescription('This object is used to specify the LoopbackMsg data to be used when sending link LoopbackMsg. ')
wwpLeosCfmExtLoopbackMsgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgPriority.setDescription('This object is used to specify the LoopbackMsg priority to be used when sending link LoopbackMsg. ')
wwpLeosCfmExtLoopbackMsgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 3, 1, 1, 7), SendState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgAction.setDescription('This object represents the action for the message (send, clear or cancel). If set to send(1) and if wwpLeosCfmExtLoopbackMsgTargetMacAddr is specified then loopbackMsg is sent to remote Mac. If set to send(1) and if wwpLeosCfmExtLoopbackMsgTargetMEPID is specified then loopbackMsg is sent to remote mepid. If set to clear(2) will clear mep statistics for given service and mepid. If set to cancel(3) will return commit_failed_error.')
wwpLeosCfmExtLoopbackMsgInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 60000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgInterval.setDescription('This object is used to specify the LoopbackMsg interval to be used when sending link LoopbackMsg. ')
wwpLeosCfmExtLoopbackMsgTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2000, 10000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgTimeout.setDescription('This object is used to specify the LoopbackMsg timeout to be used when sending link LoopbackMsg. ')
wwpLeosCfmExtLoopbackMsgLoss = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgLoss.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLoopbackMsgLoss.setDescription('This object is used to display the LoopbackMsg loss count.')
wwpLeosCfmExtMEPTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1), )
if mibBuilder.loadTexts: wwpLeosCfmExtMEPTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPTable.setDescription("The (conceptual) table listing the configuration parameters for the CFM MEP table. To create entry in this table use SNMP multiple set operation. - wwpLeosCfmExtPortId must be specified. - wwpLeosCfmExtVlanId must be specified. - wwpLeosCfmExtMEPRowStatus must be set to 'CreateAndGo'")
wwpLeosCfmExtMEPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtMEPId"))
if mibBuilder.loadTexts: wwpLeosCfmExtMEPEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmMEPTable.')
wwpLeosCfmExtMEPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPId.setDescription('This is used as the index in the table. This object specifies the MEP id for the given service.')
wwpLeosCfmExtPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtPortId.setDescription('')
wwpLeosCfmExtVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtVlanId.setDescription('')
wwpLeosCfmExtMEPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPAdminState.setDescription('This object is used to specify the admin state of CFM MEP.')
wwpLeosCfmExtMEPOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPOperState.setDescription('This object is used to specify the oper state of CFM MEP.')
wwpLeosCfmExtMEPDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDirection.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDirection.setDescription('This object is used to specify the MEP direction of the service. This object can only be set if wwpLeosCfmServiceIndex is of type VLAN.')
wwpLeosCfmExtMEPCCMState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPCCMState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPCCMState.setDescription('This object specifies the CCM transmission for the service specified by wwpLeosCfmServiceType.')
wwpLeosCfmExtMEPCCMPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPCCMPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPCCMPriority.setDescription('This object specified the priority of CCM messages transmitted.')
wwpLeosCfmExtMEPLTMPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLTMPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLTMPriority.setDescription('The priority received on the given service and MEP.')
wwpLeosCfmExtMEPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 10), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPMacAddr.setDescription('The mac address received on the given service and MEP.')
wwpLeosCfmExtMEPNextLbmSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPNextLbmSeqNumber.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPNextLbmSeqNumber.setDescription('The next lbm sequence number received on the given service and MEP.')
wwpLeosCfmExtMEPNextLTMSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPNextLTMSeqNumber.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPNextLTMSeqNumber.setDescription('The next LTM sequence number received on the given service and MEP.')
wwpLeosCfmExtMEPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set this to 'destroy'.")
wwpLeosCfmExtMEPDMMDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDMMDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDMMDelay.setDescription('The average delay in microseconds measured during the last DMM performance test on the given service and MEP.')
wwpLeosCfmExtMEPDMMJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDMMJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDMMJitter.setDescription('The average jitter in microseconds measured during the last DMM performance test on the given service and MEP.')
wwpLeosCfmExtMEPLMMFrameLossNear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLMMFrameLossNear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLMMFrameLossNear.setDescription('The number of lost frames on the near side measured during the last LMM performance test on the given service and MEP.')
wwpLeosCfmExtMEPLMMFrameLossFar = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLMMFrameLossFar.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLMMFrameLossFar.setDescription('The number of lost frames on the far side measured during the last LMM performance test on the given service and MEP.')
wwpLeosCfmExtMEPServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPServiceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPServiceName.setDescription('The service name assigned to this MEP.')
wwpLeosCfmExtMEPInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPInterfaceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPInterfaceName.setDescription('The interface name associated with this MEP.')
wwpLeosCfmExtMEPServiceInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPServiceInstanceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPServiceInstanceName.setDescription('The service instance name associated with this MEP.')
wwpLeosCfmExtMEPLogicalPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLogicalPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLogicalPortName.setDescription('Logical port name associated with this MEP.')
wwpLeosCfmExtMEPTagMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPTagMode.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPTagMode.setDescription('Tag-mode for the given mep and service. When on(1) the MEP originates all frames with an additional inner-most tag. On a down MEP this is the CVLAN tag.')
wwpLeosCfmExtMEPTagVID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPTagVID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPTagVID.setDescription('VLAN ID for the additional tag given mep and service.')
wwpLeosCfmExtMEPTagPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPTagPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPTagPriority.setDescription('The priority encoded in the additional tag.')
wwpLeosCfmExtMEPLMMBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLMMBadSequence.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLMMBadSequence.setDescription('This object specifes the number of frames with bad sequence numbers measured during the last LMM performance test on the given service and MEP.')
wwpLeosCfmExtMEPCCMComment = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 58), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPCCMComment.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPCCMComment.setDescription('This mib object allows to set the MEP CCM Comment.')
wwpLeosCfmExtMEPLMMMissingSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLMMMissingSequence.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLMMMissingSequence.setDescription('This object specifes the number of frames with missing sequence numbers measured during the last LMM performance test on the given service and MEP.')
wwpLeosCfmExtMEPBlockOppositeFaultCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPBlockOppositeFaultCurrent.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPBlockOppositeFaultCurrent.setDescription('The number of frames seen in the current sample window.')
wwpLeosCfmExtMEPBlockOppositeFaultThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 61), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPBlockOppositeFaultThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPBlockOppositeFaultThreshold.setDescription('The number of frames to block before generating a fault.')
wwpLeosCfmExtMEPBlockOppositeFaultTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPBlockOppositeFaultTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPBlockOppositeFaultTime.setDescription('The frame sample window size in minutes.')
wwpLeosCfmExtMEPDMMMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDMMMinDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDMMMinDelay.setDescription('The minimum delay in microseconds measured during the last DMM performance test on the given service and MEP.')
wwpLeosCfmExtMEPDMMMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDMMMaxDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDMMMaxDelay.setDescription('The maximum delay in microseconds measured during the last DMM performance test on the given service and MEP.')
wwpLeosCfmExtMEPDMMMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDMMMinJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDMMMinJitter.setDescription('The minimum jitter in microseconds measured during the last DMM performance test on the given service and MEP.')
wwpLeosCfmExtMEPDMMMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDMMMaxJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDMMMaxJitter.setDescription('The maximum jitter in microseconds measured during the last DMM performance test on the given service and MEP.')
wwpLeosCfmExtMEPAccelerated = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 1, 1, 67), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPAccelerated.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPAccelerated.setDescription('Specifies if the mep is monitored in hardware.')
wwpLeosCfmExtMEPStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2), )
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsTable.setDescription('The (conceptual) table listing the configuration parameters for the CFM MEP table.')
wwpLeosCfmExtMEPStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtMEPId"))
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmMEPTable.')
wwpLeosCfmExtMEPStatsTotalValidFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsTotalValidFramesReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsTotalValidFramesReceived.setDescription('This object specifies total valid frames received.')
wwpLeosCfmExtMEPStatsTotalInvalidFramesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsTotalInvalidFramesReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsTotalInvalidFramesReceived.setDescription('This object specifies total invalid frames received.')
wwpLeosCfmExtMEPStatsTotalInvalidMessageOverflowReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsTotalInvalidMessageOverflowReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsTotalInvalidMessageOverflowReceived.setDescription('This object specifies total invalid message overflow frames received ')
wwpLeosCfmExtMEPStatsInvalidPortStatusTLVReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidPortStatusTLVReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidPortStatusTLVReceived.setDescription('This object specifies total invalid port status TLVs received.')
wwpLeosCfmExtMEPStatsInvalidInterfaceStatusTLVReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidInterfaceStatusTLVReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidInterfaceStatusTLVReceived.setDescription('This object specifies total invalid interface status TLVs received.')
wwpLeosCfmExtMEPStatsInvalidSenderIDTLVReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidSenderIDTLVReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidSenderIDTLVReceived.setDescription('This object specifies total invalid senderID frames received.')
wwpLeosCfmExtMEPStatsCCMTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsCCMTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsCCMTxmt.setDescription('This object specifies total CCM sent.')
wwpLeosCfmExtMEPStatsValidCCMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsValidCCMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsValidCCMReceived.setDescription('This object specifies total valid CCMs received.')
wwpLeosCfmExtMEPStatsCCMInSequenceReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsCCMInSequenceReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsCCMInSequenceReceived.setDescription('This object specifies total CCM received in sequence.')
wwpLeosCfmExtMEPStatsCCMSequenceErrorsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsCCMSequenceErrorsReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsCCMSequenceErrorsReceived.setDescription('This object specifies total not in sequence received CCMs.')
wwpLeosCfmExtMEPStatsMDLevelXconCCMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsMDLevelXconCCMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsMDLevelXconCCMReceived.setDescription('This object specifies Xcon CCMs received.')
wwpLeosCfmExtMEPStatsMAIDXconCCMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsMAIDXconCCMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsMAIDXconCCMReceived.setDescription('This object specifies MAID Xcon CCMs.')
wwpLeosCfmExtMEPStatsIntervalErrorCCMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsIntervalErrorCCMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsIntervalErrorCCMReceived.setDescription('This object specifies Interval Error CCM received.')
wwpLeosCfmExtMEPStatsRxInvalidCCM = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsRxInvalidCCM.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsRxInvalidCCM.setDescription('This object specified invalid CCMs received ')
wwpLeosCfmExtMEPStatsLBMTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLBMTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLBMTxmt.setDescription('This object specifies number of LBM sent')
wwpLeosCfmExtMEPStatsLBRTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLBRTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLBRTxmt.setDescription('This object specifies number of LBR sent.')
wwpLeosCfmExtMEPStatsInOrderLBRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInOrderLBRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInOrderLBRReceived.setDescription('This object specifies number of in order LBR received ')
wwpLeosCfmExtMEPStatsOutOfOrderLBRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsOutOfOrderLBRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsOutOfOrderLBRReceived.setDescription('This object specifies Out of order LBR received')
wwpLeosCfmExtMEPStatsContentMismatchLBRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsContentMismatchLBRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsContentMismatchLBRReceived.setDescription('This object specifies number of content mismatch LBR received ')
wwpLeosCfmExtMEPStatsUnexpectedLBRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsUnexpectedLBRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsUnexpectedLBRReceived.setDescription('This object specifies unexpected LBR received ')
wwpLeosCfmExtMEPStatsInvalidLBRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidLBRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidLBRReceived.setDescription('This object specifies invalid LBR Received.')
wwpLeosCfmExtMEPStatsLTMTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLTMTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLTMTxmt.setDescription('This object specifies number of LTM sent. ')
wwpLeosCfmExtMEPStatsValidLTMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsValidLTMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsValidLTMReceived.setDescription('This object specifies total valid LTM received ')
wwpLeosCfmExtMEPStatsTotalInvalidLTMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsTotalInvalidLTMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsTotalInvalidLTMReceived.setDescription('This object specifies total invalid LTM received. ')
wwpLeosCfmExtMEPStatsInvalidLTRAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidLTRAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidLTRAction.setDescription('This object specifies total invalid LTR action. ')
wwpLeosCfmExtMEPStatsLTRTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLTRTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLTRTxmt.setDescription('This object specifies total LTR sent. ')
wwpLeosCfmExtMEPStatsLTRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLTRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLTRReceived.setDescription('This object specifies unexpected LTR sent. ')
wwpLeosCfmExtMEPStatsDMMTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsDMMTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsDMMTxmt.setDescription('This object specifies total DMM sent. ')
wwpLeosCfmExtMEPStatsDMMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsDMMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsDMMReceived.setDescription('This object specifies total DMM received. ')
wwpLeosCfmExtMEPStatsDMRTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsDMRTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsDMRTxmt.setDescription('This object specifies total DMR sent.')
wwpLeosCfmExtMEPStatsDMRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsDMRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsDMRReceived.setDescription('This object specifies total DMR received')
wwpLeosCfmExtMEPStatsDMReplyTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsDMReplyTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsDMReplyTimeout.setDescription('This object specifies DMR Timeout.')
wwpLeosCfmExtMEPStatsLMMTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLMMTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLMMTxmt.setDescription('This object specifies total LMM Sent. ')
wwpLeosCfmExtMEPStatsLMMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 34), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLMMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLMMReceived.setDescription('This object specifies total LMM received ')
wwpLeosCfmExtMEPStatsLMRTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 35), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLMRTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLMRTxmt.setDescription('This object specifies total LMR sent.')
wwpLeosCfmExtMEPStatsLMRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 36), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLMRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLMRReceived.setDescription('This object specifies total LMR Received. ')
wwpLeosCfmExtMEPStatsLMRTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLMRTimeout.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsLMRTimeout.setDescription('This object specifies total LMR Timeout. ')
wwpLeosCfmExtMEPStatsMepIdErrorCCMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsMepIdErrorCCMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsMepIdErrorCCMReceived.setDescription('This object specifies total MEPID Error CCM Received. ')
wwpLeosCfmExtMEPStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsClear.setDescription("Setting this object to clear will clear MEP stats for the given service and MepId. This object can't be set to none")
wwpLeosCfmExtMEPStatsValidLBMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 41), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsValidLBMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsValidLBMReceived.setDescription('This object specifies Valid LBM Received. ')
wwpLeosCfmExtMEPStatsInvalidLBMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidLBMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidLBMReceived.setDescription('This object specifies total invalid LBM Received. ')
wwpLeosCfmExtMEPStatsUnexpectedLTRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsUnexpectedLTRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsUnexpectedLTRReceived.setDescription('This object specifies total unexpected LTR Received. ')
wwpLeosCfmExtMEPStatsInvalidDMMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidDMMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidDMMReceived.setDescription('This object specifies total invalid DMM Received. ')
wwpLeosCfmExtMEPStatsInvalidDMRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 45), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidDMRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidDMRReceived.setDescription('This object specifies total invalid DMR Received. ')
wwpLeosCfmExtMEPStatsUnexpectedDMRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsUnexpectedDMRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsUnexpectedDMRReceived.setDescription('This object specifies total unexpected DMR Received. ')
wwpLeosCfmExtMEPStatsInvalidLMMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidLMMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidLMMReceived.setDescription('This object specifies total invalid LMM Received. ')
wwpLeosCfmExtMEPStatsInvalidLMRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidLMRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidLMRReceived.setDescription('This object specifies total invalid LMR Received. ')
wwpLeosCfmExtMEPStatsInvalidBlockedOppositeMep = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 2, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidBlockedOppositeMep.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPStatsInvalidBlockedOppositeMep.setDescription('This object specifies total invalid frames blocked by opposite MEP.')
wwpLeosCfmExtMEPLastStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3), )
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsTable.setDescription('The (conceptual) table listing the configuration parameters for the CFM MEP table.')
wwpLeosCfmExtMEPLastStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtMEPId"))
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmMEPTable.')
wwpLeosCfmExtMEPLastStatsPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsPriority.setDescription('This object specifies last LBM Priority')
wwpLeosCfmExtMEPLastStatsLBMCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLBMCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLBMCount.setDescription('This object specifies last LBM Count')
wwpLeosCfmExtMEPLastStatsLBMSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLBMSent.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLBMSent.setDescription('This object specifies last number LBM sent')
wwpLeosCfmExtMEPLastStatsLBMToSend = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLBMToSend.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLBMToSend.setDescription('This object specifies last LBM to send.')
wwpLeosCfmExtMEPLastStatsInOrderLBRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsInOrderLBRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsInOrderLBRReceived.setDescription('This object specifies last In oder LBR received')
wwpLeosCfmExtMEPLastStatsOutOfOrderLBRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsOutOfOrderLBRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsOutOfOrderLBRReceived.setDescription('This object specifies last out of order LBR received')
wwpLeosCfmExtMEPLastStatsDMMPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMPriority.setDescription('This object specifies Last DMM Priority')
wwpLeosCfmExtMEPLastStatsDMMTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMTxmt.setDescription('This object specifies number of last DMM sent')
wwpLeosCfmExtMEPLastStatsDMMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMReceived.setDescription('This object specifies last DMM Received')
wwpLeosCfmExtMEPLastStatsDMMDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMDelay.setDescription('This object specifies Last DMM Delay.')
wwpLeosCfmExtMEPLastStatsDMMJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMJitter.setDescription('This object specifies last DMM Jitter.')
wwpLeosCfmExtMEPLastStatsLMMPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLMMPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLMMPriority.setDescription('This object specifies last LMM priority')
wwpLeosCfmExtMEPLastStatsLMMTxtm = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLMMTxtm.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLMMTxtm.setDescription('This object specifies last LMM sent.')
wwpLeosCfmExtMEPLastStatsLMMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLMMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLMMReceived.setDescription('This object specifies number of last LMM received.')
wwpLeosCfmExtMEPLastStatsFrameLossNear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsFrameLossNear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsFrameLossNear.setDescription('This object specifies last near Frame Losses')
wwpLeosCfmExtMEPLastStatsFrameLossFar = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsFrameLossFar.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsFrameLossFar.setDescription('This object specifies last far Frames Loss')
wwpLeosCfmExtMEPLastStatsLTMPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLTMPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLTMPriority.setDescription('This object specifies last LTM Priority')
wwpLeosCfmExtMEPLastStatsLTMSequenceNo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLTMSequenceNo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLTMSequenceNo.setDescription('This object specifies last LTM Sequence number.')
wwpLeosCfmExtMEPLastStatsLTMInitialTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLTMInitialTTL.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsLTMInitialTTL.setDescription('This object specifies last initial TTL LTM.')
wwpLeosCfmExtMEPLastStatsFrameLossBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsFrameLossBadSequence.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsFrameLossBadSequence.setDescription('This object specifes the number of frames with bad sequence numbers measured during the last LMM performance test on the given service and Mep.')
wwpLeosCfmExtMEPLastStatsDMMMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMMinDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMMinDelay.setDescription('This object specifies Last DMM Minimum Delay.')
wwpLeosCfmExtMEPLastStatsDMMMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMMaxDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMMaxDelay.setDescription('This object specifies Last DMM Maximum Delay.')
wwpLeosCfmExtMEPLastStatsDMMMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMMinJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMMinJitter.setDescription('This object specifies last DMM Minimum Jitter.')
wwpLeosCfmExtMEPLastStatsDMMMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 3, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMMaxJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPLastStatsDMMMaxJitter.setDescription('This object specifies last DMM Maximum Jitter.')
wwpLeosCfmExtMEPClearStatistics = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPClearStatistics.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPClearStatistics.setDescription('Setting this object to clear(1) will clear statistics for all Meps across all services')
wwpLeosCfmExtMEPDelayHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5), )
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryTable.setDescription('The (conceptual) table listing the Y.1731 Delay History table for the CFM MEP.')
wwpLeosCfmExtMEPDelayHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtMEPId"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtMEPDelayHistoryIndex"))
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmMEPDelayHistoryTable.')
wwpLeosCfmExtMEPDelayHistoryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryIndex.setDescription('This is the history entry index into the table.')
wwpLeosCfmExtMEPDelayHistoryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("running", 1), ("done", 2), ("canceled", 3), ("timeout", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryStatus.setDescription('The status of the test sent on the given service and MEP.')
wwpLeosCfmExtMEPDelayHistoryInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryInterval.setDescription('The transmit rate of the Y.1731 DMM Frames sent on the given service and MEP.')
wwpLeosCfmExtMEPDelayHistoryPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryPriority.setDescription('The priority of the Y.1731 DMM Frames sent on the given service and MEP.')
wwpLeosCfmExtMEPDelayHistoryMEPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryMEPId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryMEPId.setDescription('The remote MEP id the test was ran against.')
wwpLeosCfmExtMEPDelayHistoryNumDMMSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryNumDMMSent.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryNumDMMSent.setDescription('The number of DMM frames sent on the given service and MEP.')
wwpLeosCfmExtMEPDelayHistoryNumDMRReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryNumDMRReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryNumDMRReceived.setDescription('The number of DMR frames received on the given service and MEP.')
wwpLeosCfmExtMEPDelayHistoryMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 8), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryMinDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryMinDelay.setDescription('The minimum delay(us) seen on DMR frames received on the given service and MEP.')
wwpLeosCfmExtMEPDelayHistoryAveDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryAveDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryAveDelay.setDescription('The average delay(us) seen on DMR frames received on the given service and MEP.')
wwpLeosCfmExtMEPDelayHistoryMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryMaxDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryMaxDelay.setDescription('The maximum delay(us) seen on DMR frames received on the given service and MEP.')
wwpLeosCfmExtMEPDelayHistoryMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryMinJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryMinJitter.setDescription('The minimum jitter(us) seen on DMR frames received on the given service and MEP.')
wwpLeosCfmExtMEPDelayHistoryAveJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryAveJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryAveJitter.setDescription('The average jitter(us) seen on DMR frames received on the given service and MEP.')
wwpLeosCfmExtMEPDelayHistoryMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryMaxJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryMaxJitter.setDescription('The maximum jitter(us) seen on DMR frames received on the given service and MEP.')
wwpLeosCfmExtMEPDelayHistoryStartTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryStartTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryStartTime.setDescription('The time the test began on the given service and MEP. The timestamp is the number of seconds since 12AM Jan 1st, 1970')
wwpLeosCfmExtMEPDelayHistoryStopTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryStopTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryStopTime.setDescription('The time the test terminated on the given service and MEP. The timestamp is the number of seconds since 12AM Jan 1st, 1970')
wwpLeosCfmExtMEPDelayHistoryClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 7, 5, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMEPDelayHistoryClear.setDescription("Setting this object to clear will clear MEP delay history for the given service and MepId. This object can't be set to none")
wwpLeosCfmExtLinkTraceMsgTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 1), )
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgTable.setDescription('The (conceptual) table listing the configuration parameters for the LinkTraceMsg.')
wwpLeosCfmExtLinkTraceMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtLinkTraceMsgLocalMepID"))
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmLinkTraceMsgTable.')
wwpLeosCfmExtLinkTraceMsgLocalMepID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgLocalMepID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgLocalMepID.setDescription('This represent local mepid')
wwpLeosCfmExtLinkTraceMsgTargetMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgTargetMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgTargetMEPID.setDescription('This object is used to specify the target MEPID. This object should only be set if wwpLeosCfmLinkTraceMsgTargetMacAddr is not specified else error will be returned.')
wwpLeosCfmExtLinkTraceMsgTargetMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgTargetMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgTargetMacAddr.setDescription('This object is used to specify the target MacAddress to be used when sending link LinkMsg. This object should only be set if wwpLeosCfmLinkTraceMsgTargetMEPID is not specified else error will be returned.')
wwpLeosCfmExtLinkTraceMsgTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgTTL.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgTTL.setDescription('This object is used to specify the TTL to be used when sending link LinkTraceMsg.')
wwpLeosCfmExtLinkTraceMsgSequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgSequenceNumber.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgSequenceNumber.setDescription('This object is used to specify the sequence number in the linkTraceMsg.')
wwpLeosCfmExtLinkTraceMsgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgPriority.setDescription('This object is used to specify the priority to be used when sending LinkTraceMsg.')
wwpLeosCfmExtLinkTraceMsgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 1, 1, 7), SendState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgAction.setDescription('This object represents the action for the message (send, clear or cancel) If set to send(1) and if wwpLeosCfmExtLinkTraceMsgTargetMacAddr is specified then LinkTraceMsg is sent to remote Mac. If set to send(1) and if wwpLeosCfmExtLinkTraceMsgTargetMEPID is specified then LinktraceMsg is sent to remote mepid. If set to clear(2) will clear mep statistics for given service and mepid. If set to cancel(3) will return commit_failed_error. ')
wwpLeosCfmExtLinkTraceMsgReplyTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2), )
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyTable.setDescription('The (conceptual) table listing the display parameters for the LinkTrace Msg Reply.')
wwpLeosCfmExtLinkTraceMsgReplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtLinkTraceMsgLocalMepID"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtLinkTraceMsgReplyTTL"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtLinkTraceMsgReplyTTLIndex"))
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmExtLinkTraceMsgReplyTable.')
wwpLeosCfmExtLinkTraceMsgReplyTTL = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyTTL.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyTTL.setDescription('This object is used to specify the TTL of the received LinkTrace msg reply.')
wwpLeosCfmExtLinkTraceMsgReplyTTLIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 24576))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyTTLIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyTTLIndex.setDescription('This object provides an additional index when multiple LinkTrace messages are received with the same TTL.')
wwpLeosCfmExtLinkTraceMsgReplySequenceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplySequenceNumber.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplySequenceNumber.setDescription('This object is used to specify the sequence number of the received LinkTrace msg reply.')
wwpLeosCfmExtLinkTraceMsgReplyMPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2, 1, 4), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyMPMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyMPMacAddr.setDescription('This object is used to specify the mac address of the MP of received LinkTrace msg reply.')
wwpLeosCfmExtLinkTraceMsgReplyMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyMEPID.setDescription('This object is used to specify the MEP ID of the received LinkTrace msg reply.')
wwpLeosCfmExtLinkTraceMsgReplyTargetMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyTargetMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyTargetMacAddr.setDescription('This object is used to specify the Target Mac address of the received LinkTrace msg reply.')
wwpLeosCfmExtLinkTraceMsgReplyRelayAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("invalid", 1), ("unknown", 2), ("fdb", 3), ("mpdb", 4), ("noLearn", 5), ("hit", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyRelayAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyRelayAction.setDescription('This object is used to specify the message reply relay action.')
wwpLeosCfmExtLinkTraceMsgReplyIngressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyIngressPort.setStatus('obsolete')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyIngressPort.setDescription('This object is used to specify the message reply ingress port.')
wwpLeosCfmExtLinkTraceMsgReplyIngressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ok", 1), ("blocked", 2), ("vid", 3), ("down", 4), ("none", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyIngressAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyIngressAction.setDescription('This object is used to specify the message reply ingress action.')
wwpLeosCfmExtLinkTraceMsgReplyEgressPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyEgressPort.setStatus('obsolete')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyEgressPort.setDescription('This object is used to specify the message reply egress port.')
wwpLeosCfmExtLinkTraceMsgReplyEgressAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("none", 1), ("ttl", 2), ("down", 3), ("blocked", 4), ("vid", 5), ("ok", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyEgressAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyEgressAction.setDescription('This object is used to specify the message reply egress action.')
wwpLeosCfmExtLinkTraceMsgReplyIngressPortStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyIngressPortStr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyIngressPortStr.setDescription('This MIB object is used to specify the message reply ingress port.')
wwpLeosCfmExtLinkTraceMsgReplyEgressPortStr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 8, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyEgressPortStr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtLinkTraceMsgReplyEgressPortStr.setDescription('This MIB object is used to specify the message reply egress port.')
wwpLeosCfmExtDelayMsgTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12, 1), )
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgTable.setDescription('The (conceptual) table listing the configuration parameters for the DelayMeasurementMsg.')
wwpLeosCfmExtDelayMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtDelayMsgLocalMEPId"))
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmDelayMsgTable. To send, clear or cancel the message, the corresponding MsgAction needs to be specified. Individual objects in this table cannot be set. To send or cancel a message, the TargetMepID or the TargtetMacAddr objects need to be specified. Clear msgAction clears the counters for the message')
wwpLeosCfmExtDelayMsgLocalMEPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgLocalMEPId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgLocalMEPId.setDescription('This object is used to specify the local MEPId.')
wwpLeosCfmExtDelayMsgTargetMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgTargetMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgTargetMEPID.setDescription('This object is used to specify the MEPID. This object should only be set if wwpLeosCfmExtDelayMsgTargetMacAddr is not specified else error will be returned.')
wwpLeosCfmExtDelayMsgTargetMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgTargetMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgTargetMacAddr.setDescription('This object is used to specify the MacAddress to be used when sending link LoopbackMsg. This object should only be set if wwpLeosCfmExtDelayMsgTargetMEPID is not specified else error will be returned.')
wwpLeosCfmExtDelayMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2, 600), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgCount.setDescription('This object is used to specify the DelayMeasurementMsg count to be used when sending link DelayMeasurementMsg. Counts between 2 and 600 are valid. The system default count will be used if a value of 0 is entered.')
wwpLeosCfmExtDelayMsgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgPriority.setDescription('This object is used to specify the DelayMeasurementMsg priority to be used when sending link DelayMeasurementMsg.')
wwpLeosCfmExtDelayMsgRepeat = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgRepeat.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgRepeat.setDescription('Used to make the Delay Measurement test a repeating test.')
wwpLeosCfmExtDelayMsgRepeatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgRepeatCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgRepeatCount.setDescription('The repeat time in minutes for the Delay Measurement test. If zero is specified, the test runs continuously.')
wwpLeosCfmExtDelayMsgDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgDelayThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgDelayThreshold.setDescription('Represents the fault Threshold for the average delay, specified in microseconds. A value of -1 disables the generatation of faults, 0 or greater will be compared to the average delay result of the test and a fault will be generated if the threshold is exceeded.')
wwpLeosCfmExtDelayMsgJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgJitterThreshold.setDescription('Represents the fault threshold value for the average Jitter, specified in microseconds. A value of -1 disables the generation of faults, 0 or greater will be compared to the average jitter result of the test and a fault will be generated if the threshold is exceeded.')
wwpLeosCfmExtDelayMsgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12, 1, 1, 43), SendState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgAction.setDescription('This object represents the action for the message (send, clear or cancel) If set to send(1) and if wwpLeosCfmExtDelayMsgTargetMacAddr is specified then loopbackMsg is sent to remote Mac. If set to send(1) and if wwpLeosCfmExtDelayMsgTargetMEPID is specified then loopbackMsg is sent to remote mepid. If set to clear(2) will clear mep statistics for given service and mepid. If set to cancel(3) and if wwpLeosCfmExtDelayMsgTargetMacAddr is specified then it will cancel sending Delay messages to remoteMac. If set to cancel(3) and if wwpLeosCfmExtDelayMsgTargetMEPID is specified then it will cancel sending Delay messages to remoteMEPID.')
wwpLeosCfmExtDelayMsgMaxDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12, 1, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgMaxDelayThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgMaxDelayThreshold.setDescription('Represents the Threshold for the maximum Delay, specified in microseconds. A value of -1 disables the generatation of faults, 0 or greater will be compared to the maximum delay result of the test and a fault will be generated if the threshold is exceeded.')
wwpLeosCfmExtDelayMsgMaxJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 12, 1, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgMaxJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayMsgMaxJitterThreshold.setDescription('Represents the threshold value for the maximum Jitter, specified in microseconds. A value of -1 disables the generatation of faults, 0 or greater will be compared to the maximum jitter result of the test and a fault will be generated if the threshold is exceeded.')
wwpLeosCfmExtFrameLossMsgTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 13, 1), )
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgTable.setDescription('The (conceptual) table listing the configuration parameters for the FrameLossMeasurementMsg.')
wwpLeosCfmExtFrameLossMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 13, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtFrameLossMsgLocalMEPId"))
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmFrameLossMsgTable. To send, clear or cancel the message, the corresponding MsgAction needs to be specified. Individual objects in this table cannot be set. RowStatus is a read-only field. To send or cancel a message, the TargetMepID or the TargtetMacAddr objects need to be specified. Clear msgAction clears the counters for the message')
wwpLeosCfmExtFrameLossMsgLocalMEPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgLocalMEPId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgLocalMEPId.setDescription('This object is used to specify the Local MEPID at teh source.')
wwpLeosCfmExtFrameLossMsgTargetMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 13, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgTargetMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgTargetMEPID.setDescription('This object is used to specify the MEPID. This object should only be set if wwpLeosCfmExtFrameLossMsgTargetMacAddr is not specified else error will be returned.')
wwpLeosCfmExtFrameLossMsgTargetMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 13, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgTargetMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgTargetMacAddr.setDescription('This object is used to specify the MacAddress to be used when sending link LoopbackMsg. This object should only be set if wwpLeosCfmExtFrameLossMsgTargetMEPID is not specified else error will be returned.')
wwpLeosCfmExtFrameLossMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgCount.setDescription('This object is used to specify the FrameLossMeasurementMsg count to be used when sending link FrameLossMeasurementMsg.')
wwpLeosCfmExtFrameLossMsgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgPriority.setDescription('This object is used to specify the FrameLossMeasurementMsg priority to be used when sending link FrameLossMeasurementMsg.')
wwpLeosCfmExtFrameLossMsgRepeat = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgRepeat.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgRepeat.setDescription('Used to make the Frame Loss Measurement test a repeating test.')
wwpLeosCfmExtFrameLossMsgRepeatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgRepeatCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgRepeatCount.setDescription('The repeat time in minutes for the Frame Loss Measurement test. If zero is specified, the test runs continuously.')
wwpLeosCfmExtFrameLossMsgFlnThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 13, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgFlnThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgFlnThreshold.setDescription('The fault threshold for the Frame Loss Measurement test. A value of -1 disables the generate of faults, 0 or greater will be compared to the frame loss near result of the test and a fault will be generated if the threshold is exceeded.')
wwpLeosCfmExtFrameLossMsgFlfThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 13, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgFlfThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgFlfThreshold.setDescription('The fault threshold for the Frame Loss Measurement test. A value of -1 disables the generate of faults, 0 or greater will be compared to the frame loss far result of the test and a fault will be generated if the threshold is exceeded.')
wwpLeosCfmExtFrameLossMsgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 13, 1, 1, 12), SendState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgAction.setDescription('This object represents the action for the message (send, clear or cancel) This object represents the action for the message (send, clear or cancel) If set to send(1) and if wwpLeosCfmExtFrameLossMacAddr is specified then FrameLoss is sent to remote Mac. If set to send(1) and if wwpLeosCfmExtFrameLossMsgTargetMEPID is specified then FrameLossMsg is sent to remote mepid. If set to clear(2) will clear mep statistics for given service and mepid. If set to cancel(3) and if wwpLeosCfmExtFrameLossMsgTargetMacAddr is specified then it will cancel sending FrameLoss Messages to remoteMac. If set to cancel(3) and if wwpLeosCfmExtFrameLossMsgTargetMEPID is specified then it will cancel sending FrameLoss messages to remoteMEPID.')
wwpLeosCfmExtFrameLossMsgSeqThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 13, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgSeqThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossMsgSeqThreshold.setDescription('The sequence threshold for the Frame Loss Measurement test. A value of -1 disables the generate of faults, 0 or greater will be compared to the frame loss far result of the test and a fault will be generated if the threshold is exceeded.')
wwpLeosCfmExtInterfaceStackTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1), )
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackTable.setDescription('The (conceptual) table listing the display parameters for the CFM port stack table.')
wwpLeosCfmExtInterfaceStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtInterfaceStackServiceInstanceType"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtInterfaceStackServiceInstanceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtInterfaceStackInterfaceType"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtInterfaceStackInterfaceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtInterfaceStackStackType"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtInterfaceStackLevel"))
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackEntry.setDescription('An entry (conceptual row) in the wwpLeosTceCfmPortStackTable.')
wwpLeosCfmExtInterfaceStackServiceInstanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethVs", 1), ("vlan", 2), ("pbtTunnel", 3))))
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackServiceInstanceType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackServiceInstanceType.setDescription('This object is used to specify the CFM port service type.')
wwpLeosCfmExtInterfaceStackServiceInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackServiceInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackServiceInstanceIndex.setDescription('A unique identifier for CFM domain entry.')
wwpLeosCfmExtInterfaceStackInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("logicalPort", 1), ("pbtEncap", 2), ("pbtDecap", 3), ("none", 99))))
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackInterfaceType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackInterfaceType.setDescription('This object is used to specify the CFM interface type.')
wwpLeosCfmExtInterfaceStackInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackInterfaceIndex.setDescription('This object is used to specify the CFM sub port index.')
wwpLeosCfmExtInterfaceStackLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackLevel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackLevel.setDescription('This object is used to specify the CFM interface level.')
wwpLeosCfmExtInterfaceStackStackType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mepUp", 1), ("mepDown", 2), ("mipUp", 3), ("mipDown", 4))))
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackStackType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackStackType.setDescription('This object is used to specify the CFM interface type.')
wwpLeosCfmExtInterfaceStackInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackInterfaceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackInterfaceName.setDescription('This object is used to specify the CFM interface name.')
wwpLeosCfmExtInterfaceStackServiceInstanceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackServiceInstanceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackServiceInstanceName.setDescription('This object is used to specify the CFM interface name.')
wwpLeosCfmExtInterfaceStackPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackPortName.setDescription('This object is used to specify the CFM interface port name.')
wwpLeosCfmExtInterfaceStackOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackOperState.setDescription('This object is used to specify the CFM interface oper state.')
wwpLeosCfmExtInterfaceStackVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackVid.setDescription('This object is used to specify the CFM interface vid.')
wwpLeosCfmExtInterfaceStackPgid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackPgid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackPgid.setDescription('This object is used to specify the CFM interface pgid.')
wwpLeosCfmExtInterfaceStackMEPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackMEPId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackMEPId.setDescription('This object is used to specify the CFM interface mepid.')
wwpLeosCfmExtInterfaceStackMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 14, 1, 1, 14), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackMacAddress.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceStackMacAddress.setDescription('This object is used to specify the CFM interface macaddress.')
wwpLeosCfmExtMipTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 15, 1), )
if mibBuilder.loadTexts: wwpLeosCfmExtMipTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMipTable.setDescription('The (conceptual) table listing the configuration parameters for the CFM Ext MIP Table. This table is not applicable if wwpLeosCfmServiceType is set to pbtTunnel. Any Get/Set/Walk will return error.')
wwpLeosCfmExtMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 15, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtMipVid"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtMipPort"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtMipLevel"))
if mibBuilder.loadTexts: wwpLeosCfmExtMipEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMipEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmExtMipTable.')
wwpLeosCfmExtMipVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 15, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576)))
if mibBuilder.loadTexts: wwpLeosCfmExtMipVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMipVid.setDescription('This object is used as index in the table and is used to specify the VLAN service type for which intermediate maintenance points can be created.')
wwpLeosCfmExtMipPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 15, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosCfmExtMipPort.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMipPort.setDescription('This object is used as index in the table and is used to specify the port.')
wwpLeosCfmExtMipLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 15, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: wwpLeosCfmExtMipLevel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMipLevel.setDescription('The level attribute.')
wwpLeosCfmExtMipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 15, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtMipStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtMipStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set it to 'destroy'.")
wwpLeosCfmExtInterfaceMipTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 16, 1), )
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipTable.setDescription('The (conceptual) table listing the configuration parameters for the CFM Ext MIP SI Table.')
wwpLeosCfmExtInterfaceMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 16, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtInterfaceMipServiceInstanceType"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtInterfaceMipServiceInstanceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtInterfaceMipInterfaceType"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtInterfaceMipInterfaceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtInterfaceMipInterfaceSubIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtInterfaceMipLevel"))
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmExtInterfaceMipTable.')
wwpLeosCfmExtInterfaceMipServiceInstanceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 16, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ethVs", 1), ("vlan", 2), ("pbtTunnel", 3))))
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipServiceInstanceType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipServiceInstanceType.setDescription('This object is used to specify the service instance type. Interpretation of wwpLeosCfmExtInterfaceMipServiceInstanceIndex depends on the value of this MIB object.')
wwpLeosCfmExtInterfaceMipServiceInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 16, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipServiceInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipServiceInstanceIndex.setDescription('This object is used to specify the service instance index. Interpretation of this object depends on the value of wwpLeosCfmExtInterfaceMipServiceInstanceType.')
wwpLeosCfmExtInterfaceMipInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 16, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("portVlan", 1), ("pbtEncap", 2), ("pbtDecap", 3))))
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipInterfaceType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipInterfaceType.setDescription('This object is used to specify the CFM interface type.')
wwpLeosCfmExtInterfaceMipInterfaceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 16, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipInterfaceIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipInterfaceIndex.setDescription('This object is used to specify an interface index. When the value of object wwpLeosCfmExtInterfaceMipInterfaceType is portVlan this obect refers to a port.')
wwpLeosCfmExtInterfaceMipInterfaceSubIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 16, 1, 1, 5), Unsigned32())
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipInterfaceSubIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipInterfaceSubIndex.setDescription('This object is used to specify a sub interface index. When the value of object wwpLeosCfmExtInterfaceMipInterfaceType is portVlan this obect refers to a vlan.')
wwpLeosCfmExtInterfaceMipLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 16, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7)))
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipLevel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipLevel.setDescription('The level attribute.')
wwpLeosCfmExtInterfaceMipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 16, 1, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtInterfaceMipStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set it to 'destroy'.")
wwpLeosCfmExtOamPortTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 17, 1), )
if mibBuilder.loadTexts: wwpLeosCfmExtOamPortTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtOamPortTable.setDescription('The (conceptual) table listing if a port is OAM capable. ')
wwpLeosCfmExtOamPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 17, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmExtOamPortIndex"))
if mibBuilder.loadTexts: wwpLeosCfmExtOamPortEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtOamPortEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmExtOamPortTable.')
wwpLeosCfmExtOamPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 17, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3072)))
if mibBuilder.loadTexts: wwpLeosCfmExtOamPortIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtOamPortIndex.setDescription('Specifies the port index.')
wwpLeosCfmExtOamPortSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 21, 17, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCfmExtOamPortSupported.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtOamPortSupported.setDescription('Specifies if the port is OAM capable.')
wwpLeosTceCfmMIBObj = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20))
wwpLeosTceCfmMIP = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 1))
wwpLeosTceCfmLoopback = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3))
wwpLeosTceCfmStack = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5))
wwpLeosTceCfmMEP = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7))
wwpLeosTceCfmDelay = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12))
wwpLeosTceCfmFrameLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13))
wwpLeosTceCfmMipCCMDb = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 14))
wwpLeosTceCfmMipTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 1, 1), )
if mibBuilder.loadTexts: wwpLeosTceCfmMipTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipTable.setDescription('The (conceptual) table listing the config parameters for the CFM MIP Table. This table is not applicable if wwpLeosTceCfmServiceType is set to pbtTunnel. Any Get/Set/Walk will return error. Not applicable to 6.x')
wwpLeosTceCfmMipEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 1, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosTceCfmMipLiType"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosTceCfmMipLiIndex"))
if mibBuilder.loadTexts: wwpLeosTceCfmMipEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipEntry.setDescription('An entry (conceptual row) in the wwpLeosTceCfmMipTable.')
wwpLeosTceCfmMipLiType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 99))).clone(namedValues=NamedValues(("subPort", 1), ("pbtService", 2), ("mplsStaticPeMeshVC", 3), ("mplsDynamicPeMeshVC", 4), ("mplsStaticPeSpokeVC", 5), ("mplsDynamicPeSpokeVC", 6), ("mplsStaticMtuSpokeVC", 7), ("mplsDynamicMtuSpokeVC", 8), ("none", 99))))
if mibBuilder.loadTexts: wwpLeosTceCfmMipLiType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipLiType.setDescription('This object specifies an unique index into the table.')
wwpLeosTceCfmMipLiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosTceCfmMipLiIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipLiIndex.setDescription('This object specifies an unique index into the table.')
wwpLeosTceCfmMipPgid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 1, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipPgid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipPgid.setDescription('This object is used to specify the port group id.')
wwpLeosTceCfmMipBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipBayIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipBayIndex.setDescription('This object is used to specify the chassis bay.')
wwpLeosTceCfmMipShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipShelfIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipShelfIndex.setDescription('This object is used to specify the chassis shelf.')
wwpLeosTceCfmMipModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipModuleIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipModuleIndex.setDescription('This object is used to specify the chassis module.')
wwpLeosTceCfmMipMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 1, 1, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipMacAddr.setDescription('This object is used to specify the Mac Address.')
wwpLeosTceCfmMipLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmMipLevel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipLevel.setDescription('This object is used to specify the level attribute.')
wwpLeosTceCfmMipStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 1, 1, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmMipStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set it to 'destroy'.")
wwpLeosTceCfmMipLiName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipLiName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipLiName.setDescription('Logical interface name associated with the Mip.')
wwpLeosTceCfmMipCCMDbTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 14, 1), )
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbTable.setDescription('The (conceptual) table listing the display parameters for the MIP CCM Db table. Not applicable to 6.x')
wwpLeosTceCfmMipCCMDbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 14, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosTceCfmMipCCMDbIndex"))
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmMipCCMDbTable.')
wwpLeosTceCfmMipCCMDbIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 14, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbIndex.setDescription('Mip CCM database index.')
wwpLeosTceCfmMipCCMDbMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 14, 1, 1, 2), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbMacAddr.setDescription('MAC Address')
wwpLeosTceCfmMipCCMDbServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 14, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbServiceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbServiceName.setDescription('Service Name')
wwpLeosTceCfmMipCCMDbSubPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 14, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbSubPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbSubPortName.setDescription('SubPort Name')
wwpLeosTceCfmMipCCMdbNumCCMRx = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 14, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMdbNumCCMRx.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMdbNumCCMRx.setDescription('Total Received CCMs')
wwpLeosTceCfmMipCCMDbCCMRxTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 14, 1, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbCCMRxTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbCCMRxTime.setDescription('CCM Rx Time in ms')
wwpLeosTceCfmMipCCMDbLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 14, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbLevel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbLevel.setDescription('Level')
wwpLeosTceCfmMipCCMDbMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 14, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipCCMDbMEPID.setDescription('Mep Id')
wwpLeosTceCfmMipRDI = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 14, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipRDI.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipRDI.setDescription('RDI')
wwpLeosTceCfmMipLastPortStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 14, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 99))).clone(namedValues=NamedValues(("blocked", 1), ("up", 2), ("none", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMipLastPortStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMipLastPortStatus.setDescription('Last Port Status')
wwpLeosTceCfmLoopbackMsgTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1), )
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTable.setDescription('The (conceptual) table listing the config parameters for the LoopbackMsg. The following attributes are required to create a LoopbackMsg: -- wwpLeosCfmServiceIndex -- wwpLeosTceCfmLoopbackMsgSubPortIndex -- wwpLeosTceCfmLoopbackMsgTargetMEPID or -- wwpLeosTceCfmLoopbackMsgTargetMacAddr -- wwpLeosTceCfmLoopbackMsgCount -- wwpLeosTceCfmLoopbackMsgData -- wwpLeosTceCfmLoopbackMsgPriority -- wwpLeosTceCfmLoopbackMsgRowStatus Not applicable to 6.x')
wwpLeosTceCfmLoopbackMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosTceCfmLoopbackMsgLocalMEPID"))
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgEntry.setDescription('An entry (conceptual row) in the wwpLeosTceCfmLoopbackMsgTable.')
wwpLeosTceCfmLoopbackMsgLocalMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgLocalMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgLocalMEPID.setDescription('This object is used to specify the port.')
wwpLeosTceCfmLoopbackMsgTargetMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTargetMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTargetMEPID.setDescription('This object is used to specify the MEPID. This object should only be set if wwpLeosTceCfmLoopbackMsgTargetMacAddr is not specified else error will be returned.')
wwpLeosTceCfmLoopbackMsgTargetMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTargetMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTargetMacAddr.setDescription('This object is used to specify the MacAddress to be used when sending link LoopbackMsg. This object should only be set if wwpLeosTceCfmLoopbackMsgTargetMEPID is not specified else error will be returned.')
wwpLeosTceCfmLoopbackMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgCount.setDescription('This object is used to specify the LoopbackMsg count to be used when sending link LoopbackMsg. ')
wwpLeosTceCfmLoopbackMsgData = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgData.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgData.setDescription('This object is used to specify the LoopbackMsg data to be used when sending link LoopbackMsg. ')
wwpLeosTceCfmLoopbackMsgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgPriority.setDescription('This object is used to specify the LoopbackMsg priority to be used when sending link LoopbackMsg. ')
wwpLeosTceCfmLoopbackMsgServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgServiceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgServiceName.setDescription('This object is used to specify the Service used when sending link LoopbackMsg.')
wwpLeosTceCfmLoopbackMsgSubPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgSubPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgSubPortName.setDescription('This object is used to specify the sub-port used when sending link LoopbackMsg.')
wwpLeosTceCfmLoopbackMsgNextLbmTransId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 9), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgNextLbmTransId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgNextLbmTransId.setDescription('This object is used to specify next LoopbackMsg transaction id.')
wwpLeosTceCfmLoopbackMsgTotalTxLbm = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTotalTxLbm.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTotalTxLbm.setDescription('This object is used to specify total LoopbackMsg sent.')
wwpLeosTceCfmLoopbackMsgTotalRxLbrIo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTotalRxLbrIo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTotalRxLbrIo.setDescription('This object is used to specify total in-order LoopbackMsg received.')
wwpLeosTceCfmLoopbackMsgTotalRxLbrOoo = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTotalRxLbrOoo.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTotalRxLbrOoo.setDescription('This object is used to specify total out of order LoopbackMsg received.')
wwpLeosTceCfmLoopbackMsgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To send a LoopbackMsg, a manager must set this object to 'createAndGo'. There is no concept of delete a LoopbackMsg in this table.")
wwpLeosTceCfmLoopbackMsgTotalRxLbrContentMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTotalRxLbrContentMismatch.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTotalRxLbrContentMismatch.setDescription('This object is used to specify total content mismatch LoopbackMsg received.')
wwpLeosTceCfmLoopbackMsgTotalRxLbrUnexpected = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 3, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTotalRxLbrUnexpected.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmLoopbackMsgTotalRxLbrUnexpected.setDescription('This object is used to specify total unexpected LoopbackMsg received.')
wwpLeosTceCfmPortStackTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1), )
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackTable.setDescription('The (conceptual) table listing the display parameters for the CFM port stack table. Not applicable to 6.x')
wwpLeosTceCfmPortStackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosTceCfmPortStackServiceType"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosTceCfmPortStackServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosTceCfmPortStackSubPortType"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosTceCfmPortStackSubPortIndex"))
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackEntry.setDescription('An entry (conceptual row) in the wwpLeosTceCfmPortStackTable.')
wwpLeosTceCfmPortStackServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vs", 1), ("pbt", 2))))
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackServiceType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackServiceType.setDescription('This object is used to specify the CFM sub-port service type.')
wwpLeosTceCfmPortStackServiceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackServiceIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackServiceIndex.setDescription('A unique identifier for CFM domain entry.')
wwpLeosTceCfmPortStackSubPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("vs", 1), ("encapPbt", 2), ("decapPbt", 3))))
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackSubPortType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackSubPortType.setDescription('This object is used to specify the CFM sub-port type.')
wwpLeosTceCfmPortStackSubPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 4), Unsigned32())
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackSubPortIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackSubPortIndex.setDescription('This object is used to specify the CFM sub-port index.')
wwpLeosTceCfmPortStackSubPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackSubPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackSubPortName.setDescription('This object is used to specify the CFM sub-port name.')
wwpLeosTceCfmPortStackOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("unknown", 1), ("invalid", 2), ("enabled", 3), ("disabled", 4), ("notAuthenticated", 5), ("loopbackTx", 6), ("loopbackRx", 7), ("unequipped", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackOperState.setDescription('This object is used to specify the CFM sub-port operational state.')
wwpLeosTceCfmPortStackPgid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackPgid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackPgid.setDescription('This object is used to specify the CFM sub-port group id.')
wwpLeosTceCfmPortStackBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackBayIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackBayIndex.setDescription('This object is used to specify the CFM sub-port agent bay.')
wwpLeosTceCfmPortStackShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackShelfIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackShelfIndex.setDescription('This object is used to specify the CFM sub-port agent shelf.')
wwpLeosTceCfmPortStackModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackModuleIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackModuleIndex.setDescription('This object is used to specify the CFM sub-port agent slot. Index value of 255 is reserved for Lag ports.')
wwpLeosTceCfmPortStackVsPbtName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackVsPbtName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackVsPbtName.setDescription('This object is used to specify the CFM PBT name.')
wwpLeosTceCfmPortStackEgressXformTagValue1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackEgressXformTagValue1.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackEgressXformTagValue1.setDescription('This object is used to specify the egress tag value.')
wwpLeosTceCfmPortStackEgressXformTagPriority1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackEgressXformTagPriority1.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackEgressXformTagPriority1.setDescription('This object is used to specify the egress tag priority.')
wwpLeosTceCfmPortStackEgressXformTagEtype1 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackEgressXformTagEtype1.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackEgressXformTagEtype1.setDescription('This object is used to specify the egress tag etype.')
wwpLeosTceCfmPortStackEgressXformTagValue2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 16), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackEgressXformTagValue2.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackEgressXformTagValue2.setDescription('This object is used to specify the egress tag value.')
wwpLeosTceCfmPortStackEgressXformTagPriority2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackEgressXformTagPriority2.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackEgressXformTagPriority2.setDescription('This object is used to specify the egress tag priority.')
wwpLeosTceCfmPortStackEgressXformTagEtype2 = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackEgressXformTagEtype2.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackEgressXformTagEtype2.setDescription('This object is used to specify the egress tag etype.')
wwpLeosTceCfmPortStackMepCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackMepCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackMepCount.setDescription('This object is used to specify the MEP counts in both directions.')
wwpLeosTceCfmPortStackMipLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 5, 1, 1, 20), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackMipLevel.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmPortStackMipLevel.setDescription('This object is used to specify the port stack MIP level.')
wwpLeosTceCfmMEPTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1), )
if mibBuilder.loadTexts: wwpLeosTceCfmMEPTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPTable.setDescription('The (conceptual) table listing the config parameters for the CFM MEP table. Not applicable to 6.x')
wwpLeosTceCfmMEPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosTceCfmMEPId"))
if mibBuilder.loadTexts: wwpLeosTceCfmMEPEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmMEPTable.')
wwpLeosTceCfmMEPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191)))
if mibBuilder.loadTexts: wwpLeosTceCfmMEPId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPId.setDescription('This is used as the index in the table.This object specifies the mep id for the given service.')
wwpLeosTceCfmMEPAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPAdminState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPAdminState.setDescription('This object is used to specify the admin state of CFM MEP.')
wwpLeosTceCfmMEPOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPOperState.setDescription('This object is used to specify the oper state of CFM MEP.')
wwpLeosTceCfmMEPDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPDirection.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPDirection.setDescription('This object is used to specify the MEP direction of the service. This object can only be set if wwpLeosCfmServiceIndex is of type vlan.')
wwpLeosTceCfmMEPCCMState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPCCMState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPCCMState.setDescription('This object specifies the CCM transmission for the service specified by wwpLeosCfmServiceType.')
wwpLeosTceCfmMEPCCMPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPCCMPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPCCMPriority.setDescription('This object specified the priority of CCM messages transmitted.')
wwpLeosTceCfmMEPLTMPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLTMPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLTMPriority.setDescription('This object specifies the priority received on the given service and port.')
wwpLeosTceCfmMEPMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 8), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPMacAddr.setDescription('This object specifies the mac address received on the given service and port..')
wwpLeosTceCfmMEPNextLbmSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNextLbmSeqNumber.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNextLbmSeqNumber.setDescription('This object specifies the next lbm sequence number received on the given service and port.')
wwpLeosTceCfmMEPRxValidInOrderLoopbackReply = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPRxValidInOrderLoopbackReply.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPRxValidInOrderLoopbackReply.setDescription('This object specifies the total valid in order loopback replies received on the given service and port.')
wwpLeosTceCfmMEPRxValidOutOrderLoopbackReply = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPRxValidOutOrderLoopbackReply.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPRxValidOutOrderLoopbackReply.setDescription('This object specifies the total valid out of order loopback replies received on the given service and port.')
wwpLeosTceCfmMEPNextLTMSeqNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNextLTMSeqNumber.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNextLTMSeqNumber.setDescription('This object specifies the next LTM sequence number received on the given service and port.')
wwpLeosTceCfmMEPNumLoopbackRepliesTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLoopbackRepliesTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLoopbackRepliesTxmt.setDescription('This object specifies the flags total loopback replies transmitted on the given service and port.')
wwpLeosTceCfmMEPNumLTMRecevied = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLTMRecevied.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLTMRecevied.setDescription('This object specifies the total LTM messages received on the given service and port.')
wwpLeosTceCfmMEPNumLTMTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLTMTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLTMTxmt.setDescription('This object specifies the total ltm transmitted on the given service and port.')
wwpLeosTceCfmMEPNumCCMTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumCCMTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumCCMTxmt.setDescription('This object specifies the total CCM messages transmitted on the given service and port.')
wwpLeosTceCfmMEPRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 17), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPRowStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, set this to 'destroy'.")
wwpLeosTceCfmMEPNumDMMSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumDMMSent.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumDMMSent.setDescription('This object specifies the total delay measurement messages transmitted on the given service and port.')
wwpLeosTceCfmMEPDMMDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPDMMDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPDMMDelay.setDescription('This object specifies the average delay in microseconds measured during the last DMM performance test on the given service and port.')
wwpLeosTceCfmMEPDMMJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPDMMJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPDMMJitter.setDescription('This object specifies the average jitter in microseconds measured during the last DMM performance test on the given service and port.')
wwpLeosTceCfmMEPNumLMMSent = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLMMSent.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLMMSent.setDescription('This object specifies the total frame loss measurement messages transmitted on the given service and port.')
wwpLeosTceCfmMEPLMMFrameLossNear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLMMFrameLossNear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLMMFrameLossNear.setDescription('This object specifies the number of lost frames on the near side measured during the last LMM performance test on the given service and port.')
wwpLeosTceCfmMEPLMMFrameLossFar = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLMMFrameLossFar.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLMMFrameLossFar.setDescription('This object specifies the number of lost frames on the far side measured during the last LMM performance test on the given service and port.')
wwpLeosTceCfmMEPLiType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 99))).clone(namedValues=NamedValues(("vs", 1), ("pbtService", 2), ("mplsStaticPeMeshVC", 3), ("mplsDynamicPeMeshVC", 4), ("mplsStaticPeSpokeVC", 5), ("mplsDynamicPeSpokeVC", 6), ("mplsStaticMtuSpokeVC", 7), ("mplsDynamicMtuSpokeVC", 8), ("none", 99)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLiType.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLiType.setDescription('This object specifies Li Type on which the Mep is created.')
wwpLeosTceCfmMEPLiIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 25), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLiIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLiIndex.setDescription('This object specifies LiIndex for creating MEP')
wwpLeosTceCfmMEPServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 50), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPServiceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPServiceName.setDescription('This object is used to specify the service name assigned to this port.')
wwpLeosTceCfmMEPSubPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPSubPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPSubPortName.setDescription('This object represents the sub-port, PbtService or Mpls Vc name assigned to the given service and port.')
wwpLeosTceCfmMEPVsPbtName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPVsPbtName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPVsPbtName.setDescription('This object represents the virtual switch or Pbt tunnel assigned to the given service and port.')
wwpLeosTceCfmMEPLogicalPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLogicalPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLogicalPortName.setDescription('This object represents the logical port name assigned to the given service and port.')
wwpLeosTceCfmMEPSubPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 54), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPSubPortIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPSubPortIndex.setDescription('This object is used to specify the CFM sub-port index.')
wwpLeosTceCfmMEPEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ieee802dot1d", 1), ("pbtCfmEncap", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPEncapsulation.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPEncapsulation.setDescription('This object is used to specify the encapsulation applied to the service and port.')
wwpLeosTceCfmMEPLeadPortBayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 56), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLeadPortBayIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLeadPortBayIndex.setDescription('This object is used as to specify the agent bay that MEP is in.')
wwpLeosTceCfmMEPLeadPortShelfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 57), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLeadPortShelfIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLeadPortShelfIndex.setDescription('This object is used as to specify the agent shelf that MEP is in.')
wwpLeosTceCfmMEPLeadPortModuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 58), Unsigned32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 7), ValueRangeConstraint(255, 255), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLeadPortModuleIndex.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPLeadPortModuleIndex.setDescription('This object is used as to specify the agent module that MEP is in. Index = 255 is reserved for Lag ports and this this object cannot be set to 255 in this table.')
wwpLeosTceCfmMEPPBTBvid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 59), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPPBTBvid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPPBTBvid.setDescription('This object specifies the BVID assigned to the given service and port.')
wwpLeosTceCfmMEPPBTEtype = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 60), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPPBTEtype.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPPBTEtype.setDescription('This object specifies the E-type assigned to the given service and port.')
wwpLeosTceCfmMEPNumLbmTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLbmTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLbmTxmt.setDescription('This object specifies the total loopback messages transmitted on the given service and port.')
wwpLeosTceCfmMEPNumLbmReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLbmReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLbmReceived.setDescription('This object specifies the total loopback messages received on the given service and port.')
wwpLeosTceCfmMEPNumLoopbackRepliesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLoopbackRepliesReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLoopbackRepliesReceived.setDescription('This object specifies the total loopback replies received on the given service and port.')
wwpLeosTceCfmMEPNumLTRepliesTxmt = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLTRepliesTxmt.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLTRepliesTxmt.setDescription('This object specifies the total link trace replies transmitted on the given service and port.')
wwpLeosTceCfmMEPNumLTRepliesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 65), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLTRepliesReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumLTRepliesReceived.setDescription('This object specifies the total link trace replies received on the given service and port.')
wwpLeosTceCfmMEPNumUnexpectedLTRepliesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumUnexpectedLTRepliesReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumUnexpectedLTRepliesReceived.setDescription('This object specifies the total unexpected link trace replies received on the given service and port.')
wwpLeosTceCfmMEPNumCCMReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumCCMReceived.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPNumCCMReceived.setDescription('This object specifies the total CCM messages received on the given service and port.')
wwpLeosTceCfmMEPRxContentMismatchLoopbackReply = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPRxContentMismatchLoopbackReply.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPRxContentMismatchLoopbackReply.setDescription('This object specifies the total content mismatch loopback replies received on the given service and port.')
wwpLeosTceCfmMEPRxUnexpectedLoopbackReply = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 7, 1, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmMEPRxUnexpectedLoopbackReply.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmMEPRxUnexpectedLoopbackReply.setDescription('This object specifies the total unexpected loopback replies received on the given service and port.')
wwpLeosTceCfmDelayMsgTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1), )
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgTable.setDescription('The (conceptual) table listing the config parameters for the DelayMeasurementMsg. Not applicable to 6.x')
wwpLeosTceCfmDelayMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosTceCfmDelayMsgLocalMEPId"))
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmDelayMsgTable. To send, clear or cancel the message, the corresponding MsgAction needs to be specified. Individual objects in this table cannot be set. RowStatus is a read-only field. To send or cancel a message, the TargetMepID or the TargtetMacAddr objects need to be specified. Clear msgAction clears the counters for the message')
wwpLeosTceCfmDelayMsgLocalMEPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgLocalMEPId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgLocalMEPId.setDescription('This object is used to specify the local MEPId.')
wwpLeosTceCfmDelayMsgTargetMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgTargetMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgTargetMEPID.setDescription('This object is used to specify the MEPID. This object should only be set if wwpLeosTceCfmDelayMsgTargetMacAddr is not specified else error will be returned.')
wwpLeosTceCfmDelayMsgTargetMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgTargetMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgTargetMacAddr.setDescription('This object is used to specify the MacAddress to be used when sending link LoopbackMsg. This object should only be set if wwpLeosTceCfmDelayMsgTargetMEPID is not specified else error will be returned.')
wwpLeosTceCfmDelayMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 9000))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgCount.setDescription('This object is used to specify the DelayMeasurementMsg count to be used when sending link DelayMeasurementMsg.')
wwpLeosTceCfmDelayMsgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgPriority.setDescription('This object is used to specify the DelayMeasurementMsg priority to be used when sending link DelayMeasurementMsg.')
wwpLeosTceCfmDelayMsgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 6), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgRowStatus.setDescription('Is a display read-only field only. A row in this table is created by the system when a service and mep is created')
wwpLeosTceCfmDelayMsgRepeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 40), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgRepeatInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgRepeatInterval.setDescription('Represents the Transmission Period for the Cfm Delay.')
wwpLeosTceCfmDelayMsgDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgDelayThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgDelayThreshold.setDescription('Represents the Threshold for the average delay')
wwpLeosTceCfmDelayMsgJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgJitterThreshold.setDescription('Represents the threshold value for the Jitter')
wwpLeosTceCfmDelayMsgServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 43), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgServiceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgServiceName.setDescription('This object is used to specify the service to be used when sending DelayMsg.')
wwpLeosTceCfmDelayMsgSubPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 44), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgSubPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgSubPortName.setDescription('This object represents the sub-port name where the DelayMsg was sent.')
wwpLeosTceCfmDelayMsgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 50), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgDelay.setDescription('This object represents the Average Delay')
wwpLeosTceCfmDelayMsgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 51), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgJitter.setDescription('This object represents the average jitter')
wwpLeosTceCfmDelayMsgTotalTxDmm = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 52), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgTotalTxDmm.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgTotalTxDmm.setDescription('This object represents the total Delaymessages transmitted')
wwpLeosTceCfmDelayMsgTotalRxDmm = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 53), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgTotalRxDmm.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgTotalRxDmm.setDescription('This object represents the total Delaymessages received')
wwpLeosTceCfmDelayMsgTotalTxDmr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 54), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgTotalTxDmr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgTotalTxDmr.setDescription('This object represents the total DMRs transmitted')
wwpLeosTceCfmDelayMsgTotalRxDmr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgTotalRxDmr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgTotalRxDmr.setDescription('This object represents the total DMRs received')
wwpLeosTceCfmDelayMsgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 56), SendState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgAction.setDescription('This object represents the action for the message (send, clear or cancel)')
wwpLeosTceCfmDelayMsgMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 57), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgMaxDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgMaxDelay.setDescription('This object represents the Maximum Delay')
wwpLeosTceCfmDelayMsgMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 58), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgMaxJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgMaxJitter.setDescription('This object represents the Maximum jitter')
wwpLeosTceCfmDelayMsgMaxDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgMaxDelayThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgMaxDelayThreshold.setDescription('Represents the threshold for maximum delay')
wwpLeosTceCfmDelayMsgMaxJitterThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 60), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgMaxJitterThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgMaxJitterThreshold.setDescription('Represents the threshold value for maximum Jitter')
wwpLeosTceCfmDelayMsgMinDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 61), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgMinDelay.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgMinDelay.setDescription('This object represents the Maximum Delay')
wwpLeosTceCfmDelayMsgMinJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 12, 1, 1, 62), Unsigned32()).setUnits('microseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgMinJitter.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmDelayMsgMinJitter.setDescription('This object represents the Maximum jitter')
wwpLeosTceCfmFrameLossMsgTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1), )
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgTable.setDescription('The (conceptual) table listing the config parameters for the FrameLossMeasurementMsg. Not applicable to 6.x')
wwpLeosTceCfmFrameLossMsgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1), ).setIndexNames((0, "WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceIndex"), (0, "WWP-LEOS-CFM-MIB", "wwpLeosTceCfmFrameLossMsgLocalMEPId"))
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgEntry.setDescription('An entry (conceptual row) in the wwpLeosCfmFrameLossMsgTable. To send, clear or cancel the message, the corresponding MsgAction needs to be specified. Individual objects in this table cannot be set. RowStatus is a read-only field. To send or cancel a message, the TargetMepID or the TargtetMacAddr objects need to be specified. Clear msgAction clears the counters for the message')
wwpLeosTceCfmFrameLossMsgLocalMEPId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgLocalMEPId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgLocalMEPId.setDescription('This object is used to specify the Local MEPID at the source.')
wwpLeosTceCfmFrameLossMsgTargetMEPID = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 8191))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgTargetMEPID.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgTargetMEPID.setDescription('This object is used to specify the MEPID. This object should only be set if wwpLeosTceCfmFrameLossMsgTargetMacAddr is not specified else error will be returned.')
wwpLeosTceCfmFrameLossMsgTargetMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 3), MacAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgTargetMacAddr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgTargetMacAddr.setDescription('This object is used to specify the MacAddress to be used when sending link LoopbackMsg. This object should only be set if wwpLeosTceCfmFrameLossMsgTargetMEPID is not specified else error will be returned.')
wwpLeosTceCfmFrameLossMsgCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgCount.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgCount.setDescription('This object is used to specify the FrameLossMeasurementMsg count to be used when sending link FrameLossMeasurementMsg.')
wwpLeosTceCfmFrameLossMsgPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgPriority.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgPriority.setDescription('This object is used to specify the FrameLossMeasurementMsg priority to be used when sending link FrameLossMeasurementMsg.')
wwpLeosTceCfmFrameLossMsgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 6), RowStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgRowStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgRowStatus.setDescription('Is a read-only field. A row in this table is system-generated on creation of cfm service and cfm mep objects')
wwpLeosTceCfmFrameLossMsgRepeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 50), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440))).setUnits('minutes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgRepeatInterval.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgRepeatInterval.setDescription('Represents the Transmission Interval for the Frame loss messages')
wwpLeosTceCfmFrameLossMsgNearLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgNearLossThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgNearLossThreshold.setDescription('Represents the threshold value for the near-end frame loss')
wwpLeosTceCfmFrameLossMsgFarLossThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgFarLossThreshold.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgFarLossThreshold.setDescription('Represents the threshold value for the far-end frame loss')
wwpLeosTceCfmFrameLossMsgServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 53), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgServiceName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgServiceName.setDescription('This object is used to specify the service to be used when sending FrameLossMsg (LMM).')
wwpLeosTceCfmFrameLossMsgSubPortName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 54), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgSubPortName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgSubPortName.setDescription('This object is used to specify the sub-port name to be used when sending FrameLossMsg (LMM).')
wwpLeosTceCfmFrameLossMsgFrameLossNear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 55), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgFrameLossNear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgFrameLossNear.setDescription('This object represents the near-end Frame Loss. For a MEP, near-end Frame loss refers to frame loss associated with the ingress data frames.')
wwpLeosTceCfmFrameLossMsgFrameLossFar = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 56), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgFrameLossFar.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgFrameLossFar.setDescription('This object represents the far-end Frame Loss. For a MEP, far-end Frame loss refers to frame loss associated with the egress data frames.')
wwpLeosTceCfmFrameLossMsgTotalTxLmm = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 57), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgTotalTxLmm.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgTotalTxLmm.setDescription('This object represents the total LMMs transmitted')
wwpLeosTceCfmFrameLossMsgTotalRxLmm = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 58), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgTotalRxLmm.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgTotalRxLmm.setDescription('This object represents the total LMMs received')
wwpLeosTceCfmFrameLossMsgTotalTxLmr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 59), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgTotalTxLmr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgTotalTxLmr.setDescription('This object represents the total LMRs transmitted')
wwpLeosTceCfmFrameLossMsgTotalRxLmr = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 60), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgTotalRxLmr.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgTotalRxLmr.setDescription('This object represents the total LMRs received')
wwpLeosTceCfmFrameLossMsgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 20, 13, 1, 1, 61), SendState()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgAction.setStatus('current')
if mibBuilder.loadTexts: wwpLeosTceCfmFrameLossMsgAction.setDescription('This object represents the action for the message (send, clear or cancel).')
wwpLeosCfmFaultTrapState = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 1, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCfmFaultTrapState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFaultTrapState.setDescription("Setting this object to 'disabled' will cause CFM fault traps to be suppressed.")
wwpLeosCfmFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 1)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceVlan"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceMdLevel"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultTime"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultType"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultDesc"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultMep"))
if mibBuilder.loadTexts: wwpLeosCfmFaultTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFaultTrap.setDescription('A notification is sent whenever the fault is detected.')
wwpLeosCfmPbtFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 2)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceType"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceValue"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceAdminState"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceOperState"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultTime"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultType"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultDesc"))
if mibBuilder.loadTexts: wwpLeosCfmPbtFaultTrap.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCfmPbtFaultTrap.setDescription('A notification is sent whenever the fault is detected for a PBT tunnel. wwpLeosCfmServiceType will always be set to pbtTunnel.')
wwpLeosCfmDelayFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 3)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceVlan"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmRemoteMEPDelay"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmDelayMsgDelayThreshold"))
if mibBuilder.loadTexts: wwpLeosCfmDelayFaultTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDelayFaultTrap.setDescription('A notification is sent whenever the fault is detected during a Delay Measurement test with a fault threshold.')
wwpLeosCfmJitterFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 4)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceVlan"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmRemoteMEPJitter"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmDelayMsgJitterThreshold"))
if mibBuilder.loadTexts: wwpLeosCfmJitterFaultTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmJitterFaultTrap.setDescription('A notification is sent whenever the fault is detected during a Delay Measurement test with a fault threshold.')
wwpLeosCfmFrameLossNearFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 5)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceVlan"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmRemoteMEPFrameLossNear"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmFrameLossMsgFlnThreshold"))
if mibBuilder.loadTexts: wwpLeosCfmFrameLossNearFaultTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFrameLossNearFaultTrap.setDescription('A notification is sent whenever the fault is detected during a Frame Loss Measurement test with a fault threshold.')
wwpLeosCfmFrameLossFarFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 6)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceVlan"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmRemoteMEPFrameLossFar"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmFrameLossMsgFlfThreshold"))
if mibBuilder.loadTexts: wwpLeosCfmFrameLossFarFaultTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFrameLossFarFaultTrap.setDescription('A notification is sent whenever the fault is detected during a Frame Loss Measurement test with a fault threshold.')
wwpLeosCfmExtDelayFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 7)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceVlan"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmRemoteMEPDelay"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmExtDelayMsgDelayThreshold"))
if mibBuilder.loadTexts: wwpLeosCfmExtDelayFaultTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtDelayFaultTrap.setDescription('A notification is sent whenever the fault is detected during a Delay Measurement test with a fault threshold.')
wwpLeosCfmExtJitterFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 8)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceVlan"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmRemoteMEPJitter"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmExtDelayMsgJitterThreshold"))
if mibBuilder.loadTexts: wwpLeosCfmExtJitterFaultTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtJitterFaultTrap.setDescription('A notification is sent whenever the fault is detected during a Delay Measurement test with a fault threshold.')
wwpLeosCfmExtFrameLossNearFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 9)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceVlan"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmRemoteMEPFrameLossNear"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmExtFrameLossMsgFlnThreshold"))
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossNearFaultTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossNearFaultTrap.setDescription('A notification is sent whenever the fault is detected during a Frame Loss Measurement test with a fault threshold.')
wwpLeosCfmExtFrameLossFarFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 20)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceVlan"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmRemoteMEPFrameLossFar"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmExtFrameLossMsgFlfThreshold"))
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossFarFaultTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFrameLossFarFaultTrap.setDescription('A notification is sent whenever the fault is detected during a Frame Loss Measurement test with a fault threshold.')
wwpLeosCfmExtFaultTrapSet = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 21)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceType"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceValue"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceAdminState"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceOperState"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceMdLevel"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultTime"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultType"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultDesc"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultMep"))
if mibBuilder.loadTexts: wwpLeosCfmExtFaultTrapSet.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFaultTrapSet.setDescription('A notification is sent whenever the fault is detected.')
wwpLeosCfmExtFaultTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 22)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceType"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceValue"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceAdminState"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceOperState"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceMdLevel"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultTime"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultType"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultDesc"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultMep"))
if mibBuilder.loadTexts: wwpLeosCfmExtFaultTrapClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmExtFaultTrapClear.setDescription('A notification is sent whenever the fault is resolved and cleared.')
wwpLeosCfmBadSequenceFaultTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 23)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceVlan"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmExtMEPLMMBadSequence"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmExtFrameLossMsgSeqThreshold"))
if mibBuilder.loadTexts: wwpLeosCfmBadSequenceFaultTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmBadSequenceFaultTrap.setDescription('A notification is sent whenever wwpLeosCfmExtMEPLMMBadSequence exceeds wwpLeosCfmExtFrameLossMsgSeqThreshold in a Frame Loss Measurement test.')
wwpLeosCfmBlockOppositeMEPSetTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 24)).setObjects(("SNMPv2-MIB", "sysName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceMdLevel"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceCfmMAID"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmExtMEPId"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmExtVlanId"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmExtMEPTagVID"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmExtMEPBlockOppositeFaultCurrent"))
if mibBuilder.loadTexts: wwpLeosCfmBlockOppositeMEPSetTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmBlockOppositeMEPSetTrap.setDescription('A notification sent whenever the number of frames blocked by the presence of a MEP of the opposite type exceeds the threshold during the sample window.')
wwpLeosCfmBlockOppositeMEPClearTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 25)).setObjects(("SNMPv2-MIB", "sysName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceMdLevel"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceCfmMAID"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmExtMEPId"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmExtVlanId"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmExtMEPTagVID"))
if mibBuilder.loadTexts: wwpLeosCfmBlockOppositeMEPClearTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmBlockOppositeMEPClearTrap.setDescription('A notification sent whenever the number of frames blocked by the presence of a MEP of the opposite type drops below the threshold during the sample window.')
wwpLeosCfmFaultTrapSet = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 10)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceType"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceValue"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceAdminState"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceOperState"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceMdLevel"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultTime"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultType"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultDesc"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceFaultMep"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceVsPbtName"))
if mibBuilder.loadTexts: wwpLeosCfmFaultTrapSet.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFaultTrapSet.setDescription('A notification is sent whenever the fault is detected.')
wwpLeosCfmFaultTrapClear = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 11)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceType"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceValue"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceAdminState"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceOperState"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceMdLevel"), ("WWP-LEOS-CFM-MIB", "wwpLeosCfmServiceVsPbtName"))
if mibBuilder.loadTexts: wwpLeosCfmFaultTrapClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmFaultTrapClear.setDescription('A notification is sent whenever the fault is resolved and cleared.')
wwpLeosCfmDmmTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 12)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmDelayMsgServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmDelayMsgLocalMEPId"), ("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmDelayMsgDelayThreshold"), ("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmDelayMsgDelay"), ("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmDelayMsgJitterThreshold"), ("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmDelayMsgJitter"), ("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmDelayMsgMaxJitterThreshold"), ("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmDelayMsgMaxJitter"), ("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmDelayMsgMaxDelayThreshold"), ("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmDelayMsgMaxDelay"))
if mibBuilder.loadTexts: wwpLeosCfmDmmTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmDmmTrap.setDescription('A notification is sent whenever delay average goes above delay-threshold during a delay measurement test, also generated when delay average goes below threshold after going up as a clearing event. Same notification is generated whenever the average jitter goes above Jitter threshold during a delay measurement test and when the maximum delay and jitter go above the maximum delay and jitter thresholds respectively. Also generated when jitter average goes below jitter threshold after going up as a clearing event. When jitter event is generated, wwpLeosTceCfmDelayMsgDelayThreshold and wwpLeosTceCfmDelayMsgDelay varbind values are set to 0. Similarly when max delay event is generated wwpLeosTceCfmDelayMsgMaxJitter and wwpLeosTceCfmDelayMsgMaxJitterThreshold are set to 0 and vice versa')
wwpLeosCfmLmmTrap = NotificationType((1, 3, 6, 1, 4, 1, 6141, 2, 60, 35, 2, 0, 13)).setObjects(("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmFrameLossMsgServiceName"), ("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmFrameLossMsgLocalMEPId"), ("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmFrameLossMsgNearLossThreshold"), ("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmFrameLossMsgFrameLossNear"), ("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmFrameLossMsgFarLossThreshold"), ("WWP-LEOS-CFM-MIB", "wwpLeosTceCfmFrameLossMsgFrameLossFar"))
if mibBuilder.loadTexts: wwpLeosCfmLmmTrap.setStatus('current')
if mibBuilder.loadTexts: wwpLeosCfmLmmTrap.setDescription('A notification is sent whenever FrameLoss Near average goes above FrameLoss Near threshold during a Frame Loss measurement test. Also generated when FrameLoss Near average goes below FrameLoss Near threshold after going up as a clearing event. Same notification is generated whenever FrameLoss Far Average goes above Frameloss Far threshold value during a Frame Loss measurement test. Also generated when Frameloss Far average goes below Frameloss Far threshold after going up as a clearing event. When FrameLoss Near event is generated wwpLeosTceCfmFrameLossMsgFrameLossFar and wwpLeosTceCfmFrameLossMsgFarLossThreshold varbind values are 0')
mibBuilder.exportSymbols("WWP-LEOS-CFM-MIB", wwpLeosCfmLinkTraceMsgSubPortName=wwpLeosCfmLinkTraceMsgSubPortName, wwpLeosCfmMIB=wwpLeosCfmMIB, wwpLeosCfmCcmAvailable=wwpLeosCfmCcmAvailable, wwpLeosCfmExtInterfaceMipServiceInstanceIndex=wwpLeosCfmExtInterfaceMipServiceInstanceIndex, wwpLeosTceCfmMEPNumDMMSent=wwpLeosTceCfmMEPNumDMMSent, wwpLeosCfmExtFrameLossMsgAction=wwpLeosCfmExtFrameLossMsgAction, wwpLeosTceCfmMEPEntry=wwpLeosTceCfmMEPEntry, wwpLeosCfmMaintenanceDomainName=wwpLeosCfmMaintenanceDomainName, wwpLeosCfmMEPRxValidInOrderLoopbackReply=wwpLeosCfmMEPRxValidInOrderLoopbackReply, wwpLeosCfmJitterFaultTrap=wwpLeosCfmJitterFaultTrap, wwpLeosCfmRemoteMEPModuleIndex=wwpLeosCfmRemoteMEPModuleIndex, wwpLeosCfmGlobalLoopbackStats=wwpLeosCfmGlobalLoopbackStats, wwpLeosTceCfmDelayMsgDelayThreshold=wwpLeosTceCfmDelayMsgDelayThreshold, wwpLeosCfmRemoteMEPJitter=wwpLeosCfmRemoteMEPJitter, wwpLeosCfmExtMEPLMMBadSequence=wwpLeosCfmExtMEPLMMBadSequence, wwpLeosCfmDelayMsgRowStatus=wwpLeosCfmDelayMsgRowStatus, wwpLeosTceCfmPortStackEgressXformTagValue1=wwpLeosTceCfmPortStackEgressXformTagValue1, wwpLeosCfmExtFrameLossMsgSeqThreshold=wwpLeosCfmExtFrameLossMsgSeqThreshold, wwpLeosCfmExtMEPStatsIntervalErrorCCMReceived=wwpLeosCfmExtMEPStatsIntervalErrorCCMReceived, wwpLeosTceCfmFrameLossMsgPriority=wwpLeosTceCfmFrameLossMsgPriority, wwpLeosCfmServiceCCMLossBucketInterval=wwpLeosCfmServiceCCMLossBucketInterval, wwpLeosCfmServiceTotalTxLMR=wwpLeosCfmServiceTotalTxLMR, wwpLeosCfmExtMEPLastStatsDMMPriority=wwpLeosCfmExtMEPLastStatsDMMPriority, wwpLeosCfmExtMEPDelayHistoryPriority=wwpLeosCfmExtMEPDelayHistoryPriority, wwpLeosCfmExtMipEntry=wwpLeosCfmExtMipEntry, wwpLeosCfmFrameClassifierMode=wwpLeosCfmFrameClassifierMode, wwpLeosCfmRemoteMEPID=wwpLeosCfmRemoteMEPID, wwpLeosCfmExtMEPLastStatsFrameLossFar=wwpLeosCfmExtMEPLastStatsFrameLossFar, wwpLeosTceCfmMipTable=wwpLeosTceCfmMipTable, wwpLeosCfmExtLinkTraceMsgTable=wwpLeosCfmExtLinkTraceMsgTable, wwpLeosTceCfmDelayMsgTotalTxDmm=wwpLeosTceCfmDelayMsgTotalTxDmm, wwpLeosCfmExtMEPDelayHistoryEntry=wwpLeosCfmExtMEPDelayHistoryEntry, wwpLeosTceCfmPortStackMipLevel=wwpLeosTceCfmPortStackMipLevel, wwpLeosCfmRemoteMEPPreviousBayIndex=wwpLeosCfmRemoteMEPPreviousBayIndex, wwpLeosCfmMipCCMdbNumCCMRx=wwpLeosCfmMipCCMdbNumCCMRx, wwpLeosCfmServicePortStatusFlag=wwpLeosCfmServicePortStatusFlag, wwpLeosCfmExtMEPDMMMinJitter=wwpLeosCfmExtMEPDMMMinJitter, wwpLeosTceCfmDelayMsgTotalRxDmr=wwpLeosTceCfmDelayMsgTotalRxDmr, wwpLeosCfmMEPLeadPortModuleIndex=wwpLeosCfmMEPLeadPortModuleIndex, wwpLeosCfmGlobalStats=wwpLeosCfmGlobalStats, wwpLeosCfmLinkTraceMsgReplyTTL=wwpLeosCfmLinkTraceMsgReplyTTL, wwpLeosTceCfmLoopbackMsgNextLbmTransId=wwpLeosTceCfmLoopbackMsgNextLbmTransId, wwpLeosCfmServiceChargedAgainstGlobalFrameBudget=wwpLeosCfmServiceChargedAgainstGlobalFrameBudget, wwpLeosCfmRemoteMEPRowStatus=wwpLeosCfmRemoteMEPRowStatus, wwpLeosTceCfmMEPAdminState=wwpLeosTceCfmMEPAdminState, wwpLeosCfmExtPortStackPort=wwpLeosCfmExtPortStackPort, Dot1agCfmMaintAssocName=Dot1agCfmMaintAssocName, wwpLeosCfmMEPServiceName=wwpLeosCfmMEPServiceName, wwpLeosCfmServiceNextMepId=wwpLeosCfmServiceNextMepId, wwpLeosCfmRemoteMEPFailureFlag=wwpLeosCfmRemoteMEPFailureFlag, wwpLeosTceCfmPortStackEgressXformTagPriority2=wwpLeosTceCfmPortStackEgressXformTagPriority2, wwpLeosTceCfmDelayMsgSubPortName=wwpLeosTceCfmDelayMsgSubPortName, wwpLeosCfmExtMEPDelayHistoryStartTime=wwpLeosCfmExtMEPDelayHistoryStartTime, wwpLeosTceCfmMEPCCMState=wwpLeosTceCfmMEPCCMState, wwpLeosCfmServiceCfmMdIndex=wwpLeosCfmServiceCfmMdIndex, wwpLeosCfmLinkTraceMsgReplyIngressAction=wwpLeosCfmLinkTraceMsgReplyIngressAction, wwpLeosCfmServiceRemoteMepDiscovery=wwpLeosCfmServiceRemoteMepDiscovery, wwpLeosCfmRxAdminDisableDropped=wwpLeosCfmRxAdminDisableDropped, wwpLeosCfmExtPortStackMEPId=wwpLeosCfmExtPortStackMEPId, wwpLeosCfmNotifMIBNotificationPrefix=wwpLeosCfmNotifMIBNotificationPrefix, wwpLeosCfmExtInterfaceMipStatus=wwpLeosCfmExtInterfaceMipStatus, wwpLeosTceCfmMipCCMDbCCMRxTime=wwpLeosTceCfmMipCCMDbCCMRxTime, wwpLeosCfmExtMEPLastStatsLTMInitialTTL=wwpLeosCfmExtMEPLastStatsLTMInitialTTL, wwpLeosTceCfmMEPNumCCMReceived=wwpLeosTceCfmMEPNumCCMReceived, wwpLeosCfmFrameLossFarFaultTrap=wwpLeosCfmFrameLossFarFaultTrap, wwpLeosCfmFrameLossMsgRepeatCount=wwpLeosCfmFrameLossMsgRepeatCount, wwpLeosCfmExtMEPLMMFrameLossNear=wwpLeosCfmExtMEPLMMFrameLossNear, wwpLeosTceCfmPortStackEgressXformTagPriority1=wwpLeosTceCfmPortStackEgressXformTagPriority1, wwpLeosCfmMEPNextLbmSeqNumber=wwpLeosCfmMEPNextLbmSeqNumber, wwpLeosCfmServiceMdIndex=wwpLeosCfmServiceMdIndex, wwpLeosTceCfmDelayMsgTotalTxDmr=wwpLeosTceCfmDelayMsgTotalTxDmr, wwpLeosCfmExtInterfaceStack=wwpLeosCfmExtInterfaceStack, wwpLeosCfmLoopbackMsgDefaultInterval=wwpLeosCfmLoopbackMsgDefaultInterval, wwpLeosCfmTotalRxInvalidMessageOverflow=wwpLeosCfmTotalRxInvalidMessageOverflow, wwpLeosCfmExtStack=wwpLeosCfmExtStack, wwpLeosCfmServiceEntry=wwpLeosCfmServiceEntry, wwpLeosCfmServiceRDIFlag=wwpLeosCfmServiceRDIFlag, wwpLeosCfmExtLinkTraceMsgReplyTTL=wwpLeosCfmExtLinkTraceMsgReplyTTL, wwpLeosCfmServiceOperState=wwpLeosCfmServiceOperState, wwpLeosCfmExtPortStackVid=wwpLeosCfmExtPortStackVid, wwpLeosCfmGlobalLossMeasurementStats=wwpLeosCfmGlobalLossMeasurementStats, wwpLeosCfmExtMEPEntry=wwpLeosCfmExtMEPEntry, wwpLeosCfmLinkTraceMsgSequenceNumber=wwpLeosCfmLinkTraceMsgSequenceNumber, wwpLeosCfmMEPVsPbtName=wwpLeosCfmMEPVsPbtName, wwpLeosCfmExtFrameLossMsgFlnThreshold=wwpLeosCfmExtFrameLossMsgFlnThreshold, wwpLeosCfmExtMEPTagMode=wwpLeosCfmExtMEPTagMode, wwpLeosCfmExtDelayMsgDelayThreshold=wwpLeosCfmExtDelayMsgDelayThreshold, wwpLeosCfmRemoteMEPServiceStatisticsClear=wwpLeosCfmRemoteMEPServiceStatisticsClear, wwpLeosCfmRxSTPStateNotForwardingDropped=wwpLeosCfmRxSTPStateNotForwardingDropped, wwpLeosCfmMEPNumUnexpectedLTRepliesReceived=wwpLeosCfmMEPNumUnexpectedLTRepliesReceived, wwpLeosTceCfmMipCCMDbLevel=wwpLeosTceCfmMipCCMDbLevel, wwpLeosCfmServiceTotalTxDMM=wwpLeosCfmServiceTotalTxDMM, wwpLeosCfmExtMEPStatsCCMSequenceErrorsReceived=wwpLeosCfmExtMEPStatsCCMSequenceErrorsReceived, wwpLeosCfmServiceFaultEntry=wwpLeosCfmServiceFaultEntry, wwpLeosTceCfmFrameLossMsgFrameLossFar=wwpLeosTceCfmFrameLossMsgFrameLossFar, wwpLeosCfmExtLinkTrace=wwpLeosCfmExtLinkTrace, wwpLeosCfmTotalTxLTM=wwpLeosCfmTotalTxLTM, wwpLeosCfmExtMEPLastStatsLMMPriority=wwpLeosCfmExtMEPLastStatsLMMPriority, wwpLeosCfmServiceTotalTxLTM=wwpLeosCfmServiceTotalTxLTM, wwpLeosCfmRemoteMEPKLastMacStatus=wwpLeosCfmRemoteMEPKLastMacStatus, PYSNMP_MODULE_ID=wwpLeosCfmMIB, wwpLeosCfmExtDelay=wwpLeosCfmExtDelay, wwpLeosCfmExtMEPLastStatsEntry=wwpLeosCfmExtMEPLastStatsEntry, wwpLeosCfmServiceNumMEP=wwpLeosCfmServiceNumMEP, wwpLeosCfmExtMEPTagPriority=wwpLeosCfmExtMEPTagPriority, wwpLeosCfmGlobalFrameBudgetTable=wwpLeosCfmGlobalFrameBudgetTable, wwpLeosTceCfmLoopbackMsgData=wwpLeosTceCfmLoopbackMsgData, wwpLeosCfmDelayMsgJitterThreshold=wwpLeosCfmDelayMsgJitterThreshold, wwpLeosTceCfmFrameLossMsgTotalTxLmm=wwpLeosTceCfmFrameLossMsgTotalTxLmm, wwpLeosCfmServiceMaintAssocNameType=wwpLeosCfmServiceMaintAssocNameType, wwpLeosTceCfmDelayMsgMaxJitterThreshold=wwpLeosTceCfmDelayMsgMaxJitterThreshold, wwpLeosCfmMEPNumCCMReceived=wwpLeosCfmMEPNumCCMReceived, wwpLeosCfmL2LoopDetectState=wwpLeosCfmL2LoopDetectState, wwpLeosCfmStatsTxFloodedIgnoredStpState=wwpLeosCfmStatsTxFloodedIgnoredStpState, wwpLeosCfmFaultNotif=wwpLeosCfmFaultNotif, wwpLeosCfmRemoteMEPMaxDelay=wwpLeosCfmRemoteMEPMaxDelay, wwpLeosCfmExtMEPTagVID=wwpLeosCfmExtMEPTagVID, wwpLeosCfmServiceTotalTxDMR=wwpLeosCfmServiceTotalTxDMR, wwpLeosTceCfmMipShelfIndex=wwpLeosTceCfmMipShelfIndex, wwpLeosCfmServiceMdLevel=wwpLeosCfmServiceMdLevel, wwpLeosCfmExtMEPDelayHistoryStatus=wwpLeosCfmExtMEPDelayHistoryStatus, wwpLeosCfmLinkTraceMsgPriority=wwpLeosCfmLinkTraceMsgPriority, wwpLeosCfmExtLoopbackMsgData=wwpLeosCfmExtLoopbackMsgData, wwpLeosCfmExtMEPStatsDMMTxmt=wwpLeosCfmExtMEPStatsDMMTxmt, CfmDisplayString=CfmDisplayString, wwpLeosCfmExtMEPDelayHistoryNumDMMSent=wwpLeosCfmExtMEPDelayHistoryNumDMMSent, wwpLeosTceCfmDelayMsgTable=wwpLeosTceCfmDelayMsgTable, wwpLeosCfmExtLinkTraceMsgReplyIngressPort=wwpLeosCfmExtLinkTraceMsgReplyIngressPort, wwpLeosCfmExtDelayMsgJitterThreshold=wwpLeosCfmExtDelayMsgJitterThreshold, wwpLeosCfmFrameLossMsgTargetMEPID=wwpLeosCfmFrameLossMsgTargetMEPID, wwpLeosCfmMEPLeadPortBayIndex=wwpLeosCfmMEPLeadPortBayIndex, wwpLeosTceCfmPortStackSubPortIndex=wwpLeosTceCfmPortStackSubPortIndex, wwpLeosCfmExtLinkTraceMsgReplyTargetMacAddr=wwpLeosCfmExtLinkTraceMsgReplyTargetMacAddr, wwpLeosCfmTotalRxDMR=wwpLeosCfmTotalRxDMR, wwpLeosCfmExtMEPStatsUnexpectedLBRReceived=wwpLeosCfmExtMEPStatsUnexpectedLBRReceived, wwpLeosCfmExtMEPTable=wwpLeosCfmExtMEPTable, wwpLeosCfmExtMEPLastStatsTable=wwpLeosCfmExtMEPLastStatsTable, wwpLeosCfmExtPortId=wwpLeosCfmExtPortId, wwpLeosCfmMipLevelEnforcement=wwpLeosCfmMipLevelEnforcement, wwpLeosCfmFaultTrap=wwpLeosCfmFaultTrap, wwpLeosCfmExtMEPLTMPriority=wwpLeosCfmExtMEPLTMPriority, wwpLeosCfmGlobal=wwpLeosCfmGlobal, wwpLeosCfmMipLevel=wwpLeosCfmMipLevel, wwpLeosCfmExtLoopbackMsgTargetMacAddr=wwpLeosCfmExtLoopbackMsgTargetMacAddr, wwpLeosCfmServiceInstabilityFlag=wwpLeosCfmServiceInstabilityFlag, wwpLeosCfmExtMEPLastStatsLMMTxtm=wwpLeosCfmExtMEPLastStatsLMMTxtm, wwpLeosTceCfmMEPNextLTMSeqNumber=wwpLeosTceCfmMEPNextLTMSeqNumber, wwpLeosCfmMEPNumCCMTxmt=wwpLeosCfmMEPNumCCMTxmt, wwpLeosCfmExtMEPLastStatsLBMSent=wwpLeosCfmExtMEPLastStatsLBMSent, wwpLeosCfmMEPNextLTMSeqNumber=wwpLeosCfmMEPNextLTMSeqNumber, wwpLeosCfmLinkTraceMsgReplyEgressAction=wwpLeosCfmLinkTraceMsgReplyEgressAction, wwpLeosCfmRemoteMEPLastInterfaceStatus=wwpLeosCfmRemoteMEPLastInterfaceStatus, wwpLeosTceCfmLoopbackMsgServiceName=wwpLeosTceCfmLoopbackMsgServiceName, wwpLeosCfmMEPEntry=wwpLeosCfmMEPEntry, wwpLeosCfmServiceStatisticsEntry=wwpLeosCfmServiceStatisticsEntry, wwpLeosCfmExtMEPStatsLTRReceived=wwpLeosCfmExtMEPStatsLTRReceived, wwpLeosTceCfmMIP=wwpLeosTceCfmMIP, wwpLeosCfmLinkTraceMsgTargetMEPID=wwpLeosCfmLinkTraceMsgTargetMEPID, wwpLeosCfmExtLoopbackMsgInterval=wwpLeosCfmExtLoopbackMsgInterval, wwpLeosTceCfmMipLiName=wwpLeosTceCfmMipLiName, wwpLeosCfmExtLinkTraceMsgReplySequenceNumber=wwpLeosCfmExtLinkTraceMsgReplySequenceNumber, wwpLeosCfmExtMEPStatsInvalidInterfaceStatusTLVReceived=wwpLeosCfmExtMEPStatsInvalidInterfaceStatusTLVReceived, wwpLeosCfmExtDelayMsgTargetMacAddr=wwpLeosCfmExtDelayMsgTargetMacAddr, wwpLeosCfmServiceFrameBudgetSlot=wwpLeosCfmServiceFrameBudgetSlot, wwpLeosCfmExtMEPStatsLMRTxmt=wwpLeosCfmExtMEPStatsLMRTxmt, wwpLeosCfmExtMEPLMMMissingSequence=wwpLeosCfmExtMEPLMMMissingSequence, wwpLeosTceCfmPortStackTable=wwpLeosTceCfmPortStackTable, wwpLeosCfmMEPCCMState=wwpLeosCfmMEPCCMState, wwpLeosCfmMEPDMMMinDelay=wwpLeosCfmMEPDMMMinDelay, wwpLeosCfmServiceTable=wwpLeosCfmServiceTable, wwpLeosCfmDelayMsgDelayThreshold=wwpLeosCfmDelayMsgDelayThreshold, wwpLeosTceCfmMipLiIndex=wwpLeosTceCfmMipLiIndex, wwpLeosCfmLBMDefaultTimeout=wwpLeosCfmLBMDefaultTimeout, wwpLeosCfmExtInterfaceStackStackType=wwpLeosCfmExtInterfaceStackStackType, wwpLeosCfmExtMEPLastStatsFrameLossNear=wwpLeosCfmExtMEPLastStatsFrameLossNear, wwpLeosCfmRemoteMEPFrameLossNear=wwpLeosCfmRemoteMEPFrameLossNear, wwpLeosCfmExtMEPStatsInvalidDMRReceived=wwpLeosCfmExtMEPStatsInvalidDMRReceived, wwpLeosCfmTotalRxInvalidSenderIDTLV=wwpLeosCfmTotalRxInvalidSenderIDTLV, wwpLeosCfmTotalRxValidLTM=wwpLeosCfmTotalRxValidLTM, wwpLeosCfmExtOamPortEntry=wwpLeosCfmExtOamPortEntry, wwpLeosCfmTotalRxInvalidLTM=wwpLeosCfmTotalRxInvalidLTM, wwpLeosCfmRemoteMEPLastSeqNum=wwpLeosCfmRemoteMEPLastSeqNum, wwpLeosCfmServiceTotalRxValidLTR=wwpLeosCfmServiceTotalRxValidLTR, wwpLeosCfmExtMEPStatsDMMReceived=wwpLeosCfmExtMEPStatsDMMReceived, wwpLeosTceCfmLoopbackMsgCount=wwpLeosTceCfmLoopbackMsgCount, wwpLeosCfmExtLoopbackMsgLoss=wwpLeosCfmExtLoopbackMsgLoss, wwpLeosTceCfmLoopbackMsgTable=wwpLeosTceCfmLoopbackMsgTable, wwpLeosCfmServiceCCMInterval=wwpLeosCfmServiceCCMInterval, wwpLeosCfmLinkTraceMsgTotalRxLtr=wwpLeosCfmLinkTraceMsgTotalRxLtr, wwpLeosCfmMEPNumLMMSent=wwpLeosCfmMEPNumLMMSent, wwpLeosCfmMEPNumLTMReceived=wwpLeosCfmMEPNumLTMReceived, wwpLeosCfmRemoteMEP=wwpLeosCfmRemoteMEP, wwpLeosCfmMipCCMDbEntry=wwpLeosCfmMipCCMDbEntry, wwpLeosCfmExtMEPDelayHistoryAveJitter=wwpLeosCfmExtMEPDelayHistoryAveJitter, wwpLeosCfmExtLinkTraceMsgPriority=wwpLeosCfmExtLinkTraceMsgPriority, wwpLeosTceCfmPortStackOperState=wwpLeosTceCfmPortStackOperState, wwpLeosCfmServiceAdminState=wwpLeosCfmServiceAdminState, wwpLeosCfmExtMEPStatsValidLTMReceived=wwpLeosCfmExtMEPStatsValidLTMReceived, wwpLeosCfmExtFrameLossNearFaultTrap=wwpLeosCfmExtFrameLossNearFaultTrap, wwpLeosCfmServiceTotalTxLMM=wwpLeosCfmServiceTotalTxLMM, wwpLeosTceCfmMEPLeadPortBayIndex=wwpLeosTceCfmMEPLeadPortBayIndex, wwpLeosCfmPortStackLevel=wwpLeosCfmPortStackLevel, wwpLeosCfmMaintenanceDomainEntry=wwpLeosCfmMaintenanceDomainEntry, wwpLeosCfmExtPortStackType=wwpLeosCfmExtPortStackType, wwpLeosTceCfmMEPRxValidInOrderLoopbackReply=wwpLeosTceCfmMEPRxValidInOrderLoopbackReply, wwpLeosCfmLBMDefaultInterval=wwpLeosCfmLBMDefaultInterval, wwpLeosCfmMIBGroups=wwpLeosCfmMIBGroups, wwpLeosCfmMipStatus=wwpLeosCfmMipStatus, wwpLeosCfmExtMEPStatsInvalidLBMReceived=wwpLeosCfmExtMEPStatsInvalidLBMReceived, wwpLeosCfmServiceTotalRxMDLevelXconCCM=wwpLeosCfmServiceTotalRxMDLevelXconCCM, wwpLeosCfmExtFrameLossMsgTargetMacAddr=wwpLeosCfmExtFrameLossMsgTargetMacAddr, wwpLeosCfmExtMEPLastStatsLTMSequenceNo=wwpLeosCfmExtMEPLastStatsLTMSequenceNo, wwpLeosCfmRxUnresolvedLTM=wwpLeosCfmRxUnresolvedLTM, wwpLeosCfmExtLoopbackMsgEntry=wwpLeosCfmExtLoopbackMsgEntry, wwpLeosCfmExtMEPLastStatsDMMJitter=wwpLeosCfmExtMEPLastStatsDMMJitter, wwpLeosCfmMEPDMMMaxDelay=wwpLeosCfmMEPDMMMaxDelay, wwpLeosCfmExtLinkTraceMsgReplyEgressPort=wwpLeosCfmExtLinkTraceMsgReplyEgressPort, wwpLeosCfmPortStackEntry=wwpLeosCfmPortStackEntry, wwpLeosCfmLinkTraceMsgReplyEgressMacAddr=wwpLeosCfmLinkTraceMsgReplyEgressMacAddr, EthType=EthType, wwpLeosCfmServiceFaultMep=wwpLeosCfmServiceFaultMep, wwpLeosTceCfmMEPNumLTMRecevied=wwpLeosTceCfmMEPNumLTMRecevied, wwpLeosCfmMEPNumLoopbackRepliesReceived=wwpLeosCfmMEPNumLoopbackRepliesReceived, wwpLeosCfmServiceY1731=wwpLeosCfmServiceY1731, wwpLeosCfmServiceTotalRxUnexpectedLTR=wwpLeosCfmServiceTotalRxUnexpectedLTR, wwpLeosCfmNotifMIBNotification=wwpLeosCfmNotifMIBNotification, wwpLeosCfmServiceValue=wwpLeosCfmServiceValue, wwpLeosCfmTotalCCMRxMDLevelXcon=wwpLeosCfmTotalCCMRxMDLevelXcon, wwpLeosCfmDelayMsgPriority=wwpLeosCfmDelayMsgPriority, wwpLeosCfmExtDelayMsgLocalMEPId=wwpLeosCfmExtDelayMsgLocalMEPId, wwpLeosTceCfmMipModuleIndex=wwpLeosTceCfmMipModuleIndex, wwpLeosCfmExtMEPDelayHistoryTable=wwpLeosCfmExtMEPDelayHistoryTable, wwpLeosCfmExtPortStackLevel=wwpLeosCfmExtPortStackLevel, wwpLeosCfmExtInterfaceMipInterfaceType=wwpLeosCfmExtInterfaceMipInterfaceType, wwpLeosCfmStatsRxTotalInValidFrames=wwpLeosCfmStatsRxTotalInValidFrames, wwpLeosTceCfmDelayMsgMaxDelayThreshold=wwpLeosTceCfmDelayMsgMaxDelayThreshold, wwpLeosCfmServiceTotalRxValidLBM=wwpLeosCfmServiceTotalRxValidLBM, wwpLeosCfmMipCCMDbIndex=wwpLeosCfmMipCCMDbIndex, wwpLeosCfmExtLinkTraceMsgReplyEgressPortStr=wwpLeosCfmExtLinkTraceMsgReplyEgressPortStr, wwpLeosCfmExtMEPCCMComment=wwpLeosCfmExtMEPCCMComment, wwpLeosCfmLoopbackMsgTargetMacAddr=wwpLeosCfmLoopbackMsgTargetMacAddr, wwpLeosCfmMipCCMDbPort=wwpLeosCfmMipCCMDbPort, wwpLeosCfmServiceTotalRxValidCCM=wwpLeosCfmServiceTotalRxValidCCM, wwpLeosCfmExtLoopbackMsgTimeout=wwpLeosCfmExtLoopbackMsgTimeout, wwpLeosTceCfmMEPSubPortName=wwpLeosTceCfmMEPSubPortName, wwpLeosCfmFrameLossMsgFlfThreshold=wwpLeosCfmFrameLossMsgFlfThreshold, wwpLeosCfmLinkTraceMsgReplyEgressPortStr=wwpLeosCfmLinkTraceMsgReplyEgressPortStr, wwpLeosCfmTotalRxLMM=wwpLeosCfmTotalRxLMM, wwpLeosCfmLoopbackMsgTable=wwpLeosCfmLoopbackMsgTable, wwpLeosCfmMEPNumLbmReceived=wwpLeosCfmMEPNumLbmReceived, wwpLeosCfmExtFrameLoss=wwpLeosCfmExtFrameLoss, wwpLeosCfmLinkTraceMsgReplyEntry=wwpLeosCfmLinkTraceMsgReplyEntry, wwpLeosCfmExtOamPortSupported=wwpLeosCfmExtOamPortSupported, wwpLeosTceCfmMipCCMDbSubPortName=wwpLeosTceCfmMipCCMDbSubPortName)
mibBuilder.exportSymbols("WWP-LEOS-CFM-MIB", wwpLeosCfmServiceFrameBudget=wwpLeosCfmServiceFrameBudget, wwpLeosTceCfmDelayMsgAction=wwpLeosTceCfmDelayMsgAction, wwpLeosCfmExtFaultTrapSet=wwpLeosCfmExtFaultTrapSet, wwpLeosCfmExtMEPServiceName=wwpLeosCfmExtMEPServiceName, Dot1agCfmMaintDomainNameType=Dot1agCfmMaintDomainNameType, wwpLeosCfmExtPortStackTable=wwpLeosCfmExtPortStackTable, wwpLeosCfmExtMEPStatsLMMReceived=wwpLeosCfmExtMEPStatsLMMReceived, wwpLeosTceCfmPortStackEgressXformTagEtype2=wwpLeosTceCfmPortStackEgressXformTagEtype2, wwpLeosCfmServiceCCMTxState=wwpLeosCfmServiceCCMTxState, wwpLeosCfmServiceTotalRxDMM=wwpLeosCfmServiceTotalRxDMM, wwpLeosCfmLinkTrace=wwpLeosCfmLinkTrace, wwpLeosCfmExtMEPStatsInvalidLBRReceived=wwpLeosCfmExtMEPStatsInvalidLBRReceived, wwpLeosCfmDelayMsgRepeatCount=wwpLeosCfmDelayMsgRepeatCount, wwpLeosCfmServiceInvalidPortStatusTLV=wwpLeosCfmServiceInvalidPortStatusTLV, wwpLeosCfmServiceLastFaultCCM=wwpLeosCfmServiceLastFaultCCM, wwpLeosCfmRemoteMEPCCMLevel=wwpLeosCfmRemoteMEPCCMLevel, wwpLeosCfmPortStackMEPId=wwpLeosCfmPortStackMEPId, wwpLeosCfmRemoteMEPSubPortName=wwpLeosCfmRemoteMEPSubPortName, wwpLeosCfmExtMEPStatsTotalInvalidFramesReceived=wwpLeosCfmExtMEPStatsTotalInvalidFramesReceived, wwpLeosCfmExtMEPDelayHistoryMinJitter=wwpLeosCfmExtMEPDelayHistoryMinJitter, wwpLeosCfmRemoteMEPCCMLoss=wwpLeosCfmRemoteMEPCCMLoss, wwpLeosTceCfmMEPLiIndex=wwpLeosTceCfmMEPLiIndex, wwpLeosCfmMEPDMMJitter=wwpLeosCfmMEPDMMJitter, wwpLeosCfmExtFrameLossMsgRepeatCount=wwpLeosCfmExtFrameLossMsgRepeatCount, wwpLeosCfmExtMEPStatsLMMTxmt=wwpLeosCfmExtMEPStatsLMMTxmt, wwpLeosCfmServiceInvalidMessageOverflow=wwpLeosCfmServiceInvalidMessageOverflow, wwpLeosCfmExtMEPDelayHistoryMaxJitter=wwpLeosCfmExtMEPDelayHistoryMaxJitter, wwpLeosTceCfmMEPNumLbmTxmt=wwpLeosTceCfmMEPNumLbmTxmt, wwpLeosCfmLoopbackMsgTargetMEPID=wwpLeosCfmLoopbackMsgTargetMEPID, wwpLeosCfmPortStackVid=wwpLeosCfmPortStackVid, wwpLeosTceCfmMipCCMDbMacAddr=wwpLeosTceCfmMipCCMDbMacAddr, wwpLeosCfmExtLoopbackMsgTargetMEPID=wwpLeosCfmExtLoopbackMsgTargetMEPID, wwpLeosCfmY1731EtherType=wwpLeosCfmY1731EtherType, wwpLeosCfmDelayMsgMaxDelayThreshold=wwpLeosCfmDelayMsgMaxDelayThreshold, wwpLeosCfmLoopback=wwpLeosCfmLoopback, wwpLeosCfmMipCCMDbVid=wwpLeosCfmMipCCMDbVid, wwpLeosCfmExtMEPStatsDMReplyTimeout=wwpLeosCfmExtMEPStatsDMReplyTimeout, wwpLeosTceCfmMipCCMDbEntry=wwpLeosTceCfmMipCCMDbEntry, wwpLeosCfmServiceNumCCMForFault=wwpLeosCfmServiceNumCCMForFault, wwpLeosTceCfmMipCCMDbServiceName=wwpLeosTceCfmMipCCMDbServiceName, wwpLeosCfmExtMEPDelayHistoryIndex=wwpLeosCfmExtMEPDelayHistoryIndex, wwpLeosTceCfmLoopbackMsgTotalRxLbrContentMismatch=wwpLeosTceCfmLoopbackMsgTotalRxLbrContentMismatch, wwpLeosTceCfmMEPLiType=wwpLeosTceCfmMEPLiType, wwpLeosCfmMEPRxValidOutOrderLoopbackReply=wwpLeosCfmMEPRxValidOutOrderLoopbackReply, wwpLeosTceCfmMEPNumLTRepliesTxmt=wwpLeosTceCfmMEPNumLTRepliesTxmt, wwpLeosTceCfmFrameLossMsgNearLossThreshold=wwpLeosTceCfmFrameLossMsgNearLossThreshold, wwpLeosCfmTotalTxCCM=wwpLeosCfmTotalTxCCM, wwpLeosCfmMaintenance=wwpLeosCfmMaintenance, wwpLeosCfmServiceType=wwpLeosCfmServiceType, wwpLeosCfmRemoteMEPBayIndex=wwpLeosCfmRemoteMEPBayIndex, wwpLeosCfmServiceFaultType=wwpLeosCfmServiceFaultType, wwpLeosCfmExtMEPLastStatsInOrderLBRReceived=wwpLeosCfmExtMEPLastStatsInOrderLBRReceived, wwpLeosCfmMEPCCMPriority=wwpLeosCfmMEPCCMPriority, wwpLeosTceCfmPortStackShelfIndex=wwpLeosTceCfmPortStackShelfIndex, wwpLeosTceCfmFrameLossMsgFrameLossNear=wwpLeosTceCfmFrameLossMsgFrameLossNear, wwpLeosCfmServiceLMMInterval=wwpLeosCfmServiceLMMInterval, wwpLeosCfmExtMEPDirection=wwpLeosCfmExtMEPDirection, wwpLeosCfmExtOamPortIndex=wwpLeosCfmExtOamPortIndex, wwpLeosCfmServiceMAID=wwpLeosCfmServiceMAID, wwpLeosCfmServiceInvalidInterfaceStatusTLV=wwpLeosCfmServiceInvalidInterfaceStatusTLV, wwpLeosCfmExtInterfaceStackOperState=wwpLeosCfmExtInterfaceStackOperState, wwpLeosCfmLinkTraceMsgTable=wwpLeosCfmLinkTraceMsgTable, wwpLeosCfmServiceAlarmTime=wwpLeosCfmServiceAlarmTime, wwpLeosCfmMaintenanceDomainStatus=wwpLeosCfmMaintenanceDomainStatus, wwpLeosCfmGlobalDelayMeasurementStats=wwpLeosCfmGlobalDelayMeasurementStats, wwpLeosTceCfmMEPRowStatus=wwpLeosTceCfmMEPRowStatus, wwpLeosCfmLinkTraceMsgReplyIngressPort=wwpLeosCfmLinkTraceMsgReplyIngressPort, wwpLeosCfmServiceVlan=wwpLeosCfmServiceVlan, wwpLeosCfmStatsRxTotalValidFrames=wwpLeosCfmStatsRxTotalValidFrames, wwpLeosCfmTotalTxLBM=wwpLeosCfmTotalTxLBM, wwpLeosCfmServiceAlarmPriority=wwpLeosCfmServiceAlarmPriority, wwpLeosCfmFrameLoss=wwpLeosCfmFrameLoss, wwpLeosCfmExtMEPBlockOppositeFaultTime=wwpLeosCfmExtMEPBlockOppositeFaultTime, wwpLeosCfmRemoteMEPAccelerated=wwpLeosCfmRemoteMEPAccelerated, wwpLeosCfmExtMEPStatsInOrderLBRReceived=wwpLeosCfmExtMEPStatsInOrderLBRReceived, wwpLeosCfmServiceCfmMaintAssocName=wwpLeosCfmServiceCfmMaintAssocName, wwpLeosCfmExtMEPStatsLTRTxmt=wwpLeosCfmExtMEPStatsLTRTxmt, wwpLeosCfmMEPLTMPriority=wwpLeosCfmMEPLTMPriority, wwpLeosTceCfmMEPDMMJitter=wwpLeosTceCfmMEPDMMJitter, wwpLeosCfmExtMEPLastStatsDMMMinDelay=wwpLeosCfmExtMEPLastStatsDMMMinDelay, wwpLeosCfmExtMEPDMMMaxJitter=wwpLeosCfmExtMEPDMMMaxJitter, wwpLeosCfmServiceTotalRxInvalidRelayActionLTR=wwpLeosCfmServiceTotalRxInvalidRelayActionLTR, wwpLeosCfmExtMEPStatsCCMInSequenceReceived=wwpLeosCfmExtMEPStatsCCMInSequenceReceived, wwpLeosCfmExtMEPLMMFrameLossFar=wwpLeosCfmExtMEPLMMFrameLossFar, wwpLeosCfmExtInterfaceMipEntry=wwpLeosCfmExtInterfaceMipEntry, wwpLeosCfmExtMEPStatsInvalidPortStatusTLVReceived=wwpLeosCfmExtMEPStatsInvalidPortStatusTLVReceived, wwpLeosCfmDelay=wwpLeosCfmDelay, wwpLeosTceCfmFrameLossMsgFarLossThreshold=wwpLeosTceCfmFrameLossMsgFarLossThreshold, wwpLeosCfmExtMEPStatsMepIdErrorCCMReceived=wwpLeosCfmExtMEPStatsMepIdErrorCCMReceived, wwpLeosCfmExtMEPRowStatus=wwpLeosCfmExtMEPRowStatus, wwpLeosTceCfmLoopbackMsgTargetMacAddr=wwpLeosTceCfmLoopbackMsgTargetMacAddr, wwpLeosCfmMipEntry=wwpLeosCfmMipEntry, wwpLeosCfmMaintenanceDomainIndex=wwpLeosCfmMaintenanceDomainIndex, wwpLeosTceCfmMipMacAddr=wwpLeosTceCfmMipMacAddr, wwpLeosCfmExtInterfaceStackLevel=wwpLeosCfmExtInterfaceStackLevel, wwpLeosCfmExtLinkTraceMsgReplyMEPID=wwpLeosCfmExtLinkTraceMsgReplyMEPID, wwpLeosCfmServiceNumActiveMEP=wwpLeosCfmServiceNumActiveMEP, wwpLeosCfmLinkTraceMsgTargetMacAddr=wwpLeosCfmLinkTraceMsgTargetMacAddr, wwpLeosCfmMIBConformance=wwpLeosCfmMIBConformance, wwpLeosTceCfmMipStatus=wwpLeosTceCfmMipStatus, wwpLeosTceCfmMEPLogicalPortName=wwpLeosTceCfmMEPLogicalPortName, wwpLeosCfmGlobalFrameBudget=wwpLeosCfmGlobalFrameBudget, wwpLeosCfmLoopbackMsgCount=wwpLeosCfmLoopbackMsgCount, wwpLeosCfmFrameLossMsgRowStatus=wwpLeosCfmFrameLossMsgRowStatus, wwpLeosCfmRemoteMEPAdminState=wwpLeosCfmRemoteMEPAdminState, wwpLeosTceCfmLoopbackMsgLocalMEPID=wwpLeosTceCfmLoopbackMsgLocalMEPID, wwpLeosCfmExtMEPLastStatsLTMPriority=wwpLeosCfmExtMEPLastStatsLTMPriority, wwpLeosCfmExtLoopbackMsgTable=wwpLeosCfmExtLoopbackMsgTable, wwpLeosCfmFrameLossMsgRepeat=wwpLeosCfmFrameLossMsgRepeat, wwpLeosCfmExtMEPLastStatsPriority=wwpLeosCfmExtMEPLastStatsPriority, wwpLeosCfmMEPNumLbmTxmt=wwpLeosCfmMEPNumLbmTxmt, wwpLeosCfmTotalTxLMM=wwpLeosCfmTotalTxLMM, wwpLeosCfmServiceFaultDesc=wwpLeosCfmServiceFaultDesc, wwpLeosCfmMipCCMDbLastMacStatus=wwpLeosCfmMipCCMDbLastMacStatus, wwpLeosCfmServiceDMMInterval=wwpLeosCfmServiceDMMInterval, wwpLeosTceCfmMEPMacAddr=wwpLeosTceCfmMEPMacAddr, wwpLeosTceCfmDelayMsgServiceName=wwpLeosTceCfmDelayMsgServiceName, wwpLeosCfmTotalTxDMM=wwpLeosCfmTotalTxDMM, wwpLeosCfmExtDelayMsgEntry=wwpLeosCfmExtDelayMsgEntry, wwpLeosCfmMipCCMDbTable=wwpLeosCfmMipCCMDbTable, wwpLeosCfmRemoteMEPCCMLossEntry=wwpLeosCfmRemoteMEPCCMLossEntry, wwpLeosCfmLBMDefaultCount=wwpLeosCfmLBMDefaultCount, wwpLeosCfmExtMEPStatsLMRTimeout=wwpLeosCfmExtMEPStatsLMRTimeout, wwpLeosCfmDelayMsgCount=wwpLeosCfmDelayMsgCount, wwpLeosTceCfmDelayMsgEntry=wwpLeosTceCfmDelayMsgEntry, wwpLeosCfmExtInterfaceStackEntry=wwpLeosCfmExtInterfaceStackEntry, wwpLeosCfmExtInterfaceStackTable=wwpLeosCfmExtInterfaceStackTable, wwpLeosTceCfmMEPRxUnexpectedLoopbackReply=wwpLeosTceCfmMEPRxUnexpectedLoopbackReply, wwpLeosCfmExtInterfaceStackServiceInstanceIndex=wwpLeosCfmExtInterfaceStackServiceInstanceIndex, wwpLeosTceCfmPortStackPgid=wwpLeosTceCfmPortStackPgid, wwpLeosCfmExtMIP=wwpLeosCfmExtMIP, wwpLeosCfmLinkTraceMsgEntry=wwpLeosCfmLinkTraceMsgEntry, SendState=SendState, wwpLeosTceCfmMEPNumLoopbackRepliesTxmt=wwpLeosTceCfmMEPNumLoopbackRepliesTxmt, wwpLeosCfmExtInterfaceMipTable=wwpLeosCfmExtInterfaceMipTable, wwpLeosCfmLinkTraceMsgVsIndex=wwpLeosCfmLinkTraceMsgVsIndex, wwpLeosCfmServiceCrossConnectErrorFlag=wwpLeosCfmServiceCrossConnectErrorFlag, wwpLeosCfmExtMEPStatsOutOfOrderLBRReceived=wwpLeosCfmExtMEPStatsOutOfOrderLBRReceived, wwpLeosTceCfmFrameLossMsgServiceName=wwpLeosTceCfmFrameLossMsgServiceName, wwpLeosCfmTotalRxOOOLBR=wwpLeosCfmTotalRxOOOLBR, wwpLeosCfmStatsTxFloodedFrames=wwpLeosCfmStatsTxFloodedFrames, wwpLeosTceCfmFrameLossMsgTargetMacAddr=wwpLeosTceCfmFrameLossMsgTargetMacAddr, wwpLeosCfmServiceTotalRxOutOfOrderLBR=wwpLeosCfmServiceTotalRxOutOfOrderLBR, wwpLeosTceCfmLoopbackMsgTotalRxLbrIo=wwpLeosTceCfmLoopbackMsgTotalRxLbrIo, wwpLeosCfmTotalRxInvalidLBR=wwpLeosCfmTotalRxInvalidLBR, wwpLeosCfmExtMEPStatsTable=wwpLeosCfmExtMEPStatsTable, wwpLeosCfmDelayMsgTable=wwpLeosCfmDelayMsgTable, wwpLeosCfmExtMEPServiceInstanceName=wwpLeosCfmExtMEPServiceInstanceName, wwpLeosCfmLinkTraceMsgReplyRelayAction=wwpLeosCfmLinkTraceMsgReplyRelayAction, wwpLeosCfmDelayMsgEntry=wwpLeosCfmDelayMsgEntry, wwpLeosTceCfmMipRDI=wwpLeosTceCfmMipRDI, wwpLeosTceCfmDelayMsgDelay=wwpLeosTceCfmDelayMsgDelay, wwpLeosCfmTotalTxLTR=wwpLeosCfmTotalTxLTR, wwpLeosCfmExtMEPLastStatsLBMCount=wwpLeosCfmExtMEPLastStatsLBMCount, wwpLeosCfmLinkTraceMsgReplyEgressPort=wwpLeosCfmLinkTraceMsgReplyEgressPort, wwpLeosCfmStatsTotalTx=wwpLeosCfmStatsTotalTx, wwpLeosCfmExtMEPLastStatsDMMMaxDelay=wwpLeosCfmExtMEPLastStatsDMMMaxDelay, wwpLeosCfmFrameLossNearFaultTrap=wwpLeosCfmFrameLossNearFaultTrap, wwpLeosCfmExtInterfaceMipInterfaceIndex=wwpLeosCfmExtInterfaceMipInterfaceIndex, wwpLeosCfmExtMipTable=wwpLeosCfmExtMipTable, wwpLeosCfmExtMEPMacAddr=wwpLeosCfmExtMEPMacAddr, wwpLeosCfmTotalRxCCMSequenceError=wwpLeosCfmTotalRxCCMSequenceError, wwpLeosCfmMEPEncapsulation=wwpLeosCfmMEPEncapsulation, wwpLeosCfmRemoteMEPServiceName=wwpLeosCfmRemoteMEPServiceName, wwpLeosCfmFrameLossMsgTargetMacAddr=wwpLeosCfmFrameLossMsgTargetMacAddr, wwpLeosTceCfmMipBayIndex=wwpLeosTceCfmMipBayIndex, wwpLeosCfmServiceTotalRxNotInSequenceCCM=wwpLeosCfmServiceTotalRxNotInSequenceCCM, wwpLeosCfmExtFrameLossMsgEntry=wwpLeosCfmExtFrameLossMsgEntry, wwpLeosCfmStatsTotalRx=wwpLeosCfmStatsTotalRx, wwpLeosCfmExtMEPStatsRxInvalidCCM=wwpLeosCfmExtMEPStatsRxInvalidCCM, wwpLeosTceCfmPortStackSubPortType=wwpLeosTceCfmPortStackSubPortType, wwpLeosTceCfmMEPNumLbmReceived=wwpLeosTceCfmMEPNumLbmReceived, wwpLeosTceCfmFrameLossMsgTotalRxLmm=wwpLeosTceCfmFrameLossMsgTotalRxLmm, wwpLeosCfmMEPLogicalPortName=wwpLeosCfmMEPLogicalPortName, wwpLeosTceCfmDelayMsgRepeatInterval=wwpLeosTceCfmDelayMsgRepeatInterval, wwpLeosCfmExtMEPStatsCCMTxmt=wwpLeosCfmExtMEPStatsCCMTxmt, wwpLeosCfmTotalTxLMR=wwpLeosCfmTotalTxLMR, wwpLeosCfmServiceDefaultMEPType=wwpLeosCfmServiceDefaultMEPType, wwpLeosCfmExtInterfaceStackMEPId=wwpLeosCfmExtInterfaceStackMEPId, wwpLeosCfmServiceTotalRxCCMIntervalErrorCCM=wwpLeosCfmServiceTotalRxCCMIntervalErrorCCM, wwpLeosCfmExtMEPNextLTMSeqNumber=wwpLeosCfmExtMEPNextLTMSeqNumber, wwpLeosTceCfmFrameLossMsgCount=wwpLeosTceCfmFrameLossMsgCount, wwpLeosCfmExtMEPNextLbmSeqNumber=wwpLeosCfmExtMEPNextLbmSeqNumber, wwpLeosCfmExtInterfaceStackMacAddress=wwpLeosCfmExtInterfaceStackMacAddress, wwpLeosCfmTotalRxValidLTR=wwpLeosCfmTotalRxValidLTR, wwpLeosCfmRemoteMEPLastPortStatus=wwpLeosCfmRemoteMEPLastPortStatus, wwpLeosCfmMEPPBTBvid=wwpLeosCfmMEPPBTBvid, wwpLeosCfmServiceFaultTime=wwpLeosCfmServiceFaultTime, wwpLeosCfmExtLinkTraceMsgReplyIngressPortStr=wwpLeosCfmExtLinkTraceMsgReplyIngressPortStr, wwpLeosCfmServiceTotalRxInvalidLBR=wwpLeosCfmServiceTotalRxInvalidLBR, wwpLeosCfmExtMEPStatsInvalidSenderIDTLVReceived=wwpLeosCfmExtMEPStatsInvalidSenderIDTLVReceived, CfmMAID=CfmMAID, wwpLeosCfmServiceRxTotalInvalidFrames=wwpLeosCfmServiceRxTotalInvalidFrames, wwpLeosCfmLinkTraceMsgTTL=wwpLeosCfmLinkTraceMsgTTL, wwpLeosCfmExtMEPDMMMaxDelay=wwpLeosCfmExtMEPDMMMaxDelay, wwpLeosCfmExtInterfaceMipLevel=wwpLeosCfmExtInterfaceMipLevel, wwpLeosCfmExtMEPStatsLBRTxmt=wwpLeosCfmExtMEPStatsLBRTxmt, wwpLeosCfmExtMEPLastStatsFrameLossBadSequence=wwpLeosCfmExtMEPLastStatsFrameLossBadSequence, wwpLeosTceCfmMEPNumLoopbackRepliesReceived=wwpLeosTceCfmMEPNumLoopbackRepliesReceived, wwpLeosCfmLoopbackMsgDefaultTimeout=wwpLeosCfmLoopbackMsgDefaultTimeout, wwpLeosCfmRemoteMEPRDIErrorFlag=wwpLeosCfmRemoteMEPRDIErrorFlag, wwpLeosCfmMipTable=wwpLeosCfmMipTable, wwpLeosCfmServiceMaintAssocName=wwpLeosCfmServiceMaintAssocName, wwpLeosCfmExtMEPStatsTotalInvalidLTMReceived=wwpLeosCfmExtMEPStatsTotalInvalidLTMReceived, wwpLeosCfmGlobalLBMDefaultTimeout=wwpLeosCfmGlobalLBMDefaultTimeout, wwpLeosCfmServiceRMEPHoldTime=wwpLeosCfmServiceRMEPHoldTime, wwpLeosTceCfmPortStackEgressXformTagValue2=wwpLeosTceCfmPortStackEgressXformTagValue2, wwpLeosTceCfmMEPLeadPortShelfIndex=wwpLeosTceCfmMEPLeadPortShelfIndex, wwpLeosTceCfmStack=wwpLeosTceCfmStack, wwpLeosCfmExtMEPDelayHistoryAveDelay=wwpLeosCfmExtMEPDelayHistoryAveDelay, wwpLeosCfmServiceTotalRxInSequenceCCM=wwpLeosCfmServiceTotalRxInSequenceCCM, wwpLeosCfmFrameLossMsgPriority=wwpLeosCfmFrameLossMsgPriority, wwpLeosTceCfmMEPNumLMMSent=wwpLeosTceCfmMEPNumLMMSent, wwpLeosCfmDelayMsgRepeat=wwpLeosCfmDelayMsgRepeat, wwpLeosCfmExtDelayMsgTargetMEPID=wwpLeosCfmExtDelayMsgTargetMEPID, wwpLeosCfmTotalRxvalidLBM=wwpLeosCfmTotalRxvalidLBM, wwpLeosCfmMEPNumDMMSent=wwpLeosCfmMEPNumDMMSent, wwpLeosCfmExtLinkTraceMsgTTL=wwpLeosCfmExtLinkTraceMsgTTL, wwpLeosCfmExtJitterFaultTrap=wwpLeosCfmExtJitterFaultTrap, wwpLeosCfmMipVid=wwpLeosCfmMipVid, wwpLeosCfmExtInterfaceStackPortName=wwpLeosCfmExtInterfaceStackPortName, wwpLeosCfmGlobalLoopbackMsgStatsClear=wwpLeosCfmGlobalLoopbackMsgStatsClear, wwpLeosCfmExtMEPCCMState=wwpLeosCfmExtMEPCCMState, wwpLeosCfmExtLinkTraceMsgReplyIngressAction=wwpLeosCfmExtLinkTraceMsgReplyIngressAction, wwpLeosCfmServiceClearStats=wwpLeosCfmServiceClearStats, wwpLeosTceCfmDelay=wwpLeosTceCfmDelay, wwpLeosCfmServiceFrameBudgetTable=wwpLeosCfmServiceFrameBudgetTable, wwpLeosCfmMEPLMMFrameLossNear=wwpLeosCfmMEPLMMFrameLossNear, wwpLeosCfmExtLinkTraceMsgLocalMepID=wwpLeosCfmExtLinkTraceMsgLocalMepID, wwpLeosCfmLinkTraceMsgReplyTable=wwpLeosCfmLinkTraceMsgReplyTable, wwpLeosCfmRemoteMEPOperState=wwpLeosCfmRemoteMEPOperState, wwpLeosCfmExtMEPDelayHistoryStopTime=wwpLeosCfmExtMEPDelayHistoryStopTime, wwpLeosTceCfmLoopback=wwpLeosTceCfmLoopback, wwpLeosCfmServiceTotalRxInvalidLTR=wwpLeosCfmServiceTotalRxInvalidLTR, wwpLeosCfmExtDelayMsgMaxJitterThreshold=wwpLeosCfmExtDelayMsgMaxJitterThreshold, wwpLeosCfmServiceFrameBudgetEntry=wwpLeosCfmServiceFrameBudgetEntry, wwpLeosCfmServiceStatsClear=wwpLeosCfmServiceStatsClear, wwpLeosCfmFrameLossMsgTable=wwpLeosCfmFrameLossMsgTable, wwpLeosTceCfmDelayMsgTotalRxDmm=wwpLeosTceCfmDelayMsgTotalRxDmm, wwpLeosCfmMEPDMMDelay=wwpLeosCfmMEPDMMDelay, wwpLeosCfmServiceTotalRxInvalidCCM=wwpLeosCfmServiceTotalRxInvalidCCM, wwpLeosTceCfmDelayMsgPriority=wwpLeosTceCfmDelayMsgPriority, Dot1agCfmMaintDomainName=Dot1agCfmMaintDomainName, wwpLeosCfmExtDelayMsgPriority=wwpLeosCfmExtDelayMsgPriority, wwpLeosCfmExtMEPStatsInvalidLMMReceived=wwpLeosCfmExtMEPStatsInvalidLMMReceived, wwpLeosCfmExtMEPStatsMDLevelXconCCMReceived=wwpLeosCfmExtMEPStatsMDLevelXconCCMReceived, wwpLeosTceCfmFrameLossMsgAction=wwpLeosTceCfmFrameLossMsgAction, wwpLeosCfmExtInterfaceStackServiceInstanceName=wwpLeosCfmExtInterfaceStackServiceInstanceName, wwpLeosTceCfmDelayMsgLocalMEPId=wwpLeosTceCfmDelayMsgLocalMEPId, wwpLeosCfmExtLoopbackMsgAction=wwpLeosCfmExtLoopbackMsgAction, wwpLeosCfmEtherType=wwpLeosCfmEtherType, wwpLeosCfmExtInterfaceStackInterfaceIndex=wwpLeosCfmExtInterfaceStackInterfaceIndex, wwpLeosTceCfmFrameLossMsgTargetMEPID=wwpLeosTceCfmFrameLossMsgTargetMEPID, wwpLeosCfmGlobalControlModuleFrameBudget=wwpLeosCfmGlobalControlModuleFrameBudget)
mibBuilder.exportSymbols("WWP-LEOS-CFM-MIB", wwpLeosTceCfmMipCCMDbMEPID=wwpLeosTceCfmMipCCMDbMEPID, wwpLeosCfmFaultTrapSet=wwpLeosCfmFaultTrapSet, wwpLeosTceCfmFrameLossMsgLocalMEPId=wwpLeosTceCfmFrameLossMsgLocalMEPId, wwpLeosCfmFrameLossMsgFlnThreshold=wwpLeosCfmFrameLossMsgFlnThreshold, wwpLeosCfmExtOamPortTable=wwpLeosCfmExtOamPortTable, wwpLeosCfmExtMEPStatsDMRTxmt=wwpLeosCfmExtMEPStatsDMRTxmt, wwpLeosCfmMEPNumLTRepliesReceived=wwpLeosCfmMEPNumLTRepliesReceived, wwpLeosCfmLinkTraceMsgRowStatus=wwpLeosCfmLinkTraceMsgRowStatus, wwpLeosTceCfmDelayMsgJitter=wwpLeosTceCfmDelayMsgJitter, wwpLeosCfmLinkTraceMsgReplyMEPID=wwpLeosCfmLinkTraceMsgReplyMEPID, wwpLeosCfmTotalRxInvalidLBM=wwpLeosCfmTotalRxInvalidLBM, wwpLeosCfmMEPId=wwpLeosCfmMEPId, wwpLeosCfmServiceTotalRxInorderLBR=wwpLeosCfmServiceTotalRxInorderLBR, wwpLeosCfmTotalRxInvalidPortStatusTLV=wwpLeosCfmTotalRxInvalidPortStatusTLV, wwpLeosTceCfmLoopbackMsgSubPortName=wwpLeosTceCfmLoopbackMsgSubPortName, wwpLeosTceCfmMEPServiceName=wwpLeosTceCfmMEPServiceName, wwpLeosTceCfmDelayMsgMinDelay=wwpLeosTceCfmDelayMsgMinDelay, wwpLeosCfmExtMEPLastStatsDMMMaxJitter=wwpLeosCfmExtMEPLastStatsDMMMaxJitter, wwpLeosTceCfmMEPPBTEtype=wwpLeosTceCfmMEPPBTEtype, wwpLeosTceCfmMEPNumLTRepliesReceived=wwpLeosTceCfmMEPNumLTRepliesReceived, wwpLeosCfmMEPLMMFrameLossFar=wwpLeosCfmMEPLMMFrameLossFar, wwpLeosCfmRemoteMEPNumLMMSent=wwpLeosCfmRemoteMEPNumLMMSent, wwpLeosCfmServiceTotalTxLTR=wwpLeosCfmServiceTotalTxLTR, wwpLeosCfmExtMEPBlockOppositeFaultCurrent=wwpLeosCfmExtMEPBlockOppositeFaultCurrent, wwpLeosTceCfmPortStackBayIndex=wwpLeosTceCfmPortStackBayIndex, wwpLeosTceCfmPortStackVsPbtName=wwpLeosTceCfmPortStackVsPbtName, wwpLeosCfmServiceTotalRxLMR=wwpLeosCfmServiceTotalRxLMR, wwpLeosCfmLinkTraceMsgReplyIngressMacAddr=wwpLeosCfmLinkTraceMsgReplyIngressMacAddr, wwpLeosCfmMaintenanceDomainServiceCount=wwpLeosCfmMaintenanceDomainServiceCount, wwpLeosCfmMEPTable=wwpLeosCfmMEPTable, wwpLeosTceCfmDelayMsgJitterThreshold=wwpLeosTceCfmDelayMsgJitterThreshold, wwpLeosCfmExtMEPStatsUnexpectedDMRReceived=wwpLeosCfmExtMEPStatsUnexpectedDMRReceived, wwpLeosCfmFrameLossMsgCount=wwpLeosCfmFrameLossMsgCount, wwpLeosCfmServiceStatisticsTable=wwpLeosCfmServiceStatisticsTable, wwpLeosTceCfmPortStackServiceType=wwpLeosTceCfmPortStackServiceType, wwpLeosCfmTotalTxDMR=wwpLeosCfmTotalTxDMR, wwpLeosTceCfmMEPSubPortIndex=wwpLeosTceCfmMEPSubPortIndex, wwpLeosCfmMipCCMDbMacAddr=wwpLeosCfmMipCCMDbMacAddr, wwpLeosCfmExtMEPId=wwpLeosCfmExtMEPId, wwpLeosTceCfmFrameLossMsgTotalTxLmr=wwpLeosTceCfmFrameLossMsgTotalTxLmr, wwpLeosCfmServiceCfmControlModuleFrameBudget=wwpLeosCfmServiceCfmControlModuleFrameBudget, wwpLeosCfmPortStackTable=wwpLeosCfmPortStackTable, wwpLeosCfmTotalRxInvalidCCM=wwpLeosCfmTotalRxInvalidCCM, wwpLeosCfmExtMEPStatsInvalidLTRAction=wwpLeosCfmExtMEPStatsInvalidLTRAction, wwpLeosTceCfmMipCCMdbNumCCMRx=wwpLeosTceCfmMipCCMdbNumCCMRx, wwpLeosCfmBlockOppositeMEPSetTrap=wwpLeosCfmBlockOppositeMEPSetTrap, wwpLeosCfmExtMEPStatsValidCCMReceived=wwpLeosCfmExtMEPStatsValidCCMReceived, wwpLeosCfmExtMEPDelayHistoryInterval=wwpLeosCfmExtMEPDelayHistoryInterval, wwpLeosCfmExtLinkTraceMsgEntry=wwpLeosCfmExtLinkTraceMsgEntry, wwpLeosTceCfmMipLiType=wwpLeosTceCfmMipLiType, wwpLeosTceCfmLoopbackMsgEntry=wwpLeosTceCfmLoopbackMsgEntry, wwpLeosCfmExtMEPDMMMinDelay=wwpLeosCfmExtMEPDMMMinDelay, wwpLeosCfmLinkTraceMsgServiceName=wwpLeosCfmLinkTraceMsgServiceName, wwpLeosTceCfmMEPLeadPortModuleIndex=wwpLeosTceCfmMEPLeadPortModuleIndex, wwpLeosCfmRemoteMEPShelfIndex=wwpLeosCfmRemoteMEPShelfIndex, wwpLeosCfmExtDelayMsgTable=wwpLeosCfmExtDelayMsgTable, wwpLeosCfmExtDelayMsgRepeat=wwpLeosCfmExtDelayMsgRepeat, wwpLeosCfmMIP=wwpLeosCfmMIP, wwpLeosTceCfmMEPLMMFrameLossNear=wwpLeosTceCfmMEPLMMFrameLossNear, wwpLeosCfmMEPNumDMRReceived=wwpLeosCfmMEPNumDMRReceived, wwpLeosCfmState=wwpLeosCfmState, wwpLeosCfmMEPMacAddr=wwpLeosCfmMEPMacAddr, wwpLeosCfmDelayMsgPortId=wwpLeosCfmDelayMsgPortId, wwpLeosCfmRemoteMEPCCMLossCount=wwpLeosCfmRemoteMEPCCMLossCount, wwpLeosTceCfmMipLastPortStatus=wwpLeosTceCfmMipLastPortStatus, wwpLeosTceCfmPortStackEntry=wwpLeosTceCfmPortStackEntry, wwpLeosTceCfmMipCCMDbTable=wwpLeosTceCfmMipCCMDbTable, wwpLeosCfmRxInvalidOpCodeDropped=wwpLeosCfmRxInvalidOpCodeDropped, wwpLeosCfmGlobalLBMDefaultCount=wwpLeosCfmGlobalLBMDefaultCount, wwpLeosCfmGlobalFrameBudgetSlotIndex=wwpLeosCfmGlobalFrameBudgetSlotIndex, wwpLeosCfmExtLoopbackMsgCount=wwpLeosCfmExtLoopbackMsgCount, wwpLeosCfmServiceTotalRxMEPIDErrorCCM=wwpLeosCfmServiceTotalRxMEPIDErrorCCM, wwpLeosCfmServiceRMEPFailureFlag=wwpLeosCfmServiceRMEPFailureFlag, wwpLeosCfmExtMEPBlockOppositeFaultThreshold=wwpLeosCfmExtMEPBlockOppositeFaultThreshold, wwpLeosTceCfmLoopbackMsgTotalTxLbm=wwpLeosTceCfmLoopbackMsgTotalTxLbm, wwpLeosTceCfmMipCCMDb=wwpLeosTceCfmMipCCMDb, wwpLeosCfmMEPAdminState=wwpLeosCfmMEPAdminState, wwpLeosTceCfmMEPLMMFrameLossFar=wwpLeosTceCfmMEPLMMFrameLossFar, wwpLeosCfmExtLinkTraceMsgTargetMacAddr=wwpLeosCfmExtLinkTraceMsgTargetMacAddr, wwpLeosTceCfmFrameLossMsgRepeatInterval=wwpLeosTceCfmFrameLossMsgRepeatInterval, wwpLeosCfmLinkTraceMsgTotalTxLtm=wwpLeosCfmLinkTraceMsgTotalTxLtm, wwpLeosCfmRemoteMEPTable=wwpLeosCfmRemoteMEPTable, wwpLeosCfmExtMEPStatsTotalValidFramesReceived=wwpLeosCfmExtMEPStatsTotalValidFramesReceived, wwpLeosCfmExtMipVid=wwpLeosCfmExtMipVid, wwpLeosCfmServiceStatus=wwpLeosCfmServiceStatus, wwpLeosTceCfmMEPTable=wwpLeosTceCfmMEPTable, wwpLeosTceCfmDelayMsgTargetMEPID=wwpLeosTceCfmDelayMsgTargetMEPID, wwpLeosCfmRemoteMEPNumLMRReceived=wwpLeosCfmRemoteMEPNumLMRReceived, wwpLesoCfmRxInvalidEtypeDropped=wwpLesoCfmRxInvalidEtypeDropped, wwpLeosCfmExtOamPort=wwpLeosCfmExtOamPort, wwpLeosTceCfmMipPgid=wwpLeosTceCfmMipPgid, wwpLeosCfmPortStackType=wwpLeosCfmPortStackType, wwpLeosCfmServiceTotalRxDMR=wwpLeosCfmServiceTotalRxDMR, wwpLeosCfmInvalidLTRRelayAction=wwpLeosCfmInvalidLTRRelayAction, wwpLeosCfmRemoteMEPCCMErrorFlag=wwpLeosCfmRemoteMEPCCMErrorFlag, wwpLeosCfmMIBObjects=wwpLeosCfmMIBObjects, wwpLeosCfmRemoteMEPServiceClear=wwpLeosCfmRemoteMEPServiceClear, wwpLeosCfmServiceTotalRxUnexpectedLBR=wwpLeosCfmServiceTotalRxUnexpectedLBR, wwpLeosCfmLoopbackMsgPriority=wwpLeosCfmLoopbackMsgPriority, wwpLeosCfmTotalRxCCMInSequence=wwpLeosCfmTotalRxCCMInSequence, wwpLeosCfmExtVlanId=wwpLeosCfmExtVlanId, wwpLeosCfmRemoteMEPCCMLossNum=wwpLeosCfmRemoteMEPCCMLossNum, wwpLeosCfmMEPDMMMaxJitter=wwpLeosCfmMEPDMMMaxJitter, wwpLeosCfmExtMipStatus=wwpLeosCfmExtMipStatus, wwpLeosCfmMEPLeadPortShelfIndex=wwpLeosCfmMEPLeadPortShelfIndex, wwpLeosCfmRemoteMEPNumDMRReceived=wwpLeosCfmRemoteMEPNumDMRReceived, wwpLeosCfmRemoteMEPHoldState=wwpLeosCfmRemoteMEPHoldState, wwpLeosTceCfmFrameLossMsgSubPortName=wwpLeosTceCfmFrameLossMsgSubPortName, wwpLeosCfmFaultTrapState=wwpLeosCfmFaultTrapState, wwpLeosCfmStatsRxTotalNotValidatedFrames=wwpLeosCfmStatsRxTotalNotValidatedFrames, wwpLeosCfmLinkTraceMsgReplyMPMacAddr=wwpLeosCfmLinkTraceMsgReplyMPMacAddr, wwpLeosCfmDmmTrap=wwpLeosCfmDmmTrap, wwpLeosCfmServiceAccelerated=wwpLeosCfmServiceAccelerated, wwpLeosTceCfmPortStackSubPortName=wwpLeosTceCfmPortStackSubPortName, wwpLeosCfmExtMEPCCMPriority=wwpLeosCfmExtMEPCCMPriority, wwpLeosCfmService=wwpLeosCfmService, wwpLeosCfmExtInterfaceMipServiceInstanceType=wwpLeosCfmExtInterfaceMipServiceInstanceType, wwpLeosCfmExtMEPStatsValidLBMReceived=wwpLeosCfmExtMEPStatsValidLBMReceived, wwpLeosCfmRemoteMEPDeleteAll=wwpLeosCfmRemoteMEPDeleteAll, wwpLeosTceCfmMEPDirection=wwpLeosTceCfmMEPDirection, wwpLeosTceCfmMIBObj=wwpLeosTceCfmMIBObj, wwpLeosCfmExtMEPDelayHistoryMinDelay=wwpLeosCfmExtMEPDelayHistoryMinDelay, wwpLeosTceCfmMEPVsPbtName=wwpLeosTceCfmMEPVsPbtName, wwpLeosCfmLinkTraceMsgReplyIngressPortStr=wwpLeosCfmLinkTraceMsgReplyIngressPortStr, wwpLeosCfmExtFaultTrapClear=wwpLeosCfmExtFaultTrapClear, wwpLeosCfmRemoteMEPNumDMMSent=wwpLeosCfmRemoteMEPNumDMMSent, wwpLeosCfmServiceTotalRxMAIDXconCCM=wwpLeosCfmServiceTotalRxMAIDXconCCM, wwpLeosCfmMEPNumLMRReceived=wwpLeosCfmMEPNumLMRReceived, wwpLeosCfmExtMEPAdminState=wwpLeosCfmExtMEPAdminState, wwpLeosTceCfmFrameLossMsgRowStatus=wwpLeosTceCfmFrameLossMsgRowStatus, wwpLeosCfmExtMEPLastStatsLMMReceived=wwpLeosCfmExtMEPLastStatsLMMReceived, wwpLeosTceCfmDelayMsgMaxJitter=wwpLeosTceCfmDelayMsgMaxJitter, wwpLeosCfmServiceCCMLossStatsState=wwpLeosCfmServiceCCMLossStatsState, wwpLeosCfmExtMEPStatsDMRReceived=wwpLeosCfmExtMEPStatsDMRReceived, wwpLeosCfmExtFrameLossMsgTargetMEPID=wwpLeosCfmExtFrameLossMsgTargetMEPID, wwpLeosCfmServiceName=wwpLeosCfmServiceName, wwpLeosCfmExtFrameLossMsgLocalMEPId=wwpLeosCfmExtFrameLossMsgLocalMEPId, wwpLeosCfmMIBCompliances=wwpLeosCfmMIBCompliances, wwpLeosCfmRemoteCfmMEPHoldState=wwpLeosCfmRemoteCfmMEPHoldState, wwpLeosTceCfmDelayMsgRowStatus=wwpLeosTceCfmDelayMsgRowStatus, wwpLeosCfmExtLinkTraceMsgAction=wwpLeosCfmExtLinkTraceMsgAction, wwpLeosCfmServiceTotalTxInvalidLTM=wwpLeosCfmServiceTotalTxInvalidLTM, wwpLeosCfmTotalRxInvalidLTR=wwpLeosCfmTotalRxInvalidLTR, wwpLeosTceCfmMEPOperState=wwpLeosTceCfmMEPOperState, wwpLeosCfmExtFrameLossMsgPriority=wwpLeosCfmExtFrameLossMsgPriority, wwpLeosTceCfmMEPNumLTMTxmt=wwpLeosTceCfmMEPNumLTMTxmt, wwpLeosTceCfmMEPNumUnexpectedLTRepliesReceived=wwpLeosTceCfmMEPNumUnexpectedLTRepliesReceived, wwpLeosTceCfmMEPRxContentMismatchLoopbackReply=wwpLeosTceCfmMEPRxContentMismatchLoopbackReply, wwpLeosCfmGlobalFrameClassifierMode=wwpLeosCfmGlobalFrameClassifierMode, wwpLeosCfmRemoteMEPBadSequence=wwpLeosCfmRemoteMEPBadSequence, wwpLeosCfmFaultTrapClear=wwpLeosCfmFaultTrapClear, wwpLeosTceCfmLoopbackMsgPriority=wwpLeosTceCfmLoopbackMsgPriority, wwpLeosCfmMipCCMDbRDIErrorFlag=wwpLeosCfmMipCCMDbRDIErrorFlag, wwpLeosCfmMEPDirection=wwpLeosCfmMEPDirection, wwpLeosCfmServiceRxTotalValidFrames=wwpLeosCfmServiceRxTotalValidFrames, wwpLeosCfmServiceTotalTxLBM=wwpLeosCfmServiceTotalTxLBM, wwpLeosCfmExtMipPort=wwpLeosCfmExtMipPort, wwpLeosCfmServiceIndex=wwpLeosCfmServiceIndex, wwpLeosCfmTotalRxContentMismatchLBR=wwpLeosCfmTotalRxContentMismatchLBR, wwpLeosCfmLoopbackMsgRowStatus=wwpLeosCfmLoopbackMsgRowStatus, wwpLeosCfmTotalRxLMR=wwpLeosCfmTotalRxLMR, wwpLeosCfmExtLoopbackMsgPriority=wwpLeosCfmExtLoopbackMsgPriority, wwpLeosTceCfmMEPNextLbmSeqNumber=wwpLeosTceCfmMEPNextLbmSeqNumber, wwpLeosTceCfmMEP=wwpLeosTceCfmMEP, wwpLeosCfmExtLinkTraceMsgReplyEntry=wwpLeosCfmExtLinkTraceMsgReplyEntry, wwpLeosCfmMaintenanceDomainLevel=wwpLeosCfmMaintenanceDomainLevel, wwpLeosCfmServiceTotalRxInvalidLBM=wwpLeosCfmServiceTotalRxInvalidLBM, wwpLeosCfmExtMEPLastStatsLBMToSend=wwpLeosCfmExtMEPLastStatsLBMToSend, wwpLeosCfmPbtFaultTrap=wwpLeosCfmPbtFaultTrap, wwpLeosCfmRemoteMEPCCMLossTable=wwpLeosCfmRemoteMEPCCMLossTable, wwpLeosTceCfmMipEntry=wwpLeosTceCfmMipEntry, wwpLeosCfmExtMEPInterfaceName=wwpLeosCfmExtMEPInterfaceName, wwpLeosCfmExtMEPStatsLBMTxmt=wwpLeosCfmExtMEPStatsLBMTxmt, wwpLeosCfmExtMEPClearStatistics=wwpLeosCfmExtMEPClearStatistics, wwpLeosCfmRemoteMEPPreviousShelfIndex=wwpLeosCfmRemoteMEPPreviousShelfIndex, wwpLeosTceCfmPortStackEgressXformTagEtype1=wwpLeosTceCfmPortStackEgressXformTagEtype1, wwpLeosCfmServiceTotalTxLBR=wwpLeosCfmServiceTotalTxLBR, wwpLeosCfmMEP=wwpLeosCfmMEP, wwpLeosCfmExtMEPLastStatsDMMMinJitter=wwpLeosCfmExtMEPLastStatsDMMMinJitter, wwpLeosCfmGlobalStatsClear=wwpLeosCfmGlobalStatsClear, wwpLeosCfmFrameLossMsgPortId=wwpLeosCfmFrameLossMsgPortId, wwpLeosCfmExtMEPStatsTotalInvalidMessageOverflowReceived=wwpLeosCfmExtMEPStatsTotalInvalidMessageOverflowReceived, wwpLeosCfmExtMEPLogicalPortName=wwpLeosCfmExtMEPLogicalPortName, wwpLeosCfmExtLinkTraceMsgTargetMEPID=wwpLeosCfmExtLinkTraceMsgTargetMEPID, wwpLeosCfmExtLinkTraceMsgReplyRelayAction=wwpLeosCfmExtLinkTraceMsgReplyRelayAction, wwpLeosCfmBadSequenceFaultTrap=wwpLeosCfmBadSequenceFaultTrap, wwpLeosCfmExtMEPStatsUnexpectedLTRReceived=wwpLeosCfmExtMEPStatsUnexpectedLTRReceived, wwpLeosTceCfmMEPId=wwpLeosTceCfmMEPId, wwpLeosTceCfmDelayMsgMaxDelay=wwpLeosTceCfmDelayMsgMaxDelay, wwpLeosCfmMaintenanceDomainMdFormat=wwpLeosCfmMaintenanceDomainMdFormat, wwpLeosCfmExtDelayMsgCount=wwpLeosCfmExtDelayMsgCount, wwpLeosCfmServiceRMEPAging=wwpLeosCfmServiceRMEPAging, wwpLeosCfmMaintenanceDomainMdName=wwpLeosCfmMaintenanceDomainMdName, wwpLeosCfmExtMEPStatsInvalidLMRReceived=wwpLeosCfmExtMEPStatsInvalidLMRReceived, wwpLeosTceCfmLoopbackMsgTargetMEPID=wwpLeosTceCfmLoopbackMsgTargetMEPID, wwpLeosCfmTotalTxLBR=wwpLeosCfmTotalTxLBR, wwpLeosCfmRemoteMEPEntry=wwpLeosCfmRemoteMEPEntry, wwpLeosCfmLinkTraceMsgReplyTargetMacAddr=wwpLeosCfmLinkTraceMsgReplyTargetMacAddr, wwpLeosCfmTotalRxInOderLBR=wwpLeosCfmTotalRxInOderLBR, wwpLeosTceCfmMEPCCMPriority=wwpLeosTceCfmMEPCCMPriority, wwpLeosCfmRemoteMEPTime=wwpLeosCfmRemoteMEPTime, wwpLeosCfmExtMEPStatsClear=wwpLeosCfmExtMEPStatsClear, wwpLeosCfmServiceFaultTable=wwpLeosCfmServiceFaultTable, wwpLeosCfmServiceInvalidSenderIDTLV=wwpLeosCfmServiceInvalidSenderIDTLV, wwpLeosCfmMipPort=wwpLeosCfmMipPort, wwpLeosCfmLoopbackMsgPortId=wwpLeosCfmLoopbackMsgPortId, wwpLeosTceCfmMEPNumCCMTxmt=wwpLeosTceCfmMEPNumCCMTxmt, wwpLeosCfmMipCCMDb=wwpLeosCfmMipCCMDb, wwpLeosCfmExtMEPLastStatsDMMReceived=wwpLeosCfmExtMEPLastStatsDMMReceived, wwpLeosCfmLinkTraceMsgReplyTTLIndex=wwpLeosCfmLinkTraceMsgReplyTTLIndex, wwpLeosCfmLoopbackMsgEntry=wwpLeosCfmLoopbackMsgEntry, wwpLeosCfmDot1adStrict=wwpLeosCfmDot1adStrict, wwpLeosCfmRemoteMEPPreviousModuleIndex=wwpLeosCfmRemoteMEPPreviousModuleIndex, wwpLeosCfmExtFrameLossMsgFlfThreshold=wwpLeosCfmExtFrameLossMsgFlfThreshold, wwpLeosCfmExtMEPStatsContentMismatchLBRReceived=wwpLeosCfmExtMEPStatsContentMismatchLBRReceived, wwpLeosCfmExtDelayMsgRepeatCount=wwpLeosCfmExtDelayMsgRepeatCount, wwpLeosCfmSlotIndex=wwpLeosCfmSlotIndex, wwpLeosCfmExtInterfaceMIP=wwpLeosCfmExtInterfaceMIP, wwpLeosCfmExtFrameLossFarFaultTrap=wwpLeosCfmExtFrameLossFarFaultTrap, wwpLeosCfmPortStackPort=wwpLeosCfmPortStackPort, wwpLeosCfmExtLinkTraceMsgReplyTTLIndex=wwpLeosCfmExtLinkTraceMsgReplyTTLIndex, wwpLeosTceCfmLoopbackMsgRowStatus=wwpLeosTceCfmLoopbackMsgRowStatus, wwpLeosTceCfmPortStackServiceIndex=wwpLeosTceCfmPortStackServiceIndex, wwpLeosCfmExtMEPDMMJitter=wwpLeosCfmExtMEPDMMJitter, wwpLeosCfmLinkTraceMsgPortId=wwpLeosCfmLinkTraceMsgPortId, wwpLeosTceCfmFrameLossMsgTotalRxLmr=wwpLeosTceCfmFrameLossMsgTotalRxLmr, wwpLeosCfmLoopbackMsgData=wwpLeosCfmLoopbackMsgData, wwpLeosCfmExtMEPStatsInvalidDMMReceived=wwpLeosCfmExtMEPStatsInvalidDMMReceived, wwpLeosCfmExtLinkTraceMsgReplyTable=wwpLeosCfmExtLinkTraceMsgReplyTable, wwpLeosCfmExtMEPDMMDelay=wwpLeosCfmExtMEPDMMDelay, wwpLeosTceCfmMipCCMDbIndex=wwpLeosTceCfmMipCCMDbIndex, wwpLeosCfmTotalRxValidCCM=wwpLeosCfmTotalRxValidCCM, wwpLeosCfmExtMEPOperState=wwpLeosCfmExtMEPOperState, wwpLeosCfmMEPSubPortName=wwpLeosCfmMEPSubPortName, wwpLeosCfmExtLoopbackMsgLocalMEPID=wwpLeosCfmExtLoopbackMsgLocalMEPID, wwpLeosTceCfmDelayMsgTargetMacAddr=wwpLeosTceCfmDelayMsgTargetMacAddr, wwpLeosTceCfmFrameLossMsgTable=wwpLeosTceCfmFrameLossMsgTable, wwpLeosCfmExtMEPLastStatsDMMTxmt=wwpLeosCfmExtMEPLastStatsDMMTxmt, wwpLeosCfmMipCCMDbMEPID=wwpLeosCfmMipCCMDbMEPID, wwpLeosCfmDelayMsgMaxJitterThreshold=wwpLeosCfmDelayMsgMaxJitterThreshold, wwpLeosCfmMipCcmDbState=wwpLeosCfmMipCcmDbState, wwpLeosTceCfmDelayMsgMinJitter=wwpLeosTceCfmDelayMsgMinJitter, wwpLeosCfmMEPPBTEtype=wwpLeosCfmMEPPBTEtype, wwpLeosCfmExtInterfaceStackPgid=wwpLeosCfmExtInterfaceStackPgid, wwpLeosCfmExtMEPStatsEntry=wwpLeosCfmExtMEPStatsEntry, wwpLeosCfmServiceCCMErrorFlag=wwpLeosCfmServiceCCMErrorFlag, wwpLeosCfmExtLinkTraceMsgReplyMPMacAddr=wwpLeosCfmExtLinkTraceMsgReplyMPMacAddr, wwpLeosCfmExtMEPStatsMAIDXconCCMReceived=wwpLeosCfmExtMEPStatsMAIDXconCCMReceived, wwpLeosCfmServiceMulticastDa=wwpLeosCfmServiceMulticastDa, wwpLeosTceCfmPortStackMepCount=wwpLeosTceCfmPortStackMepCount, wwpLeosTceCfmMEPDMMDelay=wwpLeosTceCfmMEPDMMDelay, wwpLeosTceCfmFrameLoss=wwpLeosTceCfmFrameLoss, wwpLeosCfmTotalRxCCMErrorOnMepId=wwpLeosCfmTotalRxCCMErrorOnMepId, wwpLeosCfmRemoteMEPMaxJitter=wwpLeosCfmRemoteMEPMaxJitter)
mibBuilder.exportSymbols("WWP-LEOS-CFM-MIB", wwpLeosCfmExtMEPAccelerated=wwpLeosCfmExtMEPAccelerated, wwpLeosCfmServiceTotalRxLMM=wwpLeosCfmServiceTotalRxLMM, wwpLeosCfmServiceCfmMaintAssocNameType=wwpLeosCfmServiceCfmMaintAssocNameType, wwpLeosCfmGlobalCCMStats=wwpLeosCfmGlobalCCMStats, wwpLeosCfmTotalRxDropBlockedOppositeMep=wwpLeosCfmTotalRxDropBlockedOppositeMep, wwpLeosCfmRemoteMEPNumCCMLost=wwpLeosCfmRemoteMEPNumCCMLost, wwpLeosCfmServiceCfmMAID=wwpLeosCfmServiceCfmMAID, wwpLeosCfmExtLinkTraceMsgReplyEgressAction=wwpLeosCfmExtLinkTraceMsgReplyEgressAction, wwpLeosCfmDelayMsgTargetMacAddr=wwpLeosCfmDelayMsgTargetMacAddr, wwpLeosCfmServiceTxTotalCCM=wwpLeosCfmServiceTxTotalCCM, wwpLeosCfmTotalRxDMM=wwpLeosCfmTotalRxDMM, wwpLeosCfmExtMEPStatsLTMTxmt=wwpLeosCfmExtMEPStatsLTMTxmt, wwpLeosCfmExtMEPLastStatsDMMDelay=wwpLeosCfmExtMEPLastStatsDMMDelay, wwpLeosCfmExtMEPDelayHistoryNumDMRReceived=wwpLeosCfmExtMEPDelayHistoryNumDMRReceived, wwpLeosTceCfmMEPEncapsulation=wwpLeosTceCfmMEPEncapsulation, wwpLeosCfmExtFrameLossMsgTable=wwpLeosCfmExtFrameLossMsgTable, wwpLeosCfmFrameLossMsgEntry=wwpLeosCfmFrameLossMsgEntry, wwpLeosTceCfmMipLevel=wwpLeosTceCfmMipLevel, wwpLeosCfmExtMEPLastStatsOutOfOrderLBRReceived=wwpLeosCfmExtMEPLastStatsOutOfOrderLBRReceived, wwpLeosCfmGlobalLossMeasurementMsgStatsClear=wwpLeosCfmGlobalLossMeasurementMsgStatsClear, wwpLeosCfmMEPPort=wwpLeosCfmMEPPort, wwpLeosCfmGlobalFrameBudgetEntry=wwpLeosCfmGlobalFrameBudgetEntry, wwpLeosCfmMEPNumLTMTxmt=wwpLeosCfmMEPNumLTMTxmt, wwpLeosCfmExtLinkTraceMsgSequenceNumber=wwpLeosCfmExtLinkTraceMsgSequenceNumber, wwpLeosCfmExtInterfaceStackInterfaceType=wwpLeosCfmExtInterfaceStackInterfaceType, wwpLeosCfmMipCCMDbTime=wwpLeosCfmMipCCMDbTime, wwpLeosCfmMEPNumLTRepliesTxmt=wwpLeosCfmMEPNumLTRepliesTxmt, wwpLeosTceCfmMEPPBTBvid=wwpLeosTceCfmMEPPBTBvid, wwpLeosCfmGlobalLinkTraceMsgStatsClear=wwpLeosCfmGlobalLinkTraceMsgStatsClear, wwpLeosCfmExtMEPDelayHistoryClear=wwpLeosCfmExtMEPDelayHistoryClear, wwpLeosCfmMEPRowStatus=wwpLeosCfmMEPRowStatus, wwpLeosCfmServiceNumRemoteMEP=wwpLeosCfmServiceNumRemoteMEP, wwpLeosCfmRemoteMEPDelay=wwpLeosCfmRemoteMEPDelay, wwpLeosCfmServiceVsPbtName=wwpLeosCfmServiceVsPbtName, wwpLeosCfmExtInterfaceStackVid=wwpLeosCfmExtInterfaceStackVid, wwpLeosCfmExtPortStackEntry=wwpLeosCfmExtPortStackEntry, wwpLeosCfmServiceResetTime=wwpLeosCfmServiceResetTime, wwpLeosCfmRemoteMEPCCMSeqErrors=wwpLeosCfmRemoteMEPCCMSeqErrors, wwpLeosCfmExtLoopback=wwpLeosCfmExtLoopback, wwpLeosCfmMEPSubPortIndex=wwpLeosCfmMEPSubPortIndex, wwpLeosCfmExtMipLevel=wwpLeosCfmExtMipLevel, wwpLeosCfmRemoteMEPMacAddr=wwpLeosCfmRemoteMEPMacAddr, wwpLeosCfmGlobalLinkTraceStats=wwpLeosCfmGlobalLinkTraceStats, wwpLeosCfmExtMEPStatsInvalidBlockedOppositeMep=wwpLeosCfmExtMEPStatsInvalidBlockedOppositeMep, wwpLeosCfmExtDelayFaultTrap=wwpLeosCfmExtDelayFaultTrap, wwpLeosCfmBlockOppositeMEPClearTrap=wwpLeosCfmBlockOppositeMEPClearTrap, wwpLeosCfmExtDelayMsgMaxDelayThreshold=wwpLeosCfmExtDelayMsgMaxDelayThreshold, wwpLeosCfmExtFrameLossMsgRepeat=wwpLeosCfmExtFrameLossMsgRepeat, wwpLeosCfmExtMEPDelayHistoryMaxDelay=wwpLeosCfmExtMEPDelayHistoryMaxDelay, wwpLeosTceCfmLoopbackMsgTotalRxLbrOoo=wwpLeosTceCfmLoopbackMsgTotalRxLbrOoo, wwpLeosCfmStack=wwpLeosCfmStack, wwpLeosCfmServiceTlvSenderIdType=wwpLeosCfmServiceTlvSenderIdType, wwpLeosCfmRemoteMEPMinDelay=wwpLeosCfmRemoteMEPMinDelay, Dot1agCfmMaintAssocNameType=Dot1agCfmMaintAssocNameType, wwpLeosCfmExtInterfaceMipInterfaceSubIndex=wwpLeosCfmExtInterfaceMipInterfaceSubIndex, wwpLeosCfmMaintenanceDomainTable=wwpLeosCfmMaintenanceDomainTable, wwpLeosCfmExtDelayMsgAction=wwpLeosCfmExtDelayMsgAction, wwpLeosCfmTotalCCMRxMAIDXcon=wwpLeosCfmTotalCCMRxMAIDXcon, wwpLeosCfmServiceCfmDefaultMEPType=wwpLeosCfmServiceCfmDefaultMEPType, wwpLeosTceCfmMEPRxValidOutOrderLoopbackReply=wwpLeosTceCfmMEPRxValidOutOrderLoopbackReply, wwpLeosTceCfmPortStackModuleIndex=wwpLeosTceCfmPortStackModuleIndex, wwpLeosCfmDelayMsgTargetMEPID=wwpLeosCfmDelayMsgTargetMEPID, wwpLeosCfmGlobalFrameBudgetValue=wwpLeosCfmGlobalFrameBudgetValue, wwpLeosCfmRemoteMEPNumCCMRx=wwpLeosCfmRemoteMEPNumCCMRx, wwpLeosCfmRemoteMEPCCMComment=wwpLeosCfmRemoteMEPCCMComment, wwpLeosCfmExtInterfaceStackServiceInstanceType=wwpLeosCfmExtInterfaceStackServiceInstanceType, wwpLeosCfmExtMIBObj=wwpLeosCfmExtMIBObj, wwpLeosCfmExtMEPStatsLMRReceived=wwpLeosCfmExtMEPStatsLMRReceived, wwpLeosCfmExtMEP=wwpLeosCfmExtMEP, wwpLeosCfmMEPHoldTime=wwpLeosCfmMEPHoldTime, wwpLeosTceCfmLoopbackMsgTotalRxLbrUnexpected=wwpLeosTceCfmLoopbackMsgTotalRxLbrUnexpected, wwpLeosCfmLmmTrap=wwpLeosCfmLmmTrap, wwpLeosCfmGlobalLBMDefaultInterval=wwpLeosCfmGlobalLBMDefaultInterval, wwpLeosCfmRemoteMEPFrameLossFar=wwpLeosCfmRemoteMEPFrameLossFar, wwpLeosCfmGlobalDelayMeasurementMsgStatsClear=wwpLeosCfmGlobalDelayMeasurementMsgStatsClear, wwpLeosCfmTotalRxCCMIntervalError=wwpLeosCfmTotalRxCCMIntervalError, wwpLeosCfmTotalTxCCMFlooded=wwpLeosCfmTotalTxCCMFlooded, wwpLeosCfmTotalRxUnexpectedLTR=wwpLeosCfmTotalRxUnexpectedLTR, wwpLeosTceCfmFrameLossMsgEntry=wwpLeosTceCfmFrameLossMsgEntry, wwpLeosCfmServiceTotalRxValidLTM=wwpLeosCfmServiceTotalRxValidLTM, wwpLeosTceCfmDelayMsgCount=wwpLeosTceCfmDelayMsgCount, wwpLeosTceCfmMEPLTMPriority=wwpLeosTceCfmMEPLTMPriority, wwpLeosCfmMEPNumLoopbackRepliesTxmt=wwpLeosCfmMEPNumLoopbackRepliesTxmt, wwpLeosCfmServiceTotalRxContentMismatchLBR=wwpLeosCfmServiceTotalRxContentMismatchLBR, wwpLeosCfmExtInterfaceStackInterfaceName=wwpLeosCfmExtInterfaceStackInterfaceName, wwpLeosCfmExtFrameLossMsgCount=wwpLeosCfmExtFrameLossMsgCount, wwpLeosCfmExtMEPDelayHistoryMEPId=wwpLeosCfmExtMEPDelayHistoryMEPId, wwpLeosCfmTotalRxUnexpectedLBR=wwpLeosCfmTotalRxUnexpectedLBR, wwpLeosCfmDelayFaultTrap=wwpLeosCfmDelayFaultTrap, wwpLeosCfmTotalRxInvalidInterfaceStatusTLV=wwpLeosCfmTotalRxInvalidInterfaceStatusTLV, wwpLeosCfmLinkTraceMsgReplySequenceNumber=wwpLeosCfmLinkTraceMsgReplySequenceNumber, wwpLeosCfmMEPOperState=wwpLeosCfmMEPOperState, wwpLeosCfmMEPDMMMinJitter=wwpLeosCfmMEPDMMMinJitter, wwpLeosCfmRemoteMEPMinJitter=wwpLeosCfmRemoteMEPMinJitter)
