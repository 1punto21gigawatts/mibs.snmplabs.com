#
# PySNMP MIB module ZHONE-DISMAN-PING-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZHONE-DISMAN-PING-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:47:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
InterfaceIndexOrZero, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Integer32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter64, Gauge32, IpAddress, NotificationType, mib_2, ModuleIdentity, Unsigned32, ObjectIdentity, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter64", "Gauge32", "IpAddress", "NotificationType", "mib-2", "ModuleIdentity", "Unsigned32", "ObjectIdentity", "Bits", "TimeTicks")
DisplayString, DateAndTime, RowStatus, TextualConvention, StorageType, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "DateAndTime", "RowStatus", "TextualConvention", "StorageType", "TruthValue")
zhoneIp, = mibBuilder.importSymbols("Zhone", "zhoneIp")
zhonePingMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19))
zhonePingMIB.setRevisions(('2003-01-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zhonePingMIB.setRevisionsDescriptions(('Initial version, enterprised based on RFC 2925.',))
if mibBuilder.loadTexts: zhonePingMIB.setLastUpdated('200301270000Z')
if mibBuilder.loadTexts: zhonePingMIB.setOrganization('IETF Distributed Management Working Group')
if mibBuilder.loadTexts: zhonePingMIB.setContactInfo('Kenneth White International Business Machines Corporation Network Computing Software Division Research Triangle Park, NC, USA E-mail: wkenneth@us.ibm.com')
if mibBuilder.loadTexts: zhonePingMIB.setDescription('The Ping MIB (ZHONE-DISMAN-PING-MIB) provides the capability of controlling the use of the ping function at a remote host.')
class OperationResponseStatus(TextualConvention, Integer32):
    description = 'Used to report the result of an operation: responseReceived(1) - Operation completes successfully. unknown(2) - Operation failed due to unknown error. internalError(3) - An implementation detected an error in its own processing that caused an operation to fail. requestTimedOut(4) - Operation failed to receive a valid reply within the time limit imposed on it. unknownDestinationAddress(5) - Invalid destination address. noRouteToTarget(6) - Could not find a route to target. interfaceInactiveToTarget(7) - The interface to be used in sending a probe is inactive without an alternate route existing. arpFailure(8) - Unable to resolve a target address to a media specific address. maxConcurrentLimitReached(9) - The maximum number of concurrent active operations would have been exceeded if the corresponding operation was allowed. unableToResolveDnsName(10) - The DNS name specified was unable to be mapped to an IP address. invalidHostAddress(11) - The IP address for a host has been determined to be invalid. Examples of this are broadcast or multicast addresses.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("responseReceived", 1), ("unknown", 2), ("internalError", 3), ("requestTimedOut", 4), ("unknownDestinationAddress", 5), ("noRouteToTarget", 6), ("interfaceInactiveToTarget", 7), ("arpFailure", 8), ("maxConcurrentLimitReached", 9), ("unableToResolveDnsName", 10), ("invalidHostAddress", 11))

zhonePingNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 0))
zhonePingObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1))
zhonePingConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 2))
zhonePingImplementationTypeDomains = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 3))
zhonePingIcmpEcho = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 3, 1))
if mibBuilder.loadTexts: zhonePingIcmpEcho.setStatus('current')
if mibBuilder.loadTexts: zhonePingIcmpEcho.setDescription("Indicates that an implementation is using the Internet Control Message Protocol (ICMP) 'ECHO' facility.")
zhonePingUdpEcho = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 3, 2))
if mibBuilder.loadTexts: zhonePingUdpEcho.setStatus('current')
if mibBuilder.loadTexts: zhonePingUdpEcho.setDescription('Indicates that an implementation is using the UDP echo port (7).')
if mibBuilder.loadTexts: zhonePingUdpEcho.setReference("RFC 862, 'Echo Protocol'.")
zhonePingSnmpQuery = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 3, 3))
if mibBuilder.loadTexts: zhonePingSnmpQuery.setStatus('current')
if mibBuilder.loadTexts: zhonePingSnmpQuery.setDescription('Indicates that an implementation is an SNMP query to calculate a round trip time.')
zhonePingTcpConnectionAttempt = ObjectIdentity((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 3, 4))
if mibBuilder.loadTexts: zhonePingTcpConnectionAttempt.setStatus('current')
if mibBuilder.loadTexts: zhonePingTcpConnectionAttempt.setDescription('Indicates that an implementation is attempting to connect to a TCP port in order to calculate a round trip time.')
zhonePingMaxConcurrentRequests = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 1), Unsigned32().clone(10)).setUnits('requests').setMaxAccess("readwrite")
if mibBuilder.loadTexts: zhonePingMaxConcurrentRequests.setStatus('current')
if mibBuilder.loadTexts: zhonePingMaxConcurrentRequests.setDescription('The maximum number of concurrent active ping requests that are allowed within an agent implementation. A value of 0 for this object implies that there is no limit for the number of concurrent active requests in effect.')
zhonePingCtlIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePingCtlIndexNext.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlIndexNext.setDescription('This object contains an appropriate value to be used for zhonePingCtlIndex when creating entries in the zhonePingCtlTable. The value 0 indicates that no unassigned entries are available. To obtain the zhonePingCtlIndex value for a new entry, the manager issues a management protocol retrieval operation to obtain the current value of this object. After each retrieval, the agent should modify the value to the next unassigned index. After a manager retrieves a value the agent will determine through its local policy when this index value will be made available for reuse.')
zhonePingCtlTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3), )
if mibBuilder.loadTexts: zhonePingCtlTable.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlTable.setDescription('Defines the ping Control Table for providing, via SNMP, the capability of performing ping operations at a remote host. The results of these operations are stored in the zhonePingResultsTable.')
zhonePingCtlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1), ).setIndexNames((0, "ZHONE-DISMAN-PING-MIB", "zhonePingCtlIndex"))
if mibBuilder.loadTexts: zhonePingCtlEntry.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlEntry.setDescription('None')
zhonePingCtlIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePingCtlIndex.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlIndex.setDescription("When used in conjunction with such a security policy all entries in the table belonging to a particular user (or group) will have the same value for this initial index. For a given user's entries in a particular table, the object identifiers for the information in these entries will have the same subidentifiers (except for the 'column' subidentifier) up to the end of the encoded owner index.")
zhonePingCtlTargetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 2), InetAddressType().clone('unknown')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlTargetAddressType.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlTargetAddressType.setDescription('Specifies the type of host address to be used at a remote host for performing a ping operation.')
zhonePingCtlTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 3), InetAddress().clone(hexValue="0")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlTargetAddress.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlTargetAddress.setDescription('Specifies the host address to be used at a remote host for performing a ping operation. The host address type is determined by the object value of corresponding zhonePingCtlTargetAddressType. A value for this object MUST be set prior to transitioning its corresponding zhonePingCtlEntry to active(1) via zhonePingCtlRowStatus.')
zhonePingCtlDataSize = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65507))).setUnits('octets').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlDataSize.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlDataSize.setDescription('Specifies the size of the data portion to be transmitted in a ping operation in octets. A ping request is usually an ICMP message encoded into an IP packet. An IP packet has a maximum size of 65535 octets. Subtracting the size of the ICMP or UDP header (both 8 octets) and the size of the IP header (20 octets) yields a maximum size of 65507 octets.')
zhonePingCtlTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(3)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlTimeOut.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlTimeOut.setDescription('Specifies the time-out value, in seconds, for a remote ping operation.')
zhonePingCtlProbeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setUnits('probes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlProbeCount.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlProbeCount.setDescription('Specifies the number of times to perform a ping operation at a remote host.')
zhonePingCtlAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlAdminStatus.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlAdminStatus.setDescription('Reflects the desired state that a zhonePingCtlEntry should be in: enabled(1) - Attempt to activate the test as defined by this zhonePingCtlEntry. disabled(2) - Deactivate the test as defined by this zhonePingCtlEntry. Refer to the corresponding zhonePingResultsOperStatus to determine the operational state of the test defined by this entry.')
zhonePingCtlDataFill = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 1024)).clone(hexValue="0")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlDataFill.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlDataFill.setDescription('The content of this object is used together with the corresponding zhonePingCtlDataSize value to determine how to fill the data portion of a probe packet. The option of selecting a data fill pattern can be useful when links are compressed or have data pattern sensitivities. The contents of zhonePingCtlDataFill should be repeated in a ping packet when the size of the data portion of the ping packet is greater than the size of zhonePingCtlDataFill.')
zhonePingCtlFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 9), Unsigned32()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlFrequency.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlFrequency.setDescription('The number of seconds to wait before repeating a ping test as defined by the value of the various objects in the corresponding row. A single ping test consists of a series of ping probes. The number of probes is determined by the value of the corresponding zhonePingCtlProbeCount object. After a single test completes the number of seconds as defined by the value of zhonePingCtlFrequency MUST elapse before the next ping test is started. A value of 0 for this object implies that the test as defined by the corresponding entry will not be repeated.')
zhonePingCtlMaxRows = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 10), Unsigned32().clone(50)).setUnits('rows').setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlMaxRows.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlMaxRows.setDescription('None')
zhonePingCtlStorageType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 11), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlStorageType.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent' need not allow write-access to any columnar objects in the row.")
zhonePingCtlTrapGeneration = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 12), Bits().clone(namedValues=NamedValues(("probeFailure", 0), ("testFailure", 1), ("testCompletion", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlTrapGeneration.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlTrapGeneration.setDescription('The value of this object determines when and if to generate a notification for this entry: probeFailure(0) - Generate a zhonePingProbeFailed notification subject to the value of zhonePingCtlTrapProbeFailureFilter. The object zhonePingCtlTrapProbeFailureFilter can be used to specify the number of successive probe failures that are required before a zhonePingProbeFailed notification can be generated. testFailure(1) - Generate a zhonePingTestFailed notification. In this instance the object zhonePingCtlTrapTestFailureFilter can be used to determine the number of probe failures that signal when a test fails. testCompletion(2) - Generate a zhonePingTestCompleted notification. The value of this object defaults to zero, indicating that none of the above options have been selected.')
zhonePingCtlTrapProbeFailureFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlTrapProbeFailureFilter.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlTrapProbeFailureFilter.setDescription('The value of this object is used to determine when to generate a zhonePingProbeFailed NOTIFICATION. Setting zhonePingCtlTrapGeneration to probeFailure(0) implies that a zhonePingProbeFailed NOTIFICATION is generated only when the number of successive probe failures as indicated by the value of zhonePingCtlTrapPrbefailureFilter fail within a given ping test.')
zhonePingCtlTrapTestFailureFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlTrapTestFailureFilter.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlTrapTestFailureFilter.setDescription('The value of this object is used to determine when to generate a zhonePingTestFailed NOTIFICATION. Setting zhonePingCtlTrapGeneration to testFailure(1) implies that a pingTestFailed NOTIFICATION is generated only when the number of ping failures within a test exceed the value of zhonePingCtlTrapTestFailureFilter.')
zhonePingCtlType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 15), ObjectIdentifier().clone((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 3, 1))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlType.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlType.setDescription('The value of this object is used to either report or select the implementation method to be used for calculating a ping response time. The value of this object MAY be selected from zhonePingImplementationTypeDomains. Additional implementation types SHOULD be allocated as required by implementers of the ZHONE-DISMAN-PING-MIB under their enterprise specific registration point and not beneath zhonePingImplementationTypeDomains.')
zhonePingCtlDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 16), SnmpAdminString().clone(hexValue="0")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlDescr.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlDescr.setDescription('The purpose of this object is to provide a descriptive name of the remote ping test.')
zhonePingCtlSourceAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 17), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlSourceAddressType.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlSourceAddressType.setDescription('Specifies the type of the source address, zhonePingCtlSourceAddress, to be used at a remote host when performing a ping operation.')
zhonePingCtlSourceAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 18), InetAddress().clone(hexValue="0")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlSourceAddress.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlSourceAddress.setDescription("Use the specified IP address (which must be given in numeric form, not as a hostname) as the source address in outgoing probe packets. On hosts with more than one IP address, this option can be used to force the source address to be something other than the primary IP address of the interface the probe packet is sent on. If the IP address is not one of this machine's interface addresses, an error is returned and nothing is sent. A zero length octet string value for this object disables source address specification. The address type (InetAddressType) that relates to this object is specified by the corresponding value of zhonePingCtlSourceAddressType.")
zhonePingCtlIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 19), InterfaceIndexOrZero()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlIfIndex.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlIfIndex.setDescription("Setting this object to an interface's ifIndex prior to starting a remote ping operation directs the ping probes to be transmitted over the specified interface. A value of zero for this object means that this option is not enabled.")
zhonePingCtlByPassRouteTable = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 20), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlByPassRouteTable.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlByPassRouteTable.setDescription('The purpose of this object is to optionally enable bypassing the route table. If enabled, the remote host will bypass the normal routing tables and send directly to a host on an attached network. If the host is not on a directly-attached network, an error is returned. This option can be used to perform the ping operation to a local host through an interface that has no route defined (e.g., after the interface was dropped by routed).')
zhonePingCtlDSField = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlDSField.setReference('Refer to RFC 2474 for the definition of the Differentiated Services Field and to RFC 1812 Section 5.3.2 for Type of Service (TOS).')
if mibBuilder.loadTexts: zhonePingCtlDSField.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlDSField.setDescription('Specifies the value to store in the Differentiated Services (DS) Field in the IP packet used to encapsulate the ping probe. The DS Field is defined as the Type of Service (TOS) octet in a IPv4 header or as the Traffic Class octet in a IPv6 header. The value of this object must be a decimal integer in the range from 0 to 255. This option can be used to determine what effect an explicit DS Field setting has on a ping response. Not all values are legal or meaningful. A value of 0 means that the function represented by this option is not supported. DS Field usage is often not supported by IP implementations and not all values are supported. Refer to RFC 2474 for guidance on usage of this field.')
zhonePingCtlRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 3, 1, 22), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: zhonePingCtlRowStatus.setReference("See definition of RowStatus in RFC 2579, 'Textual Conventions for SMIv2.'")
if mibBuilder.loadTexts: zhonePingCtlRowStatus.setStatus('current')
if mibBuilder.loadTexts: zhonePingCtlRowStatus.setDescription("This object allows entries to be created and deleted in the zhonePingCtlTable. Deletion of an entry in this table results in all corresponding (same zhonePingCtlOwnerIndex and zhonePingCtlTestName index values) zhonePingResultsTable entries being deleted. A value MUST be specified for zhonePingCtlTargetAddress prior to a transition to active(1) state being accepted. Activation of a remote ping operation is controlled via zhonePingCtlAdminStatus and not by changing this object's value to active(1). Transitions in and out of active(1) state are not allowed while an entry's zhonePingResultsOperStatus is active(1) with the exception that deletion of an entry in this table by setting its RowStatus object to destroy(6) will stop an active ping operation. The operational state of a ping operation can be determined by examination of its zhonePingResultsOperStatus object. NOTE: ROWS ARE AUTO-DELETED UP ON COMPLETION REGARDLESS OF OUTCOME")
zhonePingResultsTable = MibTable((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 4), )
if mibBuilder.loadTexts: zhonePingResultsTable.setStatus('current')
if mibBuilder.loadTexts: zhonePingResultsTable.setDescription('Defines the Ping Results Table for providing the capability of performing ping operations at a remote host. The results of these operations are stored in the zhonePingResultsTable and the zhonePingPastProbeTable. An entry is added to the zhonePingResultsTable when an zhonePingCtlEntry is started by successful transition of its zhonePingCtlAdminStatus object to enabled(1). An entry is removed from the zhonePingResultsTable when its corresponding zhonePingCtlEntry is deleted.')
zhonePingResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 4, 1), ).setIndexNames((0, "ZHONE-DISMAN-PING-MIB", "zhonePingCtlIndex"))
if mibBuilder.loadTexts: zhonePingResultsEntry.setStatus('current')
if mibBuilder.loadTexts: zhonePingResultsEntry.setDescription('Defines an entry in the zhonePingResultsTable. The zhonePingResultsTable has the same indexing as the zhonePingCtlTable in order for a zhonePingResultsEntry to correspond to the zhonePingCtlEntry that caused it to be created.')
zhonePingResultsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePingResultsOperStatus.setStatus('current')
if mibBuilder.loadTexts: zhonePingResultsOperStatus.setDescription('Reflects the operational state of a zhonePingCtlEntry: enabled(1) - Test is active. disabled(2) - Test has stopped.')
zhonePingResultsIpTargetAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 4, 1, 2), InetAddressType().clone('unknown')).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePingResultsIpTargetAddressType.setStatus('current')
if mibBuilder.loadTexts: zhonePingResultsIpTargetAddressType.setDescription('This objects indicates the type of address stored in the corresponding zhonePingResultsIpTargetAddress object.')
zhonePingResultsIpTargetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 4, 1, 3), InetAddress().clone(hexValue="0")).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePingResultsIpTargetAddress.setStatus('current')
if mibBuilder.loadTexts: zhonePingResultsIpTargetAddress.setDescription('This objects reports the IP address associated with a zhonePingCtlTargetAddress value when the destination address is specified as a DNS name. The value of this object should be a zero length octet string when a DNS name is not specified or when a specified DNS name fails to resolve.')
zhonePingResultsMinRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 4, 1, 4), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePingResultsMinRtt.setStatus('current')
if mibBuilder.loadTexts: zhonePingResultsMinRtt.setDescription('The minimum ping round-trip-time (RTT) received. A value of 0 for this object implies that no RTT has been received.')
zhonePingResultsMaxRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 4, 1, 5), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePingResultsMaxRtt.setStatus('current')
if mibBuilder.loadTexts: zhonePingResultsMaxRtt.setDescription('The maximum ping round-trip-time (RTT) received. A value of 0 for this object implies that no RTT has been received.')
zhonePingResultsAverageRtt = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 4, 1, 6), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePingResultsAverageRtt.setStatus('current')
if mibBuilder.loadTexts: zhonePingResultsAverageRtt.setDescription('The current average ping round-trip-time (RTT).')
zhonePingResultsProbeResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 4, 1, 7), Unsigned32()).setUnits('responses').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePingResultsProbeResponses.setStatus('current')
if mibBuilder.loadTexts: zhonePingResultsProbeResponses.setDescription('Number of responses received for the corresponding zhonePingCtlEntry and zhonePingResultsEntry. The value of this object MUST be reported as 0 when no probe responses have been received.')
zhonePingResultsSentProbes = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 4, 1, 8), Unsigned32()).setUnits('probes').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePingResultsSentProbes.setStatus('current')
if mibBuilder.loadTexts: zhonePingResultsSentProbes.setDescription('The value of this object reflects the number of probes sent for the corresponding zhonePingCtlEntry and zhonePingResultsEntry. The value of this object MUST be reported as 0 when no probes have been sent.')
zhonePingResultsRttSumOfSquares = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 4, 1, 9), Unsigned32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePingResultsRttSumOfSquares.setStatus('current')
if mibBuilder.loadTexts: zhonePingResultsRttSumOfSquares.setDescription('This object contains the sum of the squares for all ping responses received. Its purpose is to enable standard deviation calculation. The value of this object MUST be reported as 0 when no ping responses have been received.')
zhonePingResultsLastGoodProbe = MibTableColumn((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 1, 4, 1, 10), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zhonePingResultsLastGoodProbe.setStatus('current')
if mibBuilder.loadTexts: zhonePingResultsLastGoodProbe.setDescription('Date and time when the last response was received for a probe.')
zhonePingTestCompleted = NotificationType((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 0, 1)).setObjects(("ZHONE-DISMAN-PING-MIB", "zhonePingResultsIpTargetAddress"), ("ZHONE-DISMAN-PING-MIB", "zhonePingResultsMinRtt"), ("ZHONE-DISMAN-PING-MIB", "zhonePingResultsMaxRtt"), ("ZHONE-DISMAN-PING-MIB", "zhonePingResultsAverageRtt"), ("ZHONE-DISMAN-PING-MIB", "zhonePingResultsProbeResponses"), ("ZHONE-DISMAN-PING-MIB", "zhonePingResultsSentProbes"))
if mibBuilder.loadTexts: zhonePingTestCompleted.setStatus('current')
if mibBuilder.loadTexts: zhonePingTestCompleted.setDescription('Generated at the completion of a ping test when the corresponding zhonePingCtlTrapGeneration object is set to testCompletion(4).')
zhonePingGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 2, 2))
zhonePingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 2, 2, 1)).setObjects(("ZHONE-DISMAN-PING-MIB", "zhonePingMaxConcurrentRequests"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlTargetAddressType"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlTargetAddress"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlDataSize"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlTimeOut"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlProbeCount"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlAdminStatus"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlDataFill"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlFrequency"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlMaxRows"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlStorageType"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlTrapGeneration"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlTrapProbeFailureFilter"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlTrapTestFailureFilter"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlType"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlDescr"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlByPassRouteTable"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlSourceAddressType"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlSourceAddress"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlIfIndex"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlDSField"), ("ZHONE-DISMAN-PING-MIB", "zhonePingCtlRowStatus"), ("ZHONE-DISMAN-PING-MIB", "zhonePingResultsOperStatus"), ("ZHONE-DISMAN-PING-MIB", "zhonePingResultsIpTargetAddressType"), ("ZHONE-DISMAN-PING-MIB", "zhonePingResultsIpTargetAddress"), ("ZHONE-DISMAN-PING-MIB", "zhonePingResultsMinRtt"), ("ZHONE-DISMAN-PING-MIB", "zhonePingResultsMaxRtt"), ("ZHONE-DISMAN-PING-MIB", "zhonePingResultsAverageRtt"), ("ZHONE-DISMAN-PING-MIB", "zhonePingResultsProbeResponses"), ("ZHONE-DISMAN-PING-MIB", "zhonePingResultsSentProbes"), ("ZHONE-DISMAN-PING-MIB", "zhonePingResultsRttSumOfSquares"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhonePingGroup = zhonePingGroup.setStatus('current')
if mibBuilder.loadTexts: zhonePingGroup.setDescription('The group of objects that comprise the remote ping capability.')
zhonePingTimeStampGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 2, 2, 2)).setObjects(("ZHONE-DISMAN-PING-MIB", "zhonePingResultsLastGoodProbe"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhonePingTimeStampGroup = zhonePingTimeStampGroup.setStatus('current')
if mibBuilder.loadTexts: zhonePingTimeStampGroup.setDescription('The group of DateAndTime objects.')
zhonePingNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 5504, 4, 1, 19, 2, 2, 3)).setObjects(("ZHONE-DISMAN-PING-MIB", "zhonePingTestCompleted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    zhonePingNotificationsGroup = zhonePingNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: zhonePingNotificationsGroup.setDescription('The notification which are required to be supported by implementations of this MIB.')
mibBuilder.exportSymbols("ZHONE-DISMAN-PING-MIB", zhonePingResultsIpTargetAddressType=zhonePingResultsIpTargetAddressType, zhonePingNotifications=zhonePingNotifications, OperationResponseStatus=OperationResponseStatus, zhonePingCtlSourceAddress=zhonePingCtlSourceAddress, zhonePingConformance=zhonePingConformance, zhonePingCtlDSField=zhonePingCtlDSField, zhonePingResultsAverageRtt=zhonePingResultsAverageRtt, zhonePingTimeStampGroup=zhonePingTimeStampGroup, zhonePingGroups=zhonePingGroups, zhonePingResultsOperStatus=zhonePingResultsOperStatus, zhonePingCtlAdminStatus=zhonePingCtlAdminStatus, zhonePingCtlProbeCount=zhonePingCtlProbeCount, zhonePingSnmpQuery=zhonePingSnmpQuery, zhonePingResultsTable=zhonePingResultsTable, zhonePingCtlIndexNext=zhonePingCtlIndexNext, PYSNMP_MODULE_ID=zhonePingMIB, zhonePingCtlTable=zhonePingCtlTable, zhonePingCtlDataSize=zhonePingCtlDataSize, zhonePingCtlTrapTestFailureFilter=zhonePingCtlTrapTestFailureFilter, zhonePingCtlRowStatus=zhonePingCtlRowStatus, zhonePingCtlTargetAddressType=zhonePingCtlTargetAddressType, zhonePingMaxConcurrentRequests=zhonePingMaxConcurrentRequests, zhonePingCtlTargetAddress=zhonePingCtlTargetAddress, zhonePingCtlType=zhonePingCtlType, zhonePingCtlSourceAddressType=zhonePingCtlSourceAddressType, zhonePingCtlFrequency=zhonePingCtlFrequency, zhonePingCtlTrapGeneration=zhonePingCtlTrapGeneration, zhonePingResultsMinRtt=zhonePingResultsMinRtt, zhonePingResultsIpTargetAddress=zhonePingResultsIpTargetAddress, zhonePingCtlByPassRouteTable=zhonePingCtlByPassRouteTable, zhonePingIcmpEcho=zhonePingIcmpEcho, zhonePingResultsEntry=zhonePingResultsEntry, zhonePingResultsMaxRtt=zhonePingResultsMaxRtt, zhonePingTestCompleted=zhonePingTestCompleted, zhonePingResultsProbeResponses=zhonePingResultsProbeResponses, zhonePingGroup=zhonePingGroup, zhonePingCtlIndex=zhonePingCtlIndex, zhonePingMIB=zhonePingMIB, zhonePingNotificationsGroup=zhonePingNotificationsGroup, zhonePingCtlMaxRows=zhonePingCtlMaxRows, zhonePingResultsSentProbes=zhonePingResultsSentProbes, zhonePingResultsLastGoodProbe=zhonePingResultsLastGoodProbe, zhonePingCtlTrapProbeFailureFilter=zhonePingCtlTrapProbeFailureFilter, zhonePingCtlDescr=zhonePingCtlDescr, zhonePingResultsRttSumOfSquares=zhonePingResultsRttSumOfSquares, zhonePingCtlDataFill=zhonePingCtlDataFill, zhonePingUdpEcho=zhonePingUdpEcho, zhonePingCtlEntry=zhonePingCtlEntry, zhonePingCtlTimeOut=zhonePingCtlTimeOut, zhonePingCtlStorageType=zhonePingCtlStorageType, zhonePingCtlIfIndex=zhonePingCtlIfIndex, zhonePingImplementationTypeDomains=zhonePingImplementationTypeDomains, zhonePingTcpConnectionAttempt=zhonePingTcpConnectionAttempt, zhonePingObjects=zhonePingObjects)
