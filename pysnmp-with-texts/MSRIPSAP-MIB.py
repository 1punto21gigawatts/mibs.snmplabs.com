#
# PySNMP MIB module MSRIPSAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/MSRIPSAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:15:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
software, microsoft = mibBuilder.importSymbols("MSFT-MIB", "software", "microsoft")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, ObjectIdentity, Counter64, ModuleIdentity, Bits, Integer32, MibIdentifier, iso, Unsigned32, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter32, IpAddress, enterprises, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ObjectIdentity", "Counter64", "ModuleIdentity", "Bits", "Integer32", "MibIdentifier", "iso", "Unsigned32", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter32", "IpAddress", "enterprises", "Gauge32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ripsap = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 9))
ripsapBase = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 9, 1))
ripsapInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 311, 1, 9, 2))
ripsapBaseRipOperState = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripsapBaseRipOperState.setStatus('mandatory')
if mibBuilder.loadTexts: ripsapBaseRipOperState.setDescription('Indicates the operational state of RIP.')
ripsapBaseSapOperState = MibScalar((1, 3, 6, 1, 4, 1, 311, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripsapBaseSapOperState.setStatus('mandatory')
if mibBuilder.loadTexts: ripsapBaseSapOperState.setDescription('Indicates the operational state of SAP.')
ripIfTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 1), )
if mibBuilder.loadTexts: ripIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: ripIfTable.setDescription('The RIP interface table.')
ripIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 1, 1), ).setIndexNames((0, "MSRIPSAP-MIB", "ripIfIndex"))
if mibBuilder.loadTexts: ripIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ripIfEntry.setDescription('Each entry corresponds to one interface known to the system.')
ripIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ripIfIndex.setDescription('The identifier of this interface, unique within the instance of RIP. This value corresponds to the interface identifier found in ipxIfIndex.')
ripIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ripIfAdminState.setDescription('The desired state of the interface.')
ripIfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("sleeping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfOperState.setStatus('mandatory')
if mibBuilder.loadTexts: ripIfOperState.setDescription('The current operational state of the interface. If ripIfAdminState is disabled(1) then ripIfOperState should be down(1). If ripIfAdminState is changed to enabled(2) then ripIfOperState should change to up(2) if the interface is ready to transmit and receive network traffic; it should change to sleeping(3) if the interface is waiting for external actions (such as a serial line waiting for an incomming connection); it should remain in the down(1) state if and only if there is a fault that prevents it from going to the up(2) state.')
ripIfUpdateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("none", 2), ("autostatic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfUpdateMode.setStatus('mandatory')
if mibBuilder.loadTexts: ripIfUpdateMode.setDescription('The RIP update mechanism used on this interface. None(2) is used for static routes configurations. AutoStatic(3) means that the local router can issue an update request to the remote router and the response will be kept statically in the routing database as auto static routes. Standard(1) is the periodic broadcast RIP mechanism.')
ripIfUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ripIfUpdateInterval.setDescription('The RIP update interval, in sec. For Standard(1) ripIfUpdateMode, this is the interval with which periodic update broadcasts are sent, for AutoStatic(3) ripIfUpdateMode, this is the maximum interval for which router will listen for rip announcements, not used for None(2) ripIfUpdateMode')
ripIfAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 1, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfAgeMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: ripIfAgeMultiplier.setDescription('The holding multiplier for routes received in RIP periodic updates (applies only if ripIfUpdateMode is Standard(1)).')
ripIfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfSupply.setStatus('mandatory')
if mibBuilder.loadTexts: ripIfSupply.setDescription('Enable sending of RIP updates (change and periodic) on this interface.')
ripIfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripIfListen.setStatus('mandatory')
if mibBuilder.loadTexts: ripIfListen.setDescription('Enable listening to RIP updates on this interface.')
ripIfOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ripIfOutPackets.setDescription('The number of RIP packets sent on this interface.')
ripIfInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripIfInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: ripIfInPackets.setDescription('The number of RIP packets received on this interface.')
sapIfTable = MibTable((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 2), )
if mibBuilder.loadTexts: sapIfTable.setStatus('mandatory')
if mibBuilder.loadTexts: sapIfTable.setDescription('The SAP interface table.')
sapIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 2, 1), ).setIndexNames((0, "MSRIPSAP-MIB", "sapIfIndex"))
if mibBuilder.loadTexts: sapIfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sapIfEntry.setDescription('Each entry corresponds to one interface known to the system.')
sapIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sapIfIndex.setDescription('The identifier of this interface, unique within the instance of SAP. This value corresponds to the interface identifier found in ipxIfIndex.')
sapIfAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIfAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: sapIfAdminState.setDescription('The desired state of the interface.')
sapIfOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("down", 1), ("up", 2), ("sleeping", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIfOperState.setStatus('mandatory')
if mibBuilder.loadTexts: sapIfOperState.setDescription('The current operational state of the interface. If sapIfAdminState is disabled(1) then ripIfOperState should be down(1). If sapIfAdminState is changed to enabled(2) then sapIfOperState should change to up(2) if the interface is ready to transmit and receive network traffic; it should change to sleeping(3) if the interface is waiting for external actions (such as a serial line waiting for an incomming connection); it should remain in the down(1) state if and only if there is a fault that prevents it from going to the up(2) state.')
sapIfUpdateMode = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("standard", 1), ("none", 2), ("autostatic", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIfUpdateMode.setStatus('mandatory')
if mibBuilder.loadTexts: sapIfUpdateMode.setDescription('The SAP update mechanism used on this interface. None(2) is used for static routes configurations. AutoStatic(3) means that the local router can issue an update request to the remote router and the response will be kept statically in the routing database as auto static services. Standard(1) is the periodic broadcast SAP mechanism.')
sapIfUpdateInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIfUpdateInterval.setStatus('mandatory')
if mibBuilder.loadTexts: sapIfUpdateInterval.setDescription('The SAP update interval, in sec. For Standard(1) ripIfUpdateMode, this is the interval with which periodic update broadcasts are sent, for AutoStatic(3) sapIfUpdateMode, this is the maximum interval for which router will listen for rip announcements. Not used for None (2) sapIfUpdateMode')
sapIfAgeMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIfAgeMultiplier.setStatus('mandatory')
if mibBuilder.loadTexts: sapIfAgeMultiplier.setDescription('The holding multiplier for services received in SAP periodic updates (applies only if sapIfUpdateMode is Standard(1)).')
sapIfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIfSupply.setStatus('mandatory')
if mibBuilder.loadTexts: sapIfSupply.setDescription('Enable sending of SAP updates (change and periodic) on this interface.')
sapIfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIfListen.setStatus('mandatory')
if mibBuilder.loadTexts: sapIfListen.setDescription('Enable listening to SAP updates on this interface.')
sapIfGetNearestServerReply = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sapIfGetNearestServerReply.setStatus('mandatory')
if mibBuilder.loadTexts: sapIfGetNearestServerReply.setDescription('Indicates whether to respond to SAP get nearest server requests received on this interface.')
sapIfOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIfOutPackets.setStatus('mandatory')
if mibBuilder.loadTexts: sapIfOutPackets.setDescription('The number of SAP packets sent on this interface.')
sapIfInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 311, 1, 9, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sapIfInPackets.setStatus('mandatory')
if mibBuilder.loadTexts: sapIfInPackets.setDescription('The number of SAP packets received on this interface.')
mibBuilder.exportSymbols("MSRIPSAP-MIB", ripIfListen=ripIfListen, ripsapInterface=ripsapInterface, sapIfGetNearestServerReply=sapIfGetNearestServerReply, sapIfUpdateMode=sapIfUpdateMode, sapIfEntry=sapIfEntry, ripIfOutPackets=ripIfOutPackets, sapIfListen=sapIfListen, ripIfIndex=ripIfIndex, ripsapBase=ripsapBase, ripIfTable=ripIfTable, sapIfAdminState=sapIfAdminState, ripIfUpdateInterval=ripIfUpdateInterval, ripIfSupply=ripIfSupply, ripsapBaseSapOperState=ripsapBaseSapOperState, ripsap=ripsap, ripIfAgeMultiplier=ripIfAgeMultiplier, sapIfSupply=sapIfSupply, sapIfOutPackets=sapIfOutPackets, sapIfAgeMultiplier=sapIfAgeMultiplier, ripIfInPackets=ripIfInPackets, ripsapBaseRipOperState=ripsapBaseRipOperState, sapIfIndex=sapIfIndex, sapIfInPackets=sapIfInPackets, sapIfTable=sapIfTable, ripIfAdminState=ripIfAdminState, ripIfOperState=ripIfOperState, sapIfOperState=sapIfOperState, ripIfEntry=ripIfEntry, sapIfUpdateInterval=sapIfUpdateInterval, ripIfUpdateMode=ripIfUpdateMode)
