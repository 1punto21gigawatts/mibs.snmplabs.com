#
# PySNMP MIB module KYOCERA-Private-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/KYOCERA-Private-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:04:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint")
hrDeviceIndex, = mibBuilder.importSymbols("HOST-RESOURCES-MIB", "hrDeviceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, NotificationType, ObjectIdentity, IpAddress, MibIdentifier, TimeTicks, enterprises, iso, Counter64, Gauge32, Counter32, ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "NotificationType", "ObjectIdentity", "IpAddress", "MibIdentifier", "TimeTicks", "enterprises", "iso", "Counter64", "Gauge32", "Counter32", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
kyocera = MibIdentifier((1, 3, 6, 1, 4, 1, 1347))
kcPrinter = MibIdentifier((1, 3, 6, 1, 4, 1, 1347, 43))
kcprtGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 1347, 43, 5))
kcprtOutput = MibIdentifier((1, 3, 6, 1, 4, 1, 1347, 43, 9))
kcprtMarker = MibIdentifier((1, 3, 6, 1, 4, 1, 1347, 43, 10))
kcprtChannel = MibIdentifier((1, 3, 6, 1, 4, 1, 1347, 43, 14))
kcprtMemoryResource = MibIdentifier((1, 3, 6, 1, 4, 1, 1347, 43, 20))
kcprtGeneralTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1), )
if mibBuilder.loadTexts: kcprtGeneralTable.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtGeneralTable.setDescription('This table contains the generic parameters that is applied to the KYOCERA network printer.')
kcprtGeneralEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"))
if mibBuilder.loadTexts: kcprtGeneralEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtGeneralEntry.setDescription('A list of general entries for KYOCERA printer.')
kcprtGeneralModelName = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtGeneralModelName.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtGeneralModelName.setDescription("The printer's model name.")
kcprtOptionDescription = MibScalar((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOptionDescription.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOptionDescription.setDescription('The string used for identify the option interface.')
kcprtKpdlLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtKpdlLevel.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtKpdlLevel.setDescription('The level of KPDL. The value (0) means KPDL is not supported or KPDL ROM is missing.')
kcprtSystemUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtSystemUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtSystemUpTime.setDescription('The amount of time since this printer was last powered on. Unit is second.')
kcprtBinNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtBinNumber.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtBinNumber.setDescription('The number of paper bins that is implemented within printer itself. This number does not show all of input bin number.')
kcprtCardSlotCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtCardSlotCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtCardSlotCapacity.setDescription('The number of IC card slots that this printer actually has. The value (0) means this printer has no IC card slot.')
kcprtRomSlotCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtRomSlotCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtRomSlotCapacity.setDescription('The number of option ROM slots. The value (0) means this printer has no option ROM slot.')
kcprtSimmSlotCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtSimmSlotCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtSimmSlotCapacity.setDescription('The number of SIMM slots that this printer actually has.')
kcprtSimmSlotUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtSimmSlotUsed.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtSimmSlotUsed.setDescription(' The number of SIMM slots that is currently used for SIMM.')
kcprtOriginalMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOriginalMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOriginalMemorySize.setDescription('The amount of memory that this printer has on its controller board. Note this value does not include any other optional memory. Unit is kilobytes.')
kcprtTotalMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtTotalMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtTotalMemorySize.setDescription('The amount of memory that this printer actually has. Unit is kilobytes.')
kcprtUserMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtUserMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtUserMemorySize.setDescription('The amount of memory that is available for user. Unit is kilobyte.')
kcprtVirtualMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notSupported", 0), ("support", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtVirtualMemory.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtVirtualMemory.setDescription('This object shows whether this printer has the virtual memory function.')
kcprtPageMemorySize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("size-128KB", 1), ("size-256KB", 2), ("size-512KB", 3), ("size-A4orLetter", 4), ("size-Legal", 5), ("size-doubleA4orLetter", 6), ("size-doubleLegal", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtPageMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtPageMemorySize.setDescription('The page memory size corresponding to the FRPO R5 parameter. Because each model of our printer has slightly different value combination, it is recommended to verify the value after writing. Please ask to KYOCERA about the value combination for each printer. For example, our A3 type printer does not have this capability so that The value will be always 512KB(3). The value (-1) means others. Writing (-1) has no meaning.')
kcprtHostBufferSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtHostBufferSize.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtHostBufferSize.setDescription(' The host buffer size in units of ten kilobytes. The value(0) means that the host buffer size is 5 Kbytes.')
kcprtHostBuffer1stRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtHostBuffer1stRate.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtHostBuffer1stRate.setDescription('The ratio of the main host buffer size.')
kcprtHostBuffer2ndRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtHostBuffer2ndRate.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtHostBuffer2ndRate.setDescription('The ratio of the 2nd host buffer size.')
kcprtHostBuffer3rdRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 9))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtHostBuffer3rdRate.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtHostBuffer3rdRate.setDescription("The ratio of the 3rd host buffer size. Note that this entry will be 'not accessible' if the printer has only two interfaces.")
kcprtHostBufferOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("automatic", 0), ("fixed", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtHostBufferOption.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtHostBufferOption.setDescription('In the automatic mode, the first data arriving from the computer go into main buffer (1st buffer). In the fixed mode, each buffer is fixed on the appropriate interface. Refer to Users manual.')
kcprtBufferXoffLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtBufferXoffLevel.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtBufferXoffLevel.setDescription('The printer will pause for receiving data when the ratio of occupied data on the host buffer reaches this threshold level. Note that this value should be larger than kcprtBufferXonLevel. If not, the value is ignored.')
kcprtBufferXonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtBufferXonLevel.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtBufferXonLevel.setDescription('The printer will begin to receive data again when the ratio of occupied data on the host buffer becomes lower than this threshould level. Note that value should be less than kcprtBufferXoffLevel. If not, the value is ignored.')
kcprtFFTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtFFTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtFFTimeout.setDescription('The form-feed time-out timer in units of five seconds. The value (0) means the time-out timer is off.')
kcprtSleepTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtSleepTimer.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtSleepTimer.setDescription('The value of sleep timer in units of five minutes. The value (0) means the sleep timer is off.')
kcprtWakeupStatusPage = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtWakeupStatusPage.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtWakeupStatusPage.setDescription('If enable, a printer generates the status page each time it comes up.')
kcprtOnlineControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("offLine", 0), ("onLine", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtOnlineControl.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOnlineControl.setDescription('This object controls the on/off line status. Note the writing value does not apply in some situation.')
kcprtCopyCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 1, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 999))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtCopyCount.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtCopyCount.setDescription('The default copy number.')
kcprtCpuTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4), )
if mibBuilder.loadTexts: kcprtCpuTable.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtCpuTable.setDescription('Information of CPU that is implemented in the printer.')
kcprtCpuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtCpuIndex"))
if mibBuilder.loadTexts: kcprtCpuEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtCpuEntry.setDescription('A list of CPU information for KYOCERA printer.')
kcprtCpuIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtCpuIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtCpuIndex.setDescription('A unique value used by the printer to identify CPU on the printers controller.')
kcprtCpuName = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtCpuName.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtCpuName.setDescription('The CPU model name, such as 68EC040.')
kcprtCpuClock = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtCpuClock.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtCpuClock.setDescription('The clock speed of CPU in unit of MHz.')
kcprtCpuRole = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("engine", 0), ("controller", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtCpuRole.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtCpuRole.setDescription('The role of this CPU. The value (-1) means others.')
kcprtFirmwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtFirmwareVersion.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtFirmwareVersion.setDescription('The version string for the firmware of this CPU.')
kcprtFirmwareUpdata = MibScalar((1, 3, 6, 1, 4, 1, 1347, 43, 5, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3, 4))).clone(namedValues=NamedValues(("enabled", 3), ("disabled", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtFirmwareUpdata.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtFirmwareUpdata.setDescription('Shows whether this firmware can be updated on the controller.')
kcprtOutputTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1), )
if mibBuilder.loadTexts: kcprtOutputTable.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputTable.setDescription('This table contains the basic part of the output unit. The main purpose is to control SO-6.')
kcprtOutputEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtOutputIndex"))
if mibBuilder.loadTexts: kcprtOutputEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputEntry.setDescription('A list of information for the output unit, especially for the SO-6.')
kcprtOutputIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtOutputIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputIndex.setDescription('The value of the prtOutputIndex of this printer that this entry is associated with.')
kcprtOutputMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("sorter", 0), ("collator", 1), ("stacker", 2), ("mailbox", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtOutputMode.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputMode.setDescription('The operation mode of the sorter. If this device does not support the sorter function, the reading value is (-1) and all writing are ignored. Also, writing value (-1) does not take effect.')
kcprtOutputMultiMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("id-specific", 1), ("if-specific", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtOutputMultiMode.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputMultiMode.setDescription("In the multiple mode, the sorter can simultaneously be used by different computers. Each computer may assign its own output trays. This value determines how the tray is selected. The value (-1) means others or 'not supported'.")
kcprtOutputGroupNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOutputGroupNumber.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputGroupNumber.setDescription('This entry shows how many groups are existing on the output device.')
kcprtOutputDefaultGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtOutputDefaultGroup.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputDefaultGroup.setDescription('The value of the kcprtTrayGroupIndex corresponding to the current output tray group in a sorter. This value has no meaning if this output unit is not a soter. The value (0) means that the multiple mode is disabled and all of trays will be able to use. Writing value (0) indicates a selection of bulkTray . Writing is only allowed when the multiple mode is enabled.')
kcprtOutputBulkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notFull", 0), ("full", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOutputBulkStatus.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputBulkStatus.setDescription('This entry shows current status of the bulk tray. Since the bulk tray of SO-6 has only a full sensor, this entry has only two states. In future, the state will be added.')
kcprtOutputTrayMaxCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOutputTrayMaxCapacity.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputTrayMaxCapacity.setDescription('This entry shows how many pages the tray on this output device can hold. Unit is sheet.')
kcprtTrayGroupTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 9, 2), )
if mibBuilder.loadTexts: kcprtTrayGroupTable.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtTrayGroupTable.setDescription('The concept of Group is for the multiple computer environment. These contents take effect when kcprtOutputMultiMode is enable. For further information, refer to the sorter manual. Note in case of off (0), the access to this content is ineffective.')
kcprtTrayGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 9, 2, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtOutputIndex"), (0, "KYOCERA-Private-MIB", "kcprtTrayGroupIndex"))
if mibBuilder.loadTexts: kcprtTrayGroupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtTrayGroupEntry.setDescription('A list of information about the tray group on the multiple tray device.')
kcprtTrayGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtTrayGroupIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtTrayGroupIndex.setDescription('The unique value used by the printer to identify each tray groups. Note that this value will be changed while the printer power cycles if Prescribe ASTK command is issued.')
kcprtTrayGroupBeginIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtTrayGroupBeginIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtTrayGroupBeginIndex.setDescription('The value of the kcprtOutputTrayIndex corresponding to the tray that is assigned as the begining of this group.')
kcprtTrayGroupEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtTrayGroupEndIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtTrayGroupEndIndex.setDescription('The value of the kcprtOutputTrayIndex corresponding to the tray that is assigned as the end of this group. This index is automatically assigned by the printer when the group is created. Please refer to thePrescribe manual for detailed information.')
kcprtOutputTrayTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 9, 3), )
if mibBuilder.loadTexts: kcprtOutputTrayTable.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputTrayTable.setDescription('Note in case of off (0), the access to this content is ineffective.')
kcprtOutputTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 9, 3, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtOutputIndex"), (0, "KYOCERA-Private-MIB", "kcprtOutputTrayIndex"))
if mibBuilder.loadTexts: kcprtOutputTrayEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputTrayEntry.setDescription('A list of information about the individual tray.')
kcprtOutputTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtOutputTrayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputTrayIndex.setDescription('The unique value used by a printer to identify each trays. Values are expected to remain stable across successive printer power cycle. This contents has no meaning except for a sorter device.')
kcprtOutputTrayOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOutputTrayOrder.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputTrayOrder.setDescription('The output order for trays. The beginning number is (1) and the last number should be equal to the maximum tray number. When the multiple mode is available, the order in the appropriate group is determined by this entry. The number should be unique and continuous in one group or the whole if the group function is disabled. The value (0) means the order has not been determined. In case all of the trays are not determined, the sorter will operate in default settings. About default settings, refer to the sorters manual. Currently this entry is read-only.')
kcprtOutputTrayGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOutputTrayGroup.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputTrayGroup.setDescription('The value of kcprtTrayGroupIndex corresponding to the group that this tray is assigned to. The value (0) means this tray is not assigned to a group or the multiple mode is disable.')
kcprtOutputTrayCount = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 9, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtOutputTrayCount.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtOutputTrayCount.setDescription('The count of page that the tray may be holding. Since the tray cannot count the page that it has currently, the value is not always same as the actual page counts. If all of paper is removed, this value will be 0. In SO-6, there is no full sensor. So, if the application needs to know whether the tray is full or not, the application should compare this value with OutputTrayMaxCapacity. In some case, the printer is turned on with remaining some pages on the tray for example, this value will be same as MaxCapacity to inform that paper is remaining and demand to remove the page.')
kcprtMarkerTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1), )
if mibBuilder.loadTexts: kcprtMarkerTable.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMarkerTable.setDescription('This table contains some useful entries to control the marker specific function.')
kcprtMarkerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "prtMarkerIndex"))
if mibBuilder.loadTexts: kcprtMarkerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMarkerEntry.setDescription('A list of entries that corresponds each function of the marker.')
kcprtMarkerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtMarkerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMarkerIndex.setDescription('The value of the prtMarkerIndex of the printer devices with which it is associated.')
kcprtMarkerKirLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("offOrNotSupport", 0), ("light", 1), ("medium", 2), ("dark", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtMarkerKirLevel.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMarkerKirLevel.setDescription('The value that shows current KIR level. The value (0) means off or not support (0).')
kcprtMarkerEcoprintLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("offOrNotSupport", 0), ("light", 1), ("medium", 2), ("dark", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtMarkerEcoprintLevel.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMarkerEcoprintLevel.setDescription('The value that shows current Ecoprint level. The value (0) means off or not support.')
kcprtMarkerAddressabilityFeedDirDeclared = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtMarkerAddressabilityFeedDirDeclared.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMarkerAddressabilityFeedDirDeclared.setDescription('This object provides the value of the declared addressability, in the feed direction, of this marker. This addressability is measured in prtMarkerAddressabilityUnit.')
kcprtMarkerAddressabilityXFeedDirDeclared = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtMarkerAddressabilityXFeedDirDeclared.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMarkerAddressabilityXFeedDirDeclared.setDescription('This object provides the value of declared dimension, in the cross feed direction, of this marker device. This addressability is measured in prtMarkerAddressabilityUnit.')
kcprtMarkerAddressablilityFeedDirChosen = MibScalar((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMarkerAddressablilityFeedDirChosen.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMarkerAddressablilityFeedDirChosen.setDescription('The value of the addressability, in the feed direction, chosen by the printer. If the printer supports the declared addressability, this addressability is the same as the declared addressability. If not, this addressability is set to the closest addressability that the printer supports when the declared dimension is set.')
kcprtMarkerAddressablilityXFeedDirChosen = MibScalar((1, 3, 6, 1, 4, 1, 1347, 43, 10, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMarkerAddressablilityXFeedDirChosen.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMarkerAddressablilityXFeedDirChosen.setDescription('The value of the addressability, in the cross feed direction, chosen by the printer. If the printer supports the declared addressability, this addressability is the same as the declared addressability. If not, this addressability is set to the closest addressability that the printer supports when the declared dimension is set.')
kcprtChannelTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 14, 1), )
if mibBuilder.loadTexts: kcprtChannelTable.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtChannelTable.setDescription("This table control's HEX dump function.")
kcprtChannelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 14, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtChannelIndex"))
if mibBuilder.loadTexts: kcprtChannelEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtChannelEntry.setDescription('')
kcprtChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 14, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtChannelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtChannelIndex.setDescription('The value of the prtChannelIndex of the printer device that this prtChannelEntry is associated with.')
kcprtChannelFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("through", 0), ("hexDump", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: kcprtChannelFunction.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtChannelFunction.setDescription('The current state of the function of this channel. KYOCERA printer can set the hex dump mode to interface (channel). Writing affects all interface(channel).This setting is only valid for one job. After processing the job, this entry automatically returns through(0).')
kcprtMemoryDeviceTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1), )
if mibBuilder.loadTexts: kcprtMemoryDeviceTable.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMemoryDeviceTable.setDescription('This table contains information for each memory device, such as the IC-Card.')
kcprtMemoryDeviceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtMemoryDeviceIndex"))
if mibBuilder.loadTexts: kcprtMemoryDeviceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMemoryDeviceEntry.setDescription('A list of entries that are corresponding to the each function of the memory device.')
kcprtMemoryDeviceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtMemoryDeviceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMemoryDeviceIndex.setDescription('A unique value that is corresponding to each memory device, such as IC-Card. The value assignment will change if the IC-Card is removed or inserted.')
kcprtMemoryDeviceLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 255))).clone(namedValues=NamedValues(("icCardSlot-A", 0), ("icCardslot-B", 1), ("optionROMsocket", 2), ("residentFont", 3), ("downloadArea", 4), ("others", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMemoryDeviceLocation.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMemoryDeviceLocation.setDescription('The value shows the location of this memory device. Note that if the location is download area, only the resource that has been assigned to the current interface can be managed. To see other resources, the management application have to change the current interface.')
kcprtMemoryDeviceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 255))).clone(namedValues=NamedValues(("rom", 0), ("flash", 1), ("sram", 2), ("dram", 3), ("others", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMemoryDeviceType.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMemoryDeviceType.setDescription('The value shows the type of this memory device.')
kcprtMemoryDeviceTotalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMemoryDeviceTotalSize.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMemoryDeviceTotalSize.setDescription('The maximum space of the memory device. Unit is bytes.')
kcprtMemoryDeviceUsedSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMemoryDeviceUsedSize.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMemoryDeviceUsedSize.setDescription('The amount of occupied space on the device. Unit is bytes. If the device cannot detect the amount, the value is (-1).')
kcprtMemoryDeviceStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 4))).clone(namedValues=NamedValues(("readyReadWrite", 0), ("readyReadOnly", 1), ("notAccessible", 2), ("lowBattery", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMemoryDeviceStatus.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMemoryDeviceStatus.setDescription('This value shows current status of this device. not accessible means that the printer recognized the device but the access is impossible. battery low is for a kind of battery backuped device, such as IC-card.')
kcprtPartitionTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2), )
if mibBuilder.loadTexts: kcprtPartitionTable.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtPartitionTable.setDescription('This table contains partition information for each device.')
kcprtPartitionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtPartitionIndex"))
if mibBuilder.loadTexts: kcprtPartitionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtPartitionEntry.setDescription('A list of entries that is corresponding to the each information about the partition.')
kcprtPartitionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtPartitionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtPartitionIndex.setDescription("A unique value corresponding to the each partition on the printer's memory device. This assigment will change in some cases.")
kcprtPartitionSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtPartitionSize.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtPartitionSize.setDescription('This value shows the size of this partition. Unit is byte.')
kcprtPartitionLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtPartitionLocation.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtPartitionLocation.setDescription('This value of kcprtMemoryDeviceIndex corresponding to the device on which this partition exists. If the device is unknown, this value is (-1).')
kcprtPartitionResourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("void", 0), ("macro", 3), ("hostData", 4), ("programData", 5), ("messageData", 6), ("fontData", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtPartitionResourceType.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtPartitionResourceType.setDescription('The type of the resource that is using this partition.')
kcprtPartitionName = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtPartitionName.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtPartitionName.setDescription('The name that is assigned to this partition.')
kcprtPartitionLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notLoaded", 0), ("loaded", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtPartitionLoad.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtPartitionLoad.setDescription('This value shows whether this partition has been read by the printer. basically, the resource should be read by the printer to make it available.')
kcprtMacroDataTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3), )
if mibBuilder.loadTexts: kcprtMacroDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMacroDataTable.setDescription('This table contains information about MACRO resource.')
kcprtMacroDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtMacroDataIndex"))
if mibBuilder.loadTexts: kcprtMacroDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMacroDataEntry.setDescription('')
kcprtMacroDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtMacroDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMacroDataIndex.setDescription('')
kcprtMacroDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMacroDataName.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMacroDataName.setDescription('This value will be effective if the macro is described in Prescribe. Otherwise, this value will be NULL.')
kcprtMacroDataID = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMacroDataID.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMacroDataID.setDescription('This value will be effective if the macro is described in PCL. Otherwise, the value will be unknown(-1).')
kcprtMacroDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 255))).clone(namedValues=NamedValues(("prescribe", 1), ("pcl", 2), ("others", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMacroDataType.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMacroDataType.setDescription('This value is corresponding to the PDL that is used for decribing this macro.')
kcprtMacroDataAutoLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("onWithInitialize", 1), ("onWithoutInitialize", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMacroDataAutoLoad.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMacroDataAutoLoad.setDescription('This value shows the state of the form overlay function that is controled by AMCR command. Only one macro can be set as on, so at most one entry will have on value.')
kcprtMacroDataLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMacroDataLocation.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMacroDataLocation.setDescription('The value of kcprtMemoryDeviceIndex correspinding to the device that this macro is currently stored. unknown is (-1).')
kcprtMacroDataAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notRegistered", 0), ("registered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMacroDataAttribute.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMacroDataAttribute.setDescription('not registered means this resource is existing on the device but it is not available for the printer. For example, macro on the IC card that is inserted into the printer after turning on will be not registered. To turn it into registered, user must select them from the front panel menu.')
kcprtHostDataTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 20, 4), )
if mibBuilder.loadTexts: kcprtHostDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtHostDataTable.setDescription("This table contains information about the host data. Note that 'Host data' does not mean the job itself.")
kcprtHostDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 20, 4, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtHostDataIndex"))
if mibBuilder.loadTexts: kcprtHostDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtHostDataEntry.setDescription('A list of entries that are corresponding each information of the host data.')
kcprtHostDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 4, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtHostDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtHostDataIndex.setDescription('A unique value corresponding to each information of the host data. The assigment will change in some case.')
kcprtHostDataName = MibScalar((1, 3, 6, 1, 4, 1, 1347, 43, 20, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtHostDataName.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtHostDataName.setDescription('The name that is used for descriminating each host data.')
kcprtHostDataLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtHostDataLocation.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtHostDataLocation.setDescription('The value of kcprtMemoryDeviceIndex that is corresponding to the device in which this host data is stored. If the device is unknown, the value is -1.')
kcprtHostDataAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notRegistered", 0), ("registered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtHostDataAttribute.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtHostDataAttribute.setDescription('Basically, the value is always registered.')
kcprtProgramDataTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 20, 5), )
if mibBuilder.loadTexts: kcprtProgramDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtProgramDataTable.setDescription('This table contains information about the program data. The program data is a kind of emulation and a Prescribe command, not a macro.')
kcprtProgramDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 20, 5, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtProgramDataIndex"))
if mibBuilder.loadTexts: kcprtProgramDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtProgramDataEntry.setDescription('A list of entries that are corresponding to each information of the program data.')
kcprtProgramDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 5, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtProgramDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtProgramDataIndex.setDescription('A unique value corresponding to each program data. This assigment may change in some case.')
kcprtProgramDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtProgramDataName.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtProgramDataName.setDescription('')
kcprtProgramDataType = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("emulation", 0), ("prescribe", 1), ("others", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtProgramDataType.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtProgramDataType.setDescription('')
kcprtProgramDataLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 5, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtProgramDataLocation.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtProgramDataLocation.setDescription('The value of kcprtMemoryDeviceIndex corresponding to the device in which this program data is stored. If the device is unknown, the value is (-1).')
kcprtProgramDataAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("notRegistered", 0), ("registered", 1), ("running", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtProgramDataAttribute.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtProgramDataAttribute.setDescription('running means the program is running.')
kcprtMessageDataTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 20, 6), )
if mibBuilder.loadTexts: kcprtMessageDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMessageDataTable.setDescription('This is a bunch of message that is handled as one of the flont panel language by the printer.')
kcprtMessageDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 20, 6, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtMessageDataIndex"))
if mibBuilder.loadTexts: kcprtMessageDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMessageDataEntry.setDescription('A list of entries that are corresponding to each information of the message data.')
kcprtMessageDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 6, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtMessageDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMessageDataIndex.setDescription('The index vaule that is assigned to each front panel language.')
kcprtMessageDataName = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMessageDataName.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMessageDataName.setDescription('The name of the message data block.')
kcprtMessageDataLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMessageDataLocation.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMessageDataLocation.setDescription('The value of kcprtMemoryDeviceIndex corresponding to the device in which this message data is stored. If the device is unknown, the value is -1.')
kcprtMessageDataAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notRegistered", 0), ("registered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtMessageDataAttribute.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtMessageDataAttribute.setDescription('Always registered in the current products.')
kcprtFontDataTable = MibTable((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7), )
if mibBuilder.loadTexts: kcprtFontDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtFontDataTable.setDescription('This table contains font information.')
kcprtFontDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7, 1), ).setIndexNames((0, "HOST-RESOURCES-MIB", "hrDeviceIndex"), (0, "KYOCERA-Private-MIB", "kcprtFontDataIndex"))
if mibBuilder.loadTexts: kcprtFontDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtFontDataEntry.setDescription('A list of entries that are corresponding each information of the font.')
kcprtFontDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7, 1, 1), Integer32())
if mibBuilder.loadTexts: kcprtFontDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtFontDataIndex.setDescription('A unique value corresponding to each font data. The assignment may change in some case.')
kcprtTypeFaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtTypeFaceName.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtTypeFaceName.setDescription('The value will be NULL if no name has been assigned.')
kcprtFontID = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtFontID.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtFontID.setDescription('This value will be -1 if no ID has been assigned.')
kcprtFontType = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 255))).clone(namedValues=NamedValues(("bitmap", 0), ("scalable", 1), ("others", 255)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtFontType.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtFontType.setDescription('')
kcprtFontLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtFontLocation.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtFontLocation.setDescription('The value of kcprtMemoryDeviceIndex corresponding to the device on which this font is stored. If it is unknown, the value is -1.')
kcprtFontAttribute = MibTableColumn((1, 3, 6, 1, 4, 1, 1347, 43, 20, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("notRegistered", 0), ("registered", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: kcprtFontAttribute.setStatus('mandatory')
if mibBuilder.loadTexts: kcprtFontAttribute.setDescription('In the current printer, this value is always registered.')
mibBuilder.exportSymbols("KYOCERA-Private-MIB", kcprtHostDataName=kcprtHostDataName, kcprtCopyCount=kcprtCopyCount, kcprtHostDataLocation=kcprtHostDataLocation, kcprtMessageDataLocation=kcprtMessageDataLocation, kcprtMarkerAddressabilityXFeedDirDeclared=kcprtMarkerAddressabilityXFeedDirDeclared, kcprtOutputDefaultGroup=kcprtOutputDefaultGroup, kcprtMarkerAddressabilityFeedDirDeclared=kcprtMarkerAddressabilityFeedDirDeclared, kcprtPartitionLocation=kcprtPartitionLocation, kcprtHostBuffer2ndRate=kcprtHostBuffer2ndRate, kcprtCardSlotCapacity=kcprtCardSlotCapacity, kcprtMacroDataTable=kcprtMacroDataTable, kcprtMessageDataIndex=kcprtMessageDataIndex, kcprtCpuTable=kcprtCpuTable, kcprtMacroDataID=kcprtMacroDataID, kcprtCpuName=kcprtCpuName, kcprtPartitionResourceType=kcprtPartitionResourceType, kcprtProgramDataAttribute=kcprtProgramDataAttribute, kcprtPartitionSize=kcprtPartitionSize, kcprtMarker=kcprtMarker, kcprtBufferXoffLevel=kcprtBufferXoffLevel, kcprtPageMemorySize=kcprtPageMemorySize, kcprtOutputMultiMode=kcprtOutputMultiMode, kcprtHostDataTable=kcprtHostDataTable, kcprtCpuEntry=kcprtCpuEntry, kcprtHostBuffer1stRate=kcprtHostBuffer1stRate, kcprtPartitionTable=kcprtPartitionTable, kcprtMemoryDeviceTable=kcprtMemoryDeviceTable, kcprtOnlineControl=kcprtOnlineControl, kcprtGeneralTable=kcprtGeneralTable, kcprtSystemUpTime=kcprtSystemUpTime, kcprtMessageDataName=kcprtMessageDataName, kcprtMacroDataEntry=kcprtMacroDataEntry, kcprtKpdlLevel=kcprtKpdlLevel, kcprtFontAttribute=kcprtFontAttribute, kcprtMacroDataLocation=kcprtMacroDataLocation, kcprtOriginalMemorySize=kcprtOriginalMemorySize, kcprtTypeFaceName=kcprtTypeFaceName, kcprtMacroDataName=kcprtMacroDataName, kcprtMacroDataType=kcprtMacroDataType, kcprtMacroDataAutoLoad=kcprtMacroDataAutoLoad, kcprtTrayGroupIndex=kcprtTrayGroupIndex, kcprtMessageDataEntry=kcprtMessageDataEntry, kcprtVirtualMemory=kcprtVirtualMemory, kcprtGeneral=kcprtGeneral, kcprtMarkerEntry=kcprtMarkerEntry, kcprtOptionDescription=kcprtOptionDescription, kcprtUserMemorySize=kcprtUserMemorySize, kcprtTrayGroupBeginIndex=kcprtTrayGroupBeginIndex, kcprtBufferXonLevel=kcprtBufferXonLevel, kcprtMarkerEcoprintLevel=kcprtMarkerEcoprintLevel, kcprtPartitionIndex=kcprtPartitionIndex, kcprtChannel=kcprtChannel, kcprtMacroDataAttribute=kcprtMacroDataAttribute, kcprtOutputTrayMaxCapacity=kcprtOutputTrayMaxCapacity, kcprtPartitionName=kcprtPartitionName, kcprtBinNumber=kcprtBinNumber, kcprtPartitionLoad=kcprtPartitionLoad, kcprtOutputGroupNumber=kcprtOutputGroupNumber, kcprtOutputTrayEntry=kcprtOutputTrayEntry, kcprtFontLocation=kcprtFontLocation, kyocera=kyocera, kcprtOutputIndex=kcprtOutputIndex, kcprtProgramDataName=kcprtProgramDataName, kcprtFontDataTable=kcprtFontDataTable, kcprtSimmSlotCapacity=kcprtSimmSlotCapacity, kcprtHostDataIndex=kcprtHostDataIndex, kcprtChannelIndex=kcprtChannelIndex, kcprtTrayGroupEndIndex=kcprtTrayGroupEndIndex, kcprtProgramDataIndex=kcprtProgramDataIndex, kcprtOutputMode=kcprtOutputMode, kcprtWakeupStatusPage=kcprtWakeupStatusPage, kcprtMarkerAddressablilityXFeedDirChosen=kcprtMarkerAddressablilityXFeedDirChosen, kcprtFontType=kcprtFontType, kcprtChannelFunction=kcprtChannelFunction, kcPrinter=kcPrinter, kcprtOutputBulkStatus=kcprtOutputBulkStatus, kcprtCpuClock=kcprtCpuClock, kcprtOutputTrayGroup=kcprtOutputTrayGroup, kcprtHostDataEntry=kcprtHostDataEntry, kcprtOutputEntry=kcprtOutputEntry, kcprtTrayGroupTable=kcprtTrayGroupTable, kcprtMemoryDeviceUsedSize=kcprtMemoryDeviceUsedSize, kcprtProgramDataLocation=kcprtProgramDataLocation, kcprtGeneralModelName=kcprtGeneralModelName, kcprtMemoryDeviceType=kcprtMemoryDeviceType, kcprtHostBufferOption=kcprtHostBufferOption, kcprtMarkerAddressablilityFeedDirChosen=kcprtMarkerAddressablilityFeedDirChosen, kcprtHostBuffer3rdRate=kcprtHostBuffer3rdRate, kcprtMacroDataIndex=kcprtMacroDataIndex, kcprtCpuRole=kcprtCpuRole, kcprtGeneralEntry=kcprtGeneralEntry, kcprtOutputTrayIndex=kcprtOutputTrayIndex, kcprtRomSlotCapacity=kcprtRomSlotCapacity, kcprtMemoryResource=kcprtMemoryResource, kcprtFirmwareUpdata=kcprtFirmwareUpdata, kcprtFirmwareVersion=kcprtFirmwareVersion, kcprtPartitionEntry=kcprtPartitionEntry, kcprtChannelEntry=kcprtChannelEntry, kcprtSimmSlotUsed=kcprtSimmSlotUsed, kcprtOutputTrayTable=kcprtOutputTrayTable, kcprtTotalMemorySize=kcprtTotalMemorySize, kcprtHostDataAttribute=kcprtHostDataAttribute, kcprtHostBufferSize=kcprtHostBufferSize, kcprtProgramDataTable=kcprtProgramDataTable, kcprtSleepTimer=kcprtSleepTimer, kcprtChannelTable=kcprtChannelTable, kcprtOutputTrayCount=kcprtOutputTrayCount, kcprtFontDataEntry=kcprtFontDataEntry, kcprtTrayGroupEntry=kcprtTrayGroupEntry, kcprtOutputTable=kcprtOutputTable, kcprtMarkerIndex=kcprtMarkerIndex, kcprtMessageDataAttribute=kcprtMessageDataAttribute, kcprtMarkerKirLevel=kcprtMarkerKirLevel, kcprtOutputTrayOrder=kcprtOutputTrayOrder, kcprtProgramDataEntry=kcprtProgramDataEntry, kcprtMemoryDeviceLocation=kcprtMemoryDeviceLocation, kcprtFontDataIndex=kcprtFontDataIndex, kcprtFFTimeout=kcprtFFTimeout, kcprtCpuIndex=kcprtCpuIndex, kcprtMessageDataTable=kcprtMessageDataTable, kcprtProgramDataType=kcprtProgramDataType, kcprtMarkerTable=kcprtMarkerTable, kcprtMemoryDeviceEntry=kcprtMemoryDeviceEntry, kcprtMemoryDeviceIndex=kcprtMemoryDeviceIndex, kcprtMemoryDeviceTotalSize=kcprtMemoryDeviceTotalSize, kcprtOutput=kcprtOutput, kcprtMemoryDeviceStatus=kcprtMemoryDeviceStatus, kcprtFontID=kcprtFontID)
