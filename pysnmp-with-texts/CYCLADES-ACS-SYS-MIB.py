#
# PySNMP MIB module CYCLADES-ACS-SYS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CYCLADES-ACS-SYS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:34:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
cyACSMgmt, = mibBuilder.importSymbols("CYCLADES-ACS-MIB", "cyACSMgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, iso, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, IpAddress, Bits, Counter32, Gauge32, Unsigned32, MibIdentifier, Integer32, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "iso", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "IpAddress", "Bits", "Counter32", "Gauge32", "Unsigned32", "MibIdentifier", "Integer32", "TimeTicks")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cyACSSys = ModuleIdentity((1, 3, 6, 1, 4, 1, 2925, 4, 1))
cyACSSys.setRevisions(('2005-08-29 00:00', '2005-08-29 00:00', '2003-06-30 00:00', '2002-10-10 00:00', '2002-09-20 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cyACSSys.setRevisionsDescriptions(('Changed the Contact-Info', 'Changed the Contact-Info', 'Included informations about RAM size, flash size, CPU freq and Device Id', 'Included PCMCIA and Power Supply informations', 'First Draft',))
if mibBuilder.loadTexts: cyACSSys.setLastUpdated('200508290000Z')
if mibBuilder.loadTexts: cyACSSys.setOrganization('Cyclades Corporation')
if mibBuilder.loadTexts: cyACSSys.setContactInfo('postal : Cyclades Corporation 3541 Gateway Boulevard Fremont, CA 94538, USA e-mail : Technical Support support@cyclades.com')
if mibBuilder.loadTexts: cyACSSys.setDescription('This module defines the ACS/TS System Information')
cyACSpname = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyACSpname.setStatus('current')
if mibBuilder.loadTexts: cyACSpname.setDescription("The product's name - ACSxx (xx - the number of the serial ports )")
cyACSversion = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyACSversion.setStatus('current')
if mibBuilder.loadTexts: cyACSversion.setDescription("The firmware's version")
cyACSPower = ObjectIdentity((1, 3, 6, 1, 4, 1, 2925, 4, 1, 3))
if mibBuilder.loadTexts: cyACSPower.setStatus('current')
if mibBuilder.loadTexts: cyACSPower.setDescription('It gives information about Power Supply')
cyACSPwNum = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyACSPwNum.setStatus('current')
if mibBuilder.loadTexts: cyACSPwNum.setDescription('Number of the power supplies')
cyACSPw1 = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 1, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noinstalled", 0), ("powerON", 1), ("powerOFF", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyACSPw1.setStatus('current')
if mibBuilder.loadTexts: cyACSPw1.setDescription('State of the first power supply')
cyACSPw2 = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 1, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("noinstalled", 0), ("powerON", 1), ("powerOFF", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyACSPw2.setStatus('current')
if mibBuilder.loadTexts: cyACSPw2.setDescription('State of the second power supply')
cyACSPcmcia = ObjectIdentity((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4))
if mibBuilder.loadTexts: cyACSPcmcia.setStatus('current')
if mibBuilder.loadTexts: cyACSPcmcia.setDescription('PCMCIA card information')
cyACSNPcmcia = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyACSNPcmcia.setStatus('current')
if mibBuilder.loadTexts: cyACSNPcmcia.setDescription('Number of the cards PCMCIA available')
cyCardIdentTable = MibTable((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 2), )
if mibBuilder.loadTexts: cyCardIdentTable.setStatus('current')
if mibBuilder.loadTexts: cyCardIdentTable.setDescription('Card identification')
cyCardIdentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 2, 1), ).setIndexNames((0, "CYCLADES-ACS-SYS-MIB", "cyCardIdentIndex"))
if mibBuilder.loadTexts: cyCardIdentEntry.setStatus('current')
if mibBuilder.loadTexts: cyCardIdentEntry.setDescription('One particular association between PCMCIA socket and card identification')
cyCardIdentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardIdentIndex.setStatus('current')
if mibBuilder.loadTexts: cyCardIdentIndex.setDescription('number to identifier the socket Card')
cyCardIdentProd = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardIdentProd.setStatus('current')
if mibBuilder.loadTexts: cyCardIdentProd.setDescription('Product identification strings')
cyCardIdentMan = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardIdentMan.setStatus('current')
if mibBuilder.loadTexts: cyCardIdentMan.setDescription('Manufacturer ID codes')
cyCardIdentFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardIdentFunc.setStatus('current')
if mibBuilder.loadTexts: cyCardIdentFunc.setDescription('Function ID code')
cyCardIdentPCI = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardIdentPCI.setStatus('current')
if mibBuilder.loadTexts: cyCardIdentPCI.setDescription('PCI ID')
cyCardConfTable = MibTable((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 3), )
if mibBuilder.loadTexts: cyCardConfTable.setStatus('current')
if mibBuilder.loadTexts: cyCardConfTable.setDescription('This table has the socket configuration ')
cyCardConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 3, 1), ).setIndexNames((0, "CYCLADES-ACS-SYS-MIB", "cyCardConfIndex"))
if mibBuilder.loadTexts: cyCardConfEntry.setStatus('current')
if mibBuilder.loadTexts: cyCardConfEntry.setDescription('One particular association between PCMCIA socket and its configuration')
cyCardConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardConfIndex.setStatus('current')
if mibBuilder.loadTexts: cyCardConfIndex.setDescription('number to identifier the socket PCMCIA')
cyCardConfPower = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardConfPower.setStatus('current')
if mibBuilder.loadTexts: cyCardConfPower.setDescription('Power Settings')
cyCardConfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardConfType.setStatus('current')
if mibBuilder.loadTexts: cyCardConfType.setDescription('Interface Type')
cyCardConfInter = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardConfInter.setStatus('current')
if mibBuilder.loadTexts: cyCardConfInter.setDescription('Interrupt number')
cyCardConfFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardConfFunc.setStatus('current')
if mibBuilder.loadTexts: cyCardConfFunc.setDescription('function')
cyCardConfCardv = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardConfCardv.setStatus('current')
if mibBuilder.loadTexts: cyCardConfCardv.setDescription('Card values')
cyCardConfPort1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 3, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardConfPort1.setStatus('current')
if mibBuilder.loadTexts: cyCardConfPort1.setDescription('I/O Port 1')
cyCardConfPort2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 3, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardConfPort2.setStatus('current')
if mibBuilder.loadTexts: cyCardConfPort2.setDescription('I/O Port 2')
cyCardStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 4), )
if mibBuilder.loadTexts: cyCardStatusTable.setStatus('current')
if mibBuilder.loadTexts: cyCardStatusTable.setDescription('This table has the current socket status flags ')
cyCardStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 4, 1), ).setIndexNames((0, "CYCLADES-ACS-SYS-MIB", "cyCardStatusIndex"))
if mibBuilder.loadTexts: cyCardStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cyCardStatusEntry.setDescription('One particular association between PCMCIA socket and its status')
cyCardStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardStatusIndex.setStatus('current')
if mibBuilder.loadTexts: cyCardStatusIndex.setDescription('number to identifier the socket PCMCIA')
cyCardStatusCard = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 4, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardStatusCard.setStatus('current')
if mibBuilder.loadTexts: cyCardStatusCard.setDescription('Current Card State')
cyCardStatusFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 2925, 4, 1, 4, 4, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyCardStatusFunc.setStatus('current')
if mibBuilder.loadTexts: cyCardStatusFunc.setDescription('Current Function')
cyACSFlashSize = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyACSFlashSize.setStatus('current')
if mibBuilder.loadTexts: cyACSFlashSize.setDescription('Total amount of flash memory in Mbytes')
cyACSRAMSize = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyACSRAMSize.setStatus('current')
if mibBuilder.loadTexts: cyACSRAMSize.setDescription('Total amount of RAM in Mbytes')
cyACSCPUfreq = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyACSCPUfreq.setStatus('current')
if mibBuilder.loadTexts: cyACSCPUfreq.setDescription('CPU clock in MHz')
cyACSDevId = MibScalar((1, 3, 6, 1, 4, 1, 2925, 4, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyACSDevId.setStatus('current')
if mibBuilder.loadTexts: cyACSDevId.setDescription("The product's identifier")
mibBuilder.exportSymbols("CYCLADES-ACS-SYS-MIB", cyACSPcmcia=cyACSPcmcia, cyACSFlashSize=cyACSFlashSize, cyCardIdentProd=cyCardIdentProd, cyCardConfEntry=cyCardConfEntry, cyCardConfIndex=cyCardConfIndex, cyACSCPUfreq=cyACSCPUfreq, cyCardConfPort2=cyCardConfPort2, cyCardStatusTable=cyCardStatusTable, cyCardIdentEntry=cyCardIdentEntry, cyCardIdentIndex=cyCardIdentIndex, cyACSPw2=cyACSPw2, cyACSPower=cyACSPower, cyCardConfTable=cyCardConfTable, cyCardConfInter=cyCardConfInter, cyACSNPcmcia=cyACSNPcmcia, cyACSversion=cyACSversion, cyACSpname=cyACSpname, cyACSSys=cyACSSys, cyCardStatusCard=cyCardStatusCard, cyCardStatusFunc=cyCardStatusFunc, cyCardIdentPCI=cyCardIdentPCI, cyACSDevId=cyACSDevId, cyCardIdentTable=cyCardIdentTable, cyACSPw1=cyACSPw1, cyCardConfPower=cyCardConfPower, cyCardConfType=cyCardConfType, cyACSPwNum=cyACSPwNum, cyCardConfFunc=cyCardConfFunc, cyCardStatusIndex=cyCardStatusIndex, PYSNMP_MODULE_ID=cyACSSys, cyCardIdentFunc=cyCardIdentFunc, cyCardIdentMan=cyCardIdentMan, cyCardConfPort1=cyCardConfPort1, cyCardStatusEntry=cyCardStatusEntry, cyCardConfCardv=cyCardConfCardv, cyACSRAMSize=cyACSRAMSize)
