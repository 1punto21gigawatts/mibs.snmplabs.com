#
# PySNMP MIB module HP-VSF-VC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-VSF-VC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:05 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
PhysicalIndex, = mibBuilder.importSymbols("ENTITY-MIB", "PhysicalIndex")
hpSwitch, = mibBuilder.importSymbols("HP-ICF-OID", "hpSwitch")
ifIndex, InterfaceIndexOrZero = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndexOrZero")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
hpSwitchBaseMACAddress, = mibBuilder.importSymbols("NETSWITCH-MIB", "hpSwitchBaseMACAddress")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, MibIdentifier, ModuleIdentity, iso, Gauge32, NotificationType, IpAddress, Bits, Integer32, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "MibIdentifier", "ModuleIdentity", "iso", "Gauge32", "NotificationType", "IpAddress", "Bits", "Integer32", "Counter32", "Unsigned32")
RowStatus, TruthValue, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TruthValue", "DisplayString", "TextualConvention")
hpicfVsfVCMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116))
hpicfVsfVCMIB.setRevisions(('2016-06-22 00:00', '2016-05-09 00:00', '2015-03-04 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hpicfVsfVCMIB.setRevisionsDescriptions(('Added hpicfVsfMADVlan and hpicfVsfMADVlanConnectivity object.', 'Added hpicfVsfVCPortSpeed object.', 'Initial version of this MIB.',))
if mibBuilder.loadTexts: hpicfVsfVCMIB.setLastUpdated('201606220000Z')
if mibBuilder.loadTexts: hpicfVsfVCMIB.setOrganization('HP Networking')
if mibBuilder.loadTexts: hpicfVsfVCMIB.setContactInfo('Hewlett Packard Company 8000 Foothills Blvd. Roseville, CA 95747')
if mibBuilder.loadTexts: hpicfVsfVCMIB.setDescription('This MIB module describes the objects that are used to manage VSF Virtual Chassis feature.')
hpicfVsfVCNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 0))
hpicfVsfVCObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1))
hpicfVsfVCConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1))
hpicfVsfVCStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 2))
hpicfVsfVCDomainId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1, 1), Unsigned32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVsfVCDomainId.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCDomainId.setDescription('The VSF virtual chassis domain ID uniquely identifies the VSF virtual chassis; all members of the virtual chassis have the same virtual chassis domain ID. The VSF virtual chassis domain ID is valid only when hpicfVsfVCSwitchAdminStatus is set to true (1). This value is set by the first elected commander of the VSF virtual chassis.')
hpicfVsfVCOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unAvailable", 0), ("disabled", 1), ("active", 2), ("fragmentInactive", 3), ("fragmentActive", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCOperStatus.setDescription('This is the current operational status of the VSF virtual chassis.')
hpicfVsfVCAdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVsfVCAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCAdminStatus.setDescription('The administrative status of the VSF virtual chassis. When set to enable (1), this object enables VSF on the switch and on the discovered members. Setting this to disable (2) disables VSF only on the standalone switch. Enabling or disabling VSF triggers a reboot of the VSF switch.')
hpicfVsfVCTopology = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 0), ("chain", 1), ("ring", 2), ("mesh", 3), ("partialMesh", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCTopology.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCTopology.setDescription('This object describes the physical topology of the VSF virtual chassis.')
hpicfVsfVCTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVsfVCTrapEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCTrapEnable.setDescription('This object controls the ability of the VSF virtual chassis to send traps.')
hpicfVsfVCOobmMADEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVsfVCOobmMADEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCOobmMADEnable.setDescription('This object enables the VSF OOBM MAD (Multi-Active Detection) feature.')
hpicfVsfLldpMADEnable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVsfLldpMADEnable.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfLldpMADEnable.setDescription('This object enables the VSF LLDP MAD (Multi-Active Detection) feature.')
hpicfVsfVCLldpMADDeviceIpType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1, 8), InetAddressType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADDeviceIpType.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADDeviceIpType.setDescription('This object provides the address type of the VSF LLDP MAD (Multi-Active Detection)device.')
hpicfVsfVCLldpMADDeviceIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1, 9), InetAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADDeviceIpAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADDeviceIpAddr.setDescription('This object provides the IPv4/IPv6 address of the VSF LLDP MAD (Multi-Active Detection) device.')
hpicfVsfVCLldpMADSnmpVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2))).clone(namedValues=NamedValues(("v2c", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADSnmpVersion.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADSnmpVersion.setDescription('This object provides the VSF LLDP MAD (Multi-Active Detection) SNMP version.')
hpicfVsfVCLldpMADSnmpCommunity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADSnmpCommunity.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADSnmpCommunity.setDescription('This object provides the VSF LLDP MAD (Multi-Active Detection) SNMP community-string.')
hpicfVsfMADVlan = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVsfMADVlan.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfMADVlan.setDescription('This object configures the VLAN as a Multi-Active Detection (MAD) VLAN. The MAD VLAN will be used to send and receive discovery packets to detect virtual chassis fragments in case of a split. The default value (0) of the object indicates that no MAD VLAN is currently configured.')
hpicfVsfMADVlanConnectivity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("full", 2), ("partial", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfMADVlanConnectivity.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfMADVlanConnectivity.setDescription('This object indicates the connectivity state of Multi- Active-Detection (MAD) VLAN. none (1) - When the MAD VLAN does not have any operational port in all member switches. full (2) - When the MAD VLAN has one up port in all member switches. partial (3) - When the MAD VLAN has some up ports but does not have an operational port in all member switches.')
hpicfVsfVCPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("none", 0), ("oneGbps", 1), ("tenGbps", 2), ("fortyGbps", 3))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVsfVCPortSpeed.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCPortSpeed.setDescription('This object is used to set the speed of all VSF ports. If this object is not set, it is automatically set to the maximum speed of the first link port added to the VSF. The value none(0) indicates that no VSF links have been added so the speed is unknown.')
hpicfVsfVCLldpMADReadinessStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("success", 1), ("failure", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADReadinessStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADReadinessStatus.setDescription('This object indicates the readiness state of VSF LLDP MAD (Multi-Active Detection).')
hpicfVsfVCLldpMADDeviceMAC = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 2, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADDeviceMAC.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADDeviceMAC.setDescription('This object indicates the MAC address of the VSF LLDP MAD (Multi-Active Detection) helper-device.')
hpicfVsfVCLldpMADVlanId = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADVlanId.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADVlanId.setDescription('This object indicates the VLAN-ID of the domain on which the VSF LLDP MAD (Multi-Active Detection) helper-device resides.')
hpicfVsfVCLldpMADTrunkIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 2, 4), InterfaceIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADTrunkIfIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADTrunkIfIndex.setDescription('This object indicates the trunk ifIndex of the interface on the VSF device that is connected to the VSF LLDP MAD (Multi-Active Detection) helper-device.')
hpicfVsfVCLldpMADProbePortSet = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 2, 5), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADProbePortSet.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADProbePortSet.setDescription('This object indicates the list of physical ports on the VSF LLDP MAD (Multi-Active Detection) helper-device that will be probed for operational status during MAD probe.')
hpicfVsfVCLldpMADConnectivity = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("full", 2), ("partial", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADConnectivity.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADConnectivity.setDescription('This object indicates the reachability state of the VSF LLDP MAD (Multi-Active Detection) helper-device. none (1) - When there is no connectivity to the LLDP MAD helper-device. full (2) - When the LAG has at least one physical port in the enabled state on every VSF member switch. partial (3) - When the LAG does not have at least one enabled VSF physical port on every VSF member switch.')
hpicfVsfVCLldpMADSplitStatus = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADSplitStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADSplitStatus.setDescription('This object indicates the VSF LLDP MAD (Multi-Active Detection) split status.')
hpicfVsfVCLldpMADProbeOriginator = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADProbeOriginator.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADProbeOriginator.setDescription('This object indicates whether the VSF fragment is running the VSF LLDP MAD (Multi-Active Detection) probe or not.')
hpicfVsfVCLldpMADProbeRequestsSent = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADProbeRequestsSent.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADProbeRequestsSent.setDescription('This is the number of SNMP queries sent to the VSF LLDP MAD (Multi-Active Detection) helper-device.')
hpicfVsfVCLldpMADProbeResponseRcvd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADProbeResponseRcvd.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADProbeResponseRcvd.setDescription('This is the number of SNMP responses received from the VSF LLDP MAD (Multi-Active Detection) helper-device.')
hpicfVsfVCLldpMADActiveFragment = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCLldpMADActiveFragment.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLldpMADActiveFragment.setDescription('This object specifies whether this VSF fragment is the active or an inactive fragment.')
hpicfVsfVCMemberTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3), )
if mibBuilder.loadTexts: hpicfVsfVCMemberTable.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberTable.setDescription('This table contains information about the VSF virtual chassis members.')
hpicfVsfVCMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1), ).setIndexNames((0, "HP-VSF-VC-MIB", "hpicfVsfVCMemberId"))
if mibBuilder.loadTexts: hpicfVsfVCMemberEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberEntry.setDescription('A row in the VSF virtual chassis member table.')
hpicfVsfVCMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfVsfVCMemberId.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberId.setDescription('This object describes the VSF virtual chassis member ID.')
hpicfVsfVCMemberProductId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVsfVCMemberProductId.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberProductId.setDescription('This object describes the type of VSF member-switch.')
hpicfVsfVCMemberMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(6, 6), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVsfVCMemberMacAddr.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberMacAddr.setDescription('This object specifies the VSF member-switch MAC address.')
hpicfVsfVCMemberShutdown = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVsfVCMemberShutdown.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberShutdown.setDescription('When this object is set to true (1) for a specific active-member VSF virtual chassis switch, that switch will shut down. Setting the object to false (2) has no effect. This object cannot be set to true (1) if the specified member is an VSF commander. If the VSF member is in standby mode, a new standby switch is chosen. The VSF member shutdown is prevented if it will cause a virtual chassis split.')
hpicfVsfVCMemberReboot = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVsfVCMemberReboot.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberReboot.setDescription('When set to true (1), this object will reboot the VSF member-switch. Setting the object to false (2) has no effect. Reboot is prevented if it will cause a virtual chassis split.')
hpicfVsfVCMemberAdminPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(128)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVsfVCMemberAdminPriority.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberAdminPriority.setDescription('This object allows the user to set the priority of a switch when VSF is enabled on it.')
hpicfVsfVCMemberEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVsfVCMemberEntryStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberEntryStatus.setDescription('This object indicates the row status of an VSF virtual chassis-member entry. If the VSF member ID corresponds to an VSF commander, the row cannot be destroyed. For active switches, if hpicfVsfVCMemberReboot is set to true (1), and the row status is set to destroy (6), the switch comes up with a default configuration and acquires a new hpicfVsfVCMemberId.')
hpicfVsfVCMemberEntPhysicalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 8), PhysicalIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCMemberEntPhysicalIndex.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberEntPhysicalIndex.setDescription('This object specifies the entPhysicalTable (rfc2737) index of the VSF member.')
hpicfVsfVCMemberState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("unusedId", 0), ("missing", 1), ("provision", 2), ("commander", 3), ("standby", 4), ("member", 5), ("shutdown", 6), ("booting", 7), ("communicationFailure", 8), ("incompatibleOS", 9), ("unknownState", 10), ("standbyBooting", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCMemberState.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberState.setDescription("This object gives the status of the member-switch in the VSF virtual chassis. unusedId (0) - The member ID does not exist. missing (1) - An VSF virtual chassis member-switch is marked as missing when it becomes non-responsive. A lack of response from the switch means that either the virtual chassis link or the virtual chassis member has crashed. Note that it is possible to remove a missing member from the virtual chassis. Once removed, the missing member's configuration will be deleted from the virtual chassis configuration file. provision (2) - A member-switch that is not physically present but whose configuration is provisioned . commander (3) - The member-switch which is the commander of the VSF virtual chassis. standby (4) - The member-switch which is the standby of the VSF virtual chassis. member (5) - The member-switch that is a part of the VSF virtual chassis. shutdown (6) - The member-switch is in the shut down state. booting (7) - The member-switch is booting. communicationFailure (8)- The member-switch cannot be reached. incompatibleOS (9) - The member-switch is running with a different Operating System. unknownState (10) - The state of the member-switch cannot be determined. standbyBooting (11)- The standby switch is currently booting up. When the switch finishes booting, its state will change to standby (4).")
hpicfVsfVCMemberProductName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 10), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCMemberProductName.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberProductName.setDescription('The product name of the VSF member-switch.')
hpicfVsfVCMemberUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCMemberUpTime.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberUpTime.setDescription('This object provides the uptime of the VSF member-switch. This is different from the VSF chassis uptime.')
hpicfVsfVCMemberSysOid = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 12), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCMemberSysOid.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberSysOid.setDescription('This object provides the sysObjectId of the VSF member-switch.')
hpicfVsfVCMemberIdForTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 13), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfVsfVCMemberIdForTrap.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberIdForTrap.setDescription('The member ID used in trap notifications. This is the same value as hpicfVsfVCMemberId.')
hpicfVsfVCMemberSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCMemberSerialNum.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberSerialNum.setDescription('This object specifies the serial number of the VSF member-switch.')
hpicfVsfVCMemberBootRomVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCMemberBootRomVersion.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberBootRomVersion.setDescription('This object specifies the boot-ROM version of the VSF member-switch.')
hpicfVsfVCMemberOsVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCMemberOsVersion.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberOsVersion.setDescription('This object specifies the operating system version of the VSF member-switch.')
hpicfVsfVCMemberBootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCMemberBootImage.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberBootImage.setDescription('This object specifies the boot image of the VSF member-switch.')
hpicfVsfVCMemberRenumber = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVsfVCMemberRenumber.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberRenumber.setDescription('This object specifies the new member ID to be assigned to this VSF virtual chassis member-switch.')
hpicfVsfVCMemberCpuUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCMemberCpuUtil.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberCpuUtil.setDescription('This object provides the percentage of CPU utilization of the VSF member-switch.')
hpicfVsfVCMemberTotalMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCMemberTotalMemory.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberTotalMemory.setDescription('This object provides the total memory usage in bytes of the VSF member-switch.')
hpicfVsfVCMemberFreeMemory = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 3, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCMemberFreeMemory.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberFreeMemory.setDescription('This object provides the free memory available, in bytes, on the VSF member-switch.')
hpicfVsfVCLinkTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 4), )
if mibBuilder.loadTexts: hpicfVsfVCLinkTable.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLinkTable.setDescription("This table contains information about the VSF links. An VSF link is a logical interface for the connection between VSF member devices. To use an VSF link, you must bind at least one physical port to it. These ports are called 'VSF physical ports' or 'VSF Ports'. The physical ports assigned to an VSF link automatically form an aggregate VSF link. An VSF link goes down only if all of its members' physical ports are down.")
hpicfVsfVCLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 4, 1), ).setIndexNames((0, "HP-VSF-VC-MIB", "hpicfVsfVCLinkMemberId"), (0, "HP-VSF-VC-MIB", "hpicfVsfVCLinkId"))
if mibBuilder.loadTexts: hpicfVsfVCLinkEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLinkEntry.setDescription('A row in the VSF link table.')
hpicfVsfVCLinkMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: hpicfVsfVCLinkMemberId.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLinkMemberId.setDescription('This object is the member ID of the VSF virtual chassis to which this VSF link belongs.')
hpicfVsfVCLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)))
if mibBuilder.loadTexts: hpicfVsfVCLinkId.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLinkId.setDescription('This object indicates the link ID for this VSF entry.')
hpicfVsfVCLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVsfVCLinkName.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLinkName.setDescription('This object indicates the VSF link name. The maximum allowed link name is 32 characters.')
hpicfVsfVCLinkOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCLinkOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLinkOperStatus.setDescription('This object indicates the VSF link state.')
hpicfVsfVCPeerMemberId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCPeerMemberId.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCPeerMemberId.setDescription('This object indicates the peer-member ID to which the VSF link is connected.')
hpicfVsfVCPeerLinkId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 4, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCPeerLinkId.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCPeerLinkId.setDescription('This object indicates the VSF link ID of the peer-member to which this VSF link is connected.')
hpicfVsfVCLinkPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 4, 1, 7), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hpicfVsfVCLinkPortList.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLinkPortList.setDescription('This object indicates the list of physical ports belonging to this VSF link.')
hpicfVsfVCLinkEntryStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 4, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVsfVCLinkEntryStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLinkEntryStatus.setDescription('This object indicates the row status of an VSF virtual chassis link entry.')
hpicfVsfVCLinkIdForTrap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 4, 1, 9), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hpicfVsfVCLinkIdForTrap.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLinkIdForTrap.setDescription('This object indicates the VSF virtual chassis link ID used in trap notifications. This is the same value as hpicfVsfVCLinkId.')
hpicfVsfVCLinkPortStartState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hpicfVsfVCLinkPortStartState.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLinkPortStartState.setDescription('This object indicates whether ports should be enabled while creating the VSF virtual chassis link.')
hpicfVsfVCPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 5), )
if mibBuilder.loadTexts: hpicfVsfVCPortTable.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCPortTable.setDescription('This table contains information about the VSF virtual chassis physical ports.')
hpicfVsfVCPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hpicfVsfVCPortEntry.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCPortEntry.setDescription('A row in the VSF port table.')
hpicfVsfVCPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("error", 3), ("disabled", 4), ("provisioned", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCPortOperStatus.setDescription('This object provides the VSF virtual chassis physical port state.')
hpicfVsfVCPortOperStatusErrorStr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 1, 5, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpicfVsfVCPortOperStatusErrorStr.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCPortOperStatusErrorStr.setDescription('This object provides an error message if hpicfVsfVCPortOperStatus returns the value error (3).')
hpicfVsfVCCommanderChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 0, 2)).setObjects(("HP-VSF-VC-MIB", "hpicfVsfVCMemberIdForTrap"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberState"))
if mibBuilder.loadTexts: hpicfVsfVCCommanderChange.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCCommanderChange.setDescription('This notification is generated when a new VSF commander first comes up. The notification is also sent when a failover happens, and the VSF standby becomes an VSF commander or when the VSF commander is down.')
hpicfVsfVCMemberChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 0, 3)).setObjects(("HP-VSF-VC-MIB", "hpicfVsfVCMemberIdForTrap"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberState"))
if mibBuilder.loadTexts: hpicfVsfVCMemberChange.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberChange.setDescription('This notification is generated when a new member joins the VSF virtual chassis or when a member switch is moved from the loose-provisioned state to the strict-provisioned state.')
hpicfVsfVCMemberStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 0, 4)).setObjects(("HP-VSF-VC-MIB", "hpicfVsfVCMemberIdForTrap"), ("NETSWITCH-MIB", "hpSwitchBaseMACAddress"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberState"))
if mibBuilder.loadTexts: hpicfVsfVCMemberStatusChange.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberStatusChange.setDescription('This notification is generated when an VSF member becomes active or inactive.')
hpicfVsfVCConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 2))
hpicfVsfVCCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 2, 1))
hpicfVsfVCGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 2, 2))
hpicfVsfVCConfigScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 2, 2, 1)).setObjects(("HP-VSF-VC-MIB", "hpicfVsfVCDomainId"), ("HP-VSF-VC-MIB", "hpicfVsfVCOperStatus"), ("HP-VSF-VC-MIB", "hpicfVsfVCAdminStatus"), ("HP-VSF-VC-MIB", "hpicfVsfVCTopology"), ("HP-VSF-VC-MIB", "hpicfVsfVCTrapEnable"), ("HP-VSF-VC-MIB", "hpicfVsfLldpMADEnable"), ("HP-VSF-VC-MIB", "hpicfVsfVCOobmMADEnable"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADDeviceIpType"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADDeviceIpAddr"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADSnmpVersion"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADSnmpCommunity"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVsfVCConfigScalarGroup = hpicfVsfVCConfigScalarGroup.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfVsfVCConfigScalarGroup.setDescription('A collection of VSF virtual chassis scalar objects.')
hpicfVsfVCMemberTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 2, 2, 2)).setObjects(("HP-VSF-VC-MIB", "hpicfVsfVCMemberProductId"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberMacAddr"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberShutdown"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberReboot"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberAdminPriority"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberEntryStatus"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberEntPhysicalIndex"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberState"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberProductName"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberUpTime"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberSysOid"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberIdForTrap"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberSerialNum"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberBootRomVersion"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberOsVersion"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberBootImage"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberRenumber"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberCpuUtil"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberTotalMemory"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberFreeMemory"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVsfVCMemberTableGroup = hpicfVsfVCMemberTableGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMemberTableGroup.setDescription('A collection of VSF virtual chassis member table objects.')
hpicfVsfVCLinkTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 2, 2, 3)).setObjects(("HP-VSF-VC-MIB", "hpicfVsfVCLinkName"), ("HP-VSF-VC-MIB", "hpicfVsfVCLinkOperStatus"), ("HP-VSF-VC-MIB", "hpicfVsfVCPeerMemberId"), ("HP-VSF-VC-MIB", "hpicfVsfVCPeerLinkId"), ("HP-VSF-VC-MIB", "hpicfVsfVCLinkPortList"), ("HP-VSF-VC-MIB", "hpicfVsfVCLinkEntryStatus"), ("HP-VSF-VC-MIB", "hpicfVsfVCLinkIdForTrap"), ("HP-VSF-VC-MIB", "hpicfVsfVCLinkPortStartState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVsfVCLinkTableGroup = hpicfVsfVCLinkTableGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCLinkTableGroup.setDescription('A collection of VSF virtual chassis link table objects.')
hpicfVsfVCNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 2, 2, 4)).setObjects(("HP-VSF-VC-MIB", "hpicfVsfVCCommanderChange"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberChange"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberStatusChange"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVsfVCNotificationsGroup = hpicfVsfVCNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCNotificationsGroup.setDescription('A collection of VSF virtual chassis notifications objects.')
hpicfVsfVCStatusScalarGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 2, 2, 5)).setObjects(("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADReadinessStatus"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADDeviceMAC"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADVlanId"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADTrunkIfIndex"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADProbePortSet"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADConnectivity"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADSplitStatus"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADProbeOriginator"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADProbeRequestsSent"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADProbeResponseRcvd"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADActiveFragment"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVsfVCStatusScalarGroup = hpicfVsfVCStatusScalarGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCStatusScalarGroup.setDescription('A collection of VSF virtual chassis notifications objects.')
hpicfVsfVCPortTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 2, 2, 6)).setObjects(("HP-VSF-VC-MIB", "hpicfVsfVCPortOperStatus"), ("HP-VSF-VC-MIB", "hpicfVsfVCPortOperStatusErrorStr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVsfVCPortTableGroup = hpicfVsfVCPortTableGroup.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCPortTableGroup.setDescription('A collection of VSF virtual chassis physical port objects.')
hpicfVsfVCConfigScalarGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 2, 2, 7)).setObjects(("HP-VSF-VC-MIB", "hpicfVsfVCDomainId"), ("HP-VSF-VC-MIB", "hpicfVsfVCOperStatus"), ("HP-VSF-VC-MIB", "hpicfVsfVCAdminStatus"), ("HP-VSF-VC-MIB", "hpicfVsfVCTopology"), ("HP-VSF-VC-MIB", "hpicfVsfVCTrapEnable"), ("HP-VSF-VC-MIB", "hpicfVsfLldpMADEnable"), ("HP-VSF-VC-MIB", "hpicfVsfVCOobmMADEnable"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADDeviceIpType"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADDeviceIpAddr"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADSnmpVersion"), ("HP-VSF-VC-MIB", "hpicfVsfVCLldpMADSnmpCommunity"), ("HP-VSF-VC-MIB", "hpicfVsfMADVlan"), ("HP-VSF-VC-MIB", "hpicfVsfMADVlanConnectivity"), ("HP-VSF-VC-MIB", "hpicfVsfVCPortSpeed"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVsfVCConfigScalarGroup1 = hpicfVsfVCConfigScalarGroup1.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCConfigScalarGroup1.setDescription('A collection of VSF virtual chassis scalar objects.')
hpicfVsfVCMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 2, 1, 1)).setObjects(("HP-VSF-VC-MIB", "hpicfVsfVCConfigScalarGroup"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberTableGroup"), ("HP-VSF-VC-MIB", "hpicfVsfVCLinkTableGroup"), ("HP-VSF-VC-MIB", "hpicfVsfVCNotificationsGroup"), ("HP-VSF-VC-MIB", "hpicfVsfVCStatusScalarGroup"), ("HP-VSF-VC-MIB", "hpicfVsfVCPortTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVsfVCMibCompliance = hpicfVsfVCMibCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: hpicfVsfVCMibCompliance.setDescription('The compliance statement for devices implementing the HP VSF VC Mib.')
hpicfVsfVCMibCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 11, 2, 14, 11, 5, 1, 116, 2, 1, 2)).setObjects(("HP-VSF-VC-MIB", "hpicfVsfVCConfigScalarGroup1"), ("HP-VSF-VC-MIB", "hpicfVsfVCMemberTableGroup"), ("HP-VSF-VC-MIB", "hpicfVsfVCLinkTableGroup"), ("HP-VSF-VC-MIB", "hpicfVsfVCNotificationsGroup"), ("HP-VSF-VC-MIB", "hpicfVsfVCStatusScalarGroup"), ("HP-VSF-VC-MIB", "hpicfVsfVCPortTableGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hpicfVsfVCMibCompliance1 = hpicfVsfVCMibCompliance1.setStatus('current')
if mibBuilder.loadTexts: hpicfVsfVCMibCompliance1.setDescription('The compliance statement for devices implementing the HP VSF VC Mib.')
mibBuilder.exportSymbols("HP-VSF-VC-MIB", hpicfVsfVCMemberBootImage=hpicfVsfVCMemberBootImage, hpicfVsfVCLldpMADSplitStatus=hpicfVsfVCLldpMADSplitStatus, hpicfVsfVCStatusScalarGroup=hpicfVsfVCStatusScalarGroup, PYSNMP_MODULE_ID=hpicfVsfVCMIB, hpicfVsfVCLldpMADConnectivity=hpicfVsfVCLldpMADConnectivity, hpicfVsfVCTrapEnable=hpicfVsfVCTrapEnable, hpicfVsfVCMemberTable=hpicfVsfVCMemberTable, hpicfVsfVCMemberCpuUtil=hpicfVsfVCMemberCpuUtil, hpicfVsfVCMibCompliance1=hpicfVsfVCMibCompliance1, hpicfVsfMADVlanConnectivity=hpicfVsfMADVlanConnectivity, hpicfVsfVCNotifications=hpicfVsfVCNotifications, hpicfVsfVCPortSpeed=hpicfVsfVCPortSpeed, hpicfVsfVCLldpMADActiveFragment=hpicfVsfVCLldpMADActiveFragment, hpicfVsfVCMemberShutdown=hpicfVsfVCMemberShutdown, hpicfVsfVCLinkName=hpicfVsfVCLinkName, hpicfVsfVCMemberBootRomVersion=hpicfVsfVCMemberBootRomVersion, hpicfVsfVCMemberAdminPriority=hpicfVsfVCMemberAdminPriority, hpicfVsfVCLldpMADDeviceIpAddr=hpicfVsfVCLldpMADDeviceIpAddr, hpicfVsfVCLldpMADDeviceMAC=hpicfVsfVCLldpMADDeviceMAC, hpicfVsfVCOobmMADEnable=hpicfVsfVCOobmMADEnable, hpicfVsfVCLinkTable=hpicfVsfVCLinkTable, hpicfVsfVCLinkId=hpicfVsfVCLinkId, hpicfVsfVCMemberTableGroup=hpicfVsfVCMemberTableGroup, hpicfVsfVCMIB=hpicfVsfVCMIB, hpicfVsfVCMemberRenumber=hpicfVsfVCMemberRenumber, hpicfVsfVCAdminStatus=hpicfVsfVCAdminStatus, hpicfVsfVCMemberEntry=hpicfVsfVCMemberEntry, hpicfVsfVCLinkEntryStatus=hpicfVsfVCLinkEntryStatus, hpicfVsfVCLldpMADReadinessStatus=hpicfVsfVCLldpMADReadinessStatus, hpicfVsfVCDomainId=hpicfVsfVCDomainId, hpicfVsfVCStatus=hpicfVsfVCStatus, hpicfVsfVCMemberProductId=hpicfVsfVCMemberProductId, hpicfVsfVCLldpMADProbeOriginator=hpicfVsfVCLldpMADProbeOriginator, hpicfVsfVCMemberMacAddr=hpicfVsfVCMemberMacAddr, hpicfVsfVCLinkIdForTrap=hpicfVsfVCLinkIdForTrap, hpicfVsfMADVlan=hpicfVsfMADVlan, hpicfVsfLldpMADEnable=hpicfVsfLldpMADEnable, hpicfVsfVCLinkPortList=hpicfVsfVCLinkPortList, hpicfVsfVCConfigScalarGroup=hpicfVsfVCConfigScalarGroup, hpicfVsfVCMemberOsVersion=hpicfVsfVCMemberOsVersion, hpicfVsfVCPortOperStatus=hpicfVsfVCPortOperStatus, hpicfVsfVCPortEntry=hpicfVsfVCPortEntry, hpicfVsfVCObjects=hpicfVsfVCObjects, hpicfVsfVCNotificationsGroup=hpicfVsfVCNotificationsGroup, hpicfVsfVCMibCompliance=hpicfVsfVCMibCompliance, hpicfVsfVCPortTable=hpicfVsfVCPortTable, hpicfVsfVCMemberSysOid=hpicfVsfVCMemberSysOid, hpicfVsfVCLldpMADSnmpVersion=hpicfVsfVCLldpMADSnmpVersion, hpicfVsfVCMemberStatusChange=hpicfVsfVCMemberStatusChange, hpicfVsfVCLldpMADProbeRequestsSent=hpicfVsfVCLldpMADProbeRequestsSent, hpicfVsfVCMemberProductName=hpicfVsfVCMemberProductName, hpicfVsfVCLinkEntry=hpicfVsfVCLinkEntry, hpicfVsfVCConformance=hpicfVsfVCConformance, hpicfVsfVCLldpMADVlanId=hpicfVsfVCLldpMADVlanId, hpicfVsfVCMemberIdForTrap=hpicfVsfVCMemberIdForTrap, hpicfVsfVCPortOperStatusErrorStr=hpicfVsfVCPortOperStatusErrorStr, hpicfVsfVCMemberSerialNum=hpicfVsfVCMemberSerialNum, hpicfVsfVCCompliances=hpicfVsfVCCompliances, hpicfVsfVCMemberTotalMemory=hpicfVsfVCMemberTotalMemory, hpicfVsfVCMemberId=hpicfVsfVCMemberId, hpicfVsfVCMemberReboot=hpicfVsfVCMemberReboot, hpicfVsfVCMemberEntryStatus=hpicfVsfVCMemberEntryStatus, hpicfVsfVCPeerMemberId=hpicfVsfVCPeerMemberId, hpicfVsfVCLldpMADProbePortSet=hpicfVsfVCLldpMADProbePortSet, hpicfVsfVCMemberEntPhysicalIndex=hpicfVsfVCMemberEntPhysicalIndex, hpicfVsfVCLinkPortStartState=hpicfVsfVCLinkPortStartState, hpicfVsfVCLldpMADProbeResponseRcvd=hpicfVsfVCLldpMADProbeResponseRcvd, hpicfVsfVCLinkMemberId=hpicfVsfVCLinkMemberId, hpicfVsfVCMemberUpTime=hpicfVsfVCMemberUpTime, hpicfVsfVCConfigScalarGroup1=hpicfVsfVCConfigScalarGroup1, hpicfVsfVCGroups=hpicfVsfVCGroups, hpicfVsfVCLinkOperStatus=hpicfVsfVCLinkOperStatus, hpicfVsfVCLinkTableGroup=hpicfVsfVCLinkTableGroup, hpicfVsfVCConfig=hpicfVsfVCConfig, hpicfVsfVCLldpMADSnmpCommunity=hpicfVsfVCLldpMADSnmpCommunity, hpicfVsfVCLldpMADTrunkIfIndex=hpicfVsfVCLldpMADTrunkIfIndex, hpicfVsfVCMemberState=hpicfVsfVCMemberState, hpicfVsfVCMemberChange=hpicfVsfVCMemberChange, hpicfVsfVCCommanderChange=hpicfVsfVCCommanderChange, hpicfVsfVCOperStatus=hpicfVsfVCOperStatus, hpicfVsfVCLldpMADDeviceIpType=hpicfVsfVCLldpMADDeviceIpType, hpicfVsfVCPortTableGroup=hpicfVsfVCPortTableGroup, hpicfVsfVCPeerLinkId=hpicfVsfVCPeerLinkId, hpicfVsfVCTopology=hpicfVsfVCTopology, hpicfVsfVCMemberFreeMemory=hpicfVsfVCMemberFreeMemory)
