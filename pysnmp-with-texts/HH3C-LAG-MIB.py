#
# PySNMP MIB module HH3C-LAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-LAG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:27:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
hh3cRhw, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cRhw")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
NotificationGroup, ModuleCompliance, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance", "ObjectGroup")
IpAddress, Bits, ModuleIdentity, MibIdentifier, Gauge32, NotificationType, Counter32, ObjectIdentity, TimeTicks, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Integer32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "ModuleIdentity", "MibIdentifier", "Gauge32", "NotificationType", "Counter32", "ObjectIdentity", "TimeTicks", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Integer32", "iso")
TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
hh3cLAG = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 8, 25))
if mibBuilder.loadTexts: hh3cLAG.setLastUpdated('200310091942Z')
if mibBuilder.loadTexts: hh3cLAG.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cLAG.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cLAG.setDescription('LACP extend MIB.')
hh3cLAGMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1))
hh3cAggLinkTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1), )
if mibBuilder.loadTexts: hh3cAggLinkTable.setStatus('current')
if mibBuilder.loadTexts: hh3cAggLinkTable.setDescription('A table of aggregate link objects.')
hh3cAggLinkEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1), ).setIndexNames((0, "HH3C-LAG-MIB", "hh3cAggLinkNumber"))
if mibBuilder.loadTexts: hh3cAggLinkEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cAggLinkEntry.setDescription('Entry of table.')
hh3cAggLinkNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1, 1), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cAggLinkNumber.setStatus('current')
if mibBuilder.loadTexts: hh3cAggLinkNumber.setDescription('The serial number of aggregation group.')
hh3cAggLinkName = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAggLinkName.setStatus('current')
if mibBuilder.loadTexts: hh3cAggLinkName.setDescription('Aggregation name.')
hh3cAggLinkMode = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("manual", 1), ("static", 2), ("dynamic", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAggLinkMode.setStatus('current')
if mibBuilder.loadTexts: hh3cAggLinkMode.setDescription('Type of aggregation. manual: Manual aggregation, no LACP. static: Membership specified by user, LACP is used to validate. dynamic: Completely dynamic aggregation detected by LACP.')
hh3cAggLinkPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1, 4), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAggLinkPortList.setStatus('current')
if mibBuilder.loadTexts: hh3cAggLinkPortList.setDescription('List of ports in this link aggregation group, by bridge port number. If the mode of the link aggregation group is manual or static, you can update this list to your hearts content. However, if the link aggregation group is dynamic, then the system will maintain it. You are not permitted to set the value of this to all zeroes.')
hh3cAggLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hh3cAggLinkState.setStatus('current')
if mibBuilder.loadTexts: hh3cAggLinkState.setDescription('RowStatus, now support three states: createAndGo, active, destroy.')
hh3cAggPortListSelectedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1, 6), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAggPortListSelectedPorts.setStatus('current')
if mibBuilder.loadTexts: hh3cAggPortListSelectedPorts.setDescription('A PortList of physical ports that have been selected but not attached to this aggregator. When the bit is set to 1,it means the corresponding port is in the portlist.')
hh3cAggPortListSamePartnerPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 1, 1, 7), PortList()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAggPortListSamePartnerPorts.setStatus('current')
if mibBuilder.loadTexts: hh3cAggPortListSamePartnerPorts.setDescription('PortList of physical ports that have the same Actor SystemID and partner systemID as this aggregator, but have different actor and partner keys of aggregator.')
hh3cAggPortTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 2), )
if mibBuilder.loadTexts: hh3cAggPortTable.setStatus('current')
if mibBuilder.loadTexts: hh3cAggPortTable.setDescription('A table of aggregate port objects.')
hh3cAggPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 2, 1), ).setIndexNames((0, "HH3C-LAG-MIB", "hh3cAggPortIndex"))
if mibBuilder.loadTexts: hh3cAggPortEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cAggPortEntry.setDescription('Entry of table.')
hh3cAggPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 2, 1, 1), Gauge32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cAggPortIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cAggPortIndex.setDescription('Port ifindex which is according to RFC1213 MIB.')
hh3cAggPortNotAttachedReason = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cAggPortNotAttachedReason.setStatus('current')
if mibBuilder.loadTexts: hh3cAggPortNotAttachedReason.setDescription("Reason why this port is selected for an aggregator but not attached, 0: The port is attached to this aggregator. 1: The current number of active ports has reached the upper limit. 2: All aggregation resources are already in-use. 3: The port's configuration is improper for being attached. 4: The port's partner is improper for being attached. 5: The number of current active ports has not reached the lower limit. 6: The port's physical state (down) is improper for being attached. 7: The port is not selected for an aggregator. 8: The port's hardware restriction is improper for being attached. 9: The port's speed is improper for being attached. 10: The port's duplex mode is improper for being attached.")
hh3cAggPortLacpState = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 2, 1, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cAggPortLacpState.setStatus('current')
if mibBuilder.loadTexts: hh3cAggPortLacpState.setDescription("Control ports' lacp enble or disable.")
hh3cAggPortNotAttachedString = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cAggPortNotAttachedString.setStatus('current')
if mibBuilder.loadTexts: hh3cAggPortNotAttachedString.setDescription('The string which interprets this port is selected for an aggregator but not attached.')
hh3cAggResourceAllocationValue = MibScalar((1, 3, 6, 1, 4, 1, 25506, 8, 25, 1, 3), PortList().clone('0')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cAggResourceAllocationValue.setStatus('current')
if mibBuilder.loadTexts: hh3cAggResourceAllocationValue.setDescription("The priority value calculated to decide which aggregations have first call on the load-sharing aggregation resources in the hardware. It depends on the aggregation's type and total speed.")
hh3cLAGMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 25, 2))
hh3cAggSpeedChangedNotification = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 25, 2, 1)).setObjects(("HH3C-LAG-MIB", "hh3cAggLinkNumber"))
if mibBuilder.loadTexts: hh3cAggSpeedChangedNotification.setStatus('current')
if mibBuilder.loadTexts: hh3cAggSpeedChangedNotification.setDescription('This event will be triggered whenever an aggregation changes its speed.')
hh3cAggPortInactiveNotification = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 25, 2, 2)).setObjects(("HH3C-LAG-MIB", "hh3cAggLinkNumber"))
if mibBuilder.loadTexts: hh3cAggPortInactiveNotification.setStatus('current')
if mibBuilder.loadTexts: hh3cAggPortInactiveNotification.setDescription('This event will be triggered whenever any port in aggrerator is made inactive.')
hh3cAggPortInactiveNotification2 = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 25, 2, 3)).setObjects(("HH3C-LAG-MIB", "hh3cAggLinkNumber"), ("HH3C-LAG-MIB", "hh3cAggPortIndex"))
if mibBuilder.loadTexts: hh3cAggPortInactiveNotification2.setStatus('current')
if mibBuilder.loadTexts: hh3cAggPortInactiveNotification2.setDescription('This event will be triggered whenever the port in aggrerator is made inactive.')
hh3cAggPortActiveNotification = NotificationType((1, 3, 6, 1, 4, 1, 25506, 8, 25, 2, 4)).setObjects(("HH3C-LAG-MIB", "hh3cAggLinkNumber"), ("HH3C-LAG-MIB", "hh3cAggPortIndex"))
if mibBuilder.loadTexts: hh3cAggPortActiveNotification.setStatus('current')
if mibBuilder.loadTexts: hh3cAggPortActiveNotification.setDescription('This event will be triggered whenever the port in aggrerator is made active.')
hh3cLAGMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 25, 3))
hh3cLAGMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 25, 3, 1))
hh3cLAGMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 25506, 8, 25, 3, 1, 1)).setObjects(("HH3C-LAG-MIB", "hh3cLAGMibObjectGroup"), ("HH3C-LAG-MIB", "hh3cLAGMibNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cLAGMibCompliance = hh3cLAGMibCompliance.setStatus('current')
if mibBuilder.loadTexts: hh3cLAGMibCompliance.setDescription('The compliance statement for SNMP entities which implement the Lag MIB.')
hh3cLAGMibGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 8, 25, 3, 2))
hh3cLAGMibObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 25506, 8, 25, 3, 2, 1)).setObjects(("HH3C-LAG-MIB", "hh3cAggLinkName"), ("HH3C-LAG-MIB", "hh3cAggLinkMode"), ("HH3C-LAG-MIB", "hh3cAggLinkPortList"), ("HH3C-LAG-MIB", "hh3cAggLinkState"), ("HH3C-LAG-MIB", "hh3cAggPortListSelectedPorts"), ("HH3C-LAG-MIB", "hh3cAggPortListSamePartnerPorts"), ("HH3C-LAG-MIB", "hh3cAggPortNotAttachedReason"), ("HH3C-LAG-MIB", "hh3cAggPortLacpState"), ("HH3C-LAG-MIB", "hh3cAggPortNotAttachedString"), ("HH3C-LAG-MIB", "hh3cAggResourceAllocationValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cLAGMibObjectGroup = hh3cLAGMibObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cLAGMibObjectGroup.setDescription('The collection of objects which are used to represent LAG objects.')
hh3cLAGMibNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 25506, 8, 25, 3, 2, 2)).setObjects(("HH3C-LAG-MIB", "hh3cAggSpeedChangedNotification"), ("HH3C-LAG-MIB", "hh3cAggPortInactiveNotification"), ("HH3C-LAG-MIB", "hh3cAggPortInactiveNotification2"), ("HH3C-LAG-MIB", "hh3cAggPortActiveNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hh3cLAGMibNotificationGroup = hh3cLAGMibNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hh3cLAGMibNotificationGroup.setDescription('The collection of objects which are used to represent notifications.')
mibBuilder.exportSymbols("HH3C-LAG-MIB", hh3cLAG=hh3cLAG, hh3cLAGMibObjectGroup=hh3cLAGMibObjectGroup, hh3cAggPortActiveNotification=hh3cAggPortActiveNotification, hh3cLAGMibObjects=hh3cLAGMibObjects, hh3cAggPortListSelectedPorts=hh3cAggPortListSelectedPorts, hh3cAggLinkState=hh3cAggLinkState, hh3cLAGMibNotificationGroup=hh3cLAGMibNotificationGroup, hh3cAggPortListSamePartnerPorts=hh3cAggPortListSamePartnerPorts, hh3cAggSpeedChangedNotification=hh3cAggSpeedChangedNotification, hh3cAggLinkEntry=hh3cAggLinkEntry, PYSNMP_MODULE_ID=hh3cLAG, hh3cLAGMibCompliances=hh3cLAGMibCompliances, hh3cAggPortLacpState=hh3cAggPortLacpState, hh3cAggLinkName=hh3cAggLinkName, hh3cLAGMibNotifications=hh3cLAGMibNotifications, hh3cLAGMibCompliance=hh3cLAGMibCompliance, hh3cAggPortNotAttachedString=hh3cAggPortNotAttachedString, hh3cAggLinkPortList=hh3cAggLinkPortList, hh3cAggLinkNumber=hh3cAggLinkNumber, hh3cAggPortIndex=hh3cAggPortIndex, hh3cAggLinkMode=hh3cAggLinkMode, hh3cAggResourceAllocationValue=hh3cAggResourceAllocationValue, hh3cAggPortInactiveNotification2=hh3cAggPortInactiveNotification2, hh3cAggPortEntry=hh3cAggPortEntry, hh3cAggPortInactiveNotification=hh3cAggPortInactiveNotification, hh3cAggLinkTable=hh3cAggLinkTable, hh3cLAGMibGroup=hh3cLAGMibGroup, hh3cAggPortTable=hh3cAggPortTable, hh3cAggPortNotAttachedReason=hh3cAggPortNotAttachedReason, hh3cLAGMibConformance=hh3cLAGMibConformance)
