#
# PySNMP MIB module CISCO-IP-IF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IP-IF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:02:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "ifIndex", "InterfaceIndex")
InetAddress, InetAddressType, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType", "InetAddressPrefixLength")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, Bits, iso, Counter64, ObjectIdentity, Integer32, Unsigned32, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "Bits", "iso", "Counter64", "ObjectIdentity", "Integer32", "Unsigned32", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "IpAddress", "Gauge32")
StorageType, TextualConvention, DisplayString, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "StorageType", "TextualConvention", "DisplayString", "RowStatus")
ciscoIPIfMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 309))
ciscoIPIfMIB.setRevisions(('2008-08-08 00:00', '2008-07-28 00:00', '2002-10-12 00:00', '2002-10-10 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIPIfMIB.setRevisionsDescriptions(('Modified the definition for ciiHelperAdressVrf to conform to the de facto standard.', 'Added ciiHelperAddressTable.', 'Added ciiIPIfAddressTable. Added ciiIPIfAddressChangeNotify notification. Deprecated ciscoIPIfMIBCompliance and added ciscoIPIfMIBCompliance1. Added ciscoIPIfAddressConfigurationGroup3, ciscoIPIfAddressConfigurationGroup4, ciscoIPIfNotificationGroup. Added IpAddressCatagory TC.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoIPIfMIB.setLastUpdated('200808080000Z')
if mibBuilder.loadTexts: ciscoIPIfMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoIPIfMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoIPIfMIB.setDescription('The MIB module for configuring IP characteristics of the interfaces of a device.')
ciscoIPIfMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 309, 0))
ciscoIPIfMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 309, 1))
ciscoIPIfMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 309, 2))
ciiIPAddressConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1))
ciiHelperAddressConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 2))
ciiIPIfNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 309, 0, 0))
class IpAddressCatagory(TextualConvention, Integer32):
    description = 'Represents the IP address category. single(1) - Indicates that the IP addressing information for this interface, has no primary/secondary category. primary(2) - Indicates that this interface provides primary IP addressing information. secondary(3) - Indicates that this interface provides a secondary IP addressing information. There may be more than one seconday IP addressing information for an interface.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("single", 1), ("primary", 2), ("secondary", 3))

ciiIPAddressCategoryCap = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 1), Bits().clone(namedValues=NamedValues(("single", 0), ("primary", 1), ("secondary", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciiIPAddressCategoryCap.setStatus('current')
if mibBuilder.loadTexts: ciiIPAddressCategoryCap.setDescription('This object indicates what types of IP address category can be configured on this device. single(0) means that each interface on the device can be assigned only one IP address. primary(1) means that each interface on the device can be assigned an IP address as the primary one. secondary(2) means that each interface on the device can be assigned an IP address as the secondary one. Devices which has the single(0) bit set to 1, should have the primary(1) and secondary(2) bits set to 0. Likewise devices which have the primary(1) and/or secondary(2) bits set to 1, should have the single(0) set to 0.')
ciiIPAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 2), )
if mibBuilder.loadTexts: ciiIPAddressTable.setReference('RFC 2011')
if mibBuilder.loadTexts: ciiIPAddressTable.setStatus('current')
if mibBuilder.loadTexts: ciiIPAddressTable.setDescription("The table of addressing information relevant to this entity's IP addresses. This is the enhancement of the ipAddrTable in IP-MIB.")
ciiIPAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-IP-IF-MIB", "ciiIPAddressType"), (0, "CISCO-IP-IF-MIB", "ciiIPAddress"))
if mibBuilder.loadTexts: ciiIPAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ciiIPAddressEntry.setDescription("The addressing information for one of this entity's IP addresses. The only way an entry can be created is by setting the ciiIPAddressStatus object to 'create and go' and the only way an entry can be destroyed is by setting the ciiIPAddressStatus object to 'destroy'. Any column in the entry may be modified anytime, when the value of ciiIPAddressStatus is 'active'.")
ciiIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 2, 1, 1), InetAddressType())
if mibBuilder.loadTexts: ciiIPAddressType.setStatus('current')
if mibBuilder.loadTexts: ciiIPAddressType.setDescription('The type of Internet address for all the objects with SYNTAX InetAddress and InetAddressPrefixLength in this entry.')
ciiIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 2, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 36)))
if mibBuilder.loadTexts: ciiIPAddress.setStatus('current')
if mibBuilder.loadTexts: ciiIPAddress.setDescription("The IP address to which this entry's addressing information pertains.")
ciiIPAddressIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 2, 1, 3), InterfaceIndex()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPAddressIfIndex.setStatus('current')
if mibBuilder.loadTexts: ciiIPAddressIfIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable. ciiIPAddressIfIndex is the same as the ifIndex of the interface associated with this ciiIPAddressEntry.')
ciiIPAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 2, 1, 4), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPAddressPrefixLength.setStatus('current')
if mibBuilder.loadTexts: ciiIPAddressPrefixLength.setDescription('The length of the prefix associated with the IP address of this entry. A value of zero causes all addresses to match. The type of address is specified by ciiIPAddressType of this entry.')
ciiIPAddressBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 2, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPAddressBroadcast.setStatus('current')
if mibBuilder.loadTexts: ciiIPAddressBroadcast.setDescription('The broadcast address associated with the IP address of this entry. The type of address is specified by ciiIPAddressType of this entry.')
ciiIPAddressCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 2, 1, 6), IpAddressCatagory()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPAddressCategory.setStatus('current')
if mibBuilder.loadTexts: ciiIPAddressCategory.setDescription('Indicates the IP address category of this entry. Setting of this object has to comply with the value of ciiIPAddressCategoryCap.')
ciiIPAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPAddressStatus.setStatus('current')
if mibBuilder.loadTexts: ciiIPAddressStatus.setDescription("This object is used to manage creation and deletion of rows in this table. ciiIPAddressStatus must be set to 'creatAndGo' to create an entry and set to 'destroy' to delete an entry. The value in any column may be modified any time even the value of this entry rowStatus object is 'active'. Caution has to be taken before destroying any entry. Example: Need to change the IP address of an interface, which provides sole network connectivity. This has to be done by destroying the entry and creating a new one. The device would loose network connectivity after the entry is destroyed. In this case, the destroy of the old entry and the creation on the new entry should be packed in the same PDU.")
ciiIPIfAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 3), )
if mibBuilder.loadTexts: ciiIPIfAddressTable.setReference('RFC 2011')
if mibBuilder.loadTexts: ciiIPIfAddressTable.setStatus('current')
if mibBuilder.loadTexts: ciiIPIfAddressTable.setDescription("The table of addressing information relevant to this entity's IP addresses. This is the enhancement of the ipAddrTable in IP-MIB. This table is same as ciiIPAddressTable accept that ciiIPIfAddressIfIndex is part of the INDEX clause. This table is used to configure an IP address on a interface identified by ifIndex. Each interface can be configured with multiple IP addresses. When requested to create/delete an entry in this table, the agent also creates/deletes a correspondng entry in the ipAddrTable of rfc2011. Entries in this table are created/deleted only by network managers. Agents will typically only allow entries to be created on a subset of ifIndex values.")
ciiIPIfAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-IP-IF-MIB", "ciiIPAddressIfIndex"), (0, "CISCO-IP-IF-MIB", "ciiIPAddressType"), (0, "CISCO-IP-IF-MIB", "ciiIPAddress"))
if mibBuilder.loadTexts: ciiIPIfAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ciiIPIfAddressEntry.setDescription("The addressing information for one of this entity's IP addresses. The only way an entry can be created is by setting the ciiIPIfAddressStatus object to 'create and go' and the only way an entry can be destroyed is by setting the ciiIPIfAddressStatus object to 'destroy'. Any column in the entry may be modified anytime, when the value of ciiIPIfAddressStatus is 'active'.")
ciiIPIfAddressPrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 3, 1, 1), InetAddressPrefixLength()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPIfAddressPrefixLength.setStatus('current')
if mibBuilder.loadTexts: ciiIPIfAddressPrefixLength.setDescription('The length of the prefix associated with the IP address of this entry. A value of zero causes all addresses to match. The type of address is specified by ciiIPAddressType of this entry. This object is same as the ciiIPAddressPrefixLength object, and changes to one will affect the other.')
ciiIPIfAddressBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 3, 1, 2), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPIfAddressBroadcast.setStatus('current')
if mibBuilder.loadTexts: ciiIPIfAddressBroadcast.setDescription('The broadcast address associated with the IP address of this entry. The type of address is specified by ciiIPAddressType of this entry. This object is same as the ciiIPAddressBroadcast object, and changes to one will affect the other.')
ciiIPIfAddressCategory = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 3, 1, 3), IpAddressCatagory()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPIfAddressCategory.setStatus('current')
if mibBuilder.loadTexts: ciiIPIfAddressCategory.setDescription('Indicates the IP address category of this entry. Setting of this object has to comply with the value of ciiIPAddressCategoryCap. This object is same as the ciiIPAddressCategory object, and changes to one will affect the other.')
ciiIPIfAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiIPIfAddressStatus.setStatus('current')
if mibBuilder.loadTexts: ciiIPIfAddressStatus.setDescription("This object is used to manage creation and deletion of rows in this table. ciiIPAddressStatus must be set to 'creatAndGo' to create an entry and set to 'destroy' to delete an entry. The value in any column may be modified any time even the value of this entry rowStatus object is 'active'. Caution has to be taken before destroying any entry. Example: Need to change the IP address of an interface, which provides sole network connectivity. This has to be done by destroying the entry and creating a new one. The device would loose network connectivity after the entry is destroyed. In this case, the destroy of the old entry and the creation on the new entry should be packed in the same PDU.")
ciiHelperAddressTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 2, 1), )
if mibBuilder.loadTexts: ciiHelperAddressTable.setStatus('current')
if mibBuilder.loadTexts: ciiHelperAddressTable.setDescription('This table lists the IP helper addresses associated with each interface.')
ciiHelperAddressEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-IP-IF-MIB", "ciiHelperAddressVrf"), (0, "CISCO-IP-IF-MIB", "ciiHelperAddressType"), (0, "CISCO-IP-IF-MIB", "ciiHelperAddress"))
if mibBuilder.loadTexts: ciiHelperAddressEntry.setStatus('current')
if mibBuilder.loadTexts: ciiHelperAddressEntry.setDescription("An entry describes a single IP helper address associated with the corresponding interface, identified by the ifIndex-value assigned to the interface. A peer SNMP entity may associate a helper address with an interface by setting an instance of ciiHelperAddressStatus to 'createAndWait' or 'createAndGo'. Observe that an implementation that does not support these options must specify these limitations in an agent capabilities statement. Other management entities (e.g., the local console) may associate a helper address with an interface. In these cases, the system must automatically create a row in the ciiHelperAddressTable. A peer SNMP entity may disassociate a helper address from an interface by setting the corresponding instance of ciiHelperAddressStatus to 'destroy'. Observe an implementation that does not support this option must specify this limitation in an agent capabilities statement. Other management entities may disassociate a helper address from an interface. In these cases, the system must automatically destroy the corresponding row in the ciiHelperAddressTable. The system automatically destroys a row when the system destroys the corresponding interface in the ifTable.")
ciiHelperAddressVrf = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32)))
if mibBuilder.loadTexts: ciiHelperAddressVrf.setStatus('current')
if mibBuilder.loadTexts: ciiHelperAddressVrf.setDescription('This object indicates the name assigned to the Virtual Routing and Forwarding (VRF) instance in which the IP helper address resides.')
ciiHelperAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 2, 1, 1, 2), InetAddressType())
if mibBuilder.loadTexts: ciiHelperAddressType.setStatus('current')
if mibBuilder.loadTexts: ciiHelperAddressType.setDescription('This object indicates the type of IP address indicated by the corresponding instance of ciiHelperAddress.')
ciiHelperAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 2, 1, 1, 3), InetAddress())
if mibBuilder.loadTexts: ciiHelperAddress.setStatus('current')
if mibBuilder.loadTexts: ciiHelperAddress.setDescription('This object indicates the IP helper address.')
ciiHelperAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 2, 1, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiHelperAddressStatus.setStatus('current')
if mibBuilder.loadTexts: ciiHelperAddressStatus.setDescription('This object specifies the status of the row. The following columns must be valid before activing the row: - ciiHelperAddressStorage An implementation must not allow an EMS/NMS to modify any column once the row has been activated.')
ciiHelperAddressStorage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 309, 1, 2, 1, 1, 5), StorageType().clone('volatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciiHelperAddressStorage.setStatus('current')
if mibBuilder.loadTexts: ciiHelperAddressStorage.setDescription('This object specifies the memory realization of the row.')
ciscoIPIfMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 309, 2, 1))
ciscoIPIfMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 309, 2, 2))
ciscoIPIfMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 309, 2, 1, 1)).setObjects(("CISCO-IP-IF-MIB", "ciscoIPIfAddressConfigurationGroup1"), ("CISCO-IP-IF-MIB", "ciscoIPIfAddressConfigurationGroup2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIPIfMIBCompliance = ciscoIPIfMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIPIfMIBCompliance.setDescription('The compliance statement for the CISCO-IP-IF-MIB. OBJECT ciiIPAddressType SYNTAX INTEGER { ipv4(1) } DESCRIPTION An implementation is only required to support IPv4 addresses. OBJECT ciiIPAddress SYNTAX InetAddress (SIZE(4)) DESCRIPTION An implementation is only required to support IPv4 addresses.')
ciscoIPIfMIBCompliance1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 309, 2, 1, 2)).setObjects(("CISCO-IP-IF-MIB", "ciscoIPIfAddressConfigurationGroup1"), ("CISCO-IP-IF-MIB", "ciscoIPIfAddressConfigurationGroup2"), ("CISCO-IP-IF-MIB", "ciscoIPIfAddressConfigurationGroup3"), ("CISCO-IP-IF-MIB", "ciscoIPIfAddressConfigurationGroup4"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIPIfMIBCompliance1 = ciscoIPIfMIBCompliance1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIPIfMIBCompliance1.setDescription('The compliance statement for the CISCO-IP-IF-MIB. OBJECT ciiIPAddressType SYNTAX INTEGER { ipv4(1) } DESCRIPTION An implementation is only required to support IPv4 addresses. OBJECT ciiIPAddress SYNTAX InetAddress (SIZE(4)) DESCRIPTION An implementation is only required to support IPv4 addresses.')
ciscoIPIfMIBCompliance2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 309, 2, 1, 3)).setObjects(("CISCO-IP-IF-MIB", "ciscoIPIfAddressConfigurationGroup1"), ("CISCO-IP-IF-MIB", "ciscoIPIfAddressConfigurationGroup2"), ("CISCO-IP-IF-MIB", "ciscoIPIfAddressConfigurationGroup3"), ("CISCO-IP-IF-MIB", "ciscoIPIfAddressConfigurationGroup4"), ("CISCO-IP-IF-MIB", "ciiHelperAddressGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIPIfMIBCompliance2 = ciscoIPIfMIBCompliance2.setStatus('current')
if mibBuilder.loadTexts: ciscoIPIfMIBCompliance2.setDescription('The compliance statement for the CISCO-IP-IF-MIB. OBJECT ciiIPAddressType SYNTAX INTEGER { ipv4(1) } DESCRIPTION An implementation is only required to support IPv4 addresses. OBJECT ciiIPAddress SYNTAX InetAddress (SIZE(4)) DESCRIPTION An implementation is only required to support IPv4 addresses.')
ciscoIPIfAddressConfigurationGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 309, 2, 2, 1)).setObjects(("CISCO-IP-IF-MIB", "ciiIPAddressCategoryCap"), ("CISCO-IP-IF-MIB", "ciiIPAddressIfIndex"), ("CISCO-IP-IF-MIB", "ciiIPAddressPrefixLength"), ("CISCO-IP-IF-MIB", "ciiIPAddressCategory"), ("CISCO-IP-IF-MIB", "ciiIPAddressStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIPIfAddressConfigurationGroup1 = ciscoIPIfAddressConfigurationGroup1.setStatus('current')
if mibBuilder.loadTexts: ciscoIPIfAddressConfigurationGroup1.setDescription('A collection of objects for the address configuration of interfaces.')
ciscoIPIfAddressConfigurationGroup2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 309, 2, 2, 2)).setObjects(("CISCO-IP-IF-MIB", "ciiIPAddressBroadcast"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIPIfAddressConfigurationGroup2 = ciscoIPIfAddressConfigurationGroup2.setStatus('current')
if mibBuilder.loadTexts: ciscoIPIfAddressConfigurationGroup2.setDescription('A collection of objects for the broadcast address configuration of interfaces.')
ciscoIPIfAddressConfigurationGroup3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 309, 2, 2, 3)).setObjects(("CISCO-IP-IF-MIB", "ciiIPAddressCategoryCap"), ("CISCO-IP-IF-MIB", "ciiIPIfAddressPrefixLength"), ("CISCO-IP-IF-MIB", "ciiIPIfAddressCategory"), ("CISCO-IP-IF-MIB", "ciiIPIfAddressStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIPIfAddressConfigurationGroup3 = ciscoIPIfAddressConfigurationGroup3.setStatus('current')
if mibBuilder.loadTexts: ciscoIPIfAddressConfigurationGroup3.setDescription('A collection of objects for the address configuration of interfaces.')
ciscoIPIfAddressConfigurationGroup4 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 309, 2, 2, 4)).setObjects(("CISCO-IP-IF-MIB", "ciiIPIfAddressBroadcast"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIPIfAddressConfigurationGroup4 = ciscoIPIfAddressConfigurationGroup4.setStatus('current')
if mibBuilder.loadTexts: ciscoIPIfAddressConfigurationGroup4.setDescription('A collection of objects for the broadcast address configuration of interfaces.')
ciiHelperAddressGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 309, 2, 2, 5)).setObjects(("CISCO-IP-IF-MIB", "ciiHelperAddressStatus"), ("CISCO-IP-IF-MIB", "ciiHelperAddressStorage"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciiHelperAddressGroup = ciiHelperAddressGroup.setStatus('current')
if mibBuilder.loadTexts: ciiHelperAddressGroup.setDescription('A collection of objects describing IP helper addresses associated with interfaces.')
mibBuilder.exportSymbols("CISCO-IP-IF-MIB", ciscoIPIfMIBNotifs=ciscoIPIfMIBNotifs, ciiIPAddressBroadcast=ciiIPAddressBroadcast, ciiHelperAddressTable=ciiHelperAddressTable, PYSNMP_MODULE_ID=ciscoIPIfMIB, ciiIPAddressEntry=ciiIPAddressEntry, ciscoIPIfMIBCompliances=ciscoIPIfMIBCompliances, ciscoIPIfAddressConfigurationGroup2=ciscoIPIfAddressConfigurationGroup2, ciscoIPIfMIB=ciscoIPIfMIB, ciiIPIfAddressEntry=ciiIPIfAddressEntry, ciscoIPIfMIBConform=ciscoIPIfMIBConform, ciiHelperAddressConfiguration=ciiHelperAddressConfiguration, IpAddressCatagory=IpAddressCatagory, ciiIPAddressCategoryCap=ciiIPAddressCategoryCap, ciiIPAddress=ciiIPAddress, ciiHelperAddressType=ciiHelperAddressType, ciscoIPIfMIBCompliance=ciscoIPIfMIBCompliance, ciiIPAddressTable=ciiIPAddressTable, ciiHelperAddressStorage=ciiHelperAddressStorage, ciiIPAddressConfiguration=ciiIPAddressConfiguration, ciiIPIfNotifications=ciiIPIfNotifications, ciscoIPIfMIBCompliance2=ciscoIPIfMIBCompliance2, ciiIPAddressStatus=ciiIPAddressStatus, ciiIPAddressIfIndex=ciiIPAddressIfIndex, ciscoIPIfAddressConfigurationGroup3=ciscoIPIfAddressConfigurationGroup3, ciiHelperAddressStatus=ciiHelperAddressStatus, ciiIPIfAddressCategory=ciiIPIfAddressCategory, ciscoIPIfAddressConfigurationGroup1=ciscoIPIfAddressConfigurationGroup1, ciiIPAddressType=ciiIPAddressType, ciiHelperAddressVrf=ciiHelperAddressVrf, ciiHelperAddressEntry=ciiHelperAddressEntry, ciiIPIfAddressTable=ciiIPIfAddressTable, ciscoIPIfMIBObjects=ciscoIPIfMIBObjects, ciscoIPIfMIBCompliance1=ciscoIPIfMIBCompliance1, ciiIPAddressPrefixLength=ciiIPAddressPrefixLength, ciiIPIfAddressPrefixLength=ciiIPIfAddressPrefixLength, ciiIPIfAddressBroadcast=ciiIPIfAddressBroadcast, ciscoIPIfAddressConfigurationGroup4=ciscoIPIfAddressConfigurationGroup4, ciiIPAddressCategory=ciiIPAddressCategory, ciiIPIfAddressStatus=ciiIPIfAddressStatus, ciiHelperAddressGroup=ciiHelperAddressGroup, ciscoIPIfMIBGroups=ciscoIPIfMIBGroups, ciiHelperAddress=ciiHelperAddress)
