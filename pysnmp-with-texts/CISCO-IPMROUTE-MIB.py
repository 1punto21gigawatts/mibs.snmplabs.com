#
# PySNMP MIB module CISCO-IPMROUTE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-IPMROUTE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:02:25 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
ciscoExperiment, = mibBuilder.importSymbols("CISCO-SMI", "ciscoExperiment")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
ipMRouteNextHopEntry, ipMRouteEntry, ipMRouteInterfaceEntry = mibBuilder.importSymbols("IPMROUTE-STD-MIB", "ipMRouteNextHopEntry", "ipMRouteEntry", "ipMRouteInterfaceEntry")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
Counter64, Integer32, Unsigned32, TimeTicks, ModuleIdentity, MibIdentifier, Counter32, IpAddress, NotificationType, Gauge32, ObjectIdentity, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Integer32", "Unsigned32", "TimeTicks", "ModuleIdentity", "MibIdentifier", "Counter32", "IpAddress", "NotificationType", "Gauge32", "ObjectIdentity", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
TimeStamp, TruthValue, DisplayString, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeStamp", "TruthValue", "DisplayString", "RowStatus", "TextualConvention")
ciscoIpMRouteMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 10, 2))
ciscoIpMRouteMIB.setRevisions(('2005-03-07 00:00', '2000-12-22 00:00', '2000-05-15 00:00', '1999-02-08 00:00', '1996-10-11 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoIpMRouteMIB.setRevisionsDescriptions(('Add 32-bit and 64-bit per interface packet counters. These apply to all interfaces, including Point-To-Point types, unlike ifInMulticastPkts etc which only apply to interfaces with multicast at that layer. Also fix import of Unsigned32.', 'Add ciscoIpMRouteNumberOfEntries. Also add 64-bit counters to represent information for high speed interfaces like OC-192. Deprecate ciscoIpMRouteBps in favour of the 64-bit counter ciscoIpMRouteBps2. ciscoIpMouteMetric deprecated in favour of ciscoIpMouteMetric2 to correctly represent a 32-bit unsigned metric value.', 'Added MIB support for multicast heartbeat monitoring.', 'Add ciscoIpMRouteJoinFlag, ciscoIpMRouteMsdpFlag and ciscoIpMRouteProxyJoinFlag.', 'Obsolete ciscoIpMRouteInLimit and replaced with ciscoIpMRouteInLimit2.',))
if mibBuilder.loadTexts: ciscoIpMRouteMIB.setLastUpdated('200503070000Z')
if mibBuilder.loadTexts: ciscoIpMRouteMIB.setOrganization('ciscoSytems')
if mibBuilder.loadTexts: ciscoIpMRouteMIB.setContactInfo(' cisco Systems, Inc. 170 Tasman Drive San Jose, CA EMail: cs-ipmulticast@cisco.com')
if mibBuilder.loadTexts: ciscoIpMRouteMIB.setDescription('The MIB module for management of IP Multicast routing, but independent of the specific multicast routing protocol in use.')
ciscoIpMRouteMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 2, 1))
ciscoIpMRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1))
ciscoIpMRouteNumberOfEntries = MibScalar((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteNumberOfEntries.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteNumberOfEntries.setDescription('Maintains a count of the number of entries in the ipMRouteTable.')
ciscoIpMRouteTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2), )
if mibBuilder.loadTexts: ciscoIpMRouteTable.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteTable.setDescription('The (conceptual) table containing multicast routing information for IP datagrams sent by particular sources to the IP multicast groups known to this router. This table is augmented to the ipMRouteTable.')
ciscoIpMRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1), )
ipMRouteEntry.registerAugmentions(("CISCO-IPMROUTE-MIB", "ciscoIpMRouteEntry"))
ciscoIpMRouteEntry.setIndexNames(*ipMRouteEntry.getIndexNames())
if mibBuilder.loadTexts: ciscoIpMRouteEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteEntry.setDescription('An entry (conceptual row) containing the multicast routing information for IP datagrams from a particular source and addressed to a particular IP multicast group address.')
ciscoIpMRoutePruneFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 12), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRoutePruneFlag.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRoutePruneFlag.setDescription("Boolean, indicates whether this route is pruned. A pruned route is one that has an empty outgoing interface list or all interfaces are in Pruned state. A multicast packet that matches a pruned route doesn't get forwarded.")
ciscoIpMRouteSparseFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteSparseFlag.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteSparseFlag.setDescription('Boolean, indicating PIM multicast routing protocol sparse-mode (versus dense-mode). In sparse-mode, packets are forwarded only out interfaces that have been joined. In dense-mode, they are forwarded out all interfaces that have not been pruned.')
ciscoIpMRouteConnectedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 14), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteConnectedFlag.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteConnectedFlag.setDescription('Boolean, indicating whether there is a directly connected member for a group attached to the router.')
ciscoIpMRouteLocalFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteLocalFlag.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteLocalFlag.setDescription('Boolean, indicating whether local system is a member of a group on any interface.')
ciscoIpMRouteRegisterFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteRegisterFlag.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteRegisterFlag.setDescription('Boolean, indicates whether to send registers for the entry. A first hop router directly connected to a multicast source host, as well as a border router on the boundary of two domains running different multicast routing protocols, encapsulates packets to be sent on the shared tree. This is done until the RP sends Joins back to this router.')
ciscoIpMRouteRpFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 17), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteRpFlag.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteRpFlag.setDescription('Boolean, indicating whether there is a Prune state for this source along the shared tree.')
ciscoIpMRouteSptFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 18), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteSptFlag.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteSptFlag.setDescription('Boolean, indicating whether data is being received on the SPT tree, ie the Shortest Path Tree.')
ciscoIpMRouteBps = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteBps.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIpMRouteBps.setDescription('Bits per second forwarded by this router. This is the sum of all forwarded bits during a 1 second interval. At the end of each second the field is cleared. This object has been superseded by ciscoIpMRouteBps2 (which is the 64-bit version of this object).')
ciscoIpMRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteMetric.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIpMRouteMetric.setDescription('Metric - The best metric heard from Assert messages. This object has been replaced by ciscoIpMRouteMetric2 in order to correctly represent a 32-bit unsigned metric value.')
ciscoIpMRouteMetricPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteMetricPreference.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteMetricPreference.setDescription('Metric Preference - The best metric preference heard from Assert messages.')
ciscoIpMRouteInLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('Kbits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteInLimit.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoIpMRouteInLimit.setDescription("Incoming interface's limit for rate limiting data traffic, in Kbps. Replaced by ciscoIpMRouteInLimit2.")
ciscoIpMRouteLastUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 23), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteLastUsed.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteLastUsed.setDescription('How long has it been since the last multicast packet was fastswitched.')
ciscoIpMRouteInLimit2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 24), Gauge32()).setUnits('Kbits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteInLimit2.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteInLimit2.setDescription("Incoming interface's limit for rate limiting data traffic, in Kbps.")
ciscoIpMRouteJoinFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 25), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteJoinFlag.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteJoinFlag.setDescription('Boolean, indicates whether this route is created due to SPT threshold.')
ciscoIpMRouteMsdpFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 26), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteMsdpFlag.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteMsdpFlag.setDescription('Boolean, indicates whether this route is learned via MSDP.')
ciscoIpMRouteProxyJoinFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 27), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteProxyJoinFlag.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteProxyJoinFlag.setDescription('Boolean, indicates whether to send join for this entry.')
ciscoIpMRoutePkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRoutePkts.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRoutePkts.setDescription('The number of packets which this router has received from these sources and addressed to this multicast group address. This object is a 64-bit version of ipMRoutePkts.')
ciscoIpMRouteDifferentInIfPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteDifferentInIfPkts.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteDifferentInIfPkts.setDescription('The number of packets which this router has received from these sources and addressed to this multicast group address, which were not received from the interface indicated by ipMRouteInIfIndex. This object is a 64-bit version of ipMRouteDifferentInIfPackets.')
ciscoIpMRouteOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteOctets.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteOctets.setDescription('The number of octets contained in IP datagrams which were received from these sources and addressed to this multicast group address, and which were forwarded by this router. This object is a 64-bit version of ipMRouteOctets.')
ciscoIpMRouteBps2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 31), CounterBasedGauge64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteBps2.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteBps2.setDescription('Bits per second forwarded by this router. This is the sum of all forwarded bits during a 1 second interval. At the end of each second the field is cleared.')
ciscoIpMRouteMetric2 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 2, 1, 32), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteMetric2.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteMetric2.setDescription('Metric - The best metric heard from Assert messages.')
ciscoIpMRouteNextHopTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 3), )
if mibBuilder.loadTexts: ciscoIpMRouteNextHopTable.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteNextHopTable.setDescription('The (conceptual) table containing information on the next hops on outgoing interfaces for routing IP multicast datagrams. Each entry is one of a list of next hops on outgoing interfaces for particular sources sending to a particular multicast group address.')
ciscoIpMRouteNextHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 3, 1), )
ipMRouteNextHopEntry.registerAugmentions(("CISCO-IPMROUTE-MIB", "ciscoIpMRouteNextHopEntry"))
ciscoIpMRouteNextHopEntry.setIndexNames(*ipMRouteNextHopEntry.getIndexNames())
if mibBuilder.loadTexts: ciscoIpMRouteNextHopEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteNextHopEntry.setDescription('An entry (conceptual row) in the list of next hops on outgoing interfaces to which IP multicast datagrams from particular sources to a IP multicast group address are routed.')
ciscoIpMRouteNextHopOutLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 3, 1, 9), Gauge32()).setUnits('Kbits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteNextHopOutLimit.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteNextHopOutLimit.setDescription("An outgoing interface's limit for rate limiting data traffic, in Kbps.")
ciscoIpMRouteNextHopMacHdr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 3, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteNextHopMacHdr.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteNextHopMacHdr.setDescription('The data link mac address header for a multicast datagram. Used by IP multicast fastswitching.')
ciscoIpMRouteNextHopPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 3, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteNextHopPkts.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteNextHopPkts.setDescription('The number of packets which have been forwarded using this route. This object is a 64-bit version of ipMRouteNextHopPkts.')
ciscoIpMRouteHeartBeatTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 4), )
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatTable.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatTable.setDescription('The (conceptual) table listing sets of IP Multicast heartbeat parameters. If no IP Multicast heartbeat is configured, this table would be empty.')
ciscoIpMRouteHeartBeatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-IPMROUTE-MIB", "ciscoIpMRouteHeartBeatGroupAddr"))
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatEntry.setDescription('An entry (conceptual row) representing a set of IP Multicast heartbeat parameters.')
ciscoIpMRouteHeartBeatGroupAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 4, 1, 1), IpAddress())
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatGroupAddr.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatGroupAddr.setDescription('Multicast group address used to receive heartbeat packets.')
ciscoIpMRouteHeartBeatSourceAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatSourceAddr.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatSourceAddr.setDescription('Source address of the last multicast heartbeat packet received.')
ciscoIpMRouteHeartBeatInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 3600))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatInterval.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatInterval.setDescription('Number of seconds in which a Cisco multicast router expects a valid heartBeat packet from a source. This value must be a multiple of 10.')
ciscoIpMRouteHeartBeatWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatWindowSize.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatWindowSize.setDescription('Number of ciscoIpMRouteHeartBeatInterval intervals a Cisco multicast router waits before checking if expected number of heartbeat packets are received or not.')
ciscoIpMRouteHeartBeatCount = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatCount.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatCount.setDescription('Number of time intervals where multicast packets were received in the last ciscoIpMRouteHeartBeatWindowSize intervals.')
ciscoIpMRouteHeartBeatMinimum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatMinimum.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatMinimum.setDescription('The minimal number of heartbeat packets expected in the last ciscoIpMRouteHeartBeatWindowSize intervals. If ciscoIpMRouteHeartBeatCount falls below this value, an SNMP trap/notification, if configured, will be sent to the NMS.')
ciscoIpMRouteHeartBeatAlertTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 4, 1, 7), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatAlertTime.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatAlertTime.setDescription('The value of sysUpTime on the most recent occasion at which a missing IP multicast heartbeat condition occured for the group address specified in this entry. If no such condition have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.')
ciscoIpMRouteHeartBeatStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 4, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatStatus.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteHeartBeatStatus.setDescription('This object is used to create a new row or delete an existing row in this table.')
ciscoIpMRouteInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 5), )
if mibBuilder.loadTexts: ciscoIpMRouteInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteInterfaceTable.setDescription('The (conceptual) table containing multicast routing information specific to interfaces. This table augments the ipMRouteInterfaceTable.')
ciscoIpMRouteInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 5, 1), )
ipMRouteInterfaceEntry.registerAugmentions(("CISCO-IPMROUTE-MIB", "ciscoIpMRouteInterfaceEntry"))
ciscoIpMRouteInterfaceEntry.setIndexNames(*ipMRouteInterfaceEntry.getIndexNames())
if mibBuilder.loadTexts: ciscoIpMRouteInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteInterfaceEntry.setDescription('An entry (conceptual row) containing the multicast routing information for a particular interface.')
ciscoIpMRouteIfInMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 5, 1, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteIfInMcastOctets.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteIfInMcastOctets.setDescription('The number of octets of multicast packets that have arrived on the interface. This object is a 64-bit version of ipMRouteInterfaceInMcastOctets.')
ciscoIpMRouteIfOutMcastOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 5, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteIfOutMcastOctets.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteIfOutMcastOctets.setDescription('The number of octets of multicast packets that have been sent on the interface. This object is a 64-bit version of ipMRouteInterfaceOutMcastOctets.')
ciscoIpMRouteIfInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 5, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteIfInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteIfInMcastPkts.setDescription('The number of multicast packets that have arrived on the interface.')
ciscoIpMRouteIfHCInMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 5, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteIfHCInMcastPkts.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteIfHCInMcastPkts.setDescription('The number of multicast packets that have arrived on the interface. This object is a 64-bit version of ciscoIpMRouteIfInMcastPkts')
ciscoIpMRouteIfOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 5, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteIfOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteIfOutMcastPkts.setDescription('The number of multicast packets that have been sent on the interface.')
ciscoIpMRouteIfHCOutMcastPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 10, 2, 1, 1, 5, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ciscoIpMRouteIfHCOutMcastPkts.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteIfHCOutMcastPkts.setDescription('The number of multicast packets that have been sent on the interface. This object is a 64-bit version of ciscoIpMRouteIfOutMcastPkts')
ciscoIpMRouteNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 2, 3))
ciscoIpMRouteMissingHeartBeatsNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 2, 3, 1))
ciscoIpMRouteMissingHeartBeatsNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 2, 3, 1, 0))
ciscoIpMRouteMissingHeartBeats = NotificationType((1, 3, 6, 1, 4, 1, 9, 10, 2, 3, 1, 0, 1)).setObjects(("CISCO-IPMROUTE-MIB", "ciscoIpMRouteHeartBeatSourceAddr"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteHeartBeatInterval"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteHeartBeatWindowSize"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteHeartBeatCount"))
if mibBuilder.loadTexts: ciscoIpMRouteMissingHeartBeats.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteMissingHeartBeats.setDescription('A ciscoIpMRouteMissingHeartBeat is sent if a multicast router with this feature enabled failed to receive configured number of heartbeat packets from heartbeat sources within a configured time interval.')
ciscoIpMRouteMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 2, 2))
ciscoIpMRouteMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 2, 2, 1))
ciscoIpMRouteMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 10, 2, 2, 2))
ciscoIpMRouteMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 2, 2, 1, 1)).setObjects(("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMIBGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpMRouteMIBCompliance = ciscoIpMRouteMIBCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoIpMRouteMIBCompliance.setDescription('The compliance statement for the cisco IP Multicast MIB. Superseded by ciscoIpMRouteComplianceV11R01.')
ciscoIpMRouteMIBComplianceV11R01 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 2, 2, 1, 2)).setObjects(("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMIBGroupV11R01"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpMRouteMIBComplianceV11R01 = ciscoIpMRouteMIBComplianceV11R01.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIpMRouteMIBComplianceV11R01.setDescription('The compliance statement for the cisco IP Multicast MIB. Superseded by ciscoIpMRouteComplianceV12R00S.')
ciscoIpMRouteMIBComplianceV12R00S = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 2, 2, 1, 3)).setObjects(("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMIBGroupV12R00S"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpMRouteMIBComplianceV12R00S = ciscoIpMRouteMIBComplianceV12R00S.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIpMRouteMIBComplianceV12R00S.setDescription('The compliance statement for the cisco IP Multicast MIB. Superseded by ciscoIpMRouteMIBComplianceV12R28S')
ciscoIpMRouteMIBComplianceV12R28S = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 10, 2, 2, 1, 4)).setObjects(("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMIBGroupV12R28S"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMIBIfGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpMRouteMIBComplianceV12R28S = ciscoIpMRouteMIBComplianceV12R28S.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteMIBComplianceV12R28S.setDescription('The compliance statement for the cisco IP Multicast MIB.')
ciscoIpMRouteMIBGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 2, 2, 2, 1)).setObjects(("CISCO-IPMROUTE-MIB", "ciscoIpMRoutePruneFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteSparseFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteConnectedFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteLocalFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteRegisterFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteRpFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteSptFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteBps"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMetric"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMetricPreference"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteInLimit"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteLastUsed"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteNextHopOutLimit"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteNextHopMacHdr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpMRouteMIBGroup = ciscoIpMRouteMIBGroup.setStatus('obsolete')
if mibBuilder.loadTexts: ciscoIpMRouteMIBGroup.setDescription('A collection of objects to support management of IP Multicast routing. Superseded by ciscoIpMRouteMIBGroupV11R01.')
ciscoIpMRouteMIBGroupV11R01 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 2, 2, 2, 2)).setObjects(("CISCO-IPMROUTE-MIB", "ciscoIpMRoutePruneFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteSparseFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteConnectedFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteLocalFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteRegisterFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteRpFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteSptFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteBps"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMetric"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMetricPreference"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteLastUsed"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteInLimit2"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteJoinFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMsdpFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteProxyJoinFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteNextHopOutLimit"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteNextHopMacHdr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpMRouteMIBGroupV11R01 = ciscoIpMRouteMIBGroupV11R01.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIpMRouteMIBGroupV11R01.setDescription('A collection of objects to support management of IP Multicast routing. Superseded by ciscoIpMRouteMIBGroupV12R00S.')
ciscoIpMRouteMIBHeartBeatGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 2, 2, 2, 3)).setObjects(("CISCO-IPMROUTE-MIB", "ciscoIpMRouteHeartBeatSourceAddr"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteHeartBeatInterval"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteHeartBeatWindowSize"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteHeartBeatCount"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteHeartBeatMinimum"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteHeartBeatAlertTime"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteHeartBeatStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpMRouteMIBHeartBeatGroup = ciscoIpMRouteMIBHeartBeatGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteMIBHeartBeatGroup.setDescription('A collection of unconditionally optional objects to support IP Multicast heartbeat monitoring.')
ciscoIpMRouteMIBGroupV12R00S = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 2, 2, 2, 4)).setObjects(("CISCO-IPMROUTE-MIB", "ciscoIpMRouteNumberOfEntries"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRoutePruneFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteSparseFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteConnectedFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteLocalFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteRegisterFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteRpFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteSptFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMetricPreference"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteLastUsed"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteInLimit2"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteJoinFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMsdpFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteProxyJoinFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRoutePkts"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteDifferentInIfPkts"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteOctets"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteBps2"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMetric2"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteNextHopOutLimit"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteNextHopMacHdr"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteNextHopPkts"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteIfInMcastOctets"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteIfOutMcastOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpMRouteMIBGroupV12R00S = ciscoIpMRouteMIBGroupV12R00S.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoIpMRouteMIBGroupV12R00S.setDescription('A collection of objects to support management of IP Multicast routing. Superseded by ciscoIpMRouteMIBGroupV12R28S')
ciscoIpMRouteMIBNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 10, 2, 2, 2, 5)).setObjects(("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMissingHeartBeats"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpMRouteMIBNotifGroup = ciscoIpMRouteMIBNotifGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteMIBNotifGroup.setDescription('The collection of IPMroute related notifications.')
ciscoIpMRouteMIBGroupV12R28S = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 2, 2, 2, 6)).setObjects(("CISCO-IPMROUTE-MIB", "ciscoIpMRouteNumberOfEntries"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRoutePruneFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteSparseFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteConnectedFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteLocalFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteRegisterFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteRpFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteSptFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMetricPreference"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteLastUsed"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteInLimit2"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteJoinFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMsdpFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteProxyJoinFlag"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRoutePkts"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteDifferentInIfPkts"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteOctets"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteBps2"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteMetric2"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteNextHopOutLimit"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteNextHopMacHdr"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteNextHopPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpMRouteMIBGroupV12R28S = ciscoIpMRouteMIBGroupV12R28S.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteMIBGroupV12R28S.setDescription('A collection of objects to support management of IP Multicast routing.')
ciscoIpMRouteMIBIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 10, 2, 2, 2, 7)).setObjects(("CISCO-IPMROUTE-MIB", "ciscoIpMRouteIfInMcastOctets"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteIfOutMcastOctets"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteIfInMcastPkts"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteIfHCInMcastPkts"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteIfOutMcastPkts"), ("CISCO-IPMROUTE-MIB", "ciscoIpMRouteIfHCOutMcastPkts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoIpMRouteMIBIfGroup = ciscoIpMRouteMIBIfGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoIpMRouteMIBIfGroup.setDescription('A collection of objects to support management of IP Multicast routing on an interface.')
mibBuilder.exportSymbols("CISCO-IPMROUTE-MIB", ciscoIpMRouteNextHopPkts=ciscoIpMRouteNextHopPkts, ciscoIpMRouteRpFlag=ciscoIpMRouteRpFlag, ciscoIpMRouteSparseFlag=ciscoIpMRouteSparseFlag, ciscoIpMRouteHeartBeatSourceAddr=ciscoIpMRouteHeartBeatSourceAddr, ciscoIpMRouteMissingHeartBeatsNotificationPrefix=ciscoIpMRouteMissingHeartBeatsNotificationPrefix, ciscoIpMRouteMIBComplianceV11R01=ciscoIpMRouteMIBComplianceV11R01, ciscoIpMRouteHeartBeatTable=ciscoIpMRouteHeartBeatTable, ciscoIpMRouteHeartBeatGroupAddr=ciscoIpMRouteHeartBeatGroupAddr, ciscoIpMRouteMIBGroupV11R01=ciscoIpMRouteMIBGroupV11R01, ciscoIpMRouteMIBNotifGroup=ciscoIpMRouteMIBNotifGroup, ciscoIpMRouteIfHCInMcastPkts=ciscoIpMRouteIfHCInMcastPkts, ciscoIpMRouteIfHCOutMcastPkts=ciscoIpMRouteIfHCOutMcastPkts, ciscoIpMRouteMIBObjects=ciscoIpMRouteMIBObjects, ciscoIpMRouteSptFlag=ciscoIpMRouteSptFlag, ciscoIpMRouteMissingHeartBeats=ciscoIpMRouteMissingHeartBeats, ciscoIpMRouteLocalFlag=ciscoIpMRouteLocalFlag, ciscoIpMRouteDifferentInIfPkts=ciscoIpMRouteDifferentInIfPkts, ciscoIpMRouteMIB=ciscoIpMRouteMIB, ciscoIpMRouteMetric=ciscoIpMRouteMetric, ciscoIpMRouteMIBComplianceV12R28S=ciscoIpMRouteMIBComplianceV12R28S, ciscoIpMRouteMetric2=ciscoIpMRouteMetric2, ciscoIpMRouteBps2=ciscoIpMRouteBps2, ciscoIpMRouteMIBConformance=ciscoIpMRouteMIBConformance, ciscoIpMRouteNextHopOutLimit=ciscoIpMRouteNextHopOutLimit, ciscoIpMRouteHeartBeatMinimum=ciscoIpMRouteHeartBeatMinimum, ciscoIpMRouteInterfaceEntry=ciscoIpMRouteInterfaceEntry, ciscoIpMRoutePkts=ciscoIpMRoutePkts, ciscoIpMRouteHeartBeatWindowSize=ciscoIpMRouteHeartBeatWindowSize, ciscoIpMRouteBps=ciscoIpMRouteBps, ciscoIpMRouteIfInMcastOctets=ciscoIpMRouteIfInMcastOctets, ciscoIpMRouteOctets=ciscoIpMRouteOctets, ciscoIpMRouteIfOutMcastOctets=ciscoIpMRouteIfOutMcastOctets, ciscoIpMRouteMIBGroupV12R28S=ciscoIpMRouteMIBGroupV12R28S, ciscoIpMRouteMIBGroupV12R00S=ciscoIpMRouteMIBGroupV12R00S, ciscoIpMRoutePruneFlag=ciscoIpMRoutePruneFlag, PYSNMP_MODULE_ID=ciscoIpMRouteMIB, ciscoIpMRouteTable=ciscoIpMRouteTable, ciscoIpMRouteHeartBeatAlertTime=ciscoIpMRouteHeartBeatAlertTime, ciscoIpMRouteHeartBeatStatus=ciscoIpMRouteHeartBeatStatus, ciscoIpMRouteMIBGroup=ciscoIpMRouteMIBGroup, ciscoIpMRouteInLimit2=ciscoIpMRouteInLimit2, ciscoIpMRouteInterfaceTable=ciscoIpMRouteInterfaceTable, ciscoIpMRouteJoinFlag=ciscoIpMRouteJoinFlag, ciscoIpMRouteInLimit=ciscoIpMRouteInLimit, ciscoIpMRouteLastUsed=ciscoIpMRouteLastUsed, ciscoIpMRouteNumberOfEntries=ciscoIpMRouteNumberOfEntries, ciscoIpMRouteConnectedFlag=ciscoIpMRouteConnectedFlag, ciscoIpMRouteMIBIfGroup=ciscoIpMRouteMIBIfGroup, ciscoIpMRouteEntry=ciscoIpMRouteEntry, ciscoIpMRouteHeartBeatCount=ciscoIpMRouteHeartBeatCount, ciscoIpMRouteMissingHeartBeatsNotifications=ciscoIpMRouteMissingHeartBeatsNotifications, ciscoIpMRouteMIBComplianceV12R00S=ciscoIpMRouteMIBComplianceV12R00S, ciscoIpMRouteMIBHeartBeatGroup=ciscoIpMRouteMIBHeartBeatGroup, ciscoIpMRouteHeartBeatInterval=ciscoIpMRouteHeartBeatInterval, ciscoIpMRouteMsdpFlag=ciscoIpMRouteMsdpFlag, ciscoIpMRouteNextHopEntry=ciscoIpMRouteNextHopEntry, ciscoIpMRouteMetricPreference=ciscoIpMRouteMetricPreference, ciscoIpMRoute=ciscoIpMRoute, ciscoIpMRouteIfInMcastPkts=ciscoIpMRouteIfInMcastPkts, ciscoIpMRouteRegisterFlag=ciscoIpMRouteRegisterFlag, ciscoIpMRouteIfOutMcastPkts=ciscoIpMRouteIfOutMcastPkts, ciscoIpMRouteNotifications=ciscoIpMRouteNotifications, ciscoIpMRouteMIBCompliances=ciscoIpMRouteMIBCompliances, ciscoIpMRouteMIBCompliance=ciscoIpMRouteMIBCompliance, ciscoIpMRouteProxyJoinFlag=ciscoIpMRouteProxyJoinFlag, ciscoIpMRouteHeartBeatEntry=ciscoIpMRouteHeartBeatEntry, ciscoIpMRouteNextHopTable=ciscoIpMRouteNextHopTable, ciscoIpMRouteMIBGroups=ciscoIpMRouteMIBGroups, ciscoIpMRouteNextHopMacHdr=ciscoIpMRouteNextHopMacHdr)
