#
# PySNMP MIB module JUNIPER-MIMSTP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/JUNIPER-MIMSTP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:00:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
jnxXstpMibs, = mibBuilder.importSymbols("JUNIPER-SMI", "jnxXstpMibs")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Counter64, Gauge32, TimeTicks, ModuleIdentity, enterprises, ObjectIdentity, IpAddress, iso, MibIdentifier, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Counter64", "Gauge32", "TimeTicks", "ModuleIdentity", "enterprises", "ObjectIdentity", "IpAddress", "iso", "MibIdentifier", "Bits", "Integer32")
DisplayString, RowStatus, TruthValue, TextualConvention, MacAddress = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "RowStatus", "TruthValue", "TextualConvention", "MacAddress")
jnxMIMstMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1))
jnxMIMstMIB.setRevisions(('2007-05-03 00:00', '2007-05-24 00:00', '2007-12-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: jnxMIMstMIB.setRevisionsDescriptions(('Updated DESCRIPTION for jnxMIMstInstanceUpCount and jnxMIMstInstanceDownCount', 'Updated DESCRIPTION for jnxMIMstNewRootTrap', 'Defined new tables jnxMIMstCistPortProtectTable and jnxMIMstMstiPortProtectTable and new notifications under jnxMIMstTraps to support Root Protect and Loop Protect.',))
if mibBuilder.loadTexts: jnxMIMstMIB.setLastUpdated('200705030000Z')
if mibBuilder.loadTexts: jnxMIMstMIB.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: jnxMIMstMIB.setContactInfo('Juniper Technical Assistance Center Juniper Networks, Inc. 1194 N. Mathilda Avenue Sunnyvale, CA 94089 E-mail: support@juniper.net')
if mibBuilder.loadTexts: jnxMIMstMIB.setDescription('This mib module is for Juniper Networks Proprietory Multiple Instance MSTP mib')
class VlanId(TextualConvention, Integer32):
    description = 'A 12-bit VLAN ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

class BridgeId(TextualConvention, OctetString):
    description = ' Identifier of Bridge in 8 byte format'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 8)
    fixedLength = 8

class Timeout(TextualConvention, Integer32):
    description = ' Time out value in 4 byte'
    status = 'current'
    displayHint = 'd4'

class EnabledStatus(TextualConvention, Integer32):
    description = 'A simple status value for the object.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enabled", 1), ("disabled", 2))

jnxMIDot1sJuniperMst = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1))
jnxMIDot1sJnxMstTrapsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2))
jnxMIDot1sJuniperMstTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3))
jnxMIMstGlobalTrace = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstGlobalTrace.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstGlobalTrace.setDescription('This object is used to enable Global Trace Statements in the MSTP Module.')
jnxMIMstGlobalDebug = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstGlobalDebug.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstGlobalDebug.setDescription('This object is used to enable Global Debug Statements in the MSTP Module.')
jnxMIDot1sJuniperMstTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3), )
if mibBuilder.loadTexts: jnxMIDot1sJuniperMstTable.setStatus('current')
if mibBuilder.loadTexts: jnxMIDot1sJuniperMstTable.setDescription('List of per Virtual Context Mst Module Parameters.')
jnxMIDot1sJuniperMstEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1), ).setIndexNames((0, "JUNIPER-MIMSTP-MIB", "jnxMIDot1sJuniperMstContextId"))
if mibBuilder.loadTexts: jnxMIDot1sJuniperMstEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMIDot1sJuniperMstEntry.setDescription('Virtual Context Mst Module Parameters.')
jnxMIDot1sJuniperMstContextId = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: jnxMIDot1sJuniperMstContextId.setStatus('current')
if mibBuilder.loadTexts: jnxMIDot1sJuniperMstContextId.setDescription('Identifies the Virtual Context.')
jnxMIMstSystemControl = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("start", 1), ("shutdown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstSystemControl.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstSystemControl.setDescription('The administrative shutdown status requested by management for the MST feature. The value start (1) indicates that MST should be active in the device on all ports. The value shutdown (2) indicates that MST should be shutdown in the device on all ports. All memory should be released on all ports.')
jnxMIMstModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 3), EnabledStatus()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstModuleStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstModuleStatus.setDescription('The administrative status requested by management for the MST feature. The value enabled(1) indicates that Mst should be enabled in the device on all ports. The value disabled(2) indicates that Mst should be disabled in the device on all ports. The object can be set to enabled(1) if and only if, jnxMIMstSystemControl set to start.')
jnxMIMstMaxMstInstanceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMaxMstInstanceNumber.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMaxMstInstanceNumber.setDescription('The Maximun number of spanning trees to be allowed. A User may limit the Number of Spanning Tree instance to be allowed in the Bridge.')
jnxMIMstNoOfMstiSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstNoOfMstiSupported.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstNoOfMstiSupported.setDescription('Indicates Maximum number of spanning tree Instances supported.')
jnxMIMstMaxHopCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMaxHopCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMaxHopCount.setDescription('Indicates the Maximum Hop Count value. The granularity of this timer is specified to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
jnxMIMstBrgAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 7), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstBrgAddress.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstBrgAddress.setDescription('The MAC address used by this bridge when it must be referred to in a unique fashion. It is recommended that this be the numerically smallest MAC address of all ports that belong to this bridge. However it is only required to be unique. When concatenated with jnxMIMstCistBridgePriority or jnxMIMstMstiBridgePriority a unique BridgeIdentifier is formed which is used in the Spanning Tree Protocol.')
jnxMIMstCistRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 8), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistRoot.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistRoot.setDescription('The bridge identifier of the Root of the common spanning tree as determined by the Spanning Tree Protocol as executed by this node. This value is used as the CIST Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
jnxMIMstCistRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 9), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistRegionalRoot.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistRegionalRoot.setDescription('The bridge identifier of the Root of the Multiple spanning tree region as determined by the Spanning Tree Protocol as executed by this node. This value is used as the CIST Regional Root Identifier parameter in all Configuration Bridge PDUs originated by this node.')
jnxMIMstCistRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistRootCost.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistRootCost.setDescription('The Cost of the path to the CIST Root as seen from this bridge.')
jnxMIMstCistRegionalRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistRegionalRootCost.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistRegionalRootCost.setDescription('The Cost of the path to the CIST Regional Root as seen from this bridge.')
jnxMIMstCistRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistRootPort.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistRootPort.setDescription('The Port Number of the Port which offers the lowest path cost from this bridge to the CIST Root Bridge.')
jnxMIMstCistBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistBridgePriority.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistBridgePriority.setDescription('The Value of the writable portion of the Bridge Identifier comprising of the first two octets. The values that are set for Bridge Priority must be in steps of 4096.')
jnxMIMstCistBridgeMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 14), Timeout().subtype(subtypeSpec=ValueRangeConstraint(600, 4000)).clone(2000)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistBridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistBridgeMaxAge.setDescription('The value that all bridges use for MaxAge when this bridge is acting as the root. The granularity of this timer is specified to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
jnxMIMstCistBridgeForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 15), Timeout().subtype(subtypeSpec=ValueRangeConstraint(400, 3000)).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistBridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistBridgeForwardDelay.setDescription('The value that all bridges use for ForwardDelay when this bridge is acting as the root. Note that 802.1D specifies that the range for this parameter is related to the value of BridgeMaxAge. The granularity of this timer is specified to be 1 second. An agent may return a badValue error if a set is attempted to a value which is not a whole number of seconds.')
jnxMIMstCistHoldTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistHoldTime.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistHoldTime.setDescription('This time value determines the interval length during which no more than two Configuration bridge PDUs shall be transmitted by this node, in units of hundredths of a second.')
jnxMIMstCistMaxAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 17), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistMaxAge.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistMaxAge.setDescription('The maximum age of Spanning Tree Protocol information learned from the network on any port before it is discarded, in units of hundredths of a second. This is the actual value that this bridge is currently using.')
jnxMIMstCistForwardDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 18), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistForwardDelay.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistForwardDelay.setDescription('This time value, measured in units of hundredths of a second, controls how fast a port changes its spanning state when moving towards the Forwarding state. The value determines how long the port stays in a particular state before moving to the next state.')
jnxMIMstMstpUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstpUpCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstpUpCount.setDescription('The number of times MSTP Module has been enabled.')
jnxMIMstMstpDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstpDownCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstpDownCount.setDescription('The number of times MSTP Module has been disabled.')
jnxMIMstPathCostDefaultType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stp8021d1998", 1), ("stp8021t2001", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstPathCostDefaultType.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstPathCostDefaultType.setDescription('The version of the Spanning Tree default Path Costs that are to be used by this Bridge. A value of 8021d1998(1) uses the 16-bit default Path Costs from IEEE Std. 802.1D-1998. A value of stp8021t2001(2) uses the 32-bit default Path Costs from IEEE Std. 802.1t.')
jnxMIMstTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstTrace.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstTrace.setDescription('This object is used to enable Trace Statements in the MSTP Module. A FOUR BYTE integer is used for enabling the level of tracing. Each BIT in the four byte integer, represents a particular level of Trace. The mapping between the bit positions & the level of trace is as follows: 0 - Init and Shutdown Traces 1 - Management Traces 2 - Data Path Traces 3 - Control Plane Traces 4 - Packet Dump Traces 5 - Traces related to All Resources except Buffers 6 - All Failure Traces 7 - Buffer Traces The remaining bits are unused. Combination of trace levels are also allowed. For example if the bits 0 and 1 are set, then the Trace statements related to Init-Shutdown and management will be printed. The user has to enter the corresponding INTEGER VALUE for the bits set. For example if bits 0 and 1 are to be set then user has to give the value for this object as 3. Setting the Trace Option to any value will cause the Debug Option to be set to 0 (i.e.) the Trace Option and Debug Option are mutually exclusive.')
jnxMIMstDebug = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 131071))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstDebug.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstDebug.setDescription('This object is used to enable Debug Statements in the MSTP Module. A FOUR BYTE integer is used for enabling the level of debugging. Each BIT in the four byte integer, represents a particular level of Debug. The mapping between the bit positions & the level of debug is as follows: 0 - Init and Shutdown Debug statements 1 - Management Debug statements 2 - Memory related Debug statements 3 - BPDU related Debug statements 4 - Event Handling Debug statements 5 - Timer Module Debug statements 6 - Port Information SEM Debug statements 7 - Port Receive SEM Debug statements (valid in the case of MSTP alone) 8 - Role Selection SEM Debug statements 9 - Role Transition SEM Debug statements 10 - State Transition SEM Debug statements 11 - Protocol Migration SEM Debug statements 12 - Topology Change SEM Debug statements 13 - Port Transmit SEM Debug statements 14 - Bridge Detection SEM Debug statements 15 - All Failure Debug statements 16 - Redundancy code flow Debug statements The remaining bits are unused. Combination of debug levels are also allowed. For example if the bits 0 and 1 are set, then the Debug statements related to Init-Shutdown and management will be printed. The user has to enter the corresponding INTEGER VALUE for the bits set. For example if bits 0 and 1 are to be set then user has to give the value for this object as 3. Setting the Debug Option to any value will cause the Trace Option to be set to 0 (i.e.) the Trace Option and Debug Option are mutually exclusive.')
jnxMIMstForceProtocolVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2), ("mstp", 3))).clone('mstp')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstForceProtocolVersion.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstForceProtocolVersion.setDescription("The version of Spanning Tree Protocol the bridge is currently running. The value 'stpCompatible(0)' indicates the Spanning Tree Protocol specified in IEEE 802.1D and 'rstp(2)' indicates the Rapid Spanning Tree Protocol specified in IEEE 802.1w and 'mstp(3)' indicates the Multiple Spanning Tree Protocol Specified in IEEE 802.1s.")
jnxMIMstTxHoldCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10)).clone(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstTxHoldCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstTxHoldCount.setDescription('The value used by the Port Transmit state machine to limit the maximum transmission rate.')
jnxMIMstMstiConfigIdSel = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiConfigIdSel.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiConfigIdSel.setDescription('The Configuration Identifier Format Selector used by the Bridge. This has a fixed value of 0 to indicate RegionName, RegionVersion are specified as in Standard.')
jnxMIMstMstiRegionName = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 27), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiRegionName.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiRegionName.setDescription("The Name for the Region's configuration. By Default Region Name will be equal to the Bridge Mac Address.")
jnxMIMstMstiRegionVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiRegionVersion.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiRegionVersion.setDescription('Version of the MST Region.')
jnxMIMstMstiConfigDigest = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 29), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiConfigDigest.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiConfigDigest.setDescription('The Configuration Digest value for this Region.')
jnxMIMstBufferOverFlowCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstBufferOverFlowCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstBufferOverFlowCount.setDescription('The number of times Buffer overflows/failures have occured. A Trap is generated on the occurence of this event.')
jnxMIMstMemAllocFailureCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMemAllocFailureCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMemAllocFailureCount.setDescription('The number of times memory allocation failures have occured. A Trap is generated on the occurence of this event.')
jnxMIMstRegionConfigChangeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstRegionConfigChangeCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstRegionConfigChangeCount.setDescription('The number of times a Region Configuration Identifier Change was detected. A Trap is generated on the occurence of this event.')
jnxMIMstCistBridgeRoleSelectionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("initbridge", 0), ("roleselection", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistBridgeRoleSelectionSemState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistBridgeRoleSelectionSemState.setDescription('Current state of the Port Role Selection State Machine of this bridge in Common Spanning Tree context')
jnxMIMstCistTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 34), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the TcWhile Timer for any port in this Bridge was non-zero for Common Spanning Tree context.')
jnxMIMstCistTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistTopChanges.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistTopChanges.setDescription('The number of times that there have been atleast one non-zero TcWhile Timer on this Bridge for Common Spanning Tree context.')
jnxMIMstCistNewRootBridgeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistNewRootBridgeCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistNewRootBridgeCount.setDescription('The number of times this Bridge has detected a Root Bridge change for Common Spanning Tree context. A Trap is generated on the occurence of this event.')
jnxMIMstCistHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 37), Timeout()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistHelloTime.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistHelloTime.setDescription('This time value, measured in units of hundredths of a second, specifies the amount of time between the transmission of configuration BPDUs by this node on any port when it is the root of the spanning tree or trying to become so.')
jnxMIMstCistBridgeHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 38), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistBridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistBridgeHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs by this node in units of hundredths of a second.')
jnxMIMstCistDynamicPathcostCalculation = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 3, 1, 39), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistDynamicPathcostCalculation.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistDynamicPathcostCalculation.setDescription('This object is used to determine whether dynamic pathcost calculation is allowed or not.The value is determined by management. If set to true, pathcost is calculated dynamically from port speed, otherwise the link speed at the time of port creation is used for calculating the path cost. In both cases if the user has configured a pathcost for the port that will be used. By default dynamic pathcost calculation is set to false.')
jnxMIMstMstiBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4), )
if mibBuilder.loadTexts: jnxMIMstMstiBridgeTable.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiBridgeTable.setDescription('Table containing Bridge Information specific to Spanning Tree Instance. This table maintains context ID as one more index to support Multiple Instances.')
jnxMIMstMstiBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1), ).setIndexNames((0, "JUNIPER-MIMSTP-MIB", "jnxMIDot1sJuniperMstContextId"), (0, "JUNIPER-MIMSTP-MIB", "jnxMIMstMstiInstanceIndex"))
if mibBuilder.loadTexts: jnxMIMstMstiBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiBridgeEntry.setDescription('Entry indicating the Bridge Information.')
jnxMIMstMstiInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiInstanceIndex.setDescription('Spanning Tree Instance to which the information belongs.')
jnxMIMstMstiBridgeRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 2), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiBridgeRegionalRoot.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiBridgeRegionalRoot.setDescription('MSTI Regional Root Identifier value for the Instance. This value is used as the MSTI Regional Root Identifier parameter in all Configuration Bridge PDUs originated by this node')
jnxMIMstMstiBridgePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 61440)).clone(32768)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiBridgePriority.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiBridgePriority.setDescription('The writable portion of the MSTI Bridge Identifier. comprising of the first two octets. The values that are set for Bridge Priority must be in steps of 4096.')
jnxMIMstMstiRootCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiRootCost.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiRootCost.setDescription('The Cost of the path to the MSTI Regional Root as seen by this bridge.')
jnxMIMstMstiRootPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiRootPort.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiRootPort.setDescription('The Port Number of the Port which offers the lowest path cost from this bridge to the MSTI Region Root Bridge.')
jnxMIMstMstiTimeSinceTopologyChange = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiTimeSinceTopologyChange.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiTimeSinceTopologyChange.setDescription('The time (in hundredths of a second) since the TcWhile Timer for any port in this Bridge was non-zero for this spanning tree instance.')
jnxMIMstMstiTopChanges = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiTopChanges.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiTopChanges.setDescription('The number of times that there have been atleast one non-zero TcWhile Timer on this Bridge for this spanning tree instance.')
jnxMIMstMstiNewRootBridgeCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiNewRootBridgeCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiNewRootBridgeCount.setDescription('The number of times this Bridge has detected a Root Bridge change for this spanning tree instance. A Trap is generated on the occurence of this event.')
jnxMIMstMstiBridgeRoleSelectionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("initbridge", 0), ("roleselection", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiBridgeRoleSelectionSemState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiBridgeRoleSelectionSemState.setDescription('Current state of the Port Role Selection State Machine for this spanning tree instance for this bridge.')
jnxMIMstInstanceUpCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstInstanceUpCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstInstanceUpCount.setDescription('The number of times a new spanning tree instance has been created. This counter is incremented whenever a new spanning tree instance is created and also whenever a vlan is mapped to the instance. A Trap is generated on the occurence of this event.')
jnxMIMstInstanceDownCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstInstanceDownCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstInstanceDownCount.setDescription('The number of times a spanning tree instance has been deleted. This counter is incremented whenever a spanning tree instance is deleted and also whenever a vlan is unmapped from the instance. A Trap is generated on the occurence of this event.')
jnxMIMstOldDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 4, 1, 12), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstOldDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstOldDesignatedRoot.setDescription('The bridge identifier of the old root of the spanning tree instance as determined by the Spanning Tree Protocol as executed by this node. ')
jnxMIMstVlanInstanceMappingTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5), )
if mibBuilder.loadTexts: jnxMIMstVlanInstanceMappingTable.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstVlanInstanceMappingTable.setDescription('This table contains one entry for each instance of MSTP. This table maintains context ID as one more index to support Multiple Instances.')
jnxMIMstVlanInstanceMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1), ).setIndexNames((0, "JUNIPER-MIMSTP-MIB", "jnxMIDot1sJuniperMstContextId"), (0, "JUNIPER-MIMSTP-MIB", "jnxMIMstInstanceIndex"))
if mibBuilder.loadTexts: jnxMIMstVlanInstanceMappingEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstVlanInstanceMappingEntry.setDescription('A conceptual row containing the status of the MSTP instance.')
jnxMIMstInstanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: jnxMIMstInstanceIndex.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstInstanceIndex.setDescription('An arbitrary integer within the range from 1 to the value of Max Instance Number that uniquely identifies an instance.')
jnxMIMstMapVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 2), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMapVlanIndex.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMapVlanIndex.setDescription('The VlanId will get mapped to the spanning tree instance specified. All the Instance Specific information for the Member ports of the Vlan will be created.This object is used only for SET operation.GET Operation returns null values. If the VlanId to Instance Mapping has to be known then any one of the VlanMapped object should be used.')
jnxMIMstUnMapVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 3), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstUnMapVlanIndex.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstUnMapVlanIndex.setDescription('The VlanId will get unmapped from spanning tree instance to which it it mapped. All the Instance Specific information for the Member ports of the Vlan will get released.This object is used only for SET operation.GET Operation returns null values.')
jnxMIMstSetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstSetVlanList.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstSetVlanList.setDescription('A string of octets containing one bit per VLAN. The first octet corresponds to VLANs with VlanIndex values 1 through 8; the second octet to VLANs 9 through 16 etc. The most significant bit of each octet corresponds to the lowest VlanIndex value in that octet. The set of vlans configured by management to map for this Instance. If the VlanId to Instance Mapping has to be known then any one of the VlanMapped object should be used.If a vlan is already mapped to this Instance, it may not be mapped again. This object is used only for SET operation. GET Operation returns null values.')
jnxMIMstResetVlanList = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstResetVlanList.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstResetVlanList.setDescription('A string of octets containing one bit per VLAN. The first octet corresponds to VLANs with VlanIndex values 1 through 8; the second octet to VLANs 9 through 16 etc. The most significant bit of each octet corresponds to the lowest VlanIndex value in that octet. The set of vlans configured by management to unmap from this Instance. A vlan may not be unmapped from this instance if it is not already mapped to this Instance. This object is used only for SET operation.GET Operation returns null values.')
jnxMIMstInstanceVlanMapped = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstInstanceVlanMapped.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstInstanceVlanMapped.setDescription("A string of octets containing one bit per VLAN. The first octet corresponds to VLANs with VlanIndex values 1 through 8; the second octet to VLANs 9 through 16 etc. The most significant bit of each octet corresponds to the lowest VlanIndex value in that octet. For each VLAN that is mapped to this MSTP instance, the bit corresponding to that VLAN is set to '1'.")
jnxMIMstInstanceVlanMapped2k = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstInstanceVlanMapped2k.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstInstanceVlanMapped2k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values 1024 through 2047. The first octet corresponds to VLANs with VlanIndex values 1024 through 1031; the second octet to VLANs 1032 through 1039 etc. The most significant bit of each octet corresponds to the lowest VlanIndex value in that octet. For each VLAN that is mapped to this MSTP instance, the bit corresponding to that VLAN is set to '1'. This object is only instantiated on devices with support for VlanIndex values up to 4095.")
jnxMIMstInstanceVlanMapped3k = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstInstanceVlanMapped3k.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstInstanceVlanMapped3k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values 2048 through 3071. The first octet corresponds to VLANs with VlanIndex values of 2048 through 2055; the second octet to VLANs 2056 through 2063 etc. The most significant bit of each octet corresponds to the lowest VlanIndex value in that octet. For each VLAN that is mapped to this MSTP instance, the bit corresponding to that VLAN is set to '1'. This object is only instantiated on devices with support for VlanIndex values up to 4095.")
jnxMIMstInstanceVlanMapped4k = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstInstanceVlanMapped4k.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstInstanceVlanMapped4k.setDescription("A string of octets containing one bit per VLAN for VLANS with VlanIndex values 3072 through 4095. The first octet corresponds to VLANs with VlanIndex values 3072 through 3079; the second octet to VLANs 3080 through 3087 etc. The most significant bit of each octet corresponds to the lowest VlanIndex value in that octet. For each VLAN that is mapped to this MSTP instance, the bit corresponding to that VLAN is set to '1'. This object is only instantiated on devices with support for VlanIndex values up to 4095.")
jnxMIMstCistPortTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6), )
if mibBuilder.loadTexts: jnxMIMstCistPortTable.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortTable.setDescription('This table contains Common Spanning Tree Port Information.')
jnxMIMstCistPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1), ).setIndexNames((0, "JUNIPER-MIMSTP-MIB", "jnxMIMstCistPort"))
if mibBuilder.loadTexts: jnxMIMstCistPortEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortEntry.setDescription('A list of information maintained by every port for Common Spanning tree.')
jnxMIMstCistPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxMIMstCistPort.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPort.setDescription('The Port number of the port for which this entry contains spanning tree information.')
jnxMIMstCistPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortPathCost.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the CIST Root which include this port.')
jnxMIMstCistPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortPriority.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortPriority.setDescription('The four most significant bits of the Port Identifier of the Spanning Tree instance can be modified by setting the CistPortPriority value. The values that are set for Port Priority must be in steps of 16.')
jnxMIMstCistPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortDesignatedRoot.setDescription('The unique Bridge Identifier of the bridge recorded as the CIST Root in the configuration BPDUs transmitted.')
jnxMIMstCistPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortDesignatedBridge.setDescription("The unique Bridge Identifier of the bridge which this port considers to be the Designated Bridge for the port's segment.")
jnxMIMstCistPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortDesignatedPort.setDescription("The Port identifier of the port on the Designated Bridge for this port's segment.")
jnxMIMstCistPortAdminP2P = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("forceTrue", 0), ("forceFalse", 1), ("auto", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortAdminP2P.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortAdminP2P.setDescription('The administrative point-to-point status of the LAN segment attached to this port. A value of forceTrue(0) indicates that this port should always be treated as if it is connected to a point-to-point link. A value of forceFalse(1) indicates that this port should be treated as having a shared media connection. A value of auto(2) indicates that this port is considered to have a point-to-point link if it is an Aggregator and all of its members are aggregatable, or if the MAC entity is configured for full duplex operation, either through auto-negotiation or by management means.')
jnxMIMstCistPortOperP2P = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortOperP2P.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortOperP2P.setDescription('The operational point-to-point status of the LAN segment attached to this port. It indicates whether a port is considered to have a point-to-point connection or not. The value is determined by management or by auto-detection, as described in the jnxMIMstCistPortAdminP2P object.')
jnxMIMstCistPortAdminEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortAdminEdgeStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortAdminEdgeStatus.setDescription('The administrative value of the Edge Port parameter. A value of TRUE(1) indicates that this port should be assumed as an edge-port and a value of FALSE(2) indicates that this port should be assumed as a non-edge-port.')
jnxMIMstCistPortOperEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortOperEdgeStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortOperEdgeStatus.setDescription('The operational value of the Edge Port parameter. The object is initialized to the value of jnxMIMstCistPortAdminEdgeStatus and is set FALSE on reception of a BPDU.')
jnxMIMstCistPortProtocolMigration = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortProtocolMigration.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortProtocolMigration.setDescription('Indicates the Protocol migration state of this Port. When operating in RSTP/MSTP (version >= 2) mode, writing TRUE(1) to this object forces this port to transmit MSTP BPDUs without instance information. Any other operation on this object has no effect and it always returns FALSE(2) when read.')
jnxMIMstCistPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortState.setDescription('Current state of the Port as defined by the Common spanning tree protocol.')
jnxMIMstCistForcePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistForcePortState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistForcePortState.setDescription("Current state of the Port which can be changed to either Disabled or Enabled for ALL spanning tree instances. Setting this object will override the port's status in any of the MSTI contexts")
jnxMIMstCistPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortForwardTransitions.setDescription('Number of times this port has transitioned to the Forwarding State.')
jnxMIMstCistPortRxMstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRxMstBpduCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortRxMstBpduCount.setDescription('Number of MST BPDUs received on this port.')
jnxMIMstCistPortRxRstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRxRstBpduCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortRxRstBpduCount.setDescription('Number of RST BPDUs received on this port.')
jnxMIMstCistPortRxConfigBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRxConfigBpduCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortRxConfigBpduCount.setDescription('Number of Configuration BPDUs received on this port.')
jnxMIMstCistPortRxTcnBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRxTcnBpduCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortRxTcnBpduCount.setDescription('Number of TCN BPDUs received on this port.')
jnxMIMstCistPortTxMstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortTxMstBpduCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortTxMstBpduCount.setDescription('Number of MST BPDUs Transmitted from this port.')
jnxMIMstCistPortTxRstBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortTxRstBpduCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortTxRstBpduCount.setDescription('Number of RST BPDUs Transmitted from this port.')
jnxMIMstCistPortTxConfigBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortTxConfigBpduCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortTxConfigBpduCount.setDescription('Number of Configuration BPDUs Transmitted from this port.')
jnxMIMstCistPortTxTcnBpduCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortTxTcnBpduCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortTxTcnBpduCount.setDescription('Number of TCN BPDUs Transmitted from this port.')
jnxMIMstCistPortInvalidMstBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortInvalidMstBpduRxCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortInvalidMstBpduRxCount.setDescription('Number of Invalid MST BPDUs Received on this port.')
jnxMIMstCistPortInvalidRstBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortInvalidRstBpduRxCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortInvalidRstBpduRxCount.setDescription('Number of Invalid RST BPDUs Received on this port.')
jnxMIMstCistPortInvalidConfigBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortInvalidConfigBpduRxCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortInvalidConfigBpduRxCount.setDescription('Number of Invalid Configuration BPDUs Received on this port.')
jnxMIMstCistPortInvalidTcnBpduRxCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortInvalidTcnBpduRxCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortInvalidTcnBpduRxCount.setDescription('Number of Invalid TCN BPDUs Received on this port.')
jnxMIMstCistPortTransmitSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("transmitinit", 0), ("transmitperiodic", 1), ("transmitconfig", 2), ("transmittcn", 3), ("transmitrstp", 4), ("idle", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortTransmitSemState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortTransmitSemState.setDescription('Indicates current State of the Port Transmit state machine.')
jnxMIMstCistPortReceiveSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("discard", 0), ("receive", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortReceiveSemState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortReceiveSemState.setDescription('Indicates current State of the Port Receive state machine.')
jnxMIMstCistPortProtMigrationSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("init", 0), ("sendrstp", 1), ("sendingrstp", 2), ("sendstp", 3), ("sendingstp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortProtMigrationSemState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortProtMigrationSemState.setDescription('Indicates current State of the Port Protocol Migration State machine.')
jnxMIMstCistProtocolMigrationCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistProtocolMigrationCount.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistProtocolMigrationCount.setDescription('The number of times this Port has migrated from one STP protocol version to another. The relevant protocols are STP-COMPATIBLE and RSTP/MSTP. A Trap is generated on the occurence of this event.')
jnxMIMstCistPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port.')
jnxMIMstCistPortRegionalRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 32), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRegionalRoot.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortRegionalRoot.setDescription('The unique Bridge Identifier of the bridge recorded as the CIST Regional Root Identifier in the configuration BPDUs transmitted.')
jnxMIMstCistPortRegionalPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRegionalPathCost.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortRegionalPathCost.setDescription('The contribution of this port to the path cost of paths towards the CIST Regional Root which include this port.')
jnxMIMstCistSelectedPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistSelectedPortRole.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistSelectedPortRole.setDescription('Selected Port Role of the port for this spanning tree instance.')
jnxMIMstCistCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistCurrentPortRole.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistCurrentPortRole.setDescription('Current Port Role of the port for this spanning tree instance.')
jnxMIMstCistPortInfoSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("aged", 2), ("update", 3), ("superiordesg", 4), ("repeatdesg", 5), ("root", 6), ("other", 7), ("present", 8), ("receive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortInfoSemState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortInfoSemState.setDescription('Current state of the Port Information State Machine for this port in this spanning tree context.')
jnxMIMstCistPortRoleTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("init", 0), ("blockport", 1), ("blockedport", 2), ("activeport", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRoleTransitionSemState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortRoleTransitionSemState.setDescription('Current state of the Port Role Transition State Machine for this port in this spanning tree context.')
jnxMIMstCistPortStateTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("discarding", 0), ("learning", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortStateTransitionSemState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortStateTransitionSemState.setDescription('Current state of the Port State Transition State Machine for this port in this spanning tree context.')
jnxMIMstCistPortTopologyChangeSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 0), ("inactive", 1), ("active", 2), ("detected", 3), ("notifiedtcn", 4), ("notifiedtc", 5), ("propagating", 6), ("acknowledged", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortTopologyChangeSemState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortTopologyChangeSemState.setDescription('Current state of the Topology Change State Machine for this port in this spanning tree context.')
jnxMIMstCistPortHelloTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 40), Timeout().subtype(subtypeSpec=ValueRangeConstraint(100, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortHelloTime.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortHelloTime.setDescription('The amount of time between the transmission of Configuration bridge PDUs by this node on this port in units of hundredths of a second.')
jnxMIMstCistPortOperVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2, 3))).clone(namedValues=NamedValues(("stpCompatible", 0), ("rstp", 2), ("mstp", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortOperVersion.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortOperVersion.setDescription('This indicates whether the Port is operationally in the Mstp mode, Rstp mode or the Stp-compatible mode i.e., whether the Port is transmitting MST BPDUs, RST BPDUs or Config/TCN BPDUs.')
jnxMIMstCistPortEffectivePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 42), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortEffectivePortState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortEffectivePortState.setDescription('The effective operational state of the port for CIST. This will TRUE only when the port is operationally up in the Interface level and Protocol level for CIST. This is will be set to False for all other times.')
jnxMIMstCistPortAutoEdgeStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 6, 1, 43), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortAutoEdgeStatus.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortAutoEdgeStatus.setDescription('This parameter when TRUE(1) indicates that detection of a port as Edge Port happens automatically and FALSE(2) indicates that this feature is disabled.')
jnxMIMstMstiPortTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7), )
if mibBuilder.loadTexts: jnxMIMstMstiPortTable.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortTable.setDescription('This table contains Spanning Tree Instance Specific Port Information.')
jnxMIMstMstiPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1), ).setIndexNames((0, "JUNIPER-MIMSTP-MIB", "jnxMIMstMstiPort"), (0, "JUNIPER-MIMSTP-MIB", "jnxMIMstInstanceIndex"))
if mibBuilder.loadTexts: jnxMIMstMstiPortEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortEntry.setDescription('A list of information maintained by every port for each and every spanning tree instance.')
jnxMIMstMstiPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: jnxMIMstMstiPort.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPort.setDescription('The Port number of the port for which this entry contains spanning tree information.')
jnxMIMstMstiPortPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortPathCost.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortPathCost.setDescription('The contribution of this port to the path cost of paths towards the MSTI Root which include this port.')
jnxMIMstMstiPortPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 240)).clone(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortPriority.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortPriority.setDescription('The four most significant bits of the Port Identifier for a given Spanning Tree instance can be modified independently for each Spanning Tree instance supported by the Bridge. The values that are set for Port Priority must be in steps of 16.')
jnxMIMstMstiPortDesignatedRoot = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 4), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortDesignatedRoot.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortDesignatedRoot.setDescription('The unique Bridge Identifier of the bridge recorded as the MSTI Regional Root in the configuration BPDUs transmitted.')
jnxMIMstMstiPortDesignatedBridge = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 5), BridgeId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortDesignatedBridge.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortDesignatedBridge.setDescription("The unique Bridge Identifier of the bridge which this port considers to be the Designated Bridge for the port's segment.")
jnxMIMstMstiPortDesignatedPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortDesignatedPort.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortDesignatedPort.setDescription("The Port identifier of the port on the Designated Bridge for this port's segment.")
jnxMIMstMstiPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 5))).clone(namedValues=NamedValues(("disabled", 1), ("discarding", 2), ("learning", 4), ("forwarding", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortState.setDescription('Current state of the Port as defined by the Multiple spanning tree protocol. Port which is Forwarding state in one instance can be in Discarding (Blocking) state in another instance.')
jnxMIMstMstiForcePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiForcePortState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiForcePortState.setDescription("Current state of the Port which can be changed to either Disabled or Enabled for the specific spanning tree instance. This object can be set to enabled only if the 'jnxMIMstCistForcePortState' is set to 'enabled' for this port")
jnxMIMstMstiPortForwardTransitions = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortForwardTransitions.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortForwardTransitions.setDescription('Number of times this port has transitioned to the Forwarding State for specific instance.')
jnxMIMstMstiPortReceivedBPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortReceivedBPDUs.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortReceivedBPDUs.setDescription('Number of BPDUs received by this port for this spanning tree instance.')
jnxMIMstMstiPortTransmittedBPDUs = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortTransmittedBPDUs.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortTransmittedBPDUs.setDescription('Number of BPDUs transmitted on this port for this spanning tree instance.')
jnxMIMstMstiPortInvalidBPDUsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortInvalidBPDUsRcvd.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortInvalidBPDUsRcvd.setDescription('Number of Invalid BPDUs received on this Port for this spanning tree instance.')
jnxMIMstMstiPortDesignatedCost = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortDesignatedCost.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortDesignatedCost.setDescription('The path cost of the Designated Port of the segment connected to this port.')
jnxMIMstMstiSelectedPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiSelectedPortRole.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiSelectedPortRole.setDescription('Selected Port Role of the port for this spanning tree instance.')
jnxMIMstMstiCurrentPortRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("disabled", 0), ("alternate", 1), ("backup", 2), ("root", 3), ("designated", 4), ("master", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiCurrentPortRole.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiCurrentPortRole.setDescription('Current Port Role of the port for this spanning tree instance.')
jnxMIMstMstiPortInfoSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1), ("aged", 2), ("update", 3), ("superiordesg", 4), ("repeatdesg", 5), ("root", 6), ("other", 7), ("present", 8), ("receive", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortInfoSemState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortInfoSemState.setDescription('Current state of the Port Information State Machine for this port in this spanning tree context.')
jnxMIMstMstiPortRoleTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("init", 0), ("blockport", 1), ("blockedport", 2), ("activeport", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortRoleTransitionSemState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortRoleTransitionSemState.setDescription('Current state of the Port Role Transition State Machine for this port in this spanning tree context.')
jnxMIMstMstiPortStateTransitionSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("discarding", 0), ("learning", 1), ("forwarding", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortStateTransitionSemState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortStateTransitionSemState.setDescription('Current state of the Port State Transition State Machine for this port in this spanning tree context.')
jnxMIMstMstiPortTopologyChangeSemState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("init", 0), ("inactive", 1), ("active", 2), ("detected", 3), ("notifiedtcn", 4), ("notifiedtc", 5), ("propagating", 6), ("acknowledged", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortTopologyChangeSemState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortTopologyChangeSemState.setDescription('Current state of the Topology Change State Machine for this port in this spanning tree context.')
jnxMIMstMstiPortEffectivePortState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 7, 1, 20), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortEffectivePortState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortEffectivePortState.setDescription('The effective operational stae of the port for specific instance. This is will be TRUE only when the port is operationally up in the interface level and Protocol level for the specific instance. This is will be set to false at all other times.')
jnxMIMstCistPortProtectTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 8), )
if mibBuilder.loadTexts: jnxMIMstCistPortProtectTable.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortProtectTable.setDescription('Defines the jnxMIMstCist Port Table for providing extensions for Root Protect and Loop Protect to the corresponding jnxMIMstCistPortTable entry.')
jnxMIMstCistPortProtectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 8, 1), )
jnxMIMstCistPortEntry.registerAugmentions(("JUNIPER-MIMSTP-MIB", "jnxMIMstCistPortProtectEntry"))
jnxMIMstCistPortProtectEntry.setIndexNames(*jnxMIMstCistPortEntry.getIndexNames())
if mibBuilder.loadTexts: jnxMIMstCistPortProtectEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortProtectEntry.setDescription('Defines an entry in the jnxMIMstCistPortProtectTable. This essentially augments the jnxMIMstCistPortEntry with additional objects.')
jnxMIMstCistPortRootProtectEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 8, 1, 1), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRootProtectEnabled.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortRootProtectEnabled.setDescription('A Boolean value set by management indicating whether Root protect functionality is enabled on the port. If TRUE causes the Port not to be selected as Root Port for the CIST or any MSTI, even it has the best spanning tree priority vector. This parameter should be FALSE by default. ')
jnxMIMstCistPortRootProtectState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-error", 0), ("root-prevented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortRootProtectState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortRootProtectState.setDescription("Indicates whether the port was prevented from being a root port for CIST. This parameter will always return 'no-error (0)' if jnxMIMstCistPortRootProtectEnabled is FALSE. ")
jnxMIMstCistPortLoopProtectEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 8, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortLoopProtectEnabled.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortLoopProtectEnabled.setDescription('A Boolean value set by management indicating whether Loop protect functionality is enabled on the port. If TRUE causes the Port not to be selected as Designated Port for the CIST or any MSTI, when the received superior BPDU is aged out. This parameter should be FALSE by default. ')
jnxMIMstCistPortLoopProtectState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-error", 0), ("loop-prevented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstCistPortLoopProtectState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortLoopProtectState.setDescription("Indicates whether a potential Loop was prevented on the port for CIST. This parameter will always return 'no-error (0)' if jnxMIMstCistPortLoopProtectEnabled is FALSE. ")
jnxMIMstMstiPortProtectTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 9), )
if mibBuilder.loadTexts: jnxMIMstMstiPortProtectTable.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortProtectTable.setDescription('Defines the jnxMIMstMsti Port Table for providing extensions for Root Protect and Loop Protect to the corresponding jnxMIMstMstiPortTable entry.')
jnxMIMstMstiPortProtectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 9, 1), )
jnxMIMstMstiPortEntry.registerAugmentions(("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiPortProtectEntry"))
jnxMIMstMstiPortProtectEntry.setIndexNames(*jnxMIMstMstiPortEntry.getIndexNames())
if mibBuilder.loadTexts: jnxMIMstMstiPortProtectEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortProtectEntry.setDescription('Defines an entry in the jnxMIMstMstiPortProtectTable. This essentially augments the jnxMIMstMstiPortEntry with additional objects.')
jnxMIMstMstiPortRootProtectState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-error", 0), ("root-prevented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortRootProtectState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortRootProtectState.setDescription("Indicates whether the port was prevented from being a root port for CIST. This parameter will always return 'no-error (0)' if jnxMIMstCistPortRootProtectEnabled is FALSE. ")
jnxMIMstMstiPortLoopProtectState = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 1, 9, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no-error", 0), ("loop-prevented", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstMstiPortLoopProtectState.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortLoopProtectState.setDescription("Indicates whether a potential Loop was prevented on the port for CIST. This parameter will always return 'no-error (0)' if jnxMIMstCistPortLoopProtectEnabled is FALSE. ")
jnxMIDot1sJnxMstSetGlobalTrapOption = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIDot1sJnxMstSetGlobalTrapOption.setStatus('current')
if mibBuilder.loadTexts: jnxMIDot1sJnxMstSetGlobalTrapOption.setDescription('This object is used to enable and disable MSTP traps for memory failure or buffer failure irrespective of the context in which the failure occurs. 0 - Traps are not enabled. 1 - Memory and buffer failure traps enabled')
jnxMIMstGlobalErrTrapType = MibScalar((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("memfail", 1), ("bufffail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstGlobalErrTrapType.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstGlobalErrTrapType.setDescription('Used within the Trap Notification PDU. It denotes general events like none - none of the below values memfail - memory allocation failure bufffail - buffer allocation failure')
jnxMIDot1sJnxMstTrapsControlTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 3), )
if mibBuilder.loadTexts: jnxMIDot1sJnxMstTrapsControlTable.setStatus('current')
if mibBuilder.loadTexts: jnxMIDot1sJnxMstTrapsControlTable.setDescription('List of per virtual bridge Trap Control Info.')
jnxMIDot1sJnxMstTrapsControlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 3, 1), ).setIndexNames((0, "JUNIPER-MIMSTP-MIB", "jnxMIDot1sJuniperMstContextId"))
if mibBuilder.loadTexts: jnxMIDot1sJnxMstTrapsControlEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMIDot1sJnxMstTrapsControlEntry.setDescription('Virtual bridge TrapsControl information.')
jnxMIMstSetTraps = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstSetTraps.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstSetTraps.setDescription('This object is used to enable and disable context-specific MSTP traps. Currently the following are defined 0 - Traps are not enabled. 1 - General Traps like protocol up or down 2 - Exception Traps like port protocol migration or invalid packet rcvd in port 3 - All the above Traps ')
jnxMIMstGenTrapType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("none", 0), ("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstGenTrapType.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstGenTrapType.setDescription('Used within the Trap Notification PDU. It denotes general events like none - none of the below values up - protocol UP, down - protocol DOWN')
jnxMIMstPortTrapNotificationTable = MibTable((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 4), )
if mibBuilder.loadTexts: jnxMIMstPortTrapNotificationTable.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstPortTrapNotificationTable.setDescription('This table is used to store the notification information occured in each of the port for protocol migration and invalid packet received. This table is maintained per virtual context in the system.')
jnxMIMstPortTrapNotificationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 4, 1), ).setIndexNames((0, "JUNIPER-MIMSTP-MIB", "jnxMIMstPortTrapIndex"))
if mibBuilder.loadTexts: jnxMIMstPortTrapNotificationEntry.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstPortTrapNotificationEntry.setDescription(' This entry is used to store the notification information')
jnxMIMstPortTrapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstPortTrapIndex.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstPortTrapIndex.setDescription('A unique value, greater than zero, indicating the Port number.')
jnxMIMstPortMigrationType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("sendstp", 0), ("sendrstp", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstPortMigrationType.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstPortMigrationType.setDescription('Port Protocol migration type occured in the port')
jnxMIMstPktErrType = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("protocolIdErr", 0), ("invalidBpdu", 1), ("configLengthErr", 2), ("tcnLengthErr", 3), ("rstpLengthErr", 4), ("maxAgeErr", 5), ("fwdDelayErr", 6), ("helloTimeErr", 7), ("mstpLengthErr", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstPktErrType.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstPktErrType.setDescription('Type of invalid packet received in each of the port ')
jnxMIMstPktErrVal = MibTableColumn((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 2, 4, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: jnxMIMstPktErrVal.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstPktErrVal.setDescription('Packet error value corresponding to the above type ')
jnxMIMstTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0))
jnxMIMstGenTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 1)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstGenTrapType"))
if mibBuilder.loadTexts: jnxMIMstGenTrap.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstGenTrap.setDescription('Generated when any of the general events like protocol up or protocol down occurs')
jnxMIMstErrTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 2)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstGlobalErrTrapType"))
if mibBuilder.loadTexts: jnxMIMstErrTrap.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstErrTrap.setDescription('Generated when any of the error events like memory failure or buffer failure or protocol migration or new root or topology change occurs ')
jnxMIMstNewRootTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 3)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstOldDesignatedRoot"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiBridgeRegionalRoot"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiInstanceIndex"))
if mibBuilder.loadTexts: jnxMIMstNewRootTrap.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstNewRootTrap.setDescription('Generated whenever a new root bridge is selected in the topology. The jnxMIMstNewRootTrap indicates that the sending agent has become the new root of the Spanning Tree; the trap is sent by a bridge soon after its election as the new root')
jnxMIMstTopologyChgTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 4)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiInstanceIndex"))
if mibBuilder.loadTexts: jnxMIMstTopologyChgTrap.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstTopologyChgTrap.setDescription('Generated when topology change is detected ')
jnxMIMstProtocolMigrationTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 5)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstPortTrapIndex"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstForceProtocolVersion"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstPortMigrationType"))
if mibBuilder.loadTexts: jnxMIMstProtocolMigrationTrap.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstProtocolMigrationTrap.setDescription('Generated when port protocol migration happens in the port ')
jnxMIMstInvalidBpduRxdTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 6)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstPortTrapIndex"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstPktErrType"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstPktErrVal"))
if mibBuilder.loadTexts: jnxMIMstInvalidBpduRxdTrap.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstInvalidBpduRxdTrap.setDescription('Generated when the invalid packet is received for bpdu/stp/rstp/maximum age/forward delay/hello time')
jnxMIMstRegionConfigChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 7)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiConfigIdSel"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiRegionName"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiRegionVersion"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiConfigDigest"))
if mibBuilder.loadTexts: jnxMIMstRegionConfigChangeTrap.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstRegionConfigChangeTrap.setDescription("Generated when the MST region's configuration identifier changes.")
jnxMIMstCistPortRootProtectStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 8)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstCistPortRootProtectState"))
if mibBuilder.loadTexts: jnxMIMstCistPortRootProtectStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortRootProtectStateChangeTrap.setDescription('Generated when the ports Root-protect state (no-error or root-prevented) for CIST changes.')
jnxMIMstMstiPortRootProtectStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 9)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiPortRootProtectState"))
if mibBuilder.loadTexts: jnxMIMstMstiPortRootProtectStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortRootProtectStateChangeTrap.setDescription('Generated when the ports Root-protect state (no-error or root-prevented) an MSTI changes.')
jnxMIMstCistPortLoopProtectStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 10)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstCistPortLoopProtectState"))
if mibBuilder.loadTexts: jnxMIMstCistPortLoopProtectStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstCistPortLoopProtectStateChangeTrap.setDescription('Generated when the ports Loop-protect state (no-error or loop-prevented) for CIST changes.')
jnxMIMstMstiPortLoopProtectStateChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 2636, 3, 46, 1, 3, 0, 11)).setObjects(("JUNIPER-MIMSTP-MIB", "jnxMIMstBrgAddress"), ("JUNIPER-MIMSTP-MIB", "jnxMIMstMstiPortLoopProtectState"))
if mibBuilder.loadTexts: jnxMIMstMstiPortLoopProtectStateChangeTrap.setStatus('current')
if mibBuilder.loadTexts: jnxMIMstMstiPortLoopProtectStateChangeTrap.setDescription('Generated when the ports Loop-protect state (no-error or loop-prevented) an MSTI changes.')
mibBuilder.exportSymbols("JUNIPER-MIMSTP-MIB", jnxMIMstCistHoldTime=jnxMIMstCistHoldTime, jnxMIMstMstiBridgePriority=jnxMIMstMstiBridgePriority, jnxMIMstRegionConfigChangeTrap=jnxMIMstRegionConfigChangeTrap, jnxMIDot1sJuniperMst=jnxMIDot1sJuniperMst, jnxMIMstMstiRegionVersion=jnxMIMstMstiRegionVersion, PYSNMP_MODULE_ID=jnxMIMstMIB, jnxMIMstMstiPortPriority=jnxMIMstMstiPortPriority, jnxMIMstCistPortOperEdgeStatus=jnxMIMstCistPortOperEdgeStatus, jnxMIMstPortTrapNotificationEntry=jnxMIMstPortTrapNotificationEntry, jnxMIMstMstiRootCost=jnxMIMstMstiRootCost, jnxMIMstMstiSelectedPortRole=jnxMIMstMstiSelectedPortRole, jnxMIDot1sJuniperMstTable=jnxMIDot1sJuniperMstTable, jnxMIMstCistPortRxTcnBpduCount=jnxMIMstCistPortRxTcnBpduCount, jnxMIMstMstiPortReceivedBPDUs=jnxMIMstMstiPortReceivedBPDUs, jnxMIMstSystemControl=jnxMIMstSystemControl, jnxMIMstMstiPortInvalidBPDUsRcvd=jnxMIMstMstiPortInvalidBPDUsRcvd, jnxMIMstPktErrVal=jnxMIMstPktErrVal, jnxMIMstCistBridgePriority=jnxMIMstCistBridgePriority, jnxMIMstMstiPortTable=jnxMIMstMstiPortTable, jnxMIMstCistDynamicPathcostCalculation=jnxMIMstCistDynamicPathcostCalculation, jnxMIMstMaxHopCount=jnxMIMstMaxHopCount, jnxMIMstMstiBridgeRegionalRoot=jnxMIMstMstiBridgeRegionalRoot, jnxMIMstCistPortRxMstBpduCount=jnxMIMstCistPortRxMstBpduCount, Timeout=Timeout, jnxMIMstCistHelloTime=jnxMIMstCistHelloTime, jnxMIMstMstiPortPathCost=jnxMIMstMstiPortPathCost, jnxMIMstCistPortStateTransitionSemState=jnxMIMstCistPortStateTransitionSemState, jnxMIMstMstiInstanceIndex=jnxMIMstMstiInstanceIndex, jnxMIMstCistPortRootProtectStateChangeTrap=jnxMIMstCistPortRootProtectStateChangeTrap, jnxMIMstRegionConfigChangeCount=jnxMIMstRegionConfigChangeCount, jnxMIMstMstiBridgeRoleSelectionSemState=jnxMIMstMstiBridgeRoleSelectionSemState, jnxMIMstSetVlanList=jnxMIMstSetVlanList, jnxMIMstCistPortProtocolMigration=jnxMIMstCistPortProtocolMigration, jnxMIMstNoOfMstiSupported=jnxMIMstNoOfMstiSupported, jnxMIMstCistPortInvalidConfigBpduRxCount=jnxMIMstCistPortInvalidConfigBpduRxCount, jnxMIMstCistPortReceiveSemState=jnxMIMstCistPortReceiveSemState, jnxMIMstForceProtocolVersion=jnxMIMstForceProtocolVersion, jnxMIMstMemAllocFailureCount=jnxMIMstMemAllocFailureCount, jnxMIMstCistForwardDelay=jnxMIMstCistForwardDelay, jnxMIMstCistPortOperP2P=jnxMIMstCistPortOperP2P, jnxMIMstInstanceVlanMapped3k=jnxMIMstInstanceVlanMapped3k, jnxMIMstMstiConfigDigest=jnxMIMstMstiConfigDigest, jnxMIMstCistPortForwardTransitions=jnxMIMstCistPortForwardTransitions, jnxMIMstMstiForcePortState=jnxMIMstMstiForcePortState, jnxMIMstMstiPortEffectivePortState=jnxMIMstMstiPortEffectivePortState, jnxMIMstMstiBridgeEntry=jnxMIMstMstiBridgeEntry, jnxMIMstProtocolMigrationTrap=jnxMIMstProtocolMigrationTrap, jnxMIMstMapVlanIndex=jnxMIMstMapVlanIndex, jnxMIMstCistPortAdminP2P=jnxMIMstCistPortAdminP2P, jnxMIMstTraps=jnxMIMstTraps, BridgeId=BridgeId, jnxMIMstCistPortTxConfigBpduCount=jnxMIMstCistPortTxConfigBpduCount, jnxMIMstMstiTimeSinceTopologyChange=jnxMIMstMstiTimeSinceTopologyChange, jnxMIMstMstiPortRootProtectStateChangeTrap=jnxMIMstMstiPortRootProtectStateChangeTrap, jnxMIMstCistPortTransmitSemState=jnxMIMstCistPortTransmitSemState, jnxMIMstCistPortLoopProtectStateChangeTrap=jnxMIMstCistPortLoopProtectStateChangeTrap, jnxMIMstCistPortPriority=jnxMIMstCistPortPriority, jnxMIMstTxHoldCount=jnxMIMstTxHoldCount, jnxMIMstModuleStatus=jnxMIMstModuleStatus, jnxMIMstCistPortInvalidMstBpduRxCount=jnxMIMstCistPortInvalidMstBpduRxCount, jnxMIMstCistPortRoleTransitionSemState=jnxMIMstCistPortRoleTransitionSemState, jnxMIMstMstiPortState=jnxMIMstMstiPortState, jnxMIMstMstpDownCount=jnxMIMstMstpDownCount, jnxMIMstMstiPortDesignatedRoot=jnxMIMstMstiPortDesignatedRoot, jnxMIMstInstanceUpCount=jnxMIMstInstanceUpCount, jnxMIMstMstiCurrentPortRole=jnxMIMstMstiCurrentPortRole, jnxMIMstCistRootPort=jnxMIMstCistRootPort, jnxMIMstGenTrapType=jnxMIMstGenTrapType, jnxMIMstMstiPortProtectTable=jnxMIMstMstiPortProtectTable, jnxMIMstInstanceVlanMapped4k=jnxMIMstInstanceVlanMapped4k, jnxMIMstMstiPortStateTransitionSemState=jnxMIMstMstiPortStateTransitionSemState, jnxMIMstCistPortTopologyChangeSemState=jnxMIMstCistPortTopologyChangeSemState, jnxMIMstVlanInstanceMappingTable=jnxMIMstVlanInstanceMappingTable, jnxMIMstCistBridgeForwardDelay=jnxMIMstCistBridgeForwardDelay, jnxMIMstCistCurrentPortRole=jnxMIMstCistCurrentPortRole, jnxMIMstCistRegionalRootCost=jnxMIMstCistRegionalRootCost, jnxMIMstCistMaxAge=jnxMIMstCistMaxAge, jnxMIMstMstiPort=jnxMIMstMstiPort, jnxMIMstInstanceVlanMapped2k=jnxMIMstInstanceVlanMapped2k, jnxMIMstMstiPortDesignatedBridge=jnxMIMstMstiPortDesignatedBridge, jnxMIMstCistPortRootProtectEnabled=jnxMIMstCistPortRootProtectEnabled, jnxMIMstCistPortEntry=jnxMIMstCistPortEntry, jnxMIMstSetTraps=jnxMIMstSetTraps, jnxMIMstCistPortTxMstBpduCount=jnxMIMstCistPortTxMstBpduCount, jnxMIMstBrgAddress=jnxMIMstBrgAddress, jnxMIMstCistPortEffectivePortState=jnxMIMstCistPortEffectivePortState, jnxMIMstTrace=jnxMIMstTrace, jnxMIMstMstiPortRoleTransitionSemState=jnxMIMstMstiPortRoleTransitionSemState, jnxMIMstInstanceVlanMapped=jnxMIMstInstanceVlanMapped, jnxMIMstMstiRegionName=jnxMIMstMstiRegionName, jnxMIMstCistTimeSinceTopologyChange=jnxMIMstCistTimeSinceTopologyChange, jnxMIMstCistPortDesignatedRoot=jnxMIMstCistPortDesignatedRoot, jnxMIMstMstiPortTransmittedBPDUs=jnxMIMstMstiPortTransmittedBPDUs, jnxMIMstResetVlanList=jnxMIMstResetVlanList, jnxMIMstCistRoot=jnxMIMstCistRoot, jnxMIMstGlobalTrace=jnxMIMstGlobalTrace, jnxMIMstMstiPortForwardTransitions=jnxMIMstMstiPortForwardTransitions, jnxMIMstPortTrapNotificationTable=jnxMIMstPortTrapNotificationTable, jnxMIMstGenTrap=jnxMIMstGenTrap, jnxMIMstCistPortOperVersion=jnxMIMstCistPortOperVersion, jnxMIMstMstiPortTopologyChangeSemState=jnxMIMstMstiPortTopologyChangeSemState, jnxMIMstMstiPortRootProtectState=jnxMIMstMstiPortRootProtectState, jnxMIMstCistPortTxRstBpduCount=jnxMIMstCistPortTxRstBpduCount, jnxMIMstMstiBridgeTable=jnxMIMstMstiBridgeTable, jnxMIDot1sJuniperMstContextId=jnxMIDot1sJuniperMstContextId, jnxMIDot1sJnxMstTrapsControl=jnxMIDot1sJnxMstTrapsControl, jnxMIMstInstanceIndex=jnxMIMstInstanceIndex, jnxMIMstNewRootTrap=jnxMIMstNewRootTrap, jnxMIMstCistPortLoopProtectEnabled=jnxMIMstCistPortLoopProtectEnabled, jnxMIMstCistForcePortState=jnxMIMstCistForcePortState, jnxMIMstPathCostDefaultType=jnxMIMstPathCostDefaultType, jnxMIMstPortTrapIndex=jnxMIMstPortTrapIndex, jnxMIMstMIB=jnxMIMstMIB, jnxMIMstCistPortDesignatedBridge=jnxMIMstCistPortDesignatedBridge, jnxMIMstMstiNewRootBridgeCount=jnxMIMstMstiNewRootBridgeCount, VlanId=VlanId, jnxMIMstMstiTopChanges=jnxMIMstMstiTopChanges, jnxMIMstCistBridgeMaxAge=jnxMIMstCistBridgeMaxAge, jnxMIMstInstanceDownCount=jnxMIMstInstanceDownCount, jnxMIMstMstiPortEntry=jnxMIMstMstiPortEntry, jnxMIMstGlobalErrTrapType=jnxMIMstGlobalErrTrapType, jnxMIMstCistBridgeHelloTime=jnxMIMstCistBridgeHelloTime, jnxMIMstCistPortInvalidTcnBpduRxCount=jnxMIMstCistPortInvalidTcnBpduRxCount, jnxMIMstCistPortRxConfigBpduCount=jnxMIMstCistPortRxConfigBpduCount, jnxMIMstCistPortAdminEdgeStatus=jnxMIMstCistPortAdminEdgeStatus, jnxMIMstGlobalDebug=jnxMIMstGlobalDebug, jnxMIMstCistPortLoopProtectState=jnxMIMstCistPortLoopProtectState, jnxMIMstCistPortAutoEdgeStatus=jnxMIMstCistPortAutoEdgeStatus, jnxMIMstMstiPortProtectEntry=jnxMIMstMstiPortProtectEntry, jnxMIDot1sJnxMstSetGlobalTrapOption=jnxMIDot1sJnxMstSetGlobalTrapOption, jnxMIMstTopologyChgTrap=jnxMIMstTopologyChgTrap, jnxMIMstMstiPortDesignatedPort=jnxMIMstMstiPortDesignatedPort, jnxMIMstCistSelectedPortRole=jnxMIMstCistSelectedPortRole, jnxMIDot1sJnxMstTrapsControlEntry=jnxMIDot1sJnxMstTrapsControlEntry, jnxMIDot1sJnxMstTrapsControlTable=jnxMIDot1sJnxMstTrapsControlTable, jnxMIDot1sJuniperMstTraps=jnxMIDot1sJuniperMstTraps, jnxMIMstCistPortRegionalPathCost=jnxMIMstCistPortRegionalPathCost, jnxMIMstMstpUpCount=jnxMIMstMstpUpCount, jnxMIMstVlanInstanceMappingEntry=jnxMIMstVlanInstanceMappingEntry, jnxMIMstBufferOverFlowCount=jnxMIMstBufferOverFlowCount, jnxMIMstCistProtocolMigrationCount=jnxMIMstCistProtocolMigrationCount, jnxMIMstCistPortTable=jnxMIMstCistPortTable, jnxMIMstCistTopChanges=jnxMIMstCistTopChanges, jnxMIMstUnMapVlanIndex=jnxMIMstUnMapVlanIndex, EnabledStatus=EnabledStatus, jnxMIMstCistPortDesignatedPort=jnxMIMstCistPortDesignatedPort, jnxMIMstMaxMstInstanceNumber=jnxMIMstMaxMstInstanceNumber, jnxMIMstCistBridgeRoleSelectionSemState=jnxMIMstCistBridgeRoleSelectionSemState, jnxMIMstOldDesignatedRoot=jnxMIMstOldDesignatedRoot, jnxMIMstPktErrType=jnxMIMstPktErrType, jnxMIMstCistNewRootBridgeCount=jnxMIMstCistNewRootBridgeCount, jnxMIMstCistPortTxTcnBpduCount=jnxMIMstCistPortTxTcnBpduCount, jnxMIMstCistRegionalRoot=jnxMIMstCistRegionalRoot, jnxMIMstMstiPortDesignatedCost=jnxMIMstMstiPortDesignatedCost, jnxMIMstMstiRootPort=jnxMIMstMstiRootPort, jnxMIMstCistPortState=jnxMIMstCistPortState, jnxMIMstCistRootCost=jnxMIMstCistRootCost, jnxMIMstPortMigrationType=jnxMIMstPortMigrationType, jnxMIMstCistPortProtectEntry=jnxMIMstCistPortProtectEntry, jnxMIMstCistPort=jnxMIMstCistPort, jnxMIMstMstiPortInfoSemState=jnxMIMstMstiPortInfoSemState, jnxMIMstCistPortHelloTime=jnxMIMstCistPortHelloTime, jnxMIMstMstiConfigIdSel=jnxMIMstMstiConfigIdSel, jnxMIMstCistPortProtMigrationSemState=jnxMIMstCistPortProtMigrationSemState, jnxMIMstCistPortRegionalRoot=jnxMIMstCistPortRegionalRoot, jnxMIMstCistPortPathCost=jnxMIMstCistPortPathCost, jnxMIMstInvalidBpduRxdTrap=jnxMIMstInvalidBpduRxdTrap, jnxMIMstCistPortRootProtectState=jnxMIMstCistPortRootProtectState, jnxMIDot1sJuniperMstEntry=jnxMIDot1sJuniperMstEntry, jnxMIMstCistPortInfoSemState=jnxMIMstCistPortInfoSemState, jnxMIMstCistPortInvalidRstBpduRxCount=jnxMIMstCistPortInvalidRstBpduRxCount, jnxMIMstMstiPortLoopProtectStateChangeTrap=jnxMIMstMstiPortLoopProtectStateChangeTrap, jnxMIMstCistPortRxRstBpduCount=jnxMIMstCistPortRxRstBpduCount, jnxMIMstMstiPortLoopProtectState=jnxMIMstMstiPortLoopProtectState, jnxMIMstErrTrap=jnxMIMstErrTrap, jnxMIMstCistPortProtectTable=jnxMIMstCistPortProtectTable, jnxMIMstDebug=jnxMIMstDebug, jnxMIMstCistPortDesignatedCost=jnxMIMstCistPortDesignatedCost)
