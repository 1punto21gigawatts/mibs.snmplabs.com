#
# PySNMP MIB module GSWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GSWITCH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:20:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, Integer32, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, ModuleIdentity, iso, Bits, Counter64, ObjectIdentity, NotificationType, Gauge32, MibIdentifier, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "Integer32", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "ModuleIdentity", "iso", "Bits", "Counter64", "ObjectIdentity", "NotificationType", "Gauge32", "MibIdentifier", "Unsigned32", "IpAddress")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
nbase = MibIdentifier((1, 3, 6, 1, 4, 1, 629))
gswitch = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2))
nbsDevIdentify = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 2))
nbsDeviceControl = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 3))
nbsPortsControl = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 5))
nbsPortsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 6))
nbsPortsCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 7))
nbsAddressTable = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 8))
nbsSlotsTable = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 9))
nbsPALPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 629, 2, 12))
nbsNPorts = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsNPorts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsNPorts.setDescription('The number of ports in this device')
nbsNMacRecords = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsNMacRecords.setStatus('mandatory')
if mibBuilder.loadTexts: nbsNMacRecords.setDescription('The number of Records (addresses) in the MAC table')
nbsMacFirstGap = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsMacFirstGap.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMacFirstGap.setDescription('The index of the first gap (empty record) in the MAC table')
nbsUpLinkType = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notExist", 1), ("fast2Ethernet100BaseTX", 2), ("fast2Ethernet100BaseTxFx", 3), ("fast2Ethernet100BaseFX", 4), ("atm", 5), ("fast8Ethernet100BaseTX", 6), ("fast8Ethernet10or100BaseTX", 7), ("fast5Ethernet100BaseTX", 8), ("fast5Ethernet100BaseFX", 9), ("fast8Ethernet100BaseTP", 10), ("fast4Ethernet100BaseFO", 11), ("ISDN", 12), ("VPN", 13), ("fast1Ethernet1000BaseGE", 14), ("FDDI", 15), ("fast2Ethernet1000BaseGE", 16)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsUpLinkType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsUpLinkType.setDescription('Up-Link Type of the device')
nbsBaseHardVers = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsBaseHardVers.setStatus('mandatory')
if mibBuilder.loadTexts: nbsBaseHardVers.setDescription('Hardware version of base card')
nbsCardHardVers = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCardHardVers.setStatus('mandatory')
if mibBuilder.loadTexts: nbsCardHardVers.setDescription('Hardware version of the agent card')
nbsUpLinkHardVers = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsUpLinkHardVers.setStatus('mandatory')
if mibBuilder.loadTexts: nbsUpLinkHardVers.setDescription('Up-Link hardware version')
nbsSoftVers = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSoftVers.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSoftVers.setDescription('Agent software version')
nbsSnifferPort = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsSnifferPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSnifferPort.setDescription('Sniffer Port Number. Specify the Sniffer Port Number chosen by the user')
nbsCreatinDate = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 2, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCreatinDate.setStatus('mandatory')
if mibBuilder.loadTexts: nbsCreatinDate.setDescription('Agent software creation date and time')
nbsSpanningTree = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsSpanningTree.setStatus('mandatory')
if mibBuilder.loadTexts: nbsSpanningTree.setDescription('Spanning Tree Enable. 1 - The BPDU(Bridge Protocol Data Unit) packets are treated as Multicast Packets, and therefore are forwarded to all ports. 2 - Forwards BPDU(Bridge Protocol Data Unit) packets to the CPU only.')
nbsLearningProcess = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsLearningProcess.setStatus('mandatory')
if mibBuilder.loadTexts: nbsLearningProcess.setDescription('Disable Learning Process. 1 - Learning Process is disabled. The Switch-G will not learn any new addresses from the wire. 2 - Learning Process is enabled')
nbsParitionEnable = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsParitionEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsParitionEnable.setDescription('Partition Mode Enable. When more then 32 collisions occur while transmitting, the Switch-G port enters to the Partition mode. It waits for the first good packet from the wire and then return to Normal mode of opration. In Partition mode transmitting fromthe port is enabled but receiving is disabled. 1 - Patrition mode, 2 - Normal mode')
nbsRMONmode = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsRMONmode.setStatus('mandatory')
if mibBuilder.loadTexts: nbsRMONmode.setDescription('RMON Enable. 1 - The Switch-G enters the RMON mode(Station-to-Station connectivity Matrix). 2 - RMON disabled')
nbsBufferThreshold = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("limited", 1), ("not-limited", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsBufferThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: nbsBufferThreshold.setDescription('Buffer Threshold Enable. Meaningful only when RMONEn bit (internal) is set. 1 - The buffers allocated to the ports are limited to the number which is written in the Rx Buffers Threshold Register. 2 - There is no limitation on the buffers allocation')
nbsForwardMulticast = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsForwardMulticast.setStatus('mandatory')
if mibBuilder.loadTexts: nbsForwardMulticast.setDescription('Forward Multicast. Enable - multicast packets are Forwarded only to the CPU. Disable - multicast packets are being forward to all ports')
nbsForwardUnkPkts = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsForwardUnkPkts.setStatus('mandatory')
if mibBuilder.loadTexts: nbsForwardUnkPkts.setDescription('Forward Unknown Packets. If defines whether the Switch-G will forward Unknown packets to the Agent CPU or not. 1 - Forwared, 2 - Do not forwared')
nbsBackOffMode = MibScalar((1, 3, 6, 1, 4, 1, 629, 2, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("aggressive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsBackOffMode.setStatus('mandatory')
if mibBuilder.loadTexts: nbsBackOffMode.setDescription('The CSMA/CD normal Back of mode multiples the back-off time frame after each each collision. In aggressive mode it stops to multiply after the second time. This way it will have an advantage of any other NIC who uses normal back-off mode.')
nbsPortsContTable = MibTable((1, 3, 6, 1, 4, 1, 629, 2, 5, 1), )
if mibBuilder.loadTexts: nbsPortsContTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortsContTable.setDescription('A list of the port counters entries')
nbsPortsContEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1), ).setIndexNames((0, "GSWITCH-MIB", "nbsPortIndex1"))
if mibBuilder.loadTexts: nbsPortsContEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortsContEntry.setDescription('Contains the information necessary to configure/describe a port configuration. The number of rows/entries is fixed. A row/entry may not be created or deleted')
nbsPortIndex1 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortIndex1.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortIndex1.setDescription('The port# from 1 to nbsNPorts1')
nbsPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortEnable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortEnable.setDescription('Port Enable. 1 - Port is enabled 2 - Port is disabled')
nbsPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("half", 1), ("full", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortDuplex.setDescription('Half/Full Duplex. 1 - Port works in Half-Duplex mode 2 - Port works in Full-Duplex mode')
nbsPortMonitor = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("sniffer", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortMonitor.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortMonitor.setDescription('Monitoring Mode. 1 - Port works in normal mode 2 - Port is set as Sniffer port (monitor mode) were all recived and transmit packats from all ports are sent to the Sniffer port')
nbsPortPolDetection = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disabel", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortPolDetection.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortPolDetection.setDescription('Auto-Polarity Disable. Enable/Disable Auto-Polarity detection function 1 - Disable 2 - Enable')
nbsPortBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortBroadcast.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortBroadcast.setDescription('Filter Broadcast. 1 - Broadcast packats are forwarded to all ports. 2 - The Switch-G discards Broadcast packats')
nbsPortForwardUnk = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("forward", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortForwardUnk.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortForwardUnk.setDescription('Forward Unknown. 1 - Unknown packats are forwarded. 2 - The Switch-G does not forward unknown packats to this port')
nbsPortSpaning = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("accept", 1), ("discard", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortSpaning.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortSpaning.setDescription('Spaning Tree Enable. Meaniningful only when Spaning Tree for the switch is set (nbsSpanningTree) is set. 1 - All packets are accepted. 2 - The Switch-G discards all incoming/outgoing packets except for BPDU packets')
nbsPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 5, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("s10MBps", 2), ("s100MBps", 3), ("s1000MBps", 4), ("s10000MBps", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortSpeed.setDescription('Ports Speed. Meaningfull only for ports that support both 10 and 100 MBps speeds. 1 - Only for Uplink Ports: Switch-G - Ports ## 27,28 Switch-G - Ports ## 17,18 2 - After reset the port will operate in 10 MBps 3 - After reset the port will operate in 100 Mbps 4 - The port will operate in 1000 Mbps 5 - The port will operate in 10000 MBps (for example, XFP).')
nbsPortsStatTable = MibTable((1, 3, 6, 1, 4, 1, 629, 2, 6, 1), )
if mibBuilder.loadTexts: nbsPortsStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortsStatTable.setDescription('A list of all the port status objects')
nbsPortsStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 2, 6, 1, 1), ).setIndexNames((0, "GSWITCH-MIB", "nbsPortIndex"))
if mibBuilder.loadTexts: nbsPortsStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortsStatEntry.setDescription('The ports status information. port configuration. The number of rows/entries is fixed. A row/entry may not be created or deleted')
nbsPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortIndex.setDescription('The port# from 1 to nbsNPorts1')
nbsPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("empty", 1), ("normal", 2), ("fastCopper", 3), ("fastFiber", 4), ("slowFiber", 5), ("gigaCopper", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortType.setDescription('Port Type')
nbsPartition = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPartition.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPartition.setDescription('Ports Partition. Indicates the ports Partition status. 1 - No Partition (Normal mode) 2 - Partition')
nbsLinkTest = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 6, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("pass", 1), ("fail", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsLinkTest.setStatus('mandatory')
if mibBuilder.loadTexts: nbsLinkTest.setDescription('Ports Link Test Fail. Indicates the ports Link Test status 1 - Link Test Pass 2 - Link Test Fail')
nbsPortsCountTable = MibTable((1, 3, 6, 1, 4, 1, 629, 2, 7, 1), )
if mibBuilder.loadTexts: nbsPortsCountTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortsCountTable.setDescription('A list of the port counters entries')
nbsPortsCountEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1), ).setIndexNames((0, "GSWITCH-MIB", "nbsPortIndex2"))
if mibBuilder.loadTexts: nbsPortsCountEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortsCountEntry.setDescription('Contains the information necessary to configure/describe a port configuration. The number of rows/entries is fixed. A row/entry may not be created or deleted')
nbsPortIndex2 = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortIndex2.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortIndex2.setDescription('The port# from 1 to nbsNPorts1')
nbsPortByteRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortByteRec.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortByteRec.setDescription('Good Bytes Recived')
nbsPortMulByteRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortMulByteRec.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortMulByteRec.setDescription('Good Multicast Bytes Recived')
nbsPortBroadByteRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortBroadByteRec.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortBroadByteRec.setDescription('Good Broadcast Bytes Recived')
nbsPortByteSent = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortByteSent.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortByteSent.setDescription('Good Bytes Sent')
nbsPortFramesRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortFramesRec.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortFramesRec.setDescription('Good Frames Recived')
nbsPortMulFramesRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortMulFramesRec.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortMulFramesRec.setDescription('Good Multicast Frames Recived')
nbsPortBroadFramesRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortBroadFramesRec.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortBroadFramesRec.setDescription('Broadcast Frames Recived')
nbsPortFramesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortFramesSent.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortFramesSent.setDescription('Frames Sent')
nbsPortCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortCollisions.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCollisions.setDescription('Recive and Transmit Collision')
nbsPortLateColl = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortLateColl.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortLateColl.setDescription('Recive and Transmit Late Collision')
nbsPortCRCAligErr = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortCRCAligErr.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortCRCAligErr.setDescription('Recive CRC or Alignment Error')
nbsPortFramesShort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortFramesShort.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortFramesShort.setDescription('Recive Frames')
nbsPortFrameLong = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortFrameLong.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortFrameLong.setDescription('Recive Frames > 1518 bytes with Good CRC')
nbsPortJabber = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortJabber.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortJabber.setDescription('Recive Frames > 1518 bytes with Bad CRC')
nbsPortBadByteRec = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 7, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPortBadByteRec.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPortBadByteRec.setDescription('Bad Bytes Recived. Bytes with CRC errors and frame too long')
nbsMACAddrTable = MibTable((1, 3, 6, 1, 4, 1, 629, 2, 8, 1), )
if mibBuilder.loadTexts: nbsMACAddrTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMACAddrTable.setDescription('The DRAM address table contains all the MAC addresses up to 8K records.')
nbsMACAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 2, 8, 1, 1), ).setIndexNames((0, "GSWITCH-MIB", "nbsAddrIndex"))
if mibBuilder.loadTexts: nbsMACAddrEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMACAddrEntry.setDescription('The entries (records)')
nbsAddrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 8, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsAddrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsAddrIndex.setDescription('An index from 1 to 8K. * (number of devices+1)')
nbsMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 8, 1, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsMACAddress.setStatus('mandatory')
if mibBuilder.loadTexts: nbsMACAddress.setDescription('The MAC Address where the packet came from')
nbsAddrPort = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 8, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsAddrPort.setStatus('mandatory')
if mibBuilder.loadTexts: nbsAddrPort.setDescription('The source port in this device')
nbsAddrStatic = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsAddrStatic.setStatus('mandatory')
if mibBuilder.loadTexts: nbsAddrStatic.setDescription('Static indecation bit in the MAC Address entry')
nbsAddrForwardTo = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("destination-port", 1), ("all-ports", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nbsAddrForwardTo.setStatus('mandatory')
if mibBuilder.loadTexts: nbsAddrForwardTo.setDescription('This indicates whether to forward frames destined to this MAC address to all ports or only to the destination port')
nbsCardsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 2, 9, 1), )
if mibBuilder.loadTexts: nbsCardsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsCardsTable.setDescription("define the Cards' Types (for NH5500 and other GSWITCH HUBS..).")
nbsCardsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 2, 9, 1, 1), ).setIndexNames((0, "GSWITCH-MIB", "nbsAddrIndex"))
if mibBuilder.loadTexts: nbsCardsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsCardsEntry.setDescription('The entries (records)')
nbsCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCardIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsCardIndex.setDescription('The slot#. An index from 1 to The number of slots.')
nbsCardType = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 9, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("emptySlot", 1), ("copper20Ethernet10or100Base", 2), ("copper40Ethernet10Base", 3), ("powerSupplyError", 4), ("powerSupplyOK", 5), ("fibre10Ethernet100Base", 6), ("fansUnitError", 7), ("fansUnitOK", 8), ("universal", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsCardType.setStatus('mandatory')
if mibBuilder.loadTexts: nbsCardType.setDescription("The Card's type: copper20Ethernet10or100Base (2) - Slot including 20 fast copper 10/100 MBps Ports; copper40Ethernet10Base (3) - Slot including 40 normal copper 10 MBps Ports; fibre10Ethernet100Base (6) - Slot including 10 fast fibre optic 100 MBps Ports; universal (9) - Slot including Uplink Modules of the different types;")
nbsPALPortsTable = MibTable((1, 3, 6, 1, 4, 1, 629, 2, 12, 1), )
if mibBuilder.loadTexts: nbsPALPortsTable.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPALPortsTable.setDescription('Table contain data only for the existing PAL modules ports.')
nbsPALPortsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 629, 2, 12, 1, 1), ).setIndexNames((0, "GSWITCH-MIB", "nbsPALPortIndex"))
if mibBuilder.loadTexts: nbsPALPortsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPALPortsEntry.setDescription('The PAL Optic Power Ports status.')
nbsPALPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 12, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPALPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPALPortIndex.setDescription('The number of the real existing PAL port. (the same as [ifIndex] in the MIB-II).')
nbsPALPortOpticPower = MibTableColumn((1, 3, 6, 1, 4, 1, 629, 2, 12, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nbsPALPortOpticPower.setStatus('mandatory')
if mibBuilder.loadTexts: nbsPALPortOpticPower.setDescription('PAL Port Optic Power status. (interval: 0 - 15)')
mibBuilder.exportSymbols("GSWITCH-MIB", nbsSlotsTable=nbsSlotsTable, nbsPortMulFramesRec=nbsPortMulFramesRec, nbsPortSpeed=nbsPortSpeed, nbsForwardMulticast=nbsForwardMulticast, nbsPortMonitor=nbsPortMonitor, nbsCardsEntry=nbsCardsEntry, nbsDevIdentify=nbsDevIdentify, nbsBufferThreshold=nbsBufferThreshold, nbsUpLinkType=nbsUpLinkType, nbsAddrPort=nbsAddrPort, nbsPortsContEntry=nbsPortsContEntry, nbsDeviceControl=nbsDeviceControl, nbsPortDuplex=nbsPortDuplex, nbsPortType=nbsPortType, nbsPALPorts=nbsPALPorts, nbsPortPolDetection=nbsPortPolDetection, nbsAddressTable=nbsAddressTable, nbsCreatinDate=nbsCreatinDate, nbsPortLateColl=nbsPortLateColl, nbsPortsStatTable=nbsPortsStatTable, nbsAddrStatic=nbsAddrStatic, nbsUpLinkHardVers=nbsUpLinkHardVers, nbsSnifferPort=nbsSnifferPort, nbsPortJabber=nbsPortJabber, nbsPortCollisions=nbsPortCollisions, nbsPortsControl=nbsPortsControl, nbsPortIndex1=nbsPortIndex1, nbsNMacRecords=nbsNMacRecords, nbsPortsCounters=nbsPortsCounters, nbsPortsContTable=nbsPortsContTable, nbsPortIndex=nbsPortIndex, nbsBackOffMode=nbsBackOffMode, nbsLinkTest=nbsLinkTest, nbsPortFrameLong=nbsPortFrameLong, nbsPALPortsTable=nbsPALPortsTable, nbsCardIndex=nbsCardIndex, nbsPortsCountTable=nbsPortsCountTable, nbsLearningProcess=nbsLearningProcess, nbsCardHardVers=nbsCardHardVers, nbsPortBroadFramesRec=nbsPortBroadFramesRec, nbsPortsStatEntry=nbsPortsStatEntry, nbsPortBroadByteRec=nbsPortBroadByteRec, nbsRMONmode=nbsRMONmode, nbsBaseHardVers=nbsBaseHardVers, nbsPortFramesRec=nbsPortFramesRec, nbsNPorts=nbsNPorts, nbsSpanningTree=nbsSpanningTree, nbsCardsTable=nbsCardsTable, gswitch=gswitch, nbsPALPortsEntry=nbsPALPortsEntry, nbsPortForwardUnk=nbsPortForwardUnk, nbsSoftVers=nbsSoftVers, nbsPortFramesShort=nbsPortFramesShort, nbsMACAddrEntry=nbsMACAddrEntry, nbsAddrIndex=nbsAddrIndex, nbsPortBadByteRec=nbsPortBadByteRec, nbsMACAddress=nbsMACAddress, nbsPortSpaning=nbsPortSpaning, nbsPortIndex2=nbsPortIndex2, nbsMacFirstGap=nbsMacFirstGap, nbsPALPortIndex=nbsPALPortIndex, nbsPortByteRec=nbsPortByteRec, nbsParitionEnable=nbsParitionEnable, nbsMACAddrTable=nbsMACAddrTable, nbsPortMulByteRec=nbsPortMulByteRec, nbsPortFramesSent=nbsPortFramesSent, nbsAddrForwardTo=nbsAddrForwardTo, nbsPartition=nbsPartition, nbsPortEnable=nbsPortEnable, nbsPortBroadcast=nbsPortBroadcast, nbsPALPortOpticPower=nbsPALPortOpticPower, nbsPortsCountEntry=nbsPortsCountEntry, nbsPortsStatus=nbsPortsStatus, nbsPortCRCAligErr=nbsPortCRCAligErr, nbsCardType=nbsCardType, nbsPortByteSent=nbsPortByteSent, nbase=nbase, nbsForwardUnkPkts=nbsForwardUnkPkts)
