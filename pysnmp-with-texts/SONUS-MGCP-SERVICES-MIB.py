#
# PySNMP MIB module SONUS-MGCP-SERVICES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SONUS-MGCP-SERVICES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:09:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Counter32, ObjectIdentity, Counter64, Gauge32, NotificationType, ModuleIdentity, TimeTicks, MibIdentifier, IpAddress, Unsigned32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Counter32", "ObjectIdentity", "Counter64", "Gauge32", "NotificationType", "ModuleIdentity", "TimeTicks", "MibIdentifier", "IpAddress", "Unsigned32", "Bits")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
sonusEventDescription, sonusEventLevel, sonusEventClass = mibBuilder.importSymbols("SONUS-COMMON-MIB", "sonusEventDescription", "sonusEventLevel", "sonusEventClass")
sonusServicesMIBs, = mibBuilder.importSymbols("SONUS-SMI", "sonusServicesMIBs")
SonusName, SonusSlotIndex, SonusAdminState, SonusNameReference, SonusShelfIndex, SonusServiceState, SonusBoolean = mibBuilder.importSymbols("SONUS-TC", "SonusName", "SonusSlotIndex", "SonusAdminState", "SonusNameReference", "SonusShelfIndex", "SonusServiceState", "SonusBoolean")
sonusMgcpServicesMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12))
if mibBuilder.loadTexts: sonusMgcpServicesMIB.setLastUpdated('200107310000Z')
if mibBuilder.loadTexts: sonusMgcpServicesMIB.setOrganization('Sonus Networks, Inc.')
if mibBuilder.loadTexts: sonusMgcpServicesMIB.setContactInfo(' Customer Support Sonus Networks, Inc, 5 carlisle Road Westford, MA 01886 USA Tel: 978-692-8999 Fax: 978-392-9118 E-mail: cs.snmp@sonusnet.com')
if mibBuilder.loadTexts: sonusMgcpServicesMIB.setDescription('The MIB Module for MGCP Services Management.')
sonusMgcpServicesMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1))
sonusMgcpGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 1))
sonusMgcpGatewayPort = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(2427)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpGatewayPort.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpGatewayPort.setDescription('Specifies local MGCP listen port.')
sonusMgcpGatewayRxThrottle = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpGatewayRxThrottle.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpGatewayRxThrottle.setDescription('Receive flow control threshold. Sets maximum limit on number of concurrent outstanding MGCP commands which have not been responded to. The value 0 disables flow control.')
sonusMgcpGatewayMaxReXmit = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpGatewayMaxReXmit.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpGatewayMaxReXmit.setDescription('Maximum consecutive re-transmissions of one MGCP command.')
sonusMgcpGatewayCmdTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpGatewayCmdTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpGatewayCmdTimeout.setDescription('MGCP command re-transmission timeout in Msec')
sonusMgcpGatewayRspTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpGatewayRspTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpGatewayRspTimeout.setDescription('Response cache purge timeout interval in Msec')
sonusMgcpGatewayCriticalTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 60000)).clone(16000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpGatewayCriticalTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpGatewayCriticalTimeout.setDescription('DTMF Interdigit timer-Critical in Msec')
sonusMgcpGatewayPartialTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 60000)).clone(4000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpGatewayPartialTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpGatewayPartialTimeout.setDescription('DTMF Interdigit timer-Partial in Msec')
sonusMgcpGatewayMsgPiggyBacking = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 1, 8), SonusBoolean().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpGatewayMsgPiggyBacking.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpGatewayMsgPiggyBacking.setDescription('Switches the piggy backing of messages between the gw and the CA')
sonusMgcpSession = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 2))
sonusMgcpSessionNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionNextIndex.setDescription('The next valid index to use when creating a new sonusMgcpSessionEntry')
sonusMgcpSessionTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 2, 2), )
if mibBuilder.loadTexts: sonusMgcpSessionTable.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionTable.setDescription('This table specifies the MGCP Session list for the GSX node.')
sonusMgcpSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 2, 2, 1), ).setIndexNames((0, "SONUS-MGCP-SERVICES-MIB", "sonusMgcpSessionIndex"))
if mibBuilder.loadTexts: sonusMgcpSessionEntry.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionEntry.setDescription('')
sonusMgcpSessionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionIndex.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionIndex.setDescription('Identifies the target MGCP Session entry.')
sonusMgcpSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 2, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpSessionName.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionName.setDescription('The name of this MGCP Session instance.')
sonusMgcpSessionMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 2, 2, 1, 3), SonusServiceState().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpSessionMode.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionMode.setDescription('Specifies the operating mode of this MGCP Session.')
sonusMgcpSessionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 2, 2, 1, 4), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpSessionState.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionState.setDescription('The administrative state of this MGCP Session entry.')
sonusMgcpSessionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 2, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpSessionRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionRowStatus.setDescription('')
sonusMgcpSessionServProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 2, 2, 1, 6), SonusNameReference().clone('default')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpSessionServProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionServProfileName.setDescription('The name of the service profile this MGCP Session is bound to.')
sonusMgcpCallAgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 3))
sonusMgcpCallAgntNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpCallAgntNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntNextIndex.setDescription('The next valid index to use when creating a new sonusMgcpCallAgntEntry')
sonusMgcpCallAgntTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 3, 2), )
if mibBuilder.loadTexts: sonusMgcpCallAgntTable.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntTable.setDescription('This table specifies the MGCP Call Agent list for the GSX node.')
sonusMgcpCallAgntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 3, 2, 1), ).setIndexNames((0, "SONUS-MGCP-SERVICES-MIB", "sonusMgcpCallAgntIndex"))
if mibBuilder.loadTexts: sonusMgcpCallAgntEntry.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntEntry.setDescription('')
sonusMgcpCallAgntIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpCallAgntIndex.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntIndex.setDescription('Identifies the target MGCP Call Agent entry.')
sonusMgcpCallAgntName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 3, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpCallAgntName.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntName.setDescription('The name of this MGCP Call Agent instance.')
sonusMgcpCallAgntState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 3, 2, 1, 4), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpCallAgntState.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntState.setDescription('The administrative state of this MGCP Call Agent entry.')
sonusMgcpCallAgntRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 3, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpCallAgntRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntRowStatus.setDescription('')
sonusMgcpCallAgntSessionName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 3, 2, 1, 6), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpCallAgntSessionName.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntSessionName.setDescription('The name of the MGCP Session this Call Agent is bound to.')
sonusMgcpCallAgntDefNotEnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 3, 2, 1, 7), SonusBoolean().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpCallAgntDefNotEnt.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntDefNotEnt.setDescription('Designates this Call Agent as the default notified entity.')
sonusMgcpConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 4), )
if mibBuilder.loadTexts: sonusMgcpConnectionTable.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpConnectionTable.setDescription('This table specifies the MGCP Connection list for the GSX node.')
sonusMgcpConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 4, 1), ).setIndexNames((0, "SONUS-MGCP-SERVICES-MIB", "sonusMgcpConnectionIpaddr"), (0, "SONUS-MGCP-SERVICES-MIB", "sonusMgcpConnectionPort"))
if mibBuilder.loadTexts: sonusMgcpConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpConnectionEntry.setDescription('')
sonusMgcpConnectionIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 4, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpConnectionIpaddr.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpConnectionIpaddr.setDescription('Specifies the IP Address of the Call Agent connection. This is an allowed address for the named Call Agent.')
sonusMgcpConnectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(2427)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpConnectionPort.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpConnectionPort.setDescription('Specifies the port nummber of the Call Agent connection.')
sonusMgcpConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 4, 1, 3), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpConnectionState.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpConnectionState.setDescription('The administrative state of this MGCP Connection entry.')
sonusMgcpConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 4, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpConnectionRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpConnectionRowStatus.setDescription('')
sonusMgcpConnectionCallAgntName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 4, 1, 5), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpConnectionCallAgntName.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpConnectionCallAgntName.setDescription('The name of the MGCP Call Agent this Connection is bound to.')
sonusMgcpSessionStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5), )
if mibBuilder.loadTexts: sonusMgcpSessionStatusTable.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTable.setDescription('This table specifies the status MGCP Sessions for the GSX node.')
sonusMgcpSessionStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1), ).setIndexNames((0, "SONUS-MGCP-SERVICES-MIB", "sonusMgcpSessionStatusIndex"))
if mibBuilder.loadTexts: sonusMgcpSessionStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusEntry.setDescription('')
sonusMgcpSessionStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusIndex.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusIndex.setDescription('Identifies the target MGCP Session entry. The index used should match the index of the MGCP Session.')
sonusMgcpSessionStatusMajorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusMajorVersion.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusMajorVersion.setDescription('The major version of the MGCP protocol supported by this MGCP Media Gateway.')
sonusMgcpSessionStatusMinorVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusMinorVersion.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusMinorVersion.setDescription('The minor version of the MGCP protocol supported by this MGCP Media Gateway.')
sonusMgcpSessionStatusNumCallAgnts = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusNumCallAgnts.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusNumCallAgnts.setDescription('The number of Call Agents bound to this session.')
sonusMgcpSessionStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusStatus.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusStatus.setDescription('The status of this session. If active this session has a valid MGCP session with an MGCP Mgc.')
sonusMgcpSessionStatusRxMsgTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxMsgTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxMsgTotal.setDescription('Total messages received.')
sonusMgcpSessionStatusTxMsgTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxMsgTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxMsgTotal.setDescription('Total messages transmitted.')
sonusMgcpSessionStatusRxCmdTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxCmdTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxCmdTotal.setDescription('Total command messages received.')
sonusMgcpSessionStatusRxRspTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxRspTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxRspTotal.setDescription('Total response messages received.')
sonusMgcpSessionStatusTxCmdTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxCmdTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxCmdTotal.setDescription('Total command messages transmitted.')
sonusMgcpSessionStatusTxRspTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxRspTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxRspTotal.setDescription('Total response messages transmitted.')
sonusMgcpSessionStatusTxTOTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxTOTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxTOTotal.setDescription('Number of message transmit timeouts.')
sonusMgcpSessionStatusTxAbortTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxAbortTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxAbortTotal.setDescription('Number of message aborts due to transmit timeouts.')
sonusMgcpSessionStatusTxErrTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxErrTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxErrTotal.setDescription('Number of message transmission errors.')
sonusMgcpSessionStatusRxTOTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxTOTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxTOTotal.setDescription('Number of ACK ACK timeouts. Occurs when call agent fails to acknowledge a GW response.')
sonusMgcpSessionStatusRxDupCmdTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxDupCmdTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxDupCmdTotal.setDescription('Number of duplicate commands received.')
sonusMgcpSessionStatusRxDupRspTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxDupRspTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxDupRspTotal.setDescription('Number of duplicate reponses received.')
sonusMgcpSessionStatusRxRspErrTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxRspErrTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxRspErrTotal.setDescription('Number of responses received that did not match an outstanding command.')
sonusMgcpSessionStatusRxRspInPTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxRspInPTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxRspInPTotal.setDescription('Number of provisional responses received.')
sonusMgcpSessionStatusRxUnknownTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxUnknownTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxUnknownTotal.setDescription('Number of messages received which were not understood by the GW.')
sonusMgcpSessionStatusRxOverLenTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxOverLenTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxOverLenTotal.setDescription('Number of messages received that were longer than the GW supports.')
sonusMgcpSessionStatusRxMaxByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxMaxByteCnt.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxMaxByteCnt.setDescription('Largest UDP packet received in bytes.')
sonusMgcpSessionStatusRxMaxPigBCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxMaxPigBCnt.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxMaxPigBCnt.setDescription('Largest number of messages received in a single UDP packet.')
sonusMgcpSessionStatusTxMaxByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxMaxByteCnt.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxMaxByteCnt.setDescription('Largest UDP packet transmitted in bytes.')
sonusMgcpSessionStatusTxMaxPigBCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxMaxPigBCnt.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxMaxPigBCnt.setDescription('Largest number of messages transmitted in a single UDP packet.')
sonusMgcpSessionStatusTxMaxCmdPnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxMaxCmdPnd.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxMaxCmdPnd.setDescription('Largest number of command messages waiting for call agent response.')
sonusMgcpSessionStatusTxMaxRspPnd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxMaxRspPnd.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxMaxRspPnd.setDescription('Largest number of response messages waiting for call agent acknowledgement.')
sonusMgcpSessionStatusRxCmdThrotCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxCmdThrotCnt.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxCmdThrotCnt.setDescription('Number of times GW ignored received messages due to receive throttling.')
sonusMgcpSessionStatusRxErrorTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxErrorTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxErrorTotal.setDescription('Number of received messages with parse errors.')
sonusMgcpSessionStatusTxErrorTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxErrorTotal.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxErrorTotal.setDescription('Number of error indications received by the GW from call agents.')
sonusMgcpSessionStatusRxCRCX = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxCRCX.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxCRCX.setDescription('Number of MGCP Create (CRCX) commands received.')
sonusMgcpSessionStatusRxCRCXL = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxCRCXL.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxCRCXL.setDescription('Number of MGCP Create (CRCX) local connection commands received.')
sonusMgcpSessionStatusRxMDCX = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxMDCX.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxMDCX.setDescription('Number of MGCP Modify (MDCX) commands received.')
sonusMgcpSessionStatusRxDLCX = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxDLCX.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxDLCX.setDescription('Number of MGCP Delete (DLCX) commands received.')
sonusMgcpSessionStatusRxRQNT = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxRQNT.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxRQNT.setDescription('Number of MGCP Request Notify (RQNT) commands received.')
sonusMgcpSessionStatusRxEPCF = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxEPCF.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxEPCF.setDescription('Number of MGCP Endpoint Configuration (EPCF) commands received.')
sonusMgcpSessionStatusRxAUDT = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxAUDT.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusRxAUDT.setDescription('Number of MGCP Audit (AUEP, AUCX) commands received.')
sonusMgcpSessionStatusTxCRCXRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxCRCXRsp.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxCRCXRsp.setDescription('Number of successful creates (CRCX).')
sonusMgcpSessionStatusTxCRCXRspL = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxCRCXRspL.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxCRCXRspL.setDescription('Number of successful local connection creates (CRCX).')
sonusMgcpSessionStatusTxCRCXRspErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxCRCXRspErr.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxCRCXRspErr.setDescription('Number of failed creates (CRCX).')
sonusMgcpSessionStatusTxMDCXRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxMDCXRsp.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxMDCXRsp.setDescription('Number of successful modifes (MDCX).')
sonusMgcpSessionStatusTxMDCXRspErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxMDCXRspErr.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxMDCXRspErr.setDescription('Number of failed modifes (MDCX).')
sonusMgcpSessionStatusTxDLCXRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxDLCXRsp.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxDLCXRsp.setDescription('Number of successful deletes (DLCX).')
sonusMgcpSessionStatusTxDLCXRspErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxDLCXRspErr.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxDLCXRspErr.setDescription('Number of failed deletes (DLCX).')
sonusMgcpSessionStatusTxAUDTRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxAUDTRsp.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxAUDTRsp.setDescription('Number of successful audits (AUEP, AUCX).')
sonusMgcpSessionStatusTxAUDTRspErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxAUDTRspErr.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxAUDTRspErr.setDescription('Number of failed audits (AUEP, AUCX).')
sonusMgcpSessionStatusTxRQNTRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxRQNTRsp.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxRQNTRsp.setDescription('Number of successful request notifies (RQNT).')
sonusMgcpSessionStatusTxRQNTRspErr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxRQNTRspErr.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxRQNTRspErr.setDescription('Number of failed request notifies (RQNT).')
sonusMgcpSessionStatusTxRSIPCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxRSIPCmd.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxRSIPCmd.setDescription('Number of Restart In Progress (RSIP) messages transmitted.')
sonusMgcpSessionStatusTxNTFYCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxNTFYCmd.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxNTFYCmd.setDescription('Number of Notify (NTFY) messages transmitted.')
sonusMgcpSessionStatusTxDLCXCmd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 5, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxDLCXCmd.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionStatusTxDLCXCmd.setDescription('Number of Delete (DLCX) messages transmitted.')
sonusMgcpCallAgntStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 6), )
if mibBuilder.loadTexts: sonusMgcpCallAgntStatusTable.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntStatusTable.setDescription('This table specifies the status of MGCP Mgces for the GSX node.')
sonusMgcpCallAgntStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 6, 1), ).setIndexNames((0, "SONUS-MGCP-SERVICES-MIB", "sonusMgcpCallAgntStatusIndex"))
if mibBuilder.loadTexts: sonusMgcpCallAgntStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntStatusEntry.setDescription('')
sonusMgcpCallAgntStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpCallAgntStatusIndex.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntStatusIndex.setDescription('Identifies the target MGCP Mgc entry.')
sonusMgcpCallAgntStatusNumConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpCallAgntStatusNumConnections.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntStatusNumConnections.setDescription('The number of IP addresses bound to this MGC')
sonusMgcpCallAgntStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpCallAgntStatusStatus.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntStatusStatus.setDescription('The status of this MGC. Active indicates this MGC is actively acting active.')
sonusMgcpServProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 8))
sonusMgcpServProfileNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpServProfileNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpServProfileNextIndex.setDescription('The next valid index to use when creating a new sonusMgcpServProfileEntry')
sonusMgcpServProfileTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 8, 2), )
if mibBuilder.loadTexts: sonusMgcpServProfileTable.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpServProfileTable.setDescription('This table specifies the MGCP Call Service Profile for the GSX node. The service profile provides default values for local connection options not provided by the Call Agent.')
sonusMgcpServProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 8, 2, 1), ).setIndexNames((0, "SONUS-MGCP-SERVICES-MIB", "sonusMgcpServProfileIndex"))
if mibBuilder.loadTexts: sonusMgcpServProfileEntry.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpServProfileEntry.setDescription('')
sonusMgcpServProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusMgcpServProfileIndex.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpServProfileIndex.setDescription('Identifies the target MGCP Call Service Profile entry.')
sonusMgcpServProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 8, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpServProfileName.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpServProfileName.setDescription('The name of this MGCP ServProfile instance.')
sonusMgcpServProfileState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 8, 2, 1, 3), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpServProfileState.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpServProfileState.setDescription('The administrative state of this MGCP ServProfile entry.')
sonusMgcpServProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 8, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpServProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpServProfileRowStatus.setDescription('')
sonusMgcpServProfileEncodeType = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 8, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("g711ulaw", 1), ("g711alaw", 2), ("g723", 3), ("g729", 4))).clone('g711ulaw')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpServProfileEncodeType.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpServProfileEncodeType.setDescription('The default encoding type.')
sonusMgcpServProfilePacketPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 40)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpServProfilePacketPeriod.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpServProfilePacketPeriod.setDescription('The default size of packets, in milliseconds in 5 millisecond increments.')
sonusMgcpServProfileTypeOfService = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 8, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpServProfileTypeOfService.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpServProfileTypeOfService.setDescription('The default Type Of Service setting, an arbitrary one byte value used by network applications.')
sonusMgcpServProfileEchoCancellation = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 8, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("off", 1), ("on", 2), ("useCktProfile", 3))).clone('useCktProfile')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpServProfileEchoCancellation.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpServProfileEchoCancellation.setDescription('The default control of echo cancellation on the PSTN endpoint.')
sonusMgcpServProfileSilenceSuppression = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 8, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("off", 1), ("on", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusMgcpServProfileSilenceSuppression.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpServProfileSilenceSuppression.setDescription('The default control of silence suppression for the RTP audio stream.')
sonusIuaGateway = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 9))
sonusIuaGatewayPort = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 9, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(9900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaGatewayPort.setStatus('current')
if mibBuilder.loadTexts: sonusIuaGatewayPort.setDescription('Specifies local IUA listen port.')
sonusIuaGatewayHbTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 9, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000)).clone(3000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaGatewayHbTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusIuaGatewayHbTimeout.setDescription('ASP heart beat timer in Msec.')
sonusIuaGatewayASPendingTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 9, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaGatewayASPendingTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusIuaGatewayASPendingTimeout.setDescription('Application Server pending timer in Msec.')
sonusIuaGatewayEstRelIndRetry = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 9, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaGatewayEstRelIndRetry.setStatus('current')
if mibBuilder.loadTexts: sonusIuaGatewayEstRelIndRetry.setDescription('Number of Establish/Release Indication retries.')
sonusIuaGatewayEstRelIndTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 9, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaGatewayEstRelIndTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusIuaGatewayEstRelIndTimeout.setDescription('Establish/Release Indication timeout interval in Msec.')
sonusIuaGatewayDataIndTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 9, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5000)).clone(250)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaGatewayDataIndTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusIuaGatewayDataIndTimeout.setDescription('Data Indication timeout interval in Msec.')
sonusIuaGatewayDataIndRetryExp = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 9, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaGatewayDataIndRetryExp.setStatus('current')
if mibBuilder.loadTexts: sonusIuaGatewayDataIndRetryExp.setDescription('Data Indication retry exponent')
sonusIuaGatewayDataIndWindowSize = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 9, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaGatewayDataIndWindowSize.setStatus('current')
if mibBuilder.loadTexts: sonusIuaGatewayDataIndWindowSize.setDescription('Data Indication message window size')
sonusIuaGatewayDataIndMaxTimeout = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 9, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaGatewayDataIndMaxTimeout.setStatus('current')
if mibBuilder.loadTexts: sonusIuaGatewayDataIndMaxTimeout.setDescription('Data Indication maximum number of timeout')
sonusIuaAs = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 10))
sonusIuaAsNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsNextIndex.setDescription('The next valid index to use when creating a new sonusIuaAsEntry')
sonusIuaAsTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 10, 2), )
if mibBuilder.loadTexts: sonusIuaAsTable.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsTable.setDescription('This table specifies the IUA Application Server list for the GSX node.')
sonusIuaAsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 10, 2, 1), ).setIndexNames((0, "SONUS-MGCP-SERVICES-MIB", "sonusIuaAsIndex"))
if mibBuilder.loadTexts: sonusIuaAsEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsEntry.setDescription('')
sonusIuaAsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsIndex.setDescription('Identifies the target IUA Application Server entry.')
sonusIuaAsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 10, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaAsName.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsName.setDescription('The name of this IUA Application Server instance.')
sonusIuaAsMode = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 10, 2, 1, 3), SonusServiceState().clone('inService')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaAsMode.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsMode.setDescription('Specifies the operating mode of this IUA Application Server.')
sonusIuaAsState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 10, 2, 1, 4), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaAsState.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsState.setDescription('The administrative state of this IUA Application Server entry.')
sonusIuaAsRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 10, 2, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaAsRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsRowStatus.setDescription('')
sonusIuaAsp = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 11))
sonusIuaAspNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAspNextIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspNextIndex.setDescription('The next valid index to use when creating a new sonusIuaAspEntry')
sonusIuaAspTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 11, 2), )
if mibBuilder.loadTexts: sonusIuaAspTable.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspTable.setDescription('This table specifies the IUA ASP list for the GSX node.')
sonusIuaAspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 11, 2, 1), ).setIndexNames((0, "SONUS-MGCP-SERVICES-MIB", "sonusIuaAspIndex"))
if mibBuilder.loadTexts: sonusIuaAspEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspEntry.setDescription('')
sonusIuaAspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAspIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspIndex.setDescription('Identifies the target IUA ASP entry.')
sonusIuaAspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 11, 2, 1, 2), SonusName()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaAspName.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspName.setDescription('The name of this IUA ASP instance.')
sonusIuaAspState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 11, 2, 1, 3), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaAspState.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspState.setDescription('The administrative state of this IUA ASP entry.')
sonusIuaAspRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 11, 2, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaAspRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspRowStatus.setDescription('')
sonusIuaConnectionTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 12), )
if mibBuilder.loadTexts: sonusIuaConnectionTable.setStatus('current')
if mibBuilder.loadTexts: sonusIuaConnectionTable.setDescription('This table specifies the IUA Connection list for the GSX node.')
sonusIuaConnectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 12, 1), ).setIndexNames((0, "SONUS-MGCP-SERVICES-MIB", "sonusIuaConnectionIpaddr"), (0, "SONUS-MGCP-SERVICES-MIB", "sonusIuaConnectionPort"))
if mibBuilder.loadTexts: sonusIuaConnectionEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIuaConnectionEntry.setDescription('')
sonusIuaConnectionIpaddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 12, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaConnectionIpaddr.setStatus('current')
if mibBuilder.loadTexts: sonusIuaConnectionIpaddr.setDescription('Specifies the IP Address of the ASP connection. This is an allowed address for the named ASP.')
sonusIuaConnectionPort = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(9900)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaConnectionPort.setStatus('current')
if mibBuilder.loadTexts: sonusIuaConnectionPort.setDescription('Specifies the port nummber of the ASP connection.')
sonusIuaConnectionState = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 12, 1, 3), SonusAdminState().clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaConnectionState.setStatus('current')
if mibBuilder.loadTexts: sonusIuaConnectionState.setDescription('The administrative state of this IUA Connection entry.')
sonusIuaConnectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 12, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaConnectionRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIuaConnectionRowStatus.setDescription('')
sonusIuaConnectionAspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 12, 1, 5), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaConnectionAspName.setStatus('current')
if mibBuilder.loadTexts: sonusIuaConnectionAspName.setDescription('The name of the IUA ASP this Connection is bound to.')
sonusIuaInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 13), )
if mibBuilder.loadTexts: sonusIuaInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: sonusIuaInterfaceTable.setDescription('This table specifies the IUA Interface list for the GSX node.')
sonusIuaInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 13, 1), ).setIndexNames((0, "SONUS-MGCP-SERVICES-MIB", "sonusIuaInterfaceShelf"), (0, "SONUS-MGCP-SERVICES-MIB", "sonusIuaInterfaceSlot"), (0, "SONUS-MGCP-SERVICES-MIB", "sonusIuaInterfacePort"), (0, "SONUS-MGCP-SERVICES-MIB", "sonusIuaInterfaceTimeslot"))
if mibBuilder.loadTexts: sonusIuaInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIuaInterfaceEntry.setDescription('')
sonusIuaInterfaceShelf = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 13, 1, 1), SonusShelfIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaInterfaceShelf.setStatus('current')
if mibBuilder.loadTexts: sonusIuaInterfaceShelf.setDescription('Identifies the target IUA Interface Shelf associated to the Application Server.')
sonusIuaInterfaceSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 13, 1, 2), SonusSlotIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaInterfaceSlot.setStatus('current')
if mibBuilder.loadTexts: sonusIuaInterfaceSlot.setDescription('Identifies the target IUA Interface Slot associated to the Application Server.')
sonusIuaInterfacePort = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaInterfacePort.setStatus('current')
if mibBuilder.loadTexts: sonusIuaInterfacePort.setDescription('Identifies the target IUA Interface Port associated to the Application Server.')
sonusIuaInterfaceTimeslot = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaInterfaceTimeslot.setStatus('current')
if mibBuilder.loadTexts: sonusIuaInterfaceTimeslot.setDescription('Identifies the target IUA Interface Timeslot associated to the Application Server.')
sonusIuaInterfaceRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 13, 1, 5), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaInterfaceRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIuaInterfaceRowStatus.setDescription('')
sonusIuaInterfaceAsName = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 13, 1, 6), SonusNameReference()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaInterfaceAsName.setStatus('current')
if mibBuilder.loadTexts: sonusIuaInterfaceAsName.setDescription('The name of the IUA Application Server this Interface is bound to.')
sonusIuaAsaTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 14), )
if mibBuilder.loadTexts: sonusIuaAsaTable.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsaTable.setDescription('This table specifies the IUA Application Server Association list for the GSX node.')
sonusIuaAsaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 14, 1), ).setIndexNames((0, "SONUS-MGCP-SERVICES-MIB", "sonusIuaAsaAsIndex"), (0, "SONUS-MGCP-SERVICES-MIB", "sonusIuaAsaAspIndex"))
if mibBuilder.loadTexts: sonusIuaAsaEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsaEntry.setDescription('')
sonusIuaAsaAsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsaAsIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsaAsIndex.setDescription('Specifies the Index of Application Server associated to the Application Server Process.')
sonusIuaAsaAspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 14, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsaAspIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsaAspIndex.setDescription('Specifies the Index of Application Server Process associated to the Application Server.')
sonusIuaAsaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 14, 1, 3), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sonusIuaAsaRowStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsaRowStatus.setDescription('')
sonusIuaAsStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15), )
if mibBuilder.loadTexts: sonusIuaAsStatusTable.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTable.setDescription('This table specifies the status of IUA Application Servers for the GSX node.')
sonusIuaAsStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1), ).setIndexNames((0, "SONUS-MGCP-SERVICES-MIB", "sonusIuaAsStatusIndex"))
if mibBuilder.loadTexts: sonusIuaAsStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusEntry.setDescription('')
sonusIuaAsStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusIndex.setDescription('Identifies the target IUA Application Server entry. The index used should match the index of the IUA Appication Server.')
sonusIuaAsStatusMessageVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusMessageVersion.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusMessageVersion.setDescription('The version of the IUA protocol supported by this IUA Gateway.')
sonusIuaAsStatusNumAsps = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusNumAsps.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusNumAsps.setDescription('The number of ASPs bound to this Application Server.')
sonusIuaAsStatusNumInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusNumInterfaces.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusNumInterfaces.setDescription('The number of Interfaces bound to the AS by the ASPs bound to the AS.')
sonusIuaAsStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("down", 1), ("inactive", 2), ("pending", 3), ("active", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusStatus.setDescription('The status of this AS. If active this AS has an active ASP.')
sonusIuaAsStatusRxMsgTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxMsgTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxMsgTotal.setDescription('Total messages received.')
sonusIuaAsStatusTxMsgTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxMsgTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxMsgTotal.setDescription('Total messages transmitted.')
sonusIuaAsStatusRxQptmTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxQptmTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxQptmTotal.setDescription('Total QPTM messages received.')
sonusIuaAsStatusTxQptmTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxQptmTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxQptmTotal.setDescription('Total QPTM messages transmitted.')
sonusIuaAsStatusRxAspSmTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxAspSmTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxAspSmTotal.setDescription('Total ASP State Maintenance messages received.')
sonusIuaAsStatusTxAspSmTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxAspSmTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxAspSmTotal.setDescription('Total ASP State Maintenance messages transmitted.')
sonusIuaAsStatusRxAspTmTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxAspTmTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxAspTmTotal.setDescription('Total ASP Traffic Maintenance messages received.')
sonusIuaAsStatusTxAspTmTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxAspTmTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxAspTmTotal.setDescription('Total ASP Traffic Maintenance messages transmitted.')
sonusIuaAsStatusTxTOTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxTOTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxTOTotal.setDescription('Number of message transmit timeouts.')
sonusIuaAsStatusTxAbortTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxAbortTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxAbortTotal.setDescription('Number of message aborts due to transmit timeouts.')
sonusIuaAsStatusTxErrTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxErrTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxErrTotal.setDescription('Number of message transmission errors.')
sonusIuaAsStatusRxUnknownTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxUnknownTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxUnknownTotal.setDescription('Number of messages received which were not understood by the GW.')
sonusIuaAsStatusRxOverLenTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxOverLenTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxOverLenTotal.setDescription('Number of messages received that were longer than the GW supports.')
sonusIuaAsStatusRxAspUp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxAspUp.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxAspUp.setDescription('Number of ASP Up messages received.')
sonusIuaAsStatusRxAspDown = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxAspDown.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxAspDown.setDescription('Number of ASP Down messages received.')
sonusIuaAsStatusRxAspActive = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxAspActive.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxAspActive.setDescription('Number of ASP Active messages received.')
sonusIuaAsStatusRxAspInactive = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxAspInactive.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxAspInactive.setDescription('Number of ASP Inactive messages received.')
sonusIuaAsStatusRxEstReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxEstReq.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxEstReq.setDescription('Number of Establish Request messages received.')
sonusIuaAsStatusRxRelReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxRelReq.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxRelReq.setDescription('Number of Release Request messages received.')
sonusIuaAsStatusRxEstRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxEstRsp.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxEstRsp.setDescription('Number of Establish Response messages received.')
sonusIuaAsStatusRxRelRsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxRelRsp.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxRelRsp.setDescription('Number of Release Response messages received.')
sonusIuaAsStatusRxDataReq = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxDataReq.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxDataReq.setDescription('Number of Data Request messages received.')
sonusIuaAsStatusRxDataIndAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxDataIndAck.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxDataIndAck.setDescription('Number of Data Indication Ack messages received.')
sonusIuaAsStatusTxAspUpAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxAspUpAck.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxAspUpAck.setDescription('Number of ASP Up Ack messages transmitted.')
sonusIuaAsStatusTxAspDownAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxAspDownAck.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxAspDownAck.setDescription('Number of ASP Down Ack messages transmitted.')
sonusIuaAsStatusTxAspActiveAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxAspActiveAck.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxAspActiveAck.setDescription('Number of ASP Active Ack messages transmitted.')
sonusIuaAsStatusTxAspInactiveAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxAspInactiveAck.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxAspInactiveAck.setDescription('Number of ASP Inactive Ack messages transmitted.')
sonusIuaAsStatusTxEstConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxEstConfirm.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxEstConfirm.setDescription('Number of ASP Establish Confirm messages transmitted.')
sonusIuaAsStatusTxRelConfirm = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxRelConfirm.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxRelConfirm.setDescription('Number of ASP Release Confirm messages transmitted.')
sonusIuaAsStatusTxEstInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxEstInd.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxEstInd.setDescription('Number of ASP Establish Indication messages transmitted.')
sonusIuaAsStatusTxRelInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxRelInd.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxRelInd.setDescription('Number of ASP Release Indication messages transmitted.')
sonusIuaAsStatusTxDataReqAck = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 43), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxDataReqAck.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxDataReqAck.setDescription('Number of ASP Data Request Ack messages transmitted.')
sonusIuaAsStatusTxDataInd = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxDataInd.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxDataInd.setDescription('Number of ASP Data Indication messages transmitted.')
sonusIuaAsStatusRxMaxByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxMaxByteCnt.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxMaxByteCnt.setDescription('Largest UDP packet received in bytes.')
sonusIuaAsStatusTxMaxByteCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxMaxByteCnt.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxMaxByteCnt.setDescription('Largest UDP packet transmitted in bytes.')
sonusIuaAsStatusRxError = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxError.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxError.setDescription('Number of Error messages received.')
sonusIuaAsStatusTxError = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxError.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxError.setDescription('Number of Error messages transmitted.')
sonusIuaAsStatusRxNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxNotify.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxNotify.setDescription('Number of Error messages received.')
sonusIuaAsStatusTxNotify = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxNotify.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxNotify.setDescription('Number of Error messages transmitted.')
sonusIuaAsStatusActiveAsp = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 51), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 23))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusActiveAsp.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusActiveAsp.setDescription('The active Application Server Process of this Application Server.')
sonusIuaAsStatusSoftwareVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 52), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusSoftwareVersion.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusSoftwareVersion.setDescription('The software version of the IUA protocol supported by this IUA Gateway.')
sonusIuaAsStatusRxMgmtTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusRxMgmtTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusRxMgmtTotal.setDescription('Total MGMT messages received.')
sonusIuaAsStatusTxMgmtTotal = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 15, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAsStatusTxMgmtTotal.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsStatusTxMgmtTotal.setDescription('Total MGMT messages transmitted.')
sonusIuaAspStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 16), )
if mibBuilder.loadTexts: sonusIuaAspStatusTable.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspStatusTable.setDescription('This table specifies the status of IUA ASPs for the GSX node.')
sonusIuaAspStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 16, 1), ).setIndexNames((0, "SONUS-MGCP-SERVICES-MIB", "sonusIuaAspStatusIndex"))
if mibBuilder.loadTexts: sonusIuaAspStatusEntry.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspStatusEntry.setDescription('')
sonusIuaAspStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAspStatusIndex.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspStatusIndex.setDescription('Identifies the target IUA Application Server Process entry.')
sonusIuaAspStatusNumConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 16, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAspStatusNumConnections.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspStatusNumConnections.setDescription('The number of IP addresses bound to this Application Server Process')
sonusIuaAspStatusNumAppServers = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 16, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAspStatusNumAppServers.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspStatusNumAppServers.setDescription('The number of Application Servers bound to this Application Server Process')
sonusIuaAspStatusStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 1, 16, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sonusIuaAspStatusStatus.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspStatusStatus.setDescription('The status of this Application Server Process. Active indicates this Application Server Process is actively acting active.')
sonusMgcpServicesMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 2))
sonusMgcpServicesMIBNotificationsPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 2, 0))
sonusMgcpServicesMIBNotificationsObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 2, 1))
sonusMgcpSessionConnectNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 2, 0, 1)).setObjects(("SONUS-MGCP-SERVICES-MIB", "sonusMgcpSessionName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusMgcpSessionConnectNotification.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionConnectNotification.setDescription('This trap indicates the MGCP Session has succesfully contacted a Call Agent to establish the session.')
sonusMgcpSessionDisconnectNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 2, 0, 2)).setObjects(("SONUS-MGCP-SERVICES-MIB", "sonusMgcpSessionName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusMgcpSessionDisconnectNotification.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpSessionDisconnectNotification.setDescription('This trap indicates the MGCP Session has lost contact with all call agents in the session.')
sonusMgcpCallAgntConnectNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 2, 0, 3)).setObjects(("SONUS-MGCP-SERVICES-MIB", "sonusMgcpSessionName"), ("SONUS-MGCP-SERVICES-MIB", "sonusMgcpCallAgntName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusMgcpCallAgntConnectNotification.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntConnectNotification.setDescription('This trap indicates the MGCP Session has succesfully contacted this Call Agent.')
sonusMgcpCallAgntDisconnectNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 2, 0, 4)).setObjects(("SONUS-MGCP-SERVICES-MIB", "sonusMgcpSessionName"), ("SONUS-MGCP-SERVICES-MIB", "sonusMgcpCallAgntName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusMgcpCallAgntDisconnectNotification.setStatus('current')
if mibBuilder.loadTexts: sonusMgcpCallAgntDisconnectNotification.setDescription('This trap indicates the MGCP Session has lost contact with this Call Agent.')
sonusIuaAsDownNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 2, 0, 5)).setObjects(("SONUS-MGCP-SERVICES-MIB", "sonusIuaAsName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIuaAsDownNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsDownNotification.setDescription('This trap indicates the IUA AS is down.')
sonusIuaAsInactiveNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 2, 0, 6)).setObjects(("SONUS-MGCP-SERVICES-MIB", "sonusIuaAsName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIuaAsInactiveNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsInactiveNotification.setDescription('This trap indicates the IUA AS is inactive.')
sonusIuaAsActiveNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 2, 0, 7)).setObjects(("SONUS-MGCP-SERVICES-MIB", "sonusIuaAsName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIuaAsActiveNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsActiveNotification.setDescription('This trap indicates the IUA AS is active.')
sonusIuaAsPendingNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 2, 0, 8)).setObjects(("SONUS-MGCP-SERVICES-MIB", "sonusIuaAsName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIuaAsPendingNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAsPendingNotification.setDescription('This trap indicates the IUA AS is in pending state.')
sonusIuaAspDownNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 2, 0, 9)).setObjects(("SONUS-MGCP-SERVICES-MIB", "sonusIuaAspName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIuaAspDownNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspDownNotification.setDescription('This trap indicates the IUA ASP is down.')
sonusIuaAspUpNotification = NotificationType((1, 3, 6, 1, 4, 1, 2879, 2, 5, 12, 2, 0, 10)).setObjects(("SONUS-MGCP-SERVICES-MIB", "sonusIuaAspName"), ("SONUS-COMMON-MIB", "sonusEventDescription"), ("SONUS-COMMON-MIB", "sonusEventClass"), ("SONUS-COMMON-MIB", "sonusEventLevel"))
if mibBuilder.loadTexts: sonusIuaAspUpNotification.setStatus('current')
if mibBuilder.loadTexts: sonusIuaAspUpNotification.setDescription('This trap indicates the IUA ASP is up.')
mibBuilder.exportSymbols("SONUS-MGCP-SERVICES-MIB", sonusMgcpSessionStatusRxCRCX=sonusMgcpSessionStatusRxCRCX, sonusIuaAspUpNotification=sonusIuaAspUpNotification, sonusIuaAsStatusTxEstInd=sonusIuaAsStatusTxEstInd, sonusMgcpServProfileEchoCancellation=sonusMgcpServProfileEchoCancellation, sonusMgcpServicesMIB=sonusMgcpServicesMIB, sonusMgcpServProfileIndex=sonusMgcpServProfileIndex, sonusMgcpServProfileSilenceSuppression=sonusMgcpServProfileSilenceSuppression, sonusIuaAsStatusTxAspInactiveAck=sonusIuaAsStatusTxAspInactiveAck, sonusMgcpConnectionPort=sonusMgcpConnectionPort, sonusIuaAsStatusTxMaxByteCnt=sonusIuaAsStatusTxMaxByteCnt, sonusMgcpSessionStatusIndex=sonusMgcpSessionStatusIndex, sonusMgcpGatewayPartialTimeout=sonusMgcpGatewayPartialTimeout, sonusIuaAsNextIndex=sonusIuaAsNextIndex, sonusIuaAsStatusTxAbortTotal=sonusIuaAsStatusTxAbortTotal, sonusMgcpSessionStatusRxDupCmdTotal=sonusMgcpSessionStatusRxDupCmdTotal, sonusMgcpSessionStatusRxMsgTotal=sonusMgcpSessionStatusRxMsgTotal, sonusIuaAsStatusRxOverLenTotal=sonusIuaAsStatusRxOverLenTotal, sonusIuaGatewayEstRelIndRetry=sonusIuaGatewayEstRelIndRetry, sonusIuaGatewayEstRelIndTimeout=sonusIuaGatewayEstRelIndTimeout, sonusIuaConnectionAspName=sonusIuaConnectionAspName, sonusIuaAsStatusTxMgmtTotal=sonusIuaAsStatusTxMgmtTotal, sonusIuaConnectionEntry=sonusIuaConnectionEntry, sonusIuaAsStatusRxAspUp=sonusIuaAsStatusRxAspUp, sonusIuaAsStatusRxEstRsp=sonusIuaAsStatusRxEstRsp, sonusMgcpSessionStatusRxCmdThrotCnt=sonusMgcpSessionStatusRxCmdThrotCnt, sonusIuaConnectionState=sonusIuaConnectionState, sonusIuaAsp=sonusIuaAsp, sonusIuaAsStatusTxAspDownAck=sonusIuaAsStatusTxAspDownAck, sonusIuaInterfaceEntry=sonusIuaInterfaceEntry, sonusMgcpSession=sonusMgcpSession, sonusIuaConnectionIpaddr=sonusIuaConnectionIpaddr, sonusIuaAsaEntry=sonusIuaAsaEntry, sonusMgcpSessionStatusRxCRCXL=sonusMgcpSessionStatusRxCRCXL, sonusIuaAsTable=sonusIuaAsTable, sonusIuaAsStatusNumAsps=sonusIuaAsStatusNumAsps, sonusIuaInterfaceAsName=sonusIuaInterfaceAsName, sonusIuaAsStatusRxAspTmTotal=sonusIuaAsStatusRxAspTmTotal, sonusIuaAsStatusTxQptmTotal=sonusIuaAsStatusTxQptmTotal, sonusIuaAsState=sonusIuaAsState, sonusIuaAsStatusRxMgmtTotal=sonusIuaAsStatusRxMgmtTotal, sonusIuaAsActiveNotification=sonusIuaAsActiveNotification, sonusMgcpSessionStatusRxMaxPigBCnt=sonusMgcpSessionStatusRxMaxPigBCnt, sonusMgcpSessionStatusRxOverLenTotal=sonusMgcpSessionStatusRxOverLenTotal, sonusMgcpSessionStatusTxRSIPCmd=sonusMgcpSessionStatusTxRSIPCmd, sonusIuaInterfaceShelf=sonusIuaInterfaceShelf, sonusIuaInterfaceTimeslot=sonusIuaInterfaceTimeslot, sonusMgcpServicesMIBNotificationsPrefix=sonusMgcpServicesMIBNotificationsPrefix, sonusIuaAsStatusTxDataInd=sonusIuaAsStatusTxDataInd, sonusIuaAsaAsIndex=sonusIuaAsaAsIndex, sonusMgcpGatewayPort=sonusMgcpGatewayPort, sonusMgcpSessionStatusRxMaxByteCnt=sonusMgcpSessionStatusRxMaxByteCnt, sonusIuaAspName=sonusIuaAspName, sonusIuaAsStatusTxDataReqAck=sonusIuaAsStatusTxDataReqAck, sonusIuaInterfacePort=sonusIuaInterfacePort, sonusIuaAspStatusStatus=sonusIuaAspStatusStatus, sonusIuaAsStatusRxAspDown=sonusIuaAsStatusRxAspDown, sonusIuaAsStatusSoftwareVersion=sonusIuaAsStatusSoftwareVersion, sonusMgcpSessionStatusTxMsgTotal=sonusMgcpSessionStatusTxMsgTotal, sonusIuaInterfaceTable=sonusIuaInterfaceTable, sonusMgcpSessionStatusTxAbortTotal=sonusMgcpSessionStatusTxAbortTotal, sonusIuaAsStatusActiveAsp=sonusIuaAsStatusActiveAsp, sonusMgcpSessionState=sonusMgcpSessionState, sonusMgcpSessionStatusTxCRCXRsp=sonusMgcpSessionStatusTxCRCXRsp, sonusMgcpSessionStatusStatus=sonusMgcpSessionStatusStatus, sonusMgcpGatewayCriticalTimeout=sonusMgcpGatewayCriticalTimeout, sonusIuaConnectionRowStatus=sonusIuaConnectionRowStatus, sonusIuaAspStatusTable=sonusIuaAspStatusTable, sonusMgcpSessionStatusRxDupRspTotal=sonusMgcpSessionStatusRxDupRspTotal, sonusMgcpSessionStatusTxCRCXRspL=sonusMgcpSessionStatusTxCRCXRspL, sonusIuaAsStatusTxAspActiveAck=sonusIuaAsStatusTxAspActiveAck, sonusMgcpSessionRowStatus=sonusMgcpSessionRowStatus, sonusIuaGatewayDataIndTimeout=sonusIuaGatewayDataIndTimeout, sonusIuaGatewayDataIndRetryExp=sonusIuaGatewayDataIndRetryExp, sonusMgcpCallAgnt=sonusMgcpCallAgnt, sonusMgcpConnectionCallAgntName=sonusMgcpConnectionCallAgntName, sonusMgcpSessionStatusTxRQNTRsp=sonusMgcpSessionStatusTxRQNTRsp, sonusMgcpSessionStatusTxAUDTRsp=sonusMgcpSessionStatusTxAUDTRsp, sonusMgcpCallAgntName=sonusMgcpCallAgntName, sonusIuaGatewayDataIndWindowSize=sonusIuaGatewayDataIndWindowSize, sonusMgcpConnectionTable=sonusMgcpConnectionTable, sonusMgcpServProfilePacketPeriod=sonusMgcpServProfilePacketPeriod, sonusIuaAsStatusNumInterfaces=sonusIuaAsStatusNumInterfaces, sonusMgcpCallAgntDisconnectNotification=sonusMgcpCallAgntDisconnectNotification, sonusMgcpSessionStatusRxRspTotal=sonusMgcpSessionStatusRxRspTotal, sonusMgcpCallAgntStatusIndex=sonusMgcpCallAgntStatusIndex, sonusMgcpServProfileState=sonusMgcpServProfileState, sonusIuaAsMode=sonusIuaAsMode, sonusIuaAsStatusRxAspSmTotal=sonusIuaAsStatusRxAspSmTotal, sonusMgcpSessionStatusTable=sonusMgcpSessionStatusTable, sonusIuaAsStatusTxRelInd=sonusIuaAsStatusTxRelInd, sonusIuaAsStatusRxEstReq=sonusIuaAsStatusRxEstReq, sonusIuaGatewayHbTimeout=sonusIuaGatewayHbTimeout, sonusMgcpCallAgntNextIndex=sonusMgcpCallAgntNextIndex, sonusMgcpSessionStatusTxCRCXRspErr=sonusMgcpSessionStatusTxCRCXRspErr, sonusIuaAsEntry=sonusIuaAsEntry, sonusMgcpCallAgntDefNotEnt=sonusMgcpCallAgntDefNotEnt, sonusMgcpSessionStatusRxDLCX=sonusMgcpSessionStatusRxDLCX, sonusMgcpGatewayMsgPiggyBacking=sonusMgcpGatewayMsgPiggyBacking, sonusMgcpSessionStatusRxUnknownTotal=sonusMgcpSessionStatusRxUnknownTotal, sonusMgcpSessionStatusRxErrorTotal=sonusMgcpSessionStatusRxErrorTotal, sonusIuaAsStatusTxTOTotal=sonusIuaAsStatusTxTOTotal, sonusIuaAsDownNotification=sonusIuaAsDownNotification, sonusMgcpSessionStatusTxMaxPigBCnt=sonusMgcpSessionStatusTxMaxPigBCnt, sonusMgcpSessionStatusTxDLCXCmd=sonusMgcpSessionStatusTxDLCXCmd, sonusMgcpServProfileEntry=sonusMgcpServProfileEntry, sonusIuaAs=sonusIuaAs, sonusIuaAsInactiveNotification=sonusIuaAsInactiveNotification, sonusMgcpSessionMode=sonusMgcpSessionMode, sonusIuaAsStatusRxMsgTotal=sonusIuaAsStatusRxMsgTotal, sonusIuaAsaAspIndex=sonusIuaAsaAspIndex, sonusIuaAsStatusRxAspActive=sonusIuaAsStatusRxAspActive, sonusMgcpSessionStatusTxRspTotal=sonusMgcpSessionStatusTxRspTotal, sonusMgcpSessionStatusTxDLCXRsp=sonusMgcpSessionStatusTxDLCXRsp, sonusIuaAspState=sonusIuaAspState, sonusMgcpGateway=sonusMgcpGateway, sonusMgcpServProfileTypeOfService=sonusMgcpServProfileTypeOfService, sonusMgcpSessionStatusTxMaxCmdPnd=sonusMgcpSessionStatusTxMaxCmdPnd, sonusIuaGatewayDataIndMaxTimeout=sonusIuaGatewayDataIndMaxTimeout, sonusIuaAsIndex=sonusIuaAsIndex, sonusMgcpCallAgntConnectNotification=sonusMgcpCallAgntConnectNotification, sonusMgcpSessionTable=sonusMgcpSessionTable, sonusIuaAsStatusTxNotify=sonusIuaAsStatusTxNotify, sonusIuaAsStatusRxRelReq=sonusIuaAsStatusRxRelReq, sonusIuaAsaRowStatus=sonusIuaAsaRowStatus, sonusIuaAsStatusRxDataIndAck=sonusIuaAsStatusRxDataIndAck, sonusIuaAspTable=sonusIuaAspTable, sonusMgcpCallAgntStatusEntry=sonusMgcpCallAgntStatusEntry, sonusMgcpCallAgntRowStatus=sonusMgcpCallAgntRowStatus, sonusIuaAsPendingNotification=sonusIuaAsPendingNotification, sonusMgcpSessionStatusRxMDCX=sonusMgcpSessionStatusRxMDCX, sonusMgcpServProfileName=sonusMgcpServProfileName, sonusIuaGateway=sonusIuaGateway, sonusIuaConnectionTable=sonusIuaConnectionTable, sonusMgcpSessionStatusTxMDCXRspErr=sonusMgcpSessionStatusTxMDCXRspErr, sonusMgcpCallAgntState=sonusMgcpCallAgntState, sonusIuaAsStatusTxAspSmTotal=sonusIuaAsStatusTxAspSmTotal, sonusIuaAsStatusRxDataReq=sonusIuaAsStatusRxDataReq, sonusIuaAsStatusTxRelConfirm=sonusIuaAsStatusTxRelConfirm, sonusMgcpServicesMIBNotificationsObjects=sonusMgcpServicesMIBNotificationsObjects, sonusMgcpGatewayRspTimeout=sonusMgcpGatewayRspTimeout, sonusIuaAspNextIndex=sonusIuaAspNextIndex, sonusMgcpGatewayMaxReXmit=sonusMgcpGatewayMaxReXmit, sonusMgcpSessionNextIndex=sonusMgcpSessionNextIndex, sonusMgcpSessionStatusTxMDCXRsp=sonusMgcpSessionStatusTxMDCXRsp, sonusIuaAspStatusNumConnections=sonusIuaAspStatusNumConnections, sonusIuaAsName=sonusIuaAsName, sonusMgcpConnectionRowStatus=sonusMgcpConnectionRowStatus, sonusIuaAsStatusTxMsgTotal=sonusIuaAsStatusTxMsgTotal, sonusMgcpServicesMIBObjects=sonusMgcpServicesMIBObjects, sonusMgcpSessionStatusRxRspErrTotal=sonusMgcpSessionStatusRxRspErrTotal, sonusIuaAspRowStatus=sonusIuaAspRowStatus, sonusIuaAspStatusIndex=sonusIuaAspStatusIndex, sonusMgcpSessionConnectNotification=sonusMgcpSessionConnectNotification, sonusMgcpSessionStatusRxCmdTotal=sonusMgcpSessionStatusRxCmdTotal, sonusIuaAsStatusTxErrTotal=sonusIuaAsStatusTxErrTotal, PYSNMP_MODULE_ID=sonusMgcpServicesMIB, sonusMgcpCallAgntStatusStatus=sonusMgcpCallAgntStatusStatus, sonusMgcpSessionStatusRxRQNT=sonusMgcpSessionStatusRxRQNT, sonusIuaGatewayPort=sonusIuaGatewayPort, sonusMgcpSessionEntry=sonusMgcpSessionEntry, sonusMgcpSessionStatusTxCmdTotal=sonusMgcpSessionStatusTxCmdTotal, sonusIuaAsStatusRxError=sonusIuaAsStatusRxError, sonusIuaAsStatusTxError=sonusIuaAsStatusTxError, sonusIuaAsStatusMessageVersion=sonusIuaAsStatusMessageVersion, sonusMgcpSessionStatusTxRQNTRspErr=sonusMgcpSessionStatusTxRQNTRspErr, sonusIuaAsStatusTxEstConfirm=sonusIuaAsStatusTxEstConfirm, sonusIuaAsStatusRxNotify=sonusIuaAsStatusRxNotify, sonusIuaAspEntry=sonusIuaAspEntry, sonusMgcpServProfile=sonusMgcpServProfile, sonusMgcpServProfileTable=sonusMgcpServProfileTable, sonusMgcpConnectionIpaddr=sonusMgcpConnectionIpaddr, sonusMgcpServProfileRowStatus=sonusMgcpServProfileRowStatus, sonusMgcpSessionStatusTxErrorTotal=sonusMgcpSessionStatusTxErrorTotal, sonusIuaAsStatusRxQptmTotal=sonusIuaAsStatusRxQptmTotal, sonusMgcpSessionStatusRxAUDT=sonusMgcpSessionStatusRxAUDT, sonusIuaAsStatusTxAspTmTotal=sonusIuaAsStatusTxAspTmTotal, sonusIuaAsStatusRxRelRsp=sonusIuaAsStatusRxRelRsp, sonusMgcpCallAgntIndex=sonusMgcpCallAgntIndex, sonusMgcpSessionStatusNumCallAgnts=sonusMgcpSessionStatusNumCallAgnts, sonusMgcpSessionStatusTxMaxByteCnt=sonusMgcpSessionStatusTxMaxByteCnt, sonusMgcpSessionIndex=sonusMgcpSessionIndex, sonusMgcpConnectionEntry=sonusMgcpConnectionEntry, sonusMgcpSessionStatusRxEPCF=sonusMgcpSessionStatusRxEPCF, sonusMgcpSessionName=sonusMgcpSessionName, sonusMgcpSessionStatusTxDLCXRspErr=sonusMgcpSessionStatusTxDLCXRspErr, sonusIuaAsStatusRxMaxByteCnt=sonusIuaAsStatusRxMaxByteCnt, sonusIuaAspStatusEntry=sonusIuaAspStatusEntry, sonusIuaConnectionPort=sonusIuaConnectionPort, sonusIuaInterfaceSlot=sonusIuaInterfaceSlot, sonusIuaAsStatusTable=sonusIuaAsStatusTable, sonusIuaGatewayASPendingTimeout=sonusIuaGatewayASPendingTimeout, sonusMgcpGatewayRxThrottle=sonusMgcpGatewayRxThrottle, sonusMgcpCallAgntEntry=sonusMgcpCallAgntEntry, sonusMgcpSessionStatusTxTOTotal=sonusMgcpSessionStatusTxTOTotal, sonusMgcpServProfileEncodeType=sonusMgcpServProfileEncodeType, sonusMgcpSessionStatusTxNTFYCmd=sonusMgcpSessionStatusTxNTFYCmd, sonusMgcpServProfileNextIndex=sonusMgcpServProfileNextIndex, sonusIuaAsStatusIndex=sonusIuaAsStatusIndex, sonusMgcpSessionDisconnectNotification=sonusMgcpSessionDisconnectNotification, sonusMgcpServicesMIBNotifications=sonusMgcpServicesMIBNotifications, sonusMgcpSessionStatusMinorVersion=sonusMgcpSessionStatusMinorVersion, sonusMgcpCallAgntSessionName=sonusMgcpCallAgntSessionName, sonusIuaAspIndex=sonusIuaAspIndex, sonusIuaAsRowStatus=sonusIuaAsRowStatus, sonusMgcpSessionServProfileName=sonusMgcpSessionServProfileName, sonusIuaAsaTable=sonusIuaAsaTable, sonusIuaAsStatusEntry=sonusIuaAsStatusEntry, sonusMgcpSessionStatusMajorVersion=sonusMgcpSessionStatusMajorVersion, sonusMgcpCallAgntTable=sonusMgcpCallAgntTable, sonusMgcpConnectionState=sonusMgcpConnectionState, sonusMgcpSessionStatusRxRspInPTotal=sonusMgcpSessionStatusRxRspInPTotal, sonusIuaAsStatusStatus=sonusIuaAsStatusStatus, sonusMgcpGatewayCmdTimeout=sonusMgcpGatewayCmdTimeout, sonusIuaAsStatusRxAspInactive=sonusIuaAsStatusRxAspInactive, sonusMgcpSessionStatusTxAUDTRspErr=sonusMgcpSessionStatusTxAUDTRspErr, sonusIuaAsStatusTxAspUpAck=sonusIuaAsStatusTxAspUpAck, sonusIuaAspDownNotification=sonusIuaAspDownNotification, sonusMgcpCallAgntStatusTable=sonusMgcpCallAgntStatusTable, sonusMgcpSessionStatusEntry=sonusMgcpSessionStatusEntry, sonusIuaAspStatusNumAppServers=sonusIuaAspStatusNumAppServers, sonusMgcpSessionStatusRxTOTotal=sonusMgcpSessionStatusRxTOTotal, sonusIuaAsStatusRxUnknownTotal=sonusIuaAsStatusRxUnknownTotal, sonusMgcpSessionStatusTxMaxRspPnd=sonusMgcpSessionStatusTxMaxRspPnd, sonusMgcpSessionStatusTxErrTotal=sonusMgcpSessionStatusTxErrTotal, sonusIuaInterfaceRowStatus=sonusIuaInterfaceRowStatus, sonusMgcpCallAgntStatusNumConnections=sonusMgcpCallAgntStatusNumConnections)
