#
# PySNMP MIB module CISCO-DSP-MGMT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-DSP-MGMT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:56:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint")
Percent, = mibBuilder.importSymbols("CISCO-QOS-PIB-MIB", "Percent")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
entPhysicalName, entPhysicalIndex = mibBuilder.importSymbols("ENTITY-MIB", "entPhysicalName", "entPhysicalIndex")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, Bits, ModuleIdentity, Counter64, ObjectIdentity, Counter32, Integer32, IpAddress, iso, Gauge32, NotificationType, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "Bits", "ModuleIdentity", "Counter64", "ObjectIdentity", "Counter32", "Integer32", "IpAddress", "iso", "Gauge32", "NotificationType", "MibIdentifier")
TextualConvention, TruthValue, TimeStamp, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "TimeStamp", "RowStatus", "DisplayString")
ciscoDspMgmtMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 86))
ciscoDspMgmtMIB.setRevisions(('2011-02-17 00:00', '2009-04-09 00:00', '2007-09-03 00:05', '2007-06-25 00:00', '2007-06-20 00:00', '2006-04-14 00:00', '2005-11-02 00:00', '2005-08-17 00:00', '2005-08-04 00:00', '2005-06-20 00:00', '2005-05-18 00:00', '2005-04-18 00:00', '2004-10-21 00:00', '2003-10-10 00:00', '2003-08-20 00:00', '2003-08-14 00:00', '2000-08-14 00:00', '1998-10-17 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoDspMgmtMIB.setRevisionsDescriptions(('1. Added cdspCardVideoPoolUtilization and cdspCardVideoPoolUtilizationThreshold to cdspCardStatusTable. 2. Added cdspVideoUsageNotificationEnable and cdspVideoOutOfResourceNotificationEnable to cdspMIBNotificationEnables. 4. Added 2 new notifications: cdspVideoUsageNotification and cdspVideoOutOfResourceNotification. 5. Deprecated cdspMgmtComplianceRev10 and added cdspMgmtComplianceRev11. 7. Added cdspMgmtVideoInfoGroup and cdspMgmtVideoNotificationsGroup.', '1. Added the following new OBJECT IDENTIFIERs: cdspDspfarmObjects, cdspDspfarmUtilObjects. 2. Added the following objects to cdspDspfarmObjects: cdspGlobMaxConfTranscodeSess, cdspGlobMaxAvailTranscodeSess. 3. Added cdspTranscodeProfileTable. 4. Added cdspMtpProfileTable. 5. Added the following objects to cdspDspfarmUtilObjects: cdspTotAvailTranscodeSess, cdspTotUnusedTranscodeSess, cdspTotAvailMtpSess, cdspTotUnusedMtpSess. 6. Added OBJECT-GROUP cdspDspfarmInfoGroup. 7. Deprecated MODULE-COMPLIANCE cdspMgmtComplianceRev9. 8. Added MODULE-COMPLIANCE cdspMgmtComplianceRev10.', 'Added cdspUtilTable to have MIB support for utilised and free DSP channels corresponding to codec pools available in codec template currently active on VXSM.', 'Added two values to object cdspCodecTemplateSupported to support TGW2 and FMC codec templates.', '1. Added cdspVoiceModeIpIp object in cdspVoiceParamTable. 2. Deprecated cdspTransparentIpIp.', 'Added following objects in cdspVoiceParamTable: cdspTransparentIpIp', 'Added following objects in cdspVoiceParamTable: cdspVqmThreshSES Modified the following objects in cdspVoiceParamTable: cdspVqmControl', 'Added following objects to cdspVoiceParamTable: cdspPktLossConcealment', 'Added following objects to cdspVoiceParamTable: cdspVqmControl cdspRtcpXrControl cdspRtcpXrTransMultiplier cdspRtcpXrGminDefault cdspRtcpXrExtRfactor', 'Added entPhysicalName to the OBJECTS clause of cdspOperStateNotification.', "Added object cdspEnableOperStateNotification to enable cdspOperStateNotification. Added cdspOperStateNotification to reflect cdspOperState in 'normal' or 'shutdown' state.", 'Added object cdspCodecTemplateSupported to cdspCardStatusTable.', 'Added object cdspRtcpTimerControl to cdspVoiceParamTable.', 'Added object cdspDspNum to cdspStatusTable.', 'Changing the DESCRIPTION of cdspMIBCardStateNotification to notify Manager whenever cdspCardState enters normal.', '(1) Added following objects to cdspCardStatusTable: cdspTotalDsp cdspFailedDsp cdspCongestedDsp cdspNormalDsp cdspNx64Dsp cdspDspSwitchOverThreshold (2) Added cdspVoiceParamTable (3) Added following objects to cdspStatusTable: cdspSigBearerChannelSplit cdspNumCongestionOccurrence (4) Added following enumerations to cdspOperState: congested (3) failed (4) (5) Added cdspStatusXTable', "Fix typo in the DESCRIPTION clause of cdspMIBEnableCardStatusNotification object; change 'cdspFatalNotification' to 'cdspMIBCardStateNotification'.", 'Add new objects to support channelized DSP features.',))
if mibBuilder.loadTexts: ciscoDspMgmtMIB.setLastUpdated('201102170000Z')
if mibBuilder.loadTexts: ciscoDspMgmtMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoDspMgmtMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-voice@cisco.com')
if mibBuilder.loadTexts: ciscoDspMgmtMIB.setDescription('Digital Signal Processing (DSP) Management MIB module. The MIB module monitors the DSP resource and status. Acronyms & Terms ================ DTMF - Dual Tone Multi-Frequency. DTMF uses two frequencies, the high frequency omponent and the low frequency component, to generate digit signals. DSPFarm - DSPFarm ia a logical name given to a functionality which groups the DSP resources to provide certain service like transcoding and conferencing using DSP. DSPFarm profile - A DSPFarm profile logically groups the DSP to perform service like transcoding and conferencing. It is uniquely identified by a profile number. MTP - Media Termination Point. RTP packet received by MTP in the incoming call leg will be regenerated and send out through the outgoing call leg. transcode - Translating codec. transcoder is used to do codec translation. If incoming call leg negotiates codec-A and outgoing call leg negotiates codec-B then transcoder will convert received RTP packet from codec-A to codec-B or codec-B to codec-A. MTP hardware session - Media termination functionality with using DSP. MTP software session - Media termination functionality without using DSP. RTP - Real-time Transport protocol. Video Pool - A group of DSP resources dedicated to providing video services.')
cdspMgmtNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 86, 0))
cdspMgmtObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 86, 1))
cdspCardObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1))
cdspObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2))
cdspMIBNotificationEnables = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 3))
cdspVoiceObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4))
cdspUtilObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 5))
cdspDspfarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6))
cdspDspfarmUtilObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 7))
cdspCardStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1), )
if mibBuilder.loadTexts: cdspCardStatusTable.setStatus('current')
if mibBuilder.loadTexts: cdspCardStatusTable.setDescription('The DSP Card Table. It contains status information of the DSP cards present within the router.')
cdspCardStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cdspCardStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cdspCardStatusEntry.setDescription('An entry in the DSP card table indicates the DSP card state, resource utilization. Each entry is created when a DSP software is detected on a DSP card. The entry is deleted when the DSP card is deleted.')
cdspCardIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspCardIndex.setStatus('current')
if mibBuilder.loadTexts: cdspCardIndex.setDescription('The object corresponds to cardIndex in the chassis mib. If value of this object is 0, then the entry is not associated to cardIndex of the chassis mib.')
cdspCardState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("fatal", 4), ("offLine", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspCardState.setStatus('current')
if mibBuilder.loadTexts: cdspCardState.setDescription('The object indicates the current state of DSP card being monitored. normal - DSP card in normal condition. warning - DSP card has some problem and need attention. critical - DSP card has a major alarm. fatal - DSP card is not functional. DSP subsystem might reset DSP card to recover it from the fatal error condition. After the DSP card is reset successfully, the object cdspCardResourceUtilization and cdspCardLastHiWaterUtilization are reset to 0. If the fatal error is persistent in this object after card is reset, the card should be replaced. offLine - DSP card is in off-line maintenance state.')
cdspCardResourceUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspCardResourceUtilization.setStatus('current')
if mibBuilder.loadTexts: cdspCardResourceUtilization.setDescription('The object indicates the percentage of current DSP resource utilization of the card. The utilization is a ratio of number of busy DSP resources (for handling calls, transcoding, voice compression,...) to the total available DSP resources.')
cdspCardLastHiWaterUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspCardLastHiWaterUtilization.setStatus('current')
if mibBuilder.loadTexts: cdspCardLastHiWaterUtilization.setDescription('The object indicates the last high water mark of DSP resource utilization. This object is reset to 0 after DSP card is reset.')
cdspCardLastResetTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspCardLastResetTime.setStatus('current')
if mibBuilder.loadTexts: cdspCardLastResetTime.setDescription('The value of sysUpTime when the last DSP card reset occurred.')
cdspCardMaxChanPerDSP = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 6), Unsigned32()).setUnits('channels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspCardMaxChanPerDSP.setStatus('current')
if mibBuilder.loadTexts: cdspCardMaxChanPerDSP.setDescription('The maximum number of channels allowed in each DSP. The value is chosen in an implementation-dependent manner by the DSP functionality. The value of 0 in this object indicates Channelized DSP mode is turned off.')
cdspTotalDsp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspTotalDsp.setStatus('current')
if mibBuilder.loadTexts: cdspTotalDsp.setDescription('The total number of DSPs in the card.')
cdspFailedDsp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 8), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspFailedDsp.setStatus('current')
if mibBuilder.loadTexts: cdspFailedDsp.setDescription("The number of DSPs in the failed state (i.e cdspOperstate is 'failed')")
cdspDspSwitchOverThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspDspSwitchOverThreshold.setStatus('current')
if mibBuilder.loadTexts: cdspDspSwitchOverThreshold.setDescription("This object specifies the threshold of DSP failures. When 'cdspFailedDsp' reaches the value of this object, the voice gateway switchover will occur. The maximum value of this object can not be more than the value in 'cdspTotalDsp'")
cdspCongestedDsp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 10), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspCongestedDsp.setStatus('current')
if mibBuilder.loadTexts: cdspCongestedDsp.setDescription("The number of DSPs in the congested state (i.e cdspOperstate is 'congested').")
cdspNormalDsp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 11), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspNormalDsp.setStatus('current')
if mibBuilder.loadTexts: cdspNormalDsp.setDescription("The number of DSPs in the normal state (i.e cdspOperstate is 'normal').")
cdspNx64Dsp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspNx64Dsp.setStatus('current')
if mibBuilder.loadTexts: cdspNx64Dsp.setDescription("This object specifies the number of DSPs that need to be set aside for making Nx64 calls. The max value of this object is limited to the value of the object 'cdspTotalDsp'. If this value is 0, it is not allowed to make any Nx64 call. The default value of this object is 0.")
cdspCodecTemplateSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("tgw", 1), ("cable", 2), ("umts3G", 3), ("cdma3G", 4), ("tgw2", 5), ("fmc", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspCodecTemplateSupported.setStatus('current')
if mibBuilder.loadTexts: cdspCodecTemplateSupported.setDescription('This object indicates the codec template supported in DSP image. The codec template can be: tgw - Codec template for wireline used in Trunking GateWay application. cable - Codec template for AES (Advanced Encryption Standard) encryption used in cable application. umts3G - Codec template for AMR (Adaptive Multi-Rate) codecs used in 3G UMTS (Universal Mobile Telecommunication System) application. cdma3G - Codec template for EVRC (Enhanced Variable Rate Codec) used in 3G CDMA (Code Division Multiple Access) application. tgw2 - Codec template for iLBC (Internet Low Bandwidth Codec) codec used in Tandem Gateway application. fmc - Codec template for AMR (Adaptive Multi-Rate) codec used in Fixed Mobile Convergence (FMC) application.')
cdspCardVideoPoolUtilization = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 14), Percent()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspCardVideoPoolUtilization.setStatus('current')
if mibBuilder.loadTexts: cdspCardVideoPoolUtilization.setDescription('The object indicates the percentage of current DSP video resource pool utilization of the card.')
cdspCardVideoPoolUtilizationThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 1, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspCardVideoPoolUtilizationThreshold.setStatus('current')
if mibBuilder.loadTexts: cdspCardVideoPoolUtilizationThreshold.setDescription('This object specifies the threshold of DSP video pool resource usage. When cdspCardVideoPoolUtilization crosses the value of this threshold in the rising direction, cdspVideoUsageNotification is generated. If cdspCardVideoPoolUtilization stays above the value of this threshold, cdspVideoUsageNotification is generated whenever the value of cdspCardVideoPoolUtilization increases, but no notification is sent if when the value of cdspCardVideoPoolUtilization decreases. No notification is sent if cdspCardVideoPoolUtilization crosses the value of this threshold in the falling direction.')
cdspStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 1), )
if mibBuilder.loadTexts: cdspStatusTable.setStatus('current')
if mibBuilder.loadTexts: cdspStatusTable.setDescription("Status information for the DSPs. This status table is used for tracking dangling DSP resources. The dangling DSP channel means that the DSP channel is reserved for serving calls but the channel is not used by active calls. The number of the dangling DSP channels can be computed by 'cdspInUseChannels - cdspActiveChannels'.")
cdspStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cdspStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cdspStatusEntry.setDescription("An entry in cdspStatusTable indicates the DSP state and alarm conditions. Each entry is created when a DSP is detected on a DSP card. The entry is deleted when the DSP card is deleted. The 'entPhysicalIndex' represents a DSP entity, and the 'entPhysicalClass' is 'other(1)'.")
cdspOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("normal", 1), ("shutdown", 2), ("congested", 3), ("failed", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspOperState.setStatus('current')
if mibBuilder.loadTexts: cdspOperState.setDescription('The current operational state of the DSP. normal - DSP operates normally shutdown - DSP is shutdown due to fatal error congested - DSP does not accept call because the DSP buffer is full failed - DSP failed')
cdspAlarms = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspAlarms.setStatus('current')
if mibBuilder.loadTexts: cdspAlarms.setDescription('The object indicates the accumulated number of DSP Alarms.')
cdspLastAlarmCause = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("noAlarm", 2), ("dspFatalError", 3), ("dspMemoryError", 4), ("dspBufferError", 5), ("dspDownloadError", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspLastAlarmCause.setStatus('current')
if mibBuilder.loadTexts: cdspLastAlarmCause.setDescription("The object indicates the current or last alarm state of DSP. other - none of the following noAlarm - alarm condition had not been detected dspFatalError - DSP fatal error dspMemoryError - DSP memory error is detected dspBufferError - DSP buffer error dspDownloadError - Failed to download software to DSP. The cdspOperState will be set to 'shutdown(2) if the alarm condition of DSP is persistent.")
cdspLastAlarmCauseText = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspLastAlarmCauseText.setStatus('current')
if mibBuilder.loadTexts: cdspLastAlarmCauseText.setDescription('The object indicates the failure reason for the current or last DSP Alarm. It should be used only for direct, human-readable display and only if a management station is unable to decode the value of cdspLastAlarmCause.')
cdspLastAlarmTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 1, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspLastAlarmTime.setStatus('current')
if mibBuilder.loadTexts: cdspLastAlarmTime.setDescription("The value of sysUpTime when the last DSP Alarm occurred. The value of this object is 0 if the value of cdspLastAlarmCause object is 'noAlarm'.")
cdspTotalChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 1, 1, 6), Unsigned32()).setUnits('channels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspTotalChannels.setStatus('current')
if mibBuilder.loadTexts: cdspTotalChannels.setDescription('The total number of channels in the DSP. This value is predetermined by the DSP functionality upon initialization. The value of 0 in this object indicates Channelized DSP mode is turned off.')
cdspInUseChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 1, 1, 7), Gauge32()).setUnits('channels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspInUseChannels.setStatus('current')
if mibBuilder.loadTexts: cdspInUseChannels.setDescription('The number of channels that are reserved for serving calls. The value is incremented when the DSP channel is reserved for call setup and is decremented after the DSP channel is free due to call disconnection.')
cdspActiveChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 1, 1, 8), Gauge32()).setUnits('channels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspActiveChannels.setStatus('current')
if mibBuilder.loadTexts: cdspActiveChannels.setDescription('The number of channels that are used by active calls to process media stream. The value is incremented after the reserved DSP channel enters call connection state and is decremented after the call is disconnected.')
cdspSigBearerChannelSplit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 1, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspSigBearerChannelSplit.setStatus('current')
if mibBuilder.loadTexts: cdspSigBearerChannelSplit.setDescription("This object indicates if the DSP channels are splitted for signaling call and bearer call. If the value of this object is 'true' which means that signaling call and bearer call cannot share any DSP channel. This object is not applicable when Channelized DSP mode is turned off.")
cdspNumCongestionOccurrence = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspNumCongestionOccurrence.setStatus('current')
if mibBuilder.loadTexts: cdspNumCongestionOccurrence.setDescription('The number of congestion occurred on the DSP. This value is set to 0 when system is reset.')
cdspDspNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 252))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspDspNum.setStatus('current')
if mibBuilder.loadTexts: cdspDspNum.setDescription('This object identifies the DSP number associated with this DSP entity.')
cdspStatusXTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 2), )
if mibBuilder.loadTexts: cdspStatusXTable.setStatus('current')
if mibBuilder.loadTexts: cdspStatusXTable.setDescription('This table provides the additional detailed state and statistics information for a DSP that supports the splitted signalling and bearer channels.')
cdspStatusXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 2, 1), )
cdspStatusEntry.registerAugmentions(("CISCO-DSP-MGMT-MIB", "cdspStatusXEntry"))
cdspStatusXEntry.setIndexNames(*cdspStatusEntry.getIndexNames())
if mibBuilder.loadTexts: cdspStatusXEntry.setStatus('current')
if mibBuilder.loadTexts: cdspStatusXEntry.setDescription("An entry of this table is created when its associated entry in cdspStatusTable is created and the value of cdspSigBearerChannelSplit object is 'true'.")
cdspXNumberOfBearerCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 2, 1, 1), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspXNumberOfBearerCalls.setStatus('current')
if mibBuilder.loadTexts: cdspXNumberOfBearerCalls.setDescription('The current number of bearer calls on the DSP.')
cdspXNumberOfSigCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 2, 1, 2), Gauge32()).setUnits('calls').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspXNumberOfSigCalls.setStatus('current')
if mibBuilder.loadTexts: cdspXNumberOfSigCalls.setDescription('The current number of signaling calls on the DSP.')
cdspXAvailableBearerBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 2, 1, 3), Gauge32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspXAvailableBearerBandwidth.setStatus('current')
if mibBuilder.loadTexts: cdspXAvailableBearerBandwidth.setDescription('The percentage of channels on the DSP currently available for bearer calls.')
cdspXAvailableSigBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 2, 2, 1, 4), Gauge32()).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspXAvailableSigBandwidth.setStatus('current')
if mibBuilder.loadTexts: cdspXAvailableSigBandwidth.setDescription('The percentage of channels on the DSP currently available for signaling calls.')
cdspVoiceParamTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1), )
if mibBuilder.loadTexts: cdspVoiceParamTable.setStatus('current')
if mibBuilder.loadTexts: cdspVoiceParamTable.setDescription('This table contains information on voice call setup related parameters for DSP resource.')
cdspVoiceParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"))
if mibBuilder.loadTexts: cdspVoiceParamEntry.setStatus('current')
if mibBuilder.loadTexts: cdspVoiceParamEntry.setDescription("An entry in the DSP table contains information regarding a single DSP resource associated voice call setup parameters. An entry in this table is created when a DSP is detected and the DSP resource can be used by voice applications. An entry in this table is deleted when the DSP associated card/module is removed from the system. The 'entPhysicalClass' for the entry is 'other'.")
cdspRtpSidPayloadType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(13, 19))).clone(namedValues=NamedValues(("decimal", 13), ("hexadecimal", 19))).clone('decimal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspRtpSidPayloadType.setReference('Section 5.1 of RFC2833')
if mibBuilder.loadTexts: cdspRtpSidPayloadType.setStatus('current')
if mibBuilder.loadTexts: cdspRtpSidPayloadType.setDescription('This object specifies the RTP (Real Time Protocol) payload type of the SID (Silence Insertion Descriptor) packet that is sent to the remote endpoint at the onset of silence suppression.')
cdspRtcpControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspRtcpControl.setReference('Appendix A.7 of RFC1889')
if mibBuilder.loadTexts: cdspRtcpControl.setStatus('current')
if mibBuilder.loadTexts: cdspRtcpControl.setDescription("This objects controls if RTCP (Real Time Control Protocol) will be enabled. If this object is set to 'true', both transmission and reception of RTCP packets are enabled; otherwise, transmission of RTCP packets is disabled while any received RTCP packets are ignored.")
cdspRtcpTransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(5000, 65535)).clone(5000)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspRtcpTransInterval.setReference('Appendix A.7 of RFC1889')
if mibBuilder.loadTexts: cdspRtcpTransInterval.setStatus('current')
if mibBuilder.loadTexts: cdspRtcpTransInterval.setDescription("This attribute specifies the RTCP report interval (defined in RFC1889). It indicates the interval in which the RTCP reports should be sent to the participating members. RTCP reports is sent out in a random interval computed by using 'cdspRtcpTransInterval' and a random number that is between 0.5 and 1.5. This interval timer also serves the purpose of RTP packets receive timer. At every interval multiplier times this interval, where a check is made on a VoIP connection (which is in SENDRECV or RECVONLY xGCP modes) to see if any RTP packets have been received. If not, gateway-initiated DLCX should be sent to the Call Agent. This object is applicable only if 'cdspRtcpControl' is set to 'true'.")
cdspRtcpRecvMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 60)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspRtcpRecvMultiplier.setReference('Section 6.2.1 of RFC1889')
if mibBuilder.loadTexts: cdspRtcpRecvMultiplier.setStatus('current')
if mibBuilder.loadTexts: cdspRtcpRecvMultiplier.setDescription("This object specifies an approximate RTCP report interval (defined in RFC 1889) in milliseconds in which the RTCP reports should be sent to the participating members. It specifies how many times the RTCP reports may fail before exception condition activity may be done. In the time elapse of value of this MIB object times the RTCP Report Interval specified by 'cdspRtcpTransInterval', a check will be done on a VoIP connection (which is in SENDRECV or RECVONLY xGCP modes) to see if any RTP packets have been received. If not, gateway-initiated DLCX should be sent to the Call Agent. This object is applicable only if 'cdspRtcpControl' is set to 'true'.")
cdspVadAdaptive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 5), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspVadAdaptive.setStatus('current')
if mibBuilder.loadTexts: cdspVadAdaptive.setDescription("This attribute is used to enable or disable the Adaptive VAD knob of the VAD algorithm. Adaptive VAD works in conjunction with VAD Threshold (cvifcfgMusicOnHoldThreshold from CISCO-VOICE-IF-MIB). When this object set to 'true', VAD Threshold is ignored and the DSP adjusts the threshold automatically according to the background noise level. When the adaptive VAD configuration is 'false', VAD threshold is used directly. The VAD configuration is ignored for all CODECs that contain their own VAD (G.729AB, G.723.1A and GSM-EFR). Likewise, when a channel is configured in ClearChannel mode (Clear Channel is Non-Compression CODEC channel), VAD will automatically be disabled irrespective of the configuration.")
cdspDtmfPowerLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-250, 30)).clone(-120)).setUnits('0.1 dBm').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspDtmfPowerLevel.setReference('Q.23, Q.24, EIA/TIA-464')
if mibBuilder.loadTexts: cdspDtmfPowerLevel.setStatus('current')
if mibBuilder.loadTexts: cdspDtmfPowerLevel.setDescription('This object specifies the power level of the low frequency component of DTMF. The power level of the high frequency component of DTMF is relative above or below the value specified in object cdspDtmfPowerTwist. If the value of cdspDtmfPowerTwist is 0, the power level of the high frequency component as well as the low frequency component is specified by this object.')
cdspDtmfPowerTwist = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, 100))).setUnits('0.1 dB').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspDtmfPowerTwist.setReference('Q.23, Q.24, EIA/TIA-464')
if mibBuilder.loadTexts: cdspDtmfPowerTwist.setStatus('current')
if mibBuilder.loadTexts: cdspDtmfPowerTwist.setDescription('This object specifies the relative power level of the high frequency component of DTMF. The low frequency group is always fixed to the value specified by cdspDtmfPowerLevel. When this object is set to 0, the power level of both frequency components is set to the same level. When this object is set to a positive value, the power level of the high frequency component is set to relatively higher specified in this object than the low frequency component. For example if cdspDtmfPowerLevel is set to -120(-12 dBm) and this object is set to 50, the power level of the high frequency component becomes -70(-7 dBm). When this object is set to a negative value, the power level of the high frequency component is set to relatively lower specified in this object than the low frequency component. For example if cdspDtmfPowerLevel is set to -120(-12 dBm) and this object is set to -100, the power level of the high frequency component becomes -220(-22 dBm). The power level of the high frequency component has to be in the data range specified in cdspDtmfPowerLevel. For example if cdspDtmfPowerLevel is set to -200(-20 dBm) and this object is set to -100, the power level of the high frequency component will become -300(-30 dBm) which is out of the range (-250..30) of data specified in cdspDtmfPowerLevel, so -100 is illegitimate for this setting.')
cdspRtcpTimerControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("disabled", 1), ("startImmediately", 2), ("startRtpOrRtcpPktRcvd", 3), ("startRtcpPktRcvd", 4))).clone('startRtcpPktRcvd')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspRtcpTimerControl.setStatus('current')
if mibBuilder.loadTexts: cdspRtcpTimerControl.setDescription('This object specifies when the RTCP receive timer is started. disabled - timer is disabled startImmediately - timer starts immediately as soon as RTCP is enabled on the call startRtpOrRtcpPktRcvd - timer starts upon reception of the first RTP or RTCP packet startRtcpPktRcvd - timer starts upon reception of the first RTCP packet')
cdspVqmControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disable", 1), ("rfc3611Vqm", 2), ("xnq", 3))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspVqmControl.setReference('RFC 3611')
if mibBuilder.loadTexts: cdspVqmControl.setStatus('current')
if mibBuilder.loadTexts: cdspVqmControl.setDescription("This object is used to disable VQM or enable either RFC 3611 RTCPXR or Extended Network Quality Metrics VQM. disable - VQM is disabled. rfc3611Vqm - RFC 3611 RTCPXR. RTCPXR packet uses extended report block type as defined in RFC3611. xnq - Extended Network Quality Metrics. The difference between RFC 3611 RTCPXR and Extended Network Quality Metrics is the extended report block type used in RTCPXR packets. RFC 3611 RTCPXR uses voip-metrics block type as defined in RFC3611. Extended Network Quality Metrics uses a proprietary block type. If this object is set to 'disabled', the RTP terminations (object cmedxTermTypePkgIds in CISCO-MEGACO-EXT-MIB) on the card cannot be provisioned with the related packages, rtcpxr or pkgXnq, respectively. If this object is set to 'rfc3611Vqm', the RTP terminations (object cmedxTermTypePkgIds in CISCO-MEGACO-EXT-MIB) on the card can include package ID 'rtcpxr (27)' and/or 'xrbm (28)', but can not include package ID 'pkgXnq (32)'. If this object is set to 'xnq', the RTP terminations (object cmedxTermTypePkgIds in CISCO-MEGACO-EXT-MIB) on the card can include package ID 'pkgXnq (32)', but can not include 'rtcpxr (27)' or 'xrbm (28)'.")
cdspRtcpXrControl = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 10), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspRtcpXrControl.setStatus('current')
if mibBuilder.loadTexts: cdspRtcpXrControl.setDescription("This object controls if RTCPXR (Real Time Control Protocol Extended Report) is enabled. If this object is set to 'true', both transmission and reception of RTCPXR packets are enabled; otherwise, transmission of RTCPXR packets is disabled while any received RTCPXR packets are ignored. If object cdspVqmControl is set to 'xnq (3)', this object is read-only with the value of 'true'.")
cdspRtcpXrTransMultiplier = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 11), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspRtcpXrTransMultiplier.setStatus('current')
if mibBuilder.loadTexts: cdspRtcpXrTransMultiplier.setDescription("This object is used to configure the RTCPXR report frequency. i.e. how many RTCP packets during the interval of every RTCPXR packet. The RTCPXR report is sent every 'cdspRtcpXrTransMultiplier' of RTCP packet. Example: If RTCP packet is sent every 10 ms(frequency of RTCP packet = 10 ms), and 'cdspRtcpXrTransMultiplier' is set to 3, then RTCPXR is sent every 3x10 ms = 30 ms(frequency of RTCPXR packet = 30 ms). This object is applicable only if 'cdspRtcpXrControl' is set to 'true'. If object cdspVqmControl is set to 'xnq (3)', this object is read-only with the value of '1'.")
cdspRtcpXrGminDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 12), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspRtcpXrGminDefault.setReference('RFC3611')
if mibBuilder.loadTexts: cdspRtcpXrGminDefault.setStatus('current')
if mibBuilder.loadTexts: cdspRtcpXrGminDefault.setDescription("This object is the default minimum gap value configured for the IP stream. This object is applicable only if 'cdspVqmControl' is set to 'rfc3611Vqm'.")
cdspRtcpXrExtRfactor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(127)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspRtcpXrExtRfactor.setStatus('current')
if mibBuilder.loadTexts: cdspRtcpXrExtRfactor.setDescription("This object is the external R factor metric value. The value 127 means it is not applicable. This object is applicable only if 'cdspVqmControl' is set to 'rfc3611Vqm'. When 'cdspVqmControl' is not 'rfc3611Vqm', this object is set to 127.")
cdspPktLossConcealment = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("simple", 2), ("g711A1", 3))).clone('simple')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspPktLossConcealment.setReference('ITU G.711 Appendix 1')
if mibBuilder.loadTexts: cdspPktLossConcealment.setStatus('current')
if mibBuilder.loadTexts: cdspPktLossConcealment.setDescription('This object specifies the packet loss concealment: (1) none: No packet loss concealment applied (2) simple: Cisco Proprietary packet loss concealment (3) g711A1: ITU G.711 Appendix I compliant')
cdspVqmThreshSES = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(10, 1000)).clone(50)).setUnits('milliseconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspVqmThreshSES.setStatus('current')
if mibBuilder.loadTexts: cdspVqmThreshSES.setDescription("This attribute specifies the threshold for Severely Errored Second on VQM. If the total number of milliseconds sampled as bad voice quality in one second period exceeds threshold, then this second is considered a 'severely errored second'. This object is applicable only if 'cdspVqmControl' is set to 'xnq'.")
cdspTransparentIpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 16), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspTransparentIpIp.setStatus('deprecated')
if mibBuilder.loadTexts: cdspTransparentIpIp.setDescription("This attribute is used to enable or disable the transparent mode when establishing a non-transcoding IP-IP connection. The attribute does not apply for the transcoding IP-IP connections. A non-transcoding connection is one where the codec and packetization period are the same between the two IP terminations. When this object is set to 'true', the non-transcoding IP-IP connection is established in such a way that the bearer stream is not interrupted by the gateway. When this object is set to 'false', the non-transcoding IP-IP connection is established in a way the gateway terminates the bearer stream at one leg, and regenerates the bearer stream at the other leg.")
cdspVoiceModeIpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("fastRoute", 2), ("transparent", 3))).clone('normal')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspVoiceModeIpIp.setStatus('current')
if mibBuilder.loadTexts: cdspVoiceModeIpIp.setDescription('This object specifies the voice mode for IP IP connections. normal : A normal Mode is a transcoding mode for IP-IP connections where the bearer properties will be different on two ends of a call. fastRoute : A voice call will be esatblished in this mode when the codec is same on two ends of a call but packetization period is different. tranparent : A voice call will be established in transparent mode when the all the bearer properties for a voice call are same on the two ends of a call.')
cdspUtilTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 5, 1), )
if mibBuilder.loadTexts: cdspUtilTable.setStatus('current')
if mibBuilder.loadTexts: cdspUtilTable.setDescription('This table contains DSP utilization information for all the codec families available in codec template currently active on VXSM.')
cdspUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 5, 1, 1), ).setIndexNames((0, "ENTITY-MIB", "entPhysicalIndex"), (0, "CISCO-DSP-MGMT-MIB", "cdspCodecPoolIndex"))
if mibBuilder.loadTexts: cdspUtilEntry.setStatus('current')
if mibBuilder.loadTexts: cdspUtilEntry.setDescription('An entry (conceptual row) in cdspUtilTable indicates the DSP capacity usage. Each entry maps to a codec pool family , uniquely identified by cdspCodecPoolIndex, and displays corresponding utilized and available DSP channels. The entry is derived based on the codec families supported (DSP channels consumed by them) in the current codec template i.e the instance of cdspCodecTemplateSupported at start up time by the system.')
cdspCodecPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 5, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: cdspCodecPoolIndex.setStatus('current')
if mibBuilder.loadTexts: cdspCodecPoolIndex.setDescription("This object identifies a row. Pool index is corresponding to the number of DSP channels utilized. The instance identifier value of this object depends on the codec template supported on this module as indicated by the value of corresponding instance of 'cdspCodecTemplateSupported' of cdspCardStatusTable table. A pool index will map to codec family utilizing pool index number of DSP channels, codecs consuming same number of DSP channels will be part of one family. Based on the value of the corresponding instance of 'cdspCodecTemplateSupported', the possible instance identifier values of 'cdspCodecPollIndex' specific set of codec families: Codec Template Pool Index Codec family tgw 1 G.711 family/HDLC/CCD 3 G.729/G.726/T.38 family 4 G.723 family cable 1 G.711 family/HDLC/T.38 3 iLBC family tgw2 1 G.711 family/HDLC/T.38 3 G.729/G.726/T.38 family 4 iLBC family fmc 1 G.711 family/HDLC/T.38 2 G.729/G.726/T.38 family 3 AMR/EFR family")
cdspCurrentUtilCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspCurrentUtilCap.setStatus('current')
if mibBuilder.loadTexts: cdspCurrentUtilCap.setDescription('This object indicates the number of DSP channels which are currently being utilized corresponding to active calls on VXSM segregated on the basis of codec families.')
cdspCurrentAvlbCap = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspCurrentAvlbCap.setStatus('current')
if mibBuilder.loadTexts: cdspCurrentAvlbCap.setDescription('This object indicates the number of DSP channels which are currently available on VXSM corresponding to a codec family.')
cdspGlobMaxConfTranscodeSess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspGlobMaxConfTranscodeSess.setStatus('current')
if mibBuilder.loadTexts: cdspGlobMaxConfTranscodeSess.setDescription('This object indicates the maximum transcode sessions configured globally for the voice gateway.')
cdspGlobMaxAvailTranscodeSess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspGlobMaxAvailTranscodeSess.setStatus('current')
if mibBuilder.loadTexts: cdspGlobMaxAvailTranscodeSess.setDescription('This object indicates the total number of available sessions from the maximum transcode sessions configured globally for the voice gateway.')
cdspTranscodeProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 3), )
if mibBuilder.loadTexts: cdspTranscodeProfileTable.setStatus('current')
if mibBuilder.loadTexts: cdspTranscodeProfileTable.setDescription('This table contains information about each transcode DSPFarm profile. It gives the maximum number of transcode sessions configured and the number of available sessions per profile.')
cdspTranscodeProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 3, 1), ).setIndexNames((0, "CISCO-DSP-MGMT-MIB", "cdspTranscodeProfileId"))
if mibBuilder.loadTexts: cdspTranscodeProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cdspTranscodeProfileEntry.setDescription('An entry in cdspTranscodeProfileTable indicates the transcode DSPFarm profile maximum configured sessions and available sessions. Each DSPFarm transcode profile configured in the voice gateway forms a new entry to this table. The entry is deleted when the transcode DSPFarm profile is deleted. A new entry to this table can be created and an existing entry can be deleted using object cdspTranscodeProfileRowStatus indexed with a profile number.')
cdspTranscodeProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cdspTranscodeProfileId.setStatus('current')
if mibBuilder.loadTexts: cdspTranscodeProfileId.setDescription('This object indicates the profile number of the DSPFarm transcode profile.')
cdspTranscodeProfileMaxConfSess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdspTranscodeProfileMaxConfSess.setStatus('current')
if mibBuilder.loadTexts: cdspTranscodeProfileMaxConfSess.setDescription('This object indicates the maximum transcode sessions configured on the DSPFarm transcode profile for the voice gateway.')
cdspTranscodeProfileMaxAvailSess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspTranscodeProfileMaxAvailSess.setStatus('current')
if mibBuilder.loadTexts: cdspTranscodeProfileMaxAvailSess.setDescription('This object indicates the total number of available transcode sessions per transcode profile from the configured maximum transcode sessions per transcode profile for the voice gateway.')
cdspTranscodeProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdspTranscodeProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cdspTranscodeProfileRowStatus.setDescription('This object is used to create a new entry or delete an existing entry in cdspTranscodeProfileTable. The storage type for all the entries created would be volatile. To retain the configured entries. One must write the configuration to memory in the voice gateway.')
cdspMtpProfileTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 4), )
if mibBuilder.loadTexts: cdspMtpProfileTable.setStatus('current')
if mibBuilder.loadTexts: cdspMtpProfileTable.setDescription('This table contains information about each MTP DSPFarm profile. It gives the maximum number of MTP sessions configured and the number of available sessions per profile.')
cdspMtpProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 4, 1), ).setIndexNames((0, "CISCO-DSP-MGMT-MIB", "cdspMtpProfileId"))
if mibBuilder.loadTexts: cdspMtpProfileEntry.setStatus('current')
if mibBuilder.loadTexts: cdspMtpProfileEntry.setDescription('An entry in cdspMtpProfileTable indicates the MTP DSPFarm profile maximum configured sessions and available sessions. Each DSPFarm MTP profile configured in the voice gateway forms a new entry to this table. The entry is deleted when the MTP DSPFarm profile is deleted. A new entry to this table can be created and an existing entry can be deleted using object cdspMtpProfileRowStatus indexed with a profile number.')
cdspMtpProfileId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: cdspMtpProfileId.setStatus('current')
if mibBuilder.loadTexts: cdspMtpProfileId.setDescription('This object indicates the profile number of the DSPFarm MTP profile.')
cdspMtpProfileMaxConfSoftSess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdspMtpProfileMaxConfSoftSess.setStatus('current')
if mibBuilder.loadTexts: cdspMtpProfileMaxConfSoftSess.setDescription('This object indicates the maximum MTP software sessions configured per DSPFarm MTP profile for the voice gateway.')
cdspMtpProfileMaxConfHardSess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdspMtpProfileMaxConfHardSess.setStatus('current')
if mibBuilder.loadTexts: cdspMtpProfileMaxConfHardSess.setDescription('This object indicates the maximum MTP hardware sessions configured per DSPFarm MTP profile for the voice gateway.')
cdspMtpProfileMaxAvailHardSess = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 4, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspMtpProfileMaxAvailHardSess.setStatus('current')
if mibBuilder.loadTexts: cdspMtpProfileMaxAvailHardSess.setDescription('This object indicates the total number of available MTP sessions per MTP profile from the configured maximum MTP sessions per MTP profile for the voice gateway.')
cdspMtpProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 6, 4, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cdspMtpProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: cdspMtpProfileRowStatus.setDescription('This object is used to create a new entry or delete an existing entry in cdspMtpProfileTable. The storage type for all the entries created would be volatile. To retain the configured entries. One must write the configuration to memory in the voice gateway.')
cdspTotAvailTranscodeSess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 7, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspTotAvailTranscodeSess.setStatus('current')
if mibBuilder.loadTexts: cdspTotAvailTranscodeSess.setDescription('This object indicates the total number of transcode sessions available for the voice gateway. The value is equal to summation of all the values returned by transcode profile object cdspTranscodeProfileMaxAvailSess.')
cdspTotUnusedTranscodeSess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 7, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspTotUnusedTranscodeSess.setStatus('current')
if mibBuilder.loadTexts: cdspTotUnusedTranscodeSess.setDescription('This object indicates the total number of unused transcode sessions.')
cdspTotAvailMtpSess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 7, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspTotAvailMtpSess.setStatus('current')
if mibBuilder.loadTexts: cdspTotAvailMtpSess.setDescription('This object indicates the total number of MTP sessions available for the voice gateway. The value is equal to summation of all the values returned by MTP profile object cdspMtpProfileMaxAvailHardSess.')
cdspTotUnusedMtpSess = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 7, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cdspTotUnusedMtpSess.setStatus('current')
if mibBuilder.loadTexts: cdspTotUnusedMtpSess.setDescription('This object indicates the total number of unused MTP sessions.')
cdspMIBEnableCardStatusNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspMIBEnableCardStatusNotification.setStatus('current')
if mibBuilder.loadTexts: cdspMIBEnableCardStatusNotification.setDescription('This variable controls whether the system produces the cdspMIBCardStateNotification. A false value will prevent DSP card fatal notifications from being generated by this system.')
cdspEnableOperStateNotification = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 3, 2), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspEnableOperStateNotification.setStatus('current')
if mibBuilder.loadTexts: cdspEnableOperStateNotification.setDescription('This variable controls whether the system produces the cdspOperStateNotification. A false value will prevent a DSP operational state notification from being generated by this system.')
cdspVideoUsageNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 3, 3), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspVideoUsageNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: cdspVideoUsageNotificationEnable.setDescription("This object specifies whether the system produces cdspVideoUsageNotification. 'true': Video usage notification is generated by this system. 'false': Video usage notification is not generated by this system.")
cdspVideoOutOfResourceNotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 86, 1, 3, 4), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cdspVideoOutOfResourceNotificationEnable.setStatus('current')
if mibBuilder.loadTexts: cdspVideoOutOfResourceNotificationEnable.setDescription("This object specifies whether the system produces cdspVideoOutOfResourceNotification. 'true': Video out-of-resource notification is generated by this system. 'false': Video out-of-resource notification is not generated by this system.")
cdspMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 86, 2))
cdspMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 86, 2, 0))
cdspMIBCardStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 86, 2, 0, 1)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspCardState"))
if mibBuilder.loadTexts: cdspMIBCardStateNotification.setStatus('current')
if mibBuilder.loadTexts: cdspMIBCardStateNotification.setDescription('A cdspMIBCardStateNotification is sent when the cdspCardState enters into normal(1) state and enters into or exits from fatal(4) state.')
cdspOperStateNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 86, 2, 0, 2)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspOperState"), ("ENTITY-MIB", "entPhysicalName"))
if mibBuilder.loadTexts: cdspOperStateNotification.setStatus('current')
if mibBuilder.loadTexts: cdspOperStateNotification.setDescription('A cdspOperStateNotification is sent when the cdspOperState enters into normal(1) state or shutdown(2) state. The value of entPhysicalName contains the name of the DSP.')
cdspVideoUsageNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 86, 2, 0, 3)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspCardVideoPoolUtilization"), ("CISCO-DSP-MGMT-MIB", "cdspCardVideoPoolUtilizationThreshold"))
if mibBuilder.loadTexts: cdspVideoUsageNotification.setStatus('current')
if mibBuilder.loadTexts: cdspVideoUsageNotification.setDescription('This notification is sent when cdspCardVideoPoolUtilization reaches the specified threshold (cdspCardVideoPoolUtilizationThreshold). cdspCardVideoPoolUtilization indicates the DSP video pool usage at the time this notification is sent. cdspCardVideoPoolUtilizationThreshold indicates the threshold configured to trigger this notification. DSP video pool resource usage (cdspCardVideoPoolUtilization) is updated and compared against the threshold (cdspCardVideoPoolUtilizationThreshold) in the events below: 1. A call that requires DSP video resource connects. 2. A call that requires DSP video resource disconnects. 3. DSPFarm profile for video resource is enabled. 4. DSPFarm profile for video resource is disabled. During comparison, if usage is larger than threshold, this notification is generated.')
cdspVideoOutOfResourceNotification = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 86, 2, 0, 4)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspCardVideoPoolUtilization"), ("CISCO-DSP-MGMT-MIB", "cdspCardVideoPoolUtilizationThreshold"))
if mibBuilder.loadTexts: cdspVideoOutOfResourceNotification.setStatus('current')
if mibBuilder.loadTexts: cdspVideoOutOfResourceNotification.setDescription('A cdspVideoOutOfResourceNotification is sent when there is not enough DSP resource in the video pool of the system for video services. cdspCardVideoPoolUtilization indicates the DSP video pool usage at the time this notification is sent. cdspCardVideoPoolUtilizationThreshold indicates the threshold configured to trigger this notification. DSP video resources required is computed for each incoming call that requires DSP video resources. If there is not enough video resource, this call will not have any video capabilities and is treated as audio-only; and this notification is generated.')
cdspMgmtConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 86, 3))
cdspMgmtCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 1))
cdspMgmtGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2))
cdspMgmtCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 1, 1)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspMgmtGeneralInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtCompliance = cdspMgmtCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cdspMgmtCompliance.setDescription('The compliance statement for systems that contain a Cisco DSP card and its associated DSPs.')
cdspMgmtComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 1, 2)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspMgmtGeneralInfoGroup"), ("CISCO-DSP-MGMT-MIB", "cdspChannelGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtComplianceRev1 = cdspMgmtComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cdspMgmtComplianceRev1.setDescription('The compliance statement for systems that contain a Cisco DSP card and its associated DSPs.')
cdspMgmtComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 1, 3)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspMgmtGeneralInfoGroup"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtNotificationsGroup"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtExtGeneralInfoGroup"), ("CISCO-DSP-MGMT-MIB", "cdspChannelGroup"), ("CISCO-DSP-MGMT-MIB", "cdspChannelExtGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVoiceInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtComplianceRev2 = cdspMgmtComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: cdspMgmtComplianceRev2.setDescription('The compliance statement for systems that contain a Cisco DSP card and its associated DSPs.')
cdspMgmtComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 1, 4)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspMgmtGeneralInfoGroup"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtNotificationsGroup"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtExtGeneralInfoGroup"), ("CISCO-DSP-MGMT-MIB", "cdspChannelGroup"), ("CISCO-DSP-MGMT-MIB", "cdspChannelExtGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVoiceInfoGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtComplianceRev3 = cdspMgmtComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: cdspMgmtComplianceRev3.setDescription('The compliance statement for systems that contain a Cisco DSP card and its associated DSPs.')
cdspMgmtComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 1, 5)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspMgmtExtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspChannelGroup"), ("CISCO-DSP-MGMT-MIB", "cdspChannelExtGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVoiceInfoGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtComplianceRev4 = cdspMgmtComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: cdspMgmtComplianceRev4.setDescription('The compliance statement for systems that contain a Cisco DSP card and its associated DSPs. This replaces cdspMgmtComplianceRev3.')
cdspMgmtComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 1, 6)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspMgmtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtNotificationsGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtExtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspChannelGroup"), ("CISCO-DSP-MGMT-MIB", "cdspChannelExtGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVoiceInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspVQMGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtComplianceRev5 = cdspMgmtComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: cdspMgmtComplianceRev5.setDescription('The compliance statement for systems that contain a Cisco DSP card and its associated DSPs. This replaces cdspMgmtComplianceRev4.')
cdspMgmtComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 1, 7)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspMgmtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtNotificationsGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtExtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspChannelGroup"), ("CISCO-DSP-MGMT-MIB", "cdspChannelExtGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVQMGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVoiceInfoGroupRev2"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtComplianceRev6 = cdspMgmtComplianceRev6.setStatus('deprecated')
if mibBuilder.loadTexts: cdspMgmtComplianceRev6.setDescription('The compliance statement for systems that contain a Cisco DSP card and its associated DSPs. This replaces cdspMgmtComplianceRev5.')
cdspMgmtComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 1, 8)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspMgmtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtNotificationsGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtExtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspChannelGroup"), ("CISCO-DSP-MGMT-MIB", "cdspChannelExtGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVQMGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVoiceInfoGroupRev2"), ("CISCO-DSP-MGMT-MIB", "cdspTransCodingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtComplianceRev7 = cdspMgmtComplianceRev7.setStatus('deprecated')
if mibBuilder.loadTexts: cdspMgmtComplianceRev7.setDescription('The compliance statement for systems that contain a Cisco DSP card and its associated DSPs. This replaces cdspMgmtComplianceRev5.')
cdspMgmtComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 1, 9)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspMgmtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtNotificationsGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtExtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspChannelGroup"), ("CISCO-DSP-MGMT-MIB", "cdspChannelExtGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVQMGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVoiceInfoGroupRev2"), ("CISCO-DSP-MGMT-MIB", "cdspTransCodingGroup1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtComplianceRev8 = cdspMgmtComplianceRev8.setStatus('deprecated')
if mibBuilder.loadTexts: cdspMgmtComplianceRev8.setDescription('The compliance statement for systems that contain a Cisco DSP card and its associated DSPs.')
cdspMgmtComplianceRev9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 1, 10)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspMgmtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtNotificationsGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtExtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspChannelGroup"), ("CISCO-DSP-MGMT-MIB", "cdspChannelExtGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVQMGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVoiceInfoGroupRev2"), ("CISCO-DSP-MGMT-MIB", "cdspTransCodingGroup1"), ("CISCO-DSP-MGMT-MIB", "cdspUtilInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtComplianceRev9 = cdspMgmtComplianceRev9.setStatus('deprecated')
if mibBuilder.loadTexts: cdspMgmtComplianceRev9.setDescription('The compliance statement for systems that contain a Cisco DSP card and its associated DSPs.')
cdspMgmtComplianceRev10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 1, 11)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspMgmtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtNotificationsGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtExtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspChannelGroup"), ("CISCO-DSP-MGMT-MIB", "cdspChannelExtGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVQMGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVoiceInfoGroupRev2"), ("CISCO-DSP-MGMT-MIB", "cdspTransCodingGroup1"), ("CISCO-DSP-MGMT-MIB", "cdspUtilInfoGroup"), ("CISCO-DSP-MGMT-MIB", "cdspDspfarmInfoGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtComplianceRev10 = cdspMgmtComplianceRev10.setStatus('deprecated')
if mibBuilder.loadTexts: cdspMgmtComplianceRev10.setDescription('The compliance statement for systems that contain a Cisco DSP card and its associated DSPs.')
cdspMgmtComplianceRev11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 1, 12)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspMgmtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtNotificationsGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtExtGeneralInfoGroupRev1"), ("CISCO-DSP-MGMT-MIB", "cdspChannelGroup"), ("CISCO-DSP-MGMT-MIB", "cdspChannelExtGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVQMGroup"), ("CISCO-DSP-MGMT-MIB", "cdspVoiceInfoGroupRev2"), ("CISCO-DSP-MGMT-MIB", "cdspTransCodingGroup1"), ("CISCO-DSP-MGMT-MIB", "cdspUtilInfoGroup"), ("CISCO-DSP-MGMT-MIB", "cdspDspfarmInfoGroup"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtVideoInfoGroup"), ("CISCO-DSP-MGMT-MIB", "cdspMgmtVideoNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtComplianceRev11 = cdspMgmtComplianceRev11.setStatus('current')
if mibBuilder.loadTexts: cdspMgmtComplianceRev11.setDescription('The compliance statement for systems that contain a Cisco DSP card and its associated DSPs.')
cdspMgmtGeneralInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 1)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspCardIndex"), ("CISCO-DSP-MGMT-MIB", "cdspCardState"), ("CISCO-DSP-MGMT-MIB", "cdspCardResourceUtilization"), ("CISCO-DSP-MGMT-MIB", "cdspCardLastHiWaterUtilization"), ("CISCO-DSP-MGMT-MIB", "cdspCardLastResetTime"), ("CISCO-DSP-MGMT-MIB", "cdspOperState"), ("CISCO-DSP-MGMT-MIB", "cdspAlarms"), ("CISCO-DSP-MGMT-MIB", "cdspLastAlarmCause"), ("CISCO-DSP-MGMT-MIB", "cdspLastAlarmCauseText"), ("CISCO-DSP-MGMT-MIB", "cdspLastAlarmTime"), ("CISCO-DSP-MGMT-MIB", "cdspMIBEnableCardStatusNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtGeneralInfoGroup = cdspMgmtGeneralInfoGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cdspMgmtGeneralInfoGroup.setDescription('A collection of objects providing the Digital Signal Processing related information.')
cdspChannelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 2)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspCardMaxChanPerDSP"), ("CISCO-DSP-MGMT-MIB", "cdspTotalChannels"), ("CISCO-DSP-MGMT-MIB", "cdspInUseChannels"), ("CISCO-DSP-MGMT-MIB", "cdspActiveChannels"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspChannelGroup = cdspChannelGroup.setStatus('current')
if mibBuilder.loadTexts: cdspChannelGroup.setDescription('A collection of objects providing information specific for multiple channels per DSP.')
cdspMgmtExtGeneralInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 3)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspTotalDsp"), ("CISCO-DSP-MGMT-MIB", "cdspFailedDsp"), ("CISCO-DSP-MGMT-MIB", "cdspCongestedDsp"), ("CISCO-DSP-MGMT-MIB", "cdspNormalDsp"), ("CISCO-DSP-MGMT-MIB", "cdspDspSwitchOverThreshold"), ("CISCO-DSP-MGMT-MIB", "cdspNx64Dsp"), ("CISCO-DSP-MGMT-MIB", "cdspDspNum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtExtGeneralInfoGroup = cdspMgmtExtGeneralInfoGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cdspMgmtExtGeneralInfoGroup.setDescription('A collection of objects providing information for DSP.')
cdspVoiceInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 4)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspRtpSidPayloadType"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpControl"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpTransInterval"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpRecvMultiplier"), ("CISCO-DSP-MGMT-MIB", "cdspVadAdaptive"), ("CISCO-DSP-MGMT-MIB", "cdspDtmfPowerLevel"), ("CISCO-DSP-MGMT-MIB", "cdspDtmfPowerTwist"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspVoiceInfoGroup = cdspVoiceInfoGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cdspVoiceInfoGroup.setDescription('A collection of objects providing DSP voice application parameters.')
cdspMgmtNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 5)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspMIBCardStateNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtNotificationsGroup = cdspMgmtNotificationsGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cdspMgmtNotificationsGroup.setDescription('The notifications which a DSP Management entity is required to implement.')
cdspChannelExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 6)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspSigBearerChannelSplit"), ("CISCO-DSP-MGMT-MIB", "cdspNumCongestionOccurrence"), ("CISCO-DSP-MGMT-MIB", "cdspXNumberOfBearerCalls"), ("CISCO-DSP-MGMT-MIB", "cdspXNumberOfSigCalls"), ("CISCO-DSP-MGMT-MIB", "cdspXAvailableBearerBandwidth"), ("CISCO-DSP-MGMT-MIB", "cdspXAvailableSigBandwidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspChannelExtGroup = cdspChannelExtGroup.setStatus('current')
if mibBuilder.loadTexts: cdspChannelExtGroup.setDescription('A collection of objects providing DSP channels splitting information.')
cdspVoiceInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 7)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspRtpSidPayloadType"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpControl"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpTransInterval"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpRecvMultiplier"), ("CISCO-DSP-MGMT-MIB", "cdspVadAdaptive"), ("CISCO-DSP-MGMT-MIB", "cdspDtmfPowerLevel"), ("CISCO-DSP-MGMT-MIB", "cdspDtmfPowerTwist"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpTimerControl"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspVoiceInfoGroupRev1 = cdspVoiceInfoGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cdspVoiceInfoGroupRev1.setDescription('A collection of objects providing DSP voice application parameters.')
cdspMgmtExtGeneralInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 8)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspTotalDsp"), ("CISCO-DSP-MGMT-MIB", "cdspFailedDsp"), ("CISCO-DSP-MGMT-MIB", "cdspCongestedDsp"), ("CISCO-DSP-MGMT-MIB", "cdspNormalDsp"), ("CISCO-DSP-MGMT-MIB", "cdspDspSwitchOverThreshold"), ("CISCO-DSP-MGMT-MIB", "cdspNx64Dsp"), ("CISCO-DSP-MGMT-MIB", "cdspDspNum"), ("CISCO-DSP-MGMT-MIB", "cdspCodecTemplateSupported"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtExtGeneralInfoGroupRev1 = cdspMgmtExtGeneralInfoGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cdspMgmtExtGeneralInfoGroupRev1.setDescription('This group replaces cdspMgmtExtGeneralInfoGroup. A collection of objects providing information for DSP.')
cdspMgmtGeneralInfoGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 9)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspCardIndex"), ("CISCO-DSP-MGMT-MIB", "cdspCardState"), ("CISCO-DSP-MGMT-MIB", "cdspCardResourceUtilization"), ("CISCO-DSP-MGMT-MIB", "cdspCardLastHiWaterUtilization"), ("CISCO-DSP-MGMT-MIB", "cdspCardLastResetTime"), ("CISCO-DSP-MGMT-MIB", "cdspOperState"), ("CISCO-DSP-MGMT-MIB", "cdspAlarms"), ("CISCO-DSP-MGMT-MIB", "cdspLastAlarmCause"), ("CISCO-DSP-MGMT-MIB", "cdspLastAlarmCauseText"), ("CISCO-DSP-MGMT-MIB", "cdspLastAlarmTime"), ("CISCO-DSP-MGMT-MIB", "cdspMIBEnableCardStatusNotification"), ("CISCO-DSP-MGMT-MIB", "cdspEnableOperStateNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtGeneralInfoGroupRev1 = cdspMgmtGeneralInfoGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cdspMgmtGeneralInfoGroupRev1.setDescription('A collection of objects providing the Digital Signal Processing related information.')
cdspMgmtNotificationsGroupRev1 = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 10)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspMIBCardStateNotification"), ("CISCO-DSP-MGMT-MIB", "cdspOperStateNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtNotificationsGroupRev1 = cdspMgmtNotificationsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cdspMgmtNotificationsGroupRev1.setDescription('The notifications which a DSP Management entity is required to implement.')
cdspVQMGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 11)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspVqmControl"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpXrControl"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpXrTransMultiplier"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpXrGminDefault"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpXrExtRfactor"), ("CISCO-DSP-MGMT-MIB", "cdspVqmThreshSES"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspVQMGroup = cdspVQMGroup.setStatus('current')
if mibBuilder.loadTexts: cdspVQMGroup.setDescription('This group includs VQM (Voice Quality Monitor) related information. It is mandatory only if VQM is supported.')
cdspVoiceInfoGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 12)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspRtpSidPayloadType"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpControl"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpTransInterval"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpRecvMultiplier"), ("CISCO-DSP-MGMT-MIB", "cdspVadAdaptive"), ("CISCO-DSP-MGMT-MIB", "cdspDtmfPowerLevel"), ("CISCO-DSP-MGMT-MIB", "cdspDtmfPowerTwist"), ("CISCO-DSP-MGMT-MIB", "cdspRtcpTimerControl"), ("CISCO-DSP-MGMT-MIB", "cdspPktLossConcealment"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspVoiceInfoGroupRev2 = cdspVoiceInfoGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cdspVoiceInfoGroupRev2.setDescription('A collection of objects providing DSP voice application parameters.')
cdspTransCodingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 13)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspTransparentIpIp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspTransCodingGroup = cdspTransCodingGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cdspTransCodingGroup.setDescription('A collection of objects providing DSP transcoding related parameters.')
cdspTransCodingGroup1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 14)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspVoiceModeIpIp"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspTransCodingGroup1 = cdspTransCodingGroup1.setStatus('current')
if mibBuilder.loadTexts: cdspTransCodingGroup1.setDescription('A collection of objects providing DSP transcoding related parameters for voice.')
cdspUtilInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 15)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspCurrentUtilCap"), ("CISCO-DSP-MGMT-MIB", "cdspCurrentAvlbCap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspUtilInfoGroup = cdspUtilInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cdspUtilInfoGroup.setDescription('A collection of objects providing DSP codec capacity usage .')
cdspDspfarmInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 16)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspGlobMaxConfTranscodeSess"), ("CISCO-DSP-MGMT-MIB", "cdspGlobMaxAvailTranscodeSess"), ("CISCO-DSP-MGMT-MIB", "cdspTranscodeProfileRowStatus"), ("CISCO-DSP-MGMT-MIB", "cdspTranscodeProfileMaxConfSess"), ("CISCO-DSP-MGMT-MIB", "cdspTranscodeProfileMaxAvailSess"), ("CISCO-DSP-MGMT-MIB", "cdspMtpProfileRowStatus"), ("CISCO-DSP-MGMT-MIB", "cdspMtpProfileMaxConfSoftSess"), ("CISCO-DSP-MGMT-MIB", "cdspMtpProfileMaxConfHardSess"), ("CISCO-DSP-MGMT-MIB", "cdspMtpProfileMaxAvailHardSess"), ("CISCO-DSP-MGMT-MIB", "cdspTotAvailTranscodeSess"), ("CISCO-DSP-MGMT-MIB", "cdspTotUnusedTranscodeSess"), ("CISCO-DSP-MGMT-MIB", "cdspTotAvailMtpSess"), ("CISCO-DSP-MGMT-MIB", "cdspTotUnusedMtpSess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspDspfarmInfoGroup = cdspDspfarmInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cdspDspfarmInfoGroup.setDescription('A collection of objects providing DSPFarm session configuration, availability and utilization.')
cdspMgmtVideoNotificationsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 17)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspVideoUsageNotification"), ("CISCO-DSP-MGMT-MIB", "cdspVideoOutOfResourceNotification"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtVideoNotificationsGroup = cdspMgmtVideoNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: cdspMgmtVideoNotificationsGroup.setDescription('A collection of notifications related to DSP video resource.')
cdspMgmtVideoInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 86, 3, 2, 18)).setObjects(("CISCO-DSP-MGMT-MIB", "cdspCardVideoPoolUtilization"), ("CISCO-DSP-MGMT-MIB", "cdspCardVideoPoolUtilizationThreshold"), ("CISCO-DSP-MGMT-MIB", "cdspVideoUsageNotificationEnable"), ("CISCO-DSP-MGMT-MIB", "cdspVideoOutOfResourceNotificationEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cdspMgmtVideoInfoGroup = cdspMgmtVideoInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cdspMgmtVideoInfoGroup.setDescription('A collection of objects related to DSP video resource.')
mibBuilder.exportSymbols("CISCO-DSP-MGMT-MIB", cdspStatusXEntry=cdspStatusXEntry, cdspTotUnusedTranscodeSess=cdspTotUnusedTranscodeSess, cdspMIBNotifications=cdspMIBNotifications, cdspStatusEntry=cdspStatusEntry, cdspGlobMaxAvailTranscodeSess=cdspGlobMaxAvailTranscodeSess, cdspEnableOperStateNotification=cdspEnableOperStateNotification, cdspMgmtComplianceRev1=cdspMgmtComplianceRev1, cdspLastAlarmTime=cdspLastAlarmTime, cdspDspNum=cdspDspNum, cdspLastAlarmCauseText=cdspLastAlarmCauseText, cdspTranscodeProfileRowStatus=cdspTranscodeProfileRowStatus, cdspNumCongestionOccurrence=cdspNumCongestionOccurrence, cdspCardLastResetTime=cdspCardLastResetTime, cdspMgmtExtGeneralInfoGroup=cdspMgmtExtGeneralInfoGroup, cdspTotAvailTranscodeSess=cdspTotAvailTranscodeSess, cdspCardStatusEntry=cdspCardStatusEntry, cdspMtpProfileMaxConfHardSess=cdspMtpProfileMaxConfHardSess, cdspDspfarmInfoGroup=cdspDspfarmInfoGroup, cdspDtmfPowerLevel=cdspDtmfPowerLevel, cdspTranscodeProfileTable=cdspTranscodeProfileTable, cdspInUseChannels=cdspInUseChannels, cdspCongestedDsp=cdspCongestedDsp, cdspMIBNotificationEnables=cdspMIBNotificationEnables, cdspObjects=cdspObjects, cdspActiveChannels=cdspActiveChannels, cdspMtpProfileTable=cdspMtpProfileTable, cdspCardResourceUtilization=cdspCardResourceUtilization, cdspOperState=cdspOperState, cdspMgmtCompliance=cdspMgmtCompliance, cdspMgmtNotifications=cdspMgmtNotifications, cdspLastAlarmCause=cdspLastAlarmCause, cdspXAvailableSigBandwidth=cdspXAvailableSigBandwidth, cdspVideoUsageNotification=cdspVideoUsageNotification, cdspGlobMaxConfTranscodeSess=cdspGlobMaxConfTranscodeSess, cdspMIBNotificationPrefix=cdspMIBNotificationPrefix, cdspMgmtConformance=cdspMgmtConformance, cdspMgmtExtGeneralInfoGroupRev1=cdspMgmtExtGeneralInfoGroupRev1, cdspTranscodeProfileMaxConfSess=cdspTranscodeProfileMaxConfSess, cdspVoiceModeIpIp=cdspVoiceModeIpIp, PYSNMP_MODULE_ID=ciscoDspMgmtMIB, cdspVadAdaptive=cdspVadAdaptive, cdspVqmThreshSES=cdspVqmThreshSES, cdspMtpProfileEntry=cdspMtpProfileEntry, cdspVoiceInfoGroupRev1=cdspVoiceInfoGroupRev1, cdspRtcpRecvMultiplier=cdspRtcpRecvMultiplier, cdspDspfarmObjects=cdspDspfarmObjects, cdspCardVideoPoolUtilizationThreshold=cdspCardVideoPoolUtilizationThreshold, cdspRtcpControl=cdspRtcpControl, cdspMIBCardStateNotification=cdspMIBCardStateNotification, cdspNx64Dsp=cdspNx64Dsp, cdspVqmControl=cdspVqmControl, cdspRtcpXrExtRfactor=cdspRtcpXrExtRfactor, cdspMgmtNotificationsGroupRev1=cdspMgmtNotificationsGroupRev1, cdspVideoOutOfResourceNotification=cdspVideoOutOfResourceNotification, cdspMtpProfileRowStatus=cdspMtpProfileRowStatus, cdspMgmtGroups=cdspMgmtGroups, cdspChannelGroup=cdspChannelGroup, cdspXNumberOfBearerCalls=cdspXNumberOfBearerCalls, cdspXNumberOfSigCalls=cdspXNumberOfSigCalls, cdspVoiceParamEntry=cdspVoiceParamEntry, cdspTransCodingGroup=cdspTransCodingGroup, cdspUtilEntry=cdspUtilEntry, cdspVoiceParamTable=cdspVoiceParamTable, cdspTotAvailMtpSess=cdspTotAvailMtpSess, cdspMgmtComplianceRev5=cdspMgmtComplianceRev5, cdspDspSwitchOverThreshold=cdspDspSwitchOverThreshold, cdspCardIndex=cdspCardIndex, cdspCurrentAvlbCap=cdspCurrentAvlbCap, cdspFailedDsp=cdspFailedDsp, cdspTotalDsp=cdspTotalDsp, cdspTotUnusedMtpSess=cdspTotUnusedMtpSess, cdspStatusXTable=cdspStatusXTable, cdspMgmtCompliances=cdspMgmtCompliances, cdspTranscodeProfileMaxAvailSess=cdspTranscodeProfileMaxAvailSess, cdspMtpProfileMaxConfSoftSess=cdspMtpProfileMaxConfSoftSess, cdspChannelExtGroup=cdspChannelExtGroup, cdspVoiceObjects=cdspVoiceObjects, cdspRtpSidPayloadType=cdspRtpSidPayloadType, cdspVQMGroup=cdspVQMGroup, cdspMgmtNotificationsGroup=cdspMgmtNotificationsGroup, cdspMgmtVideoInfoGroup=cdspMgmtVideoInfoGroup, cdspCodecPoolIndex=cdspCodecPoolIndex, cdspMtpProfileId=cdspMtpProfileId, cdspNormalDsp=cdspNormalDsp, cdspTransparentIpIp=cdspTransparentIpIp, cdspMtpProfileMaxAvailHardSess=cdspMtpProfileMaxAvailHardSess, cdspMgmtComplianceRev7=cdspMgmtComplianceRev7, cdspMgmtComplianceRev2=cdspMgmtComplianceRev2, cdspCardVideoPoolUtilization=cdspCardVideoPoolUtilization, cdspMgmtGeneralInfoGroup=cdspMgmtGeneralInfoGroup, cdspRtcpXrControl=cdspRtcpXrControl, cdspCardStatusTable=cdspCardStatusTable, cdspRtcpXrGminDefault=cdspRtcpXrGminDefault, cdspMgmtComplianceRev11=cdspMgmtComplianceRev11, cdspTransCodingGroup1=cdspTransCodingGroup1, cdspUtilTable=cdspUtilTable, cdspDtmfPowerTwist=cdspDtmfPowerTwist, cdspMgmtComplianceRev3=cdspMgmtComplianceRev3, cdspVideoUsageNotificationEnable=cdspVideoUsageNotificationEnable, cdspRtcpTimerControl=cdspRtcpTimerControl, cdspStatusTable=cdspStatusTable, cdspMgmtComplianceRev8=cdspMgmtComplianceRev8, cdspXAvailableBearerBandwidth=cdspXAvailableBearerBandwidth, ciscoDspMgmtMIB=ciscoDspMgmtMIB, cdspTranscodeProfileEntry=cdspTranscodeProfileEntry, cdspVoiceInfoGroup=cdspVoiceInfoGroup, cdspRtcpXrTransMultiplier=cdspRtcpXrTransMultiplier, cdspDspfarmUtilObjects=cdspDspfarmUtilObjects, cdspMgmtObjects=cdspMgmtObjects, cdspUtilInfoGroup=cdspUtilInfoGroup, cdspMgmtComplianceRev4=cdspMgmtComplianceRev4, cdspTotalChannels=cdspTotalChannels, cdspPktLossConcealment=cdspPktLossConcealment, cdspCurrentUtilCap=cdspCurrentUtilCap, cdspMgmtGeneralInfoGroupRev1=cdspMgmtGeneralInfoGroupRev1, cdspMgmtComplianceRev6=cdspMgmtComplianceRev6, cdspMgmtComplianceRev9=cdspMgmtComplianceRev9, cdspCardMaxChanPerDSP=cdspCardMaxChanPerDSP, cdspVideoOutOfResourceNotificationEnable=cdspVideoOutOfResourceNotificationEnable, cdspRtcpTransInterval=cdspRtcpTransInterval, cdspMIBEnableCardStatusNotification=cdspMIBEnableCardStatusNotification, cdspMgmtComplianceRev10=cdspMgmtComplianceRev10, cdspCardState=cdspCardState, cdspAlarms=cdspAlarms, cdspTranscodeProfileId=cdspTranscodeProfileId, cdspVoiceInfoGroupRev2=cdspVoiceInfoGroupRev2, cdspOperStateNotification=cdspOperStateNotification, cdspCardObjects=cdspCardObjects, cdspUtilObjects=cdspUtilObjects, cdspCardLastHiWaterUtilization=cdspCardLastHiWaterUtilization, cdspSigBearerChannelSplit=cdspSigBearerChannelSplit, cdspMgmtVideoNotificationsGroup=cdspMgmtVideoNotificationsGroup, cdspCodecTemplateSupported=cdspCodecTemplateSupported)
