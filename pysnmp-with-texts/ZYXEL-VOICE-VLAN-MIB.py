#
# PySNMP MIB module ZYXEL-VOICE-VLAN-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZYXEL-VOICE-VLAN-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:52:12 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
EnabledStatus, = mibBuilder.importSymbols("P-BRIDGE-MIB", "EnabledStatus")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
MibIdentifier, Counter64, TimeTicks, Bits, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, ObjectIdentity, iso, ModuleIdentity, NotificationType, IpAddress, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Counter64", "TimeTicks", "Bits", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "ObjectIdentity", "iso", "ModuleIdentity", "NotificationType", "IpAddress", "Unsigned32")
DisplayString, TextualConvention, MacAddress, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "MacAddress", "RowStatus")
esMgmt, = mibBuilder.importSymbols("ZYXEL-ES-SMI", "esMgmt")
zyxelVoiceVlan = ModuleIdentity((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 96))
if mibBuilder.loadTexts: zyxelVoiceVlan.setLastUpdated('201207010000Z')
if mibBuilder.loadTexts: zyxelVoiceVlan.setOrganization('Enterprise Solution ZyXEL')
if mibBuilder.loadTexts: zyxelVoiceVlan.setContactInfo('')
if mibBuilder.loadTexts: zyxelVoiceVlan.setDescription('The subtree for voice vlan')
zyxelVoiceVlanSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 96, 1))
zyxelVoiceVlanID = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 96, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyxelVoiceVlanID.setStatus('current')
if mibBuilder.loadTexts: zyxelVoiceVlanID.setDescription('Select the VLAN ID as voice VLAN feature.')
zyxelVoiceVlanPriority = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 96, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyxelVoiceVlanPriority.setStatus('current')
if mibBuilder.loadTexts: zyxelVoiceVlanPriority.setDescription('Set the priority of the voice traffic.')
zyxelVoiceVlanMaxNumberOfOUI = MibScalar((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 96, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zyxelVoiceVlanMaxNumberOfOUI.setStatus('current')
if mibBuilder.loadTexts: zyxelVoiceVlanMaxNumberOfOUI.setDescription('The maximum number of Voice VLAN OUI entries that can be created.')
zyxelVoiceVlanOUITable = MibTable((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 96, 1, 6), )
if mibBuilder.loadTexts: zyxelVoiceVlanOUITable.setStatus('current')
if mibBuilder.loadTexts: zyxelVoiceVlanOUITable.setDescription('The table contains Voice VLAN OUI configuration.')
zyxelVoiceVlanOUIEntry = MibTableRow((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 96, 1, 6, 1), ).setIndexNames((0, "ZYXEL-VOICE-VLAN-MIB", "zyVoiceVlanOUIAddress"), (0, "ZYXEL-VOICE-VLAN-MIB", "zyVoiceVlanOUIMask"))
if mibBuilder.loadTexts: zyxelVoiceVlanOUIEntry.setStatus('current')
if mibBuilder.loadTexts: zyxelVoiceVlanOUIEntry.setDescription('An entry contains voice VLAN OUI configuration.')
zyVoiceVlanOUIAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 96, 1, 6, 1, 1), MacAddress())
if mibBuilder.loadTexts: zyVoiceVlanOUIAddress.setStatus('current')
if mibBuilder.loadTexts: zyVoiceVlanOUIAddress.setDescription('Set a MAC address to add to the OUI list.')
zyVoiceVlanOUIMask = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 96, 1, 6, 1, 2), MacAddress())
if mibBuilder.loadTexts: zyVoiceVlanOUIMask.setStatus('current')
if mibBuilder.loadTexts: zyVoiceVlanOUIMask.setDescription('Set a mask to identify OUI addresses.')
zyVoiceVlanOUIDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 96, 1, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyVoiceVlanOUIDescription.setStatus('current')
if mibBuilder.loadTexts: zyVoiceVlanOUIDescription.setDescription('A descriptive name for this OUI.')
zyVoiceVlanOUIRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 890, 1, 15, 3, 96, 1, 6, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: zyVoiceVlanOUIRowStatus.setStatus('current')
if mibBuilder.loadTexts: zyVoiceVlanOUIRowStatus.setDescription('This object allows entries to be created and deleted from the OUI table.')
mibBuilder.exportSymbols("ZYXEL-VOICE-VLAN-MIB", zyVoiceVlanOUIMask=zyVoiceVlanOUIMask, zyxelVoiceVlanMaxNumberOfOUI=zyxelVoiceVlanMaxNumberOfOUI, zyVoiceVlanOUIRowStatus=zyVoiceVlanOUIRowStatus, zyxelVoiceVlanOUIEntry=zyxelVoiceVlanOUIEntry, zyxelVoiceVlanID=zyxelVoiceVlanID, zyxelVoiceVlanPriority=zyxelVoiceVlanPriority, PYSNMP_MODULE_ID=zyxelVoiceVlan, zyxelVoiceVlanSetup=zyxelVoiceVlanSetup, zyxelVoiceVlanOUITable=zyxelVoiceVlanOUITable, zyxelVoiceVlan=zyxelVoiceVlan, zyVoiceVlanOUIDescription=zyVoiceVlanOUIDescription, zyVoiceVlanOUIAddress=zyVoiceVlanOUIAddress)
