#
# PySNMP MIB module WWP-LEOS-VLAN-TAG-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/WWP-LEOS-VLAN-TAG-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:38:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ObjectIdentity, MibIdentifier, Counter32, Counter64, Bits, ModuleIdentity, Integer32, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, Unsigned32, IpAddress, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "MibIdentifier", "Counter32", "Counter64", "Bits", "ModuleIdentity", "Integer32", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "Unsigned32", "IpAddress", "NotificationType")
TextualConvention, DisplayString, MacAddress, TruthValue, TimeStamp, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "MacAddress", "TruthValue", "TimeStamp", "RowStatus")
wwpModulesLeos, = mibBuilder.importSymbols("WWP-SMI", "wwpModulesLeos")
wwpLeosVlanMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5))
wwpLeosVlanMIB.setRevisions(('2007-09-29 17:00', '2003-01-15 17:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: wwpLeosVlanMIB.setRevisionsDescriptions(('Added VLAN statistics.', 'Initial creation.',))
if mibBuilder.loadTexts: wwpLeosVlanMIB.setLastUpdated('200709291700Z')
if mibBuilder.loadTexts: wwpLeosVlanMIB.setOrganization('Ciena, Inc')
if mibBuilder.loadTexts: wwpLeosVlanMIB.setContactInfo(' Mib Meister 115 North Sullivan Road Spokane Valley, WA 99037 USA Phone: +1 509 242 9000 Email: support@ciena.com')
if mibBuilder.loadTexts: wwpLeosVlanMIB.setDescription('This MIB module defines the managed objects for the VLAN, specific for the WWP products.')
class VlanId(TextualConvention, Integer32):
    description = 'A Vlan ID represents a Broadcast Domain.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 24576)

class VlanTag(TextualConvention, Integer32):
    description = 'A 12-bit ID used in the VLAN Tag header.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 4094)

wwpLeosVlanMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1))
wwpLeosVlan = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1))
wwpLeosVlanEPR = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 2))
wwpLeosVlanMIBNotificationPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 2))
wwpLeosVlanMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 2, 0))
wwpLeosVlanMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 3))
wwpLeosVlanMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 3, 1))
wwpLeosVlanMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 3, 2))
wwpLeosMaxVlans = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMaxVlans.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMaxVlans.setDescription('The maximum number of VLANs that this device supports.')
wwpLeosMaxSupportedVlanTagId = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosMaxSupportedVlanTagId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosMaxSupportedVlanTagId.setDescription('The maximum value of VLAN Tag ID that this device supports.')
wwpLeosNumVlans = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosNumVlans.setStatus('current')
if mibBuilder.loadTexts: wwpLeosNumVlans.setDescription('The current number of VLANs that are configured in this device.')
wwpLeosVlanTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 4), )
if mibBuilder.loadTexts: wwpLeosVlanTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTable.setDescription('The (conceptual) table listing the config parameters for the VLAN.')
wwpLeosVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 4, 1), ).setIndexNames((0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanId"))
if mibBuilder.loadTexts: wwpLeosVlanEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanEntry.setDescription('An entry (conceptual row) in the wwpLeosVlanTable.')
wwpLeosVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 4, 1, 1), VlanId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanId.setDescription('A unique identifier for the VLAN.')
wwpLeosVlanName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVlanName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanName.setDescription('Name associated with this VLAN Entry.')
wwpLeosVlanStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVlanStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'. To delete a row in this table, there should not be any port/tag associated with this VLAN.")
wwpLeosVlanMacLrnState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('enabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVlanMacLrnState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanMacLrnState.setDescription('Setting this object will enable or disable MAC learning for the VLAN.')
wwpLeosVlanMacLrnOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2), ("vsOverride", 3))).clone('enabled')).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanMacLrnOperState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanMacLrnOperState.setDescription('Displays the operational status of MAC learning for the VLAN.')
wwpLeosVlanTranslationVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24576))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVlanTranslationVlan.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTranslationVlan.setDescription('The translated VLAN for the given ingress VLAN specified by wwpLeosVlanId. Setting this MIB object to 0 will result in unsetting the translation VLAN for given ingress VLAN wwpLeosVlanId.')
wwpLeosVlanEgressTpid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tpid8100", 1), ("tpid9100", 2), ("tpid88A8", 3))).clone('tpid8100')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVlanEgressTpid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanEgressTpid.setDescription('This object specifies the tpid used at egress for frames that egress a port on this vlan. This is used in conjunction with port egress tpid policy described in wwpLeosVplsVirtualCircuitEtherTypePolicy.')
wwpLeosVlanTagMemberTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 5), )
if mibBuilder.loadTexts: wwpLeosVlanTagMemberTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTagMemberTable.setDescription('The (conceptual) table listing the configuration parameters for the members of the VLANs.')
wwpLeosVlanTagMemberEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 5, 1), ).setIndexNames((0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanId"), (0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanMemberPortId"), (0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanMemberTagId"))
if mibBuilder.loadTexts: wwpLeosVlanTagMemberEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTagMemberEntry.setDescription('An entry (conceptual row) in the wwpLeosVlanTagMemberTable.')
wwpLeosVlanMemberPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanMemberPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanMemberPortId.setDescription('The port ID to be associated with this VLAN.')
wwpLeosVlanMemberTagId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 5, 1, 2), VlanTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanMemberTagId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanMemberTagId.setDescription('The VLAN Tag ID used by the port on this VLAN. If the switch is being used as a traditional Layer 2 device, then the value of wwpLeosVlanMemberTagId should be same as wwpLeosVlanMemberId.')
wwpLeosVlanMemberStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVlanMemberStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanMemberStatus.setDescription("Used to manage the creation and deletion of the conceptual rows in this table. To create a row in this table, a manager must set this object to 'createAndGo'.")
wwpLeosVlanCircuitTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 6), )
if mibBuilder.loadTexts: wwpLeosVlanCircuitTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanCircuitTable.setDescription('The (conceptual) table listing the virtual circuit table.')
wwpLeosVlanCircuitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 6, 1), ).setIndexNames((0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosCircuitIndex"))
if mibBuilder.loadTexts: wwpLeosVlanCircuitEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanCircuitEntry.setDescription('The virtual circuit table entry indexed by virtual circuit index. To create an entry, use the SNMP multiple set operation because wwpLeosCircuitVlanId, wwpLeosCircuitName and wwpLeosCircuitType are mandatory while creating entry in the table.')
wwpLeosCircuitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCircuitIndex.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCircuitIndex.setDescription('This represents the virtual circuit index in the table.')
wwpLeosCircuitVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 6, 1, 2), VlanId()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCircuitVlanId.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCircuitVlanId.setDescription('This represents the VLAN ID associated with virtual circuit index in the table.')
wwpLeosCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ethernet", 1), ("mpls", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCircuitType.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCircuitType.setDescription('This represents the type of virtual circuit eth or mpls.')
wwpLeosCircuitName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 6, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCircuitName.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCircuitName.setDescription('This represents the name associated with the virtual circuit.')
wwpLeosCircuitPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCircuitPriority.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCircuitPriority.setDescription('This represents the 802.1D priority associated with the virtual circuit.')
wwpLeosCircuitDataTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCircuitDataTunnelState.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCircuitDataTunnelState.setDescription("This represents the data tunnel state associated with the virtual circuit. Setting to 'on' enables the tunnel for data frames. Setting to 'off' disables it.")
wwpLeosCircuitCtrlProtocolTunnelState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosCircuitCtrlProtocolTunnelState.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCircuitCtrlProtocolTunnelState.setDescription("This represents the control frame tunnel state associated with the virtual circuit. Setting to 'on' enables the tunnel for control frames. Setting to 'off' disables it.")
wwpLeosCircuitNumEndPoints = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosCircuitNumEndPoints.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCircuitNumEndPoints.setDescription('This represents the number of end points associated with this entry.')
wwpLeosCircuitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 6, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosCircuitStatus.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosCircuitStatus.setDescription("Setting this object to 'createAndGo' will create the entry and by default will enable control frame and data frame tunnel . Setting this object to 'destroy' will delete the entry from the table for given VLAN.")
wwpLeosVlanCircuitPortExclusiveTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 7), )
if mibBuilder.loadTexts: wwpLeosVlanCircuitPortExclusiveTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanCircuitPortExclusiveTable.setDescription('The (conceptual) table listing the layer 2 control frame tunnel status on a VLAN.')
wwpLeosVlanCircuitPortExclusiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 7, 1), ).setIndexNames((0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosCircuitIndex"), (0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosPortId"))
if mibBuilder.loadTexts: wwpLeosVlanCircuitPortExclusiveEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanCircuitPortExclusiveEntry.setDescription('The layer 2 control frame protocol tunnel entry for the VLAN.')
wwpLeosPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosPortId.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosPortId.setDescription('This specifies the port which is the end point for in this virtual circuit.')
wwpLeosPortExclusiveStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 7, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosPortExclusiveStatus.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosPortExclusiveStatus.setDescription("Setting this object to 'createAndGo' will create the entry and designate the port as the end point of the virtual circuit. Setting this object to 'destroy' will delete the entry from the table for the given virtual circuit.")
wwpLeosVlanCircuitCtrlProtocolTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 8), )
if mibBuilder.loadTexts: wwpLeosVlanCircuitCtrlProtocolTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanCircuitCtrlProtocolTable.setDescription('The (conceptual) table listing the layer 2 control frame protocol status tunnel for a given VLAN.')
wwpLeosVlanCircuitCtrlProtocolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 8, 1), ).setIndexNames((0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosCircuitIndex"), (0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanl2ProtocolNum"))
if mibBuilder.loadTexts: wwpLeosVlanCircuitCtrlProtocolEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanCircuitCtrlProtocolEntry.setDescription('The layer 2 control frame protocol tunnel entry for the VLAN.')
wwpLeosVlanl2ProtocolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))).clone(namedValues=NamedValues(("l28021x", 1), ("rstp", 2), ("ciscoCdp", 3), ("ciscoDtp", 4), ("ciscoPagp", 5), ("ciscoPvst", 6), ("ciscoUplinkFast", 7), ("ciscoUdlp", 8), ("ciscoVtp", 9), ("gvrp", 10), ("lacp", 11), ("lacpMarker", 12), ("lldp", 13), ("oam", 14), ("vlanBridge", 15)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2ProtocolNum.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2ProtocolNum.setDescription('This object represent the list of protocols supported by the device.')
wwpLeosVlanl2Type = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("discard", 1), ("peer", 2), ("tunnel", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVlanl2Type.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2Type.setDescription("Setting this object to 'discard' will cause wwpLeosProtocolNum frames arriving at the specified UNI to be discarded. Setting this to 'peer' will cause the wwpLeosProtocolNum frame to be processed by the provider network and cause the provider network to behave as a peer. Setting this to 'tunnel' will cause the wwpLeosProtocolNum frame to be tunneled.")
wwpLeosVlanCircuitStats = MibIdentifier((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 9))
wwpLeosVlanl2AllRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 9, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2AllRxPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2AllRxPkts.setDescription('Specifies total number of packets ingressed on VLAN.')
wwpLeosVlanl2AllTunneledPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 9, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2AllTunneledPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2AllTunneledPkts.setDescription('Specifies the total number of packets tunneled on the VLAN.')
wwpLeosVlanl2AllPeerPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 9, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2AllPeerPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2AllPeerPkts.setDescription('Specifies the total number of packets peered on the VLAN.')
wwpLeosVlanl2AllDiscardedPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 9, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2AllDiscardedPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2AllDiscardedPkts.setDescription('Specifies the total number of discarded packets on the VLAN.')
wwpLeosVlanl2AllDecodedPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 9, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2AllDecodedPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2AllDecodedPkts.setDescription('Specifies the total number of packets tunneled and then restored on the VLAN.')
wwpLeosVlanl2AllDecodedFailures = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 9, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2AllDecodedFailures.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2AllDecodedFailures.setDescription("Specifies the total number of packets failed to 'untunnel' on the VLAN.")
wwpLeosVlanl2AllTunneledSubcriberPortPkts = MibScalar((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 9, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2AllTunneledSubcriberPortPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2AllTunneledSubcriberPortPkts.setDescription('Specifies the total number of tunneled packets received on the subscriber port on the VLAN.')
wwpLeosVlanCircuitProtocolStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 10), )
if mibBuilder.loadTexts: wwpLeosVlanCircuitProtocolStatsTable.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanCircuitProtocolStatsTable.setDescription('The (conceptual) table listing the layer 2 control frame protocol statistics for a given VLAN.')
wwpLeosVlanCircuitProtocolStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 10, 1), ).setIndexNames((0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosCircuitIndex"), (0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanl2ProtocolNum"))
if mibBuilder.loadTexts: wwpLeosVlanCircuitProtocolStatsEntry.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanCircuitProtocolStatsEntry.setDescription('The layer 2 control frame protocol statistics entry for the VLAN.')
wwpLeosVlanl2RxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 10, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2RxPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2RxPkts.setDescription('Specifies the number of packets ingressed matching the protocol.')
wwpLeosVlanl2TunneledPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 10, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2TunneledPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2TunneledPkts.setDescription('Specifies the number of packets tunneled.')
wwpLeosVlanl2PeerPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 10, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2PeerPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2PeerPkts.setDescription('Specifies the number of peered packets.')
wwpLeosVlanl2DiscardedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 10, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2DiscardedPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2DiscardedPkts.setDescription('Specifies the number of discarded packets.')
wwpLeosVlanl2DecodedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 10, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2DecodedPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2DecodedPkts.setDescription('Specifies the number of packets tunneled and then restored.')
wwpLeosVlanl2DecodedFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 10, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2DecodedFailures.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2DecodedFailures.setDescription("Specifies the number of packets failed to 'untunnel'.")
wwpLeosVlanl2TunneledSubcriberPortPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 10, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanl2TunneledSubcriberPortPkts.setStatus('deprecated')
if mibBuilder.loadTexts: wwpLeosVlanl2TunneledSubcriberPortPkts.setDescription('Specifies the number of tunneled packets received on the subscriber port.')
wwpLeosVlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 11), )
if mibBuilder.loadTexts: wwpLeosVlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanStatsTable.setDescription('A list of VLAN statistics entries.')
wwpLeosVlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 11, 1), ).setIndexNames((0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanStatsVlanId"))
if mibBuilder.loadTexts: wwpLeosVlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanStatsEntry.setDescription('An entry in the VLAN stats table.')
wwpLeosVlanStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 11, 1, 1), VlanTag()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVlanStatsVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanStatsVlanId.setDescription('The VLAN ID for this statistics entry.')
wwpLeosVlanStatsCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 11, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanStatsCreateTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanStatsCreateTime.setDescription('The value of sysUpTime when this control entry was last activated. This value can be used by the management station to ensure that the entry has not been deleted and recreated between polls.')
wwpLeosVlanStatsUniOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 11, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanStatsUniOctets.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanStatsUniOctets.setDescription('The number of unicast bytes through this VLAN.')
wwpLeosVlanStatsUniPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 11, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanStatsUniPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanStatsUniPkts.setDescription('The number of unicast packets through this VLAN.')
wwpLeosVlanStatsNonUniOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 11, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanStatsNonUniOctets.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanStatsNonUniOctets.setDescription('The number of broadcast or multicast bytes through this VLAN.')
wwpLeosVlanStatsNonUniPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 11, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanStatsNonUniPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanStatsNonUniPkts.setDescription('The number of broadcast or multicast packets through this VLAN.')
wwpLeosVlanStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 11, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVlanStatsStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanStatsStatus.setDescription("Setting this object to 'createAndGo' will enable the collection of statistics on the specified VLAN, clear the initial statistics bucket and add the entry to the table. Setting this object to 'destroy' will disable the collection of statistics and remove the entry from the table for given VLAN.")
wwpLeosVlanStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 11, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVlanStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanStatsClear.setDescription('Setting this object to True will reset the statistics of the given VLAN. Read on this object will always return False.')
wwpLeosVlanStatsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVlanStatsPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanStatsPortId.setDescription('The port ID to be associated with this VLAN statistics entry. When a portId is specified, VLAN statistics gathering is restricted to the specified port. A port ID of zero means no port restriction. Support for this object is currently not implemented.')
wwpLeosVlanTotalStatsTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 12), )
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsTable.setDescription('A list of VLAN statistics entries.')
wwpLeosVlanTotalStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 12, 1), ).setIndexNames((0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanTotalStatsVlanId"))
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsEntry.setDescription('An entry in the VLAN statistics table.')
wwpLeosVlanTotalStatsVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 12, 1, 1), VlanTag()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsVlanId.setDescription('The VLAN ID for this statistics entry.')
wwpLeosVlanTotalStatsCreateTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 12, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsCreateTime.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsCreateTime.setDescription('The value of sysUpTime when this control entry was last activated. This value can be used by the management station to ensure that the entry has not been deleted and recreated between polls.')
wwpLeosVlanTotalStatsUniOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 12, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsUniOctets.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsUniOctets.setDescription('The number of unicast bytes through this VLAN.')
wwpLeosVlanTotalStatsUniPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 12, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsUniPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsUniPkts.setDescription('The number of unicast packets through this VLAN.')
wwpLeosVlanTotalStatsNonUniOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 12, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsNonUniOctets.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsNonUniOctets.setDescription('The number of broadcast or multicast bytes through this VLAN.')
wwpLeosVlanTotalStatsNonUniPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 12, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsNonUniPkts.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsNonUniPkts.setDescription('The number of broadcast or multicast packets through this VLAN.')
wwpLeosVlanTotalStatsStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 12, 1, 7), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsStatus.setDescription("Setting this object to 'createAndGo' will enable the collection of statistics on the specified VLAN, clear the initial statistics bucket and add the entry to the table. Setting this object to 'destroy' will disable the collection of statistics and remove the entry from the table for given VLAN.")
wwpLeosVlanTotalStatsClear = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 12, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsClear.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsClear.setDescription('Setting this object to True resets the statistics of the given VLAN. Read on this object will always return False.')
wwpLeosVlanTotalStatsPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsPortId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTotalStatsPortId.setDescription('The port ID to be associated with this VLAN statistics entry. When a portId is specified, the VLAN statistics gathering is restricted to the specified port. A port ID of zero means no port restriction. Support for this object is currently not implemented.')
wwpLeosVlanTranslationTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 13), )
if mibBuilder.loadTexts: wwpLeosVlanTranslationTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTranslationTable.setDescription('VLAN translation table.')
wwpLeosVlanTranslationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 13, 1), ).setIndexNames((0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanTranslationPgId"), (0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanTranslationFrameVid"))
if mibBuilder.loadTexts: wwpLeosVlanTranslationEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTranslationEntry.setDescription('An entry in the VLAN translation table.')
wwpLeosVlanTranslationPgId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: wwpLeosVlanTranslationPgId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTranslationPgId.setDescription('Logical port interface for which the translation applies.')
wwpLeosVlanTranslationFrameVid = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 13, 1, 2), VlanTag())
if mibBuilder.loadTexts: wwpLeosVlanTranslationFrameVid.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTranslationFrameVid.setDescription('Frame Ingres-egress vlan-id.')
wwpLeosVlanTranslationVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 13, 1, 3), VlanTag()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVlanTranslationVlanId.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTranslationVlanId.setDescription('Assign/stamp to this internal VLAN.')
wwpLeosVlanTranslationStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 1, 13, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: wwpLeosVlanTranslationStatus.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanTranslationStatus.setDescription('Setting this object to CreateAndGo will create a VLAn tranlsation entry. Setting this object to destroy will delete a translation entry.')
wwpLeosVlanEPRTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 2, 1), )
if mibBuilder.loadTexts: wwpLeosVlanEPRTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanEPRTable.setDescription('The (conceptual) table listing the egress port restriction parameters for the VLAN.')
wwpLeosVlanEPREntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 2, 1, 1), ).setIndexNames((0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanId"))
if mibBuilder.loadTexts: wwpLeosVlanEPREntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanEPREntry.setDescription('The egress port restriction entry for a VLAN.')
wwpLeosVlanEPRState = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVlanEPRState.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanEPRState.setDescription("Setting this object to 'enable' will enable the egress port restriction on this VLAN. Setting this object to 'disable' will disable the egress port restriction on this VLAN.")
wwpLeosVlanEPRGrpMemTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 2, 2), )
if mibBuilder.loadTexts: wwpLeosVlanEPRGrpMemTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanEPRGrpMemTable.setDescription('The (conceptual) table listing the egress port restriction group for the VLAN members.')
wwpLeosVlanEPRGrpMemEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 2, 2, 1), ).setIndexNames((0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanId"), (0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanMemberPortId"), (0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanMemberTagId"))
if mibBuilder.loadTexts: wwpLeosVlanEPRGrpMemEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanEPRGrpMemEntry.setDescription('The egress port restriction group entry for the VLAN members.')
wwpLeosVlanEPRGrpName = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("groupA", 1), ("groupB", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVlanEPRGrpName.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanEPRGrpName.setDescription('Setting this object will assign the specified group to the given port-tag-vlan combination.')
wwpLeosVlanEPRGrpAccessTable = MibTable((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 2, 3), )
if mibBuilder.loadTexts: wwpLeosVlanEPRGrpAccessTable.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanEPRGrpAccessTable.setDescription('The (conceptual) table listing the group access for the given VLAN.')
wwpLeosVlanEPRGrpAccessEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 2, 3, 1), ).setIndexNames((0, "WWP-LEOS-VLAN-TAG-MIB", "wwpLeosVlanId"))
if mibBuilder.loadTexts: wwpLeosVlanEPRGrpAccessEntry.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanEPRGrpAccessEntry.setDescription('Entry for the group access for the given VLAN.')
wwpLeosVlanEPRGrpAAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 2, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("groupA", 1), ("groupB", 2), ("groupAB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVlanEPRGrpAAccess.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanEPRGrpAAccess.setDescription('Setting this object will allow group A members for this VLAN to talk to specified group.')
wwpLeosVlanEPRGrpBAccess = MibTableColumn((1, 3, 6, 1, 4, 1, 6141, 2, 60, 5, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("groupA", 1), ("groupB", 2), ("groupAB", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wwpLeosVlanEPRGrpBAccess.setStatus('current')
if mibBuilder.loadTexts: wwpLeosVlanEPRGrpBAccess.setDescription('Setting this object will allow group B members for this VLAN to talk to specified group.')
mibBuilder.exportSymbols("WWP-LEOS-VLAN-TAG-MIB", wwpLeosVlanTranslationVlanId=wwpLeosVlanTranslationVlanId, wwpLeosVlanStatsStatus=wwpLeosVlanStatsStatus, wwpLeosVlanl2AllTunneledPkts=wwpLeosVlanl2AllTunneledPkts, wwpLeosVlanl2AllDiscardedPkts=wwpLeosVlanl2AllDiscardedPkts, wwpLeosVlanTranslationTable=wwpLeosVlanTranslationTable, wwpLeosVlanTotalStatsNonUniOctets=wwpLeosVlanTotalStatsNonUniOctets, wwpLeosVlanId=wwpLeosVlanId, wwpLeosVlanTotalStatsTable=wwpLeosVlanTotalStatsTable, wwpLeosVlanStatsUniPkts=wwpLeosVlanStatsUniPkts, wwpLeosVlanTotalStatsUniOctets=wwpLeosVlanTotalStatsUniOctets, wwpLeosVlanCircuitTable=wwpLeosVlanCircuitTable, wwpLeosVlanStatsTable=wwpLeosVlanStatsTable, wwpLeosVlanStatus=wwpLeosVlanStatus, wwpLeosVlanEgressTpid=wwpLeosVlanEgressTpid, wwpLeosVlanl2PeerPkts=wwpLeosVlanl2PeerPkts, wwpLeosVlanTotalStatsUniPkts=wwpLeosVlanTotalStatsUniPkts, wwpLeosCircuitName=wwpLeosCircuitName, wwpLeosVlanMIB=wwpLeosVlanMIB, wwpLeosVlanl2TunneledSubcriberPortPkts=wwpLeosVlanl2TunneledSubcriberPortPkts, wwpLeosCircuitDataTunnelState=wwpLeosCircuitDataTunnelState, wwpLeosVlanCircuitStats=wwpLeosVlanCircuitStats, wwpLeosVlanTranslationPgId=wwpLeosVlanTranslationPgId, wwpLeosVlanl2AllRxPkts=wwpLeosVlanl2AllRxPkts, wwpLeosCircuitStatus=wwpLeosCircuitStatus, wwpLeosVlanEPRGrpBAccess=wwpLeosVlanEPRGrpBAccess, wwpLeosCircuitType=wwpLeosCircuitType, wwpLeosVlanEPR=wwpLeosVlanEPR, wwpLeosVlanEPREntry=wwpLeosVlanEPREntry, wwpLeosVlanMIBNotificationPrefix=wwpLeosVlanMIBNotificationPrefix, wwpLeosVlanTotalStatsVlanId=wwpLeosVlanTotalStatsVlanId, wwpLeosVlanMIBConformance=wwpLeosVlanMIBConformance, wwpLeosVlanl2RxPkts=wwpLeosVlanl2RxPkts, wwpLeosVlanMemberPortId=wwpLeosVlanMemberPortId, wwpLeosVlanCircuitCtrlProtocolEntry=wwpLeosVlanCircuitCtrlProtocolEntry, wwpLeosVlanName=wwpLeosVlanName, wwpLeosVlanTagMemberEntry=wwpLeosVlanTagMemberEntry, wwpLeosPortExclusiveStatus=wwpLeosPortExclusiveStatus, wwpLeosVlanEPRState=wwpLeosVlanEPRState, wwpLeosVlanMIBNotifications=wwpLeosVlanMIBNotifications, wwpLeosVlanl2Type=wwpLeosVlanl2Type, wwpLeosPortId=wwpLeosPortId, wwpLeosVlanEPRGrpAAccess=wwpLeosVlanEPRGrpAAccess, wwpLeosVlan=wwpLeosVlan, wwpLeosVlanl2ProtocolNum=wwpLeosVlanl2ProtocolNum, wwpLeosVlanStatsUniOctets=wwpLeosVlanStatsUniOctets, wwpLeosVlanStatsNonUniPkts=wwpLeosVlanStatsNonUniPkts, wwpLeosVlanTotalStatsStatus=wwpLeosVlanTotalStatsStatus, wwpLeosVlanEPRGrpMemTable=wwpLeosVlanEPRGrpMemTable, wwpLeosCircuitVlanId=wwpLeosCircuitVlanId, wwpLeosVlanl2TunneledPkts=wwpLeosVlanl2TunneledPkts, wwpLeosVlanStatsEntry=wwpLeosVlanStatsEntry, wwpLeosVlanMIBObjects=wwpLeosVlanMIBObjects, PYSNMP_MODULE_ID=wwpLeosVlanMIB, wwpLeosVlanMemberStatus=wwpLeosVlanMemberStatus, wwpLeosVlanCircuitCtrlProtocolTable=wwpLeosVlanCircuitCtrlProtocolTable, wwpLeosCircuitIndex=wwpLeosCircuitIndex, VlanTag=VlanTag, wwpLeosVlanMemberTagId=wwpLeosVlanMemberTagId, wwpLeosVlanTotalStatsCreateTime=wwpLeosVlanTotalStatsCreateTime, wwpLeosVlanCircuitPortExclusiveTable=wwpLeosVlanCircuitPortExclusiveTable, wwpLeosVlanTagMemberTable=wwpLeosVlanTagMemberTable, wwpLeosVlanCircuitProtocolStatsEntry=wwpLeosVlanCircuitProtocolStatsEntry, wwpLeosVlanl2AllTunneledSubcriberPortPkts=wwpLeosVlanl2AllTunneledSubcriberPortPkts, wwpLeosVlanTranslationStatus=wwpLeosVlanTranslationStatus, wwpLeosVlanMacLrnState=wwpLeosVlanMacLrnState, wwpLeosVlanTable=wwpLeosVlanTable, wwpLeosVlanTotalStatsPortId=wwpLeosVlanTotalStatsPortId, wwpLeosVlanTotalStatsClear=wwpLeosVlanTotalStatsClear, wwpLeosVlanStatsCreateTime=wwpLeosVlanStatsCreateTime, wwpLeosVlanTranslationVlan=wwpLeosVlanTranslationVlan, wwpLeosVlanl2DecodedPkts=wwpLeosVlanl2DecodedPkts, wwpLeosVlanEPRGrpAccessEntry=wwpLeosVlanEPRGrpAccessEntry, wwpLeosVlanl2AllDecodedPkts=wwpLeosVlanl2AllDecodedPkts, wwpLeosVlanCircuitProtocolStatsTable=wwpLeosVlanCircuitProtocolStatsTable, wwpLeosVlanEPRGrpName=wwpLeosVlanEPRGrpName, wwpLeosVlanCircuitEntry=wwpLeosVlanCircuitEntry, wwpLeosCircuitPriority=wwpLeosCircuitPriority, wwpLeosVlanCircuitPortExclusiveEntry=wwpLeosVlanCircuitPortExclusiveEntry, wwpLeosNumVlans=wwpLeosNumVlans, wwpLeosVlanTotalStatsEntry=wwpLeosVlanTotalStatsEntry, wwpLeosVlanStatsVlanId=wwpLeosVlanStatsVlanId, wwpLeosVlanEntry=wwpLeosVlanEntry, wwpLeosVlanMIBGroups=wwpLeosVlanMIBGroups, wwpLeosVlanEPRGrpAccessTable=wwpLeosVlanEPRGrpAccessTable, wwpLeosMaxSupportedVlanTagId=wwpLeosMaxSupportedVlanTagId, wwpLeosVlanl2AllPeerPkts=wwpLeosVlanl2AllPeerPkts, wwpLeosVlanTotalStatsNonUniPkts=wwpLeosVlanTotalStatsNonUniPkts, wwpLeosCircuitNumEndPoints=wwpLeosCircuitNumEndPoints, wwpLeosVlanl2AllDecodedFailures=wwpLeosVlanl2AllDecodedFailures, wwpLeosVlanTranslationEntry=wwpLeosVlanTranslationEntry, wwpLeosVlanMacLrnOperState=wwpLeosVlanMacLrnOperState, VlanId=VlanId, wwpLeosVlanStatsNonUniOctets=wwpLeosVlanStatsNonUniOctets, wwpLeosVlanTranslationFrameVid=wwpLeosVlanTranslationFrameVid, wwpLeosVlanStatsPortId=wwpLeosVlanStatsPortId, wwpLeosVlanMIBCompliances=wwpLeosVlanMIBCompliances, wwpLeosVlanStatsClear=wwpLeosVlanStatsClear, wwpLeosCircuitCtrlProtocolTunnelState=wwpLeosCircuitCtrlProtocolTunnelState, wwpLeosVlanl2DiscardedPkts=wwpLeosVlanl2DiscardedPkts, wwpLeosMaxVlans=wwpLeosMaxVlans, wwpLeosVlanEPRGrpMemEntry=wwpLeosVlanEPRGrpMemEntry, wwpLeosVlanEPRTable=wwpLeosVlanEPRTable, wwpLeosVlanl2DecodedFailures=wwpLeosVlanl2DecodedFailures)
