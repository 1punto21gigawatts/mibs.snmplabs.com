#
# PySNMP MIB module CISCO-SSL-PROXY-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-SSL-PROXY-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:12:50 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CiscoPort, = mibBuilder.importSymbols("CISCO-TC", "CiscoPort")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
IpAddress, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, NotificationType, Unsigned32, MibIdentifier, Counter64, Integer32, Counter32, ObjectIdentity, Gauge32, iso = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "NotificationType", "Unsigned32", "MibIdentifier", "Counter64", "Integer32", "Counter32", "ObjectIdentity", "Gauge32", "iso")
DisplayString, TimeStamp, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TimeStamp", "TruthValue", "TextualConvention", "RowStatus")
ciscoSslProxyMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 370))
ciscoSslProxyMIB.setRevisions(('2012-09-18 00:00', '2009-09-22 00:00', '2003-10-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoSslProxyMIB.setRevisionsDescriptions(('Added the following mib groups: cspSslResourceLimitNotifGroup cspSslResourceLimitNotifObjectsGroup', 'Added following OBJECT IDENTIFIER. - cspHttpHeaderInsertedInfo - cspHttpRedirectInfo - cspHttpHeaderInsertedSslInfoStats - cspHttpHeaderInsertedSslClientCertStats - cspHttpRedirectClientCertAuthFailedStats Added the following OBJECT-GROUPs - cspHttpHeaderInsertedSslInfoGroup - cspHttpHeaderInsertedSslClientCertGroup - cspHttpRedirectInfoGroup Deprecated MODULE-COMPLIANCE cspMIBCompliance Added new MODULE-COMPLIANCE cspMIBComplianceRev1', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoSslProxyMIB.setLastUpdated('201209180000Z')
if mibBuilder.loadTexts: ciscoSslProxyMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoSslProxyMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-ssl@cisco.com')
if mibBuilder.loadTexts: ciscoSslProxyMIB.setDescription('This MIB module is for managing a Secure Socket Layer (SSL) Proxy device which terminates and accelarates SSL and Transport Layer Security (TLS) transactions. The proxy device can act as a SSL server or a SSL client depending on the configuration and the application. In one application, the device acts as a proxy SSL server. It terminates SSL handshakes and TCP connections initiated by SSL clients. The device is configured with a key and a certificate bearing the identity of the SSL server. The device uses this identity to establish the SSL session on behalf of the server, offloading the key establishment and data encryption and decryption work. After the SSL session has been successfully established between the client and the proxy device, the device starts to receive and decrypt the encrypted data sent from the client and forward to the server. The device forwards the clear data to the server on a backend connection. Clear data sent from the server is encrypted by the proxy device before it is forwarded to the SSL client. Optionally, the proxy device is configured to reencrypt the decrypted data sent from the client to the server. The proxy device acts as a SSL client to initiate a SSL session to the server. The decrypted data is encrypted within this SSL session to be forwarded to the server. The encrypted data sent from the server to the device is decrypted and then reencrypted before it is forwarded to the client. In another application, the proxy device forwards data generated by one or more sources to the destination via a SSL session. The proxy device acts as a SSL client and intiates a SSL session to the next hop device. When data is received from the source, the proxy device forwards the data to the next hop using the SSL session. The next hop can continue to forward the data if it is not the destination. The proxy device supports a number of proxy services. Each proxy service defines the role of the proxy device, whether it acts as a SSL server or a SSL client. The rest of the configuration include cryptographic and protocol parameters. This MIB is used for monitoring the configuration, statuses and statistics of the proxy services and the protocols including TCP, SSL and TLS.')
cspMIBNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 0))
cspMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1))
cspMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 2))
cspGlobalConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 1))
cspPsConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2))
cspPsPolicyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 3))
cspPsKeyCertConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4))
cspTcpPolicyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 5))
cspSslPolicyConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 6))
cspTcpCountersInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 7))
cspTcpCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 8))
cspSslCountersInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 9))
cspSslCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 10))
cspSsl3Counters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 11))
cspTls1Counters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 12))
cspSslCryptoCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 13))
cspSslErrorCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14))
cspPsCounters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15))
cspPsSsl3Counters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 16))
cspPsTls1Counters = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 17))
cspCpuStatusInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 18))
cspHttpHeaderInsertedInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 19))
cspHttpRedirectInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 20))
cspSslResourceNotifInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 21))
cspHttpHeaderInsertedSslInfoStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 19, 1))
cspHttpHeaderInsertedSslClientCertStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 19, 2))
cspHttpRedirectClientCertAuthFailedStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 20, 1))
cspGcVersion = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspGcVersion.setStatus('current')
if mibBuilder.loadTexts: cspGcVersion.setDescription('The version information of the SSL proxy device, for display only.')
cspGcFIPSMode = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspGcFIPSMode.setReference('Federal Information Processing Standards Publication 140-2, Security Requirements for Cryptographic Modules.')
if mibBuilder.loadTexts: cspGcFIPSMode.setStatus('current')
if mibBuilder.loadTexts: cspGcFIPSMode.setDescription("An indication of whether or not the proxy device is operating in FIPS (Federal Information Processing Standards) approved mode. If 'true', the proxy device is operating in FIPS mode. When the device operates in FIPS mode, only approved cryptographic algorithms and key strengths are enabled. Authentication and other security requirements of FIPS will also be enforced in this mode.")
cspGcRSArc4128md5 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspGcRSArc4128md5.setReference('1. RFC 2246, The TLS Protocol Version 1.0, A.5. 2. IETF Draft <draft-freier-ssl-version3-02.txt>, The SSL Protocol Version 3.0, Appendix C.')
if mibBuilder.loadTexts: cspGcRSArc4128md5.setStatus('current')
if mibBuilder.loadTexts: cspGcRSArc4128md5.setDescription("An indication of whether or not the proxy device supports the cipher suite RSA_WITH_RC4_128_MD5. If 'true', the cipher suite is supported.")
cspGcRSArc4128sha = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspGcRSArc4128sha.setReference('1. RFC 2246, The TLS Protocol Version 1.0, A.5. 2. IETF Draft <draft-freier-ssl-version3-02.txt>, The SSL Protocol Version 3.0, Appendix C.')
if mibBuilder.loadTexts: cspGcRSArc4128sha.setStatus('current')
if mibBuilder.loadTexts: cspGcRSArc4128sha.setDescription("An indication of whether or not the proxy device supports the cipher suite RSA_WITH_RC4_128_SHA. If 'true', the cipher suite is supported.")
cspGcRSAdescbcsha = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspGcRSAdescbcsha.setReference('1. RFC 2246, The TLS Protocol Version 1.0, A.5. 2. IETF Draft <draft-freier-ssl-version3-02.txt>, The SSL Protocol Version 3.0, Appendix C.')
if mibBuilder.loadTexts: cspGcRSAdescbcsha.setStatus('current')
if mibBuilder.loadTexts: cspGcRSAdescbcsha.setDescription("An indication of whether or not the proxy device supports the cipher suite RSA_WITH_DES_CBC_SHA. If 'true', the cipher suite is supported.")
cspGcRSA3descbcsha = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 1, 6), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspGcRSA3descbcsha.setReference('1. RFC 2246, The TLS Protocol Version 1.0, A.5. 2. IETF Draft <draft-freier-ssl-version3-02.txt>, The SSL Protocol Version 3.0, Appendix C.')
if mibBuilder.loadTexts: cspGcRSA3descbcsha.setStatus('current')
if mibBuilder.loadTexts: cspGcRSA3descbcsha.setDescription("An indication of whether or not the proxy device supports the cipher suite RSA_WITH_3DES_EDE_CBC_SHA. If 'true', the cipher suite is supported.")
cspGcNotifyProxyServOperStatus = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspGcNotifyProxyServOperStatus.setStatus('current')
if mibBuilder.loadTexts: cspGcNotifyProxyServOperStatus.setDescription('An indication of whether or not a cspServOperStatus notification should be issued when the operation status of proxy services changes. If such a notification is desired, it is the responsibility of the management entity to ensure that the SNMP administrative model is configured in such a way as to allow the notification to be delivered.')
cspGcNotifyPSCertExpiring = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 1, 8), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspGcNotifyPSCertExpiring.setStatus('current')
if mibBuilder.loadTexts: cspGcNotifyPSCertExpiring.setDescription('An indication of whether or not a cspServCertExpiring notification should be issued when a proxy service certificate will be expiring in the configured time interval cspGcPSCertExpireInterval. If such a notification is desired, it is the responsibility of the management entity to ensure that the SNMP administrative model is configured in such a way as to allow the notification to be delivered.')
cspGcPSCertExpireInterval = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 720))).setUnits('hours').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspGcPSCertExpireInterval.setStatus('current')
if mibBuilder.loadTexts: cspGcPSCertExpireInterval.setDescription("The proxy service certificate expiration time interval, used to determine when the cspServCertExpiring notification should be issued if cspGcNotifyPSCertExpiring is 'true'. If this time interval is 0, no proxy service certification expiration will be checked.")
cspPsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1), )
if mibBuilder.loadTexts: cspPsTable.setStatus('current')
if mibBuilder.loadTexts: cspPsTable.setDescription('A list of proxy service configuration entries.')
cspPsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-SSL-PROXY-MIB", "cspPsName"), (0, "CISCO-SSL-PROXY-MIB", "cspPsListIndex"))
if mibBuilder.loadTexts: cspPsEntry.setStatus('current')
if mibBuilder.loadTexts: cspPsEntry.setDescription("The proxy service configuration entry. Each entry indicates the name and the index of a proxy service, and a set of configuration parameters to be applied on this proxy service. A unique name can be assigned to each proxy service. Optionally, multiple proxy services can be grouped into a proxy list. All the services in a list have the same name, and each service is assigned a unique index within the list. Each proxy service has a virtual and a server address. This entry reports the address and port configuration, and the administrative and operational statuses of each proxy service. If a service is not operational, the reason for its being 'down' is also reported.")
cspPsName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 50)))
if mibBuilder.loadTexts: cspPsName.setStatus('current')
if mibBuilder.loadTexts: cspPsName.setDescription('The name of a proxy service. A unique name string can be assigned to one proxy service or a list of proxy services. When the name is assigned to a list of proxy services, each proxy service is identified by a unique index within the list.')
cspPsListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256)))
if mibBuilder.loadTexts: cspPsListIndex.setStatus('current')
if mibBuilder.loadTexts: cspPsListIndex.setDescription('The unique index of a proxy service within a list. If the cspPsName string is assigned to a list of proxy services, this index is used to identify a proxy service within the list. If the cspPsName string is unique per proxy service, this index is not used, and the value shall be 0.')
cspPsServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("server", 1), ("client", 2))).clone('server')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPsServiceType.setStatus('current')
if mibBuilder.loadTexts: cspPsServiceType.setDescription("The type of proxy service: 'server(1)' or 'client(2)'. When servicing a 'server' type proxy service, the proxy device acts as a SSL server. It terminates the SSL handshake initiated by a SSL client, and forwards the data sent from the client to the destination. When servicing a 'client' type proxy service, the proxy device acts as a SSL client. It initiates a SSL handshake to a SSL server, and forwards data sent from one or more data sources to the SSL server.")
cspPsVirtualAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1, 1, 4), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPsVirtualAddressType.setStatus('current')
if mibBuilder.loadTexts: cspPsVirtualAddressType.setDescription('An indication of the type of address contained in cspPsVirtualAddress.')
cspPsVirtualAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1, 1, 5), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPsVirtualAddress.setStatus('current')
if mibBuilder.loadTexts: cspPsVirtualAddress.setDescription('The virtual address. This address is used by the data source to send data that can be received by the proxy device and forwarded to the destination.')
cspPsVirtualPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1, 1, 6), CiscoPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPsVirtualPort.setStatus('current')
if mibBuilder.loadTexts: cspPsVirtualPort.setDescription('The virtual TCP port number. This port number is used by the data source to send data that can be received by the proxy device and forwarded to the destination.')
cspPsServerAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1, 1, 7), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPsServerAddressType.setStatus('current')
if mibBuilder.loadTexts: cspPsServerAddressType.setDescription('An indication of the type of address contained in cspPsServerAddress.')
cspPsServerAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1, 1, 8), InetAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPsServerAddress.setStatus('current')
if mibBuilder.loadTexts: cspPsServerAddress.setDescription('The server address. This address is used by the proxy device to send or forward data to the destination.')
cspPsServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1, 1, 9), CiscoPort()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPsServerPort.setStatus('current')
if mibBuilder.loadTexts: cspPsServerPort.setDescription('The server TCP port number. This port number is used by the proxy device to send or forward data to the destination.')
cspPsAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2))).clone('down')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPsAdminStatus.setStatus('current')
if mibBuilder.loadTexts: cspPsAdminStatus.setDescription("The administrative status of the proxy service. Each proxy service can be configured to be administratively 'up' or 'down'. If the Adminstrative Status is 'down', the service will not be operational.")
cspPsOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPsOperStatus.setStatus('current')
if mibBuilder.loadTexts: cspPsOperStatus.setDescription("The operational status of a proxy service. For a proxy service to be operational, its administrative status needs to be 'up'. If the administrative status is 'up', the operational status will be changed from 'down' to 'up' automatically once all the required configuration parameters and resources, including necessary keys and certificates, become available. If one or more required resources are removed (e.g. the certificate has expired), the operational status will be changed to 'down' automatically.")
cspPsOperDownReason = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("other", 1), ("notApplicable", 2), ("noConnectivity", 3), ("noVirtualAddr", 4), ("noServerAddr", 5), ("noCert", 6), ("certNotConfigured", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPsOperDownReason.setStatus('current')
if mibBuilder.loadTexts: cspPsOperDownReason.setDescription("The reason for the operational status to be 'down'. Possible values are: other(1) : Unknown or undefined reason, notApplicable(2) : Administratively 'down', noConnectivity(3) : No Connectivity to the client, the server, or the gateway, noVirtualAddr(4) : Virtual Address not configured, noServerAddr(5) : Server Address not configured, noCert(6) : Certificate configured, but invalid or missing, certNotConfigured(7): Certificate not configured.")
cspPsConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 2, 1, 1, 13), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPsConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cspPsConfigRowStatus.setDescription("The conceptual row status of the proxy service configuration entry. An entry cannot have the status 'active' until values have been assigned to the following objects: cspPsVirtualAddress, cspPsVirtualPort, cspPsServerAddress and cspPsServerPort. This entry can be modified when the status is 'active'.")
cspPsPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 3, 1), )
if mibBuilder.loadTexts: cspPsPolicyTable.setStatus('current')
if mibBuilder.loadTexts: cspPsPolicyTable.setDescription('A list of proxy service policy configuration entries.')
cspPsPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 3, 1, 1), )
cspPsEntry.registerAugmentions(("CISCO-SSL-PROXY-MIB", "cspPsPolicyEntry"))
cspPsPolicyEntry.setIndexNames(*cspPsEntry.getIndexNames())
if mibBuilder.loadTexts: cspPsPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: cspPsPolicyEntry.setDescription('The proxy service policy entry. Each proxy service policy entry contains the name of each type of policy configured for the proxy service. A policy is a set of configuration parameters and rules to observe for implementing a protocol or an operation. One or more of the following policies can be configured for a proxy service: TCP protocol policy for virtual connections, TCP protocol policy for server connections, SSL protocol policy, HTTP header insertion policy, and URL rewrite policy.')
cspPspVirTcpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 3, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPspVirTcpPolicyName.setStatus('current')
if mibBuilder.loadTexts: cspPspVirTcpPolicyName.setDescription('The name of the TCP protocol policy configured for the virtual side connections. If no TCP policy is configured, the name will be a NULL string.')
cspPspSerTcpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 3, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPspSerTcpPolicyName.setStatus('current')
if mibBuilder.loadTexts: cspPspSerTcpPolicyName.setDescription('The name of the TCP protocol policy configured for the server side connections. If no TCP policy is configured, the name will be a NULL string.')
cspPspSslPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 3, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPspSslPolicyName.setStatus('current')
if mibBuilder.loadTexts: cspPspSslPolicyName.setDescription('The name of the SSL protocol policy configured for the SSL handshake and data encryption and decryption. If no SSL policy is configured, the name will be a NULL string.')
cspPspHttpHdrPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 3, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPspHttpHdrPolicyName.setStatus('current')
if mibBuilder.loadTexts: cspPspHttpHdrPolicyName.setDescription('The name of the HTTP header insertion policy. A number of fields can be inserted into the HTTP headers when the proxy service is forwarding data. The policy specifies the header insertion parameters. If no policy is configured, the name will be a NULL string.')
cspPspUrlRewritePolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 3, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPspUrlRewritePolicyName.setStatus('current')
if mibBuilder.loadTexts: cspPspUrlRewritePolicyName.setDescription('The name of the URL rewrite policy. The policy specifies configuration parameters for rewriting URLs in HTTP headers and payload. If no policy is configured, the name will be a NULL string.')
cspPsKeyCertTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1), )
if mibBuilder.loadTexts: cspPsKeyCertTable.setStatus('current')
if mibBuilder.loadTexts: cspPsKeyCertTable.setDescription('A list of proxy service key and certificate configuration entries.')
cspPsKeyCertEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1), ).setIndexNames((0, "CISCO-SSL-PROXY-MIB", "cspPsName"), (0, "CISCO-SSL-PROXY-MIB", "cspPsListIndex"), (0, "CISCO-SSL-PROXY-MIB", "cspPskcKeyUsage"))
if mibBuilder.loadTexts: cspPsKeyCertEntry.setStatus('current')
if mibBuilder.loadTexts: cspPsKeyCertEntry.setDescription('The proxy service key and certificate configuration entry. This entry specifies the key usage, optionally the trust point name, the certificate and the key file names, the key size and time of generation or import, and some important attributes of the certificate.')
cspPskcKeyUsage = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rsaSigning", 1), ("rsaEncryption", 2), ("rsaGeneralPurpose", 3))))
if mibBuilder.loadTexts: cspPskcKeyUsage.setStatus('current')
if mibBuilder.loadTexts: cspPskcKeyUsage.setDescription('An indication of the usage of a key assigned to a proxy service. Each proxy service can be assigned one or more keys. The key can be used for signing only, for data encryption and decryption only, or for general purpose (that is, it can be used for both signing and data encryption and decryption). The following values are defined: rsaSigning(1) : RSA key used for signing only, rsaEncryption(2) : RSA key used for data encryption and decryption only, rsaGeneralPurpose(3): RSA key used for both signing and data encryption and decryption.')
cspPskcTrustPointName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPskcTrustPointName.setStatus('current')
if mibBuilder.loadTexts: cspPskcTrustPointName.setDescription('The name of a trust point assigned to the proxy service. The trust point contains information that can be used for certificate enrollment or for importing keys and certificates. A trust point may also contain identifying information about keys and certificates, and the path and the protocol to be used for the proxy device to communicate with a Certificate Authority which issues certificates for the proxy service. If no trust point is assigned to the proxy service, the name will be a NULL string.')
cspPskcCertFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPskcCertFileName.setStatus('current')
if mibBuilder.loadTexts: cspPskcCertFileName.setDescription('The name of the file storing the certificate. If there is no such file, the name will be a NULL string.')
cspPskcKeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPskcKeyName.setStatus('current')
if mibBuilder.loadTexts: cspPskcKeyName.setDescription('The name of a key assigned to the proxy service. If there is no key assigned, the name will be a NULL string. If the key is stored in a file, the file name may be used to identify the key, and this name will be a NULL string.')
cspPskcKeyFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPskcKeyFileName.setStatus('current')
if mibBuilder.loadTexts: cspPskcKeyFileName.setDescription('The name of the file storing the key. If there is no such file, the name will be a NULL string.')
cspPskcKeySize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("other", 1), ("rsa512", 2), ("rsa768", 3), ("rsa1024", 4), ("rsa1536", 5), ("rsa2048", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPskcKeySize.setStatus('current')
if mibBuilder.loadTexts: cspPskcKeySize.setDescription('The size of the key. The following modulus sizes are defined for RSA keys: 512-bit, 768-bit, 1024-bit, 1536-bit and 2048-bit.')
cspPskcKeyTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPskcKeyTime.setStatus('current')
if mibBuilder.loadTexts: cspPskcKeyTime.setDescription('The time of generation of the key, if known. If the key is imported to the proxy device, this time can indicate the time of import if the time of generation is unknown. If the time is not known, this will be a NULL string.')
cspPskcCertStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("valid", 1), ("expired", 2), ("rollover", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPskcCertStatus.setReference('RFC 2459, Internet X.509 Public Key Infrastructure Certificate and CRL Profile, Section 4.1.2.5 about validity and Section 10 about key rollover')
if mibBuilder.loadTexts: cspPskcCertStatus.setStatus('current')
if mibBuilder.loadTexts: cspPskcCertStatus.setDescription('The status of the certificate that is used to publish the public key. The following values are defined: Valid(1) : Certificate is valid, Expired(2) : Certificate has expired, Rolling Over(3): Certificate is being renewed. Whether or not an expired certificate can be used for the proxy service is implementation specific.')
cspPskcCertSubjName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 9), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPskcCertSubjName.setReference('RFC 2459, Internet X.509 Public Key Infrastructure Certificate and CRL Profile, Section 4.1.2.6')
if mibBuilder.loadTexts: cspPskcCertSubjName.setStatus('current')
if mibBuilder.loadTexts: cspPskcCertSubjName.setDescription('The subject name of the certificate assigned to the proxy service. If there is no subject name on the certificate, this will be a NULL string.')
cspPskcCertSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 10), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPskcCertSerialNum.setReference('RFC 2459, Internet X.509 Public Key Infrastructure Certificate and CRL Profile, Section 4.1.2.2')
if mibBuilder.loadTexts: cspPskcCertSerialNum.setStatus('current')
if mibBuilder.loadTexts: cspPskcCertSerialNum.setDescription('The serial number of the certificate assigned to the proxy service. If there is no serial number on the certificate, this will be a NULL string.')
cspPskcIssuerName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 11), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPskcIssuerName.setReference('RFC 2459, Internet X.509 Public Key Infrastructure Certificate and CRL Profile, Section 5.1.2.3')
if mibBuilder.loadTexts: cspPskcIssuerName.setStatus('current')
if mibBuilder.loadTexts: cspPskcIssuerName.setDescription('The issuer name of the certificate assigned to the proxy service. If the issuer name of the certificate is not known, this will be a NULL string.')
cspPskcIssuerCertSerialNum = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 12), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPskcIssuerCertSerialNum.setReference('RFC 2459, Internet X.509 Public Key Infrastructure Certificate and CRL Profile, Section 4.1.2.2 and Section 4.1.2.4')
if mibBuilder.loadTexts: cspPskcIssuerCertSerialNum.setStatus('current')
if mibBuilder.loadTexts: cspPskcIssuerCertSerialNum.setDescription("The serial number of the issuer's certificate. If the serial number of the issuer's certificate is not known, this will be a NULL string.")
cspPskcCertStartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 13), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPskcCertStartDate.setReference('RFC 2459, Internet X.509 Public Key Infrastructure Certificate and CRL Profile, Section 4.1.2.5')
if mibBuilder.loadTexts: cspPskcCertStartDate.setStatus('current')
if mibBuilder.loadTexts: cspPskcCertStartDate.setDescription('The time when the certificate starts to be valid, corresponding to the notBefore time on the certificate.')
cspPskcCertEndDate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 14), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPskcCertEndDate.setReference('RFC 2459, Internet X.509 Public Key Infrastructure Certificate and CRL Profile, Section 4.1.2.5')
if mibBuilder.loadTexts: cspPskcCertEndDate.setStatus('current')
if mibBuilder.loadTexts: cspPskcCertEndDate.setDescription('The time when the certificate validity ends, corresponding to the notAfter time on the certificate.')
cspPskcConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 4, 1, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspPskcConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cspPskcConfigRowStatus.setDescription("The conceptual row status of the proxy service key and certificate configuration entry. This entry can be modified when the status is 'active'.")
cspTcpPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 5, 1), )
if mibBuilder.loadTexts: cspTcpPolicyTable.setStatus('current')
if mibBuilder.loadTexts: cspTcpPolicyTable.setDescription('A list of TCP Policy entries')
cspTcpPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-SSL-PROXY-MIB", "cspTpPolicyName"))
if mibBuilder.loadTexts: cspTcpPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: cspTcpPolicyEntry.setDescription('TCP Policy configuration entry. Each entry defines a set of TCP protocol parameters. A policy can be applied to one or more proxy services.')
cspTpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 5, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: cspTpPolicyName.setStatus('current')
if mibBuilder.loadTexts: cspTpPolicyName.setDescription('The unique name of a TCP policy.')
cspTpSynTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 5, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(75)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspTpSynTimeOut.setStatus('current')
if mibBuilder.loadTexts: cspTpSynTimeOut.setDescription('The TCP connection SYN timeout value. This is the amount of time the SSL proxy waits before failing the connection establishment attempt.')
cspTpInActivityTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspTpInActivityTimeOut.setStatus('current')
if mibBuilder.loadTexts: cspTpInActivityTimeOut.setDescription('The TCP connection inactivity timeout value. This is the amount of time the SSL proxy waits for the next packet to arrive on a TCP connection, if no packet is received within this period then the connection is considered to be inactive and aborted.')
cspTpNagleAlgo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 5, 1, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspTpNagleAlgo.setReference('RFC 896, Congestion Control in IP/TCP Internetworks')
if mibBuilder.loadTexts: cspTpNagleAlgo.setStatus('current')
if mibBuilder.loadTexts: cspTpNagleAlgo.setDescription("If 'true', the Nagle Algorithm is enabled during the SSL or TLS data phase to concatenate a number of small messages to avoid sending small messages into the network.")
cspTpFinWaitTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(75)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspTpFinWaitTimeOut.setStatus('current')
if mibBuilder.loadTexts: cspTpFinWaitTimeOut.setDescription('The TCP connection FIN-WAIT2 state timeout value. This is the amount of time the SSL proxy waits for a FIN from the peer after it has initiated close and is in FIN-WAIT2 state.')
cspTpReassemTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 5, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3600)).clone(600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspTpReassemTimeOut.setStatus('current')
if mibBuilder.loadTexts: cspTpReassemTimeOut.setDescription('The TCP connection reassembly timeout value. This is the amount of time the SSL proxy waits during the TCP out of order traffic reassembly process for the next expected in sequence segment to arrive.')
cspTpRcvBufShrLim = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 5, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 262144)).clone(32768)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspTpRcvBufShrLim.setStatus('current')
if mibBuilder.loadTexts: cspTpRcvBufShrLim.setDescription('The receive buffer share limit per connection. This is used by SSL proxy to calculate the maximum window to advertise during the 3 way handshake, and is also the maximum share of the receive buffer pool that would be allocated for this connection.')
cspTpTransBufShrLim = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 5, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8192, 262144)).clone(32768)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspTpTransBufShrLim.setStatus('current')
if mibBuilder.loadTexts: cspTpTransBufShrLim.setDescription('The transmit buffer share limit per connection. This is the maximum share of the send buffer pool that would be allocated for this connection.')
cspTpMss = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 5, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 1460)).clone(1460)).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspTpMss.setStatus('current')
if mibBuilder.loadTexts: cspTpMss.setDescription('The TCP maximum segment size. This is the MSS value offered by the SSL proxy during 3-way handshake')
cspTpPathMtuDisc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 5, 1, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspTpPathMtuDisc.setStatus('current')
if mibBuilder.loadTexts: cspTpPathMtuDisc.setDescription("If 'true', the Path MTU Discovery algorithm is enabled.")
cspTpConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 5, 1, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspTpConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cspTpConfigRowStatus.setDescription("The conceptual row status of the TCP policy configuration entry. This entry can be modified when the status is 'active'.")
cspSslPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 6, 1), )
if mibBuilder.loadTexts: cspSslPolicyTable.setStatus('current')
if mibBuilder.loadTexts: cspSslPolicyTable.setDescription('A list of SSL protocol policy configuration entries.')
cspSslPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-SSL-PROXY-MIB", "cspSpPolicyName"))
if mibBuilder.loadTexts: cspSslPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: cspSslPolicyEntry.setDescription('A SSL policy defines a set of cipher suites to be supported, and the SSL or TLS protocol parameters. Each policy can be assigned to one or more proxy services. If no SSL policy is assigned to a proxy service, all supported cipher suites and all protocol versions will be enabled by default.')
cspSpPolicyName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 6, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 255)))
if mibBuilder.loadTexts: cspSpPolicyName.setStatus('current')
if mibBuilder.loadTexts: cspSpPolicyName.setDescription('The unique name of a SSL protocol policy.')
cspSpRSArc4128md5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 6, 1, 1, 2), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspSpRSArc4128md5.setStatus('current')
if mibBuilder.loadTexts: cspSpRSArc4128md5.setDescription("An indication of whether or not the cipher suite RSA_WITH_RC4_128_MD5 is configured. If 'true', the cipher suite is configured.")
cspSpRSArc4128sha = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 6, 1, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspSpRSArc4128sha.setStatus('current')
if mibBuilder.loadTexts: cspSpRSArc4128sha.setDescription("An indication of whether or not the cipher suite RSA_WITH_RC4_128_SHA is configured. If 'true', the cipher suite is configured.")
cspSpRSAdescbcsha = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 6, 1, 1, 4), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspSpRSAdescbcsha.setStatus('current')
if mibBuilder.loadTexts: cspSpRSAdescbcsha.setDescription("An indication of whether or not the cipher suite RSA_WITH_DES_CBC_SHA is configured. If 'true', the cipher suite is configured.")
cspSpRSA3descbcsha = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 6, 1, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspSpRSA3descbcsha.setStatus('current')
if mibBuilder.loadTexts: cspSpRSA3descbcsha.setDescription("An indication of whether or not the cipher suite RSA_WITH_3DES_EDE_CBC_SHA is configured. If 'true', the cipher suite is configured.")
cspSpProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 6, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("ssl3", 2), ("tls1", 3), ("ssl3AndTls1", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspSpProtocol.setReference('1. RFC 2246, The TLS Protocol Version 1.0. 2. IETF Draft <draft-freier-ssl-version3-02.txt>, The SSL Protocol Version 3.0')
if mibBuilder.loadTexts: cspSpProtocol.setStatus('current')
if mibBuilder.loadTexts: cspSpProtocol.setDescription('The set of SSL and TLS protocols to be supported. The following values are defined: other(1) : An unspecified protocol, SSL 3.0(2) : Support SSL 3.0 protocol only, TLS 1.0(3) : Support TLS 1.0 protocol only, ssl3AndTls1(3) : Support both SSL 3.0 and TLS 1.0')
cspSpCloseProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 6, 1, 1, 7), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspSpCloseProtocol.setStatus('current')
if mibBuilder.loadTexts: cspSpCloseProtocol.setDescription("An indication of whether or not the SSL close protocol is enforced. If 'true', the close protocol is enforced. A close-notify alert message is sent to the peer, and a close-notify alert message is expected from the peer. If 'false', the close protocol is not enforced. The proxy service sends a close-notify alert message to the peer; however, the proxy service does not expect a close-notify alert from the peer before tearing down the session.")
cspSpSessionCache = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 6, 1, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 262143))).setUnits('bytes').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspSpSessionCache.setStatus('current')
if mibBuilder.loadTexts: cspSpSessionCache.setDescription('The SSL session cache size. The session cache is used to store a number of most recently used session identifiers. Session identifiers can be reused if a new connection requests to use a session identifier that is found in the cache. This object specifies the maximum size of the cache.')
cspSpSessionTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 6, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 72000))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspSpSessionTimeOut.setStatus('current')
if mibBuilder.loadTexts: cspSpSessionTimeOut.setDescription('The SSL session timeout value. The session entry will be removed from the session cache after the configured timeout. Once the session entry is removed, subsequent connections cannot reuse the session. If this timeout value is 0, entries in the session cache will not timeout.')
cspSpConfigRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 6, 1, 1, 10), RowStatus()).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: cspSpConfigRowStatus.setStatus('current')
if mibBuilder.loadTexts: cspSpConfigRowStatus.setDescription("The row status of the SSL policy configuration entry. This entry can be modified when the status is 'active'.")
cspTcpCountersClearTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 7, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTcpCountersClearTime.setStatus('current')
if mibBuilder.loadTexts: cspTcpCountersClearTime.setDescription('The last time when the TCP counters were cleared. If the proxy device does not allow these counters to be cleared, the timestamp should have a value of zero.')
cspTcConnInit = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 8, 1), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTcConnInit.setStatus('current')
if mibBuilder.loadTexts: cspTcConnInit.setDescription('The total number of TCP connections initiated by the proxy device.')
cspTcConnAccept = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 8, 2), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTcConnAccept.setStatus('current')
if mibBuilder.loadTexts: cspTcConnAccept.setDescription('The total number of TCP connections accepted by the proxy device.')
cspTcConnEstab = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 8, 3), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTcConnEstab.setStatus('current')
if mibBuilder.loadTexts: cspTcConnEstab.setDescription('The total number of TCP connections established.')
cspTcConnDrop = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 8, 4), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTcConnDrop.setStatus('current')
if mibBuilder.loadTexts: cspTcConnDrop.setDescription('The total number of TCP connections dropped.')
cspTcConnClosed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 8, 5), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTcConnClosed.setStatus('current')
if mibBuilder.loadTexts: cspTcConnClosed.setDescription('The total number of TCP connections closed.')
cspTcSynTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 8, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTcSynTimeOuts.setStatus('current')
if mibBuilder.loadTexts: cspTcSynTimeOuts.setDescription('The total number of SYN timeouts.')
cspTcIdleTimeOuts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 8, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTcIdleTimeOuts.setStatus('current')
if mibBuilder.loadTexts: cspTcIdleTimeOuts.setDescription('The total number of idle timeouts.')
cspTcTotalPktSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 8, 8), Counter32()).setUnits('number of packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTcTotalPktSent.setStatus('current')
if mibBuilder.loadTexts: cspTcTotalPktSent.setDescription('The total number of TCP packets sent.')
cspTcDataPktSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 8, 9), Counter32()).setUnits('number of packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTcDataPktSent.setStatus('current')
if mibBuilder.loadTexts: cspTcDataPktSent.setDescription('The total number of TCP data packets sent.')
cspTcDataByteSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 8, 10), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTcDataByteSent.setStatus('current')
if mibBuilder.loadTexts: cspTcDataByteSent.setDescription('The total amount of data sent.')
cspTcTotalPktRcv = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 8, 11), Counter32()).setUnits('number of packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTcTotalPktRcv.setStatus('current')
if mibBuilder.loadTexts: cspTcTotalPktRcv.setDescription('The total number of TCP packets received.')
cspTcPktRcvSeq = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 8, 12), Counter32()).setUnits('number of packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTcPktRcvSeq.setStatus('current')
if mibBuilder.loadTexts: cspTcPktRcvSeq.setDescription('The total number of TCP data packets received in sequence.')
cspTcByteRcvSeq = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 8, 13), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTcByteRcvSeq.setStatus('current')
if mibBuilder.loadTexts: cspTcByteRcvSeq.setDescription('The total amount of data received in sequence.')
cspSslCountersClearTime = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 9, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSslCountersClearTime.setStatus('current')
if mibBuilder.loadTexts: cspSslCountersClearTime.setDescription('The last time when the SSL counters were cleared. If the proxy device does not allow these counters to be cleared, the timestamp should have a value of zero.')
cspScConnAttempt = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 10, 1), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspScConnAttempt.setStatus('current')
if mibBuilder.loadTexts: cspScConnAttempt.setDescription('The total number of SSL connections attempted.')
cspScConnComplete = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 10, 2), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspScConnComplete.setStatus('current')
if mibBuilder.loadTexts: cspScConnComplete.setDescription('The total number of SSL connections completed.')
cspScConnInHandShake = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 10, 3), Gauge32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspScConnInHandShake.setStatus('current')
if mibBuilder.loadTexts: cspScConnInHandShake.setDescription('The number of SSL connections currently in handshake phase.')
cspScConnInDataPhase = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 10, 4), Gauge32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspScConnInDataPhase.setStatus('current')
if mibBuilder.loadTexts: cspScConnInDataPhase.setDescription('The number of SSL connections currently in data phase.')
cspScRenegAttempt = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 10, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspScRenegAttempt.setStatus('current')
if mibBuilder.loadTexts: cspScRenegAttempt.setDescription('The total number of SSL renegotiations attempted.')
cspScConnInReneg = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 10, 6), Gauge32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspScConnInReneg.setStatus('current')
if mibBuilder.loadTexts: cspScConnInReneg.setDescription('The number of SSL connections currently in renegotiation phase')
cspScActiveSessions = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 10, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspScActiveSessions.setStatus('current')
if mibBuilder.loadTexts: cspScActiveSessions.setDescription('The number of active SSL sessions. This number indicates the number of valid session entries in the session cache.')
cspScMaxHandShakeConns = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 10, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspScMaxHandShakeConns.setStatus('current')
if mibBuilder.loadTexts: cspScMaxHandShakeConns.setDescription('This indicates the maximum number of connections present in handshake phase at any point of time')
cspScCurrDeviceQLen = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 10, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspScCurrDeviceQLen.setStatus('current')
if mibBuilder.loadTexts: cspScCurrDeviceQLen.setDescription('The current device queue length. Indicates the number of requests pending with the device.')
cspScMaxDeviceQLen = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 10, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspScMaxDeviceQLen.setStatus('current')
if mibBuilder.loadTexts: cspScMaxDeviceQLen.setDescription('The maximum device queue length recorded. Indicates the maximum number of requests queued to the device at any point of time.')
cspScSessionReuses = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 10, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspScSessionReuses.setStatus('current')
if mibBuilder.loadTexts: cspScSessionReuses.setDescription('The number of session reuses. Indicates the number of times the sessions got reused before the session timer expired.')
cspS3cFullHandShake = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 11, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspS3cFullHandShake.setStatus('current')
if mibBuilder.loadTexts: cspS3cFullHandShake.setDescription('The total number of full SSL 3.0 handshakes completed.')
cspS3cResumedHandShake = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 11, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspS3cResumedHandShake.setStatus('current')
if mibBuilder.loadTexts: cspS3cResumedHandShake.setDescription('The total number of SSL 3.0 resumed handshakes completed.')
cspS3cHandShakeFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 11, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspS3cHandShakeFailed.setStatus('current')
if mibBuilder.loadTexts: cspS3cHandShakeFailed.setDescription('The total number of SSL 3.0 connections failed in handshake phase.')
cspS3cDataFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 11, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspS3cDataFailed.setStatus('current')
if mibBuilder.loadTexts: cspS3cDataFailed.setDescription('The total number of SSL 3.0 sessions failed in data phase.')
cspS3cBadMacRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 11, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspS3cBadMacRcvd.setStatus('current')
if mibBuilder.loadTexts: cspS3cBadMacRcvd.setDescription('The total number of received SSL 3.0 records which have bad MAC (Message Authentication Code).')
cspS3cPadErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 11, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspS3cPadErrors.setStatus('current')
if mibBuilder.loadTexts: cspS3cPadErrors.setDescription('The total number of received SSL 3.0 records which have pad errors.')
cspS3cRSArc4128md5 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 11, 7), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspS3cRSArc4128md5.setStatus('current')
if mibBuilder.loadTexts: cspS3cRSArc4128md5.setDescription('The total number of SSL 3.0 connections which used cipher suite RSA_WITH_RC4_128_MD5.')
cspS3cRSArc4128sha = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 11, 8), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspS3cRSArc4128sha.setStatus('current')
if mibBuilder.loadTexts: cspS3cRSArc4128sha.setDescription('The total number of SSL 3.0 connections which used cipher suite RSA_WITH_RC4_128_SHA.')
cspS3cRSAdescbcsha = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 11, 9), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspS3cRSAdescbcsha.setStatus('current')
if mibBuilder.loadTexts: cspS3cRSAdescbcsha.setDescription('The total number of SSL 3.0 connections which used cipher suite RSA_WITH_DES_CBC_SHA.')
cspS3cRSA3desedecbcsha = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 11, 10), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspS3cRSA3desedecbcsha.setStatus('current')
if mibBuilder.loadTexts: cspS3cRSA3desedecbcsha.setDescription('The total number of SSL 3.0 connections which used cipher suite RSA_WITH_3DES_EDE_CBC_SHA.')
cspTlcFullHandShake = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 12, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTlcFullHandShake.setStatus('current')
if mibBuilder.loadTexts: cspTlcFullHandShake.setDescription('The total number of full TLS 1.0 handshakes completed.')
cspTlcResumedHandShake = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 12, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTlcResumedHandShake.setStatus('current')
if mibBuilder.loadTexts: cspTlcResumedHandShake.setDescription('The total number of resumed TLS 1.0 handshakes completed.')
cspTlcHandShakeFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 12, 3), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTlcHandShakeFailed.setStatus('current')
if mibBuilder.loadTexts: cspTlcHandShakeFailed.setDescription('The total number of TLS 1.0 connections failed in handshake phase.')
cspTlcDataFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 12, 4), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTlcDataFailed.setStatus('current')
if mibBuilder.loadTexts: cspTlcDataFailed.setDescription('The total number of TLS 1.0 connections failed in data phase.')
cspTlcBadMacRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 12, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTlcBadMacRcvd.setStatus('current')
if mibBuilder.loadTexts: cspTlcBadMacRcvd.setDescription('The total number of received TLS 1.0 records which have bad MAC (Message Authentication Code.')
cspTlcPadErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 12, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTlcPadErrors.setStatus('current')
if mibBuilder.loadTexts: cspTlcPadErrors.setDescription('The total number of received TLS 1.0 records which have pad errors.')
cspTlcRSArc4128md5 = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 12, 7), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTlcRSArc4128md5.setStatus('current')
if mibBuilder.loadTexts: cspTlcRSArc4128md5.setDescription('The total number of TLS 1.0 connections which used the cipher suite RSA_WITH_RC4_128_MD5.')
cspTlcRSArc4128sha = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 12, 8), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTlcRSArc4128sha.setStatus('current')
if mibBuilder.loadTexts: cspTlcRSArc4128sha.setDescription('The total number of TLS 1.0 connections which used the cipher suite RSA_WITH_RC4_128_SHA.')
cspTlcRSAdescbcsha = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 12, 9), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTlcRSAdescbcsha.setStatus('current')
if mibBuilder.loadTexts: cspTlcRSAdescbcsha.setDescription('The total number of TLS 1.0 connections which used the cipher suite RSA_WITH_DES_CBC_SHA.')
cspTlcRSA3desedecbcsha = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 12, 10), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspTlcRSA3desedecbcsha.setStatus('current')
if mibBuilder.loadTexts: cspTlcRSA3desedecbcsha.setDescription('The total number of TLS 1.0 connections which used the cipher suite RSA_WITH_3DES_EDE_CBC_SHA.')
cspSccBlksEncrypted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSccBlksEncrypted.setStatus('current')
if mibBuilder.loadTexts: cspSccBlksEncrypted.setDescription('The total number of data blocks that got encrypted.')
cspSccBlksDecrypted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSccBlksDecrypted.setStatus('current')
if mibBuilder.loadTexts: cspSccBlksDecrypted.setDescription('The total number of data blocks that got decrypted.')
cspSccBytesEncrypted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 13, 3), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSccBytesEncrypted.setStatus('current')
if mibBuilder.loadTexts: cspSccBytesEncrypted.setDescription('The total number of bytes that got encrypted.')
cspSccBytesDecrypted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 13, 4), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSccBytesDecrypted.setStatus('current')
if mibBuilder.loadTexts: cspSccBytesDecrypted.setDescription('The total number of bytes that got decrypted.')
cspSccPublicKeyOpers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSccPublicKeyOpers.setStatus('current')
if mibBuilder.loadTexts: cspSccPublicKeyOpers.setDescription('The total number of RSA public key operations performed.')
cspSccPrivateKeyOpers = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSccPrivateKeyOpers.setStatus('current')
if mibBuilder.loadTexts: cspSccPrivateKeyOpers.setDescription('The total number of RSA private key operations performed.')
cspSccCryptoFails = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSccCryptoFails.setStatus('current')
if mibBuilder.loadTexts: cspSccCryptoFails.setDescription('The total number of failed cryptographic operations.')
cspSccDmaErrors = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSccDmaErrors.setStatus('current')
if mibBuilder.loadTexts: cspSccDmaErrors.setDescription('The total number of cryptographic device DMA errors.')
cspSecSessAllocFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecSessAllocFailed.setStatus('current')
if mibBuilder.loadTexts: cspSecSessAllocFailed.setDescription('The total number of times SSL session could not be allocated.')
cspSecSessLimitExceed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecSessLimitExceed.setStatus('current')
if mibBuilder.loadTexts: cspSecSessLimitExceed.setDescription('The total number of times configured SSL session limit got exceeded. The new connections will be rejected if the session limit is exceeded.')
cspSecHShakeInitFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecHShakeInitFailed.setStatus('current')
if mibBuilder.loadTexts: cspSecHShakeInitFailed.setDescription('The total number of times SSL connections failed even before the handshake phase got started. This typically indicates that there is some connectivity problem with the server.')
cspSecRenegFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecRenegFailed.setStatus('current')
if mibBuilder.loadTexts: cspSecRenegFailed.setDescription('The total number of times SSL renegotiation failed.')
cspSecFatalAlertsRcvd = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecFatalAlertsRcvd.setReference('1. RFC 2246, The TLS Protocol Version 1.0, A.3. 2. IETF Draft <draft-freier-ssl-version3-02.txt>, The SSL Protocol Version 3.0, A.3.')
if mibBuilder.loadTexts: cspSecFatalAlertsRcvd.setStatus('current')
if mibBuilder.loadTexts: cspSecFatalAlertsRcvd.setDescription('The total number of fatal alerts received.')
cspSecFatalAlertsSent = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecFatalAlertsSent.setReference('1. RFC 2246, The TLS Protocol Version 1.0, A.3. 2. IETF Draft <draft-freier-ssl-version3-02.txt>, The SSL Protocol Version 3.0, A.3.')
if mibBuilder.loadTexts: cspSecFatalAlertsSent.setStatus('current')
if mibBuilder.loadTexts: cspSecFatalAlertsSent.setDescription('The total number of fatal alerts sent.')
cspSecNoCipherAlerts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecNoCipherAlerts.setReference('1. RFC 2246, The TLS Protocol Version 1.0, A.3. 2. IETF Draft <draft-freier-ssl-version3-02.txt>, The SSL Protocol Version 3.0, A.3.')
if mibBuilder.loadTexts: cspSecNoCipherAlerts.setStatus('current')
if mibBuilder.loadTexts: cspSecNoCipherAlerts.setDescription('The total number of ALERT_HANDSHAKE_FAIL alerts sent due to unsupported cipher suites.')
cspSecVerMismatchAlerts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecVerMismatchAlerts.setReference('1. RFC 2246, The TLS Protocol Version 1.0, A.3. 2. IETF Draft <draft-freier-ssl-version3-02.txt>, The SSL Protocol Version 3.0, A.3.')
if mibBuilder.loadTexts: cspSecVerMismatchAlerts.setStatus('current')
if mibBuilder.loadTexts: cspSecVerMismatchAlerts.setDescription('The total number of ALERT_PROTOCOL_VERSION alerts sent due to unsupported version number.')
cspSecNoComprsnAlerts = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecNoComprsnAlerts.setReference('1. RFC 2246, The TLS Protocol Version 1.0, A.3. 2. IETF Draft <draft-freier-ssl-version3-02.txt>, The SSL Protocol Version 3.0, A.3.')
if mibBuilder.loadTexts: cspSecNoComprsnAlerts.setStatus('current')
if mibBuilder.loadTexts: cspSecNoComprsnAlerts.setDescription('The total number of ALERT_HANDSHAKE_FAIL alerts sent due to unsupported compression scheme.')
cspSecHShakeHndleMemFail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecHShakeHndleMemFail.setStatus('current')
if mibBuilder.loadTexts: cspSecHShakeHndleMemFail.setDescription('The total number of handshake handle memory allocation failure.')
cspSecStalePakDrop = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecStalePakDrop.setStatus('current')
if mibBuilder.loadTexts: cspSecStalePakDrop.setDescription('The total number of stale packets dropped. Indicates the number of packets received after the SSL connection is torn down.')
cspSecServiceIdDiscard = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecServiceIdDiscard.setStatus('current')
if mibBuilder.loadTexts: cspSecServiceIdDiscard.setDescription('The total number of connections rejected because of invalid service identifiers.')
cspSecHShakeLimitExceed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecHShakeLimitExceed.setStatus('current')
if mibBuilder.loadTexts: cspSecHShakeLimitExceed.setDescription('The total number of times simultaneous handshake connection exceeded the capacity. The new connections will be rejected if the total number of simultaneous handshake connections exceeds the limit.')
cspSecDevConnCtxtFail = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecDevConnCtxtFail.setStatus('current')
if mibBuilder.loadTexts: cspSecDevConnCtxtFail.setDescription('The total number of times device context could not be allocated.')
cspSecMemAllocFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecMemAllocFailed.setStatus('current')
if mibBuilder.loadTexts: cspSecMemAllocFailed.setDescription('The total number of times memory allocation failed.')
cspSecBuffAllocFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecBuffAllocFailed.setStatus('current')
if mibBuilder.loadTexts: cspSecBuffAllocFailed.setDescription('The total number of times buffer allocation failed.')
cspSecAlertSendFailed = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecAlertSendFailed.setStatus('current')
if mibBuilder.loadTexts: cspSecAlertSendFailed.setDescription('The total number of failure to send alerts. This is typically because of the memory allocation failure.')
cspSecOverloadDropped = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecOverloadDropped.setStatus('current')
if mibBuilder.loadTexts: cspSecOverloadDropped.setDescription('The total number of connections rejected because of overload conditions. This indicates that the incoming rate is higher than what can be handled.')
cspSecConnAborted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 14, 19), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSecConnAborted.setStatus('current')
if mibBuilder.loadTexts: cspSecConnAborted.setDescription('The total number of SSL connections aborted.')
cspPsCountersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1), )
if mibBuilder.loadTexts: cspPsCountersTable.setStatus('current')
if mibBuilder.loadTexts: cspPsCountersTable.setDescription('A list of proxy service global counter entries')
cspPsCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1), ).setIndexNames((0, "CISCO-SSL-PROXY-MIB", "cspPsName"), (0, "CISCO-SSL-PROXY-MIB", "cspPsListIndex"))
if mibBuilder.loadTexts: cspPsCounterEntry.setStatus('current')
if mibBuilder.loadTexts: cspPsCounterEntry.setDescription('The proxy service global counter entry. Each entry displays the global SSL counters collected for a proxy service.')
cspPscClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscClearTime.setStatus('current')
if mibBuilder.loadTexts: cspPscClearTime.setDescription('The last time when counters in this entry were cleared. If the proxy device does not allow these counters to be cleared, the timestamp should have a value of zero.')
cspPscConnAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 2), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscConnAttempt.setStatus('current')
if mibBuilder.loadTexts: cspPscConnAttempt.setDescription('The total number of SSL connections attempted.')
cspPscConnComplete = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 3), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscConnComplete.setStatus('current')
if mibBuilder.loadTexts: cspPscConnComplete.setDescription('The total number of SSL connections completed.')
cspPscFullHandShake = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscFullHandShake.setStatus('current')
if mibBuilder.loadTexts: cspPscFullHandShake.setDescription('The total number of full handshakes completed.')
cspPscResumedHandShake = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscResumedHandShake.setStatus('current')
if mibBuilder.loadTexts: cspPscResumedHandShake.setDescription('The total number of resumed handshakes completed.')
cspPscConnInHandShake = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 6), Gauge32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscConnInHandShake.setStatus('current')
if mibBuilder.loadTexts: cspPscConnInHandShake.setDescription('The number of connections currently in handshake phase.')
cspPscConnInDataPhase = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 7), Gauge32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscConnInDataPhase.setStatus('current')
if mibBuilder.loadTexts: cspPscConnInDataPhase.setDescription('The number of connections currently in data phase.')
cspPscRenegAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscRenegAttempt.setStatus('current')
if mibBuilder.loadTexts: cspPscRenegAttempt.setDescription('The total number of SSL renegotiations attempted.')
cspPscConnInReneg = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 9), Gauge32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscConnInReneg.setStatus('current')
if mibBuilder.loadTexts: cspPscConnInReneg.setDescription('The number of connections currently in renegotiation phase.')
cspPscBlksEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscBlksEncrypted.setStatus('current')
if mibBuilder.loadTexts: cspPscBlksEncrypted.setDescription('The total number of data blocks that got encrypted.')
cspPscBlksDecrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscBlksDecrypted.setStatus('current')
if mibBuilder.loadTexts: cspPscBlksDecrypted.setDescription('The total number of data blocks that got decrypted.')
cspPscBytesEncrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 12), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscBytesEncrypted.setStatus('current')
if mibBuilder.loadTexts: cspPscBytesEncrypted.setDescription('The total number of bytes that got encrypted.')
cspPscBytesDecrypted = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 13), Counter32()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscBytesDecrypted.setStatus('current')
if mibBuilder.loadTexts: cspPscBytesDecrypted.setDescription('The total number of bytes that got decrypted.')
cspPscValidSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscValidSessions.setStatus('current')
if mibBuilder.loadTexts: cspPscValidSessions.setDescription('The total number of current valid sessions in the session cache.')
cspPscSessLimitExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscSessLimitExceed.setStatus('current')
if mibBuilder.loadTexts: cspPscSessLimitExceed.setDescription('The total number of times configured SSL session limit got exceeded. The new connections will be rejected if the session limit is exceeded.')
cspPscHandShakeFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscHandShakeFailed.setStatus('current')
if mibBuilder.loadTexts: cspPscHandShakeFailed.setDescription('The total number of times SSL connections failed in handshake phase.')
cspPscDataFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscDataFailed.setStatus('current')
if mibBuilder.loadTexts: cspPscDataFailed.setDescription('The total number of times SSL connections failed in data phase.')
cspPscFatalAlertsRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscFatalAlertsRcvd.setStatus('current')
if mibBuilder.loadTexts: cspPscFatalAlertsRcvd.setDescription('The total number of fatal alerts received.')
cspPscFatalAlertsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscFatalAlertsSent.setStatus('current')
if mibBuilder.loadTexts: cspPscFatalAlertsSent.setDescription('The total number of fatal alerts sent.')
cspPscBadMacRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscBadMacRcvd.setStatus('current')
if mibBuilder.loadTexts: cspPscBadMacRcvd.setDescription('The total number of received SSL records which have bad MAC (Message Authentication Code).')
cspPscPadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscPadErrors.setStatus('current')
if mibBuilder.loadTexts: cspPscPadErrors.setDescription('The total number of received SSL records which have pad errors.')
cspPscNoCipherAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscNoCipherAlerts.setStatus('current')
if mibBuilder.loadTexts: cspPscNoCipherAlerts.setDescription('The total number of alerts sent due to unsupported cipher suites.')
cspPscNoComprsnAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscNoComprsnAlerts.setStatus('current')
if mibBuilder.loadTexts: cspPscNoComprsnAlerts.setDescription('The total number of alerts sent due to unsupported compression scheme.')
cspPscVerMismatchAlerts = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 15, 1, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPscVerMismatchAlerts.setStatus('current')
if mibBuilder.loadTexts: cspPscVerMismatchAlerts.setDescription('The total number of alerts sent due to unsupported SSL or TLS version.')
cspPsSsl3CountersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 16, 1), )
if mibBuilder.loadTexts: cspPsSsl3CountersTable.setStatus('current')
if mibBuilder.loadTexts: cspPsSsl3CountersTable.setDescription('A list of proxy service SSL 3.0 counter entries.')
cspPsSsl3CounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 16, 1, 1), ).setIndexNames((0, "CISCO-SSL-PROXY-MIB", "cspPsName"), (0, "CISCO-SSL-PROXY-MIB", "cspPsListIndex"))
if mibBuilder.loadTexts: cspPsSsl3CounterEntry.setStatus('current')
if mibBuilder.loadTexts: cspPsSsl3CounterEntry.setDescription('The proxy service SSL 3.0 counter entry. This entry reports the counters collected about the SSL 3.0 protocol for each proxy service.')
cspPs3cClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 16, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPs3cClearTime.setStatus('current')
if mibBuilder.loadTexts: cspPs3cClearTime.setDescription('The last time when counters in this entry were cleared. If the proxy device does not allow these counters to be cleared, the timestamp should have the value of zero.')
cspPs3cFullHandShake = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 16, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPs3cFullHandShake.setStatus('current')
if mibBuilder.loadTexts: cspPs3cFullHandShake.setDescription('The total number of SSL 3.0 full handshakes completed.')
cspPs3cResumedHandShake = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 16, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPs3cResumedHandShake.setStatus('current')
if mibBuilder.loadTexts: cspPs3cResumedHandShake.setDescription('The total number of SSL 3.0 resumed handshakes completed.')
cspPs3cHandShakeFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 16, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPs3cHandShakeFailed.setStatus('current')
if mibBuilder.loadTexts: cspPs3cHandShakeFailed.setDescription('The total number of SSL 3.0 connections failed in handshake phase.')
cspPs3cDataFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 16, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPs3cDataFailed.setStatus('current')
if mibBuilder.loadTexts: cspPs3cDataFailed.setDescription('The total number of SSL 3.0 connections failed in data phase.')
cspPs3cBadMacRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 16, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPs3cBadMacRcvd.setStatus('current')
if mibBuilder.loadTexts: cspPs3cBadMacRcvd.setDescription('The total number of received SSL 3.0 records which have bad MAC (Message Authentication Code).')
cspPs3cPadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 16, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPs3cPadErrors.setStatus('current')
if mibBuilder.loadTexts: cspPs3cPadErrors.setDescription('The total number of received SSL 3.0 records which have pad errors.')
cspPs3cRSArc4128md5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 16, 1, 1, 8), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPs3cRSArc4128md5.setStatus('current')
if mibBuilder.loadTexts: cspPs3cRSArc4128md5.setDescription('The total number of SSL 3.0 connections that used the cipher suite RSA_WITH_RC4_128_MD5.')
cspPs3cRSArc4128sha = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 16, 1, 1, 9), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPs3cRSArc4128sha.setStatus('current')
if mibBuilder.loadTexts: cspPs3cRSArc4128sha.setDescription('The total number of SSL 3.0 connections that used the cipher suite RSA_WITH_RC4_128_SHA.')
cspPs3cRSAdescbcsha = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 16, 1, 1, 10), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPs3cRSAdescbcsha.setStatus('current')
if mibBuilder.loadTexts: cspPs3cRSAdescbcsha.setDescription('The total number of SSL 3.0 connections that used the cipher suite RSA_WITH_DES_CBC_SHA.')
cspPs3cRSA3desedecbcsha = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 16, 1, 1, 11), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPs3cRSA3desedecbcsha.setStatus('current')
if mibBuilder.loadTexts: cspPs3cRSA3desedecbcsha.setDescription('The total number of SSL 3.0 connections that used the cipher suite RSA_WITH_3DES_EDE_CBC_SHA.')
cspPsTls1CountersTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 17, 1), )
if mibBuilder.loadTexts: cspPsTls1CountersTable.setStatus('current')
if mibBuilder.loadTexts: cspPsTls1CountersTable.setDescription('A list of proxy service TLS 1.0 counter entries.')
cspPsTls1CounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 17, 1, 1), ).setIndexNames((0, "CISCO-SSL-PROXY-MIB", "cspPsName"), (0, "CISCO-SSL-PROXY-MIB", "cspPsListIndex"))
if mibBuilder.loadTexts: cspPsTls1CounterEntry.setStatus('current')
if mibBuilder.loadTexts: cspPsTls1CounterEntry.setDescription('The proxy service TLS 1.0 counter entry. This entry displays counters collected about the TLS 1.0 protocol for each proxy service.')
cspPt1cClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 17, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPt1cClearTime.setStatus('current')
if mibBuilder.loadTexts: cspPt1cClearTime.setDescription('The last time when counters in this entry were cleared. If the proxy device does not allow these counters to be cleared, the timestamp should have a value of zero.')
cspPt1cFullHandShake = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 17, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPt1cFullHandShake.setStatus('current')
if mibBuilder.loadTexts: cspPt1cFullHandShake.setDescription('The total number of TLS 1.0 full handshakes completed.')
cspPt1cResumedHandShake = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 17, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPt1cResumedHandShake.setStatus('current')
if mibBuilder.loadTexts: cspPt1cResumedHandShake.setDescription('The total number of TLS 1.0 resumed handshakes completed.')
cspPt1cHandShakeFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 17, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPt1cHandShakeFailed.setStatus('current')
if mibBuilder.loadTexts: cspPt1cHandShakeFailed.setDescription('The total number of TLS 1.0 connections failed in handshake phase.')
cspPt1cDataFailed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 17, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPt1cDataFailed.setStatus('current')
if mibBuilder.loadTexts: cspPt1cDataFailed.setDescription('The total number of TLS 1.0 connections failed in data phase.')
cspPt1cBadMacRcvd = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 17, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPt1cBadMacRcvd.setStatus('current')
if mibBuilder.loadTexts: cspPt1cBadMacRcvd.setDescription('The total number of received TLS 1.0 records which have bad MAC (Message Authentication Code).')
cspPt1cPadErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 17, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPt1cPadErrors.setStatus('current')
if mibBuilder.loadTexts: cspPt1cPadErrors.setDescription('The total number of received TLS 1.0 records which have pad errors.')
cspPt1cRSArc4128md5 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 17, 1, 1, 8), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPt1cRSArc4128md5.setStatus('current')
if mibBuilder.loadTexts: cspPt1cRSArc4128md5.setDescription('The total number of TLS 1.0 connections that used the cipher suite RSA_WITH_RC4_128_MD5.')
cspPt1cRSArc4128sha = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 17, 1, 1, 9), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPt1cRSArc4128sha.setStatus('current')
if mibBuilder.loadTexts: cspPt1cRSArc4128sha.setDescription('The total number of TLS 1.0 connections that used the cipher suite RSA_WITH_RC4_128_SHA.')
cspPt1cRSAdescbcsha = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 17, 1, 1, 10), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPt1cRSAdescbcsha.setStatus('current')
if mibBuilder.loadTexts: cspPt1cRSAdescbcsha.setDescription('The total number of TLS 1.0 connections that used the cipher suite RSA_WITH_DES_CBC_SHA.')
cspPt1cRSA3desedecbcsha = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 17, 1, 1, 11), Counter32()).setUnits('number of connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspPt1cRSA3desedecbcsha.setStatus('current')
if mibBuilder.loadTexts: cspPt1cRSA3desedecbcsha.setDescription('The total number of TLS 1.0 connections that used the cipher suite RSA_WITH_3DES_EDE_CBC_SHA.')
cspCpuStatusTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 18, 1), )
if mibBuilder.loadTexts: cspCpuStatusTable.setStatus('current')
if mibBuilder.loadTexts: cspCpuStatusTable.setDescription('A list of CPU status information entries.')
cspCpuStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 18, 1, 1), ).setIndexNames((0, "CISCO-SSL-PROXY-MIB", "cspCpuName"))
if mibBuilder.loadTexts: cspCpuStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cspCpuStatusEntry.setDescription("The CPU status information entry. Each entry displays the operational status and usage information about one CPU on the proxy device. A proxy device can have one or more CPU's.")
cspCpuName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 18, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(1, 20)))
if mibBuilder.loadTexts: cspCpuName.setStatus('current')
if mibBuilder.loadTexts: cspCpuName.setDescription('The unique name of a CPU on the proxy device.')
cspCpuStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCpuStatus.setStatus('current')
if mibBuilder.loadTexts: cspCpuStatus.setDescription('The operational status of the CPU.')
cspCpuClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 18, 1, 1, 3), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCpuClearTime.setStatus('current')
if mibBuilder.loadTexts: cspCpuClearTime.setDescription('The last time when the CPU counters were cleared. If the proxy device does not allow these counters to be cleared, the timestamp should have a value of zero.')
cspCpuProcessUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 18, 1, 1, 4), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCpuProcessUtil.setStatus('current')
if mibBuilder.loadTexts: cspCpuProcessUtil.setDescription('The percentage of CPU time utilized at process level.')
cspCpuInterruptUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 18, 1, 1, 5), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCpuInterruptUtil.setStatus('current')
if mibBuilder.loadTexts: cspCpuInterruptUtil.setDescription('The percentage of CPU time utilized at interrupt level.')
cspCpuProcessUtilIn5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 18, 1, 1, 6), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCpuProcessUtilIn5Sec.setStatus('current')
if mibBuilder.loadTexts: cspCpuProcessUtilIn5Sec.setDescription('The percentage of CPU time utilized at process level within the past five seconds.')
cspCpuProcessUtilIn1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 18, 1, 1, 7), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCpuProcessUtilIn1Min.setStatus('current')
if mibBuilder.loadTexts: cspCpuProcessUtilIn1Min.setDescription('The percentage of CPU time utilized at process level within the past minute.')
cspCpuProcessUtilIn5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 18, 1, 1, 8), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCpuProcessUtilIn5Min.setStatus('current')
if mibBuilder.loadTexts: cspCpuProcessUtilIn5Min.setDescription('The percentage of CPU time utilized at process level within the past five minutes.')
cspCpuInterruptUtilIn5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 18, 1, 1, 9), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCpuInterruptUtilIn5Sec.setStatus('current')
if mibBuilder.loadTexts: cspCpuInterruptUtilIn5Sec.setDescription('The percentage of CPU time utilized at interrupt level within the past five seconds.')
cspCpuInterruptUtilIn1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 18, 1, 1, 10), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCpuInterruptUtilIn1Min.setStatus('current')
if mibBuilder.loadTexts: cspCpuInterruptUtilIn1Min.setDescription('The percentage of CPU time utilized at interrupt level within the past minute.')
cspCpuInterruptUtilIn5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 18, 1, 1, 11), Gauge32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCpuInterruptUtilIn5Min.setStatus('current')
if mibBuilder.loadTexts: cspCpuInterruptUtilIn5Min.setDescription('The percentage of CPU time utilized at interrupt level within the past five minutes.')
cspNumOfSslInfoSuccessInserted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 19, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspNumOfSslInfoSuccessInserted.setStatus('current')
if mibBuilder.loadTexts: cspNumOfSslInfoSuccessInserted.setDescription('This object represents the total number of times SSL headers were successfully inserted. The number of individual SSL session headers and SSL server header within a SSL header insertion are not counted separately.')
cspNumOfSslInfoFailedInserted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 19, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspNumOfSslInfoFailedInserted.setStatus('current')
if mibBuilder.loadTexts: cspNumOfSslInfoFailedInserted.setDescription('This object represents the number of failed insertions of SSL information into HTTP headers.')
cspNumOfSpoofHttpHeaderDeleted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 19, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspNumOfSpoofHttpHeaderDeleted.setStatus('current')
if mibBuilder.loadTexts: cspNumOfSpoofHttpHeaderDeleted.setDescription('This object represents the number of times a header in the incoming HTTP request was deleted because of possible header spoofing.')
cspNumOfSslSessHeaderExtracted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 19, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspNumOfSslSessHeaderExtracted.setStatus('current')
if mibBuilder.loadTexts: cspNumOfSslSessHeaderExtracted.setDescription('This object represents the number of SSL session headers extracted.')
cspNumOfSslSessHeaderFailedExtracted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 19, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspNumOfSslSessHeaderFailedExtracted.setStatus('current')
if mibBuilder.loadTexts: cspNumOfSslSessHeaderFailedExtracted.setDescription('This object represents the number of SSL session headers that failed to be extracted.')
cspNumOfSslServerCertHeaderExtracted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 19, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspNumOfSslServerCertHeaderExtracted.setStatus('current')
if mibBuilder.loadTexts: cspNumOfSslServerCertHeaderExtracted.setDescription('This object represents the total number of SSL server certificate headers extracted successfully.')
cspNumOfSslServerCerHeaderFailedExtracted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 19, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspNumOfSslServerCerHeaderFailedExtracted.setStatus('current')
if mibBuilder.loadTexts: cspNumOfSslServerCerHeaderFailedExtracted.setDescription('This object represents the number of SSL server certificate headers that failed to be extracted.')
cspNumOfTimesSslHeaderTruncated = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 19, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspNumOfTimesSslHeaderTruncated.setStatus('current')
if mibBuilder.loadTexts: cspNumOfTimesSslHeaderTruncated.setDescription('This object represents the number of times SSL headers were truncated because the size of SSL data inserted exceeds maximum length value.')
cspNumOfSslClientCertHeaderExtracted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 19, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspNumOfSslClientCertHeaderExtracted.setStatus('current')
if mibBuilder.loadTexts: cspNumOfSslClientCertHeaderExtracted.setDescription('This object represents the total number of SSL client certificate headers extracted successfully.')
cspNumOfSslClientCertHeaderFailedExtracted = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 19, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspNumOfSslClientCertHeaderFailedExtracted.setStatus('current')
if mibBuilder.loadTexts: cspNumOfSslClientCertHeaderFailedExtracted.setDescription('This object represents the number of SSL client certificate headers that failed to be extracted.')
cspCertNotYetValidRedirect = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 20, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCertNotYetValidRedirect.setStatus('current')
if mibBuilder.loadTexts: cspCertNotYetValidRedirect.setDescription('This object represents the number of HTTP redirects with reason client certificate is not valid yet.')
cspCertExpiredRedirect = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 20, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCertExpiredRedirect.setStatus('current')
if mibBuilder.loadTexts: cspCertExpiredRedirect.setDescription('This object represents the number of HTTP redirects with reason expired client certificate.')
cspIssuerCertNotFoundRedirect = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 20, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspIssuerCertNotFoundRedirect.setStatus('current')
if mibBuilder.loadTexts: cspIssuerCertNotFoundRedirect.setDescription('This object represents the number of HTTP redirects because issuer certificate could not be found. This occurs if the issuer certificate of an untrusted certificate cannot be found.')
cspCertRevokedRedirect = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 20, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCertRevokedRedirect.setStatus('current')
if mibBuilder.loadTexts: cspCertRevokedRedirect.setDescription('This object represents the number of HTTP redirects with reason revoked client certificate.')
cspNoClientCertSentRedirect = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 20, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspNoClientCertSentRedirect.setStatus('current')
if mibBuilder.loadTexts: cspNoClientCertSentRedirect.setDescription('This object represents the number of HTTP redirects with reason client certificate was not sent.')
cspNoCrlAvailableRedirect = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 20, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspNoCrlAvailableRedirect.setStatus('current')
if mibBuilder.loadTexts: cspNoCrlAvailableRedirect.setDescription('This object represents the number of HTTP redirects with reason no CRL available during revocation check.')
cspCrlExpiredRedirect = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 20, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCrlExpiredRedirect.setStatus('current')
if mibBuilder.loadTexts: cspCrlExpiredRedirect.setDescription('This object represents the number of HTTP redirects with reason CRL expired during revocation check.')
cspCertSignatureFailedRedirect = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 20, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspCertSignatureFailedRedirect.setStatus('current')
if mibBuilder.loadTexts: cspCertSignatureFailedRedirect.setDescription('This object represents the number of HTTP redirects with reason invalid certificate signature.')
cspOtherCertErrorRedirect = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 20, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cspOtherCertErrorRedirect.setStatus('current')
if mibBuilder.loadTexts: cspOtherCertErrorRedirect.setDescription('This object represents the number of HTTP redirects with reason other certificate errors.')
cspSslTrapType = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3))).clone(namedValues=NamedValues(("risingHighThresh", 1), ("fallingHighThresh", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: cspSslTrapType.setStatus('current')
if mibBuilder.loadTexts: cspSslTrapType.setDescription('This object indicates the type of trap issued by cspSSLResourceLimitReached notification.')
cspSslMaxConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 21, 2), Unsigned32()).setUnits('connections per system').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspSslMaxConn.setStatus('current')
if mibBuilder.loadTexts: cspSslMaxConn.setDescription('This object specifies the maximum allowed SSL (SSLv3 and TLSv1) connections per system as configured by the user.')
cspSslActiveConn = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 21, 3), Gauge32()).setUnits('connections per system').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSslActiveConn.setStatus('current')
if mibBuilder.loadTexts: cspSslActiveConn.setDescription('This object indicates the active SSL (SSLv3 and TLSv1) connections per system.')
cspSslConfigHighConnPcnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 21, 4), Unsigned32()).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspSslConfigHighConnPcnt.setStatus('current')
if mibBuilder.loadTexts: cspSslConfigHighConnPcnt.setDescription('This object specifies the percentage of the maximum SSL connections per system as configured by the user.')
cspSslActiveConnPcnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 21, 5), Unsigned32()).setUnits('percentage').setMaxAccess("readonly")
if mibBuilder.loadTexts: cspSslActiveConnPcnt.setStatus('current')
if mibBuilder.loadTexts: cspSslActiveConnPcnt.setDescription('This object indicates the percentage of the active SSL connections per system based on cspSslActiveConn. The notification will be send when the cspSslActiveConnPcnt count exceeds cspSslConfigHighConnPcnt.')
cspSslConfigWatermarkConnPcnt = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 370, 1, 21, 6), Unsigned32()).setUnits('percentage').setMaxAccess("readwrite")
if mibBuilder.loadTexts: cspSslConfigWatermarkConnPcnt.setStatus('current')
if mibBuilder.loadTexts: cspSslConfigWatermarkConnPcnt.setDescription('This object specifies the SSL connections watermark threshold value (in percentage) per system allowed as configured by the user. The value of cspSslConfigWatermarkPcnt should be less than cspSslConfigHighConnPcnt.')
cspServOperStatus = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 370, 0, 1)).setObjects(("CISCO-SSL-PROXY-MIB", "cspPsOperStatus"), ("CISCO-SSL-PROXY-MIB", "cspPsOperDownReason"))
if mibBuilder.loadTexts: cspServOperStatus.setStatus('current')
if mibBuilder.loadTexts: cspServOperStatus.setDescription("The proxy service operation status change notification. When the Operation Status of a proxy service changes, and cspGcNotifyProxyServOperStatus is 'true', a notification will be issued. The notification contains the current operation status and the down reason of the proxy service.")
cspServCertExpiring = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 370, 0, 2)).setObjects(("CISCO-SSL-PROXY-MIB", "cspPskcCertSubjName"), ("CISCO-SSL-PROXY-MIB", "cspPskcCertSerialNum"), ("CISCO-SSL-PROXY-MIB", "cspPskcIssuerName"), ("CISCO-SSL-PROXY-MIB", "cspPskcIssuerCertSerialNum"), ("CISCO-SSL-PROXY-MIB", "cspPskcCertEndDate"))
if mibBuilder.loadTexts: cspServCertExpiring.setStatus('current')
if mibBuilder.loadTexts: cspServCertExpiring.setDescription("The proxy service certificate expiring notification. If the time interval cspGcPSCertExpireInterval is positive, and cspGcNotifyPSCertExpiring is 'true', a notification will be issued for every proxy service certificate that will be expiring within this time interval. This notification is issued only once for each of these certificates. If the interval is changed from a positive value to 0, the proxy device will clear its memory of notification issued in the past, and stop issuing new notification. The notification contains the subject name, the serial number and the issuer name of the certificate, the serial number of the issuer's certificate, and the end date on the certificate.")
cspSSLResourceLimitReached = NotificationType((1, 3, 6, 1, 4, 1, 9, 9, 370, 0, 3)).setObjects(("CISCO-SSL-PROXY-MIB", "cspSslTrapType"), ("CISCO-SSL-PROXY-MIB", "cspSslMaxConn"), ("CISCO-SSL-PROXY-MIB", "cspSslActiveConn"), ("CISCO-SSL-PROXY-MIB", "cspSslConfigHighConnPcnt"), ("CISCO-SSL-PROXY-MIB", "cspSslActiveConnPcnt"), ("CISCO-SSL-PROXY-MIB", "cspSslConfigWatermarkConnPcnt"))
if mibBuilder.loadTexts: cspSSLResourceLimitReached.setStatus('current')
if mibBuilder.loadTexts: cspSSLResourceLimitReached.setDescription('This notification is issued on the following scenarios: 1) When the value of cpsSslActiveConnPcnt exceeds the value of cspSslConfigHighConnPcnt 2) When the value of cpsSslActiveConn falls below the watermark value represented by cspSslConfigWatermarkPcnt.')
cspMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 1))
cspMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2))
cspMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 1, 1)).setObjects(("CISCO-SSL-PROXY-MIB", "cspGlobalConfigGroup"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceConfigGroup"), ("CISCO-SSL-PROXY-MIB", "cspSslGroup"), ("CISCO-SSL-PROXY-MIB", "cspSsl3Group"), ("CISCO-SSL-PROXY-MIB", "cspTls1Group"), ("CISCO-SSL-PROXY-MIB", "cspPolicyConfigGroup"), ("CISCO-SSL-PROXY-MIB", "cspTcpGroup"), ("CISCO-SSL-PROXY-MIB", "cspSslCryptoGroup"), ("CISCO-SSL-PROXY-MIB", "cspSslErrorGroup"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceStatsGroup"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceSsl3Group"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceTls1Group"), ("CISCO-SSL-PROXY-MIB", "cspCpuStatusGroup"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspMIBCompliance = cspMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cspMIBCompliance.setDescription('The compliance statement for entities which implement the Cisco SSL Proxy MIB.')
cspMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 1, 2)).setObjects(("CISCO-SSL-PROXY-MIB", "cspGlobalConfigGroup"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceConfigGroup"), ("CISCO-SSL-PROXY-MIB", "cspSslGroup"), ("CISCO-SSL-PROXY-MIB", "cspSsl3Group"), ("CISCO-SSL-PROXY-MIB", "cspTls1Group"), ("CISCO-SSL-PROXY-MIB", "cspHttpHeaderInsertedSslInfoGroup"), ("CISCO-SSL-PROXY-MIB", "cspHttpHeaderInsertedSslClientCertGroup"), ("CISCO-SSL-PROXY-MIB", "cspHttpRedirectInfoGroup"), ("CISCO-SSL-PROXY-MIB", "cspPolicyConfigGroup"), ("CISCO-SSL-PROXY-MIB", "cspTcpGroup"), ("CISCO-SSL-PROXY-MIB", "cspSslCryptoGroup"), ("CISCO-SSL-PROXY-MIB", "cspSslErrorGroup"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceStatsGroup"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceSsl3Group"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceTls1Group"), ("CISCO-SSL-PROXY-MIB", "cspCpuStatusGroup"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspMIBComplianceRev1 = cspMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cspMIBComplianceRev1.setDescription('The compliance statement for entities which implement the Cisco SSL Proxy MIB.')
cspMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 1, 3)).setObjects(("CISCO-SSL-PROXY-MIB", "cspGlobalConfigGroup"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceConfigGroup"), ("CISCO-SSL-PROXY-MIB", "cspSslGroup"), ("CISCO-SSL-PROXY-MIB", "cspSsl3Group"), ("CISCO-SSL-PROXY-MIB", "cspTls1Group"), ("CISCO-SSL-PROXY-MIB", "cspHttpHeaderInsertedSslInfoGroup"), ("CISCO-SSL-PROXY-MIB", "cspHttpHeaderInsertedSslClientCertGroup"), ("CISCO-SSL-PROXY-MIB", "cspHttpRedirectInfoGroup"), ("CISCO-SSL-PROXY-MIB", "cspPolicyConfigGroup"), ("CISCO-SSL-PROXY-MIB", "cspTcpGroup"), ("CISCO-SSL-PROXY-MIB", "cspSslCryptoGroup"), ("CISCO-SSL-PROXY-MIB", "cspSslErrorGroup"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceStatsGroup"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceSsl3Group"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceTls1Group"), ("CISCO-SSL-PROXY-MIB", "cspCpuStatusGroup"), ("CISCO-SSL-PROXY-MIB", "cspProxyServiceNotificationGroup"), ("CISCO-SSL-PROXY-MIB", "cspSslResourceLimitNotifObjectsGroup"), ("CISCO-SSL-PROXY-MIB", "cspSslResourceLimitNotifGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspMIBComplianceRev2 = cspMIBComplianceRev2.setStatus('current')
if mibBuilder.loadTexts: cspMIBComplianceRev2.setDescription('The compliance statement for entities which implement the Cisco SSL Proxy MIB.')
cspGlobalConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 1)).setObjects(("CISCO-SSL-PROXY-MIB", "cspGcVersion"), ("CISCO-SSL-PROXY-MIB", "cspGcFIPSMode"), ("CISCO-SSL-PROXY-MIB", "cspGcRSArc4128md5"), ("CISCO-SSL-PROXY-MIB", "cspGcRSArc4128sha"), ("CISCO-SSL-PROXY-MIB", "cspGcRSAdescbcsha"), ("CISCO-SSL-PROXY-MIB", "cspGcRSA3descbcsha"), ("CISCO-SSL-PROXY-MIB", "cspGcNotifyProxyServOperStatus"), ("CISCO-SSL-PROXY-MIB", "cspGcNotifyPSCertExpiring"), ("CISCO-SSL-PROXY-MIB", "cspGcPSCertExpireInterval"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspGlobalConfigGroup = cspGlobalConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cspGlobalConfigGroup.setDescription('A collection of global configuration objects.')
cspProxyServiceConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 2)).setObjects(("CISCO-SSL-PROXY-MIB", "cspPsServiceType"), ("CISCO-SSL-PROXY-MIB", "cspPsVirtualAddressType"), ("CISCO-SSL-PROXY-MIB", "cspPsVirtualAddress"), ("CISCO-SSL-PROXY-MIB", "cspPsVirtualPort"), ("CISCO-SSL-PROXY-MIB", "cspPsServerAddressType"), ("CISCO-SSL-PROXY-MIB", "cspPsServerAddress"), ("CISCO-SSL-PROXY-MIB", "cspPsServerPort"), ("CISCO-SSL-PROXY-MIB", "cspPsAdminStatus"), ("CISCO-SSL-PROXY-MIB", "cspPsOperStatus"), ("CISCO-SSL-PROXY-MIB", "cspPsOperDownReason"), ("CISCO-SSL-PROXY-MIB", "cspPsConfigRowStatus"), ("CISCO-SSL-PROXY-MIB", "cspPspVirTcpPolicyName"), ("CISCO-SSL-PROXY-MIB", "cspPspSerTcpPolicyName"), ("CISCO-SSL-PROXY-MIB", "cspPspSslPolicyName"), ("CISCO-SSL-PROXY-MIB", "cspPspHttpHdrPolicyName"), ("CISCO-SSL-PROXY-MIB", "cspPspUrlRewritePolicyName"), ("CISCO-SSL-PROXY-MIB", "cspPskcTrustPointName"), ("CISCO-SSL-PROXY-MIB", "cspPskcCertFileName"), ("CISCO-SSL-PROXY-MIB", "cspPskcKeyName"), ("CISCO-SSL-PROXY-MIB", "cspPskcKeyFileName"), ("CISCO-SSL-PROXY-MIB", "cspPskcKeySize"), ("CISCO-SSL-PROXY-MIB", "cspPskcKeyTime"), ("CISCO-SSL-PROXY-MIB", "cspPskcCertStatus"), ("CISCO-SSL-PROXY-MIB", "cspPskcCertSubjName"), ("CISCO-SSL-PROXY-MIB", "cspPskcCertSerialNum"), ("CISCO-SSL-PROXY-MIB", "cspPskcIssuerName"), ("CISCO-SSL-PROXY-MIB", "cspPskcIssuerCertSerialNum"), ("CISCO-SSL-PROXY-MIB", "cspPskcCertStartDate"), ("CISCO-SSL-PROXY-MIB", "cspPskcCertEndDate"), ("CISCO-SSL-PROXY-MIB", "cspPskcConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspProxyServiceConfigGroup = cspProxyServiceConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cspProxyServiceConfigGroup.setDescription('A collection of configuration objects for a proxy service.')
cspPolicyConfigGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 3)).setObjects(("CISCO-SSL-PROXY-MIB", "cspTpSynTimeOut"), ("CISCO-SSL-PROXY-MIB", "cspTpInActivityTimeOut"), ("CISCO-SSL-PROXY-MIB", "cspTpNagleAlgo"), ("CISCO-SSL-PROXY-MIB", "cspTpFinWaitTimeOut"), ("CISCO-SSL-PROXY-MIB", "cspTpReassemTimeOut"), ("CISCO-SSL-PROXY-MIB", "cspTpRcvBufShrLim"), ("CISCO-SSL-PROXY-MIB", "cspTpTransBufShrLim"), ("CISCO-SSL-PROXY-MIB", "cspTpMss"), ("CISCO-SSL-PROXY-MIB", "cspTpPathMtuDisc"), ("CISCO-SSL-PROXY-MIB", "cspTpConfigRowStatus"), ("CISCO-SSL-PROXY-MIB", "cspSpRSArc4128md5"), ("CISCO-SSL-PROXY-MIB", "cspSpRSArc4128sha"), ("CISCO-SSL-PROXY-MIB", "cspSpRSAdescbcsha"), ("CISCO-SSL-PROXY-MIB", "cspSpRSA3descbcsha"), ("CISCO-SSL-PROXY-MIB", "cspSpProtocol"), ("CISCO-SSL-PROXY-MIB", "cspSpCloseProtocol"), ("CISCO-SSL-PROXY-MIB", "cspSpSessionCache"), ("CISCO-SSL-PROXY-MIB", "cspSpSessionTimeOut"), ("CISCO-SSL-PROXY-MIB", "cspSpConfigRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspPolicyConfigGroup = cspPolicyConfigGroup.setStatus('current')
if mibBuilder.loadTexts: cspPolicyConfigGroup.setDescription('A collection of configuration objects for a policy.')
cspTcpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 4)).setObjects(("CISCO-SSL-PROXY-MIB", "cspTcpCountersClearTime"), ("CISCO-SSL-PROXY-MIB", "cspTcConnInit"), ("CISCO-SSL-PROXY-MIB", "cspTcConnAccept"), ("CISCO-SSL-PROXY-MIB", "cspTcConnEstab"), ("CISCO-SSL-PROXY-MIB", "cspTcConnDrop"), ("CISCO-SSL-PROXY-MIB", "cspTcConnClosed"), ("CISCO-SSL-PROXY-MIB", "cspTcSynTimeOuts"), ("CISCO-SSL-PROXY-MIB", "cspTcIdleTimeOuts"), ("CISCO-SSL-PROXY-MIB", "cspTcTotalPktSent"), ("CISCO-SSL-PROXY-MIB", "cspTcDataPktSent"), ("CISCO-SSL-PROXY-MIB", "cspTcDataByteSent"), ("CISCO-SSL-PROXY-MIB", "cspTcTotalPktRcv"), ("CISCO-SSL-PROXY-MIB", "cspTcPktRcvSeq"), ("CISCO-SSL-PROXY-MIB", "cspTcByteRcvSeq"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspTcpGroup = cspTcpGroup.setStatus('current')
if mibBuilder.loadTexts: cspTcpGroup.setDescription('A collection of TCP protocol objects.')
cspSslGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 5)).setObjects(("CISCO-SSL-PROXY-MIB", "cspSslCountersClearTime"), ("CISCO-SSL-PROXY-MIB", "cspScConnAttempt"), ("CISCO-SSL-PROXY-MIB", "cspScConnComplete"), ("CISCO-SSL-PROXY-MIB", "cspScConnInHandShake"), ("CISCO-SSL-PROXY-MIB", "cspScConnInDataPhase"), ("CISCO-SSL-PROXY-MIB", "cspScRenegAttempt"), ("CISCO-SSL-PROXY-MIB", "cspScConnInReneg"), ("CISCO-SSL-PROXY-MIB", "cspScActiveSessions"), ("CISCO-SSL-PROXY-MIB", "cspScMaxHandShakeConns"), ("CISCO-SSL-PROXY-MIB", "cspScCurrDeviceQLen"), ("CISCO-SSL-PROXY-MIB", "cspScMaxDeviceQLen"), ("CISCO-SSL-PROXY-MIB", "cspScSessionReuses"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspSslGroup = cspSslGroup.setStatus('current')
if mibBuilder.loadTexts: cspSslGroup.setDescription('A collection of SSL handshake protocol statistics.')
cspSsl3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 6)).setObjects(("CISCO-SSL-PROXY-MIB", "cspS3cFullHandShake"), ("CISCO-SSL-PROXY-MIB", "cspS3cResumedHandShake"), ("CISCO-SSL-PROXY-MIB", "cspS3cHandShakeFailed"), ("CISCO-SSL-PROXY-MIB", "cspS3cDataFailed"), ("CISCO-SSL-PROXY-MIB", "cspS3cBadMacRcvd"), ("CISCO-SSL-PROXY-MIB", "cspS3cPadErrors"), ("CISCO-SSL-PROXY-MIB", "cspS3cRSArc4128md5"), ("CISCO-SSL-PROXY-MIB", "cspS3cRSArc4128sha"), ("CISCO-SSL-PROXY-MIB", "cspS3cRSAdescbcsha"), ("CISCO-SSL-PROXY-MIB", "cspS3cRSA3desedecbcsha"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspSsl3Group = cspSsl3Group.setStatus('current')
if mibBuilder.loadTexts: cspSsl3Group.setDescription('A collection of SSL 3.0 protocol statistics.')
cspTls1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 7)).setObjects(("CISCO-SSL-PROXY-MIB", "cspTlcFullHandShake"), ("CISCO-SSL-PROXY-MIB", "cspTlcResumedHandShake"), ("CISCO-SSL-PROXY-MIB", "cspTlcHandShakeFailed"), ("CISCO-SSL-PROXY-MIB", "cspTlcDataFailed"), ("CISCO-SSL-PROXY-MIB", "cspTlcBadMacRcvd"), ("CISCO-SSL-PROXY-MIB", "cspTlcPadErrors"), ("CISCO-SSL-PROXY-MIB", "cspTlcRSArc4128md5"), ("CISCO-SSL-PROXY-MIB", "cspTlcRSArc4128sha"), ("CISCO-SSL-PROXY-MIB", "cspTlcRSAdescbcsha"), ("CISCO-SSL-PROXY-MIB", "cspTlcRSA3desedecbcsha"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspTls1Group = cspTls1Group.setStatus('current')
if mibBuilder.loadTexts: cspTls1Group.setDescription('A collection of TLS 1.0 protocol statistics.')
cspSslCryptoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 8)).setObjects(("CISCO-SSL-PROXY-MIB", "cspSccBlksEncrypted"), ("CISCO-SSL-PROXY-MIB", "cspSccBlksDecrypted"), ("CISCO-SSL-PROXY-MIB", "cspSccBytesEncrypted"), ("CISCO-SSL-PROXY-MIB", "cspSccBytesDecrypted"), ("CISCO-SSL-PROXY-MIB", "cspSccPublicKeyOpers"), ("CISCO-SSL-PROXY-MIB", "cspSccPrivateKeyOpers"), ("CISCO-SSL-PROXY-MIB", "cspSccCryptoFails"), ("CISCO-SSL-PROXY-MIB", "cspSccDmaErrors"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspSslCryptoGroup = cspSslCryptoGroup.setStatus('current')
if mibBuilder.loadTexts: cspSslCryptoGroup.setDescription('A collection of cryptographic statistics.')
cspSslErrorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 9)).setObjects(("CISCO-SSL-PROXY-MIB", "cspSecSessAllocFailed"), ("CISCO-SSL-PROXY-MIB", "cspSecSessLimitExceed"), ("CISCO-SSL-PROXY-MIB", "cspSecHShakeInitFailed"), ("CISCO-SSL-PROXY-MIB", "cspSecRenegFailed"), ("CISCO-SSL-PROXY-MIB", "cspSecFatalAlertsRcvd"), ("CISCO-SSL-PROXY-MIB", "cspSecFatalAlertsSent"), ("CISCO-SSL-PROXY-MIB", "cspSecNoCipherAlerts"), ("CISCO-SSL-PROXY-MIB", "cspSecVerMismatchAlerts"), ("CISCO-SSL-PROXY-MIB", "cspSecNoComprsnAlerts"), ("CISCO-SSL-PROXY-MIB", "cspSecHShakeHndleMemFail"), ("CISCO-SSL-PROXY-MIB", "cspSecStalePakDrop"), ("CISCO-SSL-PROXY-MIB", "cspSecServiceIdDiscard"), ("CISCO-SSL-PROXY-MIB", "cspSecHShakeLimitExceed"), ("CISCO-SSL-PROXY-MIB", "cspSecDevConnCtxtFail"), ("CISCO-SSL-PROXY-MIB", "cspSecMemAllocFailed"), ("CISCO-SSL-PROXY-MIB", "cspSecBuffAllocFailed"), ("CISCO-SSL-PROXY-MIB", "cspSecAlertSendFailed"), ("CISCO-SSL-PROXY-MIB", "cspSecOverloadDropped"), ("CISCO-SSL-PROXY-MIB", "cspSecConnAborted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspSslErrorGroup = cspSslErrorGroup.setStatus('current')
if mibBuilder.loadTexts: cspSslErrorGroup.setDescription('A collection of SSL protocol error counters.')
cspProxyServiceStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 10)).setObjects(("CISCO-SSL-PROXY-MIB", "cspPscClearTime"), ("CISCO-SSL-PROXY-MIB", "cspPscConnAttempt"), ("CISCO-SSL-PROXY-MIB", "cspPscConnComplete"), ("CISCO-SSL-PROXY-MIB", "cspPscFullHandShake"), ("CISCO-SSL-PROXY-MIB", "cspPscResumedHandShake"), ("CISCO-SSL-PROXY-MIB", "cspPscConnInHandShake"), ("CISCO-SSL-PROXY-MIB", "cspPscConnInDataPhase"), ("CISCO-SSL-PROXY-MIB", "cspPscRenegAttempt"), ("CISCO-SSL-PROXY-MIB", "cspPscConnInReneg"), ("CISCO-SSL-PROXY-MIB", "cspPscBlksEncrypted"), ("CISCO-SSL-PROXY-MIB", "cspPscBlksDecrypted"), ("CISCO-SSL-PROXY-MIB", "cspPscBytesEncrypted"), ("CISCO-SSL-PROXY-MIB", "cspPscBytesDecrypted"), ("CISCO-SSL-PROXY-MIB", "cspPscValidSessions"), ("CISCO-SSL-PROXY-MIB", "cspPscSessLimitExceed"), ("CISCO-SSL-PROXY-MIB", "cspPscHandShakeFailed"), ("CISCO-SSL-PROXY-MIB", "cspPscDataFailed"), ("CISCO-SSL-PROXY-MIB", "cspPscFatalAlertsRcvd"), ("CISCO-SSL-PROXY-MIB", "cspPscFatalAlertsSent"), ("CISCO-SSL-PROXY-MIB", "cspPscBadMacRcvd"), ("CISCO-SSL-PROXY-MIB", "cspPscPadErrors"), ("CISCO-SSL-PROXY-MIB", "cspPscNoCipherAlerts"), ("CISCO-SSL-PROXY-MIB", "cspPscNoComprsnAlerts"), ("CISCO-SSL-PROXY-MIB", "cspPscVerMismatchAlerts"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspProxyServiceStatsGroup = cspProxyServiceStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cspProxyServiceStatsGroup.setDescription('A collection of proxy service statistics.')
cspProxyServiceSsl3Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 11)).setObjects(("CISCO-SSL-PROXY-MIB", "cspPs3cClearTime"), ("CISCO-SSL-PROXY-MIB", "cspPs3cFullHandShake"), ("CISCO-SSL-PROXY-MIB", "cspPs3cResumedHandShake"), ("CISCO-SSL-PROXY-MIB", "cspPs3cHandShakeFailed"), ("CISCO-SSL-PROXY-MIB", "cspPs3cDataFailed"), ("CISCO-SSL-PROXY-MIB", "cspPs3cBadMacRcvd"), ("CISCO-SSL-PROXY-MIB", "cspPs3cPadErrors"), ("CISCO-SSL-PROXY-MIB", "cspPs3cRSArc4128md5"), ("CISCO-SSL-PROXY-MIB", "cspPs3cRSArc4128sha"), ("CISCO-SSL-PROXY-MIB", "cspPs3cRSAdescbcsha"), ("CISCO-SSL-PROXY-MIB", "cspPs3cRSA3desedecbcsha"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspProxyServiceSsl3Group = cspProxyServiceSsl3Group.setStatus('current')
if mibBuilder.loadTexts: cspProxyServiceSsl3Group.setDescription('A collection of SSL 3.0 statistics for a proxy service.')
cspProxyServiceTls1Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 12)).setObjects(("CISCO-SSL-PROXY-MIB", "cspPt1cClearTime"), ("CISCO-SSL-PROXY-MIB", "cspPt1cFullHandShake"), ("CISCO-SSL-PROXY-MIB", "cspPt1cResumedHandShake"), ("CISCO-SSL-PROXY-MIB", "cspPt1cHandShakeFailed"), ("CISCO-SSL-PROXY-MIB", "cspPt1cDataFailed"), ("CISCO-SSL-PROXY-MIB", "cspPt1cBadMacRcvd"), ("CISCO-SSL-PROXY-MIB", "cspPt1cPadErrors"), ("CISCO-SSL-PROXY-MIB", "cspPt1cRSArc4128md5"), ("CISCO-SSL-PROXY-MIB", "cspPt1cRSArc4128sha"), ("CISCO-SSL-PROXY-MIB", "cspPt1cRSAdescbcsha"), ("CISCO-SSL-PROXY-MIB", "cspPt1cRSA3desedecbcsha"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspProxyServiceTls1Group = cspProxyServiceTls1Group.setStatus('current')
if mibBuilder.loadTexts: cspProxyServiceTls1Group.setDescription('A collection of TLS 1.0 statistics for a proxy service.')
cspCpuStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 13)).setObjects(("CISCO-SSL-PROXY-MIB", "cspCpuStatus"), ("CISCO-SSL-PROXY-MIB", "cspCpuClearTime"), ("CISCO-SSL-PROXY-MIB", "cspCpuProcessUtil"), ("CISCO-SSL-PROXY-MIB", "cspCpuInterruptUtil"), ("CISCO-SSL-PROXY-MIB", "cspCpuProcessUtilIn5Sec"), ("CISCO-SSL-PROXY-MIB", "cspCpuProcessUtilIn1Min"), ("CISCO-SSL-PROXY-MIB", "cspCpuProcessUtilIn5Min"), ("CISCO-SSL-PROXY-MIB", "cspCpuInterruptUtilIn5Sec"), ("CISCO-SSL-PROXY-MIB", "cspCpuInterruptUtilIn1Min"), ("CISCO-SSL-PROXY-MIB", "cspCpuInterruptUtilIn5Min"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspCpuStatusGroup = cspCpuStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cspCpuStatusGroup.setDescription('A collection of statuses and usage information about each CPU on the SSL proxy device.')
cspProxyServiceNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 14)).setObjects(("CISCO-SSL-PROXY-MIB", "cspServOperStatus"), ("CISCO-SSL-PROXY-MIB", "cspServCertExpiring"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspProxyServiceNotificationGroup = cspProxyServiceNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: cspProxyServiceNotificationGroup.setDescription('A collection of notifications for signaling important proxy service events.')
cspHttpHeaderInsertedSslInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 15)).setObjects(("CISCO-SSL-PROXY-MIB", "cspNumOfSslInfoSuccessInserted"), ("CISCO-SSL-PROXY-MIB", "cspNumOfSslInfoFailedInserted"), ("CISCO-SSL-PROXY-MIB", "cspNumOfSpoofHttpHeaderDeleted"), ("CISCO-SSL-PROXY-MIB", "cspNumOfSslSessHeaderExtracted"), ("CISCO-SSL-PROXY-MIB", "cspNumOfSslSessHeaderFailedExtracted"), ("CISCO-SSL-PROXY-MIB", "cspNumOfSslServerCertHeaderExtracted"), ("CISCO-SSL-PROXY-MIB", "cspNumOfSslServerCerHeaderFailedExtracted"), ("CISCO-SSL-PROXY-MIB", "cspNumOfTimesSslHeaderTruncated"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspHttpHeaderInsertedSslInfoGroup = cspHttpHeaderInsertedSslInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cspHttpHeaderInsertedSslInfoGroup.setDescription('A collection of stats related to the insertion of SSL session and SSL server certificate information into HTTP header.')
cspHttpHeaderInsertedSslClientCertGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 16)).setObjects(("CISCO-SSL-PROXY-MIB", "cspNumOfSslClientCertHeaderExtracted"), ("CISCO-SSL-PROXY-MIB", "cspNumOfSslClientCertHeaderFailedExtracted"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspHttpHeaderInsertedSslClientCertGroup = cspHttpHeaderInsertedSslClientCertGroup.setStatus('current')
if mibBuilder.loadTexts: cspHttpHeaderInsertedSslClientCertGroup.setDescription('A collection of stats related to the insertion of SSL client certificate information into HTTP header.')
cspHttpRedirectInfoGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 17)).setObjects(("CISCO-SSL-PROXY-MIB", "cspCertNotYetValidRedirect"), ("CISCO-SSL-PROXY-MIB", "cspCertExpiredRedirect"), ("CISCO-SSL-PROXY-MIB", "cspIssuerCertNotFoundRedirect"), ("CISCO-SSL-PROXY-MIB", "cspCertRevokedRedirect"), ("CISCO-SSL-PROXY-MIB", "cspNoClientCertSentRedirect"), ("CISCO-SSL-PROXY-MIB", "cspNoCrlAvailableRedirect"), ("CISCO-SSL-PROXY-MIB", "cspCrlExpiredRedirect"), ("CISCO-SSL-PROXY-MIB", "cspCertSignatureFailedRedirect"), ("CISCO-SSL-PROXY-MIB", "cspOtherCertErrorRedirect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspHttpRedirectInfoGroup = cspHttpRedirectInfoGroup.setStatus('current')
if mibBuilder.loadTexts: cspHttpRedirectInfoGroup.setDescription('A collection of counters for http redirect due to client certificate authentication failure type.')
cspSslResourceLimitNotifObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 18)).setObjects(("CISCO-SSL-PROXY-MIB", "cspSslTrapType"), ("CISCO-SSL-PROXY-MIB", "cspSslMaxConn"), ("CISCO-SSL-PROXY-MIB", "cspSslActiveConn"), ("CISCO-SSL-PROXY-MIB", "cspSslConfigHighConnPcnt"), ("CISCO-SSL-PROXY-MIB", "cspSslActiveConnPcnt"), ("CISCO-SSL-PROXY-MIB", "cspSslConfigWatermarkConnPcnt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspSslResourceLimitNotifObjectsGroup = cspSslResourceLimitNotifObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: cspSslResourceLimitNotifObjectsGroup.setDescription('Collection of the objects for connection notification related configuration and information.')
cspSslResourceLimitNotifGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 9, 9, 370, 2, 2, 19)).setObjects(("CISCO-SSL-PROXY-MIB", "cspSSLResourceLimitReached"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cspSslResourceLimitNotifGroup = cspSslResourceLimitNotifGroup.setStatus('current')
if mibBuilder.loadTexts: cspSslResourceLimitNotifGroup.setDescription('A collection of notifications for signaling important resource limit exceed signalling.')
mibBuilder.exportSymbols("CISCO-SSL-PROXY-MIB", cspTcDataPktSent=cspTcDataPktSent, cspPskcCertFileName=cspPskcCertFileName, cspPskcCertSubjName=cspPskcCertSubjName, cspMIBComplianceRev2=cspMIBComplianceRev2, cspSslMaxConn=cspSslMaxConn, cspPskcConfigRowStatus=cspPskcConfigRowStatus, cspSpRSA3descbcsha=cspSpRSA3descbcsha, cspNoCrlAvailableRedirect=cspNoCrlAvailableRedirect, cspPspSerTcpPolicyName=cspPspSerTcpPolicyName, cspTcpCountersInfo=cspTcpCountersInfo, cspSpPolicyName=cspSpPolicyName, cspSecSessLimitExceed=cspSecSessLimitExceed, cspTlcFullHandShake=cspTlcFullHandShake, cspSpProtocol=cspSpProtocol, cspSccPrivateKeyOpers=cspSccPrivateKeyOpers, cspCpuProcessUtilIn5Sec=cspCpuProcessUtilIn5Sec, cspTcIdleTimeOuts=cspTcIdleTimeOuts, cspSsl3Counters=cspSsl3Counters, cspPscBytesDecrypted=cspPscBytesDecrypted, cspPs3cResumedHandShake=cspPs3cResumedHandShake, cspTcPktRcvSeq=cspTcPktRcvSeq, cspTpPathMtuDisc=cspTpPathMtuDisc, cspCpuProcessUtilIn5Min=cspCpuProcessUtilIn5Min, cspPsCounterEntry=cspPsCounterEntry, cspHttpRedirectInfo=cspHttpRedirectInfo, cspScConnAttempt=cspScConnAttempt, cspCpuStatusEntry=cspCpuStatusEntry, cspProxyServiceStatsGroup=cspProxyServiceStatsGroup, cspSccPublicKeyOpers=cspSccPublicKeyOpers, cspNumOfSslInfoFailedInserted=cspNumOfSslInfoFailedInserted, cspScConnComplete=cspScConnComplete, cspPt1cRSA3desedecbcsha=cspPt1cRSA3desedecbcsha, cspNumOfSslInfoSuccessInserted=cspNumOfSslInfoSuccessInserted, cspSslTrapType=cspSslTrapType, cspCpuStatusInfo=cspCpuStatusInfo, cspSslConfigHighConnPcnt=cspSslConfigHighConnPcnt, cspPscClearTime=cspPscClearTime, cspSslActiveConnPcnt=cspSslActiveConnPcnt, cspSslErrorGroup=cspSslErrorGroup, cspPsAdminStatus=cspPsAdminStatus, cspSecConnAborted=cspSecConnAborted, cspTcTotalPktRcv=cspTcTotalPktRcv, cspGcNotifyPSCertExpiring=cspGcNotifyPSCertExpiring, cspTcByteRcvSeq=cspTcByteRcvSeq, cspPscConnComplete=cspPscConnComplete, cspNumOfSslClientCertHeaderExtracted=cspNumOfSslClientCertHeaderExtracted, cspTcConnAccept=cspTcConnAccept, cspS3cHandShakeFailed=cspS3cHandShakeFailed, cspPsServiceType=cspPsServiceType, cspSecHShakeHndleMemFail=cspSecHShakeHndleMemFail, cspSecMemAllocFailed=cspSecMemAllocFailed, cspPscVerMismatchAlerts=cspPscVerMismatchAlerts, cspSpRSArc4128sha=cspSpRSArc4128sha, cspGcFIPSMode=cspGcFIPSMode, cspSecHShakeInitFailed=cspSecHShakeInitFailed, cspMIBObjects=cspMIBObjects, cspTpRcvBufShrLim=cspTpRcvBufShrLim, cspSpRSAdescbcsha=cspSpRSAdescbcsha, cspSecStalePakDrop=cspSecStalePakDrop, cspScConnInReneg=cspScConnInReneg, cspScActiveSessions=cspScActiveSessions, cspPscConnInReneg=cspPscConnInReneg, cspPs3cRSA3desedecbcsha=cspPs3cRSA3desedecbcsha, cspPsListIndex=cspPsListIndex, cspTcConnInit=cspTcConnInit, cspPspVirTcpPolicyName=cspPspVirTcpPolicyName, cspCertSignatureFailedRedirect=cspCertSignatureFailedRedirect, cspSecOverloadDropped=cspSecOverloadDropped, cspPspSslPolicyName=cspPspSslPolicyName, cspSecDevConnCtxtFail=cspSecDevConnCtxtFail, cspTls1Counters=cspTls1Counters, cspPsKeyCertEntry=cspPsKeyCertEntry, cspNoClientCertSentRedirect=cspNoClientCertSentRedirect, cspS3cRSArc4128md5=cspS3cRSArc4128md5, cspSsl3Group=cspSsl3Group, cspPsVirtualPort=cspPsVirtualPort, cspTcpPolicyConfig=cspTcpPolicyConfig, cspPscFatalAlertsSent=cspPscFatalAlertsSent, cspPskcCertSerialNum=cspPskcCertSerialNum, cspPscBadMacRcvd=cspPscBadMacRcvd, cspS3cRSArc4128sha=cspS3cRSArc4128sha, cspSecRenegFailed=cspSecRenegFailed, cspProxyServiceTls1Group=cspProxyServiceTls1Group, cspPscConnAttempt=cspPscConnAttempt, cspSecHShakeLimitExceed=cspSecHShakeLimitExceed, cspPscValidSessions=cspPscValidSessions, cspPsPolicyConfig=cspPsPolicyConfig, cspPscPadErrors=cspPscPadErrors, cspNumOfSslServerCerHeaderFailedExtracted=cspNumOfSslServerCerHeaderFailedExtracted, cspPsTls1CountersTable=cspPsTls1CountersTable, cspGcRSArc4128sha=cspGcRSArc4128sha, cspPsServerAddressType=cspPsServerAddressType, cspGcPSCertExpireInterval=cspGcPSCertExpireInterval, cspPt1cBadMacRcvd=cspPt1cBadMacRcvd, cspPsEntry=cspPsEntry, cspSpConfigRowStatus=cspSpConfigRowStatus, cspPt1cFullHandShake=cspPt1cFullHandShake, cspSccCryptoFails=cspSccCryptoFails, cspPs3cDataFailed=cspPs3cDataFailed, cspPskcKeyTime=cspPskcKeyTime, cspPspHttpHdrPolicyName=cspPspHttpHdrPolicyName, cspScConnInDataPhase=cspScConnInDataPhase, cspNumOfTimesSslHeaderTruncated=cspNumOfTimesSslHeaderTruncated, cspMIBNotifications=cspMIBNotifications, PYSNMP_MODULE_ID=ciscoSslProxyMIB, cspSslCountersClearTime=cspSslCountersClearTime, cspPs3cHandShakeFailed=cspPs3cHandShakeFailed, cspSpSessionCache=cspSpSessionCache, cspSccBlksEncrypted=cspSccBlksEncrypted, cspSecSessAllocFailed=cspSecSessAllocFailed, cspIssuerCertNotFoundRedirect=cspIssuerCertNotFoundRedirect, cspScSessionReuses=cspScSessionReuses, cspMIBCompliance=cspMIBCompliance, cspPs3cClearTime=cspPs3cClearTime, cspSSLResourceLimitReached=cspSSLResourceLimitReached, cspNumOfSslSessHeaderFailedExtracted=cspNumOfSslSessHeaderFailedExtracted, cspNumOfSpoofHttpHeaderDeleted=cspNumOfSpoofHttpHeaderDeleted, cspPsTable=cspPsTable, cspTlcBadMacRcvd=cspTlcBadMacRcvd, cspPt1cRSAdescbcsha=cspPt1cRSAdescbcsha, cspCpuStatus=cspCpuStatus, ciscoSslProxyMIB=ciscoSslProxyMIB, cspTlcRSArc4128sha=cspTlcRSArc4128sha, cspServCertExpiring=cspServCertExpiring, cspPs3cPadErrors=cspPs3cPadErrors, cspOtherCertErrorRedirect=cspOtherCertErrorRedirect, cspSecAlertSendFailed=cspSecAlertSendFailed, cspPt1cRSArc4128md5=cspPt1cRSArc4128md5, cspSecFatalAlertsRcvd=cspSecFatalAlertsRcvd, cspPskcIssuerCertSerialNum=cspPskcIssuerCertSerialNum, cspScConnInHandShake=cspScConnInHandShake, cspScMaxDeviceQLen=cspScMaxDeviceQLen, cspPsConfigRowStatus=cspPsConfigRowStatus, cspSpCloseProtocol=cspSpCloseProtocol, cspTlcRSArc4128md5=cspTlcRSArc4128md5, cspSslCounters=cspSslCounters, cspPs3cRSArc4128md5=cspPs3cRSArc4128md5, cspTcpGroup=cspTcpGroup, cspTcConnEstab=cspTcConnEstab, cspS3cBadMacRcvd=cspS3cBadMacRcvd, cspNumOfSslClientCertHeaderFailedExtracted=cspNumOfSslClientCertHeaderFailedExtracted, cspSslResourceLimitNotifObjectsGroup=cspSslResourceLimitNotifObjectsGroup, cspPscBlksEncrypted=cspPscBlksEncrypted, cspTpTransBufShrLim=cspTpTransBufShrLim, cspScMaxHandShakeConns=cspScMaxHandShakeConns, cspSccBlksDecrypted=cspSccBlksDecrypted, cspPscDataFailed=cspPscDataFailed, cspPscNoCipherAlerts=cspPscNoCipherAlerts, cspPt1cPadErrors=cspPt1cPadErrors, cspProxyServiceConfigGroup=cspProxyServiceConfigGroup, cspTcpPolicyTable=cspTcpPolicyTable, cspTlcPadErrors=cspTlcPadErrors, cspTcpCounters=cspTcpCounters, cspCertRevokedRedirect=cspCertRevokedRedirect, cspPolicyConfigGroup=cspPolicyConfigGroup, cspHttpRedirectInfoGroup=cspHttpRedirectInfoGroup, cspPs3cRSArc4128sha=cspPs3cRSArc4128sha, cspPsTls1CounterEntry=cspPsTls1CounterEntry, cspGlobalConfig=cspGlobalConfig, cspPsSsl3CounterEntry=cspPsSsl3CounterEntry, cspTcDataByteSent=cspTcDataByteSent, cspPsKeyCertConfig=cspPsKeyCertConfig, cspGcVersion=cspGcVersion, cspPs3cBadMacRcvd=cspPs3cBadMacRcvd, cspCpuProcessUtil=cspCpuProcessUtil, cspMIBGroups=cspMIBGroups, cspTpInActivityTimeOut=cspTpInActivityTimeOut, cspPscHandShakeFailed=cspPscHandShakeFailed, cspSslPolicyConfig=cspSslPolicyConfig, cspS3cRSA3desedecbcsha=cspS3cRSA3desedecbcsha, cspPskcKeySize=cspPskcKeySize, cspPscBytesEncrypted=cspPscBytesEncrypted, cspSecNoCipherAlerts=cspSecNoCipherAlerts, cspPskcKeyUsage=cspPskcKeyUsage, cspPscConnInHandShake=cspPscConnInHandShake, cspSpRSArc4128md5=cspSpRSArc4128md5, cspSccBytesEncrypted=cspSccBytesEncrypted, cspTls1Group=cspTls1Group, cspTcpCountersClearTime=cspTcpCountersClearTime, cspCpuStatusGroup=cspCpuStatusGroup, cspPsCountersTable=cspPsCountersTable, cspSslErrorCounters=cspSslErrorCounters, cspPskcCertEndDate=cspPskcCertEndDate, cspTcConnClosed=cspTcConnClosed, cspTlcRSA3desedecbcsha=cspTlcRSA3desedecbcsha, cspPsSsl3Counters=cspPsSsl3Counters, cspServOperStatus=cspServOperStatus, cspSslCryptoGroup=cspSslCryptoGroup, cspScCurrDeviceQLen=cspScCurrDeviceQLen, cspGcNotifyProxyServOperStatus=cspGcNotifyProxyServOperStatus, cspPscResumedHandShake=cspPscResumedHandShake, cspMIBConformance=cspMIBConformance, cspPsVirtualAddressType=cspPsVirtualAddressType, cspPskcIssuerName=cspPskcIssuerName, cspS3cFullHandShake=cspS3cFullHandShake, cspTcTotalPktSent=cspTcTotalPktSent, cspTlcRSAdescbcsha=cspTlcRSAdescbcsha, cspHttpHeaderInsertedSslClientCertGroup=cspHttpHeaderInsertedSslClientCertGroup, cspGcRSArc4128md5=cspGcRSArc4128md5, cspNumOfSslServerCertHeaderExtracted=cspNumOfSslServerCertHeaderExtracted, cspScRenegAttempt=cspScRenegAttempt, cspPt1cClearTime=cspPt1cClearTime, cspTcSynTimeOuts=cspTcSynTimeOuts, cspCpuStatusTable=cspCpuStatusTable, cspSecNoComprsnAlerts=cspSecNoComprsnAlerts, cspTpConfigRowStatus=cspTpConfigRowStatus, cspCpuName=cspCpuName, cspPsPolicyEntry=cspPsPolicyEntry, cspPsServerPort=cspPsServerPort, cspSccDmaErrors=cspSccDmaErrors, cspPt1cHandShakeFailed=cspPt1cHandShakeFailed, cspPscRenegAttempt=cspPscRenegAttempt, cspPsName=cspPsName, cspS3cRSAdescbcsha=cspS3cRSAdescbcsha, cspPt1cDataFailed=cspPt1cDataFailed, cspCrlExpiredRedirect=cspCrlExpiredRedirect, cspSecVerMismatchAlerts=cspSecVerMismatchAlerts, cspPs3cRSAdescbcsha=cspPs3cRSAdescbcsha, cspTcpPolicyEntry=cspTcpPolicyEntry, cspPt1cRSArc4128sha=cspPt1cRSArc4128sha, cspTcConnDrop=cspTcConnDrop, cspProxyServiceSsl3Group=cspProxyServiceSsl3Group, cspPspUrlRewritePolicyName=cspPspUrlRewritePolicyName, cspGcRSA3descbcsha=cspGcRSA3descbcsha, cspTpReassemTimeOut=cspTpReassemTimeOut, cspSslCryptoCounters=cspSslCryptoCounters, cspPscFatalAlertsRcvd=cspPscFatalAlertsRcvd, cspPskcKeyFileName=cspPskcKeyFileName, cspPscNoComprsnAlerts=cspPscNoComprsnAlerts, cspSslCountersInfo=cspSslCountersInfo, cspPt1cResumedHandShake=cspPt1cResumedHandShake, cspHttpHeaderInsertedSslClientCertStats=cspHttpHeaderInsertedSslClientCertStats, cspHttpRedirectClientCertAuthFailedStats=cspHttpRedirectClientCertAuthFailedStats, cspCertNotYetValidRedirect=cspCertNotYetValidRedirect, cspHttpHeaderInsertedSslInfoStats=cspHttpHeaderInsertedSslInfoStats, cspPsVirtualAddress=cspPsVirtualAddress, cspCertExpiredRedirect=cspCertExpiredRedirect, cspPs3cFullHandShake=cspPs3cFullHandShake, cspSslResourceLimitNotifGroup=cspSslResourceLimitNotifGroup, cspTpFinWaitTimeOut=cspTpFinWaitTimeOut, cspTpNagleAlgo=cspTpNagleAlgo, cspProxyServiceNotificationGroup=cspProxyServiceNotificationGroup, cspPskcCertStartDate=cspPskcCertStartDate, cspS3cResumedHandShake=cspS3cResumedHandShake, cspCpuInterruptUtilIn5Min=cspCpuInterruptUtilIn5Min, cspCpuInterruptUtilIn1Min=cspCpuInterruptUtilIn1Min, cspMIBCompliances=cspMIBCompliances, cspGcRSAdescbcsha=cspGcRSAdescbcsha, cspPsKeyCertTable=cspPsKeyCertTable, cspTpSynTimeOut=cspTpSynTimeOut, cspMIBComplianceRev1=cspMIBComplianceRev1, cspPsSsl3CountersTable=cspPsSsl3CountersTable, cspTlcHandShakeFailed=cspTlcHandShakeFailed, cspTpPolicyName=cspTpPolicyName)
mibBuilder.exportSymbols("CISCO-SSL-PROXY-MIB", cspS3cPadErrors=cspS3cPadErrors, cspSpSessionTimeOut=cspSpSessionTimeOut, cspSecServiceIdDiscard=cspSecServiceIdDiscard, cspPsTls1Counters=cspPsTls1Counters, cspCpuProcessUtilIn1Min=cspCpuProcessUtilIn1Min, cspPsServerAddress=cspPsServerAddress, cspNumOfSslSessHeaderExtracted=cspNumOfSslSessHeaderExtracted, cspPscFullHandShake=cspPscFullHandShake, cspHttpHeaderInsertedInfo=cspHttpHeaderInsertedInfo, cspSslConfigWatermarkConnPcnt=cspSslConfigWatermarkConnPcnt, cspGlobalConfigGroup=cspGlobalConfigGroup, cspSslGroup=cspSslGroup, cspHttpHeaderInsertedSslInfoGroup=cspHttpHeaderInsertedSslInfoGroup, cspPsOperStatus=cspPsOperStatus, cspPscSessLimitExceed=cspPscSessLimitExceed, cspSslResourceNotifInfo=cspSslResourceNotifInfo, cspTlcDataFailed=cspTlcDataFailed, cspPskcCertStatus=cspPskcCertStatus, cspPskcTrustPointName=cspPskcTrustPointName, cspPsCounters=cspPsCounters, cspSslPolicyEntry=cspSslPolicyEntry, cspSecBuffAllocFailed=cspSecBuffAllocFailed, cspPscConnInDataPhase=cspPscConnInDataPhase, cspCpuInterruptUtil=cspCpuInterruptUtil, cspSslActiveConn=cspSslActiveConn, cspPscBlksDecrypted=cspPscBlksDecrypted, cspTlcResumedHandShake=cspTlcResumedHandShake, cspPsConfig=cspPsConfig, cspS3cDataFailed=cspS3cDataFailed, cspSecFatalAlertsSent=cspSecFatalAlertsSent, cspCpuClearTime=cspCpuClearTime, cspSslPolicyTable=cspSslPolicyTable, cspPskcKeyName=cspPskcKeyName, cspTpMss=cspTpMss, cspCpuInterruptUtilIn5Sec=cspCpuInterruptUtilIn5Sec, cspPsPolicyTable=cspPsPolicyTable, cspPsOperDownReason=cspPsOperDownReason, cspSccBytesDecrypted=cspSccBytesDecrypted)
