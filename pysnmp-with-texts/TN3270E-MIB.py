#
# PySNMP MIB module TN3270E-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TN3270E-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:23:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
IANATn3270eLogData, IANATn3270eAddress, IANATn3270ResourceType, IANATn3270DeviceType, IANATn3270Functions, IANATn3270eAddrType, IANATn3270eClientType = mibBuilder.importSymbols("IANATn3270eTC-MIB", "IANATn3270eLogData", "IANATn3270eAddress", "IANATn3270ResourceType", "IANATn3270DeviceType", "IANATn3270Functions", "IANATn3270eAddrType", "IANATn3270eClientType")
snanauMIB, = mibBuilder.importSymbols("SNA-NAU-MIB", "snanauMIB")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "ModuleCompliance", "NotificationGroup")
NotificationType, TimeTicks, IpAddress, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Bits, ObjectIdentity, Integer32, Gauge32, iso, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "TimeTicks", "IpAddress", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Bits", "ObjectIdentity", "Integer32", "Gauge32", "iso", "MibIdentifier")
RowStatus, TimeStamp, TextualConvention, TestAndIncr, DisplayString, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TimeStamp", "TextualConvention", "TestAndIncr", "DisplayString", "DateAndTime")
Utf8String, = mibBuilder.importSymbols("SYSAPPL-MIB", "Utf8String")
tn3270eMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 34, 8))
tn3270eMIB.setRevisions(('2006-01-13 00:00', '1998-07-27 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tn3270eMIB.setRevisionsDescriptions(('Removed the IMPORTing of Unsigned32 from CISCO-TC, by changing it back to be IMPORTed from SNMPv2-SMI (as in RFC 2561).', 'Initial version of this MIB Module, published as RFC 2561.',))
if mibBuilder.loadTexts: tn3270eMIB.setLastUpdated('200601130000Z')
if mibBuilder.loadTexts: tn3270eMIB.setOrganization('TN3270E Working Group')
if mibBuilder.loadTexts: tn3270eMIB.setContactInfo('Kenneth White (kennethw@vnet.ibm.com) IBM Corp. - Dept. BRQA/Bldg. 501/G114 P.O. Box 12195 3039 Cornwallis RTP, NC 27709-2195 USA Robert Moore (remoore@us.ibm.com) IBM Corp. - Dept. BRQA/Bldg. 501/G114 P.O. Box 12195 3039 Cornwallis RTP, NC 27709-2195 USA +1-919-254-4436')
if mibBuilder.loadTexts: tn3270eMIB.setDescription('This module defines a portion of the management information base (MIB) for managing TN3270E servers.')
class SnaResourceName(TextualConvention, OctetString):
    description = "The textual convention for defining an SNA resource name. A fully qualified SNA resource name, consisting of a 1 to 8 character network identifier (NetId), a period ('.'), and a 1 to 8 character resource name (ResName). The NetId and ResName are constructed from the uppercase letters 'A' - 'Z' and the numerics '0' - '9', all encoded in ASCII, with the restriction that the first character of each must be a letter. Blanks are not allowed. Earlier versions of SNA permitted three additional characters in NetIds and ResNames: '#', '@', and '$'. While this use of these characters has been retired, a Management Station should still accept them for backward compatibility. Note: This Textual Convention is not subject to internationalization, and does not use the character encodings used by the Utf8String Textual Convention."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 17)

class Tn3270eTraceData(TextualConvention, OctetString):
    description = "An octet string representing trace data from the Telnet half of a TN3270E session, from the SNA half, or from both. The octet string contains a sequence of trace elements, with the trace elements in the string ordered from earliest to latest. Each trace element has the following form: +---+---+----+----------------------+ !length !type!data ! +---+---+----+----------------------+ where: length = two-octet length of the data portion of the trace element, not including the length and type octets type = one-octet code point characterizing the data; defined values are: X'01' telnet PDU from the server to the client X'02' telnet PDU from the client to the server X'03' SNA data from the server to the SNA host X'04' SNA data from the SNA host to the server data = initial part of a PDU. It is implementation-dependent where the 'initial part of a PDU' starts. For SNA data, however, the starting point SHOULD be the first byte of the TH. For IP data the starting point SHOULD be the first byte of the IP header. It is left to implementations to determine how much of each PDU to return in a trace element. The zero-length string indicates that no trace data is available."
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(3, 4096), )
tn3270eNotifications = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 8, 0))
tn3270eObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 8, 1))
tn3270eConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 8, 3))
tn3270eSrvrConfTable = MibTable((1, 3, 6, 1, 2, 1, 34, 8, 1, 1), )
if mibBuilder.loadTexts: tn3270eSrvrConfTable.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfTable.setDescription('This table defines the configuration elements for TN3270E servers. The number of entries in this table is expected to vary depending on the location of the table. A particular TN3270E server is expected to have a single entry. Modeling of the configuration elements as a table allows multiple TN3270E servers to be serviced by the same SNMP agent. An implementation SHOULD NOT retain an SNMP-created entry in this table across re-IPLs (Initial Program Loads) of the corresponding TN3270E server.')
tn3270eSrvrConfEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1), ).setIndexNames((0, "TN3270E-MIB", "tn3270eSrvrConfIndex"))
if mibBuilder.loadTexts: tn3270eSrvrConfEntry.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfEntry.setDescription('Definition of the configuration elements for a single TN3270E server.')
tn3270eSrvrConfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295)))
if mibBuilder.loadTexts: tn3270eSrvrConfIndex.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfIndex.setDescription('Identifier for a single TN3270E server. tn3270eSrvrConfIndex values need not be contiguous.')
tn3270eSrvrConfInactivityTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99999999))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eSrvrConfInactivityTimeout.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfInactivityTimeout.setDescription('The inactivity time-out specified in seconds. When a connection has been inactive for the number of seconds specified by this object it is closed. Only user traffic is considered when determining whether there has been activity on a connection. The default value 0 means that no inactivity time-out is in effect.')
tn3270eSrvrConfConnectivityChk = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("timingMark", 1), ("nop", 2), ("noCheck", 3))).clone('noCheck')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eSrvrConfConnectivityChk.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfConnectivityChk.setDescription('This object enables TIMING-MARK processing, NOP processing, or neither for a TN3270E server.')
tn3270eSrvrConfTmNopInactTime = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(600)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eSrvrConfTmNopInactTime.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfTmNopInactTime.setDescription('The amount of time a connection must have had no traffic on it in order for a TIMING-MARK or NOP request to be sent on the connection. This value applies only when connections are being examined for recent activity on a scan interval controlled by the value of the tn3270eSrvrConfTmNopInterval object.')
tn3270eSrvrConfTmNopInterval = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 86400)).clone(120)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eSrvrConfTmNopInterval.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfTmNopInterval.setDescription('The scan interval to be used by a TN3270E server when it examines its Telnet connections for recent activity. The server scans its Telnet connections on the interval provided by this object, looking for ones that have been idle for more than the value provided by the tn3270eSrvrConfTmNopInactTime object. A TIMING-MARK or NOP request is sent for each connection that has exhibited no activity for this period of time.')
tn3270eSrvrFunctionsSupported = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1, 6), IANATn3270Functions().clone(namedValues=NamedValues(("scsCtlCodes", 5), ("dataStreamCtl", 6), ("responses", 7), ("bindImage", 8), ("sysreq", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrFunctionsSupported.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrFunctionsSupported.setDescription('This object indicates the functions supported by a TN3270E server.')
tn3270eSrvrConfAdminStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("stopImmediate", 3))).clone('up')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eSrvrConfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfAdminStatus.setDescription('The desired state of the TN3270E server represented by this entry in the table: up(1) - Activate this TN3270E server. down(2) - Informs the associated TN3270E server to gracefully terminate its processing. stopImmediate(3) - Informs the associated TN3270E server to terminate itself immediately. When a managed system creates an entry in this table, tn3270eSrvrConfAdminStatus and tn3270eSrvrConfOperStatus are initialized as up(1) by default. The exact behavior of a server in response to a down(2) or stopImmediate(3) command is left implementation- dependent. A TN3270E server that is capable of it SHOULD close all of its TN3270 and TN3270E sessions during a graceful termination. Often the function enabled via stopImmediate(3) is used as a last resort by a system administrator, to attempt to either bring down a hung TN3270E server or free up its resources immediately to aid in general system availability, or to shut down a TN3270E server that is not recognizing a down(2) request. A TN3270E server that does not distinguish between down(2) or stopImmediate(3) transitions should not support stopImmediate(3).')
tn3270eSrvrConfOperStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("busy", 3), ("shuttingDown", 4))).clone('up')).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrConfOperStatus.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfOperStatus.setDescription('The current operational state of a TN3270E server. The following values are defined: up(1) - the server is active and accepting new client connections down(2) - the server is not active busy(3) - the server is active, but is not accepting new client connections because it lacks the resources to do so shuttingDown(4) - the server is active, but is not accepting new client connections because it is in the process of performing a graceful shutdown.')
tn3270eSrvrConfSessionTermState = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("terminate", 1), ("luSessionPend", 2), ("queueSession", 3))).clone('terminate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eSrvrConfSessionTermState.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfSessionTermState.setDescription("This object determines what a TN3270E server should do when a TN3270 Session terminates: terminate(1) => Terminate the TCP connection. luSessionPend(2) => Do not drop the TCP connection associated with a client when its TN3270 session ends. Processing should redrive session initialization as if the client were first connecting. queueSession(3) => This value relates to the Close Destination PASS (CLSDST PASS) operation in VTAM. An example provides the easiest explanation. Suppose a TN3270E client is in session with APPL1, and APPL1 does a CLSDST PASS of the client's session to APPL2. queueSession(3) specifies that the TN3270E server must keep the TCP connection with the client active after it receives the UNBIND from APPL1, waiting for the BIND from APPL2.")
tn3270eSrvrConfSrvrType = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("host", 1), ("gateway", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrConfSrvrType.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfSrvrType.setDescription('This object indicates the type of TN3270E server. The existence of MIB tables and objects that will be defined by follow-on MIBs may be predicated on whether the TN3270E server can be local to the same host as a target application (host(1)) or will always be remote (gateway(2)). A host TN3270E server refers to an implementation where the TN3270E server is collocated with the Systems Network Architecture (SNA) System Services Control Point (SSCP) for the dependent Secondary Logical Units (SLUs) that the server makes available to its clients for connecting into an SNA network. A gateway TN3270E server resides on an SNA node other than an SSCP, either an SNA type 2.0 node or an APPN node acting in the role of a Dependent LU Requester (DLUR). Host and gateway TN3270E server implementations typically differ greatly as to their internal implementation and system definition (SYSDEF) requirements.')
tn3270eSrvrConfContact = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1, 11), SnmpAdminString().clone(hexValue="")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eSrvrConfContact.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfContact.setDescription('This object provides a scratch pad for a TN3270E server administrator for storing information for later retrieval.')
tn3270eSrvrConfRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1, 12), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eSrvrConfRowStatus.setReference("RFC 1903, 'Textual Conventions for version 2 of the Simple Network Management Protocol (SNMPv2).'")
if mibBuilder.loadTexts: tn3270eSrvrConfRowStatus.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfRowStatus.setDescription('This object allows entries to be created and deleted in the tn3270eSrvrConfTable. Entries may also be created and deleted as a result of implementation- dependent operations. With the exception of tn3270eSrvrConfSrvrType, which an implementation can easily fill in for itself, all the columnar objects in this table have DEFVALs associated with them. Consequently, a Management Station can create a conceptual row via a SET operation that specifies a value only for this object. When a tn3270eSrvrConfEntry is deleted (by setting this object to destroy(6)), this has the side-effect of removing all the associated entries (i.e., those having the same tn3270eSrvrConfIndex) from the tn3270eSrvrPortTable, the tn3270eSrvrStatsTable, the tn3270eClientGroupTable, the tn3270eResPoolTable, the tn3270eSnaMapTable, the tn3270eClientResMapTable, and the tn3270eResMapTable. All entries in the tn3270eTcpConnTable that belong to a TN3270E server that has been deleted MUST also be removed. In other words, a tn3270eSrvrConfEntry must exist for a TN3270E server in order for it to have entries in any of the other tables defined by this MIB.')
tn3270eSrvrConfLastActTime = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1, 13), DateAndTime().clone(hexValue="0000000000000000")).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrConfLastActTime.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfLastActTime.setDescription("This object reports the DateAndTime when a TN3270E server was most recently activated. The special value of all '00'Hs indicates that the server has never been active, i.e., that the value of tn3270eSrvrOperStatus has never been anything other than down(2).")
tn3270eSrvrConfTmTimeout = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 600)).clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eSrvrConfTmTimeout.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrConfTmTimeout.setDescription('The TIMING-MARK time-out, specified in seconds.')
tn3270eSrvrPortTable = MibTable((1, 3, 6, 1, 2, 1, 34, 8, 1, 2), )
if mibBuilder.loadTexts: tn3270eSrvrPortTable.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrPortTable.setDescription('This table defines the TCP ports associated with TN3270E servers. No entry in this table shall exist without a corresponding (same tn3270eSrvrConfIndex) entry in the tn3270eSrvrConfTable existing. An implementation SHOULD NOT retain SNMP-created entries in this table across re-IPLs (Initial Program Loads) of the corresponding TN3270E server.')
tn3270eSrvrPortEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 8, 1, 2, 1), ).setIndexNames((0, "TN3270E-MIB", "tn3270eSrvrConfIndex"), (0, "TN3270E-MIB", "tn3270eSrvrPort"), (0, "TN3270E-MIB", "tn3270eSrvrPortAddrType"), (0, "TN3270E-MIB", "tn3270eSrvrPortAddress"))
if mibBuilder.loadTexts: tn3270eSrvrPortEntry.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrPortEntry.setDescription('Definition of a single TCP port assignment to a TN3270E server. Assignment of a port on a local address basis is enabled though use of tn3270eSrvrPortAddrType and tn3270eSrvrPortAddress. A TCP port assignment that is not restricted to a local address SHALL specify a tn3270eSrvrPortAddrType of unknown(0), and SHALL use a zero-length octet string for the tn3270eSrvrPortAddress.')
tn3270eSrvrPort = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: tn3270eSrvrPort.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrPort.setDescription('Indicates a port assigned to a server.')
tn3270eSrvrPortAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 2, 1, 2), IANATn3270eAddrType())
if mibBuilder.loadTexts: tn3270eSrvrPortAddrType.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrPortAddrType.setDescription('Indicates the type of an address local to the host on which the TN3270E server resides that is represented in tn3270eSrvrPortAddress. A value of unknown(0) SHALL be used for this object when the port is not to be restricted to a local address.')
tn3270eSrvrPortAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 2, 1, 3), IANATn3270eAddress())
if mibBuilder.loadTexts: tn3270eSrvrPortAddress.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrPortAddress.setDescription("A local address on the host that a TN3270E server resides on that is associated with a TCP port that is to be used or is in use by a TN3270E server. tn3270eClientGroupAddrType indicates the address type (IPv4 or IPv6, for example). A zero-length octet string SHALL be used as the value of this object when a local address isn't being specified.")
tn3270eSrvrPortRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eSrvrPortRowStatus.setReference("RFC 1903, 'Textual Conventions for version 2 of the Simple Network Management Protocol (SNMPv2).'")
if mibBuilder.loadTexts: tn3270eSrvrPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrPortRowStatus.setDescription('This object allows entries to be created and deleted in the tn3270eSrvrPortTable. Entries may also be created and deleted as a result of implementation- dependent operations. Since this is the only accessible object in this table, a Management Station can create a conceptual row via a SET operation that specifies a value only for this object. An entry in this table is deleted by setting this object to destroy(6). Deletion of a tn3270eSrvrPortEntry has no effect on any other table entry defined by this MIB.')
tn3270eSrvrStatsTable = MibTable((1, 3, 6, 1, 2, 1, 34, 8, 1, 3), )
if mibBuilder.loadTexts: tn3270eSrvrStatsTable.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsTable.setDescription('This table defines a set of statistics concerning TN3270E server performance. No entry in this table shall exist without a corresponding (same tn3270eSrvrConfIndex) entry in the tn3270eSrvrConfTable existing.')
tn3270eSrvrStatsEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1), ).setIndexNames((0, "TN3270E-MIB", "tn3270eSrvrConfIndex"), (0, "TN3270E-MIB", "tn3270eSrvrPort"), (0, "TN3270E-MIB", "tn3270eSrvrPortAddrType"), (0, "TN3270E-MIB", "tn3270eSrvrPortAddress"))
if mibBuilder.loadTexts: tn3270eSrvrStatsEntry.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsEntry.setDescription('A collection of statistical and maximum usage objects for a single TN3270 server. An entry can represent the total activity of the server, or it can represent the activity occurring at the server on either a port or a port-and-local-address basis. Collection of the statistics represented by the objects in this table is not mandatory. An implementation of this table MUST use only one of the three levels of refinement that this table supports for the entries associated with each TN3270E server. The indexing for a row that represents total server statistics is as follows: tn3270eSrvrConfIndex value identifying the server tn3270eSrvrPort 0 tn3270eSrvrPortAddrType unknown(0) tn3270eSrvrPortAddress zero-length octet string. On a port basis: tn3270eSrvrConfIndex value identifying the server tn3270eSrvrPort > 0 tn3270eSrvrPortAddrType unknown(0) tn3270eSrvrPortAddress zero-length octet string. On a port-and-local-address basis: tn3270eSrvrConfIndex value identifying the server tn3270eSrvrPort > 0 tn3270eSrvrPortAddrType valid value other than unknown(0) tn3270eSrvrPortAddress non-zero-length octet string. ')
tn3270eSrvrStatsUpTime = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 2), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsUpTime.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsUpTime.setDescription('The value of the sysUpTime object the last time the TN3270E server was re-initialized. Server re-initialization is the only discontinuity event for the counters in this table. Even if table entries are on a port or port-and-local-address basis, port deactivation and reactivation do not result in counter discontinuities.')
tn3270eSrvrStatsMaxTerms = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 3), Unsigned32()).setUnits('LUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsMaxTerms.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsMaxTerms.setDescription('Indicates the maximum number of terminal LUs available for use at a TN3270E server for the granularity of this conceptual row (server-wide, port, or port-and-local-address).')
tn3270eSrvrStatsInUseTerms = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 4), Gauge32()).setUnits('LUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsInUseTerms.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsInUseTerms.setDescription('Indicates the number of terminal LUs currently in use at a TN3270E server for the granularity of this conceptual row (server-wide, port, or port-and-local-address).')
tn3270eSrvrStatsSpareTerms = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 5), Gauge32()).setUnits('LUs').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsSpareTerms.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsSpareTerms.setDescription('Indicates the number of free terminal LUs at a TN3270E server for the granularity of this conceptual row (server-wide, port, or port-and-local-address). It is possible that the difference between tn3270eSrvrStatsMaxTerms and tn3270eSrvrStatsInUseTerms in a conceptual row does not equal the value of tn3270eSrvrStatsSpareTerms in that row: an LU may exist but not be usable by a client connection. Alternatively, the administrative ceiling represented by tn3270eSrvrStatsMaxTerms may have been lowered to a point where it is less than the current value of tn3270eSrvrStatsInUseTerms. In this case tn3270eSrvrStatsSpareTerms returns the value 0.')
tn3270eSrvrStatsMaxPtrs = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 6), Unsigned32()).setUnits('Printer Resources').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsMaxPtrs.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsMaxPtrs.setDescription('Indicates the maximum number of printer resources available for use by a TN3270E server for the granularity of this conceptual row (server-wide, port, or port-and-local-address).')
tn3270eSrvrStatsInUsePtrs = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 7), Gauge32()).setUnits('Printer Resources').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsInUsePtrs.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsInUsePtrs.setDescription('Indicates the number of printer resources currently in use by a TN3270E server for the granularity of this conceptual row (server-wide, port, or port-and-local-address).')
tn3270eSrvrStatsSparePtrs = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 8), Gauge32()).setUnits('Spare Printer Resources').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsSparePtrs.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsSparePtrs.setDescription('Indicates the number of free printer resources at a TN3270E server for the granularity of this conceptual row (server-wide, port, or port-and-local-address). It is possible that the difference between tn3270eSrvrStatsMaxPtrs and tn3270eSrvrStatsInUsePtrs in a conceptual row does not equal the value of tn3270eSrvrStatsSparePtrs in that row: a printer resource may exist but not be usable by a client connection. Alternatively, the administrative ceiling represented by tn3270eSrvrStatsMaxPtrs may have been lowered to a point where it is less than the current value of tn3270eSrvrStatsInUsePtrs. In this case tn3270eSrvrStatsSparePtrs returns the value 0.')
tn3270eSrvrStatsInConnects = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 9), Counter32()).setUnits('connections').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsInConnects.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsInConnects.setDescription('Indicates the number of client (TCP) connections that succeeded at a TN3270E server for the granularity of this conceptual row (server-wide, port, or port-and-local-address). The tn3270eSrvrStatsConnResrceRejs and tn3270eSrvrStatsConnErrorRejs objects provide a count of failed connection attempts. A Management Station can detect discontinuities in this counter by monitoring the tn3270eSrvrStatsUpTime object.')
tn3270eSrvrStatsConnResrceRejs = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 10), Counter32()).setUnits('connection attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsConnResrceRejs.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsConnResrceRejs.setDescription("Indicates the number of (TCP) connections rejected during connection setup at a TN3270E server for the granularity of this conceptual row (server-wide, port, or port-and-local-address) due to a lack of resources at the server. An example of when this counter would be incremented is when no terminal or printer resource is available to associate with a client's TCP connection. A Management Station can detect discontinuities in this counter by monitoring the tn3270eSrvrStatsUpTime object.")
tn3270eSrvrStatsDisconnects = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 11), Counter32()).setUnits('disconnections').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsDisconnects.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsDisconnects.setDescription('Indicates the number of (TCP) connections that were disconnected at a TN3270E server for the granularity of this conceptual row (server-wide, port, or port-and-local-address). A Management Station can detect discontinuities in this counter by monitoring the tn3270eSrvrStatsUpTime object.')
tn3270eSrvrStatsHCInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 12), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsHCInOctets.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsHCInOctets.setDescription('Indicates the number of octets received from TN3270 and TN3270E clients for the granularity of this conceptual row (server-wide, port, or port-and-local-address). A Management Station can detect discontinuities in this counter by monitoring the tn3270eSrvrStatsUpTime object.')
tn3270eSrvrStatsInOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 13), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsInOctets.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsInOctets.setDescription('Low-order 32 bits of tn3270eSrvrStatsHCInOctets for this conceptual row. A Management Station can detect discontinuities in this counter by monitoring the tn3270eSrvrStatsUpTime object.')
tn3270eSrvrStatsHCOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 14), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsHCOutOctets.setDescription('Indicates the number of octets sent to TN3270 and TN3270E clients for the granularity of this conceptual row (server-wide, port, or port-and-local-address). A Management Station can detect discontinuities in this counter by monitoring the tn3270eSrvrStatsUpTime object.')
tn3270eSrvrStatsOutOctets = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 15), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsOutOctets.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsOutOctets.setDescription('Low-order 32 bits of tn3270eSrvrStatsHCOutOctets for this conceptual row. A Management Station can detect discontinuities in this counter by monitoring the tn3270eSrvrStatsUpTime object.')
tn3270eSrvrStatsConnErrorRejs = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 3, 1, 16), Counter32()).setUnits('connection attempts').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSrvrStatsConnErrorRejs.setStatus('current')
if mibBuilder.loadTexts: tn3270eSrvrStatsConnErrorRejs.setDescription('Indicates the number of (TCP) connections rejected during connection setup at a TN3270E server for the granularity of this conceptual row (server-wide, port, or port-and-local-address) due to an error of some type. An example of when this counter would be incremented is when the client and the server cannot agree on a common set of TN3270E functions for the connection. A Management Station can detect discontinuities in this counter by monitoring the tn3270eSrvrStatsUpTime object.')
tn3270eClientGroupTable = MibTable((1, 3, 6, 1, 2, 1, 34, 8, 1, 4), )
if mibBuilder.loadTexts: tn3270eClientGroupTable.setStatus('current')
if mibBuilder.loadTexts: tn3270eClientGroupTable.setDescription('This table defines client address groupings for use by a TN3270E server. No entry in this table shall exist without a corresponding (same tn3270eSrvrConfIndex) entry in the tn3270eSrvrConfTable existing. An implementation SHOULD NOT retain SNMP-created entries in this table across re-IPLs (Initial Program Loads) of the corresponding TN3270E server.')
tn3270eClientGroupEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 8, 1, 4, 1), ).setIndexNames((0, "TN3270E-MIB", "tn3270eSrvrConfIndex"), (0, "TN3270E-MIB", "tn3270eClientGroupName"), (0, "TN3270E-MIB", "tn3270eClientGroupAddrType"), (0, "TN3270E-MIB", "tn3270eClientGroupAddress"))
if mibBuilder.loadTexts: tn3270eClientGroupEntry.setStatus('current')
if mibBuilder.loadTexts: tn3270eClientGroupEntry.setDescription('Definition of a single client address entry. All entries with the same first two indexes, tn3270eSrvrConfIndex and tn3270eClientGroupName, are considered to be in the same client group.')
tn3270eClientGroupName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 4, 1, 1), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(1, 24)))
if mibBuilder.loadTexts: tn3270eClientGroupName.setStatus('current')
if mibBuilder.loadTexts: tn3270eClientGroupName.setDescription('The name of a client group. Note: client group names are required to be unique only with respect to a single TN3270E server.')
tn3270eClientGroupAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 4, 1, 2), IANATn3270eAddrType())
if mibBuilder.loadTexts: tn3270eClientGroupAddrType.setStatus('current')
if mibBuilder.loadTexts: tn3270eClientGroupAddrType.setDescription('Indicates the type of the address represented in tn3270eClientGroupAddress.')
tn3270eClientGroupAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 4, 1, 3), IANATn3270eAddress())
if mibBuilder.loadTexts: tn3270eClientGroupAddress.setStatus('current')
if mibBuilder.loadTexts: tn3270eClientGroupAddress.setDescription('The client address of a member of a client group. The value of tn3270eClientGroupAddrType indicates the address type (IPv4 or IPv6, for example).')
tn3270eClientGroupSubnetMask = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 4, 1, 4), IpAddress().clone(hexValue="FFFFFFFF")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eClientGroupSubnetMask.setStatus('current')
if mibBuilder.loadTexts: tn3270eClientGroupSubnetMask.setDescription("The corresponding subnet mask associated with tn3270eClientGroupAddress. A single IP address is represented by having this object contain the value of 255.255.255.255. This object's value is meaningful only if tn3270eClientGroupAddrType has a value of ipv4(1).")
tn3270eClientGroupPfxLength = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 4, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setUnits('bits').setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eClientGroupPfxLength.setStatus('current')
if mibBuilder.loadTexts: tn3270eClientGroupPfxLength.setDescription("The corresponding IPv6 network prefix length. This object's value is meaningful only if tn3270eClientGroupAddrType has a value of ipv6(2).")
tn3270eClientGroupRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 4, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eClientGroupRowStatus.setReference("RFC 1903, 'Textual Conventions for version 2 of the Simple Network Management Protocol (SNMPv2).'")
if mibBuilder.loadTexts: tn3270eClientGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: tn3270eClientGroupRowStatus.setDescription('This object allows entries to be created and deleted in the tn3270eClientGroupTable. Entries may also be created and deleted as a result of implementation- dependent operations. An entry in this table is deleted by setting this object to destroy(6). When the number of entries in this table for a given client group becomes 0, this has the side- effect of removing any entries for the group in the tn3270eClientResMapTable.')
tn3270eResPoolTable = MibTable((1, 3, 6, 1, 2, 1, 34, 8, 1, 5), )
if mibBuilder.loadTexts: tn3270eResPoolTable.setStatus('current')
if mibBuilder.loadTexts: tn3270eResPoolTable.setDescription("This table defines resource groupings; the term 'pool' is used as it is defined by RFC 2355. No entry in this table shall exist without a corresponding (same tn3270eSrvrConfIndex) entry in the tn3270eSrvrConfTable existing. An implementation SHOULD NOT retain SNMP-created entries in this table across re-IPLs (Initial Program Loads) of the corresponding TN3270E server.")
tn3270eResPoolEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 8, 1, 5, 1), ).setIndexNames((0, "TN3270E-MIB", "tn3270eSrvrConfIndex"), (0, "TN3270E-MIB", "tn3270eResPoolName"), (0, "TN3270E-MIB", "tn3270eResPoolElementName"))
if mibBuilder.loadTexts: tn3270eResPoolEntry.setStatus('current')
if mibBuilder.loadTexts: tn3270eResPoolEntry.setDescription('Definition of a single resource pool member. All entries with the same first two indexes, tn3270eSrvrConfIndex and tn3270eResPoolName, are considered to be in the same pool.')
tn3270eResPoolName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 5, 1, 1), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(1, 24)))
if mibBuilder.loadTexts: tn3270eResPoolName.setStatus('current')
if mibBuilder.loadTexts: tn3270eResPoolName.setDescription('The name of a resource pool.')
tn3270eResPoolElementName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 5, 1, 2), SnaResourceName())
if mibBuilder.loadTexts: tn3270eResPoolElementName.setStatus('current')
if mibBuilder.loadTexts: tn3270eResPoolElementName.setDescription('The name of a member of a resource pool.')
tn3270eResPoolElementType = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 5, 1, 3), IANATn3270ResourceType()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eResPoolElementType.setStatus('current')
if mibBuilder.loadTexts: tn3270eResPoolElementType.setDescription('The type of the entity in a resource pool.')
tn3270eResPoolRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eResPoolRowStatus.setReference("RFC 1903, 'Textual Conventions for version 2 of the Simple Network Management Protocol (SNMPv2).'")
if mibBuilder.loadTexts: tn3270eResPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: tn3270eResPoolRowStatus.setDescription('This object allows entries to be created and deleted in the tn3270eResPoolTable. Entries may also be created and deleted as a result of implementation- dependent operations. An entry in this table is deleted by setting this object to destroy(6). When all entries in this table associated with the same tn3270eResPoolElementName have been removed, then any associated (tn3270eResPoolElementName matching tn3270eClientResMapPoolName with same tn3270eSrvrConfIndex values) entries in the tn3270eClientResMapTable SHALL also be removed.')
tn3270eSnaMapTable = MibTable((1, 3, 6, 1, 2, 1, 34, 8, 1, 6), )
if mibBuilder.loadTexts: tn3270eSnaMapTable.setStatus('current')
if mibBuilder.loadTexts: tn3270eSnaMapTable.setDescription('This table provide a mapping from the name by which a secondary LU is known in the SNA network to the name by which it is known locally at the TN3270e server. This latter name serves as an index into the tn3270eResPoolTable and the tn3270eResMapTable. No entry in this table shall exist without a corresponding (same tn3270eSrvrConfIndex) entry in the tn3270eSrvrConfTable existing.')
tn3270eSnaMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 8, 1, 6, 1), ).setIndexNames((0, "TN3270E-MIB", "tn3270eSrvrConfIndex"), (0, "TN3270E-MIB", "tn3270eSnaMapSscpSuppliedName"))
if mibBuilder.loadTexts: tn3270eSnaMapEntry.setStatus('current')
if mibBuilder.loadTexts: tn3270eSnaMapEntry.setDescription('Definition of a single mapping from an SSCP-supplied SLU name to a local SLU name. Note: In certain pathological cases, it is possible that an SSCP will send on an ACTLU for a local LU an SLU name currently represented by an entry in this table that associates it with a different local LU. In these cases the association from the newer ACTLU SHOULD be the one represented in this table.')
tn3270eSnaMapSscpSuppliedName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 6, 1, 1), SnaResourceName())
if mibBuilder.loadTexts: tn3270eSnaMapSscpSuppliedName.setStatus('current')
if mibBuilder.loadTexts: tn3270eSnaMapSscpSuppliedName.setDescription('The name of the secondary LU (SLU) as it is known in the SNA network. This name is sent by the SSCP on the Activate Logical Unit (ACTLU) request.')
tn3270eSnaMapLocalName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 6, 1, 2), SnaResourceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSnaMapLocalName.setStatus('current')
if mibBuilder.loadTexts: tn3270eSnaMapLocalName.setDescription('The local name of the secondary LU (SLU).')
tn3270eSnaMapPrimaryLuName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 6, 1, 3), SnaResourceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eSnaMapPrimaryLuName.setStatus('current')
if mibBuilder.loadTexts: tn3270eSnaMapPrimaryLuName.setDescription('When there is a currently active LU-LU session for this connection, this object returns the primary LU (PLU) name from the BIND. When there is no active LU-LU session, or when the PLU name is unavailable for some other reason, this object returns a zero-length octet string.')
tn3270eClientResMapTable = MibTable((1, 3, 6, 1, 2, 1, 34, 8, 1, 7), )
if mibBuilder.loadTexts: tn3270eClientResMapTable.setStatus('current')
if mibBuilder.loadTexts: tn3270eClientResMapTable.setDescription('This table defines resource-pool to client-group mappings. Since both the resource pool name and client group name are included in the index clause of this table, multiple resource pools can be assigned to the same client group. This enables use of multiple resource pools for use in client to resource mapping. Assigning multiple client groups to the same resource pool is also allowed, but is not the primary purpose for how the indexing is structured. Assignment of a resource pool to client group can be restricted based on TCP port. An index value of 0 for tn3270eClientResMapClientPort disables restriction of resource assignment based on client target port selection. No entry in this table shall exist without a corresponding (same tn3270eSrvrConfIndex) entry in the tn3270eSrvrConfTable existing. An implementation SHOULD NOT retain SNMP-created entries in this table across re-IPLs (Initial Program Loads) of the corresponding TN3270E server.')
tn3270eClientResMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 8, 1, 7, 1), ).setIndexNames((0, "TN3270E-MIB", "tn3270eSrvrConfIndex"), (0, "TN3270E-MIB", "tn3270eClientResMapPoolName"), (0, "TN3270E-MIB", "tn3270eClientResMapClientGroupName"), (0, "TN3270E-MIB", "tn3270eClientResMapClientPort"))
if mibBuilder.loadTexts: tn3270eClientResMapEntry.setStatus('current')
if mibBuilder.loadTexts: tn3270eClientResMapEntry.setDescription('Definition of a single resource pool to client group mapping.')
tn3270eClientResMapPoolName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 7, 1, 1), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(1, 24)))
if mibBuilder.loadTexts: tn3270eClientResMapPoolName.setStatus('current')
if mibBuilder.loadTexts: tn3270eClientResMapPoolName.setDescription('The name of a resource pool.')
tn3270eClientResMapClientGroupName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 7, 1, 2), Utf8String().subtype(subtypeSpec=ValueSizeConstraint(1, 24)))
if mibBuilder.loadTexts: tn3270eClientResMapClientGroupName.setStatus('current')
if mibBuilder.loadTexts: tn3270eClientResMapClientGroupName.setDescription('The name of the client group that is mapped to a resource pool.')
tn3270eClientResMapClientPort = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 7, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: tn3270eClientResMapClientPort.setStatus('current')
if mibBuilder.loadTexts: tn3270eClientResMapClientPort.setDescription('A port number restricting the scope of a mapping from a resource pool to a client group. The value 0 for this object indicates that the scope of the mapping is not restricted.')
tn3270eClientResMapRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 7, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: tn3270eClientResMapRowStatus.setReference("RFC 1903, 'Textual Conventions for version 2 of the Simple Network Management Protocol (SNMPv2).'")
if mibBuilder.loadTexts: tn3270eClientResMapRowStatus.setStatus('current')
if mibBuilder.loadTexts: tn3270eClientResMapRowStatus.setDescription("This object allows entries to be created and deleted in the tn3270eClientResMapTable. Entries may also be created and deleted as a result of implementation- dependent operations. An entry in this table is deleted by setting this object to destroy(6). Removing an entry from this table doesn't affect any other table entry defined in this MIB.")
tn3270eResMapTable = MibTable((1, 3, 6, 1, 2, 1, 34, 8, 1, 8), )
if mibBuilder.loadTexts: tn3270eResMapTable.setStatus('current')
if mibBuilder.loadTexts: tn3270eResMapTable.setDescription('This table defines the actual mapping of a resource to a client address. No entry in this table shall exist without a corresponding (same tn3270eSrvrConfIndex) entry in the tn3270eSrvrConfTable existing.')
tn3270eResMapEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 8, 1, 8, 1), ).setIndexNames((0, "TN3270E-MIB", "tn3270eSrvrConfIndex"), (0, "TN3270E-MIB", "tn3270eResMapElementName"))
if mibBuilder.loadTexts: tn3270eResMapEntry.setStatus('current')
if mibBuilder.loadTexts: tn3270eResMapEntry.setDescription('Definition of the mapping of a Resource Element to a client address.')
tn3270eResMapElementName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 8, 1, 1), SnaResourceName())
if mibBuilder.loadTexts: tn3270eResMapElementName.setStatus('current')
if mibBuilder.loadTexts: tn3270eResMapElementName.setDescription('The name of a resource element. This is the name by which the server implementing this table knows the resource. It may be different from the name by which the resource is known in the SNA network. This latter name is returned in the tn3270eResMapSscpSuppliedName object.')
tn3270eResMapAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 8, 1, 2), IANATn3270eAddrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eResMapAddrType.setStatus('current')
if mibBuilder.loadTexts: tn3270eResMapAddrType.setDescription('Indicates the type of the client address represented in tn3270eResMapAddress.')
tn3270eResMapAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 8, 1, 3), IANATn3270eAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eResMapAddress.setStatus('current')
if mibBuilder.loadTexts: tn3270eResMapAddress.setDescription('A client address.')
tn3270eResMapPort = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 8, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eResMapPort.setStatus('current')
if mibBuilder.loadTexts: tn3270eResMapPort.setDescription('A client port.')
tn3270eResMapElementType = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 8, 1, 5), IANATn3270ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eResMapElementType.setStatus('current')
if mibBuilder.loadTexts: tn3270eResMapElementType.setDescription('The type of the associated resource element.')
tn3270eResMapSscpSuppliedName = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 8, 1, 6), SnaResourceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eResMapSscpSuppliedName.setStatus('current')
if mibBuilder.loadTexts: tn3270eResMapSscpSuppliedName.setDescription('The name of the secondary LU (SLU) as it is known in a SNA network. This name is sent by the SSCP on the Activate Logical Unit (ACTLU) request. If this name is not known, this object returns a zero-length octet string.')
tn3270eTcpConnTable = MibTable((1, 3, 6, 1, 2, 1, 34, 8, 1, 9), )
if mibBuilder.loadTexts: tn3270eTcpConnTable.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnTable.setDescription('This table has an entry for each TN3270(E) client connection that is currently active at a TN3270E server. An implementation MAY retain entries for connections that have been terminated, but which entries are retained, how many entries are retained, and how long they are retained is entirely implementation-dependent. The indexing for this table is designed to support the use of an SNMP GET-NEXT operation using only the remote address type, remote address, and remote port, as a way for a Management Station to retrieve the table entries related to a particular TN3270(E) client.')
tn3270eTcpConnEntry = MibTableRow((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1), ).setIndexNames((0, "TN3270E-MIB", "tn3270eTcpConnRemAddrType"), (0, "TN3270E-MIB", "tn3270eTcpConnRemAddress"), (0, "TN3270E-MIB", "tn3270eTcpConnRemPort"), (0, "TN3270E-MIB", "tn3270eTcpConnLocalAddrType"), (0, "TN3270E-MIB", "tn3270eTcpConnLocalAddress"), (0, "TN3270E-MIB", "tn3270eTcpConnLocalPort"))
if mibBuilder.loadTexts: tn3270eTcpConnEntry.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnEntry.setDescription('Provides information about a single TN3270/TN3270E session. Note: a tn3270eSrvrConfIndex is not needed in this table, since the combination of remote and local addresses and ports is sufficient to guarantee uniqueness across the TN3270E servers serviced by an SNMP agent. Because of this indexing structure, however, this table does not support view-based access control policies that provide access to table rows on a per-server basis.')
tn3270eTcpConnRemAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 1), IANATn3270eAddrType())
if mibBuilder.loadTexts: tn3270eTcpConnRemAddrType.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnRemAddrType.setDescription('Indicates the type of the value of the tn3270eTcpConnRemAddress object. For example, ipv4(1) or ipv6(2).')
tn3270eTcpConnRemAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 2), IANATn3270eAddress())
if mibBuilder.loadTexts: tn3270eTcpConnRemAddress.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnRemAddress.setDescription("The remote address associated with a TN3270E client. tn3270eTcpConnRemAddrType indicates the address type (IPv4 or IPv6, for example). If a TN3270(E) client is connected to its server via a proxy client the address represented by the value of this object shall be the remote client's address, not the proxy client's address.")
tn3270eTcpConnRemPort = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: tn3270eTcpConnRemPort.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnRemPort.setDescription("The remote port associated with a TN3270E client. The value 0 is used if the tn3270eTcpConnRemAddrType identifies an address type that does not support ports. If a TN3270(E) client is connected to its server via a proxy client, the port represented by the value of this object shall be the remote client's port, not the proxy client's port.")
tn3270eTcpConnLocalAddrType = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 4), IANATn3270eAddrType())
if mibBuilder.loadTexts: tn3270eTcpConnLocalAddrType.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnLocalAddrType.setDescription('Indicates the type of the value of the tn3270eTcpConnLocalAddress object. For example, ipv4(1) or ipv6(2).')
tn3270eTcpConnLocalAddress = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 5), IANATn3270eAddress())
if mibBuilder.loadTexts: tn3270eTcpConnLocalAddress.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnLocalAddress.setDescription('The local address associated with a TN3270E client. tn3270eTcpConnRemAddrType indicates the address type (IPv4 or IPv6, for example).')
tn3270eTcpConnLocalPort = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)))
if mibBuilder.loadTexts: tn3270eTcpConnLocalPort.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnLocalPort.setDescription('The remote port associated with a TN3270E client.')
tn3270eTcpConnLastActivity = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 7), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnLastActivity.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnLastActivity.setDescription('The number of 100ths of seconds since any data was transferred for the associated TCP Connection.')
tn3270eTcpConnBytesIn = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 8), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnBytesIn.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnBytesIn.setDescription('The number of bytes received by the server from TCP for this connection. A Management Station can detect discontinuities in this counter by monitoring the tn3270eTcpConnActivationTime object.')
tn3270eTcpConnBytesOut = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 9), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnBytesOut.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnBytesOut.setDescription('The number of bytes sent to TCP for this connection. A Management Station can detect discontinuities in this counter by monitoring the tn3270eTcpConnActivationTime object.')
tn3270eTcpConnResourceElement = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 10), SnaResourceName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnResourceElement.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnResourceElement.setDescription('LU/Print secondary name for connecting an client into an SNA network.')
tn3270eTcpConnResourceType = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 11), IANATn3270ResourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnResourceType.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnResourceType.setDescription('Indicates the type of resource identified by tn3270eTcpConnResourceElement.')
tn3270eTcpConnDeviceType = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 12), IANATn3270DeviceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnDeviceType.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnDeviceType.setDescription('Indicates the device type if negotiated with the client. A value of unknown(100) should be used as the value of this object when a device type is not negotiated. Refer to RFC 2355 for how device types can be negotiated.')
tn3270eTcpConnFunctions = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 13), IANATn3270Functions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnFunctions.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnFunctions.setDescription('This object indicates which of the TN3270 and TN3270E functions were negotiated by the server and the client for this TCP connection. Refer to tn3270eSrvrFunctionsSupported for the list of these functions supported by the server.')
tn3270eTcpConnId = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnId.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnId.setDescription("The connection identifier associated with a TN3270 or a TN3270E session's TCP connection. TCP implementations often assign a unique (with respect to itself) unsigned integer as an identifier for a TCP connection. The value 0 indicates that a connection does not have a valid connection identifier.")
tn3270eTcpConnClientIdFormat = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 15), IANATn3270eClientType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnClientIdFormat.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnClientIdFormat.setDescription('The format of a corresponding tn3270eTcpConnClientId object as defined by the IANSTn3270eClientType textual convention imported from the IANATn3270eTC-MIB.')
tn3270eTcpConnClientId = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 16), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnClientId.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnClientId.setDescription('Additional client identification information. The type of this information is indicated by the value of the corresponding tn3270eTcpConnClientIdFormat object. All values are returned in network-byte order. The purpose of this object is to provide an alternate means of identifying a client, other than though the remote address returned in tn3270eTcpConnRemAddress.')
tn3270eTcpConnTraceData = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 17), Tn3270eTraceData()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnTraceData.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnTraceData.setDescription('Trace data for this session.')
tn3270eTcpConnLogInfo = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 18), IANATn3270eLogData()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnLogInfo.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnLogInfo.setDescription('Log information, encoded as specified in the IANATn3270eLogData textual convention from the IANAtn3270eTC-MIB.')
tn3270eTcpConnLuLuBindImage = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 19), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnLuLuBindImage.setReference("'Systems Network Architecture Formats', IBM Publication GA27-3136.")
if mibBuilder.loadTexts: tn3270eTcpConnLuLuBindImage.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnLuLuBindImage.setDescription("When there is a currently active LU-LU session for this connection, this object returns the BIND Image (defined to be bytes 1-p of the complete BIND Request Unit -- see 'SNA Formats' for more information) that was received from the PLU during session activation. When there is no active LU-LU session, or when a BIND image is unavailable for some other reason, this object returns a zero-length octet string.")
tn3270eTcpConnSnaState = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("noSluSession", 2), ("sscpLuSession", 3), ("luLuSession", 4), ("sscpLuSessionAndLuLuSession", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnSnaState.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnSnaState.setDescription('The current state of the SNA side of the end-to-end TN3270 connection. The following states are defined: unknown(1) - The true state is not known. noSluSession(2) - The SLU has neither an SSCP-LU nor an LU-LU session active. sscpLuSession(3) - The SSCP-LU session for the SLU is active, but the SLU is not currently in session with a PLU. luLuSession(4) - The SLU is currently in session with a PLU, but the SSCP-LU session for the LU is not active. sscpLuSessionAndLuLuSession(5) - The SLU currently has an active session with a PLU, and the SSCP-LU session for the SLU is active.')
tn3270eTcpConnStateLastDiscReason = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))).clone(namedValues=NamedValues(("unknown", 1), ("hostSendsUnbind", 2), ("hostDontAcceptConnection", 3), ("outOfResource", 4), ("clientProtocolError", 5), ("invalidDeviceName", 6), ("deviceInUse", 7), ("inactivityTimeout", 8), ("hostNotResponding", 9), ("clientNotResponding", 10), ("serverClose", 11), ("sysreqLogoff", 12), ("serverSpecificHexCode", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnStateLastDiscReason.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnStateLastDiscReason.setDescription('The last disconnect reason. A session that has not experienced a disconnect shall use the value unknown(1) for this object. Depending on when an implementation removes entries from this table, certain states may never be returned.')
tn3270eTcpConnSrvrConfIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 22), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnSrvrConfIndex.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnSrvrConfIndex.setDescription('tn3270eSrvrConfIndex of the tn3270eSrvrConfEntry belonging to the TN3270E server to which this entry belongs.')
tn3270eTcpConnActivationTime = MibTableColumn((1, 3, 6, 1, 2, 1, 34, 8, 1, 9, 1, 23), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tn3270eTcpConnActivationTime.setStatus('current')
if mibBuilder.loadTexts: tn3270eTcpConnActivationTime.setDescription('The value of the sysUpTime object the last time this TCP connection became active.')
tn3270eConfSpinLock = MibScalar((1, 3, 6, 1, 2, 1, 34, 8, 1, 10), TestAndIncr()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tn3270eConfSpinLock.setStatus('current')
if mibBuilder.loadTexts: tn3270eConfSpinLock.setDescription('An advisory lock used to allow cooperating TN3270E-MIB applications to coordinate their use of the tn3270eSrvrConfTable, the tn3270eSrvrPortTable, the tn3270eClientGroupTable, the tn3270eResPoolTable, and the tn3270eClientResMapTable. When creating a new entry or altering an existing entry in the any of the tables mentioned above, an application should make use of tn3270eRtSpinLock to serialize application changes or additions. Since this is an advisory lock, the use of this lock is not enforced.')
tn3270eGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 8, 3, 1))
tn3270eCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 34, 8, 3, 2))
tn3270eCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 34, 8, 3, 2, 1)).setObjects(("TN3270E-MIB", "tn3270eBasicGroup"), ("TN3270E-MIB", "tn3270eSessionGroup"), ("TN3270E-MIB", "tn3270eResMapGroup"), ("TN3270E-MIB", "tn3270eHiCapacityGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn3270eCompliance = tn3270eCompliance.setStatus('current')
if mibBuilder.loadTexts: tn3270eCompliance.setDescription('The compliance statement for agents that support the TN3270E-MIB.')
tn3270eBasicGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 8, 3, 1, 1)).setObjects(("TN3270E-MIB", "tn3270eSrvrConfInactivityTimeout"), ("TN3270E-MIB", "tn3270eSrvrConfConnectivityChk"), ("TN3270E-MIB", "tn3270eSrvrConfTmNopInactTime"), ("TN3270E-MIB", "tn3270eSrvrConfTmNopInterval"), ("TN3270E-MIB", "tn3270eSrvrFunctionsSupported"), ("TN3270E-MIB", "tn3270eSrvrConfAdminStatus"), ("TN3270E-MIB", "tn3270eSrvrConfOperStatus"), ("TN3270E-MIB", "tn3270eSrvrConfSessionTermState"), ("TN3270E-MIB", "tn3270eSrvrConfSrvrType"), ("TN3270E-MIB", "tn3270eSrvrConfContact"), ("TN3270E-MIB", "tn3270eSrvrConfRowStatus"), ("TN3270E-MIB", "tn3270eSrvrConfLastActTime"), ("TN3270E-MIB", "tn3270eSrvrConfTmTimeout"), ("TN3270E-MIB", "tn3270eSrvrPortRowStatus"), ("TN3270E-MIB", "tn3270eSrvrStatsUpTime"), ("TN3270E-MIB", "tn3270eSrvrStatsMaxTerms"), ("TN3270E-MIB", "tn3270eSrvrStatsInUseTerms"), ("TN3270E-MIB", "tn3270eSrvrStatsSpareTerms"), ("TN3270E-MIB", "tn3270eSrvrStatsMaxPtrs"), ("TN3270E-MIB", "tn3270eSrvrStatsInUsePtrs"), ("TN3270E-MIB", "tn3270eSrvrStatsSparePtrs"), ("TN3270E-MIB", "tn3270eSrvrStatsInConnects"), ("TN3270E-MIB", "tn3270eSrvrStatsConnResrceRejs"), ("TN3270E-MIB", "tn3270eSrvrStatsDisconnects"), ("TN3270E-MIB", "tn3270eSrvrStatsInOctets"), ("TN3270E-MIB", "tn3270eSrvrStatsOutOctets"), ("TN3270E-MIB", "tn3270eSrvrStatsConnErrorRejs"), ("TN3270E-MIB", "tn3270eClientGroupSubnetMask"), ("TN3270E-MIB", "tn3270eClientGroupPfxLength"), ("TN3270E-MIB", "tn3270eClientGroupRowStatus"), ("TN3270E-MIB", "tn3270eSnaMapLocalName"), ("TN3270E-MIB", "tn3270eSnaMapPrimaryLuName"), ("TN3270E-MIB", "tn3270eConfSpinLock"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn3270eBasicGroup = tn3270eBasicGroup.setStatus('current')
if mibBuilder.loadTexts: tn3270eBasicGroup.setDescription('This group is mandatory for all hosts supporting the TN3270E-MIB.')
tn3270eSessionGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 8, 3, 1, 2)).setObjects(("TN3270E-MIB", "tn3270eResMapAddrType"), ("TN3270E-MIB", "tn3270eResMapAddress"), ("TN3270E-MIB", "tn3270eResMapPort"), ("TN3270E-MIB", "tn3270eResMapElementType"), ("TN3270E-MIB", "tn3270eResMapSscpSuppliedName"), ("TN3270E-MIB", "tn3270eTcpConnLastActivity"), ("TN3270E-MIB", "tn3270eTcpConnBytesIn"), ("TN3270E-MIB", "tn3270eTcpConnBytesOut"), ("TN3270E-MIB", "tn3270eTcpConnResourceElement"), ("TN3270E-MIB", "tn3270eTcpConnResourceType"), ("TN3270E-MIB", "tn3270eTcpConnDeviceType"), ("TN3270E-MIB", "tn3270eTcpConnFunctions"), ("TN3270E-MIB", "tn3270eTcpConnSrvrConfIndex"), ("TN3270E-MIB", "tn3270eTcpConnActivationTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn3270eSessionGroup = tn3270eSessionGroup.setStatus('current')
if mibBuilder.loadTexts: tn3270eSessionGroup.setDescription('This group is mandatory for all hosts supporting the TN3270E-MIB.')
tn3270eResMapGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 8, 3, 1, 3)).setObjects(("TN3270E-MIB", "tn3270eResPoolElementType"), ("TN3270E-MIB", "tn3270eResPoolRowStatus"), ("TN3270E-MIB", "tn3270eClientResMapRowStatus"), ("TN3270E-MIB", "tn3270eTcpConnId"), ("TN3270E-MIB", "tn3270eTcpConnClientIdFormat"), ("TN3270E-MIB", "tn3270eTcpConnClientId"), ("TN3270E-MIB", "tn3270eTcpConnTraceData"), ("TN3270E-MIB", "tn3270eTcpConnLogInfo"), ("TN3270E-MIB", "tn3270eTcpConnLuLuBindImage"), ("TN3270E-MIB", "tn3270eTcpConnSnaState"), ("TN3270E-MIB", "tn3270eTcpConnStateLastDiscReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn3270eResMapGroup = tn3270eResMapGroup.setStatus('current')
if mibBuilder.loadTexts: tn3270eResMapGroup.setDescription('This group is optional for all hosts supporting the TN3270E-MIB.')
tn3270eHiCapacityGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 34, 8, 3, 1, 4)).setObjects(("TN3270E-MIB", "tn3270eSrvrStatsHCInOctets"), ("TN3270E-MIB", "tn3270eSrvrStatsHCOutOctets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    tn3270eHiCapacityGroup = tn3270eHiCapacityGroup.setStatus('current')
if mibBuilder.loadTexts: tn3270eHiCapacityGroup.setDescription("Support of these objects is REQUIRED when the Counter32 versions can potentially wrap too frequently. This group is optional for all other hosts supporting the TN3270E-MIB. The IF-MIB (RFC 2233) requires that the 64-bit versions of its counters be implemented when an interface can support rates of around 20 million bits per second or greater. This implies a minimum wrap rate of just over 28 minutes. It is recommended that this same guideline be used for determining whether an implementation implements these objects. This group contains two objects with the syntax Counter64. An implementation that doesn't support these objects should return noSuchObject, since returning a zero is misleading.")
mibBuilder.exportSymbols("TN3270E-MIB", tn3270eGroups=tn3270eGroups, tn3270eSrvrStatsOutOctets=tn3270eSrvrStatsOutOctets, tn3270eClientResMapClientGroupName=tn3270eClientResMapClientGroupName, tn3270eResPoolName=tn3270eResPoolName, tn3270eSnaMapPrimaryLuName=tn3270eSnaMapPrimaryLuName, tn3270eTcpConnBytesOut=tn3270eTcpConnBytesOut, tn3270eTcpConnFunctions=tn3270eTcpConnFunctions, tn3270eSrvrStatsMaxTerms=tn3270eSrvrStatsMaxTerms, tn3270eSrvrConfAdminStatus=tn3270eSrvrConfAdminStatus, tn3270eResPoolTable=tn3270eResPoolTable, tn3270eSrvrStatsTable=tn3270eSrvrStatsTable, tn3270eSrvrConfEntry=tn3270eSrvrConfEntry, tn3270eSrvrStatsSparePtrs=tn3270eSrvrStatsSparePtrs, tn3270eResMapElementName=tn3270eResMapElementName, tn3270eTcpConnLocalPort=tn3270eTcpConnLocalPort, tn3270eCompliance=tn3270eCompliance, tn3270eSrvrStatsConnErrorRejs=tn3270eSrvrStatsConnErrorRejs, tn3270eSnaMapEntry=tn3270eSnaMapEntry, tn3270eTcpConnLogInfo=tn3270eTcpConnLogInfo, tn3270eClientGroupAddress=tn3270eClientGroupAddress, tn3270eResMapPort=tn3270eResMapPort, tn3270eTcpConnActivationTime=tn3270eTcpConnActivationTime, tn3270eClientResMapClientPort=tn3270eClientResMapClientPort, tn3270eResMapAddrType=tn3270eResMapAddrType, tn3270eSrvrStatsHCOutOctets=tn3270eSrvrStatsHCOutOctets, tn3270eTcpConnRemAddrType=tn3270eTcpConnRemAddrType, tn3270eTcpConnResourceType=tn3270eTcpConnResourceType, tn3270eSrvrConfSrvrType=tn3270eSrvrConfSrvrType, tn3270eClientGroupRowStatus=tn3270eClientGroupRowStatus, tn3270eClientGroupPfxLength=tn3270eClientGroupPfxLength, tn3270eResMapElementType=tn3270eResMapElementType, tn3270eTcpConnBytesIn=tn3270eTcpConnBytesIn, tn3270eSrvrStatsSpareTerms=tn3270eSrvrStatsSpareTerms, tn3270eSrvrConfConnectivityChk=tn3270eSrvrConfConnectivityChk, SnaResourceName=SnaResourceName, tn3270eSnaMapSscpSuppliedName=tn3270eSnaMapSscpSuppliedName, tn3270eTcpConnLuLuBindImage=tn3270eTcpConnLuLuBindImage, tn3270eSrvrStatsInConnects=tn3270eSrvrStatsInConnects, tn3270eSrvrPortAddress=tn3270eSrvrPortAddress, tn3270eTcpConnLocalAddrType=tn3270eTcpConnLocalAddrType, tn3270eConformance=tn3270eConformance, tn3270eSrvrConfTable=tn3270eSrvrConfTable, tn3270eSrvrConfTmTimeout=tn3270eSrvrConfTmTimeout, tn3270eSrvrPortTable=tn3270eSrvrPortTable, tn3270eClientGroupTable=tn3270eClientGroupTable, tn3270eClientResMapEntry=tn3270eClientResMapEntry, tn3270eSrvrStatsConnResrceRejs=tn3270eSrvrStatsConnResrceRejs, tn3270eTcpConnLastActivity=tn3270eTcpConnLastActivity, tn3270eTcpConnTraceData=tn3270eTcpConnTraceData, tn3270eConfSpinLock=tn3270eConfSpinLock, tn3270eSrvrConfRowStatus=tn3270eSrvrConfRowStatus, tn3270eSrvrStatsHCInOctets=tn3270eSrvrStatsHCInOctets, tn3270eSessionGroup=tn3270eSessionGroup, tn3270eCompliances=tn3270eCompliances, tn3270eSrvrConfLastActTime=tn3270eSrvrConfLastActTime, tn3270eClientGroupName=tn3270eClientGroupName, tn3270eBasicGroup=tn3270eBasicGroup, tn3270eSrvrConfIndex=tn3270eSrvrConfIndex, tn3270eResPoolElementType=tn3270eResPoolElementType, tn3270eSrvrStatsEntry=tn3270eSrvrStatsEntry, tn3270eTcpConnEntry=tn3270eTcpConnEntry, tn3270eTcpConnSrvrConfIndex=tn3270eTcpConnSrvrConfIndex, tn3270eObjects=tn3270eObjects, tn3270eTcpConnId=tn3270eTcpConnId, tn3270eResPoolEntry=tn3270eResPoolEntry, tn3270eTcpConnLocalAddress=tn3270eTcpConnLocalAddress, tn3270eResMapSscpSuppliedName=tn3270eResMapSscpSuppliedName, tn3270eTcpConnTable=tn3270eTcpConnTable, tn3270eTcpConnClientIdFormat=tn3270eTcpConnClientIdFormat, tn3270eTcpConnRemAddress=tn3270eTcpConnRemAddress, tn3270eResPoolElementName=tn3270eResPoolElementName, tn3270eTcpConnSnaState=tn3270eTcpConnSnaState, tn3270eClientGroupSubnetMask=tn3270eClientGroupSubnetMask, tn3270eSrvrPortAddrType=tn3270eSrvrPortAddrType, tn3270eSrvrFunctionsSupported=tn3270eSrvrFunctionsSupported, tn3270eSrvrConfContact=tn3270eSrvrConfContact, Tn3270eTraceData=Tn3270eTraceData, tn3270eSrvrConfInactivityTimeout=tn3270eSrvrConfInactivityTimeout, tn3270eSrvrStatsUpTime=tn3270eSrvrStatsUpTime, tn3270eSnaMapTable=tn3270eSnaMapTable, tn3270eSrvrConfSessionTermState=tn3270eSrvrConfSessionTermState, tn3270eSrvrPortRowStatus=tn3270eSrvrPortRowStatus, tn3270eSrvrStatsInUsePtrs=tn3270eSrvrStatsInUsePtrs, tn3270eHiCapacityGroup=tn3270eHiCapacityGroup, tn3270eTcpConnRemPort=tn3270eTcpConnRemPort, PYSNMP_MODULE_ID=tn3270eMIB, tn3270eClientResMapRowStatus=tn3270eClientResMapRowStatus, tn3270eNotifications=tn3270eNotifications, tn3270eSrvrConfTmNopInterval=tn3270eSrvrConfTmNopInterval, tn3270eSrvrConfOperStatus=tn3270eSrvrConfOperStatus, tn3270eClientResMapTable=tn3270eClientResMapTable, tn3270eTcpConnClientId=tn3270eTcpConnClientId, tn3270eResMapAddress=tn3270eResMapAddress, tn3270eClientResMapPoolName=tn3270eClientResMapPoolName, tn3270eSnaMapLocalName=tn3270eSnaMapLocalName, tn3270eTcpConnDeviceType=tn3270eTcpConnDeviceType, tn3270eResMapEntry=tn3270eResMapEntry, tn3270eTcpConnResourceElement=tn3270eTcpConnResourceElement, tn3270eTcpConnStateLastDiscReason=tn3270eTcpConnStateLastDiscReason, tn3270eSrvrConfTmNopInactTime=tn3270eSrvrConfTmNopInactTime, tn3270eResMapGroup=tn3270eResMapGroup, tn3270eSrvrStatsInUseTerms=tn3270eSrvrStatsInUseTerms, tn3270eMIB=tn3270eMIB, tn3270eResPoolRowStatus=tn3270eResPoolRowStatus, tn3270eClientGroupAddrType=tn3270eClientGroupAddrType, tn3270eSrvrPort=tn3270eSrvrPort, tn3270eSrvrStatsMaxPtrs=tn3270eSrvrStatsMaxPtrs, tn3270eClientGroupEntry=tn3270eClientGroupEntry, tn3270eSrvrPortEntry=tn3270eSrvrPortEntry, tn3270eSrvrStatsDisconnects=tn3270eSrvrStatsDisconnects, tn3270eSrvrStatsInOctets=tn3270eSrvrStatsInOctets, tn3270eResMapTable=tn3270eResMapTable)
