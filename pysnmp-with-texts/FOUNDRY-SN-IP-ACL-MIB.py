#
# PySNMP MIB module FOUNDRY-SN-IP-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FOUNDRY-SN-IP-ACL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:41:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
RtrStatus, = mibBuilder.importSymbols("FOUNDRY-SN-IP-MIB", "RtrStatus")
router, = mibBuilder.importSymbols("FOUNDRY-SN-ROOT-MIB", "router")
PortQosTC, FdryVlanIdOrNoneTC = mibBuilder.importSymbols("FOUNDRY-SN-SWITCH-GROUP-MIB", "PortQosTC", "FdryVlanIdOrNoneTC")
InterfaceIndexOrZero, ifIndex, InterfaceIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndexOrZero", "ifIndex", "InterfaceIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, iso, MibIdentifier, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, NotificationType, Bits, Counter32, Unsigned32, Integer32, ModuleIdentity, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "iso", "MibIdentifier", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "NotificationType", "Bits", "Counter32", "Unsigned32", "Integer32", "ModuleIdentity", "Counter64")
MacAddress, DisplayString, TruthValue, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TruthValue", "TextualConvention", "RowStatus")
snAgAcl = ModuleIdentity((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15))
snAgAcl.setRevisions(('2014-01-28 00:00', '2011-03-02 00:00', '2010-06-02 00:00', '2009-09-30 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: snAgAcl.setRevisionsDescriptions(('Changed the description of the objects snAgAclGblIfIPv4AcctClear and snAgAclGblIfIPv6AcctClear. They are supported in CES/CER platforms.', 'Updated range of AclNumber from (1..499) to (1..599).', 'Changed the ORGANIZATION, CONTACT-INFO and DESCRIPTION fields.', '',))
if mibBuilder.loadTexts: snAgAcl.setLastUpdated('201103020000Z')
if mibBuilder.loadTexts: snAgAcl.setOrganization('Brocade Communications Systems, Inc.')
if mibBuilder.loadTexts: snAgAcl.setContactInfo('Technical Support Center 130 Holger Way, San Jose, CA 95134 Email: ipsupport@brocade.com Phone: 1-800-752-8061 URL: www.brocade.com')
if mibBuilder.loadTexts: snAgAcl.setDescription("Copyright 1996-2010 Brocade Communications Systems, Inc. All rights reserved. This Brocade Communications Systems SNMP Management Information Base Specification embodies Brocade Communications Systems' confidential and proprietary intellectual property. Brocade Communications Systems retains all title and ownership in the Specification, including any revisions. This Specification is supplied AS IS, and Brocade Communications Systems makes no warranty, either express or implied, as to the use, operation, condition, or performance of the specification, and any unintended consequence it may on the user environment.")
class SnRowStatus(TextualConvention, Integer32):
    description = 'The status of a given row in the table.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("valid", 2), ("delete", 3), ("create", 4))

class Action(TextualConvention, Integer32):
    description = 'The action to be taken on the packet after filtering is done.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("deny", 0), ("permit", 1))

class TruthVal(TextualConvention, Integer32):
    description = 'Boolean value.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("false", 0), ("true", 1))

class FdryClauseIndexTC(TextualConvention, Unsigned32):
    description = 'One-based clause index value within a given ACL number.'
    status = 'current'

class AclNumber(TextualConvention, Integer32):
    description = 'The Access control list number for an entry. The standard Access list is in the range <1-99>. The extended Access list is in the range <100-199>. The named standard Access list is in the range <200-299>. The named extended Access list is in the range <300-399>. The L2 Access list is in the range <400-1399>. The IPv6 named Access list is in the range <5000-5100> '
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(1, 5100)

class AclNameString(TextualConvention, OctetString):
    description = 'The optional name for a given access-list. In general, the ACL number for a named ACL is in the range of 200 and 399.'
    status = 'current'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(0, 255)

class Operator(TextualConvention, Integer32):
    description = 'The operation used within a given ACL filter to determine permit or deny.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 7))
    namedValues = NamedValues(("eq", 0), ("neq", 1), ("lt", 2), ("gt", 3), ("range", 4), ("undefined", 7))

class IpProtocol(TextualConvention, Integer32):
    description = 'The IP protocol number on which ACL can be applied.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 255)

class PrecedenceValue(TextualConvention, Integer32):
    description = 'The IP precedence value on which ACL can be applied.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("routine", 0), ("priority", 1), ("immediate", 2), ("flash", 3), ("flashoverride", 4), ("critical", 5), ("internet", 6), ("network", 7), ("undefined", 8))

class TosValue(TextualConvention, Integer32):
    description = 'The IP TOS value on which ACL can be applied.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("normal", 0), ("minMonetaryCost", 1), ("maxReliability", 2), ("tosValue3", 3), ("maxThroughput", 4), ("tosValue5", 5), ("tosValue6", 6), ("tosValue7", 7), ("minDelay", 8), ("tosValue9", 9), ("tosValue10", 10), ("tosValue11", 11), ("tosValue12", 12), ("tosValue13", 13), ("tosValue14", 14), ("tosValue15", 15), ("undefined", 16))

class Direction(TextualConvention, Integer32):
    description = 'The packet flow direction within an interface for which ACL needs to be applied.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("inbound", 0), ("outbound", 1))

class FdryEnetTypeOrZeroTC(TextualConvention, Integer32):
    description = 'Ethernet Type field within the Ethernet-II frame'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("invalid", 0), ("ipv4", 1), ("arp", 2), ("ipv6", 3))

snAgAclGlobal = MibIdentifier((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 1))
snAgAclGblCurRowIndex = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgAclGblCurRowIndex.setStatus('current')
if mibBuilder.loadTexts: snAgAclGblCurRowIndex.setDescription('The current row index of the ACL table entry.')
snAgAclGblAcctEnable = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclGblAcctEnable.setStatus('current')
if mibBuilder.loadTexts: snAgAclGblAcctEnable.setDescription('Specifies the administration status of the ACL accounting. This object is not supported in CES/CER platforms.')
snAgAclGblIfIPv4AcctClear = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 1, 3), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclGblIfIPv4AcctClear.setStatus('current')
if mibBuilder.loadTexts: snAgAclGblIfIPv4AcctClear.setDescription('Clears the IPv4 ACL accounting information for the given interface. If the value is 0 then it clears IPv4 ACL accounting information for all the interfaces.')
snAgAclGblIfIPv6AcctClear = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 1, 4), InterfaceIndexOrZero()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclGblIfIPv6AcctClear.setStatus('current')
if mibBuilder.loadTexts: snAgAclGblIfIPv6AcctClear.setDescription('Clears the IPv6 ACL accounting information for the given interface. If the value is 0 then it clears IPv6 accounting information for all the interfaces.')
snAgAclGblRebindAclNumber = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 1, 5), AclNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclGblRebindAclNumber.setStatus('current')
if mibBuilder.loadTexts: snAgAclGblRebindAclNumber.setDescription('The access-list number for rebind')
snAgAclGblRebindAclName = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclGblRebindAclName.setStatus('current')
if mibBuilder.loadTexts: snAgAclGblRebindAclName.setDescription('The access-list name for rebind.')
brcdPbrAclAccntFilterAclName = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdPbrAclAccntFilterAclName.setStatus('current')
if mibBuilder.loadTexts: brcdPbrAclAccntFilterAclName.setDescription('This object can be used to control the content of brcdPbrAclAccntTable. Any ACL filter that has a full or partial match with ACL name will not be returned in the brcdPbrAclAccntTable. If not specified, the default value is null and all ACL filters will be returned by the table.')
brcdPbrAclAccntCounterType = MibScalar((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("cumulative", 1), ("last5min", 2))).clone('cumulative')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: brcdPbrAclAccntCounterType.setStatus('current')
if mibBuilder.loadTexts: brcdPbrAclAccntCounterType.setDescription('This contains ACL Number, ACL Name, ACL Filter Id, last five minutes and cumulative accounting data since the ACL was installed. Each field is separated by a pipe character i.e. 5MIN|CUMULATIVE|ACL Number|ACL Filter Id|ACL Name Depending on the value of brcdPbrAclAccntCounterType the corresponding counter will have the value while the other is zero.')
snAgAclTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2), )
if mibBuilder.loadTexts: snAgAclTable.setStatus('current')
if mibBuilder.loadTexts: snAgAclTable.setDescription('Table of Access Control List')
snAgAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-ACL-MIB", "snAgAclIndex"))
if mibBuilder.loadTexts: snAgAclEntry.setStatus('current')
if mibBuilder.loadTexts: snAgAclEntry.setDescription('An entry in the IP access control list table.')
snAgAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgAclIndex.setStatus('current')
if mibBuilder.loadTexts: snAgAclIndex.setDescription('The Access control list item number for an entry. This is a unique number that identifies different Access list entries combined with the Access list name and Access list number. This one has to be unique even though the name and number are not unique for a given Access list with same or different source address, subnet mask, destination address and destination mask, protocol type, action (permit/deny) type and the operator (neq, eq, gt and, lt) which makes the index a unique tuple (name, number, itemnumber).')
snAgAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 2), AclNumber()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclNumber.setStatus('current')
if mibBuilder.loadTexts: snAgAclNumber.setDescription('The access-list number for this entry.')
snAgAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclName.setStatus('current')
if mibBuilder.loadTexts: snAgAclName.setDescription('ACL name for an entry.')
snAgAclAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 4), Action()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclAction.setStatus('current')
if mibBuilder.loadTexts: snAgAclAction.setDescription('Action to take if the ip packet matches with this access control list.')
snAgAclProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 5), IpProtocol()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclProtocol.setStatus('current')
if mibBuilder.loadTexts: snAgAclProtocol.setDescription('Transport protocol. Valid values for the IP protocol are: 0 = any IP protocol 1 = ICMP 2 = IGMP 3 = ggp 4 = ipencap 5 = st2 6 = TCP 7 = cbt 8 = egp 9 = igp 10 = bbn_rcc 11 = nvp 12 = pup 13 = argus 14 = emcon 15 = xnet 16 = chaos 17 = UDP 18 = mux 19 = dcn 20 = hmp 21 = prm 22 = xns_idp 23 = trunk1 24 = trunk2 25 = leaf1 26 = leaf2 27 = rdp 28 = irtp 29 = iso_tp4 30 = netblt 31 = mfe_nsp 32 = merit_inp 33 = sep 34 = threepc 35 = idpr 36 = xtp 37 = ddp 38 = idpr_cmtp 39 = tppp 40 = il 41 = ipv6 42 = sdrp 43 = ipv6_route 44 = ipv6_frag 45 = idrp 46 = rsvp 47 = gre 48 = mhrp 49 = bna 50 = esp 51 = ahp 52 = inlsp 53 = swipe 54 = narp 55 = mobile 56 = tlsp 57 = skip 58 = ipv6_icmp 59 = ipv6_nonxt 60 = ipv6_opts 62 = cftp 64 = sat_expak 65 = kryptolan 66 = rvd 67 = ippc 69 = sat_mon 70 = visa 71 = ipcv 72 = cpnx 73 = cphb 74 = wsn 75 = pvp 76 = br_sat_mon 77 = sun_nd 78 = wb_mon 79 = wb_expak 80 = iso_ip 81 = vmtp 82 = secure_vmtp 83 = vines 84 = ttp 85 = nsfnet_igp 86 = dgp 87 = tcf 88 = IGRP 89 = OSPF 90 = sprite_rpc 91 = larp 92 = mtp 93 = ax25 94 = ipip 95 = micp 96 = scc_sp 97 = etherip 98 = encap 100 = gmtp 101 = ifmp 102 = pnni 103 = pim 104 = aris 105 = scps 106 = qnx 107 = an 108 = ipcomp 109 = snp 110 = compaq_peer 111 = ipxinip 112 = vrrp 113 = pgm 115 = l2tp 116 = ddx 117 = iatp 118 = st 119 = srp 120 = uti 121 = smp 122 = sm 123 = ptp 124 = isis 125 = fire 126 = crtp 127 = crdup 128 = sscopmce 129 = iplt 130 = sps 131 = pipe 132 = sctp 133 = fc 134 = rsvp_e2e_ignore 135 = mobility_header 136 = udplite 137 = mpls_in_ip 138 = manet 139 = hip 140 = shim6 254 = divert ')
snAgAclSourceIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclSourceIp.setStatus('current')
if mibBuilder.loadTexts: snAgAclSourceIp.setDescription('Source IP address.')
snAgAclSourceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclSourceMask.setStatus('current')
if mibBuilder.loadTexts: snAgAclSourceMask.setDescription('Source IP subnet mask.')
snAgAclSourceOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 8), Operator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclSourceOperator.setStatus('current')
if mibBuilder.loadTexts: snAgAclSourceOperator.setDescription('Type of comparison to perform. For now, this only applys to tcp or udp to compare the port number')
snAgAclSourceOperand1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclSourceOperand1.setStatus('current')
if mibBuilder.loadTexts: snAgAclSourceOperand1.setDescription('For now this only refers to transport protocol port number. 0 means NA')
snAgAclSourceOperand2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclSourceOperand2.setStatus('current')
if mibBuilder.loadTexts: snAgAclSourceOperand2.setDescription('For now this only refers to transport protocol port number. Used in ICMP Protocol to convey the ICMP Type value. 0 means NA. Valid values for ICMP Type: 1 = Echo reply 4 = Destination unreachable 5 = Source quench 6 = Redirect 9 = Echo request 10=Router advertisement 11=Router solicitation 12=Time exceeded 13=Parameter problem 14=Timestamp request 15=Timestamp reply 16=Information request 17=Information reply 18=Address mask request 19=Address mask reply. ')
snAgAclDestinationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclDestinationIp.setStatus('current')
if mibBuilder.loadTexts: snAgAclDestinationIp.setDescription('Destination IP address.')
snAgAclDestinationMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclDestinationMask.setStatus('current')
if mibBuilder.loadTexts: snAgAclDestinationMask.setDescription('Destination IP subnet mask.')
snAgAclDestinationOperator = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 13), Operator()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclDestinationOperator.setStatus('current')
if mibBuilder.loadTexts: snAgAclDestinationOperator.setDescription('Type of comparison to perform. For now, this only applys to tcp or udp to compare the port number')
snAgAclDestinationOperand1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclDestinationOperand1.setStatus('current')
if mibBuilder.loadTexts: snAgAclDestinationOperand1.setDescription('For now this only refers to transport protocol port number. 0 means NA')
snAgAclDestinationOperand2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclDestinationOperand2.setStatus('current')
if mibBuilder.loadTexts: snAgAclDestinationOperand2.setDescription('For now this only refers to transport protocol port number. 0 means NA')
snAgAclPrecedence = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 16), PrecedenceValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclPrecedence.setStatus('current')
if mibBuilder.loadTexts: snAgAclPrecedence.setDescription('This refers to IP precedence value in the range <0-7> critical(5), flash(3), flash-override(4), immediate(2), internet(6), network(7), priority(1), routine(0)')
snAgAclTos = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 17), TosValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclTos.setStatus('current')
if mibBuilder.loadTexts: snAgAclTos.setDescription('This refers to the IP type of service value in range <0-15>, which is the sum of numeric vlaues of the following options - match packets with maximum reliability TOS (2) match packets with maximum throughput TOS (4) match packets with minimum delay (8) match packets with minimum monetary cost TOS (1) match packets with normal TOS (0)')
snAgAclEstablished = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 18), RtrStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclEstablished.setStatus('current')
if mibBuilder.loadTexts: snAgAclEstablished.setDescription('Enable/Disable the filtering of established TCP packets of which the ACK or RESET flag is on. This additional filter only applies to TCP transport protocol.')
snAgAclLogOption = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 19), TruthVal()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclLogOption.setStatus('current')
if mibBuilder.loadTexts: snAgAclLogOption.setDescription('Log flag')
snAgAclStandardFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 20), TruthVal()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclStandardFlag.setStatus('current')
if mibBuilder.loadTexts: snAgAclStandardFlag.setDescription('Return whether the ACL is standard or extended, 1 for standard ACL')
snAgAclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 21), SnRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclRowStatus.setStatus('current')
if mibBuilder.loadTexts: snAgAclRowStatus.setDescription('To create or delete a access list entry.')
snAgAclFlowCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgAclFlowCounter.setStatus('current')
if mibBuilder.loadTexts: snAgAclFlowCounter.setDescription('Approximate count of flows matching individual ACL entry.')
snAgAclPacketCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgAclPacketCounter.setStatus('current')
if mibBuilder.loadTexts: snAgAclPacketCounter.setDescription('Accurate count of packets matching individual ACL entry.')
snAgAclComments = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclComments.setStatus('current')
if mibBuilder.loadTexts: snAgAclComments.setDescription('Remark description of individual ACL entry.')
snAgAclIpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclIpPriority.setStatus('current')
if mibBuilder.loadTexts: snAgAclIpPriority.setDescription('QoS priority option for IP ACL entry.')
snAgAclPriorityForce = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclPriorityForce.setStatus('current')
if mibBuilder.loadTexts: snAgAclPriorityForce.setDescription('Force packet outgoing priority. Not defined(4)')
snAgAclPriorityMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclPriorityMapping.setStatus('current')
if mibBuilder.loadTexts: snAgAclPriorityMapping.setDescription('Map incoming packet priority. Not defined(8)')
snAgAclDscpMarking = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclDscpMarking.setStatus('current')
if mibBuilder.loadTexts: snAgAclDscpMarking.setDescription('Mark packets with given DSCP value. Not defined(64)')
snAgAclDscpMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclDscpMapping.setStatus('current')
if mibBuilder.loadTexts: snAgAclDscpMapping.setDescription('Map incoming DSCP value. Not defined(64)')
snAgAclIcmpCode = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclIcmpCode.setStatus('current')
if mibBuilder.loadTexts: snAgAclIcmpCode.setDescription("ICMP Message Code value. Used in combination with ICMP Message Type (use snAgAclSourceOperand2) to setup an ICMP filter. This object is not used with any other protocol. 0 means NA. Supported values Type: Echo reply -------------- 1 = Echo reply Type: Destination unreachable ------------------------- 1 = Network unreachable 2 = Host unreachable 3 = Protocol unreachable 4 = Port unreachable 5 = Fragmentation needed by don't fragment bit set 6 = Source route failed 7 = Destination network unknown 8 = Destination host unknown 9 = Source host isolated 10 = Destination network administratively prohibited 11=Destination host administratively prohibited 12=Network unreachable for TOS 13=Host unreachable for TOS 14=Communication administratively prohibited by filter 15=Host precedence violation 16=Precedence cutoff in effect Type: Source quench ------------------ 1 = Source quench Type: Redirect ------------ 1 = Redirect for network 2 = Redirect for host 3 = Redirect for TOS and network 4 = Redirect for TOS and host Type: Echo request ----------------- 1 = Echo request Type: Router advertisement ------------------------ 1 = Router advertisement Type: Router solicitation --------------------- 1 = Router solicitation Type: Time exceeded ------------------ 1 = Time to live equals 0 during transmit 2 = Time to live equals 0 during reassembly Type: Parameter problem --------------------- 1 = IP header bad (catchall error) 2 = Required option missing Type: Timestamp request ---------------------- 1 = Timestamp request Type: Timestamp reply ------------------- 1 = Timestamp reply Type: Information request ---------------------- 1 = Information request Type: Information reply -------------------- 1 = Information reply Type: Address mask request ------------------------ 1 = Address mask request Type: Address mask reply ---------------------- 1 = Address mask reply")
snAgAclParameters = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 31), Bits().clone(namedValues=NamedValues(("matchFragmentedPackets", 0), ("matchNonFragmentedPackets", 1), ("matchTcpSynSetPackets", 2), ("permitFailedRPFCheckPackets", 3), ("mirrorPermitPackets", 4), ("sendPermitPacketsToSflowCollector", 5), ("dscpMappingFlagSet", 6), ("dscpMarkingFlagSet", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclParameters.setStatus('current')
if mibBuilder.loadTexts: snAgAclParameters.setDescription('This mask represents multiple parameters configured for this ACL. Bit 0 specified in the BITS construct is the MS bit of the first octet. Bit 0: Match fragmented IP packets Bit 1: Match non-fragmented IP packets Bit 2: Match only TCP packets with SYN Bit set. Valid only if snAgAclSourceOperator or snAgAclDestinationOperator is set to TCP. Bit 3: Permit packets that fail RPF check Bit 4: Mirror packets matching ACL permit clause Bit 5: Send packets matching ACL permit clause to sFlow collector Bit 6: Set dscp-mapping. The value is given by snAgAclDscpMarking Bit 7: Set dscp-marking. The value is given by snAgAclDscpMapping ')
snAgAclVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 32), FdryVlanIdOrNoneTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snAgAclVlanId.setStatus('current')
if mibBuilder.loadTexts: snAgAclVlanId.setDescription('Optional VLAN ID to match against that of the incoming packet. By default, the VLAN ID field is ignored during the match. In this case, value 0 is returned.')
snAgAclClauseString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 2, 1, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgAclClauseString.setStatus('current')
if mibBuilder.loadTexts: snAgAclClauseString.setDescription('Returns the equivalent filter clause string.')
snAgAclBindToPortTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 3), )
if mibBuilder.loadTexts: snAgAclBindToPortTable.setStatus('current')
if mibBuilder.loadTexts: snAgAclBindToPortTable.setDescription('Table of ACL binding to port for router')
snAgAclBindToPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 3, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-ACL-MIB", "snAgAclPortNum"), (0, "FOUNDRY-SN-IP-ACL-MIB", "snAgAclPortBindDirection"))
if mibBuilder.loadTexts: snAgAclBindToPortEntry.setStatus('current')
if mibBuilder.loadTexts: snAgAclBindToPortEntry.setDescription('An entry in the ACL-binding-to-port table.')
snAgAclPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgAclPortNum.setStatus('current')
if mibBuilder.loadTexts: snAgAclPortNum.setDescription('Binding-to port num, either physical port or virtual interface.')
snAgAclPortBindDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 3, 1, 2), Direction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgAclPortBindDirection.setStatus('current')
if mibBuilder.loadTexts: snAgAclPortBindDirection.setDescription('ACL port direction, inbound or outbound')
snAgAclNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclNum.setStatus('current')
if mibBuilder.loadTexts: snAgAclNum.setDescription('Defined ACL number')
snAgAclNameString = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclNameString.setStatus('current')
if mibBuilder.loadTexts: snAgAclNameString.setDescription('Defined ACL name')
snAgBindPortListInVirtualInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 3, 1, 5), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgBindPortListInVirtualInterface.setStatus('current')
if mibBuilder.loadTexts: snAgBindPortListInVirtualInterface.setDescription('Port list for binding virtual interface')
snAgAclPortRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 3, 1, 6), SnRowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snAgAclPortRowStatus.setStatus('current')
if mibBuilder.loadTexts: snAgAclPortRowStatus.setDescription('To create or delete a ACL port entry.')
snAgAclIfBindTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 4), )
if mibBuilder.loadTexts: snAgAclIfBindTable.setStatus('current')
if mibBuilder.loadTexts: snAgAclIfBindTable.setDescription('Table of ACL binding to port for router')
snAgAclIfBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 4, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-ACL-MIB", "snAgAclIfBindIndex"), (0, "FOUNDRY-SN-IP-ACL-MIB", "snAgAclIfBindDirection"))
if mibBuilder.loadTexts: snAgAclIfBindEntry.setStatus('current')
if mibBuilder.loadTexts: snAgAclIfBindEntry.setDescription('An entry in the ACL-binding-to-port table.')
snAgAclIfBindIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 4, 1, 1), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgAclIfBindIndex.setStatus('current')
if mibBuilder.loadTexts: snAgAclIfBindIndex.setDescription('Binding-to port num, either physical port or virtual interface.')
snAgAclIfBindDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 4, 1, 2), Direction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snAgAclIfBindDirection.setStatus('current')
if mibBuilder.loadTexts: snAgAclIfBindDirection.setDescription('ACL port direction, inbound or outbound')
snAgAclIfBindNum = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 199))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snAgAclIfBindNum.setStatus('current')
if mibBuilder.loadTexts: snAgAclIfBindNum.setDescription('The id of the IPv4 ACL bound to this Interface (0 represents named ACL)')
snAgAclIfBindName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snAgAclIfBindName.setStatus('current')
if mibBuilder.loadTexts: snAgAclIfBindName.setDescription('The name of the IPv4 ACL name bound to this Interface')
snAgAclIfBindVifPortList = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 4, 1, 5), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snAgAclIfBindVifPortList.setStatus('current')
if mibBuilder.loadTexts: snAgAclIfBindVifPortList.setDescription('This object specifies the port list for binding virtual interface. Each port index is an ifIndex, if there are consecutive 4 or more ifIndex then, they will be encoded like below. Encoding and decoding scheme is range based: Each range prefix with 0000 (2 octets) where 0000 is not valid ifIndex. Next 2 octets indicates lower range ifIndex, followed by 2 octets of higher range ifIndex. Individual(non range) ones will be displayed as it is. Ex: port list: 0001..0005 0015 0032..0047 Port list in PDU: 0000 0001 0005 000f 0000 0020 002f.')
snAgAclIfBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 4, 1, 6), SnRowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snAgAclIfBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: snAgAclIfBindRowStatus.setDescription('To create or delete a ACL port entry.')
snAgAclIfBindDenyLogging = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snAgAclIfBindDenyLogging.setStatus('current')
if mibBuilder.loadTexts: snAgAclIfBindDenyLogging.setDescription('Enable or disable deny logging.')
snAgAclIfIpv6BindName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 4, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 200))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: snAgAclIfIpv6BindName.setStatus('current')
if mibBuilder.loadTexts: snAgAclIfIpv6BindName.setDescription('The name of the IPv6 ACL name bound to this Interface')
agAclAccntTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5), )
if mibBuilder.loadTexts: agAclAccntTable.setStatus('current')
if mibBuilder.loadTexts: agAclAccntTable.setDescription('Table of ACL Accounting Statistics for router')
agAclAccntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-ACL-MIB", "agAclAccntKind"), (0, "FOUNDRY-SN-IP-ACL-MIB", "agAclAccntIfIndex"), (0, "FOUNDRY-SN-IP-ACL-MIB", "agAclAccntDirection"), (0, "FOUNDRY-SN-IP-ACL-MIB", "agAclAccntAclNumber"), (0, "FOUNDRY-SN-IP-ACL-MIB", "agAclAccntFilterId"))
if mibBuilder.loadTexts: agAclAccntEntry.setStatus('current')
if mibBuilder.loadTexts: agAclAccntEntry.setDescription('An entry in the ACL-binding-to-port table.')
agAclAccntKind = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3, 4, 5, 7))).clone(namedValues=NamedValues(("ipv4", 0), ("l2", 1), ("rateLimit", 3), ("receiveAcl", 4), ("ipv6", 5), ("ipv6ReceiveAcl", 7))))
if mibBuilder.loadTexts: agAclAccntKind.setStatus('current')
if mibBuilder.loadTexts: agAclAccntKind.setDescription('Kind of ACL Accounting statistics needed. ipv4PolicyBasedRouting(2) and ipv6PolicyBasedRouting(6) are implemented in brcdPbrAclAccntTable. Agent will fail for GET on ipv4PolicyBasedRouting(2) and ipv6PolicyBasedRouting(6) wheresas for GET_NEXT it will skip these. The enum value ipv6ReceiveAcl(7) is not supported on CES/CER devices.')
agAclAccntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: agAclAccntIfIndex.setStatus('current')
if mibBuilder.loadTexts: agAclAccntIfIndex.setDescription('Physical or virtual interface on which ACL accounting is desired. For Receive ACL, we use the lowest port of the management module as value for this object.')
agAclAccntDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 3), Direction())
if mibBuilder.loadTexts: agAclAccntDirection.setStatus('current')
if mibBuilder.loadTexts: agAclAccntDirection.setDescription('ACL port direction, inbound or outbound. For receive-acl kind, direction cannot be outbound.')
agAclAccntAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 4), AclNumber())
if mibBuilder.loadTexts: agAclAccntAclNumber.setStatus('current')
if mibBuilder.loadTexts: agAclAccntAclNumber.setDescription('The access-list number for this entry.')
agAclAccntFilterId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 5), Unsigned32())
if mibBuilder.loadTexts: agAclAccntFilterId.setStatus('current')
if mibBuilder.loadTexts: agAclAccntFilterId.setDescription('FilterId within a given ACL. This is a zero based value.')
agAclAccntAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 6), AclNameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAclAccntAclName.setStatus('current')
if mibBuilder.loadTexts: agAclAccntAclName.setDescription('ACL name for an entry, if applicable. Otherwise, null string is returned.')
agAclAccntOneSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAclAccntOneSecond.setStatus('current')
if mibBuilder.loadTexts: agAclAccntOneSecond.setDescription('Last one second accounting data.')
agAclAccntOneMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAclAccntOneMinute.setStatus('current')
if mibBuilder.loadTexts: agAclAccntOneMinute.setDescription('Last one minute accounting data.')
agAclAccntFiveMinute = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAclAccntFiveMinute.setStatus('current')
if mibBuilder.loadTexts: agAclAccntFiveMinute.setDescription('Last five minute accounting data.')
agAclAccntCumulative = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAclAccntCumulative.setStatus('current')
if mibBuilder.loadTexts: agAclAccntCumulative.setDescription('Cummulative accounting data since the ACL was installed.')
agAclAccntRaclDropCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAclAccntRaclDropCnt.setStatus('current')
if mibBuilder.loadTexts: agAclAccntRaclDropCnt.setDescription('Receive-ACL drop counter used for rate limiting. Not used for other ACL kind. The value returned is per ACL, instead of per filter within the ACL.')
agAclAccntRaclFwdCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAclAccntRaclFwdCnt.setStatus('current')
if mibBuilder.loadTexts: agAclAccntRaclFwdCnt.setDescription('Receive-ACL forward counter used for rate limiting. Not used for other ACL kind. The value returned is per ACL, instead of per filter within the ACL.')
agAclAccntRaclRemarkCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAclAccntRaclRemarkCnt.setStatus('current')
if mibBuilder.loadTexts: agAclAccntRaclRemarkCnt.setDescription('Receive-ACL remark counter used for rate limiting. Not used for other ACL kind. The value returned is per ACL, instead of per filter within the ACL.')
agAclAccntRaclTotalCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAclAccntRaclTotalCnt.setStatus('current')
if mibBuilder.loadTexts: agAclAccntRaclTotalCnt.setDescription('Receive-ACL total counter used for rate limiting. Not used for other ACL kind. The value returned is per ACL, instead of per filter within the ACL.')
agAclAccntRaclTotalSWHitCountCnt = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 5, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: agAclAccntRaclTotalSWHitCountCnt.setStatus('current')
if mibBuilder.loadTexts: agAclAccntRaclTotalSWHitCountCnt.setDescription('Receive-ACL cumulative software hit counter. Not used for other ACL kind. The value returned is per ACL, instead of per filter within the ACL.')
fdryL2AclNextClauseTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 6), )
if mibBuilder.loadTexts: fdryL2AclNextClauseTable.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclNextClauseTable.setDescription('This read-only table contains the list of next lowest available clause index that can be used for creating a new instance in the fdryL2AclTable. The clause index values will not change as a result of switchovers or hitless upgrades, but may change as a result of a device reload (though the relative order of persistent entries would remain the same). ')
fdryL2AclNextClauseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 6, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-ACL-MIB", "fdryL2AclNumber"))
if mibBuilder.loadTexts: fdryL2AclNextClauseEntry.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclNextClauseEntry.setDescription('An entry specifying the next lowest available clause index for this ACL number.')
fdryL2AclNextClauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 6, 1, 1), FdryClauseIndexTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fdryL2AclNextClauseIndex.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclNextClauseIndex.setDescription('The next lowest available clause index for a given ACL number. The maximum value of this object is the configured maximum number of clauses for a L2 ACL.')
fdryL2AclTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7), )
if mibBuilder.loadTexts: fdryL2AclTable.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclTable.setDescription('Table of Layer 2 Access Control Lists. Layer 2 ACLs filter traffic based on any of the following fields: - Source MAC address and source MAC mask - Destination MAC address and destination MAC mask - VLAN ID - Ethernet type. For a given ACL number, one can have 64 (default) to 256 clauses. The clause index values will not change as a result of switchovers or hitless upgrades, but may change as a result of a device reload (though the relative order of persistent entries would remain the same). ')
fdryL2AclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-ACL-MIB", "fdryL2AclNumber"), (0, "FOUNDRY-SN-IP-ACL-MIB", "fdryL2AclClauseIndex"))
if mibBuilder.loadTexts: fdryL2AclEntry.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclEntry.setDescription('An entry in the L2 Access Control List table.')
fdryL2AclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 1), AclNumber())
if mibBuilder.loadTexts: fdryL2AclNumber.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclNumber.setDescription('The access-list number for this entry. For L2ACL, the valid values are between 400 and 599.')
fdryL2AclClauseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 2), FdryClauseIndexTC())
if mibBuilder.loadTexts: fdryL2AclClauseIndex.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclClauseIndex.setDescription('The index of the clause within a given ACL number. During row creation, the clause index value should match with the next available clause index for a given ACL number. It is advisable to first do a Get operation on the fdryL2AclNextClauseTable for a given ACL number, and use the value of fdryL2AclNextClauseIndex returned by the agent.')
fdryL2AclAction = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 3), Action()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclAction.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclAction.setDescription('Action to take if the ingress L2 packet matches this ACL.')
fdryL2AclSourceMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 4), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclSourceMac.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclSourceMac.setDescription('Optional Source MAC address. By default, it matches with any source MAC within a packet.')
fdryL2AclSourceMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 5), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclSourceMacMask.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclSourceMacMask.setDescription("Optional Source MAC address mask. For Set operation, this object can only be used in conjunction with fdryL2AclSourceMac. By default, it matches with any source MAC within a packet. it matches with any source MAC within a packet. To match on the first two bytes of the address aabb.ccdd.eeff, use the mask ffff.0000.0000. In this case, the clause matches all source MAC addresses that contain 'aabb' as the first two bytes and any values in the remaining bytes of the MAC address.")
fdryL2AclDestinationMac = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 6), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclDestinationMac.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclDestinationMac.setDescription('Optional destination MAC address. By default, it matches with any destination MAC within a packet.')
fdryL2AclDestinationMacMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 7), MacAddress().clone(hexValue="000000000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclDestinationMacMask.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclDestinationMacMask.setDescription("Optional destination MAC address mask. For Set operation, this object can only be used in conjunction with fdryL2AclDestinationMac. By default, it matches with any destination MAC within a packet. To match on the first two bytes of the address aabb.ccdd.eeff, use the mask ffff.0000.0000. In this case, the clause matches all destination MAC addresses that contain 'aabb' as the first two bytes and any values in the remaining bytes of the MAC address.")
fdryL2AclVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 8), FdryVlanIdOrNoneTC()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclVlanId.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclVlanId.setDescription('Optional VLAN ID to match against that of the incoming packet. By default, the VLAN ID field is ignored during the match. In this case, value 0 is returned.')
fdryL2AclEthernetType = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 9), FdryEnetTypeOrZeroTC().clone('invalid')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclEthernetType.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclEthernetType.setDescription('Optional Ethernet Type to match against the etype field of the incoming packet. By default, etype field is ignored during the match.')
fdryL2AclDot1pPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 10), PortQosTC().clone('level0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclDot1pPriority.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclDot1pPriority.setDescription('The priority option assigns traffic that matches the ACL to a hardware forwarding queue. In addition to changing the internal forwarding priority, if the outgoing interface is an 802.1q interface, this option maps the specified priority to its equivalent 802.1p (QoS) priority and marks the packet with the new 802.1p priority. This option is applicable for inbound ACLs only. This object is not supported in RX, where it always returns enum value invalid. NOTE: fdryL2AclDot1pPriority following fdryL2AclDot1pPriorityForce cannot be used together in an ACL entry.')
fdryL2AclDot1pPriorityForce = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 11), PortQosTC().clone('level0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclDot1pPriorityForce.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclDot1pPriorityForce.setDescription('The priority-force option assigns packets of outgoing traffic that match the ACL to a specific hardware forwarding queue, even though the incoming packet may be assigned to another queue. This option is applicable for inbound ACLs only. This object is not supported in RX, where it always returns enum value invalid. NOTE: fdryL2AclDot1pPriority following fdryL2AclDot1pPriorityForce cannot be used together in an ACL entry.')
fdryL2AclDot1pPriorityMapping = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 12), PortQosTC().clone('level0')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclDot1pPriorityMapping.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclDot1pPriorityMapping.setDescription('The priority-mapping option matches on the packets 802.1p value. This option does not change the packets forwarding priority through the device or mark the packet. This keyword is applicable for both inbound and outbound ACLs. This object is not supported in RX, where it always returns enum value invalid.')
fdryL2AclMirrorPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 13), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclMirrorPackets.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclMirrorPackets.setDescription('Mirror packets matching ACL permit clause.')
fdryL2AclLogEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 14), TruthValue().clone('false')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclLogEnable.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclLogEnable.setDescription("Optional parameter to enable logging only when deny clause is specified. Note that traffic denied by implicit deny mechanism is not subject to logging. The implicit deny kicks in when the traffic does not match any of the clauses and there is no 'permit any any' clause specified at the end.")
fdryL2AclRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 7, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclRowStatus.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclRowStatus.setDescription('The row status variable, used according to installation and removal conventions for conceptual rows. Setting this object to active(1) or createAndGo(4) results in the addition of a L2 ACL filter in the router. Duplicate entry will be rejected during row creation. As part of row creation, we support only appending to this table. Row insertion may not be supported. Setting this object to destroy(6) removes the associated filter from the router. Other values in the enumeration are not used. ')
fdryL2AclIfBindTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 8), )
if mibBuilder.loadTexts: fdryL2AclIfBindTable.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclIfBindTable.setDescription('Table of L2 ACL binding to port. - One cannot bind Layer 2 ACLs and Layer 3 ACLs to the same port. However, one can configure a port to use Layer 2 ACLs, and another port on the same device to use Layer 3 ACLs. - In general, Layer 2 ACLs cannot be bound to virtual interfaces, unlike L3 ACLs. - One cannot modify an existing Layer 2 ACL clause. For that, one must unbind the ACL, delete it and make a new clause. ')
fdryL2AclIfBindEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "FOUNDRY-SN-IP-ACL-MIB", "fdryL2AclIfBindDirection"))
if mibBuilder.loadTexts: fdryL2AclIfBindEntry.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclIfBindEntry.setDescription('An entry in the L2ACL binding table which lists the ACL bindings to a port. ')
fdryL2AclIfBindDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 8, 1, 1), Direction())
if mibBuilder.loadTexts: fdryL2AclIfBindDirection.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclIfBindDirection.setDescription('Direction in which this ACL should be applied on this port.')
fdryL2AclIfBindAclNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 8, 1, 2), Unsigned32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclIfBindAclNumber.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclIfBindAclNumber.setDescription('The ACL number that is to be bound to given physical interface. The valid values for L2 numbered ACLs are between 400 and 599.')
fdryL2AclIfBindRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 8, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: fdryL2AclIfBindRowStatus.setStatus('current')
if mibBuilder.loadTexts: fdryL2AclIfBindRowStatus.setDescription('The row status variable, used according to installation and removal conventions for conceptual rows. Setting this object to active(1) or createAndGo(4) results in the binding of a L2 ACL with a given physical port. Setting this object to destroy(6) unbinds this L2 ACL from the port. Other values in the enumeration are not used.')
brcdPbrAclAccntTable = MibTable((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 9), )
if mibBuilder.loadTexts: brcdPbrAclAccntTable.setStatus('current')
if mibBuilder.loadTexts: brcdPbrAclAccntTable.setDescription('Table of PBR ACL Accounting Statistics for router.')
brcdPbrAclAccntEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 9, 1), ).setIndexNames((0, "FOUNDRY-SN-IP-ACL-MIB", "brcdPbrAclAccntKind"), (0, "FOUNDRY-SN-IP-ACL-MIB", "brcdPbrAclAccntIfIndex"), (0, "FOUNDRY-SN-IP-ACL-MIB", "brcdPbrSerialNumber"))
if mibBuilder.loadTexts: brcdPbrAclAccntEntry.setStatus('current')
if mibBuilder.loadTexts: brcdPbrAclAccntEntry.setDescription('An entry in the PBR ACL-binding-to-port table.')
brcdPbrAclAccntKind = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 9, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ipv4PolicyBasedRouting", 1), ("ipv6PolicyBasedRouting", 2))))
if mibBuilder.loadTexts: brcdPbrAclAccntKind.setStatus('current')
if mibBuilder.loadTexts: brcdPbrAclAccntKind.setDescription('Kind of PBR ACL Accounting statistics needed.')
brcdPbrAclAccntIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 9, 1, 2), InterfaceIndex())
if mibBuilder.loadTexts: brcdPbrAclAccntIfIndex.setStatus('current')
if mibBuilder.loadTexts: brcdPbrAclAccntIfIndex.setDescription('Physical or virtual interface on which ACL accounting is desired')
brcdPbrSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: brcdPbrSerialNumber.setStatus('current')
if mibBuilder.loadTexts: brcdPbrSerialNumber.setDescription('This is a running number and may change if an acl or routemap is modified')
brcdPbrAclAccntAclInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 1991, 1, 2, 2, 15, 9, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: brcdPbrAclAccntAclInfo.setStatus('current')
if mibBuilder.loadTexts: brcdPbrAclAccntAclInfo.setDescription('This contains ACL Number, ACL Name, ACL Filter Id, last five minutes and cumulative accounting data since the ACL was installed. Each field is separated by a pipe character i.e. 5MIN|CUMULATIVE|ACL Number|ACL Filter Id|ACL Name')
mibBuilder.exportSymbols("FOUNDRY-SN-IP-ACL-MIB", snAgAclGblCurRowIndex=snAgAclGblCurRowIndex, fdryL2AclSourceMac=fdryL2AclSourceMac, fdryL2AclNumber=fdryL2AclNumber, snAgAclSourceOperand2=snAgAclSourceOperand2, fdryL2AclNextClauseIndex=fdryL2AclNextClauseIndex, fdryL2AclTable=fdryL2AclTable, snAgAclPortBindDirection=snAgAclPortBindDirection, snAgAclDestinationMask=snAgAclDestinationMask, fdryL2AclIfBindTable=fdryL2AclIfBindTable, agAclAccntAclName=agAclAccntAclName, agAclAccntRaclTotalCnt=agAclAccntRaclTotalCnt, TruthVal=TruthVal, snAgAclPortRowStatus=snAgAclPortRowStatus, snAgAclGblRebindAclNumber=snAgAclGblRebindAclNumber, snAgAclEntry=snAgAclEntry, agAclAccntKind=agAclAccntKind, agAclAccntFiveMinute=agAclAccntFiveMinute, snAgAclIfBindRowStatus=snAgAclIfBindRowStatus, snAgAclParameters=snAgAclParameters, agAclAccntDirection=agAclAccntDirection, snAgAclPrecedence=snAgAclPrecedence, agAclAccntOneMinute=agAclAccntOneMinute, agAclAccntRaclRemarkCnt=agAclAccntRaclRemarkCnt, brcdPbrAclAccntFilterAclName=brcdPbrAclAccntFilterAclName, snAgAclDestinationOperand1=snAgAclDestinationOperand1, snAgAclGblIfIPv4AcctClear=snAgAclGblIfIPv4AcctClear, AclNameString=AclNameString, fdryL2AclIfBindRowStatus=fdryL2AclIfBindRowStatus, fdryL2AclNextClauseTable=fdryL2AclNextClauseTable, snAgAclDestinationOperator=snAgAclDestinationOperator, agAclAccntOneSecond=agAclAccntOneSecond, agAclAccntRaclFwdCnt=agAclAccntRaclFwdCnt, snAgAclDscpMarking=snAgAclDscpMarking, brcdPbrAclAccntAclInfo=brcdPbrAclAccntAclInfo, PrecedenceValue=PrecedenceValue, snAgAclName=snAgAclName, brcdPbrAclAccntKind=brcdPbrAclAccntKind, IpProtocol=IpProtocol, fdryL2AclIfBindAclNumber=fdryL2AclIfBindAclNumber, snAgAclSourceOperator=snAgAclSourceOperator, agAclAccntIfIndex=agAclAccntIfIndex, snAgAclFlowCounter=snAgAclFlowCounter, snAgAclAction=snAgAclAction, snAgBindPortListInVirtualInterface=snAgBindPortListInVirtualInterface, agAclAccntRaclDropCnt=agAclAccntRaclDropCnt, snAgAclGblRebindAclName=snAgAclGblRebindAclName, fdryL2AclSourceMacMask=fdryL2AclSourceMacMask, fdryL2AclEthernetType=fdryL2AclEthernetType, agAclAccntCumulative=agAclAccntCumulative, snAgAclClauseString=snAgAclClauseString, snAgAclTos=snAgAclTos, SnRowStatus=SnRowStatus, snAgAclIfBindTable=snAgAclIfBindTable, snAgAclVlanId=snAgAclVlanId, snAgAclGblAcctEnable=snAgAclGblAcctEnable, snAgAclBindToPortTable=snAgAclBindToPortTable, snAgAclIndex=snAgAclIndex, snAgAclEstablished=snAgAclEstablished, agAclAccntTable=agAclAccntTable, fdryL2AclDestinationMacMask=fdryL2AclDestinationMacMask, snAgAclPriorityMapping=snAgAclPriorityMapping, PYSNMP_MODULE_ID=snAgAcl, brcdPbrAclAccntEntry=brcdPbrAclAccntEntry, snAgAclPacketCounter=snAgAclPacketCounter, snAgAclSourceOperand1=snAgAclSourceOperand1, snAgAclSourceMask=snAgAclSourceMask, snAgAclDestinationIp=snAgAclDestinationIp, agAclAccntRaclTotalSWHitCountCnt=agAclAccntRaclTotalSWHitCountCnt, fdryL2AclDot1pPriorityMapping=fdryL2AclDot1pPriorityMapping, fdryL2AclAction=fdryL2AclAction, snAgAclIfBindDenyLogging=snAgAclIfBindDenyLogging, snAgAclSourceIp=snAgAclSourceIp, snAgAclIfBindIndex=snAgAclIfBindIndex, snAgAclTable=snAgAclTable, brcdPbrSerialNumber=brcdPbrSerialNumber, brcdPbrAclAccntCounterType=brcdPbrAclAccntCounterType, snAgAclBindToPortEntry=snAgAclBindToPortEntry, snAgAclDscpMapping=snAgAclDscpMapping, TosValue=TosValue, fdryL2AclEntry=fdryL2AclEntry, snAgAclGblIfIPv6AcctClear=snAgAclGblIfIPv6AcctClear, snAgAclDestinationOperand2=snAgAclDestinationOperand2, snAgAclNumber=snAgAclNumber, agAclAccntFilterId=agAclAccntFilterId, snAgAclIfBindName=snAgAclIfBindName, Action=Action, agAclAccntAclNumber=agAclAccntAclNumber, fdryL2AclClauseIndex=fdryL2AclClauseIndex, fdryL2AclDestinationMac=fdryL2AclDestinationMac, Direction=Direction, brcdPbrAclAccntIfIndex=brcdPbrAclAccntIfIndex, FdryClauseIndexTC=FdryClauseIndexTC, snAgAclIfBindNum=snAgAclIfBindNum, snAgAclIfBindVifPortList=snAgAclIfBindVifPortList, snAgAclNum=snAgAclNum, snAgAclIfIpv6BindName=snAgAclIfIpv6BindName, snAgAclIfBindEntry=snAgAclIfBindEntry, FdryEnetTypeOrZeroTC=FdryEnetTypeOrZeroTC, AclNumber=AclNumber, fdryL2AclDot1pPriority=fdryL2AclDot1pPriority, fdryL2AclRowStatus=fdryL2AclRowStatus, snAgAclPortNum=snAgAclPortNum, fdryL2AclDot1pPriorityForce=fdryL2AclDot1pPriorityForce, snAgAclGlobal=snAgAclGlobal, snAgAclPriorityForce=snAgAclPriorityForce, brcdPbrAclAccntTable=brcdPbrAclAccntTable, snAgAclIpPriority=snAgAclIpPriority, snAgAclStandardFlag=snAgAclStandardFlag, snAgAclRowStatus=snAgAclRowStatus, snAgAclIfBindDirection=snAgAclIfBindDirection, fdryL2AclVlanId=fdryL2AclVlanId, agAclAccntEntry=agAclAccntEntry, snAgAclProtocol=snAgAclProtocol, snAgAclLogOption=snAgAclLogOption, fdryL2AclLogEnable=fdryL2AclLogEnable, snAgAcl=snAgAcl, fdryL2AclNextClauseEntry=fdryL2AclNextClauseEntry, fdryL2AclIfBindEntry=fdryL2AclIfBindEntry, snAgAclIcmpCode=snAgAclIcmpCode, fdryL2AclMirrorPackets=fdryL2AclMirrorPackets, Operator=Operator, snAgAclNameString=snAgAclNameString, fdryL2AclIfBindDirection=fdryL2AclIfBindDirection, snAgAclComments=snAgAclComments)
