#
# PySNMP MIB module ORANAMES-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ORANAMES-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:35:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection")
applIndex, = mibBuilder.importSymbols("NETWORK-SERVICES-MIB", "applIndex")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Unsigned32, Bits, MibIdentifier, iso, NotificationType, Gauge32, ObjectIdentity, Integer32, IpAddress, ModuleIdentity, TimeTicks, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Bits", "MibIdentifier", "iso", "NotificationType", "Gauge32", "ObjectIdentity", "Integer32", "IpAddress", "ModuleIdentity", "TimeTicks", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
class DateAndTime(OctetString):
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(8, 11)

class TruthValue(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("true", 1), ("false", 2))

oracle = MibIdentifier((1, 3, 6, 1, 4, 1, 111))
oraNamesMIB = MibIdentifier((1, 3, 6, 1, 4, 1, 111, 6))
oraNamesObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 111, 6, 1))
oraNamesTNSTable = MibTable((1, 3, 6, 1, 4, 1, 111, 6, 1, 1), )
if mibBuilder.loadTexts: oraNamesTNSTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesTNSTable.setDescription('Table of standard TNS variables.')
oraNamesTNSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 6, 1, 1, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: oraNamesTNSEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesTNSEntry.setDescription('Entry contains variables which are generic to TNS applications.')
oraNamesTNSstartDate = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 1, 1, 1), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesTNSstartDate.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesTNSstartDate.setDescription('Date and time when this service was initialized.')
oraNamesTNStraceLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesTNStraceLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesTNStraceLevel.setDescription('The level of tracing in use by this server. The higher the number, the more verbose the tracing information.')
oraNamesTNSsecurityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesTNSsecurityLevel.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesTNSsecurityLevel.setDescription('The degree to which access to this server is restricted.')
oraNamesTNSparameterFile = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 1, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesTNSparameterFile.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesTNSparameterFile.setDescription('Name of the file containing startup configuration parameters for this service.')
oraNamesTNSlogFile = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesTNSlogFile.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesTNSlogFile.setDescription('Name of the file which this server writes log information to.')
oraNamesTNStraceFile = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 1, 1, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesTNStraceFile.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesTNStraceFile.setDescription('Name of the file which tis server writes trace information to if tracing is enabled.')
oraNamesTNSstate = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesTNSstate.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesTNSstate.setDescription('Operation status of this server.')
oraNamesTNScontact = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesTNScontact.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesTNScontact.setDescription('Person to contact regarding the operation or administration of this server.')
oraNamesTNSlistenAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesTNSlistenAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesTNSlistenAddresses.setDescription('TNS address on which this service can be called.')
oraNamesTNSfailedListenAddresses = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesTNSfailedListenAddresses.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesTNSfailedListenAddresses.setDescription('TNS addresses which this server attempted to listen on but failed.')
oraNamesTNSreload = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 1, 1, 11), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesTNSreload.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesTNSreload.setDescription('The amount of time in centiseconds until this server reloads.')
oraNamesTNSrunningTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesTNSrunningTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesTNSrunningTime.setDescription('The amount of time in seconds that the server has been running.')
oraNamesConfigTable = MibTable((1, 3, 6, 1, 4, 1, 111, 6, 1, 2), )
if mibBuilder.loadTexts: oraNamesConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigTable.setDescription('Oracle Names server configuration paramaters.')
oraNamesConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: oraNamesConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigEntry.setDescription('A set of paramters which can be set (in names.ora) to configure or tune a Names server.')
oraNamesConfigAdminRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigAdminRegion.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigAdminRegion.setDescription('The name of the Administrative Region which this server serves.')
oraNamesConfigAuthorityRequired = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigAuthorityRequired.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigAuthorityRequired.setDescription('Set to TRUE if this server requires an authoritative answer to system query requests that it generates. Requests with Authority Required cannot be answered by a non-authoritative server out of its cache.')
oraNamesConfigAutoRefreshExpire = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 3), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigAutoRefreshExpire.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigAutoRefreshExpire.setDescription('If an auto-refresh system query is issued and repeatedly fails after multiple retries, the server will cancel the query after this time period has gone by with no response.')
oraNamesConfigAutoRefreshRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigAutoRefreshRetry.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigAutoRefreshRetry.setDescription('If an auto-refresh system query is issued and fails, the server will wait for this time period before attempting the query again.')
oraNamesConfigCacheCheckpointFile = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigCacheCheckpointFile.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigCacheCheckpointFile.setDescription('Filename where the cache will be periodically be written to disk.')
oraNamesConfigCacheCheckpointInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 6), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigCacheCheckpointInterval.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigCacheCheckpointInterval.setDescription('Amount of time between cache checkpooints.')
oraNamesConfigConfigCheckpointFile = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigConfigCheckpointFile.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigConfigCheckpointFile.setDescription('Filename where the Names server configuration will be periodically be written to disk.')
oraNamesConfigDefaultForwarders = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigDefaultForwarders.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigDefaultForwarders.setDescription('A list of TNS addresses of servers in foreign regions which should always be tried first when searching for other regions.')
oraNamesConfigDefaultForwardersOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 9), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigDefaultForwardersOnly.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigDefaultForwardersOnly.setDescription('Set to TRUE if this server is to operate in DEFAULT-FORWARDERS-ONLY mode. A server in this mode must have at least one default forwarder, and will always forward to its defaults forwarder whether or not it has server information that might be more accurate.')
oraNamesConfigDomainCheckpointFile = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigDomainCheckpointFile.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigDomainCheckpointFile.setDescription('File where the domain data will be periodically written to disk.')
oraNamesConfigDomainHints = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 11), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigDomainHints.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigDomainHints.setDescription("A list of foreign domains and their server's TNS addresses. This allows administrators to prevent a server from searching for servers in other domains which they know will be contacted frquently.")
oraNamesConfigDomains = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 12), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigDomains.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigDomains.setDescription('A list of domains which this server is authoritative for, ie this server knows about all the services in these domains.')
oraNamesConfigForwardingAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 13), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigForwardingAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigForwardingAvailable.setDescription('Set to TRUE if this server is willing to forward requests for data for which it is not authoritative.')
oraNamesConfigForwardingDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 14), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigForwardingDesired.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigForwardingDesired.setDescription('Set to TRUE if this server is desires other servers to forward requests which this server generates on its own. Requests which this server forwards have Forwarding Desired set by the original requestor.')
oraNamesConfigLogDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 15), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigLogDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigLogDirectory.setDescription('Directory to write log file into.')
oraNamesConfigLogStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 16), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigLogStatsInterval.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigLogStatsInterval.setDescription('The interval in centiseconds at which server statistic counters are written to the log file.')
oraNamesConfigLogUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigLogUnique.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigLogUnique.setDescription("When set to 'ON' the log filename will be generated in such a way as to insure uniqueness in order to prevent overwriting existing log files.")
oraNamesConfigMaxOpenConnections = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigMaxOpenConnections.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigMaxOpenConnections.setDescription('The number of TNS connections this server will leave open to clients and other servers.')
oraNamesConfigMaxReforwards = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigMaxReforwards.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigMaxReforwards.setDescription('The server keeps a count of the number of times a given forwarded query returns with a referral to a closer name server. When the number of referrals exceeds maxReforwards, the query is cancelled and an error returned to the requestor.')
oraNamesConfigMessagePoolStartSize = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigMessagePoolStartSize.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigMessagePoolStartSize.setDescription('The number of messages that can be kept in the message pool. Larger settings save time but take more space.')
oraNamesConfigNoModifyRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 21), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigNoModifyRequests.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigNoModifyRequests.setDescription("When set to 'ON' this server will refuse any requests to modify its region data.")
oraNamesConfigNoRegionDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 22), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigNoRegionDatabase.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigNoRegionDatabase.setDescription("If set to 'TRUE' this server will not load any region data; in this state the server (typically one in the root region) can only forward requests.")
oraNamesConfigResetStatsInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 23), TimeTicks()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigResetStatsInterval.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigResetStatsInterval.setDescription('The interval in centiseconds at which all server statistic counters are reset back to zero.')
oraNamesConfigServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 24), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigServerName.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigServerName.setDescription("This server's name, as defined in the TNS Network definition.")
oraNamesConfigTopologyCheckpointFile = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 25), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigTopologyCheckpointFile.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigTopologyCheckpointFile.setDescription('File where the topology data will be periodically written to disk.')
oraNamesConfigTraceDirectory = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 26), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigTraceDirectory.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigTraceDirectory.setDescription('Directory to write trace files in when tracing is enabled.')
oraNamesConfigTraceFunc = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 27), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigTraceFunc.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigTraceFunc.setDescription('A list of internal server functions which will record information in the trace file whenever tracing is enabled.')
oraNamesConfigTraceMask = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483648, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigTraceMask.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigTraceMask.setDescription('A numeric mask which specifys which subsystems of the server are to be traced when tracing is enabled.')
oraNamesConfigTraceUnique = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 2, 1, 29), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: oraNamesConfigTraceUnique.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesConfigTraceUnique.setDescription("When set to 'ON' the trace filename will be generated in such a way as to insure uniqueness in order to prevent overwriting existing trace files.")
oraNamesServerTable = MibTable((1, 3, 6, 1, 4, 1, 111, 6, 1, 3), )
if mibBuilder.loadTexts: oraNamesServerTable.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerTable.setDescription('General MIB describing the Orale Name Resolution Server.')
oraNamesServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1), ).setIndexNames((0, "NETWORK-SERVICES-MIB", "applIndex"))
if mibBuilder.loadTexts: oraNamesServerEntry.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerEntry.setDescription('A set of variables which generally describe the current state of a Names server .')
oraNamesServerQueriesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerQueriesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerQueriesReceived.setDescription('Number of query requests received by this server.')
oraNamesServerLastNnamesNotFound = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerLastNnamesNotFound.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerLastNnamesNotFound.setDescription('List of the last N names queried from this region but not defined.')
oraNamesServerQueriesTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerQueriesTotalTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerQueriesTotalTime.setDescription('Total time spent processing query requests, in centiseconds.')
oraNamesServerDeletesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerDeletesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerDeletesReceived.setDescription('Number of delete requests received by this server.')
oraNamesServerDeletesRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerDeletesRefused.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerDeletesRefused.setDescription('Total number of delete requests refused.')
oraNamesServerDeletesTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 6), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerDeletesTotalTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerDeletesTotalTime.setDescription('Total time spent processing delete requests, in centiseconds.')
oraNamesServerRenamesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerRenamesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerRenamesReceived.setDescription('Number of rename requests received by this server.')
oraNamesServerRenamesRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerRenamesRefused.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerRenamesRefused.setDescription('Total number of rename requests refused.')
oraNamesServerRenamesTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 9), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerRenamesTotalTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerRenamesTotalTime.setDescription('Total time spent processing rename requests, in centiseconds.')
oraNamesServerUpdatesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerUpdatesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerUpdatesReceived.setDescription('Number of update requests received by this server.')
oraNamesServerUpdatesRefused = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerUpdatesRefused.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerUpdatesRefused.setDescription('Total number of update requests refused.')
oraNamesServerUpdatesTotalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 12), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerUpdatesTotalTime.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerUpdatesTotalTime.setDescription('Total time spent processing update requests, in centiseconds.')
oraNamesServerCorruptMessagesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerCorruptMessagesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerCorruptMessagesReceived.setDescription('Number of corrupted messages received by this server.')
oraNamesServerResponsesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerResponsesSent.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerResponsesSent.setDescription('Number of responses of all sorts sent by this server.')
oraNamesServerErrorResponsesSent = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerErrorResponsesSent.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerErrorResponsesSent.setDescription('Total number of error responses sent.')
oraNamesServerAliasLoopsDetected = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerAliasLoopsDetected.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerAliasLoopsDetected.setDescription('Number of alias loops detected by this server.')
oraNamesServerLookupsAttempted = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerLookupsAttempted.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerLookupsAttempted.setDescription('Number of name lookup operations performed by this server.')
oraNamesServerCreatedOnLookup = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerCreatedOnLookup.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerCreatedOnLookup.setDescription('Number of names created on lookup because they were not found.')
oraNamesServerLookupFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerLookupFailures.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerLookupFailures.setDescription('Number of name lookups for a name not known to this server.')
oraNamesServerExactMatches = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerExactMatches.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerExactMatches.setDescription('Number of name lookups which resulted in an exact match with information known to this server.')
oraNamesServerForwardFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerForwardFailures.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerForwardFailures.setDescription('Number of forwarded requests which failed because no servers responded to the request.')
oraNamesServerForwardTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerForwardTimeouts.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerForwardTimeouts.setDescription('Number of requests forwarded by this server which timed out waiting for a response.')
oraNamesServerResponsesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerResponsesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerResponsesReceived.setDescription('Number of responses received by this server.')
oraNamesServerErrorResponsesReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerErrorResponsesReceived.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerErrorResponsesReceived.setDescription('Total number error responses received.')
oraNamesServerRequestsForwarded = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerRequestsForwarded.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerRequestsForwarded.setDescription('Number of requests that this server has forwarded because it is not authoritative for the requested name.')
oraNamesServerLastReload = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 26), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerLastReload.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerLastReload.setDescription('Date when this server last reloaded its region data.')
oraNamesServerReloadCheckFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerReloadCheckFailures.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerReloadCheckFailures.setDescription('Number of times this server has failed in a check to see whether the region data changed and needs reloading.')
oraNamesServerLastCheckpoint = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 28), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerLastCheckpoint.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerLastCheckpoint.setDescription('Date when this server last cached its non-authoritative data to disk .')
oraNamesServerName = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 29), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerName.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerName.setDescription("This server's name, as printed in its start-up banner.")
oraNamesServerAdminRegion = MibTableColumn((1, 3, 6, 1, 4, 1, 111, 6, 1, 3, 1, 30), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: oraNamesServerAdminRegion.setStatus('mandatory')
if mibBuilder.loadTexts: oraNamesServerAdminRegion.setDescription("TNS descriptor which defines this server's region; includes the region name and location of its network definition.")
mibBuilder.exportSymbols("ORANAMES-MIB", oraNamesConfigTraceDirectory=oraNamesConfigTraceDirectory, oraNamesServerResponsesReceived=oraNamesServerResponsesReceived, oraNamesConfigDomainHints=oraNamesConfigDomainHints, oraNamesServerLastCheckpoint=oraNamesServerLastCheckpoint, oraNamesServerLastReload=oraNamesServerLastReload, oraNamesServerQueriesTotalTime=oraNamesServerQueriesTotalTime, oraNamesConfigEntry=oraNamesConfigEntry, oraNamesServerTable=oraNamesServerTable, oraNamesServerLastNnamesNotFound=oraNamesServerLastNnamesNotFound, oraNamesServerLookupFailures=oraNamesServerLookupFailures, oraNamesTNSstartDate=oraNamesTNSstartDate, oraNamesConfigForwardingAvailable=oraNamesConfigForwardingAvailable, oraNamesServerDeletesRefused=oraNamesServerDeletesRefused, oraNamesTNSTable=oraNamesTNSTable, oraNamesConfigServerName=oraNamesConfigServerName, oraNamesServerErrorResponsesSent=oraNamesServerErrorResponsesSent, oraNamesServerExactMatches=oraNamesServerExactMatches, oraNamesTNStraceLevel=oraNamesTNStraceLevel, oraNamesServerRequestsForwarded=oraNamesServerRequestsForwarded, oraNamesConfigConfigCheckpointFile=oraNamesConfigConfigCheckpointFile, oraNamesServerDeletesTotalTime=oraNamesServerDeletesTotalTime, oraNamesMIB=oraNamesMIB, oraNamesServerRenamesTotalTime=oraNamesServerRenamesTotalTime, oraNamesConfigNoModifyRequests=oraNamesConfigNoModifyRequests, oraNamesConfigMaxOpenConnections=oraNamesConfigMaxOpenConnections, oraNamesServerRenamesReceived=oraNamesServerRenamesReceived, oraNamesServerErrorResponsesReceived=oraNamesServerErrorResponsesReceived, DateAndTime=DateAndTime, oraNamesTNSrunningTime=oraNamesTNSrunningTime, oraNamesTNSfailedListenAddresses=oraNamesTNSfailedListenAddresses, TruthValue=TruthValue, oraNamesTNSlogFile=oraNamesTNSlogFile, oraNamesConfigCacheCheckpointInterval=oraNamesConfigCacheCheckpointInterval, oraNamesConfigCacheCheckpointFile=oraNamesConfigCacheCheckpointFile, oraNamesConfigDefaultForwardersOnly=oraNamesConfigDefaultForwardersOnly, oraNamesConfigTraceMask=oraNamesConfigTraceMask, oraNamesConfigAutoRefreshRetry=oraNamesConfigAutoRefreshRetry, oraNamesTNSreload=oraNamesTNSreload, oraNamesTNSsecurityLevel=oraNamesTNSsecurityLevel, oraNamesConfigTable=oraNamesConfigTable, oracle=oracle, oraNamesConfigResetStatsInterval=oraNamesConfigResetStatsInterval, oraNamesConfigDomainCheckpointFile=oraNamesConfigDomainCheckpointFile, oraNamesServerUpdatesTotalTime=oraNamesServerUpdatesTotalTime, oraNamesConfigTraceUnique=oraNamesConfigTraceUnique, oraNamesTNSstate=oraNamesTNSstate, oraNamesTNStraceFile=oraNamesTNStraceFile, oraNamesServerResponsesSent=oraNamesServerResponsesSent, oraNamesServerLookupsAttempted=oraNamesServerLookupsAttempted, oraNamesConfigTopologyCheckpointFile=oraNamesConfigTopologyCheckpointFile, oraNamesConfigDomains=oraNamesConfigDomains, oraNamesServerReloadCheckFailures=oraNamesServerReloadCheckFailures, oraNamesServerForwardFailures=oraNamesServerForwardFailures, oraNamesConfigMessagePoolStartSize=oraNamesConfigMessagePoolStartSize, oraNamesServerRenamesRefused=oraNamesServerRenamesRefused, oraNamesServerUpdatesRefused=oraNamesServerUpdatesRefused, oraNamesServerName=oraNamesServerName, oraNamesServerQueriesReceived=oraNamesServerQueriesReceived, oraNamesConfigTraceFunc=oraNamesConfigTraceFunc, oraNamesConfigAdminRegion=oraNamesConfigAdminRegion, oraNamesConfigNoRegionDatabase=oraNamesConfigNoRegionDatabase, oraNamesConfigLogStatsInterval=oraNamesConfigLogStatsInterval, oraNamesTNScontact=oraNamesTNScontact, oraNamesServerEntry=oraNamesServerEntry, oraNamesConfigMaxReforwards=oraNamesConfigMaxReforwards, oraNamesConfigAutoRefreshExpire=oraNamesConfigAutoRefreshExpire, oraNamesServerDeletesReceived=oraNamesServerDeletesReceived, oraNamesTNSEntry=oraNamesTNSEntry, oraNamesConfigAuthorityRequired=oraNamesConfigAuthorityRequired, oraNamesServerUpdatesReceived=oraNamesServerUpdatesReceived, oraNamesConfigDefaultForwarders=oraNamesConfigDefaultForwarders, oraNamesTNSlistenAddresses=oraNamesTNSlistenAddresses, oraNamesConfigLogDirectory=oraNamesConfigLogDirectory, oraNamesServerAliasLoopsDetected=oraNamesServerAliasLoopsDetected, oraNamesConfigForwardingDesired=oraNamesConfigForwardingDesired, oraNamesServerAdminRegion=oraNamesServerAdminRegion, oraNamesObjects=oraNamesObjects, oraNamesServerForwardTimeouts=oraNamesServerForwardTimeouts, oraNamesTNSparameterFile=oraNamesTNSparameterFile, oraNamesServerCreatedOnLookup=oraNamesServerCreatedOnLookup, oraNamesServerCorruptMessagesReceived=oraNamesServerCorruptMessagesReceived, oraNamesConfigLogUnique=oraNamesConfigLogUnique)
