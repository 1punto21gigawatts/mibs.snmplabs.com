#
# PySNMP MIB module NMS-NAT (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NMS-NAT
# Produced by pysmi-0.3.4 at Wed May  1 14:22:20 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
nmsMgmt, = mibBuilder.importSymbols("NMS-SMI", "nmsMgmt")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
ModuleIdentity, Gauge32, Counter64, Bits, Unsigned32, TimeTicks, ObjectIdentity, Counter32, MibIdentifier, IpAddress, NotificationType, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Gauge32", "Counter64", "Bits", "Unsigned32", "TimeTicks", "ObjectIdentity", "Counter32", "MibIdentifier", "IpAddress", "NotificationType", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
nmsNatMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100))
if mibBuilder.loadTexts: nmsNatMIB.setLastUpdated('200310250000Z')
if mibBuilder.loadTexts: nmsNatMIB.setOrganization('')
if mibBuilder.loadTexts: nmsNatMIB.setContactInfo('')
if mibBuilder.loadTexts: nmsNatMIB.setDescription('This MIB module defines the generic managed objects for NAT.')
nmsNatObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1))
nmsNatSessionNumber = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionNumber.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionNumber.setDescription('The number of the total session in the NAPT rule.')
nmsNatSessionTableJD = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 2), )
if mibBuilder.loadTexts: nmsNatSessionTableJD.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionTableJD.setDescription('The (conceptual) table containing one entry for each NAT session currently active on this NAT device.')
nmsNatSessionEntryJD = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 2, 1), ).setIndexNames((0, "NMS-NAT", "nmsNatSessionId"))
if mibBuilder.loadTexts: nmsNatSessionEntryJD.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionEntryJD.setDescription('An entry (conceptual row) containing information about an active NAT session on this NAT device.')
nmsNatSessionIdJD = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 2, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionIdJD.setStatus('current')
if mibBuilder.loadTexts: nmsNatSessionIdJD.setDescription('The session ID for this NAT session.')
nmsNatSessionProtocolTypeJD = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 4))).clone(namedValues=NamedValues(("other", -1), ("icmp", 1), ("udp", 2), ("tcp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionProtocolTypeJD.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionProtocolTypeJD.setDescription('The protocol type of this session. TCP and UDP sessions are uniquely identified by the tuple of (source IP address, source UDP/TCP port, destination IP address, destination TCP/UCP port). ICMP query sessions are identified by the tuple of (source IP address, ICMP query ID, destination IP address).')
nmsNatSessionDirectionJD = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inbound", 1), ("outbound", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionDirectionJD.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionDirectionJD.setDescription("The direction of this session with respect to the local network. 'inbound' indicates that this session was initiated from the public network into the private network. 'outbound' indicates that this session was initiated from the private network into the public network.")
nmsNatSessionIntAddrJD = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 2, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionIntAddrJD.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionIntAddrJD.setDescription('The original IP address of the session endpoint that lies in the private network.')
nmsNatSessionIntPortJD = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionIntPortJD.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionIntPortJD.setDescription('The original transport port of the session endpoint that belongs to the private network. If this is an ICMP session then the value is the ICMP request ID.')
nmsNatSessionExtAddrJD = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 2, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionExtAddrJD.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionExtAddrJD.setDescription('The translated IP address of the session endpoint that lies in the private network.')
nmsNatSessionExtPortJD = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionExtPortJD.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionExtPortJD.setDescription('The original IP address of the session endpoint that lies in the public network.')
nmsNatSessionRemoteAddrJD = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 2, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionRemoteAddrJD.setStatus('current')
if mibBuilder.loadTexts: nmsNatSessionRemoteAddrJD.setDescription('The original IP address of the session endpoint that lies in the public network.')
nmsNatSessionRemotePortJD = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionRemotePortJD.setStatus('current')
if mibBuilder.loadTexts: nmsNatSessionRemotePortJD.setDescription('The original transport port of the session endpoint that belongs to the public network. If this is an ICMP session then the value contains the ICMP request ID.')
nmsNatSessionUpTimeJD = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 2, 1, 10), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionUpTimeJD.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionUpTimeJD.setDescription('The up time of this session in one-hundredths of a second.')
nmsNatSessionIdletimeJD = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 2, 1, 11), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionIdletimeJD.setStatus('current')
if mibBuilder.loadTexts: nmsNatSessionIdletimeJD.setDescription('The time in one-hundredths of a second since a packet belonging to this session was last detected.')
nmsNatSessionContextJD = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionContextJD.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionContextJD.setDescription('A textual string containing information about the protocol context of the session.')
nmsNATLimitedTotalSessions = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsNATLimitedTotalSessions.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNATLimitedTotalSessions.setDescription('The number of the total permitted session in the NAPT rule.')
nmsNatSessionTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4), )
if mibBuilder.loadTexts: nmsNatSessionTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionTable.setDescription('The (conceptual) table containing one entry for each NAT session currently active on this NAT device.')
nmsNatSessionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1), ).setIndexNames((0, "NMS-NAT", "nmsNatSessionId"))
if mibBuilder.loadTexts: nmsNatSessionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionEntry.setDescription('An entry (conceptual row) containing information about an active NAT session on this NAT device.')
nmsNatSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1, 1), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionId.setStatus('current')
if mibBuilder.loadTexts: nmsNatSessionId.setDescription('The session ID for this NAT session.')
nmsNatSessionProtocolType = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionProtocolType.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionProtocolType.setDescription('The protocol type of this session. TCP and UDP sessions are uniquely identified by the tuple of (source IP address, source UDP/TCP port, destination IP address, destination TCP/UCP port). ICMP query sessions are identified by the tuple of (source IP address, ICMP query ID, destination IP address).')
nmsNatSessionDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionDirection.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionDirection.setDescription("The direction of this session with respect to the local network. 'inbound' indicates that this session was initiated from the public network into the private network. 'outbound' indicates that this session was initiated from the private network into the public network.")
nmsNatSessionIntAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionIntAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionIntAddr.setDescription('The original IP address of the session endpoint that lies in the private network.')
nmsNatSessionIntPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionIntPort.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionIntPort.setDescription('The original transport port of the session endpoint that belongs to the private network. If this is an ICMP session then the value is the ICMP request ID.')
nmsNatSessionExtAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionExtAddr.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionExtAddr.setDescription('The translated IP address of the session endpoint that lies in the private network.')
nmsNatSessionExtPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1, 7), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionExtPort.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionExtPort.setDescription('The original IP address of the session endpoint that lies in the public network.')
nmsNatSessionRemoteAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1, 8), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionRemoteAddr.setStatus('current')
if mibBuilder.loadTexts: nmsNatSessionRemoteAddr.setDescription('The original IP address of the session endpoint that lies in the public network.')
nmsNatSessionRemotePort = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1, 9), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionRemotePort.setStatus('current')
if mibBuilder.loadTexts: nmsNatSessionRemotePort.setDescription('The original transport port of the session endpoint that belongs to the public network. If this is an ICMP session then the value contains the ICMP request ID.')
nmsNatSessionUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1, 10), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionUpTime.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionUpTime.setDescription('The up time of this session in one-hundredths of a second.')
nmsNatSessionIdletime = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionIdletime.setStatus('current')
if mibBuilder.loadTexts: nmsNatSessionIdletime.setDescription('The time in one-hundredths of a second since a packet belonging to this session was last detected.')
nmsNatSessionContext = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1, 12), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatSessionContext.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatSessionContext.setDescription('A textual string containing information about the protocol context of the session.')
nmsNATLimitedHostSessions = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1, 13), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsNATLimitedHostSessions.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNATLimitedHostSessions.setDescription('The number of the permitted single session in the NAPT rule.')
nmsNATHostFlows = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 4, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNATHostFlows.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNATHostFlows.setDescription('The bytes number of each link during one period.')
nmsNatCpuPercent = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatCpuPercent.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatCpuPercent.setDescription('The number of the total cpu usage percent.')
nmsNatHeapPercent = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatHeapPercent.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatHeapPercent.setDescription('The number of the total heap allocation percent.')
nmsNatMblkPercent = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatMblkPercent.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatMblkPercent.setDescription('The number of the total Mblk allocation percent.')
nmsNathostlimitset = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsNathostlimitset.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNathostlimitset.setDescription('set the count that nat can service for inside users')
nmsNathostlimitcurrent = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNathostlimitcurrent.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNathostlimitcurrent.setDescription('currently, nat service how many inside user.')
nmsNathostlimitenable = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsNathostlimitenable.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNathostlimitenable.setDescription('enable limit-user function.')
nmsNatIf = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 9, 100, 1, 11), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nmsNatIf.setStatus('mandatory')
if mibBuilder.loadTexts: nmsNatIf.setDescription('the ifindex of NAT Interface.')
mibBuilder.exportSymbols("NMS-NAT", nmsNatSessionIdJD=nmsNatSessionIdJD, nmsNatSessionTable=nmsNatSessionTable, nmsNatSessionNumber=nmsNatSessionNumber, nmsNatSessionContextJD=nmsNatSessionContextJD, nmsNatSessionId=nmsNatSessionId, nmsNATLimitedHostSessions=nmsNATLimitedHostSessions, nmsNatSessionContext=nmsNatSessionContext, nmsNatSessionIdletime=nmsNatSessionIdletime, nmsNatHeapPercent=nmsNatHeapPercent, nmsNatSessionTableJD=nmsNatSessionTableJD, nmsNatSessionIntPort=nmsNatSessionIntPort, nmsNatMIB=nmsNatMIB, nmsNatSessionDirection=nmsNatSessionDirection, nmsNatSessionExtAddrJD=nmsNatSessionExtAddrJD, nmsNathostlimitenable=nmsNathostlimitenable, PYSNMP_MODULE_ID=nmsNatMIB, nmsNatSessionUpTimeJD=nmsNatSessionUpTimeJD, nmsNatMblkPercent=nmsNatMblkPercent, nmsNatSessionIdletimeJD=nmsNatSessionIdletimeJD, nmsNatSessionIntAddrJD=nmsNatSessionIntAddrJD, nmsNathostlimitset=nmsNathostlimitset, nmsNathostlimitcurrent=nmsNathostlimitcurrent, nmsNatSessionEntry=nmsNatSessionEntry, nmsNatSessionRemotePort=nmsNatSessionRemotePort, nmsNatSessionRemoteAddrJD=nmsNatSessionRemoteAddrJD, nmsNATHostFlows=nmsNATHostFlows, nmsNATLimitedTotalSessions=nmsNATLimitedTotalSessions, nmsNatSessionIntAddr=nmsNatSessionIntAddr, nmsNatObjects=nmsNatObjects, nmsNatSessionEntryJD=nmsNatSessionEntryJD, nmsNatSessionProtocolType=nmsNatSessionProtocolType, nmsNatIf=nmsNatIf, nmsNatSessionRemotePortJD=nmsNatSessionRemotePortJD, nmsNatSessionProtocolTypeJD=nmsNatSessionProtocolTypeJD, nmsNatSessionRemoteAddr=nmsNatSessionRemoteAddr, nmsNatSessionExtAddr=nmsNatSessionExtAddr, nmsNatSessionExtPortJD=nmsNatSessionExtPortJD, nmsNatSessionIntPortJD=nmsNatSessionIntPortJD, nmsNatSessionUpTime=nmsNatSessionUpTime, nmsNatSessionDirectionJD=nmsNatSessionDirectionJD, nmsNatSessionExtPort=nmsNatSessionExtPort, nmsNatCpuPercent=nmsNatCpuPercent)
