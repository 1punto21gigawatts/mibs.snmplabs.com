#
# PySNMP MIB module H323MC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/H323MC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:21:13 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsIntersection")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
MmTAddressTag, MmGlobalIdentifier, mmH323Root = mibBuilder.importSymbols("MULTI-MEDIA-MIB-TC", "MmTAddressTag", "MmGlobalIdentifier", "mmH323Root")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
iso, Counter64, Unsigned32, ObjectIdentity, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, NotificationType, IpAddress, TimeTicks, Bits, ModuleIdentity, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "Counter64", "Unsigned32", "ObjectIdentity", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "NotificationType", "IpAddress", "TimeTicks", "Bits", "ModuleIdentity", "Gauge32")
TAddress, DisplayString, TextualConvention, TruthValue, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "TAddress", "DisplayString", "TextualConvention", "TruthValue", "DateAndTime")
h323MC = ModuleIdentity((0, 0, 8, 341, 1, 1, 4))
if mibBuilder.loadTexts: h323MC.setLastUpdated('9812172253Z')
if mibBuilder.loadTexts: h323MC.setOrganization('ITU')
if mibBuilder.loadTexts: h323MC.setContactInfo('ITU Study Group 16 ')
if mibBuilder.loadTexts: h323MC.setDescription(' ')
h323McSystem = MibIdentifier((0, 0, 8, 341, 1, 1, 4, 1))
h323McConfig = MibIdentifier((0, 0, 8, 341, 1, 1, 4, 2))
h323McConference = MibIdentifier((0, 0, 8, 341, 1, 1, 4, 3))
h323McStats = MibIdentifier((0, 0, 8, 341, 1, 1, 4, 4))
h323McControls = MibIdentifier((0, 0, 8, 341, 1, 1, 4, 5))
h323McEvents = MibIdentifier((0, 0, 8, 341, 1, 1, 4, 6, 0))
h323McSystemTable = MibTable((0, 0, 8, 341, 1, 1, 4, 1, 1), )
if mibBuilder.loadTexts: h323McSystemTable.setStatus('current')
if mibBuilder.loadTexts: h323McSystemTable.setDescription('This table contains information about MC system.')
h323McSystemTableEntry = MibTableRow((0, 0, 8, 341, 1, 1, 4, 1, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h323McSystemTableEntry.setStatus('current')
if mibBuilder.loadTexts: h323McSystemTableEntry.setDescription('It contains objects that describe MC system parameters.')
h323McSystemNameAndMaker = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 1, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McSystemNameAndMaker.setStatus('current')
if mibBuilder.loadTexts: h323McSystemNameAndMaker.setDescription('The MC name and maker name')
h323McSystemSoftwareVersionNumber = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 1, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McSystemSoftwareVersionNumber.setStatus('current')
if mibBuilder.loadTexts: h323McSystemSoftwareVersionNumber.setDescription('Software version number (major and minor)')
h323McSystemHardwareVersionNumber = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 1, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McSystemHardwareVersionNumber.setStatus('current')
if mibBuilder.loadTexts: h323McSystemHardwareVersionNumber.setDescription('Hardware version number')
h323McSystemStartUpTime = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 1, 1, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McSystemStartUpTime.setStatus('current')
if mibBuilder.loadTexts: h323McSystemStartUpTime.setDescription('The time and date that the MC was started')
h323McConfigTable = MibTable((0, 0, 8, 341, 1, 1, 4, 2, 1), )
if mibBuilder.loadTexts: h323McConfigTable.setStatus('current')
if mibBuilder.loadTexts: h323McConfigTable.setDescription('This table contains information about MC configuration. It is a list of MC configuration parameters entries. The number of entries equals to the number of MCs.')
h323McConfigTableEntry = MibTableRow((0, 0, 8, 341, 1, 1, 4, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: h323McConfigTableEntry.setStatus('current')
if mibBuilder.loadTexts: h323McConfigTableEntry.setDescription('It contains objects that describe MC configuration parameters.')
h323McConfigMcCallSignalingTag = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 2, 1, 1, 1), MmTAddressTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConfigMcCallSignalingTag.setStatus('current')
if mibBuilder.loadTexts: h323McConfigMcCallSignalingTag.setDescription('The MC call signaling address tag.')
h323McConfigMcCallSignalingAddress = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 2, 1, 1, 2), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConfigMcCallSignalingAddress.setStatus('current')
if mibBuilder.loadTexts: h323McConfigMcCallSignalingAddress.setDescription('The MC call signaling address.')
h323McConfigGatekeeperAddressTag = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 2, 1, 1, 3), MmTAddressTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConfigGatekeeperAddressTag.setStatus('current')
if mibBuilder.loadTexts: h323McConfigGatekeeperAddressTag.setDescription('The GK address tag.')
h323McConfigGatekeeperAddress = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 2, 1, 1, 4), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConfigGatekeeperAddress.setStatus('current')
if mibBuilder.loadTexts: h323McConfigGatekeeperAddress.setDescription('The address of the gatekeeper that MC is registered with. The network manager may request MC to register with a particular GK by setting the GK address.')
h323McConfigIsRegisteredWithGatekeeper = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 2, 1, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConfigIsRegisteredWithGatekeeper.setStatus('current')
if mibBuilder.loadTexts: h323McConfigIsRegisteredWithGatekeeper.setDescription('This value indicates if MC is registered with the gatekeeper.')
h323McConfigEnableNotifications = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConfigEnableNotifications.setStatus('current')
if mibBuilder.loadTexts: h323McConfigEnableNotifications.setDescription('Indicates whether notifications should be generated for this entity. ')
h323McConferenceTable = MibTable((0, 0, 8, 341, 1, 1, 4, 3, 1), )
if mibBuilder.loadTexts: h323McConferenceTable.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceTable.setDescription('This table contains information about running conferences. It is a list of conference entries. The number of entries equals to the number of running conferences.')
h323McConferenceTableEntry = MibTableRow((0, 0, 8, 341, 1, 1, 4, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H323MC-MIB", "h323McConferenceConferenceId"))
if mibBuilder.loadTexts: h323McConferenceTableEntry.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceTableEntry.setDescription('It contains objects that describe the conferences.')
h323McConferenceConferenceId = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 3, 1, 1, 1), MmGlobalIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConferenceConferenceId.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceConferenceId.setDescription('The conference identifier.')
h323McConferenceConferenceStartTime = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 3, 1, 1, 2), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConferenceConferenceStartTime.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceConferenceStartTime.setDescription('The conference start time.')
h323McConferenceConferenceEndTime = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 3, 1, 1, 3), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConferenceConferenceEndTime.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceConferenceEndTime.setDescription('The conference end time.')
h323McConferenceCentralizedOrDistributed = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("centralized", 1), ("distributed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConferenceCentralizedOrDistributed.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceCentralizedOrDistributed.setDescription('This value indicates rather the conference is centralized or distributed.')
h323McConferenceUniOrMulticast = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unicast", 1), ("multicast", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConferenceUniOrMulticast.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceUniOrMulticast.setDescription('This value indicates rather the conference is unicast or multicast.')
h323McConferenceActiveMcAddress = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 3, 1, 1, 6), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConferenceActiveMcAddress.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceActiveMcAddress.setDescription("The address of active MC. In case of cascading this value is different than MC's own address.")
h323McConferenceParticipantsTable = MibTable((0, 0, 8, 341, 1, 1, 4, 3, 2), )
if mibBuilder.loadTexts: h323McConferenceParticipantsTable.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceParticipantsTable.setDescription('This table contains information about conference participants. It is a list of participant entries. The number of entries equals to the sum of all participants for all conferences.')
h323McConferenceParticipantsTableEntry = MibTableRow((0, 0, 8, 341, 1, 1, 4, 3, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "H323MC-MIB", "h323McConferenceConferenceId"), (0, "H323MC-MIB", "h323McConferenceParticipantsTableIndex"))
if mibBuilder.loadTexts: h323McConferenceParticipantsTableEntry.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceParticipantsTableEntry.setDescription('It contains objects that describe a conference participant.')
h323McConferenceParticipantsTableIndex = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: h323McConferenceParticipantsTableIndex.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceParticipantsTableIndex.setDescription('An orbitrary index to this table. This index is one for the first participant for every given conference. It is incremented by one for each subsequent participant of the same conference. The last index for a particular conference is equal to the number of participants for that conference.')
h323McConferenceParticipantsTerminalLabel = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 3, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConferenceParticipantsTerminalLabel.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceParticipantsTerminalLabel.setDescription('The terminal label of this terminal. The first byte represents MCU number and the second byte represents the terminal number.')
h323McConferenceParticipantsCallSignalingTAddressTag = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 3, 2, 1, 3), MmTAddressTag()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConferenceParticipantsCallSignalingTAddressTag.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceParticipantsCallSignalingTAddressTag.setDescription('The terminal call signaling address type.')
h323McConferenceParticipantsCallSignalingAddress = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 3, 2, 1, 4), TAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConferenceParticipantsCallSignalingAddress.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceParticipantsCallSignalingAddress.setDescription('The terminal call signaling address.')
h323McConferenceParticipantsCallId = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 3, 2, 1, 5), MmGlobalIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConferenceParticipantsCallId.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceParticipantsCallId.setDescription('The call identifier.')
h323McConferenceParticipantsControlChannelIndex = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 3, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConferenceParticipantsControlChannelIndex.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceParticipantsControlChannelIndex.setDescription('The index to the control channel table in H.245 MIB. ')
h323McConferenceParticipantsNumberOfLogicalChannels = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 3, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConferenceParticipantsNumberOfLogicalChannels.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceParticipantsNumberOfLogicalChannels.setDescription('The number of logical channels that are used by this participant.')
h323McConferenceParticipantsRtpSessionIndex = MibTableColumn((0, 0, 8, 341, 1, 1, 4, 3, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McConferenceParticipantsRtpSessionIndex.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceParticipantsRtpSessionIndex.setDescription('The index to the RTP session table in RTP MIB')
h323McStatsTotalConferences = MibScalar((0, 0, 8, 341, 1, 1, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McStatsTotalConferences.setStatus('current')
if mibBuilder.loadTexts: h323McStatsTotalConferences.setDescription('The total number of conferences since system start up time.')
h323McStatsSuccessfullyCompletedConferences = MibScalar((0, 0, 8, 341, 1, 1, 4, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McStatsSuccessfullyCompletedConferences.setStatus('current')
if mibBuilder.loadTexts: h323McStatsSuccessfullyCompletedConferences.setDescription('The number of conferences that completed successfully.')
h323McStatsAbnormalyTerminatedConferences = MibScalar((0, 0, 8, 341, 1, 1, 4, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: h323McStatsAbnormalyTerminatedConferences.setStatus('current')
if mibBuilder.loadTexts: h323McStatsAbnormalyTerminatedConferences.setDescription('The number of conferences that were terminated abnormaly.')
h323McControlsCommands = MibScalar((0, 0, 8, 341, 1, 1, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("other", 1), ("abruptRestart", 2), ("gracefulRestart", 3), ("abruptShutdown", 4), ("gracefulShutdown", 5), ("enterQuiescence", 6), ("exitQuiescence", 7), ("startLog", 8), ("stopLog", 9), ("resetStatistics", 10), ("runDiagnostic", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: h323McControlsCommands.setStatus('current')
if mibBuilder.loadTexts: h323McControlsCommands.setDescription('A value that represents a command for the MC. 1. Other (for proprietary extensions) 2. Abrupt Restart (Drastic Restart) 3. Graceful Restart (Restart after all calls have terminated. Meanwhile, accept no calls) 4. Abrupt Shutdown (Drastic Restart) 5. Graceful Shutdown (Shutdown after all calls have terminated. Meanwhile, accept no calls) 6. Enter Quiescence Mode (Disable receiving of calls) 7. Exit Quiescence Mode (Enable receiving of calls) 8. Start Error/Log Reporting 9. Stop Error/Log Reporting 10. Reset Statistics 11. Run Diagnostic')
lastConferenceTerminationReason = MibScalar((0, 0, 8, 341, 1, 1, 4, 6, 0, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normalTermination", 1), ("administrativelyTerminated", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastConferenceTerminationReason.setStatus('current')
if mibBuilder.loadTexts: lastConferenceTerminationReason.setDescription('This value identifys the reason for the conference termination.')
lastTerminatedConferenceId = MibScalar((0, 0, 8, 341, 1, 1, 4, 6, 0, 2), MmGlobalIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastTerminatedConferenceId.setStatus('current')
if mibBuilder.loadTexts: lastTerminatedConferenceId.setDescription('The number of conferences that were terminated abnormaly.')
conferenceTermination = NotificationType((0, 0, 8, 341, 1, 1, 4, 6, 0, 3)).setObjects(("H323MC-MIB", "lastTerminatedConferenceId"), ("H323MC-MIB", "lastConferenceTerminationReason"), ("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: conferenceTermination.setStatus('current')
if mibBuilder.loadTexts: conferenceTermination.setDescription('This message will be sent on conference termination for the following reasons: 1 - normally terminated 2 - administratively terminated ')
h323McMIBConformance = MibIdentifier((0, 0, 8, 341, 1, 1, 4, 7))
h323McMIBGroups = MibIdentifier((0, 0, 8, 341, 1, 1, 4, 7, 1))
h323McSystemGroup = ObjectGroup((0, 0, 8, 341, 1, 1, 4, 7, 1, 1)).setObjects(("H323MC-MIB", "h323McSystemNameAndMaker"), ("H323MC-MIB", "h323McSystemSoftwareVersionNumber"), ("H323MC-MIB", "h323McSystemHardwareVersionNumber"), ("H323MC-MIB", "h323McSystemStartUpTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h323McSystemGroup = h323McSystemGroup.setStatus('current')
if mibBuilder.loadTexts: h323McSystemGroup.setDescription('.')
h323McConfigGroup = ObjectGroup((0, 0, 8, 341, 1, 1, 4, 7, 1, 2)).setObjects(("H323MC-MIB", "h323McConfigMcCallSignalingTag"), ("H323MC-MIB", "h323McConfigMcCallSignalingAddress"), ("H323MC-MIB", "h323McConfigGatekeeperAddressTag"), ("H323MC-MIB", "h323McConfigGatekeeperAddress"), ("H323MC-MIB", "h323McConfigIsRegisteredWithGatekeeper"), ("H323MC-MIB", "h323McConfigEnableNotifications"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h323McConfigGroup = h323McConfigGroup.setStatus('current')
if mibBuilder.loadTexts: h323McConfigGroup.setDescription('.')
h323McConferenceGroup = ObjectGroup((0, 0, 8, 341, 1, 1, 4, 7, 1, 3)).setObjects(("H323MC-MIB", "h323McConferenceConferenceId"), ("H323MC-MIB", "h323McConferenceConferenceStartTime"), ("H323MC-MIB", "h323McConferenceConferenceEndTime"), ("H323MC-MIB", "h323McConferenceCentralizedOrDistributed"), ("H323MC-MIB", "h323McConferenceUniOrMulticast"), ("H323MC-MIB", "h323McConferenceActiveMcAddress"), ("H323MC-MIB", "h323McConferenceParticipantsTerminalLabel"), ("H323MC-MIB", "h323McConferenceParticipantsCallSignalingTAddressTag"), ("H323MC-MIB", "h323McConferenceParticipantsCallSignalingAddress"), ("H323MC-MIB", "h323McConferenceParticipantsCallId"), ("H323MC-MIB", "h323McConferenceParticipantsControlChannelIndex"), ("H323MC-MIB", "h323McConferenceParticipantsNumberOfLogicalChannels"), ("H323MC-MIB", "h323McConferenceParticipantsRtpSessionIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h323McConferenceGroup = h323McConferenceGroup.setStatus('current')
if mibBuilder.loadTexts: h323McConferenceGroup.setDescription('.')
h323McStatsGroup = ObjectGroup((0, 0, 8, 341, 1, 1, 4, 7, 1, 4)).setObjects(("H323MC-MIB", "h323McStatsTotalConferences"), ("H323MC-MIB", "h323McStatsSuccessfullyCompletedConferences"), ("H323MC-MIB", "h323McStatsAbnormalyTerminatedConferences"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h323McStatsGroup = h323McStatsGroup.setStatus('current')
if mibBuilder.loadTexts: h323McStatsGroup.setDescription('.')
h323McControlsGroup = ObjectGroup((0, 0, 8, 341, 1, 1, 4, 7, 1, 5)).setObjects(("H323MC-MIB", "h323McControlsCommands"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h323McControlsGroup = h323McControlsGroup.setStatus('current')
if mibBuilder.loadTexts: h323McControlsGroup.setDescription('.')
h323McMIBCompliance = ModuleCompliance((0, 0, 8, 341, 1, 1, 4, 7, 2)).setObjects(("H323MC-MIB", "h323McSystemGroup"), ("H323MC-MIB", "h323McConfigGroup"), ("H323MC-MIB", "h323McConferenceGroup"), ("H323MC-MIB", "h323McStatsGroup"), ("H323MC-MIB", "h323McControlsGroup"), ("H323MC-MIB", "h323McEventsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    h323McMIBCompliance = h323McMIBCompliance.setStatus('current')
if mibBuilder.loadTexts: h323McMIBCompliance.setDescription('The set of objects required for compliance.')
mibBuilder.exportSymbols("H323MC-MIB", h323McConfigTableEntry=h323McConfigTableEntry, h323McConfig=h323McConfig, h323McSystemSoftwareVersionNumber=h323McSystemSoftwareVersionNumber, h323McConferenceParticipantsCallSignalingTAddressTag=h323McConferenceParticipantsCallSignalingTAddressTag, h323McConferenceTable=h323McConferenceTable, h323McConferenceGroup=h323McConferenceGroup, h323MC=h323MC, h323McConfigMcCallSignalingTag=h323McConfigMcCallSignalingTag, h323McSystemNameAndMaker=h323McSystemNameAndMaker, h323McSystemTable=h323McSystemTable, h323McStatsSuccessfullyCompletedConferences=h323McStatsSuccessfullyCompletedConferences, h323McMIBConformance=h323McMIBConformance, h323McControls=h323McControls, h323McConfigGatekeeperAddressTag=h323McConfigGatekeeperAddressTag, h323McConferenceParticipantsTable=h323McConferenceParticipantsTable, h323McConference=h323McConference, h323McConferenceParticipantsTableEntry=h323McConferenceParticipantsTableEntry, h323McConferenceParticipantsTerminalLabel=h323McConferenceParticipantsTerminalLabel, h323McConferenceParticipantsControlChannelIndex=h323McConferenceParticipantsControlChannelIndex, h323McConfigGroup=h323McConfigGroup, conferenceTermination=conferenceTermination, h323McStats=h323McStats, h323McConfigMcCallSignalingAddress=h323McConfigMcCallSignalingAddress, h323McControlsCommands=h323McControlsCommands, h323McConfigTable=h323McConfigTable, h323McSystemTableEntry=h323McSystemTableEntry, h323McConferenceActiveMcAddress=h323McConferenceActiveMcAddress, h323McSystemHardwareVersionNumber=h323McSystemHardwareVersionNumber, h323McSystem=h323McSystem, h323McConferenceCentralizedOrDistributed=h323McConferenceCentralizedOrDistributed, h323McMIBCompliance=h323McMIBCompliance, h323McConferenceConferenceId=h323McConferenceConferenceId, h323McConferenceTableEntry=h323McConferenceTableEntry, lastConferenceTerminationReason=lastConferenceTerminationReason, h323McControlsGroup=h323McControlsGroup, h323McStatsAbnormalyTerminatedConferences=h323McStatsAbnormalyTerminatedConferences, h323McSystemGroup=h323McSystemGroup, h323McStatsGroup=h323McStatsGroup, PYSNMP_MODULE_ID=h323MC, h323McConfigGatekeeperAddress=h323McConfigGatekeeperAddress, h323McConferenceParticipantsCallId=h323McConferenceParticipantsCallId, h323McConfigIsRegisteredWithGatekeeper=h323McConfigIsRegisteredWithGatekeeper, h323McConferenceConferenceStartTime=h323McConferenceConferenceStartTime, lastTerminatedConferenceId=lastTerminatedConferenceId, h323McConferenceParticipantsNumberOfLogicalChannels=h323McConferenceParticipantsNumberOfLogicalChannels, h323McSystemStartUpTime=h323McSystemStartUpTime, h323McConferenceParticipantsTableIndex=h323McConferenceParticipantsTableIndex, h323McMIBGroups=h323McMIBGroups, h323McEvents=h323McEvents, h323McConferenceParticipantsCallSignalingAddress=h323McConferenceParticipantsCallSignalingAddress, h323McConferenceConferenceEndTime=h323McConferenceConferenceEndTime, h323McConfigEnableNotifications=h323McConfigEnableNotifications, h323McConferenceUniOrMulticast=h323McConferenceUniOrMulticast, h323McConferenceParticipantsRtpSessionIndex=h323McConferenceParticipantsRtpSessionIndex, h323McStatsTotalConferences=h323McStatsTotalConferences)
