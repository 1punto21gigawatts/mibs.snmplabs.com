#
# PySNMP MIB module HH3C-DLDP2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-DLDP2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:26:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
ifIndex, ifDescr = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifDescr")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, IpAddress, ObjectIdentity, Bits, ModuleIdentity, Counter32, Integer32, Gauge32, MibIdentifier, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, iso, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "IpAddress", "ObjectIdentity", "Bits", "ModuleIdentity", "Counter32", "Integer32", "Gauge32", "MibIdentifier", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "iso", "TimeTicks")
TruthValue, DisplayString, MacAddress, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "MacAddress", "TextualConvention")
hh3cDldp2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 117))
hh3cDldp2.setRevisions(('2011-12-26 15:30',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hh3cDldp2.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: hh3cDldp2.setLastUpdated('201112261530Z')
if mibBuilder.loadTexts: hh3cDldp2.setOrganization('Hangzhou H3C Technologies. Co., Ltd.')
if mibBuilder.loadTexts: hh3cDldp2.setContactInfo('Platform Team Hangzhou H3C Technologies. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip: 100085')
if mibBuilder.loadTexts: hh3cDldp2.setDescription('Device Link Detection Protocol (DLDP) MIB. Device Link Detection Protocol is a private Layer 2 protocol, which can be used to detect and shut down unidirectional links (fiber or copper links) to avoid network problems.')
hh3cDldp2ScalarGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 117, 1))
hh3cDldp2GlobalEnable = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 117, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDldp2GlobalEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2GlobalEnable.setDescription('Enable(true) or disable(false) DLDP on the device.')
hh3cDldp2Interval = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 117, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100)).clone(5)).setUnits('second').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDldp2Interval.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2Interval.setDescription('Indicates the advertisement packet sending interval.')
hh3cDldp2AuthMode = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 117, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("unknown", 1), ("none", 2), ("simple", 3), ("md5", 4))).clone('none')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDldp2AuthMode.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2AuthMode.setDescription('Indicates the authentication mode. unknown: cannot be determined for some reason. none: not authenticated. simple: authenticated by a clear text password. md5: authenticated by MD5 digest.')
hh3cDldp2AuthPassword = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 117, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDldp2AuthPassword.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2AuthPassword.setDescription('Indicates the authentication password. Setting the password to a zero-length octet string means deleting the password. When read, it always returns a zero-length octet string.')
hh3cDldp2UniShutdown = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 117, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("auto", 2), ("manual", 3))).clone('auto')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDldp2UniShutdown.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2UniShutdown.setDescription('Indicates the shutdown mode when a unidirectional link has been detected. unknown: cannot be determined for some reason. auto: the port will be shutdown automatically. manual: the port must be shut down manually.')
hh3cDldp2TableGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 117, 2))
hh3cDldp2PortConfigTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 117, 2, 1), )
if mibBuilder.loadTexts: hh3cDldp2PortConfigTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2PortConfigTable.setDescription('This table contains all ports that support DLDP.')
hh3cDldp2PortConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 117, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDldp2PortConfigEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2PortConfigEntry.setDescription('This entry describes a port that supports DLDP.')
hh3cDldp2PortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 117, 2, 1, 1, 1), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hh3cDldp2PortEnable.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2PortEnable.setDescription('Enable(true) or disable(false) DLDP on a port.')
hh3cDldp2PortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 117, 2, 2), )
if mibBuilder.loadTexts: hh3cDldp2PortStatusTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2PortStatusTable.setDescription('This table contains all ports enabled with DLDP.')
hh3cDldp2PortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 117, 2, 2, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hh3cDldp2PortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2PortStatusEntry.setDescription('This entry describes a port enabled with DLDP.')
hh3cDldp2PortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 117, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("initial", 2), ("inactive", 3), ("unidirectional", 4), ("bidirectional", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDldp2PortOperStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2PortOperStatus.setDescription("Indicates the DLDP operating status on the port. unknown: cannot be determined for some reason. initial: DLDP is not globally enabled. inactive: physical status of the port is down. unidirectional: all neighbors of the port are in 'unconfirmed' status. bidirectional: more than one neighbor of the port is in 'confirmed' status.")
hh3cDldp2PortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 117, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("down", 2), ("up", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDldp2PortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2PortLinkStatus.setDescription("Indicates the DLDP link status of the port. unknown: cannot be determined for some reason. down: the DLDP link status of the port is down. up: the DLDP link status of the port is up. If the port operating status is not 'inactive', 'unidirectional', or 'bidirectional', it always returns 'unknown'.")
hh3cDldp2NeighborTable = MibTable((1, 3, 6, 1, 4, 1, 25506, 2, 117, 2, 3), )
if mibBuilder.loadTexts: hh3cDldp2NeighborTable.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2NeighborTable.setDescription("This table contains all port's neighbors.")
hh3cDldp2NeighborEntry = MibTableRow((1, 3, 6, 1, 4, 1, 25506, 2, 117, 2, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "HH3C-DLDP2-MIB", "hh3cDldp2NeighborBridgeMac"), (0, "HH3C-DLDP2-MIB", "hh3cDldp2NeighborPortIndex"))
if mibBuilder.loadTexts: hh3cDldp2NeighborEntry.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2NeighborEntry.setDescription("This entry describes a port's neighbors.")
hh3cDldp2NeighborBridgeMac = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 117, 2, 3, 1, 1), MacAddress())
if mibBuilder.loadTexts: hh3cDldp2NeighborBridgeMac.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2NeighborBridgeMac.setDescription('Indicates the bridge MAC address of a neighbor.')
hh3cDldp2NeighborPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 117, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647)))
if mibBuilder.loadTexts: hh3cDldp2NeighborPortIndex.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2NeighborPortIndex.setDescription('Indicates the port index of a neighbor.')
hh3cDldp2NeighborStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 117, 2, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("unconfirmed", 2), ("confirmed", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDldp2NeighborStatus.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2NeighborStatus.setDescription('Indicates the status of a neighbor. unknown: cannot be determined for some reason. unconfirmed: unidirectional communication between the port and its neighbor. confirmed: bidirectional communication between the port and its neighbor.')
hh3cDldp2NeighborAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 25506, 2, 117, 2, 3, 1, 4), Integer32()).setUnits('second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hh3cDldp2NeighborAgingTime.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2NeighborAgingTime.setDescription("Indicates the aging time of a neighbor. If the neighbor status is not 'confirmed', it always returns 0.")
hh3cDldp2TrapBindObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 117, 3))
hh3cDldp2Trap = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 117, 4))
hh3cDldp2TrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 117, 4, 0))
hh3cDldp2TrapUniLink = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 117, 4, 0, 1)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cDldp2TrapUniLink.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2TrapUniLink.setDescription('This trap is generated when DLDP detects a unidirectional link, ifIndex and ifDescr identify the port.')
hh3cDldp2TrapBidLink = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 117, 4, 0, 2)).setObjects(("IF-MIB", "ifIndex"), ("IF-MIB", "ifDescr"))
if mibBuilder.loadTexts: hh3cDldp2TrapBidLink.setStatus('current')
if mibBuilder.loadTexts: hh3cDldp2TrapBidLink.setDescription('This trap is generated when DLDP detects a bidirectional link, ifIndex and ifDescr identify the port.')
mibBuilder.exportSymbols("HH3C-DLDP2-MIB", hh3cDldp2PortOperStatus=hh3cDldp2PortOperStatus, hh3cDldp2UniShutdown=hh3cDldp2UniShutdown, hh3cDldp2NeighborStatus=hh3cDldp2NeighborStatus, hh3cDldp2TrapBidLink=hh3cDldp2TrapBidLink, hh3cDldp2PortConfigTable=hh3cDldp2PortConfigTable, hh3cDldp2TrapPrefix=hh3cDldp2TrapPrefix, hh3cDldp2PortEnable=hh3cDldp2PortEnable, hh3cDldp2GlobalEnable=hh3cDldp2GlobalEnable, hh3cDldp2NeighborAgingTime=hh3cDldp2NeighborAgingTime, hh3cDldp2PortStatusEntry=hh3cDldp2PortStatusEntry, PYSNMP_MODULE_ID=hh3cDldp2, hh3cDldp2NeighborEntry=hh3cDldp2NeighborEntry, hh3cDldp2=hh3cDldp2, hh3cDldp2PortConfigEntry=hh3cDldp2PortConfigEntry, hh3cDldp2NeighborTable=hh3cDldp2NeighborTable, hh3cDldp2NeighborPortIndex=hh3cDldp2NeighborPortIndex, hh3cDldp2Trap=hh3cDldp2Trap, hh3cDldp2PortLinkStatus=hh3cDldp2PortLinkStatus, hh3cDldp2NeighborBridgeMac=hh3cDldp2NeighborBridgeMac, hh3cDldp2TrapBindObjects=hh3cDldp2TrapBindObjects, hh3cDldp2AuthMode=hh3cDldp2AuthMode, hh3cDldp2PortStatusTable=hh3cDldp2PortStatusTable, hh3cDldp2ScalarGroup=hh3cDldp2ScalarGroup, hh3cDldp2AuthPassword=hh3cDldp2AuthPassword, hh3cDldp2Interval=hh3cDldp2Interval, hh3cDldp2TableGroup=hh3cDldp2TableGroup, hh3cDldp2TrapUniLink=hh3cDldp2TrapUniLink)
