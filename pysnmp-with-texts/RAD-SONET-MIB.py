#
# PySNMP MIB module RAD-SONET-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RAD-SONET-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:44:40 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
PerfCurrentCount, PerfIntervalCount = mibBuilder.importSymbols("PerfHist-TC-MIB", "PerfCurrentCount", "PerfIntervalCount")
diverseIfWanGen, = mibBuilder.importSymbols("RAD-MIB", "diverseIfWanGen")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, TimeTicks, ObjectIdentity, NotificationType, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, MibIdentifier, Gauge32, iso, Integer32, Counter32, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "TimeTicks", "ObjectIdentity", "NotificationType", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "MibIdentifier", "Gauge32", "iso", "Integer32", "Counter32", "Unsigned32")
TextualConvention, RowStatus, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "RowStatus", "DisplayString")
sonetInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2))
prtSonetPerfHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1))
prtSonetMediumTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 1), )
if mibBuilder.loadTexts: prtSonetMediumTable.setStatus('current')
if mibBuilder.loadTexts: prtSonetMediumTable.setDescription('The SONET Medium table.')
prtSonetMediumEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"))
if mibBuilder.loadTexts: prtSonetMediumEntry.setStatus('current')
if mibBuilder.loadTexts: prtSonetMediumEntry.setDescription('An entry in the SONET Medium table. ifIndex of the lowest SONET layer of type sonet(39).')
prtSonetMediumTimeElapsed = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetMediumTimeElapsed.setStatus('current')
if mibBuilder.loadTexts: prtSonetMediumTimeElapsed.setDescription('The number of seconds that have elapsed since the beginning of the near end current error- measurement period.')
prtSonetMediumValidIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetMediumValidIntervals.setStatus('current')
if mibBuilder.loadTexts: prtSonetMediumValidIntervals.setDescription('The number of previous near end intervals for which valid data was collected. The value will be 96 unless the interface was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute near end intervals since the interface has been online.')
prtSonetSectionLineCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2), )
if mibBuilder.loadTexts: prtSonetSectionLineCurrentTable.setStatus('current')
if mibBuilder.loadTexts: prtSonetSectionLineCurrentTable.setDescription('The SONET Section/Line Current table.')
prtSectionLineCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"))
if mibBuilder.loadTexts: prtSectionLineCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: prtSectionLineCurrentEntry.setDescription('An entry in the SONET Section/Line Current table. ifIndex of the section/line SONET layer of type sonet(39).')
prtSonetCurrentLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLOS.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentLOS.setDescription('The counter associated with the number of LOS seconds, encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLOF.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentLOF.setDescription('The counter associated with the number of LOF seconds, encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentLineAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLineAIS.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentLineAIS.setDescription('The counter associated with the number of Line AIS seconds, encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentLineFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLineFERF.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentLineFERF.setDescription('The counter associated with the number of Line FERF seconds, encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentSectionBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentSectionBIP.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentSectionBIP.setDescription('The counter associated with the number of Section BIP errors, encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentLineBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLineBIP.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentLineBIP.setDescription('The counter associated with the number of Line BIP errors, encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentLineFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLineFEBE.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentLineFEBE.setDescription('The counter associated with the number of Line FEBE errors, encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentUAS.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentUAS.setDescription('The counter associated with the number of UAS encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentSES = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentSES.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentSES.setDescription('The counter associated with the number of SES encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentES = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentES.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentES.setDescription('The number of Errored Seconds, encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentStatus.setDescription('The statuses of the current interval: 0 - O.K. 1 - The link has been switched by a redundancy mechanism. 2 - Module is in/out. 4 - Empty - card is out.')
prtSonetCurrentLSV = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 2, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLSV.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentLSV.setDescription('The counter associated with the number of LSV seconds (Line Symbol Violation), encountered by a SONET interface in the current 15 minute interval.')
prtSonetSectionLineIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3), )
if mibBuilder.loadTexts: prtSonetSectionLineIntervalTable.setStatus('current')
if mibBuilder.loadTexts: prtSonetSectionLineIntervalTable.setDescription('The Section/Line Interval table.')
prtSectionLineIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"), (0, "RAD-SONET-MIB", "prtSonetLineIntervalNumber"))
if mibBuilder.loadTexts: prtSectionLineIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: prtSectionLineIntervalEntry.setDescription('An entry in the SONET Section/Line Interval table. ifIndex of the section/line SONET layer of type sonet(39).')
prtSonetLineIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetLineIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: prtSonetLineIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes interval (assuming that all 96 intervals are valid).')
prtSonetIntervalLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLOS.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalLOS.setDescription('The counter associated with the number of LOS seconds , encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalLOF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLOF.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalLOF.setDescription('The counter associated with the number of LOF seconds, encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalLineAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLineAIS.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalLineAIS.setDescription('The counter associated with the number of Line AIS seconds, encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalLineFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLineFERF.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalLineFERF.setDescription('The counter associated with the number of Line FERF seconds, encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalSectionBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalSectionBIP.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalSectionBIP.setDescription('The counter associated with the number of Section BIP errors, encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalLineBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLineBIP.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalLineBIP.setDescription('The counter associated with the number of Line BIP errors, encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalLineFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLineFEBE.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalLineFEBE.setDescription('The counter associated with the number of Line FEBE errors, encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalUAS.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalUAS.setDescription('The counter associated with the number of UAS encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalSES = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalSES.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalSES.setDescription('The counter associated with the number of SES encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalES = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalES.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalES.setDescription('The number of Errored Seconds, encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalStatus.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalStatus.setDescription(' The statuses of the current interval: 0 - O.K. 1 - The link has been switched by a redundancy mechanism. 2 - Module is in/out. 4 - Empty - card is out.')
prtSonetIntervalLSV = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 3, 1, 13), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLSV.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalLSV.setDescription('The counter associated with the number of LSV seconds (Line Symbol Violation), encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetPathCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4), )
if mibBuilder.loadTexts: prtSonetPathCurrentTable.setStatus('current')
if mibBuilder.loadTexts: prtSonetPathCurrentTable.setDescription('The SONET Path Current table.')
prtPathCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"))
if mibBuilder.loadTexts: prtPathCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: prtPathCurrentEntry.setDescription('An entry in the SONET Path Current table. ifIndex of the Path SONET layer of type sonetPath(50).')
prtSonetCurrentPathAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentPathAIS.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentPathAIS.setDescription('The counter associated with the number of Path AIS seconds, encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentPathFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentPathFERF.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentPathFERF.setDescription('The counter associated with the number of Path FERF seconds, encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentLOP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLOP.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentLOP.setDescription('The counter associated with the number LOP seconds, encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentSLM = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentSLM.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentSLM.setDescription('The counter associated with the number of SLM seconds, encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentLOC.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentLOC.setDescription('The counter associated with the number of LOC seconds, encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentPathBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentPathBIP.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentPathBIP.setDescription('The counter associated with the number of Path BIP errors, encountered by a SONET interface in the current 15 minute interval.')
prtSonetCurrentPathFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 4, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetCurrentPathFEBE.setStatus('current')
if mibBuilder.loadTexts: prtSonetCurrentPathFEBE.setDescription('The counter associated with the number of Path FEBE errors, encountered by a SONET interface in the current 15 minute interval.')
prtSonetPathIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5), )
if mibBuilder.loadTexts: prtSonetPathIntervalTable.setStatus('current')
if mibBuilder.loadTexts: prtSonetPathIntervalTable.setDescription('The Path Interval table.')
prtPathIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"), (0, "RAD-SONET-MIB", "prtSonetPathIntervalNumber"))
if mibBuilder.loadTexts: prtPathIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: prtPathIntervalEntry.setDescription('An entry in the SONET Path Interval table.')
prtSonetPathIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetPathIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: prtSonetPathIntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes interval (assuming that all 96 intervals are valid).')
prtSonetIntervalPathAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalPathAIS.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalPathAIS.setDescription('The counter associated with the number of Path AIS seconds , encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalPathFERF = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalPathFERF.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalPathFERF.setDescription('The counter associated with the number of Path FERF seconds, encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalLOP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLOP.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalLOP.setDescription('The counter associated with the number of LOP seconds, encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalSLM = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalSLM.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalSLM.setDescription('The counter associated with the number of SLM seconds, encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalLOC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalLOC.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalLOC.setDescription('The counter associated with the number of LOC seconds, encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalPathBIP = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalPathBIP.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalPathBIP.setDescription('The counter associated with the number of Path BIP errors, encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
prtSonetIntervalPathFEBE = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 5, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetIntervalPathFEBE.setStatus('current')
if mibBuilder.loadTexts: prtSonetIntervalPathFEBE.setDescription('The counter associated with the number of Path FEBE errors, encountered by a SONET interface in one of the previous 96, individual 15 minute, intervals.')
virtualIfStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6))
virtualIfCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1), )
if mibBuilder.loadTexts: virtualIfCurrentTable.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentTable.setDescription('The Virtual Interface Current table.')
virtualIfCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"))
if mibBuilder.loadTexts: virtualIfCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentEntry.setDescription('An entry in the Virtual Interface Current table.')
virtualIfCurrentMinActiveVC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentMinActiveVC.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentMinActiveVC.setDescription('This object holds the minimum number of active virtual containers (VCs) of the Virtual Concatenation Group in the current 15-minute interval.')
virtualIfCurrentMaxActiveVC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentMaxActiveVC.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentMaxActiveVC.setDescription('This object holds the maximum number of active virtual containers (VCs) of the Virtual Concatenation Group in the current 15-minute interval.')
virtualIfCurrentRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentRxFrames.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentRxFrames.setDescription('This counter is associated with the number of frames received from STS-3/STM-1 by a Virtual Interface in the current 15-minute interval.')
virtualIfCurrentTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentTxFrames.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentTxFrames.setDescription('This counter is associated with the number of frames transmitted to STS-3/STM-1 by a Virtual Interface in the current 15-minute interval.')
virtualIfCurrentRxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentRxAbortFrames.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentRxAbortFrames.setDescription('The counter associated with the number of Received Aborted frames encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfCurrentTxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentTxAbortFrames.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentTxAbortFrames.setDescription('The counter associated with the number of Transmitted Aborted frames encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfCurrentMinLengthViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentMinLengthViolation.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentMinLengthViolation.setDescription('This counter is associated with the number of Rx payload Min Length Violation frames encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfCurrentMaxLengthViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentMaxLengthViolation.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentMaxLengthViolation.setDescription('This counter is associated with the number of Rx payload Max Length Violation frames encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfCurrentFcsError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentFcsError.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentFcsError.setDescription('The counter is associated with the number of Frame Check Sequence errors encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfCurrentByteDestuffingViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentByteDestuffingViolation.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentByteDestuffingViolation.setDescription('The counter associated with the number of Byte De-stuffing Violations encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfCurrentAdressMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 11), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentAdressMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentAdressMismatch.setDescription('The counter associated with the number of Adress Mismatch encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfCurrentControlMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 12), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentControlMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentControlMismatch.setDescription('The counter associated with the number of Control Mismatch encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfCurrentActiveVC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfCurrentActiveVC.setStatus('current')
if mibBuilder.loadTexts: virtualIfCurrentActiveVC.setDescription('This object holds the number of active virtual containers (VCs) of the Virtual Concatenation Group in the current 15-minute interval.')
virtualIfIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2), )
if mibBuilder.loadTexts: virtualIfIntervalTable.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalTable.setDescription('The Virtual Interface Interval table.')
virtualIfIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"), (0, "RAD-SONET-MIB", "virtualIfIntervalNumber"))
if mibBuilder.loadTexts: virtualIfIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalEntry.setDescription('An entry in the Virtual Interface Interval table.')
virtualIfIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96)))
if mibBuilder.loadTexts: virtualIfIntervalNumber.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalNumber.setDescription('A number between 1 and 96, which identifies the interval for which the set of statistics is available. The interval identified by 1 is the most recently completed 15 minute interval, and the interval identified by N is the interval immediately preceding the one identified by N-1.')
virtualIfIntervalMinActiveVC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalMinActiveVC.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalMinActiveVC.setDescription('This object holds the minimum number of active virtual containers (VCs) of the Virtual Concatenation Group, in a particular 15-minute interval in the past 24 hours.')
virtualIfIntervalMaxActiveVC = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalMaxActiveVC.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalMaxActiveVC.setDescription('This object holds the maximum number of active virtual containers (VCs) of the Virtual Concatenation Group, in a particular 15-minute interval in the past 24 hours.')
virtualIfIntervalRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalRxFrames.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalRxFrames.setDescription('This counter is associated with the number of frames received from STS-3/STM-1 by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfIntervalTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalTxFrames.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalTxFrames.setDescription('This counter is associated with the number of frames transmitted to STS-3/STM-1 by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfIntervalRxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalRxAbortFrames.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalRxAbortFrames.setDescription('This counter is associated with the number of Received Abort frames encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfIntervalTxAbortFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalTxAbortFrames.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalTxAbortFrames.setDescription('This counter is associated with the number of Transmitted Abort frames encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfIntervalMinLengthViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalMinLengthViolation.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalMinLengthViolation.setDescription('This counter is associated with the number of Rx payload Min Length Violation frames encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfIntervalMaxLengthViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalMaxLengthViolation.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalMaxLengthViolation.setDescription('This counter is associated with the number of Rx payload Max Length Violation frames encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfIntervalFcsError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalFcsError.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalFcsError.setDescription('This counter is associated with the number of Frame Check Sequence errors encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfIntervalByteDestuffingViolation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 11), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalByteDestuffingViolation.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalByteDestuffingViolation.setDescription('This counter is associated with the number of Byte De-stuffing Violations encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfIntervalAdressMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 12), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalAdressMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalAdressMismatch.setDescription('This counter is associated with the number of Address Mismatch encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfIntervalControlMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 13), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalControlMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalControlMismatch.setDescription('This counter is associated with the number of Control mismatch encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfIntervalBelowMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 2, 1, 14), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfIntervalBelowMinThreshold.setStatus('current')
if mibBuilder.loadTexts: virtualIfIntervalBelowMinThreshold.setDescription('This counter is associated with the number of seconds that number of active VCs was below minimum threshold defined by vcGroupCnfgNoOfVCs, encountered by Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfLAPSCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 3), )
if mibBuilder.loadTexts: virtualIfLAPSCurrentTable.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPSCurrentTable.setDescription('The Virtual Interface LAPS Current table.')
virtualIfLAPSCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 3, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"))
if mibBuilder.loadTexts: virtualIfLAPSCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPSCurrentEntry.setDescription('An entry in the Virtual Interface LAPS Current table.')
virtualIfLAPSCurrentSapiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 3, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPSCurrentSapiMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPSCurrentSapiMismatch.setDescription('This counter is associated with the number of received SAPI field mismatch encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfLAPSIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 4), )
if mibBuilder.loadTexts: virtualIfLAPSIntervalTable.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPSIntervalTable.setDescription('The Virtual Interface LAPS table.')
virtualIfLAPSIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 4, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"), (0, "RAD-SONET-MIB", "virtualIfIntervalNumber"))
if mibBuilder.loadTexts: virtualIfLAPSIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPSIntervalEntry.setDescription('An entry in the Virtual Interface LAPS Interval table.')
virtualIfLAPSIntervalSapiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 4, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPSIntervalSapiMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPSIntervalSapiMismatch.setDescription('This counter is associated with the number of received SAPI field mismatch encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfLAPFCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5), )
if mibBuilder.loadTexts: virtualIfLAPFCurrentTable.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFCurrentTable.setDescription('The Virtual Interface LAPF Current table.')
virtualIfLAPFCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"))
if mibBuilder.loadTexts: virtualIfLAPFCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFCurrentEntry.setDescription('An entry in the Virtual Interface LAPF Current table.')
virtualIfLAPFCurrentNlpidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFCurrentNlpidMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFCurrentNlpidMismatch.setDescription('This counter is associated with the number of received NLPID field mismatch encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfLAPFCurrentOuiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFCurrentOuiMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFCurrentOuiMismatch.setDescription('This counter is associated with the number of received OUI field mismatch encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfLAPFCurrentPidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFCurrentPidMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFCurrentPidMismatch.setDescription('This counter is associated with the number of received PID field mismatch encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfLAPFCurrentDlciMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFCurrentDlciMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFCurrentDlciMismatch.setDescription('This counter is associated with the number of received DLCI field mismatch encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfLAPFCurrentMacRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFCurrentMacRxFrames.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFCurrentMacRxFrames.setDescription('This counter is associated with the number of frames received from LAN by a Virtual Interface in the current 15-minute interval.')
virtualIfLAPFCurrentMacTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 5, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFCurrentMacTxFrames.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFCurrentMacTxFrames.setDescription('This counter is associated with the number of frames transmitted to LAN by a Virtual Interface in the current 15-minute interval.')
virtualIfLAPFIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6), )
if mibBuilder.loadTexts: virtualIfLAPFIntervalTable.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFIntervalTable.setDescription('The Virtual Interface LAPF Interval table.')
virtualIfLAPFIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"), (0, "RAD-SONET-MIB", "virtualIfIntervalNumber"))
if mibBuilder.loadTexts: virtualIfLAPFIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFIntervalEntry.setDescription('An entry in the Virtual Interface Interval table.')
virtualIfLAPFIntervalNlpidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFIntervalNlpidMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFIntervalNlpidMismatch.setDescription('This counter is associated with the number of received NLPID field mismatch encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfLAPFIntervalOuiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFIntervalOuiMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFIntervalOuiMismatch.setDescription('This counter is associated with the number of received OUI field mismatch encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfLAPFIntervalPidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFIntervalPidMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFIntervalPidMismatch.setDescription('This counter is associated with the number of received PID field mismatch encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfLAPFIntervalDlciMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFIntervalDlciMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFIntervalDlciMismatch.setDescription('This counter is associated with the number of received DLCI field mismatch by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfLAPFIntervalMacRxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFIntervalMacRxFrames.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFIntervalMacRxFrames.setDescription('This counter is associated with the number of frames received from LAN by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfLAPFIntervalMacTxFrames = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 6, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfLAPFIntervalMacTxFrames.setStatus('current')
if mibBuilder.loadTexts: virtualIfLAPFIntervalMacTxFrames.setDescription('This counter is associated with the number of frames transmitted to LAN encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfGFPCurrentTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7), )
if mibBuilder.loadTexts: virtualIfGFPCurrentTable.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPCurrentTable.setDescription('The Virtual Interface GFP Current table.')
virtualIfGFPCurrentEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"))
if mibBuilder.loadTexts: virtualIfGFPCurrentEntry.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPCurrentEntry.setDescription('An entry in the Virtual Interface GFP Current table.')
virtualIfGFPCurrentIdleFrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 1), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentIdleFrameError.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPCurrentIdleFrameError.setDescription('This counter is associated with the number of received GFP IDLE frames that are detected to be in error, encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfGFPCurrentCHecSbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 2), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentCHecSbError.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPCurrentCHecSbError.setDescription('This counter is associated with the number of received GFP frames that are detected to have single-bit errors in the Core header (i.e. cHEC field) only, encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfGFPCurrentPtiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 3), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentPtiMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPCurrentPtiMismatch.setDescription('This counter is associated with the number of rreceived GFP frames that are detected with a mismatch on the PTI field (i.e. value of PTI is not equal to Client Data or Management frame), encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfGFPCurrentExiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 4), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentExiMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPCurrentExiMismatch.setDescription('This counter is associated with the number of received GFP frames that are detected with a mismatch on the EXI field (i.e. value of EXI is not equal to NULL or LINEAR modes), encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfGFPCurrentUpiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 5), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentUpiMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPCurrentUpiMismatch.setDescription('This counter is associated with the number of received GFP frames that are detected with a mismatch on the UPI field (i.e. value of EXI is not equal to 00000001), encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfGFPCurrentTHecSbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 6), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentTHecSbError.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPCurrentTHecSbError.setDescription('This counter is associated with the number of received GFP frames that are detected to only have single-bit errors in the Type header (i.e. tHEC field), encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfGFPCurrentTHecMbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 7), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentTHecMbError.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPCurrentTHecMbError.setDescription('This counter is associated with the number of received GFP frames that are detected to only have multi-bit errors in the Type header (i.e. tHEC field), encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfGFPCurrentCidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 8), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentCidMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPCurrentCidMismatch.setDescription('This counter is associated with the number of received GFP frames that are detected to have a mismatch/unsupported value in the CID field only, encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfGFPCurrentEHecSbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 9), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentEHecSbError.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPCurrentEHecSbError.setDescription('This counter is associated with the number of received GFP frames that are detected to only have single-bit errors in the Extension header (i.e. eHEC field), encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfGFPCurrentEHecMbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 7, 1, 10), PerfCurrentCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPCurrentEHecMbError.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPCurrentEHecMbError.setDescription('This counter is associated with the number of received GFP frames that are detected to only have single-bit errors in the Extension header (i.e. eHEC field), encountered by a Virtual Interface in the current 15-minute interval.')
virtualIfGFPIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8), )
if mibBuilder.loadTexts: virtualIfGFPIntervalTable.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPIntervalTable.setDescription('The Virtual Interface GFP Interval table.')
virtualIfGFPIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1), ).setIndexNames((0, "RAD-SONET-MIB", "ifIndex"), (0, "RAD-SONET-MIB", "virtualIfIntervalNumber"))
if mibBuilder.loadTexts: virtualIfGFPIntervalEntry.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPIntervalEntry.setDescription('An entry in the Virtual Interface GFP Interval table.')
virtualIfGFPIntervalIdleFrameError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 1), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalIdleFrameError.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPIntervalIdleFrameError.setDescription('This counter is associated with the number of received GFP IDLE frames that are detected to be in error, encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfGFPIntervalCHecSbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 2), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalCHecSbError.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPIntervalCHecSbError.setDescription('This counter is associated with the number of received GFP frames that are detected to have single-bit errors in the Core header (i.e. cHEC field) only, encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfGFPIntervalPtiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 3), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalPtiMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPIntervalPtiMismatch.setDescription('This counter is associated with the number of rreceived GFP frames that are detected with a mismatch on the PTI field (i.e. value of PTI is not equal to Client Data or Management frame), encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfGFPIntervalExiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 4), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalExiMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPIntervalExiMismatch.setDescription('This counter is associated with the number of received GFP frames that are detected with a mismatch on the EXI field (i.e. value of EXI is not equal to NULL or LINEAR modes), encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfGFPIntervalUpiMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 5), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalUpiMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPIntervalUpiMismatch.setDescription('This counter is associated with the number of received GFP frames that are detected with a mismatch on the UPI field (i.e. value of EXI is not equal to 00000001), encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfGFPIntervalTHecSbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 6), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalTHecSbError.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPIntervalTHecSbError.setDescription('This counter is associated with the number of received GFP frames that are detected to only have single-bit errors in the Type header (i.e. tHEC field), encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfGFPIntervalTHecMbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 7), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalTHecMbError.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPIntervalTHecMbError.setDescription('This counter is associated withthe number of received GFP frames that are detected to only have multi-bit errors in the Type header (i.e. tHEC field), encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfGFPIntervalCidMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 8), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalCidMismatch.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPIntervalCidMismatch.setDescription('This counter is associated with the number of received GFP frames that are detected to have a mismatch/unsupported value in the CID field only, encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfGFPIntervalEHecSbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 9), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalEHecSbError.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPIntervalEHecSbError.setDescription('This counter is associated with the number of received GFP frames that are detected to only have single-bit errors in the Extension header (i.e. eHEC field), encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
virtualIfGFPIntervalEHecMbError = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 1, 6, 8, 1, 10), PerfIntervalCount()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGFPIntervalEHecMbError.setStatus('current')
if mibBuilder.loadTexts: virtualIfGFPIntervalEHecMbError.setDescription('This counter is associated with the the number of received GFP frames that are detected to only have multi-bit errors in the Extension header (i.e. eHEC field), encountered by a Virtual Interface in a particular 15-minute interval in the past 24 hours.')
prtSonetConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2))
prtSonetGen = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1))
prtSonetGenTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1, 1), )
if mibBuilder.loadTexts: prtSonetGenTable.setStatus('current')
if mibBuilder.loadTexts: prtSonetGenTable.setDescription('Sonet/SDH general port configuration table.')
prtSonetGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "prtSonetGenCnfgIdx"), (0, "RAD-SONET-MIB", "prtSonetGenIdx"))
if mibBuilder.loadTexts: prtSonetGenEntry.setStatus('current')
if mibBuilder.loadTexts: prtSonetGenEntry.setDescription(' An entry in the Sonet/SDH general port configuration table.')
prtSonetGenCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetGenCnfgIdx.setStatus('current')
if mibBuilder.loadTexts: prtSonetGenCnfgIdx.setDescription('This object indicates the Idx of the Config being accessed. Idx of 255 relates to the Temporary (Scratch) Config. For products that support several configurations, Set can be performed only to the Temporary Config (=255). ')
prtSonetGenIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetGenIdx.setStatus('current')
if mibBuilder.loadTexts: prtSonetGenIdx.setDescription("This object indicates a unique port or interface number. For numbering, see product's spec. For some products, the numbering can equal ifIndex.")
prtSonetGenSdThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notApplicable", 1), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetGenSdThreshold.setStatus('current')
if mibBuilder.loadTexts: prtSonetGenSdThreshold.setDescription('SD=Signal Degraded Threshold. Units: [10E-]. The threshold is 10E-x relative to the frequency of the data flow. x=3, 4, 5, 6, 7, 8, 9. n3= 10E-3 n4= 10E-4 n5= 10E-5 n6= 10E-6 n7= 10E-7 n8= 10E-8 n9= 10E-9 .')
prtSonetGenEedThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("notApplicable", 1), ("n3", 3), ("n4", 4), ("n5", 5), ("n6", 6), ("n7", 7), ("n8", 8), ("n9", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetGenEedThreshold.setStatus('current')
if mibBuilder.loadTexts: prtSonetGenEedThreshold.setDescription('EED=Excessive Error Defect Threshold. Units: [10E-]. The threshold is 10E-x relative to the frequency of the data flow. x=3, 4, 5, 6, 7, 8, 9. n3= 10E-3 n4= 10E-4 n5= 10E-5 n6= 10E-6 n7= 10E-7 n8= 10E-8 n9= 10E-9 .')
prtSonetGenBerEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetGenBerEnable.setStatus('current')
if mibBuilder.loadTexts: prtSonetGenBerEnable.setDescription('Controls the activation of the Line Ber (Bit Error Rate), means whether SD and EED threshold parameters will be enabled.')
prtSonetStm1 = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2))
prtSonetStm1Table = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1), )
if mibBuilder.loadTexts: prtSonetStm1Table.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1Table.setDescription('Sonet/SDH STM-1 port configuration table.')
prtSonetStm1Entry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "prtSonetStm1CnfgIdx"), (0, "RAD-SONET-MIB", "prtSonetStm1Idx"))
if mibBuilder.loadTexts: prtSonetStm1Entry.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1Entry.setDescription(' An entry in the Sonet/SDH STM-1 port configuration table.')
prtSonetStm1CnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetStm1CnfgIdx.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1CnfgIdx.setDescription('This object indicates the Idx of the Config being accessed. Idx of 255 relates to the Temporary (Scratch) Config. For products that support several configurations, Set can be performed only to the Temporary Config (=255). ')
prtSonetStm1Idx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetStm1Idx.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1Idx.setDescription("This object indicates a unique port or interface number. For numbering, see product's spec. For some products, the numbering can equal ifIndex.")
prtSonetStm1ClockSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("internal", 2), ("lbt", 3), ("systemClk", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1ClockSrc.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1ClockSrc.setDescription('Clock Source of the STM-1 port. lbt = Loop Back Timing.')
prtSonetStm1DccMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("d1ToD3", 3), ("d4ToD12", 4), ("d1", 5), ("d2", 6), ("d3", 7), ("d4", 8), ("d5", 9), ("d6", 10), ("d7", 11), ("d8", 12), ("d9", 13), ("d10", 14), ("d11", 15), ("d12", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1DccMode.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1DccMode.setDescription('DCC Mode. DCC=Data Communication Channel. d1ToD3 = D1-D3 bytes are used (RS=Regeneration Section). d4ToD12= D4-D12 bytes are used (MS=Multiplexing Section). d1.... d12 enable user to select single DCC byte ')
prtSonetStm1RoutingProt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("proprietary", 3), ("rip2", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1RoutingProt.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1RoutingProt.setDescription('Routing Protocol.')
prtSonetStm1MngProt = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 6, 7, 8))).clone(namedValues=NamedValues(("notApplicable", 1), ("proprietary", 3), ("ppp", 5), ("frameRelay", 6), ("hdlc", 7), ("lapdOverHdlc", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1MngProt.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1MngProt.setDescription('Management Protocol over DCC: Proprietary, PPP, Frame Relay, HDLC or LAPD over HDLC . ppp = according to STD-51 ( rfc1661/1662) pppType1= ppp without sendind ADD CONTROL overhead in Link Control Protocol (LCP) packets')
prtSonetStm1OperationalMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("terminal", 2), ("linear", 3), ("linearProtection", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1OperationalMode.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1OperationalMode.setDescription('Operational Mode. linear - cannot be selected when there is Redundancy between the STM-1 ports.')
prtSonetStm1VoiceChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("none", 2), ("e1Byte", 3), ("e2Byte", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1VoiceChannel.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1VoiceChannel.setDescription('This parameter enable user to select whether voice channel will be transferred using E1 byte, E2 Byte, or not at all.')
prtSonetStm1OutputRate = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1OutputRate.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1OutputRate.setDescription('This parameter indicates the output rate in cells/sec, which is supported per port.')
prtSonetStm1S1ProtocolClock = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3), ("transparent", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1S1ProtocolClock.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1S1ProtocolClock.setDescription('This parameter allows user to select whether to enable use of Remote Side Clock according to the Protocol passed on S1 Bit.')
prtSonetStm1GatewayRingSubnetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1GatewayRingSubnetAddress.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1GatewayRingSubnetAddress.setDescription('This parameter defines subnet for static routing, together with prtSonetStm1GatewayRingSubnetMask')
prtSonetStm1GatewayRingSubnetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 12), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1GatewayRingSubnetMask.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1GatewayRingSubnetMask.setDescription('This parameter defines subnet for static routing, together with prtSonetStm1GatewayRingSubnetAddress')
prtSonetStm1MngProtDeviationType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 2, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("standard", 2), ("type1", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetStm1MngProtDeviationType.setStatus('current')
if mibBuilder.loadTexts: prtSonetStm1MngProtDeviationType.setDescription('This parameter is used in conjunction with prtSonetStm1MngProt to define management protocol used & type of deviation (if exist) from standard. Standard = no deviation from standard protocol Type1 = PPP without sending Address and Control overhead in Link Control Protocol (LCP) packets')
prtSonetVc = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3))
prtSonetVcTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1), )
if mibBuilder.loadTexts: prtSonetVcTable.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcTable.setDescription('Sonet/SDH VC port configuration table.')
prtSonetVcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "prtSonetVcCnfgIdx"), (0, "RAD-SONET-MIB", "prtSonetVcIdx"))
if mibBuilder.loadTexts: prtSonetVcEntry.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcEntry.setDescription(' An entry in the Sonet/SDH VC port configuration table.')
prtSonetVcCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetVcCnfgIdx.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcCnfgIdx.setDescription('This object indicates the Idx of the Config being accessed. Idx of 255 relates to the Temporary (Scratch) Config. For products that support several configurations, Set can be performed only to the Temporary Config (=255). ')
prtSonetVcIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetVcIdx.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcIdx.setDescription("This object indicates a unique port or interface number. For numbering, see product's spec. For some products, the numbering can equal ifIndex.")
prtSonetVcJTxPathTraceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetVcJTxPathTraceEnable.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcJTxPathTraceEnable.setDescription('Enable/Disable Transmitting Jy Path Trace. y=1, 2: J1 - for VC-4 layer J2 - for VC-12 layer.')
prtSonetVcJRxPathTraceEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetVcJRxPathTraceEnable.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcJRxPathTraceEnable.setDescription('Enable/Disable checking Jy Path Trace. y=1, 2: J1 - for VC-4 layer J2 - for VC-12 layer.')
prtSonetVcJPathTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetVcJPathTrace.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcJPathTrace.setDescription("Jy Path Trace. y=1, 2: J1 - for VC-4 layer J2 - for VC-12 layer. This object is applicable only if one of the previous 2 objects is 'enable'.")
prtSonetVcConnect = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetVcConnect.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcConnect.setDescription('Connect VCn (n - 11,12,2,3,4) port (yes/no).')
prtSonetVcSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 1, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prtSonetVcSignalLabel.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcSignalLabel.setDescription('Signal Label. For VC-3: The SONET standard defines the C2 byte as the path signal label. The purpose of this byte is to communicate the payload type being encapsulated by the SONET Framing OverHead. It allows a single interface to transport multiple payload types simultaneously. For VC-12, VT-1.5: VT path overhead V5 byte allocates bits 5-7 for VT Path Signal Label, to indicate the content of the VT SPE. 000 Unequipped 001 Equipped : non-specific payload 010 Asynchronous mapping 011 Bit synchronous mapping (no longer valid for DS1) 100 Byte synchronous mapping 101 Unassigned 110 Unassigned 111 Unassigned Agents that do not support this feature will send SIZE 0.')
prtSonetTuTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2), )
if mibBuilder.loadTexts: prtSonetTuTable.setStatus('current')
if mibBuilder.loadTexts: prtSonetTuTable.setDescription("The write operation into the Table's Objects is valid only for the TmpCnfg entry (Scratch).")
prtSonetTuEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1), ).setIndexNames((0, "RAD-SONET-MIB", "prtSonetTuCnfgIdx"), (0, "RAD-SONET-MIB", "prtSonetTuPrtIdx"), (0, "RAD-SONET-MIB", "prtSonetTuIdx"), (0, "RAD-SONET-MIB", "prtSonetTuConPrtIdx"))
if mibBuilder.loadTexts: prtSonetTuEntry.setStatus('current')
if mibBuilder.loadTexts: prtSonetTuEntry.setDescription('An entry in table.')
prtSonetTuCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetTuCnfgIdx.setStatus('current')
if mibBuilder.loadTexts: prtSonetTuCnfgIdx.setDescription('This object indicates the Idx of the Config being accessed. Idx of 255 relates to the Temporary (Scratch) Config. For products that support several configurations, Set can be performed only to the Temporary Config (=255). ')
prtSonetTuPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetTuPrtIdx.setStatus('current')
if mibBuilder.loadTexts: prtSonetTuPrtIdx.setDescription("This object indicates a unique port or interface number. For port numbering, see product's spec. For some products, the numbering can equal ifIndex.")
prtSonetTuIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetTuIdx.setStatus('current')
if mibBuilder.loadTexts: prtSonetTuIdx.setDescription('This object indicates a unique TU (Tributary Unit) within VC-4. The valid TUs are 1..63.')
prtSonetTuConPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetTuConPrtIdx.setStatus('current')
if mibBuilder.loadTexts: prtSonetTuConPrtIdx.setDescription("This object indicates the connected port, when prtSonetTuType=connect. For port numbering, see product's spec. For some products, the numbering can equal ifIndex. notApplicable - will be indicated as 100.")
prtSonetTuType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("connect", 2), ("bypass", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prtSonetTuType.setStatus('current')
if mibBuilder.loadTexts: prtSonetTuType.setDescription('The type of TU (Tributary Unit). connect - connected to one of the E1 ports. bypass - bypassed to the other VC4 port. TUs that are not connected or bypassed, will not exist in this table.')
prtSonetTuMode = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("addAndDrop", 2), ("add", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prtSonetTuMode.setStatus('current')
if mibBuilder.loadTexts: prtSonetTuMode.setDescription('TU Mode of connection. addAndDrop - Add & Drop add - Add (TU receives from the E1 ports).')
prtSonetTuRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 3, 2, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prtSonetTuRowStatus.setStatus('current')
if mibBuilder.loadTexts: prtSonetTuRowStatus.setDescription('Creation/Deletion of rows in the table.')
prtSonetXConnect = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3))
prtSonetXConnectTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1), )
if mibBuilder.loadTexts: prtSonetXConnectTable.setStatus('current')
if mibBuilder.loadTexts: prtSonetXConnectTable.setDescription("The write operation into the Table's Objects is valid only for the TmpCnfg entry (Scratch).")
prtSonetXConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "prtSonetXConnectCnfgIdx"), (0, "RAD-SONET-MIB", "prtSonetXConnectPrtIdx"), (0, "RAD-SONET-MIB", "prtSonetXConnectConPrtIdx"), (0, "RAD-SONET-MIB", "prtSonetXConnectAUGIdx"), (0, "RAD-SONET-MIB", "prtSonetXConnectTUG3Idx"), (0, "RAD-SONET-MIB", "prtSonetXConnectTUG2Idx"), (0, "RAD-SONET-MIB", "prtSonetXConnectTUnIdx"))
if mibBuilder.loadTexts: prtSonetXConnectEntry.setStatus('current')
if mibBuilder.loadTexts: prtSonetXConnectEntry.setDescription('An entry in table.')
prtSonetXConnectCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetXConnectCnfgIdx.setStatus('current')
if mibBuilder.loadTexts: prtSonetXConnectCnfgIdx.setDescription('This object indicates the Idx of the Config being accessed. Idx of 255 relates to the Temporary (Scratch) Config. For products that support several configurations, Set can be performed only to the Temporary Config (=255). ')
prtSonetXConnectPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetXConnectPrtIdx.setStatus('current')
if mibBuilder.loadTexts: prtSonetXConnectPrtIdx.setDescription("This object indicates a unique port or interface number. For port numbering, see product's spec. For some products, the numbering can equal ifIndex.")
prtSonetXConnectConPrtIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetXConnectConPrtIdx.setStatus('current')
if mibBuilder.loadTexts: prtSonetXConnectConPrtIdx.setDescription("This object indicates the connected port. For port numbering, see product's spec. For some products, the numbering can equal ifIndex. notApplicable - will be indicated as 255.")
prtSonetXConnectAUGIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetXConnectAUGIdx.setStatus('current')
if mibBuilder.loadTexts: prtSonetXConnectAUGIdx.setDescription('This object indicates an AUG (Administrative Unit Group) within STM-N. The valid AUGs values are: 1 for STM-1 1...4 for STM-4, 1..16 for STM-16 and 1..64 for STM-64 (STM-64) 255 designates NA.')
prtSonetXConnectTUG3Idx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetXConnectTUG3Idx.setStatus('current')
if mibBuilder.loadTexts: prtSonetXConnectTUG3Idx.setDescription('This object indicates a TUG-3 (Tributary Unit Group 3) within VC-4. The valid TUG3s are values are 1..3. and 255 which designates NA ')
prtSonetXConnectTUG2Idx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetXConnectTUG2Idx.setStatus('current')
if mibBuilder.loadTexts: prtSonetXConnectTUG2Idx.setDescription("This object indicates a TUG2 (Tributary Unit Group 2 ) within VC-3. The valid TUG2's values are 1..7 and 255 which designates NA ")
prtSonetXConnectTUnIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetXConnectTUnIdx.setStatus('current')
if mibBuilder.loadTexts: prtSonetXConnectTUnIdx.setDescription('This object indicates a TUn within TUG-2 or TUG-3 (Tributary Unit n, where n is 2, 12 or 11 within TUG-2, or 3 within TUG-3) valid values are 1 for TU-2 1 for TU-3 1..4 for TU-11 1..3 for TU-12 255 designates NA')
prtSonetXConnectRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prtSonetXConnectRowStatus.setStatus('current')
if mibBuilder.loadTexts: prtSonetXConnectRowStatus.setDescription('Creation/Deletion of rows in the table.')
prtSonetXConnectDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("rx", 2), ("tx", 3), ("both", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prtSonetXConnectDirection.setStatus('current')
if mibBuilder.loadTexts: prtSonetXConnectDirection.setDescription('TU direction of connection. rx=Drop tx=Add both = Add & Drop ')
prtSonetXConnectTuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("notApplicable", 1), ("tu2", 2), ("tu3", 3), ("tu11", 4), ("tu12", 5)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: prtSonetXConnectTuNumber.setStatus('current')
if mibBuilder.loadTexts: prtSonetXConnectTuNumber.setDescription('This object indicates which TU is used in prtSonetXConnectTUnIdx ')
prtSonetStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 4))
prtSonetVcStatTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 4, 1), )
if mibBuilder.loadTexts: prtSonetVcStatTable.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcStatTable.setDescription('VC Status Table ')
prtSonetVcStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 4, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "prtSonetVcIdx"))
if mibBuilder.loadTexts: prtSonetVcStatEntry.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcStatEntry.setDescription('An entry in the VC status Table.')
prtSonetVcRxJPathTrace = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 4, 1, 1, 1), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 62))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetVcRxJPathTrace.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcRxJPathTrace.setDescription('Jy Path Trace value received from network. y=1, 2: J1 - for VC-4 layer J2 - for VC-12 layer.')
prtSonetVcRxSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetVcRxSignalLabel.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcRxSignalLabel.setDescription('Signal Label received from network. For VC-3: The SONET standard defines the C2 byte as the path signal label. The purpose of this byte is to communicate the payload type being encapsulated by the SONET Framing OverHead. It allows a single interface to transport multiple payload types simultaneously. For VC-12, VT-1.5: VT path overhead V5 byte allocates bits 5-7 for VT Path Signal Label, to indicate the content of the VT SPE. 000 - Unequipped 001 - Equipped - non specific payload 010 - Asynchronous Mapping 011 - Bit Synchronous Mapping (no longer used) 100 - Byte Synchronous Mapping (TU11 or TU12) 101 - Extended Signal Label for Virtual Concatenation Applications (FCD-155 Default) 110 - Test Signal (0.181) (ITU) 111 - VC AIS (ITU)')
prtSonetVcLcasSourceState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("fixed", 2), ("add", 3), ("norm", 4), ("eos", 5), ("idle", 6), ("dnu", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetVcLcasSourceState.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcLcasSourceState.setDescription('Fixed - This is an indication that this end uses fixed bandwidth (non-LCAS mode) Add - This member is about to be added to the group Norm - Normal transmission. EOS - End of Sequence indication and Normal transmission. Idle - IDLE This member is not part of the group or about to be removed. Dnu - Do Not use - Do Not Use (the payload) the Sk side reported FAIL status.')
prtSonetVcLcasSinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("notApplicable", 1), ("fixed", 2), ("add", 3), ("norm", 4), ("eos", 5), ("idle", 6), ("dnu", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: prtSonetVcLcasSinkState.setStatus('current')
if mibBuilder.loadTexts: prtSonetVcLcasSinkState.setDescription('Fixed - This is an indication that this end uses fixed bandwidth (non-LCAS mode) Add - This member is about to be added to the group Norm - Normal transmission. EOS - End of Sequence indication and Normal transmission. Idle - IDLE This member is not part of the group or about to be removed. Dnu - Do Not use - Do Not Use (the payload) the Sk side reported FAIL status.')
prtVcGroupCnfg = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4))
vcGroupCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1), )
if mibBuilder.loadTexts: vcGroupCnfgTable.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgTable.setDescription('The Virtual Concatenation Group configuration table.')
vcGroupCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "vcGroupCnfgIdx"), (0, "RAD-SONET-MIB", "vcGroupCnfgNumber"))
if mibBuilder.loadTexts: vcGroupCnfgEntry.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgEntry.setDescription('An entry in the Virtual Concatenation Group configuration table.')
vcGroupCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vcGroupCnfgIdx.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgIdx.setDescription('This object indicates the Idx of the Config being accessed. Idx of 255 relates to the Temporary (Scratch) Config. For products that support several configurations, Set can be performed only to the Temporary Config (=255). ')
vcGroupCnfgNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: vcGroupCnfgNumber.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgNumber.setDescription('Virtual Concatenation Group Number. For FCD=155 up to eight groups are defined valid values are 1..8')
vcGroupCnfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgRowStatus.setDescription('Creation/Deletion of rows in the table.')
vcGroupCnfgVcType = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("notApplicable", 1), ("vc12", 2), ("vc3", 3), ("vc4", 4), ("vt1dot5", 5), ("sts1", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgVcType.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgVcType.setDescription('User may select type of SDH Virtual Containers (VC) (SONET Virtual Tributaries VT ) to be concatenated in this Virtual Concatenation Group. For SDH, values 2,3,4 are valid. For SONET, values 5 and 6 are valid.')
vcGroupCnfgNoOfVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 84))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgNoOfVCs.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgNoOfVCs.setDescription('User may select number of Virtual Containers (VC) (SONET Virtual Tributaries VT ) to be concatenated in this Virtual Concatenation Group. Valid range for this number depends on type VC selected by vcGroupCnfgVCType For SDH, up to 63 VC12, or up to 3 VC3, or 1 VC4 are valid For SONET, up to 84 VT1.5 without LCAS, or 64 VT1.5 under LCAS control. or up tp 3 STS-1/SPE, or 1 STS-3')
vcGroupCnfgLCAS = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("lcasNotActive", 2), ("lcasActive", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgLCAS.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgLCAS.setDescription('This object controls Link Capacity Adjustment Scheme (LCAS) activation.')
vcGroupCnfgEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("laps", 2), ("lapf", 3), ("gfp", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgEncapsulation.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgEncapsulation.setDescription('This object enables user to select encapsulation method.')
vcGroupCnfgGroupIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 8), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcGroupCnfgGroupIfIndex.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgGroupIfIndex.setDescription('The ifIndex assigend to this group.')
vcGroupCnfgRip2 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgRip2.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgRip2.setDescription('This object controls RIP 2. User may select to send RIP 2 message over selected group or not')
vcGroupCnfgGfpChId = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgGfpChId.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgGfpChId.setDescription('Generic Framing Procedure (GFP) Channel ID, Valid only when vcGroupCnfgEncapsulation = gfp (4) Valid values are 0x00 - oxFF (hex) ')
vcGroupCnfgK4 = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("no", 2), ("yes", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgK4.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgK4.setDescription('This object controls whether K4 byte (of Line Overhead) is used as an indication for virtual concatenation (VCAT). This object is applicable, when VCG includes only a single Virtual Container (VC) (or SONET VT) ')
vcGroupCnfgExSignalLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 1)).setFixedLength(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgExSignalLabel.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgExSignalLabel.setDescription('Extended Signal Label. Relevant only when vcGroupCnfgK4 = yes(3). Agents that do not support this feature will send SIZE 0.')
vcGroupCnfgLcasMinNoOfVCs = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 83))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcGroupCnfgLcasMinNoOfVCs.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgLcasMinNoOfVCs.setDescription("Minimum number of VC's to declare alarm, in LCAS mode. Applicable only when LCAS is active (vcGroupCnfgLCAS =lcasActive) 1...63 for SDH, 1...84 for SONET 0= not applicable. ")
vcGroupCnfgLcasStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("notApplicable", 1), ("belowMinNoOfVCs", 2), ("withinRange", 3), ("allNorm", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vcGroupCnfgLcasStatus.setStatus('current')
if mibBuilder.loadTexts: vcGroupCnfgLcasStatus.setDescription('This object summarize LCAS states of all VCs in VCG: belowMinNoOfVCs - Number of VCs in Norm state is less than the minimum number of VCs (indicated by vcGroupCnfgLcasMinNoOfVCs) withinRange - Number of VCs in Norm state is higher than the minimum number of VCs indicated by vcGroupCnfgLcasMinNoOfVCs) but is lower than Number of VCs mapped allNorm - Number of VCs in Norm state equals number of mapped VCs. ')
vcgGfpMuxCnfgTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2), )
if mibBuilder.loadTexts: vcgGfpMuxCnfgTable.setStatus('current')
if mibBuilder.loadTexts: vcgGfpMuxCnfgTable.setDescription('The Virtual Concatenation Group GFP Mux configuration table.')
vcgGfpMuxCnfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2, 1), ).setIndexNames((0, "RAD-SONET-MIB", "vcgGfpMuxCnfgIdx"), (0, "RAD-SONET-MIB", "vcgGfpMuxCnfgMuxNumber"))
if mibBuilder.loadTexts: vcgGfpMuxCnfgEntry.setStatus('current')
if mibBuilder.loadTexts: vcgGfpMuxCnfgEntry.setDescription('An entry in the Virtual Concatenation Group GFP Mux configuration table.')
vcgGfpMuxCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255)))
if mibBuilder.loadTexts: vcgGfpMuxCnfgIdx.setStatus('current')
if mibBuilder.loadTexts: vcgGfpMuxCnfgIdx.setDescription('This object indicates the Index of the configuration being accessed. Index of 255 relates to the Temporary (Scratch) coninguration. For products that support several configurations, Set can be performed only to the Temporary Config (=255). ')
vcgGfpMuxCnfgMuxNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: vcgGfpMuxCnfgMuxNumber.setStatus('current')
if mibBuilder.loadTexts: vcgGfpMuxCnfgMuxNumber.setDescription('Virtual Concatenation Group GFP Mux Number. For FCD=155 up to 4 GFP muxes can be created.')
vcgGfpMuxCnfgRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgGfpMuxCnfgRowStatus.setStatus('current')
if mibBuilder.loadTexts: vcgGfpMuxCnfgRowStatus.setDescription('Creation/Deletion of rows in the table.')
vcgGfpMuxCnfgMuxName = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2, 1, 4), SnmpAdminString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgGfpMuxCnfgMuxName.setStatus('current')
if mibBuilder.loadTexts: vcgGfpMuxCnfgMuxName.setDescription('Virtual Concatenation Group, GFP Mux name.')
vcgGfpMuxCnfgPrimeGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgGfpMuxCnfgPrimeGroup.setStatus('current')
if mibBuilder.loadTexts: vcgGfpMuxCnfgPrimeGroup.setDescription('Index of Virtual Concatenation Group used as Primary for the GFP mux created for FCD 155 up to 8 Virtual Concatenation Group are defined: 1 -> Virtual Concatenation Group 1 2 -> Virtual Concatenation Group 2 3 -> Virtual Concatenation Group 3 4 -> Virtual Concatenation Group 4 5 -> Virtual Concatenation Group 5 6 -> Virtual Concatenation Group 6 7 -> Virtual Concatenation Group 7 8 -> Virtual Concatenation Group 8 ')
vcgGfpMuxCnfgGrpBwAlloc = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 4, 2, 1, 6), OctetString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vcgGfpMuxCnfgGrpBwAlloc.setStatus('current')
if mibBuilder.loadTexts: vcgGfpMuxCnfgGrpBwAlloc.setDescription('This object indicates the allocated bandwidth (BW) to each Virtual Concatenation Group (VCG). Each nibble indicates BW percentage, in 12.5% steps, assigned to a group. For FCD-155, there may be 4 or 8 VCGs. When only 4 VCG exists, only two octets are used. In current GFP Mux,one VCG is identified as primary group by vcGfpMuxConfPrimeGroup. Other VCGs may be secondaries. VCG with allocated BW value of zero does not belong to the GFPmux defined by GFP Mux number. ---------------------------------------- | Octet 0 | Octet 1 | |Nibble 4 | Nibble 3| Nibble 2| Nibble 1| MSB | 7 6 5 4 | 3 2 1 0 | 7 6 5 4 | 3 2 1 0 | +-------------------+-------------------+ VCG1 VCG2 VCG 3 VCG4 ---------------------------------------- | Octet 3 | Octet 4 | |Nibble 4 | Nibble 3| Nibble 2| Nibble 1| | 7 6 5 4 | 3 2 1 0 | 7 6 5 4 | 3 2 1 0 | LSB +-------------------+-------------------+ VCG5 VCG6 VCG 7 VCG8 Nibble value - BW Percentage (0...7) (0 ...87.5%) 1 0001 12.5 % 2 0010 25% 3 0011 37.5 ..... 7 0111 87.5% at least one nibble must be greater that zero. Sum of alloacted BW must be 100%. Primary VCG BW must be greater than zero.')
virtualIfConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 5))
virtualIfGenTable = MibTable((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 5, 1), )
if mibBuilder.loadTexts: virtualIfGenTable.setStatus('current')
if mibBuilder.loadTexts: virtualIfGenTable.setDescription('Sonet/SDH general port configuration table.')
virtualIfGenEntry = MibTableRow((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 5, 1, 1), ).setIndexNames((0, "RAD-SONET-MIB", "virtualIfGenCnfgIdx"), (0, "RAD-SONET-MIB", "virtualIfGenIdx"))
if mibBuilder.loadTexts: virtualIfGenEntry.setStatus('current')
if mibBuilder.loadTexts: virtualIfGenEntry.setDescription(' An entry in the Sonet/SDH general port configuration table.')
virtualIfGenCnfgIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 5, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGenCnfgIdx.setStatus('current')
if mibBuilder.loadTexts: virtualIfGenCnfgIdx.setDescription('This object indicates the Idx of the Config being accessed. Idx of 255 relates to the Temporary (Scratch) Config. For products that support several configurations, Set can be performed only to the Temporary Config (=255). ')
virtualIfGenIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualIfGenIdx.setStatus('current')
if mibBuilder.loadTexts: virtualIfGenIdx.setDescription("This object indicates a unique port or interface number. For numbering, see product's spec. For some products, the numbering can equal ifIndex.")
virtualIfGenFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 164, 3, 1, 6, 2, 2, 5, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("fcsEnable", 2), ("fcsDisable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: virtualIfGenFrameFormat.setStatus('current')
if mibBuilder.loadTexts: virtualIfGenFrameFormat.setDescription('The frame format. fcsEnabe = Frame will be sent with the FCS bits. fcsDisable = Frame will be sent without the FCS bits .')
mibBuilder.exportSymbols("RAD-SONET-MIB", vcGroupCnfgLcasMinNoOfVCs=vcGroupCnfgLcasMinNoOfVCs, prtSonetCurrentLineAIS=prtSonetCurrentLineAIS, virtualIfCurrentTxFrames=virtualIfCurrentTxFrames, prtSonetGenEntry=prtSonetGenEntry, prtSonetMediumTable=prtSonetMediumTable, virtualIfGFPIntervalIdleFrameError=virtualIfGFPIntervalIdleFrameError, prtPathCurrentEntry=prtPathCurrentEntry, virtualIfIntervalFcsError=virtualIfIntervalFcsError, virtualIfGFPIntervalTHecSbError=virtualIfGFPIntervalTHecSbError, prtSonetStm1S1ProtocolClock=prtSonetStm1S1ProtocolClock, prtSonetIntervalLOC=prtSonetIntervalLOC, prtSonetVc=prtSonetVc, prtSonetVcIdx=prtSonetVcIdx, virtualIfGFPCurrentTHecSbError=virtualIfGFPCurrentTHecSbError, prtSonetXConnectRowStatus=prtSonetXConnectRowStatus, virtualIfGFPCurrentUpiMismatch=virtualIfGFPCurrentUpiMismatch, prtSonetVcCnfgIdx=prtSonetVcCnfgIdx, virtualIfCurrentTxAbortFrames=virtualIfCurrentTxAbortFrames, virtualIfGFPCurrentEHecMbError=virtualIfGFPCurrentEHecMbError, prtSonetVcJTxPathTraceEnable=prtSonetVcJTxPathTraceEnable, prtSonetStm1GatewayRingSubnetAddress=prtSonetStm1GatewayRingSubnetAddress, prtSonetMediumEntry=prtSonetMediumEntry, virtualIfIntervalByteDestuffingViolation=virtualIfIntervalByteDestuffingViolation, prtSonetStm1OperationalMode=prtSonetStm1OperationalMode, vcGroupCnfgNumber=vcGroupCnfgNumber, vcGroupCnfgVcType=vcGroupCnfgVcType, prtSonetCurrentPathAIS=prtSonetCurrentPathAIS, virtualIfGFPIntervalTable=virtualIfGFPIntervalTable, prtSonetXConnectEntry=prtSonetXConnectEntry, prtSonetIntervalLOP=prtSonetIntervalLOP, virtualIfLAPFCurrentNlpidMismatch=virtualIfLAPFCurrentNlpidMismatch, virtualIfLAPFIntervalDlciMismatch=virtualIfLAPFIntervalDlciMismatch, virtualIfCurrentByteDestuffingViolation=virtualIfCurrentByteDestuffingViolation, virtualIfGFPCurrentTable=virtualIfGFPCurrentTable, virtualIfGFPIntervalUpiMismatch=virtualIfGFPIntervalUpiMismatch, vcGroupCnfgExSignalLabel=vcGroupCnfgExSignalLabel, virtualIfCurrentMaxLengthViolation=virtualIfCurrentMaxLengthViolation, prtPathIntervalEntry=prtPathIntervalEntry, virtualIfIntervalTxAbortFrames=virtualIfIntervalTxAbortFrames, prtSonetCurrentLineFERF=prtSonetCurrentLineFERF, prtSonetConfig=prtSonetConfig, prtSonetVcJRxPathTraceEnable=prtSonetVcJRxPathTraceEnable, virtualIfCurrentRxFrames=virtualIfCurrentRxFrames, prtSonetVcRxJPathTrace=prtSonetVcRxJPathTrace, vcGroupCnfgEncapsulation=vcGroupCnfgEncapsulation, virtualIfGFPCurrentCidMismatch=virtualIfGFPCurrentCidMismatch, virtualIfGFPCurrentEntry=virtualIfGFPCurrentEntry, prtSonetIntervalPathFEBE=prtSonetIntervalPathFEBE, virtualIfIntervalAdressMismatch=virtualIfIntervalAdressMismatch, virtualIfLAPFIntervalMacTxFrames=virtualIfLAPFIntervalMacTxFrames, vcGroupCnfgK4=vcGroupCnfgK4, prtSonetCurrentLineFEBE=prtSonetCurrentLineFEBE, vcgGfpMuxCnfgGrpBwAlloc=vcgGfpMuxCnfgGrpBwAlloc, prtSonetCurrentPathBIP=prtSonetCurrentPathBIP, prtSonetPathIntervalTable=prtSonetPathIntervalTable, virtualIfCurrentAdressMismatch=virtualIfCurrentAdressMismatch, prtSonetIntervalLSV=prtSonetIntervalLSV, virtualIfCurrentFcsError=virtualIfCurrentFcsError, prtSonetIntervalLOS=prtSonetIntervalLOS, prtSonetCurrentSectionBIP=prtSonetCurrentSectionBIP, prtSonetCurrentLineBIP=prtSonetCurrentLineBIP, vcgGfpMuxCnfgMuxName=vcgGfpMuxCnfgMuxName, virtualIfCurrentControlMismatch=virtualIfCurrentControlMismatch, virtualIfLAPFIntervalPidMismatch=virtualIfLAPFIntervalPidMismatch, prtSonetVcJPathTrace=prtSonetVcJPathTrace, prtSonetGen=prtSonetGen, prtSectionLineIntervalEntry=prtSectionLineIntervalEntry, virtualIfCurrentRxAbortFrames=virtualIfCurrentRxAbortFrames, prtSonetGenBerEnable=prtSonetGenBerEnable, virtualIfLAPFIntervalMacRxFrames=virtualIfLAPFIntervalMacRxFrames, vcgGfpMuxCnfgPrimeGroup=vcgGfpMuxCnfgPrimeGroup, virtualIfGFPIntervalEHecSbError=virtualIfGFPIntervalEHecSbError, virtualIfLAPFIntervalNlpidMismatch=virtualIfLAPFIntervalNlpidMismatch, prtSonetIntervalLineBIP=prtSonetIntervalLineBIP, vcgGfpMuxCnfgIdx=vcgGfpMuxCnfgIdx, prtSonetCurrentUAS=prtSonetCurrentUAS, prtSonetCurrentLOC=prtSonetCurrentLOC, virtualIfIntervalEntry=virtualIfIntervalEntry, prtSonetTuIdx=prtSonetTuIdx, vcGroupCnfgNoOfVCs=vcGroupCnfgNoOfVCs, prtSonetStm1OutputRate=prtSonetStm1OutputRate, prtSonetTuRowStatus=prtSonetTuRowStatus, prtSonetVcRxSignalLabel=prtSonetVcRxSignalLabel, prtSonetStm1=prtSonetStm1, prtSonetCurrentPathFEBE=prtSonetCurrentPathFEBE, vcGroupCnfgLcasStatus=vcGroupCnfgLcasStatus, prtSonetStm1MngProtDeviationType=prtSonetStm1MngProtDeviationType, vcgGfpMuxCnfgEntry=vcgGfpMuxCnfgEntry, virtualIfIntervalBelowMinThreshold=virtualIfIntervalBelowMinThreshold, virtualIfLAPSIntervalEntry=virtualIfLAPSIntervalEntry, prtSonetTuTable=prtSonetTuTable, prtSonetIntervalPathAIS=prtSonetIntervalPathAIS, prtSonetXConnectPrtIdx=prtSonetXConnectPrtIdx, prtSonetCurrentLSV=prtSonetCurrentLSV, prtSonetVcLcasSourceState=prtSonetVcLcasSourceState, prtSonetIntervalLineAIS=prtSonetIntervalLineAIS, prtSonetStatus=prtSonetStatus, virtualIfLAPFCurrentMacRxFrames=virtualIfLAPFCurrentMacRxFrames, prtSonetCurrentStatus=prtSonetCurrentStatus, virtualIfIntervalRxFrames=virtualIfIntervalRxFrames, prtSonetStm1MngProt=prtSonetStm1MngProt, prtSonetStm1VoiceChannel=prtSonetStm1VoiceChannel, virtualIfLAPSCurrentEntry=virtualIfLAPSCurrentEntry, prtSonetXConnectTable=prtSonetXConnectTable, virtualIfCurrentActiveVC=virtualIfCurrentActiveVC, prtSonetLineIntervalNumber=prtSonetLineIntervalNumber, prtSonetTuPrtIdx=prtSonetTuPrtIdx, virtualIfGenCnfgIdx=virtualIfGenCnfgIdx, prtSonetCurrentLOF=prtSonetCurrentLOF, prtSonetTuCnfgIdx=prtSonetTuCnfgIdx, virtualIfCurrentMinActiveVC=virtualIfCurrentMinActiveVC, prtSonetMediumTimeElapsed=prtSonetMediumTimeElapsed, prtSonetSectionLineCurrentTable=prtSonetSectionLineCurrentTable, prtSonetGenIdx=prtSonetGenIdx, prtSonetVcSignalLabel=prtSonetVcSignalLabel, prtSonetXConnect=prtSonetXConnect, prtSonetVcStatTable=prtSonetVcStatTable, prtSectionLineCurrentEntry=prtSectionLineCurrentEntry, virtualIfGenEntry=virtualIfGenEntry, prtSonetTuConPrtIdx=prtSonetTuConPrtIdx, virtualIfLAPFCurrentTable=virtualIfLAPFCurrentTable, prtSonetXConnectTuNumber=prtSonetXConnectTuNumber, sonetInterface=sonetInterface, prtSonetIntervalES=prtSonetIntervalES, prtSonetGenEedThreshold=prtSonetGenEedThreshold, virtualIfIntervalTable=virtualIfIntervalTable, prtSonetStm1Idx=prtSonetStm1Idx, virtualIfIntervalMinLengthViolation=virtualIfIntervalMinLengthViolation, prtSonetXConnectTUnIdx=prtSonetXConnectTUnIdx, virtualIfGFPIntervalCidMismatch=virtualIfGFPIntervalCidMismatch, prtSonetCurrentSLM=prtSonetCurrentSLM, virtualIfGFPIntervalEHecMbError=virtualIfGFPIntervalEHecMbError, vcgGfpMuxCnfgMuxNumber=vcgGfpMuxCnfgMuxNumber, prtSonetVcEntry=prtSonetVcEntry, prtSonetTuEntry=prtSonetTuEntry, virtualIfLAPSCurrentTable=virtualIfLAPSCurrentTable, prtSonetCurrentLOS=prtSonetCurrentLOS, vcgGfpMuxCnfgTable=vcgGfpMuxCnfgTable, prtSonetTuType=prtSonetTuType, virtualIfGFPCurrentPtiMismatch=virtualIfGFPCurrentPtiMismatch, prtSonetMediumValidIntervals=prtSonetMediumValidIntervals, virtualIfLAPFIntervalTable=virtualIfLAPFIntervalTable, virtualIfGFPIntervalCHecSbError=virtualIfGFPIntervalCHecSbError, prtSonetIntervalStatus=prtSonetIntervalStatus, virtualIfLAPSCurrentSapiMismatch=virtualIfLAPSCurrentSapiMismatch, virtualIfIntervalMaxLengthViolation=virtualIfIntervalMaxLengthViolation, prtSonetCurrentSES=prtSonetCurrentSES, virtualIfIntervalMinActiveVC=virtualIfIntervalMinActiveVC, prtSonetIntervalPathFERF=prtSonetIntervalPathFERF, prtSonetXConnectTUG3Idx=prtSonetXConnectTUG3Idx, virtualIfGenTable=virtualIfGenTable, prtSonetStm1GatewayRingSubnetMask=prtSonetStm1GatewayRingSubnetMask, virtualIfIntervalMaxActiveVC=virtualIfIntervalMaxActiveVC, virtualIfStatistics=virtualIfStatistics, virtualIfLAPFCurrentOuiMismatch=virtualIfLAPFCurrentOuiMismatch, virtualIfGFPIntervalPtiMismatch=virtualIfGFPIntervalPtiMismatch, prtSonetStm1ClockSrc=prtSonetStm1ClockSrc, prtSonetIntervalSectionBIP=prtSonetIntervalSectionBIP, virtualIfGFPCurrentIdleFrameError=virtualIfGFPCurrentIdleFrameError, vcGroupCnfgEntry=vcGroupCnfgEntry, virtualIfLAPFCurrentMacTxFrames=virtualIfLAPFCurrentMacTxFrames, virtualIfLAPSIntervalSapiMismatch=virtualIfLAPSIntervalSapiMismatch, virtualIfGenIdx=virtualIfGenIdx, prtSonetVcLcasSinkState=prtSonetVcLcasSinkState, virtualIfIntervalControlMismatch=virtualIfIntervalControlMismatch, virtualIfConfiguration=virtualIfConfiguration, prtSonetCurrentPathFERF=prtSonetCurrentPathFERF, prtSonetPerfHistory=prtSonetPerfHistory, vcGroupCnfgRip2=vcGroupCnfgRip2, virtualIfGFPCurrentExiMismatch=virtualIfGFPCurrentExiMismatch, prtVcGroupCnfg=prtVcGroupCnfg, virtualIfCurrentTable=virtualIfCurrentTable, prtSonetStm1Table=prtSonetStm1Table, prtSonetIntervalLineFEBE=prtSonetIntervalLineFEBE, virtualIfGFPCurrentTHecMbError=virtualIfGFPCurrentTHecMbError, virtualIfLAPFIntervalOuiMismatch=virtualIfLAPFIntervalOuiMismatch, prtSonetStm1CnfgIdx=prtSonetStm1CnfgIdx, prtSonetXConnectAUGIdx=prtSonetXConnectAUGIdx, prtSonetStm1RoutingProt=prtSonetStm1RoutingProt, vcGroupCnfgLCAS=vcGroupCnfgLCAS, virtualIfIntervalTxFrames=virtualIfIntervalTxFrames, virtualIfGFPCurrentCHecSbError=virtualIfGFPCurrentCHecSbError, prtSonetCurrentES=prtSonetCurrentES, virtualIfLAPFIntervalEntry=virtualIfLAPFIntervalEntry, prtSonetIntervalLineFERF=prtSonetIntervalLineFERF, virtualIfGFPCurrentEHecSbError=virtualIfGFPCurrentEHecSbError, prtSonetStm1DccMode=prtSonetStm1DccMode, prtSonetXConnectConPrtIdx=prtSonetXConnectConPrtIdx, prtSonetIntervalSLM=prtSonetIntervalSLM, prtSonetXConnectDirection=prtSonetXConnectDirection, prtSonetVcTable=prtSonetVcTable, vcGroupCnfgTable=vcGroupCnfgTable, prtSonetGenSdThreshold=prtSonetGenSdThreshold, virtualIfLAPFCurrentDlciMismatch=virtualIfLAPFCurrentDlciMismatch, virtualIfLAPFCurrentPidMismatch=virtualIfLAPFCurrentPidMismatch, virtualIfCurrentEntry=virtualIfCurrentEntry, virtualIfGFPIntervalExiMismatch=virtualIfGFPIntervalExiMismatch, prtSonetGenTable=prtSonetGenTable, prtSonetSectionLineIntervalTable=prtSonetSectionLineIntervalTable, prtSonetIntervalUAS=prtSonetIntervalUAS, prtSonetXConnectTUG2Idx=prtSonetXConnectTUG2Idx, virtualIfCurrentMaxActiveVC=virtualIfCurrentMaxActiveVC, virtualIfGFPIntervalEntry=virtualIfGFPIntervalEntry, vcGroupCnfgGfpChId=vcGroupCnfgGfpChId, virtualIfGFPIntervalTHecMbError=virtualIfGFPIntervalTHecMbError, virtualIfIntervalRxAbortFrames=virtualIfIntervalRxAbortFrames, prtSonetStm1Entry=prtSonetStm1Entry, virtualIfLAPSIntervalTable=virtualIfLAPSIntervalTable, prtSonetTuMode=prtSonetTuMode, prtSonetVcConnect=prtSonetVcConnect, vcGroupCnfgGroupIfIndex=vcGroupCnfgGroupIfIndex, prtSonetIntervalPathBIP=prtSonetIntervalPathBIP, prtSonetIntervalLOF=prtSonetIntervalLOF, virtualIfGenFrameFormat=virtualIfGenFrameFormat, prtSonetGenCnfgIdx=prtSonetGenCnfgIdx, vcGroupCnfgRowStatus=vcGroupCnfgRowStatus, vcgGfpMuxCnfgRowStatus=vcgGfpMuxCnfgRowStatus, vcGroupCnfgIdx=vcGroupCnfgIdx, prtSonetIntervalSES=prtSonetIntervalSES, virtualIfIntervalNumber=virtualIfIntervalNumber, prtSonetXConnectCnfgIdx=prtSonetXConnectCnfgIdx, virtualIfCurrentMinLengthViolation=virtualIfCurrentMinLengthViolation, prtSonetPathIntervalNumber=prtSonetPathIntervalNumber, prtSonetCurrentLOP=prtSonetCurrentLOP, prtSonetPathCurrentTable=prtSonetPathCurrentTable, virtualIfLAPFCurrentEntry=virtualIfLAPFCurrentEntry, prtSonetVcStatEntry=prtSonetVcStatEntry)
