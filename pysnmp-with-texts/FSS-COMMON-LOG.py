#
# PySNMP MIB module FSS-COMMON-LOG (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FSS-COMMON-LOG
# Produced by pysmi-0.3.4 at Wed May  1 13:16:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
fssCommon, = mibBuilder.importSymbols("FSS-COMMON-SMI", "fssCommon")
FCTrapHistIndex, FCSeverity, FCObjectName, FCStdTypeIndex, FCDirection, FCServEffect, FCCondEffect, FCCondType, FCTimePeriod, FCLocation, FCStdObjectIndex, FCTcCondType, FCTrapType, FCTcaCondType = mibBuilder.importSymbols("FSS-COMMON-TC", "FCTrapHistIndex", "FCSeverity", "FCObjectName", "FCStdTypeIndex", "FCDirection", "FCServEffect", "FCCondEffect", "FCCondType", "FCTimePeriod", "FCLocation", "FCStdObjectIndex", "FCTcCondType", "FCTrapType", "FCTcaCondType")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Bits, iso, Gauge32, ModuleIdentity, Integer32, Counter32, Unsigned32, MibIdentifier, IpAddress, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Bits", "iso", "Gauge32", "ModuleIdentity", "Integer32", "Counter32", "Unsigned32", "MibIdentifier", "IpAddress", "TimeTicks")
DisplayString, TextualConvention, RowPointer, DateAndTime = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowPointer", "DateAndTime")
fssLog = ModuleIdentity((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 1000))
if mibBuilder.loadTexts: fssLog.setLastUpdated('201601200000Z')
if mibBuilder.loadTexts: fssLog.setOrganization('Fujitsu Network Communications, Inc.')
if mibBuilder.loadTexts: fssLog.setContactInfo('Fujitsu Technical Assistance Center (FTAC), 1-800-USE-FTAC (1-800-873-3822)')
if mibBuilder.loadTexts: fssLog.setDescription('This MIB module contains common condition definitions used throughout the Fujitsu Network Communications, Inc. 1Finity devices.')
fssBase = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 500))
fssAlarm = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200))
fssAlarmCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 1))
fssAlarmTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 100))
fssAlarmPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 100, 0))
fssTca = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 300))
fssTcaTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 300, 100))
fssTcaPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 300, 100, 0))
fssTc = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 400))
fssTcTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 400, 100))
fssTcPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 400, 100, 0))
fssCondTrap = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 100, 0, 1)).setObjects(("FSS-COMMON-LOG", "fssTrapObjectName"), ("FSS-COMMON-LOG", "fssAlarmType"), ("FSS-COMMON-LOG", "fssAlarmCondEffect"), ("FSS-COMMON-LOG", "fssAlarmTypeQual"), ("FSS-COMMON-LOG", "fssTrapTimeStamp"), ("FSS-COMMON-LOG", "fssAlarmSeverity"), ("FSS-COMMON-LOG", "fssTrapDescription"), ("FSS-COMMON-LOG", "fssAlarmServiceEffect"))
if mibBuilder.loadTexts: fssCondTrap.setStatus('current')
if mibBuilder.loadTexts: fssCondTrap.setDescription('This is a generic Trap for reporting conditions.')
fssCondQual = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 100, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fssCondQual.setStatus('current')
if mibBuilder.loadTexts: fssCondQual.setDescription('A further description of the alarmType. Each product may contain further qualifications on existing conditions or may have their own unique condition types.')
fssTcaTrap = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 300, 100, 0, 1)).setObjects(("FSS-COMMON-LOG", "fssTrapObjectName"), ("FSS-COMMON-LOG", "fssTcaType"), ("FSS-COMMON-LOG", "fssTcaTypeQual"), ("FSS-COMMON-LOG", "fssTrapTimeStamp"), ("FSS-COMMON-LOG", "fssTrapDescription"), ("FSS-COMMON-LOG", "fssTcaMonVal"), ("FSS-COMMON-LOG", "fssTcaThLev"))
if mibBuilder.loadTexts: fssTcaTrap.setStatus('current')
if mibBuilder.loadTexts: fssTcaTrap.setDescription('This is a generic Trap for reporting threshold crossing alerts.')
fssTcaCondQual = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 300, 100, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fssTcaCondQual.setStatus('current')
if mibBuilder.loadTexts: fssTcaCondQual.setDescription('A further description of the tcaType. Each product may contain further qualifications on existing conditions or may have their own unique condition types.')
fssTcTrap = NotificationType((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 400, 100, 0, 1)).setObjects(("FSS-COMMON-LOG", "fssTrapObjectName"), ("FSS-COMMON-LOG", "fssTcType"), ("FSS-COMMON-LOG", "fssTcTypeQual"), ("FSS-COMMON-LOG", "fssTrapTimeStamp"), ("FSS-COMMON-LOG", "fssTrapDescription"))
if mibBuilder.loadTexts: fssTcTrap.setStatus('current')
if mibBuilder.loadTexts: fssTcTrap.setDescription('This is a generic Trap for reporting transient conditions.')
fssTcCondQual = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 400, 100, 100), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: fssTcCondQual.setStatus('current')
if mibBuilder.loadTexts: fssTcCondQual.setDescription('A further description of the tcaType. Each product may contain further qualifications on existing conditions or may have their own unique condition types.')
fssStandingAlarmXTable = MibTable((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 1, 1), )
if mibBuilder.loadTexts: fssStandingAlarmXTable.setStatus('current')
if mibBuilder.loadTexts: fssStandingAlarmXTable.setDescription('The table contains all the currently active standing conditions.')
fssStandingAlarmXEntry = MibTableRow((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 1, 1, 1), ).setIndexNames((0, "FSS-COMMON-LOG", "fssStdAlarmObjectIndex"), (0, "FSS-COMMON-LOG", "fssStdAlarmTypeIndex"))
if mibBuilder.loadTexts: fssStandingAlarmXEntry.setStatus('current')
if mibBuilder.loadTexts: fssStandingAlarmXEntry.setDescription('Active standing conditions entry.')
fssStdAlarmObjectIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 1, 1, 1, 1), FCStdObjectIndex())
if mibBuilder.loadTexts: fssStdAlarmObjectIndex.setStatus('current')
if mibBuilder.loadTexts: fssStdAlarmObjectIndex.setDescription('A sequencial index, in combination with the fssStdAlarmTypeIndex uniquely identifies a Trap entry in the table.')
fssStdAlarmTypeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 1, 1, 1, 2), FCStdTypeIndex())
if mibBuilder.loadTexts: fssStdAlarmTypeIndex.setStatus('current')
if mibBuilder.loadTexts: fssStdAlarmTypeIndex.setDescription('A sequencial subindex, that sub-divides the fssStdAlarmObjectIndex and uniquely identifies a Trap entry in the table.')
fssStdAlarmObjectName = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 1, 1, 1, 3), FCObjectName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssStdAlarmObjectName.setStatus('current')
if mibBuilder.loadTexts: fssStdAlarmObjectName.setDescription('The name of the object.')
fssStdAlarmType = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 1, 1, 1, 4), FCCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssStdAlarmType.setStatus('current')
if mibBuilder.loadTexts: fssStdAlarmType.setDescription('The condition type.')
fssStdAlarmSeverity = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 1, 1, 1, 5), FCSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssStdAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: fssStdAlarmSeverity.setDescription('The severity of the condition.')
fssStdAlarmServEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 1, 1, 1, 6), FCServEffect()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssStdAlarmServEffect.setStatus('current')
if mibBuilder.loadTexts: fssStdAlarmServEffect.setDescription('The service effect of the standing condition event or transient condition event.')
fssStdAlarmLocn = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 1, 1, 1, 7), FCLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssStdAlarmLocn.setStatus('current')
if mibBuilder.loadTexts: fssStdAlarmLocn.setDescription('The Location of the alarm.')
fssStdAlarmDir = MibTableColumn((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 1, 1, 1, 8), FCDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssStdAlarmDir.setStatus('current')
if mibBuilder.loadTexts: fssStdAlarmDir.setDescription('The direction of the alarm.')
fssTrapObjectName = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 500, 1), FCObjectName()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssTrapObjectName.setStatus('current')
if mibBuilder.loadTexts: fssTrapObjectName.setDescription('The name of the object generating the trap.')
fssTrapDescription = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 500, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssTrapDescription.setStatus('current')
if mibBuilder.loadTexts: fssTrapDescription.setDescription('The Trap description.')
fssTrapType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 500, 3), FCTrapType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssTrapType.setStatus('current')
if mibBuilder.loadTexts: fssTrapType.setDescription('The general type of Trap.')
fssTrapTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 500, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssTrapTimeStamp.setStatus('current')
if mibBuilder.loadTexts: fssTrapTimeStamp.setDescription('This object specifies the date and time the Trap was generated.')
fssAlarmType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 3), FCCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssAlarmType.setStatus('current')
if mibBuilder.loadTexts: fssAlarmType.setDescription('The condition type of Trap.')
fssAlarmCondEffect = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 4), FCCondEffect()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssAlarmCondEffect.setStatus('current')
if mibBuilder.loadTexts: fssAlarmCondEffect.setDescription('The effect of the alarm, whether it is standing or transient.')
fssAlarmTypeQual = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssAlarmTypeQual.setStatus('current')
if mibBuilder.loadTexts: fssAlarmTypeQual.setDescription('The Trap Qualifier. which is <directtion> <location>.')
fssAlarmLocn = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 6), FCLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssAlarmLocn.setStatus('current')
if mibBuilder.loadTexts: fssAlarmLocn.setDescription('The location of the Trap.')
fssAlarmDir = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 7), FCDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssAlarmDir.setStatus('current')
if mibBuilder.loadTexts: fssAlarmDir.setDescription('The direction of the Trap.')
fssAlarmSeverity = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 8), FCSeverity()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssAlarmSeverity.setStatus('current')
if mibBuilder.loadTexts: fssAlarmSeverity.setDescription('The severity of the alarm.')
fssAlarmServiceEffect = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 200, 9), FCServEffect()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssAlarmServiceEffect.setStatus('current')
if mibBuilder.loadTexts: fssAlarmServiceEffect.setDescription('Service affecting alarm. In general, SA is used when traffic is disrupted and NSA is used when the traffic is not disrupted.')
fssTcaType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 300, 1), FCTcaCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssTcaType.setStatus('current')
if mibBuilder.loadTexts: fssTcaType.setDescription('The threshold crossing alert type.')
fssTcaTypeQual = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 300, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssTcaTypeQual.setStatus('current')
if mibBuilder.loadTexts: fssTcaTypeQual.setDescription('The Trap Qualifier. which is <directtion> <location> <time-period>.')
fssTcaCondEffect = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 300, 3), FCCondEffect()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssTcaCondEffect.setStatus('current')
if mibBuilder.loadTexts: fssTcaCondEffect.setDescription('The effect of the alarm, whether it is standing or transient.')
fssTcaLocn = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 300, 4), FCLocation()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssTcaLocn.setStatus('current')
if mibBuilder.loadTexts: fssTcaLocn.setDescription('The location of the Trap.')
fssTcaDir = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 300, 5), FCDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssTcaDir.setStatus('current')
if mibBuilder.loadTexts: fssTcaDir.setDescription('The direction of the Trap.')
fssTcaMonVal = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 300, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssTcaMonVal.setStatus('current')
if mibBuilder.loadTexts: fssTcaMonVal.setDescription('The monitored value of the performance monitoring meter which raised the threshold crossing alert.')
fssTcaThLev = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 300, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssTcaThLev.setStatus('current')
if mibBuilder.loadTexts: fssTcaThLev.setDescription('The threshold value of the performance monitoring meter.')
fssTcaTimePeriod = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 300, 8), FCTimePeriod()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssTcaTimePeriod.setStatus('current')
if mibBuilder.loadTexts: fssTcaTimePeriod.setDescription('The time period of the performance monitoring meter which raised the threshold crossing alert.')
fssTcType = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 400, 1), FCTcCondType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssTcType.setStatus('current')
if mibBuilder.loadTexts: fssTcType.setDescription('The threshold crossing alert type.')
fssTcTypeQual = MibScalar((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 400, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fssTcTypeQual.setStatus('current')
if mibBuilder.loadTexts: fssTcTypeQual.setDescription('The Trap Qualifier. which is <directtion> <location>.')
fssLogConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 1000, 100))
fssLogGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 1000, 100, 1))
fssLogCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 1000, 100, 2))
fssLogTrapCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 1000, 100, 2, 1)).setObjects(("FSS-COMMON-LOG", "fssLogTrapGroup"), ("FSS-COMMON-LOG", "fssLogNotificationGroup"), ("FSS-COMMON-LOG", "fssLogTrapGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fssLogTrapCompliance = fssLogTrapCompliance.setStatus('current')
if mibBuilder.loadTexts: fssLogTrapCompliance.setDescription('The compliance statement for fss Common Log.')
fssLogTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 1000, 100, 1, 1)).setObjects(("FSS-COMMON-LOG", "fssCondQual"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fssLogTrapGroup = fssLogTrapGroup.setStatus('current')
if mibBuilder.loadTexts: fssLogTrapGroup.setDescription('These objects contain Trap related information needed for correlating the Trap emission to the Trap history log and product specific Trap type.')
fssTcaLogTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 1000, 100, 1, 2)).setObjects(("FSS-COMMON-LOG", "fssTcaCondQual"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fssTcaLogTrapGroup = fssTcaLogTrapGroup.setStatus('current')
if mibBuilder.loadTexts: fssTcaLogTrapGroup.setDescription('These objects contain Trap related information needed for correlating the product specific Trap type.')
fssLogNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 1000, 100, 1, 100)).setObjects(("FSS-COMMON-LOG", "fssCondTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fssLogNotificationGroup = fssLogNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: fssLogNotificationGroup.setDescription('These Traps represent the basic set of conditions and alarms within the Fujitsu Network Communications, Inc. System.')
fssTcaLogNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 1000, 100, 1, 101)).setObjects(("FSS-COMMON-LOG", "fssTcaTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fssTcaLogNotificationGroup = fssTcaLogNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: fssTcaLogNotificationGroup.setDescription('These Traps represent the basic set of threshold crossing alert conditions within the Fujitsu Network Communications, Inc. System.')
fssTcLogNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 1000, 100, 1, 102)).setObjects(("FSS-COMMON-LOG", "fssTcTrap"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fssTcLogNotificationGroup = fssTcLogNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: fssTcLogNotificationGroup.setDescription('These Traps represent the basic set of transient conditions and events within the Fujitsu Network Communications, Inc. System.')
fssLogStandingCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 1000, 100, 2, 3)).setObjects(("FSS-COMMON-LOG", "fssLogAlarmStandingGroup"), ("FSS-COMMON-LOG", "fssLogAlarmStandingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fssLogStandingCompliance = fssLogStandingCompliance.setStatus('current')
if mibBuilder.loadTexts: fssLogStandingCompliance.setDescription('The compliance statement for fss Common Log MIB.')
fssLogAlarmStandingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 211, 1, 24, 12, 1000, 100, 1, 7)).setObjects(("FSS-COMMON-LOG", "fssStdAlarmType"), ("FSS-COMMON-LOG", "fssStdAlarmSeverity"), ("FSS-COMMON-LOG", "fssStdAlarmServEffect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    fssLogAlarmStandingGroup = fssLogAlarmStandingGroup.setStatus('current')
if mibBuilder.loadTexts: fssLogAlarmStandingGroup.setDescription('This group contains the objects which provide basic system level information.')
mibBuilder.exportSymbols("FSS-COMMON-LOG", fssTcLogNotificationGroup=fssTcLogNotificationGroup, fssStdAlarmObjectName=fssStdAlarmObjectName, fssTcaType=fssTcaType, fssLogTrapCompliance=fssLogTrapCompliance, fssTcaTrap=fssTcaTrap, fssAlarmTraps=fssAlarmTraps, fssStdAlarmLocn=fssStdAlarmLocn, fssTcaPrefix=fssTcaPrefix, fssTrapType=fssTrapType, fssAlarmCondEffect=fssAlarmCondEffect, fssTcaTypeQual=fssTcaTypeQual, fssStdAlarmDir=fssStdAlarmDir, fssCondTrap=fssCondTrap, fssTcaTimePeriod=fssTcaTimePeriod, fssLogNotificationGroup=fssLogNotificationGroup, fssCondQual=fssCondQual, fssTcTraps=fssTcTraps, fssTc=fssTc, fssAlarmServiceEffect=fssAlarmServiceEffect, fssTcaLocn=fssTcaLocn, fssLogConformance=fssLogConformance, fssTcTrap=fssTcTrap, fssTrapTimeStamp=fssTrapTimeStamp, fssTcaCondEffect=fssTcaCondEffect, fssTcaTraps=fssTcaTraps, fssTcaCondQual=fssTcaCondQual, fssTca=fssTca, fssStdAlarmType=fssStdAlarmType, fssTcType=fssTcType, fssLogTrapGroup=fssLogTrapGroup, fssTcaThLev=fssTcaThLev, fssTcPrefix=fssTcPrefix, fssTcaMonVal=fssTcaMonVal, fssAlarmTypeQual=fssAlarmTypeQual, fssLog=fssLog, fssStdAlarmTypeIndex=fssStdAlarmTypeIndex, fssAlarmLocn=fssAlarmLocn, fssTcaDir=fssTcaDir, fssTrapObjectName=fssTrapObjectName, fssStandingAlarmXTable=fssStandingAlarmXTable, fssStdAlarmObjectIndex=fssStdAlarmObjectIndex, fssLogStandingCompliance=fssLogStandingCompliance, fssBase=fssBase, fssStandingAlarmXEntry=fssStandingAlarmXEntry, fssTrapDescription=fssTrapDescription, fssTcaLogTrapGroup=fssTcaLogTrapGroup, fssStdAlarmServEffect=fssStdAlarmServEffect, fssTcCondQual=fssTcCondQual, fssAlarmDir=fssAlarmDir, PYSNMP_MODULE_ID=fssLog, fssStdAlarmSeverity=fssStdAlarmSeverity, fssAlarmPrefix=fssAlarmPrefix, fssLogGroups=fssLogGroups, fssAlarmSeverity=fssAlarmSeverity, fssLogCompliances=fssLogCompliances, fssAlarmType=fssAlarmType, fssLogAlarmStandingGroup=fssLogAlarmStandingGroup, fssAlarm=fssAlarm, fssAlarmCurrent=fssAlarmCurrent, fssTcTypeQual=fssTcTypeQual, fssTcaLogNotificationGroup=fssTcaLogNotificationGroup)
