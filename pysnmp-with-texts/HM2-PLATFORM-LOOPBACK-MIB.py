#
# PySNMP MIB module HM2-PLATFORM-LOOPBACK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-PLATFORM-LOOPBACK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:31:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint")
hm2PlatformMibs, = mibBuilder.importSymbols("HM2-TC-MIB", "hm2PlatformMibs")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressIPv4, = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressIPv4")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
iso, MibIdentifier, ModuleIdentity, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, Counter32, IpAddress, Bits, Gauge32, TimeTicks, NotificationType, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "Counter32", "IpAddress", "Bits", "Gauge32", "TimeTicks", "NotificationType", "Counter64")
DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "RowStatus")
hm2PlatformLoopback = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 12, 22))
hm2PlatformLoopback.setRevisions(('2011-09-08 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2PlatformLoopback.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2PlatformLoopback.setLastUpdated('201109080000Z')
if mibBuilder.loadTexts: hm2PlatformLoopback.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2PlatformLoopback.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2PlatformLoopback.setDescription('The Hirschmann Platform2 MIB for Loopback Interfaces. Copyright (C) 2011. All Rights Reserved.')
hm2AgentLoopbackGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 12, 22, 1))
hm2AgentLoopbackTable = MibTable((1, 3, 6, 1, 4, 1, 248, 12, 22, 1, 1), )
if mibBuilder.loadTexts: hm2AgentLoopbackTable.setStatus('current')
if mibBuilder.loadTexts: hm2AgentLoopbackTable.setDescription('A summary table of the Loopback instances')
hm2AgentLoopbackEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 12, 22, 1, 1, 1), ).setIndexNames((0, "HM2-PLATFORM-LOOPBACK-MIB", "hm2AgentLoopbackID"))
if mibBuilder.loadTexts: hm2AgentLoopbackEntry.setStatus('current')
if mibBuilder.loadTexts: hm2AgentLoopbackEntry.setDescription('.')
hm2AgentLoopbackID = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 22, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: hm2AgentLoopbackID.setStatus('current')
if mibBuilder.loadTexts: hm2AgentLoopbackID.setDescription('The Loopback ID is associated with Internal Interface number which will be generated when we create a loopback.')
hm2AgentLoopbackIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 22, 1, 1, 1, 2), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2AgentLoopbackIfIndex.setStatus('current')
if mibBuilder.loadTexts: hm2AgentLoopbackIfIndex.setDescription('The Loopback ID is associated with an Internal Interface number which will be generated when we create a loopback.')
hm2AgentLoopbackIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 22, 1, 1, 1, 3), InetAddressIPv4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentLoopbackIPAddress.setStatus('current')
if mibBuilder.loadTexts: hm2AgentLoopbackIPAddress.setDescription('The IP Address configured for the respective loopback')
hm2AgentLoopbackIPSubnet = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 22, 1, 1, 1, 4), InetAddressIPv4()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2AgentLoopbackIPSubnet.setStatus('current')
if mibBuilder.loadTexts: hm2AgentLoopbackIPSubnet.setDescription('The Subnet mask configured for the respective loopback')
hm2AgentLoopbackStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 12, 22, 1, 1, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2AgentLoopbackStatus.setStatus('current')
if mibBuilder.loadTexts: hm2AgentLoopbackStatus.setDescription('Status of this instance. The rows can be added/deleted in the table by setting createAndGo/createAndWait/destroy respectively active(1) - this loopback instance is active createAndGo(4) - set to this value to create an instance createAndWait(5) - set to this value to create an instance destroy(6) - set to this value to delete an instance')
mibBuilder.exportSymbols("HM2-PLATFORM-LOOPBACK-MIB", hm2AgentLoopbackIfIndex=hm2AgentLoopbackIfIndex, hm2AgentLoopbackEntry=hm2AgentLoopbackEntry, hm2AgentLoopbackIPAddress=hm2AgentLoopbackIPAddress, hm2AgentLoopbackStatus=hm2AgentLoopbackStatus, hm2AgentLoopbackID=hm2AgentLoopbackID, hm2AgentLoopbackGroup=hm2AgentLoopbackGroup, hm2PlatformLoopback=hm2PlatformLoopback, hm2AgentLoopbackTable=hm2AgentLoopbackTable, PYSNMP_MODULE_ID=hm2PlatformLoopback, hm2AgentLoopbackIPSubnet=hm2AgentLoopbackIPSubnet)
