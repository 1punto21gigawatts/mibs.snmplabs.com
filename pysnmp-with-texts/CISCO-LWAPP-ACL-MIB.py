#
# PySNMP MIB module CISCO-LWAPP-ACL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-LWAPP-ACL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:04:47 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, NotificationType, Gauge32, iso, Bits, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ModuleIdentity, Counter64, MibIdentifier, IpAddress, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "NotificationType", "Gauge32", "iso", "Bits", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ModuleIdentity", "Counter64", "MibIdentifier", "IpAddress", "Integer32")
DisplayString, TextualConvention, TruthValue = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention", "TruthValue")
ciscoLwappAclMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 577))
ciscoLwappAclMIB.setRevisions(('2010-03-04 00:00', '2006-08-29 00:00', '2006-07-19 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoLwappAclMIB.setRevisionsDescriptions(('Added claAclTable and claAclRuleTable.', 'Moved scalar attributes to claCpuAclTable.', 'Initial version of this MIB module.',))
if mibBuilder.loadTexts: ciscoLwappAclMIB.setLastUpdated('201003040000Z')
if mibBuilder.loadTexts: ciscoLwappAclMIB.setOrganization('Cisco Systems Inc.')
if mibBuilder.loadTexts: ciscoLwappAclMIB.setContactInfo('Cisco Systems, Customer Service Postal: 170 West Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS Email: cs-wnbu-snmp@cisco.com')
if mibBuilder.loadTexts: ciscoLwappAclMIB.setDescription('This MIB is intended to be implemented on all those devices operating as Central Controllers (CC) that terminate the Light Weight Access Point Protocol tunnel from Light-weight LWAPP Access Points. This MIB provides configuration and status information about the ACLs on the controller. Particularly this mib covers the CPU ACLs for the wireless controllers. Traffic to the controller CPU comes from the NPU (Network Processing Unit). Using CPU ACLs, the user can place restrictions on type of traffic reaching the CPU of the controller from the NPU. CPU ACLs introduce an ACL for the traffic to the CPU of controller. With this ACL the type of packets reaching the CPU can be controlled. The mode of operation is as follows. The administrator designates one ACL for the traffic to the CPU. The ACL kicks in for packets from the NPU to the CPU. Each ACL is an ordered set of rules. If a rule matches then action for that rule is applied to the packet. The decision to send or drop the packet is taken based on the action parameter of the ACL. There will be no ACL for the packets from the CPU to the NPU. GLOSSARY Access Control List ( ACL ) A list of rules used to restrict the traffic reaching an interface or the CPU. Each ACL is an ordered set of rules and actions. If a rule matches then the action for that rule is applied to the packet. Access Point ( AP ) An entity that contains an 802.11 medium access control ( MAC ) and physical layer ( PHY ) interface and provides acess to the distribution services via the wireless medium for associated clients. CPU ACL ( CPU ACL ) The ACL applied to the CPU. This controls the type of traffic reaching the CPU of the controller. Network Processing Unit ( NPU ) This entity is responsible for forwarding traffic to the CPU. The only exceptions are data coming thorugh the console port and the Service port i.e. these communicate directly with the CPU and not via the NPU. Light Weight Access Point Protocol ( LWAPP ) This is a generic protocol that defines the communciation between the Access Points and the Central Controller. REFERENCE [1] Part 11 Wireless LAN Medium Access Control ( MAC ) and Physical Layer ( PHY ) Specifications.')
ciscoLwappAclMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 0))
ciscoLwappAclMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 1))
ciscoLwappAclMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 2))
ciscoLwappCpuAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 1))
ciscoLwappControllerAcl = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2))
ciscoLwappControllerAclGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 3))
claAclCounterEnable = MibScalar((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 3, 1), TruthValue().clone('false')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: claAclCounterEnable.setStatus('current')
if mibBuilder.loadTexts: claAclCounterEnable.setDescription("This object represents the ACL Counters status of the controller. Set this to 'true', if user wants to see if packets are hitting any of the ACLs that are configured on the controller")
claCpuAclTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 1, 1), )
if mibBuilder.loadTexts: claCpuAclTable.setStatus('current')
if mibBuilder.loadTexts: claCpuAclTable.setDescription('This table represents the ACL related parameters on the CPU of the controller.')
claCpuAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-ACL-MIB", "claCpuAclIndex"))
if mibBuilder.loadTexts: claCpuAclEntry.setStatus('current')
if mibBuilder.loadTexts: claCpuAclEntry.setDescription('Each entry represents a conceptual row in this table. For each CPU of the controller, there will be a row.')
claCpuAclIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: claCpuAclIndex.setStatus('current')
if mibBuilder.loadTexts: claCpuAclIndex.setDescription('This object uniquely identifies one instance of a CPU on the controller.')
claCpuAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: claCpuAclName.setStatus('current')
if mibBuilder.loadTexts: claCpuAclName.setDescription('Name of the Access Control List applied to the CPU. The access list to be applied should already exist on the controller. If it is required to remove the ACL for the CPU, this field should be set to an empty string.')
claCpuAclPacketApplicability = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("wired", 2), ("wireless", 3), ("both", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: claCpuAclPacketApplicability.setStatus('current')
if mibBuilder.loadTexts: claCpuAclPacketApplicability.setDescription('This indicates whether the CPU ACL applies for only wired(2) packets, only the wireless(3) packets or both(4) types of packets. If there is no ACL applied to the CPU, then this field will be set to none(1) . If earlier there was no ACL applied to the CPU and the user just sets the claCpuAclName attribute, then this field will be set to both(4).')
claAclTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 1), )
if mibBuilder.loadTexts: claAclTable.setStatus('current')
if mibBuilder.loadTexts: claAclTable.setDescription('The table listing ACLs (Access Control Lists) and counter status on the Switch.')
claAclEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 1, 1), ).setIndexNames((0, "CISCO-LWAPP-ACL-MIB", "claAclName"))
if mibBuilder.loadTexts: claAclEntry.setStatus('current')
if mibBuilder.loadTexts: claAclEntry.setDescription('Each entry represents a conceptual row in this table. For each ACL on the controller, there will be a row.')
claAclName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)))
if mibBuilder.loadTexts: claAclName.setStatus('current')
if mibBuilder.loadTexts: claAclName.setDescription('Name of the Access Control List.')
claAclCounterClear = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: claAclCounterClear.setStatus('current')
if mibBuilder.loadTexts: claAclCounterClear.setDescription("This object when set to 'true', will clear the counter of the ACL represented by the unique ACL name.")
claAclRuleTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 2), )
if mibBuilder.loadTexts: claAclRuleTable.setStatus('current')
if mibBuilder.loadTexts: claAclRuleTable.setDescription('The table listing rules and number of hits under ACL on the Switch.')
claAclRuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 2, 1), ).setIndexNames((0, "CISCO-LWAPP-ACL-MIB", "claAclName"), (0, "CISCO-LWAPP-ACL-MIB", "claAclRuleIndex"))
if mibBuilder.loadTexts: claAclRuleEntry.setStatus('current')
if mibBuilder.loadTexts: claAclRuleEntry.setDescription('Each entry represents a conceptual row in this table. For each ACL rule of the controller, there will be a row.')
claAclRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 64)))
if mibBuilder.loadTexts: claAclRuleIndex.setStatus('current')
if mibBuilder.loadTexts: claAclRuleIndex.setDescription('Index of the ACL rule. This can be updated to reset the sequence of the rules of an ACL.')
claAclRuleHits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 577, 1, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: claAclRuleHits.setStatus('current')
if mibBuilder.loadTexts: claAclRuleHits.setDescription('Number of hits in the particular rule under the ACL.This object is cleared by setting the claAclCounterClear object.')
ciscoLwappAclMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 2, 1))
ciscoLwappAclMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 577, 2, 2))
ciscoLwappAclMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 577, 2, 1, 1)).setObjects(("CISCO-LWAPP-ACL-MIB", "ciscoLwappCpuAclGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappAclMIBCompliance = ciscoLwappAclMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscoLwappAclMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappAclMIB module.')
ciscoLwappAclMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 577, 2, 1, 2)).setObjects(("CISCO-LWAPP-ACL-MIB", "ciscoLwappCpuAclGroup"), ("CISCO-LWAPP-ACL-MIB", "ciscoLwappAclGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappAclMIBComplianceRev1 = ciscoLwappAclMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappAclMIBComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement the ciscoLwappAclMIB module.')
ciscoLwappCpuAclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 577, 2, 2, 1)).setObjects(("CISCO-LWAPP-ACL-MIB", "claCpuAclName"), ("CISCO-LWAPP-ACL-MIB", "claCpuAclPacketApplicability"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappCpuAclGroup = ciscoLwappCpuAclGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappCpuAclGroup.setDescription('This collection of objects represents the information about the general attributes of CPU ACL.')
ciscoLwappAclGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 577, 2, 2, 2)).setObjects(("CISCO-LWAPP-ACL-MIB", "claAclCounterEnable"), ("CISCO-LWAPP-ACL-MIB", "claAclCounterClear"), ("CISCO-LWAPP-ACL-MIB", "claAclRuleHits"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscoLwappAclGroup = ciscoLwappAclGroup.setStatus('current')
if mibBuilder.loadTexts: ciscoLwappAclGroup.setDescription('This collection of objects represents the information about the general attributes of controller ACL.')
mibBuilder.exportSymbols("CISCO-LWAPP-ACL-MIB", ciscoLwappCpuAclGroup=ciscoLwappCpuAclGroup, ciscoLwappCpuAcl=ciscoLwappCpuAcl, ciscoLwappAclMIBConform=ciscoLwappAclMIBConform, ciscoLwappAclMIB=ciscoLwappAclMIB, claAclRuleEntry=claAclRuleEntry, claAclCounterEnable=claAclCounterEnable, claAclRuleHits=claAclRuleHits, claCpuAclPacketApplicability=claCpuAclPacketApplicability, claAclCounterClear=claAclCounterClear, claCpuAclEntry=claCpuAclEntry, ciscoLwappAclMIBObjects=ciscoLwappAclMIBObjects, claAclTable=claAclTable, claCpuAclTable=claCpuAclTable, claCpuAclIndex=claCpuAclIndex, ciscoLwappAclMIBGroups=ciscoLwappAclMIBGroups, PYSNMP_MODULE_ID=ciscoLwappAclMIB, ciscoLwappAclGroup=ciscoLwappAclGroup, claAclRuleIndex=claAclRuleIndex, claAclName=claAclName, ciscoLwappAclMIBCompliances=ciscoLwappAclMIBCompliances, ciscoLwappAclMIBNotifs=ciscoLwappAclMIBNotifs, ciscoLwappAclMIBComplianceRev1=ciscoLwappAclMIBComplianceRev1, claCpuAclName=claCpuAclName, claAclRuleTable=claAclRuleTable, ciscoLwappAclMIBCompliance=ciscoLwappAclMIBCompliance, ciscoLwappControllerAclGeneral=ciscoLwappControllerAclGeneral, claAclEntry=claAclEntry, ciscoLwappControllerAcl=ciscoLwappControllerAcl)
