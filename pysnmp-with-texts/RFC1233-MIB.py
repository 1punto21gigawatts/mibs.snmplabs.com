#
# PySNMP MIB module RFC1233-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/RFC1233-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:56:30 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, ModuleIdentity, Unsigned32, Gauge32, iso, transmission, Integer32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, ObjectIdentity, NotificationType, MibIdentifier, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "ModuleIdentity", "Unsigned32", "Gauge32", "iso", "transmission", "Integer32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "ObjectIdentity", "NotificationType", "MibIdentifier", "Counter32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ds3 = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 30))
ds3ConfigTable = MibTable((1, 3, 6, 1, 2, 1, 10, 30, 1), )
if mibBuilder.loadTexts: ds3ConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds3ConfigTable.setDescription('The DS3 Configuration table.')
ds3ConfigEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 30, 1, 1), ).setIndexNames((0, "RFC1233-MIB", "ds3CSUIndex"))
if mibBuilder.loadTexts: ds3ConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds3ConfigEntry.setDescription('An entry in the DS3 Configuration table.')
ds3CSUIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CSUIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CSUIndex.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable.')
ds3Index = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3Index.setStatus('mandatory')
if mibBuilder.loadTexts: ds3Index.setDescription('An index value that uniquely identifies a DS3 Interface. The interface identified by a particular value of this index is the same interface as identified by the same value an ifIndex object instance.')
ds3TimeElapsed = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 900))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TimeElapsed.setDescription('The number of seconds, including partial seconds, that have elapsed since the beginning of the current error-measurement period.')
ds3ValidIntervals = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3ValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: ds3ValidIntervals.setDescription('The number of previous intervals for which valid data was collected. The value will be 96 unless the CSU device was brought online within the last 24 hours, in which case the value will be the number of complete 15 minute intervals the CSU has been online.')
ds3LineType = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("other", 1), ("ds3M23", 2), ("ds3SYNTRAN", 3), ("ds3CbitParity", 4), ("ds3ClearChannel", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3LineType.setStatus('mandatory')
if mibBuilder.loadTexts: ds3LineType.setDescription('This variable indicates the variety of DS3 C-bit application implementing this circuit. The type of circuit affects the interpretation of the usage and error statistics. The rate of all of them is 44.736 Mbps. The values, in sequence, describe: TITLE: SPECIFICATION: ds3M23 ANSI T1.107-1988 [10] ds3SYNTRAN ANSI T1.107-1988 [10] ds3C-bitParity ANSI T1.107a-1989 [10a] ds3ClearChannel ANSI T1.102-1987 [9] ')
ds3ZeroCoding = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3other", 1), ("ds3B3ZS", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3ZeroCoding.setStatus('mandatory')
if mibBuilder.loadTexts: ds3ZeroCoding.setDescription('This variable describes the variety of Zero Code Suppression used on the link, which in turn affects a number of its characteristics. ds3B3ZS refers to the use of specified patterns of normal bits and bipolar violations which are used to replace sequences of zero bits of a specified length.')
ds3Loopback = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds3NoLoop", 1), ("ds3LocalLoopbackLocalSide", 2), ("ds3LocalLoopbackRemoteSide", 3), ("ds3RemoteLoopbackLocalSide", 4), ("ds3RemoteLoopbackRemoteSide", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3Loopback.setStatus('mandatory')
if mibBuilder.loadTexts: ds3Loopback.setDescription("This variable represents the loopback state of the CSU. Devices supporting read/write access should return badValue in response to a requested loopback state that the CSU does not support. The values mean: ds3NoLoop Not in the loopback state. A device that is not capable of performing a loopback on either interface shall always return this as it's value. ds3LocalLoopbackLocalSide Signal received from the local side of the device is looped back at the local connector (eg, without involving the CSU). ds3LocalLoopbackRemoteSide Signal received from the local side of the device is looped back at the remote connector (eg, through the CSU). ds3RemoteLoopbackLocalSide Signal received from the remote side of the device is looped back at the local connector (eg, through the CSU). ds3RemoteLoopbackRemoteSide Signal received from the remote side of the device is looped back at the remote connector (eg, without involving the CSU). Note that M23 and ClearChannel interfaces do not support the Loopback managed object.")
ds3SendCode = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds3SendTestMessage", 1), ("ds3SendNoCode", 2), ("ds3SendSetCode", 3), ("ds3SendLoopbackCode", 4), ("ds3SendResetCode", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3SendCode.setStatus('mandatory')
if mibBuilder.loadTexts: ds3SendCode.setDescription('This variable indicates what type of code is being sent across the DS1 circuit by the CSU. The values mean: ds3SendNoCode sending looped or normal data ds3SendSetCode sending a loopback request ds3SendLoopbackCode sending the code to choose a specific loopback ds3SendResetCode sending a loopback termination request ds3SendTestMessage sending a Test pattern as defined in T1.107a-1989 [10a]. ')
ds3YellowAlarm = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3YellowAlarm", 1), ("ds3NoYellowAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3YellowAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds3YellowAlarm.setDescription('This variable indicates if a Yellow Alarm condition exists.')
ds3RedAlarm = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3RedAlarm", 1), ("ds3NoRedAlarm", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3RedAlarm.setStatus('mandatory')
if mibBuilder.loadTexts: ds3RedAlarm.setDescription('This variable indicates if a Red Alarm condition exists.')
ds3CircuitIdentifier = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CircuitIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CircuitIdentifier.setDescription("This variable contains the transmission vendor's circuit identifier, for the purpose of facilitating troubleshooting.")
ds3IntervalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 30, 2), )
if mibBuilder.loadTexts: ds3IntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalTable.setDescription('The DS3 Interval table.')
ds3IntervalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 30, 2, 1), ).setIndexNames((0, "RFC1233-MIB", "ds3IntervalIndex"), (0, "RFC1233-MIB", "ds3IntervalNumber"))
if mibBuilder.loadTexts: ds3IntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalEntry.setDescription('An entry in the DS3 Interval table.')
ds3IntervalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3IntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalIndex.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an DS3CSUIndex object instance.')
ds3IntervalNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3IntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalNumber.setDescription('A number between 1 and 96, where 1 is the most recently completed 15 minute interval and 96 is the least recently completed 15 minutes interval (assuming that all 96 intervals are valid).')
ds3IntervalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3IntervalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalESs.setDescription('The counter associated with the number of Errored Seconds, as defined by [12], encountered by a DS3 CSU in one of the previous 96, individual 15 minute, intervals.')
ds3IntervalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3IntervalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalSESs.setDescription('The counter associated with the number of Severely Errored Seconds, as defined by [12], encountered by a DS3 CSU in one of the previous 96, individual 15 minute, intervals.')
ds3IntervalSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3IntervalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds, as defined by [12], encountered by a DS3 CSU in one of the previous 96, individual 15 minute, intervals.')
ds3IntervalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3IntervalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalUASs.setDescription('The counter associated with the number of Unavailable Seconds, as defined by [12], encountered by a DS3 CSU in one of the previous 96, individual 15 minute, intervals.')
ds3IntervalCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3IntervalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalCSSs.setDescription('The counter associated with the number of Controlled Slip Seconds, as defined by [12], encountered by a DS3 CSU in one of the previous 96, individual 15 minute, intervals. Note that SYNTRAN interfaces are the only interfaces that support the Controlled Slip Seconds managed object. Accordingly, agents configured with non-SYNTRAN interfaces may treat this object as having an ACCESS clause value of not-accessible.')
ds3IntervalBPVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3IntervalBPVs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalBPVs.setDescription('The counter associated with the number of Bipolar Violations, as defined by [12], encountered by a DS3 CSU in one of the previous 96, individual 15 minute, intervals.')
ds3IntervalCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3IntervalCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3IntervalCVs.setDescription('The counter associated with the number of Coding Violations, as defined by [12], encountered by a DS3 CSU in one of the previous 96, individual 15 minute, intervals.')
ds3CurrentTable = MibTable((1, 3, 6, 1, 2, 1, 10, 30, 3), )
if mibBuilder.loadTexts: ds3CurrentTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentTable.setDescription('The DS3 Current table.')
ds3CurrentEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 30, 3, 1), ).setIndexNames((0, "RFC1233-MIB", "ds3CurrentIndex"))
if mibBuilder.loadTexts: ds3CurrentEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentEntry.setDescription('An entry in the DS3 Current table.')
ds3CurrentIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CurrentIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentIndex.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an DS3CSUIndex object instance.')
ds3CurrentESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CurrentESs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentESs.setDescription('The counter associated with the number of Errored Seconds, as defined by [12], encountered by a DS3 CSU in the current 15 minute interval.')
ds3CurrentSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CurrentSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentSESs.setDescription('The counter associated with the number of Severely Errored Seconds, as defined by [12], encountered by a DS3 CSU in the current 15 minute interval.')
ds3CurrentSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CurrentSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds, as defined by [12], encountered by a DS3 CSU in the current 15 minute interval.')
ds3CurrentUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CurrentUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentUASs.setDescription('The counter associated with the number of Unavailable Seconds, as defined by [12], encountered by a DS3 CSU in the current 15 minute interval.')
ds3CurrentCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CurrentCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentCSSs.setDescription('The counter associated with the number of Controlled Slip Seconds, as defined by [12], encountered by a DS3 CSU in the current 15 minute interval. Note that SYNTRAN interfaces are the only interfaces that support the Controlled Slip Seconds managed object. Accordingly, agents configured with non-SYNTRAN interfaces may treat this object as having an ACCESS clause value of not-accessible.')
ds3CurrentBPVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CurrentBPVs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentBPVs.setDescription('The counter associated with the number of Bipolar Violations, as defined by [12], encountered by a DS3 CSU in the current 15 minute interval.')
ds3CurrentCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3CurrentCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3CurrentCVs.setDescription('The counter associated with the number of Coding Violations, as defined by [12], encountered by a DS3 CSU in the current 15 minute interval.')
ds3TotalTable = MibTable((1, 3, 6, 1, 2, 1, 10, 30, 4), )
if mibBuilder.loadTexts: ds3TotalTable.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalTable.setDescription('The DS3 Total table. 24 hour interval.')
ds3TotalEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 30, 4, 1), ).setIndexNames((0, "RFC1233-MIB", "ds3TotalIndex"))
if mibBuilder.loadTexts: ds3TotalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalEntry.setDescription('An entry in the DS3 Total table.')
ds3TotalIndex = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TotalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalIndex.setDescription('The index value which uniquely identifies the CSU to which this entry is applicable. The interface identified by a particular value of this index is the same interface as identified by the same value an DS3CSUIndex object instance.')
ds3TotalESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TotalESs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalESs.setDescription('The counter associated with the number of Errored Seconds, as defined by [12], encountered by a DS3 CSU in the previous 24 hour interval.')
ds3TotalSESs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TotalSESs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalSESs.setDescription('The counter associated with the number of Severely Errored Seconds, as defined by [12], encountered by a DS3 CSU in the previous 24 hour interval.')
ds3TotalSEFSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TotalSEFSs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalSEFSs.setDescription('The counter associated with the number of Severely Errored Framing Seconds, as defined by [12], encountered by a DS3 CSU in the previous 24 hour interval.')
ds3TotalUASs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TotalUASs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalUASs.setDescription('The counter associated with the number of Unavailable Seconds, as defined by [12], encountered by a DS3 CSU in the previous 24 hour interval.')
ds3TotalCSSs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TotalCSSs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalCSSs.setDescription('The counter associated with the number of Controlled Slip Seconds, as defined by [12], encountered by a DS3 CSU in the previous 24 hour interval. Note that SYNTRAN interfaces are the only interfaces that support the Controlled Slip Seconds managed object. Accordingly, agents configured with non-SYNTRAN interfaces may treat this object as having an ACCESS clause value of not-accessible.')
ds3TotalBPVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TotalBPVs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalBPVs.setDescription('The counter associated with the number of Bipolar Violations, as defined by [12], encountered by a DS3 CSU in the previous 24 hour interval.')
ds3TotalCVs = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 30, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ds3TotalCVs.setStatus('mandatory')
if mibBuilder.loadTexts: ds3TotalCVs.setDescription('The counter associated with the number of Coding Violations, as defined by [12], encountered by a DS3 CSU in the previous 24 hour interval.')
mibBuilder.exportSymbols("RFC1233-MIB", ds3CurrentBPVs=ds3CurrentBPVs, ds3CurrentCSSs=ds3CurrentCSSs, ds3CurrentSEFSs=ds3CurrentSEFSs, ds3IntervalSEFSs=ds3IntervalSEFSs, ds3IntervalESs=ds3IntervalESs, ds3IntervalBPVs=ds3IntervalBPVs, ds3TimeElapsed=ds3TimeElapsed, ds3TotalSESs=ds3TotalSESs, ds3IntervalEntry=ds3IntervalEntry, ds3ValidIntervals=ds3ValidIntervals, ds3ZeroCoding=ds3ZeroCoding, ds3CurrentUASs=ds3CurrentUASs, ds3ConfigTable=ds3ConfigTable, ds3YellowAlarm=ds3YellowAlarm, ds3CurrentIndex=ds3CurrentIndex, ds3TotalSEFSs=ds3TotalSEFSs, ds3CurrentSESs=ds3CurrentSESs, ds3CircuitIdentifier=ds3CircuitIdentifier, ds3IntervalCVs=ds3IntervalCVs, ds3TotalEntry=ds3TotalEntry, ds3LineType=ds3LineType, ds3IntervalIndex=ds3IntervalIndex, ds3CurrentCVs=ds3CurrentCVs, ds3RedAlarm=ds3RedAlarm, ds3CurrentESs=ds3CurrentESs, ds3TotalCSSs=ds3TotalCSSs, ds3IntervalTable=ds3IntervalTable, ds3IntervalNumber=ds3IntervalNumber, ds3TotalESs=ds3TotalESs, ds3IntervalUASs=ds3IntervalUASs, ds3Index=ds3Index, ds3Loopback=ds3Loopback, ds3TotalTable=ds3TotalTable, ds3SendCode=ds3SendCode, ds3TotalUASs=ds3TotalUASs, ds3IntervalCSSs=ds3IntervalCSSs, ds3CSUIndex=ds3CSUIndex, ds3CurrentEntry=ds3CurrentEntry, ds3TotalCVs=ds3TotalCVs, ds3CurrentTable=ds3CurrentTable, ds3ConfigEntry=ds3ConfigEntry, ds3TotalBPVs=ds3TotalBPVs, ds3=ds3, ds3TotalIndex=ds3TotalIndex, ds3IntervalSESs=ds3IntervalSESs)
