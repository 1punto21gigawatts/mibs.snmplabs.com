#
# PySNMP MIB module NETSCREEN-IP-ARP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETSCREEN-IP-ARP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:07 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
netscreenIp, = mibBuilder.importSymbols("NETSCREEN-SMI", "netscreenIp")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, ModuleIdentity, Integer32, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, ObjectIdentity, IpAddress, Counter64, Bits, TimeTicks, Gauge32, MibIdentifier = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "ModuleIdentity", "Integer32", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "ObjectIdentity", "IpAddress", "Counter64", "Bits", "TimeTicks", "Gauge32", "MibIdentifier")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
nsIpArp = ModuleIdentity((1, 3, 6, 1, 4, 1, 3224, 17, 1))
nsIpArp.setRevisions(('2004-05-03 00:00', '2004-03-03 00:00', '2003-11-10 00:00', '2001-09-28 00:00', '2001-05-02 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: nsIpArp.setRevisionsDescriptions(('Modified copyright and contact information', 'Converted to SMIv2 by Longview Software', 'Correct spelling mistake', 'No Comment', 'Creation Date',))
if mibBuilder.loadTexts: nsIpArp.setLastUpdated('200405032022Z')
if mibBuilder.loadTexts: nsIpArp.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: nsIpArp.setContactInfo('Customer Support 1194 North Mathilda Avenue Sunnyvale, California 94089-1206 USA Tel: 1-800-638-8296 E-mail: customerservice@juniper.net HTTP://www.juniper.net')
if mibBuilder.loadTexts: nsIpArp.setDescription('This module defines NetScreen private MIBs for ARP')
nsIpArpAOD = MibScalar((1, 3, 6, 1, 4, 1, 3224, 17, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1))))
if mibBuilder.loadTexts: nsIpArpAOD.setStatus('current')
if mibBuilder.loadTexts: nsIpArpAOD.setDescription('ARP always on destination.')
nsIpArpCachUpdate = MibScalar((1, 3, 6, 1, 4, 1, 3224, 17, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enabled", 1))))
if mibBuilder.loadTexts: nsIpArpCachUpdate.setStatus('current')
if mibBuilder.loadTexts: nsIpArpCachUpdate.setDescription('ARP cache update.')
nsIpArpTable = MibTable((1, 3, 6, 1, 4, 1, 3224, 17, 1, 3), )
if mibBuilder.loadTexts: nsIpArpTable.setStatus('current')
if mibBuilder.loadTexts: nsIpArpTable.setDescription('This table collects all the ARP entries existing in NetScreen device.')
nsIpArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3224, 17, 1, 3, 1), ).setIndexNames((0, "NETSCREEN-IP-ARP-MIB", "nsIpArpIndex"))
if mibBuilder.loadTexts: nsIpArpEntry.setStatus('current')
if mibBuilder.loadTexts: nsIpArpEntry.setDescription('An entry containing attributes of arp info')
nsIpArpIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 17, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpArpIndex.setStatus('current')
if mibBuilder.loadTexts: nsIpArpIndex.setDescription('A unique value for arp table. Its value ranges between 0 and 65535 and may not be contiguous.')
nsIpArpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 17, 1, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpArpIp.setStatus('current')
if mibBuilder.loadTexts: nsIpArpIp.setDescription('IP address.')
nsIpArpMac = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 17, 1, 3, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpArpMac.setStatus('current')
if mibBuilder.loadTexts: nsIpArpMac.setDescription('MAC address.')
nsIpArpVsys = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 17, 1, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpArpVsys.setStatus('current')
if mibBuilder.loadTexts: nsIpArpVsys.setDescription('Virtual system id this entry belongs to.')
nsIpArpIfIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 17, 1, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpArpIfIdx.setStatus('current')
if mibBuilder.loadTexts: nsIpArpIfIdx.setDescription('Interface location.')
nsIpArpState = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 17, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("pending", 1), ("valid", 2), ("delete", 3), ("static", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpArpState.setStatus('current')
if mibBuilder.loadTexts: nsIpArpState.setDescription('ARP entry state.')
nsIpArpAge = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 17, 1, 3, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpArpAge.setStatus('current')
if mibBuilder.loadTexts: nsIpArpAge.setDescription('ARP entry age.')
nsIpArpRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 17, 1, 3, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpArpRetry.setStatus('current')
if mibBuilder.loadTexts: nsIpArpRetry.setDescription('ARP entry retry time.')
nsIpArpPakQue = MibTableColumn((1, 3, 6, 1, 4, 1, 3224, 17, 1, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nsIpArpPakQue.setStatus('current')
if mibBuilder.loadTexts: nsIpArpPakQue.setDescription('ARP entry package queue.')
mibBuilder.exportSymbols("NETSCREEN-IP-ARP-MIB", nsIpArpMac=nsIpArpMac, nsIpArpVsys=nsIpArpVsys, nsIpArpIndex=nsIpArpIndex, PYSNMP_MODULE_ID=nsIpArp, nsIpArpAge=nsIpArpAge, nsIpArpRetry=nsIpArpRetry, nsIpArpIp=nsIpArpIp, nsIpArpState=nsIpArpState, nsIpArpCachUpdate=nsIpArpCachUpdate, nsIpArpAOD=nsIpArpAOD, nsIpArpTable=nsIpArpTable, nsIpArp=nsIpArp, nsIpArpEntry=nsIpArpEntry, nsIpArpIfIdx=nsIpArpIfIdx, nsIpArpPakQue=nsIpArpPakQue)
