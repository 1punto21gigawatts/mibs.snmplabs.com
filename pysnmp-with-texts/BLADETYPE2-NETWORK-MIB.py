#
# PySNMP MIB module BLADETYPE2-NETWORK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/BLADETYPE2-NETWORK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:39:11 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion")
hpSwitchBladeType2_Mgmt, = mibBuilder.importSymbols("HP-SWITCH-PL-MIB", "hpSwitchBladeType2-Mgmt")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Gauge32, Counter32, iso, ObjectIdentity, Integer32, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Bits, Unsigned32, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Gauge32", "Counter32", "iso", "ObjectIdentity", "Integer32", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Bits", "Unsigned32", "IpAddress")
PhysAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "PhysAddress", "TextualConvention", "DisplayString")
layer3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3))
if mibBuilder.loadTexts: layer3.setLastUpdated('200312050000Z')
if mibBuilder.loadTexts: layer3.setOrganization('Hewlett Packard Company ')
if mibBuilder.loadTexts: layer3.setContactInfo('customerservice@hp.com')
if mibBuilder.loadTexts: layer3.setDescription('The MIB module for the Layer 3 configuration, statistics and information .')
layer3Configs = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1))
layer3Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2))
layer3Info = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3))
layer3Oper = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 4))
ipInterfaceCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1))
ipGatewayCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2))
ipStaticRouteCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3))
ipForwardCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 4))
ripCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5))
vrrpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6))
arpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7))
ipBootpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 8))
dnsCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 9))
ipNwfCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10))
ipRmapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11))
ospfCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13))
ipGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 14))
igmpCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15))
rip2Cfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18))
ripStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 1))
arpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 2))
routeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 3))
vrrpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 4))
ospfStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5))
clearStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 6))
igmpStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7))
rip2Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 13))
dnsStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 14))
geal3Stats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 15))
ipRoutingInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 1))
arpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 2))
vrrpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 3))
ospfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4))
igmpInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5))
rip2Info = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7))
ipInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8))
vrrpOper = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 4, 1))
ipInterfaceTableMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInterfaceTableMax.setStatus('current')
if mibBuilder.loadTexts: ipInterfaceTableMax.setDescription('The maximum number of rows in the IP interface table.')
ipCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 2), )
if mibBuilder.loadTexts: ipCurCfgIntfTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfTable.setDescription('The table of IP interface configuration.')
ipCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipCurCfgIntfIndex"))
if mibBuilder.loadTexts: ipCurCfgIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfEntry.setDescription('A row in the Ip interface table')
ipCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfIndex.setDescription('The interface number for which the IP information is related.')
ipCurCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfAddr.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfAddr.setDescription('The IP address of the interface.')
ipCurCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfMask.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfMask.setDescription('The subnet mask of the interface.')
ipCurCfgIntfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfBroadcast.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfBroadcast.setDescription('The broadcast address of the interface.')
ipCurCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfVlan.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfVlan.setDescription('The VLAN associated with the interface.')
ipCurCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfState.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfState.setDescription('The state of the interface.')
ipCurCfgIntfBootpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgIntfBootpRelay.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgIntfBootpRelay.setDescription('Enable/disable BOOTP relay.')
ipNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 3), )
if mibBuilder.loadTexts: ipNewCfgIntfTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfTable.setDescription('The table of interface configuration in the New Configuration Block.')
ipNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 3, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipNewCfgIntfIndex"))
if mibBuilder.loadTexts: ipNewCfgIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfEntry.setDescription('A row in the Ip interface table')
ipNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfIndex.setDescription('The interface number for which the IP information is related.')
ipNewCfgIntfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfAddr.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfAddr.setDescription('The IP address of the interface.')
ipNewCfgIntfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfMask.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfMask.setDescription('The subnet mask of the interface.')
ipNewCfgIntfBroadcast = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfBroadcast.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfBroadcast.setDescription('The broadcast address of the interface.')
ipNewCfgIntfVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfVlan.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfVlan.setDescription('The VLAN associated with the interface.')
ipNewCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfState.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfState.setDescription('The state of the interface.')
ipNewCfgIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfDelete.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipNewCfgIntfBootpRelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgIntfBootpRelay.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgIntfBootpRelay.setDescription('Enable/disable BOOTP relay.')
ipGatewayTableMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipGatewayTableMax.setStatus('current')
if mibBuilder.loadTexts: ipGatewayTableMax.setDescription('The maximum number of rows in the IP gateway table.')
ipCurCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 4), )
if mibBuilder.loadTexts: ipCurCfgGwTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwTable.setDescription('The table of gateways in the Current configuration Block.')
ipCurCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 4, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipCurCfgGwIndex"))
if mibBuilder.loadTexts: ipCurCfgGwEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwEntry.setDescription('A row in the Ip gateway table')
ipCurCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwIndex.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwIndex.setDescription('The gateway number for which the information is related.')
ipCurCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwAddr.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwAddr.setDescription('The IP address of the default gateway.')
ipCurCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwInterval.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwInterval.setDescription('The interval between ping attempts.')
ipCurCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwRetry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwRetry.setDescription('The number of failed attempts to declare the default gateway DOWN.')
ipCurCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwState.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwState.setDescription('The state of the default gateway.')
ipCurCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgGwArp.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgGwArp.setDescription('The state of ARP only health checks.')
ipNewCfgGwTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 5), )
if mibBuilder.loadTexts: ipNewCfgGwTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwTable.setDescription('The table of gateway configuration in the new configuration block.')
ipNewCfgGwEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 5, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipNewCfgGwIndex"))
if mibBuilder.loadTexts: ipNewCfgGwEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwEntry.setDescription('A row in the Ip default gateway table')
ipNewCfgGwIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgGwIndex.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwIndex.setDescription('The gateway number for which the information is related.')
ipNewCfgGwAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwAddr.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwAddr.setDescription('The IP address of the default gateway.')
ipNewCfgGwInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwInterval.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwInterval.setDescription('The interval in seconds between ping attempts.')
ipNewCfgGwRetry = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwRetry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwRetry.setDescription('The number of failed attempts to declare the default gateway DOWN.')
ipNewCfgGwState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwState.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwState.setDescription('The state of the default gateway.')
ipNewCfgGwDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwDelete.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipNewCfgGwArp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 2, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgGwArp.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgGwArp.setDescription('The state of the ARP only health checks.')
ipStaticRouteTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticRouteTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ipStaticRouteTableMaxSize.setDescription('The maximum number of rows in the Static Route table.')
ipCurCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 2), )
if mibBuilder.loadTexts: ipCurCfgStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticRouteTable.setDescription('The table of static routes in the current configuration block.')
ipCurCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipCurCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipCurCfgStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticRouteEntry.setDescription('A row in the static IP route table')
ipCurCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteIndx.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticRouteIndx.setDescription('The index of the static routing table.')
ipCurCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteDestIp.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticRouteDestIp.setDescription('The destination IP address of this route.')
ipCurCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteMask.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticRouteMask.setDescription('The destination IP address of this route.')
ipCurCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 2, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteGateway.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticRouteGateway.setDescription('The destination IP address of this route.')
ipCurCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticRouteInterface.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticRouteInterface.setDescription('The IP interface of this route. The IP address of the specified interface shall be use as source IP when performs routing.')
ipNewCfgStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 3), )
if mibBuilder.loadTexts: ipNewCfgStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteTable.setDescription('The table of static routes in the new configuration block.')
ipNewCfgStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 3, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipNewCfgStaticRouteIndx"))
if mibBuilder.loadTexts: ipNewCfgStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteEntry.setDescription('A row in the static IP route table')
ipNewCfgStaticRouteIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgStaticRouteIndx.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteIndx.setDescription('The index of the static routing table.')
ipNewCfgStaticRouteDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteDestIp.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteDestIp.setDescription('The destination IP address of this route.')
ipNewCfgStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteMask.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteMask.setDescription('The subnet mask of this route.')
ipNewCfgStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 3, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteGateway.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteGateway.setDescription('The IP address of the gateway for this route.')
ipNewCfgStaticRouteAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteAction.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteAction.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipNewCfgStaticRouteInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 3, 3, 1, 6), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticRouteInterface.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticRouteInterface.setDescription('The IP interface of this route. The IP address of the specified interface shall be use as source IP when performs routing.')
ripCurCfgSupply = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgSupply.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgSupply.setDescription('Enable or disable supplying route updates.')
ripNewCfgSupply = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgSupply.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgSupply.setDescription('Enable or disable supplying route updates.')
ripCurCfgListen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgListen.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgListen.setDescription('Enable or disable listening to route updates.')
ripNewCfgListen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgListen.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgListen.setDescription('Enable or disable listening to route updates.')
ripCurCfgDefListen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgDefListen.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgDefListen.setDescription('Enable or disable listening to default routes.')
ripNewCfgDefListen = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgDefListen.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgDefListen.setDescription('Enable or disable listening to default routes.')
ripCurCfgStaticSupply = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgStaticSupply.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgStaticSupply.setDescription('Enable or disable supplying static route updates.')
ripNewCfgStaticSupply = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgStaticSupply.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgStaticSupply.setDescription('Enable or disable supplying static route updates.')
ripCurCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgUpdatePeriod.setDescription('Update Period in seconds.')
ripNewCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgUpdatePeriod.setDescription('Update period in seconds.')
ripCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgState.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgState.setDescription('RIP global state.')
ripNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgState.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgState.setDescription('Globally turn RIP on or off.')
ripCurCfgPoisonReverse = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgPoisonReverse.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgPoisonReverse.setDescription('RIP poison reverse.')
ripNewCfgPoisonReverse = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgPoisonReverse.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgPoisonReverse.setDescription('RIP poison reverse.')
ripCurCfgSplitHorizon = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgSplitHorizon.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgSplitHorizon.setDescription('RIP split horizon.')
ripNewCfgSplitHorizon = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 5, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgSplitHorizon.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgSplitHorizon.setDescription('RIP split horizon.')
ripCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1), )
if mibBuilder.loadTexts: ripCurCfgIntfTable.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfTable.setDescription('The table of RIP on IP interface configuration in the current_config.')
ripCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ripCurCfgIntfIndex"))
if mibBuilder.loadTexts: ripCurCfgIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfEntry.setDescription('Information about RIP on IP interface.')
ripCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfIndex.setDescription('The interface number for which the RIP information is related.')
ripCurCfgIntfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ripVersion1", 1), ("ripVersion2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfVersion.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfVersion.setDescription('RIP version.')
ripCurCfgIntfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfSupply.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfSupply.setDescription('Enable or disable supplying route updates.')
ripCurCfgIntfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfListen.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfListen.setDescription('Enable or disable listening to route updates.')
ripCurCfgIntfDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("listen", 2), ("supply", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfDefault.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfDefault.setDescription('Specifies what RIP does with default routes.')
ripCurCfgIntfTrigUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfTrigUpdate.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfTrigUpdate.setDescription('Enable or disable tirggered updates.')
ripCurCfgIntfMcastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfMcastUpdate.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfMcastUpdate.setDescription('Enable or disable multicast updates.')
ripCurCfgIntfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfPoisonReverse.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfPoisonReverse.setDescription('RIP poison reverse.')
ripCurCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfState.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfState.setDescription('Enable or disable RIP protocol.')
ripCurCfgIntfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfMetric.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfMetric.setDescription('RIP route metric for this interface.')
ripCurCfgIntfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfAuth.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfAuth.setDescription('Enable or disable RIP update authorization with a simple plain text password.')
ripCurCfgIntfKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfKey.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfKey.setDescription('RIP update authencation password.')
ripCurCfgIntfSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgIntfSplitHorizon.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgIntfSplitHorizon.setDescription('RIP split horizon.')
ripNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2), )
if mibBuilder.loadTexts: ripNewCfgIntfTable.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfTable.setDescription('The table of RIP on IP interface configuration in the new_config.')
ripNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ripNewCfgIntfIndex"))
if mibBuilder.loadTexts: ripNewCfgIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfEntry.setDescription('Information about RIP on IP interface.')
ripNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfIndex.setDescription('The interface number for which the RIP information is related.')
ripNewCfgIntfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ripVersion1", 1), ("ripVersion2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfVersion.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfVersion.setDescription('RIP version.')
ripNewCfgIntfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfSupply.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfSupply.setDescription('Enable or disable supplying route updates.')
ripNewCfgIntfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfListen.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfListen.setDescription('Enable or disable listening to route updates.')
ripNewCfgIntfDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("listen", 2), ("supply", 3), ("none", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfDefault.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfDefault.setDescription('Specifies what RIP does with default routes. The default routes action could be set to listen/supply/both/none.')
ripNewCfgIntfTrigUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfTrigUpdate.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfTrigUpdate.setDescription('Enable or disable tirggered updates.')
ripNewCfgIntfMcastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfMcastUpdate.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfMcastUpdate.setDescription('Enable or disable multicast updates.')
ripNewCfgIntfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfPoisonReverse.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfPoisonReverse.setDescription('RIP poison reverse.')
ripNewCfgIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfState.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfState.setDescription('Enable or disable RIP protocol.')
ripNewCfgIntfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfMetric.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfMetric.setDescription('RIP route metric for this interface.')
ripNewCfgIntfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfAuth.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfAuth.setDescription('Enable or disable RIP update authorization with a simple plain text password.')
ripNewCfgIntfKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ripNewCfgIntfKey.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfKey.setDescription('RIP update authencation password.')
ripNewCfgIntfSplitHorizon = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgIntfSplitHorizon.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgIntfSplitHorizon.setDescription('RIP split horizon.')
ripGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 3))
rip2CurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2CurCfgState.setStatus('current')
if mibBuilder.loadTexts: rip2CurCfgState.setDescription('RIP global state.')
rip2NewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2NewCfgState.setStatus('current')
if mibBuilder.loadTexts: rip2NewCfgState.setDescription('Globally turn RIP on or off.')
rip2CurCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 3, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rip2CurCfgUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: rip2CurCfgUpdatePeriod.setDescription('Update Period in seconds.')
rip2NewCfgUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 3, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rip2NewCfgUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: rip2NewCfgUpdatePeriod.setDescription('Update Period in seconds.')
ripRouteRedistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4))
ripRedistributeStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 1))
ripCurCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgStaticMetric.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgStaticMetric.setDescription('The metric to be assigned to static routes. A value of 0 indicates none.')
ripNewCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgStaticMetric.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgStaticMetric.setDescription('The metric to be assigned to static routes. A value of 0 indicates none.')
ripCurCfgStaticOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgStaticOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgStaticOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgStaticOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgStaticOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgStaticOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgStaticAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgStaticAddOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgStaticAddOutRmap.setDescription('The route map to be add into out-rmap list. When read, 0 is returned.')
ripNewCfgStaticRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgStaticRemoveOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgStaticRemoveOutRmap.setDescription('The route map to be removed from out-rmap list. When read, 0 is returned.')
ripRedistributeFixed = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 4))
ripCurCfgFixedMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgFixedMetric.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgFixedMetric.setDescription('The export metric for fixed routes. A value of 0 indicates none')
ripNewCfgFixedMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgFixedMetric.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgFixedMetric.setDescription('The export metric for fixed routes. A value of 0 indicates none')
ripCurCfgFixedOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 4, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgFixedOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgFixedOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgFixedOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 4, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgFixedOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgFixedOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgFixedAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgFixedAddOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgFixedAddOutRmap.setDescription('The route map to be add into out-rmap list. When read, 0 is returned.')
ripNewCfgFixedRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgFixedRemoveOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgFixedRemoveOutRmap.setDescription('The route map to be removed from out-rmap list. When read, 0 is returned.')
ripRedistributeOspf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 5))
ripCurCfgOspfMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgOspfMetric.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgOspfMetric.setDescription('The export metric for RIP routes. A value of 0 indicates none')
ripNewCfgOspfMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgOspfMetric.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgOspfMetric.setDescription('The export metric for RIP routes. A value of 0 indicates none')
ripCurCfgOspfOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 5, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgOspfOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgOspfOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgOspfOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 5, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgOspfOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgOspfOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgOspfAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgOspfAddOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgOspfAddOutRmap.setDescription('The route map to be add into out-rmap list. When read, 0 is returned.')
ripNewCfgOspfRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgOspfRemoveOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgOspfRemoveOutRmap.setDescription('The route map to be removed from out-rmap list. When read, 0 is returned.')
ripRedistributeEospf = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 6))
ripCurCfgEospfMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgEospfMetric.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgEospfMetric.setDescription('The export metric for RIP routes. A value of 0 indicates none')
ripNewCfgEospfMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgEospfMetric.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgEospfMetric.setDescription('The export metric for RIP routes. A value of 0 indicates none')
ripCurCfgEospfOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 6, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripCurCfgEospfOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripCurCfgEospfOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgEospfOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 6, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripNewCfgEospfOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgEospfOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ripNewCfgEospfAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 6, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgEospfAddOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgEospfAddOutRmap.setDescription('The route map to be add into out-rmap list. When read, 0 is returned.')
ripNewCfgEospfRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 18, 4, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ripNewCfgEospfRemoveOutRmap.setStatus('current')
if mibBuilder.loadTexts: ripNewCfgEospfRemoveOutRmap.setDescription('The route map to be removed from out-rmap list. When read, 0 is returned.')
ipFwdGeneralCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 4, 1))
ipFwdCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgState.setStatus('current')
if mibBuilder.loadTexts: ipFwdCurCfgState.setDescription('IP forwarding global state.')
ipFwdNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("on", 2), ("off", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgState.setStatus('current')
if mibBuilder.loadTexts: ipFwdNewCfgState.setDescription('IP forwarding global state.')
ipFwdCurCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipFwdCurCfgDirectedBcast.setStatus('current')
if mibBuilder.loadTexts: ipFwdCurCfgDirectedBcast.setDescription('Enable or disable forwarding directed broadcasts.')
ipFwdNewCfgDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipFwdNewCfgDirectedBcast.setStatus('current')
if mibBuilder.loadTexts: ipFwdNewCfgDirectedBcast.setDescription('Enable or disable forwarding directed broadcasts.')
arpCurCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpCurCfgReARPPeriod.setStatus('current')
if mibBuilder.loadTexts: arpCurCfgReARPPeriod.setDescription('Re-ARP Period in seconds.')
arpNewCfgReARPPeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpNewCfgReARPPeriod.setStatus('current')
if mibBuilder.loadTexts: arpNewCfgReARPPeriod.setDescription('Re-ARP Period in seconds.')
ipStaticArpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipStaticArpTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ipStaticArpTableMaxSize.setDescription('The maximum number of rows in the Static ARP table.')
ipCurCfgStaticArpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 4), )
if mibBuilder.loadTexts: ipCurCfgStaticArpTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticArpTable.setDescription('The table of static ARPs in the current configuration block.')
ipCurCfgStaticArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 4, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipCurCfgStaticArpIndx"))
if mibBuilder.loadTexts: ipCurCfgStaticArpEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticArpEntry.setDescription('A row in the static ARP table')
ipCurCfgStaticArpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpIndx.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticArpIndx.setDescription('The index of the static ARP table.')
ipCurCfgStaticArpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpIp.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticArpIp.setDescription('The IP address for the ARP entry.')
ipCurCfgStaticArpMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 4, 1, 3), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpMAC.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticArpMAC.setDescription('The MAC address for the ARP entry.')
ipCurCfgStaticArpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 4, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpVlan.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticArpVlan.setDescription('The VLAN for the ARP entry.')
ipCurCfgStaticArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgStaticArpPort.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgStaticArpPort.setDescription('The port for the ARP entry.')
ipNewCfgStaticArpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 5), )
if mibBuilder.loadTexts: ipNewCfgStaticArpTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpTable.setDescription('The table of static ARPs in the new configuration block.')
ipNewCfgStaticArpEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 5, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipNewCfgStaticArpIndx"))
if mibBuilder.loadTexts: ipNewCfgStaticArpEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpEntry.setDescription('A row in the static ARP table')
ipNewCfgStaticArpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgStaticArpIndx.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpIndx.setDescription('The index of the static ARP table.')
ipNewCfgStaticArpIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 5, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpIp.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpIp.setDescription('The IP address for the ARP entry.')
ipNewCfgStaticArpMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 5, 1, 3), PhysAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpMAC.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpMAC.setDescription('The MAC address for the ARP entry.')
ipNewCfgStaticArpVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 5, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4090))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpVlan.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpVlan.setDescription('The VLAN for the ARP entry.')
ipNewCfgStaticArpPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 5, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpPort.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpPort.setDescription('The port for the ARP entry.')
ipNewCfgStaticArpAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 7, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgStaticArpAction.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgStaticArpAction.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipCurCfgBootpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpAddr.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgBootpAddr.setDescription('The IP address of BOOTP server.')
ipNewCfgBootpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 8, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpAddr.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgBootpAddr.setDescription('The IP address of BOOTP server.')
ipCurCfgBootpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 8, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpAddr2.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgBootpAddr2.setDescription('The IP address of second BOOTP server.')
ipNewCfgBootpAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 8, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpAddr2.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgBootpAddr2.setDescription('The IP address of second BOOTP server.')
ipCurCfgBootpState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgBootpState.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgBootpState.setDescription('The state of BOOTP relay.')
ipNewCfgBootpState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 8, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgBootpState.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgBootpState.setDescription('The state of BOOTP relay.')
ipCurCfgDhcpOpt82State = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgDhcpOpt82State.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgDhcpOpt82State.setDescription('The state of DHCP relay agent information.')
ipNewCfgDhcpOpt82State = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgDhcpOpt82State.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgDhcpOpt82State.setDescription('The state of DHCP relay agent information.')
vrrpGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1))
vrrpCurCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenState.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgGenState.setDescription('Enable or disable VRRP operation globally.')
vrrpNewCfgGenState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenState.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgGenState.setDescription('Enable or disable VRRP operation globally.')
vrrpCurCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVirtRtrInc.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgGenTckVirtRtrInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of other virtual routers.')
vrrpNewCfgGenTckVirtRtrInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVirtRtrInc.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgGenTckVirtRtrInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of other virtual routers.')
vrrpCurCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckIpIntfInc.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgGenTckIpIntfInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of other router interfaces.')
vrrpNewCfgGenTckIpIntfInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckIpIntfInc.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgGenTckIpIntfInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of other router interfaces.')
vrrpCurCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckVlanPortInc.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgGenTckVlanPortInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the port state of ports that belongs to the same virtual LAN as the virtual router.')
vrrpNewCfgGenTckVlanPortInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckVlanPortInc.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgGenTckVlanPortInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the port state of ports that belongs to the same virtual LAN as the virtual router.')
vrrpCurCfgGenTckL4PortInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckL4PortInc.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgGenTckL4PortInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the Layer 4 port states. This is valid when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgGenTckL4PortInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckL4PortInc.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgGenTckL4PortInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the Layer 4 port states. This is valid when virtual server is configured as a VRRP virtual router.')
vrrpCurCfgGenTckRServerInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckRServerInc.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgGenTckRServerInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of real servers under the virtual server which is configured as a VRRP virtual router.')
vrrpNewCfgGenTckRServerInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckRServerInc.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgGenTckRServerInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the state of real servers under the virtual server which is configured as a VRRP virtual router.')
vrrpCurCfgGenTckHsrpInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrpInc.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrpInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the HSRP advertisements.')
vrrpNewCfgGenTckHsrpInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrpInc.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrpInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the HSRP advertisements.')
vrrpCurCfgGenHotstandby = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenHotstandby.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgGenHotstandby.setDescription('Enable or disable hotstandby processing.')
vrrpNewCfgGenHotstandby = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenHotstandby.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgGenHotstandby.setDescription('Enable or disable hotstandby processing.')
vrrpCurCfgGenTckHsrvInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrvInc.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgGenTckHsrvInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the HSRP advertisements by VLAN.')
vrrpNewCfgGenTckHsrvInc = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrvInc.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgGenTckHsrvInc.setDescription('The increment of VRRP virtual router priority. The priority is adjusted by tracking the HSRP advertisements by VLAN.')
vrrpVirtRtrTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpVirtRtrTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: vrrpVirtRtrTableMaxSize.setDescription('The maximum number of entries in VRRP virtual router table.')
vrrpCurCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTable.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTable.setDescription('The table of VRRP virtual routers configuration in current_config.')
vrrpCurCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "vrrpCurCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTableEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTableEntry.setDescription('Information about a VRRP virtual router.')
vrrpCurCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIndx.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIndx.setDescription('The VRRP virtual router table index.')
vrrpCurCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrID.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrID.setDescription('The VRRP virtual router identifier.')
vrrpCurCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrAddr.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrAddr.setDescription('The VRRP virtual router IP address.')
vrrpCurCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIfIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpCurCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrInterval.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrInterval.setDescription('The time interval between VRRP advertisements in seconds.')
vrrpCurCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPriority.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPriority.setDescription('The priority value to be used by the specified VRRP virtual routers.')
vrrpCurCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPreempt.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrPreempt.setDescription('This is for controlling whether a higher priority Backup VRRP virtual router preempts a low priority Master. enabled(1) - allow preemption disabled(2) - prohibit preemption')
vrrpCurCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrState.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrState.setDescription('Enable or disable the VRRP virtual router.')
vrrpCurCfgVirtRtrSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrSharing.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrSharing.setDescription('Enable or disable load sharing of non-master virtual router.')
vrrpCurCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVirtRtr.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVirtRtr.setDescription('Enable or disable tracking other virtual routers for priority adjustment. The priority increment is defined in vrrpCurCfgGenTckVirtRtrInc.')
vrrpCurCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckIpIntf.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckIpIntf.setDescription('Enable or disable tracking other router interfaces for priority adjustment. The priority increment is defined in vrrpCurCfgGenTckIpIntfInc.')
vrrpCurCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVlanPort.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports for priority adjustment. The priority increment is defined in vrrpCurCfgGenTckVlanPortInc.')
vrrpCurCfgVirtRtrTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckL4Port.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckL4Port.setDescription('Enable or disable tracking Layer 4 port states for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckL4PortInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckRServer.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckRServer.setDescription('Enable or disable tracking real server states for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckRServerInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrp.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrp.setDescription('Enable or disable tracking HSRP advertisements for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckHsrpInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrv.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrTckHsrv.setDescription('Enable or disable tracking HSRP advertisements by VLAN for priority adjustment. The priority increment is defined in vrrpCurCfgGenTckHsrvInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTable.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTable.setDescription('The table of VRRP virtual routers configuration in current_config.')
vrrpNewCfgVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "vrrpNewCfgVirtRtrIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTableEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTableEntry.setDescription('Information about a VRRP virtual router.')
vrrpNewCfgVirtRtrIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIndx.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIndx.setDescription('The VRRP virtual router table index.')
vrrpNewCfgVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrID.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrID.setDescription('The VRRP virtual router identifier.')
vrrpNewCfgVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrAddr.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrAddr.setDescription('The VRRP virtual router IP address.')
vrrpNewCfgVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIfIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpNewCfgVirtRtrInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrInterval.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrInterval.setDescription('The time interval between VRRP advertisements in seconds.')
vrrpNewCfgVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPriority.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPriority.setDescription('The priority value to be used by the specified VRRP virtual router.')
vrrpNewCfgVirtRtrPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPreempt.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrPreempt.setDescription('This is for controlling whether a higher priority Backup VRRP virtual router preempts a low priority Master. enabled(1) - allow preemption disabled(2) - prohibit preemption')
vrrpNewCfgVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrState.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrState.setDescription('Enable or disable the VRRP virtual router.')
vrrpNewCfgVirtRtrDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrDelete.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
vrrpNewCfgVirtRtrSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrSharing.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrSharing.setDescription('Enable or disable load sharing of non-master virtual router.')
vrrpNewCfgVirtRtrTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVirtRtr.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVirtRtr.setDescription('Enable or disable tracking other virtual routers for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckVirtRtrInc.')
vrrpNewCfgVirtRtrTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckIpIntf.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckIpIntf.setDescription('Enable or disable tracking other router interfaces for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckIpIntfInc.')
vrrpNewCfgVirtRtrTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVlanPort.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckVlanPortInc.')
vrrpNewCfgVirtRtrTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckL4Port.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckL4Port.setDescription('Enable or disable tracking Layer 4 port states for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckL4PortInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckRServer.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckRServer.setDescription('Enable or disable tracking real server states for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckRServerInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrp.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrp.setDescription('Enable or disable tracking HSRP advertisements for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckHsrpInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 4, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrv.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrTckHsrv.setDescription('Enable or disable tracking HSRP by VLAN advertisements for priority adjustment. The priority increment is defined in vrrpNewCfgGenTckHsrvInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpIfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpIfTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: vrrpIfTableMaxSize.setDescription('The maximum number of entries in VRRP interface table.')
vrrpCurCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 6), )
if mibBuilder.loadTexts: vrrpCurCfgIfTable.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgIfTable.setDescription('The table of VRRP interface configuration in current_config.')
vrrpCurCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 6, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "vrrpCurCfgIfIndx"))
if mibBuilder.loadTexts: vrrpCurCfgIfTableEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgIfTableEntry.setDescription('Information about a VRRP interface.')
vrrpCurCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfIndx.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgIfIndx.setDescription('The VRRP interface index. This is eqivalent to IfIndex.')
vrrpCurCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfAuthType.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgIfAuthType.setDescription('Type of authentication being used. none(1) - no authentication simple-text-password(2) - use password specified in vrrpCurCfgIfPasswd for authentication.')
vrrpCurCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgIfPasswd.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgIfPasswd.setDescription('The password for authentication.')
vrrpNewCfgIfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 7), )
if mibBuilder.loadTexts: vrrpNewCfgIfTable.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgIfTable.setDescription('The table of VRRP interface configuration in current_config.')
vrrpNewCfgIfTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 7, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "vrrpNewCfgIfIndx"))
if mibBuilder.loadTexts: vrrpNewCfgIfTableEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgIfTableEntry.setDescription('Information about a VRRP interface.')
vrrpNewCfgIfIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgIfIndx.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgIfIndx.setDescription('The VRRP interface index. This is eqivalent to IfIndex.')
vrrpNewCfgIfAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("simple-text-password", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgIfAuthType.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgIfAuthType.setDescription('Type of authentication being used. none(1) - no authentication simple-text-password(2) - use password specified in vrrpNewCfgIfPasswd for authentication.')
vrrpNewCfgIfPasswd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 7, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgIfPasswd.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgIfPasswd.setDescription('The password for authentication.')
vrrpNewCfgIfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 7, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgIfDelete.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgIfDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
vrrpVirtRtrGrpTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpVirtRtrGrpTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: vrrpVirtRtrGrpTableMaxSize.setDescription('The maximum number of entries in VRRP Group table.')
vrrpCurCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9), )
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTable.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTable.setDescription('The table of VRRP virtual router group in current_config.')
vrrpCurCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "vrrpCurCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTableEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTableEntry.setDescription('Information about a VRRP failover virtual router.')
vrrpCurCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIndx.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIndx.setDescription('The VRRP virtual router table index.')
vrrpCurCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpID.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpID.setDescription('The VRRP virtual router identifier.')
vrrpCurCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIfIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpCurCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpInterval.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpInterval.setDescription('The time interval between VRRP advertisements in seconds.')
vrrpCurCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPriority.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPriority.setDescription('The priority value to be used by the specified VRRP virtual routers.')
vrrpCurCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPreempt.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpPreempt.setDescription('This is for controlling whether a higher priority Backup VRRP virtual router preempts a low priority Master. enabled(1) - allow preemption disabled(2) - prohibit preemption')
vrrpCurCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpState.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpState.setDescription('Enable or disable the VRRP virtual router.')
vrrpCurCfgVirtRtrGrpSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpSharing.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpSharing.setDescription('Enable or disable load sharing of non-master virtual router.')
vrrpCurCfgVirtRtrGrpTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVirtRtr.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVirtRtr.setDescription('Enable or disable tracking other virtual routers for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckVirtRtrInc.')
vrrpCurCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckIpIntf.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckIpIntf.setDescription('Enable or disable tracking other router interfaces for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckIpIntfInc.')
vrrpCurCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVlanPort.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckVlanPortInc.')
vrrpCurCfgVirtRtrGrpTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckL4Port.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckL4Port.setDescription('Enable or disable tracking Layer 4 port states for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckL4PortInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrGrpTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckRServer.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckRServer.setDescription('Enable or disable tracking real server states for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckRServerInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrGrpTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrp.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrp.setDescription('Enable or disable tracking HSRP advertisements for priority adjustment. the priority increment is defined in vrrpCurCfgGenTckHsrpInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpCurCfgVirtRtrGrpTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 9, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrv.setStatus('current')
if mibBuilder.loadTexts: vrrpCurCfgVirtRtrGrpTckHsrv.setDescription('Enable or disable tracking HSRP by VLAN advertisements for priority adjustment. The priority increment is defined in vrrpCurCfgGenTckHsrvInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrGrpTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10), )
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTable.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTable.setDescription('The table of VRRP virtual router group configuration in new_config.')
vrrpNewCfgVirtRtrGrpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "vrrpNewCfgVirtRtrGrpIndx"))
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTableEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTableEntry.setDescription('Information about a VRRP failover virtual router.')
vrrpNewCfgVirtRtrGrpIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIndx.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIndx.setDescription('The VRRP virtual router table index.')
vrrpNewCfgVirtRtrGrpID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpID.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpID.setDescription('The VRRP virtual router identifier.')
vrrpNewCfgVirtRtrGrpIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIfIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpNewCfgVirtRtrGrpInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpInterval.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpInterval.setDescription('The time interval between VRRP advertisements in seconds.')
vrrpNewCfgVirtRtrGrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPriority.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPriority.setDescription('The priority value to be used by the specified VRRP virtual router.')
vrrpNewCfgVirtRtrGrpPreempt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPreempt.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpPreempt.setDescription('This is for controlling whether a higher priority Backup VRRP virtual router preempts a low priority Master. enabled(1) - allow preemption disabled(2) - prohibit preemption')
vrrpNewCfgVirtRtrGrpState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpState.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpState.setDescription('Enable or disable the VRRP virtual router.')
vrrpNewCfgVirtRtrGrpDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpDelete.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than delete(2) has no effect on the state of the row.')
vrrpNewCfgVirtRtrGrpSharing = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpSharing.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpSharing.setDescription('Enable or disable load sharing of non-master virtual router.')
vrrpNewCfgVirtRtrGrpTckVirtRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVirtRtr.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVirtRtr.setDescription('Enable or disable tracking other virtual routers for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckVirtRtrInc.')
vrrpNewCfgVirtRtrGrpTckIpIntf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckIpIntf.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckIpIntf.setDescription('Enable or disable tracking other router interfaces for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckIpIntfInc.')
vrrpNewCfgVirtRtrGrpTckVlanPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVlanPort.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckVlanPort.setDescription('Enable or disable tracking port state of VLAN ports for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckVlanPortInc.')
vrrpNewCfgVirtRtrGrpTckL4Port = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckL4Port.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckL4Port.setDescription('Enable or disable tracking Layer 4 port states for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckL4PortInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrGrpTckRServer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckRServer.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckRServer.setDescription('Enable or disable tracking real server states for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckRServerInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrGrpTckHsrp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrp.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrp.setDescription('Enable or disable tracking HSRP advertisements for priority adjustment. the priority increment is defined in vrrpNewCfgGenTckHsrpInc. This is applied when virtual server is configured as a VRRP virtual router.')
vrrpNewCfgVirtRtrGrpTckHsrv = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 6, 10, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrv.setStatus('current')
if mibBuilder.loadTexts: vrrpNewCfgVirtRtrGrpTckHsrv.setDescription('Enable or disable tracking HSRP by VLAN advertisements for priority adjustment. The priority increment is defined in vrrpNewCfgGenTckHsrvInc. This is applied when virtual server is configured as a VRRP virtual router.')
dnsCurCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 9, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsCurCfgPrimaryIpAddr.setDescription('The DNS primary IP address in the current_configuration block.')
dnsNewCfgPrimaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 9, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgPrimaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsNewCfgPrimaryIpAddr.setDescription('The DNS primary IP address in the new_configuration block.')
dnsCurCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 9, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgSecondaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsCurCfgSecondaryIpAddr.setDescription('The DNS primary IP address in the current_configuration block.')
dnsNewCfgSecondaryIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 9, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgSecondaryIpAddr.setStatus('current')
if mibBuilder.loadTexts: dnsNewCfgSecondaryIpAddr.setDescription('The DNS primary IP address in the new_configuration block.')
dnsCurCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 9, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 191))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsCurCfgDomainName.setStatus('current')
if mibBuilder.loadTexts: dnsCurCfgDomainName.setDescription('The DNS doamin name in the current_configuration block.')
dnsNewCfgDomainName = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 9, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 191))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsNewCfgDomainName.setStatus('current')
if mibBuilder.loadTexts: dnsNewCfgDomainName.setDescription('The DNS doamin name in the new_configuration block.')
ipNwfTableMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNwfTableMax.setStatus('current')
if mibBuilder.loadTexts: ipNwfTableMax.setDescription('The maximum number of rows in the IP network filter table.')
ipCurCfgNwfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10, 2), )
if mibBuilder.loadTexts: ipCurCfgNwfTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgNwfTable.setDescription('The table of IP network filter configuration in the current_config.')
ipCurCfgNwfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipCurCfgNwfIndex"))
if mibBuilder.loadTexts: ipCurCfgNwfEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgNwfEntry.setDescription('Information about an IP network filter.')
ipCurCfgNwfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfIndex.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgNwfIndex.setDescription('The netowrk filter number for which the NWF is related.')
ipCurCfgNwfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfAddr.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgNwfAddr.setDescription('The IP address of the network filter.')
ipCurCfgNwfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfMask.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgNwfMask.setDescription('The subnet mask of the network filter.')
ipCurCfgNwfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgNwfState.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgNwfState.setDescription('Enable or disable the network filter.')
ipNewCfgNwfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10, 3), )
if mibBuilder.loadTexts: ipNewCfgNwfTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgNwfTable.setDescription('The table of IP network filter configuration in the current_config.')
ipNewCfgNwfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10, 3, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipNewCfgNwfIndex"))
if mibBuilder.loadTexts: ipNewCfgNwfEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgNwfEntry.setDescription('Information about an IP network filter.')
ipNewCfgNwfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgNwfIndex.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgNwfIndex.setDescription('The netowrk filter number for which the NWF is related.')
ipNewCfgNwfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfAddr.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgNwfAddr.setDescription('The IP address of the network filter.')
ipNewCfgNwfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10, 3, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfMask.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgNwfMask.setDescription('The subnet mask of the network filter.')
ipNewCfgNwfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfState.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgNwfState.setDescription('Enable or disable the network filter.')
ipNewCfgNwfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 10, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgNwfDelete.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgNwfDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipRmapTableMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRmapTableMax.setStatus('current')
if mibBuilder.loadTexts: ipRmapTableMax.setDescription('The maximum number of rows in the IP route map table.')
ipCurCfgRmapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 2), )
if mibBuilder.loadTexts: ipCurCfgRmapTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapTable.setDescription('The table of IP route map configuration in the current_config.')
ipCurCfgRmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipCurCfgRmapIndex"))
if mibBuilder.loadTexts: ipCurCfgRmapEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapEntry.setDescription('Information about an IP route map.')
ipCurCfgRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapIndex.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapIndex.setDescription('The route map number for which the RMAP is related.')
ipCurCfgRmapLp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapLp.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapLp.setDescription('The local-preference of the route map. 4294967295 means none')
ipCurCfgRmapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapMetric.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapMetric.setDescription('The metric of the route map. 4294967295 means none')
ipCurCfgRmapPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapPrec.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapPrec.setDescription('The precedence of the route map.')
ipCurCfgRmapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapWeight.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapWeight.setDescription('The weight of the route map. 65535 means none')
ipCurCfgRmapState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapState.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapState.setDescription('Enable or disable the route map.')
ipCurCfgRmapAp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapAp.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapAp.setDescription('The as-path prepend of the matched route. Up to 3 AS number can be displayed for the string. The usuage is:<AS number> [<AS number>][ <AS number>]')
ipCurCfgRmapMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRmapMetricType.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRmapMetricType.setDescription('The OSPF metric-type of the matched route.')
ipNewCfgRmapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 3), )
if mibBuilder.loadTexts: ipNewCfgRmapTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapTable.setDescription('The table of IP route map configuration in the current_config.')
ipNewCfgRmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 3, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipNewCfgRmapIndex"))
if mibBuilder.loadTexts: ipNewCfgRmapEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapEntry.setDescription('Information about an IP route map.')
ipNewCfgRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgRmapIndex.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapIndex.setDescription('The route map number for which the RMAP is related.')
ipNewCfgRmapLp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapLp.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapLp.setDescription('The local-preference of the route map. 4294967295 means none')
ipNewCfgRmapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapMetric.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapMetric.setDescription('The metric of the route map. 4294967295 means none')
ipNewCfgRmapPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapPrec.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapPrec.setDescription('The precedence of the route map.')
ipNewCfgRmapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 3, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapWeight.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapWeight.setDescription('The weight of the route map. 65535 means none')
ipNewCfgRmapState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapState.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapState.setDescription('Enable or disable the route map.')
ipNewCfgRmapAp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapAp.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapAp.setDescription('The as-path prepend of the matched route. Up to 3 AS number can be displayed for the string. The usuage is:<AS number> [<AS number>][ <AS number>]')
ipNewCfgRmapMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapMetricType.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapMetricType.setDescription('The OSPF metric-type of the matched route.')
ipNewCfgRmapDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 3, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgRmapDelete.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRmapDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipAlistTableMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAlistTableMax.setStatus('current')
if mibBuilder.loadTexts: ipAlistTableMax.setDescription('The maximum number of rows in the IP route map table.')
ipCurCfgAlistTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 5), )
if mibBuilder.loadTexts: ipCurCfgAlistTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistTable.setDescription('The table of IP route map access list configuration in the current_config.')
ipCurCfgAlistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 5, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipCurCfgAlistRmapIndex"), (0, "BLADETYPE2-NETWORK-MIB", "ipCurCfgAlistIndex"))
if mibBuilder.loadTexts: ipCurCfgAlistEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistEntry.setDescription('Information about an IP route map.')
ipCurCfgAlistRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistRmapIndex.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistRmapIndex.setDescription('The route map number for which the RMAP is related.')
ipCurCfgAlistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 5, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistIndex.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistIndex.setDescription('The access list number for which the access list is related.')
ipCurCfgAlistNwf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 5, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistNwf.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistNwf.setDescription('The network filter number of the route map access list. 0 means none')
ipCurCfgAlistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 5, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistMetric.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistMetric.setDescription('The metric of the route map access list. 4294967295 means none')
ipCurCfgAlistAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistAction.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistAction.setDescription('Action of the route map access list.')
ipCurCfgAlistState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAlistState.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAlistState.setDescription('Enable or disable the route map access list.')
ipNewCfgAlistTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 6), )
if mibBuilder.loadTexts: ipNewCfgAlistTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistTable.setDescription('The table of IP route map access list configuration in the current_config.')
ipNewCfgAlistEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 6, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipNewCfgAlistRmapIndex"), (0, "BLADETYPE2-NETWORK-MIB", "ipNewCfgAlistIndex"))
if mibBuilder.loadTexts: ipNewCfgAlistEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistEntry.setDescription('Information about an IP route map.')
ipNewCfgAlistRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgAlistRmapIndex.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistRmapIndex.setDescription('The route map number for which the RMAP is related.')
ipNewCfgAlistIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 6, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgAlistIndex.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistIndex.setDescription('The access list number for which the access list is related.')
ipNewCfgAlistNwf = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistNwf.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistNwf.setDescription('The network filter number of the route map access list. 0 means none')
ipNewCfgAlistMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 6, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistMetric.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistMetric.setDescription('The metric of the route map access list. 4294967295 means none')
ipNewCfgAlistAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistAction.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistAction.setDescription('Action of the route map access list.')
ipNewCfgAlistState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistState.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistState.setDescription('Enable or disable the route map access list.')
ipNewCfgAlistDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAlistDelete.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAlistDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ipAspathTableMax = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipAspathTableMax.setStatus('current')
if mibBuilder.loadTexts: ipAspathTableMax.setDescription('The maximum number of rows in the IP route map table.')
ipCurCfgAspathTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 8), )
if mibBuilder.loadTexts: ipCurCfgAspathTable.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAspathTable.setDescription('The table of IP route map access path configuration.')
ipCurCfgAspathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 8, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipCurCfgAspathRmapIndex"), (0, "BLADETYPE2-NETWORK-MIB", "ipCurCfgAlistIndex"))
if mibBuilder.loadTexts: ipCurCfgAspathEntry.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAspathEntry.setDescription('Information about an IP route map.')
ipCurCfgAspathRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathRmapIndex.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAspathRmapIndex.setDescription('The route map number for which the RMAP is related.')
ipCurCfgAspathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 8, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathIndex.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAspathIndex.setDescription('The access path number for which the access list is related.')
ipCurCfgAspathAS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathAS.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAspathAS.setDescription('The AS number of the route map access path. 0 means none')
ipCurCfgAspathAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathAction.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAspathAction.setDescription('Action of the route map access path.')
ipCurCfgAspathState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 8, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgAspathState.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgAspathState.setDescription('Enable or disable the route map access path.')
ipNewCfgAspathTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 9), )
if mibBuilder.loadTexts: ipNewCfgAspathTable.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAspathTable.setDescription('The table of IP route map access path configuration')
ipNewCfgAspathEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 9, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipNewCfgAspathRmapIndex"), (0, "BLADETYPE2-NETWORK-MIB", "ipNewCfgAspathIndex"))
if mibBuilder.loadTexts: ipNewCfgAspathEntry.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAspathEntry.setDescription('Information about an IP route map.')
ipNewCfgAspathRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgAspathRmapIndex.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAspathRmapIndex.setDescription('The route map number for which the RMAP is related.')
ipNewCfgAspathIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 9, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipNewCfgAspathIndex.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAspathIndex.setDescription('The access path number for which the access list is related.')
ipNewCfgAspathAS = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAspathAS.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAspathAS.setDescription('The AS number of the route map access path. 0 means none')
ipNewCfgAspathAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("permit", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAspathAction.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAspathAction.setDescription('Action of the route map access path.')
ipNewCfgAspathState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 9, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAspathState.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAspathState.setDescription('Enable or disable the route map access path.')
ipNewCfgAspathDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 11, 9, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ipNewCfgAspathDelete.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgAspathDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ospfGeneral = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 1))
ospfCurCfgDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetric.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetric.setDescription('Specify the metric to be assigned.')
ospfNewCfgDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetric.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetric.setDescription('Specify the metric to be assigned.')
ospfCurCfgDefaultRouteMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgDefaultRouteMetricType.setDescription('Specify the AS External metric type to be assigned.')
ospfNewCfgDefaultRouteMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgDefaultRouteMetricType.setDescription('Specify the AS External metric type to be assigned.')
ospfIntfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ospfIntfTableMaxSize.setDescription('The maximum number of rows in the OSPF Interface table.')
ospfAreaTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ospfAreaTableMaxSize.setDescription('The maximum number of rows in the OSPF Area table.')
ospfRangeTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRangeTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ospfRangeTableMaxSize.setDescription('The maximum number of rows in the OSPF Range table.')
ospfVirtIntfTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVirtIntfTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ospfVirtIntfTableMaxSize.setDescription('The maximum number of rows in the OSPF Virtual Interface table.')
ospfHostTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfHostTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ospfHostTableMaxSize.setDescription('The maximum number of rows in the OSPF Host table.')
ospfCurCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgState.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgState.setDescription('OSPF global state.')
ospfNewCfgState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgState.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgState.setDescription('Globally turn OSPF on or off.')
ospfCurCfgAreaTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 2), )
if mibBuilder.loadTexts: ospfCurCfgAreaTable.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaTable.setDescription('The table of OSPF Area configuration in the current_config.')
ospfCurCfgAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfCurCfgAreaIndex"))
if mibBuilder.loadTexts: ospfCurCfgAreaEntry.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaEntry.setDescription('Information about a OSPF area.')
ospfCurCfgAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaIndex.setDescription('The OSPF area number for which the OSPF area table is related.')
ospfCurCfgAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaId.setDescription('The IP Address of the OSPF area.')
ospfCurCfgAreaSpfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaSpfInterval.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaSpfInterval.setDescription('The SPF interval for the OSPF area.')
ospfCurCfgAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaAuthType.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaAuthType.setDescription('Type of authentication being used. none(1) - no authentication password(2) - use password md5(3) - use MD5 authentication.')
ospfCurCfgAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transit", 0), ("stub", 1), ("nssa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaType.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaType.setDescription('Type of Area. transit(0) stub(1) nssa(2)')
ospfCurCfgAreaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaMetric.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaMetric.setDescription('Metric (1-65535)')
ospfCurCfgAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgAreaStatus.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgAreaStatus.setDescription('Status disabled(0) enabled(1)')
ospfNewCfgAreaTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 3), )
if mibBuilder.loadTexts: ospfNewCfgAreaTable.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaTable.setDescription('The table of OSPF Area configuration in the new_config.')
ospfNewCfgAreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 3, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfNewCfgAreaIndex"))
if mibBuilder.loadTexts: ospfNewCfgAreaEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaEntry.setDescription('Information about a OSPF area.')
ospfNewCfgAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaIndex.setDescription('The OSPF area number for which the OSPF area table is related.')
ospfNewCfgAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 3, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaId.setDescription('The IP Address of the OSPF area.')
ospfNewCfgAreaSpfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaSpfInterval.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaSpfInterval.setDescription('The SPF interval for the OSPF area.')
ospfNewCfgAreaAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaAuthType.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaAuthType.setDescription('Type of authentication being used. none(1) - no authentication password(2) - use password. md5(3) - use MD5 authentication.')
ospfNewCfgAreaType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transit", 0), ("stub", 1), ("nssa", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaType.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaType.setDescription('Type of Area. transit(0) stub(1) nssa(2)')
ospfNewCfgAreaMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaMetric.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaMetric.setDescription('Metric (1-65535)')
ospfNewCfgAreaStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaStatus.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaStatus.setDescription('Status disabled(0) enabled(1)')
ospfNewCfgAreaDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgAreaDelete.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgAreaDelete.setDescription('Delete the area no(0), yes(1)')
ospfCurCfgHostTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 12), )
if mibBuilder.loadTexts: ospfCurCfgHostTable.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgHostTable.setDescription('The table of OSPF Host configuration.')
ospfCurCfgHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 12, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfCurCfgHostIndex"), (0, "BLADETYPE2-NETWORK-MIB", "ospfCurCfgHostIpAddr"))
if mibBuilder.loadTexts: ospfCurCfgHostEntry.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgHostEntry.setDescription('Information about a OSPF host.')
ospfCurCfgHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgHostIndex.setDescription('The OSPF host number for which the OSPF host table is related.')
ospfCurCfgHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 12, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostIpAddr.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgHostIpAddr.setDescription('The IP Address of the OSPF host.')
ospfCurCfgHostAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgHostAreaIndex.setDescription('The area index.')
ospfCurCfgHostCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 12, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostCost.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgHostCost.setDescription('The cost of the OSPF host.')
ospfCurCfgHostState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 12, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgHostState.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgHostState.setDescription('Enable or disable an OSPF Host')
ospfNewCfgHostTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 13), )
if mibBuilder.loadTexts: ospfNewCfgHostTable.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostTable.setDescription('The table of OSPF Host configuration.')
ospfNewCfgHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 13, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfNewCfgHostIndex"), (0, "BLADETYPE2-NETWORK-MIB", "ospfNewCfgHostIpAddr"))
if mibBuilder.loadTexts: ospfNewCfgHostEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostEntry.setDescription('Information about a OSPF host.')
ospfNewCfgHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgHostIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostIndex.setDescription('The OSPF host number for which the OSPF host table is related.')
ospfNewCfgHostIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 13, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgHostIpAddr.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostIpAddr.setDescription('The IP Address of the OSPF host.')
ospfNewCfgHostAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 13, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgHostAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostAreaIndex.setDescription('The OSPF area index.')
ospfNewCfgHostCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 13, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgHostCost.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostCost.setDescription('The cost of the OSPF host.')
ospfNewCfgHostState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 13, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgHostState.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostState.setDescription('Enable or disable an OSPF Host')
ospfNewCfgHostDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 13, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no", 0), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgHostDelete.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgHostDelete.setDescription('Delete the OSPF host: no(0), yes(1)')
ospfMdkeyTableMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfMdkeyTableMaxSize.setStatus('current')
if mibBuilder.loadTexts: ospfMdkeyTableMaxSize.setDescription('The maximum number of rows in the OSPF Mdkey table.')
ospfCurCfgMdkeyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 5), )
if mibBuilder.loadTexts: ospfCurCfgMdkeyTable.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgMdkeyTable.setDescription('The table of OSPF MD5 keys in the current_config.')
ospfCurCfgMdkeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 5, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfCurCfgMdkeyIndex"))
if mibBuilder.loadTexts: ospfCurCfgMdkeyEntry.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgMdkeyEntry.setDescription('Information about an OSPF MD keys table.')
ospfCurCfgMdkeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgMdkeyIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgMdkeyIndex.setDescription('The OSPF MD5 Key number for which the OSPF MdKey table is related.')
ospfCurCfgMdkeyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgMdkeyKey.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgMdkeyKey.setDescription('The character string representing the MD5 Key.')
ospfNewCfgMdkeyTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 6), )
if mibBuilder.loadTexts: ospfNewCfgMdkeyTable.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgMdkeyTable.setDescription('The table of OSPF MD5 keys in the new_config.')
ospfNewCfgMdkeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 6, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfNewCfgMdkeyIndex"))
if mibBuilder.loadTexts: ospfNewCfgMdkeyEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgMdkeyEntry.setDescription('Information about an OSPF MD keys table.')
ospfNewCfgMdkeyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgMdkeyIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgMdkeyIndex.setDescription('The OSPF MD5 Key number for which the OSPF MdKey table is related.')
ospfNewCfgMdkeyKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgMdkeyKey.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgMdkeyKey.setDescription('The character string representing the MD5 Key.')
ospfNewCfgMdkeyDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 6, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgMdkeyDelete.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgMdkeyDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ospfCurCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 7), )
if mibBuilder.loadTexts: ospfCurCfgIntfTable.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfTable.setDescription('The table of OSPF Interface configuration in the current_config.')
ospfCurCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 7, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfCurCfgIntfIndex"))
if mibBuilder.loadTexts: ospfCurCfgIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfEntry.setDescription('Information about an OSPF Interface.')
ospfCurCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfIndex.setDescription('The OSPF Interface number for which the OSPF Interface table is related.')
ospfCurCfgIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfId.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfId.setDescription('The IP Address of the OSPF interface.')
ospfCurCfgIntfArea = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfArea.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfArea.setDescription('The index of the area that the interface belongs')
ospfCurCfgIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 7, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfMdkey.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfMdkey.setDescription('The MD5 key for the OSPF interface 0 (none) no MD5 authentication.')
ospfCurCfgIntfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 7, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfCost.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfCost.setDescription('Interface cost')
ospfCurCfgIntfPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 7, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfPrio.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfPrio.setDescription('Interface router priority')
ospfCurCfgIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 7, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfHello.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfHello.setDescription('Hello interval')
ospfCurCfgIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 7, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfDead.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfDead.setDescription('Dead interval')
ospfCurCfgIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 7, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfTrans.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfTrans.setDescription('Transit delay')
ospfCurCfgIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 7, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfRetra.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfRetra.setDescription('Retransmit interval')
ospfCurCfgIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 7, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfAuthKey.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfAuthKey.setDescription('Authentication Key')
ospfCurCfgIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 7, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgIntfStatus.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgIntfStatus.setDescription('Status of the interface disabled(0), enabled(1)')
ospfNewCfgIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8), )
if mibBuilder.loadTexts: ospfNewCfgIntfTable.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfTable.setDescription('The table of OSPF Interface configuration in the new_config.')
ospfNewCfgIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfNewCfgIntfIndex"))
if mibBuilder.loadTexts: ospfNewCfgIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfEntry.setDescription('Information about an OSPF Interface.')
ospfNewCfgIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfIndex.setDescription('The OSPF Interface number for which the OSPF Interface table is related.')
ospfNewCfgIntfId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgIntfId.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfId.setDescription('The IP Address of the OSPF interface.')
ospfNewCfgIntfArea = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfArea.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfArea.setDescription('The index of the area that the interface belongs (0..2)')
ospfNewCfgIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfMdkey.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfMdkey.setDescription('The MD5 key for the OSPF interface 0 (none) no MD5 authentication.')
ospfNewCfgIntfCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfCost.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfCost.setDescription('Interface cost(1..65535)')
ospfNewCfgIntfPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfPrio.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfPrio.setDescription('Interface router priority(0..255)')
ospfNewCfgIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfHello.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfHello.setDescription('Hello interval(1..65535)')
ospfNewCfgIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfDead.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfDead.setDescription('Dead interval(1..65535)')
ospfNewCfgIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfTrans.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfTrans.setDescription('Transit delay(1..3600)')
ospfNewCfgIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfRetra.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfRetra.setDescription('Retransmit interval(1..3600)')
ospfNewCfgIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfAuthKey.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfAuthKey.setDescription('Authentication Key')
ospfNewCfgIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgIntfStatus.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfStatus.setDescription('Status of the interface disabled(0), enabled(1)')
ospfNewCfgIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgIntfDelete.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgIntfDelete.setDescription('Delete the interface other(0), delete(1)')
ospfCurCfgVirtIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 9), )
if mibBuilder.loadTexts: ospfCurCfgVirtIntfTable.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfTable.setDescription('The table of OSPF Virtual Interface configuration in the current_config.')
ospfCurCfgVirtIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 9, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfCurCfgVirtIntfIndex"))
if mibBuilder.loadTexts: ospfCurCfgVirtIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfEntry.setDescription('Information about an OSPF virtual Interface.')
ospfCurCfgVirtIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfIndex.setDescription('The OSPF Virtual Interface number for which the OSPF Virtual Interface table is related.')
ospfCurCfgVirtIntfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfAreaId.setDescription('The index of the OSPF area to which this virtual interface belongs.')
ospfCurCfgVirtIntfNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfNbr.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfNbr.setDescription('The IP Address of the OSPF neighbor for this virtual interface.')
ospfCurCfgVirtIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfMdkey.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfMdkey.setDescription('The MD5 key for the OSPF virtual interface 0 (none) no MD5 authentication.')
ospfCurCfgVirtIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfHello.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfHello.setDescription('Hello interval')
ospfCurCfgVirtIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfDead.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfDead.setDescription('Dead interval')
ospfCurCfgVirtIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfTrans.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfTrans.setDescription('Transit delay')
ospfCurCfgVirtIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfRetra.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfRetra.setDescription('Retransmit interval')
ospfCurCfgVirtIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 9, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfAuthKey.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfAuthKey.setDescription('Authentication Key')
ospfCurCfgVirtIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgVirtIntfStatus.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgVirtIntfStatus.setDescription('Status disabled(0), enabled(1)')
ospfNewCfgVirtIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 10), )
if mibBuilder.loadTexts: ospfNewCfgVirtIntfTable.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfTable.setDescription('The table of OSPF Virtual Interface configuration in the new_config.')
ospfNewCfgVirtIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 10, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfNewCfgVirtIntfIndex"))
if mibBuilder.loadTexts: ospfNewCfgVirtIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfEntry.setDescription('Information about an OSPF virtual Interface.')
ospfNewCfgVirtIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfIndex.setDescription('The OSPF Virtual Interface number for which the OSPF Virtual Interface table is related.')
ospfNewCfgVirtIntfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 10, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfAreaId.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfAreaId.setDescription('The index of the OSPF area to which this virtual interface belongs.')
ospfNewCfgVirtIntfNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 10, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfNbr.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfNbr.setDescription('The IP Address of the OSPF neighbor for this virtual interface.')
ospfNewCfgVirtIntfMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfMdkey.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfMdkey.setDescription('The MD5 key for the OSPF virtual interface 0 (none) no MD5 authentication.')
ospfNewCfgVirtIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfHello.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfHello.setDescription('Hello interval(1..65535)')
ospfNewCfgVirtIntfDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 10, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfDead.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfDead.setDescription('Dead interval(1..65535)')
ospfNewCfgVirtIntfTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfTrans.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfTrans.setDescription('Transit dela(1..3600)y')
ospfNewCfgVirtIntfRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfRetra.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfRetra.setDescription('Retransmit interval(1..3600)')
ospfNewCfgVirtIntfAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 10, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfAuthKey.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfAuthKey.setDescription('Authentication Key SIZE(0..8)')
ospfNewCfgVirtIntfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 10, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfStatus.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfStatus.setDescription('Status disabled(0), enabled(1) ')
ospfNewCfgVirtIntfDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 10, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("other", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgVirtIntfDelete.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgVirtIntfDelete.setDescription('Delete other(0), delete(1)')
ospfCurCfgRangeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 14), )
if mibBuilder.loadTexts: ospfCurCfgRangeTable.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeTable.setDescription('The table of OSPF summary range in the current configuration.')
ospfCurCfgRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 14, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfCurCfgRangeIndex"))
if mibBuilder.loadTexts: ospfCurCfgRangeEntry.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeEntry.setDescription('Information about an OSPF summary range.')
ospfCurCfgRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 14, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeIndex.setDescription('The range number for which the OSPF summary range table is related.')
ospfCurCfgRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 14, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeAddr.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeAddr.setDescription('The IP Address of the range.')
ospfCurCfgRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 14, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeMask.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeMask.setDescription('The mask of the range.')
ospfCurCfgRangeAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 14, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeAreaIndex.setDescription('The area index.')
ospfCurCfgRangeHideState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 14, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeHideState.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeHideState.setDescription('The state of the hide range.')
ospfCurCfgRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 14, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRangeState.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRangeState.setDescription('The state of the range.')
ospfNewCfgRangeTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 15), )
if mibBuilder.loadTexts: ospfNewCfgRangeTable.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeTable.setDescription('The table of OSPF summary range in the new configuration.')
ospfNewCfgRangeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 15, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfNewCfgRangeIndex"))
if mibBuilder.loadTexts: ospfNewCfgRangeEntry.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeEntry.setDescription('Information about an OSPF summary range.')
ospfNewCfgRangeIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 15, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgRangeIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeIndex.setDescription('The range number for which the OSPF summary range table is related.')
ospfNewCfgRangeAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 15, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeAddr.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeAddr.setDescription('The IP Address of the range.')
ospfNewCfgRangeMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 15, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeMask.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeMask.setDescription('The mask of the range.')
ospfNewCfgRangeAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 15, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeAreaIndex.setDescription('The area index.')
ospfNewCfgRangeHideState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeHideState.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeHideState.setDescription('The state of the hide range.')
ospfNewCfgRangeState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 15, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeState.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeState.setDescription('The state of the range.')
ospfNewCfgRangeDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 15, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: ospfNewCfgRangeDelete.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRangeDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
ospfRouteRedistribution = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4))
ospfRedistributeStatic = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 1))
ospfCurCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgStaticMetric.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgStaticMetric.setDescription('The metric to be assigned to static routes. A value of 0 indicates none.')
ospfNewCfgStaticMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticMetric.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgStaticMetric.setDescription('The metric to be assigned to static routes. A value of 0 indicates none.')
ospfCurCfgStaticMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgStaticMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgStaticMetricType.setDescription('The AS External metric type for static routes.')
ospfNewCfgStaticMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgStaticMetricType.setDescription('The AS External metric type for static routes.')
ospfCurCfgStaticOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgStaticOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgStaticOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ospfNewCfgStaticOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 1, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgStaticOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgStaticOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ospfNewCfgStaticAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticAddOutRmap.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgStaticAddOutRmap.setDescription('The route map to be add into out-rmap list. When read, 0 is returned.')
ospfNewCfgStaticRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgStaticRemoveOutRmap.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgStaticRemoveOutRmap.setDescription('The route map to be removed from out-rmap list. When read, 0 is returned.')
ospfRedistributeFixed = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 4))
ospfCurCfgFixedMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgFixedMetric.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgFixedMetric.setDescription('The export metric for fixed routes. A value of 0 indicates none')
ospfNewCfgFixedMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedMetric.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgFixedMetric.setDescription('The export metric for fixed routes. A value of 0 indicates none')
ospfCurCfgFixedMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 4, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgFixedMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgFixedMetricType.setDescription('The AS External metric type for fixed routes.')
ospfNewCfgFixedMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgFixedMetricType.setDescription('The AS External metric type for fixed routes.')
ospfCurCfgFixedOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 4, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgFixedOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgFixedOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ospfNewCfgFixedOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 4, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgFixedOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgFixedOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ospfNewCfgFixedAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 4, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedAddOutRmap.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgFixedAddOutRmap.setDescription('The route map to be add into out-rmap list. When read, 0 is returned.')
ospfNewCfgFixedRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 4, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgFixedRemoveOutRmap.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgFixedRemoveOutRmap.setDescription('The route map to be removed from out-rmap list. When read, 0 is returned.')
ospfRedistributeRip = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 5))
ospfCurCfgRipMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRipMetric.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRipMetric.setDescription('The export metric for RIP routes. A value of 0 indicates none')
ospfNewCfgRipMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipMetric.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRipMetric.setDescription('The export metric for RIP routes. A value of 0 indicates none')
ospfCurCfgRipMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRipMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRipMetricType.setDescription('The AS External metric type for RIP routes.')
ospfNewCfgRipMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipMetricType.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRipMetricType.setDescription('The AS External metric type for RIP routes.')
ospfCurCfgRipOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 5, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCurCfgRipOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ospfCurCfgRipOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ospfNewCfgRipOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 5, 6), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewCfgRipOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRipOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ospfNewCfgRipAddOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 5, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipAddOutRmap.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRipAddOutRmap.setDescription('The route map to be add into out-rmap list. When read, 0 is returned.')
ospfNewCfgRipRemoveOutRmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 13, 4, 5, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ospfNewCfgRipRemoveOutRmap.setStatus('current')
if mibBuilder.loadTexts: ospfNewCfgRipRemoveOutRmap.setDescription('The route map to be removed from out-rmap list. When read, 0 is returned.')
ipCurCfgRouterID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 14, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurCfgRouterID.setStatus('current')
if mibBuilder.loadTexts: ipCurCfgRouterID.setDescription('The router ID of the switch.')
ipNewCfgRouterID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 14, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewCfgRouterID.setStatus('current')
if mibBuilder.loadTexts: ipNewCfgRouterID.setDescription('The router ID of the switch.')
igmpCurCfgOnOff = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpCurCfgOnOff.setStatus('current')
if mibBuilder.loadTexts: igmpCurCfgOnOff.setDescription('Globally turn IGMP On/Off.')
igmpNewCfgOnOff = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpNewCfgOnOff.setStatus('current')
if mibBuilder.loadTexts: igmpNewCfgOnOff.setDescription('Globally turn IGMP On/Off.')
igmpSnoopCfgGen = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3))
igmpStaticMrtrCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 4))
igmpFilterCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5))
igmpSnoopCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1))
igmpSnoopCurCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgTimeout.setDescription('Set IGMP Report timeout.')
igmpSnoopNewCfgTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgTimeout.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgTimeout.setDescription('Set IGMP Report timeout.')
igmpSnoopCurCfgMrto = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgMrto.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgMrto.setDescription('The value of multicast router timeout in the current config.')
igmpSnoopNewCfgMrto = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgMrto.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgMrto.setDescription('The value of multicast router timeout in the new config.')
igmpSnoopNewCfgVlanFastlvAdd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvAdd.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvAdd.setDescription('The VLAN to be added to fastleave vlan list. When read, 0 is returned.')
igmpSnoopNewCfgVlanFastlvRem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvRem.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvRem.setDescription('The VLAN to be removed from fastleave vlan list. When read, 0 is returned.')
igmpSnoopCurCfgVlanFastlvBmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 14), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgVlanFastlvBmap.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgVlanFastlvBmap.setDescription('The fastlv enabled vlans present in the in vlan map list. The fastlv enabled vlans are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Vlan 9 || || || ||___ Vlan 8 || |____ Vlan 7 || . . . ||_________ Vlan 2 |__________ Vlan 1 where x : 1 - The represented vlan has fastlv enabled 0 - The represented vlan does not have fastlv enabled.')
igmpSnoopNewCfgVlanFastlvBmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 15), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvBmap.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanFastlvBmap.setDescription('The fastlv enabled vlans present in the in vlan map list. The fastlv enabled vlans are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Vlan 9 || || || ||___ Vlan 8 || |____ Vlan 7 || . . . ||_________ Vlan 2 |__________ Vlan 1 where x : 1 - The represented vlan has fastlv enabled 0 - The represented vlan does not have fastlv enabled.')
igmpSnoopCurCfgRobust = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgRobust.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgRobust.setDescription('The value of expected packet loss on subnet in the current config.')
igmpSnoopNewCfgRobust = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgRobust.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgRobust.setDescription('The value of expected packet loss on subnet in the new config.')
igmpSnoopNewCfgVlanAdd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 18), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanAdd.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanAdd.setDescription('The VLAN to be added to snooping vlan list. When read, 0 is returned.')
igmpSnoopNewCfgVlanRem = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 19), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanRem.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanRem.setDescription('The VLAN to be removed from snooping vlan list. When read, 0 is returned.')
igmpSnoopNewCfgVlanClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanClear.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanClear.setDescription('Removing ALL Snooping Vlans.')
igmpSnoopCurCfgVlanBmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 21), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgVlanBmap.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgVlanBmap.setDescription('The snooping vlans present in the in vlan map list. The snooping vlans are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Vlan 9 || || || ||___ Vlan 8 || |____ Vlan 7 || . . . ||_________ Vlan 2 |__________ Vlan 1 where x : 1 - The represented vlan has snoop enabled 0 - The represented vlan does not have snooping enabled.')
igmpSnoopNewCfgVlanBmap = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 22), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanBmap.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgVlanBmap.setDescription('The snooping vlans present in the in vlan map list. The snooping vlans are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Vlan 9 || || || ||___ Vlan 8 || |____ Vlan 7 || . . . ||_________ Vlan 2 |__________ Vlan 1 where x : 1 - The represented vlan has snoop enabled 0 - The represented vlan does not have snooping enabled.')
igmpSnoopCurCfgQInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgQInterval.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgQInterval.setDescription('IGMP Query Interval of current config.')
igmpSnoopNewCfgQInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 24), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgQInterval.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgQInterval.setDescription('IGMP Query Interval of new config.')
igmpSnoopCurCfgSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgSrcIp.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgSrcIp.setDescription('The source ip for GSQ proxy in current config.')
igmpSnoopNewCfgSrcIp = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 26), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgSrcIp.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgSrcIp.setDescription('The source ip for GSQ proxy in new config.')
igmpSnoopCurCfgAggrEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopCurCfgAggrEnaDis.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopCurCfgAggrEnaDis.setDescription('Enable/Disable of IGMP Report aggregation.')
igmpSnoopNewCfgAggrEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 3, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpSnoopNewCfgAggrEnaDis.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopNewCfgAggrEnaDis.setDescription('Enable/Disable of IGMP Report aggregation.')
igmpStaticMrtrCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 4, 1), )
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgTable.setDescription('The IGMP Static Multicast Router table in the current configuration block.')
igmpStaticMrtrCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 4, 1, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "igmpStaticMrtrCurCfgIndx"))
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgTableEntry.setDescription('A row in the Static Multicast Router table.')
igmpStaticMrtrCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgIndx.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgIndx.setDescription('The IGMP Multicast Router table port index.')
igmpStaticMrtrCurCfgPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgPortId.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgPortId.setDescription('The IGMP Multicast Router port in the current configuration block.')
igmpStaticMrtrCurCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgVlanId.setDescription('The IGMP Multicast Router port in the current configuration block.')
igmpStaticMrtrCurCfgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgVersion.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrCurCfgVersion.setDescription('The IGMP version of the IGMP Static Multicast Router.')
igmpStaticMrtrNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 4, 2), )
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgTable.setDescription('The IGMP Static Multicast Router table in the new configuration block.')
igmpStaticMrtrNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 4, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "igmpStaticMrtrNewCfgIndx"))
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgTableEntry.setDescription('A row in the Static Multicast Router table.')
igmpStaticMrtrNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgIndx.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgIndx.setDescription('The IGMP Multicast Router table port index.')
igmpStaticMrtrNewCfgPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 4, 2, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgPortId.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgPortId.setDescription('The IGMP Multicast Router port in the new configuration block.')
igmpStaticMrtrNewCfgVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 4, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgVlanId.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgVlanId.setDescription('The IGMP Multicast Router port in the new configuration block.')
igmpStaticMrtrNewCfgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("version1", 1), ("version2", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgVersion.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgVersion.setDescription('The IGMP version of the IGMP Static Multicast Router.')
igmpStaticMrtrNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 4, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: igmpStaticMrtrNewCfgDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
igmpFltCurCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 1), )
if mibBuilder.loadTexts: igmpFltCurCfgTable.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgTable.setDescription('The IGMP filtering table in the current configuration block.')
igmpFltCurCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 1, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "igmpFltCurCfgIndx"))
if mibBuilder.loadTexts: igmpFltCurCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgTableEntry.setDescription('A row in the filtering table.')
igmpFltCurCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgIndx.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgIndx.setDescription('The IGMP filter table index.')
igmpFltCurCfgMcastIp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgMcastIp1.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgMcastIp1.setDescription('Range1 Multicast IP address to be filtered.')
igmpFltCurCfgMcastIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgMcastIp2.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgMcastIp2.setDescription('Range2 Multicast IP address to be filtered.')
igmpFltCurCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgAction.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgAction.setDescription('The action for the IGMP filtering rule.')
igmpFltCurCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgState.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgState.setDescription('The state of this IGMP filtering rule.')
igmpFltNewCfgTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 2), )
if mibBuilder.loadTexts: igmpFltNewCfgTable.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgTable.setDescription('The IGMP filtering table in the current configuration block.')
igmpFltNewCfgTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "igmpFltNewCfgIndx"))
if mibBuilder.loadTexts: igmpFltNewCfgTableEntry.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgTableEntry.setDescription('A row in the filtering table.')
igmpFltNewCfgIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 2, 1, 1), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgIndx.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgIndx.setDescription('The IGMP filter table index.')
igmpFltNewCfgMcastIp1 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgMcastIp1.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgMcastIp1.setDescription('Range1 Multicast source IP address to be filtered.')
igmpFltNewCfgMcastIp2 = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgMcastIp2.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgMcastIp2.setDescription('Range2 Multicast source IP address to be filtered.')
igmpFltNewCfgAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allow", 1), ("deny", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgAction.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgAction.setDescription('The action for the IGMP filtering rule.')
igmpFltNewCfgState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgState.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgState.setDescription('The state of this IGMP filtering rule.')
igmpFltNewCfgDelete = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("delete", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgDelete.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgDelete.setDescription('When set to the value of 2 (delete), the entire row is deleted. When read, other(1) is returned. Setting the value to anything other than 2(delete) has no effect on the state of the row.')
igmpFltCurCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 3), )
if mibBuilder.loadTexts: igmpFltCurCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgPortTable.setDescription('The IGMP filtering port table in the current configuration block.')
igmpFltCurCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 3, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "igmpFltCurCfgPortIndx"))
if mibBuilder.loadTexts: igmpFltCurCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgPortTableEntry.setDescription('A row in the IGMP filtering port table.')
igmpFltCurCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgPortIndx.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgPortIndx.setDescription('The port index.')
igmpFltCurCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgPortState.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgPortState.setDescription('Enable or disable IGMP filtering.')
igmpFltCurCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 3, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgPortFiltBmap.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgPortFiltBmap.setDescription('The IGMP filtering rules applied to the port. The filtering rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ filter 9 || || || ||___ filter 8 || |____ filter 7 || . . . ||_________ filter 2 |__________ filter 1 (as index to igmpFltCurCfgTable) where x : 1 - The represented IGMP filter rule applied to the port 0 - The represented IGMP filter rule not applied to the port ')
igmpFltNewCfgPortTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 4), )
if mibBuilder.loadTexts: igmpFltNewCfgPortTable.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgPortTable.setDescription('The IGMP filtering port table in the new configuration block.')
igmpFltNewCfgPortTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 4, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "igmpFltNewCfgPortIndx"))
if mibBuilder.loadTexts: igmpFltNewCfgPortTableEntry.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgPortTableEntry.setDescription('A row in the IGMP filtering port table.')
igmpFltNewCfgPortIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltNewCfgPortIndx.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgPortIndx.setDescription('The port index.')
igmpFltNewCfgPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgPortState.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgPortState.setDescription('Enable or disable IGMP filtering.')
igmpFltNewCfgPortFiltBmap = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 4, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltNewCfgPortFiltBmap.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgPortFiltBmap.setDescription('The IGMP filtering rules applied to the port. The filtering rules are presented in bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ filter 9 || || || ||___ filter 8 || |____ filter 7 || . . . ||_________ filter 2 |__________ filter 1 (as index to fltNewCfgTable) where x : 1 - The represented filter rule applied to the port 0 - The represented filter rule not applied to the port ')
igmpFltNewCfgPortAddFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 4, 1, 4), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgPortAddFiltRule.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgPortAddFiltRule.setDescription("This is an action object to add filtering rule to a port. The value specified with this object is the index to the fltNewCfgTable for which filtering rule to be added to the port. The range of the valid index is between 1 and igmpFltCurCfgTableMaxSize. When read, the value '0' is returned always.")
igmpFltNewCfgPortRemFiltRule = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 4, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: igmpFltNewCfgPortRemFiltRule.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgPortRemFiltRule.setDescription("This is an action object to remove filtering rule from a port. The value specified with this object is the index to the fltNewCfgTable for which filtering rule to be removed from the port. The range of the valid index is between 1 and igmpFltCurCfgTableMaxSize. When read, the value '0' is returned always.")
igmpFltCurCfgEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpFltCurCfgEnaDis.setStatus('current')
if mibBuilder.loadTexts: igmpFltCurCfgEnaDis.setDescription('Enable/Disable of IGMP Filtering.')
igmpFltNewCfgEnaDis = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 1, 15, 5, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpFltNewCfgEnaDis.setStatus('current')
if mibBuilder.loadTexts: igmpFltNewCfgEnaDis.setDescription('Enable/Disable of IGMP Filtering.')
ripStatInPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInPkts.setStatus('current')
if mibBuilder.loadTexts: ripStatInPkts.setDescription('The total number of good RIP packets recieved.')
ripStatOutPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutPkts.setStatus('current')
if mibBuilder.loadTexts: ripStatOutPkts.setDescription('The total number of RIP packets transmitted.')
ripStatInErrorPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInErrorPkts.setStatus('current')
if mibBuilder.loadTexts: ripStatInErrorPkts.setDescription('The total number of error RIP packets recieved.')
ripStatRoutesAgedOut = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatRoutesAgedOut.setStatus('current')
if mibBuilder.loadTexts: ripStatRoutesAgedOut.setDescription('The total number of RIP routes which have aged out.')
ripStatInPackets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 13, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInPackets.setStatus('current')
if mibBuilder.loadTexts: ripStatInPackets.setDescription('The total number of RIP packets recieved.')
ripStatOutPackets = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 13, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutPackets.setStatus('current')
if mibBuilder.loadTexts: ripStatOutPackets.setDescription('The total number of RIP packets transmitted.')
ripStatInRequestPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 13, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInRequestPkts.setStatus('current')
if mibBuilder.loadTexts: ripStatInRequestPkts.setDescription('The total number of RIP requests recieved.')
ripStatInResponsePkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 13, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInResponsePkts.setStatus('current')
if mibBuilder.loadTexts: ripStatInResponsePkts.setDescription('The total number of RIP response recieved.')
ripStatOutRequestPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 13, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutRequestPkts.setStatus('current')
if mibBuilder.loadTexts: ripStatOutRequestPkts.setDescription('The total number of RIP requests transmitted.')
ripStatOutResponsePkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 13, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatOutResponsePkts.setStatus('current')
if mibBuilder.loadTexts: ripStatOutResponsePkts.setDescription('The total number of RIP responses transmitted.')
ripStatRouteTimeout = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 13, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatRouteTimeout.setStatus('current')
if mibBuilder.loadTexts: ripStatRouteTimeout.setDescription('The total number of RIP route timeouts.')
ripStatInBadSizePkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 13, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadSizePkts.setStatus('current')
if mibBuilder.loadTexts: ripStatInBadSizePkts.setDescription('The total number of bad size RIP packets recieved.')
ripStatInBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 13, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadVersion.setStatus('current')
if mibBuilder.loadTexts: ripStatInBadVersion.setDescription('The total number of RIP bad versions recieved.')
ripStatInBadZeros = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 13, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadZeros.setStatus('current')
if mibBuilder.loadTexts: ripStatInBadZeros.setDescription('The total number of RIP bad zeros recieved.')
ripStatInBadSourcePort = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 13, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadSourcePort.setStatus('current')
if mibBuilder.loadTexts: ripStatInBadSourcePort.setDescription('The total number of RIP bad source port recieved.')
ripStatInBadSourceIP = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 13, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInBadSourceIP.setStatus('current')
if mibBuilder.loadTexts: ripStatInBadSourceIP.setDescription('The total number of RIP bad source IP recieved.')
ripStatInSelfRcvPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 13, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripStatInSelfRcvPkts.setStatus('current')
if mibBuilder.loadTexts: ripStatInSelfRcvPkts.setDescription('The total number of RIP packets from self received.')
dnsStatInGoodDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 14, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInGoodDnsRequests.setStatus('current')
if mibBuilder.loadTexts: dnsStatInGoodDnsRequests.setDescription('The total number of good DNS request packets received.')
dnsStatOutDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 14, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatOutDnsRequests.setStatus('current')
if mibBuilder.loadTexts: dnsStatOutDnsRequests.setDescription('The total number of DNS request packets')
dnsStatInBadDnsRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 14, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dnsStatInBadDnsRequests.setStatus('current')
if mibBuilder.loadTexts: dnsStatInBadDnsRequests.setDescription('The total number of bad DNS request packets received')
maxL3TableSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 15, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxL3TableSize.setStatus('current')
if mibBuilder.loadTexts: maxL3TableSize.setDescription('Max L3 table size')
noL3EntriesUsed = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 15, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noL3EntriesUsed.setStatus('current')
if mibBuilder.loadTexts: noL3EntriesUsed.setDescription('Number of L3 entries used')
maxLpmTableSize = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 15, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxLpmTableSize.setStatus('current')
if mibBuilder.loadTexts: maxLpmTableSize.setDescription('Max LPM table size')
noLpmEntriesUsed = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 15, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noLpmEntriesUsed.setStatus('current')
if mibBuilder.loadTexts: noLpmEntriesUsed.setDescription('Number of LPM entries used')
maxBlockInLpmTable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 15, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: maxBlockInLpmTable.setStatus('current')
if mibBuilder.loadTexts: maxBlockInLpmTable.setDescription('Max number of blocks in LPM table')
noBlocksUsedInLpmTable = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 15, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: noBlocksUsedInLpmTable.setStatus('current')
if mibBuilder.loadTexts: noBlocksUsedInLpmTable.setDescription('Number of blocks used in LPM table')
arpStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 2, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatEntries.setStatus('current')
if mibBuilder.loadTexts: arpStatEntries.setDescription('The current number of ARP entries.')
arpStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 2, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatHighWater.setStatus('current')
if mibBuilder.loadTexts: arpStatHighWater.setDescription('The highest number of ARP entries.')
arpStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 2, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpStatMaxEntries.setStatus('current')
if mibBuilder.loadTexts: arpStatMaxEntries.setDescription('The maximum number of ARP entries.')
routeStatEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 3, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatEntries.setStatus('current')
if mibBuilder.loadTexts: routeStatEntries.setDescription('The current number of IP routes.')
routeStatHighWater = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 3, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatHighWater.setStatus('current')
if mibBuilder.loadTexts: routeStatHighWater.setDescription('The highest number of IP routes.')
routeStatMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 3, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: routeStatMaxEntries.setStatus('current')
if mibBuilder.loadTexts: routeStatMaxEntries.setDescription('The maximum number of IP routes.')
vrrpStatInAdvers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatInAdvers.setStatus('current')
if mibBuilder.loadTexts: vrrpStatInAdvers.setDescription('The number of good VRRP advertisements which are received.')
vrrpStatOutAdvers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutAdvers.setStatus('current')
if mibBuilder.loadTexts: vrrpStatOutAdvers.setDescription('The number of good VRRP advertisements which are transmitted.')
vrrpStatOutBadAdvers = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatOutBadAdvers.setStatus('current')
if mibBuilder.loadTexts: vrrpStatOutBadAdvers.setDescription('The number of bad VRRP advertisements which are received.')
vrrpStatBadVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadVersion.setStatus('current')
if mibBuilder.loadTexts: vrrpStatBadVersion.setDescription('The number of bad VRRP version adv which are received.')
vrrpStatBadAddress = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadAddress.setStatus('current')
if mibBuilder.loadTexts: vrrpStatBadAddress.setDescription('The number of bad VRRP addres adv which are received.')
vrrpStatBadPassword = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadPassword.setStatus('current')
if mibBuilder.loadTexts: vrrpStatBadPassword.setDescription('The number of bad VRRP advertisements which are received.')
vrrpStatBadVrid = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadVrid.setStatus('current')
if mibBuilder.loadTexts: vrrpStatBadVrid.setDescription('The number of bad VRRP version ID adv which are received.')
vrrpStatBadData = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadData.setStatus('current')
if mibBuilder.loadTexts: vrrpStatBadData.setDescription('The number of bad VRRP advertisements which are received.')
vrrpStatBadInterval = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpStatBadInterval.setStatus('current')
if mibBuilder.loadTexts: vrrpStatBadInterval.setDescription('The number of bad VRRP iutervals which are received.')
ipClearStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipClearStats.setStatus('current')
if mibBuilder.loadTexts: ipClearStats.setDescription('Setting this to clear(1) results in clearing the IP statistics.')
ifStatsTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 6, 2), )
if mibBuilder.loadTexts: ifStatsTable.setStatus('current')
if mibBuilder.loadTexts: ifStatsTable.setDescription('The table of Interface Statistics.')
ifStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 6, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ifStatsIndex"))
if mibBuilder.loadTexts: ifStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ifStatsEntry.setDescription('IP Interface statistics.')
ifStatsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStatsIndex.setStatus('current')
if mibBuilder.loadTexts: ifStatsIndex.setDescription('The index of the IP interface for which these statistics apply.')
ifClearStats = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifClearStats.setStatus('current')
if mibBuilder.loadTexts: ifClearStats.setDescription('Setting this to clear(1) results in clearing the statistics for this IP interface (if) stats.')
igmpClearAllStats = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpClearAllStats.setStatus('current')
if mibBuilder.loadTexts: igmpClearAllStats.setDescription('Setting this to clear(1) results in clearing the IGMP statistics.')
ospfGeneralStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1))
ospfCumRxTxStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 1))
ospfCumNbrChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 2))
ospfCumIntfChangeStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 3))
ospfTimersKickOffStats = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 4))
ospfArea = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2))
ospfAreaRxTxStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1), )
if mibBuilder.loadTexts: ospfAreaRxTxStats.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxTxStats.setDescription('The table of OSPF Area Rx/Tx Statistics.')
ospfAreaRxTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfAreaRxTxIndex"))
if mibBuilder.loadTexts: ospfAreaRxTxStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxTxStatsEntry.setDescription('Rx Tx packet Statistics about a OSPF area.')
ospfAreaRxTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxTxIndex.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxTxIndex.setDescription('The index of the ospf Area for which these statistics apply.')
ospfAreaRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxPkts.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxPkts.setDescription('The total number of OSPF packets received in this OSPF area.')
ospfAreaTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxPkts.setStatus('current')
if mibBuilder.loadTexts: ospfAreaTxPkts.setDescription('The total number of OSPF packets transmitted in this OSPF area.')
ospfAreaRxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxHello.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxHello.setDescription('The total number of Hello packets received in this OSPF area.')
ospfAreaTxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxHello.setStatus('current')
if mibBuilder.loadTexts: ospfAreaTxHello.setDescription('The total number of Hello packets transmitted in this OSPF area.')
ospfAreaRxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxDatabase.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxDatabase.setDescription('The total number of Database Description packets transmitted for this OSPF area.')
ospfAreaTxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxDatabase.setStatus('current')
if mibBuilder.loadTexts: ospfAreaTxDatabase.setDescription('The total number of Database Description packets transmitted for this OSPF area.')
ospfAreaRxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsReqs.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxlsReqs.setDescription('The total number of Link State Request packets received for this OSPF area.')
ospfAreaTxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsReqs.setStatus('current')
if mibBuilder.loadTexts: ospfAreaTxlsReqs.setDescription('The total number of Link State Request packets transmitted for this OSPF area.')
ospfAreaRxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsAcks.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxlsAcks.setDescription('The total number of Link State Acknowledgement packets received for this OSPF area.')
ospfAreaTxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsAcks.setStatus('current')
if mibBuilder.loadTexts: ospfAreaTxlsAcks.setDescription('The total number of Link State Acknowledgement packets transmitted for this OSPF area.')
ospfAreaRxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaRxlsUpdates.setStatus('current')
if mibBuilder.loadTexts: ospfAreaRxlsUpdates.setDescription('The total number of Link State Update packets received for this OSPF area.')
ospfAreaTxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaTxlsUpdates.setStatus('current')
if mibBuilder.loadTexts: ospfAreaTxlsUpdates.setDescription('The total number of Link State Update packets transmitted for this OSPF area.')
ospfAreaNbrChangeStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2), )
if mibBuilder.loadTexts: ospfAreaNbrChangeStats.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrChangeStats.setDescription('The table of OSPF Area Neighbour Statistics.')
ospfAreaNbrChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfAreaNbrIndex"))
if mibBuilder.loadTexts: ospfAreaNbrChangeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrChangeStatsEntry.setDescription('Area Neighbour Change Statistics about a OSPF area.')
ospfAreaNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrIndex.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrIndex.setDescription('The index of the ospf Area for which these statistics apply.')
ospfAreaNbrhello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrhello.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrhello.setDescription('The total number of Hello packets received from neighbours in this OSPF area.')
ospfAreaNbrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrStart.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrStart.setDescription('The total number of neighbours in this state (i.e. an indication that Hello packets should now be sent to the neighbour at intervals of HelloInterval seconds.) in this OSPF area.')
ospfAreaNbrAdjointOk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrAdjointOk.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrAdjointOk.setDescription('The total number of decisions to be made (again) as to whether an adjacency should be established/maintained with the neighbour. for this OSPF area.')
ospfAreaNbrNegotiationDone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrNegotiationDone.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrNegotiationDone.setDescription('The total number of neighbours in this state wherein the Master/slave relationship has been negotiated, and sequence numbers have been exchanged, for this OSPF area.')
ospfAreaNbrExchangeDone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrExchangeDone.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrExchangeDone.setDescription("The total number of neighbours in this state (i.e. in an adjacency's final state) having transimitted a full sequence of Database Description packets, for this OSPF area.")
ospfAreaNbrBadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrBadRequests.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrBadRequests.setDescription('The sum total number of Link State Requests which have been received for a link state advertisement not contained in the database across this OSPF area.')
ospfAreaNbrBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrBadSequence.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrBadSequence.setDescription('The total number of Database Description packets which have been received that either a) has an unexpected DD sequence number b) Unexpectedly has the init bit set c) Has an options field differing from the last Options field received in a Database Description packet. Any of these conditions indicate that some error has occured during adjacency establishment for this OSPF area.')
ospfAreaNbrLoadingDone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrLoadingDone.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrLoadingDone.setDescription('The total number of link state updates received for all out-of-date portions of the database in this OSPF area.')
ospfAreaNbrN1way = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrN1way.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrN1way.setDescription('The total number of Hello packets received from neighbours, in which this router is not mentioned in this OSPF area.')
ospfAreaNbrRstAd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrRstAd.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrRstAd.setDescription('The total number of times the Neighbour adjacency has been reset across this OPSF area.')
ospfAreaNbrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrDown.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrDown.setDescription('The total number of Neighbouring routers down (i.e. in the initial state of a neighbour conversation.) in this OSPF area.')
ospfAreaNbrN2way = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaNbrN2way.setStatus('current')
if mibBuilder.loadTexts: ospfAreaNbrN2way.setDescription('The total number of Hello packets received from neighbours, in which this router is mentioned in this OSPF area.')
ospfAreaChangeStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 3), )
if mibBuilder.loadTexts: ospfAreaChangeStats.setStatus('current')
if mibBuilder.loadTexts: ospfAreaChangeStats.setDescription('The table of OSPF Area Change Statistics.')
ospfAreaChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 3, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfAreaIntfIndex"))
if mibBuilder.loadTexts: ospfAreaChangeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfAreaChangeStatsEntry.setDescription('Area Change Statistics about a OSPF area.')
ospfAreaIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfIndex.setDescription('The index of the OSPF Area for which these statistics apply.')
ospfAreaIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfHello.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfHello.setDescription('The total number of Hello packets sent on this OSPF area.')
ospfAreaIntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfDown.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfDown.setDescription('The total number of interfaces down in this OSPF area.')
ospfAreaIntfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfLoop.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfLoop.setDescription('The total number of interfaces no longer connected to the attatched network in this OSPF area.')
ospfAreaIntfUnloop = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfUnloop.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfUnloop.setDescription('The total number of interfaces connected to the attatched network in this OSPF area..')
ospfAreaIntfWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfWaitTimer.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfWaitTimer.setDescription('The total number of times the Wait Timer has been fired, (indicating the end of the waiting period that is required before electing a (Backup) Designated Router) for this OSPF area.')
ospfAreaIntfBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfBackup.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfBackup.setDescription('The total number of Backup Designated Routers on the attatched network for this OSPF area.')
ospfAreaIntfNbrChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaIntfNbrChange.setStatus('current')
if mibBuilder.loadTexts: ospfAreaIntfNbrChange.setDescription('The total number of changes in the set of bidirectional neighbours associated with the interface in this OSPF area.')
ospfAreaErrorStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 4), )
if mibBuilder.loadTexts: ospfAreaErrorStats.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrorStats.setDescription('The table of OSPF Area Error Statistics.')
ospfAreaErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 4, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfAreaErrIndex"))
if mibBuilder.loadTexts: ospfAreaErrorStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrorStatsEntry.setDescription('Error Statistics for an OSPF area.')
ospfAreaErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrIndex.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrIndex.setDescription('The index of the OSPF Area for which these statistics apply.')
ospfAreaErrAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrAuthFailure.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrAuthFailure.setDescription('The total number of packets received with a wrong password in this area.')
ospfAreaErrNetmaskMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrNetmaskMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrNetmaskMismatch.setDescription('The total number of packets received with a wrong netmask in this area.')
ospfAreaErrHelloMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrHelloMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrHelloMismatch.setDescription('The total number of packets received with a different hello interval in this area.')
ospfAreaErrDeadMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrDeadMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrDeadMismatch.setDescription('The total number of packets received with a different dead interval in this area.')
ospfAreaErrOptionsMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrOptionsMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrOptionsMismatch.setDescription('The total number of packets received with a different options in this area.')
ospfAreaErrUnknownNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 2, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaErrUnknownNbr.setStatus('current')
if mibBuilder.loadTexts: ospfAreaErrUnknownNbr.setDescription('The total number of packets received from an unknown neighbor in this area.')
ospfInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3))
ospfIntfRxTxStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1), )
if mibBuilder.loadTexts: ospfIntfRxTxStats.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxTxStats.setDescription('The table of OSPF Interface Rx/Tx packet Statistics.')
ospfIntfRxTxStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfIntfRxTxIndex"))
if mibBuilder.loadTexts: ospfIntfRxTxStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxTxStatsEntry.setDescription('OSPF interface Rx/Tx packet statistics.')
ospfIntfRxTxIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxTxIndex.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxTxIndex.setDescription('The OSPF interface for which these statistics apply.')
ospfIntfRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxPkts.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxPkts.setDescription('The total number of OSPF packets received for this OSPF interface.')
ospfIntfTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxPkts.setStatus('current')
if mibBuilder.loadTexts: ospfIntfTxPkts.setDescription('The total number of OSPF packets transmitted for this OSPF interface.')
ospfIntfRxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxHello.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxHello.setDescription('The total number of Hello packets received for this OSPF interface.')
ospfIntfTxHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxHello.setStatus('current')
if mibBuilder.loadTexts: ospfIntfTxHello.setDescription('The total number of Hello packets transmitted for this OSPF interface.')
ospfIntfRxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxDatabase.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxDatabase.setDescription('The total number of Database Description packets received for this OSPF interface.')
ospfIntfTxDatabase = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxDatabase.setStatus('current')
if mibBuilder.loadTexts: ospfIntfTxDatabase.setDescription('The total number of Database Description packets transmitted for this OSPF interface.')
ospfIntfRxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsReqs.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxlsReqs.setDescription('The total number of Link State Request packets received for this OSPF interface.')
ospfIntfTxlsReqs = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsReqs.setStatus('current')
if mibBuilder.loadTexts: ospfIntfTxlsReqs.setDescription('The total number of Link State Request packets transmitted for this OSPF interface.')
ospfIntfRxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsAcks.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxlsAcks.setDescription('The total number of Link State Acknowledgement packets received for this OSPF interface.')
ospfIntfTxlsAcks = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsAcks.setStatus('current')
if mibBuilder.loadTexts: ospfIntfTxlsAcks.setDescription('The total number of Link State Acknowledgement packets transmitted for this OSPF interface.')
ospfIntfRxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfRxlsUpdates.setStatus('current')
if mibBuilder.loadTexts: ospfIntfRxlsUpdates.setDescription('The total number of Link State Update packets received for this OSPF interface.')
ospfIntfTxlsUpdates = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfTxlsUpdates.setStatus('current')
if mibBuilder.loadTexts: ospfIntfTxlsUpdates.setDescription('The total number of Link State Update packets transmitted for this OSPF interface.')
ospfIntfNbrChangeStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2), )
if mibBuilder.loadTexts: ospfIntfNbrChangeStats.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrChangeStats.setDescription('The table of OSPF Interface Neighbour change Statistics.')
ospfIntfNbrChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfIntfNbrIndex"))
if mibBuilder.loadTexts: ospfIntfNbrChangeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrChangeStatsEntry.setDescription('OSPF interface Neighbour Change statistics.')
ospfIntfNbrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrIndex.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrIndex.setDescription('The index of the OSPF Interface for which these statistics apply.')
ospfIntfNbrhello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrhello.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrhello.setDescription('The total number of Hello packets received from neighbours in this OSPF interface.')
ospfIntfNbrStart = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrStart.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrStart.setDescription('The total number of neighbours in this state (i.e. an indication that Hello packets should now be sent to the neighbour at intervals of HelloInterval seconds.) in this OSPF interface.')
ospfIntfNbrAdjointOk = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrAdjointOk.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrAdjointOk.setDescription('The total number of decisions to be made (again) as to whether an adjacency should be established/maintained with the neighbour. for this OSPF interface.')
ospfIntfNbrNegotiationDone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrNegotiationDone.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrNegotiationDone.setDescription('The total number of neighbours in this state wherein the Master/slave relationship has been negotiated, and sequence numbers have been exchanged, for this OSPF interface.')
ospfIntfNbrExchangeDone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrExchangeDone.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrExchangeDone.setDescription("The total number of neighbours in this state (i.e. in an adjacency's final state) having transimitted a full sequence of Database Description packets, for this OSPF interface.")
ospfIntfNbrBadRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrBadRequests.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrBadRequests.setDescription('The total number of Link State Requests which have been received for a link state advertisement not contained in the database for this interface.')
ospfIntfNbrBadSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrBadSequence.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrBadSequence.setDescription('The total number of Database Description packets which have been received that either a) has an unexpected DD sequence number b) Unexpectedly has the init bit set c) Has an options field differing from the last Options field received in a Database Description packet. Any of these conditions indicate that some error has occured during adjacency establishment for this interface.')
ospfIntfNbrLoadingDone = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrLoadingDone.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrLoadingDone.setDescription('The total number of link state updates received for all out-of-date portions of the database for this OSPF interface.')
ospfIntfNbrN1way = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrN1way.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrN1way.setDescription('The total number of Hello packets received from neighbours, in which this router is not mentioned for this OSPF interface.')
ospfIntfNbrRstAd = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrRstAd.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrRstAd.setDescription('The sum total number of times the Neighbour adjacency has been reset on this interface.')
ospfIntfNbrDown = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrDown.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrDown.setDescription('The total number of Neighbouring routers down (i.e. in the initial state of a neighbour conversation.) for this interface.')
ospfIntfNbrN2way = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrN2way.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrN2way.setDescription('The total number of Hello packets received from neighbours, in which this router is mentioned for this OSPF interface.')
ospfIntfChangeStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 3), )
if mibBuilder.loadTexts: ospfIntfChangeStats.setStatus('current')
if mibBuilder.loadTexts: ospfIntfChangeStats.setDescription('The table of OSPF Interface change Statistics.')
ospfIntfChangeStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 3, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfIntfIndex"))
if mibBuilder.loadTexts: ospfIntfChangeStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfIntfChangeStatsEntry.setDescription('OSPF interface Change statistics.')
ospfIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfIntfIndex.setDescription('The index of the OSPF Interface for which these statistics apply.')
ospfIntfHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 3, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfHello.setStatus('current')
if mibBuilder.loadTexts: ospfIntfHello.setDescription('The total number of Hello packets sent by this interface.')
ospfIntfDown = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 3, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfDown.setStatus('current')
if mibBuilder.loadTexts: ospfIntfDown.setDescription('The total number of times the interface was down.')
ospfIntfLoop = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 3, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfLoop.setStatus('current')
if mibBuilder.loadTexts: ospfIntfLoop.setDescription('The total number of times the interface was no longer connected to the attatched network.')
ospfIntfUnloop = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 3, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfUnloop.setStatus('current')
if mibBuilder.loadTexts: ospfIntfUnloop.setDescription('The total number of times the interface, connected back to the attatched network.')
ospfIntfWaitTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 3, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfWaitTimer.setStatus('current')
if mibBuilder.loadTexts: ospfIntfWaitTimer.setDescription('The total number of times the Wait Timer has been fired, (indicating the end of the waiting period that is required before electing a (Backup) Designated Router) for this OSPF interface.')
ospfIntfBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfBackup.setStatus('current')
if mibBuilder.loadTexts: ospfIntfBackup.setDescription('The total number of Backup Designated Routers on the attatched network for this OSPF interface.')
ospfIntfNbrChange = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfNbrChange.setStatus('current')
if mibBuilder.loadTexts: ospfIntfNbrChange.setDescription('The total number of changes in the set of bidirectional neighbours associated with the interface for this OSPF interface.')
ospfIntfErrorStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 4), )
if mibBuilder.loadTexts: ospfIntfErrorStats.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrorStats.setDescription('The table of OSPF Interface Error Statistics.')
ospfIntfErrorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 4, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfIntfErrIndex"))
if mibBuilder.loadTexts: ospfIntfErrorStatsEntry.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrorStatsEntry.setDescription('Error Statistics for an OSPF area.')
ospfIntfErrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrIndex.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrIndex.setDescription('The index of the OSPF Intf for which these statistics apply.')
ospfIntfErrAuthFailure = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 4, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrAuthFailure.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrAuthFailure.setDescription('The total number of packets received with a wrong password in this area.')
ospfIntfErrNetmaskMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 4, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrNetmaskMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrNetmaskMismatch.setDescription('The total number of packets received with a wrong netmask in this area.')
ospfIntfErrHelloMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrHelloMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrHelloMismatch.setDescription('The total number of packets received with a different hello interval in this area.')
ospfIntfErrDeadMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 4, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrDeadMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrDeadMismatch.setDescription('The total number of packets received with a different dead interval in this area.')
ospfIntfErrOptionsMismatch = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrOptionsMismatch.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrOptionsMismatch.setDescription('The total number of packets received with a different options in this area.')
ospfIntfErrUnknownNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 3, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfErrUnknownNbr.setStatus('current')
if mibBuilder.loadTexts: ospfIntfErrUnknownNbr.setDescription('The total number of packets received from an unknown neighbor in this area.')
ospfCumRxPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxPkts.setStatus('current')
if mibBuilder.loadTexts: ospfCumRxPkts.setDescription('The sum total of all OSPF packets received on all OSPF areas and interfaces.')
ospfCumTxPkts = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxPkts.setStatus('current')
if mibBuilder.loadTexts: ospfCumTxPkts.setDescription('The sum total of all OSPF packets transmitted on all OSPF areas and interfaces.')
ospfCumRxHello = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxHello.setStatus('current')
if mibBuilder.loadTexts: ospfCumRxHello.setDescription('The sum total of all Hello packets received on all OSPF areas and interfaces.')
ospfCumTxHello = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxHello.setStatus('current')
if mibBuilder.loadTexts: ospfCumTxHello.setDescription('The sum total of all Hello packets transmitted on all OSPF areas and interfaces.')
ospfCumRxDatabase = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxDatabase.setStatus('current')
if mibBuilder.loadTexts: ospfCumRxDatabase.setDescription('The sum total of all Database Description packets received on all OSPF areas and interfaces.')
ospfCumTxDatabase = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxDatabase.setStatus('current')
if mibBuilder.loadTexts: ospfCumTxDatabase.setDescription('The sum total of all Database Description packets transmitted on all OSPF areas and interfaces.')
ospfCumRxlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsReqs.setStatus('current')
if mibBuilder.loadTexts: ospfCumRxlsReqs.setDescription('The sum total of all Link State Request packets received on all OSPF areas and interfaces.')
ospfCumTxlsReqs = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsReqs.setStatus('current')
if mibBuilder.loadTexts: ospfCumTxlsReqs.setDescription('The sum total of all Link State Request packets transmitted on all OSPF areas and interfaces.')
ospfCumRxlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsAcks.setStatus('current')
if mibBuilder.loadTexts: ospfCumRxlsAcks.setDescription('The sum total of all Link State Acknowledgement packets received on all OSPF areas and interfaces.')
ospfCumTxlsAcks = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsAcks.setStatus('current')
if mibBuilder.loadTexts: ospfCumTxlsAcks.setDescription('The sum total of all Link State Acknowledgement packets transmitted on all OSPF areas and interfaces.')
ospfCumRxlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumRxlsUpdates.setStatus('current')
if mibBuilder.loadTexts: ospfCumRxlsUpdates.setDescription('The sum total of all Link State Update packets received on all OSPF areas and interfaces.')
ospfCumTxlsUpdates = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumTxlsUpdates.setStatus('current')
if mibBuilder.loadTexts: ospfCumTxlsUpdates.setDescription('The sum total of all Link State Update packets transmitted on all OSPF areas and interfaces.')
ospfCumNbrhello = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrhello.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrhello.setDescription('The sum total of all Hello packets received from neighbours on all OSPF areas and interfaces.')
ospfCumNbrStart = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrStart.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrStart.setDescription('The sum total number of neighbours in this state (i.e. an indication that Hello packets should now be sent to the neighbour at intervals of HelloInterval seconds.) across all OSPF areas and interfaces.')
ospfCumNbrAdjointOk = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrAdjointOk.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrAdjointOk.setDescription('The sum total number of decisions to be made (again) as to whether an adjacency should be established/maintained with the neighbour across all OSPF areas and interfaces.')
ospfCumNbrNegotiationDone = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 2, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrNegotiationDone.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrNegotiationDone.setDescription('The sum total number of neighbours in this state wherein the Master/slave relationship has been negotiated, and sequence numbers have been exchanged, across all OSPF areas and interfaces.')
ospfCumNbrExchangeDone = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 2, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrExchangeDone.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrExchangeDone.setDescription("The sum total number of neighbours in this state (i.e. in an adjacency's final state) having transimitted a full sequence of Database Description packets, across all OSPF areas and interfaces.")
ospfCumNbrBadRequests = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 2, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrBadRequests.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrBadRequests.setDescription('The sum total number of Link State Requests which have been received for a link state advertisement not contained in the database across all interfaces and OSPF areas.')
ospfCumNbrBadSequence = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 2, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrBadSequence.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrBadSequence.setDescription('The sum total number of Database Description packets which have been received that either a) has an unexpected DD sequence number b) Unexpectedly has the init bit set c) Has an options field differing from the last Options field received in a Database Description packet. Any of these conditions indicate that some error has occured during adjacency establishment for all OSPF areas and interfaces.')
ospfCumNbrLoadingDone = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 2, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrLoadingDone.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrLoadingDone.setDescription('The sum total number of link state updates received for all out-of-date portions of the database across all OSPF areas and interfaces.')
ospfCumNbrN1way = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 2, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrN1way.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrN1way.setDescription('The sum total number of Hello packets received from neighbours, in which this router is not mentioned across all OSPF interfaces and areas.')
ospfCumNbrRstAd = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrRstAd.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrRstAd.setDescription('The sum total number of times the Neighbour adjacency has been reset across all OPSF areas and interfaces.')
ospfCumNbrDown = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrDown.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrDown.setDescription('The total number of Neighbouring routers down (i.e. in the initial state of a neighbour conversation.) across all OSPF areas and interfaces.')
ospfCumNbrN2way = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumNbrN2way.setStatus('current')
if mibBuilder.loadTexts: ospfCumNbrN2way.setDescription('The sum total number of Hello packets received from neighbours, in which this router is mentioned across all OSPF interfaces and areas.')
ospfCumIntfHello = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfHello.setStatus('current')
if mibBuilder.loadTexts: ospfCumIntfHello.setDescription('The sum total number of Hello packets sent on all interfaces and areas')
ospfCumIntfDown = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfDown.setStatus('current')
if mibBuilder.loadTexts: ospfCumIntfDown.setDescription('The sum total number of interfaces down in all OSPF areas.')
ospfCumIntfLoop = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfLoop.setStatus('current')
if mibBuilder.loadTexts: ospfCumIntfLoop.setDescription('The sum total of interfaces no longer connected to the attatched network across all OSPF areas and interfaces.')
ospfCumIntfUnloop = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 3, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfUnloop.setStatus('current')
if mibBuilder.loadTexts: ospfCumIntfUnloop.setDescription('The sum total number of interfaces, connected to the attatched network in all OSPF areas.')
ospfCumIntfWaitTimer = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 3, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfWaitTimer.setStatus('current')
if mibBuilder.loadTexts: ospfCumIntfWaitTimer.setDescription('The sum total number of times the Wait Timer has been fired, (indicating the end of the waiting period that is required before electing a (Backup) Designated Router) across all OSPF areas and interfaces.')
ospfCumIntfBackup = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 3, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfBackup.setStatus('current')
if mibBuilder.loadTexts: ospfCumIntfBackup.setDescription('The sum total number of Backup Designated Routers on the attatched network for all OSPF areas and interfaces.')
ospfCumIntfNbrChange = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 3, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfCumIntfNbrChange.setStatus('current')
if mibBuilder.loadTexts: ospfCumIntfNbrChange.setDescription('The sum total number of changes in the set of bidirectional neighbours associated with any interface across all OSPF areas.')
ospfTmrsKckOffHello = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffHello.setStatus('current')
if mibBuilder.loadTexts: ospfTmrsKckOffHello.setDescription('The sum total number of times the Hello timer has been fired (which triggers the send of a Hello packet) across all OPSF areas and interfaces.')
ospfTmrsKckOffRetransmit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffRetransmit.setStatus('current')
if mibBuilder.loadTexts: ospfTmrsKckOffRetransmit.setDescription('The sum total number of times the Retransmit timer has been fired across all OPSF areas and interfaces.')
ospfTmrsKckOffLsaLock = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffLsaLock.setStatus('current')
if mibBuilder.loadTexts: ospfTmrsKckOffLsaLock.setDescription('The sum total number of times the Lsa Lock timer has been fired across all OSPF areas and interfaces.')
ospfTmrsKckOffLsaAck = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffLsaAck.setStatus('current')
if mibBuilder.loadTexts: ospfTmrsKckOffLsaAck.setDescription('The sum total number of times the Lsa Ack timer has been fired across all ospf areas and interfaces.')
ospfTmrsKckOffDbage = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffDbage.setStatus('current')
if mibBuilder.loadTexts: ospfTmrsKckOffDbage.setDescription('The total number of times the Dbage has been fired.')
ospfTmrsKckOffSummary = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffSummary.setStatus('current')
if mibBuilder.loadTexts: ospfTmrsKckOffSummary.setDescription('The total number of times the Summary timer has been fired.')
ospfTmrsKckOffAseExport = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 5, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTmrsKckOffAseExport.setStatus('current')
if mibBuilder.loadTexts: ospfTmrsKckOffAseExport.setDescription('The total number of times the ASE Export timer has been fired.')
igmpSnoopStats = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7, 1), )
if mibBuilder.loadTexts: igmpSnoopStats.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopStats.setDescription('The table of OSPF Interface Error Statistics.')
igmpSnoopStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7, 1, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "igmpSnoopVlanIndex"))
if mibBuilder.loadTexts: igmpSnoopStatsEntry.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopStatsEntry.setDescription('Statistics for IGMP Snooping.')
igmpSnoopVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpSnoopVlanIndex.setStatus('current')
if mibBuilder.loadTexts: igmpSnoopVlanIndex.setDescription('The index of the VLAN for which these statistics apply.')
rxIgmpValidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpValidPkts.setStatus('current')
if mibBuilder.loadTexts: rxIgmpValidPkts.setDescription('The total number of valid IGMP packets received on this VLAN.')
rxIgmpInvalidPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7, 1, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpInvalidPkts.setStatus('current')
if mibBuilder.loadTexts: rxIgmpInvalidPkts.setDescription('The total number of invalid IGMP packets received on this VLAN.')
rxIgmpGenQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpGenQueries.setStatus('current')
if mibBuilder.loadTexts: rxIgmpGenQueries.setDescription('The total number of IGMP General Query packets received on this VLAN.')
rxIgmpGrpSpecificQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpGrpSpecificQueries.setStatus('current')
if mibBuilder.loadTexts: rxIgmpGrpSpecificQueries.setDescription('The total number of IGMP Group Specific Query packets received on this VLAN.')
rxIgmpLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpLeaves.setStatus('current')
if mibBuilder.loadTexts: rxIgmpLeaves.setDescription('The total number of IGMP Leave packets received on this VLAN.')
rxIgmpReports = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxIgmpReports.setStatus('current')
if mibBuilder.loadTexts: rxIgmpReports.setDescription('The total number of IGMP Report packets received on this VLAN.')
txIgmpGrpSpecificQueries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIgmpGrpSpecificQueries.setStatus('current')
if mibBuilder.loadTexts: txIgmpGrpSpecificQueries.setDescription('The total number of IGMP Group Specific Query packets transmitted on this VLAN.')
txIgmpReports = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIgmpReports.setStatus('current')
if mibBuilder.loadTexts: txIgmpReports.setDescription('The total number of IGMP Report packets transmitted on this VLAN.')
txIgmpLeaves = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txIgmpLeaves.setStatus('current')
if mibBuilder.loadTexts: txIgmpLeaves.setDescription('The total number of IGMP Leave packets transmitted on this VLAN.')
igmpClearVlanStats = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 2, 7, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("clear", 1), ("ok", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpClearVlanStats.setStatus('current')
if mibBuilder.loadTexts: igmpClearVlanStats.setDescription('Setting this to clear(1) results in clearing the statistics for this snooping VLAN.')
ipRouteInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 1, 1), )
if mibBuilder.loadTexts: ipRouteInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoTable.setDescription('The table of run-time IP routes.')
ipRouteInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 1, 1, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipRouteInfoIndx"))
if mibBuilder.loadTexts: ipRouteInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoEntry.setDescription('A row in the run-time IP route table')
ipRouteInfoIndx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoIndx.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoIndx.setDescription('The index of this route table.')
ipRouteInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 1, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoDestIp.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoDestIp.setDescription('The destination IP address of this route.')
ipRouteInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 1, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoMask.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoMask.setDescription('The destination IP mask of this route.')
ipRouteInfoGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 1, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoGateway.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoGateway.setDescription('The next-hop router address for this route.')
ipRouteInfoTag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("fixed", 1), ("static", 2), ("addr", 3), ("rip", 4), ("broadcast", 5), ("martian", 6), ("multicast", 7), ("vip", 8), ("bgp", 9), ("ospf", 10), ("none", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoTag.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoTag.setDescription('The tag-type for this route.')
ipRouteInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("indirect", 1), ("direct", 2), ("local", 3), ("broadcast", 4), ("martian", 5), ("multicast", 6), ("other", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoType.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoType.setDescription('The type of the route.')
ipRouteInfoInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoInterface.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoInterface.setDescription('The interface number for which the destination address is applicable.')
ipRouteInfoMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipRouteInfoMetric.setStatus('current')
if mibBuilder.loadTexts: ipRouteInfoMetric.setDescription('The metric of this route.')
routeTableClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routeTableClear.setStatus('current')
if mibBuilder.loadTexts: routeTableClear.setDescription('Setting this value to clear(2) clears the route table.')
arpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 2, 1), )
if mibBuilder.loadTexts: arpInfoTable.setStatus('current')
if mibBuilder.loadTexts: arpInfoTable.setDescription('The table of ARP entries.')
arpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 2, 1, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "arpInfoDestIp"))
if mibBuilder.loadTexts: arpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: arpInfoEntry.setDescription('A row in the ARP table')
arpInfoDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoDestIp.setStatus('current')
if mibBuilder.loadTexts: arpInfoDestIp.setDescription('The destination IP address of the ARP entry.')
arpInfoMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 2, 1, 1, 2), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoMacAddr.setStatus('current')
if mibBuilder.loadTexts: arpInfoMacAddr.setDescription('The MAC address for the ARP entry.')
arpInfoVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoVLAN.setStatus('current')
if mibBuilder.loadTexts: arpInfoVLAN.setDescription('The VLAN identifier for the ARP entry.')
arpInfoSrcPort = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoSrcPort.setStatus('current')
if mibBuilder.loadTexts: arpInfoSrcPort.setDescription("The port number on which this entry's equivalence is effective.")
arpInfoRefPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoRefPorts.setStatus('current')
if mibBuilder.loadTexts: arpInfoRefPorts.setDescription('The rference ports associated with this ARP entry.')
arpInfoFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("clear", 1), ("unresolved", 2), ("permanent", 3), ("indirect", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: arpInfoFlag.setStatus('current')
if mibBuilder.loadTexts: arpInfoFlag.setDescription('The flag associated with this ARP entry.')
arpCacheClear = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("clear", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpCacheClear.setStatus('current')
if mibBuilder.loadTexts: arpCacheClear.setDescription('Setting this value to clear(2) clears the ARP cache.')
igmpInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 1), )
if mibBuilder.loadTexts: igmpInfoTable.setStatus('current')
if mibBuilder.loadTexts: igmpInfoTable.setDescription('The table of IGMP group membership information.')
igmpInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 1, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "igmpInfoIndex"))
if mibBuilder.loadTexts: igmpInfoEntry.setStatus('current')
if mibBuilder.loadTexts: igmpInfoEntry.setDescription('Information about an IGMP group member .')
igmpInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoIndex.setStatus('current')
if mibBuilder.loadTexts: igmpInfoIndex.setDescription('The igmp group number for which the IGMP info table is related.')
igmpInfoGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoGroupId.setStatus('current')
if mibBuilder.loadTexts: igmpInfoGroupId.setDescription('The IP address of the IGMP group.')
igmpInfoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoVlanId.setStatus('current')
if mibBuilder.loadTexts: igmpInfoVlanId.setDescription('The VLAN ID for this IGMP group.')
igmpInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("v3", 1), ("v2", 2), ("v1", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoVersion.setStatus('current')
if mibBuilder.loadTexts: igmpInfoVersion.setDescription('The Version of IGMP host.')
igmpInfoPortNum = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoPortNum.setStatus('current')
if mibBuilder.loadTexts: igmpInfoPortNum.setDescription('The Version of IGMP host.')
igmpInfoExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpInfoExpires.setStatus('current')
if mibBuilder.loadTexts: igmpInfoExpires.setDescription('The expiration time for this host.')
igmpMrtrInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 2), )
if mibBuilder.loadTexts: igmpMrtrInfoTable.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoTable.setDescription('The table of IGMP mrouters.')
igmpMrtrInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "igmpMrtrInfoIndex"))
if mibBuilder.loadTexts: igmpMrtrInfoEntry.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoEntry.setDescription('Information about an IGMP mrouter.')
igmpMrtrInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoIndex.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoIndex.setDescription('The mrouter number for which the IGMP mrouter info table is related.')
igmpMrtrInfoVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoVlanId.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoVlanId.setDescription('The VLAN ID on which this IGMP mrouter is attached.')
igmpMrtrInfoPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoPortId.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoPortId.setDescription('The port on which this IGMP mrouter is attached.')
igmpMrtrInfoVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoVersion.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoVersion.setDescription('The version of this IGMP mrouter.')
igmpMrtrInfoExpires = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 2, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoExpires.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoExpires.setDescription('The expiration time for this mrouter.')
igmpMrtrInfoMrt = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 5, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: igmpMrtrInfoMrt.setStatus('current')
if mibBuilder.loadTexts: igmpMrtrInfoMrt.setDescription('The Maximum Query Response time of this IGMP mrouter.')
rip2GeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 1))
ripInfoState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoState.setStatus('current')
if mibBuilder.loadTexts: ripInfoState.setDescription('RIP global state.')
ripInfoUpdatePeriod = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoUpdatePeriod.setStatus('current')
if mibBuilder.loadTexts: ripInfoUpdatePeriod.setDescription('Update Period in seconds.')
rip2InfoIntfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2), )
if mibBuilder.loadTexts: rip2InfoIntfTable.setStatus('current')
if mibBuilder.loadTexts: rip2InfoIntfTable.setDescription('The information table of RIP.')
ripInfoIntfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ripInfoIntfIndex"))
if mibBuilder.loadTexts: ripInfoIntfEntry.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfEntry.setDescription('Information about RIP on IP interface.')
ripInfoIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfIndex.setDescription('The interface number for which the RIP information is related.')
ripInfoIntfVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ripVersion1", 1), ("ripVersion2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfVersion.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfVersion.setDescription('RIP version.')
ripInfoIntfAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfAddress.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfAddress.setDescription('The interface address.')
ripInfoIntfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfState.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfState.setDescription('The status of RIP protocol.')
ripInfoIntfListen = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfListen.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfListen.setDescription('The status of listening to route updates.')
ripInfoIntfTrigUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfTrigUpdate.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfTrigUpdate.setDescription('The status of triggered updates.')
ripInfoIntfMcastUpdate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfMcastUpdate.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfMcastUpdate.setDescription('The status of multicast updates.')
ripInfoIntfPoisonReverse = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfPoisonReverse.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfPoisonReverse.setDescription('The status of RIP poison reverse.')
ripInfoIntfSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfSupply.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfSupply.setDescription('The status of supplying route updates.')
ripInfoIntfMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfMetric.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfMetric.setDescription('RIP route metric for this interface.')
ripInfoIntfAuth = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("password", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfAuth.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfAuth.setDescription('The type of Authentication used on this interface.')
ripInfoIntfKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfKey.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfKey.setDescription('RIP update authentication password.')
ripInfoIntfDefault = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 7, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("both", 1), ("listen", 2), ("supply", 3), ("none", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ripInfoIntfDefault.setStatus('current')
if mibBuilder.loadTexts: ripInfoIntfDefault.setDescription('Specifies what RIP does with default routes.')
ipInfoRouterID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRouterID.setStatus('current')
if mibBuilder.loadTexts: ipInfoRouterID.setDescription('Router ID information.')
ipIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 2), )
if mibBuilder.loadTexts: ipIntfInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipIntfInfoTable.setDescription('The table of IP interface information.')
intfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "intfInfoIndex"))
if mibBuilder.loadTexts: intfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: intfInfoEntry.setDescription('A row in IP interface information table.')
intfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoIndex.setStatus('current')
if mibBuilder.loadTexts: intfInfoIndex.setDescription('The interface number for which the information is related.')
intfInfoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoAddr.setStatus('current')
if mibBuilder.loadTexts: intfInfoAddr.setDescription('The IP address of the interface.')
intfInfoNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoNetMask.setStatus('current')
if mibBuilder.loadTexts: intfInfoNetMask.setDescription('The subnet mask of the interface.')
intfInfoBcastAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 2, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoBcastAddr.setStatus('current')
if mibBuilder.loadTexts: intfInfoBcastAddr.setDescription('The broadcast address of the interface.')
intfInfoVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoVlan.setStatus('current')
if mibBuilder.loadTexts: intfInfoVlan.setDescription('The VLAN number for this interface.')
intfInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: intfInfoStatus.setStatus('current')
if mibBuilder.loadTexts: intfInfoStatus.setDescription('The status of the interface.')
gatewayInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 3), )
if mibBuilder.loadTexts: gatewayInfoTable.setStatus('current')
if mibBuilder.loadTexts: gatewayInfoTable.setDescription('The table containing information for the default gateways.')
gatewayInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 3, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "gatewayInfoIndex"))
if mibBuilder.loadTexts: gatewayInfoEntry.setStatus('current')
if mibBuilder.loadTexts: gatewayInfoEntry.setDescription('A row in the gateway information table')
gatewayInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoIndex.setStatus('current')
if mibBuilder.loadTexts: gatewayInfoIndex.setDescription('The gateway number for which the information is related.')
gatewayInfoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoAddr.setStatus('current')
if mibBuilder.loadTexts: gatewayInfoAddr.setDescription('The IP address of the default gateway.')
gatewayInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gatewayInfoStatus.setStatus('current')
if mibBuilder.loadTexts: gatewayInfoStatus.setDescription('The status of the default gateway.')
ipInfoBootpRelayState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoBootpRelayState.setStatus('current')
if mibBuilder.loadTexts: ipInfoBootpRelayState.setDescription('The state of BOOTP relay.')
ipInfoBootpRelayAddr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoBootpRelayAddr.setStatus('current')
if mibBuilder.loadTexts: ipInfoBootpRelayAddr.setDescription('The IP address of BOOTP server.')
ipInfoBootpRelayAddr2 = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoBootpRelayAddr2.setStatus('current')
if mibBuilder.loadTexts: ipInfoBootpRelayAddr2.setDescription('The IP address of second BOOTP server.')
ipInfoFwdState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoFwdState.setStatus('current')
if mibBuilder.loadTexts: ipInfoFwdState.setDescription('IP forwarding global state.')
ipInfoFwdDirectedBcast = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoFwdDirectedBcast.setStatus('current')
if mibBuilder.loadTexts: ipInfoFwdDirectedBcast.setDescription('The state of forwarding directed broadcasts.')
ipInfoNwfTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 9), )
if mibBuilder.loadTexts: ipInfoNwfTable.setStatus('current')
if mibBuilder.loadTexts: ipInfoNwfTable.setDescription('The table of IP network filter information.')
ipInfoNwfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 9, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipInfoNwfIndex"))
if mibBuilder.loadTexts: ipInfoNwfEntry.setStatus('current')
if mibBuilder.loadTexts: ipInfoNwfEntry.setDescription('A row in the IP network filter information table.')
ipInfoNwfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoNwfIndex.setStatus('current')
if mibBuilder.loadTexts: ipInfoNwfIndex.setDescription('The netowrk filter number for which the NWF is related.')
ipInfoNwfAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 9, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoNwfAddr.setStatus('current')
if mibBuilder.loadTexts: ipInfoNwfAddr.setDescription('The IP address of the network filter.')
ipInfoNwfMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoNwfMask.setStatus('current')
if mibBuilder.loadTexts: ipInfoNwfMask.setDescription('The subnet mask of the network filter.')
ipInfoNwfState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 9, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoNwfState.setStatus('current')
if mibBuilder.loadTexts: ipInfoNwfState.setDescription('The state of the network filter.')
ipInfoRmapTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 10), )
if mibBuilder.loadTexts: ipInfoRmapTable.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapTable.setDescription('The table of IP route map information.')
ipInfoRmapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 10, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipInfoRmapIndex"))
if mibBuilder.loadTexts: ipInfoRmapEntry.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapEntry.setDescription('Information about an IP route map.')
ipInfoRmapIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapIndex.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapIndex.setDescription('The route map number for which the RMAP is related.')
ipInfoRmapLp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 10, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapLp.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapLp.setDescription('The local-preference of the route map. 4294967295 means none')
ipInfoRmapMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 10, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapMetric.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapMetric.setDescription('The metric of the route map. 4294967295 means none')
ipInfoRmapPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 10, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapPrec.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapPrec.setDescription('The precedence of the route map.')
ipInfoRmapWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 10, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapWeight.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapWeight.setDescription('The weight of the route map. 65535 means none')
ipInfoRmapState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 10, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapState.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapState.setDescription('Enable or disable the route map.')
ipInfoRmapAp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 10, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 18))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapAp.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapAp.setDescription('The as-path prepend of the matched route. Up to 3 AS number can be displayed for the string. The usuage is:<AS number> [<AS number>][ <AS number>]')
ipInfoRmapMetricType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipInfoRmapMetricType.setStatus('current')
if mibBuilder.loadTexts: ipInfoRmapMetricType.setDescription('The OSPF metric-type of the matched route.')
ipOspfInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11))
ipOspfInfoState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfInfoState.setStatus('current')
if mibBuilder.loadTexts: ipOspfInfoState.setDescription('OSPF global state.')
ipOspfInfoDefaultRouteMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfInfoDefaultRouteMetric.setStatus('current')
if mibBuilder.loadTexts: ipOspfInfoDefaultRouteMetric.setDescription('The metric to be assigned.')
ipOspfInfoDefaultRouteMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfInfoDefaultRouteMetricType.setStatus('current')
if mibBuilder.loadTexts: ipOspfInfoDefaultRouteMetricType.setDescription('The AS External metric type to be assigned.')
ipOspfInfoRouterID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfInfoRouterID.setStatus('current')
if mibBuilder.loadTexts: ipOspfInfoRouterID.setDescription('The router ID of the switch.')
ipOspfInfoLsdbLimit = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfInfoLsdbLimit.setStatus('current')
if mibBuilder.loadTexts: ipOspfInfoLsdbLimit.setDescription('The LSDB limit for external LSA.')
ipOspfAreaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 6), )
if mibBuilder.loadTexts: ipOspfAreaInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoTable.setDescription('The table of OSPF Area Information.')
ipOspfAreaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 6, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipOspfAreaInfoIndex"), (0, "BLADETYPE2-NETWORK-MIB", "ipOspfAreaInfoId"))
if mibBuilder.loadTexts: ipOspfAreaInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoEntry.setDescription('Information about a OSPF area.')
ipOspfAreaInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfAreaInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoIndex.setDescription('The OSPF area number for which the OSPF area table is related.')
ipOspfAreaInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 6, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfAreaInfoId.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoId.setDescription('The IP Address of the OSPF area.')
ipOspfAreaInfoSpfInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfAreaInfoSpfInterval.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoSpfInterval.setDescription('The SPF interval for the OSPF area.')
ipOspfAreaInfoAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfAreaInfoAuthType.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoAuthType.setDescription('Type of authentication being used. none(1) - no authentication password(2) - use password md5(3) - use MD5 authentication.')
ipOspfAreaInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("transit", 0), ("stub", 1), ("nssa", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfAreaInfoType.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoType.setDescription('Type of Area. transit(0) stub(1) nssa(2)')
ipOspfAreaInfoMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfAreaInfoMetric.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoMetric.setDescription('Metric (1-65535)')
ipOspfAreaInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 6, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfAreaInfoStatus.setStatus('current')
if mibBuilder.loadTexts: ipOspfAreaInfoStatus.setDescription('Status disabled(0) enabled(1)')
ipOspfRangeInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 7), )
if mibBuilder.loadTexts: ipOspfRangeInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoTable.setDescription('The table of OSPF summary range information.')
ipOspfRangeInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 7, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipOspfRangeInfoIndex"))
if mibBuilder.loadTexts: ipOspfRangeInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoEntry.setDescription('Information about an OSPF summary range.')
ipOspfRangeInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 7, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRangeInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoIndex.setDescription('The range number for which the OSPF summary range table is related.')
ipOspfRangeInfoAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 7, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRangeInfoAddr.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoAddr.setDescription('The IP Address of the range.')
ipOspfRangeInfoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 7, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRangeInfoMask.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoMask.setDescription('The mask of the range.')
ipOspfRangeInfoAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 7, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRangeInfoAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoAreaIndex.setDescription('The area index.')
ipOspfRangeInfoHideState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRangeInfoHideState.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoHideState.setDescription('The state of the hide range.')
ipOspfRangeInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 7, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRangeInfoState.setStatus('current')
if mibBuilder.loadTexts: ipOspfRangeInfoState.setDescription('The state of the range.')
ipOspfIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 8), )
if mibBuilder.loadTexts: ipOspfIntfInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoTable.setDescription('The table of OSPF Interface Information.')
ipOspfIntfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 8, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipOspfIntfInfoIndex"))
if mibBuilder.loadTexts: ipOspfIntfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoEntry.setDescription('Information about an OSPF Interface.')
ipOspfIntfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 8, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoIndex.setDescription('The OSPF Interface number for which the OSPF Interface table is related.')
ipOspfIntfInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoId.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoId.setDescription('The IP Address of the OSPF interface.')
ipOspfIntfInfoArea = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 8, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoArea.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoArea.setDescription('The index of the area that the interface belongs')
ipOspfIntfInfoMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 8, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoMdkey.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoMdkey.setDescription('The MD5 key for the OSPF interface 0 (none) no MD5 authentication.')
ipOspfIntfInfoCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoCost.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoCost.setDescription('Interface cost')
ipOspfIntfInfoPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoPrio.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoPrio.setDescription('Interface router priority')
ipOspfIntfInfoHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoHello.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoHello.setDescription('Hello interval')
ipOspfIntfInfoDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoDead.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoDead.setDescription('Dead interval')
ipOspfIntfInfoTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoTrans.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoTrans.setDescription('Transit delay')
ipOspfIntfInfoRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoRetra.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoRetra.setDescription('Retransmit interval')
ipOspfIntfInfoAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 8, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoAuthKey.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoAuthKey.setDescription('Authentication Key')
ipOspfIntfInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 8, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfIntfInfoStatus.setStatus('current')
if mibBuilder.loadTexts: ipOspfIntfInfoStatus.setDescription('Status of the interface disabled(0), enabled(1)')
ipOspfVirtIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 9), )
if mibBuilder.loadTexts: ipOspfVirtIntfInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoTable.setDescription('The table of OSPF Virtual Interface Information.')
ipOspfVirtIntfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 9, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipOspfVirtIntfInfoIndex"))
if mibBuilder.loadTexts: ipOspfVirtIntfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoEntry.setDescription('Information about an OSPF virtual Interface.')
ipOspfVirtIntfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoIndex.setDescription('The OSPF Virtual Interface number for which the OSPF Virtual Interface table is related.')
ipOspfVirtIntfInfoAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoAreaId.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoAreaId.setDescription('The index of the OSPF area to which this virtual interface belongs.')
ipOspfVirtIntfInfoNbr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 9, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoNbr.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoNbr.setDescription('The IP Address of the OSPF neighbor for this virtual interface.')
ipOspfVirtIntfInfoMdkey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoMdkey.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoMdkey.setDescription('The MD5 key for the OSPF virtual interface 0 (none) no MD5 authentication.')
ipOspfVirtIntfInfoHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 9, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoHello.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoHello.setDescription('Hello interval')
ipOspfVirtIntfInfoDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 9, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoDead.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoDead.setDescription('Dead interval')
ipOspfVirtIntfInfoTrans = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 9, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoTrans.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoTrans.setDescription('Transit delay')
ipOspfVirtIntfInfoRetra = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 9, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoRetra.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoRetra.setDescription('Retransmit interval')
ipOspfVirtIntfInfoAuthKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 9, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoAuthKey.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoAuthKey.setDescription('Authentication Key')
ipOspfVirtIntfInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 9, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfVirtIntfInfoStatus.setStatus('current')
if mibBuilder.loadTexts: ipOspfVirtIntfInfoStatus.setDescription('Status disabled(0), enabled(1)')
ipOspfHostInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 10), )
if mibBuilder.loadTexts: ipOspfHostInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipOspfHostInfoTable.setDescription('The table of OSPF Host Information.')
ipOspfHostInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 10, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipOspfHostInfoIndex"), (0, "BLADETYPE2-NETWORK-MIB", "ipOspfHostInfoIpAddr"))
if mibBuilder.loadTexts: ipOspfHostInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ipOspfHostInfoEntry.setDescription('Information about a OSPF host.')
ipOspfHostInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 10, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfHostInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfHostInfoIndex.setDescription('The OSPF host number for which the OSPF host table is related.')
ipOspfHostInfoIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 10, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfHostInfoIpAddr.setStatus('current')
if mibBuilder.loadTexts: ipOspfHostInfoIpAddr.setDescription('The IP Address of the OSPF host.')
ipOspfHostInfoAreaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 10, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfHostInfoAreaIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfHostInfoAreaIndex.setDescription('The area index.')
ipOspfHostInfoCost = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfHostInfoCost.setStatus('current')
if mibBuilder.loadTexts: ipOspfHostInfoCost.setDescription('The cost of the corresponding host.')
ipOspfHostInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfHostInfoState.setStatus('current')
if mibBuilder.loadTexts: ipOspfHostInfoState.setDescription('Enable or disable an OSPF Host')
ipOspfRedistributeInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 11))
ipOspfRedistributeStaticInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 11, 1))
ipOspfRedistributeStaticInfoMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeStaticInfoMetric.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeStaticInfoMetric.setDescription('The metric to be assigned to static routes. A value of 0 indicates none.')
ipOspfRedistributeStaticInfoMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeStaticInfoMetricType.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeStaticInfoMetricType.setDescription('The AS External metric type for static routes.')
ipOspfRedistributeStaticInfoOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 11, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeStaticInfoOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeStaticInfoOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ipOspfRedistributeFixedInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 11, 2))
ipOspfRedistributeFixedInfoMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 11, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeFixedInfoMetric.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeFixedInfoMetric.setDescription('The export metric for fixed routes. A value of 0 indicates none')
ipOspfRedistributeFixedInfoMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 11, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeFixedInfoMetricType.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeFixedInfoMetricType.setDescription('The AS External metric type for fixed routes.')
ipOspfRedistributeFixedInfoOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 11, 2, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeFixedInfoOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeFixedInfoOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ipOspfRedistributeRipInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 11, 3))
ipOspfRedistributeRipInfoMetric = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 11, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16777215))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeRipInfoMetric.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeRipInfoMetric.setDescription('The export metric for RIP routes. A value of 0 indicates none')
ipOspfRedistributeRipInfoMetricType = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 11, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("type1", 2), ("type2", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeRipInfoMetricType.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeRipInfoMetricType.setDescription('The AS External metric type for RIP routes.')
ipOspfRedistributeRipInfoOutRmapList = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 11, 3, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfRedistributeRipInfoOutRmapList.setStatus('current')
if mibBuilder.loadTexts: ipOspfRedistributeRipInfoOutRmapList.setDescription('The route maps present in the out route map list. The route maps are presented in a bitmap format. in receiving order: OCTET 1 OCTET 2 ..... xxxxxxxx xxxxxxxx ..... || || |_ Rmap 9 || || || ||___ Rmap 8 || |____ Rmap 7 || . . . ||_________ Rmap 2 |__________ Rmap 1 where x : 1 - The represented route map is selected 0 - The represented route map is not selected')
ipOspfMd5keyInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 12), )
if mibBuilder.loadTexts: ipOspfMd5keyInfoTable.setStatus('current')
if mibBuilder.loadTexts: ipOspfMd5keyInfoTable.setDescription('The table of OSPF MD5 keys Information.')
ipOspfMd5keyInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 12, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ipOspfMd5keyInfoIndex"))
if mibBuilder.loadTexts: ipOspfMd5keyInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ipOspfMd5keyInfoEntry.setDescription('Information about an OSPF MD keys table.')
ipOspfMd5keyInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 12, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfMd5keyInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ipOspfMd5keyInfoIndex.setDescription('The OSPF MD5 Key number for which the OSPF MdKey table is related.')
ipOspfMd5keyInfoKey = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 8, 11, 12, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipOspfMd5keyInfoKey.setStatus('current')
if mibBuilder.loadTexts: ipOspfMd5keyInfoKey.setDescription('The character string representing the MD5 Key.')
vrrpInfoVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 3, 1), )
if mibBuilder.loadTexts: vrrpInfoVirtRtrTable.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrTable.setDescription('The table of VRRP virtual router run-time information.')
vrrpInfoVirtRtrTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 3, 1, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "vrrpInfoVirtRtrIndex"))
if mibBuilder.loadTexts: vrrpInfoVirtRtrTableEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrTableEntry.setDescription('The run-time information about a VRRP virtual router.')
vrrpInfoVirtRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrIndex.setDescription('The VRRP virtual router index.')
vrrpInfoVirtRtrConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrConfig.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrConfig.setDescription('The status of the VRRP virtual router.')
vrrpInfoVirtRtrID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrID.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrID.setDescription('The VRRP virtual router identifier.')
vrrpInfoVirtRtrAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 3, 1, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrAddr.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrAddr.setDescription('The VRRP virtual router IP address.')
vrrpInfoVirtRtrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 3, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrIfIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrIfIndex.setDescription('The IfIndex that the VRRP virtual router is representing.')
vrrpInfoVirtRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrPriority.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrPriority.setDescription('The priority value to be used by the specified VRRP virtual routers.')
vrrpInfoVirtRtrState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("init", 1), ("master", 2), ("backup", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrState.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrState.setDescription('The VRRP virtual router state.')
vrrpInfoVirtRtrOwnership = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("owner", 1), ("renter", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrOwnership.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrOwnership.setDescription('The VRRP virtual router ownership status.')
vrrpInfoVirtRtrServer = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrServer.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrServer.setDescription('The VRRP server state identifies virtual routers that support Layer 4 services.')
vrrpInfoVirtRtrProxy = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 3, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpInfoVirtRtrProxy.setStatus('current')
if mibBuilder.loadTexts: vrrpInfoVirtRtrProxy.setDescription('The VRRP proxy state identifies virtual proxy routers.')
ospfGeneralInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1))
ospfVersion = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ospfVersion1", 1), ("ospfVersion2", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVersion.setStatus('current')
if mibBuilder.loadTexts: ospfVersion.setDescription('OSPF version.')
ospfRouterID = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfRouterID.setStatus('current')
if mibBuilder.loadTexts: ospfRouterID.setDescription('The router ID of the switch.')
ospfStartTime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfStartTime.setStatus('current')
if mibBuilder.loadTexts: ospfStartTime.setDescription('The time when ospf has been started.')
ospfProcessUptime = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfProcessUptime.setStatus('current')
if mibBuilder.loadTexts: ospfProcessUptime.setDescription('The time since ospf has been started.')
ospfLsTypesSupported = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfLsTypesSupported.setStatus('current')
if mibBuilder.loadTexts: ospfLsTypesSupported.setDescription('The Link State Types that are supported.')
ospfAreaBorderRouter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaBorderRouter.setStatus('current')
if mibBuilder.loadTexts: ospfAreaBorderRouter.setDescription('Area Border Router Role.')
ospfAreaBoundaryRouter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaBoundaryRouter.setStatus('current')
if mibBuilder.loadTexts: ospfAreaBoundaryRouter.setDescription('Area Boundary Router Role.')
ospfExternalLsa = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfExternalLsa.setStatus('current')
if mibBuilder.loadTexts: ospfExternalLsa.setDescription('The number of external LSAs.')
ospfIntfCountForRouter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIntfCountForRouter.setStatus('current')
if mibBuilder.loadTexts: ospfIntfCountForRouter.setDescription('The number of interfaces for this router.')
ospfVlinkCountForRouter = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfVlinkCountForRouter.setStatus('current')
if mibBuilder.loadTexts: ospfVlinkCountForRouter.setDescription('The number of virtual links for this router.')
ospfNewLsaReceived = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNewLsaReceived.setStatus('current')
if mibBuilder.loadTexts: ospfNewLsaReceived.setDescription('The number of new LSAs reveived.')
ospfTotalLsaOriginated = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalLsaOriginated.setStatus('current')
if mibBuilder.loadTexts: ospfTotalLsaOriginated.setDescription('The number of LSAs originated.')
ospfTotalNumberOfLsdbEntries = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNumberOfLsdbEntries.setStatus('current')
if mibBuilder.loadTexts: ospfTotalNumberOfLsdbEntries.setDescription('Total number of entries in the Link State Database.')
ospfTotalNeighbours = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNeighbours.setStatus('current')
if mibBuilder.loadTexts: ospfTotalNeighbours.setDescription('The total number of OSPF neighbours.')
ospfNbrInInitState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInInitState.setStatus('current')
if mibBuilder.loadTexts: ospfNbrInInitState.setDescription('The number of neighbours in the initial state of exchange.')
ospfNbrInExchState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInExchState.setStatus('current')
if mibBuilder.loadTexts: ospfNbrInExchState.setDescription('The number of neighbours in the exchange state.')
ospfNbrInFullState = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNbrInFullState.setStatus('current')
if mibBuilder.loadTexts: ospfNbrInFullState.setDescription('The number of neighbours in the Full state of exchange.')
ospfTotalAreas = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalAreas.setStatus('current')
if mibBuilder.loadTexts: ospfTotalAreas.setDescription('The Total number of areas.')
ospfTotalTransitAreas = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalTransitAreas.setStatus('current')
if mibBuilder.loadTexts: ospfTotalTransitAreas.setDescription('The Total number of Transit areas.')
ospfTotalNssaAreas = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNssaAreas.setStatus('current')
if mibBuilder.loadTexts: ospfTotalNssaAreas.setDescription('The Total number of NSSA areas.')
ospfAreaInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 2), )
if mibBuilder.loadTexts: ospfAreaInfoTable.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoTable.setDescription('The table of OSPF Area information.')
ospfAreaInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 2, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfAreaInfoIndex"))
if mibBuilder.loadTexts: ospfAreaInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoEntry.setDescription('Information about a OSPF area.')
ospfAreaInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoIndex.setDescription('The OSPF area number for which the OSPF info table is related.')
ospfAreaInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 2, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoId.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoId.setDescription('The IP address of the OSPF area.')
ospfAreaInfoStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disabled", 0), ("enabled", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoStatus.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoStatus.setDescription('Area Status: disabled(0), enabled(1).')
ospfTotalNumberOfInterfaces = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfTotalNumberOfInterfaces.setStatus('current')
if mibBuilder.loadTexts: ospfTotalNumberOfInterfaces.setDescription('The total number of interfaces for this OSPF area.')
ospfNumberOfInterfacesUp = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNumberOfInterfacesUp.setStatus('current')
if mibBuilder.loadTexts: ospfNumberOfInterfacesUp.setDescription('The number of interfaces UP in area.')
ospfAreaInfoAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("password", 2), ("md5", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoAuthType.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoAuthType.setDescription('Type of authentication being used: none(1) - no authentication password(2) - use password md5(3) - use MD5 authentication.')
ospfAreaInfoSPF = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoSPF.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoSPF.setDescription('The number of times SPF ran.')
ospfNumberOfLsdbEntries = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfNumberOfLsdbEntries.setStatus('current')
if mibBuilder.loadTexts: ospfNumberOfLsdbEntries.setDescription('The number of Link State Database entries for this OSPF area.')
ospfAreaInfoAreaBorderRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoAreaBorderRouter.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoAreaBorderRouter.setDescription('The Area Border Router count.')
ospfAreaInfoASBoundaryRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoASBoundaryRouter.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoASBoundaryRouter.setDescription('The AS Boundary Router count.')
ospfAreaInfoTotalNeighbours = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 2, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfAreaInfoTotalNeighbours.setStatus('current')
if mibBuilder.loadTexts: ospfAreaInfoTotalNeighbours.setDescription('The total number of OSPF neighbors.')
ospfIntfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3), )
if mibBuilder.loadTexts: ospfIntfInfoTable.setStatus('current')
if mibBuilder.loadTexts: ospfIntfInfoTable.setDescription('The table of OSPF Interface information.')
ospfIntfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfIfInfoIndex"))
if mibBuilder.loadTexts: ospfIntfInfoEntry.setStatus('current')
if mibBuilder.loadTexts: ospfIntfInfoEntry.setDescription('Information about a OSPF interface.')
ospfIfInfoIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoIndex.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoIndex.setDescription('The OSPF interface number for which the OSPF info table is related.')
ospfIfInfoIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoIpAddress.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoIpAddress.setDescription('The IP address of the OSPF interface.')
ospfIfInfoArea = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoArea.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoArea.setDescription('The index of the area that the interface belongs.')
ospfIfInfoAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoAdminStatus.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoAdminStatus.setDescription('Admin Status of the interface: down(0), up(1).')
ospfIfInfoRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoRouterID.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoRouterID.setDescription('The router ID of the switch.')
ospfIfInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("down", 0), ("loopback", 1), ("waiting", 2), ("ptop", 3), ("dr", 4), ("backupdr", 5), ("drother", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoState.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoState.setDescription('The state of the interface: Down(0), Loopback(1), Waiting(2), P to P(3), DR(4), BackuDR(5), DR Other(6).')
ospfIfInfoPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoPriority.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoPriority.setDescription('Interface router priority')
ospfIfInfoDesignatedRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoDesignatedRouterID.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoDesignatedRouterID.setDescription('The OSPF Designated Router ID for this OSPF interface.')
ospfIfInfoDesignatedRouterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoDesignatedRouterIpAddress.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoDesignatedRouterIpAddress.setDescription('The OSPF Designated Router IP Address for this OSPF interface.')
ospfIfInfoBackupDesignatedRouterID = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoBackupDesignatedRouterID.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoBackupDesignatedRouterID.setDescription('The OSPF Backup Designated Router ID for this OSPF interface.')
ospfIfInfoBackupDesignatedRouterIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 11), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoBackupDesignatedRouterIpAddress.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoBackupDesignatedRouterIpAddress.setDescription('The OSPF Backup Designated Router Ip Address for this OSPF interface.')
ospfIfInfoHello = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoHello.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoHello.setDescription('The hello timer for this OSPF interface.')
ospfIfInfoDead = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoDead.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoDead.setDescription('The dead timer for this OSPF interface.')
ospfIfInfoWait = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoWait.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoWait.setDescription('The OSPF Wait interval for this OSPF interface.')
ospfIfInfoRetransmit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoRetransmit.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoRetransmit.setDescription('The retransmit interval for this OSPF interface.')
ospfIfInfoTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoTransitDelay.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoTransitDelay.setDescription('The transit delay for this OSPF interface.')
ospfIfInfoTotalNeighbours = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoTotalNeighbours.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoTotalNeighbours.setDescription('The total number of neighbours for this OSPF interface.')
ospfIfInfoEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoEvents.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoEvents.setDescription('The total number of events for this OSPF interface.')
ospfIfInfoAuthType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("password", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfInfoAuthType.setStatus('current')
if mibBuilder.loadTexts: ospfIfInfoAuthType.setDescription('Type of authentication being used: none(1) - no authentication, password(2) - use password')
ospfIfNbrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 5), )
if mibBuilder.loadTexts: ospfIfNbrTable.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrTable.setDescription('The table of OSPF Interface Neighbor information.')
ospfIfNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 5, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "ospfIfNbrIntfIndex"), (0, "BLADETYPE2-NETWORK-MIB", "ospfIfNbrIpAddr"))
if mibBuilder.loadTexts: ospfIfNbrEntry.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrEntry.setDescription('Information about a OSPF interface, neighbor pair.')
ospfIfNbrIntfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrIntfIndex.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrIntfIndex.setDescription('The OSPF Interface number for which this Interface/Nbr table is related.')
ospfIfNbrIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 5, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrIpAddr.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrIpAddr.setDescription('The OSPF Neighbor ID .')
ospfIfNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 5, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrPriority.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrPriority.setDescription('The priority of the OSPF neighbor.')
ospfIfNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoway", 4), ("exStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrState.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrState.setDescription('The state of the OSPF neighbor.')
ospfIfNbrDesignatedRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 5, 1, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrDesignatedRtr.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrDesignatedRtr.setDescription('The IP Address of the Designated Router for this OSPF Neighbor.')
ospfIfNbrBackupDesignatedRtr = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 5, 1, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrBackupDesignatedRtr.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrBackupDesignatedRtr.setDescription('The IP Address of the backup designated Router for this OSPF Neighbor.')
ospfIfNbrIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 3, 4, 5, 1, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ospfIfNbrIpAddress.setStatus('current')
if mibBuilder.loadTexts: ospfIfNbrIpAddress.setDescription('The IP Address of the OSPF Neighbor.')
vrrpOperVirtRtrTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 4, 1, 1), )
if mibBuilder.loadTexts: vrrpOperVirtRtrTable.setStatus('current')
if mibBuilder.loadTexts: vrrpOperVirtRtrTable.setDescription('An entry in the table of virtual routers.')
vrrpOperVirtRtrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 4, 1, 1, 1), ).setIndexNames((0, "BLADETYPE2-NETWORK-MIB", "vrrpOperVirtRtrIndex"))
if mibBuilder.loadTexts: vrrpOperVirtRtrEntry.setStatus('current')
if mibBuilder.loadTexts: vrrpOperVirtRtrEntry.setDescription('A row in the vrrpOperVirtRtrTable ')
vrrpOperVirtRtrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vrrpOperVirtRtrIndex.setStatus('current')
if mibBuilder.loadTexts: vrrpOperVirtRtrIndex.setDescription('The index for the VRRP virtual router.')
vrrpOperVirtRtrBackup = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 4, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpOperVirtRtrBackup.setStatus('current')
if mibBuilder.loadTexts: vrrpOperVirtRtrBackup.setDescription("When set to a value of 'backup(2)' it forces the specified master virtual router into backup mode. 'ok(1)' is returned when the object os read.")
vrrpOperVirtRtrGroupBackup = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 33, 1, 2, 3, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("backup", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vrrpOperVirtRtrGroupBackup.setStatus('current')
if mibBuilder.loadTexts: vrrpOperVirtRtrGroupBackup.setDescription("When set to a value of 'backup(2)' it forces the specified master virtual router group into backup mode. 'ok(1)' is returned when the object os read.")
mibBuilder.exportSymbols("BLADETYPE2-NETWORK-MIB", vrrpNewCfgVirtRtrPriority=vrrpNewCfgVirtRtrPriority, vrrpNewCfgIfTableEntry=vrrpNewCfgIfTableEntry, ipNewCfgRmapIndex=ipNewCfgRmapIndex, ospfNewCfgHostAreaIndex=ospfNewCfgHostAreaIndex, vrrpCurCfgIfIndx=vrrpCurCfgIfIndx, vrrpOperVirtRtrIndex=vrrpOperVirtRtrIndex, ipNewCfgBootpState=ipNewCfgBootpState, vrrpCurCfgVirtRtrGrpTckVirtRtr=vrrpCurCfgVirtRtrGrpTckVirtRtr, ripNewCfgIntfListen=ripNewCfgIntfListen, ripNewCfgOspfAddOutRmap=ripNewCfgOspfAddOutRmap, vrrpNewCfgIfAuthType=vrrpNewCfgIfAuthType, ipNewCfgAspathAS=ipNewCfgAspathAS, ospfIntfNbrDown=ospfIntfNbrDown, ripInfoIntfAddress=ripInfoIntfAddress, ipOspfAreaInfoMetric=ipOspfAreaInfoMetric, igmpStaticMrtrNewCfgTable=igmpStaticMrtrNewCfgTable, vrrpNewCfgVirtRtrAddr=vrrpNewCfgVirtRtrAddr, ospfNewCfgIntfArea=ospfNewCfgIntfArea, igmpSnoopCurCfgSrcIp=igmpSnoopCurCfgSrcIp, vrrpNewCfgVirtRtrGrpIfIndex=vrrpNewCfgVirtRtrGrpIfIndex, ipNewCfgNwfMask=ipNewCfgNwfMask, vrrpIfTableMaxSize=vrrpIfTableMaxSize, vrrpNewCfgVirtRtrGrpInterval=vrrpNewCfgVirtRtrGrpInterval, vrrpNewCfgVirtRtrDelete=vrrpNewCfgVirtRtrDelete, arpInfoEntry=arpInfoEntry, ospfAreaInfoStatus=ospfAreaInfoStatus, ospfNewCfgAreaDelete=ospfNewCfgAreaDelete, ripNewCfgIntfState=ripNewCfgIntfState, ospfIfInfoTotalNeighbours=ospfIfInfoTotalNeighbours, gatewayInfoAddr=gatewayInfoAddr, vrrpInfoVirtRtrTableEntry=vrrpInfoVirtRtrTableEntry, ospfIntfNbrIndex=ospfIntfNbrIndex, routeStats=routeStats, ospfNewCfgVirtIntfAuthKey=ospfNewCfgVirtIntfAuthKey, ipInfoFwdState=ipInfoFwdState, ospfGeneralInfo=ospfGeneralInfo, ipNewCfgRmapTable=ipNewCfgRmapTable, ripCurCfgUpdatePeriod=ripCurCfgUpdatePeriod, vrrpCurCfgVirtRtrGrpInterval=vrrpCurCfgVirtRtrGrpInterval, ipFwdNewCfgState=ipFwdNewCfgState, ospfGeneralStats=ospfGeneralStats, ospfCurCfgIntfCost=ospfCurCfgIntfCost, ospfIntfNbrBadSequence=ospfIntfNbrBadSequence, vrrpNewCfgVirtRtrGrpTckHsrv=vrrpNewCfgVirtRtrGrpTckHsrv, ospfAreaErrHelloMismatch=ospfAreaErrHelloMismatch, ospfIntfNbrStart=ospfIntfNbrStart, ripCurCfgStaticMetric=ripCurCfgStaticMetric, igmpMrtrInfoVersion=igmpMrtrInfoVersion, ospfAreaRxlsAcks=ospfAreaRxlsAcks, ipCurCfgAlistRmapIndex=ipCurCfgAlistRmapIndex, dnsNewCfgSecondaryIpAddr=dnsNewCfgSecondaryIpAddr, ospfAreaErrNetmaskMismatch=ospfAreaErrNetmaskMismatch, ipNewCfgBootpAddr=ipNewCfgBootpAddr, ospfAreaErrDeadMismatch=ospfAreaErrDeadMismatch, intfInfoBcastAddr=intfInfoBcastAddr, vrrpOperVirtRtrTable=vrrpOperVirtRtrTable, ipCurCfgBootpState=ipCurCfgBootpState, vrrpCurCfgGenState=vrrpCurCfgGenState, ipInfoRmapPrec=ipInfoRmapPrec, igmpMrtrInfoVlanId=igmpMrtrInfoVlanId, ipCurCfgIntfTable=ipCurCfgIntfTable, ospfIntfInfoTable=ospfIntfInfoTable, ospfCumIntfHello=ospfCumIntfHello, ripRedistributeStatic=ripRedistributeStatic, ipOspfIntfInfoId=ipOspfIntfInfoId, ipGatewayTableMax=ipGatewayTableMax, vrrpNewCfgVirtRtrGrpTableEntry=vrrpNewCfgVirtRtrGrpTableEntry, ospfNewCfgRangeAreaIndex=ospfNewCfgRangeAreaIndex, ripCurCfgDefListen=ripCurCfgDefListen, ripNewCfgEospfAddOutRmap=ripNewCfgEospfAddOutRmap, igmpFltNewCfgState=igmpFltNewCfgState, ripNewCfgUpdatePeriod=ripNewCfgUpdatePeriod, dnsCurCfgPrimaryIpAddr=dnsCurCfgPrimaryIpAddr, ospfCumRxTxStats=ospfCumRxTxStats, vrrpCurCfgVirtRtrID=vrrpCurCfgVirtRtrID, ospfRedistributeFixed=ospfRedistributeFixed, ipOspfHostInfoCost=ipOspfHostInfoCost, ipForwardCfg=ipForwardCfg, ipCurCfgGwEntry=ipCurCfgGwEntry, vrrpNewCfgVirtRtrIndx=vrrpNewCfgVirtRtrIndx, ospfCumRxPkts=ospfCumRxPkts, ipCurCfgStaticArpIp=ipCurCfgStaticArpIp, ipOspfRedistributeFixedInfoOutRmapList=ipOspfRedistributeFixedInfoOutRmapList, ospfIfInfoBackupDesignatedRouterIpAddress=ospfIfInfoBackupDesignatedRouterIpAddress, ipCurCfgGwInterval=ipCurCfgGwInterval, ospfNewCfgHostIndex=ospfNewCfgHostIndex, ipCurCfgStaticArpTable=ipCurCfgStaticArpTable, ipOspfInfoDefaultRouteMetricType=ipOspfInfoDefaultRouteMetricType, ipOspfHostInfoIndex=ipOspfHostInfoIndex, maxL3TableSize=maxL3TableSize, clearStats=clearStats, ospfNewCfgAreaMetric=ospfNewCfgAreaMetric, ripStatInResponsePkts=ripStatInResponsePkts, ospfArea=ospfArea, ospfRouteRedistribution=ospfRouteRedistribution, ipNewCfgGwRetry=ipNewCfgGwRetry, vrrpCurCfgVirtRtrGrpTckHsrv=vrrpCurCfgVirtRtrGrpTckHsrv, ospfCumRxDatabase=ospfCumRxDatabase, gatewayInfoIndex=gatewayInfoIndex, geal3Stats=geal3Stats, ipCurCfgRmapLp=ipCurCfgRmapLp, vrrpNewCfgGenHotstandby=vrrpNewCfgGenHotstandby, ipOspfRedistributeStaticInfoMetric=ipOspfRedistributeStaticInfoMetric, dnsCfg=dnsCfg, vrrpNewCfgGenState=vrrpNewCfgGenState, ripStatRoutesAgedOut=ripStatRoutesAgedOut, rxIgmpValidPkts=rxIgmpValidPkts, vrrpInfoVirtRtrOwnership=vrrpInfoVirtRtrOwnership, ipStaticRouteTableMaxSize=ipStaticRouteTableMaxSize, arpInfoTable=arpInfoTable, rip2GeneralInfo=rip2GeneralInfo, ospfCurCfgAreaEntry=ospfCurCfgAreaEntry, ipNewCfgNwfState=ipNewCfgNwfState, igmpFltNewCfgPortIndx=igmpFltNewCfgPortIndx, ripInfoUpdatePeriod=ripInfoUpdatePeriod, arpInfoVLAN=arpInfoVLAN, vrrpNewCfgVirtRtrPreempt=vrrpNewCfgVirtRtrPreempt, ospfNewCfgMdkeyTable=ospfNewCfgMdkeyTable, ospfNewCfgVirtIntfTrans=ospfNewCfgVirtIntfTrans, ipNewCfgNwfTable=ipNewCfgNwfTable, vrrpInfoVirtRtrConfig=vrrpInfoVirtRtrConfig, ipInfoBootpRelayAddr=ipInfoBootpRelayAddr, routeStatEntries=routeStatEntries, ipRouteInfoType=ipRouteInfoType, ospfAreaErrUnknownNbr=ospfAreaErrUnknownNbr, ospfIfInfoEvents=ospfIfInfoEvents, ospfCurCfgIntfTable=ospfCurCfgIntfTable, ospfCumIntfNbrChange=ospfCumIntfNbrChange, ospfAreaNbrChangeStats=ospfAreaNbrChangeStats, ospfNewCfgMdkeyDelete=ospfNewCfgMdkeyDelete, ospfTotalNumberOfInterfaces=ospfTotalNumberOfInterfaces, ipCurCfgStaticRouteEntry=ipCurCfgStaticRouteEntry, vrrpCurCfgGenTckIpIntfInc=vrrpCurCfgGenTckIpIntfInc, igmpSnoopCurCfgVlanFastlvBmap=igmpSnoopCurCfgVlanFastlvBmap, ripStatInBadVersion=ripStatInBadVersion, ospfIntfRxlsAcks=ospfIntfRxlsAcks, routeTableClear=routeTableClear, ripNewCfgIntfIndex=ripNewCfgIntfIndex, ipCurCfgAlistMetric=ipCurCfgAlistMetric, igmpFltCurCfgMcastIp2=igmpFltCurCfgMcastIp2, ospfIntfErrDeadMismatch=ospfIntfErrDeadMismatch, ipOspfInfoRouterID=ipOspfInfoRouterID, ipNewCfgNwfAddr=ipNewCfgNwfAddr, ospfAreaNbrN2way=ospfAreaNbrN2way, ipNewCfgGwEntry=ipNewCfgGwEntry, ipCurCfgStaticRouteGateway=ipCurCfgStaticRouteGateway, ospfIntfUnloop=ospfIntfUnloop, ospfIfNbrIpAddr=ospfIfNbrIpAddr, ripNewCfgFixedAddOutRmap=ripNewCfgFixedAddOutRmap, ospfTotalLsaOriginated=ospfTotalLsaOriginated, igmpSnoopNewCfgVlanFastlvAdd=igmpSnoopNewCfgVlanFastlvAdd, ospfAreaNbrhello=ospfAreaNbrhello, ripInfoIntfMetric=ripInfoIntfMetric, rip2Cfg=rip2Cfg, ospfIntfNbrhello=ospfIntfNbrhello, ospfLsTypesSupported=ospfLsTypesSupported, ospfIfInfoDead=ospfIfInfoDead, ipNewCfgRmapPrec=ipNewCfgRmapPrec, vrrpStatBadAddress=vrrpStatBadAddress, ripStatOutResponsePkts=ripStatOutResponsePkts, ipNewCfgGwAddr=ipNewCfgGwAddr, ripStatInSelfRcvPkts=ripStatInSelfRcvPkts, ospfIntfTxDatabase=ospfIntfTxDatabase, ipOspfRedistributeFixedInfoMetric=ipOspfRedistributeFixedInfoMetric, ipNewCfgAspathEntry=ipNewCfgAspathEntry, ospfNewCfgIntfIndex=ospfNewCfgIntfIndex, ospfCurCfgIntfStatus=ospfCurCfgIntfStatus, igmpFltNewCfgPortTable=igmpFltNewCfgPortTable, intfInfoStatus=intfInfoStatus, vrrpCurCfgVirtRtrInterval=vrrpCurCfgVirtRtrInterval, ospfCumIntfChangeStats=ospfCumIntfChangeStats, ipStaticArpTableMaxSize=ipStaticArpTableMaxSize, ipOspfIntfInfoTable=ipOspfIntfInfoTable, vrrpCurCfgGenHotstandby=vrrpCurCfgGenHotstandby, ripStatInRequestPkts=ripStatInRequestPkts, maxLpmTableSize=maxLpmTableSize, ipOspfHostInfoTable=ipOspfHostInfoTable, ipCurCfgIntfBootpRelay=ipCurCfgIntfBootpRelay, igmpFltCurCfgMcastIp1=igmpFltCurCfgMcastIp1, ripInfoIntfVersion=ripInfoIntfVersion, vrrpCurCfgVirtRtrPreempt=vrrpCurCfgVirtRtrPreempt, ospfNewCfgIntfTrans=ospfNewCfgIntfTrans, ripNewCfgIntfTable=ripNewCfgIntfTable, ospfIfInfoState=ospfIfInfoState, ripNewCfgIntfDefault=ripNewCfgIntfDefault, vrrpNewCfgVirtRtrGrpPreempt=vrrpNewCfgVirtRtrGrpPreempt, ipOspfVirtIntfInfoAuthKey=ipOspfVirtIntfInfoAuthKey, ipInterfaceCfg=ipInterfaceCfg, igmpSnoopStatsEntry=igmpSnoopStatsEntry, vrrpNewCfgVirtRtrGrpTckHsrp=vrrpNewCfgVirtRtrGrpTckHsrp, ospfIntfIndex=ospfIntfIndex, ospfCumIntfWaitTimer=ospfCumIntfWaitTimer, ospfIntfRxPkts=ospfIntfRxPkts, txIgmpGrpSpecificQueries=txIgmpGrpSpecificQueries, ospfAreaNbrAdjointOk=ospfAreaNbrAdjointOk, vrrpNewCfgVirtRtrGrpSharing=vrrpNewCfgVirtRtrGrpSharing, ospfNewCfgStaticOutRmapList=ospfNewCfgStaticOutRmapList, igmpFltCurCfgState=igmpFltCurCfgState, ripStatOutRequestPkts=ripStatOutRequestPkts, noL3EntriesUsed=noL3EntriesUsed, ospfNewCfgFixedRemoveOutRmap=ospfNewCfgFixedRemoveOutRmap, ipCurCfgAlistNwf=ipCurCfgAlistNwf, ipInfoBootpRelayAddr2=ipInfoBootpRelayAddr2, vrrpCurCfgVirtRtrTckVlanPort=vrrpCurCfgVirtRtrTckVlanPort, ipOspfIntfInfoPrio=ipOspfIntfInfoPrio, igmpFltNewCfgAction=igmpFltNewCfgAction, ospfCurCfgVirtIntfEntry=ospfCurCfgVirtIntfEntry, igmpSnoopCurCfgTimeout=igmpSnoopCurCfgTimeout, ospfNewCfgVirtIntfEntry=ospfNewCfgVirtIntfEntry, ipNewCfgGwDelete=ipNewCfgGwDelete, ripStatInPkts=ripStatInPkts, ipOspfVirtIntfInfoEntry=ipOspfVirtIntfInfoEntry, ospfAreaTxlsAcks=ospfAreaTxlsAcks, rxIgmpReports=rxIgmpReports, ripNewCfgIntfAuth=ripNewCfgIntfAuth, ripInfoIntfPoisonReverse=ripInfoIntfPoisonReverse, ospfAreaErrOptionsMismatch=ospfAreaErrOptionsMismatch, arpStatMaxEntries=arpStatMaxEntries, ospfCurCfgHostAreaIndex=ospfCurCfgHostAreaIndex, ipFwdNewCfgDirectedBcast=ipFwdNewCfgDirectedBcast, ospfCumNbrBadRequests=ospfCumNbrBadRequests, igmpFltNewCfgIndx=igmpFltNewCfgIndx, igmpFltCurCfgEnaDis=igmpFltCurCfgEnaDis, ospfAreaTxPkts=ospfAreaTxPkts, ipCurCfgAspathTable=ipCurCfgAspathTable, ospfAreaIntfHello=ospfAreaIntfHello, vrrpCurCfgGenTckRServerInc=vrrpCurCfgGenTckRServerInc, vrrpStatBadInterval=vrrpStatBadInterval, ospfIntfTxPkts=ospfIntfTxPkts, vrrpNewCfgVirtRtrTckVirtRtr=vrrpNewCfgVirtRtrTckVirtRtr, ipOspfMd5keyInfoIndex=ipOspfMd5keyInfoIndex, ospfCurCfgIntfDead=ospfCurCfgIntfDead, ripCurCfgSplitHorizon=ripCurCfgSplitHorizon, igmpSnoopCfgGen=igmpSnoopCfgGen, arpCurCfgReARPPeriod=arpCurCfgReARPPeriod, ospfCurCfgHostIpAddr=ospfCurCfgHostIpAddr, ospfCurCfgRangeTable=ospfCurCfgRangeTable, ospfIntfNbrExchangeDone=ospfIntfNbrExchangeDone, igmpStaticMrtrNewCfgVersion=igmpStaticMrtrNewCfgVersion, ospfCurCfgVirtIntfTrans=ospfCurCfgVirtIntfTrans, ospfAreaNbrBadSequence=ospfAreaNbrBadSequence, ipOspfIntfInfoHello=ipOspfIntfInfoHello, ipOspfIntfInfoEntry=ipOspfIntfInfoEntry, ipOspfVirtIntfInfoDead=ipOspfVirtIntfInfoDead, ipCurCfgStaticArpMAC=ipCurCfgStaticArpMAC, ipOspfRangeInfoAddr=ipOspfRangeInfoAddr, vrrpOperVirtRtrBackup=vrrpOperVirtRtrBackup, vrrpCurCfgIfAuthType=vrrpCurCfgIfAuthType, ipRouteInfoGateway=ipRouteInfoGateway, ipOspfHostInfoState=ipOspfHostInfoState, ipOspfMd5keyInfoKey=ipOspfMd5keyInfoKey, ripCurCfgIntfTable=ripCurCfgIntfTable, ipRouteInfoMetric=ipRouteInfoMetric, ospfNewCfgRangeAddr=ospfNewCfgRangeAddr)
mibBuilder.exportSymbols("BLADETYPE2-NETWORK-MIB", ospfAreaChangeStatsEntry=ospfAreaChangeStatsEntry, ospfIfNbrEntry=ospfIfNbrEntry, rip2NewCfgUpdatePeriod=rip2NewCfgUpdatePeriod, igmpFltCurCfgPortFiltBmap=igmpFltCurCfgPortFiltBmap, igmpStaticMrtrNewCfgIndx=igmpStaticMrtrNewCfgIndx, ipNewCfgGwTable=ipNewCfgGwTable, ipOspfIntfInfoCost=ipOspfIntfInfoCost, ospfNewCfgRipMetric=ospfNewCfgRipMetric, ipCurCfgGwRetry=ipCurCfgGwRetry, rxIgmpLeaves=rxIgmpLeaves, ospfRouterID=ospfRouterID, ipBootpCfg=ipBootpCfg, ospfCurCfgIntfMdkey=ospfCurCfgIntfMdkey, ipInfoRmapAp=ipInfoRmapAp, ospfCumNbrN2way=ospfCumNbrN2way, ospfAreaIntfWaitTimer=ospfAreaIntfWaitTimer, layer3Configs=layer3Configs, ipNewCfgAspathTable=ipNewCfgAspathTable, ipRouteInfoIndx=ipRouteInfoIndx, ripCurCfgIntfMetric=ripCurCfgIntfMetric, vrrpCurCfgVirtRtrTableEntry=vrrpCurCfgVirtRtrTableEntry, arpInfoRefPorts=arpInfoRefPorts, ipOspfHostInfoAreaIndex=ipOspfHostInfoAreaIndex, dnsNewCfgDomainName=dnsNewCfgDomainName, gatewayInfoStatus=gatewayInfoStatus, ipNewCfgGwState=ipNewCfgGwState, ospfNewCfgVirtIntfAreaId=ospfNewCfgVirtIntfAreaId, vrrpInfoVirtRtrTable=vrrpInfoVirtRtrTable, ospfCurCfgAreaType=ospfCurCfgAreaType, ospfTotalAreas=ospfTotalAreas, vrrpCurCfgVirtRtrTckL4Port=vrrpCurCfgVirtRtrTckL4Port, gatewayInfoTable=gatewayInfoTable, ipNewCfgStaticArpIp=ipNewCfgStaticArpIp, ospfAreaNbrNegotiationDone=ospfAreaNbrNegotiationDone, arpInfo=arpInfo, ipCurCfgStaticRouteTable=ipCurCfgStaticRouteTable, ipInfoBootpRelayState=ipInfoBootpRelayState, ipOspfRangeInfoAreaIndex=ipOspfRangeInfoAreaIndex, ipCurCfgNwfIndex=ipCurCfgNwfIndex, ospfAreaInfoAuthType=ospfAreaInfoAuthType, layer3Info=layer3Info, ospfNewCfgIntfDelete=ospfNewCfgIntfDelete, ospfRedistributeStatic=ospfRedistributeStatic, ospfIntfNbrBadRequests=ospfIntfNbrBadRequests, vrrpInfoVirtRtrID=vrrpInfoVirtRtrID, igmpMrtrInfoMrt=igmpMrtrInfoMrt, vrrpOperVirtRtrEntry=vrrpOperVirtRtrEntry, ipCurCfgAlistState=ipCurCfgAlistState, ripRedistributeOspf=ripRedistributeOspf, ospfCumNbrhello=ospfCumNbrhello, ipNewCfgGwInterval=ipNewCfgGwInterval, ipCurCfgGwTable=ipCurCfgGwTable, ipNewCfgRmapEntry=ipNewCfgRmapEntry, igmpSnoopCurCfgAggrEnaDis=igmpSnoopCurCfgAggrEnaDis, igmpFltNewCfgDelete=igmpFltNewCfgDelete, ipNewCfgIntfEntry=ipNewCfgIntfEntry, layer3Stats=layer3Stats, dnsNewCfgPrimaryIpAddr=dnsNewCfgPrimaryIpAddr, ospfIntfRxTxStats=ospfIntfRxTxStats, ospfNewCfgStaticAddOutRmap=ospfNewCfgStaticAddOutRmap, ipOspfRangeInfoEntry=ipOspfRangeInfoEntry, ipInfoRmapMetricType=ipInfoRmapMetricType, ospfIntfTxlsAcks=ospfIntfTxlsAcks, ripStatRouteTimeout=ripStatRouteTimeout, igmpStats=igmpStats, ipCurCfgStaticRouteInterface=ipCurCfgStaticRouteInterface, ospfIntfHello=ospfIntfHello, ospfAreaErrorStatsEntry=ospfAreaErrorStatsEntry, ospfIntfRxTxStatsEntry=ospfIntfRxTxStatsEntry, ospfVirtIntfTableMaxSize=ospfVirtIntfTableMaxSize, vrrpInfoVirtRtrAddr=vrrpInfoVirtRtrAddr, rxIgmpGrpSpecificQueries=rxIgmpGrpSpecificQueries, ripInfoState=ripInfoState, ipCurCfgNwfEntry=ipCurCfgNwfEntry, ipOspfIntfInfoStatus=ipOspfIntfInfoStatus, ipOspfVirtIntfInfoTable=ipOspfVirtIntfInfoTable, ospfNewCfgVirtIntfIndex=ospfNewCfgVirtIntfIndex, ospfNumberOfLsdbEntries=ospfNumberOfLsdbEntries, vrrpCurCfgIfPasswd=vrrpCurCfgIfPasswd, vrrpCurCfgVirtRtrGrpIndx=vrrpCurCfgVirtRtrGrpIndx, ripInfoIntfState=ripInfoIntfState, ospfCurCfgHostCost=ospfCurCfgHostCost, ospfCurCfgRangeMask=ospfCurCfgRangeMask, igmpStaticMrtrCurCfgTable=igmpStaticMrtrCurCfgTable, ripCurCfgIntfAuth=ripCurCfgIntfAuth, ipNewCfgIntfDelete=ipNewCfgIntfDelete, ospfNewCfgVirtIntfRetra=ospfNewCfgVirtIntfRetra, arpCfg=arpCfg, ospfAreaNbrN1way=ospfAreaNbrN1way, igmpSnoopNewCfgVlanRem=igmpSnoopNewCfgVlanRem, igmpFltNewCfgPortFiltBmap=igmpFltNewCfgPortFiltBmap, ipOspfInfoState=ipOspfInfoState, ripNewCfgEospfOutRmapList=ripNewCfgEospfOutRmapList, vrrpNewCfgIfTable=vrrpNewCfgIfTable, noLpmEntriesUsed=noLpmEntriesUsed, ospfCumTxHello=ospfCumTxHello, ospfAreaIntfUnloop=ospfAreaIntfUnloop, ripCurCfgPoisonReverse=ripCurCfgPoisonReverse, ospfNewCfgMdkeyIndex=ospfNewCfgMdkeyIndex, ipOspfMd5keyInfoTable=ipOspfMd5keyInfoTable, ipOspfVirtIntfInfoRetra=ipOspfVirtIntfInfoRetra, ipInfoRmapEntry=ipInfoRmapEntry, ripNewCfgFixedMetric=ripNewCfgFixedMetric, ripCurCfgStaticOutRmapList=ripCurCfgStaticOutRmapList, igmpStaticMrtrCurCfgVlanId=igmpStaticMrtrCurCfgVlanId, ipCurCfgNwfTable=ipCurCfgNwfTable, ipCurCfgStaticRouteDestIp=ipCurCfgStaticRouteDestIp, ifStatsTable=ifStatsTable, vrrpStatBadVrid=vrrpStatBadVrid, txIgmpLeaves=txIgmpLeaves, ospfCurCfgHostIndex=ospfCurCfgHostIndex, ospfIntfNbrRstAd=ospfIntfNbrRstAd, ripCurCfgIntfMcastUpdate=ripCurCfgIntfMcastUpdate, ipOspfAreaInfoEntry=ipOspfAreaInfoEntry, ripInfoIntfIndex=ripInfoIntfIndex, ospfNewCfgStaticMetric=ospfNewCfgStaticMetric, ospfIntfNbrChangeStatsEntry=ospfIntfNbrChangeStatsEntry, ipOspfIntfInfoIndex=ipOspfIntfInfoIndex, ospfIfNbrState=ospfIfNbrState, ipNewCfgIntfIndex=ipNewCfgIntfIndex, ospfAreaBoundaryRouter=ospfAreaBoundaryRouter, ripNewCfgIntfSupply=ripNewCfgIntfSupply, ipOspfInfoLsdbLimit=ipOspfInfoLsdbLimit, ripRedistributeFixed=ripRedistributeFixed, ipCurCfgAspathAS=ipCurCfgAspathAS, ospfCurCfgFixedOutRmapList=ospfCurCfgFixedOutRmapList, ospfCurCfgRangeIndex=ospfCurCfgRangeIndex, ospfTmrsKckOffDbage=ospfTmrsKckOffDbage, ipNewCfgAlistDelete=ipNewCfgAlistDelete, ospfVlinkCountForRouter=ospfVlinkCountForRouter, ospfCurCfgAreaId=ospfCurCfgAreaId, igmpSnoopCurCfgMrto=igmpSnoopCurCfgMrto, ipNewCfgAspathAction=ipNewCfgAspathAction, ospfNewCfgRangeState=ospfNewCfgRangeState, ospfCumIntfUnloop=ospfCumIntfUnloop, ipCurCfgStaticRouteMask=ipCurCfgStaticRouteMask, ospfIntfErrorStats=ospfIntfErrorStats, ipNewCfgStaticArpMAC=ipNewCfgStaticArpMAC, igmpSnoopCurCfgVlanBmap=igmpSnoopCurCfgVlanBmap, igmpMrtrInfoIndex=igmpMrtrInfoIndex, vrrpInfoVirtRtrServer=vrrpInfoVirtRtrServer, igmpStaticMrtrCfg=igmpStaticMrtrCfg, ipCurCfgIntfMask=ipCurCfgIntfMask, ripNewCfgStaticRemoveOutRmap=ripNewCfgStaticRemoveOutRmap, ospfNewCfgIntfId=ospfNewCfgIntfId, ospfNewCfgHostIpAddr=ospfNewCfgHostIpAddr, vrrpCurCfgVirtRtrTckVirtRtr=vrrpCurCfgVirtRtrTckVirtRtr, ipRouteInfoTable=ipRouteInfoTable, ipNewCfgStaticRouteInterface=ipNewCfgStaticRouteInterface, ipOspfIntfInfoArea=ipOspfIntfInfoArea, ipOspfRangeInfoMask=ipOspfRangeInfoMask, dnsCurCfgDomainName=dnsCurCfgDomainName, ipNewCfgRmapMetric=ipNewCfgRmapMetric, layer3=layer3, igmpFltCurCfgPortTable=igmpFltCurCfgPortTable, ripCurCfgIntfEntry=ripCurCfgIntfEntry, ripCurCfgIntfTrigUpdate=ripCurCfgIntfTrigUpdate, igmpFltNewCfgPortRemFiltRule=igmpFltNewCfgPortRemFiltRule, ospfCumIntfLoop=ospfCumIntfLoop, ospfIfInfoAuthType=ospfIfInfoAuthType, ipRoutingInfo=ipRoutingInfo, ospfNewCfgRipOutRmapList=ospfNewCfgRipOutRmapList, ifClearStats=ifClearStats, ipNewCfgStaticRouteMask=ipNewCfgStaticRouteMask, ospfIntfNbrN1way=ospfIntfNbrN1way, ripCurCfgIntfDefault=ripCurCfgIntfDefault, ospfCurCfgVirtIntfRetra=ospfCurCfgVirtIntfRetra, ospfIfInfoPriority=ospfIfInfoPriority, ripCurCfgFixedMetric=ripCurCfgFixedMetric, ipRouteInfoDestIp=ipRouteInfoDestIp, ospfIntfInfoEntry=ospfIntfInfoEntry, igmpSnoopVlanIndex=igmpSnoopVlanIndex, ipOspfAreaInfoId=ipOspfAreaInfoId, ipCurCfgDhcpOpt82State=ipCurCfgDhcpOpt82State, vrrpNewCfgVirtRtrGrpTckVirtRtr=vrrpNewCfgVirtRtrGrpTckVirtRtr, igmpSnoopNewCfgQInterval=igmpSnoopNewCfgQInterval, igmpClearAllStats=igmpClearAllStats, ripCurCfgEospfOutRmapList=ripCurCfgEospfOutRmapList, ipInfoNwfState=ipInfoNwfState, ospfNbrInExchState=ospfNbrInExchState, ripNewCfgIntfSplitHorizon=ripNewCfgIntfSplitHorizon, ospfCurCfgHostState=ospfCurCfgHostState, vrrpNewCfgVirtRtrTckRServer=vrrpNewCfgVirtRtrTckRServer, ipInfoNwfEntry=ipInfoNwfEntry, ipCurCfgIntfEntry=ipCurCfgIntfEntry, ipCurCfgRouterID=ipCurCfgRouterID, igmpMrtrInfoEntry=igmpMrtrInfoEntry, ipInfoRmapTable=ipInfoRmapTable, ipFwdCurCfgDirectedBcast=ipFwdCurCfgDirectedBcast, vrrpNewCfgGenTckVlanPortInc=vrrpNewCfgGenTckVlanPortInc, ipCurCfgRmapTable=ipCurCfgRmapTable, ospfNewCfgRangeMask=ospfNewCfgRangeMask, ripStatInBadZeros=ripStatInBadZeros, ipNewCfgAlistEntry=ipNewCfgAlistEntry, arpStatEntries=arpStatEntries, ipClearStats=ipClearStats, ospfAreaTxlsReqs=ospfAreaTxlsReqs, ipNewCfgRmapMetricType=ipNewCfgRmapMetricType, ospfNewLsaReceived=ospfNewLsaReceived, ospfAreaInfoASBoundaryRouter=ospfAreaInfoASBoundaryRouter, igmpSnoopNewCfgVlanFastlvRem=igmpSnoopNewCfgVlanFastlvRem, ifStatsEntry=ifStatsEntry, ospfNewCfgAreaId=ospfNewCfgAreaId, ospfCurCfgRipMetricType=ospfCurCfgRipMetricType, ospfCurCfgVirtIntfIndex=ospfCurCfgVirtIntfIndex, ipNewCfgIntfAddr=ipNewCfgIntfAddr, vrrpCurCfgVirtRtrAddr=vrrpCurCfgVirtRtrAddr, ipNewCfgAlistNwf=ipNewCfgAlistNwf, ospfCurCfgStaticOutRmapList=ospfCurCfgStaticOutRmapList, ospfIntfDown=ospfIntfDown, ospfIfInfoAdminStatus=ospfIfInfoAdminStatus, ospfAreaErrIndex=ospfAreaErrIndex, ospfIfInfoDesignatedRouterID=ospfIfInfoDesignatedRouterID, ipInfo=ipInfo, ospfNewCfgIntfStatus=ospfNewCfgIntfStatus, ospfCurCfgIntfId=ospfCurCfgIntfId, ipNewCfgAlistAction=ipNewCfgAlistAction, vrrpNewCfgVirtRtrInterval=vrrpNewCfgVirtRtrInterval, ipCurCfgBootpAddr=ipCurCfgBootpAddr, vrrpCurCfgVirtRtrGrpID=vrrpCurCfgVirtRtrGrpID, vrrpCurCfgVirtRtrGrpSharing=vrrpCurCfgVirtRtrGrpSharing, ospfGeneral=ospfGeneral, ospfIntfChangeStatsEntry=ospfIntfChangeStatsEntry, ipInfoNwfMask=ipInfoNwfMask, ospfAreaInfoIndex=ospfAreaInfoIndex, ipNewCfgStaticRouteAction=ipNewCfgStaticRouteAction, ipCurCfgIntfState=ipCurCfgIntfState, ospfNewCfgVirtIntfTable=ospfNewCfgVirtIntfTable, igmpSnoopCurCfgRobust=igmpSnoopCurCfgRobust, dnsStatOutDnsRequests=dnsStatOutDnsRequests, igmpSnoopNewCfgVlanBmap=igmpSnoopNewCfgVlanBmap, vrrpCurCfgGenTckHsrpInc=vrrpCurCfgGenTckHsrpInc, ospfIntfChangeStats=ospfIntfChangeStats, ospfStartTime=ospfStartTime, igmpStaticMrtrNewCfgDelete=igmpStaticMrtrNewCfgDelete, ospfNewCfgIntfRetra=ospfNewCfgIntfRetra, ospfCurCfgVirtIntfDead=ospfCurCfgVirtIntfDead, ospfNewCfgVirtIntfNbr=ospfNewCfgVirtIntfNbr, ipOspfVirtIntfInfoHello=ipOspfVirtIntfInfoHello, ospfIfInfoIpAddress=ospfIfInfoIpAddress, ospfCurCfgStaticMetric=ospfCurCfgStaticMetric, vrrpNewCfgVirtRtrTckL4Port=vrrpNewCfgVirtRtrTckL4Port, ospfNewCfgRangeDelete=ospfNewCfgRangeDelete, ospfVersion=ospfVersion, ospfAreaNbrRstAd=ospfAreaNbrRstAd, vrrpStatInAdvers=vrrpStatInAdvers, vrrpNewCfgVirtRtrGrpTckVlanPort=vrrpNewCfgVirtRtrGrpTckVlanPort, ipInfoRmapWeight=ipInfoRmapWeight, ipInfoRmapMetric=ipInfoRmapMetric, igmpNewCfgOnOff=igmpNewCfgOnOff, ospfAreaTableMaxSize=ospfAreaTableMaxSize, ospfCumNbrChangeStats=ospfCumNbrChangeStats, ipCurCfgNwfAddr=ipCurCfgNwfAddr, ipOspfRedistributeRipInfoMetric=ipOspfRedistributeRipInfoMetric)
mibBuilder.exportSymbols("BLADETYPE2-NETWORK-MIB", ospfIntfNbrAdjointOk=ospfIntfNbrAdjointOk, ospfCurCfgVirtIntfNbr=ospfCurCfgVirtIntfNbr, igmpSnoopNewCfgSrcIp=igmpSnoopNewCfgSrcIp, igmpStaticMrtrCurCfgTableEntry=igmpStaticMrtrCurCfgTableEntry, vrrpNewCfgVirtRtrGrpIndx=vrrpNewCfgVirtRtrGrpIndx, ospfCumNbrBadSequence=ospfCumNbrBadSequence, ripStatOutPackets=ripStatOutPackets, vrrpNewCfgVirtRtrGrpTable=vrrpNewCfgVirtRtrGrpTable, ospfAreaIntfBackup=ospfAreaIntfBackup, ipOspfRedistributeStaticInfoMetricType=ipOspfRedistributeStaticInfoMetricType, ospfCumIntfDown=ospfCumIntfDown, ripNewCfgListen=ripNewCfgListen, ripInfoIntfEntry=ripInfoIntfEntry, ipCurCfgStaticArpIndx=ipCurCfgStaticArpIndx, txIgmpReports=txIgmpReports, ipNewCfgIntfVlan=ipNewCfgIntfVlan, ipNewCfgRmapLp=ipNewCfgRmapLp, ospfCurCfgHostTable=ospfCurCfgHostTable, ospfNewCfgHostEntry=ospfNewCfgHostEntry, vrrpNewCfgGenTckHsrvInc=vrrpNewCfgGenTckHsrvInc, vrrpNewCfgVirtRtrGrpTckIpIntf=vrrpNewCfgVirtRtrGrpTckIpIntf, ospfNewCfgRangeTable=ospfNewCfgRangeTable, ospfAreaNbrIndex=ospfAreaNbrIndex, igmpFltNewCfgPortState=igmpFltNewCfgPortState, ripInfoIntfMcastUpdate=ripInfoIntfMcastUpdate, ospfCurCfgMdkeyIndex=ospfCurCfgMdkeyIndex, vrrpCurCfgVirtRtrGrpTableEntry=vrrpCurCfgVirtRtrGrpTableEntry, ripCurCfgOspfOutRmapList=ripCurCfgOspfOutRmapList, ipCurCfgIntfIndex=ipCurCfgIntfIndex, ipOspfIntfInfoMdkey=ipOspfIntfInfoMdkey, ospfInfo=ospfInfo, ospfAreaTxDatabase=ospfAreaTxDatabase, ospfIntfTxHello=ospfIntfTxHello, ospfIntfNbrChange=ospfIntfNbrChange, vrrpCurCfgVirtRtrPriority=vrrpCurCfgVirtRtrPriority, ospfNewCfgAreaIndex=ospfNewCfgAreaIndex, ipNewCfgAspathIndex=ipNewCfgAspathIndex, ipStaticRouteCfg=ipStaticRouteCfg, ipCurCfgRmapWeight=ipCurCfgRmapWeight, ipAspathTableMax=ipAspathTableMax, ipCurCfgGwState=ipCurCfgGwState, ipNewCfgAlistMetric=ipNewCfgAlistMetric, ripInfoIntfAuth=ripInfoIntfAuth, ripCurCfgEospfMetric=ripCurCfgEospfMetric, ospfNewCfgFixedOutRmapList=ospfNewCfgFixedOutRmapList, ipNewCfgStaticRouteDestIp=ipNewCfgStaticRouteDestIp, igmpSnoopNewCfgRobust=igmpSnoopNewCfgRobust, ipRmapTableMax=ipRmapTableMax, vrrpNewCfgVirtRtrGrpState=vrrpNewCfgVirtRtrGrpState, ospfNewCfgAreaAuthType=ospfNewCfgAreaAuthType, ipNewCfgNwfEntry=ipNewCfgNwfEntry, ospfCurCfgIntfIndex=ospfCurCfgIntfIndex, arpInfoDestIp=arpInfoDestIp, ospfCumNbrStart=ospfCumNbrStart, ripNewCfgStaticOutRmapList=ripNewCfgStaticOutRmapList, ipAlistTableMax=ipAlistTableMax, ospfAreaChangeStats=ospfAreaChangeStats, ipCurCfgRmapState=ipCurCfgRmapState, ipNewCfgAlistRmapIndex=ipNewCfgAlistRmapIndex, ospfNewCfgIntfCost=ospfNewCfgIntfCost, ospfIntfNbrLoadingDone=ospfIntfNbrLoadingDone, ospfAreaIntfNbrChange=ospfAreaIntfNbrChange, routeStatHighWater=routeStatHighWater, vrrpVirtRtrGrpTableMaxSize=vrrpVirtRtrGrpTableMaxSize, igmpFltNewCfgMcastIp2=igmpFltNewCfgMcastIp2, ospfIntfErrorStatsEntry=ospfIntfErrorStatsEntry, ipCurCfgGwIndex=ipCurCfgGwIndex, igmpInfoIndex=igmpInfoIndex, vrrpOper=vrrpOper, vrrpInfoVirtRtrState=vrrpInfoVirtRtrState, ospfNewCfgMdkeyKey=ospfNewCfgMdkeyKey, ospfCumNbrExchangeDone=ospfCumNbrExchangeDone, ifStatsIndex=ifStatsIndex, ospfNewCfgAreaEntry=ospfNewCfgAreaEntry, igmpStaticMrtrNewCfgVlanId=igmpStaticMrtrNewCfgVlanId, ospfCumNbrAdjointOk=ospfCumNbrAdjointOk, ospfNewCfgHostDelete=ospfNewCfgHostDelete, ripNewCfgIntfTrigUpdate=ripNewCfgIntfTrigUpdate, ipNewCfgNwfDelete=ipNewCfgNwfDelete, ospfAreaIntfIndex=ospfAreaIntfIndex, ospfCurCfgRangeAddr=ospfCurCfgRangeAddr, ipOspfRedistributeRipInfoMetricType=ipOspfRedistributeRipInfoMetricType, vrrpCurCfgVirtRtrGrpPreempt=vrrpCurCfgVirtRtrGrpPreempt, ipNewCfgStaticArpTable=ipNewCfgStaticArpTable, vrrpNewCfgIfIndx=vrrpNewCfgIfIndx, ospfAreaInfoEntry=ospfAreaInfoEntry, ipNewCfgGwIndex=ipNewCfgGwIndex, ospfIntfTxlsUpdates=ospfIntfTxlsUpdates, rip2Info=rip2Info, ospfCurCfgIntfPrio=ospfCurCfgIntfPrio, ipCurCfgStaticArpVlan=ipCurCfgStaticArpVlan, arpStatHighWater=arpStatHighWater, ripNewCfgOspfRemoveOutRmap=ripNewCfgOspfRemoveOutRmap, ripNewCfgEospfMetric=ripNewCfgEospfMetric, ospfCumNbrLoadingDone=ospfCumNbrLoadingDone, ipOspfIntfInfoAuthKey=ipOspfIntfInfoAuthKey, ospfIfInfoTransitDelay=ospfIfInfoTransitDelay, ripNewCfgPoisonReverse=ripNewCfgPoisonReverse, rip2Stats=rip2Stats, ospfCurCfgAreaTable=ospfCurCfgAreaTable, ospfCumTxDatabase=ospfCumTxDatabase, vrrpNewCfgVirtRtrTckHsrp=vrrpNewCfgVirtRtrTckHsrp, ipCurCfgRmapMetric=ipCurCfgRmapMetric, vrrpCurCfgVirtRtrTckIpIntf=vrrpCurCfgVirtRtrTckIpIntf, ospfNewCfgIntfDead=ospfNewCfgIntfDead, ipInfoNwfIndex=ipInfoNwfIndex, ospfCurCfgHostEntry=ospfCurCfgHostEntry, ospfNewCfgFixedMetric=ospfNewCfgFixedMetric, ipOspfRangeInfoTable=ipOspfRangeInfoTable, ospfCurCfgFixedMetric=ospfCurCfgFixedMetric, ospfIfInfoRetransmit=ospfIfInfoRetransmit, ipCurCfgRmapMetricType=ipCurCfgRmapMetricType, ipCurCfgGwAddr=ipCurCfgGwAddr, ipCurCfgNwfState=ipCurCfgNwfState, vrrpCurCfgGenTckL4PortInc=vrrpCurCfgGenTckL4PortInc, ospfTotalTransitAreas=ospfTotalTransitAreas, igmpMrtrInfoExpires=igmpMrtrInfoExpires, ripNewCfgSplitHorizon=ripNewCfgSplitHorizon, ospfIfInfoArea=ospfIfInfoArea, igmpStaticMrtrNewCfgTableEntry=igmpStaticMrtrNewCfgTableEntry, ospfCurCfgRangeEntry=ospfCurCfgRangeEntry, igmpFilterCfg=igmpFilterCfg, ospfCumTxlsAcks=ospfCumTxlsAcks, ospfCumNbrNegotiationDone=ospfCumNbrNegotiationDone, ipIntfInfoTable=ipIntfInfoTable, ospfCumTxPkts=ospfCumTxPkts, intfInfoAddr=intfInfoAddr, ospfNewCfgVirtIntfStatus=ospfNewCfgVirtIntfStatus, ospfNewCfgDefaultRouteMetric=ospfNewCfgDefaultRouteMetric, igmpSnoopNewCfgVlanClear=igmpSnoopNewCfgVlanClear, ripInfoIntfListen=ripInfoIntfListen, ipInfoRmapState=ipInfoRmapState, ipNewCfgStaticArpAction=ipNewCfgStaticArpAction, ospfMdkeyTableMaxSize=ospfMdkeyTableMaxSize, ospfNewCfgRipRemoveOutRmap=ospfNewCfgRipRemoveOutRmap, igmpFltCurCfgIndx=igmpFltCurCfgIndx, ipOspfRedistributeFixedInfoMetricType=ipOspfRedistributeFixedInfoMetricType, ipOspfAreaInfoType=ipOspfAreaInfoType, ipNewCfgAlistTable=ipNewCfgAlistTable, igmpSnoopNewCfgTimeout=igmpSnoopNewCfgTimeout, vrrpNewCfgGenTckRServerInc=vrrpNewCfgGenTckRServerInc, ipCurCfgRmapAp=ipCurCfgRmapAp, ospfCurCfgIntfArea=ospfCurCfgIntfArea, ripCurCfgListen=ripCurCfgListen, ospfIntfErrIndex=ospfIntfErrIndex, ospfCurCfgState=ospfCurCfgState, gatewayInfoEntry=gatewayInfoEntry, ospfIfInfoHello=ospfIfInfoHello, ospfTmrsKckOffLsaAck=ospfTmrsKckOffLsaAck, ipOspfHostInfoIpAddr=ipOspfHostInfoIpAddr, vrrpStatBadVersion=vrrpStatBadVersion, vrrpCurCfgVirtRtrGrpState=vrrpCurCfgVirtRtrGrpState, rxIgmpInvalidPkts=rxIgmpInvalidPkts, intfInfoEntry=intfInfoEntry, ipCurCfgAspathEntry=ipCurCfgAspathEntry, ospfTmrsKckOffHello=ospfTmrsKckOffHello, vrrpCurCfgVirtRtrSharing=vrrpCurCfgVirtRtrSharing, ospfCurCfgIntfRetra=ospfCurCfgIntfRetra, rxIgmpGenQueries=rxIgmpGenQueries, ripNewCfgEospfRemoveOutRmap=ripNewCfgEospfRemoveOutRmap, vrrpVirtRtrTableMaxSize=vrrpVirtRtrTableMaxSize, ospfNewCfgMdkeyEntry=ospfNewCfgMdkeyEntry, ipNewCfgRmapState=ipNewCfgRmapState, ipCurCfgNwfMask=ipCurCfgNwfMask, ripStatInBadSourcePort=ripStatInBadSourcePort, ripCurCfgIntfPoisonReverse=ripCurCfgIntfPoisonReverse, vrrpNewCfgVirtRtrTable=vrrpNewCfgVirtRtrTable, igmpStaticMrtrCurCfgIndx=igmpStaticMrtrCurCfgIndx, ospfAreaInfoAreaBorderRouter=ospfAreaInfoAreaBorderRouter, ospfAreaTxlsUpdates=ospfAreaTxlsUpdates, igmpFltCurCfgAction=igmpFltCurCfgAction, vrrpInfo=vrrpInfo, ipNewCfgDhcpOpt82State=ipNewCfgDhcpOpt82State, ipCurCfgIntfVlan=ipCurCfgIntfVlan, ospfCurCfgDefaultRouteMetricType=ospfCurCfgDefaultRouteMetricType, vrrpStatBadData=vrrpStatBadData, ospfNewCfgRipAddOutRmap=ospfNewCfgRipAddOutRmap, arpStats=arpStats, ospfAreaNbrChangeStatsEntry=ospfAreaNbrChangeStatsEntry, arpInfoMacAddr=arpInfoMacAddr, ospfCumNbrRstAd=ospfCumNbrRstAd, ripCurCfgSupply=ripCurCfgSupply, rip2CurCfgState=rip2CurCfgState, ospfNewCfgAreaTable=ospfNewCfgAreaTable, ospfInterface=ospfInterface, ipNewCfgRmapDelete=ipNewCfgRmapDelete, arpCacheClear=arpCacheClear, ripInfoIntfKey=ripInfoIntfKey, ipOspfInfo=ipOspfInfo, arpInfoFlag=arpInfoFlag, ipCurCfgIntfAddr=ipCurCfgIntfAddr, vrrpNewCfgVirtRtrTckIpIntf=vrrpNewCfgVirtRtrTckIpIntf, igmpFltNewCfgEnaDis=igmpFltNewCfgEnaDis, ipNewCfgAspathState=ipNewCfgAspathState, ipFwdGeneralCfg=ipFwdGeneralCfg, ospfIfInfoRouterID=ospfIfInfoRouterID, ospfAreaRxPkts=ospfAreaRxPkts, ospfNewCfgAreaSpfInterval=ospfNewCfgAreaSpfInterval, ripNewCfgIntfMcastUpdate=ripNewCfgIntfMcastUpdate, igmpInfo=igmpInfo, igmpFltNewCfgTableEntry=igmpFltNewCfgTableEntry, ripNewCfgIntfKey=ripNewCfgIntfKey, igmpClearVlanStats=igmpClearVlanStats, ipInfoFwdDirectedBcast=ipInfoFwdDirectedBcast, vrrpInfoVirtRtrPriority=vrrpInfoVirtRtrPriority, igmpInfoVlanId=igmpInfoVlanId, igmpSnoopCfg=igmpSnoopCfg, ripNewCfgIntfMetric=ripNewCfgIntfMetric, ospfNewCfgAreaStatus=ospfNewCfgAreaStatus, ipNewCfgStaticRouteEntry=ipNewCfgStaticRouteEntry, ospfNewCfgIntfPrio=ospfNewCfgIntfPrio, vrrpCurCfgVirtRtrState=vrrpCurCfgVirtRtrState, dnsStats=dnsStats, ipNewCfgStaticRouteGateway=ipNewCfgStaticRouteGateway, ospfCurCfgRangeState=ospfCurCfgRangeState, igmpSnoopNewCfgVlanAdd=igmpSnoopNewCfgVlanAdd, ipRouteInfoEntry=ipRouteInfoEntry, vrrpCurCfgVirtRtrGrpPriority=vrrpCurCfgVirtRtrGrpPriority, ripNewCfgIntfPoisonReverse=ripNewCfgIntfPoisonReverse, vrrpCurCfgVirtRtrGrpTckIpIntf=vrrpCurCfgVirtRtrGrpTckIpIntf, ripCurCfgIntfVersion=ripCurCfgIntfVersion, ospfRangeTableMaxSize=ospfRangeTableMaxSize, ospfCumNbrN1way=ospfCumNbrN1way, ospfIntfErrNetmaskMismatch=ospfIntfErrNetmaskMismatch, ospfAreaRxlsReqs=ospfAreaRxlsReqs, ospfNewCfgRipMetricType=ospfNewCfgRipMetricType, vrrpNewCfgGenTckHsrpInc=vrrpNewCfgGenTckHsrpInc, ripInfoIntfTrigUpdate=ripInfoIntfTrigUpdate, ospfIfInfoDesignatedRouterIpAddress=ospfIfInfoDesignatedRouterIpAddress, ripCurCfgIntfSupply=ripCurCfgIntfSupply, ospfStats=ospfStats, ospfIfNbrIpAddress=ospfIfNbrIpAddress, ripCurCfgStaticSupply=ripCurCfgStaticSupply, ipCurCfgAlistAction=ipCurCfgAlistAction, ospfNewCfgIntfTable=ospfNewCfgIntfTable, ipInfoRmapIndex=ipInfoRmapIndex, ipGatewayCfg=ipGatewayCfg, ipCurCfgAspathState=ipCurCfgAspathState, ospfNewCfgDefaultRouteMetricType=ospfNewCfgDefaultRouteMetricType, ospfCurCfgVirtIntfTable=ospfCurCfgVirtIntfTable, ospfCurCfgVirtIntfMdkey=ospfCurCfgVirtIntfMdkey, igmpInfoEntry=igmpInfoEntry, ipOspfMd5keyInfoEntry=ipOspfMd5keyInfoEntry, ospfAreaInfoId=ospfAreaInfoId, igmpSnoopStats=igmpSnoopStats, ipNewCfgIntfMask=ipNewCfgIntfMask, ipOspfHostInfoEntry=ipOspfHostInfoEntry, igmpCfg=igmpCfg, ospfAreaRxHello=ospfAreaRxHello, ipCurCfgRmapIndex=ipCurCfgRmapIndex, ospfIfInfoWait=ospfIfInfoWait, igmpInfoGroupId=igmpInfoGroupId, vrrpCurCfgVirtRtrTckHsrp=vrrpCurCfgVirtRtrTckHsrp, ospfAreaIntfDown=ospfAreaIntfDown)
mibBuilder.exportSymbols("BLADETYPE2-NETWORK-MIB", ipNewCfgIntfTable=ipNewCfgIntfTable, vrrpCurCfgVirtRtrGrpTable=vrrpCurCfgVirtRtrGrpTable, vrrpCurCfgVirtRtrTckHsrv=vrrpCurCfgVirtRtrTckHsrv, ipNewCfgRouterID=ipNewCfgRouterID, vrrpNewCfgVirtRtrGrpDelete=vrrpNewCfgVirtRtrGrpDelete, vrrpNewCfgVirtRtrGrpPriority=vrrpNewCfgVirtRtrGrpPriority, vrrpCurCfgVirtRtrIndx=vrrpCurCfgVirtRtrIndx, vrrpNewCfgVirtRtrIfIndex=vrrpNewCfgVirtRtrIfIndex, ospfCurCfgStaticMetricType=ospfCurCfgStaticMetricType, igmpSnoopCurCfgQInterval=igmpSnoopCurCfgQInterval, ospfCumIntfBackup=ospfCumIntfBackup, ipCurCfgAlistTable=ipCurCfgAlistTable, ospfIntfErrUnknownNbr=ospfIntfErrUnknownNbr, vrrpNewCfgVirtRtrID=vrrpNewCfgVirtRtrID, igmpSnoopNewCfgAggrEnaDis=igmpSnoopNewCfgAggrEnaDis, ipOspfRangeInfoHideState=ipOspfRangeInfoHideState, vrrpOperVirtRtrGroupBackup=vrrpOperVirtRtrGroupBackup, ospfCurCfgMdkeyKey=ospfCurCfgMdkeyKey, rip2CurCfgUpdatePeriod=rip2CurCfgUpdatePeriod, ospfCurCfgRangeHideState=ospfCurCfgRangeHideState, ospfIntfRxHello=ospfIntfRxHello, arpInfoSrcPort=arpInfoSrcPort, ipOspfRangeInfoIndex=ipOspfRangeInfoIndex, maxBlockInLpmTable=maxBlockInLpmTable, ipOspfAreaInfoIndex=ipOspfAreaInfoIndex, ipNewCfgStaticRouteIndx=ipNewCfgStaticRouteIndx, ospfCumRxHello=ospfCumRxHello, ospfIfInfoIndex=ospfIfInfoIndex, ospfTotalNumberOfLsdbEntries=ospfTotalNumberOfLsdbEntries, ripCurCfgIntfKey=ripCurCfgIntfKey, ospfAreaInfoTable=ospfAreaInfoTable, ipNewCfgAlistIndex=ipNewCfgAlistIndex, igmpSnoopNewCfgMrto=igmpSnoopNewCfgMrto, ospfAreaNbrExchangeDone=ospfAreaNbrExchangeDone, ripNewCfgFixedRemoveOutRmap=ripNewCfgFixedRemoveOutRmap, vrrpCurCfgGenTckHsrvInc=vrrpCurCfgGenTckHsrvInc, ospfCurCfgIntfTrans=ospfCurCfgIntfTrans, ipOspfIntfInfoRetra=ipOspfIntfInfoRetra, vrrpNewCfgVirtRtrGrpID=vrrpNewCfgVirtRtrGrpID, rip2InfoIntfTable=rip2InfoIntfTable, vrrpStats=vrrpStats, ospfIntfErrOptionsMismatch=ospfIntfErrOptionsMismatch, ipNewCfgBootpAddr2=ipNewCfgBootpAddr2, vrrpCfg=vrrpCfg, vrrpCurCfgVirtRtrGrpTckVlanPort=vrrpCurCfgVirtRtrGrpTckVlanPort, ospfAreaNbrLoadingDone=ospfAreaNbrLoadingDone, ipOspfRedistributeInfo=ipOspfRedistributeInfo, ipNewCfgStaticArpPort=ipNewCfgStaticArpPort, vrrpCurCfgVirtRtrGrpTckRServer=vrrpCurCfgVirtRtrGrpTckRServer, ipCurCfgStaticRouteIndx=ipCurCfgStaticRouteIndx, ripNewCfgStaticSupply=ripNewCfgStaticSupply, noBlocksUsedInLpmTable=noBlocksUsedInLpmTable, ipOspfRangeInfoState=ipOspfRangeInfoState, ipOspfRedistributeRipInfoOutRmapList=ipOspfRedistributeRipInfoOutRmapList, vrrpCurCfgVirtRtrGrpTckHsrp=vrrpCurCfgVirtRtrGrpTckHsrp, ripRedistributeEospf=ripRedistributeEospf, ripGeneral=ripGeneral, ospfCurCfgAreaSpfInterval=ospfCurCfgAreaSpfInterval, ospfCurCfgIntfEntry=ospfCurCfgIntfEntry, ospfNewCfgVirtIntfHello=ospfNewCfgVirtIntfHello, ospfNewCfgRangeHideState=ospfNewCfgRangeHideState, igmpInfoTable=igmpInfoTable, ripInfoIntfDefault=ripInfoIntfDefault, ipFwdCurCfgState=ipFwdCurCfgState, ipOspfInfoDefaultRouteMetric=ipOspfInfoDefaultRouteMetric, igmpStaticMrtrNewCfgPortId=igmpStaticMrtrNewCfgPortId, ospfCumTxlsReqs=ospfCumTxlsReqs, ospfAreaErrAuthFailure=ospfAreaErrAuthFailure, ripStatInErrorPkts=ripStatInErrorPkts, ipCurCfgAspathAction=ipCurCfgAspathAction, ospfNewCfgRangeIndex=ospfNewCfgRangeIndex, igmpStaticMrtrCurCfgVersion=igmpStaticMrtrCurCfgVersion, routeStatMaxEntries=routeStatMaxEntries, ospfCumTxlsUpdates=ospfCumTxlsUpdates, ospfAreaBorderRouter=ospfAreaBorderRouter, ospfNewCfgVirtIntfMdkey=ospfNewCfgVirtIntfMdkey, ipOspfAreaInfoSpfInterval=ipOspfAreaInfoSpfInterval, ipNwfCfg=ipNwfCfg, vrrpStatOutAdvers=vrrpStatOutAdvers, ipOspfAreaInfoTable=ipOspfAreaInfoTable, dnsStatInBadDnsRequests=dnsStatInBadDnsRequests, ipOspfVirtIntfInfoIndex=ipOspfVirtIntfInfoIndex, ripCurCfgFixedOutRmapList=ripCurCfgFixedOutRmapList, vrrpCurCfgVirtRtrGrpIfIndex=vrrpCurCfgVirtRtrGrpIfIndex, ipOspfRedistributeFixedInfo=ipOspfRedistributeFixedInfo, ospfIntfRxlsUpdates=ospfIntfRxlsUpdates, ospfIntfErrHelloMismatch=ospfIntfErrHelloMismatch, vrrpNewCfgGenTckL4PortInc=vrrpNewCfgGenTckL4PortInc, ipCurCfgAlistEntry=ipCurCfgAlistEntry, igmpFltCurCfgTable=igmpFltCurCfgTable, ospfIntfRxlsReqs=ospfIntfRxlsReqs, vrrpNewCfgVirtRtrTckVlanPort=vrrpNewCfgVirtRtrTckVlanPort, ipOspfVirtIntfInfoAreaId=ipOspfVirtIntfInfoAreaId, vrrpNewCfgVirtRtrGrpTckRServer=vrrpNewCfgVirtRtrGrpTckRServer, ospfCurCfgRipMetric=ospfCurCfgRipMetric, ospfTmrsKckOffRetransmit=ospfTmrsKckOffRetransmit, igmpCurCfgOnOff=igmpCurCfgOnOff, ospfIntfTxlsReqs=ospfIntfTxlsReqs, ospfCurCfgIntfAuthKey=ospfCurCfgIntfAuthKey, ospfRedistributeRip=ospfRedistributeRip, ipNwfTableMax=ipNwfTableMax, ripCurCfgIntfSplitHorizon=ripCurCfgIntfSplitHorizon, arpNewCfgReARPPeriod=arpNewCfgReARPPeriod, ripStats=ripStats, ipNewCfgAlistState=ipNewCfgAlistState, ospfAreaNbrBadRequests=ospfAreaNbrBadRequests, ospfIntfRxTxIndex=ospfIntfRxTxIndex, ospfTmrsKckOffSummary=ospfTmrsKckOffSummary, ospfTmrsKckOffAseExport=ospfTmrsKckOffAseExport, intfInfoVlan=intfInfoVlan, ipOspfIntfInfoTrans=ipOspfIntfInfoTrans, ospfTotalNssaAreas=ospfTotalNssaAreas, vrrpNewCfgVirtRtrSharing=vrrpNewCfgVirtRtrSharing, ospfIntfTableMaxSize=ospfIntfTableMaxSize, ospfTmrsKckOffLsaLock=ospfTmrsKckOffLsaLock, ripCfg=ripCfg, vrrpGeneral=vrrpGeneral, ospfNewCfgVirtIntfDelete=ospfNewCfgVirtIntfDelete, ospfCurCfgDefaultRouteMetric=ospfCurCfgDefaultRouteMetric, ripStatInBadSourceIP=ripStatInBadSourceIP, vrrpNewCfgGenTckVirtRtrInc=vrrpNewCfgGenTckVirtRtrInc, vrrpNewCfgGenTckIpIntfInc=vrrpNewCfgGenTckIpIntfInc, ospfAreaRxTxIndex=ospfAreaRxTxIndex, ospfAreaIntfLoop=ospfAreaIntfLoop, vrrpNewCfgIfPasswd=vrrpNewCfgIfPasswd, ipNewCfgIntfState=ipNewCfgIntfState, ospfCumRxlsUpdates=ospfCumRxlsUpdates, vrrpNewCfgIfDelete=vrrpNewCfgIfDelete, ospfAreaInfoTotalNeighbours=ospfAreaInfoTotalNeighbours, ipCurCfgRmapEntry=ipCurCfgRmapEntry, ipOspfIntfInfoDead=ipOspfIntfInfoDead, ospfIntfNbrChangeStats=ospfIntfNbrChangeStats, ipOspfRedistributeStaticInfo=ipOspfRedistributeStaticInfo, ripCurCfgIntfState=ripCurCfgIntfState, ospfAreaErrorStats=ospfAreaErrorStats, ospfCurCfgAreaStatus=ospfCurCfgAreaStatus, igmpMrtrInfoPortId=igmpMrtrInfoPortId, ipNewCfgAspathDelete=ipNewCfgAspathDelete, ospfIntfNbrNegotiationDone=ospfIntfNbrNegotiationDone, ipInfoNwfAddr=ipInfoNwfAddr, ospfTimersKickOffStats=ospfTimersKickOffStats, ospfCumRxlsReqs=ospfCumRxlsReqs, ripRouteRedistribution=ripRouteRedistribution, ipCurCfgBootpAddr2=ipCurCfgBootpAddr2, ospfNewCfgIntfHello=ospfNewCfgIntfHello, ipInfoRmapLp=ipInfoRmapLp, igmpInfoPortNum=igmpInfoPortNum, ipCurCfgStaticArpEntry=ipCurCfgStaticArpEntry, dnsCurCfgSecondaryIpAddr=dnsCurCfgSecondaryIpAddr, ripNewCfgFixedOutRmapList=ripNewCfgFixedOutRmapList, ospfNewCfgIntfMdkey=ospfNewCfgIntfMdkey, ipNewCfgStaticArpEntry=ipNewCfgStaticArpEntry, vrrpNewCfgVirtRtrTckHsrv=vrrpNewCfgVirtRtrTckHsrv, ipRmapCfg=ipRmapCfg, ipNewCfgStaticArpVlan=ipNewCfgStaticArpVlan, ipNewCfgRmapAp=ipNewCfgRmapAp, ospfCurCfgAreaMetric=ospfCurCfgAreaMetric, ipInfoRouterID=ipInfoRouterID, ospfNewCfgRangeEntry=ospfNewCfgRangeEntry, vrrpCurCfgVirtRtrTable=vrrpCurCfgVirtRtrTable, intfInfoIndex=intfInfoIndex, ospfIfNbrPriority=ospfIfNbrPriority, dnsStatInGoodDnsRequests=dnsStatInGoodDnsRequests, ipCurCfgAspathIndex=ipCurCfgAspathIndex, vrrpStatBadPassword=vrrpStatBadPassword, vrrpNewCfgVirtRtrGrpTckL4Port=vrrpNewCfgVirtRtrGrpTckL4Port, vrrpCurCfgIfTable=vrrpCurCfgIfTable, ospfCurCfgVirtIntfStatus=ospfCurCfgVirtIntfStatus, ospfIntfWaitTimer=ospfIntfWaitTimer, ospfNbrInFullState=ospfNbrInFullState, ospfIfNbrDesignatedRtr=ospfIfNbrDesignatedRtr, igmpInfoVersion=igmpInfoVersion, ipNewCfgNwfIndex=ipNewCfgNwfIndex, ospfNewCfgHostTable=ospfNewCfgHostTable, ospfCfg=ospfCfg, ospfCurCfgRangeAreaIndex=ospfCurCfgRangeAreaIndex, ospfNewCfgState=ospfNewCfgState, ospfIntfLoop=ospfIntfLoop, ospfCurCfgMdkeyEntry=ospfCurCfgMdkeyEntry, ospfNewCfgIntfEntry=ospfNewCfgIntfEntry, ipCurCfgAlistIndex=ipCurCfgAlistIndex, ipCurCfgStaticArpPort=ipCurCfgStaticArpPort, ospfCurCfgVirtIntfAuthKey=ospfCurCfgVirtIntfAuthKey, igmpSnoopNewCfgVlanFastlvBmap=igmpSnoopNewCfgVlanFastlvBmap, ospfAreaRxTxStatsEntry=ospfAreaRxTxStatsEntry, ospfNewCfgFixedMetricType=ospfNewCfgFixedMetricType, ripCurCfgState=ripCurCfgState, ospfIfNbrTable=ospfIfNbrTable, ipNewCfgIntfBootpRelay=ipNewCfgIntfBootpRelay, ospfCurCfgMdkeyTable=ospfCurCfgMdkeyTable, ospfAreaRxlsUpdates=ospfAreaRxlsUpdates, ospfAreaNbrDown=ospfAreaNbrDown, ipNewCfgGwArp=ipNewCfgGwArp, ripStatInPackets=ripStatInPackets, vrrpCurCfgVirtRtrIfIndex=vrrpCurCfgVirtRtrIfIndex, igmpFltCurCfgPortState=igmpFltCurCfgPortState, ospfNewCfgFixedAddOutRmap=ospfNewCfgFixedAddOutRmap, ipRouteInfoInterface=ipRouteInfoInterface, igmpStaticMrtrCurCfgPortId=igmpStaticMrtrCurCfgPortId, ipCurCfgRmapPrec=ipCurCfgRmapPrec, ospfNewCfgStaticMetricType=ospfNewCfgStaticMetricType, ospfIntfCountForRouter=ospfIntfCountForRouter, vrrpCurCfgGenTckVirtRtrInc=vrrpCurCfgGenTckVirtRtrInc, ospfCurCfgFixedMetricType=ospfCurCfgFixedMetricType, ospfIntfBackup=ospfIntfBackup, ospfTotalNeighbours=ospfTotalNeighbours, igmpMrtrInfoTable=igmpMrtrInfoTable, ipOspfRedistributeStaticInfoOutRmapList=ipOspfRedistributeStaticInfoOutRmapList, ripNewCfgSupply=ripNewCfgSupply, ripNewCfgIntfEntry=ripNewCfgIntfEntry, ipNewCfgStaticRouteTable=ipNewCfgStaticRouteTable, ipCurCfgAspathRmapIndex=ipCurCfgAspathRmapIndex, ripStatOutPkts=ripStatOutPkts, ipNewCfgRmapWeight=ipNewCfgRmapWeight, vrrpInfoVirtRtrProxy=vrrpInfoVirtRtrProxy, igmpFltNewCfgTable=igmpFltNewCfgTable, ospfIfInfoBackupDesignatedRouterID=ospfIfInfoBackupDesignatedRouterID, ipInterfaceTableMax=ipInterfaceTableMax, ipRouteInfoTag=ipRouteInfoTag, ospfNewCfgIntfAuthKey=ospfNewCfgIntfAuthKey, ospfNumberOfInterfacesUp=ospfNumberOfInterfacesUp, ipGeneralCfg=ipGeneralCfg, ripNewCfgStaticAddOutRmap=ripNewCfgStaticAddOutRmap, vrrpInfoVirtRtrIfIndex=vrrpInfoVirtRtrIfIndex, PYSNMP_MODULE_ID=layer3, vrrpCurCfgVirtRtrTckRServer=vrrpCurCfgVirtRtrTckRServer, ipCurCfgGwArp=ipCurCfgGwArp, ripCurCfgOspfMetric=ripCurCfgOspfMetric, igmpInfoExpires=igmpInfoExpires, ipOspfVirtIntfInfoStatus=ipOspfVirtIntfInfoStatus, vrrpStatOutBadAdvers=vrrpStatOutBadAdvers, vrrpCurCfgGenTckVlanPortInc=vrrpCurCfgGenTckVlanPortInc, ripNewCfgDefListen=ripNewCfgDefListen, ripNewCfgState=ripNewCfgState, ospfNewCfgHostCost=ospfNewCfgHostCost, ipOspfRedistributeRipInfo=ipOspfRedistributeRipInfo, intfInfoNetMask=intfInfoNetMask, ospfAreaInfoSPF=ospfAreaInfoSPF, ospfAreaRxDatabase=ospfAreaRxDatabase, ospfNewCfgAreaType=ospfNewCfgAreaType, ospfAreaRxTxStats=ospfAreaRxTxStats, ipNewCfgAspathRmapIndex=ipNewCfgAspathRmapIndex, ospfIntfRxDatabase=ospfIntfRxDatabase, ospfNewCfgVirtIntfDead=ospfNewCfgVirtIntfDead, igmpFltCurCfgPortIndx=igmpFltCurCfgPortIndx, ospfCumRxlsAcks=ospfCumRxlsAcks, ripCurCfgIntfListen=ripCurCfgIntfListen, ospfIntfErrAuthFailure=ospfIntfErrAuthFailure, igmpFltNewCfgPortTableEntry=igmpFltNewCfgPortTableEntry, igmpFltNewCfgMcastIp1=igmpFltNewCfgMcastIp1, igmpFltCurCfgTableEntry=igmpFltCurCfgTableEntry, ipOspfVirtIntfInfoMdkey=ipOspfVirtIntfInfoMdkey, ospfIntfNbrN2way=ospfIntfNbrN2way, ipOspfVirtIntfInfoNbr=ipOspfVirtIntfInfoNbr)
mibBuilder.exportSymbols("BLADETYPE2-NETWORK-MIB", ipRouteInfoMask=ipRouteInfoMask, ripStatInBadSizePkts=ripStatInBadSizePkts, ospfCurCfgAreaAuthType=ospfCurCfgAreaAuthType, ospfCumNbrDown=ospfCumNbrDown, ospfNewCfgStaticRemoveOutRmap=ospfNewCfgStaticRemoveOutRmap, ospfNbrInInitState=ospfNbrInInitState, layer3Oper=layer3Oper, igmpFltCurCfgPortTableEntry=igmpFltCurCfgPortTableEntry, vrrpCurCfgIfTableEntry=vrrpCurCfgIfTableEntry, ripCurCfgIntfIndex=ripCurCfgIntfIndex, vrrpNewCfgVirtRtrTableEntry=vrrpNewCfgVirtRtrTableEntry, ospfCurCfgAreaIndex=ospfCurCfgAreaIndex, ripNewCfgStaticMetric=ripNewCfgStaticMetric, vrrpNewCfgVirtRtrState=vrrpNewCfgVirtRtrState, ripInfoIntfSupply=ripInfoIntfSupply, ospfCurCfgVirtIntfAreaId=ospfCurCfgVirtIntfAreaId, ospfProcessUptime=ospfProcessUptime, ospfIfNbrBackupDesignatedRtr=ospfIfNbrBackupDesignatedRtr, ripNewCfgOspfOutRmapList=ripNewCfgOspfOutRmapList, ipNewCfgIntfBroadcast=ipNewCfgIntfBroadcast, ospfCurCfgVirtIntfHello=ospfCurCfgVirtIntfHello, ipOspfAreaInfoStatus=ipOspfAreaInfoStatus, vrrpInfoVirtRtrIndex=vrrpInfoVirtRtrIndex, vrrpCurCfgVirtRtrGrpTckL4Port=vrrpCurCfgVirtRtrGrpTckL4Port, ospfCurCfgRipOutRmapList=ospfCurCfgRipOutRmapList, igmpFltNewCfgPortAddFiltRule=igmpFltNewCfgPortAddFiltRule, ipNewCfgStaticArpIndx=ipNewCfgStaticArpIndx, ipInfoNwfTable=ipInfoNwfTable, rip2NewCfgState=rip2NewCfgState, ospfAreaNbrStart=ospfAreaNbrStart, ospfIfNbrIntfIndex=ospfIfNbrIntfIndex, ipOspfVirtIntfInfoTrans=ipOspfVirtIntfInfoTrans, ospfNewCfgHostState=ospfNewCfgHostState, ipCurCfgIntfBroadcast=ipCurCfgIntfBroadcast, ospfExternalLsa=ospfExternalLsa, ipOspfAreaInfoAuthType=ipOspfAreaInfoAuthType, ospfAreaTxHello=ospfAreaTxHello, ospfHostTableMaxSize=ospfHostTableMaxSize, ospfCurCfgIntfHello=ospfCurCfgIntfHello, ripNewCfgOspfMetric=ripNewCfgOspfMetric, ripNewCfgIntfVersion=ripNewCfgIntfVersion)
