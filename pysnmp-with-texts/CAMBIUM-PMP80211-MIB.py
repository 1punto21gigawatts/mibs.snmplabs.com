#
# PySNMP MIB module CAMBIUM-PMP80211-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CAMBIUM-PMP80211-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:46:46 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
NotificationType, Unsigned32, ModuleIdentity, iso, Bits, enterprises, Gauge32, Counter64, Integer32, Counter32, MibIdentifier, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Unsigned32", "ModuleIdentity", "iso", "Bits", "enterprises", "Gauge32", "Counter64", "Integer32", "Counter32", "MibIdentifier", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks")
MacAddress, DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "DisplayString", "TextualConvention")
pmpMibTree = ModuleIdentity((1, 3, 6, 1, 4, 1, 17713, 21))
pmpMibTree.setRevisions(('2013-04-26 12:38',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pmpMibTree.setRevisionsDescriptions(('Initial Production Version.',))
if mibBuilder.loadTexts: pmpMibTree.setLastUpdated('201304261238Z')
if mibBuilder.loadTexts: pmpMibTree.setOrganization('Cambium Networks Inc.')
if mibBuilder.loadTexts: pmpMibTree.setContactInfo('Cambium Networks Support')
if mibBuilder.loadTexts: pmpMibTree.setDescription('This module contains MIB definitions for APs.')
cambium = MibIdentifier((1, 3, 6, 1, 4, 1, 17713))
cambiumPmp80211SystemStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1))
cambiumGeneralStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1))
cambiumRFStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2))
cambiumGPSStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3))
cambiumLinkStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4))
cambiumAcsStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 5))
cambiumMcastStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6))
cambiumDhcpStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7))
cambiumPmp80211SystemMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 2))
cambiumPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1))
cambiumRealTimeStatsMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 2, 2))
cambiumAdvancedPerformanceMonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 2, 3))
cambiumpmp80211SystemConfiguration = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3))
cambiumSystemLog = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 1))
cambiumDHCP = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2))
cambiumSSHServer = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 3))
network = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4))
networkLan = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2))
networkWan = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3))
snmp = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5))
cambiumSystem = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6))
systemConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1))
systemNtpServer = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 2))
cambiumWebServer = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 7))
wireless = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8))
wirelessDevice = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 1))
wirelessInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2))
wirelessPrefList = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 3))
wirelessMIRList = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4))
wirelessRadius = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5))
wirelessRadiusServerList = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 6))
wirelessRadiusCertificateList = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7))
wirelessRadiusCertificateListRow1 = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 1))
wirelessRadiusCertificateListRow2 = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 2))
wirelessRadiusCertificateListRow3 = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 3))
wirelessRadiusCertificateSet = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 8))
wirelessRadiusExtraCertificateSet = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 9))
l2Firewall = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9))
l3Firewall = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10))
confQoS = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11))
dmz = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 12))
portForwarding = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13))
vlans = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14))
dlkm = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 15))
routing = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16))
cambiumDeviceAgent = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 20))
upnpd = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 21))
mgmtVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 4))
dataVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 5))
mcastVLAN = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 15))
networkBridge = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7))
mgmtIF = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20))
networkAliases = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27))
cambiumpmp80211SystemActions = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 4))
cambiumpmp80211SystemTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 0))
cambiumpmp80211Tools = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6))
cambiumLinkTest = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1))
caminfo = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 2))
cambiumToolBar = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3))
cambiumCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4))
cambiumIDM = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5))
cambiumACSCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 6))
cambiumToolBarOpts = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 1))
cambiumToolBarStates = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 2))
multicast = MibIdentifier((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 10))
cambiumCurrentSWInfo = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumCurrentSWInfo.setStatus('current')
if mibBuilder.loadTexts: cambiumCurrentSWInfo.setDescription('Software information - version, etc. Device Allocation: AP, SM')
cambiumHWInfo = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ValueRangeConstraint(6, 6), ValueRangeConstraint(7, 7), ValueRangeConstraint(8, 8), ValueRangeConstraint(9, 9), ValueRangeConstraint(10, 10), ValueRangeConstraint(11, 11), ValueRangeConstraint(12, 12), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumHWInfo.setStatus('current')
if mibBuilder.loadTexts: cambiumHWInfo.setDescription('Hardware SKU: -1 - Not available 0 - 5 GHz Connectorized Radio with Sync 1 - 5 GHz Connectorized Radio 2 - 5 GHz Integrated Radio 3 - 2.4 GHz Connectorized Radio with Sync 4 - 2.4 GHz Connectorized Radio 5 - 2.4 GHz Integrated Radio 6 - Force 200 ROW 7 - Reserved 8 - Force 200 9 - Force 200 FCC 10 - Reserved 11 - Force 180 ROW 12 - Force 180 FCC Device Allocation: AP, SM')
cambiumDateTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumDateTime.setStatus('current')
if mibBuilder.loadTexts: cambiumDateTime.setDescription('Date and Time in format mm/dd/yyyy:hh:mm:ss Device Allocation: AP, SM')
cambiumSystemUptime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSystemUptime.setStatus('current')
if mibBuilder.loadTexts: cambiumSystemUptime.setDescription('Device UpTime in format days, hours, minutes, and seconds -> dddd:hh:mm:ss Device Allocation: AP, SM')
cambiumWirelessMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumWirelessMACAddress.setStatus('current')
if mibBuilder.loadTexts: cambiumWirelessMACAddress.setDescription('The device Wireless MAC address Device Allocation: AP, SM')
cambiumDFSStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumDFSStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumDFSStatus.setDescription('DFS Status: 1 - N/A, 2 - Channel Availability Check, 3 - In-Service, 4 - Radar Signal Detected, 5 - In-Service Monitoring at Alternative Channel, 6 - System Not In Service due to DFS Device Allocation: AP, SM')
cambiumEffectiveSyncSource = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveSyncSource.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveSyncSource.setDescription('Sync Source Status: 1 - GPS Sync Up, 2 - GPS Sync Down, 3 - CMM4 Sync, 4 - CMM3 Sync Device Allocation: AP')
cambiumEffectiveCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveCountryCode.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveCountryCode.setDescription('Current device Country Code Device Allocation: AP, SM')
cambiumEffectiveAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveAntennaGain.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveAntennaGain.setDescription('Effective Antenna Gain in dBi Device Allocation: AP, SM')
cambiumEffectiveTDDRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveTDDRatio.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveTDDRatio.setDescription('Effective DL/UL Ratio: 1 - 75/25, 2 - 50/50, 3 - 30/70, 4 - Flexible Device Allocation: AP, SM')
cambiumEffectiveSSID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveSSID.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveSSID.setDescription('Effective SSID Device Allocation: AP')
cambiumEffectiveAuthenticationType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveAuthenticationType.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveAuthenticationType.setDescription('Effective Authentication Type: 1 - Open, 2 - WPA2, 3 - EAP-TTLS')
cambiumEffectiveDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveDeviceName.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveDeviceName.setDescription('Effective Device Name Device Allocation: AP, SM')
cambiumUbootVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumUbootVersion.setStatus('current')
if mibBuilder.loadTexts: cambiumUbootVersion.setDescription('U-boot version Device Allocation: AP, SM')
cambiumLANMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLANMACAddress.setStatus('current')
if mibBuilder.loadTexts: cambiumLANMACAddress.setDescription('The device LAN MAC address Device Allocation: AP, SM')
cambiumCurrentuImageIVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumCurrentuImageIVersion.setStatus('current')
if mibBuilder.loadTexts: cambiumCurrentuImageIVersion.setDescription('Version of firmware on uimagei partition Device Allocation: AP')
cambiumCurrentuImageVersion = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumCurrentuImageVersion.setStatus('current')
if mibBuilder.loadTexts: cambiumCurrentuImageVersion.setDescription('Version of firmware on uimage partition Device Allocation: AP, SM')
cambiumDeviceLatitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumDeviceLatitude.setStatus('current')
if mibBuilder.loadTexts: cambiumDeviceLatitude.setDescription('Current location information. GPS cordinates (latitude). Device Allocation: AP, SM')
cambiumDeviceLongitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 19), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumDeviceLongitude.setStatus('current')
if mibBuilder.loadTexts: cambiumDeviceLongitude.setDescription('Current location information.GPS cordinates (longitude). Device Allocation: AP, SM')
sysRebootCounter = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRebootCounter.setStatus('current')
if mibBuilder.loadTexts: sysRebootCounter.setDescription('Device Reboot Counter Device Allocation: AP, SM')
cambiumDFSStatusStr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumDFSStatusStr.setStatus('current')
if mibBuilder.loadTexts: cambiumDFSStatusStr.setDescription('DFS Status (text) Device Allocation: AP, SM')
cambiumDriverType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumDriverType.setStatus('current')
if mibBuilder.loadTexts: cambiumDriverType.setDescription('SM current driver (TDD - 1, standard Wi-Fi - 2). Device Allocation: SM')
cambiumESN = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumESN.setStatus('current')
if mibBuilder.loadTexts: cambiumESN.setDescription("Device' serial number (ESN), based on MAC address Device Allocation: AP, SM")
cambiumEPMPMSN = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(13, 13)).setFixedLength(13)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEPMPMSN.setStatus('current')
if mibBuilder.loadTexts: cambiumEPMPMSN.setDescription('CNS MSN serial number: AP, SM')
cambiumFactoryReset = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumFactoryReset.setStatus('current')
if mibBuilder.loadTexts: cambiumFactoryReset.setDescription('Factory Reset feature state. Default allocation: AP, SM')
cambiumSubModeType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSubModeType.setStatus('current')
if mibBuilder.loadTexts: cambiumSubModeType.setDescription('Protocol (Sub) Mode type: 1 - TDD, 2 - TDD PTP, 3 - Standard WiFi, 4 - ePTP Slave, 5 - ePTP Master Device Allocation: AP, SM')
cambiumSTAConnectedRFFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2407, 5970))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAConnectedRFFrequency.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAConnectedRFFrequency.setDescription('The frequency connected to AP Device Allocation: SM')
cambiumSTAConnectedRFBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAConnectedRFBandwidth.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAConnectedRFBandwidth.setDescription('Connected RF Bandwidth: 1 for 20MHz, 2 for 40 MHz Device Allocation: SM')
cambiumSTADLRSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTADLRSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumSTADLRSSI.setDescription('SM RSSI in dBm Device Allocation: SM')
cambiumSTADLCINR = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTADLCINR.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumSTADLCINR.setDescription('SM CINR in dBm Device Allocation: SM')
cambiumSTAConductedTXPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-25, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAConductedTXPower.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAConductedTXPower.setDescription('Current TX Power (Board Output Conducted) in dBm Device Allocation: SM')
cambiumSTAUplinkMCSMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 7), ValueRangeConstraint(9, 15), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAUplinkMCSMode.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAUplinkMCSMode.setDescription('UL MCS Mode: 1 for MCS1, 2 for MCS2, 3 for MCS3, 4 for MCS4, 5 for MCS5, 6 for MCS6, 7 for MCS7, 9 for MCS9, 10 for MCS10, 11 for MCS11, 12 for MCS12, 13 for MCS13, 14 for MCS14, 15 for MCS15 Device Allocation: SM')
cambiumSTADownlinkMCSMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 7), ValueRangeConstraint(9, 15), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTADownlinkMCSMode.setStatus('current')
if mibBuilder.loadTexts: cambiumSTADownlinkMCSMode.setDescription('DL MCS Mode: 1 for MCS1, 2 for MCS2, 3 for MCS3, 4 for MCS4, 5 for MCS5, 6 for MCS6, 7 for MCS7, 9 for MCS9, 10 for MCS10, 11 for MCS11, 12 for MCS12, 13 for MCS13, 14 for MCS14, 15 for MCS15 Device Allocation: SM')
cambiumSTAConnectedAP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAConnectedAP.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAConnectedAP.setDescription('Connected AP Name (SSID), If no AP is connected, Scanning should be returned Device Allocation: SM')
cambiumSTAPowerControlMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAPowerControlMode.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAPowerControlMode.setDescription('Power Control Mode on SM: -1 - No Value, 0 - Disable, 1 - Open Loop, 2 - Close Loop Device Allocation: SM')
cambiumAPNumberOfConnectedSTA = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAPNumberOfConnectedSTA.setStatus('current')
if mibBuilder.loadTexts: cambiumAPNumberOfConnectedSTA.setDescription('Number Of connected stations Device Allocation: AP')
cambiumAPConnectedSTAListTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11), )
if mibBuilder.loadTexts: cambiumAPConnectedSTAListTable.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAPConnectedSTAListTable.setDescription('This table contains information relevant to the Connected Subscriber Modules: Subscriber Module MAC Address, Subscriber Module AID, Subscriber Module Channel, UL RSSI per SM, DL RSSI per SM, DL CINR per SM, UL CINR per SM, UL MCS Mode per SM, DL MCS Mode per SM, Subscriber Module IP Address Device Allocation: AP')
cambiumAPConnectedSTAListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumAPNumberOfConnectedSTA"))
if mibBuilder.loadTexts: cambiumAPConnectedSTAListEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAPConnectedSTAListEntry.setDescription('Wireless parameters mapping for particular station. Device Allocation: AP')
connectedSTAListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListMAC.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListMAC.setDescription('Connected SM WLAN MAC Address Device Allocation: AP')
connectedSTAListAID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListAID.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListAID.setDescription('Association ID Device Allocation: AP')
connectedSTAListChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListChannel.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListChannel.setDescription('Connected SM Channel Device Allocation: AP')
connectedSTAListULRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListULRSSI.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListULRSSI.setDescription('UL RSSI per SM Device Allocation: AP')
connectedSTAListDLRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListDLRSSI.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListDLRSSI.setDescription('DL RSSI per SM Device Allocation: AP')
connectedSTAListULCINR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListULCINR.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListULCINR.setDescription('UL CINR per SM Device Allocation: AP')
connectedSTAListDLCINR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListDLCINR.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListDLCINR.setDescription('DL CINR per SM Device Allocation: AP')
connectedSTAListULMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListULMCS.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListULMCS.setDescription('UL MCS Mode per SM: 1 for MCS1, 2 for MCS2, 3 for MCS3, 4 for MCS4, 5 for MCS5, 6 for MCS6, 7 for MCS7, 9 for MCS9, 10 for MCS10, 11 for MCS11, 12 for MCS12, 13 for MCS13, 14 for MCS14, 15 for MCS15 Device Allocation: AP')
connectedSTAListDLMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListDLMCS.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListDLMCS.setDescription('DL MCS Mode per SM: 1 for MCS1, 2 for MCS2, 3 for MCS3, 4 for MCS4, 5 for MCS5, 6 for MCS6, 7 for MCS7, 9 for MCS9, 10 for MCS10, 11 for MCS11, 12 for MCS12, 13 for MCS13, 14 for MCS14, 15 for MCS15 Device Allocation: AP')
connectedSTAListIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListIP.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListIP.setDescription('Connected SM WLAN IP Address Device Allocation: AP')
connectedSTAListMirSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListMirSrc.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListMirSrc.setDescription('Connected SM MIR source: RADIUS server or profile ID Device Allocation: AP')
connectedSTAListMirULRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListMirULRate.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListMirULRate.setDescription('Connected SM MIR UL Rate Device Allocation: AP')
connectedSTAListMirDLRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 11, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAListMirDLRate.setStatus('obsolete')
if mibBuilder.loadTexts: connectedSTAListMirDLRate.setDescription('Connected SM MIR DL Rate Device Allocation: AP')
cambiumSTADistanceKm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTADistanceKm.setStatus('current')
if mibBuilder.loadTexts: cambiumSTADistanceKm.setDescription('The distance between AP and SM in kilometers Device Allocation: SM')
cambiumSTADistanceMil = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTADistanceMil.setStatus('current')
if mibBuilder.loadTexts: cambiumSTADistanceMil.setDescription('The distance between AP and SM in miles Device Allocation: SM')
cambiumPropagationDelay = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2000, 5000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumPropagationDelay.setStatus('current')
if mibBuilder.loadTexts: cambiumPropagationDelay.setDescription('SM use the calculated propagation delay to adjust the UL starting time Device Allocation: SM')
cambiumSTAConnectedAPListTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15), )
if mibBuilder.loadTexts: cambiumSTAConnectedAPListTable.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumSTAConnectedAPListTable.setDescription('This table contains information relevant to the Connected Subscriber Modules: SSID - AP Name (SSID) BSSID - AP MAC Address Channel - Operating channgel number Frequency - AP Operating frequency Bandwitdth - AP Operating Bandwidth Rate - AP Operating Rate CINR - AP Signal to Noise Ratio RSSI - AP Received Signal Strength Indication Noise - AP Noise level INT - Beacon Interval NE_ST - Last Network Entry State NE_AGE - Time from last Network Entry event SCAN_AGE - Time from last AP scanning Remaining_SM - Capacity on AP from beacon CAPS - IEEE80211 capability flags MeetNEAttemptCriteria - status for eachAP after scanning Device Allocation: SM')
cambiumSTAConnectedAPListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "connectedAPListSSID"))
if mibBuilder.loadTexts: cambiumSTAConnectedAPListEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumSTAConnectedAPListEntry.setDescription('Wireless parameters mapping for particular station. Device Allocation: SM')
connectedAPListSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListSSID.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListSSID.setDescription('AP Name (SSID) Device Allocation: SM')
connectedAPListBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListBSSID.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListBSSID.setDescription('AP MAC Address Device Allocation: SM')
connectedAPListChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListChannel.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListChannel.setDescription('Operating channgel number Device Allocation: SM')
connectedAPListFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListFrequency.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListFrequency.setDescription('AP Operating frequency Device Allocation: SM')
connectedAPListBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListBandwidth.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListBandwidth.setDescription('AP Operating Bandwidth Device Allocation: SM')
connectedAPListRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListRate.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListRate.setDescription('AP Operating Rate Device Allocation: SM')
connectedAPListCINR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListCINR.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListCINR.setDescription('AP Carrier to Interference Noise Ratio Device Allocation: SM')
connectedAPListRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListRSSI.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListRSSI.setDescription('AP Received Signal Strength Indication Device Allocation: SM')
connectedAPListNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListNoise.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListNoise.setDescription('AP Noise level Device Allocation: SM')
connectedAPListINT = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListINT.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListINT.setDescription('Beacon Interval Device Allocation: SM')
connectedAPListNEState = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListNEState.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListNEState.setDescription('Last Network Entry State Device Allocation: SM')
connectedAPListNEAge = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListNEAge.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListNEAge.setDescription('Time from last Network Entry event Device Allocation: SM')
connectedAPListScanAge = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListScanAge.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListScanAge.setDescription('Time from last AP scanning Device Allocation: SM')
connectedAPListRemainingSTA = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListRemainingSTA.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListRemainingSTA.setDescription('Remaining SM on AP Device Allocation: SM')
connectedAPListCAPS = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListCAPS.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListCAPS.setDescription('IEEE80211 capability flags Device Allocation: SM')
connectedAPAuthMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPAuthMethod.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPAuthMethod.setDescription('Authentication Method Device Allocation: SM')
connectedAPListMeetNEAttemptCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 15, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPListMeetNEAttemptCriteria.setStatus('obsolete')
if mibBuilder.loadTexts: connectedAPListMeetNEAttemptCriteria.setDescription('Status meet NE attempt criteria Device Allocation: SM')
wirelessInterfaceConnectionState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessInterfaceConnectionState.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceConnectionState.setDescription('Connection State: 1 - Scanning, 2 - Connecting, 3 - Connected Device Allocation: SM')
cambiumSTAPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAPriority.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAPriority.setDescription('SM priority value: 0 - Normal, 1 - High, 2 - Low Device Allocation: SM')
cambiumSTADLSNR = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTADLSNR.setStatus('current')
if mibBuilder.loadTexts: cambiumSTADLSNR.setDescription('SM SNR in dBm Device Allocation: SM')
cambiumConnectedAPMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 19), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumConnectedAPMACAddress.setStatus('current')
if mibBuilder.loadTexts: cambiumConnectedAPMACAddress.setDescription('Connected AP MAC Address Device Allocation: SM')
cambiumSTAConnectedAPTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20), )
if mibBuilder.loadTexts: cambiumSTAConnectedAPTable.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAConnectedAPTable.setDescription('This table contains information relevant to the Connected Subscriber Modules: SSID - AP Name (SSID) BSSID - AP MAC Address Channel - Operating channgel number Frequency - AP Operating frequency Bandwitdth - AP Operating Bandwidth Rate - AP Operating Rate SNR - AP Signal to Noise Ratio RSSI - AP Received Signal Strength Indication Noise - AP Noise level INT - Beacon Interval NE_ST - Last Network Entry State NE_AGE - Time from last Network Entry event SCAN_AGE - Time from last AP scanning Remaining_SM - Capacity on AP from beacon CAPS - IEEE80211 capability flags MeetNEAttemptCriteria - status for eachAP after scanning Device Allocation: SM')
cambiumSTAConnectedAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "connectedAPListSSID"))
if mibBuilder.loadTexts: cambiumSTAConnectedAPEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAConnectedAPEntry.setDescription('Wireless parameters mapping for particular station. Device Allocation: SM')
connectedAPSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPSSID.setStatus('current')
if mibBuilder.loadTexts: connectedAPSSID.setDescription('AP Name (SSID) Device Allocation: SM')
connectedAPBSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPBSSID.setStatus('current')
if mibBuilder.loadTexts: connectedAPBSSID.setDescription('AP MAC Address Device Allocation: SM')
connectedAPChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPChannel.setStatus('current')
if mibBuilder.loadTexts: connectedAPChannel.setDescription('Operating channgel number Device Allocation: SM')
connectedAPFrequency = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPFrequency.setStatus('current')
if mibBuilder.loadTexts: connectedAPFrequency.setDescription('AP Operating frequency Device Allocation: SM')
connectedAPBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPBandwidth.setStatus('current')
if mibBuilder.loadTexts: connectedAPBandwidth.setDescription('AP Operating Bandwidth Device Allocation: SM')
connectedAPRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPRate.setStatus('current')
if mibBuilder.loadTexts: connectedAPRate.setDescription('AP Operating Rate Device Allocation: SM')
connectedAPSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPSNR.setStatus('current')
if mibBuilder.loadTexts: connectedAPSNR.setDescription('AP Signal to Noise Ratio Device Allocation: SM')
connectedAPRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPRSSI.setStatus('current')
if mibBuilder.loadTexts: connectedAPRSSI.setDescription('AP Received Signal Strength Indication Device Allocation: SM')
connectedAPNoise = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPNoise.setStatus('current')
if mibBuilder.loadTexts: connectedAPNoise.setDescription('AP Noise level Device Allocation: SM')
connectedAPINT = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPINT.setStatus('current')
if mibBuilder.loadTexts: connectedAPINT.setDescription('Beacon Interval Device Allocation: SM')
connectedAPNEState = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPNEState.setStatus('current')
if mibBuilder.loadTexts: connectedAPNEState.setDescription('Last Network Entry State Device Allocation: SM')
connectedAPNEAge = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPNEAge.setStatus('current')
if mibBuilder.loadTexts: connectedAPNEAge.setDescription('Time from last Network Entry event Device Allocation: SM')
connectedAPScanAge = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPScanAge.setStatus('current')
if mibBuilder.loadTexts: connectedAPScanAge.setDescription('Time from last AP scanning Device Allocation: SM')
connectedAPRemainingSTA = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPRemainingSTA.setStatus('current')
if mibBuilder.loadTexts: connectedAPRemainingSTA.setDescription('Remaining SM on AP Device Allocation: SM')
connectedAPCAPS = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPCAPS.setStatus('current')
if mibBuilder.loadTexts: connectedAPCAPS.setDescription('IEEE80211 capability flags Device Allocation: SM')
connectedAPAuthenticationMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 16), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPAuthenticationMethod.setStatus('current')
if mibBuilder.loadTexts: connectedAPAuthenticationMethod.setDescription('Authentication Method Device Allocation: SM')
connectedAPMeetNEAttemptCriteria = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 20, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedAPMeetNEAttemptCriteria.setStatus('current')
if mibBuilder.loadTexts: connectedAPMeetNEAttemptCriteria.setDescription('Status meet NE attempt criteria Device Allocation: SM')
staTxCapacity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTxCapacity.setStatus('current')
if mibBuilder.loadTexts: staTxCapacity.setDescription('TX Capacity for SM Device Allocation: SM')
staTxQuality = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: staTxQuality.setStatus('current')
if mibBuilder.loadTexts: staTxQuality.setDescription('TX Quality for SM Device Allocation: SM')
acsState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: acsState.setStatus('current')
if mibBuilder.loadTexts: acsState.setDescription('Indicates the state of the Automatic Channel Selection (ACS) feature: 0 - Disabled, 1 - Enabled, 2 - Running, 3 - Aborting Device Allocation: AP')
cambiumEffectiveMcastGroupLimit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveMcastGroupLimit.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveMcastGroupLimit.setDescription('Disaplays the Effective Multicast Group Limit number: 0 - 10 Groups Device Allocation: SM')
cambiumSubscribedMcastGroupNum = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSubscribedMcastGroupNum.setStatus('current')
if mibBuilder.loadTexts: cambiumSubscribedMcastGroupNum.setDescription('Disaplays the number of subscribed Multicast Groups: 0 - 5 Groups Device Allocation: SM')
cambiumAPMcastTotalGroupCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 512))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAPMcastTotalGroupCount.setStatus('current')
if mibBuilder.loadTexts: cambiumAPMcastTotalGroupCount.setDescription('Disaplays the count of subscribed Multicast Groups: 0 - 512 Groups Device Allocation: AP')
cambiumMcastHandlingStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumMcastHandlingStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumMcastHandlingStatus.setDescription('Disaplays the status of the Multicast features: 0 - Fixed MCS 3 - Multicast to Unicast Device Allocation: AP')
cambiumSubscribedMcastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6, 10), )
if mibBuilder.loadTexts: cambiumSubscribedMcastGroupTable.setStatus('current')
if mibBuilder.loadTexts: cambiumSubscribedMcastGroupTable.setDescription('This table contains Registered Multicast Group information: Multicast Group IP Device Allocation: SM')
cambiumSubscribedMcastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6, 10, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumSubscribedMcastGroupNum"))
if mibBuilder.loadTexts: cambiumSubscribedMcastGroupEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumSubscribedMcastGroupEntry.setDescription('Multicast group information for particular subscription Device Allocation: SM')
cambiumRegisteredMcastGroupIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 6, 10, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumRegisteredMcastGroupIP.setStatus('current')
if mibBuilder.loadTexts: cambiumRegisteredMcastGroupIP.setDescription('Registered Multicast Group IP Device Allocation: SM')
dhcpServerStartIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerStartIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerStartIP.setDescription('Dhcp server start address Device Allocation: STA')
dhcpServerEndIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerEndIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerEndIP.setDescription('Dhcp server end address Device Allocation: STA')
dhcpServerGatewayIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerGatewayIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerGatewayIP.setDescription('DHCP Gateway IP Address Device Allocation: STA')
dhcpServerDNSIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpServerDNSIP.setStatus('current')
if mibBuilder.loadTexts: dhcpServerDNSIP.setDescription('DHCP server DNS IP Address Device Allocation: STA')
dhcpServerStaticHostTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 5), )
if mibBuilder.loadTexts: dhcpServerStaticHostTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerStaticHostTable.setDescription('Table for DHCP static MAC to IP')
dhcpServerStaticHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 5, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "dhcpStaticIndex"))
if mibBuilder.loadTexts: dhcpServerStaticHostEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerStaticHostEntry.setDescription('DHCP Hosts Table Entry Device Allocation: STA')
dhcpStaticIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStaticIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpStaticIndex.setDescription('DHCP Static Table Index')
dhcpStaticMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 5, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(17, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStaticMAC.setStatus('current')
if mibBuilder.loadTexts: dhcpStaticMAC.setDescription('DHCP Static MAC')
dhcpStaticIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 5, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpStaticIP.setStatus('current')
if mibBuilder.loadTexts: dhcpStaticIP.setDescription('DHCP Static IP')
dhcpServerLeaseTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 6), )
if mibBuilder.loadTexts: dhcpServerLeaseTable.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseTable.setDescription('DHCP Assigned IP Address Table')
dhcpServerLeaseEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 6, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "dhcpLeaseIndex"))
if mibBuilder.loadTexts: dhcpServerLeaseEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpServerLeaseEntry.setDescription('DHCP Assigned IP Address Entry Device Allocation: STA')
dhcpLeaseIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseIndex.setDescription('DHCP lease table index')
dhcpLeaseMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 6, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(17, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseMAC.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseMAC.setDescription('DHCP Assigned MAC Address')
dhcpLeaseIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 6, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseIP.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseIP.setDescription('DHCP Assigned IP Address')
dhcpLeaseDevName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 7, 6, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpLeaseDevName.setStatus('current')
if mibBuilder.loadTexts: dhcpLeaseDevName.setDescription('DHCP Assigned Device Name')
cambiumAPConnectedSTATable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30), )
if mibBuilder.loadTexts: cambiumAPConnectedSTATable.setStatus('current')
if mibBuilder.loadTexts: cambiumAPConnectedSTATable.setDescription('This table contains information relevant to the Connected Subscriber Modules: Subscriber Module MAC Address, Subscriber Module AID, Subscriber Module Channel, UL RSSI per SM, DL RSSI per SM, UL SNR per SM, DL SNR per SM, UL MCS Mode per SM, DL MCS Mode per SM, Subscriber Module IP Address, SM Priority, MIR, MIR UL Rate, MIR DL Rate, Device Allocation: AP')
cambiumAPConnectedSTAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumAPNumberOfConnectedSTA"))
if mibBuilder.loadTexts: cambiumAPConnectedSTAEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumAPConnectedSTAEntry.setDescription('Wireless parameters mapping for particular station. Device Allocation: AP')
connectedSTAMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMAC.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMAC.setDescription('Connected SM WLAN MAC Address Device Allocation: AP')
connectedSTAAID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAAID.setStatus('current')
if mibBuilder.loadTexts: connectedSTAAID.setDescription('Association ID Device Allocation: AP')
connectedSTAChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAChannel.setStatus('current')
if mibBuilder.loadTexts: connectedSTAChannel.setDescription('Connected SM Channel Device Allocation: AP')
connectedSTAULRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAULRSSI.setStatus('current')
if mibBuilder.loadTexts: connectedSTAULRSSI.setDescription('UL RSSI per SM Device Allocation: AP')
connectedSTADLRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTADLRSSI.setStatus('current')
if mibBuilder.loadTexts: connectedSTADLRSSI.setDescription('DL RSSI per SM Device Allocation: AP')
connectedSTAULSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAULSNR.setStatus('current')
if mibBuilder.loadTexts: connectedSTAULSNR.setDescription('UL SNR per SM Device Allocation: AP')
connectedSTADLSNR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTADLSNR.setStatus('current')
if mibBuilder.loadTexts: connectedSTADLSNR.setDescription('DL SNR per SM Device Allocation: AP')
connectedSTAULMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAULMCS.setStatus('current')
if mibBuilder.loadTexts: connectedSTAULMCS.setDescription('UL MCS Mode per SM: 1 for MCS1, 2 for MCS2, 3 for MCS3, 4 for MCS4, 5 for MCS5, 6 for MCS6, 7 for MCS7, 9 for MCS9, 10 for MCS10, 11 for MCS11, 12 for MCS12, 13 for MCS13, 14 for MCS14, 15 for MCS15 Device Allocation: AP')
connectedSTADLMCS = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTADLMCS.setStatus('current')
if mibBuilder.loadTexts: connectedSTADLMCS.setDescription('DL MCS Mode per SM: 1 for MCS1, 2 for MCS2, 3 for MCS3, 4 for MCS4, 5 for MCS5, 6 for MCS6, 7 for MCS7, 9 for MCS9, 10 for MCS10, 11 for MCS11, 12 for MCS12, 13 for MCS13, 14 for MCS14, 15 for MCS15 Device Allocation: AP')
connectedSTAIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 10), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAIP.setStatus('current')
if mibBuilder.loadTexts: connectedSTAIP.setDescription('Connected SM WLAN IP Address Device Allocation: AP')
connectedSTAPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAPriority.setStatus('current')
if mibBuilder.loadTexts: connectedSTAPriority.setDescription('Connected SM Priority Device Allocation: AP')
connectedSTAMirSrc = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMirSrc.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMirSrc.setDescription('Connected SM MIR source: RADIUS server or profile ID Device Allocation: AP')
connectedSTAMirULRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 13), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMirULRate.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMirULRate.setDescription('Connected SM MIR UL Rate Device Allocation: AP')
connectedSTAMirDLRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMirDLRate.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMirDLRate.setDescription('Connected SM MIR DL Rate Device Allocation: AP')
connectedSTAClickTHWAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 15), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAClickTHWAddr.setStatus('current')
if mibBuilder.loadTexts: connectedSTAClickTHWAddr.setDescription('Connected SM BR or NAT HW addr Device Allocation: AP')
connectedSTAClickTWebPort = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAClickTWebPort.setStatus('current')
if mibBuilder.loadTexts: connectedSTAClickTWebPort.setDescription('Connected SM WEB port Device Allocation: AP')
connectedSTAClickTWebSec = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAClickTWebSec.setStatus('current')
if mibBuilder.loadTexts: connectedSTAClickTWebSec.setDescription('Connected SM WEB security (HTTPS) Device Allocation: AP')
connectedSTAClickTHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 18), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAClickTHostName.setStatus('current')
if mibBuilder.loadTexts: connectedSTAClickTHostName.setDescription('Connected SM Host Name Device Allocation: AP')
connectedSTAMcastTotalGroups = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMcastTotalGroups.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMcastTotalGroups.setDescription('Connected SM Total multicast groups subscribed count Device Allocation: AP')
connectedSTAMcastGRP0 = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 22), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMcastGRP0.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMcastGRP0.setDescription('Connected SM subscribed multicast group 0 Device Allocation: AP')
connectedSTAMcastGRP1 = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 23), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMcastGRP1.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMcastGRP1.setDescription('Connected SM subscribed multicast group 1 Device Allocation: AP')
connectedSTAMcastGRP2 = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 24), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMcastGRP2.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMcastGRP2.setDescription('Connected SM subscribed multicast group 2 Device Allocation: AP')
connectedSTAMcastGRP3 = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 25), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMcastGRP3.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMcastGRP3.setDescription('Connected SM subscribed multicast group 3 Device Allocation: AP')
connectedSTAMcastGRP4 = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTAMcastGRP4.setStatus('current')
if mibBuilder.loadTexts: connectedSTAMcastGRP4.setDescription('Connected SM subscribed multicast group 4 Device Allocation: AP')
connectedSTASessionTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 27), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTASessionTime.setStatus('current')
if mibBuilder.loadTexts: connectedSTASessionTime.setDescription('Connected SM time since allocation Device Allocation: AP')
connectedSTADLRateMbps = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 28), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTADLRateMbps.setStatus('current')
if mibBuilder.loadTexts: connectedSTADLRateMbps.setDescription('Connected SM DL Rate in MBits/sec Device Allocation: AP')
cambiumAPBridgeTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 40), )
if mibBuilder.loadTexts: cambiumAPBridgeTable.setStatus('current')
if mibBuilder.loadTexts: cambiumAPBridgeTable.setDescription('This table contains information relevant to the particular AP bridge interfaces list: Bridge Name, Device MAC Address, Device Port, SM MAC Address, Aging Time in seconds Device Allocation: AP')
cambiumAPBridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 40, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "camAPBrTabDevMACAddress"))
if mibBuilder.loadTexts: cambiumAPBridgeEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumAPBridgeEntry.setDescription('Interface list for particular bridge. Device Allocation: AP')
camAPBrTabBridgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 40, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camAPBrTabBridgeName.setStatus('current')
if mibBuilder.loadTexts: camAPBrTabBridgeName.setDescription('Bridge Name Device Allocation: AP')
camAPBrTabDevMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 40, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camAPBrTabDevMACAddress.setStatus('current')
if mibBuilder.loadTexts: camAPBrTabDevMACAddress.setDescription('Device MAC Address Device Allocation: AP')
camAPBrTabDevPort = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 40, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camAPBrTabDevPort.setStatus('current')
if mibBuilder.loadTexts: camAPBrTabDevPort.setDescription('Device Port Device Allocation: AP')
camAPBrTabSTAMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 40, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camAPBrTabSTAMACAddress.setStatus('current')
if mibBuilder.loadTexts: camAPBrTabSTAMACAddress.setDescription('SM MAC Address Device Allocation: AP')
camAPBrTabAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 40, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camAPBrTabAgingTime.setStatus('current')
if mibBuilder.loadTexts: camAPBrTabAgingTime.setDescription('Aging time in seconds Device Allocation: AP')
cambiumSTABridgeTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 50), )
if mibBuilder.loadTexts: cambiumSTABridgeTable.setStatus('current')
if mibBuilder.loadTexts: cambiumSTABridgeTable.setDescription('This table contains information relevant to the particular SM bridge interfaces list: Bridge Name, Device MAC Address, Device Port, Aging Time in seconds Device Allocation: SM')
cambiumSTABridgeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 50, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "camSTABrTabDevMACAddress"))
if mibBuilder.loadTexts: cambiumSTABridgeEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumSTABridgeEntry.setDescription('Interface list for particular bridge. Device Allocation: SM')
camSTABrTabBridgeName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 50, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camSTABrTabBridgeName.setStatus('current')
if mibBuilder.loadTexts: camSTABrTabBridgeName.setDescription('Bridge Name Device Allocation: SM')
camSTABrTabDevMACAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 50, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camSTABrTabDevMACAddress.setStatus('current')
if mibBuilder.loadTexts: camSTABrTabDevMACAddress.setDescription('Device MAC Address Device Allocation: SM')
camSTABrTabDevPort = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 50, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camSTABrTabDevPort.setStatus('current')
if mibBuilder.loadTexts: camSTABrTabDevPort.setDescription('Device Port Device Allocation: SM')
camSTABrTabAgingTime = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 50, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: camSTABrTabAgingTime.setStatus('current')
if mibBuilder.loadTexts: camSTABrTabAgingTime.setDescription('Aging time in seconds Device Allocation: SM')
cambiumSTAMAC = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 60), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(17, 17)).setFixedLength(17)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTAMAC.setStatus('current')
if mibBuilder.loadTexts: cambiumSTAMAC.setDescription("String with dropped SM's MAC address Device Allocation: AP")
cambiumSTADropReason = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 61), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumSTADropReason.setStatus('current')
if mibBuilder.loadTexts: cambiumSTADropReason.setDescription("String with SM's drop reason Device Allocation: AP")
connectedSTATXCapacity = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTATXCapacity.setStatus('current')
if mibBuilder.loadTexts: connectedSTATXCapacity.setDescription('TX Capacity per SM Device Allocation: AP')
connectedSTATXQuality = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 2, 30, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: connectedSTATXQuality.setStatus('current')
if mibBuilder.loadTexts: connectedSTATXQuality.setDescription('TX Quality per SM Device Allocation: AP')
cambiumGPSCurrentSyncState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSCurrentSyncState.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSCurrentSyncState.setDescription('GPS Current SYNC State: 0 - The Initialization State 1 - The No Synchronization State 2 - The Synchronization State 3 - The Hold Off State 4 - The Regaining Sync State 5 - The Free Run State Device Allocation: AP')
cambiumGPSLatitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSLatitude.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSLatitude.setDescription('Current location information from GPS Device. GPS cordinates (latitude). Device Allocation: AP, SM')
cambiumGPSLongitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSLongitude.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSLongitude.setDescription('Current location information from GPS Device. GPS cordinates (longitude). Device Allocation: AP, SM')
cambiumGPSHeight = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSHeight.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSHeight.setDescription('Current location information from GPS Device. GPS coordinates (Height). Device Allocation: AP, SM')
cambiumGPSTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSTime.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSTime.setDescription('Current Time/Date information from GPS Device. GPS (Time). Device Allocation: AP, SM')
cambiumGPSNumTrackedSat = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSNumTrackedSat.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSNumTrackedSat.setDescription('Current Satellite information from GPS Device. GPS (Number of Satellites Tracked). Device Allocation: AP, SM')
cambiumGPSNumVisibleSat = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSNumVisibleSat.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSNumVisibleSat.setDescription('Current Satellite information from GPS Device. GPS (Number of Satellites Visible). Device Allocation: AP, SM')
cambiumGPSSatSNRTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 8), )
if mibBuilder.loadTexts: cambiumGPSSatSNRTable.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSSatSNRTable.setDescription('Table of Current Satellite information from GPS Device. GPS (SNR of Satellites). Device Allocation: AP, SM')
cambiumGPSSatSNREntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 8, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "gpsSatelliteId"))
if mibBuilder.loadTexts: cambiumGPSSatSNREntry.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSSatSNREntry.setDescription('Satellite SNR values for Visible and Tracked Satellites Device Allocation: AP')
gpsSatelliteId = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSatelliteId.setStatus('current')
if mibBuilder.loadTexts: gpsSatelliteId.setDescription('Satellite ID for which SNR is displayed')
gpsSnrValue = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSnrValue.setStatus('current')
if mibBuilder.loadTexts: gpsSnrValue.setDescription('SNR value for a satellite')
gpsSatelliteStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 8, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: gpsSatelliteStatus.setStatus('current')
if mibBuilder.loadTexts: gpsSatelliteStatus.setDescription('Satellite Status whether they are visible or tracked 1 - Visible 2 - Tracked')
cambiumGPSDeviceInfo = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSDeviceInfo.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSDeviceInfo.setDescription('GPS Device Information Device Allocation: AP, SM')
cambiumGPSFirmwareUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 3, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumGPSFirmwareUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumGPSFirmwareUpdateStatus.setDescription('Software Update Status OID 0 - No GPS FW Update is progress or No FW update is required, 1 - GPS FW Update is in progress, Uploading SW package to device, 2 - GPS FW Update is in progress, Verifying SHA2 signature, 3 - GPS FW Update is in progress, Executing pre-update script, 4 - GPS FW Update is in progress, Uploading Firmware to GPS device, 5 - GPS FW Update is in progress, Uploading Firmware to GPS device, 6 - GPS FW Update is in progress, Executing post-update script, 7 - GPS FW Update is finished, waiting for reboot, 8 - GPS FW Update is Required, Please upgrade to latest GPS FW, When GPS FW Update is successfully, return value is 7, GUI or NMS indicate that GPS FW update was successful, Device can be rebooted. Device Allocation: AP, SM')
cambiumLANStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLANStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumLANStatus.setDescription('LAN Status: 0 - Down, 1 - Up, 2 - Disabled Device Allocation: AP, SM')
cambiumWLANStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumWLANStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumWLANStatus.setDescription('WLAN Status: 0 - Down, 1 - Up Device Allocation: AP, SM')
cambiumEffectiveDeviceIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveDeviceIPAddress.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveDeviceIPAddress.setDescription('Current Device IP address Device Allocation: AP, SM')
cambiumEffectiveSTANetworkMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveSTANetworkMode.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveSTANetworkMode.setDescription('Effective SM Network Mode: 1 - NAT, 2 - Bridge, 3 - Router Device Allocation: SM')
cambiumEffectiveDeviceLANNetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 5), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveDeviceLANNetMask.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveDeviceLANNetMask.setDescription('Current Device Network Mask Device Allocation: AP, SM')
cambiumEffectiveDeviceDefaultGateWay = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 6), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveDeviceDefaultGateWay.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveDeviceDefaultGateWay.setDescription('Effective Device Default Gateway IP Address, NOTE: This parameters lists only the first gateway IP Device Allocation: AP, SM')
cambiumEffectiveDeviceDNSIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 7), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveDeviceDNSIPAddress.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveDeviceDNSIPAddress.setDescription('Current Device DNS IP Address, NOTE: This parameter displays only the first DNS IP Device Allocation: AP, SM')
cambiumEffectiveWANIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 8), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveWANIPAddress.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveWANIPAddress.setDescription('Current Device WLAN IP address Device Allocation: SM')
cambiumEffectiveDeviceWANNetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 9), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveDeviceWANNetMask.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveDeviceWANNetMask.setDescription('Current Device Network Mask Device Allocation: SM')
cambiumEffectiveDeviceWANPPPoEStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveDeviceWANPPPoEStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveDeviceWANPPPoEStatus.setDescription('WAN PPPoE Status: 0 - Disabled 1 - Enabled-Connected 2 - Enabled-Connecting 3 - Enabled-Disconnected Device Allocation: SM')
cambiumLANModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLANModeStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumLANModeStatus.setDescription('LAN Mode Status -1 - No data, 0 - Half, 1 - Full Device Allocation: AP, SM')
cambiumLANSpeedStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), ValueRangeConstraint(1000, 1000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLANSpeedStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumLANSpeedStatus.setDescription('LAN Speed Status -1 - No data, 10 - 10 Mb/s, 100 - 100 Mb/s, 1000 - 1000 Mb/s Device Allocation: AP, SM')
cambiumDHCPOption82Status = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumDHCPOption82Status.setStatus('current')
if mibBuilder.loadTexts: cambiumDHCPOption82Status.setDescription('DHCP Option82 Status: 0 - Disabled 1 - Enabled Device Allocation: AP')
cambiumLAN2ModeStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLAN2ModeStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumLAN2ModeStatus.setDescription('2nd LAN Mode Status -1 - No data, 0 - Half, 1 - Full Device Allocation: AP, SM')
cambiumLAN2SpeedStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(-1, -1), ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), ValueRangeConstraint(1000, 1000), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLAN2SpeedStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumLAN2SpeedStatus.setDescription('2nd LAN Speed Status -1 - No data, 10 - 10 Mb/s, 100 - 100 Mb/s, 1000 - 1000 Mb/s Device Allocation: AP, SM')
cambiumLAN2Status = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLAN2Status.setStatus('current')
if mibBuilder.loadTexts: cambiumLAN2Status.setDescription('2nd LAN Status: 0 - Down, 1 - Up, 2 - Disabled Device Allocation: AP, SM')
cambiumARPTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 20), )
if mibBuilder.loadTexts: cambiumARPTable.setStatus('current')
if mibBuilder.loadTexts: cambiumARPTable.setDescription('Neibour devices IP/MAC pair Table')
cambiumManagementIFStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumManagementIFStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumManagementIFStatus.setDescription('Separate Management Interface Status: 0 - Down, 1 - Up Device Allocation: SM')
cambiumManagementIFIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 26), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumManagementIFIPAddress.setStatus('current')
if mibBuilder.loadTexts: cambiumManagementIFIPAddress.setDescription('Current Device Separate Management IP address Device Allocation: SM')
cambiumManagementIFNetMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumManagementIFNetMask.setStatus('current')
if mibBuilder.loadTexts: cambiumManagementIFNetMask.setDescription('Current Device Separate Management Network Mask Device Allocation: SM')
cambiumManagementIFGateway = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumManagementIFGateway.setStatus('current')
if mibBuilder.loadTexts: cambiumManagementIFGateway.setDescription('Current Device Separate Management Gateway Device Allocation: SM')
cambiumEffectiveNetworkLanMTU = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 1700), )).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveNetworkLanMTU.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveNetworkLanMTU.setDescription('SM NAT LAN MTU size Device Allocation: SM')
cambiumEffectiveNetworkBridgeMTU = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 1700), )).clone(1500)).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEffectiveNetworkBridgeMTU.setStatus('current')
if mibBuilder.loadTexts: cambiumEffectiveNetworkBridgeMTU.setDescription('Device Bridge MTU size Device Allocation: AP, SM')
cambiumStaticRoutesTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 31), )
if mibBuilder.loadTexts: cambiumStaticRoutesTable.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesTable.setDescription('Static Routes Table')
cambiumIPAliasTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 32), )
if mibBuilder.loadTexts: cambiumIPAliasTable.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasTable.setDescription('IP aliases list table. Device Allocation: AP, SM')
cambiumCnsServConsStat = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumCnsServConsStat.setStatus('current')
if mibBuilder.loadTexts: cambiumCnsServConsStat.setDescription('cnMaestro Connection Status: Cambium provides cloud management of Cambium devices, called cnMaestro. This describes the state of the connection to the cnMaestro')
cambiumCnsServAccountID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumCnsServAccountID.setStatus('current')
if mibBuilder.loadTexts: cambiumCnsServAccountID.setDescription('cnMaestro Account ID: Displays cnMaestro Account ID, This is the account ID for the customer. It is returned from the cloud management system.')
cambiumAPCnsMGMTState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAPCnsMGMTState.setStatus('current')
if mibBuilder.loadTexts: cambiumAPCnsMGMTState.setDescription('AP Device management State')
cambiumIPAliasEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 32, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumIPAliasTableIndex"))
if mibBuilder.loadTexts: cambiumIPAliasEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasEntry.setDescription('IP aliases list table entry. Device Allocation: AP, SM.')
cambiumIPAliasTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 32, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIPAliasTableIndex.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasTableIndex.setDescription('IP aliases table index.')
cambiumIPAliasIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 32, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIPAliasIP.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasIP.setDescription('IP alias IP address.')
cambiumIPAliasNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 32, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIPAliasNetmask.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasNetmask.setDescription('IP alias netmask.')
cambiumARPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 20, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumARPIndex"))
if mibBuilder.loadTexts: cambiumARPEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumARPEntry.setDescription('Neighbour device IP/MAC pair entry')
cambiumARPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumARPIndex.setStatus('current')
if mibBuilder.loadTexts: cambiumARPIndex.setDescription('Index')
cambiumARPMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 20, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(17, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumARPMAC.setStatus('current')
if mibBuilder.loadTexts: cambiumARPMAC.setDescription('Neighbour device MAC Address')
cambiumARPIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 20, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumARPIP.setStatus('current')
if mibBuilder.loadTexts: cambiumARPIP.setDescription('Neighbour device IP Address')
cambiumARPInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 20, 1, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumARPInterface.setStatus('current')
if mibBuilder.loadTexts: cambiumARPInterface.setDescription('Neighbour device Interface')
cambiumStaticRoutesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 31, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumStaticRoutesIndex"))
if mibBuilder.loadTexts: cambiumStaticRoutesEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesEntry.setDescription('Static Routes Dest/Getway pair entry')
cambiumStaticRoutesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 31, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumStaticRoutesIndex.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesIndex.setDescription('Index')
cambiumStaticRoutesDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 31, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumStaticRoutesDestIP.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesDestIP.setDescription('Destination IP')
cambiumStaticRoutesGW = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 31, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumStaticRoutesGW.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesGW.setDescription('Getway IP')
cambiumStaticRoutesNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 31, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumStaticRoutesNetmask.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesNetmask.setDescription('Dest IP Netmask')
cambiumStaticRoutesInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 1, 4, 31, 1, 5), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(16, 16), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumStaticRoutesInterface.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesInterface.setDescription('Static Routes Interface Name')
cambiumStatsForceUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumStatsForceUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumStatsForceUpdate.setDescription('Cambium Statistics Update/Reset Action Statistic is updated automatically in the background each 15sec SNMP-GET on This OID forces update of subsequent Statistics tree SNMP-SET on This OID Resets all of the subsequent Statistic Device Allocation: AP, SM')
cambiumEthRXBytes = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthRXBytes.setStatus('current')
if mibBuilder.loadTexts: cambiumEthRXBytes.setDescription('Total Ethernet RX bytes Device Allocation: AP, SM')
cambiumEthRXPackets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthRXPackets.setStatus('current')
if mibBuilder.loadTexts: cambiumEthRXPackets.setDescription('Total Ethernet RX packets Device Allocation: AP, SM')
cambiumEthRXErrors = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthRXErrors.setStatus('current')
if mibBuilder.loadTexts: cambiumEthRXErrors.setDescription('Total Ethernet RX errors Device Allocation: AP, SM')
cambiumEthRXDrops = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthRXDrops.setStatus('current')
if mibBuilder.loadTexts: cambiumEthRXDrops.setDescription('Total Ethernet RX drops Device Allocation: AP, SM')
cambiumEthRXMulticast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthRXMulticast.setStatus('current')
if mibBuilder.loadTexts: cambiumEthRXMulticast.setDescription('Total Ethernet RX multicast Device Allocation: AP, SM')
cambiumEthRXBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthRXBroadcast.setStatus('current')
if mibBuilder.loadTexts: cambiumEthRXBroadcast.setDescription('Total Ethernet RX broadcast Device Allocation: AP, SM')
cambiumEthTXBytes = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthTXBytes.setStatus('current')
if mibBuilder.loadTexts: cambiumEthTXBytes.setDescription('Total Ethernet TX bytes Device Allocation: AP, SM')
cambiumEthTXPackets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthTXPackets.setStatus('current')
if mibBuilder.loadTexts: cambiumEthTXPackets.setDescription('Total Ethernet TX packets Device Allocation: AP, SM')
cambiumEthTXErrors = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthTXErrors.setStatus('current')
if mibBuilder.loadTexts: cambiumEthTXErrors.setDescription('Total Ethernet TX errors Device Allocation: AP, SM')
cambiumEthTXDrops = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthTXDrops.setStatus('current')
if mibBuilder.loadTexts: cambiumEthTXDrops.setDescription('Total Ethernet TX drops Device Allocation: AP, SM')
cambiumEthTXMulticast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthTXMulticast.setStatus('current')
if mibBuilder.loadTexts: cambiumEthTXMulticast.setDescription('Total Ethernet TX multicast Device Allocation: AP, SM')
cambiumEthTXBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumEthTXBroadcast.setStatus('current')
if mibBuilder.loadTexts: cambiumEthTXBroadcast.setDescription('Total Ethernet TX broadcast Device Allocation: AP, SM')
cambiumAthRXBytes = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthRXBytes.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthRXBytes.setDescription('Total Wireless RX bytes Device Allocation: AP, SM')
cambiumAthRXPackets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthRXPackets.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthRXPackets.setDescription('Total Wireless RX packets Device Allocation: AP, SM')
cambiumAthRXErrors = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthRXErrors.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthRXErrors.setDescription('Total Wireless RX errors Device Allocation: AP, SM')
cambiumAthRXDrops = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthRXDrops.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthRXDrops.setDescription('Total Wireless RX drops Device Allocation: AP, SM')
cambiumAthRXMulticast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 25), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthRXMulticast.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthRXMulticast.setDescription('Total Wireless RX multicast Device Allocation: AP, SM')
cambiumAthRXBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 26), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthRXBroadcast.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthRXBroadcast.setDescription('Total Wireless RX broadcast Device Allocation: AP, SM')
cambiumAthTXBytes = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthTXBytes.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthTXBytes.setDescription('Total Wireless TX bytes Device Allocation: AP, SM')
cambiumAthTXPackets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthTXPackets.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthTXPackets.setDescription('Total Wireless TX packets Device Allocation: AP, SM')
cambiumAthTXErrors = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthTXErrors.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthTXErrors.setDescription('Total Wireless TX errors Device Allocation: AP, SM')
cambiumAthTXDrops = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthTXDrops.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthTXDrops.setDescription('Total Wireless TX drops Device Allocation: AP, SM')
cambiumAthTXMulticast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthTXMulticast.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthTXMulticast.setDescription('Total Wireless TX multicast Device Allocation: AP, SM')
cambiumAthTXBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumAthTXBroadcast.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumAthTXBroadcast.setDescription('Total Wireless TX broadcast Device Allocation: AP, SM')
sysNetworkEntryAttempt = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysNetworkEntryAttempt.setStatus('current')
if mibBuilder.loadTexts: sysNetworkEntryAttempt.setDescription('Number of attempt to enter the AP network Device Allocation: AP')
sysNetworkEntrySuccess = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysNetworkEntrySuccess.setStatus('current')
if mibBuilder.loadTexts: sysNetworkEntrySuccess.setDescription('Number of successful network entry into the AP Device Allocation: AP')
sysNetworkEntryAuthenticationFailure = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysNetworkEntryAuthenticationFailure.setStatus('current')
if mibBuilder.loadTexts: sysNetworkEntryAuthenticationFailure.setDescription('Number of failed network entry into the AP due to authentication failure Device Allocation: AP')
sysDFSDetectedCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysDFSDetectedCount.setStatus('current')
if mibBuilder.loadTexts: sysDFSDetectedCount.setDescription('Number of DFS detected during channel initialization or during service which causes channel remap Device Allocation: AP, SM')
ulWLanKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 37), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanKbitCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanKbitCount.setDescription('Aggregated total Uplink data traffic in kilobits Device Allocation: AP, SM')
dlWLanKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 38), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanKbitCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanKbitCount.setDescription('Aggregated total Downlink data traffic in kilobits Device Allocation: AP, SM')
ulWLanTotalPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 39), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanTotalPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanTotalPacketCount.setDescription('Aggregated number of total Uplink data packet transmitted by SM or received by AP Device Allocation: AP, SM')
sysRebootCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysRebootCount.setStatus('obsolete')
if mibBuilder.loadTexts: sysRebootCount.setDescription('Device Reboot Counter Device Allocation: AP, SM')
dlWLanTotalPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 42), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanTotalPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanTotalPacketCount.setDescription('Aggregated number of total Downlink data packet transmitted by AP or received by SM Device Allocation: AP, SM')
ulWLanMultiBroadcastKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMultiBroadcastKbitCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanMultiBroadcastKbitCount.setDescription('Aggregated total Uplink multicast and broadcast data traffic in kilobits Device Allocation: AP, SM')
dlWLanMultiBroadcastKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 44), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMultiBroadcastKbitCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanMultiBroadcastKbitCount.setDescription('Aggregated total Downlink multicast and broadcast data traffic in kilobits Device Allocation: AP, SM')
wLanSessionDroppedCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wLanSessionDroppedCount.setStatus('current')
if mibBuilder.loadTexts: wLanSessionDroppedCount.setDescription('Aggregated number of SM session dropped due to no responses of bandwidth request response Device Allocation: AP, SM')
cambiumTDDStatsPerSTATable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46), )
if mibBuilder.loadTexts: cambiumTDDStatsPerSTATable.setStatus('current')
if mibBuilder.loadTexts: cambiumTDDStatsPerSTATable.setDescription('This table contains information relevant to customer TDD Statistics for connected SMs: - station MAC Address, - uplink data traffic in Kbits for a single SM; - downlink data traffic in Kbits for a single SM; - number of uplink total data packet received at AP for a single SM; - number of downlink total data packet transmitted at AP for a single SM; - number of uplink data packet dropped due to data integrity error or other RF related packer errors for a single SM; - number of downlink data packet dropped due to no-acknowledgement or other RF related packet error for a single SM; - number of downlink data packet dropped due to data buffer/queue overflow or other system internal buffer/sending related packet error for a single SM; - number of downlink data packet retransmitted due to no-acknowledge for a single SM. Device Allocation: AP')
cambiumTDDStatsPerSTAEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumTDDStatsPerSTAIndex"))
if mibBuilder.loadTexts: cambiumTDDStatsPerSTAEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumTDDStatsPerSTAEntry.setDescription('Customer TDD Statistics for particular SM Device Allocation: AP')
cambiumTDDStatsPerSTAIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumTDDStatsPerSTAIndex.setStatus('current')
if mibBuilder.loadTexts: cambiumTDDStatsPerSTAIndex.setDescription('Table index')
cambiumTDDStatsListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumTDDStatsListMAC.setStatus('current')
if mibBuilder.loadTexts: cambiumTDDStatsListMAC.setDescription('Connected SM WLAN MAC Address Device Allocation: AP')
ulWLanPerUserKbitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanPerUserKbitCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanPerUserKbitCount.setDescription('Uplink data traffic in Kbits for a single SM Device Allocation: AP')
dlWLanPerUserKbitCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanPerUserKbitCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanPerUserKbitCount.setDescription('Downlink data traffic in Kbits for a single SM Device Allocation: AP')
ulWLanPerUserTotalPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanPerUserTotalPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanPerUserTotalPacketCount.setDescription('Number of uplink total data packet received at AP for a single SM Device Allocation: AP')
dlWLanPerUserTotalPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanPerUserTotalPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanPerUserTotalPacketCount.setDescription('Number of downlink total data packet transmitted at AP for a single SM Device Allocation: AP')
ulWLanPerUserErrorDroppedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanPerUserErrorDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanPerUserErrorDroppedPacketCount.setDescription('Number of uplink data packet dropped due to data integrity error or other RF related packer errors for a single SM Device Allocation: AP')
dlWLanPerUserErrorDroppedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 8), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanPerUserErrorDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanPerUserErrorDroppedPacketCount.setDescription('Number of downlink data packet dropped due to no-acknowledgement or other RF related packet error for a single SM Device Allocation: AP')
dlWLanPerUserCapacityDroppedPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 9), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanPerUserCapacityDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanPerUserCapacityDroppedPacketCount.setDescription('Number of downlink data packet dropped due to data buffer/queue overflow or other system internal buffer/sending related packet error for a single SM Device Allocation: AP')
dlWLanPerUserRetransmitPacketCount = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanPerUserRetransmitPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanPerUserRetransmitPacketCount.setDescription('Number of downlink data packet retransmitted due to no-acknowledge for a single SM Device Allocation: AP')
dlWLanPerUserTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 46, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanPerUserTxPower.setStatus('current')
if mibBuilder.loadTexts: dlWLanPerUserTxPower.setDescription('Downlink TxPower of data packages for a single SM Device Allocation: AP')
ulWLanErrorDroppedPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 47), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanErrorDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanErrorDroppedPacketCount.setDescription('Aggregated number of total Uplink data packet dropped due to data integrity error or other data packet association or RF error in packet Device Allocation: AP, SM')
dlWLanErrorDroppedPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 48), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanErrorDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanErrorDroppedPacketCount.setDescription('Aggregated number of total Downlink data packet dropped due to data integrity error or other data packet association error in packet Device Allocation: AP, SM')
ulWLanCapacityDroppedPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanCapacityDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanCapacityDroppedPacketCount.setDescription('Aggregated number of total Uplink data packet dropped due to WLAN capacity issue in packets Device Allocation: AP, SM')
dlWLanCapacityDroppedPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 50), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanCapacityDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanCapacityDroppedPacketCount.setDescription('Aggregated number of total Downlink data packet dropped due to exceed data buffer, over capacity or internal packet package sent issues in packet Device Allocation: AP, SM')
ulWLanTotalAvailableFrameTimePerSecond = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanTotalAvailableFrameTimePerSecond.setStatus('current')
if mibBuilder.loadTexts: ulWLanTotalAvailableFrameTimePerSecond.setDescription('Aggregated number of total uplink available frame time can be scheduled for traffic in micro second for 1 second period Device Allocation: AP')
dlWLanTotalAvailableFrameTimePerSecond = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanTotalAvailableFrameTimePerSecond.setStatus('current')
if mibBuilder.loadTexts: dlWLanTotalAvailableFrameTimePerSecond.setDescription('Aggregated number of total downlink available frame time can be scheduled for traffic in micro second for 1 second period Device Allocation: AP')
ulWLanTotalUsedFrameTimePerSecond = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanTotalUsedFrameTimePerSecond.setStatus('current')
if mibBuilder.loadTexts: ulWLanTotalUsedFrameTimePerSecond.setDescription('Aggregated number of uplink frame time schedule to be used in microsecond for 1 second period Device Allocation: AP')
dlWLanTotalUsedFrameTimePerSecond = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 54), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanTotalUsedFrameTimePerSecond.setStatus('current')
if mibBuilder.loadTexts: dlWLanTotalUsedFrameTimePerSecond.setDescription('Aggregated number of downlink frame time scheduled to be used per frame for 1 second period Device Allocation: AP')
ulWLanTotalOverheadFrameTimePerSecond = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 55), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanTotalOverheadFrameTimePerSecond.setStatus('current')
if mibBuilder.loadTexts: ulWLanTotalOverheadFrameTimePerSecond.setDescription('Aggregated number of uplink frame time is used for overhead (preamble and inter-frame gap) in microsecond for 1 second period Device Allocation: AP')
dlWLanTotalOverheadFrameTimePerSecond = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanTotalOverheadFrameTimePerSecond.setStatus('current')
if mibBuilder.loadTexts: dlWLanTotalOverheadFrameTimePerSecond.setDescription('Aggregated number of downlink frame time is used for overhead (preamble ans inter-frame gap) per frame for 1 second period Device Allocation: AP')
cambiumMCSTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 57), )
if mibBuilder.loadTexts: cambiumMCSTable.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumMCSTable.setDescription('This table contains information relevant to customer TDD Statistics for MCS RX and TX rates: - MCS number (MCSxx); - Aggregated number of uplink frame time used for MCSxx in microsecond for 1 second period; - Aggregated number of downlink frame time used for MCSxx in microsecond for 1 second period. Device Allocation: AP')
cambiumMCSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 57, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumMCSIndex"))
if mibBuilder.loadTexts: cambiumMCSEntry.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumMCSEntry.setDescription('MCS table Device Allocation: AP')
cambiumMCSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 57, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumMCSIndex.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumMCSIndex.setDescription('MCS index Device Allocation: AP')
cambiumMCSNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 57, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumMCSNumber.setStatus('obsolete')
if mibBuilder.loadTexts: cambiumMCSNumber.setDescription('MCS number (MCSxx) Device Allocation: AP')
ulWLanMCSUsedFrameTimePerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 57, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCSUsedFrameTimePerSecond.setStatus('obsolete')
if mibBuilder.loadTexts: ulWLanMCSUsedFrameTimePerSecond.setDescription('Aggregated number of uplink frame time used for MCSxx in microsecond for 1 second period Device Allocation: AP')
dlWLanMCSUsedFrameTimePerSecond = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 57, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCSUsedFrameTimePerSecond.setStatus('obsolete')
if mibBuilder.loadTexts: dlWLanMCSUsedFrameTimePerSecond.setDescription('Aggregated number of downlink frame time used for MCSxx in microsecond for 1 second period Device Allocation: AP')
ulWLanRetransPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanRetransPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanRetransPacketCount.setDescription('Aggregated number of total Uplink data packet retransmitted due to no-acknowledgement. Device Allocation: SM')
dlWLanRetransPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 59), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanRetransPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanRetransPacketCount.setDescription('Aggregated number of total Downlink data packet retransmitted due to no-acknowledgement Device Allocation: AP')
ulWLanBroadcastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanBroadcastPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanBroadcastPacketCount.setDescription('Aggregated total Uplink broadcast packet counter Device Allocation: AP, SM')
dlWLanBroadcastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanBroadcastPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanBroadcastPacketCount.setDescription('Aggregated total Downlink broadcast packet counter Device Allocation: AP, SM')
ulWLanMulticastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMulticastPacketCount.setStatus('current')
if mibBuilder.loadTexts: ulWLanMulticastPacketCount.setDescription('Aggregated total Uplink multicast packet counter Device Allocation: AP, SM')
dlWLanMulticastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMulticastPacketCount.setStatus('current')
if mibBuilder.loadTexts: dlWLanMulticastPacketCount.setDescription('Aggregated total Downlink multicast packet counter Device Allocation: AP, SM')
sysCPUUsage = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 64), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUUsage.setStatus('current')
if mibBuilder.loadTexts: sysCPUUsage.setDescription('CPU Usage, measuring up to 0.1% Range: 0..1000 Device Allocation: AP, SM')
rxEtherLanKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxEtherLanKbitCount.setStatus('current')
if mibBuilder.loadTexts: rxEtherLanKbitCount.setDescription('Total Ethernet RX bytes Device Allocation: AP, SM')
rxEtherLanTotalPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 66), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxEtherLanTotalPacketCount.setStatus('current')
if mibBuilder.loadTexts: rxEtherLanTotalPacketCount.setDescription('Total Ethernet RX packets Device Allocation: AP, SM')
rxEtherLanErrorPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 67), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxEtherLanErrorPacketCount.setStatus('current')
if mibBuilder.loadTexts: rxEtherLanErrorPacketCount.setDescription('Total Ethernet RX errors Device Allocation: AP, SM')
rxEtherLanDroppedPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 68), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxEtherLanDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: rxEtherLanDroppedPacketCount.setDescription('Total Ethernet RX drops Device Allocation: AP, SM')
rxEtherLanMulticastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 69), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxEtherLanMulticastPacketCount.setStatus('current')
if mibBuilder.loadTexts: rxEtherLanMulticastPacketCount.setDescription('Total Ethernet RX multicast Device Allocation: AP, SM')
rxEtherLanBroadcastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 70), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxEtherLanBroadcastPacketCount.setStatus('current')
if mibBuilder.loadTexts: rxEtherLanBroadcastPacketCount.setDescription('Total Ethernet RX broadcast Device Allocation: AP, SM')
rxEtherLanMultiBroadcastKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 71), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rxEtherLanMultiBroadcastKbitCount.setStatus('current')
if mibBuilder.loadTexts: rxEtherLanMultiBroadcastKbitCount.setDescription('Aggregated total Ethernet RX multicast and broadcast data traffic Device Allocation: AP, SM')
txEtherLanKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 72), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txEtherLanKbitCount.setStatus('current')
if mibBuilder.loadTexts: txEtherLanKbitCount.setDescription('Total Ethernet TX bytes Device Allocation: AP, SM')
txEtherLanTotalPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 73), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txEtherLanTotalPacketCount.setStatus('current')
if mibBuilder.loadTexts: txEtherLanTotalPacketCount.setDescription('Total Ethernet TX packets Device Allocation: AP, SM')
txEtherLanErrorPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 74), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txEtherLanErrorPacketCount.setStatus('current')
if mibBuilder.loadTexts: txEtherLanErrorPacketCount.setDescription('Total Ethernet TX errors Device Allocation: AP, SM')
txEtherLanDroppedPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 75), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txEtherLanDroppedPacketCount.setStatus('current')
if mibBuilder.loadTexts: txEtherLanDroppedPacketCount.setDescription('Total Ethernet TX drops Device Allocation: AP, SM')
txEtherLanMulticastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 76), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txEtherLanMulticastPacketCount.setStatus('current')
if mibBuilder.loadTexts: txEtherLanMulticastPacketCount.setDescription('Total Ethernet TX multicast Device Allocation: AP, SM')
txEtherLanBroadcastPacketCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 77), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txEtherLanBroadcastPacketCount.setStatus('current')
if mibBuilder.loadTexts: txEtherLanBroadcastPacketCount.setDescription('Total Ethernet TX broadcast Device Allocation: AP, SM')
txEtherLanMultiBroadcastKbitCount = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 78), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: txEtherLanMultiBroadcastKbitCount.setStatus('current')
if mibBuilder.loadTexts: txEtherLanMultiBroadcastKbitCount.setDescription('Aggregated total Ethernet TX multicast and broadcast data traffic Device Allocation: AP, SM')
cambiumStatsResetTimer = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 79), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumStatsResetTimer.setStatus('current')
if mibBuilder.loadTexts: cambiumStatsResetTimer.setDescription('Status time to indicate when is the last time stats are reset Device Allocation: AP, SM')
ulWLanMCS00Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 80), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS00Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS00Packets.setDescription('Aggregated number of uplink packet received for MCS00 Device Allocation: AP')
ulWLanMCS01Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 81), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS01Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS01Packets.setDescription('Aggregated number of uplink packet received for MCS01 Device Allocation: AP')
ulWLanMCS02Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 82), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS02Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS02Packets.setDescription('Aggregated number of uplink packet received for MCS02 Device Allocation: AP')
ulWLanMCS03Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 83), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS03Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS03Packets.setDescription('Aggregated number of uplink packet received for MCS03 Device Allocation: AP')
ulWLanMCS04Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 84), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS04Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS04Packets.setDescription('Aggregated number of uplink packet received for MCS04 Device Allocation: AP')
ulWLanMCS05Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 85), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS05Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS05Packets.setDescription('Aggregated number of uplink packet received for MCS05 Device Allocation: AP')
ulWLanMCS06Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 86), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS06Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS06Packets.setDescription('Aggregated number of uplink packet received for MCS06 Device Allocation: AP')
ulWLanMCS07Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 87), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS07Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS07Packets.setDescription('Aggregated number of uplink packet received for MCS07 Device Allocation: AP')
ulWLanMCS08Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 88), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS08Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS08Packets.setDescription('Aggregated number of uplink packet received for MCS08 Device Allocation: AP')
ulWLanMCS09Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 89), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS09Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS09Packets.setDescription('Aggregated number of uplink packet received for MCS09 Device Allocation: AP')
ulWLanMCS10Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 90), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS10Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS10Packets.setDescription('Aggregated number of uplink packet received for MCS10 Device Allocation: AP')
ulWLanMCS11Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 91), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS11Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS11Packets.setDescription('Aggregated number of uplink packet received for MCS11 Device Allocation: AP')
ulWLanMCS12Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 92), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS12Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS12Packets.setDescription('Aggregated number of uplink packet received for MCS12 Device Allocation: AP')
ulWLanMCS13Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 93), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS13Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS13Packets.setDescription('Aggregated number of uplink packet received for MCS13 Device Allocation: AP')
ulWLanMCS14Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 94), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS14Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS14Packets.setDescription('Aggregated number of uplink packet received for MCS14 Device Allocation: AP')
ulWLanMCS15Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 95), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ulWLanMCS15Packets.setStatus('current')
if mibBuilder.loadTexts: ulWLanMCS15Packets.setDescription('Aggregated number of uplink packet received for MCS15 Device Allocation: AP')
dlWLanMCS00Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 96), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS00Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS00Packets.setDescription('Aggregated number of downlink packet received for MCS00 Device Allocation: AP')
dlWLanMCS01Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 97), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS01Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS01Packets.setDescription('Aggregated number of downlink packet received for MCS01 Device Allocation: AP')
dlWLanMCS02Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 98), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS02Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS02Packets.setDescription('Aggregated number of downlink packet received for MCS02 Device Allocation: AP')
dlWLanMCS03Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 99), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS03Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS03Packets.setDescription('Aggregated number of downlink packet received for MCS03 Device Allocation: AP')
dlWLanMCS04Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 100), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS04Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS04Packets.setDescription('Aggregated number of downlink packet received for MCS04 Device Allocation: AP')
dlWLanMCS05Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 101), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS05Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS05Packets.setDescription('Aggregated number of downlink packet received for MCS05 Device Allocation: AP')
dlWLanMCS06Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 102), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS06Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS06Packets.setDescription('Aggregated number of downlink packet received for MCS06 Device Allocation: AP')
dlWLanMCS07Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 103), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS07Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS07Packets.setDescription('Aggregated number of downlink packet received for MCS07 Device Allocation: AP')
dlWLanMCS08Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 104), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS08Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS08Packets.setDescription('Aggregated number of downlink packet received for MCS08 Device Allocation: AP')
dlWLanMCS09Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 105), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS09Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS09Packets.setDescription('Aggregated number of downlink packet received for MCS09 Device Allocation: AP')
dlWLanMCS10Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 106), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS10Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS10Packets.setDescription('Aggregated number of downlink packet received for MCS10 Device Allocation: AP')
dlWLanMCS11Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 107), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS11Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS11Packets.setDescription('Aggregated number of downlink packet received for MCS11 Device Allocation: AP')
dlWLanMCS12Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 108), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS12Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS12Packets.setDescription('Aggregated number of downlink packet received for MCS12 Device Allocation: AP')
dlWLanMCS13Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 109), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS13Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS13Packets.setDescription('Aggregated number of downlink packet received for MCS13 Device Allocation: AP')
dlWLanMCS14Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 110), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS14Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS14Packets.setDescription('Aggregated number of downlink packet received for MCS14 Device Allocation: AP')
dlWLanMCS15Packets = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 2, 1, 111), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlWLanMCS15Packets.setStatus('current')
if mibBuilder.loadTexts: dlWLanMCS15Packets.setDescription('Aggregated number of downlink packet received for MCS15 Device Allocation: AP')
syslogServerIPFirst = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerIPFirst.setStatus('current')
if mibBuilder.loadTexts: syslogServerIPFirst.setDescription('Syslog Server IP Address 1 Device Allocation: AP, SM')
syslogServerIPSecond = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerIPSecond.setStatus('current')
if mibBuilder.loadTexts: syslogServerIPSecond.setDescription('Syslog Server IP Address 2 Device Allocation: AP, SM')
syslogServerIPThird = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerIPThird.setStatus('current')
if mibBuilder.loadTexts: syslogServerIPThird.setDescription('Syslog Server IP Address 3 Device Allocation: AP, SM')
syslogServerIPFourth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerIPFourth.setStatus('current')
if mibBuilder.loadTexts: syslogServerIPFourth.setDescription('Syslog Server IP Address 4 Device Allocation: AP, SM')
syslogServerLogToWeb = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerLogToWeb.setStatus('current')
if mibBuilder.loadTexts: syslogServerLogToWeb.setDescription('Enable Log to WEB Interface: 0 - Disable, 1 - Enable Device Allocation: AP, SM')
syslogServerLogMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: syslogServerLogMask.setStatus('current')
if mibBuilder.loadTexts: syslogServerLogMask.setDescription('Log Level Mask: 0x00 - all messages, 0x01 - emerg, 0x02 - alert, 0x04 - crit, 0x08 - err, 0x10 - warning, 0x20 - notice, 0x40 - info, 0x80 - debug Device Allocation: AP, SM')
dhcpLanEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanEnable.setStatus('current')
if mibBuilder.loadTexts: dhcpLanEnable.setDescription('Local DHCP Server Enable: 0 - Disable 1 - Enable Device Allocation: SM')
dhcpLanStart = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanStart.setStatus('current')
if mibBuilder.loadTexts: dhcpLanStart.setDescription('Local DHCP Server IP Start Address Offset from the Network address. Device Allocation: SM')
dhcpLanLimit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-2147483647, 2147483647)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanLimit.setStatus('current')
if mibBuilder.loadTexts: dhcpLanLimit.setDescription('Local DHCP Server IP End Address Offset from the Network address. Device Allocation: SM')
dhcpLanLeasetime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 24)).clone(24)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanLeasetime.setStatus('current')
if mibBuilder.loadTexts: dhcpLanLeasetime.setDescription('Local DHCP Lease Setup in hours Valid Range: 1 hour - 24 hours Device Allocation: SM')
dhcpLanHostTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 5), )
if mibBuilder.loadTexts: dhcpLanHostTable.setStatus('current')
if mibBuilder.loadTexts: dhcpLanHostTable.setDescription('Table for DHCP Hosts Device Allocation: SM')
dhcpLanHostEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 5, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "dhcpLanHostIndex"))
if mibBuilder.loadTexts: dhcpLanHostEntry.setStatus('current')
if mibBuilder.loadTexts: dhcpLanHostEntry.setDescription('DHCP Hosts Table Entry Device Allocation: SM')
dhcpLanHostIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanHostIndex.setStatus('current')
if mibBuilder.loadTexts: dhcpLanHostIndex.setDescription('DHCP host Table Index Table Entry is cleared if Index is set to zero Device Allocation: SM')
dhcpLanHostIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanHostIP.setStatus('current')
if mibBuilder.loadTexts: dhcpLanHostIP.setDescription("DHCP Lan Host IP 'ignore' or the IP address to be used for DHCP host Device Allocation: SM")
dhcpLanHostMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 5, 1, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(17, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanHostMAC.setStatus('current')
if mibBuilder.loadTexts: dhcpLanHostMAC.setDescription('The hardware address of this host Device Allocation: SM')
dhcpLanHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 5, 1, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 128), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpLanHostName.setStatus('current')
if mibBuilder.loadTexts: dhcpLanHostName.setDescription('Optional hostname to assign Device Allocation: SM')
dhcpOption82 = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpOption82.setStatus('current')
if mibBuilder.loadTexts: dhcpOption82.setDescription('DHCP Option82: 0 - Disable 1 - Enable Device Allocation: AP')
cambiumSSHServerEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumSSHServerEnable.setStatus('current')
if mibBuilder.loadTexts: cambiumSSHServerEnable.setDescription('Cambium SSH Server: 0 - Disable, 1 - Enable Device Allocation: AP, SM')
networkMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkMode.setStatus('current')
if mibBuilder.loadTexts: networkMode.setDescription('SM Network Mode: 1 - NAT, 2 - Bridge, 3 - Router Device Allocation: SM')
networkSTP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkSTP.setStatus('current')
if mibBuilder.loadTexts: networkSTP.setDescription('Spanning Tree Protocol: 0 - Disable STP (Default mode) 1 - Enable STP Device Allocation: AP, SM')
networkLanIPAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanIPAddressMode.setStatus('current')
if mibBuilder.loadTexts: networkLanIPAddressMode.setDescription('SM NAT LAN IP Address Mode 1 - Static, 2 - DHCP Device Allocation: AP, SM')
networkLanIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanIPAddr.setStatus('current')
if mibBuilder.loadTexts: networkLanIPAddr.setDescription('SM NAT LAN IP Address Device Allocation: SM')
networkLanNetmask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanNetmask.setStatus('current')
if mibBuilder.loadTexts: networkLanNetmask.setDescription('SM NAT LAN IP Subnet Mask Device Allocation: SM')
networkLanGatewayIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanGatewayIP.setStatus('current')
if mibBuilder.loadTexts: networkLanGatewayIP.setDescription('SM NAT LAN Gateway IP Address Device Allocation: SM')
networkLanDNSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanDNSIPAddr.setStatus('obsolete')
if mibBuilder.loadTexts: networkLanDNSIPAddr.setDescription('SM NAT LAN DNS Server IP Address Device Allocation: SM')
networkLanMTU = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 1700), )).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanMTU.setStatus('current')
if mibBuilder.loadTexts: networkLanMTU.setDescription('SM NAT LAN MTU size Device Allocation: SM')
networkLanDNSIPAddrPrimary = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanDNSIPAddrPrimary.setStatus('current')
if mibBuilder.loadTexts: networkLanDNSIPAddrPrimary.setDescription('SM NAT LAN DNS Server IP Address Device Allocation: SM Primary Server IP')
networkLanDNSIPAddrSecondary = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanDNSIPAddrSecondary.setStatus('current')
if mibBuilder.loadTexts: networkLanDNSIPAddrSecondary.setDescription('SM NAT LAN DNS Server IP Address Device Allocation: SM Secondary Server IP')
networkLanAutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanAutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: networkLanAutoNegotiation.setDescription('Lan Autonegotiation 0 - Disable, 1 - Enable Device Allocation: AP, SM')
networkLanSpeed = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), ValueRangeConstraint(1000, 1000), )).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanSpeed.setStatus('current')
if mibBuilder.loadTexts: networkLanSpeed.setDescription('LAN Speed 10 - 10 Mb/s, 100 - 100 Mb/s, 1000 - 1000 Mb/s Device Allocation: AP, SM')
networkLanDuplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanDuplex.setStatus('current')
if mibBuilder.loadTexts: networkLanDuplex.setDescription('LAN Duplex Mode 0 - Half, 1 - Full Device Allocation: AP, SM')
networkBroadcastStormEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBroadcastStormEnabled.setStatus('current')
if mibBuilder.loadTexts: networkBroadcastStormEnabled.setDescription('Broadcast Strom Control 0 - Disabled, 1 - Enabled Device Allocation: AP, SM')
networkBroadcastStormRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBroadcastStormRate.setStatus('current')
if mibBuilder.loadTexts: networkBroadcastStormRate.setDescription('Broadcast Strom Control Rate in frames per second Device Allocation: AP, SM')
networkLan2Enabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLan2Enabled.setStatus('current')
if mibBuilder.loadTexts: networkLan2Enabled.setDescription('AUX Lan Port Enabled 0 - Disable, 1 - Enable Device Allocation: AP, SM')
networkLan2AutoNegotiation = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLan2AutoNegotiation.setStatus('current')
if mibBuilder.loadTexts: networkLan2AutoNegotiation.setDescription('Lan Autonegotiation 0 - Disable, 1 - Enable Device Allocation: AP, SM')
networkLan2Speed = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(10, 10), ValueRangeConstraint(100, 100), )).clone(100)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLan2Speed.setStatus('current')
if mibBuilder.loadTexts: networkLan2Speed.setDescription('LAN Speed 10 - 10 Mb/s, 100 - 100 Mb/s Device Allocation: AP, SM')
networkLan2Duplex = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLan2Duplex.setStatus('current')
if mibBuilder.loadTexts: networkLan2Duplex.setDescription('LAN Duplex Mode 0 - Half, 1 - Full Device Allocation: AP, SM')
networkLan2PoEEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLan2PoEEnabled.setStatus('current')
if mibBuilder.loadTexts: networkLan2PoEEnabled.setDescription('PoE Enabled 0 - Disabled, 1 - Enabled Device Allocation: SM')
networkLanEnabled = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanEnabled.setStatus('current')
if mibBuilder.loadTexts: networkLanEnabled.setDescription('Lan Port Enabled 0 - Disable, 1 - Enable Device Allocation: SM')
networkWanIPAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanIPAddressMode.setStatus('current')
if mibBuilder.loadTexts: networkWanIPAddressMode.setDescription('SM NAT WAN IP Address Mode 1 - Static, 2 - DHCP Device Allocation: SM')
networkWanIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanIPAddr.setStatus('current')
if mibBuilder.loadTexts: networkWanIPAddr.setDescription('SM NAT WAN IP Address Device Allocation: SM')
networkWanNetmask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanNetmask.setStatus('current')
if mibBuilder.loadTexts: networkWanNetmask.setDescription('SM NAT WAN IP Subnet Mask Device Allocation: SM')
networkWanGatewayIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanGatewayIP.setStatus('current')
if mibBuilder.loadTexts: networkWanGatewayIP.setDescription('SM NAT WAN Gateway IP Address Device Allocation: SM')
networkWanDNSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanDNSIPAddr.setStatus('obsolete')
if mibBuilder.loadTexts: networkWanDNSIPAddr.setDescription('SM NAT WAN DNS Server IP Address Device Allocation: SM')
networkWanMTU = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 1700), )).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanMTU.setStatus('current')
if mibBuilder.loadTexts: networkWanMTU.setDescription('SM NAT WAN MTU size Device Allocation: SM')
networkWanDNSIPAddrPrimary = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanDNSIPAddrPrimary.setStatus('current')
if mibBuilder.loadTexts: networkWanDNSIPAddrPrimary.setDescription('SM NAT WAN DNS Server IP Address Device Allocation: SM Primary Server IP')
networkWanDNSIPAddrSecondary = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanDNSIPAddrSecondary.setStatus('current')
if mibBuilder.loadTexts: networkWanDNSIPAddrSecondary.setDescription('SM NAT WAN DNS Server IP Address Device Allocation: SM Secondary Server IP')
networkWanPPPoE = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoE.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoE.setDescription('SM only.Enable or Disable PPPoE mode. 1 is enable 0 is disable')
networkWanPPPoEUsername = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEUsername.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEUsername.setDescription('SM only.Username to authenticate with PPPoE Server')
networkWanPPPoEPassword = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEPassword.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEPassword.setDescription('SM only.Password to authenticate with PPPoE Server')
networkWanPPPoEAC = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEAC.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEAC.setDescription('SM only.PPPoE Access Concentrator Name')
networkWanPPPoEService = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEService.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEService.setDescription('SM only.PPPoE Service Name')
networkWanPPPoEAuth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEAuth.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEAuth.setDescription('SM only.This indicates type of authentication with PPPoE Server. Options are 0 - All 1 - PAP 2 - CHAP')
networkWanPPPoEMTU = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 1492), )).clone(1492)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEMTU.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEMTU.setDescription('SM only.MTU size to be used for PPPoE connection')
networkWanPPPoEKeepAlive = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(5, 180), )).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEKeepAlive.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEKeepAlive.setDescription('SM only.Time in seconds for the keep Alive messages from PPPoE client to PPPoE Server')
networkWanPPPoEMSSClamping = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 3, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkWanPPPoEMSSClamping.setStatus('current')
if mibBuilder.loadTexts: networkWanPPPoEMSSClamping.setDescription('SM only.Enable or disable MSS Clamping 0 - Disable 1 - Enable')
networkBridgeIPAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeIPAddressMode.setStatus('current')
if mibBuilder.loadTexts: networkBridgeIPAddressMode.setDescription('Device Bridge IP Address Mode 1 - Static, 2 - DHCP Device Allocation: AP, SM')
networkBridgeIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeIPAddr.setStatus('current')
if mibBuilder.loadTexts: networkBridgeIPAddr.setDescription('Device Bridge IP Address Device Allocation: AP, SM')
networkBridgeNetmask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeNetmask.setStatus('current')
if mibBuilder.loadTexts: networkBridgeNetmask.setDescription('Device Bridge IP Subnet Mask Device Allocation: AP, SM')
networkBridgeGatewayIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeGatewayIP.setStatus('current')
if mibBuilder.loadTexts: networkBridgeGatewayIP.setDescription('Device Bridge Gateway IP Address Device Allocation: AP, SM')
networkBridgeDNSIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeDNSIPAddr.setStatus('obsolete')
if mibBuilder.loadTexts: networkBridgeDNSIPAddr.setDescription('Device Bridge DNS Server IP Address Device Allocation: AP, SM')
networkBridgeMTU = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(576, 1700), )).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeMTU.setStatus('current')
if mibBuilder.loadTexts: networkBridgeMTU.setDescription('Device Bridge MTU size Device Allocation: AP, SM')
networkBridgeDNSIPAddrPrimary = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeDNSIPAddrPrimary.setStatus('current')
if mibBuilder.loadTexts: networkBridgeDNSIPAddrPrimary.setDescription('Device Bridge DNS Server IP Address Device Allocation: AP, SM Primary Server IP')
networkBridgeDNSIPAddrSecondary = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 7, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkBridgeDNSIPAddrSecondary.setStatus('current')
if mibBuilder.loadTexts: networkBridgeDNSIPAddrSecondary.setDescription('Device Bridge DNS Server IP Address Device Allocation: AP, SM Secondary Server IP')
networkPortSecurity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkPortSecurity.setStatus('current')
if mibBuilder.loadTexts: networkPortSecurity.setDescription('LAN Port Security switch: 0 - Disable 1 - Enable Device Allocation: SM')
networkPortSecurityMax = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkPortSecurityMax.setStatus('current')
if mibBuilder.loadTexts: networkPortSecurityMax.setDescription('Number of secure MAC addresses: 1-254 - Fixed Learned MAC limit Device Allocation: SM')
networkPortSecurityAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1440)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkPortSecurityAgingTime.setStatus('current')
if mibBuilder.loadTexts: networkPortSecurityAgingTime.setDescription('Security MAC address aging time: This prameter indicates on how long to store learned MAC address in the cache in seconds, 0 - do not delete MAC address from the buffer, Default - is 300 seconds. Device Allocation: AP, SM')
mcastGroupLimit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 5), )).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastGroupLimit.setStatus('current')
if mibBuilder.loadTexts: mcastGroupLimit.setDescription('Multicast Group Limit: Default - 3 Multicast Groups for SM, unlimited for AP. Device Allocation: SM')
mgmtIFEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFEnable.setStatus('current')
if mibBuilder.loadTexts: mgmtIFEnable.setDescription('Separate Management Interface Enabled: 0 - Disabled, 1 - Enabled Device Allocation: SM')
mgmtIFVLAN = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFVLAN.setStatus('current')
if mibBuilder.loadTexts: mgmtIFVLAN.setDescription('Separate Management Interface VLAN Enabled: 0 - Disabled, 1 - Enabled Device Allocation: SM')
mgmtIFVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFVID.setStatus('current')
if mibBuilder.loadTexts: mgmtIFVID.setDescription('Separate Management Interface VLAN Device Allocation: SM')
mgmtIFVP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFVP.setStatus('current')
if mibBuilder.loadTexts: mgmtIFVP.setDescription('Separate Management Interface VP Device Allocation: SM')
mgmtIFIPAddressMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFIPAddressMode.setStatus('current')
if mibBuilder.loadTexts: mgmtIFIPAddressMode.setDescription('Separate Management IP Address Mode 1 - Static, 2 - DHCP Device Allocation: SM')
mgmtIFIPAddr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFIPAddr.setStatus('current')
if mibBuilder.loadTexts: mgmtIFIPAddr.setDescription('Separate Management IP Address Device Allocation: SM')
mgmtIFNetmask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFNetmask.setStatus('current')
if mibBuilder.loadTexts: mgmtIFNetmask.setDescription('Separate Management IP Subnet Mask Device Allocation: SM')
mgmtIFGateway = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 20, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtIFGateway.setStatus('current')
if mibBuilder.loadTexts: mgmtIFGateway.setDescription('Separate Management IP Gateway Device Allocation: SM')
cambiumIPAliasCnfTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27, 1), )
if mibBuilder.loadTexts: cambiumIPAliasCnfTable.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasCnfTable.setDescription('Static Network Table')
cambiumIPAliasCnfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27, 1, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumIPAliasesIndex"))
if mibBuilder.loadTexts: cambiumIPAliasCnfEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasCnfEntry.setDescription('Static Network Table Entry Device Allocation: SM')
cambiumIPAliasesIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIPAliasesIndex.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasesIndex.setDescription('IP Alias Table Index Table Entry is cleared if Index is set to zero Device Allocation: AP, SM')
cambiumIPAliasesIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIPAliasesIpAddr.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasesIpAddr.setDescription('Network IP Alliases address')
cambiumIPAliasesNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIPAliasesNetmask.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasesNetmask.setDescription('Network Dest IP Netmask')
cambiumIPAliasesInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIPAliasesInfo.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasesInfo.setDescription('Network Info message')
cambiumIPAliasesEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 27, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIPAliasesEnable.setStatus('current')
if mibBuilder.loadTexts: cambiumIPAliasesEnable.setDescription('Enable/Disable IP Aliases in Router mode Device Allocation: SM')
networkLanDefaultIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 25), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkLanDefaultIP.setStatus('current')
if mibBuilder.loadTexts: networkLanDefaultIP.setDescription('Default Network IP Device Allocation: SM')
networkRelaydEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkRelaydEnable.setStatus('current')
if mibBuilder.loadTexts: networkRelaydEnable.setDescription('Relay for forwarding DHCP packets: 0 - Disable 1 - Enable Device Allocation: AP,SM')
networkUPNP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 21, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkUPNP.setStatus('current')
if mibBuilder.loadTexts: networkUPNP.setDescription('Enable UPnP on SM in NAT mode 0 - Disable, 1 - Enable Device Allocation: SM')
networkNATPMP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 21, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: networkNATPMP.setStatus('current')
if mibBuilder.loadTexts: networkNATPMP.setDescription('Enable NAT-PMP on SM in NAT mode 0 - Disable, 1 - Enable Device Allocation: SM')
snmpReadOnlyCommunity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 1), DisplayString().clone('public')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadOnlyCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpReadOnlyCommunity.setDescription('SNMP read-only community name Device Allocation: AP, SM')
snmpReadWriteCommunity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 2), DisplayString().clone('private')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpReadWriteCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpReadWriteCommunity.setDescription('SNMP read-write community name Device Allocation: AP, SM')
snmpSystemName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 3), DisplayString().clone('CambiumNetworks')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemName.setStatus('current')
if mibBuilder.loadTexts: snmpSystemName.setDescription('SNMP System Name Device Allocation: AP, SM')
snmpSystemDescription = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSystemDescription.setStatus('current')
if mibBuilder.loadTexts: snmpSystemDescription.setDescription('SNMP System Description Device Allocation: AP, SM')
snmpTrapEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEnable.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEnable.setDescription('SNMP Trap Support Enable 0 - Disable, 1 - Enable Device Allocation: AP, SM')
snmpTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: snmpTrapCommunity.setDescription('SNMP Trap Community Device Allocation: AP, SM')
snmpTrapTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 7), )
if mibBuilder.loadTexts: snmpTrapTable.setStatus('current')
if mibBuilder.loadTexts: snmpTrapTable.setDescription('SNMP Trap Servers Table Device Allocation: AP, SM')
snmpTrapEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 7, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "snmpTrapEntryIndex"))
if mibBuilder.loadTexts: snmpTrapEntry.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntry.setDescription('SNMP Trap Table Entry Device Allocation: AP, SM')
snmpTrapEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntryIndex.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntryIndex.setDescription('SNMP Trap Server IP Table Index Table Entry is cleared if Index is set to zero Device Allocation: AP, SM')
snmpTrapEntryIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 7, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntryIP.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntryIP.setDescription('SNMP Trap Server IP Address Device Allocation: AP, SM')
snmpTrapEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 7, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapEntryPort.setStatus('current')
if mibBuilder.loadTexts: snmpTrapEntryPort.setDescription('SNMP Trap Server Port Number Device Allocation: AP, SM')
snmpDomainAccessEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpDomainAccessEnable.setStatus('current')
if mibBuilder.loadTexts: snmpDomainAccessEnable.setDescription('SNMP Access Domain Enable 0 - Disable, 1 - Enable Device Allocation: AP, SM')
snmpDomainAccessIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 9), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(7, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpDomainAccessIP.setStatus('current')
if mibBuilder.loadTexts: snmpDomainAccessIP.setDescription('SNMP Access Domain IP Address Device Allocation: AP, SM')
snmpDomainAccessIPMask = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 5, 10), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(7, 15), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpDomainAccessIPMask.setStatus('current')
if mibBuilder.loadTexts: snmpDomainAccessIPMask.setDescription('SNMP Access Domain IP Mask Device Allocation: AP, SM')
systemConfigTimezone = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 1), DisplayString().clone('GMT')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigTimezone.setStatus('current')
if mibBuilder.loadTexts: systemConfigTimezone.setDescription('Time Zone Device Allocation: AP, SM')
systemConfigDeviceName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 128), )).clone('Cambium-STA')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigDeviceName.setStatus('current')
if mibBuilder.loadTexts: systemConfigDeviceName.setDescription('SM Device Name Device Allocation: AP, SM')
systemConfigETSILicense = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('ETSIkey')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemConfigETSILicense.setStatus('current')
if mibBuilder.loadTexts: systemConfigETSILicense.setDescription('ETSI Country Code. Set the country code using license key on AP. Visit Cambium Webserver to get the license key. The country code set in license key will be used to set country code on AP if the key validation pass. This parameter is for AP only. Device Allocation: AP')
systemConfigSWLockBit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigSWLockBit.setStatus('current')
if mibBuilder.loadTexts: systemConfigSWLockBit.setDescription('Software Lock Bit. This bit indicates if the Software Lock Bit is set or not. If the software bit is set then country code needs to be set using License Key from Cambium Webserver 0 - Bit not Set, 1 - Bit is set Device Allocation: AP, SM')
systemConfigHWLockBit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigHWLockBit.setStatus('current')
if mibBuilder.loadTexts: systemConfigHWLockBit.setDescription('Hardware Lock Bit. This bit indicates if the hardware Lock Bit is set or not. If the hardware bit is set then country code cannot be changed. 0 - Bit not Set, 1 - Bit is set Device Allocation: AP, SM')
systemDeviceLocLatitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDeviceLocLatitude.setStatus('current')
if mibBuilder.loadTexts: systemDeviceLocLatitude.setDescription('Device GPS Location Latitude. Coordinates of device in (h ddd.ddddd) format. Used to display location at Google Maps service. Device Allocation: AP, SM')
systemDeviceLocLongitude = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDeviceLocLongitude.setStatus('current')
if mibBuilder.loadTexts: systemDeviceLocLongitude.setDescription('Device GPS Location Longitude. Coordinates of device in (h ddd.ddddd) format. Used to display location at Google Maps service. Device Allocation: AP, SM')
systemDeviceLocHeight = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemDeviceLocHeight.setStatus('current')
if mibBuilder.loadTexts: systemDeviceLocHeight.setDescription('Device GPS Location Longitude. Altitude of device above/below mean sea level. Device Allocation: AP, SM')
systemConfigisGPSkeyOK = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigisGPSkeyOK.setStatus('obsolete')
if mibBuilder.loadTexts: systemConfigisGPSkeyOK.setDescription('GPS Lock. This field indicates if the GPS Key is OK. Based on this the GPS is locked on the board. 0 - GPS Key is bad. Sync Source defaulted to Internal GPS only 1 - GPS Key is good. User can set sync source to any value Device Allocation: AP')
systemConfigGPSLockBit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigGPSLockBit.setStatus('obsolete')
if mibBuilder.loadTexts: systemConfigGPSLockBit.setDescription("GPS Lock Bit. This bit indicates if the GPS feature Lock Bit is set or not. If the hardware bit is set then GPS synchronisation can't be used. 0 - No limitation of usage GPS synchronisation, 1 - GPS synchronisation not allowed, 2 - The GPSkey required to allow synchronisation Device Allocation: AP")
systemConfigSMLockBit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigSMLockBit.setStatus('current')
if mibBuilder.loadTexts: systemConfigSMLockBit.setDescription(' SM Lock Bit This bit indicates if the AP is locked for Maximum SM registrations support. If the bit is set then A maximum of 10 SMs can be registered to an AP. 0 - No limitation, up to 120 SM registrations are supported , 1 - AP is tiered with 10 SM registrations Device Allocation: AP')
systemConfigSMLimit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigSMLimit.setStatus('current')
if mibBuilder.loadTexts: systemConfigSMLimit.setDescription('SM Registrations limit. Indicates the maximum number of SMs that can be registered to an AP Device Allocation: AP')
powerSequenceFactoryDefault = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: powerSequenceFactoryDefault.setStatus('current')
if mibBuilder.loadTexts: powerSequenceFactoryDefault.setDescription("Set this to enable or disable the ability to factory default the radio's configuration using the power cycle sequence(explained in the User Guide). 0 - Disabled 1 - Enabled Device Allocation: AP, SM")
systemConfigLockedCC = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 16), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigLockedCC.setStatus('current')
if mibBuilder.loadTexts: systemConfigLockedCC.setDescription('Return Locked Country Value in case if device is locked for particular country. Device Allocation: AP, SM')
systemConfigMinAntGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemConfigMinAntGain.setStatus('current')
if mibBuilder.loadTexts: systemConfigMinAntGain.setDescription('Return Minimum allowed Antenna Gain. Device Allocation: AP, SM')
systemNtpServerIPMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemNtpServerIPMode.setStatus('current')
if mibBuilder.loadTexts: systemNtpServerIPMode.setDescription('NTP Server IP Address receive mode 1 - Static, 2 - DHCP Device Allocation: AP, SM')
systemNtpServerPrimaryIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemNtpServerPrimaryIP.setStatus('current')
if mibBuilder.loadTexts: systemNtpServerPrimaryIP.setDescription('NTP Server 1 IP Address Device Allocation: AP, SM')
systemNtpServerSecondaryIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 6, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: systemNtpServerSecondaryIP.setStatus('current')
if mibBuilder.loadTexts: systemNtpServerSecondaryIP.setDescription('NTP Server 2 IP Address Device Allocation: AP, SM')
webService = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: webService.setStatus('current')
if mibBuilder.loadTexts: webService.setDescription('Web Service 1 - HTTP, 2 - HTTPS Device Allocation: AP, SM')
httpPort = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 7, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(80)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpPort.setStatus('current')
if mibBuilder.loadTexts: httpPort.setDescription('HTTP Port Device Allocation: AP, SM')
httpsPort = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 7, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)).clone(443)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: httpsPort.setStatus('current')
if mibBuilder.loadTexts: httpsPort.setDescription('HTTPs Port')
wirelessDeviceCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 1, 1), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 2), )).clone('NS')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessDeviceCountryCode.setStatus('current')
if mibBuilder.loadTexts: wirelessDeviceCountryCode.setDescription('Country Code. If US Lock SKU, this is US and cannot be changed. If not locked, for 9350, it will be None, for 9344, it will be Follow AP CC. When user change CC at SM, the SM Scan Frequency Type will be FA Device Allocation: AP')
wirelessType = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessType.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessType.setDescription('Wireless type: 1 - tdd driver, 2 - 80211 (aquila) driver Device Allocation: AP, SM')
wirelessDefaultCountryCode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 1, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(2, 2), )).clone('OT')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessDefaultCountryCode.setStatus('current')
if mibBuilder.loadTexts: wirelessDefaultCountryCode.setDescription('Default Country Code.')
wirelessInterfaceMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceMode.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceMode.setDescription('Wireless Interface Mode: 1 for AP, 2 for SM, 3 for Spectrum Analyzer Device Allocation: AP, SM')
wirelessInterfaceSSID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32)).clone('Cambium-AP')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceSSID.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceSSID.setDescription('Wireless SSID Device Allocation: AP')
wirelessInterfaceEncryption = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceEncryption.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceEncryption.setDescription('Wireless authentication type: 1 - Open mode, 2 - wpa2 mode, 3 - EAP-TTLS Device Allocation: AP')
wirelessInterfaceEncryptionKey = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 63), )).clone('Cam39-Tai!wdmv')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceEncryptionKey.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceEncryptionKey.setDescription('Pre-shared authentication key. Device Allocation: AP')
wirelessInterfaceHTMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceHTMode.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceHTMode.setDescription('Frequency Bandwidth 1 - 20Mhz, 2 - 40Mhz, 3 - 10Mhz, 4 - 5MHz Device Allocation: AP')
wirelessInterfaceTXPower = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-24, 30)).clone(7)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceTXPower.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceTXPower.setDescription('TX Power (Board Output Conducted) Device Allocation: AP')
wirelessInterfaceTDDAntennaGain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30)).clone(16)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceTDDAntennaGain.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceTDDAntennaGain.setDescription('Antenna Gain Device Allocation: AP, SM')
wirelessInterfaceTDDRatio = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceTDDRatio.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceTDDRatio.setDescription('DL/UL Ratio: 1 - 75/25, 2 - 50/50, 3 - 30/70, 4 - Flexible Device Allocation: AP')
wirelessInterfaceTPCTRL = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-80, -40)).clone(-60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceTPCTRL.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceTPCTRL.setDescription('Set/get target receive level (TRL) Device Allocation: AP')
wirelessInterfaceTPCMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceTPCMode.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessInterfaceTPCMode.setDescription('Power mode selection. Values:0 - Disable, 1 - Open Loop, 2 - Close Loop When system is in Fixed mode (75/35, 50/50, 30/70), this parameter can only be Close or Open Loop. When system is in Flexible mode, this parameter can be either Close Loop, Open Loop or Disable. The default TPC mode is Close Loop. Device Allocation: AP')
wirelessInterfacePTPMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfacePTPMode.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfacePTPMode.setDescription('PTP Setting 0 - Off 1 - Connect First SM, 2 - MAC Address Limited Device Allocation: AP')
wirelessInterfacePTPMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 13), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfacePTPMACAddress.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfacePTPMACAddress.setDescription('PTP MAC Address Device Allocation: AP')
wirelessInterfaceSyncSource = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), )).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceSyncSource.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceSyncSource.setDescription('1PPS Sync Source 1 - GPS, 2 - CMM4, 3 - Internal Free Run, 4 - CMM3 Device Allocation: AP')
wirelessInterfaceSyncHoldTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(20, 864000)).clone(30)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceSyncHoldTime.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceSyncHoldTime.setDescription('GPS Sync Hold Time in seconds Device Allocation: AP')
wirelessInterfaceScanFrequencyListTwenty = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 16), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1064), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListTwenty.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListTwenty.setDescription('Scan Frequency List for 20 MHz Device Allocation: SM')
wirelessInterfaceScanFrequencyListForty = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 17), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1064), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListForty.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListForty.setDescription('Scan Frequency List for 40 MHz Device Allocation: SM')
centerFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2407, 5970), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: centerFrequency.setStatus('current')
if mibBuilder.loadTexts: centerFrequency.setDescription('Per freq band: 5725 GHz for 5G SKU, 2407 for 2.4G SKU Device Allocation: AP')
dfsAlternative1CenterFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2407, 5970), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfsAlternative1CenterFrequency.setStatus('current')
if mibBuilder.loadTexts: dfsAlternative1CenterFrequency.setDescription('Per freq band Device Allocation: AP')
dfsAlternative2CenterFrequency = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(2407, 5970), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfsAlternative2CenterFrequency.setStatus('current')
if mibBuilder.loadTexts: dfsAlternative2CenterFrequency.setDescription('Per freq band Device Allocation: AP')
wirelessMaximumCellSize = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65)).clone(3)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMaximumCellSize.setStatus('current')
if mibBuilder.loadTexts: wirelessMaximumCellSize.setDescription('Maximum Cell Size in units wirelessCellSizeUnit defines the unit type: 1 - Miles 2 - Kilometers Device Allocation: AP')
wirelessCellSizeUnit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessCellSizeUnit.setStatus('current')
if mibBuilder.loadTexts: wirelessCellSizeUnit.setDescription('Maximum Cell Size units: 1 - Miles 2 - Kilometers Device Allocation: AP')
wirelessMaximumSTA = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 120), )).clone(60)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMaximumSTA.setStatus('current')
if mibBuilder.loadTexts: wirelessMaximumSTA.setDescription('Maximum Number of SM Is Not used for Enhanced PTP and PTP modes. Device Allocation: AP')
wirelessRadiusTimeout = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20)).clone(5)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusTimeout.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusTimeout.setDescription('RADIUS server response timeout Device Allocation: AP')
wirelessRadiusRetry = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusRetry.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusRetry.setDescription('RADIUS server retry Device Allocation: AP')
wirelessRadiusGUIUserAuth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusGUIUserAuth.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusGUIUserAuth.setDescription('GUI User Authentication Option Device Allocation: AP')
wirelessRadiusCurrentGUIUserAuth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusCurrentGUIUserAuth.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusCurrentGUIUserAuth.setDescription('Current GUI User Authentication Option Device Allocation: SM')
wirelessRadiusSeverInfo = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusSeverInfo.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusSeverInfo.setDescription('RADIUS server info Device Allocation: SM')
wirelessRadiusIdentityStr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)).clone('anonymous')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusIdentityStr.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusIdentityStr.setDescription('Authentication Identity String Device Allocation: SM')
wirelessRadiusIdentityRealm = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('cambiumnetworks.com')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusIdentityRealm.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusIdentityRealm.setDescription('Authentication Identity Realm Device Allocation: SM')
wirelessRadiusUsername = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128)).clone('cambium-station')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUsername.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusUsername.setDescription('Authentication Username Device Allocation: SM')
wirelessRadiusPassword = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 5, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128)).clone('cambium')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusPassword.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusPassword.setDescription('Authentication Password Device Allocation: SM')
wirelessRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 6, 1), )
if mibBuilder.loadTexts: wirelessRadiusServerTable.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusServerTable.setDescription('RADIUS servers table Device Allocation: AP')
wirelessRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 6, 1, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "wirelessRadiusServerIndex"))
if mibBuilder.loadTexts: wirelessRadiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusServerEntry.setDescription('RADIUS servers table entry Device Allocation: AP')
wirelessRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusServerIndex.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusServerIndex.setDescription('RADIUS servers limiting number Device Allocation: AP')
wirelessRadiusServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 6, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusServerIP.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusServerIP.setDescription('RADIUS server IP address Device Allocation: AP')
wirelessRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535)).clone(1812)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusServerPort.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusServerPort.setDescription('RADIUS server port Device Allocation: AP')
wirelessRadiusServerSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 6, 1, 1, 4), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 128), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusServerSecret.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusServerSecret.setDescription('RADIUS server port Device Allocation: AP')
wirelessRadiusDefaultCertificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 8, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusDefaultCertificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusDefaultCertificate.setDescription('Default RADIUS certificate Device Allocation: SM')
wirelessRadiusUser1Certificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 8, 2), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 8192), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUser1Certificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusUser1Certificate.setDescription('Default RADIUS certificate Device Allocation: SM')
wirelessRadiusUser2Certificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 8, 3), OctetString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 8192), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUser2Certificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusUser2Certificate.setDescription('Default RADIUS certificate Device Allocation: SM')
wirelessRadiusUseDefaultCertificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 8, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUseDefaultCertificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusUseDefaultCertificate.setDescription('RADIUS default certificate use Device Allocation: SM')
wirelessRadiusPMP320Certificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 9, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusPMP320Certificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusPMP320Certificate.setDescription('PMP320 RADIUS certificate Device Allocation: SM')
wirelessRadiusUsePMP320Certificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUsePMP320Certificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusUsePMP320Certificate.setDescription('RADIUS PMP320 certificate use Device Allocation: SM')
wirelessRadiusPMP450Certificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 9, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8192))).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusPMP450Certificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusPMP450Certificate.setDescription('PMP450 RADIUS certificate Device Allocation: SM')
wirelessRadiusUsePMP450Certificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUsePMP450Certificate.setStatus('current')
if mibBuilder.loadTexts: wirelessRadiusUsePMP450Certificate.setDescription('RADIUS PMP450 certificate use Device Allocation: SM')
wirelessRadiusUseDefCertificate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUseDefCertificate.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessRadiusUseDefCertificate.setDescription('RADIUS default certificate use Device Allocation: SM')
wirelessRadiusUser1CertificateName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 2, 1), DisplayString().clone('cert2')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUser1CertificateName.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessRadiusUser1CertificateName.setDescription('First user RADIUS certificate name Device Allocation: AP')
wirelessRadiusUser2CertificateName = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 3, 1), DisplayString().clone('cert3')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRadiusUser2CertificateName.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessRadiusUser2CertificateName.setDescription('Second user RADIUS certificate name Device Allocation: AP')
wirelessRadiusDefCertificateView = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusDefCertificateView.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessRadiusDefCertificateView.setDescription('RADIUS default certificate view Device Allocation: AP')
wirelessRadiusUser1CertificateView = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusUser1CertificateView.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessRadiusUser1CertificateView.setDescription('First user RADIUS certificate view Device Allocation: AP')
wirelessRadiusUser2CertificateView = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 7, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: wirelessRadiusUser2CertificateView.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessRadiusUser2CertificateView.setDescription('Second user RADIUS certificate view Device Allocation: AP')
dfsAlternative1Bandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfsAlternative1Bandwidth.setStatus('current')
if mibBuilder.loadTexts: dfsAlternative1Bandwidth.setDescription('Frequency Bandwidth 1 - 20Mhz, 2 - 40Mhz, 3 - 10Mhz, 4 - 5Mhz, Device Allocation: AP')
dfsAlternative2Bandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dfsAlternative2Bandwidth.setStatus('current')
if mibBuilder.loadTexts: dfsAlternative2Bandwidth.setDescription('Frequency Bandwidth 1 - 20Mhz, 2 - 40Mhz, 3 - 10Mhz, 4 - 5Mhz, Device Allocation: AP')
wirelessAcceptableAPRSSIThreshold = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-100, -20)).clone(-90)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAcceptableAPRSSIThreshold.setStatus('current')
if mibBuilder.loadTexts: wirelessAcceptableAPRSSIThreshold.setDescription('AP RSSI Threshold Device Allocation: SM')
wirelessAcceptableAPCINRThreshold = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAcceptableAPCINRThreshold.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessAcceptableAPCINRThreshold.setDescription('AP CINR Threshold Device Allocation: SM')
wirelessInterfaceUnblockUSfreqs = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceUnblockUSfreqs.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessInterfaceUnblockUSfreqs.setDescription('Block US 5.2 and 5.4 bands 5.2 and 5.4 bands are blocked until DFS certification is acheived Device Allocation: AP, SM')
wirelessMIREnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMIREnable.setStatus('current')
if mibBuilder.loadTexts: wirelessMIREnable.setDescription('Maximum Information Rate (MIR) Limiting: 0 - Disable, 1 - Enable Device Allocation: AP')
wirelessMIRSTAProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMIRSTAProfileNumber.setStatus('current')
if mibBuilder.loadTexts: wirelessMIRSTAProfileNumber.setDescription('Maximum Information Rate (MIR) Limiting Profile Number on SM Device Allocation: SM')
wirelessMIRAPDefaultProfileNumber = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMIRAPDefaultProfileNumber.setStatus('current')
if mibBuilder.loadTexts: wirelessMIRAPDefaultProfileNumber.setDescription('Maximum Information Rate (MIR) Limiting Default Profile number on AP This Profile Number will be used by AP is SM provides improper profile Device Allocation: AP')
wirelessMIRProfileTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4, 1), )
if mibBuilder.loadTexts: wirelessMIRProfileTable.setStatus('current')
if mibBuilder.loadTexts: wirelessMIRProfileTable.setDescription('Maximum Information Rate (MIR) Limiting profile Table Device Allocation: AP')
wirelessMIRProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4, 1, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "wirelessMIRProfileIndex"))
if mibBuilder.loadTexts: wirelessMIRProfileEntry.setStatus('current')
if mibBuilder.loadTexts: wirelessMIRProfileEntry.setDescription('Maximum Information Rate (MIR) Limiting profile Table Entry Device Allocation: AP')
wirelessMIRProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMIRProfileIndex.setStatus('current')
if mibBuilder.loadTexts: wirelessMIRProfileIndex.setDescription('Maximum Information Rate (MIR) Limiting profile Number Device Allocation: AP')
wirelessMIRProfileNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMIRProfileNumber.setStatus('current')
if mibBuilder.loadTexts: wirelessMIRProfileNumber.setDescription('Number of MIR profile Device Allocation: AP')
wirelessMIRProfileDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4, 1, 1, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 128), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMIRProfileDescription.setStatus('current')
if mibBuilder.loadTexts: wirelessMIRProfileDescription.setDescription('MIR profile description Device Allocation: AP')
wirelessDLMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessDLMIR.setStatus('current')
if mibBuilder.loadTexts: wirelessDLMIR.setDescription('DL MIR in kilobits per second Device Allocation: AP')
wirelessULMIR = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(100, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessULMIR.setStatus('current')
if mibBuilder.loadTexts: wirelessULMIR.setDescription('UL MIR in kilobits per second Device Allocation: AP')
wirelessInterfaceScanFrequencyBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyBandwidth.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyBandwidth.setDescription('Frequency Bandwidth as bitmask, fields are: 1 - 20Mhz, 2 - 40Mhz, 4 - 10Mhz, 8 - 5Mhz Device Allocation: SM')
wirelessInterfaceGuardInterval = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceGuardInterval.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceGuardInterval.setDescription('Guard Interval: 1 - Long GuardInterval, 2 - Short GuardInterval Device Allocation: AP')
wirelessInterfaceiFreqReuseMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 34), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceiFreqReuseMode.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceiFreqReuseMode.setDescription('Frequency Reuse Mode: 0 - Off, 1 - Frequency-Reuse-Front, 2 - Frequency-Reuse-Back Device Allocation: AP')
wirelessSTAPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 35), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSTAPriority.setStatus('current')
if mibBuilder.loadTexts: wirelessSTAPriority.setDescription('SM priority value: 0 - Normal, 1 - High, 2 - Low Device Allocation: SM')
wirelessSmoothingBit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 36), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSmoothingBit.setStatus('obsolete')
if mibBuilder.loadTexts: wirelessSmoothingBit.setDescription('Smoothing Bit values: 0 - Bit is cleared, smoothing is off, 1 - Bit is set, smoothing is on Device Allocation: AP')
wirelessSecurityMethod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSecurityMethod.setStatus('current')
if mibBuilder.loadTexts: wirelessSecurityMethod.setDescription('Allowed types of authentications on SM side (Preferred AP list is not set) Use bitmask to enable pereferred methods, 0 - means enable method: set 0-th bit to 0 - Open method (110b) set 1-st bit to 0 - WPA2 method (101b) set 2-nd bit to 0 - EAP-TTLS method (011b) 0x00 - All enabled')
wirelessAcceptableAPSNRThreshold = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-5, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAcceptableAPSNRThreshold.setStatus('current')
if mibBuilder.loadTexts: wirelessAcceptableAPSNRThreshold.setDescription('AP CINR Threshold Device Allocation: SM')
wirelessMgmtPacketRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMgmtPacketRate.setStatus('current')
if mibBuilder.loadTexts: wirelessMgmtPacketRate.setDescription('Management rate: 0 - MCS0 1 - MCS1 Device Allocation: AP')
wirelessStaIsolate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessStaIsolate.setStatus('current')
if mibBuilder.loadTexts: wirelessStaIsolate.setDescription('Enables or disables bridging within the AP driver between SMs. 0 - Disabled 1 - Enabled Device Allocation: AP')
wirelessCcaEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessCcaEnable.setStatus('current')
if mibBuilder.loadTexts: wirelessCcaEnable.setDescription('Clear Channel Assignment: 0 - Disable 1 - Enable Device Allocation: AP')
wirelessInterfaceScanFrequencyListTen = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 42), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1064), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListTen.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListTen.setDescription('Scan Frequency List for 10MHz Device Allocation: SM')
wirelessInterfaceScanFrequencyListFive = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 43), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 1064), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListFive.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceScanFrequencyListFive.setDescription('Scan Frequency List for 5MHz Device Allocation: SM')
wirelessMulticastEnhanceMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(3, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMulticastEnhanceMode.setStatus('current')
if mibBuilder.loadTexts: wirelessMulticastEnhanceMode.setDescription('Multicast enhancement mode 0 - Disabled 3 - IGMP Snooping + MC Passthru Device Allocation: AP')
wirelessTXPowerManualLimit = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessTXPowerManualLimit.setStatus('current')
if mibBuilder.loadTexts: wirelessTXPowerManualLimit.setDescription('Allow user to limit MAX output TX Power Device Allocation: SM')
wirelessRateMaxMCS = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessRateMaxMCS.setStatus('current')
if mibBuilder.loadTexts: wirelessRateMaxMCS.setDescription('Allow user to set MAX TX rate Not allowed for SNMP processing Device Allocation: AP, SM')
wirelessSMWifiDistance = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 52)).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessSMWifiDistance.setStatus('current')
if mibBuilder.loadTexts: wirelessSMWifiDistance.setDescription('Distance to AP for SM in Standard Wi-Fi mode wirelessCellSizeUnitdefines the unit type: 1 - Miles 2 - Kilometers Device Allocation: SM')
wirelessInterfaceProtocolMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceProtocolMode.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceProtocolMode.setDescription('Protocol Module Mode: 1 - TDD 2 - AP/SM WiFi 3 - PTP.LL 4 - TDD PTP Device Allocation: AP/SM')
forceMcastBcast4Addr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: forceMcastBcast4Addr.setStatus('current')
if mibBuilder.loadTexts: forceMcastBcast4Addr.setDescription('1 - TRUE 0 - FALSE')
wirelessInterfaceRateMinMCS = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 55), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceRateMinMCS.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceRateMinMCS.setDescription('Minimum locked MCS rate. Default allocation: AP, SM.')
wirelessInterfaceRateMaxMCS = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15)).clone(15)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceRateMaxMCS.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceRateMaxMCS.setDescription('Maximum locked MCS rate. Default allocation: AP, SM.')
wirelessMulticastIgmpFastLeave = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessMulticastIgmpFastLeave.setStatus('current')
if mibBuilder.loadTexts: wirelessMulticastIgmpFastLeave.setDescription('Multicast enhancement mode 0 - IGMP Fast Leave OFF 1 - IGMP Fast Leave ON Device Allocation: AP')
wirelessInterfaceTDDFrameSize = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2500, 2500), ValueRangeConstraint(5000, 5000), )).clone(5000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceTDDFrameSize.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceTDDFrameSize.setDescription('TDD Frame Duration in microseconds 2500 - 2.5 ms 5000 - 5 ms Device Allocation: AP')
wirelessInterfaceColocState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 59), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceColocState.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceColocState.setDescription('Co-location state 0 - disabled 1 - FSK co-location Device Allocation: AP')
wirelessInterfaceColocSystemSyncSrc = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), )).clone(2)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessInterfaceColocSystemSyncSrc.setStatus('current')
if mibBuilder.loadTexts: wirelessInterfaceColocSystemSyncSrc.setDescription('Co-location state 1 - GPS, 2 - CMM4, 4 - CMM3 Device Allocation: AP')
wirelessAPWifiWLANmode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: wirelessAPWifiWLANmode.setStatus('current')
if mibBuilder.loadTexts: wirelessAPWifiWLANmode.setDescription('AP Wi-Fi WLAN mode (short, 1000m operational distance) 0 - Disabled, 1 - Enabled Device Allocation: AP')
apWiFiDLCTSMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWiFiDLCTSMode.setStatus('current')
if mibBuilder.loadTexts: apWiFiDLCTSMode.setDescription('Force AP WiFi to enable Self CTS 0 - Disabled, 1 - Enabled Device Allocation: AP')
apWiFiULCTSRTSMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 63), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWiFiULCTSRTSMode.setStatus('current')
if mibBuilder.loadTexts: apWiFiULCTSRTSMode.setDescription('Force AP WiFi to add ERP IE to the Beacon 0 - Disabled, 1 - Enabled Device Allocation: AP')
apWiFiRTSThreshold = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 2, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2346)).clone(2346)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: apWiFiRTSThreshold.setStatus('current')
if mibBuilder.loadTexts: apWiFiRTSThreshold.setDescription('Wi-Fi interface RTS Threshold Device Allocation: AP, SM')
l2FirewallEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEnable.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEnable.setDescription('L2 ACL Status Flag: 0 - Disable, 1 - Enable. Device Allocation: AP, SM')
l2FirewallTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2), )
if mibBuilder.loadTexts: l2FirewallTable.setStatus('current')
if mibBuilder.loadTexts: l2FirewallTable.setDescription('Table for L2 ACL Device Allocation: AP, SM')
l2FirewallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "l2FirewallEntryIndex"))
if mibBuilder.loadTexts: l2FirewallEntry.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntry.setDescription('L2 ACL Table Entry Device Allocation: AP, SM')
l2FirewallEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryIndex.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryIndex.setDescription('L2 Firewall Table Index Table Entry is cleared if Index is set to zero Device Allocation: AP, SM')
l2FirewallEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 128), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryName.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryName.setDescription('L2 ACL Rule Name. Device Allocation: AP, SM')
l2FirewallEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryAction.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryAction.setDescription('Action: 0 - Reject, 1 - Permit. Device Allocation: AP, SM')
l2FirewallEntryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryInterface.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryInterface.setDescription('Interface: 1 - WAN, 2 - LAN. Device Allocation: AP, SM')
l2FirewallEntryLog = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryLog.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryLog.setDescription('Log: 1 - On, 0 - Off. Device Allocation: AP, SM')
l2FirewallEntryEtherType = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryEtherType.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryEtherType.setDescription('L2 ACL Ethernet type: 0000-ffff Device Allocation: AP, SM')
l2FirewallEntryVlanID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4094), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryVlanID.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryVlanID.setDescription('L2 ACL Vlan ID Device Allocation: AP, SM')
l2FirewallEntrySrcMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 8), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntrySrcMAC.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntrySrcMAC.setDescription('L2 ACL Source MAC Address Device Allocation: AP, SM')
l2FirewallEntrySrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 9), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntrySrcMask.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntrySrcMask.setDescription('L2 ACL Source MAC Address Mask Device Allocation: AP, SM')
l2FirewallEntryDstMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 10), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryDstMAC.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryDstMAC.setDescription('L2 ACL Destination MAC Address Device Allocation: AP, SM')
l2FirewallEntryDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 2, 1, 11), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(11, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2FirewallEntryDstMask.setStatus('current')
if mibBuilder.loadTexts: l2FirewallEntryDstMask.setDescription('L2 ACL Destination MAC Address Mask Device Allocation: AP, SM')
l2WanRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2WanRemoteAccess.setStatus('current')
if mibBuilder.loadTexts: l2WanRemoteAccess.setDescription('Remote Access To AP Through Wan: 0 - Decline, 1 - Allow Device Allocation: AP, SM')
l2SnmpLanRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2SnmpLanRemoteAccess.setStatus('current')
if mibBuilder.loadTexts: l2SnmpLanRemoteAccess.setDescription('SNMP access from LAN: 0 - Decline, 1 - Allow Device Allocation: AP, SM')
l2DHCPServersBelowSTA = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2DHCPServersBelowSTA.setStatus('current')
if mibBuilder.loadTexts: l2DHCPServersBelowSTA.setDescription('Allow DHCP Servers Below SM: 0 - Decline, 1 - Allow Device Allocation: SM')
l2LanRemoteAccess = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 9, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l2LanRemoteAccess.setStatus('current')
if mibBuilder.loadTexts: l2LanRemoteAccess.setDescription('SM Management Access Through LAN: 0 - Wireless Only, 1 - Ethernet and Wireless Device Allocation: SM')
l3FirewallEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEnable.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEnable.setDescription('L3 ACL Rule Status 1 - Enable, 0 - Disable Device Allocation: AP, SM')
l3FirewallTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2), )
if mibBuilder.loadTexts: l3FirewallTable.setStatus('current')
if mibBuilder.loadTexts: l3FirewallTable.setDescription('L3 Firewall Table Device Allocation: AP, SM')
l3FirewallEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "l3FirewallEntryIndex"))
if mibBuilder.loadTexts: l3FirewallEntry.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntry.setDescription('L3 Firewall Table Entry Device Allocation: AP, SM')
l3FirewallEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryIndex.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryIndex.setDescription('L3 ACL Table Index Table Entry is cleared if Index is set to zero Device Allocation: AP, SM')
l3FirewallEntryName = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 128), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryName.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryName.setDescription('L3 ACL Rule Name Device Allocation: AP, SM')
l3FirewallEntryAction = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryAction.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryAction.setDescription('L3 ACL Rule Acrion 0 - Reject, 1 - Permit Device Allocation: AP, SM')
l3FirewallEntryInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryInterface.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryInterface.setDescription('L3 ACL Rule Interface 1 - WAN, 2 - LAN Device Allocation: AP, SM')
l3FirewallEntryLog = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryLog.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryLog.setDescription('L3 ACL Rule Log Flag 1 - Rule Loggin is On, 0 - Rule Logging is Off Device Allocation: AP, SM')
l3FirewallEntryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ValueRangeConstraint(5, 5), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryProtocol.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryProtocol.setDescription('L3 ACL Rules IP Protocol 1 - TCP, 2 - UDP, 3 - TCP+UDP, 4 - ICMP, 5 - IP Device Allocation: AP, SM')
l3FirewallEntryPort = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryPort.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryPort.setDescription('L3 ACL Rule Port Device Allocation: AP, SM')
l3FirewallEntrySrcIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntrySrcIP.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntrySrcIP.setDescription('L3 ACL Rule Source IP Address Device Allocation: AP, SM')
l3FirewallEntrySrcMask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntrySrcMask.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntrySrcMask.setDescription('L3 ACL Rule Source Network Mask Device Allocation: AP, SM')
l3FirewallEntryDstIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryDstIP.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryDstIP.setDescription('L3 ACL Rule Destination IP Address Device Allocation: AP, SM')
l3FirewallEntryDstMask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryDstMask.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryDstMask.setDescription('L3 ACL Rule Destination Network Mask Device Allocation: AP, SM')
l3FirewallEntryDSCP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryDSCP.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryDSCP.setDescription('L3 ACL Rule DSCP Device Allocation: AP, SM')
l3FirewallEntryToS = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 10, 2, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: l3FirewallEntryToS.setStatus('current')
if mibBuilder.loadTexts: l3FirewallEntryToS.setDescription('L3 ACL Rule TOS Device Allocation: AP, SM')
dmzEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmzEnable.setStatus('current')
if mibBuilder.loadTexts: dmzEnable.setDescription('Enable DMZ: 1 - Enable, 0 - Disable. Device Allocation: SM')
dmzIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 12, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dmzIPAddress.setStatus('current')
if mibBuilder.loadTexts: dmzIPAddress.setDescription('DMZ IP Address. Device Allocation: SM')
voipEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: voipEnable.setStatus('current')
if mibBuilder.loadTexts: voipEnable.setDescription('VoIP Enable: 0 - disable, 1 - enable Device Allocation: AP, SM')
qosEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qosEnable.setStatus('current')
if mibBuilder.loadTexts: qosEnable.setDescription('Enable QoS: 0 - disable, 1 - enable Device Allocation: AP, SM')
classificationListTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3), )
if mibBuilder.loadTexts: classificationListTable.setStatus('current')
if mibBuilder.loadTexts: classificationListTable.setDescription('Quality of Service rules Table Device Allocation: AP, SM')
mcPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcPriority.setStatus('current')
if mibBuilder.loadTexts: mcPriority.setDescription('Multicast Priority: 0 - low, 1 - high Device Allocation: AP, SM')
bcPriority = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bcPriority.setStatus('current')
if mibBuilder.loadTexts: bcPriority.setDescription('Broadcast Priority: 0 - low, 1 - high Device Allocation: AP, SM')
classificationListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "classificationRuleIndex"))
if mibBuilder.loadTexts: classificationListEntry.setStatus('current')
if mibBuilder.loadTexts: classificationListEntry.setDescription('Quality of Service Rule Entry Device Allocation: AP, SM')
classificationRuleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 14))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleIndex.setStatus('current')
if mibBuilder.loadTexts: classificationRuleIndex.setDescription('QoS Rule Table Index Table Entry is cleared if Index is set to zero Device Allocation: AP, SM')
classificationRuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 9), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleType.setStatus('current')
if mibBuilder.loadTexts: classificationRuleType.setDescription('QoS Rule Type: 1 - voip, 2 - dscp, 3 - cos, 4 - vlanid, 5 - ethertype, 6 - ipv4, 7 - mac, 8 - broadcast, 9 - multicast Device Allocation: AP, SM')
classificationRuleValue = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleValue.setStatus('current')
if mibBuilder.loadTexts: classificationRuleValue.setDescription('QoS Rule Value. Qos rule value is valid only for dscp, cos, vlanid and ethertype Rule types Device Allocation: AP, SM')
classificationRuleIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleIP.setStatus('current')
if mibBuilder.loadTexts: classificationRuleIP.setDescription('QoS IP Address Device Allocation: AP, SM')
classificationRuleMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 5), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(17, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleMAC.setStatus('current')
if mibBuilder.loadTexts: classificationRuleMAC.setDescription('QoS MAC Address Device Allocation: AP, SM')
classificationRuleMask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 6), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(7, 17), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleMask.setStatus('current')
if mibBuilder.loadTexts: classificationRuleMask.setDescription('QoS Netmask Device Allocation: AP, SM')
classificationRuleDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleDirection.setStatus('current')
if mibBuilder.loadTexts: classificationRuleDirection.setDescription('IP or MAC Rules direction: 1 - Source, 2 - Destination, 3 - Either (or Both directions) Device Allocation: AP, SM')
classificationRuleQueue = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 11, 3, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: classificationRuleQueue.setStatus('current')
if mibBuilder.loadTexts: classificationRuleQueue.setDescription('Rule Queue: 1- Hight, 2 - Low, 3 - VoIP Device Allocation: AP, SM')
portForwardingEntryEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingEntryEnable.setStatus('current')
if mibBuilder.loadTexts: portForwardingEntryEnable.setDescription('Port Forwarding feature: 0 - Disable, 1 - Enable Device Allocation: SM')
portForwardingTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2), )
if mibBuilder.loadTexts: portForwardingTable.setStatus('current')
if mibBuilder.loadTexts: portForwardingTable.setDescription('Port Forwarding Rules Table Device Allocation: SM')
portForwardingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "portForwardingTableEntryIndex"))
if mibBuilder.loadTexts: portForwardingEntry.setStatus('current')
if mibBuilder.loadTexts: portForwardingEntry.setDescription('Port Forwarding Table Rule Entry Device Allocation: SM')
portForwardingTableEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingTableEntryIndex.setStatus('current')
if mibBuilder.loadTexts: portForwardingTableEntryIndex.setDescription('Port Forwarding Table Entry Index Table Entry is cleared if Index is set to zero Device Allocation: SM')
portForwardingTableEntryProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingTableEntryProtocol.setStatus('current')
if mibBuilder.loadTexts: portForwardingTableEntryProtocol.setDescription('Port Forwarding Table Entry Rule Protocol: 0 - Clear Rule, 1 - UDP, 2 - TCP, 3 - UDP+TCP Device Allocation: SM')
portForwardingTableEntryWLANPortBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingTableEntryWLANPortBegin.setStatus('current')
if mibBuilder.loadTexts: portForwardingTableEntryWLANPortBegin.setDescription('Port Forwarding WLAN Port Start number Device Allocation: SM')
portForwardingTableEntryWLANPortEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingTableEntryWLANPortEnd.setStatus('current')
if mibBuilder.loadTexts: portForwardingTableEntryWLANPortEnd.setDescription('Port Forwarding WLAN Port End number Device Allocation: SM')
portForwardingTableEntryLANIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 13, 2, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portForwardingTableEntryLANIP.setStatus('current')
if mibBuilder.loadTexts: portForwardingTableEntryLANIP.setDescription('Port Forwarding LAN IP Address Device Allocation: SM')
staticRoutesEnableMain = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: staticRoutesEnableMain.setStatus('current')
if mibBuilder.loadTexts: staticRoutesEnableMain.setDescription('Static Routes trigger 0 - Disable 1 - Enable')
cambiumStaticRoutesCnfTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2), )
if mibBuilder.loadTexts: cambiumStaticRoutesCnfTable.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfTable.setDescription('Static Routes Table')
cambiumDeviceAgentEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), )).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumDeviceAgentEnable.setStatus('current')
if mibBuilder.loadTexts: cambiumDeviceAgentEnable.setDescription('Remote Management: 0 - Disable 1 - Enable Cambium provides cloud management of Cambium devices called cnMaestro. This allows a user to manage all of their various Cambium devices via the web from any location in the world. This field enables this cnMaestro Cloud Management.')
cambiumDeviceAgentCNSURL = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 20, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumDeviceAgentCNSURL.setStatus('current')
if mibBuilder.loadTexts: cambiumDeviceAgentCNSURL.setDescription('cnMaestro URL: This specifies the URL for accessing the cnMaestro Cloud Manager')
cambiumCNSDeviceAgentID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 20, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumCNSDeviceAgentID.setStatus('current')
if mibBuilder.loadTexts: cambiumCNSDeviceAgentID.setDescription("Cambium ID: This is a user name for the cnMaestro Remote Management system. This is used with the 'Onboarding Key' to on-board older Cambium devices, which are not provisioned with an MSN in the Cambium factory.")
cambiumCNSDeviceAgentPassword = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 20, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumCNSDeviceAgentPassword.setStatus('current')
if mibBuilder.loadTexts: cambiumCNSDeviceAgentPassword.setDescription("Onboarding Key: This is a password for the cnMaestro Remote Management system. This is used with the 'Cambium ID' to on-board older Cambium devices, which are not provisioned with an MSN in the Cambium factory.")
cambiumStaticRoutesCnfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumStaticRoutesCnfIndex"))
if mibBuilder.loadTexts: cambiumStaticRoutesCnfEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfEntry.setDescription('Static Routes Dest/Getway pair entry')
cambiumStaticRoutesCnfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumStaticRoutesCnfIndex.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfIndex.setDescription('Index')
cambiumStaticRoutesCnfDestIP = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumStaticRoutesCnfDestIP.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfDestIP.setDescription('Destination IP')
cambiumStaticRoutesCnfGW = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumStaticRoutesCnfGW.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfGW.setDescription('Getway IP')
cambiumStaticRoutesCnfNetmask = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumStaticRoutesCnfNetmask.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfNetmask.setDescription('Dest IP Netmask')
cambiumStaticRoutesCnfEnbl = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumStaticRoutesCnfEnbl.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfEnbl.setDescription('Static Routes enable an entry')
cambiumStaticRoutesCnfInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 16, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumStaticRoutesCnfInfo.setStatus('current')
if mibBuilder.loadTexts: cambiumStaticRoutesCnfInfo.setDescription('Static Routes Interface Name')
mgmtVLANEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtVLANEnable.setStatus('current')
if mibBuilder.loadTexts: mgmtVLANEnable.setDescription('Management VLANs State: 0 - Disable, 1 - Enable Device Allocation: AP, SM')
mgmtVLANVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtVLANVID.setStatus('current')
if mibBuilder.loadTexts: mgmtVLANVID.setDescription('Management VLAN ID Device Allocation: AP, SM')
mgmtVLANVP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mgmtVLANVP.setStatus('current')
if mibBuilder.loadTexts: mgmtVLANVP.setDescription('Management VLAN VP Device Allocation: AP, SM')
dataVLANEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 5, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataVLANEnable.setStatus('current')
if mibBuilder.loadTexts: dataVLANEnable.setDescription('Data VLANs State: 0 - Disable, 1 - Enable Device Allocation: SM')
dataVLANVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataVLANVID.setStatus('current')
if mibBuilder.loadTexts: dataVLANVID.setDescription('Data VLAN ID Device Allocation: SM')
dataVLANVP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 5, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataVLANVP.setStatus('current')
if mibBuilder.loadTexts: dataVLANVP.setDescription('Data VLAN VP Device Allocation: SM')
mcastVLANEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastVLANEnable.setStatus('current')
if mibBuilder.loadTexts: mcastVLANEnable.setDescription('Multicast VLAN State: 0 - Disable, 1 - Enable Device Allocation: SM')
mcastVLANVID = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 15, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastVLANVID.setStatus('current')
if mibBuilder.loadTexts: mcastVLANVID.setDescription('Multicast VLAN ID Device Allocation: SM')
mcastVLANVP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 4, 15, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mcastVLANVP.setStatus('current')
if mibBuilder.loadTexts: mcastVLANVP.setDescription('Multicast VLAN VP Device Allocation: SM')
membershipVLANTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 3), )
if mibBuilder.loadTexts: membershipVLANTable.setStatus('current')
if mibBuilder.loadTexts: membershipVLANTable.setDescription('Membership VLAN Rules Table Device Allocation: SM')
membershipVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 3, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "membershipVLANTableEntryIndex"))
if mibBuilder.loadTexts: membershipVLANEntry.setStatus('current')
if mibBuilder.loadTexts: membershipVLANEntry.setDescription('Membership VLAN Table Rule Entry Device Allocation: SM')
membershipVLANTableEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: membershipVLANTableEntryIndex.setStatus('current')
if mibBuilder.loadTexts: membershipVLANTableEntryIndex.setDescription('Membership VLAN Table Entry Index Table Entry is cleared if Index is set to zero Device Allocation: SM')
membershipVLANTableEntryVIDBegin = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: membershipVLANTableEntryVIDBegin.setStatus('current')
if mibBuilder.loadTexts: membershipVLANTableEntryVIDBegin.setDescription('Membership VLAN Table Entry VLAN ID Begin Device Allocation: SM')
membershipVLANTableEntryVIDEnd = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: membershipVLANTableEntryVIDEnd.setStatus('current')
if mibBuilder.loadTexts: membershipVLANTableEntryVIDEnd.setDescription('Membership VLAN Table Entry VLAN ID End Device Allocation: SM')
mappingVLANTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 5), )
if mibBuilder.loadTexts: mappingVLANTable.setStatus('current')
if mibBuilder.loadTexts: mappingVLANTable.setDescription('Mapping VLAN Rules Table Device Allocation: SM')
mappingVLANEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 5, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "mappingVLANTableEntryIndex"))
if mibBuilder.loadTexts: mappingVLANEntry.setStatus('current')
if mibBuilder.loadTexts: mappingVLANEntry.setDescription('Mapping VLAN Table Rule Entry Device Allocation: SM')
mappingVLANTableEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mappingVLANTableEntryIndex.setStatus('current')
if mibBuilder.loadTexts: mappingVLANTableEntryIndex.setDescription('Mapping VLAN Table Entry Index Table Entry is cleared if Index is set to zero Device Allocation: SM')
mappingVLANTableEntryCVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mappingVLANTableEntryCVLAN.setStatus('current')
if mibBuilder.loadTexts: mappingVLANTableEntryCVLAN.setDescription('Mapping VLAN Table C-VLAN ID, Defines VLAN ID to be mapped from CPE side. Device Allocation: SM')
mappingVLANTableEntrySVLAN = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 14, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 4095), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mappingVLANTableEntrySVLAN.setStatus('current')
if mibBuilder.loadTexts: mappingVLANTableEntrySVLAN.setDescription('Mapping VLAN Table S-VLAN ID, Defines VLAN ID to be mapped from Service provider. Device Allocation: SM')
dlkmNATSIPHelpers = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 3, 15, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlkmNATSIPHelpers.setStatus('current')
if mibBuilder.loadTexts: dlkmNATSIPHelpers.setDescription('Enables Auxiliary Netfilter NAT SIP Helper modules support: 0 - Disable, 1 - Enabled Device Allocation: AP, SM')
prefferedAPTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 3, 1), )
if mibBuilder.loadTexts: prefferedAPTable.setStatus('current')
if mibBuilder.loadTexts: prefferedAPTable.setDescription('Preffered AP Table Device Allocation: SM')
prefferedAPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 3, 1, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "prefferedListTableEntryIndex"))
if mibBuilder.loadTexts: prefferedAPEntry.setStatus('current')
if mibBuilder.loadTexts: prefferedAPEntry.setDescription('Preffered SSID Table Entry Device Allocation: SM')
prefferedListTableEntryIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 3, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prefferedListTableEntryIndex.setStatus('current')
if mibBuilder.loadTexts: prefferedListTableEntryIndex.setDescription('Preferred AP Table Index Table Entry is cleared if Index is set to zero Device Allocation: SM')
prefferedListTableEntrySSID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 3, 1, 1, 2), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(1, 32), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prefferedListTableEntrySSID.setStatus('current')
if mibBuilder.loadTexts: prefferedListTableEntrySSID.setDescription('Preferred AP SSID Device Allocation: SM')
prefferedListTableEntryKEY = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 3, 1, 1, 3), DisplayString().subtype(subtypeSpec=ConstraintsUnion(ValueSizeConstraint(0, 0), ValueSizeConstraint(8, 63), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prefferedListTableEntryKEY.setStatus('current')
if mibBuilder.loadTexts: prefferedListTableEntryKEY.setDescription('Preferred AP Shared Key Device Allocation: SM')
prefferedListTableSecurityMethod = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 3, 8, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: prefferedListTableSecurityMethod.setStatus('current')
if mibBuilder.loadTexts: prefferedListTableSecurityMethod.setDescription('Authentication modes to connect to AP Device Allocation: SM Use bitmask to enable pereferred methods, 0 - means enable method: set 0-th bit to 0 - Open method (110b) set 1-st bit to 0 - WPA2 method (101b) set 2-nd bit to 0 - EAP-TTLS method (011b) 0x00 - All enabled')
cambiumpmp80211DeviceReboot = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211DeviceReboot.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211DeviceReboot.setDescription('OID for Device Reboot, send reboot command to device Device Allocation: AP, SM')
cambiumpmp80211ConfigurationReset = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationReset.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationReset.setDescription('OID for System Configuration reset to Defaults Device Allocation: AP, SM')
cambiumpmp80211ConfigurationSave = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationSave.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationSave.setDescription('OID for configuration save Device Allocation: AP, SM')
cambiumpmp80211ConfigurationApply = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationApply.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationApply.setDescription('OID for configuration Apply Device Allocation: AP, SM')
cambiumpmp80211ConfigurationDiscard = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationDiscard.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationDiscard.setDescription('OID for configuration Discard Device Allocation: AP, SM')
cambiumpmp80211ConfigurationState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationState.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211ConfigurationState.setDescription('System configuration state OID. Bit masks: 0000 0001 - System is configured. 0000 0010 - There are unsaved changesets. 0000 0100 - There are unrestarted services. 0000 1000 - Needed reboot of the system. 0001 0000 - Configurations was reset. 0010 0000 - Services restarting in process. 0100 0000 - Software Update performed. Device Allocation: AP, SM')
cambiumpmp80211SoftwareUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdate.setDescription('System OID for Software Update Agent, SW Update link value can be either remote firmware link (http, https, ftp), or local file link: /tmp/firmware.tar.gz NOTE: Device is automatically rebooted if link type is remote Device Allocation: AP, SM')
cambiumpmp80211SoftwareUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateStatus.setDescription('Software Update Status OID 0 - No SW Update is pending or No SW upgrade occurs, 1 - SW Update is in progress, Uploading image to device, 2 - SW Update is in progress, Verifying SHA2 signature, 3 - SW Update is in progress, Executing pre-update script, 4 - SW Update is in progress, Uploading image to flash, 5 - SW Update is in progress, Uploading u-boot to flash, 6 - SW Update is in progress, Executing post-update script, 7 - SW Update is finished, waiting for reboot, 8 - SW Update is in progress, Executing config down-grade script When SW Update is successfully, return value is 7, GUI or NMS indicate that SW update was successful, Device can be rebooted. Device Allocation: AP, SM')
cambiumpmp80211STAListUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211STAListUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211STAListUpdate.setDescription('System OID for SM List update When this OID is received, Connected SM list table is getting updated with actual SM list Device Allocation: AP')
cambiumpmp80211STAListUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211STAListUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211STAListUpdateStatus.setDescription('Sta List Update Status OID. This OID is used to indicate SM list table status: 0 - No SMs are registerd to AP 1 - SM List Table is getting updated 2 - SM Data is ready Device Allocation: AP')
cambiumpmp80211APListUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211APListUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211APListUpdate.setDescription('System OID for AP List update When this OID is received, Scanned AP list table is getting updated with actual AP scan list Device Allocation: SM')
cambiumpmp80211APListUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211APListUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211APListUpdateStatus.setDescription('AP List Update Status OID. This OID is used to indicate AP list table status: 0 - No APs are available in the list 1 - AP List Table is getting updated 2 - AP Data is ready Device Allocation: SM')
cambiumpmp80211SoftwareUpdateError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateError.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateError.setDescription("Software Update error code: 0 - Finished successfully, waiting for reboot 1 - SW update file download failed 2 - Unpack failed, damaged or wrong format package 3 - Firmware digital signature check failed 4 - U-Boot digital signature check failed 5 - Firmware FLASH write failed 6 - U-Boot FLASH write failed 7 - Boot partition switch failed 8 - Board SKU is not supported for this firmware 9 - Can't read firmware version, upgrade is impossible 10 - Down-grade not supported for 802.11 driver 11 - Down-grade below 2.3.1 is not supported for Tiered-AP device 12 - Down-grade not supported for non SM TDD mode 13 - Down-grade below 2.4.2 not supported for Ironman/Ironland board type 14 - Down-grade below 2.5.0 not supported for AP WiFi 15 - Down-grade below 2.4.3 not supported for Reset Via Power Sequence 16 - Down-grade below 2.4.3 not supported for Particular Country Locked device 17 - General error code Device Allocation: AP, SM")
cambiumpmp80211StatsPerSTAListUpdateStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211StatsPerSTAListUpdateStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211StatsPerSTAListUpdateStatus.setDescription('Stats per SM List Update Status OID. This OID is used to indicate Stats per SM list table status: 0 - No SMs are registerd to AP 1 - TBD 2 - TBD')
cambiumpmp80211StatsPerSTAListUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211StatsPerSTAListUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211StatsPerSTAListUpdate.setDescription('System OID for Stats per SM table update When this OID is received, Stats per SM table is getting updated with actual data')
cambiumpmp80211STADisconnect = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211STADisconnect.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211STADisconnect.setDescription('System OID for particular SM disconnection Device Allocation: AP')
cambiumpmp80211GPSAutopopulate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211GPSAutopopulate.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211GPSAutopopulate.setDescription('System action to auto-populate GPS stats for device into system configuration device location for latitude, longitude and height Device Allocation: AP, SM')
cambiumpmp80211SoftwareUpdateErrorStr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateErrorStr.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateErrorStr.setDescription('Software Update error, text descriprion')
cambiumpmp80211GpsFirmwareUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdate.setDescription('System OID for GPS Firmware Update Agent, Gps FW Update link value can be either remote firmware link (http, https, ftp), or local file link: /tmp/firmware.tar.gz NOTE: Device is automatically rebooted if link type is remote Device Allocation: AP, SM')
cambiumpmp80211GpsFirmwareUpdateError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdateError.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdateError.setDescription('Firmware Update error code: 0 - Finished successfully 1 - SW update file download failed 2 - Unpack failed, damaged or wrong format package, or file access error 3 - GPS Firmware digital signature check failed 4 - GPS DA digital signature check failed 5 - GPS DA download to GPS device failed 6 - GPS FW download to GPS device failed 7 - Board SKU is not supported for this firmware 8 - GPS general communication error Device Allocation: AP, SM')
cambiumpmp80211GpsFirmwareUpdateErrorStr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdateErrorStr.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdateErrorStr.setDescription('GPS Firmware Update error, text description')
cambiumBridgeTableAPStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumBridgeTableAPStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumBridgeTableAPStatus.setDescription('AP Bridge Table Update Status OID. This OID is used to indicate bridge table status: 0 - Bridge table is empty 1 - Bridge table is filled with data 2 - AP Data is ready Device Allocation: AP')
cambiumBridgeTableSTAUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumBridgeTableSTAUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumBridgeTableSTAUpdate.setDescription('System OID for AP Bridge Table update. When this OID is received, bridge table is getting updated with actual bridge table list Device Allocation: SM')
cambiumBridgeTableSTAStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumBridgeTableSTAStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumBridgeTableSTAStatus.setDescription('Bridge Table Update Status OID. This OID is used to indicate bridge table status: 0 - Bridge table is empty 1 - Bridge table is filled with data 2 - SM Data is ready Device Allocation: SM')
cambiumBridgeTableAPUpdate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumBridgeTableAPUpdate.setStatus('current')
if mibBuilder.loadTexts: cambiumBridgeTableAPUpdate.setDescription('System OID for Bridge Table update. When this OID is received, bridge table is getting updated with actual bridge table list Device Allocation: AP')
cambiumForceTabUpdDHCP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdDHCP.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdDHCP.setDescription('Force update DHCP Host table, 1 - Force action Device Allocation: SM')
cambiumForceTabUpdTrap = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdTrap.setDescription('Force update SNMP Trap table, 1 - Force action Device Allocation: AP, SM')
cambiumForceTabUpdl2Frw = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 32), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdl2Frw.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdl2Frw.setDescription('Force update l2 Firewal table, 1 - Force action Device Allocation: AP, SM')
cambiumForceTabUpdl3Frw = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdl3Frw.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdl3Frw.setDescription('Force update l3 Firewal table, 1 - Force action Device Allocation: AP, SM')
cambiumForceTabUpdQos = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdQos.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdQos.setDescription('Force update Quality of Service table, 1 - Force action Device Allocation: AP, SM')
cambiumForceTabUpdPortFw = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdPortFw.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdPortFw.setDescription('Force update Port Forwarding table, 1 - Force action Device Allocation: SM')
cambiumForceTabUpdVlan = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdVlan.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdVlan.setDescription('Force update Membership VLAN table, 1 - Force action Device Allocation: SM')
cambiumForceTabUpdMappingVlan = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdMappingVlan.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdMappingVlan.setDescription('Force update VLAN Mapping table, 1 - Force action Device Allocation: AP, SM')
cambiumConfigurationApplyOnReboot = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumConfigurationApplyOnReboot.setStatus('current')
if mibBuilder.loadTexts: cambiumConfigurationApplyOnReboot.setDescription('OID for configuration Apply on stage of device reboot. Device Allocation: AP, SM')
cambiumForceSTARescan = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceSTARescan.setStatus('current')
if mibBuilder.loadTexts: cambiumForceSTARescan.setDescription('force a STA rescan, 1 - Force action Device Allocation: AP, SM')
cambiumForceTabUpdMcastDeny = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 40), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdMcastDeny.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdMcastDeny.setDescription('Force update Multicast deny table, 1 - Force action Device Allocation: AP, SM')
cambiumForceTabUpdStaticRoutesCnf = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdStaticRoutesCnf.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdStaticRoutesCnf.setDescription('Force update Static Routes Conf table, 1 - Force action Device Allocation: AP, SM')
cambiumForceTabUpdMIR = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdMIR.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdMIR.setDescription('Force update MIR table, 1 - Force action Device Allocation: AP, SM')
cambiumForceTabUpdRadiusServ = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdRadiusServ.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdRadiusServ.setDescription('Force update Radius Server table, 1 - Force action Device Allocation: AP, SM')
cambiumForceTabUpdPrefAPList = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdPrefAPList.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdPrefAPList.setDescription('Force update Preferred AP list table, 1 - Force action Device Allocation: AP, SM')
cambiumForceTabUpdAPAlias = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 4, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumForceTabUpdAPAlias.setStatus('current')
if mibBuilder.loadTexts: cambiumForceTabUpdAPAlias.setDescription('Force update AP Alias table, 1 - Force action Device Allocation: AP, SM')
cambiumpmp80211SoftwareUpdateStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 1)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumpmp80211SoftwareUpdateError"), ("CAMBIUM-PMP80211-MIB", "cambiumpmp80211SoftwareUpdateErrorStr"))
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateStatusTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SoftwareUpdateStatusTrap.setDescription('Software Update error TRAP. Trap indicating Software Update State. This state is indicated by the included value of cambiumpmp80211GpsFirmwareUpdateError Device Allocation: AP, SM')
cambiumpmp80211GPSSyncStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 2)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumToolbarGPSSyncState"))
if mibBuilder.loadTexts: cambiumpmp80211GPSSyncStatusTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211GPSSyncStatusTrap.setDescription('GPS Sync Status TRAP. Trap indicating GPS Sync State change. This state is indicated by the included value of cambiumToolbarGPSSyncState Device Allocation: AP, SM')
cambiumpmp80211SystemUpTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 3))
if mibBuilder.loadTexts: cambiumpmp80211SystemUpTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SystemUpTrap.setDescription('System UP TRAP. Trap indicating SNMP subSystem UP Device Allocation: AP, SM')
cambiumpmp80211DFSStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 4)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumDFSStatus"), ("CAMBIUM-PMP80211-MIB", "cambiumDFSStatusStr"))
if mibBuilder.loadTexts: cambiumpmp80211DFSStatusTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211DFSStatusTrap.setDescription('DFS Status TRAP. Trap indicating DFS Event. This event is indicated by the included value of cambiumDFSStatus Device Allocation: AP, SM')
cambiumpmp80211JSONCfgImportTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 5)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumJSONCfgImportError"))
if mibBuilder.loadTexts: cambiumpmp80211JSONCfgImportTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211JSONCfgImportTrap.setDescription('JSON configuration import error trap. Trap catches JSON configuration import state. This state is indicated by the included value of cambiumJSONCfgImportError. Device Allocation: AP, SM')
cambiumpmp80211JSONCfgExportTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 6)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumJSONCfgExportError"))
if mibBuilder.loadTexts: cambiumpmp80211JSONCfgExportTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211JSONCfgExportTrap.setDescription('JSON configuration export error trap. Trap catches JSON configuration export state. This state is indicated by the included value of cambiumJSONCfgExportError. Device Allocation: AP, SM')
cambiumpmp80211FullCfgRestoreTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 7)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumFullCfgRestoreError"))
if mibBuilder.loadTexts: cambiumpmp80211FullCfgRestoreTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211FullCfgRestoreTrap.setDescription('Full configuration restore error trap. Trap catches full configuration restoring state. This state is indicated by the included value of cambiumFullCfgRestoreError. Device Allocation: AP, SM')
cambiumpmp80211FullCfgBackupTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 8)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumFullCfgBackUpError"))
if mibBuilder.loadTexts: cambiumpmp80211FullCfgBackupTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211FullCfgBackupTrap.setDescription('Full configuration backup error trap. Trap catches full configuration backup state. This state is indicated by the included value of cambiumFullCfgBackUpError. Device Allocation: AP, SM')
cambiumpmp80211GpsFirmwareUpdateStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 9)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumpmp80211GpsFirmwareUpdateError"), ("CAMBIUM-PMP80211-MIB", "cambiumpmp80211GpsFirmwareUpdateErrorStr"))
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdateStatusTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211GpsFirmwareUpdateStatusTrap.setDescription('GPS Update error TRAP. Trap indicating GPS Firmware Update State. This state is indicated by the included value of cambiumpmp80211GpsFirmwareUpdateError Device Allocation: AP, SM')
cambiumpmp80211STADropTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 10)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumSTAMAC"), ("CAMBIUM-PMP80211-MIB", "cambiumSTADropReason"))
if mibBuilder.loadTexts: cambiumpmp80211STADropTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211STADropTrap.setDescription('SM Drop trap. Trap catches dropped SM info. Information is contained in the included values of cambiumSTAMAC and cambiumSTADropReason. Device Allocation: AP')
cambiumpmp80211SMRegTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 11)).setObjects(("CAMBIUM-PMP80211-MIB", "cambiumSTAMAC"))
if mibBuilder.loadTexts: cambiumpmp80211SMRegTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SMRegTrap.setDescription('SM Registration trap. Trap catches registered SM info. Information is contained in the included value of cambiumSTAMAC. Device Allocation: AP')
cambiumpmp80211SystemRebootTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 12))
if mibBuilder.loadTexts: cambiumpmp80211SystemRebootTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SystemRebootTrap.setDescription('System reboot trap. Trap indicates that snmpd daemon has been shut down and the system is going to reboot. Device Allocation: AP, SM')
cambiumpmp80211SAModeTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 13))
if mibBuilder.loadTexts: cambiumpmp80211SAModeTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmp80211SAModeTrap.setDescription('Spectrum Analyzer mode trap. Trap indicates that he system is going to reboot in SA mode. Device Allocation: AP, SM')
cambiumpmpETSIframeSkipTrap = NotificationType((1, 3, 6, 1, 4, 1, 17713, 21, 0, 14))
if mibBuilder.loadTexts: cambiumpmpETSIframeSkipTrap.setStatus('current')
if mibBuilder.loadTexts: cambiumpmpETSIframeSkipTrap.setDescription('To much frame skipped due to CCA. Device Allocation: AP')
cambiumLinkTestDuration = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(2, 2), ValueRangeConstraint(4, 4), ValueRangeConstraint(6, 6), ValueRangeConstraint(8, 8), ValueRangeConstraint(10, 10), ValueRangeConstraint(12, 12), ValueRangeConstraint(14, 14), ValueRangeConstraint(16, 16), ValueRangeConstraint(18, 18), ValueRangeConstraint(20, 20), )).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumLinkTestDuration.setStatus('current')
if mibBuilder.loadTexts: cambiumLinkTestDuration.setDescription('Link Test Duration OID. Device Allocation: AP, SM')
cambiumLinkTestPckSize = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(128, 128), ValueRangeConstraint(800, 800), ValueRangeConstraint(1500, 1500), )).clone(1500)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumLinkTestPckSize.setStatus('current')
if mibBuilder.loadTexts: cambiumLinkTestPckSize.setDescription('Link Test Packet Size OID. Device Allocation: AP, SM')
cambiumLinkTestStartForMAC = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumLinkTestStartForMAC.setStatus('current')
if mibBuilder.loadTexts: cambiumLinkTestStartForMAC.setDescription('The Link Test Destination MAC address. Start Link Test by write this OID. Device Allocation: AP, SM')
cambiumLinkTestStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLinkTestStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumLinkTestStatus.setDescription('The Link Test Status OID. 0: WAIT 1: START 2: BUSY 3: SUCCESS 4: SUCCESS (PREF PERIOD) 5: ERROR UNREACHABLE 6: ERROR FAIL Device Allocation: AP, SM')
cambiumLinkTestResultDate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(6, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLinkTestResultDate.setStatus('current')
if mibBuilder.loadTexts: cambiumLinkTestResultDate.setDescription('The Link Test Result Timestamp Device Allocation: AP, SM')
cambiumLinkTestResultUL = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLinkTestResultUL.setStatus('current')
if mibBuilder.loadTexts: cambiumLinkTestResultUL.setDescription('Link Test Result Uplink. Device Allocation: AP, SM')
cambiumLinkTestResultDL = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumLinkTestResultDL.setStatus('current')
if mibBuilder.loadTexts: cambiumLinkTestResultDL.setDescription('Link Test Result Downlink. Device Allocation: AP, SM')
caminfoScanFrequencyListCountry = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: caminfoScanFrequencyListCountry.setStatus('current')
if mibBuilder.loadTexts: caminfoScanFrequencyListCountry.setDescription('Country for Frequency List 20/40 MHz band Device Allocation: AP, SM')
caminfoScanFrequencyListTwentyBand = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caminfoScanFrequencyListTwentyBand.setStatus('current')
if mibBuilder.loadTexts: caminfoScanFrequencyListTwentyBand.setDescription('Scan Frequency List for 20 MHz band Device Allocation: SM')
caminfoScanFrequencyListFortyBand = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 2, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 1064))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caminfoScanFrequencyListFortyBand.setStatus('current')
if mibBuilder.loadTexts: caminfoScanFrequencyListFortyBand.setDescription('Scan Frequency List for 40 MHz band Device Allocation: SM')
caminfoScanFrequencyListAllow59band = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: caminfoScanFrequencyListAllow59band.setStatus('current')
if mibBuilder.loadTexts: caminfoScanFrequencyListAllow59band.setDescription('Allow 59 band if the board is calibrated using new frequency values. 0 - Do not Allow 1 - Allow Device Allocation: AP, SM')
cambiumInternetConnectionServerIP = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 1, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumInternetConnectionServerIP.setStatus('current')
if mibBuilder.loadTexts: cambiumInternetConnectionServerIP.setDescription('Internet Connection Server IP Address This is auxiliary IP address to ping in order to define Internet connection Status Device Allocation: AP, SM')
cambiumInternetConnectionPollPeriod = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 3600))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumInternetConnectionPollPeriod.setStatus('current')
if mibBuilder.loadTexts: cambiumInternetConnectionPollPeriod.setDescription('Internet Connection Server Ping period in seconds Device Allocation: AP, SM')
cambiumToolbarGlobeState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumToolbarGlobeState.setStatus('current')
if mibBuilder.loadTexts: cambiumToolbarGlobeState.setDescription('Globe Internet Connectivity Status Icon State: 0 - No Internet Connectivity, 1 - Internet Connectivity Device Allocation: AP, SM')
cambiumToolbarGPSSyncState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumToolbarGPSSyncState.setStatus('current')
if mibBuilder.loadTexts: cambiumToolbarGPSSyncState.setDescription('GPS Current SYNC State: 0 - The Initialization State 1 - The No Synchronization State 2 - The Synchronization State 3 - The Hold Off State 4 - The Regaining Sync State 5 - The Free Run State Device Allocation: AP')
cambiumToolbarDeviceConfigurationState = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 2, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumToolbarDeviceConfigurationState.setStatus('current')
if mibBuilder.loadTexts: cambiumToolbarDeviceConfigurationState.setDescription('System configuration state OID. Bit masks: 0000 0001 - System is configured. 0000 0010 - There are unsaved changesets. 0000 0100 - There are unrestarted services. 0000 1000 - Needed reboot of the system. 0001 0000 - Configurations was reset. 0010 0000 - Services restarting in process. 0100 0000 - Software Update performed. Device Allocation: AP, SM')
cambiumToolbarSyncSource = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(1, 1), ValueRangeConstraint(2, 2), ValueRangeConstraint(3, 3), ValueRangeConstraint(4, 4), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumToolbarSyncSource.setStatus('current')
if mibBuilder.loadTexts: cambiumToolbarSyncSource.setDescription('Sync Source Status: 1 - GPS Sync Up, 2 - GPS Sync Down, 3 - CMM4 Sync, 4 - CMM3 Sync Device Allocation: AP')
cambiumToolbarGPSSyncStateStr = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumToolbarGPSSyncStateStr.setStatus('current')
if mibBuilder.loadTexts: cambiumToolbarGPSSyncStateStr.setDescription('GPS Current SYNC State (text) Device Allocation: AP')
cambiumJSONCfgImport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumJSONCfgImport.setStatus('current')
if mibBuilder.loadTexts: cambiumJSONCfgImport.setDescription('OID to start import process, when valid link to JSON configuration file is received. Device Allocation: AP, SM')
cambiumJSONCfgImportStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumJSONCfgImportStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumJSONCfgImportStatus.setDescription('OID to get the status of the import process: -1 Error 0 Idle 1 Downloading file 2 Importing file 3 Rebooting Device Allocation: AP, SM')
cambiumJSONCfgImportError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumJSONCfgImportError.setStatus('current')
if mibBuilder.loadTexts: cambiumJSONCfgImportError.setDescription('Import config Error message (text) Device Allocation: AP, SM')
cambiumJSONCfgExport = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumJSONCfgExport.setStatus('current')
if mibBuilder.loadTexts: cambiumJSONCfgExport.setDescription('OID to start export process 0 No action 1 Start Device Allocation: AP, SM')
cambiumJSONCfgExportStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumJSONCfgExportStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumJSONCfgExportStatus.setDescription('OID to get the status of the export process: -1 Error 0 Idle 1 Exporting JSON config 2 Moving config into upload directory 3 Preparing link for uploading 4 Success Device Allocation: AP, SM')
cambiumJSONCfgExportError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumJSONCfgExportError.setStatus('current')
if mibBuilder.loadTexts: cambiumJSONCfgExportError.setDescription('Export config Error message (text) Device Allocation: AP, SM')
cambiumJSONCfgExportLink = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumJSONCfgExportLink.setStatus('current')
if mibBuilder.loadTexts: cambiumJSONCfgExportLink.setDescription('Link to the configuration file on the board Device Allocation: AP, SM')
cambiumFullCfgRestore = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 20), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumFullCfgRestore.setStatus('current')
if mibBuilder.loadTexts: cambiumFullCfgRestore.setDescription('OID to start restore process, when valid link to full configuration file is received. Device Allocation: AP, SM')
cambiumFullCfgRestoreStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumFullCfgRestoreStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumFullCfgRestoreStatus.setDescription('OID to get the status of the restore process: -1 Error 0 Idle 1 Downloading file 2 Decrypting 3 Unpacking 4 Importing 5 Rebooting Device Allocation: AP, SM')
cambiumFullCfgRestoreError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumFullCfgRestoreError.setStatus('current')
if mibBuilder.loadTexts: cambiumFullCfgRestoreError.setDescription('Restore config Error message (text) Device Allocation: AP, SM')
cambiumFullCfgBackUp = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumFullCfgBackUp.setStatus('current')
if mibBuilder.loadTexts: cambiumFullCfgBackUp.setDescription('OID to start backup process Bitmask indicating which part of configuration to backup: 001 - json-config files 010 - files of security & certificates 100 - log files Device Allocation: AP, SM')
cambiumFullCfgBackUpStatus = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumFullCfgBackUpStatus.setStatus('current')
if mibBuilder.loadTexts: cambiumFullCfgBackUpStatus.setDescription('OID to get the status of the backup process: -1 Error 0 Idle 1 Packing configuration files 2 Encrypting configuration files 3 Moving packed files into upload directory 4 Preparing link for uploading 5 Success Device Allocation: AP, SM')
cambiumFullCfgBackUpError = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumFullCfgBackUpError.setStatus('current')
if mibBuilder.loadTexts: cambiumFullCfgBackUpError.setDescription('Backup config Error message (text) Device Allocation: AP, SM')
cambiumFullCfgBackUpLink = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 4, 33), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumFullCfgBackUpLink.setStatus('current')
if mibBuilder.loadTexts: cambiumFullCfgBackUpLink.setDescription('Link to the packed configuration files on the board, ready to upload Device Allocation: AP, SM')
acsEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 6, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsEnable.setStatus('current')
if mibBuilder.loadTexts: acsEnable.setDescription('Automatic Channel Selection (ACS) automatically selects best values for centerFrequency, dfsAlternative1CenterFrequency and dfsAlternative2CenterFrequency: 0 - Disable, 1 - Enable Device Allocation: AP')
acsScanMinDwellTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(50, 500)).clone(200)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsScanMinDwellTime.setStatus('current')
if mibBuilder.loadTexts: acsScanMinDwellTime.setDescription('Minimum dwell time during Automatic Channel Selection (ACS) scan in milliseconds. Device Allocation: AP')
acsScanMaxDwellTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 6, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(300, 600)).clone(300)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsScanMaxDwellTime.setStatus('current')
if mibBuilder.loadTexts: acsScanMaxDwellTime.setDescription('Maximum dwell time during Automatic Channel Selection (ACS) scan in milliseconds. Device Allocation: AP')
acsControl = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 6, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: acsControl.setStatus('current')
if mibBuilder.loadTexts: acsControl.setDescription('Automatic Channel Selection (ACS) control: 0 - No change, 1 - Run scan now, 2 - Abort current scan Device Allocation: AP')
cambiumIDMMode = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIDMMode.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMMode.setDescription('OID to configure IDM Mode 0 - System Wide 1 - Local Device Allocation: AP, SM')
cambiumIDMTime = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1000, 120000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIDMTime.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMTime.setDescription('OID to configure IDM Time. Device Allocation: AP, SM')
cambiumIDMEnable = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 1), ))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIDMEnable.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMEnable.setDescription('OID to enable/disable IDM feature 0 - Enable IDM 1 - Disable IDM Device Allocation: AP, SM')
cambiumIDMResultsTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10), )
if mibBuilder.loadTexts: cambiumIDMResultsTable.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMResultsTable.setDescription('This table contains information of IDM Results: IDM Cycle, Device MAC, Last Comb RSSI, Last Rate, Max Rate, Number of Packets, CRC Comb RSSI, CRC Ch0 RSSI, CRC Ch1 RSSI, CRC Number of Packets, PRQ Comb RSSI, PRQ Ch0 RSSI, PRQ Ch1 RSSI, PRQ Number of Packets, Device Allocation: AP, SM')
cambiumIDMResultsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumAPNumberOfConnectedSTA"))
if mibBuilder.loadTexts: cambiumIDMResultsEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMResultsEntry.setDescription('Wireless parameters mapping for particular device. Device Allocation: AP, SM')
idmDeviceListCycle = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListCycle.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListCycle.setDescription('IDM Cycle Number. Device Allocation: AP, SM')
idmDeviceListMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListMAC.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListMAC.setDescription('MAC Address of device collected IDM Statistics. Device Allocation: AP, SM')
idmDeviceListLCombRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListLCombRSSI.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListLCombRSSI.setDescription('Combined RSSI of last received MPDU. Device Allocation: AP, SM')
idmDeviceListLRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListLRate.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListLRate.setDescription('Rate code of last received MPDU. Device Allocation: AP, SM')
idmDeviceListMaxRate = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListMaxRate.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListMaxRate.setDescription('Maximum rate code. Device Allocation: AP, SM')
idmDeviceListPcktsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListPcktsNum.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListPcktsNum.setDescription('Number of packets filtered by IDM. Device Allocation: AP, SM')
idmDeviceListCRCCombRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListCRCCombRSSI.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListCRCCombRSSI.setDescription('Combined RSSI of maximum received CRC error MPDU. Device Allocation: AP, SM')
idmDeviceListCRCCh0RSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListCRCCh0RSSI.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListCRCCh0RSSI.setDescription('Channel 0 RSSI of maximum received CRC error MPDU. Device Allocation: AP, SM')
idmDeviceListCRCCh1RSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListCRCCh1RSSI.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListCRCCh1RSSI.setDescription('Channel 1 RSSI of maximum received CRC error MPDU. Device Allocation: AP, SM')
idmDeviceListCRCPcktsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListCRCPcktsNum.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListCRCPcktsNum.setDescription('Number of packets with CRC error filtered by IDM. Device Allocation: AP, SM')
idmDeviceListPRQCombRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListPRQCombRSSI.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListPRQCombRSSI.setDescription('Combined RSSI of maximum received Probe Requests MPDU. Device Allocation: AP, SM')
idmDeviceListPRQCh0RSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListPRQCh0RSSI.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListPRQCh0RSSI.setDescription('Channel 0 RSSI of maximum received Probe Requests MPDU. Device Allocation: AP, SM')
idmDeviceListPRQCh1RSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListPRQCh1RSSI.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListPRQCh1RSSI.setDescription('Channel 1 RSSI of maximum received Probe Requests MPDU. Device Allocation: AP, SM')
idmDeviceListPRQPcktsNum = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 10, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmDeviceListPRQPcktsNum.setStatus('current')
if mibBuilder.loadTexts: idmDeviceListPRQPcktsNum.setDescription('Number of Probe Requests filtered by IDM. Device Allocation: AP, SM')
cambiumIDMSumMAC = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 17))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cambiumIDMSumMAC.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumMAC.setDescription('MAC Address of device collected IDM Summary Statistics. Device Allocation: AP, SM')
cambiumIDMSumLCombRSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumLCombRSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumLCombRSSI.setDescription('Summary Combined RSSI of last received MPDU. Device Allocation: AP, SM')
cambiumIDMSumLRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumLRate.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumLRate.setDescription('Summary Rate code of last received MPDU. Device Allocation: AP, SM')
cambiumIDMSumMaxRate = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 5))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumMaxRate.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumMaxRate.setDescription('Summary Maximum rate code. Device Allocation: AP, SM')
cambiumIDMSumPcktsNum = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumPcktsNum.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumPcktsNum.setDescription('Summary Number of packets filtered by IDM. Device Allocation: AP, SM')
cambiumIDMSumCRCCombRSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumCRCCombRSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumCRCCombRSSI.setDescription('Summary Combined RSSI of maximum received CRC error MPDU. Device Allocation: AP, SM')
cambiumIDMSumCRCCh0RSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumCRCCh0RSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumCRCCh0RSSI.setDescription('Summary Channel 0 RSSI of maximum received CRC error MPDU. Device Allocation: AP, SM')
cambiumIDMSumCRCCh1RSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumCRCCh1RSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumCRCCh1RSSI.setDescription('Summary Channel 1 RSSI of maximum received CRC error MPDU. Device Allocation: AP, SM')
cambiumIDMSumCRCPcktsNum = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumCRCPcktsNum.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumCRCPcktsNum.setDescription('Summary Number of packets with CRC error filtered by IDM. Device Allocation: AP, SM')
cambiumIDMSumPRQCombRSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumPRQCombRSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumPRQCombRSSI.setDescription('Summary Combined RSSI of maximum received Probe Requests MPDU. Device Allocation: AP, SM')
cambiumIDMSumPRQCh0RSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumPRQCh0RSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumPRQCh0RSSI.setDescription('Summary Channel 0 RSSI of maximum received Probe Requests MPDU. Device Allocation: AP, SM')
cambiumIDMSumPRQCh1RSSI = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumPRQCh1RSSI.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumPRQCh1RSSI.setDescription('Summary Channel 1 RSSI of maximum received Probe Requests MPDU. Device Allocation: AP, SM')
cambiumIDMSumPRQPcktsNum = MibScalar((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cambiumIDMSumPRQPcktsNum.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSumPRQPcktsNum.setDescription('Summary Number of Probe Requests filtered by IDM. Device Allocation: AP, SM')
cambiumIDMSummaryTable = MibTable((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 30), )
if mibBuilder.loadTexts: cambiumIDMSummaryTable.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSummaryTable.setDescription('This table contains information of IDM Summary Top Interferers: Intrf MAC, Intrf RSSI, Intrf Ch0 RSSI, Intrf Ch1 RSSI, Intrf SSID, Device Allocation: AP, SM')
cambiumIDMSummaryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 30, 1), ).setIndexNames((0, "CAMBIUM-PMP80211-MIB", "cambiumAPNumberOfConnectedSTA"))
if mibBuilder.loadTexts: cambiumIDMSummaryEntry.setStatus('current')
if mibBuilder.loadTexts: cambiumIDMSummaryEntry.setDescription('Wireless parameters mapping for particular device. Device Allocation: AP, SM')
idmSummaryIntMAC = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 30, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(11, 17))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmSummaryIntMAC.setStatus('current')
if mibBuilder.loadTexts: idmSummaryIntMAC.setDescription('MAC Address of Interferer. Device Allocation: AP, SM')
idmSummaryIntCombRSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 30, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmSummaryIntCombRSSI.setStatus('current')
if mibBuilder.loadTexts: idmSummaryIntCombRSSI.setDescription('Interferer Combined RSSI. Device Allocation: AP, SM')
idmSummaryIntCh0RSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 30, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmSummaryIntCh0RSSI.setStatus('current')
if mibBuilder.loadTexts: idmSummaryIntCh0RSSI.setDescription('Interferer Channel 0 RSSI. Device Allocation: AP, SM')
idmSummaryIntCh1RSSI = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 30, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmSummaryIntCh1RSSI.setStatus('current')
if mibBuilder.loadTexts: idmSummaryIntCh1RSSI.setDescription('Interferer Channel 1 RSSI. Device Allocation: AP, SM')
idmSummaryIntSSID = MibTableColumn((1, 3, 6, 1, 4, 1, 17713, 21, 6, 5, 30, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: idmSummaryIntSSID.setStatus('current')
if mibBuilder.loadTexts: idmSummaryIntSSID.setDescription('SSID name of Interferer. Device Allocation: AP, SM')
mibBuilder.exportSymbols("CAMBIUM-PMP80211-MIB", ulWLanPerUserTotalPacketCount=ulWLanPerUserTotalPacketCount, networkBridgeNetmask=networkBridgeNetmask, wirelessRadiusUser2Certificate=wirelessRadiusUser2Certificate, camAPBrTabBridgeName=camAPBrTabBridgeName, ulWLanMCS06Packets=ulWLanMCS06Packets, wirelessRadiusServerIP=wirelessRadiusServerIP, rxEtherLanMulticastPacketCount=rxEtherLanMulticastPacketCount, connectedAPNoise=connectedAPNoise, dlWLanMCS14Packets=dlWLanMCS14Packets, l3FirewallEntryName=l3FirewallEntryName, networkRelaydEnable=networkRelaydEnable, networkWanPPPoEPassword=networkWanPPPoEPassword, connectedSTAClickTHostName=connectedSTAClickTHostName, cambiumLANSpeedStatus=cambiumLANSpeedStatus, idmDeviceListCRCCombRSSI=idmDeviceListCRCCombRSSI, cambiumCurrentuImageVersion=cambiumCurrentuImageVersion, networkLanDNSIPAddrPrimary=networkLanDNSIPAddrPrimary, mgmtIFVID=mgmtIFVID, connectedSTAULSNR=connectedSTAULSNR, l2FirewallEntryLog=l2FirewallEntryLog, cambiumIDM=cambiumIDM, staTxQuality=staTxQuality, cambiumTDDStatsListMAC=cambiumTDDStatsListMAC, syslogServerLogMask=syslogServerLogMask, wirelessMIRProfileNumber=wirelessMIRProfileNumber, wirelessRadiusServerSecret=wirelessRadiusServerSecret, wirelessInterfaceScanFrequencyListTwenty=wirelessInterfaceScanFrequencyListTwenty, wirelessCellSizeUnit=wirelessCellSizeUnit, cambiumIDMResultsTable=cambiumIDMResultsTable, camAPBrTabDevMACAddress=camAPBrTabDevMACAddress, cambiumStaticRoutesTable=cambiumStaticRoutesTable, mcastGroupLimit=mcastGroupLimit, membershipVLANEntry=membershipVLANEntry, networkWanGatewayIP=networkWanGatewayIP, wirelessMaximumCellSize=wirelessMaximumCellSize, networkWan=networkWan, wirelessRadiusPMP320Certificate=wirelessRadiusPMP320Certificate, mgmtIF=mgmtIF, networkMode=networkMode, cambiumForceTabUpdDHCP=cambiumForceTabUpdDHCP, camSTABrTabBridgeName=camSTABrTabBridgeName, cambiumLinkStatus=cambiumLinkStatus, prefferedListTableSecurityMethod=prefferedListTableSecurityMethod, connectedAPNEAge=connectedAPNEAge, dlWLanPerUserCapacityDroppedPacketCount=dlWLanPerUserCapacityDroppedPacketCount, wirelessSmoothingBit=wirelessSmoothingBit, forceMcastBcast4Addr=forceMcastBcast4Addr, networkPortSecurity=networkPortSecurity, connectedSTAListDLRSSI=connectedSTAListDLRSSI, l2Firewall=l2Firewall, connectedSTAMirULRate=connectedSTAMirULRate, networkLanGatewayIP=networkLanGatewayIP, cambiumBridgeTableSTAStatus=cambiumBridgeTableSTAStatus, cambiumToolbarGPSSyncState=cambiumToolbarGPSSyncState, wirelessRadiusCertificateListRow3=wirelessRadiusCertificateListRow3, dlWLanMCS00Packets=dlWLanMCS00Packets, networkLanAutoNegotiation=networkLanAutoNegotiation, systemConfigisGPSkeyOK=systemConfigisGPSkeyOK, cambiumpmp80211StatsPerSTAListUpdate=cambiumpmp80211StatsPerSTAListUpdate, snmpTrapEntryIndex=snmpTrapEntryIndex, cambiumpmp80211SAModeTrap=cambiumpmp80211SAModeTrap, wirelessRadiusCertificateListRow2=wirelessRadiusCertificateListRow2, cambiumEffectiveDeviceName=cambiumEffectiveDeviceName, systemNtpServer=systemNtpServer, l3FirewallEntryIndex=l3FirewallEntryIndex, connectedSTAMcastGRP2=connectedSTAMcastGRP2, connectedSTAListDLMCS=connectedSTAListDLMCS, systemConfigSWLockBit=systemConfigSWLockBit, connectedSTAListULCINR=connectedSTAListULCINR, l3FirewallEntryProtocol=l3FirewallEntryProtocol, cambiumFullCfgBackUpError=cambiumFullCfgBackUpError, cambiumGPSTime=cambiumGPSTime, classificationRuleDirection=classificationRuleDirection, cambiumLANModeStatus=cambiumLANModeStatus, cambiumARPInterface=cambiumARPInterface, dhcpLanLimit=dhcpLanLimit, wirelessAcceptableAPCINRThreshold=wirelessAcceptableAPCINRThreshold, connectedSTAMcastGRP4=connectedSTAMcastGRP4, l2FirewallEntryName=l2FirewallEntryName, snmpTrapEntryPort=snmpTrapEntryPort, dlWLanMCS07Packets=dlWLanMCS07Packets, connectedSTATXQuality=connectedSTATXQuality, snmp=snmp, cambiumManagementIFNetMask=cambiumManagementIFNetMask, cambiumSTAUplinkMCSMode=cambiumSTAUplinkMCSMode, mgmtIFNetmask=mgmtIFNetmask, networkBridgeDNSIPAddrPrimary=networkBridgeDNSIPAddrPrimary, cambiumpmp80211FullCfgRestoreTrap=cambiumpmp80211FullCfgRestoreTrap, cambiumpmp80211STADropTrap=cambiumpmp80211STADropTrap, connectedSTAMAC=connectedSTAMAC, cambiumIDMEnable=cambiumIDMEnable, cambiumIDMSumPRQCh0RSSI=cambiumIDMSumPRQCh0RSSI, wirelessMIRProfileEntry=wirelessMIRProfileEntry, cambiumpmp80211STAListUpdate=cambiumpmp80211STAListUpdate, networkLanMTU=networkLanMTU, cambiumIDMSumCRCCh0RSSI=cambiumIDMSumCRCCh0RSSI, dlWLanMultiBroadcastKbitCount=dlWLanMultiBroadcastKbitCount, cambiumMCSNumber=cambiumMCSNumber, portForwardingTableEntryIndex=portForwardingTableEntryIndex, cambiumIDMSumPRQPcktsNum=cambiumIDMSumPRQPcktsNum, cambiumEffectiveNetworkBridgeMTU=cambiumEffectiveNetworkBridgeMTU, dhcpLanLeasetime=dhcpLanLeasetime, l2FirewallEntrySrcMask=l2FirewallEntrySrcMask, prefferedListTableEntrySSID=prefferedListTableEntrySSID, cambiumStaticRoutesCnfInfo=cambiumStaticRoutesCnfInfo, cambiumpmp80211APListUpdateStatus=cambiumpmp80211APListUpdateStatus, camSTABrTabDevMACAddress=camSTABrTabDevMACAddress, ulWLanMCS09Packets=ulWLanMCS09Packets, connectedAPListNEState=connectedAPListNEState, cambiumSTAConnectedAP=cambiumSTAConnectedAP, systemConfigLockedCC=systemConfigLockedCC, networkBridgeDNSIPAddrSecondary=networkBridgeDNSIPAddrSecondary, membershipVLANTableEntryVIDEnd=membershipVLANTableEntryVIDEnd, cambiumpmp80211SystemRebootTrap=cambiumpmp80211SystemRebootTrap, cambiumDHCP=cambiumDHCP, cambiumStaticRoutesDestIP=cambiumStaticRoutesDestIP, dhcpServerStaticHostEntry=dhcpServerStaticHostEntry, networkWanPPPoEAuth=networkWanPPPoEAuth, l2FirewallEntryDstMask=l2FirewallEntryDstMask, wirelessInterfaceMode=wirelessInterfaceMode, idmSummaryIntCh0RSSI=idmSummaryIntCh0RSSI, wirelessMIRProfileDescription=wirelessMIRProfileDescription, l2WanRemoteAccess=l2WanRemoteAccess, networkLanIPAddr=networkLanIPAddr, cambiumpmp80211STADisconnect=cambiumpmp80211STADisconnect, connectedAPAuthenticationMethod=connectedAPAuthenticationMethod, cambiumEffectiveSSID=cambiumEffectiveSSID, classificationRuleMAC=classificationRuleMAC, dhcpServerDNSIP=dhcpServerDNSIP, portForwarding=portForwarding, wirelessInterfaceColocSystemSyncSrc=wirelessInterfaceColocSystemSyncSrc, networkLanDNSIPAddrSecondary=networkLanDNSIPAddrSecondary, mgmtIFVLAN=mgmtIFVLAN, dataVLANVP=dataVLANVP, acsControl=acsControl, connectedAPListMeetNEAttemptCriteria=connectedAPListMeetNEAttemptCriteria, connectedSTAMirDLRate=connectedSTAMirDLRate, cambiumIPAliasTable=cambiumIPAliasTable, cambiumCnsServAccountID=cambiumCnsServAccountID, connectedAPBSSID=connectedAPBSSID, cambiumForceTabUpdMcastDeny=cambiumForceTabUpdMcastDeny, wirelessMaximumSTA=wirelessMaximumSTA, wirelessInterfaceScanFrequencyBandwidth=wirelessInterfaceScanFrequencyBandwidth, cambiumStaticRoutesCnfEntry=cambiumStaticRoutesCnfEntry, cambiumManagementIFGateway=cambiumManagementIFGateway, cambiumFullCfgBackUp=cambiumFullCfgBackUp, connectedAPListCAPS=connectedAPListCAPS, cambiumEffectiveMcastGroupLimit=cambiumEffectiveMcastGroupLimit, cambiumTDDStatsPerSTAIndex=cambiumTDDStatsPerSTAIndex, snmpTrapEnable=snmpTrapEnable, cambiumpmp80211GPSAutopopulate=cambiumpmp80211GPSAutopopulate, networkWanPPPoEService=networkWanPPPoEService, dhcpLeaseDevName=dhcpLeaseDevName, ulWLanMultiBroadcastKbitCount=ulWLanMultiBroadcastKbitCount, cambiumMCSIndex=cambiumMCSIndex, ulWLanMCS10Packets=ulWLanMCS10Packets, mgmtIFVP=mgmtIFVP, mappingVLANTable=mappingVLANTable, cambiumStaticRoutesInterface=cambiumStaticRoutesInterface, cambiumSTAConnectedAPEntry=cambiumSTAConnectedAPEntry, dlWLanMCS01Packets=dlWLanMCS01Packets, networkLanNetmask=networkLanNetmask, wirelessRadiusCertificateSet=wirelessRadiusCertificateSet, connectedAPBandwidth=connectedAPBandwidth, wirelessRadiusUsePMP320Certificate=wirelessRadiusUsePMP320Certificate, connectedSTASessionTime=connectedSTASessionTime, cambiumAthTXPackets=cambiumAthTXPackets, wirelessRadiusCertificateList=wirelessRadiusCertificateList, connectedAPListNEAge=connectedAPListNEAge, ulWLanBroadcastPacketCount=ulWLanBroadcastPacketCount, wirelessInterfaceUnblockUSfreqs=wirelessInterfaceUnblockUSfreqs, cambiumCNSDeviceAgentID=cambiumCNSDeviceAgentID, wirelessRadiusUseDefCertificate=wirelessRadiusUseDefCertificate, cambiumGPSSatSNREntry=cambiumGPSSatSNREntry, txEtherLanTotalPacketCount=txEtherLanTotalPacketCount, cambiumpmp80211SMRegTrap=cambiumpmp80211SMRegTrap, idmSummaryIntCombRSSI=idmSummaryIntCombRSSI, dhcpStaticIP=dhcpStaticIP, connectedSTAListAID=connectedSTAListAID, networkWanDNSIPAddr=networkWanDNSIPAddr, cambiumBridgeTableAPStatus=cambiumBridgeTableAPStatus, cambiumpmp80211StatsPerSTAListUpdateStatus=cambiumpmp80211StatsPerSTAListUpdateStatus, cambiumLinkTestResultUL=cambiumLinkTestResultUL, cambiumDeviceLongitude=cambiumDeviceLongitude, cambiumDFSStatus=cambiumDFSStatus, systemConfigSMLockBit=systemConfigSMLockBit, snmpDomainAccessEnable=snmpDomainAccessEnable, wirelessInterfaceiFreqReuseMode=wirelessInterfaceiFreqReuseMode, wirelessInterfaceSSID=wirelessInterfaceSSID, cambiumpmp80211SoftwareUpdateErrorStr=cambiumpmp80211SoftwareUpdateErrorStr, cambiumStatsForceUpdate=cambiumStatsForceUpdate, cambiumIPAliasesInfo=cambiumIPAliasesInfo, cambiumIDMTime=cambiumIDMTime, cambiumAPBridgeTable=cambiumAPBridgeTable, dhcpLanHostName=dhcpLanHostName, wirelessInterfaceRateMaxMCS=wirelessInterfaceRateMaxMCS, dlWLanMCS15Packets=dlWLanMCS15Packets, cambiumDHCPOption82Status=cambiumDHCPOption82Status, cambiumIPAliasTableIndex=cambiumIPAliasTableIndex, ulWLanMCS03Packets=ulWLanMCS03Packets, syslogServerLogToWeb=syslogServerLogToWeb, snmpTrapEntry=snmpTrapEntry, dlWLanCapacityDroppedPacketCount=dlWLanCapacityDroppedPacketCount, wirelessULMIR=wirelessULMIR, cambiumAthRXBroadcast=cambiumAthRXBroadcast, cambiumGPSLatitude=cambiumGPSLatitude, wirelessRadiusServerEntry=wirelessRadiusServerEntry, cambiumInternetConnectionServerIP=cambiumInternetConnectionServerIP, networkWanIPAddr=networkWanIPAddr, cambiumESN=cambiumESN, dlWLanMCS04Packets=dlWLanMCS04Packets, cambium=cambium, connectedSTAClickTHWAddr=connectedSTAClickTHWAddr, networkBridgeDNSIPAddr=networkBridgeDNSIPAddr, dhcpLanHostIndex=dhcpLanHostIndex, wirelessInterfaceEncryptionKey=wirelessInterfaceEncryptionKey, dlkmNATSIPHelpers=dlkmNATSIPHelpers, wirelessRadiusCurrentGUIUserAuth=wirelessRadiusCurrentGUIUserAuth, acsEnable=acsEnable, cambiumAthRXDrops=cambiumAthRXDrops, qosEnable=qosEnable, cambiumEthRXBytes=cambiumEthRXBytes, cambiumStaticRoutesCnfDestIP=cambiumStaticRoutesCnfDestIP, prefferedListTableEntryKEY=prefferedListTableEntryKEY, connectedSTAMcastGRP3=connectedSTAMcastGRP3, cambiumForceTabUpdVlan=cambiumForceTabUpdVlan, cambiumSSHServerEnable=cambiumSSHServerEnable, cambiumFullCfgRestoreStatus=cambiumFullCfgRestoreStatus, connectedSTADLRSSI=connectedSTADLRSSI, cambiumLinkTestResultDate=cambiumLinkTestResultDate, cambiumJSONCfgExportStatus=cambiumJSONCfgExportStatus, cambiumDateTime=cambiumDateTime, idmSummaryIntCh1RSSI=idmSummaryIntCh1RSSI, dataVLAN=dataVLAN, syslogServerIPFirst=syslogServerIPFirst, cambiumSubscribedMcastGroupEntry=cambiumSubscribedMcastGroupEntry, networkWanIPAddressMode=networkWanIPAddressMode, systemNtpServerPrimaryIP=systemNtpServerPrimaryIP, ulWLanMCS02Packets=ulWLanMCS02Packets, snmpReadWriteCommunity=snmpReadWriteCommunity, cambiumStaticRoutesCnfIndex=cambiumStaticRoutesCnfIndex, cambiumForceTabUpdPrefAPList=cambiumForceTabUpdPrefAPList, cambiumGPSSatSNRTable=cambiumGPSSatSNRTable, snmpDomainAccessIPMask=snmpDomainAccessIPMask, systemConfigSMLimit=systemConfigSMLimit, wireless=wireless, connectedSTAChannel=connectedSTAChannel, mgmtIFIPAddr=mgmtIFIPAddr, dhcpLanHostIP=dhcpLanHostIP, wirelessInterfaceScanFrequencyListForty=wirelessInterfaceScanFrequencyListForty, wirelessMIREnable=wirelessMIREnable, wirelessInterfaceGuardInterval=wirelessInterfaceGuardInterval, cambiumPmp80211SystemStatus=cambiumPmp80211SystemStatus, connectedAPListBandwidth=connectedAPListBandwidth)
mibBuilder.exportSymbols("CAMBIUM-PMP80211-MIB", dfsAlternative2CenterFrequency=dfsAlternative2CenterFrequency, cambiumpmp80211SystemUpTrap=cambiumpmp80211SystemUpTrap, sysDFSDetectedCount=sysDFSDetectedCount, routing=routing, dlWLanPerUserTxPower=dlWLanPerUserTxPower, cambiumpmpETSIframeSkipTrap=cambiumpmpETSIframeSkipTrap, mgmtIFIPAddressMode=mgmtIFIPAddressMode, ulWLanMCS14Packets=ulWLanMCS14Packets, txEtherLanBroadcastPacketCount=txEtherLanBroadcastPacketCount, wirelessRadiusIdentityStr=wirelessRadiusIdentityStr, wirelessInterfaceSyncHoldTime=wirelessInterfaceSyncHoldTime, cambiumIPAliasCnfTable=cambiumIPAliasCnfTable, connectedAPListSSID=connectedAPListSSID, connectedAPListRate=connectedAPListRate, cambiumIDMSumPRQCh1RSSI=cambiumIDMSumPRQCh1RSSI, dhcpOption82=dhcpOption82, cambiumIDMSumPcktsNum=cambiumIDMSumPcktsNum, cambiumIPAliasesNetmask=cambiumIPAliasesNetmask, cambiumSTADLRSSI=cambiumSTADLRSSI, systemDeviceLocLatitude=systemDeviceLocLatitude, cambiumpmp80211DFSStatusTrap=cambiumpmp80211DFSStatusTrap, mcastVLANVID=mcastVLANVID, wirelessMulticastEnhanceMode=wirelessMulticastEnhanceMode, cambiumSTAConnectedRFBandwidth=cambiumSTAConnectedRFBandwidth, cambiumDeviceAgentEnable=cambiumDeviceAgentEnable, cambiumpmp80211GpsFirmwareUpdateError=cambiumpmp80211GpsFirmwareUpdateError, portForwardingEntryEnable=portForwardingEntryEnable, classificationRuleValue=classificationRuleValue, cambiumBridgeTableAPUpdate=cambiumBridgeTableAPUpdate, txEtherLanMulticastPacketCount=txEtherLanMulticastPacketCount, cambiumWLANStatus=cambiumWLANStatus, cambiumSubscribedMcastGroupTable=cambiumSubscribedMcastGroupTable, classificationListEntry=classificationListEntry, networkBridge=networkBridge, connectedAPRate=connectedAPRate, cambiumPropagationDelay=cambiumPropagationDelay, cambiumEffectiveSTANetworkMode=cambiumEffectiveSTANetworkMode, dhcpLeaseMAC=dhcpLeaseMAC, cambiumIDMSumMaxRate=cambiumIDMSumMaxRate, wirelessSecurityMethod=wirelessSecurityMethod, l2SnmpLanRemoteAccess=l2SnmpLanRemoteAccess, cambiumStaticRoutesCnfGW=cambiumStaticRoutesCnfGW, dhcpLanEnable=dhcpLanEnable, wirelessInterfaceRateMinMCS=wirelessInterfaceRateMinMCS, wLanSessionDroppedCount=wLanSessionDroppedCount, cambiumForceTabUpdl2Frw=cambiumForceTabUpdl2Frw, cambiumAPConnectedSTAListTable=cambiumAPConnectedSTAListTable, cambiumpmp80211SystemConfiguration=cambiumpmp80211SystemConfiguration, idmDeviceListMAC=idmDeviceListMAC, connectedSTAPriority=connectedSTAPriority, cambiumDeviceAgent=cambiumDeviceAgent, cambiumToolBarOpts=cambiumToolBarOpts, wirelessInterfaceTPCMode=wirelessInterfaceTPCMode, cambiumForceTabUpdl3Frw=cambiumForceTabUpdl3Frw, confQoS=confQoS, apWiFiDLCTSMode=apWiFiDLCTSMode, staTxCapacity=staTxCapacity, networkWanPPPoEUsername=networkWanPPPoEUsername, webService=webService, l3FirewallEntrySrcMask=l3FirewallEntrySrcMask, networkLan2Enabled=networkLan2Enabled, mgmtVLANVP=mgmtVLANVP, cambiumConnectedAPMACAddress=cambiumConnectedAPMACAddress, wirelessRadiusUser2CertificateView=wirelessRadiusUser2CertificateView, cambiumAPConnectedSTAEntry=cambiumAPConnectedSTAEntry, cambiumARPIndex=cambiumARPIndex, cambiumpmp80211SoftwareUpdate=cambiumpmp80211SoftwareUpdate, cambiumIDMSumLRate=cambiumIDMSumLRate, cambiumAthRXBytes=cambiumAthRXBytes, syslogServerIPFourth=syslogServerIPFourth, wirelessRadiusServerList=wirelessRadiusServerList, connectedAPScanAge=connectedAPScanAge, connectedAPListRemainingSTA=connectedAPListRemainingSTA, cambiumManagementIFStatus=cambiumManagementIFStatus, wirelessRadiusUser1Certificate=wirelessRadiusUser1Certificate, cambiumSSHServer=cambiumSSHServer, wirelessMIRProfileTable=wirelessMIRProfileTable, cambiumEPMPMSN=cambiumEPMPMSN, connectedAPListFrequency=connectedAPListFrequency, dlWLanMCS09Packets=dlWLanMCS09Packets, wirelessInterfaceEncryption=wirelessInterfaceEncryption, l2FirewallEntrySrcMAC=l2FirewallEntrySrcMAC, cambiumEffectiveDeviceIPAddress=cambiumEffectiveDeviceIPAddress, cambiumEffectiveDeviceDefaultGateWay=cambiumEffectiveDeviceDefaultGateWay, syslogServerIPThird=syslogServerIPThird, dfsAlternative1CenterFrequency=dfsAlternative1CenterFrequency, wirelessRadiusIdentityRealm=wirelessRadiusIdentityRealm, mgmtIFGateway=mgmtIFGateway, wirelessDeviceCountryCode=wirelessDeviceCountryCode, txEtherLanDroppedPacketCount=txEtherLanDroppedPacketCount, cambiumAdvancedPerformanceMonitoring=cambiumAdvancedPerformanceMonitoring, cambiumSystemLog=cambiumSystemLog, dlWLanTotalUsedFrameTimePerSecond=dlWLanTotalUsedFrameTimePerSecond, networkWanDNSIPAddrPrimary=networkWanDNSIPAddrPrimary, cambiumpmp80211JSONCfgImportTrap=cambiumpmp80211JSONCfgImportTrap, prefferedAPEntry=prefferedAPEntry, cambiumARPIP=cambiumARPIP, mappingVLANEntry=mappingVLANEntry, wirelessAPWifiWLANmode=wirelessAPWifiWLANmode, cambiumAthRXErrors=cambiumAthRXErrors, cambiumToolbarGlobeState=cambiumToolbarGlobeState, cambiumToolbarDeviceConfigurationState=cambiumToolbarDeviceConfigurationState, caminfoScanFrequencyListCountry=caminfoScanFrequencyListCountry, cambiumpmp80211APListUpdate=cambiumpmp80211APListUpdate, dhcpServerStartIP=dhcpServerStartIP, connectedSTAListULRSSI=connectedSTAListULRSSI, staticRoutesEnableMain=staticRoutesEnableMain, cambiumMCSTable=cambiumMCSTable, cambiumEffectiveDeviceDNSIPAddress=cambiumEffectiveDeviceDNSIPAddress, cambiumForceSTARescan=cambiumForceSTARescan, cambiumLinkTest=cambiumLinkTest, connectedSTAListIP=connectedSTAListIP, ulWLanRetransPacketCount=ulWLanRetransPacketCount, cambiumForceTabUpdMappingVlan=cambiumForceTabUpdMappingVlan, cambiumEthTXPackets=cambiumEthTXPackets, wirelessInterfaceScanFrequencyListTen=wirelessInterfaceScanFrequencyListTen, wirelessCcaEnable=wirelessCcaEnable, snmpSystemName=snmpSystemName, l2FirewallEntryIndex=l2FirewallEntryIndex, wirelessRadiusServerPort=wirelessRadiusServerPort, classificationRuleIP=classificationRuleIP, cambiumEthRXPackets=cambiumEthRXPackets, cambiumInternetConnectionPollPeriod=cambiumInternetConnectionPollPeriod, l2FirewallEntry=l2FirewallEntry, ulWLanMCS11Packets=ulWLanMCS11Packets, cambiumpmp80211ConfigurationState=cambiumpmp80211ConfigurationState, dlWLanTotalOverheadFrameTimePerSecond=dlWLanTotalOverheadFrameTimePerSecond, dlWLanMCS10Packets=dlWLanMCS10Packets, idmDeviceListPRQPcktsNum=idmDeviceListPRQPcktsNum, dmzEnable=dmzEnable, dlWLanKbitCount=dlWLanKbitCount, ulWLanMCS08Packets=ulWLanMCS08Packets, cambiumpmp80211STAListUpdateStatus=cambiumpmp80211STAListUpdateStatus, cambiumGPSDeviceInfo=cambiumGPSDeviceInfo, wirelessInterfaceHTMode=wirelessInterfaceHTMode, l2FirewallTable=l2FirewallTable, l2FirewallEntryDstMAC=l2FirewallEntryDstMAC, cambiumFullCfgRestoreError=cambiumFullCfgRestoreError, cambiumIDMMode=cambiumIDMMode, dlWLanPerUserErrorDroppedPacketCount=dlWLanPerUserErrorDroppedPacketCount, connectedAPListINT=connectedAPListINT, bcPriority=bcPriority, connectedAPSNR=connectedAPSNR, wirelessMIRProfileIndex=wirelessMIRProfileIndex, cambiumEffectiveAntennaGain=cambiumEffectiveAntennaGain, cambiumLAN2ModeStatus=cambiumLAN2ModeStatus, dhcpLanHostMAC=dhcpLanHostMAC, cambiumPerformanceMonitoring=cambiumPerformanceMonitoring, cambiumpmp80211ConfigurationApply=cambiumpmp80211ConfigurationApply, dhcpLanHostTable=dhcpLanHostTable, cambiumJSONCfgImportError=cambiumJSONCfgImportError, camAPBrTabSTAMACAddress=camAPBrTabSTAMACAddress, wirelessInterfaceSyncSource=wirelessInterfaceSyncSource, powerSequenceFactoryDefault=powerSequenceFactoryDefault, sysRebootCount=sysRebootCount, cambiumHWInfo=cambiumHWInfo, dlWLanBroadcastPacketCount=dlWLanBroadcastPacketCount, cambiumGPSFirmwareUpdateStatus=cambiumGPSFirmwareUpdateStatus, ulWLanMCS07Packets=ulWLanMCS07Packets, networkBridgeMTU=networkBridgeMTU, cambiumLinkTestPckSize=cambiumLinkTestPckSize, cambiumEthTXDrops=cambiumEthTXDrops, membershipVLANTableEntryIndex=membershipVLANTableEntryIndex, cambiumpmp80211DeviceReboot=cambiumpmp80211DeviceReboot, wirelessSTAPriority=wirelessSTAPriority, sysCPUUsage=sysCPUUsage, idmDeviceListLRate=idmDeviceListLRate, cambiumLAN2Status=cambiumLAN2Status, dfsAlternative2Bandwidth=dfsAlternative2Bandwidth, dlWLanMCS13Packets=dlWLanMCS13Packets, l3FirewallEntrySrcIP=l3FirewallEntrySrcIP, l2FirewallEntryAction=l2FirewallEntryAction, cambiumAPCnsMGMTState=cambiumAPCnsMGMTState, ulWLanMulticastPacketCount=ulWLanMulticastPacketCount, connectedAPCAPS=connectedAPCAPS, cambiumConfigurationApplyOnReboot=cambiumConfigurationApplyOnReboot, networkWanPPPoE=networkWanPPPoE, cambiumSTABridgeEntry=cambiumSTABridgeEntry, networkWanDNSIPAddrSecondary=networkWanDNSIPAddrSecondary, cambiumARPMAC=cambiumARPMAC, snmpTrapEntryIP=snmpTrapEntryIP, cambiumIPAliasCnfEntry=cambiumIPAliasCnfEntry, cambiumDFSStatusStr=cambiumDFSStatusStr, cambiumIPAliasIP=cambiumIPAliasIP, gpsSatelliteStatus=gpsSatelliteStatus, cambiumSubscribedMcastGroupNum=cambiumSubscribedMcastGroupNum, cambiumLANStatus=cambiumLANStatus, dlWLanMCS02Packets=dlWLanMCS02Packets, dlWLanRetransPacketCount=dlWLanRetransPacketCount, cambiumDriverType=cambiumDriverType, ulWLanMCS00Packets=ulWLanMCS00Packets, ulWLanMCS13Packets=ulWLanMCS13Packets, connectedAPRSSI=connectedAPRSSI, cambiumStatsResetTimer=cambiumStatsResetTimer, l3FirewallEntryPort=l3FirewallEntryPort, networkWanPPPoEMTU=networkWanPPPoEMTU, connectedSTADLRateMbps=connectedSTADLRateMbps, dhcpServerEndIP=dhcpServerEndIP, networkWanPPPoEKeepAlive=networkWanPPPoEKeepAlive, cambiumpmp80211SoftwareUpdateStatus=cambiumpmp80211SoftwareUpdateStatus, cambiumFactoryReset=cambiumFactoryReset, wirelessInterfacePTPMode=wirelessInterfacePTPMode, cambiumIDMSumCRCCh1RSSI=cambiumIDMSumCRCCh1RSSI, connectedAPFrequency=connectedAPFrequency, cambiumSTAConductedTXPower=cambiumSTAConductedTXPower, cambiumEthTXMulticast=cambiumEthTXMulticast, wirelessDefaultCountryCode=wirelessDefaultCountryCode, wirelessDevice=wirelessDevice, cambiumpmp80211SystemActions=cambiumpmp80211SystemActions, cambiumFullCfgBackUpStatus=cambiumFullCfgBackUpStatus, cambiumStaticRoutesGW=cambiumStaticRoutesGW, wirelessRadiusDefaultCertificate=wirelessRadiusDefaultCertificate, connectedSTAULMCS=connectedSTAULMCS, connectedSTAMcastGRP1=connectedSTAMcastGRP1, classificationRuleQueue=classificationRuleQueue, cambiumSTAConnectedAPListEntry=cambiumSTAConnectedAPListEntry, ulWLanTotalUsedFrameTimePerSecond=ulWLanTotalUsedFrameTimePerSecond, pmpMibTree=pmpMibTree, l3FirewallEntryAction=l3FirewallEntryAction, cambiumLinkTestResultDL=cambiumLinkTestResultDL, ulWLanErrorDroppedPacketCount=ulWLanErrorDroppedPacketCount, cambiumToolbarGPSSyncStateStr=cambiumToolbarGPSSyncStateStr, cambiumAPNumberOfConnectedSTA=cambiumAPNumberOfConnectedSTA, multicast=multicast, cambiumAthRXPackets=cambiumAthRXPackets, cambiumIDMSummaryTable=cambiumIDMSummaryTable, networkPortSecurityMax=networkPortSecurityMax, acsState=acsState, cambiumEffectiveSyncSource=cambiumEffectiveSyncSource, networkWanNetmask=networkWanNetmask, idmSummaryIntMAC=idmSummaryIntMAC, sysNetworkEntryAuthenticationFailure=sysNetworkEntryAuthenticationFailure, mcastVLAN=mcastVLAN, cambiumToolBar=cambiumToolBar, mcPriority=mcPriority, portForwardingTableEntryLANIP=portForwardingTableEntryLANIP, cambiumSTADownlinkMCSMode=cambiumSTADownlinkMCSMode, cambiumForceTabUpdPortFw=cambiumForceTabUpdPortFw, cambiumARPTable=cambiumARPTable, wirelessType=wirelessType, rxEtherLanBroadcastPacketCount=rxEtherLanBroadcastPacketCount, network=network, systemConfigETSILicense=systemConfigETSILicense, dataVLANEnable=dataVLANEnable, cambiumSTAPriority=cambiumSTAPriority, wirelessRadiusTimeout=wirelessRadiusTimeout, cambiumpmp80211FullCfgBackupTrap=cambiumpmp80211FullCfgBackupTrap, upnpd=upnpd, classificationRuleType=classificationRuleType, cambiumEffectiveCountryCode=cambiumEffectiveCountryCode, connectedSTAMirSrc=connectedSTAMirSrc, connectedSTAIP=connectedSTAIP, ulWLanKbitCount=ulWLanKbitCount, cambiumToolbarSyncSource=cambiumToolbarSyncSource)
mibBuilder.exportSymbols("CAMBIUM-PMP80211-MIB", dfsAlternative1Bandwidth=dfsAlternative1Bandwidth, cambiumpmp80211GpsFirmwareUpdateStatusTrap=cambiumpmp80211GpsFirmwareUpdateStatusTrap, ulWLanPerUserErrorDroppedPacketCount=ulWLanPerUserErrorDroppedPacketCount, cambiumPmp80211SystemMonitoring=cambiumPmp80211SystemMonitoring, cambiumManagementIFIPAddress=cambiumManagementIFIPAddress, connectedSTADLSNR=connectedSTADLSNR, networkLanDuplex=networkLanDuplex, cambiumCurrentuImageIVersion=cambiumCurrentuImageIVersion, apWiFiULCTSRTSMode=apWiFiULCTSRTSMode, mgmtVLANEnable=mgmtVLANEnable, l3FirewallEntry=l3FirewallEntry, idmDeviceListPRQCh0RSSI=idmDeviceListPRQCh0RSSI, cambiumIDMSumLCombRSSI=cambiumIDMSumLCombRSSI, connectedAPChannel=connectedAPChannel, cambiumSTABridgeTable=cambiumSTABridgeTable, l3FirewallEntryDstMask=l3FirewallEntryDstMask, mappingVLANTableEntryCVLAN=mappingVLANTableEntryCVLAN, snmpTrapTable=snmpTrapTable, idmDeviceListPRQCh1RSSI=idmDeviceListPRQCh1RSSI, cambiumIPAliasEntry=cambiumIPAliasEntry, idmSummaryIntSSID=idmSummaryIntSSID, networkLan2Duplex=networkLan2Duplex, snmpTrapCommunity=snmpTrapCommunity, networkLanDNSIPAddr=networkLanDNSIPAddr, l3FirewallTable=l3FirewallTable, cambiumpmp80211ConfigurationDiscard=cambiumpmp80211ConfigurationDiscard, idmDeviceListPcktsNum=idmDeviceListPcktsNum, caminfo=caminfo, connectedAPNEState=connectedAPNEState, connectedSTAClickTWebPort=connectedSTAClickTWebPort, cambiumTDDStatsPerSTATable=cambiumTDDStatsPerSTATable, dlWLanMCS08Packets=dlWLanMCS08Packets, dlWLanMCS12Packets=dlWLanMCS12Packets, networkWanPPPoEMSSClamping=networkWanPPPoEMSSClamping, wirelessSMWifiDistance=wirelessSMWifiDistance, ulWLanTotalPacketCount=ulWLanTotalPacketCount, ulWLanMCS12Packets=ulWLanMCS12Packets, voipEnable=voipEnable, cambiumFullCfgRestore=cambiumFullCfgRestore, connectedSTAMcastGRP0=connectedSTAMcastGRP0, connectedAPListScanAge=connectedAPListScanAge, wirelessRadiusUsername=wirelessRadiusUsername, mgmtVLAN=mgmtVLAN, acsScanMaxDwellTime=acsScanMaxDwellTime, caminfoScanFrequencyListTwentyBand=caminfoScanFrequencyListTwentyBand, cambiumToolBarStates=cambiumToolBarStates, networkLanSpeed=networkLanSpeed, cambiumIDMResultsEntry=cambiumIDMResultsEntry, cambiumRFStatus=cambiumRFStatus, cambiumMcastStatus=cambiumMcastStatus, dhcpServerStaticHostTable=dhcpServerStaticHostTable, cambiumEthRXMulticast=cambiumEthRXMulticast, cambiumGPSLongitude=cambiumGPSLongitude, cambiumARPEntry=cambiumARPEntry, wirelessInterfaceScanFrequencyListFive=wirelessInterfaceScanFrequencyListFive, connectedSTAClickTWebSec=connectedSTAClickTWebSec, cambiumForceTabUpdAPAlias=cambiumForceTabUpdAPAlias, cambiumJSONCfgImportStatus=cambiumJSONCfgImportStatus, connectedAPListBSSID=connectedAPListBSSID, wirelessInterfaceTDDRatio=wirelessInterfaceTDDRatio, systemConfigTimezone=systemConfigTimezone, portForwardingTableEntryWLANPortEnd=portForwardingTableEntryWLANPortEnd, cambiumIDMSummaryEntry=cambiumIDMSummaryEntry, connectedAPMeetNEAttemptCriteria=connectedAPMeetNEAttemptCriteria, wirelessStaIsolate=wirelessStaIsolate, mcastVLANEnable=mcastVLANEnable, cambiumpmp80211ConfigurationSave=cambiumpmp80211ConfigurationSave, dhcpServerLeaseEntry=dhcpServerLeaseEntry, wirelessMIRSTAProfileNumber=wirelessMIRSTAProfileNumber, ulWLanMCS01Packets=ulWLanMCS01Packets, cambiumpmp80211GpsFirmwareUpdateErrorStr=cambiumpmp80211GpsFirmwareUpdateErrorStr, cambiumTDDStatsPerSTAEntry=cambiumTDDStatsPerSTAEntry, dlWLanMulticastPacketCount=dlWLanMulticastPacketCount, cambiumSystemUptime=cambiumSystemUptime, txEtherLanKbitCount=txEtherLanKbitCount, dlWLanMCSUsedFrameTimePerSecond=dlWLanMCSUsedFrameTimePerSecond, camAPBrTabDevPort=camAPBrTabDevPort, dhcpLanHostEntry=dhcpLanHostEntry, ulWLanCapacityDroppedPacketCount=ulWLanCapacityDroppedPacketCount, l3FirewallEntryToS=l3FirewallEntryToS, connectedSTAListMirDLRate=connectedSTAListMirDLRate, dlWLanMCS06Packets=dlWLanMCS06Packets, networkBroadcastStormRate=networkBroadcastStormRate, wirelessInterface=wirelessInterface, systemDeviceLocLongitude=systemDeviceLocLongitude, networkWanPPPoEAC=networkWanPPPoEAC, cambiumSTAConnectedAPListTable=cambiumSTAConnectedAPListTable, networkLanEnabled=networkLanEnabled, dlWLanTotalAvailableFrameTimePerSecond=dlWLanTotalAvailableFrameTimePerSecond, idmDeviceListCRCCh1RSSI=idmDeviceListCRCCh1RSSI, connectedAPListChannel=connectedAPListChannel, ulWLanMCS15Packets=ulWLanMCS15Packets, cambiumCnsServConsStat=cambiumCnsServConsStat, dlWLanPerUserRetransmitPacketCount=dlWLanPerUserRetransmitPacketCount, vlans=vlans, cambiumForceTabUpdTrap=cambiumForceTabUpdTrap, l2FirewallEntryInterface=l2FirewallEntryInterface, cambiumSTAPowerControlMode=cambiumSTAPowerControlMode, camAPBrTabAgingTime=camAPBrTabAgingTime, wirelessRadiusPMP450Certificate=wirelessRadiusPMP450Certificate, cambiumJSONCfgImport=cambiumJSONCfgImport, cambiumSTADLCINR=cambiumSTADLCINR, wirelessRadiusDefCertificateView=wirelessRadiusDefCertificateView, cambiumJSONCfgExport=cambiumJSONCfgExport, cambiumLAN2SpeedStatus=cambiumLAN2SpeedStatus, wirelessRadiusUser1CertificateView=wirelessRadiusUser1CertificateView, cambiumEffectiveDeviceWANNetMask=cambiumEffectiveDeviceWANNetMask, mappingVLANTableEntryIndex=mappingVLANTableEntryIndex, networkUPNP=networkUPNP, cambiumpmp80211JSONCfgExportTrap=cambiumpmp80211JSONCfgExportTrap, acsScanMinDwellTime=acsScanMinDwellTime, cambiumLANMACAddress=cambiumLANMACAddress, cambiumRealTimeStatsMonitoring=cambiumRealTimeStatsMonitoring, dlkm=dlkm, cambiumGeneralStatus=cambiumGeneralStatus, networkWanMTU=networkWanMTU, dmz=dmz, networkBridgeIPAddressMode=networkBridgeIPAddressMode, cambiumSTAConnectedAPTable=cambiumSTAConnectedAPTable, classificationRuleIndex=classificationRuleIndex, cambiumCNSDeviceAgentPassword=cambiumCNSDeviceAgentPassword, cambiumBridgeTableSTAUpdate=cambiumBridgeTableSTAUpdate, caminfoScanFrequencyListFortyBand=caminfoScanFrequencyListFortyBand, cambiumStaticRoutesCnfEnbl=cambiumStaticRoutesCnfEnbl, snmpSystemDescription=snmpSystemDescription, dlWLanMCS03Packets=dlWLanMCS03Packets, rxEtherLanKbitCount=rxEtherLanKbitCount, cambiumpmp80211SoftwareUpdateError=cambiumpmp80211SoftwareUpdateError, networkLan2AutoNegotiation=networkLan2AutoNegotiation, wirelessInterfaceTPCTRL=wirelessInterfaceTPCTRL, classificationRuleMask=classificationRuleMask, cambiumSTADropReason=cambiumSTADropReason, systemConfigDeviceName=systemConfigDeviceName, networkLan=networkLan, portForwardingTableEntryProtocol=portForwardingTableEntryProtocol, wirelessInterfaceTXPower=wirelessInterfaceTXPower, cambiumSubModeType=cambiumSubModeType, cambiumStaticRoutesNetmask=cambiumStaticRoutesNetmask, l2DHCPServersBelowSTA=l2DHCPServersBelowSTA, cambiumJSONCfgExportLink=cambiumJSONCfgExportLink, dhcpStaticIndex=dhcpStaticIndex, cambiumGPSStatus=cambiumGPSStatus, connectedSTAListMirULRate=connectedSTAListMirULRate, cambiumIPAliasNetmask=cambiumIPAliasNetmask, networkPortSecurityAgingTime=networkPortSecurityAgingTime, cambiumRegisteredMcastGroupIP=cambiumRegisteredMcastGroupIP, dlWLanErrorDroppedPacketCount=dlWLanErrorDroppedPacketCount, cambiumpmp80211GPSSyncStatusTrap=cambiumpmp80211GPSSyncStatusTrap, cambiumEffectiveDeviceWANPPPoEStatus=cambiumEffectiveDeviceWANPPPoEStatus, systemConfig=systemConfig, l3FirewallEnable=l3FirewallEnable, sysRebootCounter=sysRebootCounter, l3FirewallEntryLog=l3FirewallEntryLog, dhcpLeaseIP=dhcpLeaseIP, connectedSTAMcastTotalGroups=connectedSTAMcastTotalGroups, networkSTP=networkSTP, systemConfigMinAntGain=systemConfigMinAntGain, idmDeviceListCRCPcktsNum=idmDeviceListCRCPcktsNum, ulWLanMCS05Packets=ulWLanMCS05Packets, httpPort=httpPort, cambiumpmp80211SystemTraps=cambiumpmp80211SystemTraps, PYSNMP_MODULE_ID=pmpMibTree, cambiumMcastHandlingStatus=cambiumMcastHandlingStatus, wirelessRadiusSeverInfo=wirelessRadiusSeverInfo, wirelessAcceptableAPSNRThreshold=wirelessAcceptableAPSNRThreshold, dhcpServerGatewayIP=dhcpServerGatewayIP, cambiumWebServer=cambiumWebServer, ulWLanTotalOverheadFrameTimePerSecond=ulWLanTotalOverheadFrameTimePerSecond, wirelessAcceptableAPRSSIThreshold=wirelessAcceptableAPRSSIThreshold, snmpDomainAccessIP=snmpDomainAccessIP, cambiumFullCfgBackUpLink=cambiumFullCfgBackUpLink, systemConfigGPSLockBit=systemConfigGPSLockBit, cambiumEffectiveWANIPAddress=cambiumEffectiveWANIPAddress, networkLanDefaultIP=networkLanDefaultIP, snmpReadOnlyCommunity=snmpReadOnlyCommunity, wirelessRadiusRetry=wirelessRadiusRetry, cambiumStaticRoutesIndex=cambiumStaticRoutesIndex, idmDeviceListCRCCh0RSSI=idmDeviceListCRCCh0RSSI, cambiumForceTabUpdRadiusServ=cambiumForceTabUpdRadiusServ, wirelessMIRList=wirelessMIRList, cambiumEffectiveDeviceLANNetMask=cambiumEffectiveDeviceLANNetMask, cambiumAthTXMulticast=cambiumAthTXMulticast, cambiumLinkTestStartForMAC=cambiumLinkTestStartForMAC, sysNetworkEntrySuccess=sysNetworkEntrySuccess, idmDeviceListLCombRSSI=idmDeviceListLCombRSSI, cambiumDhcpStatus=cambiumDhcpStatus, mgmtIFEnable=mgmtIFEnable, mgmtVLANVID=mgmtVLANVID, wirelessRadiusPassword=wirelessRadiusPassword, cambiumEffectiveTDDRatio=cambiumEffectiveTDDRatio, dlWLanPerUserTotalPacketCount=dlWLanPerUserTotalPacketCount, httpsPort=httpsPort, cambiumStaticRoutesCnfTable=cambiumStaticRoutesCnfTable, l3FirewallEntryDSCP=l3FirewallEntryDSCP, cambiumDeviceLatitude=cambiumDeviceLatitude, camSTABrTabDevPort=camSTABrTabDevPort, cambiumLinkTestStatus=cambiumLinkTestStatus, cambiumpmp80211ConfigurationReset=cambiumpmp80211ConfigurationReset, networkBridgeIPAddr=networkBridgeIPAddr, wirelessRadiusUseDefaultCertificate=wirelessRadiusUseDefaultCertificate, cambiumAPConnectedSTAListEntry=cambiumAPConnectedSTAListEntry, dataVLANVID=dataVLANVID, wirelessPrefList=wirelessPrefList, systemNtpServerSecondaryIP=systemNtpServerSecondaryIP, membershipVLANTable=membershipVLANTable, wirelessRadiusGUIUserAuth=wirelessRadiusGUIUserAuth, rxEtherLanTotalPacketCount=rxEtherLanTotalPacketCount, cambiumEthRXBroadcast=cambiumEthRXBroadcast, wirelessTXPowerManualLimit=wirelessTXPowerManualLimit, cambiumUbootVersion=cambiumUbootVersion, cambiumSTADLSNR=cambiumSTADLSNR, connectedAPAuthMethod=connectedAPAuthMethod, cambiumIDMSumCRCPcktsNum=cambiumIDMSumCRCPcktsNum, txEtherLanMultiBroadcastKbitCount=txEtherLanMultiBroadcastKbitCount, connectedSTADLMCS=connectedSTADLMCS, cambiumEffectiveAuthenticationType=cambiumEffectiveAuthenticationType, connectedAPListRSSI=connectedAPListRSSI, l2LanRemoteAccess=l2LanRemoteAccess, cambiumEthTXBytes=cambiumEthTXBytes, networkBroadcastStormEnabled=networkBroadcastStormEnabled, classificationListTable=classificationListTable, wirelessRadiusUser2CertificateName=wirelessRadiusUser2CertificateName, camSTABrTabAgingTime=camSTABrTabAgingTime, cambiumSTAMAC=cambiumSTAMAC, connectedSTAListMAC=connectedSTAListMAC, wirelessMulticastIgmpFastLeave=wirelessMulticastIgmpFastLeave, cambiumAPMcastTotalGroupCount=cambiumAPMcastTotalGroupCount, wirelessInterfaceTDDFrameSize=wirelessInterfaceTDDFrameSize, cambiumWirelessMACAddress=cambiumWirelessMACAddress, caminfoScanFrequencyListAllow59band=caminfoScanFrequencyListAllow59band, wirelessRadiusServerIndex=wirelessRadiusServerIndex, networkLan2PoEEnabled=networkLan2PoEEnabled, systemConfigHWLockBit=systemConfigHWLockBit, l3Firewall=l3Firewall, cambiumGPSCurrentSyncState=cambiumGPSCurrentSyncState, cambiumIDMSumMAC=cambiumIDMSumMAC, rxEtherLanErrorPacketCount=rxEtherLanErrorPacketCount, prefferedListTableEntryIndex=prefferedListTableEntryIndex, cambiumSTADistanceMil=cambiumSTADistanceMil, cambiumEffectiveNetworkLanMTU=cambiumEffectiveNetworkLanMTU, cambiumAthTXBroadcast=cambiumAthTXBroadcast, dhcpStaticMAC=dhcpStaticMAC, connectedSTATXCapacity=connectedSTATXCapacity, cambiumStaticRoutesEntry=cambiumStaticRoutesEntry, systemDeviceLocHeight=systemDeviceLocHeight, cambiumIPAliasesIndex=cambiumIPAliasesIndex, centerFrequency=centerFrequency, networkNATPMP=networkNATPMP, gpsSnrValue=gpsSnrValue, connectedAPSSID=connectedAPSSID, connectedAPListNoise=connectedAPListNoise, wirelessInterfacePTPMACAddress=wirelessInterfacePTPMACAddress, cambiumGPSNumTrackedSat=cambiumGPSNumTrackedSat, cambiumCurrentSWInfo=cambiumCurrentSWInfo)
mibBuilder.exportSymbols("CAMBIUM-PMP80211-MIB", cambiumStaticRoutesCnfNetmask=cambiumStaticRoutesCnfNetmask, cambiumIPAliasesEnable=cambiumIPAliasesEnable, cambiumJSONCfgExportError=cambiumJSONCfgExportError, networkAliases=networkAliases, cambiumEthTXBroadcast=cambiumEthTXBroadcast, cambiumAPConnectedSTATable=cambiumAPConnectedSTATable, ulWLanMCSUsedFrameTimePerSecond=ulWLanMCSUsedFrameTimePerSecond, cambiumForceTabUpdQos=cambiumForceTabUpdQos, wirelessInterfaceColocState=wirelessInterfaceColocState, wirelessInterfaceProtocolMode=wirelessInterfaceProtocolMode, connectedSTAULRSSI=connectedSTAULRSSI, connectedAPListCINR=connectedAPListCINR, dlWLanTotalPacketCount=dlWLanTotalPacketCount, txEtherLanErrorPacketCount=txEtherLanErrorPacketCount, wirelessRadiusUsePMP450Certificate=wirelessRadiusUsePMP450Certificate, rxEtherLanDroppedPacketCount=rxEtherLanDroppedPacketCount, cambiumCfg=cambiumCfg, mappingVLANTableEntrySVLAN=mappingVLANTableEntrySVLAN, connectedSTAListChannel=connectedSTAListChannel, cambiumMCSEntry=cambiumMCSEntry, dhcpServerLeaseTable=dhcpServerLeaseTable, syslogServerIPSecond=syslogServerIPSecond, networkBridgeGatewayIP=networkBridgeGatewayIP, idmDeviceListCycle=idmDeviceListCycle, portForwardingTable=portForwardingTable, connectedSTAListDLCINR=connectedSTAListDLCINR, wirelessMgmtPacketRate=wirelessMgmtPacketRate, connectedSTAListULMCS=connectedSTAListULMCS, wirelessRadius=wirelessRadius, cambiumGPSNumVisibleSat=cambiumGPSNumVisibleSat, cambiumpmp80211SoftwareUpdateStatusTrap=cambiumpmp80211SoftwareUpdateStatusTrap, connectedSTAListMirSrc=connectedSTAListMirSrc, connectedAPRemainingSTA=connectedAPRemainingSTA, dlWLanMCS05Packets=dlWLanMCS05Packets, connectedAPINT=connectedAPINT, dmzIPAddress=dmzIPAddress, cambiumGPSHeight=cambiumGPSHeight, wirelessRadiusUser1CertificateName=wirelessRadiusUser1CertificateName, l3FirewallEntryInterface=l3FirewallEntryInterface, idmDeviceListMaxRate=idmDeviceListMaxRate, cambiumACSCfg=cambiumACSCfg, wirelessMIRAPDefaultProfileNumber=wirelessMIRAPDefaultProfileNumber, cambiumAthTXDrops=cambiumAthTXDrops, cambiumIPAliasesIpAddr=cambiumIPAliasesIpAddr, l2FirewallEnable=l2FirewallEnable, ulWLanTotalAvailableFrameTimePerSecond=ulWLanTotalAvailableFrameTimePerSecond, portForwardingEntry=portForwardingEntry, dhcpLeaseIndex=dhcpLeaseIndex, sysNetworkEntryAttempt=sysNetworkEntryAttempt, l3FirewallEntryDstIP=l3FirewallEntryDstIP, networkLan2Speed=networkLan2Speed, dlWLanMCS11Packets=dlWLanMCS11Packets, connectedSTAAID=connectedSTAAID, cambiumIDMSumCRCCombRSSI=cambiumIDMSumCRCCombRSSI, cambiumSTAConnectedRFFrequency=cambiumSTAConnectedRFFrequency, cambiumEthTXErrors=cambiumEthTXErrors, ulWLanMCS04Packets=ulWLanMCS04Packets, cambiumForceTabUpdStaticRoutesCnf=cambiumForceTabUpdStaticRoutesCnf, dhcpLanStart=dhcpLanStart, cambiumIDMSumPRQCombRSSI=cambiumIDMSumPRQCombRSSI, cambiumpmp80211Tools=cambiumpmp80211Tools, cambiumAthTXErrors=cambiumAthTXErrors, cambiumLinkTestDuration=cambiumLinkTestDuration, wirelessDLMIR=wirelessDLMIR, rxEtherLanMultiBroadcastKbitCount=rxEtherLanMultiBroadcastKbitCount, cambiumAPBridgeEntry=cambiumAPBridgeEntry, wirelessInterfaceConnectionState=wirelessInterfaceConnectionState, cambiumForceTabUpdMIR=cambiumForceTabUpdMIR, cambiumSystem=cambiumSystem, cambiumAcsStatus=cambiumAcsStatus, wirelessRadiusServerTable=wirelessRadiusServerTable, ulWLanPerUserKbitCount=ulWLanPerUserKbitCount, l2FirewallEntryVlanID=l2FirewallEntryVlanID, cambiumpmp80211GpsFirmwareUpdate=cambiumpmp80211GpsFirmwareUpdate, cambiumAthRXMulticast=cambiumAthRXMulticast, prefferedAPTable=prefferedAPTable, wirelessRadiusExtraCertificateSet=wirelessRadiusExtraCertificateSet, networkLanIPAddressMode=networkLanIPAddressMode, dlWLanPerUserKbitCount=dlWLanPerUserKbitCount, portForwardingTableEntryWLANPortBegin=portForwardingTableEntryWLANPortBegin, mcastVLANVP=mcastVLANVP, wirelessRateMaxMCS=wirelessRateMaxMCS, idmDeviceListPRQCombRSSI=idmDeviceListPRQCombRSSI, wirelessInterfaceTDDAntennaGain=wirelessInterfaceTDDAntennaGain, cambiumAthTXBytes=cambiumAthTXBytes, cambiumEthRXErrors=cambiumEthRXErrors, l2FirewallEntryEtherType=l2FirewallEntryEtherType, cambiumSTADistanceKm=cambiumSTADistanceKm, apWiFiRTSThreshold=apWiFiRTSThreshold, wirelessRadiusCertificateListRow1=wirelessRadiusCertificateListRow1, cambiumEthRXDrops=cambiumEthRXDrops, membershipVLANTableEntryVIDBegin=membershipVLANTableEntryVIDBegin, cambiumDeviceAgentCNSURL=cambiumDeviceAgentCNSURL, gpsSatelliteId=gpsSatelliteId, systemNtpServerIPMode=systemNtpServerIPMode)
