#
# PySNMP MIB module HUAWEI-MPLS-EXTEND-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-MPLS-EXTEND-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, ValueRangeConstraint, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "SingleValueConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
ifIndex, ifName = mibBuilder.importSymbols("IF-MIB", "ifIndex", "ifName")
InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetAddressType")
MplsIndexType, = mibBuilder.importSymbols("MPLS-LSR-STD-MIB", "MplsIndexType")
MplsTunnelInstanceIndex, MplsExtendedTunnelId, MplsTunnelIndex, MplsLsrIdentifier = mibBuilder.importSymbols("MPLS-TC-STD-MIB", "MplsTunnelInstanceIndex", "MplsExtendedTunnelId", "MplsTunnelIndex", "MplsLsrIdentifier")
mplsTunnelAdminStatus, mplsTunnelOperStatus = mibBuilder.importSymbols("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus", "mplsTunnelOperStatus")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, Counter32, Bits, ObjectIdentity, MibIdentifier, ModuleIdentity, IpAddress, TimeTicks, Counter64, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Integer32, Gauge32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Counter32", "Bits", "ObjectIdentity", "MibIdentifier", "ModuleIdentity", "IpAddress", "TimeTicks", "Counter64", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Integer32", "Gauge32", "Bits")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hwMplsExtendMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121))
hwMplsExtendMib.setRevisions(('2015-08-01 12:00', '2015-04-11 12:00', '2015-03-31 14:19', '2015-03-19 17:00', '2015-01-22 19:16', '2015-01-12 20:16', '2014-11-21 18:00', '2014-11-14 18:00', '2014-11-06 16:30', '2014-08-12 14:50', '2014-07-21 14:27', '2014-06-16 14:17', '2014-02-17 19:05', '2014-02-07 11:00', '2014-01-27 11:00', '2014-01-13 13:45', '2013-11-07 17:45', '2013-09-11 17:45', '2013-04-13 16:52', '2013-01-14 15:25', '2012-07-05 20:25', '2012-06-08 14:05', '2012-06-05 11:00', '2012-05-09 11:00', '2012-05-04 11:00', '2011-11-29 11:00', '2011-11-18 11:00', '2011-10-24 11:00', '2011-07-30 11:00', '2010-11-23 11:55', '2010-07-13 15:35', '2006-06-30 15:54',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwMplsExtendMib.setRevisionsDescriptions(('V2.39, add a new alarm, hwMplsTunnelHotstandbySwitch hwMplsTunnelHotstandbyResume.', 'V2.38, modify enum hwMplsResourceType for supporting MPLS CSPF resource total exceed alarm.', 'V2.37, add for hwMplsTunnelStatisticsTable.', 'V2.36, add enum hwMplsResourceType for supporting MPLS CSPF resource total exceed alarm.', 'V2.35, modify hwMplsIngressLsrId hwMplsEgressLsrId.', 'V2.34, modify hwMplsTeFrrSwitch.', 'V2.33, add hwMplsTunnelCommitLost hwMplsTunnelCommitLostClear.', 'V2.32, add hwMplsLspLoopBack hwMplsLspLoopBackClear hwMplsSessionTunnelId hwMplsLocalLspId hwMplsIngressLsrId hwMplsEgressLsrId hwMplsLspName.', 'V2.31, add enum ldpTotalLocalAdjacency to hwMplsResourceType for supporting MPLS resource total and threshold exceed alarm.', 'V2.30, add enum outSegment and autoPrimaryTunnelIf to hwMplsResourceType for supporting MPLS resource total exceed alarm.', 'V2.29, add enum privateNetBgp to hwMplsLspProtocol for supporting private network bgp lsp threshold alarm.', 'V2.28, add traps: hwMplsResourceThresholdExceed, hwMplsResourceThresholdExceedClear, hwMplsResourceTotalCountExceed, hwMplsResourceTotalCountExceedClear.', 'V2.27, modify hwStaticLspDownReason for add invalid ring reason .', 'V2.26, modify hwStaticLspDownReason for configure update.', 'V2.25, modify hwStaticLspDownReason for tunnel dowm.', 'V2.24, add enum ldpfrr, rsvp, totalLsp and totalCrLsp to hwMplsLspProtocol for supporting ldp frr, rsvp lsp, total lsp, total cr lsp threshold alarm.', 'V2.23, add enum bgp and bgpv6 to hwMplsLspProtocol for supporting bgp and bgp ipv6 lsp threshold alarm.', 'V2.22, add table: hwMplsTrafficStatisticsStaticLspTable.', 'V2.21, modify hwMplsRingSwitch, hwMplsRingResume.', 'V2.20, add the description of hwmplsDynamicLabelThresholdexceed,hwmplsDynamicLabelThresholdexceedClear,hwmplsDynamicLabeltotalcountexceed,hwmplsDynamicLabeltotalcountexceedClear.', 'V2.07, modify the description of hwMplsLspTotalCountExceed.', 'V2.06, add traps: hwmplslspThresholdexceed, hwmplslspthresholdexceedclear, hwmplslsptotalcountexceed, hwmplslsptotalcountexceedclear.', 'V2.05, add traps: hwmplstunneldelete; modify hwmplsoamtunnellock to hwmplsoamlocallock; modify hwmplstunnellockrecovery to hwmplslocallockrecovery.', 'V2.05, add traps: from hwMplsRingWestOamLoss to hwMplsRingEastOamUnexpectedMepClear.', 'V2.04, add traps: hwMplsoamTunnellock, hwMplsoamTunnellockRecovery.', 'V2.03, add traps: hwMplsExtTunnelDown, hwMplsExtTunnelDownClear.', 'V2.02, add traps: hwMplsTunnelBBSwitch, hwMplsTunnelBBResume.', 'V2.01, add traps: hwMplsTeAutoTunnelDownClear, hwMplsTeAutoTunnelPrimaryDownClear.', 'V2.00, delete Defval clause in these nodes: hwMplsTunnelDownReason, hwMplsTunnelLspType.', 'V1.02, modified the MIB description.', 'V1.01, modified the MIB description.', 'V1.00, initial LSPM MIB.',))
if mibBuilder.loadTexts: hwMplsExtendMib.setLastUpdated('201508011200Z')
if mibBuilder.loadTexts: hwMplsExtendMib.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwMplsExtendMib.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwMplsExtendMib.setDescription('This MIB is used for defining the HUAWEI private extended Multiprotocol Label Switching (MPLS) MIB object. All MIB objects are used to describe private managed objects and trap definitions for MPLS.')
hwMplsExtendMibTunnel = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1))
hwMplsTunnelTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1), )
if mibBuilder.loadTexts: hwMplsTunnelTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelTable.setDescription('A tunnel needs to be uniquely identified across an MPLS network. Indexes hwMplsTunnelIndex and hwMplsTunnelInstance uniquely identify a tunnel on the LSR originating the tunnel. hwMplsTunnelIngressLSRId uniquely identifies a tunnel across an MPLS network. The last index hwMplsTunnelEgressLSRId is useful in identifying all instances of a tunnel that are terminated on the same egress LSR. The indexes of this table are hwMplsTunnelIndex, hwMplsTunnelInstance, hwMplsTunnelIngressLSRId and hwMplsTunnelEgressLSRId.')
hwMplsTunnelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1), ).setIndexNames((0, "HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelIndex"), (0, "HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInstance"), (0, "HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelIngressLSRId"), (0, "HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelEgressLSRId"))
if mibBuilder.loadTexts: hwMplsTunnelEntry.setReference('1. RFC 2863 - The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000 ')
if mibBuilder.loadTexts: hwMplsTunnelEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelEntry.setDescription('A tunnel needs to be uniquely identified across an MPLS network. Indexes hwMplsTunnelIndex and hwMplsTunnelInstance uniquely identify a tunnel on the LSR originating the tunnel. hwMplsTunnelIngressLSRId uniquely identifies a tunnel across an MPLS network. The last index hwMplsTunnelEgressLSRId is useful in identifying all instances of a tunnel that are terminated on the same egress LSR. The indexes of this entry are hwMplsTunnelIndex, hwMplsTunnelInstance, hwMplsTunnelIngressLSRId and hwMplsTunnelEgressLSRId.')
hwMplsTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 1), MplsTunnelIndex())
if mibBuilder.loadTexts: hwMplsTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelIndex.setDescription('Uniquely identifies a set of tunnel instances between a pair of ingress and egress LSRs. When the MPLS signalling protocol is rsvp(2), this value equals to the value signaled in the Tunnel ID of the SESSION object. When the MPLS signalling protocol is crldp(3), this value equals to the value signaled in the LSP ID. Reference to MPLS-TE-STD-MIB.')
hwMplsTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 2), MplsTunnelInstanceIndex())
if mibBuilder.loadTexts: hwMplsTunnelInstance.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelInstance.setDescription('Uniquely identifies a particular instance of a tunnel between a pair of ingress and egress LSRs. It is used to identify multiple instances of tunnels for backup and parallel tunnels. When the MPLS signaling protocol is rsvp(2), this value equals to the LSP ID of the Sender Template object. When the signaling protocol is crldp(3) there is no equivalent signaling object. Reference to MPLS-TE-STD-MIB.')
hwMplsTunnelIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 3), MplsExtendedTunnelId())
if mibBuilder.loadTexts: hwMplsTunnelIngressLSRId.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelIngressLSRId.setDescription('Indicates the ingress LSR ID of this tunnel. When the MPLS signalling protocol is rsvp(2), this value equals to the Tunnel Sender Address in the Sender Template object and may equal to the Extended Tunnel ID in the SESSION object. When the MPLS signalling protocol is crldp(3), this value equals to the Ingress LSR Router ID in the LSPID TLV object. Reference to MPLS-TE-STD-MIB.')
hwMplsTunnelEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 4), MplsExtendedTunnelId())
if mibBuilder.loadTexts: hwMplsTunnelEgressLSRId.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelEgressLSRId.setDescription('Indicates the egress LSR ID of this tunnel. Reference to MPLS-TE-STD-MIB.')
hwMplsTunnelClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("bc0", 1), ("bc1", 2), ("invalidValue", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelClassType.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelClassType.setDescription('Indicates the bandwidth type used by this tunnel. Options: 1. bc0(1) -indicates the bandwidth type is bc0. 2. bc1(2) -indicates the bandwidth type is bc1. 3. invalidValue(3) -indicates the invalid value. ')
hwMplsTunnelBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelBandwidth.setDescription('Indicates the bandwidth used by this tunnel. Unit: kbit/s ')
hwMplsTunnelAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelAdminStatus.setDescription('Indicates the management status of this tunnel.Reference to MPLS-TE-STD-MIB. Options: 1. up(1) -indicates the management status of this tunnel is up. 2. down(2) -indicates the management status of this tunnel is down. 3. testing(3) -indicates the tunnel is used in some test mode. ')
hwMplsTunnelOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3), ("unknown", 4), ("dormant", 5), ("notPresent", 6), ("lowerLayerDown", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelOperStatus.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelOperStatus.setDescription('Indicates the actual operational status of this tunnel, which is but not limited to the status of this tunnel of a certain period.Reference to MPLS-TE-STD-MIB. Options: 1. up(1) -indicates that the operational status of this tunnel is up. 2. down(2) -indicates that the operational status of this tunnel is down. 3. testing(3) -indicates that the tunnel is used in some test mode. 4. unknown(4) -indicates the invalid value. 5. dormant(5) -indicates that the status cannot be determined. 6. notPresent(6) -indicates that some component is missing 7. lowerLayerDown(7) -indicates the Down state due to the state of lower layer interfaces. ')
hwMplsTunnelSessionAttr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 9), Bits().clone(namedValues=NamedValues(("localProtectionDesired", 0), ("nodeProtectionDesired", 1), ("bandwidthProtectionDesired", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelSessionAttr.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelSessionAttr.setDescription('Indicates protection types desired by the primary tunnel, such as node protection, link protection or bandwidth protection. Options: 1. localProtectionDesired(0) -indicates link protection. 2. nodeProtectionDesired(1) -indicates node protection. 3. bandwidthProtectionDesired(2) -indicates bandwidth protection. ')
hwMplsTunnelFrrSetupPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelFrrSetupPrio.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelFrrSetupPrio.setDescription('Indicates the setup PRI of auto-bypass tunnel. Range: 0-7 Default: 7 ')
hwMplsTunnelFrrHoldingPrio = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 11), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelFrrHoldingPrio.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelFrrHoldingPrio.setDescription('Indicates the holding PRI of auto-bypass tunnel. Range: 0-7 Default: 7 ')
hwMplsTunnelFrrBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelFrrBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelFrrBandwidth.setDescription('Indicates the protecting bandwidth of auto-bypass tunnel. Its value is defined by the configuration on the primary tunnel. Unit: kbit/s')
hwMplsTunnelFrrSwitchover = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelFrrSwitchover.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelFrrSwitchover.setDescription('Indicates FRR switching times')
hwMplsTunnelFrrBypassTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 14), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelFrrBypassTableIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelFrrBypassTableIndex.setDescription('Indicates the index of the bypass tunnel table, that is, the LSP ID of the bypass tunnel. The bypass table shows interfaces protected by specified bypass tunnel.')
hwMplsTunnelFrrARHopTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 15), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelFrrARHopTableIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelFrrARHopTableIndex.setDescription('Indicates the table index of the protection type adopted by each hop of the primary tunnel.')
hwMplsTunnelName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 16), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelName.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelName.setDescription('Indicates the tunnel name. The name can refer to the tunnel on the console port of the LSR. If mplsTunnelIsIf is set to True, the IfName of the interface corresponding to this tunnel should have a value equal to hwMplsTunnelName. Reference to the description of IfName in RFC 2863.')
hwMplsTunnelIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 17), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelIfIndex.setDescription('Indicates the interface index of the tunnel. It uniquely identifies the tunnel name.')
hwMplsTunnelPreBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelPreBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelPreBandwidth.setDescription('Indicates the original bandwidth of the tunnel when the tunnel is in the Modify state. Unit: kbit/s')
hwMplsTunnelNextBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 19), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelNextBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelNextBandwidth.setDescription('Indicates the bandwidth of the tunnel that is to be changed when the tunnel is in the Modify state. Unit: kbit/s')
hwMplsTunnelCt0Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 20), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelCt0Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelCt0Bandwidth.setDescription("The bandwidth of Class-Type 0 (CT0) in this tunnel, in kbit/s. If all CT bandwidths are 0s, it means that this tunnel's Class-Type is CT0, and bandwidth is 0 kbit/s. Unit: kbit/s")
hwMplsTunnelCt1Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 21), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelCt1Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelCt1Bandwidth.setDescription('The bandwidth of Class-Type 1 (CT1) in this tunnel, in kbit/s. Unit: kbit/s')
hwMplsTunnelCt2Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 22), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelCt2Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelCt2Bandwidth.setDescription('The bandwidth of Class-Type 2 (CT2) in this tunnel, in kbit/s. Unit: kbit/s')
hwMplsTunnelCt3Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 23), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelCt3Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelCt3Bandwidth.setDescription('The bandwidth of Class-Type 3 (CT3) in this tunnel, in kbit/s. Unit: kbit/s')
hwMplsTunnelCt4Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 24), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelCt4Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelCt4Bandwidth.setDescription('The bandwidth of Class-Type 4 (CT4) in this tunnel, in kbit/s. Unit: kbit/s')
hwMplsTunnelCt5Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 25), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelCt5Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelCt5Bandwidth.setDescription('The bandwidth of Class-Type 5 (CT5) in this tunnel, in kbit/s. Unit: kbit/s')
hwMplsTunnelCt6Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 26), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelCt6Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelCt6Bandwidth.setDescription('The bandwidth of Class-Type 6 (CT6) in this tunnel, in kbit/s. Unit: kbit/s')
hwMplsTunnelCt7Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 27), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelCt7Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelCt7Bandwidth.setDescription('The bandwidth of Class-Type 7 (CT7) in this tunnel, in kbit/s. Unit: kbit/s')
hwMplsTunnelLspType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("invalid", 0), ("primary", 1), ("primaryModifing", 2), ("hotStandby", 3), ("hotStandbyModifing", 4), ("ordinary", 5), ("ordinaryModifing", 6), ("bestEffort", 7), ("bestEffortModifing", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelLspType.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelLspType.setDescription('This object is meaningful only at the ingress of the tunnel. It indicates LSP types. Options: 0. invalid(0) -indicates that the LSP type is invalid, the possible cause is that the LSP is not created at an ingress. 1. primary(1) -indicates the primary LSP 2. primaryModifing(2) -indicates the LSP that will replace the primary LSP 3. hotStandby(3) -indicates the hot-standby LSP 4. hotStandbyModifing(4) -indicates the LSP that will replace the hot-standby LSP 5. ordinary(5) -indicates the ordinary LSP 6. ordinaryModifing(6) -indicates the LSP that will replace the ordinary LSP 7. bestEffort(7) -indicates the Best-Effort LSP 8. bestEffortModifing(8) -indicates the LSP that will replace the Best-Effort LSP Modifying LSPs are created when users modify the make-before-break attribute of the corresponding LSP types. After being created, modifying LSPs replace the corresponding LSPs to transmit traffic. ')
hwMplsTunnelInterfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 29), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelInterfaceName.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelInterfaceName.setDescription('Indicates the tunnel interface name. The object is only valid at the ingress.')
hwMplsTunnelSignalProto = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rsvpTE", 1), ("static", 2), ("staticCR", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelSignalProto.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelSignalProto.setDescription('Indicates the signal protocol of this tunnel')
hwMplsTunnelType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 1, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("primaryTunnel", 2), ("bypassTunnel", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelType.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelType.setDescription('This object is meaningful only at the ingress of the tunnel. It indicates tunnel types. Options: 1. invalid(1) -indicates that the tunnel type is invalid, the possible cause is that it is not ingress node of this tunnel 2. primaryTunnel(2) -indicates that this is a primary tunnel 3. bypassTunnel(3) -indicates that this is a bypass tunnel ')
hwTunnelFrrBypassTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 2), )
if mibBuilder.loadTexts: hwTunnelFrrBypassTable.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrBypassTable.setDescription('Indicates the bypass tunnel. The indexes of this table are hwTunnelFrrBypassListIndex and hwTunnelFrrBypassIndex.')
hwTunnelFrrBypassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 2, 1), ).setIndexNames((0, "HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrBypassListIndex"), (0, "HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrBypassIndex"))
if mibBuilder.loadTexts: hwTunnelFrrBypassEntry.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrBypassEntry.setDescription('Indicates the bypass tunnel.The indexes of this entry are hwTunnelFrrBypassListIndex and hwTunnelFrrBypassIndex.')
hwTunnelFrrBypassListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 2, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwTunnelFrrBypassListIndex.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrBypassListIndex.setDescription('Indicates the index of the bypass tunnel table, that is, the LSP ID of the bypass tunnel.')
hwTunnelFrrBypassIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 2, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hwTunnelFrrBypassIndex.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrBypassIndex.setDescription('Indicates the index of the bypass tunnel interface.')
hwTunnelFrrBypassProtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 2, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelFrrBypassProtIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrBypassProtIfIndex.setDescription('Indicates the index of the interface protected by the bypass tunnel.')
hwTunnelFrrARHopTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 3), )
if mibBuilder.loadTexts: hwTunnelFrrARHopTable.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrARHopTable.setDescription("Indicates the FrrARHopTable, which will show every hop's frr protect information of the tunnel. The indexes of this table are hwTunnelFrrARHopListIndex and hwTunnelFrrARHopIndex.")
hwTunnelFrrARHopEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 3, 1), ).setIndexNames((0, "HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrARHopListIndex"), (0, "HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrARHopIndex"))
if mibBuilder.loadTexts: hwTunnelFrrARHopEntry.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrARHopEntry.setDescription("Indicates the FrrARHopTable, which will show every hop's frr protect information of the tunnel. The indexes of this entry are hwTunnelFrrARHopListIndex and hwTunnelFrrARHopIndex.")
hwTunnelFrrARHopListIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwTunnelFrrARHopListIndex.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrARHopListIndex.setDescription('Indicates the table index of each hop along the primary tunnel.')
hwTunnelFrrARHopIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hwTunnelFrrARHopIndex.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrARHopIndex.setDescription('Indicates the index of each hop along the primary tunnel.')
hwTunnelFrrARHopProtDesired = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 3, 1, 3), Bits().clone(namedValues=NamedValues(("localProtection", 0), ("nodeProtection", 1), ("bandwidthProtection", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelFrrARHopProtDesired.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrARHopProtDesired.setDescription('Indicates the FRR protection types desired by the primary tunnel interface, including: 0: link protection, 1: node protection, 2: bandwidth protection ')
hwTunnelFrrARHopProtActual = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 3, 1, 4), Bits().clone(namedValues=NamedValues(("localProtection", 0), ("nodeProtection", 1), ("bandwidthProtection", 2), ("protectionInuse", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelFrrARHopProtActual.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrARHopProtActual.setDescription('Indicates the actual FRR protection types of the primary tunnel interface, including: 0: link protection, 1: node protection, 2: bandwidth protection, 3: primary tunnel protection in use ')
hwTunnelFrrRouteDBTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 4), )
if mibBuilder.loadTexts: hwTunnelFrrRouteDBTable.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrRouteDBTable.setDescription('Indicates the primary tunnel is protected by which bypass tunnel. The indexes of this table are hwTunnelFrrRouteDBTunnelIndex, hwTunnelFrrRouteDBTunnelInstance, hwTunnelFrrRouteDBTunnelIngressLSRId and hwTunnelFrrRouteDBTunnelEngressLSRId.')
hwTunnelFrrRouteDBEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 4, 1), ).setIndexNames((0, "HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrRouteDBTunnelIndex"), (0, "HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrRouteDBTunnelInstance"), (0, "HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrRouteDBTunnelIngressLSRId"), (0, "HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrRouteDBTunnelEngressLSRId"))
if mibBuilder.loadTexts: hwTunnelFrrRouteDBEntry.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrRouteDBEntry.setDescription('Indicates the primary tunnel is protected by which bypass tunnel. The indexes of this entry are hwTunnelFrrRouteDBTunnelIndex, hwTunnelFrrRouteDBTunnelInstance, hwTunnelFrrRouteDBTunnelIngressLSRId and hwTunnelFrrRouteDBTunnelEngressLSRId.')
hwTunnelFrrRouteDBTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 4, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwTunnelFrrRouteDBTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrRouteDBTunnelIndex.setDescription('Identifies the index of the primary. Manager obtains new index values for row creation in this table by reading mplsTunnelIndexNext. When the MPLS signaling protocol is rsvp(2), this value equals to the value signaled in the Tunnel ID of the SESSION object. When the MPLS signaling protocol is crldp(3), this value equals to the value signaled in the LSP ID. Reference to MPLS-TE-STD-MIB.')
hwTunnelFrrRouteDBTunnelInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 4, 1, 2), Unsigned32())
if mibBuilder.loadTexts: hwTunnelFrrRouteDBTunnelInstance.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrRouteDBTunnelInstance.setDescription('Uniquely identifies a particular instance of a tunnel between a pair of ingress and egress LSRs. It is the object identifies multiple instances of tunnels for the purposes of backup and parallel tunnels. When the MPLS signaling protocol is rsvp(2), this value equals to the LSP ID of the Sender Template object. When the signaling protocol is crldp(3), there is no equivalent signaling object. Reference to MPLS-TE-STD-MIB.')
hwTunnelFrrRouteDBTunnelIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 4, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hwTunnelFrrRouteDBTunnelIngressLSRId.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrRouteDBTunnelIngressLSRId.setDescription('Identifies the ingress LSR ID of the primary tunnel. When the MPLS signalling protocol is rsvp(2),LSR ID equals to the Tunnel Sender Address in the Sender Template object or the Extended Tunnel Id in the SESSION object. When the MPLS signalling protocol is crldp(3), LSR ID equals to the Ingress LSR Router ID in the LSPID TLV object.')
hwTunnelFrrRouteDBTunnelEngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 4, 1, 4), Unsigned32())
if mibBuilder.loadTexts: hwTunnelFrrRouteDBTunnelEngressLSRId.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrRouteDBTunnelEngressLSRId.setDescription('Identifies the egress LSR ID of the primary tunnel. Reference to MPLS-TE-STD-MIB.')
hwTunnelFrrRouteDBBypassIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 4, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelFrrRouteDBBypassIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrRouteDBBypassIfIndex.setDescription('Indicates the interface index of the bypass tunnel.')
hwTunnelFrrRouteDBInnerLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 4, 1, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwTunnelFrrRouteDBInnerLabel.setStatus('current')
if mibBuilder.loadTexts: hwTunnelFrrRouteDBInnerLabel.setDescription('Indicates the inner label of the primary tunnel and bypass tunnel.')
hwStaticLspTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 5), )
if mibBuilder.loadTexts: hwStaticLspTable.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspTable.setDescription('A static LSP is created by a network administrator by using static MPLS. Note that only point-to-point static LSP segments are supported. Each static MPLS LSP can thus have one out-segment originating at this LSR and/or one in-segment terminating at this LSR. The indexes of this table are hwStaticLspIndex, hwStaticLspInSegmentIndex, and hwStaticLspOutSegmentIndex.')
hwStaticLspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 5, 1), ).setIndexNames((0, "HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspIndex"), (0, "HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspInSegmentIndex"), (0, "HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspOutSegmentIndex"))
if mibBuilder.loadTexts: hwStaticLspEntry.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspEntry.setDescription('A static LSP is created by a network administrator by using static MPLS. Note that only point-to-point static LSP segments are supported. Each static MPLS LSP can thus have one out-segment originating at this LSR and/or one in-segment terminating at this LSR. The indexes of this entry are hwStaticLspIndex, hwStaticLspInSegmentIndex, and hwStaticLspOutSegmentIndex.')
hwStaticLspIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 5, 1, 1), MplsIndexType())
if mibBuilder.loadTexts: hwStaticLspIndex.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspIndex.setDescription('Indicates the index of the static LSP. If the string is 0x00, it means that the index is invalid.')
hwStaticLspInSegmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 5, 1, 2), MplsIndexType())
if mibBuilder.loadTexts: hwStaticLspInSegmentIndex.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspInSegmentIndex.setDescription('Indicates the incoming label index of the static LSP/CR-LSP. If the string is 0x00, it means that the index is invalid. In this case, no corresponding mplsInSegmentEntry exists. Reference to MPLS-LSR-STD-MIB.')
hwStaticLspOutSegmentIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 5, 1, 3), MplsIndexType())
if mibBuilder.loadTexts: hwStaticLspOutSegmentIndex.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspOutSegmentIndex.setDescription('Indicates the outgoing index of the static LSP/CR-LSP. If the entry is used to identify the incoming node or intermediate node of the LSP, this object cannot be set to the string 0x00. Because corresponding mplsOutSegmentEntry exists. If the entry is used to identify the outgoing node of the LSP, this object must be set to the string 0x00. Because no corresponding mplsOutSegmentEntry exists. Reference to MPLS-LSR-STD-MIB.')
hwStaticLspOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("static", 1), ("crstatic", 2), ("other", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStaticLspOwner.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspOwner.setDescription('Denotes the entity that creates and manages the static LSP. See MPLS-LSR-STD-MIB. Options: 1. static(1) -indicates the static LSP. 2. crstatic(2) -indicates the static CR-LSP. 3. other(3) -indicates the LSP of another type. ')
hwStaticLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 5, 1, 5), SnmpAdminString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStaticLspName.setReference('RFC 2863 - The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000')
if mibBuilder.loadTexts: hwStaticLspName.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspName.setDescription('Indicates the name of the static LSP or CR-LSP. The name is appointed when the static LSP or CR-LSP is created.')
hwStaticLspStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("up", 1), ("down", 2), ("testing", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStaticLspStatus.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspStatus.setDescription('Indicates the actual operation status of the static LSP/CR-LSP. Options: 1. up(1) -indicates that the static LSP/CR-LSP is in Up state. 2. down(2) -indicates that the static LSP/CR-LSP is in down state. 3. testing(3) -indicates that the static LSP/CR-LSP is used in test mode. ')
hwStaticLspClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 5, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("ct0", 1), ("ct1", 2), ("ct2", 3), ("ct3", 4), ("ct4", 5), ("ct5", 6), ("ct6", 7), ("ct7", 8), ("none", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStaticLspClassType.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspClassType.setDescription('The Class-Type of this static lsp. Options: 1. ct0(1) -indicates that the class type is ct0. 2. ct1(2) -indicates that the class type is ct1. 3. ct2(3) -indicates that the class type is ct2. 4. ct3(4) -indicates that the class type is ct3. 5. ct4(5) -indicates that the class type is ct4. 6. ct5(6) -indicates that the class type is ct5. 7. ct6(7) -indicates that the class type is ct6. 8. ct7(8) -indicates that the class type is ct7. 9. none(9) -indicates that the class type is unconfiged. ')
hwStaticLspBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 5, 1, 8), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStaticLspBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspBandwidth.setDescription('The bandwidth of this static lsp. Unit: kbit/s')
hwMplsTeClassTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 6), )
if mibBuilder.loadTexts: hwMplsTeClassTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeClassTable.setDescription('TE-class mapping is a set of a maximum of eight TE-class items. TE-class is a <Class-Type, Priority> pair, such as TE-Class[1] = <CT0, 5>. A (setup/holding) priority associated with an LSP valid only if it appears as a pair with the Class-Type. Class-Types and priorities can be randomly paired up. You can define a maximum of eight <Class-Type, Priority> pairs. The LSR is considered to support a particular Class-Type only if it appears in the definition of the eight possible TE-Classes. It is suggested that all the LSRs in the domain use the same TE-Class mapping. The index of this table is hwMplsTeClassId.')
hwMplsTeClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 6, 1), ).setIndexNames((0, "HUAWEI-MPLS-EXTEND-MIB", "hwMplsTeClassId"))
if mibBuilder.loadTexts: hwMplsTeClassEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeClassEntry.setDescription('TE-class mapping is a set of a maximum of eight TE-class items. TE-class is a <Class-Type, Priority> pair, such as TE-Class[1] = <CT0, 5>. A (setup/holding) priority associated with an LSP valid only if it appears as a pair with the Class-Type. Class-Types and priorities can be randomly paired up. You can define a maximum of eight <Class-Type, Priority> pairs. The LSR is considered to support a particular Class-Type only if it appears in the definition of the eight possible TE-Classes. It is suggested that all the LSRs in the domain use the same TE-Class mapping. The index of this entry is hwMplsTeClassId.')
hwMplsTeClassId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 6, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwMplsTeClassId.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeClassId.setDescription('This value represents the index of the TE-Class configured on this LSR.')
hwMplsTeClassClassType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ct0", 1), ("ct1", 2), ("ct2", 3), ("ct3", 4), ("ct4", 5), ("ct5", 6), ("ct6", 7), ("ct7", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTeClassClassType.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeClassClassType.setDescription('This value represents a Class-Type supported on the LSR. Options: 1. ct0(1) -indicates that the class type of static CR-LSP is ct0. 2. ct1(2) -indicates that the class type of static CR-LSP is ct1. 3. ct2(3) -indicates that the class type of static CR-LSP is ct2. 4. ct3(4) -indicates that the class type of static CR-LSP is ct3. 5. ct4(5) -indicates that the class type of static CR-LSP is ct4. 6. ct5(6) -indicates that the class type of static CR-LSP is ct5. 7. ct6(7) -indicates that the class type of static CR-LSP is ct6. 8. ct7(8) -indicates that the class type of static CR-LSP is ct7. ')
hwMplsTeClassPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 6, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTeClassPriority.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeClassPriority.setDescription('This value represents the preemption priority (setup or holding) supported for a particular class-type, on the LSR. Range: 0-7 Default: 7 ')
hwMplsTeClassDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 6, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTeClassDescription.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeClassDescription.setDescription('Textual description of the TE-Class defined by this row.')
hwMplsIfBcTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 7), )
if mibBuilder.loadTexts: hwMplsIfBcTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsIfBcTable.setDescription('This table describes bandwidth constraints associated with MPLS TE enabled interfaces. The index of this table is ifIndex.')
hwMplsIfBcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 7, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: hwMplsIfBcEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsIfBcEntry.setDescription('This table describes bandwidth constraints associated with MPLS TE enabled interfaces. The index of this entry is ifIndex.')
hwMplsIfMaxResvBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 7, 1, 1), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsIfMaxResvBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsIfMaxResvBandwidth.setDescription('The maximum reservable bandwidth on this interface. Unit: kbit/s ')
hwMplsIfBc0Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 7, 1, 2), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsIfBc0Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsIfBc0Bandwidth.setDescription('The bandwidth of Class-Type 0 (CT0) in this tunnel. Unit: kbit/s ')
hwMplsIfBc1Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 7, 1, 3), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsIfBc1Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsIfBc1Bandwidth.setDescription('The bandwidth of Class-Type 1 (CT1) in this tunnel. Unit: kbit/s ')
hwMplsIfBc2Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 7, 1, 4), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsIfBc2Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsIfBc2Bandwidth.setDescription('The bandwidth of Class-Type 2 (CT2) in this tunnel. Unit: kbit/s ')
hwMplsIfBc3Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 7, 1, 5), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsIfBc3Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsIfBc3Bandwidth.setDescription('The bandwidth of Class-Type 3 (CT3) in this tunnel. Unit: kbit/s ')
hwMplsIfBc4Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 7, 1, 6), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsIfBc4Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsIfBc4Bandwidth.setDescription('The bandwidth of Class-Type 4 (CT4) in this tunnel. Unit: kbit/s ')
hwMplsIfBc5Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 7, 1, 7), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsIfBc5Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsIfBc5Bandwidth.setDescription('The bandwidth of Class-Type 5 (CT5) in this tunnel. Unit: kbit/s ')
hwMplsIfBc6Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 7, 1, 8), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsIfBc6Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsIfBc6Bandwidth.setDescription('The bandwidth of Class-Type 6 (CT6) in this tunnel. Unit: kbit/s ')
hwMplsIfBc7Bandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 7, 1, 9), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsIfBc7Bandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsIfBc7Bandwidth.setDescription('The bandwidth of Class-Type 7 (CT7) in this tunnel. Unit: kbit/s ')
hwStaticLspTnlTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 8), )
if mibBuilder.loadTexts: hwStaticLspTnlTable.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspTnlTable.setDescription('hwStaticLspTnlTable is used to display static LSP token of a static LSP of a specified name. The index of this table is hwStaticLspTnlName.')
hwStaticLspTnlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 8, 1), ).setIndexNames((0, "HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspTnlName"))
if mibBuilder.loadTexts: hwStaticLspTnlEntry.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspTnlEntry.setDescription('hwStaticLspTnlTable is used to display static LSP token of a static LSP of a specified name. The index of this entry is hwStaticLspTnlName.')
hwStaticLspTnlName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 8, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: hwStaticLspTnlName.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspTnlName.setDescription('Indicates the name of the Static Lsp.')
hwStaticLspTnlToken = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 8, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwStaticLspTnlToken.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspTnlToken.setDescription('Indicates the token of the Static Lsp.')
hwMplsTeVpnQosTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 9), )
if mibBuilder.loadTexts: hwMplsTeVpnQosTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeVpnQosTable.setDescription('This table is used to display VPN QoS information of a specified TE Tunnel according to TunnelID. The index of this table is hwMplsTnlID.')
hwMplsTeVpnQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 9, 1), ).setIndexNames((0, "HUAWEI-MPLS-EXTEND-MIB", "hwMplsTnlID"))
if mibBuilder.loadTexts: hwMplsTeVpnQosEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeVpnQosEntry.setDescription('This table is used to display VPN QoS information of a specified TE Tunnel according to TunnelID. The index of this entry is hwMplsTnlID.')
hwMplsTnlID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 9, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwMplsTnlID.setStatus('current')
if mibBuilder.loadTexts: hwMplsTnlID.setDescription('The value of this object identifies the TE tunnel ID.')
hwMplsTeVpnMaxBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 9, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTeVpnMaxBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeVpnMaxBandwidth.setDescription('The value of this object identifies the bandwidth the TE tunnel can provide for VPN QoS. Unit: kbit/s')
hwMplsTeVpnAllocatedBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 9, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTeVpnAllocatedBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeVpnAllocatedBandwidth.setDescription('The value of this object identifies the bandwidth used by VPN QoS, in Kbps. Unit: kbit/s')
hwStaticLspInIfIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 11), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStaticLspInIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspInIfIndex.setDescription('Indicates the inbound interface index of a static LSP/CR-LSP.')
hwStaticLspInIfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 12), OctetString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStaticLspInIfName.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspInIfName.setDescription('Indicates the name of an inbound interface of a static LSP/CR-LSP.')
hwStaticLspDownReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 13), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwStaticLspDownReason.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspDownReason.setDescription('Indicates the reason for static LSP/CR-LSP Down: 0. Other 1. Static LSP/CR-LSP up 2. MPLS disabled on an interface 3. MPLS TE disabled on an interface 4. Route change 5. Tunnel binding associated with the static LSP/CR-LSP deleted 6. Static LSP/CR-LSP configuration delete 7. Inbound interface Down 8. Outbound interface Down 9. Tunnel associated with the static LSP/CR-LSP has been shut down 10. Static LSP/CR-LSP configuration update 11. The bound ring is invalid.')
hwMplsTunnelStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 14), )
if mibBuilder.loadTexts: hwMplsTunnelStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelStatisticsTable.setDescription('A tunnel needs to be uniquely identified across an MPLS network. hwMplsTunnelStatisticsTunnelIndex uniquely identifies a tunnel on the LSR originating the tunnel. hwMplsTunnelStatisticsIngressLSRId uniquely identifies a tunnel across an MPLS network. The last index hwMplsTunnelStatisticsEgressLSRId is useful in identifying all instances of a tunnel that are terminated on the same egress LSR. The indexes of this table are hwMplsTunnelStatisticsTunnelIndex, hwMplsTunnelStatisticsIngressLSRId and hwMplsTunnelStatisticsEgressLSRId.')
hwMplsTunnelStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 14, 1), ).setIndexNames((0, "HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelStatisticsTunnelIndex"), (0, "HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelStatisticsIngressLSRId"), (0, "HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelStatisticsEgressLSRId"))
if mibBuilder.loadTexts: hwMplsTunnelStatisticsEntry.setReference('1. RFC 2863 - The Interfaces Group MIB, McCloghrie, K., and F. Kastenholtz, June 2000 ')
if mibBuilder.loadTexts: hwMplsTunnelStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelStatisticsEntry.setDescription('A tunnel needs to be uniquely identified across an MPLS network. hwMplsTunnelStatisticsTunnelIndex uniquely identifies a tunnel on the LSR originating the tunnel. hwMplsTunnelStatisticsIngressLSRId uniquely identifies a tunnel across an MPLS network. The last index hwMplsTunnelStatisticsEgressLSRId is useful in identifying all instances of a tunnel that are terminated on the same egress LSR. The indexes of this table are hwMplsTunnelStatisticsTunnelIndex, hwMplsTunnelStatisticsIngressLSRId and hwMplsTunnelStatisticsEgressLSRId.')
hwMplsTunnelStatisticsTunnelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 14, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwMplsTunnelStatisticsTunnelIndex.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelStatisticsTunnelIndex.setDescription('Uniquely identifies a set of tunnel instances between a pair of ingress and egress LSRs. When the MPLS signalling protocol is rsvp(2), this value equals to the value signaled in the Tunnel ID of the SESSION object. When the MPLS signalling protocol is crldp(3), this value equals to the value signaled in the LSP ID. Reference to MPLS-TE-STD-MIB.')
hwMplsTunnelStatisticsIngressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 14, 1, 2), IpAddress())
if mibBuilder.loadTexts: hwMplsTunnelStatisticsIngressLSRId.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelStatisticsIngressLSRId.setDescription('Indicates the ingress LSR ID of this tunnel. When the MPLS signalling protocol is rsvp(2), this value equals to the Tunnel Sender Address in the Sender Template object and may equal to the Extended Tunnel ID in the SESSION object. When the MPLS signalling protocol is crldp(3), this value equals to the Ingress LSR Router ID in the LSPID TLV object. Reference to MPLS-TE-STD-MIB.')
hwMplsTunnelStatisticsEgressLSRId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 14, 1, 3), IpAddress())
if mibBuilder.loadTexts: hwMplsTunnelStatisticsEgressLSRId.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelStatisticsEgressLSRId.setDescription('Indicates the egress LSR ID of this tunnel. Reference to MPLS-TE-STD-MIB.')
hwMplsTunnelStatisticsHCInOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 14, 1, 4), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelStatisticsHCInOctets.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelStatisticsHCInOctets.setDescription('The total number of octets received on the interface, including framing characters.')
hwMplsTunnelStatisticsHCOutOctets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 1, 14, 1, 5), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTunnelStatisticsHCOutOctets.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelStatisticsHCOutOctets.setDescription('The total number of octets transmitted out of the interface, including framing characters.')
hwMplsExtendTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2))
hwLspTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1))
hwMplsStaticLspUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 1)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspStatus"), ("IF-MIB", "ifName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspInIfIndex"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspInIfName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspDownReason"))
if mibBuilder.loadTexts: hwMplsStaticLspUp.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspUp.setDescription('This notification indicates that the status of referred static LSP changes to Up.')
hwMplsStaticLspDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 2)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspStatus"), ("IF-MIB", "ifName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspInIfIndex"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspInIfName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspDownReason"))
if mibBuilder.loadTexts: hwMplsStaticLspDown.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticLspDown.setDescription('This notification indicates that the status of referred static LSP changes to Down.')
hwMplsStaticCRLspUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 3)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspStatus"), ("IF-MIB", "ifName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspInIfIndex"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspInIfName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspDownReason"))
if mibBuilder.loadTexts: hwMplsStaticCRLspUp.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticCRLspUp.setDescription('This notification indicates that the status of referred static CR-LSP changes to Up.')
hwMplsStaticCRLspDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 4)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspStatus"), ("IF-MIB", "ifName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspInIfIndex"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspInIfName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspDownReason"))
if mibBuilder.loadTexts: hwMplsStaticCRLspDown.setStatus('current')
if mibBuilder.loadTexts: hwMplsStaticCRLspDown.setDescription('This notification indicates that the status of referred static CR-LSP changes to Down.')
hwMplsTeFrrProtAval = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 5)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrRouteDBBypassIfIndex"), ("HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrRouteDBInnerLabel"))
if mibBuilder.loadTexts: hwMplsTeFrrProtAval.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeFrrProtAval.setDescription('This notification indicates that the primary tunnel is bound to bypass tunnel.')
hwMplsTeFrrProtNotAval = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 6)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrRouteDBBypassIfIndex"))
if mibBuilder.loadTexts: hwMplsTeFrrProtNotAval.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeFrrProtNotAval.setDescription('This notification indicates that the primary tunnel is unbound to bypass tunnel.')
hwMplsTeFrrSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 7)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelAdminStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOperStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsSessionTunnelId"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLocalLspId"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsIngressLsrId"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsEgressLsrId"))
if mibBuilder.loadTexts: hwMplsTeFrrSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeFrrSwitch.setDescription('This notification indicates that the primary tunnel is switches to the bypass tunnel.')
hwMplsTeFrrResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 8)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelAdminStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOperStatus"))
if mibBuilder.loadTexts: hwMplsTeFrrResume.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeFrrResume.setDescription('This notification indicates that the primary tunnel is switched back from the bypass tunnel.')
hwMplsTunnelHSBSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 9)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelAdminStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOperStatus"))
if mibBuilder.loadTexts: hwMplsTunnelHSBSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelHSBSwitch.setDescription('This notification indicates that the data is switched from the primary CR-LSP to the HSB CR-LSP.')
hwMplsTunnelHSBResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 10)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelAdminStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOperStatus"))
if mibBuilder.loadTexts: hwMplsTunnelHSBResume.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelHSBResume.setDescription('This notification indicates that the data is switched from the HSB CR-LSP to the primary CR-LSP.')
hwMplsTunnelOBSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 11)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelAdminStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOperStatus"))
if mibBuilder.loadTexts: hwMplsTunnelOBSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelOBSwitch.setDescription('This notification indicates that the primary CR-LSP is down and the Ordinary backup CR-LSP is up.')
hwMplsTunnelOBResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 12)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelAdminStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOperStatus"))
if mibBuilder.loadTexts: hwMplsTunnelOBResume.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelOBResume.setDescription('This notification indicates that the data is switched from the Ordinary backup CR-LSP to the primary CR-LSP.')
hwMplsTunnelUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 13)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelAdminStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOperStatus"))
if mibBuilder.loadTexts: hwMplsTunnelUp.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsTunnelUp.setDescription('The hwMplsTunnelUp trap indicates that the staus of the tunnel changes into Up.')
hwMplsTunnelDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 14)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelAdminStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOperStatus"))
if mibBuilder.loadTexts: hwMplsTunnelDown.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsTunnelDown.setDescription('The hwMplsTunnelDown trap indicates that the staus of the tunnel changes into Down.')
hwMplsTunnelChangeBw = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 15)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelIfIndex"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelPreBandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelNextBandwidth"))
if mibBuilder.loadTexts: hwMplsTunnelChangeBw.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelChangeBw.setDescription('This notification indicates that the bandwidth of the tunnel is changed.')
hwMplsTunnelTpOamLossSD = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 16)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsTunnelTpOamLossSD.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelTpOamLossSD.setDescription('This object indicates that the loss ratio of the packets carried by the tunnel exceeded the first threshold.')
hwMplsOamSDRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 17)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamSDRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamSDRecovery.setDescription(' This object indicates that the loss ratio of the packets carried by the tunnel dropped below the first threshold. ')
hwMplsOamLoss = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 18)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMplsOamLoss.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamLoss.setDescription(' This object indicates that TP OAM detected tunnel connectivity faults. ')
hwMplsOamLossRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 19)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamLossRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamLossRecovery.setDescription(' This object indicates that TP OAM did not detect tunnel connectivity faults. ')
hwMplsOamAis = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 20)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamAis.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamAis.setDescription(' This object indicates that TP OAM detected an alarm indication signal. ')
hwMplsOamAisRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 21)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamAisRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamAisRecovery.setDescription(' This object indicates that TP OAM no longer detected alarm indication signals. ')
hwMplsOamRdi = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 22)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMplsOamRdi.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamRdi.setDescription(' This object indicates that TP OAM detected remote defects. ')
hwMplsOamRdiRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 23)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamRdiRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamRdiRecovery.setDescription(' This object indicates that the remote defects detected by TP OAM were removed. ')
hwMplsOamMeg = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 24)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamMeg.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamMeg.setDescription(' This object indicates that the names configured on the two ends of the tunnel are inconsistent. ')
hwMplsOamMegRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 25)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamMegRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamMegRecovery.setDescription(' This object indicates that the names configured on the two ends of the tunnel now are consistent. ')
hwMplsOamMep = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 26)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamMep.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamMep.setDescription(' This object indicates that the MEP-IDs configured on the two ends of the tunnel are inconsistent. ')
hwMplsOamMepRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 27)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamMepRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamMepRecovery.setDescription(' This object indicates that the MEP-IDs configured on the two ends of the tunnel now are consistent. ')
hwMplsOamSF = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 28)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamSF.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamSF.setDescription(' This object indicates that the loss ratio of the packets carried by the tunnel exceeded the second threshold in the local link. ')
hwMplsOamSFRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 29)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamSFRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamSFRecovery.setDescription(' This object indicates that the loss ratio of the packets carried by the tunnel dropped below the second threshold in the local link. ')
hwMplsOamPeriod = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 30)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamPeriod.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamPeriod.setDescription(' This object indicates that the TP OAM detection periods on the two ends of the tunnel are inconsistent. ')
hwMplsOamPeriodRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 31)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamPeriodRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamPeriodRecovery.setDescription(' This object indicates that the TP OAM detection periods on the two ends of the tunnel now are consistent. ')
hwMplsOamLck = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 32)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamLck.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamLck.setDescription(' This object indicates that TP OAM detected the service level of the tunnel has been locked. ')
hwMplsOamLckRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 33)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamLckRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamLckRecovery.setDescription(' This object indicates that TP OAM detected the service level of the tunnel has not been locked. ')
hwMplsOamExcess = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 34)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamExcess.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamExcess.setDescription(' This object indicates that MPLS OAM detected the tunnel received excess alarm. ')
hwMplsOamExcessRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 35)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamExcessRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamExcessRecovery.setDescription(' This object indicates that MPLS OAM detected the tunnel received excess alarm end. ')
hwMplsOamMisMatch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 36)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamMisMatch.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamMisMatch.setDescription(' This object indicates that MPLS OAM detected the tunnel received MisMatch alarm. ')
hwMplsOamMisMatchRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 37)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamMisMatchRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamMisMatchRecovery.setDescription(' This object indicates that MPLS OAM detected the tunnel received MisMatch alarm end. ')
hwMplsOamMisMerge = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 38)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamMisMerge.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamMisMerge.setDescription(' This object indicates that MPLS OAM detected the tunnel received MisMerge alarm. ')
hwMplsOamMisMergeRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 39)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamMisMergeRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamMisMergeRecovery.setDescription(' This object indicates that MPLS OAM detected the tunnel received MisMerge alarm end. ')
hwMplsOamUnknown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 40)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamUnknown.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamUnknown.setDescription(' This object indicates that MPLS OAM detected the tunnel received Unknown alarm. ')
hwMplsOamUnknownRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 41)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamUnknownRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamUnknownRecovery.setDescription(' This object indicates that MPLS OAM detected the tunnel received Unknown alarm end. ')
hwMplsOamBDI = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 42)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMplsOamBDI.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBDI.setDescription(' This object indicates that MPLS OAM detected the tunnel received BDI alarm. ')
hwMplsOamBDIRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 43)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamBDIRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamBDIRecovery.setDescription(' This object indicates that MPLS OAM detected the tunnel received BDI alarm end. ')
hwMplsOamFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 44)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMplsOamFail.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamFail.setDescription(' This object indicates that MPLS OAM detected the tunnel received OAMFAIL alarm. ')
hwMplsOamFailRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 45)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamFailRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamFailRecovery.setDescription(' This object indicates that MPLS OAM detected the tunnel received OAMFAIL alarm end. ')
hwMplsTunnelPrimaryUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 46)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"))
if mibBuilder.loadTexts: hwMplsTunnelPrimaryUp.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelPrimaryUp.setDescription('This notification indicates that the status of the RSVP-TE Primary LSP changes to Up.')
hwMplsTunnelPrimaryDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 47)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownReason"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownLSRID"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownIfIpAddrType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownIfIpAddr"))
if mibBuilder.loadTexts: hwMplsTunnelPrimaryDown.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelPrimaryDown.setDescription('This notification indicates that the status of the RSVP-TE Primary LSP changes to Down.')
hwMplsTunnelHotstandbyUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 48)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"))
if mibBuilder.loadTexts: hwMplsTunnelHotstandbyUp.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelHotstandbyUp.setDescription('This notification indicates that the status of the RSVP-TE Hot-standby LSP changes to Up.')
hwMplsTunnelHotstandbyDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 49)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownReason"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownLSRID"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownIfIpAddrType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownIfIpAddr"))
if mibBuilder.loadTexts: hwMplsTunnelHotstandbyDown.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelHotstandbyDown.setDescription('This notification indicates that the status of the RSVP-TE Hot-standby LSP changes to Down.')
hwMplsTunnelOrdinaryUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 50)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"))
if mibBuilder.loadTexts: hwMplsTunnelOrdinaryUp.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelOrdinaryUp.setDescription('This notification indicates that the status of the RSVP-TE Ordinary LSP changes to Up.')
hwMplsTunnelOrdinaryDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 51)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownReason"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownLSRID"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownIfIpAddrType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownIfIpAddr"))
if mibBuilder.loadTexts: hwMplsTunnelOrdinaryDown.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelOrdinaryDown.setDescription('This notification indicates that the status of the RSVP-TE Ordinary LSP changes to Down.')
hwMplsTunnelBesteffortUp = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 52)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"))
if mibBuilder.loadTexts: hwMplsTunnelBesteffortUp.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelBesteffortUp.setDescription('This notification indicates that the status of the RSVP-TE Best-effort LSP changes to Up.')
hwMplsTunnelBesteffortDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 53)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownReason"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownLSRID"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownIfIpAddrType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownIfIpAddr"))
if mibBuilder.loadTexts: hwMplsTunnelBesteffortDown.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelBesteffortDown.setDescription('This notification indicates that the status of the RSVP-TE Best-effort LSP changes to Down.')
hwMplsTeAutoTunnelDownClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 54)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelIfName"))
if mibBuilder.loadTexts: hwMplsTeAutoTunnelDownClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeAutoTunnelDownClear.setDescription('This notification indicates that the TE Auto tunnel Down alarm was cleared.')
hwMplsTeAutoTunnelPrimaryDownClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 55)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"))
if mibBuilder.loadTexts: hwMplsTeAutoTunnelPrimaryDownClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsTeAutoTunnelPrimaryDownClear.setDescription('This notification indicates that the Down alarm about the primary LSP in the TE Auto tunnel was cleared.')
hwMplsTunnelBBSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 56)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelAdminStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOperStatus"))
if mibBuilder.loadTexts: hwMplsTunnelBBSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelBBSwitch.setDescription('This notification indicates that the primary CR-LSP is Down and the Best-effort backup CR-LSP is Up.')
hwMplsTunnelBBResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 57)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelAdminStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOperStatus"))
if mibBuilder.loadTexts: hwMplsTunnelBBResume.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelBBResume.setDescription('This notification indicates that data is switched from the Best-effort backup CR-LSP to the primary CR-LSP.')
hwMplsExtTunnelDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 58)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelAdminStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOperStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownReason"), ("IF-MIB", "ifName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownLSRID"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownIfIpAddrType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownIfIpAddr"))
if mibBuilder.loadTexts: hwMplsExtTunnelDown.setStatus('current')
if mibBuilder.loadTexts: hwMplsExtTunnelDown.setDescription('This notification indicates that the status of te tunnel changes to Down.')
hwMplsExtTunnelDownClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 59)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelAdminStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOperStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownReason"), ("IF-MIB", "ifName"))
if mibBuilder.loadTexts: hwMplsExtTunnelDownClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsExtTunnelDownClear.setDescription('This notification indicates that the down alarm of te tunnel was cleared.')
hwMplsOamLocalLock = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 60)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamLocalLock.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamLocalLock.setDescription(' This object indicates that TP OAM detected the tunnel has been locked. ')
hwMplsOamLocalLockRecovery = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 61)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"))
if mibBuilder.loadTexts: hwMplsOamLocalLockRecovery.setStatus('current')
if mibBuilder.loadTexts: hwMplsOamLocalLockRecovery.setDescription(' This object indicates that TP OAM detected the tunnel has not been locked. ')
hwMplsTunnelDelete = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 62)).setObjects(("MPLS-TE-STD-MIB", "mplsTunnelAdminStatus"), ("MPLS-TE-STD-MIB", "mplsTunnelOperStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelIfName"))
if mibBuilder.loadTexts: hwMplsTunnelDelete.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelDelete.setDescription('This notification indicates that the mpls te tunnel was deleted.')
hwMplsLspThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 63)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspProtocol"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspCurrentCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspThreshold"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspTotalCount"))
if mibBuilder.loadTexts: hwMplsLspThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspThresholdExceed.setDescription(' This object indicates that lsp count has exceeded the threshold. ')
hwMplsLspThresholdExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 64)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspProtocol"))
if mibBuilder.loadTexts: hwMplsLspThresholdExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspThresholdExceedClear.setDescription(' This object indicates that lsp count has resumed from exceeding the threshold. ')
hwMplsLspTotalCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 65)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspProtocol"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspTotalCount"))
if mibBuilder.loadTexts: hwMplsLspTotalCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspTotalCountExceed.setDescription(' This object indicates that lsp count has reached the total count. ')
hwMplsLspTotalCountExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 66)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspProtocol"))
if mibBuilder.loadTexts: hwMplsLspTotalCountExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspTotalCountExceedClear.setDescription(' This object indicates that lsp count has resumed from reaching the total count. ')
hwMplsDynamicLabelThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 67)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelTotalCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelCurrentCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelThresholdUpperLimit"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelThresholdLowerLimit"))
if mibBuilder.loadTexts: hwMplsDynamicLabelThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwMplsDynamicLabelThresholdExceed.setDescription(' This object indicates that label usage has exceeded the threshold. ')
hwMplsDynamicLabelThresholdExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 68)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelTotalCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelCurrentCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelThresholdUpperLimit"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelThresholdLowerLimit"))
if mibBuilder.loadTexts: hwMplsDynamicLabelThresholdExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsDynamicLabelThresholdExceedClear.setDescription(' This object indicates that label usage has resumed from exceeding the threshold. ')
hwMplsDynamicLabelTotalCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 69)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelTotalCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelCurrentCount"))
if mibBuilder.loadTexts: hwMplsDynamicLabelTotalCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwMplsDynamicLabelTotalCountExceed.setDescription(' This object indicates that label count has reached the total count. ')
hwMplsDynamicLabelTotalCountExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 70)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelTotalCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelCurrentCount"))
if mibBuilder.loadTexts: hwMplsDynamicLabelTotalCountExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsDynamicLabelTotalCountExceedClear.setDescription(' This object indicates that label usage count has resumed from reaching the total count. ')
hwMplsResourceThresholdExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 71)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceCurrentCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceThreshold"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceTotalCount"))
if mibBuilder.loadTexts: hwMplsResourceThresholdExceed.setStatus('current')
if mibBuilder.loadTexts: hwMplsResourceThresholdExceed.setDescription(' This object indicates that the number of MPLS resources has exceeded the upper threshold. ')
hwMplsResourceThresholdExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 72)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceType"))
if mibBuilder.loadTexts: hwMplsResourceThresholdExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsResourceThresholdExceedClear.setDescription(' This object indicates that the number of MPLS resources has fallen below the lower threshold. ')
hwMplsResourceTotalCountExceed = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 73)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceTotalCount"))
if mibBuilder.loadTexts: hwMplsResourceTotalCountExceed.setStatus('current')
if mibBuilder.loadTexts: hwMplsResourceTotalCountExceed.setDescription(' This object indicates that the number of MPLS resources has reached the maximum number. ')
hwMplsResourceTotalCountExceedClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 74)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceType"))
if mibBuilder.loadTexts: hwMplsResourceTotalCountExceedClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsResourceTotalCountExceedClear.setDescription(' This object indicates that the number of MPLS resources fallen below the recovery number. ')
hwMplsLspLoopBack = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 75)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsSessionTunnelId"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLocalLspId"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsIngressLsrId"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsEgressLsrId"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspName"))
if mibBuilder.loadTexts: hwMplsLspLoopBack.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspLoopBack.setDescription(' This object indicates that the lsp was looped back. ')
hwMplsLspLoopBackClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 76)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsSessionTunnelId"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLocalLspId"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsIngressLsrId"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsEgressLsrId"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspName"))
if mibBuilder.loadTexts: hwMplsLspLoopBackClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspLoopBackClear.setDescription(' This object indicates that loopback of the LSP is restored. ')
hwMplsTunnelCommitLost = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 77))
if mibBuilder.loadTexts: hwMplsTunnelCommitLost.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelCommitLost.setDescription(' This object indicates that, after the device saves MPLS TE tunnel configurations, the device commits only some MPLS tunnel configurations. ')
hwMplsTunnelCommitLostClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 78))
if mibBuilder.loadTexts: hwMplsTunnelCommitLostClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelCommitLostClear.setDescription(' This object indicates that, after the device saves MPLS TE tunnel configurations, the device commits all MPLS tunnel configurations. ')
hwMplsTunnelHotstandbySwitch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 79)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"))
if mibBuilder.loadTexts: hwMplsTunnelHotstandbySwitch.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelHotstandbySwitch.setDescription('This notification indicates that the data is switched from the primary CR-LSP to the HSB CR-LSP.')
hwMplsTunnelHotstandbyResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 1, 80)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"))
if mibBuilder.loadTexts: hwMplsTunnelHotstandbyResume.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelHotstandbyResume.setDescription('This notification indicates that the data is switched from the HSB CR-LSP to the primary CR-LSP.')
hwMplsTrapObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2))
hwMplsTunnelIfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 1), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsTunnelIfName.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsTunnelIfName.setDescription('The Tunnel Interface name.')
hwMplsTunnelFrrConfigOper = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("unconfig", 0), ("config", 1), ("unknow", 2)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsTunnelFrrConfigOper.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsTunnelFrrConfigOper.setDescription('The value of this object identifies the operation that an FRR configuration is committed on the tunnel. Options: 1.unconfig(0) -indicates the configuration of the undo mpls te fast-reroute command is committed. 2.config(1) -indicates the configuration of the mpls te fast-reroute command is committed. 3.unknow(2) -indicates an unknown operation.')
hwMplsTunnelDownReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 100))).clone(namedValues=NamedValues(("other", 1), ("staticLspDown", 2), ("staticCrlspDown", 3), ("outIfDown", 4), ("resourcePreempted", 5), ("rsvpMessageTimeout", 6), ("rsvpNeighborLost", 7), ("bypassTunnelDownOrUnbinded", 8), ("cspfComputeFail", 9), ("userShutdown", 10), ("tpoamLossOfContinuity", 11), ("tpoamAlarmIndicationSignal", 12), ("tpoamRemoteDefectIndication", 13), ("tpoamUnexpectedMEG", 14), ("tpoamUnexpectedMEP", 15), ("tpoamLossSF", 16), ("tpoamPeriod", 17), ("mplsOamLocv", 18), ("mplsOamExcess", 19), ("mplsOamMisMatch", 20), ("mplsOamMisMerge", 21), ("mplsOamUnknown", 22), ("mplsOamBdi", 23), ("mplsOamFdi", 24), ("mplsOamSF", 25), ("mplsOamSD", 26), ("mplsOamDOamFail", 27), ("serviceResume", 28), ("serviceDelete", 29), ("clear", 100)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsTunnelDownReason.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelDownReason.setDescription('Indicates the alarm reason as below: 1. Other; 2. Static LSP down; 3. Static CR-LSP down; 4. The out interface of the RSVP LSP ingress is down; 5. The resource of RSVP LSP is preempted; 6. RSVP message timeout; 7. RSVP neighbor lost; 8. The bypass-tunnel is down or is unbinded with main tunnel, as bypass-tunnel is in used; 9. CSPF compute fail; 10.User shutdown the tunnel; 11.TPOAM indicates the connectivity fault of the link; 12.TPOAM indicates receive alarm indication signal defect of the link; 13.TPOAM indicates the remote defect of the link; 14.TPOAM indicates receive unexpected MEG-ID defect of the link; 15.TPOAM indicates receive unexpected MEP-ID defect of the link; 16.TPOAM indicates packet lost exceed signal fault threshold in the local link; 17.TPOAM indicates packet unexpected period defect of the link; 18.MPLS OAM connectivity fault; 19.MPLS OAM TTSI excess; 20.MPLS OAM TTSI mismatch; 21.MPLS OAM TTSI merge error; 22.MPLS OAM unknown error; 23.MPLS OAM BDI; 24.MPLS OAM FDI; 25.MPLS OAM signal fail; 26.MPLS OAM signal degrade; 27.MPLS OAM fail; 28.Service resume; 29.Service delete; 100. Clear.')
hwMplsLspProtocol = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 100))).clone(namedValues=NamedValues(("ldp", 1), ("bgp", 2), ("bgpv6", 3), ("ldpfrr", 4), ("rsvp", 5), ("totalLsp", 6), ("totalCrLsp", 7), ("ldpIngress", 8), ("ldpTransit", 9), ("ldpEgress", 10), ("bgpIngress", 11), ("bgpEgress", 12), ("bgpv6Ingress", 13), ("bgpv6Egress", 14), ("rsvpIngress", 15), ("rsvpTransit", 16), ("rsvpEgress", 17), ("totalLspIngress", 18), ("totalLspTransit", 19), ("totalLspEgress", 20), ("totalCrLspIngress", 21), ("totalCrLspTransit", 22), ("totalCrLspEgress", 23), ("totalPublicNetLspIngressTransit", 24), ("totalPublicNetLspTransitEgress", 25), ("privateNetBgp", 26), ("unknown", 100)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLspProtocol.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspProtocol.setDescription('The value of this object identifies the protocol of the lsp which exceeds the threshold or total count. Options: 1.ldp(1) -indicates the lsp is ldp lsp. 2.bgp(2) -indicates the lsp is bgp lsp. 3.bgpv6(3) -indicates the lsp is bgpv6 lsp. 4.ldpfrr(4) -indicates the lsp is ldp frr lsp. 5.rsvp(5) -indicates the lsp is rsvp te lsp. 6.totalLsp(6) -indicates the lsp is total lsp. 7.totalCrLsp(7) -indicates the lsp is total cr-lsp. 8.ldpIngress(8) -indicates the lsp is ldp ingress lsp. 9.ldpTransit(9) -indicates the lsp is ldp transit lsp. 10.ldpEgress(10) -indicates the lsp is ldp egress lsp. 11.bgpIngress(11) -indicates the lsp is bgp ingress lsp. 12.bgpEgress(12) -indicates the lsp is bgp egress lsp. 13.bgpv6Ingress(13) -indicates the lsp is bgpv6 ingress lsp. 14.bgpv6Egress(14) -indicates the lsp is bgpv6 egress lsp. 15.rsvpIngress(15) -indicates the lsp is rsvp te ingress lsp. 16.rsvpTransit(16) -indicates the lsp is rsvp te transit lsp. 17.rsvpEgress(17) -indicates the lsp is rsvp te egress lsp. 18.totalLspIngress(18) -indicates the lsp is total ingress lsp. 19.totalLspTransit(19) -indicates the lsp is total transit lsp. 20.totalLspEgress(20) -indicates the lsp is total egress lsp. 21.totalCrLspIngress(21) -indicates the lsp is total ingress cr-lsp. 22.totalCrLspTransit(22) -indicates the lsp is total transit cr-lsp. 23.totalCrLspEgress(23) -indicates the lsp is total egress cr-lsp. 24.totalPublicNetLspIngressTransit(24) -indicates the lsp is total ingress and transit public netwrok lsp. 25.totalPublicNetLspTransitEgress(25) -indicates the lsp is total transit and egress public network cr-lsp. 26.privateNetBgp(26) -indicates the lsp is private network bgp lsp. 27.unknown(100) -indicates the lsp type is unknown. ')
hwMplsLspThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 5), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLspThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspThreshold.setDescription('The value of this object identifies the threshold of the lsp.')
hwMplsLspTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 6), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLspTotalCount.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspTotalCount.setDescription('The value of this object identifies the total permit count of lsp.')
hwMplsLspCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 7), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLspCurrentCount.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspCurrentCount.setDescription('The value of this object identifies the current count of the lsp.')
hwMplsTunnelDownLSRID = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 8), MplsLsrIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsTunnelDownLSRID.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelDownLSRID.setDescription('The value of this object identifies the LSR ID of the error node on a tunnel.')
hwMplsTunnelDownIfIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 9), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsTunnelDownIfIpAddr.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelDownIfIpAddr.setDescription('The value of this object identifies the IP address of the error interface on a tunnel.')
hwMplsTunnelDownIfIpAddrType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 10), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsTunnelDownIfIpAddrType.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelDownIfIpAddrType.setDescription('The value of this object identifies the IP address type of the error interface on a tunnel.')
hwMplsResourceType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 100))).clone(namedValues=NamedValues(("autoBypassTunnelIf", 1), ("p2mpAutoTunnelIf", 2), ("teBfd", 3), ("ldpBfd", 4), ("mldpTotalTree", 5), ("mldpTotalBranch", 6), ("ldpTotalRemoteAdjacency", 7), ("outSegment", 8), ("autoPrimaryTunnelIf", 9), ("ldpTotalLocalAdjacency", 10), ("cspfNode", 11), ("cspfLink", 12), ("cspfNlsa", 13), ("cspfSrlg", 14), ("unknown", 100)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsResourceType.setStatus('current')
if mibBuilder.loadTexts: hwMplsResourceType.setDescription('The value of this object identifies that the number of MPLS resources has exceeded the threshold or the maximum number. Options: 1.autoBypassTunnelIf(1) -Indicates that the resource is auto bypass tunnel interface. 2.p2mpAutoTunnelIf(2) -Indicates that the resource is P2MP auto tunnel interface. 3.teBfd(3) -Indicates that the resource is dynamic BFD for TE LSP. 4.ldpBfd(4) -Indicates that the resource is dynamic BFD for LDP LSP. 5.mldpTotalTree(5) -Indicates that the resource is the total number of MLDP trees. 6.mldpTotalBranch(6) -Indicates that the resource is the total number of MLDP branches. 7.ldpTotalRemoteAdjacency(7) -Indicates that the resource is LDP total remote adjacency. 8.outSegment(8) -Indicates that the resource is LDP outSegment. 9.autoPrimaryTunnelIf(9) -Indicates that the resource is auto primary tunnel interface. 10.ldpTotalLocalAdjacency(10) -Indicates that the resource is LDP total local adjacency. 11.cspfNode(11) -Indicates that the resource is cspf node. 12.cspfLink(12) -Indicates that the resource is cspf link. 13.cspfNlsa(13) -Indicates that the resource is cspf nlsa. 14.cspfSrlg(14) -Indicates that the resource is cspf srlg. 15.unknown(100) -Indicates that the resource type is unknown. ')
hwMplsResourceCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 12), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsResourceCurrentCount.setStatus('current')
if mibBuilder.loadTexts: hwMplsResourceCurrentCount.setDescription('The value of this object identifies the number of the resources.')
hwMplsResourceThreshold = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 13), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsResourceThreshold.setStatus('current')
if mibBuilder.loadTexts: hwMplsResourceThreshold.setDescription('The value of this object identifies the threshold for the number of the resources.')
hwMplsResourceTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 14), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsResourceTotalCount.setStatus('current')
if mibBuilder.loadTexts: hwMplsResourceTotalCount.setDescription('The value of this object identifies the maximum number of allowed resources.')
hwMplsSessionTunnelId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 15), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsSessionTunnelId.setStatus('current')
if mibBuilder.loadTexts: hwMplsSessionTunnelId.setDescription('The value of this object identifies the Tunnel ID.')
hwMplsLocalLspId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 16), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLocalLspId.setStatus('current')
if mibBuilder.loadTexts: hwMplsLocalLspId.setDescription('The value of this object identifies the LSP ID.')
hwMplsIngressLsrId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 17), MplsLsrIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsIngressLsrId.setStatus('current')
if mibBuilder.loadTexts: hwMplsIngressLsrId.setDescription('The value of this object identifies the ingress LSR ID.')
hwMplsEgressLsrId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 18), MplsLsrIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsEgressLsrId.setStatus('current')
if mibBuilder.loadTexts: hwMplsEgressLsrId.setDescription('The value of this object identifies the egress LSR ID.')
hwMplsLspName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 2, 19), SnmpAdminString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwMplsLspName.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspName.setDescription('This object indicates the name of an bidirectional static CR-LSP.')
hwMplsTunnelFrrConfigChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 2, 3)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelIfName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelFrrConfigOper"))
if mibBuilder.loadTexts: hwMplsTunnelFrrConfigChange.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsTunnelFrrConfigChange.setDescription('When the trap indicating that TE-Frr configuration of Tunnel is changed is sent, the cause for the change of TE-FRR configuration of Tunnel is displayed.')
hwMplsGlobalObject = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 3))
hwMplsGlobalWorkMode = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("standard", 1), ("nonstandard", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsGlobalWorkMode.setStatus('current')
if mibBuilder.loadTexts: hwMplsGlobalWorkMode.setDescription('The work mode of DS-TE system, default mode is nonstandard. Options: 1. standard(1) -indicates work mode of DS-TE system is standard 2. nonstandard(2) -indicates work mode of DS-TE system is nonstandard')
hwMplsGlobalBcModel = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 3, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("rdm", 1), ("mam", 2), ("extendMam", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsGlobalBcModel.setStatus('current')
if mibBuilder.loadTexts: hwMplsGlobalBcModel.setDescription('Bandwidth Constraint Model currently used by this LSR. Options: 1. rdm(1) -indicates that the bandwidth constraint model is RDM. 2. mam(2) -indicates that the bandwidth constraint model is MAM. 3. extendMam(3) -indicates that the bandwidth constraint model is ExtendMam.')
hwMplsDynamicLabelTotalCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 3, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsDynamicLabelTotalCount.setStatus('current')
if mibBuilder.loadTexts: hwMplsDynamicLabelTotalCount.setDescription('The value of this object identifies the total permit count of dynamic label.')
hwMplsDynamicLabelCurrentCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsDynamicLabelCurrentCount.setStatus('current')
if mibBuilder.loadTexts: hwMplsDynamicLabelCurrentCount.setDescription('The value of this object identifies the current count of the dynamic label.')
hwMplsDynamicLabelThresholdUpperLimit = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 3, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsDynamicLabelThresholdUpperLimit.setStatus('current')
if mibBuilder.loadTexts: hwMplsDynamicLabelThresholdUpperLimit.setDescription('The upper limit threshold value (%) of dynamic label, default value is 80.')
hwMplsDynamicLabelThresholdLowerLimit = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsDynamicLabelThresholdLowerLimit.setStatus('current')
if mibBuilder.loadTexts: hwMplsDynamicLabelThresholdLowerLimit.setDescription('The lower limit threshold value (%) of dynamic label, default value is 70.')
hwMplsLspStatistics = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4))
hwMplsLspStatisticsTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 1), )
if mibBuilder.loadTexts: hwMplsLspStatisticsTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspStatisticsTable.setDescription('hwMplsLspStatisticsTable is used to display the number of ingress LSPs, transit LSPs, or egress LSPs of specified types. The index of this table is hwMplsLspStatisticsLspType.')
hwMplsLspStatisticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 1, 1), ).setIndexNames((0, "HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspStatisticsLspType"))
if mibBuilder.loadTexts: hwMplsLspStatisticsEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspStatisticsEntry.setDescription('hwMplsLspStatisticsTable is used to display the number of ingress LSPs, transit LSPs, or egress LSPs of specified types. The index of this entry is hwMplsLspStatisticsLspType.')
hwMplsLspStatisticsLspType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("staticLsp", 1), ("staticCrLsp", 2), ("ldpLsp", 3), ("rsvpCrLsp", 4), ("bgpLsp", 5), ("asbrLsp", 6), ("bgpIpv6Lsp", 7), ("l3vpnIpv6Lsp", 8))))
if mibBuilder.loadTexts: hwMplsLspStatisticsLspType.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspStatisticsLspType.setDescription('This object indicates the LSP type. Options: 1. staticLsp(1) -indicates the static LSP. 2. staticCrLsp(2) -indicates the static CR-LSP. 3. ldpLsp(3) -indicates the LDP LSP. 4. rsvpCrLsp(4) -indicates the RSVP LSP. 5. bgpLsp(5) -indicates the BGP LSP. 6. asbrLsp(6) -indicates the ASBR LSP. 7. bgpIpv6Lsp(7) -indicates the BGP IPv6 LSP. 8. l3vpnIpv6Lsp(8)-indicates the L3VPN IPv6 LSP. ')
hwMplsLspStatisticsIngressLspCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLspStatisticsIngressLspCount.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspStatisticsIngressLspCount.setDescription('This object indicates the number of ingress LSPs of a specified type.')
hwMplsLspStatisticsTransitLspCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 1, 1, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLspStatisticsTransitLspCount.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspStatisticsTransitLspCount.setDescription('This object indicates the number of transit LSPs of a specified type.')
hwMplsLspStatisticsEgressLspCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLspStatisticsEgressLspCount.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspStatisticsEgressLspCount.setDescription('This object indicates the number of egress LSPs of a specified type.')
hwMplsLspStatisticsTotalLspCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 1, 1, 5), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsLspStatisticsTotalLspCount.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspStatisticsTotalLspCount.setDescription('This object indicates the total number of the ingress LSPs, transit LSPs and egress LSP of specified types.')
hwMplsTrafficStatisticsStaticLspTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 2), )
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspTable.setDescription('Indicates the traffic statistics of a LSP. The indexes of this table is hwMplsTrafficStatisticsStaticLspName.')
hwMplsTrafficStatisticsStaticLspEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 2, 1), ).setIndexNames((0, "HUAWEI-MPLS-EXTEND-MIB", "hwMplsTrafficStatisticsStaticLspName"))
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspEntry.setDescription('Indicates the traffic statistics of a LSP. The indexes of this entry is hwMplsTrafficStatisticsStaticLspName.')
hwMplsTrafficStatisticsStaticLspName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 2, 1, 1), SnmpAdminString())
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspName.setStatus('current')
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspName.setDescription('Indicates the name of the static LSP or CR-LSP. The name is appointed when the static LSP or CR-LSP is created.')
hwMplsTrafficStatisticsStaticLspForwardInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 2, 1, 2), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspForwardInBytes.setStatus('current')
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspForwardInBytes.setDescription("An estimate of the forward of bistatic LSP's current incoming traffic statistics in units of bytes. For a sub-layer which has no concept of traffic statistics, this object should be zero. Unit: bytes")
hwMplsTrafficStatisticsStaticLspForwardInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 2, 1, 3), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspForwardInPackets.setStatus('current')
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspForwardInPackets.setDescription("An estimate of the forward of bistatic LSP's current incoming traffic statistics in units of packets. For a sub-layer which has no concept of traffic statistics, this object should be zero. Unit: packets")
hwMplsTrafficStatisticsStaticLspForwardOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 2, 1, 4), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspForwardOutBytes.setStatus('current')
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspForwardOutBytes.setDescription("An estimate of the forward of bistatic LSP's current outgoing traffic statistics in units of bytes. For a sub-layer which has no concept of traffic statistics, this object should be zero. Unit: bytes")
hwMplsTrafficStatisticsStaticLspForwardOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 2, 1, 5), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspForwardOutPackets.setStatus('current')
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspForwardOutPackets.setDescription("An estimate of the forward of bistatic LSP's current outgoing traffic statistics in units of packets. For a sub-layer which has no concept of traffic statistics, this object should be zero. Unit: packets")
hwMplsTrafficStatisticsStaticLspBackwardInBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 2, 1, 6), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspBackwardInBytes.setStatus('current')
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspBackwardInBytes.setDescription("An estimate of the backward of bistatic LSP's current incoming traffic statistics in units of bytes. For a sub-layer which has no concept of traffic statistics, this object should be zero. Unit: bytes")
hwMplsTrafficStatisticsStaticLspBackwardInPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 2, 1, 7), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspBackwardInPackets.setStatus('current')
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspBackwardInPackets.setDescription("An estimate of the backward of bistatic LSP's current incoming traffic statistics in units of packets. For a sub-layer which has no concept of traffic statistics, this object should be zero. Unit: packets")
hwMplsTrafficStatisticsStaticLspBackwardOutBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 2, 1, 8), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspBackwardOutBytes.setStatus('current')
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspBackwardOutBytes.setDescription("An estimate of the backward of bistatic LSP's current outgoing traffic statistics in units of bytes. For a sub-layer which has no concept of traffic statistics, this object should be zero. Unit: bytes")
hwMplsTrafficStatisticsStaticLspBackwardOutPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 4, 2, 1, 9), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspBackwardOutPackets.setStatus('current')
if mibBuilder.loadTexts: hwMplsTrafficStatisticsStaticLspBackwardOutPackets.setDescription("An estimate of the backward of bistatic LSP's current outgoing traffic statistics in units of packets. For a sub-layer which has no concept of traffic statistics, this object should be zero. Unit: packets")
hwMplsExtendConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6))
hwMplsExtendGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 1))
hwMplsTunnelGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 1, 1)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrRouteDBInnerLabel"), ("HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrRouteDBBypassIfIndex"), ("HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrARHopProtActual"), ("HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrARHopProtDesired"), ("HUAWEI-MPLS-EXTEND-MIB", "hwTunnelFrrBypassProtIfIndex"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspOwner"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelClassType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSessionAttr"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelFrrARHopTableIndex"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelIfIndex"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelPreBandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelNextBandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelFrrSwitchover"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelFrrBandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOperStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelAdminStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelBandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTeVpnMaxBandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTeVpnAllocatedBandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelFrrHoldingPrio"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelFrrSetupPrio"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelFrrBypassTableIndex"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelLspType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelInterfaceName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelSignalProto"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsTunnelGroup = hwMplsTunnelGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsTunnelGroup.setDescription('Indicate the atrributes of the tunnel.')
hwStaticLspGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 1, 2)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspStatus"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspTnlToken"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspInIfIndex"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspInIfName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspDownReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwStaticLspGroup = hwStaticLspGroup.setStatus('current')
if mibBuilder.loadTexts: hwStaticLspGroup.setDescription('Indicate the atrributes of the static lsp.')
hwMplsDsTeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 1, 3)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelCt0Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelCt1Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelCt2Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelCt3Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelCt4Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelCt5Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelCt6Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelCt7Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspClassType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspBandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTeClassClassType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTeClassPriority"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTeClassDescription"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsGlobalBcModel"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsGlobalWorkMode"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsIfBc7Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsIfBc6Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsIfBc5Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsIfBc4Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsIfBc3Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsIfBc2Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsIfBc1Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsIfBc0Bandwidth"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsIfMaxResvBandwidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsDsTeGroup = hwMplsDsTeGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsDsTeGroup.setDescription('Indicate the atrributes about DS-TE.')
hwMplsLspStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 1, 4)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspStatisticsIngressLspCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspStatisticsTransitLspCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspStatisticsEgressLspCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspStatisticsTotalLspCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLspStatisticsGroup = hwMplsLspStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspStatisticsGroup.setDescription('Indicate LSP statistics.')
hwMplsObsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 1, 5)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelIfName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelFrrConfigOper"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsObsoleteGroup = hwMplsObsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsObsoleteGroup.setDescription('Indicate the OBSOLETE objects of MPLS.')
hwMplsTrapGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 1, 6)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownReason"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownLSRID"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownIfIpAddrType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDownIfIpAddr"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsTrapGroup = hwMplsTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsTrapGroup.setDescription('For mpls trap object.')
hwMplsRingGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 1, 7)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingNodeID"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingDirection"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingSwitchReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsRingGroup = hwMplsRingGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingGroup.setDescription('For mpls ring trap object.')
hwMplsGlobalGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 1, 8)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelTotalCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelCurrentCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelThresholdUpperLimit"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelThresholdLowerLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsGlobalGroup = hwMplsGlobalGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsGlobalGroup.setDescription('For mpls global object.')
hwMplsLspGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 1, 9)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspCurrentCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspTotalCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspProtocol"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLspGroup = hwMplsLspGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspGroup.setDescription('For mpls lsp object.')
hwMplsLspTrafficStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 1, 10)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTrafficStatisticsStaticLspForwardInBytes"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTrafficStatisticsStaticLspForwardInPackets"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTrafficStatisticsStaticLspForwardOutBytes"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTrafficStatisticsStaticLspForwardOutPackets"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTrafficStatisticsStaticLspBackwardInBytes"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTrafficStatisticsStaticLspBackwardInPackets"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTrafficStatisticsStaticLspBackwardOutBytes"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTrafficStatisticsStaticLspBackwardOutPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsLspTrafficStatisticGroup = hwMplsLspTrafficStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsLspTrafficStatisticGroup.setDescription('Indicate the traffic statistic of the LSP.')
hwMplsResourceGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 1, 11)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceType"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceCurrentCount"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceThreshold"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceTotalCount"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsResourceGroup = hwMplsResourceGroup.setStatus('current')
if mibBuilder.loadTexts: hwMplsResourceGroup.setDescription('For mpls resource object.')
hwMplsExtendCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 2))
hwExtendTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 2, 1)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTeFrrProtAval"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTeFrrProtNotAval"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsStaticLspUp"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsStaticLspDown"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsStaticCRLspUp"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsStaticCRLspDown"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTeFrrSwitch"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTeFrrResume"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelHSBSwitch"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelHSBResume"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOBSwitch"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOBResume"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelChangeBw"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelTpOamLossSD"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamSDRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamLoss"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamLossRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamAis"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamAisRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamRdi"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamRdiRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamMeg"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamMegRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamMep"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamMepRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamSF"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamSFRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamPeriod"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamPeriodRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamLck"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamLckRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamExcess"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamExcessRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamMisMatch"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamMisMatchRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamMisMerge"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamMisMergeRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamUnknown"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamUnknownRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamBDI"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamBDIRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamFail"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamFailRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelPrimaryUp"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelPrimaryDown"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelHotstandbyUp"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelHotstandbyDown"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOrdinaryUp"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelOrdinaryDown"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelBesteffortUp"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelBesteffortDown"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTeAutoTunnelDownClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTeAutoTunnelPrimaryDownClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelBBSwitch"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelBBResume"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsExtTunnelDown"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsExtTunnelDownClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamLocalLock"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsOamLocalLockRecovery"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamLoss"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamLossClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamLoss"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamLossClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamRDI"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamRDIClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamRDI"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamRDIClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamUnexpectedMEG"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamUnexpectedMEGClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamUnexpectedMEG"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamUnexpectedMEGClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamUnexpectedPeriod"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamUnexpectedPeriodClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamUnexpectedPeriod"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamUnexpectedPeriodClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamExcess"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamExcessClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamExcess"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamExcessClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamSD"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamSDClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamSD"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamSDClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamSF"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamSFClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamSF"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamSFClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestAPSSwitch"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestAPSResume"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastAPSSwitch"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastAPSResume"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestAPSSwitchFail"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestAPSSwitchFailClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastAPSSwitchFail"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastAPSSwitchFailClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingSwitch"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingResume"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestAPSLost"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestAPSLostClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastAPSLost"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastAPSLostClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestAPSMismatch"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestAPSMismatchClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastAPSMismatch"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastAPSMismatchClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamUnexpectedMEP"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingWestOamUnexpectedMEPClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamUnexpectedMEP"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingEastOamUnexpectedMEPClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDelete"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspTotalCountExceed"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspThresholdExceed"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspTotalCountExceedClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspThresholdExceedClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelThresholdExceed"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelThresholdExceedClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelTotalCountExceed"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDynamicLabelTotalCountExceedClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceThresholdExceed"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceThresholdExceedClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceTotalCountExceed"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsResourceTotalCountExceedClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspLoopBack"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsLspLoopBackClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelCommitLost"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelCommitLostClear"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelHotstandbySwitch"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelHotstandbyResume"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwExtendTrapGroup = hwExtendTrapGroup.setStatus('current')
if mibBuilder.loadTexts: hwExtendTrapGroup.setDescription('Indicate the traps.')
hwObsoleteTrapGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 2, 2)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelFrrConfigChange"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelUp"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelDown"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingSwitch"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingResume"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwObsoleteTrapGroup = hwObsoleteTrapGroup.setStatus('obsolete')
if mibBuilder.loadTexts: hwObsoleteTrapGroup.setDescription('Indicate the Obsolete traps.')
hwMplsModuleCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 6, 2, 3)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwStaticLspGroup"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsTunnelGroup"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsDsTeGroup"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwMplsModuleCompliance = hwMplsModuleCompliance.setStatus('current')
if mibBuilder.loadTexts: hwMplsModuleCompliance.setDescription('hwMplsModuleCompliance')
hwMplsRingMib = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7))
hwMplsRingTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 1), )
if mibBuilder.loadTexts: hwMplsRingTable.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingTable.setDescription('Indicates the table information of the MPLS ring.')
hwMplsRingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 1, 1), ).setIndexNames((0, "HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingID"))
if mibBuilder.loadTexts: hwMplsRingEntry.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEntry.setDescription('Indicates the table information of the MPLS ring.')
hwMplsRingID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: hwMplsRingID.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingID.setDescription('Indicates the ID of the MPLS ring. ')
hwMplsRingNodeID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsRingNodeID.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingNodeID.setDescription('Indicates the ID of the current Node on the MPLS ring.')
hwMplsRingName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 1, 1, 3), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsRingName.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingName.setDescription('Indicates the name of MPLS ring.')
hwMplsRingDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 1, 1, 4), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsRingDirection.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingDirection.setDescription('Indicates the direction of the MPLS ring.')
hwMplsRingSwitchReason = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 1, 1, 5), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwMplsRingSwitchReason.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingSwitchReason.setDescription('Indicates the switch reason of the MPLS ring.')
hwMplsRingTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2))
hwMplsRingSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 1)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingNodeID"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingDirection"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingSwitchReason"))
if mibBuilder.loadTexts: hwMplsRingSwitch.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsRingSwitch.setDescription(' The notification indicates that the MPLS ring switched. ')
hwMplsRingResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 2)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingNodeID"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"), ("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingDirection"))
if mibBuilder.loadTexts: hwMplsRingResume.setStatus('obsolete')
if mibBuilder.loadTexts: hwMplsRingResume.setDescription(' The notification indicates that the MPLS ring resumed. ')
hwMplsRingWestOamLoss = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 3)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamLoss.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamLoss.setDescription(' The notification indicates that no expected CV/FFD packet is received for three consecutive cycles in the west of the MPLS ring. ')
hwMplsRingWestOamLossClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 4)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamLossClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamLossClear.setDescription(' The notification indicates that the hwMplsRingWestOamLoss alarm was cleared. ')
hwMplsRingEastOamLoss = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 5)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamLoss.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamLoss.setDescription(' The notification indicates that no expected CV/FFD packet is received for three consecutive cycles in the east of the MPLS ring. ')
hwMplsRingEastOamLossClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 6)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamLossClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamLossClear.setDescription(' The notification indicates that the hwMplsRingEastOamLoss alarm was cleared. ')
hwMplsRingWestOamRDI = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 7)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamRDI.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamRDI.setDescription(' The notification indicates that RDI packets are received in the west of the MPLS ring, indicating that a fault occurs on the forward ring. ')
hwMplsRingWestOamRDIClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 8)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamRDIClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamRDIClear.setDescription(' The notification indicates that the hwMplsRingWestOamRDI alarm was cleared. ')
hwMplsRingEastOamRDI = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 9)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamRDI.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamRDI.setDescription(' The notification indicates that RDI packets are received in the east of the MPLS ring, indicating that a fault occurs on the forward ring. ')
hwMplsRingEastOamRDIClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 10)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamRDIClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamRDIClear.setDescription(' The notification indicates that the hwMplsRingEastOamRDI alarm was cleared. ')
hwMplsRingWestOamUnexpectedMEG = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 11)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamUnexpectedMEG.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamUnexpectedMEG.setDescription(' The notification indicates that a CCM frame carrying a correct MEG level but incorrect MEG ID is received in the west of the MPLS ring. ')
hwMplsRingWestOamUnexpectedMEGClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 12)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamUnexpectedMEGClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamUnexpectedMEGClear.setDescription(' The notification indicates that the hwMplsRingWestOamUnexpectedMEG alarm was cleared. ')
hwMplsRingEastOamUnexpectedMEG = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 13)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamUnexpectedMEG.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamUnexpectedMEG.setDescription(' The notification indicates that a CCM frame carrying a correct MEG level but incorrect MEG ID is received in the east of the MPLS ring. ')
hwMplsRingEastOamUnexpectedMEGClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 14)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamUnexpectedMEGClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamUnexpectedMEGClear.setDescription(' The notification indicates that the hwMplsRingEastOamUnexpectedMEG alarm was cleared. ')
hwMplsRingWestOamUnexpectedPeriod = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 15)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamUnexpectedPeriod.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamUnexpectedPeriod.setDescription(' The notification indicates that a CCM frame carrying a correct MEG level, MEG ID, and MEP ID but incorrect period value is received in the west MEP of the MPLS ring. ')
hwMplsRingWestOamUnexpectedPeriodClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 16)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamUnexpectedPeriodClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamUnexpectedPeriodClear.setDescription(' The notification indicates that the hwMplsRingWestOamUnexpectedPeriod alarm was cleared. ')
hwMplsRingEastOamUnexpectedPeriod = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 17)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamUnexpectedPeriod.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamUnexpectedPeriod.setDescription(' The notification indicates that a CCM frame carrying a correct MEG level, MEG ID, and MEP ID but incorrect period value is received in the east MEP of the MPLS ring. ')
hwMplsRingEastOamUnexpectedPeriodClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 18)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamUnexpectedPeriodClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamUnexpectedPeriodClear.setDescription(' The notification indicates that the hwMplsRingEastOamUnexpectedPeriod alarm was cleared. ')
hwMplsRingWestOamExcess = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 19)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamExcess.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamExcess.setDescription(' The notification indicates that five or more CV/FFD packets are correctly received within three consecutive cycles in the west of the MPLS ring. ')
hwMplsRingWestOamExcessClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 20)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamExcessClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamExcessClear.setDescription(' The notification indicates that the hwMplsRingWestOamExcess alarm was cleared. ')
hwMplsRingEastOamExcess = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 21)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamExcess.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamExcess.setDescription(' The notification indicates that five or more CV/FFD packets are correctly received within three consecutive cycles in the east of the MPLS ring. ')
hwMplsRingEastOamExcessClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 22)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamExcessClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamExcessClear.setDescription(' The notification indicates that the hwMplsRingEastOamExcess alarm was cleared. ')
hwMplsRingWestOamSD = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 23)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamSD.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamSD.setDescription(' The notification indicates that the number of packets for connectivity check received in the west of the MPLS ring is smaller than the SD threshold. ')
hwMplsRingWestOamSDClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 24)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamSDClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamSDClear.setDescription(' The notification indicates that the hwMplsRingWestOamSD alarm was cleared. ')
hwMplsRingEastOamSD = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 25)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamSD.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamSD.setDescription(' The notification indicates that the number of packets for connectivity check received in the east of the MPLS ring is smaller than the SD threshold. ')
hwMplsRingEastOamSDClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 26)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamSDClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamSDClear.setDescription(' The notification indicates that the hwMplsRingEastOamSD alarm was cleared. ')
hwMplsRingWestOamSF = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 27)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamSF.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamSF.setDescription(' The notification indicates that the number of packets for connectivity check received in the west of the MPLS ring is smaller than the SF threshold. ')
hwMplsRingWestOamSFClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 28)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamSFClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamSFClear.setDescription(' The notification indicates that the hwMplsRingWestOamSF alarm was cleared. ')
hwMplsRingEastOamSF = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 29)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamSF.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamSF.setDescription(' The notification indicates that the number of packets for connectivity check received in the east of the MPLS ring is smaller than the SF threshold. ')
hwMplsRingEastOamSFClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 30)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamSFClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamSFClear.setDescription(' The notification indicates that the hwMplsRingEastOamSF alarm was cleared. ')
hwMplsRingWestAPSSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 31)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestAPSSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestAPSSwitch.setDescription(' The notification indicates that APS switching occurs in the west of the MPLS ring. ')
hwMplsRingWestAPSResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 32)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestAPSResume.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestAPSResume.setDescription(' The notification indicates that APS switches back in the west of the MPLS ring. ')
hwMplsRingEastAPSSwitch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 33)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastAPSSwitch.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastAPSSwitch.setDescription(' The notification indicates that APS switching occurs in the east of the MPLS ring. ')
hwMplsRingEastAPSResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 34)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastAPSResume.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastAPSResume.setDescription(' The notification indicates that APS switches back in the east of the MPLS ring. ')
hwMplsRingWestAPSSwitchFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 35)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestAPSSwitchFail.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestAPSSwitchFail.setDescription(' The notification indicates that the remote APS switching fails in the west of the MPLS ring. ')
hwMplsRingWestAPSSwitchFailClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 36)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestAPSSwitchFailClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestAPSSwitchFailClear.setDescription(' The notification indicates that the hwMplsRingWestAPSSwitchFail alarm was cleared. ')
hwMplsRingEastAPSSwitchFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 37)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastAPSSwitchFail.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastAPSSwitchFail.setDescription(' The notification indicates that the remote APS switching fails in the east of the MPLS ring. ')
hwMplsRingEastAPSSwitchFailClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 38)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastAPSSwitchFailClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastAPSSwitchFailClear.setDescription(' The notification indicates that the hwMplsRingEastAPSSwitchFail alarm was cleared. ')
hwMplsRingWestAPSLost = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 39)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestAPSLost.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestAPSLost.setDescription(' The notification indicates that APS packets are missing in the west of the MPLS ring. ')
hwMplsRingWestAPSLostClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 40)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestAPSLostClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestAPSLostClear.setDescription(' The notification indicates that the hwMplsRingWestAPSLost alarm was cleared. ')
hwMplsRingEastAPSLost = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 41)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastAPSLost.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastAPSLost.setDescription(' The notification indicates that APS packets are missing in the east of the MPLS ring. ')
hwMplsRingEastAPSLostClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 42)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastAPSLostClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastAPSLostClear.setDescription(' The notification indicates that the hwMplsRingEastAPSLost alarm was cleared. ')
hwMplsRingWestAPSMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 43)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestAPSMismatch.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestAPSMismatch.setDescription(' The notification indicates that the source ID carried by APS packets received in the west is different from the peer source ID configured for the west state machine on the MPLS ring. ')
hwMplsRingWestAPSMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 44)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestAPSMismatchClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestAPSMismatchClear.setDescription(' The notification indicates that the hwMplsRingWestAPSMismatch alarm was cleared. ')
hwMplsRingEastAPSMismatch = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 45)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastAPSMismatch.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastAPSMismatch.setDescription(' The notification indicates that the source ID carried by APS packets received in the east is different from the peer source ID configured for the east state machine on the MPLS ring. ')
hwMplsRingEastAPSMismatchClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 46)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastAPSMismatchClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastAPSMismatchClear.setDescription(' The notification indicates that the hwMplsRingEastAPSMismatch alarm was cleared. ')
hwMplsRingWestOamUnexpectedMEP = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 47)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamUnexpectedMEP.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamUnexpectedMEP.setDescription(' The notification indicates that a CCM frame carrying a correct MEG level and correct MEG ID but not the expected MEP ID is received in the west of the MPLS ring. ')
hwMplsRingWestOamUnexpectedMEPClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 48)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingWestOamUnexpectedMEPClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingWestOamUnexpectedMEPClear.setDescription(' The notification indicates that the hwMplsRingWestOamUnexpectedMEP alarm was cleared. ')
hwMplsRingEastOamUnexpectedMEP = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 49)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamUnexpectedMEP.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamUnexpectedMEP.setDescription(' The notification indicates that a CCM frame carrying a correct MEG level and correct MEG ID but not the expected MEP ID is received in the east of the MPLS ring. ')
hwMplsRingEastOamUnexpectedMEPClear = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 121, 7, 2, 50)).setObjects(("HUAWEI-MPLS-EXTEND-MIB", "hwMplsRingName"))
if mibBuilder.loadTexts: hwMplsRingEastOamUnexpectedMEPClear.setStatus('current')
if mibBuilder.loadTexts: hwMplsRingEastOamUnexpectedMEPClear.setDescription(' The notification indicates that the hwMplsRingEastOamUnexpectedMEP alarm was cleared. ')
mibBuilder.exportSymbols("HUAWEI-MPLS-EXTEND-MIB", hwTunnelFrrARHopEntry=hwTunnelFrrARHopEntry, hwMplsRingEastOamExcessClear=hwMplsRingEastOamExcessClear, hwStaticLspInIfIndex=hwStaticLspInIfIndex, hwMplsTunnelStatisticsEntry=hwMplsTunnelStatisticsEntry, hwMplsRingEastAPSMismatch=hwMplsRingEastAPSMismatch, hwMplsStaticCRLspDown=hwMplsStaticCRLspDown, hwMplsRingEastOamExcess=hwMplsRingEastOamExcess, hwStaticLspOwner=hwStaticLspOwner, hwMplsTunnelBBSwitch=hwMplsTunnelBBSwitch, hwMplsTnlID=hwMplsTnlID, hwMplsTunnelTpOamLossSD=hwMplsTunnelTpOamLossSD, hwMplsStaticLspUp=hwMplsStaticLspUp, hwMplsModuleCompliance=hwMplsModuleCompliance, hwMplsTeFrrSwitch=hwMplsTeFrrSwitch, hwMplsIfBcEntry=hwMplsIfBcEntry, hwMplsRingWestOamUnexpectedPeriod=hwMplsRingWestOamUnexpectedPeriod, hwMplsRingEastAPSSwitchFail=hwMplsRingEastAPSSwitchFail, hwMplsTunnelDownIfIpAddr=hwMplsTunnelDownIfIpAddr, hwMplsIfBc7Bandwidth=hwMplsIfBc7Bandwidth, hwMplsRingWestAPSLostClear=hwMplsRingWestAPSLostClear, hwMplsLspCurrentCount=hwMplsLspCurrentCount, hwMplsTunnelEntry=hwMplsTunnelEntry, hwMplsTeFrrProtNotAval=hwMplsTeFrrProtNotAval, hwMplsOamPeriodRecovery=hwMplsOamPeriodRecovery, hwMplsTunnelTable=hwMplsTunnelTable, hwMplsTrafficStatisticsStaticLspBackwardInBytes=hwMplsTrafficStatisticsStaticLspBackwardInBytes, hwMplsTunnelCt4Bandwidth=hwMplsTunnelCt4Bandwidth, hwMplsTunnelBandwidth=hwMplsTunnelBandwidth, hwMplsTunnelIfIndex=hwMplsTunnelIfIndex, hwMplsRingWestOamSF=hwMplsRingWestOamSF, hwTunnelFrrRouteDBBypassIfIndex=hwTunnelFrrRouteDBBypassIfIndex, hwMplsTunnelBesteffortDown=hwMplsTunnelBesteffortDown, hwMplsDynamicLabelTotalCount=hwMplsDynamicLabelTotalCount, hwMplsTeClassId=hwMplsTeClassId, hwMplsExtendMib=hwMplsExtendMib, hwMplsTeVpnAllocatedBandwidth=hwMplsTeVpnAllocatedBandwidth, hwMplsTunnelOperStatus=hwMplsTunnelOperStatus, hwMplsTunnelDownReason=hwMplsTunnelDownReason, hwMplsRingEastAPSLost=hwMplsRingEastAPSLost, hwMplsTeAutoTunnelPrimaryDownClear=hwMplsTeAutoTunnelPrimaryDownClear, hwMplsTunnelStatisticsTable=hwMplsTunnelStatisticsTable, hwMplsGlobalBcModel=hwMplsGlobalBcModel, hwMplsDynamicLabelThresholdExceedClear=hwMplsDynamicLabelThresholdExceedClear, hwMplsRingWestOamUnexpectedMEP=hwMplsRingWestOamUnexpectedMEP, hwTunnelFrrBypassTable=hwTunnelFrrBypassTable, hwMplsTunnelCommitLost=hwMplsTunnelCommitLost, hwMplsTunnelIndex=hwMplsTunnelIndex, hwMplsRingEastOamSDClear=hwMplsRingEastOamSDClear, hwMplsResourceThresholdExceed=hwMplsResourceThresholdExceed, hwStaticLspDownReason=hwStaticLspDownReason, hwStaticLspOutSegmentIndex=hwStaticLspOutSegmentIndex, hwMplsLspThresholdExceedClear=hwMplsLspThresholdExceedClear, hwMplsTeFrrResume=hwMplsTeFrrResume, hwMplsOamMeg=hwMplsOamMeg, hwMplsLspLoopBack=hwMplsLspLoopBack, hwMplsDynamicLabelThresholdUpperLimit=hwMplsDynamicLabelThresholdUpperLimit, hwMplsExtTunnelDown=hwMplsExtTunnelDown, hwMplsLspStatisticsEntry=hwMplsLspStatisticsEntry, hwMplsLspLoopBackClear=hwMplsLspLoopBackClear, hwMplsIfBc2Bandwidth=hwMplsIfBc2Bandwidth, hwTunnelFrrARHopTable=hwTunnelFrrARHopTable, hwMplsResourceTotalCount=hwMplsResourceTotalCount, hwMplsTunnelHSBSwitch=hwMplsTunnelHSBSwitch, hwTunnelFrrBypassProtIfIndex=hwTunnelFrrBypassProtIfIndex, hwMplsOamMep=hwMplsOamMep, hwMplsTunnelCommitLostClear=hwMplsTunnelCommitLostClear, hwMplsTunnelSessionAttr=hwMplsTunnelSessionAttr, hwMplsTunnelChangeBw=hwMplsTunnelChangeBw, hwMplsRingWestOamUnexpectedMEGClear=hwMplsRingWestOamUnexpectedMEGClear, hwMplsRingWestOamSD=hwMplsRingWestOamSD, hwMplsRingEastAPSResume=hwMplsRingEastAPSResume, hwMplsOamMisMergeRecovery=hwMplsOamMisMergeRecovery, hwMplsRingWestAPSMismatchClear=hwMplsRingWestAPSMismatchClear, hwMplsTunnelStatisticsHCInOctets=hwMplsTunnelStatisticsHCInOctets, hwMplsTrafficStatisticsStaticLspName=hwMplsTrafficStatisticsStaticLspName, hwMplsTunnelFrrARHopTableIndex=hwMplsTunnelFrrARHopTableIndex, hwMplsTunnelLspType=hwMplsTunnelLspType, hwTunnelFrrRouteDBTunnelIndex=hwTunnelFrrRouteDBTunnelIndex, hwMplsResourceType=hwMplsResourceType, hwStaticLspGroup=hwStaticLspGroup, hwMplsRingEastOamLoss=hwMplsRingEastOamLoss, hwMplsRingWestOamUnexpectedPeriodClear=hwMplsRingWestOamUnexpectedPeriodClear, hwMplsTunnelCt3Bandwidth=hwMplsTunnelCt3Bandwidth, hwMplsIfBc0Bandwidth=hwMplsIfBc0Bandwidth, hwMplsOamRdiRecovery=hwMplsOamRdiRecovery, hwMplsOamFail=hwMplsOamFail, hwMplsTrapObjects=hwMplsTrapObjects, hwMplsSessionTunnelId=hwMplsSessionTunnelId, hwMplsDynamicLabelCurrentCount=hwMplsDynamicLabelCurrentCount, hwMplsTrafficStatisticsStaticLspBackwardOutBytes=hwMplsTrafficStatisticsStaticLspBackwardOutBytes, hwMplsRingWestOamUnexpectedMEPClear=hwMplsRingWestOamUnexpectedMEPClear, hwStaticLspTnlEntry=hwStaticLspTnlEntry, hwMplsTunnelCt0Bandwidth=hwMplsTunnelCt0Bandwidth, hwMplsRingEastAPSSwitchFailClear=hwMplsRingEastAPSSwitchFailClear, hwMplsOamMisMerge=hwMplsOamMisMerge, hwMplsRingEastOamUnexpectedMEG=hwMplsRingEastOamUnexpectedMEG, hwMplsOamAis=hwMplsOamAis, hwStaticLspEntry=hwStaticLspEntry, hwMplsTunnelFrrBandwidth=hwMplsTunnelFrrBandwidth, hwMplsTunnelHotstandbyDown=hwMplsTunnelHotstandbyDown, hwStaticLspTnlName=hwStaticLspTnlName, hwMplsOamBDI=hwMplsOamBDI, hwTunnelFrrRouteDBTable=hwTunnelFrrRouteDBTable, hwMplsOamMegRecovery=hwMplsOamMegRecovery, hwMplsOamLckRecovery=hwMplsOamLckRecovery, hwMplsExtTunnelDownClear=hwMplsExtTunnelDownClear, hwTunnelFrrRouteDBTunnelEngressLSRId=hwTunnelFrrRouteDBTunnelEngressLSRId, hwMplsLspTrafficStatisticGroup=hwMplsLspTrafficStatisticGroup, hwStaticLspInSegmentIndex=hwStaticLspInSegmentIndex, hwMplsRingNodeID=hwMplsRingNodeID, hwMplsRingEastAPSLostClear=hwMplsRingEastAPSLostClear, hwMplsLspName=hwMplsLspName, hwMplsTeClassClassType=hwMplsTeClassClassType, hwMplsTrafficStatisticsStaticLspForwardOutPackets=hwMplsTrafficStatisticsStaticLspForwardOutPackets, hwMplsGlobalGroup=hwMplsGlobalGroup, hwMplsRingWestOamLossClear=hwMplsRingWestOamLossClear, hwMplsTunnelOBSwitch=hwMplsTunnelOBSwitch, hwMplsTunnelDownIfIpAddrType=hwMplsTunnelDownIfIpAddrType, hwMplsTunnelHotstandbyUp=hwMplsTunnelHotstandbyUp, hwStaticLspIndex=hwStaticLspIndex, hwMplsOamUnknown=hwMplsOamUnknown, hwMplsTeAutoTunnelDownClear=hwMplsTeAutoTunnelDownClear, hwMplsStaticLspDown=hwMplsStaticLspDown, hwMplsEgressLsrId=hwMplsEgressLsrId, hwMplsResourceGroup=hwMplsResourceGroup, hwMplsDynamicLabelThresholdExceed=hwMplsDynamicLabelThresholdExceed, hwMplsRingResume=hwMplsRingResume, hwMplsRingName=hwMplsRingName, hwMplsOamLoss=hwMplsOamLoss, hwMplsExtendCompliances=hwMplsExtendCompliances, hwMplsLspStatisticsIngressLspCount=hwMplsLspStatisticsIngressLspCount, hwMplsRingWestAPSLost=hwMplsRingWestAPSLost, hwMplsTunnelName=hwMplsTunnelName, hwStaticLspTable=hwStaticLspTable, hwMplsTeClassPriority=hwMplsTeClassPriority, hwMplsTeVpnQosTable=hwMplsTeVpnQosTable, hwMplsIfBc6Bandwidth=hwMplsIfBc6Bandwidth, hwMplsTeVpnQosEntry=hwMplsTeVpnQosEntry, hwMplsRingTrap=hwMplsRingTrap, hwMplsRingEntry=hwMplsRingEntry, hwMplsTeClassDescription=hwMplsTeClassDescription, hwMplsTunnelFrrHoldingPrio=hwMplsTunnelFrrHoldingPrio, hwMplsRingTable=hwMplsRingTable, hwMplsTunnelPrimaryUp=hwMplsTunnelPrimaryUp, hwMplsLspTotalCountExceedClear=hwMplsLspTotalCountExceedClear, hwMplsRingWestAPSSwitchFail=hwMplsRingWestAPSSwitchFail, hwMplsTunnelCt7Bandwidth=hwMplsTunnelCt7Bandwidth, hwMplsOamBDIRecovery=hwMplsOamBDIRecovery, hwMplsTunnelOrdinaryUp=hwMplsTunnelOrdinaryUp, hwMplsTrafficStatisticsStaticLspBackwardInPackets=hwMplsTrafficStatisticsStaticLspBackwardInPackets, hwMplsTunnelType=hwMplsTunnelType, hwTunnelFrrBypassListIndex=hwTunnelFrrBypassListIndex, hwStaticLspBandwidth=hwStaticLspBandwidth, hwMplsRingEastOamUnexpectedPeriod=hwMplsRingEastOamUnexpectedPeriod, hwMplsDynamicLabelTotalCountExceed=hwMplsDynamicLabelTotalCountExceed, hwMplsTunnelStatisticsTunnelIndex=hwMplsTunnelStatisticsTunnelIndex, hwMplsLspThreshold=hwMplsLspThreshold, hwMplsTeClassEntry=hwMplsTeClassEntry, hwMplsRingEastOamSF=hwMplsRingEastOamSF, hwMplsTunnelInterfaceName=hwMplsTunnelInterfaceName, hwMplsTunnelDelete=hwMplsTunnelDelete, hwMplsOamLossRecovery=hwMplsOamLossRecovery, hwMplsTunnelEgressLSRId=hwMplsTunnelEgressLSRId, hwMplsRingSwitch=hwMplsRingSwitch, hwMplsLspStatisticsTotalLspCount=hwMplsLspStatisticsTotalLspCount, hwMplsTunnelCt2Bandwidth=hwMplsTunnelCt2Bandwidth, hwTunnelFrrRouteDBTunnelInstance=hwTunnelFrrRouteDBTunnelInstance, hwMplsTrafficStatisticsStaticLspForwardOutBytes=hwMplsTrafficStatisticsStaticLspForwardOutBytes, hwMplsRingWestOamSFClear=hwMplsRingWestOamSFClear, hwMplsRingWestOamRDI=hwMplsRingWestOamRDI, hwMplsTunnelSignalProto=hwMplsTunnelSignalProto, hwMplsIfBcTable=hwMplsIfBcTable, hwMplsTunnelHSBResume=hwMplsTunnelHSBResume, hwMplsOamSDRecovery=hwMplsOamSDRecovery, hwMplsOamLocalLockRecovery=hwMplsOamLocalLockRecovery, hwMplsTunnelFrrSetupPrio=hwMplsTunnelFrrSetupPrio, hwMplsOamLocalLock=hwMplsOamLocalLock, hwMplsIngressLsrId=hwMplsIngressLsrId, hwMplsLspStatisticsGroup=hwMplsLspStatisticsGroup, hwMplsRingEastOamRDIClear=hwMplsRingEastOamRDIClear, hwMplsOamMepRecovery=hwMplsOamMepRecovery, hwMplsOamRdi=hwMplsOamRdi, hwMplsRingWestAPSResume=hwMplsRingWestAPSResume, hwMplsExtendGroups=hwMplsExtendGroups, hwMplsIfMaxResvBandwidth=hwMplsIfMaxResvBandwidth, hwMplsExtendConformance=hwMplsExtendConformance, hwMplsRingEastOamSFClear=hwMplsRingEastOamSFClear, hwMplsRingWestAPSSwitchFailClear=hwMplsRingWestAPSSwitchFailClear, hwTunnelFrrRouteDBInnerLabel=hwTunnelFrrRouteDBInnerLabel, hwTunnelFrrRouteDBTunnelIngressLSRId=hwTunnelFrrRouteDBTunnelIngressLSRId, hwMplsTunnelNextBandwidth=hwMplsTunnelNextBandwidth, hwMplsTunnelIfName=hwMplsTunnelIfName, hwMplsTunnelHotstandbyResume=hwMplsTunnelHotstandbyResume, hwExtendTrapGroup=hwExtendTrapGroup, hwTunnelFrrARHopIndex=hwTunnelFrrARHopIndex, hwMplsLspStatisticsLspType=hwMplsLspStatisticsLspType, hwMplsTrafficStatisticsStaticLspBackwardOutPackets=hwMplsTrafficStatisticsStaticLspBackwardOutPackets, hwMplsOamUnknownRecovery=hwMplsOamUnknownRecovery, hwMplsTrapGroup=hwMplsTrapGroup, hwStaticLspTnlToken=hwStaticLspTnlToken, hwStaticLspStatus=hwStaticLspStatus, hwMplsLspStatisticsEgressLspCount=hwMplsLspStatisticsEgressLspCount, hwMplsTunnelFrrSwitchover=hwMplsTunnelFrrSwitchover, hwMplsRingWestOamLoss=hwMplsRingWestOamLoss, hwMplsRingEastOamUnexpectedMEPClear=hwMplsRingEastOamUnexpectedMEPClear, hwMplsLocalLspId=hwMplsLocalLspId, hwStaticLspInIfName=hwStaticLspInIfName, hwMplsIfBc1Bandwidth=hwMplsIfBc1Bandwidth, hwMplsObsoleteGroup=hwMplsObsoleteGroup, hwMplsExtendMibTunnel=hwMplsExtendMibTunnel, hwMplsOamSF=hwMplsOamSF, hwMplsRingWestOamRDIClear=hwMplsRingWestOamRDIClear, hwTunnelFrrARHopProtDesired=hwTunnelFrrARHopProtDesired, hwMplsResourceTotalCountExceed=hwMplsResourceTotalCountExceed, hwMplsLspStatistics=hwMplsLspStatistics, hwMplsOamAisRecovery=hwMplsOamAisRecovery, hwMplsTunnelIngressLSRId=hwMplsTunnelIngressLSRId, hwMplsTeClassTable=hwMplsTeClassTable, hwMplsLspTotalCount=hwMplsLspTotalCount, hwMplsStaticCRLspUp=hwMplsStaticCRLspUp, hwMplsResourceTotalCountExceedClear=hwMplsResourceTotalCountExceedClear, hwMplsTunnelStatisticsEgressLSRId=hwMplsTunnelStatisticsEgressLSRId, hwMplsLspGroup=hwMplsLspGroup, hwMplsIfBc4Bandwidth=hwMplsIfBc4Bandwidth, hwMplsOamMisMatchRecovery=hwMplsOamMisMatchRecovery, hwMplsRingEastOamUnexpectedPeriodClear=hwMplsRingEastOamUnexpectedPeriodClear, hwMplsRingEastOamUnexpectedMEP=hwMplsRingEastOamUnexpectedMEP, hwStaticLspTnlTable=hwStaticLspTnlTable, hwMplsRingEastOamUnexpectedMEGClear=hwMplsRingEastOamUnexpectedMEGClear, hwTunnelFrrARHopProtActual=hwTunnelFrrARHopProtActual, hwMplsTunnelPrimaryDown=hwMplsTunnelPrimaryDown, hwMplsOamExcessRecovery=hwMplsOamExcessRecovery, hwMplsIfBc5Bandwidth=hwMplsIfBc5Bandwidth, hwLspTrap=hwLspTrap, hwTunnelFrrARHopListIndex=hwTunnelFrrARHopListIndex, hwMplsTunnelDown=hwMplsTunnelDown, hwMplsOamLck=hwMplsOamLck, hwMplsTunnelStatisticsIngressLSRId=hwMplsTunnelStatisticsIngressLSRId, hwMplsTunnelFrrConfigOper=hwMplsTunnelFrrConfigOper, hwMplsRingGroup=hwMplsRingGroup, hwMplsRingWestOamUnexpectedMEG=hwMplsRingWestOamUnexpectedMEG, hwMplsRingEastOamSD=hwMplsRingEastOamSD, hwMplsLspStatisticsTable=hwMplsLspStatisticsTable, hwMplsDynamicLabelTotalCountExceedClear=hwMplsDynamicLabelTotalCountExceedClear, hwMplsResourceThreshold=hwMplsResourceThreshold, hwMplsLspProtocol=hwMplsLspProtocol, hwMplsOamSFRecovery=hwMplsOamSFRecovery, hwMplsTrafficStatisticsStaticLspEntry=hwMplsTrafficStatisticsStaticLspEntry, hwMplsTunnelFrrConfigChange=hwMplsTunnelFrrConfigChange, hwMplsRingWestAPSMismatch=hwMplsRingWestAPSMismatch, hwMplsTunnelClassType=hwMplsTunnelClassType, hwMplsTrafficStatisticsStaticLspTable=hwMplsTrafficStatisticsStaticLspTable, hwTunnelFrrBypassEntry=hwTunnelFrrBypassEntry, hwMplsLspStatisticsTransitLspCount=hwMplsLspStatisticsTransitLspCount)
mibBuilder.exportSymbols("HUAWEI-MPLS-EXTEND-MIB", hwMplsTunnelOBResume=hwMplsTunnelOBResume, hwMplsRingEastOamRDI=hwMplsRingEastOamRDI, hwMplsTunnelInstance=hwMplsTunnelInstance, hwMplsOamExcess=hwMplsOamExcess, hwMplsDynamicLabelThresholdLowerLimit=hwMplsDynamicLabelThresholdLowerLimit, hwMplsRingSwitchReason=hwMplsRingSwitchReason, hwMplsTunnelUp=hwMplsTunnelUp, hwMplsRingDirection=hwMplsRingDirection, hwMplsTunnelCt6Bandwidth=hwMplsTunnelCt6Bandwidth, hwTunnelFrrRouteDBEntry=hwTunnelFrrRouteDBEntry, hwMplsTunnelAdminStatus=hwMplsTunnelAdminStatus, hwMplsTeFrrProtAval=hwMplsTeFrrProtAval, hwMplsTrafficStatisticsStaticLspForwardInPackets=hwMplsTrafficStatisticsStaticLspForwardInPackets, hwTunnelFrrBypassIndex=hwTunnelFrrBypassIndex, hwMplsRingWestOamSDClear=hwMplsRingWestOamSDClear, hwStaticLspClassType=hwStaticLspClassType, hwMplsTunnelDownLSRID=hwMplsTunnelDownLSRID, hwMplsRingWestOamExcessClear=hwMplsRingWestOamExcessClear, hwMplsRingEastAPSSwitch=hwMplsRingEastAPSSwitch, hwMplsTunnelOrdinaryDown=hwMplsTunnelOrdinaryDown, hwMplsTeVpnMaxBandwidth=hwMplsTeVpnMaxBandwidth, hwMplsTunnelBesteffortUp=hwMplsTunnelBesteffortUp, hwStaticLspName=hwStaticLspName, hwMplsRingID=hwMplsRingID, hwMplsTunnelPreBandwidth=hwMplsTunnelPreBandwidth, hwMplsGlobalObject=hwMplsGlobalObject, hwMplsTunnelBBResume=hwMplsTunnelBBResume, hwMplsLspTotalCountExceed=hwMplsLspTotalCountExceed, hwMplsResourceThresholdExceedClear=hwMplsResourceThresholdExceedClear, hwObsoleteTrapGroup=hwObsoleteTrapGroup, hwMplsGlobalWorkMode=hwMplsGlobalWorkMode, hwMplsRingMib=hwMplsRingMib, hwMplsExtendTrap=hwMplsExtendTrap, hwMplsRingEastOamLossClear=hwMplsRingEastOamLossClear, hwMplsLspThresholdExceed=hwMplsLspThresholdExceed, hwMplsRingWestAPSSwitch=hwMplsRingWestAPSSwitch, hwMplsTunnelCt5Bandwidth=hwMplsTunnelCt5Bandwidth, hwMplsOamFailRecovery=hwMplsOamFailRecovery, hwMplsOamPeriod=hwMplsOamPeriod, hwMplsTunnelStatisticsHCOutOctets=hwMplsTunnelStatisticsHCOutOctets, hwMplsRingWestOamExcess=hwMplsRingWestOamExcess, PYSNMP_MODULE_ID=hwMplsExtendMib, hwMplsTunnelFrrBypassTableIndex=hwMplsTunnelFrrBypassTableIndex, hwMplsTunnelHotstandbySwitch=hwMplsTunnelHotstandbySwitch, hwMplsOamMisMatch=hwMplsOamMisMatch, hwMplsDsTeGroup=hwMplsDsTeGroup, hwMplsRingEastAPSMismatchClear=hwMplsRingEastAPSMismatchClear, hwMplsTrafficStatisticsStaticLspForwardInBytes=hwMplsTrafficStatisticsStaticLspForwardInBytes, hwMplsIfBc3Bandwidth=hwMplsIfBc3Bandwidth, hwMplsTunnelGroup=hwMplsTunnelGroup, hwMplsResourceCurrentCount=hwMplsResourceCurrentCount, hwMplsTunnelCt1Bandwidth=hwMplsTunnelCt1Bandwidth)
