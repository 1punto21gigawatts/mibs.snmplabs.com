#
# PySNMP MIB module ZXTM-MIB-SMIv2 (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ZXTM-MIB-SMIv2
# Produced by pysmi-0.3.4 at Wed May  1 15:48:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, enterprises, TimeTicks, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, Gauge32, Bits, Counter64, ObjectIdentity, Unsigned32, iso, Counter32, IpAddress, Integer32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "enterprises", "TimeTicks", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "Gauge32", "Bits", "Counter64", "ObjectIdentity", "Unsigned32", "iso", "Counter32", "IpAddress", "Integer32", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
zxtm = ModuleIdentity((1, 3, 6, 1, 4, 1, 7146, 1, 2))
zxtm.setRevisions(('2016-12-05 11:00', '2016-09-29 01:00', '2016-05-09 19:00', '2015-11-18 09:00', '2015-11-16 17:03', '2015-11-09 09:00', '2015-09-23 14:00', '2015-07-07 15:00', '2015-06-16 14:00', '2015-01-23 14:00', '2014-12-04 11:00', '2014-10-29 11:00', '2014-09-21 10:00', '2014-08-19 12:00', '2014-07-01 14:00', '2014-02-24 17:00', '2014-02-03 16:00', '2014-02-03 11:00', '2013-11-11 11:00', '2011-11-22 11:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: zxtm.setRevisionsDescriptions(('Brocade vTM 17.1 features', 'Brocade vTM 11.1 features', 'Brocade vTM 11.0 features', 'Brocade vTM 10.4 features', 'Renamed Aptimizer to Web Accelerator in descriptions', 'Brocade vTM 10.3 features', 'Stingray 10.2 features', 'Node drain to delete traps', 'Brocade Rebranding', 'Stingray 10.0 features', 'Web cache URL store counters', 'DNS Server traps', 'New EC2 trap', 'Stingray 9.8 features', 'Stingray 9.7 features', 'New OCSP stapling traps', 'New autoscaling trap', 'New virtual server counter and fault tolerance trap', 'Various SMIv2 compliance issues and OCSP stapling', 'Initial revision',))
if mibBuilder.loadTexts: zxtm.setLastUpdated('201612051100Z')
if mibBuilder.loadTexts: zxtm.setOrganization('Brocade Communications (vTM Team)')
if mibBuilder.loadTexts: zxtm.setContactInfo('http://www.brocade.com/forms/jsp/support/tech_sc_locator.jsp')
if mibBuilder.loadTexts: zxtm.setDescription('MIB for Virtual Traffic Manager')
zeus = MibIdentifier((1, 3, 6, 1, 4, 1, 7146))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1))
globals = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1))
virtualservers = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2))
pools = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3))
nodes = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4))
serviceprotection = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5))
trafficips = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6))
servicelevelmonitoring = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7))
pernodeservicelevelmon = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8))
bandwidthmgt = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9))
connratelimit = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10))
extra = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11))
netinterfaces = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12))
events = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13))
actions = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14))
zxtmtraps = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15))
trapsZero = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0))
persistence = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 16))
cache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17))
webcache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1))
sslcache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2))
aspsessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3))
ipsessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4))
j2eesessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5))
unisessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6))
sslsessioncache = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7))
rules = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18))
monitors = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19))
licensekeys = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20))
zxtms = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21))
trapobjects = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22))
cloudcredentials = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23))
glbservices = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24))
perlocationservices = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25))
locations = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26))
listenips = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27))
authenticators = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28))
conformanceGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29))
complianceStatements = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 30))
steelheads = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31))
sslocspstapling = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32))
dpaCoreUtilization = MibIdentifier((1, 3, 6, 1, 4, 1, 7146, 1, 2, 33))
mainGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 1))
for _mainGroup_obj in [[("ZXTM-MIB-SMIv2", "version"), ("ZXTM-MIB-SMIv2", "numberChildProcesses"), ("ZXTM-MIB-SMIv2", "upTime"), ("ZXTM-MIB-SMIv2", "timeLastConfigUpdate"), ("ZXTM-MIB-SMIv2", "totalBytesIn"), ("ZXTM-MIB-SMIv2", "totalBytesOut"), ("ZXTM-MIB-SMIv2", "totalCurrentConn"), ("ZXTM-MIB-SMIv2", "totalConn"), ("ZXTM-MIB-SMIv2", "totalRequests"), ("ZXTM-MIB-SMIv2", "totalTransactions"), ("ZXTM-MIB-SMIv2", "numberDNSARequests"), ("ZXTM-MIB-SMIv2", "numberDNSACacheHits"), ("ZXTM-MIB-SMIv2", "numberDNSPTRRequests"), ("ZXTM-MIB-SMIv2", "numberDNSPTRCacheHits"), ("ZXTM-MIB-SMIv2", "numberSNMPUnauthorisedRequests"), ("ZXTM-MIB-SMIv2", "numberSNMPBadRequests"), ("ZXTM-MIB-SMIv2", "numberSNMPGetRequests"), ("ZXTM-MIB-SMIv2", "numberSNMPGetNextRequests"), ("ZXTM-MIB-SMIv2", "sslCipherEncrypts"), ("ZXTM-MIB-SMIv2", "sslCipherDecrypts"), ("ZXTM-MIB-SMIv2", "sslCipherRC4Encrypts"), ("ZXTM-MIB-SMIv2", "sslCipherRC4Decrypts"), ("ZXTM-MIB-SMIv2", "sslCipherDESEncrypts"), ("ZXTM-MIB-SMIv2", "sslCipherDESDecrypts"), ("ZXTM-MIB-SMIv2", "sslCipher3DESEncrypts"), ("ZXTM-MIB-SMIv2", "sslCipher3DESDecrypts"), ("ZXTM-MIB-SMIv2", "sslCipherAESEncrypts"), ("ZXTM-MIB-SMIv2", "sslCipherAESDecrypts"), ("ZXTM-MIB-SMIv2", "sslCipherRSAEncrypts"), ("ZXTM-MIB-SMIv2", "sslCipherRSADecrypts"), ("ZXTM-MIB-SMIv2", "sslCipherRSADecryptsExternal"), ("ZXTM-MIB-SMIv2", "sslHandshakeSSLv3"), ("ZXTM-MIB-SMIv2", "sslHandshakeTLSv1"), ("ZXTM-MIB-SMIv2", "sslClientCertNotSent"), ("ZXTM-MIB-SMIv2", "sslClientCertInvalid"), ("ZXTM-MIB-SMIv2", "sslClientCertExpired"), ("ZXTM-MIB-SMIv2", "sslClientCertRevoked"), ("ZXTM-MIB-SMIv2", "sslSessionIDMemCacheHit"), ("ZXTM-MIB-SMIv2", "sslSessionIDMemCacheMiss"), ("ZXTM-MIB-SMIv2", "sslHandshakeTLSv11"), ("ZXTM-MIB-SMIv2", "sslConnections"), ("ZXTM-MIB-SMIv2", "sslCipherRSAEncryptsExternal"), ("ZXTM-MIB-SMIv2", "sysCPUIdlePercent"), ("ZXTM-MIB-SMIv2", "sysCPUBusyPercent"), ("ZXTM-MIB-SMIv2", "sysCPUUserBusyPercent"), ("ZXTM-MIB-SMIv2", "sysCPUSystemBusyPercent"), ("ZXTM-MIB-SMIv2", "sysFDsFree"), ("ZXTM-MIB-SMIv2", "sysMemTotal"), ("ZXTM-MIB-SMIv2", "sysMemFree"), ("ZXTM-MIB-SMIv2", "sysMemInUse"), ("ZXTM-MIB-SMIv2", "sysMemBuffered"), ("ZXTM-MIB-SMIv2", "sysMemSwapped"), ("ZXTM-MIB-SMIv2", "sysMemSwapTotal"), ("ZXTM-MIB-SMIv2", "numIdleConnections"), ("ZXTM-MIB-SMIv2", "dataEntries"), ("ZXTM-MIB-SMIv2", "dataMemoryUsage"), ("ZXTM-MIB-SMIv2", "eventsSeen"), ("ZXTM-MIB-SMIv2", "totalDNSResponses"), ("ZXTM-MIB-SMIv2", "totalBadDNSPackets"), ("ZXTM-MIB-SMIv2", "totalBackendServerErrors"), ("ZXTM-MIB-SMIv2", "virtualserverNumber"), ("ZXTM-MIB-SMIv2", "virtualserverName"), ("ZXTM-MIB-SMIv2", "virtualserverPort"), ("ZXTM-MIB-SMIv2", "virtualserverProtocol"), ("ZXTM-MIB-SMIv2", "virtualserverDefaultTrafficPool"), ("ZXTM-MIB-SMIv2", "virtualserverBytesIn"), ("ZXTM-MIB-SMIv2", "virtualserverBytesOut"), ("ZXTM-MIB-SMIv2", "virtualserverCurrentConn"), ("ZXTM-MIB-SMIv2", "virtualserverMaxConn"), ("ZXTM-MIB-SMIv2", "virtualserverDiscard"), ("ZXTM-MIB-SMIv2", "virtualserverDirectReplies"), ("ZXTM-MIB-SMIv2", "virtualserverConnectTimedOut"), ("ZXTM-MIB-SMIv2", "virtualserverDataTimedOut"), ("ZXTM-MIB-SMIv2", "virtualserverKeepaliveTimedOut"), ("ZXTM-MIB-SMIv2", "virtualserverMaxDurationTimedOut"), ("ZXTM-MIB-SMIv2", "virtualserverUdpTimedOut"), ("ZXTM-MIB-SMIv2", "virtualserverTotalDgram"), ("ZXTM-MIB-SMIv2", "virtualserverGzip"), ("ZXTM-MIB-SMIv2", "virtualserverGzipBytesSaved"), ("ZXTM-MIB-SMIv2", "virtualserverHttpRewriteLocation"), ("ZXTM-MIB-SMIv2", "virtualserverHttpRewriteCookie"), ("ZXTM-MIB-SMIv2", "virtualserverHttpCacheHits"), ("ZXTM-MIB-SMIv2", "virtualserverHttpCacheLookups"), ("ZXTM-MIB-SMIv2", "virtualserverHttpCacheHitRate"), ("ZXTM-MIB-SMIv2", "virtualserverSIPTotalCalls"), ("ZXTM-MIB-SMIv2", "virtualserverSIPRejectedRequests"), ("ZXTM-MIB-SMIv2", "virtualserverConnectionErrors"), ("ZXTM-MIB-SMIv2", "virtualserverConnectionFailures"), ("ZXTM-MIB-SMIv2", "virtualserverCertStatusRequests"), ("ZXTM-MIB-SMIv2", "virtualserverCertStatusResponses"), ("ZXTM-MIB-SMIv2", "virtualserverProcessingTimedOut"), ("ZXTM-MIB-SMIv2", "virtualserverTotalRequests"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTPRequests"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTP1Requests"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTP2Requests"), ("ZXTM-MIB-SMIv2", "virtualserverPktsIn"), ("ZXTM-MIB-SMIv2", "virtualserverPktsOut"), ("ZXTM-MIB-SMIv2", "virtualserverL4TCPConnectResets"), ("ZXTM-MIB-SMIv2", "virtualserverL4UDPUnreachables"), ("ZXTM-MIB-SMIv2", "virtualserverBwLimitPktsDrop"), ("ZXTM-MIB-SMIv2", "virtualserverBwLimitBytesDrop"), ("ZXTM-MIB-SMIv2", "poolNumber"), ("ZXTM-MIB-SMIv2", "poolName"), ("ZXTM-MIB-SMIv2", "poolAlgorithm"), ("ZXTM-MIB-SMIv2", "poolNodes"), ("ZXTM-MIB-SMIv2", "poolDraining"), ("ZXTM-MIB-SMIv2", "poolFailPool"), ("ZXTM-MIB-SMIv2", "poolBytesIn"), ("ZXTM-MIB-SMIv2", "poolBytesOut"), ("ZXTM-MIB-SMIv2", "poolTotalConn"), ("ZXTM-MIB-SMIv2", "poolPersistence"), ("ZXTM-MIB-SMIv2", "poolSessionMigrated"), ("ZXTM-MIB-SMIv2", "poolDisabled"), ("ZXTM-MIB-SMIv2", "poolState"), ("ZXTM-MIB-SMIv2", "poolConnsQueued"), ("ZXTM-MIB-SMIv2", "poolQueueTimeouts"), ("ZXTM-MIB-SMIv2", "poolMinQueueTime"), ("ZXTM-MIB-SMIv2", "poolMaxQueueTime"), ("ZXTM-MIB-SMIv2", "poolMeanQueueTime"), ("ZXTM-MIB-SMIv2", "poolBwLimitPktsDrop"), ("ZXTM-MIB-SMIv2", "poolBwLimitBytesDrop"), ("ZXTM-MIB-SMIv2", "nodeNumberInet46"), ("ZXTM-MIB-SMIv2", "nodeInet46AddressType"), ("ZXTM-MIB-SMIv2", "nodeInet46Address"), ("ZXTM-MIB-SMIv2", "nodeInet46Port"), ("ZXTM-MIB-SMIv2", "nodeInet46HostName"), ("ZXTM-MIB-SMIv2", "nodeInet46State"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesToNode"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesFromNode"), ("ZXTM-MIB-SMIv2", "nodeInet46CurrentRequests"), ("ZXTM-MIB-SMIv2", "nodeInet46TotalConn"), ("ZXTM-MIB-SMIv2", "nodeInet46PooledConn"), ("ZXTM-MIB-SMIv2", "nodeInet46Failures"), ("ZXTM-MIB-SMIv2", "nodeInet46NewConn"), ("ZXTM-MIB-SMIv2", "nodeInet46Errors"), ("ZXTM-MIB-SMIv2", "nodeInet46ResponseMin"), ("ZXTM-MIB-SMIv2", "nodeInet46ResponseMax"), ("ZXTM-MIB-SMIv2", "nodeInet46ResponseMean"), ("ZXTM-MIB-SMIv2", "nodeInet46IdleConns"), ("ZXTM-MIB-SMIv2", "nodeInet46CurrentConn"), ("ZXTM-MIB-SMIv2", "perPoolNodeNumber"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeHostName"), ("ZXTM-MIB-SMIv2", "perPoolNodeState"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesToNode"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesFromNode"), ("ZXTM-MIB-SMIv2", "perPoolNodePktsToNode"), ("ZXTM-MIB-SMIv2", "perPoolNodePktsFromNode"), ("ZXTM-MIB-SMIv2", "perPoolNodeL4StatelessBuckets"), ("ZXTM-MIB-SMIv2", "perPoolNodeCurrentRequests"), ("ZXTM-MIB-SMIv2", "perPoolNodeTotalConn"), ("ZXTM-MIB-SMIv2", "perPoolNodePooledConn"), ("ZXTM-MIB-SMIv2", "perPoolNodeFailures"), ("ZXTM-MIB-SMIv2", "perPoolNodeNewConn"), ("ZXTM-MIB-SMIv2", "perPoolNodeErrors"), ("ZXTM-MIB-SMIv2", "perPoolNodeResponseMin"), ("ZXTM-MIB-SMIv2", "perPoolNodeResponseMax"), ("ZXTM-MIB-SMIv2", "perPoolNodeResponseMean"), ("ZXTM-MIB-SMIv2", "perPoolNodeIdleConns"), ("ZXTM-MIB-SMIv2", "perPoolNodeCurrentConn"), ("ZXTM-MIB-SMIv2", "trafficIPGatewayPingRequests"), ("ZXTM-MIB-SMIv2", "trafficIPGatewayPingResponses"), ("ZXTM-MIB-SMIv2", "trafficIPNodePingRequests"), ("ZXTM-MIB-SMIv2", "trafficIPNodePingResponses"), ("ZXTM-MIB-SMIv2", "trafficIPPingResponseErrors"), ("ZXTM-MIB-SMIv2", "trafficIPARPMessage"), ("ZXTM-MIB-SMIv2", "trafficIPNumberInet46"), ("ZXTM-MIB-SMIv2", "trafficIPNumberRaisedInet46"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"), ("ZXTM-MIB-SMIv2", "trafficIPInet46State"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Time"), ("ZXTM-MIB-SMIv2", "serviceProtNumber"), ("ZXTM-MIB-SMIv2", "serviceProtName"), ("ZXTM-MIB-SMIv2", "serviceProtTotalRefusal"), ("ZXTM-MIB-SMIv2", "serviceProtLastRefusalTime"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalIP"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalConc1IP"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalConc10IP"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalConnRate"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalRFC2396"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalSize"), ("ZXTM-MIB-SMIv2", "serviceProtRefusalBinary"), ("ZXTM-MIB-SMIv2", "serviceLevelNumber"), ("ZXTM-MIB-SMIv2", "serviceLevelName"), ("ZXTM-MIB-SMIv2", "serviceLevelTotalConn"), ("ZXTM-MIB-SMIv2", "serviceLevelTotalNonConf"), ("ZXTM-MIB-SMIv2", "serviceLevelResponseMin"), ("ZXTM-MIB-SMIv2", "serviceLevelResponseMax"), ("ZXTM-MIB-SMIv2", "serviceLevelResponseMean"), ("ZXTM-MIB-SMIv2", "serviceLevelIsOK"), ("ZXTM-MIB-SMIv2", "serviceLevelConforming"), ("ZXTM-MIB-SMIv2", "serviceLevelCurrentConns"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46SLMName"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodeAddressType"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodeAddress"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodePort"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46TotalConn"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46TotalNonConf"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46ResponseMin"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46ResponseMax"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46ResponseMean"), ("ZXTM-MIB-SMIv2", "bandwidthClassNumber"), ("ZXTM-MIB-SMIv2", "bandwidthClassName"), ("ZXTM-MIB-SMIv2", "bandwidthClassMaximum"), ("ZXTM-MIB-SMIv2", "bandwidthClassGuarantee"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesOut"), ("ZXTM-MIB-SMIv2", "bandwidthClassPktsDrop"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesDrop"), ("ZXTM-MIB-SMIv2", "rateClassNumber"), ("ZXTM-MIB-SMIv2", "rateClassName"), ("ZXTM-MIB-SMIv2", "rateClassMaxRatePerMin"), ("ZXTM-MIB-SMIv2", "rateClassMaxRatePerSec"), ("ZXTM-MIB-SMIv2", "rateClassQueueLength"), ("ZXTM-MIB-SMIv2", "rateClassCurrentRate"), ("ZXTM-MIB-SMIv2", "rateClassDropped"), ("ZXTM-MIB-SMIv2", "rateClassConnsEntered"), ("ZXTM-MIB-SMIv2", "rateClassConnsLeft"), ("ZXTM-MIB-SMIv2", "userCounterNumber"), ("ZXTM-MIB-SMIv2", "userCounterName"), ("ZXTM-MIB-SMIv2", "userCounterValue"), ("ZXTM-MIB-SMIv2", "userCounter64Name"), ("ZXTM-MIB-SMIv2", "userCounter64Value"), ("ZXTM-MIB-SMIv2", "interfaceNumber"), ("ZXTM-MIB-SMIv2", "interfaceName"), ("ZXTM-MIB-SMIv2", "interfaceRxPackets"), ("ZXTM-MIB-SMIv2", "interfaceTxPackets"), ("ZXTM-MIB-SMIv2", "interfaceRxErrors"), ("ZXTM-MIB-SMIv2", "interfaceTxErrors"), ("ZXTM-MIB-SMIv2", "interfaceCollisions"), ("ZXTM-MIB-SMIv2", "interfaceRxBytes"), ("ZXTM-MIB-SMIv2", "interfaceTxBytes"), ("ZXTM-MIB-SMIv2", "webCacheHits"), ("ZXTM-MIB-SMIv2", "webCacheMisses"), ("ZXTM-MIB-SMIv2", "webCacheLookups"), ("ZXTM-MIB-SMIv2", "webCacheMemUsed"), ("ZXTM-MIB-SMIv2", "webCacheMemMaximum"), ("ZXTM-MIB-SMIv2", "webCacheHitRate"), ("ZXTM-MIB-SMIv2", "webCacheEntries"), ("ZXTM-MIB-SMIv2", "webCacheMaxEntries"), ("ZXTM-MIB-SMIv2", "webCacheOldest"), ("ZXTM-MIB-SMIv2", "webCacheURLStoreAllocated"), ("ZXTM-MIB-SMIv2", "webCacheURLStoreFree"), ("ZXTM-MIB-SMIv2", "webCacheURLStoreSize"), ("ZXTM-MIB-SMIv2", "webCacheURLStoreTotalAllocations"), ("ZXTM-MIB-SMIv2", "webCacheURLStoreTotalFailures"), ("ZXTM-MIB-SMIv2", "webCacheURLStoreTotalFrees"), ("ZXTM-MIB-SMIv2", "sslCacheHits"), ("ZXTM-MIB-SMIv2", "sslCacheMisses"), ("ZXTM-MIB-SMIv2", "sslCacheLookups"), ("ZXTM-MIB-SMIv2", "sslCacheHitRate"), ("ZXTM-MIB-SMIv2", "sslCacheEntries")], [("ZXTM-MIB-SMIv2", "sslCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "sslCacheOldest"), ("ZXTM-MIB-SMIv2", "aspSessionCacheHits"), ("ZXTM-MIB-SMIv2", "aspSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "aspSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "aspSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "aspSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "aspSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "aspSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "ipSessionCacheHits"), ("ZXTM-MIB-SMIv2", "ipSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "ipSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "ipSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "ipSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "ipSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "ipSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheHits"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "j2eeSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "uniSessionCacheHits"), ("ZXTM-MIB-SMIv2", "uniSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "uniSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "uniSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "uniSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "uniSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "uniSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "sslSessionCacheHits"), ("ZXTM-MIB-SMIv2", "sslSessionCacheMisses"), ("ZXTM-MIB-SMIv2", "sslSessionCacheLookups"), ("ZXTM-MIB-SMIv2", "sslSessionCacheHitRate"), ("ZXTM-MIB-SMIv2", "sslSessionCacheEntries"), ("ZXTM-MIB-SMIv2", "sslSessionCacheEntriesMax"), ("ZXTM-MIB-SMIv2", "sslSessionCacheOldest"), ("ZXTM-MIB-SMIv2", "ruleNumber"), ("ZXTM-MIB-SMIv2", "ruleName"), ("ZXTM-MIB-SMIv2", "ruleExecutions"), ("ZXTM-MIB-SMIv2", "ruleAborts"), ("ZXTM-MIB-SMIv2", "ruleResponds"), ("ZXTM-MIB-SMIv2", "rulePoolSelect"), ("ZXTM-MIB-SMIv2", "ruleRetries"), ("ZXTM-MIB-SMIv2", "ruleDiscards"), ("ZXTM-MIB-SMIv2", "ruleExecutionTimeWarnings"), ("ZXTM-MIB-SMIv2", "monitorNumber"), ("ZXTM-MIB-SMIv2", "monitorName"), ("ZXTM-MIB-SMIv2", "licensekeyNumber"), ("ZXTM-MIB-SMIv2", "licensekeyName"), ("ZXTM-MIB-SMIv2", "zxtmNumber"), ("ZXTM-MIB-SMIv2", "zxtmName"), ("ZXTM-MIB-SMIv2", "glbServiceNumber"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "glbServiceResponses"), ("ZXTM-MIB-SMIv2", "glbServiceUnmodified"), ("ZXTM-MIB-SMIv2", "glbServiceDiscarded"), ("ZXTM-MIB-SMIv2", "perLocationServiceLocationName"), ("ZXTM-MIB-SMIv2", "perLocationServiceLocationCode"), ("ZXTM-MIB-SMIv2", "perLocationServiceName"), ("ZXTM-MIB-SMIv2", "perLocationServiceDraining"), ("ZXTM-MIB-SMIv2", "perLocationServiceState"), ("ZXTM-MIB-SMIv2", "perLocationServiceFrontendState"), ("ZXTM-MIB-SMIv2", "perLocationServiceMonitorState"), ("ZXTM-MIB-SMIv2", "perLocationServiceLoad"), ("ZXTM-MIB-SMIv2", "perLocationServiceResponses"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "locationCode"), ("ZXTM-MIB-SMIv2", "locationLoad"), ("ZXTM-MIB-SMIv2", "locationResponses"), ("ZXTM-MIB-SMIv2", "eventNumber"), ("ZXTM-MIB-SMIv2", "eventName"), ("ZXTM-MIB-SMIv2", "eventsMatched"), ("ZXTM-MIB-SMIv2", "actionNumber"), ("ZXTM-MIB-SMIv2", "actionName"), ("ZXTM-MIB-SMIv2", "actionsProcessed"), ("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "customEventName"), ("ZXTM-MIB-SMIv2", "cloudcredentialsClassNumber"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"), ("ZXTM-MIB-SMIv2", "cloudcredentialsStatusRequests"), ("ZXTM-MIB-SMIv2", "cloudcredentialsNodeCreations"), ("ZXTM-MIB-SMIv2", "cloudcredentialsNodeDeletions"), ("ZXTM-MIB-SMIv2", "domainName"), ("ZXTM-MIB-SMIv2", "listenIPAddressType"), ("ZXTM-MIB-SMIv2", "listenIPAddress"), ("ZXTM-MIB-SMIv2", "listenIPBytesIn"), ("ZXTM-MIB-SMIv2", "listenIPBytesOut"), ("ZXTM-MIB-SMIv2", "listenIPCurrentConn"), ("ZXTM-MIB-SMIv2", "listenIPTotalRequests"), ("ZXTM-MIB-SMIv2", "listenIPMaxConn"), ("ZXTM-MIB-SMIv2", "hourlyPeakBytesInPerSecond"), ("ZXTM-MIB-SMIv2", "hourlyPeakBytesOutPerSecond"), ("ZXTM-MIB-SMIv2", "hourlyPeakRequestsPerSecond"), ("ZXTM-MIB-SMIv2", "hourlyPeakSSLConnectionsPerSecond"), ("ZXTM-MIB-SMIv2", "numberSNMPGetBulkRequests"), ("ZXTM-MIB-SMIv2", "authenticatorNumber"), ("ZXTM-MIB-SMIv2", "authenticatorName"), ("ZXTM-MIB-SMIv2", "authenticatorRequests"), ("ZXTM-MIB-SMIv2", "authenticatorPasses"), ("ZXTM-MIB-SMIv2", "authenticatorFails"), ("ZXTM-MIB-SMIv2", "authenticatorErrors"), ("ZXTM-MIB-SMIv2", "steelheadNumber"), ("ZXTM-MIB-SMIv2", "steelheadName"), ("ZXTM-MIB-SMIv2", "steelheadOptimized"), ("ZXTM-MIB-SMIv2", "virtualserverCertStatusRequests"), ("ZXTM-MIB-SMIv2", "virtualserverCertStatusResponses"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingCacheCount"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingCount"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingSuccessCount"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingFailureCount"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingGoodCount"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingRevokedCount"), ("ZXTM-MIB-SMIv2", "sslOcspStaplingUnknownCount"), ("ZXTM-MIB-SMIv2", "sslCipherDSASigns"), ("ZXTM-MIB-SMIv2", "sslCipherDSAVerifies"), ("ZXTM-MIB-SMIv2", "sslHandshakeTLSv12"), ("ZXTM-MIB-SMIv2", "sslCipherDHGenerates"), ("ZXTM-MIB-SMIv2", "sslCipherDHAgreements"), ("ZXTM-MIB-SMIv2", "sslCipherAESGCMEncrypts"), ("ZXTM-MIB-SMIv2", "sslCipherAESGCMDecrypts"), ("ZXTM-MIB-SMIv2", "sslCipherECDHGenerates"), ("ZXTM-MIB-SMIv2", "sslCipherECDHAgreements"), ("ZXTM-MIB-SMIv2", "sslCipherECDSASigns"), ("ZXTM-MIB-SMIv2", "sslCipherECDSAVerifies"), ("ZXTM-MIB-SMIv2", "dataPlaneAccelCoreNumber"), ("ZXTM-MIB-SMIv2", "coreId"), ("ZXTM-MIB-SMIv2", "coreUtilizationPercent")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here!
        mainGroup = mainGroup.setObjects(*_mainGroup_obj)
    else:
        mainGroup = mainGroup.setObjects(*_mainGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mainGroup = mainGroup.setStatus('current')
if mibBuilder.loadTexts: mainGroup.setDescription('Main conformance group')
deprecatedGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 2)).setObjects(("ZXTM-MIB-SMIv2", "sslSessionIDDiskCacheHit"), ("ZXTM-MIB-SMIv2", "sslSessionIDDiskCacheMiss"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    deprecatedGroup = deprecatedGroup.setStatus('deprecated')
if mibBuilder.loadTexts: deprecatedGroup.setDescription('Deprecated objects')
obsoleteGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 3)).setObjects(("ZXTM-MIB-SMIv2", "nodeNumber"), ("ZXTM-MIB-SMIv2", "nodeIPAddress"), ("ZXTM-MIB-SMIv2", "nodePort"), ("ZXTM-MIB-SMIv2", "nodeHostName"), ("ZXTM-MIB-SMIv2", "nodeState"), ("ZXTM-MIB-SMIv2", "nodeBytesToNodeLo"), ("ZXTM-MIB-SMIv2", "nodeBytesToNodeHi"), ("ZXTM-MIB-SMIv2", "nodeBytesFromNodeLo"), ("ZXTM-MIB-SMIv2", "nodeBytesFromNodeHi"), ("ZXTM-MIB-SMIv2", "nodeCurrentRequests"), ("ZXTM-MIB-SMIv2", "nodeTotalConn"), ("ZXTM-MIB-SMIv2", "nodePooledConn"), ("ZXTM-MIB-SMIv2", "nodeFailures"), ("ZXTM-MIB-SMIv2", "nodeNewConn"), ("ZXTM-MIB-SMIv2", "nodeErrors"), ("ZXTM-MIB-SMIv2", "nodeResponseMin"), ("ZXTM-MIB-SMIv2", "nodeResponseMax"), ("ZXTM-MIB-SMIv2", "nodeResponseMean"), ("ZXTM-MIB-SMIv2", "nodeCurrentConn"), ("ZXTM-MIB-SMIv2", "trafficIPNumber"), ("ZXTM-MIB-SMIv2", "trafficIPNumberRaised"), ("ZXTM-MIB-SMIv2", "trafficIPAddress"), ("ZXTM-MIB-SMIv2", "trafficIPTime"), ("ZXTM-MIB-SMIv2", "trafficIPState"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelSLMName"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelNodeIPAddr"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelNodePort"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelTotalConn"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelTotalNonConf"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelResponseMin"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelResponseMax"), ("ZXTM-MIB-SMIv2", "perNodeServiceLevelResponseMean"), ("ZXTM-MIB-SMIv2", "totalBytesInLo"), ("ZXTM-MIB-SMIv2", "totalBytesInHi"), ("ZXTM-MIB-SMIv2", "totalBytesOutLo"), ("ZXTM-MIB-SMIv2", "totalBytesOutHi"), ("ZXTM-MIB-SMIv2", "virtualserverBytesInLo"), ("ZXTM-MIB-SMIv2", "virtualserverBytesInHi"), ("ZXTM-MIB-SMIv2", "virtualserverBytesOutLo"), ("ZXTM-MIB-SMIv2", "virtualserverBytesOutHi"), ("ZXTM-MIB-SMIv2", "virtualserverPktsInLo"), ("ZXTM-MIB-SMIv2", "virtualserverPktsInHi"), ("ZXTM-MIB-SMIv2", "virtualserverPktsOutLo"), ("ZXTM-MIB-SMIv2", "virtualserverPktsOutHi"), ("ZXTM-MIB-SMIv2", "virtualserverGzipBytesSavedLo"), ("ZXTM-MIB-SMIv2", "virtualserverGzipBytesSavedHi"), ("ZXTM-MIB-SMIv2", "virtualserverTotalConn"), ("ZXTM-MIB-SMIv2", "virtualserverTotalRequestsLo"), ("ZXTM-MIB-SMIv2", "virtualserverTotalRequestsHi"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTPRequestsLo"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTPRequestsHi"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTP1RequestsLo"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTP1RequestsHi"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTP2RequestsLo"), ("ZXTM-MIB-SMIv2", "virtualserverTotalHTTP2RequestsHi"), ("ZXTM-MIB-SMIv2", "virtualserverBwLimitPktsDropLo"), ("ZXTM-MIB-SMIv2", "virtualserverBwLimitPktsDropHi"), ("ZXTM-MIB-SMIv2", "virtualserverBwLimitBytesDropLo"), ("ZXTM-MIB-SMIv2", "virtualserverBwLimitBytesDropHi"), ("ZXTM-MIB-SMIv2", "poolBytesInLo"), ("ZXTM-MIB-SMIv2", "poolBytesInHi"), ("ZXTM-MIB-SMIv2", "poolBytesOutLo"), ("ZXTM-MIB-SMIv2", "poolBytesOutHi"), ("ZXTM-MIB-SMIv2", "poolBwLimitPktsDropLo"), ("ZXTM-MIB-SMIv2", "poolBwLimitPktsDropHi"), ("ZXTM-MIB-SMIv2", "poolBwLimitBytesDropLo"), ("ZXTM-MIB-SMIv2", "poolBwLimitBytesDropHi"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesToNodeLo"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesToNodeHi"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesFromNodeLo"), ("ZXTM-MIB-SMIv2", "nodeInet46BytesFromNodeHi"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesToNodeLo"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesToNodeHi"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesFromNodeLo"), ("ZXTM-MIB-SMIv2", "perPoolNodeBytesFromNodeHi"), ("ZXTM-MIB-SMIv2", "perPoolNodePktsToNodeLo"), ("ZXTM-MIB-SMIv2", "perPoolNodePktsToNodeHi"), ("ZXTM-MIB-SMIv2", "perPoolNodePktsFromNodeLo"), ("ZXTM-MIB-SMIv2", "perPoolNodePktsFromNodeHi"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesOutLo"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesOutHi"), ("ZXTM-MIB-SMIv2", "bandwidthClassPktsDropLo"), ("ZXTM-MIB-SMIv2", "bandwidthClassPktsDropHi"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesDropLo"), ("ZXTM-MIB-SMIv2", "bandwidthClassBytesDropHi"), ("ZXTM-MIB-SMIv2", "interfaceRxBytesLo"), ("ZXTM-MIB-SMIv2", "interfaceRxBytesHi"), ("ZXTM-MIB-SMIv2", "interfaceTxBytesLo"), ("ZXTM-MIB-SMIv2", "interfaceTxBytesHi"), ("ZXTM-MIB-SMIv2", "webCacheHitsLo"), ("ZXTM-MIB-SMIv2", "webCacheHitsHi"), ("ZXTM-MIB-SMIv2", "webCacheMissesLo"), ("ZXTM-MIB-SMIv2", "webCacheMissesHi"), ("ZXTM-MIB-SMIv2", "webCacheLookupsLo"), ("ZXTM-MIB-SMIv2", "webCacheLookupsHi"), ("ZXTM-MIB-SMIv2", "listenIPBytesInLo"), ("ZXTM-MIB-SMIv2", "listenIPBytesInHi"), ("ZXTM-MIB-SMIv2", "listenIPBytesOutLo"), ("ZXTM-MIB-SMIv2", "listenIPBytesOutHi"), ("ZXTM-MIB-SMIv2", "listenIPTotalConn"), ("ZXTM-MIB-SMIv2", "listenIPTotalRequestsLo"), ("ZXTM-MIB-SMIv2", "listenIPTotalRequestsHi"), ("ZXTM-MIB-SMIv2", "sslHandshakeSSLv2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    obsoleteGroup = obsoleteGroup.setStatus('obsolete')
if mibBuilder.loadTexts: obsoleteGroup.setDescription('Deprecated objects')
notificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 4))
for _notificationGroup_obj in [[("ZXTM-MIB-SMIv2", "testaction"), ("ZXTM-MIB-SMIv2", "running"), ("ZXTM-MIB-SMIv2", "fewfreefds"), ("ZXTM-MIB-SMIv2", "restartrequired"), ("ZXTM-MIB-SMIv2", "upgradereboot"), ("ZXTM-MIB-SMIv2", "sysctlreboot"), ("ZXTM-MIB-SMIv2", "upgraderestart"), ("ZXTM-MIB-SMIv2", "unspecifiedreboot"), ("ZXTM-MIB-SMIv2", "timemovedback"), ("ZXTM-MIB-SMIv2", "sslfail"), ("ZXTM-MIB-SMIv2", "appliance"), ("ZXTM-MIB-SMIv2", "zxtmswerror"), ("ZXTM-MIB-SMIv2", "customevent"), ("ZXTM-MIB-SMIv2", "versionmismatch"), ("ZXTM-MIB-SMIv2", "autherror"), ("ZXTM-MIB-SMIv2", "machineok"), ("ZXTM-MIB-SMIv2", "machinetimeout"), ("ZXTM-MIB-SMIv2", "machinefail"), ("ZXTM-MIB-SMIv2", "allmachinesok"), ("ZXTM-MIB-SMIv2", "flipperbackendsworking"), ("ZXTM-MIB-SMIv2", "flipperfrontendsworking"), ("ZXTM-MIB-SMIv2", "pingbackendfail"), ("ZXTM-MIB-SMIv2", "pingfrontendfail"), ("ZXTM-MIB-SMIv2", "pinggwfail"), ("ZXTM-MIB-SMIv2", "statebaddata"), ("ZXTM-MIB-SMIv2", "stateconnfail"), ("ZXTM-MIB-SMIv2", "stateok"), ("ZXTM-MIB-SMIv2", "statereadfail"), ("ZXTM-MIB-SMIv2", "statetimeout"), ("ZXTM-MIB-SMIv2", "stateunexpected"), ("ZXTM-MIB-SMIv2", "statewritefail"), ("ZXTM-MIB-SMIv2", "activatealldead"), ("ZXTM-MIB-SMIv2", "machinerecovered"), ("ZXTM-MIB-SMIv2", "flipperrecovered"), ("ZXTM-MIB-SMIv2", "activatedautomatically"), ("ZXTM-MIB-SMIv2", "zclustermoderr"), ("ZXTM-MIB-SMIv2", "ec2flipperraiselocalworking"), ("ZXTM-MIB-SMIv2", "ec2flipperraiseothersdead"), ("ZXTM-MIB-SMIv2", "ec2iperr"), ("ZXTM-MIB-SMIv2", "dropec2ipwarn"), ("ZXTM-MIB-SMIv2", "ec2nopublicip"), ("ZXTM-MIB-SMIv2", "ec2nosecondaryprivateip"), ("ZXTM-MIB-SMIv2", "ec2dataretrievalfailed"), ("ZXTM-MIB-SMIv2", "ec2dataretrievalsuccessful"), ("ZXTM-MIB-SMIv2", "ec2initialized"), ("ZXTM-MIB-SMIv2", "gcedataretrievalfailed"), ("ZXTM-MIB-SMIv2", "gcedataretrievalsuccessful"), ("ZXTM-MIB-SMIv2", "multihostload"), ("ZXTM-MIB-SMIv2", "sslhwfail"), ("ZXTM-MIB-SMIv2", "sslhwrestart"), ("ZXTM-MIB-SMIv2", "sslhwstart"), ("ZXTM-MIB-SMIv2", "confdel"), ("ZXTM-MIB-SMIv2", "confmod"), ("ZXTM-MIB-SMIv2", "confadd"), ("ZXTM-MIB-SMIv2", "confok"), ("ZXTM-MIB-SMIv2", "confreptimeout"), ("ZXTM-MIB-SMIv2", "confrepfailed"), ("ZXTM-MIB-SMIv2", "javadied"), ("ZXTM-MIB-SMIv2", "javastop"), ("ZXTM-MIB-SMIv2", "javastartfail"), ("ZXTM-MIB-SMIv2", "javaterminatefail"), ("ZXTM-MIB-SMIv2", "javanotfound"), ("ZXTM-MIB-SMIv2", "javastarted"), ("ZXTM-MIB-SMIv2", "servleterror"), ("ZXTM-MIB-SMIv2", "monitorfail"), ("ZXTM-MIB-SMIv2", "monitorok"), ("ZXTM-MIB-SMIv2", "rulexmlerr"), ("ZXTM-MIB-SMIv2", "pooluseunknown"), ("ZXTM-MIB-SMIv2", "ruleabort"), ("ZXTM-MIB-SMIv2", "rulebufferlarge"), ("ZXTM-MIB-SMIv2", "rulebodycomperror"), ("ZXTM-MIB-SMIv2", "forwardproxybadhost"), ("ZXTM-MIB-SMIv2", "invalidemit"), ("ZXTM-MIB-SMIv2", "rulenopersistence"), ("ZXTM-MIB-SMIv2", "rulelogmsginfo"), ("ZXTM-MIB-SMIv2", "rulelogmsgwarn"), ("ZXTM-MIB-SMIv2", "rulelogmsgserious"), ("ZXTM-MIB-SMIv2", "norate"), ("ZXTM-MIB-SMIv2", "poolactivenodesunknown"), ("ZXTM-MIB-SMIv2", "datastorefull"), ("ZXTM-MIB-SMIv2", "ruleoverrun"), ("ZXTM-MIB-SMIv2", "rulestreamerrortoomuch"), ("ZXTM-MIB-SMIv2", "rulestreamerrornotenough"), ("ZXTM-MIB-SMIv2", "rulestreamerrorprocessfailure"), ("ZXTM-MIB-SMIv2", "rulestreamerrornotstarted"), ("ZXTM-MIB-SMIv2", "rulestreamerrornotfinished"), ("ZXTM-MIB-SMIv2", "rulestreamerrorinternal"), ("ZXTM-MIB-SMIv2", "rulestreamerrorgetresponse"), ("ZXTM-MIB-SMIv2", "rulesinvalidrequestbody"), ("ZXTM-MIB-SMIv2", "serviceruleabort"), ("ZXTM-MIB-SMIv2", "servicerulelocunknown"), ("ZXTM-MIB-SMIv2", "servicerulelocnotconfigured"), ("ZXTM-MIB-SMIv2", "servicerulelocdead"), ("ZXTM-MIB-SMIv2", "expired"), ("ZXTM-MIB-SMIv2", "licensecorrupt"), ("ZXTM-MIB-SMIv2", "expiresoon"), ("ZXTM-MIB-SMIv2", "usinglicense"), ("ZXTM-MIB-SMIv2", "licenseclustertoobig"), ("ZXTM-MIB-SMIv2", "unlicensed"), ("ZXTM-MIB-SMIv2", "usingdevlicense"), ("ZXTM-MIB-SMIv2", "morememallowed"), ("ZXTM-MIB-SMIv2", "lessmemallowed"), ("ZXTM-MIB-SMIv2", "cachesizereduced"), ("ZXTM-MIB-SMIv2", "tpslimited"), ("ZXTM-MIB-SMIv2", "ssltpslimited"), ("ZXTM-MIB-SMIv2", "bwlimited"), ("ZXTM-MIB-SMIv2", "licensetoomanylocations"), ("ZXTM-MIB-SMIv2", "autoscalinglicenseerror"), ("ZXTM-MIB-SMIv2", "autoscalinglicenseenabled"), ("ZXTM-MIB-SMIv2", "autoscalinglicensedisabled"), ("ZXTM-MIB-SMIv2", "analyticslicenseenabled"), ("ZXTM-MIB-SMIv2", "analyticslicensedisabled"), ("ZXTM-MIB-SMIv2", "poolnonodes"), ("ZXTM-MIB-SMIv2", "poolok"), ("ZXTM-MIB-SMIv2", "pooldied"), ("ZXTM-MIB-SMIv2", "noderesolvefailure"), ("ZXTM-MIB-SMIv2", "noderesolvemultiple"), ("ZXTM-MIB-SMIv2", "nodeworking"), ("ZXTM-MIB-SMIv2", "nostarttls"), ("ZXTM-MIB-SMIv2", "nodefail"), ("ZXTM-MIB-SMIv2", "starttlsinvalid"), ("ZXTM-MIB-SMIv2", "ehloinvalid"), ("ZXTM-MIB-SMIv2", "usedcredsdeleted"), ("ZXTM-MIB-SMIv2", "autoscalestatusupdateerror"), ("ZXTM-MIB-SMIv2", "autoscaleresponseparseerror"), ("ZXTM-MIB-SMIv2", "autoscalingchangeprocessfailure"), ("ZXTM-MIB-SMIv2", "autoscalewrongimageid"), ("ZXTM-MIB-SMIv2", "autoscalewrongname"), ("ZXTM-MIB-SMIv2", "autoscalewrongsizeid"), ("ZXTM-MIB-SMIv2", "apistatusprocesshanging"), ("ZXTM-MIB-SMIv2", "autonodedestructioncomplete"), ("ZXTM-MIB-SMIv2", "autonodeexisted"), ("ZXTM-MIB-SMIv2", "autoscaledpooltoosmall"), ("ZXTM-MIB-SMIv2", "autoscaleinvalidargforcreatenode"), ("ZXTM-MIB-SMIv2", "autonodedisappeared"), ("ZXTM-MIB-SMIv2", "autonoderemoved"), ("ZXTM-MIB-SMIv2", "nameserverunavailable"), ("ZXTM-MIB-SMIv2", "nameserveravailable"), ("ZXTM-MIB-SMIv2", "autoscaleresolvefailure"), ("ZXTM-MIB-SMIv2", "autoscaledpoolrefractory"), ("ZXTM-MIB-SMIv2", "cannotshrinkemptypool"), ("ZXTM-MIB-SMIv2", "autoscalinghysteresiscantgrow"), ("ZXTM-MIB-SMIv2", "autonodecreationcomplete"), ("ZXTM-MIB-SMIv2", "autonodestatuschange"), ("ZXTM-MIB-SMIv2", "autoscalinghysteresiscantshrink"), ("ZXTM-MIB-SMIv2", "autoscalingpoolstatechange"), ("ZXTM-MIB-SMIv2", "autonodedestroyed"), ("ZXTM-MIB-SMIv2", "autonodecreationstarted"), ("ZXTM-MIB-SMIv2", "autoscaleinvalidargfordeletenode"), ("ZXTM-MIB-SMIv2", "autoscalinghitroof"), ("ZXTM-MIB-SMIv2", "autoscalinghitfloor"), ("ZXTM-MIB-SMIv2", "apichangeprocesshanging"), ("ZXTM-MIB-SMIv2", "autoscaledpooltoobig"), ("ZXTM-MIB-SMIv2", "autoscalingprocesstimedout"), ("ZXTM-MIB-SMIv2", "autoscalingdisabled"), ("ZXTM-MIB-SMIv2", "autoscalednodecontested"), ("ZXTM-MIB-SMIv2", "autoscalepoolconfupdate"), ("ZXTM-MIB-SMIv2", "flipperraiselocalworking"), ("ZXTM-MIB-SMIv2", "flipperraiseothersdead"), ("ZXTM-MIB-SMIv2", "flipperraiseosdrop"), ("ZXTM-MIB-SMIv2", "dropipinfo"), ("ZXTM-MIB-SMIv2", "dropipwarn"), ("ZXTM-MIB-SMIv2", "flipperdadreraise"), ("ZXTM-MIB-SMIv2", "flipperipexists"), ("ZXTM-MIB-SMIv2", "triggersummary"), ("ZXTM-MIB-SMIv2", "slmclasslimitexceeded"), ("ZXTM-MIB-SMIv2", "slmrecoveredwarn"), ("ZXTM-MIB-SMIv2", "slmrecoveredserious"), ("ZXTM-MIB-SMIv2", "slmfallenbelowwarn"), ("ZXTM-MIB-SMIv2", "slmfallenbelowserious"), ("ZXTM-MIB-SMIv2", "vscrloutofdate"), ("ZXTM-MIB-SMIv2", "vsstart"), ("ZXTM-MIB-SMIv2", "vsstop"), ("ZXTM-MIB-SMIv2", "privkeyok"), ("ZXTM-MIB-SMIv2", "ssldrop"), ("ZXTM-MIB-SMIv2", "vslogwritefail"), ("ZXTM-MIB-SMIv2", "vssslcertexpired"), ("ZXTM-MIB-SMIv2", "vssslcerttoexpire"), ("ZXTM-MIB-SMIv2", "vscacertexpired"), ("ZXTM-MIB-SMIv2", "vscacerttoexpire"), ("ZXTM-MIB-SMIv2", "glbmissingips"), ("ZXTM-MIB-SMIv2", "glbdeadlocmissingips"), ("ZXTM-MIB-SMIv2", "glbnolocations"), ("ZXTM-MIB-SMIv2", "locationmonitorok"), ("ZXTM-MIB-SMIv2", "locationmonitorfail"), ("ZXTM-MIB-SMIv2", "locationok"), ("ZXTM-MIB-SMIv2", "locationfail"), ("ZXTM-MIB-SMIv2", "locationsoapok"), ("ZXTM-MIB-SMIv2", "locationsoapfail"), ("ZXTM-MIB-SMIv2", "glbnewmaster"), ("ZXTM-MIB-SMIv2", "glblogwritefail"), ("ZXTM-MIB-SMIv2", "glbfailalter"), ("ZXTM-MIB-SMIv2", "glbservicedied"), ("ZXTM-MIB-SMIv2", "glbserviceok"), ("ZXTM-MIB-SMIv2", "locmovemachine"), ("ZXTM-MIB-SMIv2", "locempty"), ("ZXTM-MIB-SMIv2", "glbtoomanylocations"), ("ZXTM-MIB-SMIv2", "dnszonevalidate"), ("ZXTM-MIB-SMIv2", "dnszonecreaterecord"), ("ZXTM-MIB-SMIv2", "dnserroraddzone"), ("ZXTM-MIB-SMIv2", "dnsaddzone"), ("ZXTM-MIB-SMIv2", "dnszoneparse"), ("ZXTM-MIB-SMIv2", "dnszonedelete"), ("ZXTM-MIB-SMIv2", "dnserrordeletezone"), ("ZXTM-MIB-SMIv2", "maxclientbufferdrop"), ("ZXTM-MIB-SMIv2", "respcompfail"), ("ZXTM-MIB-SMIv2", "responsetoolarge"), ("ZXTM-MIB-SMIv2", "sipstreamnoports"), ("ZXTM-MIB-SMIv2", "rtspstreamnoports"), ("ZXTM-MIB-SMIv2", "geodataloadfail"), ("ZXTM-MIB-SMIv2", "poolpersistencemismatch"), ("ZXTM-MIB-SMIv2", "connerror"), ("ZXTM-MIB-SMIv2", "connfail"), ("ZXTM-MIB-SMIv2", "badcontentlen"), ("ZXTM-MIB-SMIv2", "logfiledeleted"), ("ZXTM-MIB-SMIv2", "license_graceperiodexpired"), ("ZXTM-MIB-SMIv2", "license_authorized"), ("ZXTM-MIB-SMIv2", "license_rejected_authorized"), ("ZXTM-MIB-SMIv2", "license_rejected_unauthorized"), ("ZXTM-MIB-SMIv2", "license_timedout_authorized"), ("ZXTM-MIB-SMIv2", "license_timedout_unauthorized"), ("ZXTM-MIB-SMIv2", "license_unauthorized"), ("ZXTM-MIB-SMIv2", "logdiskoverload"), ("ZXTM-MIB-SMIv2", "logdiskfull"), ("ZXTM-MIB-SMIv2", "aptimizeuseunknownprofile"), ("ZXTM-MIB-SMIv2", "aptimizedisabled"), ("ZXTM-MIB-SMIv2", "aptimizeuseunknownscope"), ("ZXTM-MIB-SMIv2", "sslhandshakemsgsizelimit"), ("ZXTM-MIB-SMIv2", "sslcrltoobig"), ("ZXTM-MIB-SMIv2", "childcommsfail"), ("ZXTM-MIB-SMIv2", "sslrehandshakemininterval"), ("ZXTM-MIB-SMIv2", "datalocalstorefull"), ("ZXTM-MIB-SMIv2", "fipsfailinit"), ("ZXTM-MIB-SMIv2", "fipsfailops"), ("ZXTM-MIB-SMIv2", "ocspstaplingfail"), ("ZXTM-MIB-SMIv2", "ocspstaplingnomem"), ("ZXTM-MIB-SMIv2", "ocspstaplingrevoked"), ("ZXTM-MIB-SMIv2", "ocspstaplingunknown"), ("ZXTM-MIB-SMIv2", "ocspstaplingunrevoked"), ("ZXTM-MIB-SMIv2", "flipperraiseremotedropped"), ("ZXTM-MIB-SMIv2", "autofailbacktimerstarted"), ("ZXTM-MIB-SMIv2", "autofailbacktimerstopped"), ("ZXTM-MIB-SMIv2", "autofailbackafterdelay"), ("ZXTM-MIB-SMIv2", "autofailbacktimercancelled"), ("ZXTM-MIB-SMIv2", "autoscalingresuscitatepool"), ("ZXTM-MIB-SMIv2", "license_rejected_unauthorized_ts"), ("ZXTM-MIB-SMIv2", "license_authorized_ts"), ("ZXTM-MIB-SMIv2", "license_rejected_authorized_ts"), ("ZXTM-MIB-SMIv2", "license_timedout_authorized_ts"), ("ZXTM-MIB-SMIv2", "license_timedout_unauthorized_ts"), ("ZXTM-MIB-SMIv2", "license_graceperiodexpired_ts"), ("ZXTM-MIB-SMIv2", "license_explicitlydisabled_ts"), ("ZXTM-MIB-SMIv2", "numnodes_exceeded"), ("ZXTM-MIB-SMIv2", "numpools_exceeded"), ("ZXTM-MIB-SMIv2", "numlocations_exceeded")], [("ZXTM-MIB-SMIv2", "numtipg_exceeded"), ("ZXTM-MIB-SMIv2", "zxtmhighload"), ("ZXTM-MIB-SMIv2", "clocknotmonotonic"), ("ZXTM-MIB-SMIv2", "clockjump"), ("ZXTM-MIB-SMIv2", "pingsendfail"), ("ZXTM-MIB-SMIv2", "autonodenopublicip"), ("ZXTM-MIB-SMIv2", "routingswoperational"), ("ZXTM-MIB-SMIv2", "routingswfailurelimitreached"), ("ZXTM-MIB-SMIv2", "routingswfailed"), ("ZXTM-MIB-SMIv2", "routingswstartfailed"), ("ZXTM-MIB-SMIv2", "appfirewallcontrolstarted"), ("ZXTM-MIB-SMIv2", "appfirewallcontrolstopped"), ("ZXTM-MIB-SMIv2", "appfirewallcontrolrestarted"), ("ZXTM-MIB-SMIv2", "appfirewallcontroltimeout"), ("ZXTM-MIB-SMIv2", "appfirewallcontrolerror"), ("ZXTM-MIB-SMIv2", "ospfneighborsok"), ("ZXTM-MIB-SMIv2", "ospfneighborsdegraded"), ("ZXTM-MIB-SMIv2", "ospfneighborsfailed"), ("ZXTM-MIB-SMIv2", "bgpneighborsok"), ("ZXTM-MIB-SMIv2", "bgpneighborsdegraded"), ("ZXTM-MIB-SMIv2", "bgpneighborsfailed"), ("ZXTM-MIB-SMIv2", "bgpnoneighbors"), ("ZXTM-MIB-SMIv2", "dnssecexpired"), ("ZXTM-MIB-SMIv2", "dnssecexpires"), ("ZXTM-MIB-SMIv2", "glbactivedcmismatch"), ("ZXTM-MIB-SMIv2", "locationdraining"), ("ZXTM-MIB-SMIv2", "locationnotdraining"), ("ZXTM-MIB-SMIv2", "locationdisabled"), ("ZXTM-MIB-SMIv2", "locationenabled"), ("ZXTM-MIB-SMIv2", "locationunavailable"), ("ZXTM-MIB-SMIv2", "locationavailable"), ("ZXTM-MIB-SMIv2", "glbmanualfailback"), ("ZXTM-MIB-SMIv2", "nodedrainingtodelete"), ("ZXTM-MIB-SMIv2", "nodedrainingtodeletetimeout"), ("ZXTM-MIB-SMIv2", "zxtmcpustarvation")]]:
    if getattr(mibBuilder, 'version', 0) < (4, 4, 2):
        # WARNING: leading objects get lost here! Upgrade your pysnmp version!
        notificationGroup = notificationGroup.setObjects(*_notificationGroup_obj)
    else:
        notificationGroup = notificationGroup.setObjects(*_notificationGroup_obj, **dict(append=True))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    notificationGroup = notificationGroup.setStatus('current')
if mibBuilder.loadTexts: notificationGroup.setDescription('Notification group')
obsoleteNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 5)).setObjects(("ZXTM-MIB-SMIv2", "ec2vpceipassocerr"), ("ZXTM-MIB-SMIv2", "ec2vpciderr"), ("ZXTM-MIB-SMIv2", "rebootrequired"), ("ZXTM-MIB-SMIv2", "dnszoneparsechild"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    obsoleteNotificationGroup = obsoleteNotificationGroup.setStatus('obsolete')
if mibBuilder.loadTexts: obsoleteNotificationGroup.setDescription('Obsolete notification group')
deprecatedNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 7146, 1, 2, 29, 6)).setObjects(("ZXTM-MIB-SMIv2", "hardware"), ("ZXTM-MIB-SMIv2", "childhung"), ("ZXTM-MIB-SMIv2", "childkilled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    deprecatedNotificationGroup = deprecatedNotificationGroup.setStatus('deprecated')
if mibBuilder.loadTexts: deprecatedNotificationGroup.setDescription('Deprecated notification group')
compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7146, 1, 2, 30, 1)).setObjects(("ZXTM-MIB-SMIv2", "mainGroup"), ("ZXTM-MIB-SMIv2", "notificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    compliance = compliance.setStatus('current')
if mibBuilder.loadTexts: compliance.setDescription('Compliance statement')
deprecatedCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7146, 1, 2, 30, 2)).setObjects(("ZXTM-MIB-SMIv2", "deprecatedGroup"), ("ZXTM-MIB-SMIv2", "deprecatedNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    deprecatedCompliance = deprecatedCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: deprecatedCompliance.setDescription('Compliance statement')
obsoleteCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 7146, 1, 2, 30, 3)).setObjects(("ZXTM-MIB-SMIv2", "obsoleteGroup"), ("ZXTM-MIB-SMIv2", "obsoleteNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    obsoleteCompliance = obsoleteCompliance.setStatus('obsolete')
if mibBuilder.loadTexts: obsoleteCompliance.setDescription('Compliance statement')
version = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: version.setStatus('current')
if mibBuilder.loadTexts: version.setDescription('The Brocade Virtual Traffic Manager version.')
numberChildProcesses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberChildProcesses.setStatus('current')
if mibBuilder.loadTexts: numberChildProcesses.setDescription('The number of traffic manager child processes.')
upTime = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: upTime.setStatus('current')
if mibBuilder.loadTexts: upTime.setDescription('The time (in hundredths of a second) that vTM software has been operational for (this value will wrap if it has been running for more than 497 days).')
timeLastConfigUpdate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: timeLastConfigUpdate.setStatus('current')
if mibBuilder.loadTexts: timeLastConfigUpdate.setDescription('The time (in hundredths of a second) since the configuration of traffic manager was updated (this value will wrap if no configuration changes are made for 497 days).')
totalBytesIn = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 64), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesIn.setStatus('current')
if mibBuilder.loadTexts: totalBytesIn.setDescription('Bytes received by the traffic manager from clients.')
totalBytesInLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesInLo.setStatus('obsolete')
if mibBuilder.loadTexts: totalBytesInLo.setDescription('Bytes received by the traffic manager from clients ( low 32bits ).')
totalBytesInHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesInHi.setStatus('obsolete')
if mibBuilder.loadTexts: totalBytesInHi.setDescription('Bytes received by the traffic manager from clients ( high 32bits ).')
totalBytesOut = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 65), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesOut.setStatus('current')
if mibBuilder.loadTexts: totalBytesOut.setDescription('Bytes sent by the traffic manager to clients.')
totalBytesOutLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesOutLo.setStatus('obsolete')
if mibBuilder.loadTexts: totalBytesOutLo.setDescription('Bytes sent by the traffic manager to clients ( low 32bits ).')
totalBytesOutHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBytesOutHi.setStatus('obsolete')
if mibBuilder.loadTexts: totalBytesOutHi.setDescription('Bytes sent by the traffic manager to clients ( high 32bits ).')
totalCurrentConn = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalCurrentConn.setStatus('current')
if mibBuilder.loadTexts: totalCurrentConn.setDescription('Number of TCP connections currently established.')
totalConn = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalConn.setStatus('current')
if mibBuilder.loadTexts: totalConn.setDescription('Total number of TCP connections received.')
totalRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 127), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalRequests.setStatus('current')
if mibBuilder.loadTexts: totalRequests.setDescription('Total number of TCP requests received.')
totalTransactions = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 128), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalTransactions.setStatus('current')
if mibBuilder.loadTexts: totalTransactions.setDescription('Total number of TCP requests being processed, after applying TPS limits.')
hourlyPeakBytesInPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 129), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourlyPeakBytesInPerSecond.setStatus('current')
if mibBuilder.loadTexts: hourlyPeakBytesInPerSecond.setDescription('The peak bytes received from clients per second in the last hour.')
hourlyPeakBytesOutPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 130), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourlyPeakBytesOutPerSecond.setStatus('current')
if mibBuilder.loadTexts: hourlyPeakBytesOutPerSecond.setDescription('The peak bytes sent to clients per second in the last hour.')
hourlyPeakRequestsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 131), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourlyPeakRequestsPerSecond.setStatus('current')
if mibBuilder.loadTexts: hourlyPeakRequestsPerSecond.setDescription('The peak requests per second in the last hour.')
hourlyPeakSSLConnectionsPerSecond = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 132), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hourlyPeakSSLConnectionsPerSecond.setStatus('current')
if mibBuilder.loadTexts: hourlyPeakSSLConnectionsPerSecond.setDescription('The peak ssl connections per second in the last hour.')
numberDNSARequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberDNSARequests.setStatus('current')
if mibBuilder.loadTexts: numberDNSARequests.setDescription('Requests for DNS A records (hostname->IP address) made by the traffic manager.')
numberDNSACacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberDNSACacheHits.setStatus('current')
if mibBuilder.loadTexts: numberDNSACacheHits.setDescription("Requests for DNS A records resolved from the traffic manager's local cache.")
numberDNSPTRRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberDNSPTRRequests.setStatus('current')
if mibBuilder.loadTexts: numberDNSPTRRequests.setDescription('Requests for DNS PTR records (IP address->hostname) made by the traffic manager.')
numberDNSPTRCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberDNSPTRCacheHits.setStatus('current')
if mibBuilder.loadTexts: numberDNSPTRCacheHits.setDescription("Requests for DNS PTR records resolved from the traffic manager's local cache.")
numberSNMPUnauthorisedRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPUnauthorisedRequests.setStatus('current')
if mibBuilder.loadTexts: numberSNMPUnauthorisedRequests.setDescription('SNMP requests dropped due to access restrictions.')
numberSNMPBadRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPBadRequests.setStatus('current')
if mibBuilder.loadTexts: numberSNMPBadRequests.setDescription('Malformed SNMP requests received.')
numberSNMPGetRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPGetRequests.setStatus('current')
if mibBuilder.loadTexts: numberSNMPGetRequests.setDescription('SNMP GetRequests received.')
numberSNMPGetNextRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPGetNextRequests.setStatus('current')
if mibBuilder.loadTexts: numberSNMPGetNextRequests.setDescription('SNMP GetNextRequests received.')
numberSNMPGetBulkRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 66), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberSNMPGetBulkRequests.setStatus('current')
if mibBuilder.loadTexts: numberSNMPGetBulkRequests.setDescription('SNMP GetBulkRequests received.')
sslCipherEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherEncrypts.setStatus('current')
if mibBuilder.loadTexts: sslCipherEncrypts.setDescription('Bytes encrypted with a symmetric cipher.')
sslCipherDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDecrypts.setStatus('current')
if mibBuilder.loadTexts: sslCipherDecrypts.setDescription('Bytes decrypted with a symmetric cipher.')
sslCipherRC4Encrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRC4Encrypts.setStatus('current')
if mibBuilder.loadTexts: sslCipherRC4Encrypts.setDescription('Bytes encrypted with RC4.')
sslCipherRC4Decrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRC4Decrypts.setStatus('current')
if mibBuilder.loadTexts: sslCipherRC4Decrypts.setDescription('Bytes decrypted with RC4.')
sslCipherDESEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDESEncrypts.setStatus('current')
if mibBuilder.loadTexts: sslCipherDESEncrypts.setDescription('Bytes encrypted with DES.')
sslCipherDESDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDESDecrypts.setStatus('current')
if mibBuilder.loadTexts: sslCipherDESDecrypts.setDescription('Bytes decrypted with DES.')
sslCipher3DESEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipher3DESEncrypts.setStatus('current')
if mibBuilder.loadTexts: sslCipher3DESEncrypts.setDescription('Bytes encrypted with 3DES.')
sslCipher3DESDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipher3DESDecrypts.setStatus('current')
if mibBuilder.loadTexts: sslCipher3DESDecrypts.setDescription('Bytes decrypted with 3DES.')
sslCipherAESEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherAESEncrypts.setStatus('current')
if mibBuilder.loadTexts: sslCipherAESEncrypts.setDescription('Bytes encrypted with AES.')
sslCipherAESDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherAESDecrypts.setStatus('current')
if mibBuilder.loadTexts: sslCipherAESDecrypts.setDescription('Bytes decrypted with AES.')
sslCipherRSAEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRSAEncrypts.setStatus('current')
if mibBuilder.loadTexts: sslCipherRSAEncrypts.setDescription('Number of RSA encrypts.')
sslCipherRSADecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRSADecrypts.setStatus('current')
if mibBuilder.loadTexts: sslCipherRSADecrypts.setDescription('Number of RSA decrypts.')
sslCipherRSADecryptsExternal = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 31), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRSADecryptsExternal.setStatus('current')
if mibBuilder.loadTexts: sslCipherRSADecryptsExternal.setDescription('Number of external RSA decrypts.')
sslHandshakeSSLv2 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 32), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeSSLv2.setStatus('obsolete')
if mibBuilder.loadTexts: sslHandshakeSSLv2.setDescription('Formerly provided the number of SSLv2 handshakes, now deprecated.')
sslHandshakeSSLv3 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 33), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeSSLv3.setStatus('current')
if mibBuilder.loadTexts: sslHandshakeSSLv3.setDescription('Number of SSLv3 handshakes.')
sslHandshakeTLSv1 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeTLSv1.setStatus('current')
if mibBuilder.loadTexts: sslHandshakeTLSv1.setDescription('Number of TLSv1.0 handshakes.')
sslClientCertNotSent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientCertNotSent.setStatus('current')
if mibBuilder.loadTexts: sslClientCertNotSent.setDescription('Number of times a client certificate was required but not supplied.')
sslClientCertInvalid = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientCertInvalid.setStatus('current')
if mibBuilder.loadTexts: sslClientCertInvalid.setDescription('Number of times a client certificate was invalid.')
sslClientCertExpired = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientCertExpired.setStatus('current')
if mibBuilder.loadTexts: sslClientCertExpired.setDescription('Number of times a client certificate has expired.')
sslClientCertRevoked = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslClientCertRevoked.setStatus('current')
if mibBuilder.loadTexts: sslClientCertRevoked.setDescription('Number of times a client certificate was revoked.')
sslSessionIDMemCacheHit = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionIDMemCacheHit.setStatus('current')
if mibBuilder.loadTexts: sslSessionIDMemCacheHit.setDescription('Number of times the SSL session id was found in the cache and reused.')
sslSessionIDMemCacheMiss = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionIDMemCacheMiss.setStatus('current')
if mibBuilder.loadTexts: sslSessionIDMemCacheMiss.setDescription('Number of times the SSL session id was not found in the cache.')
sslSessionIDDiskCacheHit = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionIDDiskCacheHit.setStatus('deprecated')
if mibBuilder.loadTexts: sslSessionIDDiskCacheHit.setDescription('Number of times the SSL session id was found in the disk cache and reused (deprecated, will always return 0).')
sslSessionIDDiskCacheMiss = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionIDDiskCacheMiss.setStatus('deprecated')
if mibBuilder.loadTexts: sslSessionIDDiskCacheMiss.setDescription('Number of times the SSL session id was not found in the disk cache (deprecated, will always return 0).')
sslHandshakeTLSv11 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeTLSv11.setStatus('current')
if mibBuilder.loadTexts: sslHandshakeTLSv11.setDescription('Number of TLSv1.1 handshakes.')
sslConnections = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslConnections.setStatus('current')
if mibBuilder.loadTexts: sslConnections.setDescription('Number of SSL connections negotiated.')
sslCipherRSAEncryptsExternal = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherRSAEncryptsExternal.setStatus('current')
if mibBuilder.loadTexts: sslCipherRSAEncryptsExternal.setDescription('Number of external RSA encrypts.')
sslCipherDSASigns = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 67), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDSASigns.setStatus('current')
if mibBuilder.loadTexts: sslCipherDSASigns.setDescription('Number of DSA signing operations.')
sslCipherDSAVerifies = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 68), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDSAVerifies.setStatus('current')
if mibBuilder.loadTexts: sslCipherDSAVerifies.setDescription('Number of DSA verifications.')
sslHandshakeTLSv12 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 69), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslHandshakeTLSv12.setStatus('current')
if mibBuilder.loadTexts: sslHandshakeTLSv12.setDescription('Number of TLSv1.2 handshakes.')
sslCipherDHGenerates = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 70), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDHGenerates.setStatus('current')
if mibBuilder.loadTexts: sslCipherDHGenerates.setDescription('Number of Diffie Hellman keys generated.')
sslCipherDHAgreements = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 71), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherDHAgreements.setStatus('current')
if mibBuilder.loadTexts: sslCipherDHAgreements.setDescription('Number of Diffie Hellman key agreements.')
sslCipherAESGCMEncrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 72), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherAESGCMEncrypts.setStatus('current')
if mibBuilder.loadTexts: sslCipherAESGCMEncrypts.setDescription('Bytes encrypted with AES-GCM.')
sslCipherAESGCMDecrypts = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 73), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherAESGCMDecrypts.setStatus('current')
if mibBuilder.loadTexts: sslCipherAESGCMDecrypts.setDescription('Bytes decrypted with AES-GCM.')
sslCipherECDHGenerates = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 74), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherECDHGenerates.setStatus('current')
if mibBuilder.loadTexts: sslCipherECDHGenerates.setDescription('Number of Elliptic Curve Diffie Hellman keys generated.')
sslCipherECDHAgreements = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 75), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherECDHAgreements.setStatus('current')
if mibBuilder.loadTexts: sslCipherECDHAgreements.setDescription('Number of Elliptic Curve Diffie Hellman key agreements.')
sslCipherECDSASigns = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 76), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherECDSASigns.setStatus('current')
if mibBuilder.loadTexts: sslCipherECDSASigns.setDescription('Number of ECDSA signing operations.')
sslCipherECDSAVerifies = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 77), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCipherECDSAVerifies.setStatus('current')
if mibBuilder.loadTexts: sslCipherECDSAVerifies.setDescription('Number of ECDSA verifications.')
sysCPUIdlePercent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 45), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUIdlePercent.setStatus('current')
if mibBuilder.loadTexts: sysCPUIdlePercent.setDescription('Percentage of time that the CPUs are idle.')
sysCPUBusyPercent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 46), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUBusyPercent.setStatus('current')
if mibBuilder.loadTexts: sysCPUBusyPercent.setDescription('Percentage of time that the CPUs are busy.')
sysCPUUserBusyPercent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 47), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUUserBusyPercent.setStatus('current')
if mibBuilder.loadTexts: sysCPUUserBusyPercent.setDescription('Percentage of time that the CPUs are busy running user-space code.')
sysCPUSystemBusyPercent = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 48), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysCPUSystemBusyPercent.setStatus('current')
if mibBuilder.loadTexts: sysCPUSystemBusyPercent.setDescription('Percentage of time that the CPUs are busy running system code.')
sysFDsFree = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 49), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysFDsFree.setStatus('current')
if mibBuilder.loadTexts: sysFDsFree.setDescription('Number of free file descriptors.')
sysMemTotal = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 50), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemTotal.setStatus('current')
if mibBuilder.loadTexts: sysMemTotal.setDescription('Total memory (MBytes).')
sysMemFree = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 51), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemFree.setStatus('current')
if mibBuilder.loadTexts: sysMemFree.setDescription('Free memory (MBytes).')
sysMemInUse = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 52), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemInUse.setStatus('current')
if mibBuilder.loadTexts: sysMemInUse.setDescription('Memory used (MBytes).')
sysMemBuffered = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 53), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemBuffered.setStatus('current')
if mibBuilder.loadTexts: sysMemBuffered.setDescription('Buffer memory (MBytes).')
sysMemSwapped = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 54), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemSwapped.setStatus('current')
if mibBuilder.loadTexts: sysMemSwapped.setDescription('Amount of swap space in use (MBytes).')
sysMemSwapTotal = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 55), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysMemSwapTotal.setStatus('current')
if mibBuilder.loadTexts: sysMemSwapTotal.setDescription('Total swap space (MBytes).')
numIdleConnections = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 56), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numIdleConnections.setStatus('current')
if mibBuilder.loadTexts: numIdleConnections.setDescription('Total number of idle HTTP connections to all nodes (used for future HTTP requests).')
dataEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 58), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataEntries.setStatus('current')
if mibBuilder.loadTexts: dataEntries.setDescription('Number of entries in the TrafficScript data.get()/set() storage.')
dataMemoryUsage = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 59), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataMemoryUsage.setStatus('current')
if mibBuilder.loadTexts: dataMemoryUsage.setDescription('Number of bytes used in the TrafficScript data.get()/set() storage.')
eventsSeen = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventsSeen.setStatus('current')
if mibBuilder.loadTexts: eventsSeen.setDescription("Events seen by the traffic Manager's event handling process.")
totalDNSResponses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 61), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalDNSResponses.setStatus('current')
if mibBuilder.loadTexts: totalDNSResponses.setDescription('Total number of DNS response packets handled.')
totalBadDNSPackets = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBadDNSPackets.setStatus('current')
if mibBuilder.loadTexts: totalBadDNSPackets.setDescription('Total number of malformed DNS response packets encountered from the backend servers.')
totalBackendServerErrors = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: totalBackendServerErrors.setStatus('current')
if mibBuilder.loadTexts: totalBackendServerErrors.setDescription('Total errors returned from the backend servers.')
virtualserverNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverNumber.setStatus('current')
if mibBuilder.loadTexts: virtualserverNumber.setDescription('The number of virtual servers.')
virtualserverTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2), )
if mibBuilder.loadTexts: virtualserverTable.setStatus('current')
if mibBuilder.loadTexts: virtualserverTable.setDescription('This table gives information and statistics for the virtual servers the traffic manager is hosting.')
virtualserverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: virtualserverEntry.setStatus('current')
if mibBuilder.loadTexts: virtualserverEntry.setDescription('This defines a row in the virtual servers table.')
virtualserverName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverName.setStatus('current')
if mibBuilder.loadTexts: virtualserverName.setDescription('The name of the virtual server.')
virtualserverPort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPort.setStatus('current')
if mibBuilder.loadTexts: virtualserverPort.setDescription('The port the virtual server listens on.')
virtualserverProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28))).clone(namedValues=NamedValues(("http", 1), ("https", 2), ("ftp", 3), ("imaps", 4), ("imapv2", 5), ("imapv3", 6), ("imapv4", 7), ("pop3", 8), ("pop3s", 9), ("smtp", 10), ("ldap", 11), ("ldaps", 12), ("telnet", 13), ("sslforwarding", 14), ("udpstreaming", 15), ("udp", 16), ("dns", 17), ("genericserverfirst", 18), ("genericclientfirst", 19), ("dnstcp", 20), ("sipudp", 21), ("siptcp", 22), ("rtsp", 23), ("stream", 24), ("l4acceltcp", 25), ("l4acceludp", 26), ("l4accelgeneric", 27), ("l4accelstateless", 28)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverProtocol.setStatus('current')
if mibBuilder.loadTexts: virtualserverProtocol.setDescription('The protocol the virtual server is operating.')
virtualserverDefaultTrafficPool = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverDefaultTrafficPool.setStatus('current')
if mibBuilder.loadTexts: virtualserverDefaultTrafficPool.setDescription("The virtual server's default pool.")
virtualserverBytesInLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesInLo.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverBytesInLo.setDescription('Bytes received by this virtual server from clients ( low 32bits ).')
virtualserverBytesInHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesInHi.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverBytesInHi.setDescription('Bytes received by this virtual server from clients ( high 32bits ).')
virtualserverBytesOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesOutLo.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverBytesOutLo.setDescription('Bytes sent by this virtual server to clients ( low 32bits ).')
virtualserverBytesOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesOutHi.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverBytesOutHi.setDescription('Bytes sent by this virtual server to clients ( high 32bits ).')
virtualserverCurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverCurrentConn.setStatus('current')
if mibBuilder.loadTexts: virtualserverCurrentConn.setDescription('TCP connections currently established to this virtual server.')
virtualserverMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverMaxConn.setStatus('current')
if mibBuilder.loadTexts: virtualserverMaxConn.setDescription('Maximum number of simultaneous TCP connections this virtual server has processed at any one time.')
virtualserverTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalConn.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverTotalConn.setDescription('Formerly provided the number of requests received by this virtual server, now deprecated.')
virtualserverDiscard = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverDiscard.setStatus('current')
if mibBuilder.loadTexts: virtualserverDiscard.setDescription('Connections discarded by this virtual server.')
virtualserverDirectReplies = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverDirectReplies.setStatus('current')
if mibBuilder.loadTexts: virtualserverDirectReplies.setDescription('Direct replies from this virtual server, without forwarding to a node.')
virtualserverConnectTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverConnectTimedOut.setStatus('current')
if mibBuilder.loadTexts: virtualserverConnectTimedOut.setDescription("Connections closed by this virtual server because the 'connect_timeout' interval was exceeded.")
virtualserverDataTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverDataTimedOut.setStatus('current')
if mibBuilder.loadTexts: virtualserverDataTimedOut.setDescription("Connections closed by this virtual server because the 'timeout' interval was exceeded.")
virtualserverKeepaliveTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverKeepaliveTimedOut.setStatus('current')
if mibBuilder.loadTexts: virtualserverKeepaliveTimedOut.setDescription("Connections closed by this virtual server because the 'keepalive_timeout' interval was exceeded.")
virtualserverUdpTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverUdpTimedOut.setStatus('current')
if mibBuilder.loadTexts: virtualserverUdpTimedOut.setDescription("Connections closed by this virtual server because the 'udp_timeout' interval was exceeded.")
virtualserverTotalDgram = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalDgram.setStatus('current')
if mibBuilder.loadTexts: virtualserverTotalDgram.setDescription('UDP datagrams processed by this virtual server.')
virtualserverGzip = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverGzip.setStatus('current')
if mibBuilder.loadTexts: virtualserverGzip.setDescription('Responses which have been compressed by content compression.')
virtualserverGzipBytesSavedLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverGzipBytesSavedLo.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverGzipBytesSavedLo.setDescription('Bytes of network traffic saved by content compression ( low 32bits ).')
virtualserverGzipBytesSavedHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 21), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverGzipBytesSavedHi.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverGzipBytesSavedHi.setDescription('Bytes of network traffic saved by content compression ( high 32bits ).')
virtualserverHttpRewriteLocation = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpRewriteLocation.setStatus('current')
if mibBuilder.loadTexts: virtualserverHttpRewriteLocation.setDescription('HTTP Location headers, supplied by a node, that have been rewritten.')
virtualserverHttpRewriteCookie = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpRewriteCookie.setStatus('current')
if mibBuilder.loadTexts: virtualserverHttpRewriteCookie.setDescription('HTTP Set-Cookie headers, supplied by a node, that have been rewritten.')
virtualserverHttpCacheHits = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpCacheHits.setStatus('current')
if mibBuilder.loadTexts: virtualserverHttpCacheHits.setDescription('HTTP responses sent directly from the web cache by this virtual server.')
virtualserverHttpCacheLookups = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpCacheLookups.setStatus('current')
if mibBuilder.loadTexts: virtualserverHttpCacheLookups.setDescription('HTTP requests that are looked up in the web cache by this virtual server.')
virtualserverHttpCacheHitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverHttpCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: virtualserverHttpCacheHitRate.setDescription('Percentage hit rate of the web cache for this virtual server.')
virtualserverSIPTotalCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverSIPTotalCalls.setStatus('current')
if mibBuilder.loadTexts: virtualserverSIPTotalCalls.setDescription('Total number of SIP INVITE requests seen by this virtual server.')
virtualserverSIPRejectedRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverSIPRejectedRequests.setStatus('current')
if mibBuilder.loadTexts: virtualserverSIPRejectedRequests.setDescription('Number of SIP requests rejected due to them exceeding the maximum amount of memory allocated to the connection.')
virtualserverConnectionErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverConnectionErrors.setStatus('current')
if mibBuilder.loadTexts: virtualserverConnectionErrors.setDescription('Number of transaction or protocol errors in this virtual server.')
virtualserverConnectionFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 30), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverConnectionFailures.setStatus('current')
if mibBuilder.loadTexts: virtualserverConnectionFailures.setDescription('Number of connection failures in this virtual server.')
virtualserverBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 31), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesIn.setStatus('current')
if mibBuilder.loadTexts: virtualserverBytesIn.setDescription('Bytes received by this virtual server from clients.')
virtualserverBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 32), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBytesOut.setStatus('current')
if mibBuilder.loadTexts: virtualserverBytesOut.setDescription('Bytes sent by this virtual server to clients.')
virtualserverGzipBytesSaved = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 33), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverGzipBytesSaved.setStatus('current')
if mibBuilder.loadTexts: virtualserverGzipBytesSaved.setDescription('Bytes of network traffic saved by content compression.')
virtualserverCertStatusRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 34), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverCertStatusRequests.setStatus('current')
if mibBuilder.loadTexts: virtualserverCertStatusRequests.setDescription('Number of incoming TLS handshakes for this virtual server with certificate status requests.')
virtualserverCertStatusResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 35), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverCertStatusResponses.setStatus('current')
if mibBuilder.loadTexts: virtualserverCertStatusResponses.setDescription('Number of incoming TLS handshakes for this virtual server to which certificate status responses were attached.')
virtualserverMaxDurationTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 36), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverMaxDurationTimedOut.setStatus('current')
if mibBuilder.loadTexts: virtualserverMaxDurationTimedOut.setDescription("Connections closed by this virtual server because the 'max_transaction_duration' interval was exceeded.")
virtualserverProcessingTimedOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 37), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverProcessingTimedOut.setStatus('current')
if mibBuilder.loadTexts: virtualserverProcessingTimedOut.setDescription("Connections closed by this virtual server because the 'timeout' interval was exceeded while waiting for rules or external processing.")
virtualserverTotalRequestsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 38), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalRequestsLo.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverTotalRequestsLo.setDescription('Requests received by this virtual server.')
virtualserverTotalRequestsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 39), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalRequestsHi.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverTotalRequestsHi.setDescription('Requests received by this virtual server.')
virtualserverTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 40), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalRequests.setStatus('current')
if mibBuilder.loadTexts: virtualserverTotalRequests.setDescription('Requests received by this virtual server.')
virtualserverTotalHTTPRequestsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTPRequestsLo.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverTotalHTTPRequestsLo.setDescription('HTTP Requests received by this virtual server.')
virtualserverTotalHTTPRequestsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTPRequestsHi.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverTotalHTTPRequestsHi.setDescription('HTTP Requests received by this virtual server.')
virtualserverTotalHTTPRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 43), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTPRequests.setStatus('current')
if mibBuilder.loadTexts: virtualserverTotalHTTPRequests.setDescription('HTTP Requests received by this virtual server.')
virtualserverTotalHTTP1RequestsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 44), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTP1RequestsLo.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverTotalHTTP1RequestsLo.setDescription('HTTP/1.x Requests received by this virtual server.')
virtualserverTotalHTTP1RequestsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 45), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTP1RequestsHi.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverTotalHTTP1RequestsHi.setDescription('HTTP/1.x Requests received by this virtual server.')
virtualserverTotalHTTP1Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 46), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTP1Requests.setStatus('current')
if mibBuilder.loadTexts: virtualserverTotalHTTP1Requests.setDescription('HTTP/1.x Requests received by this virtual server.')
virtualserverTotalHTTP2RequestsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 47), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTP2RequestsLo.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverTotalHTTP2RequestsLo.setDescription('HTTP/2 Requests received by this virtual server.')
virtualserverTotalHTTP2RequestsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 48), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTP2RequestsHi.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverTotalHTTP2RequestsHi.setDescription('HTTP/2 Requests received by this virtual server.')
virtualserverTotalHTTP2Requests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 49), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverTotalHTTP2Requests.setStatus('current')
if mibBuilder.loadTexts: virtualserverTotalHTTP2Requests.setDescription('HTTP/2 Requests received by this virtual server.')
virtualserverPktsInLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 50), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPktsInLo.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverPktsInLo.setDescription('Packets received by this virtual server from clients ( low 32bits ).')
virtualserverPktsInHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 51), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPktsInHi.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverPktsInHi.setDescription('Packets received by this virtual server from clients ( high 32bits ).')
virtualserverPktsOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 52), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPktsOutLo.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverPktsOutLo.setDescription('Packets sent by this virtual server to clients ( low 32bits ).')
virtualserverPktsOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 53), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPktsOutHi.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverPktsOutHi.setDescription('Packets sent by this virtual server to clients ( high 32bits ).')
virtualserverPktsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 54), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPktsIn.setStatus('current')
if mibBuilder.loadTexts: virtualserverPktsIn.setDescription('Packets received by this virtual server from clients.')
virtualserverPktsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 55), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverPktsOut.setStatus('current')
if mibBuilder.loadTexts: virtualserverPktsOut.setDescription('Packets sent by this virtual server to clients.')
virtualserverL4TCPConnectResets = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 56), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverL4TCPConnectResets.setStatus('current')
if mibBuilder.loadTexts: virtualserverL4TCPConnectResets.setDescription('Connections is reset by this virtual server because the forward traffic cannot be processed.')
virtualserverL4UDPUnreachables = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 57), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverL4UDPUnreachables.setStatus('current')
if mibBuilder.loadTexts: virtualserverL4UDPUnreachables.setDescription('ICMP error response is sent to client by this virtual server because the forward traffic cannot be processed.')
virtualserverBwLimitPktsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 58), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBwLimitPktsDrop.setStatus('current')
if mibBuilder.loadTexts: virtualserverBwLimitPktsDrop.setDescription('Number of Packets dropped by this virtual server due to BW Limits.')
virtualserverBwLimitPktsDropLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 59), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBwLimitPktsDropLo.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverBwLimitPktsDropLo.setDescription('Number of Packets dropped by this virtual server due to BW Limits ( low 32bits ).')
virtualserverBwLimitPktsDropHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 60), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBwLimitPktsDropHi.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverBwLimitPktsDropHi.setDescription('Number of Packets dropped by this virtual server due to BW Limits ( high 32bits ).')
virtualserverBwLimitBytesDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 61), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBwLimitBytesDrop.setStatus('current')
if mibBuilder.loadTexts: virtualserverBwLimitBytesDrop.setDescription('Number of Bytes dropped by this virtual server due to BW Limits.')
virtualserverBwLimitBytesDropLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 62), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBwLimitBytesDropLo.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverBwLimitBytesDropLo.setDescription('Number of Bytes dropped by this virtual server due to BW Limits ( low 32bits ).')
virtualserverBwLimitBytesDropHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 2, 2, 1, 63), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: virtualserverBwLimitBytesDropHi.setStatus('obsolete')
if mibBuilder.loadTexts: virtualserverBwLimitBytesDropHi.setDescription('Number of Bytes dropped by this virtual server due to BW Limits ( high 32bits ).')
poolNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolNumber.setStatus('current')
if mibBuilder.loadTexts: poolNumber.setDescription('The number of pools on this system.')
poolTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2), )
if mibBuilder.loadTexts: poolTable.setStatus('current')
if mibBuilder.loadTexts: poolTable.setDescription('This table provides information and statistics for pools.')
poolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: poolEntry.setStatus('current')
if mibBuilder.loadTexts: poolEntry.setDescription('This defines a row in the pools table.')
poolName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolName.setStatus('current')
if mibBuilder.loadTexts: poolName.setDescription('The name of the pool.')
poolAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("roundrobin", 1), ("weightedRoundRobin", 2), ("perceptive", 3), ("leastConnections", 4), ("fastestResponseTime", 5), ("random", 6), ("weightedLeastConnections", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolAlgorithm.setStatus('current')
if mibBuilder.loadTexts: poolAlgorithm.setDescription('The load-balancing algorithm the pool uses.')
poolNodes = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolNodes.setStatus('current')
if mibBuilder.loadTexts: poolNodes.setDescription('The number of nodes registered with this pool.')
poolDraining = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDraining.setStatus('current')
if mibBuilder.loadTexts: poolDraining.setDescription('The number of nodes in this pool which are draining.')
poolFailPool = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolFailPool.setStatus('current')
if mibBuilder.loadTexts: poolFailPool.setDescription("The name of this pool's failure pool.")
poolBytesInLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesInLo.setStatus('obsolete')
if mibBuilder.loadTexts: poolBytesInLo.setDescription('Bytes received by this pool from nodes ( low 32bits ).')
poolBytesInHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesInHi.setStatus('obsolete')
if mibBuilder.loadTexts: poolBytesInHi.setDescription('Bytes received by this pool from nodes ( high 32bits ).')
poolBytesOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesOutLo.setStatus('obsolete')
if mibBuilder.loadTexts: poolBytesOutLo.setDescription('Bytes sent by this pool to nodes ( low 32bits ).')
poolBytesOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesOutHi.setStatus('obsolete')
if mibBuilder.loadTexts: poolBytesOutHi.setDescription('Bytes sent by this pool to nodes ( high 32bits ).')
poolTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolTotalConn.setStatus('current')
if mibBuilder.loadTexts: poolTotalConn.setDescription('Requests sent to this pool.')
poolPersistence = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("ip", 2), ("rule", 3), ("transparent", 4), ("applicationCookie", 5), ("xZeusBackend", 6), ("ssl", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolPersistence.setStatus('current')
if mibBuilder.loadTexts: poolPersistence.setDescription('The session persistence method this pool uses')
poolSessionMigrated = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolSessionMigrated.setStatus('current')
if mibBuilder.loadTexts: poolSessionMigrated.setDescription('Sessions migrated to a new node because the desired node was unavailable.')
poolDisabled = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolDisabled.setStatus('current')
if mibBuilder.loadTexts: poolDisabled.setDescription('The number of nodes in this pool that are disabled.')
poolState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("active", 1), ("disabled", 2), ("draining", 3), ("unused", 4), ("unknown", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolState.setStatus('current')
if mibBuilder.loadTexts: poolState.setDescription('The state of this pool.')
poolConnsQueued = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolConnsQueued.setStatus('current')
if mibBuilder.loadTexts: poolConnsQueued.setDescription('Total connections currently queued to this pool.')
poolQueueTimeouts = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolQueueTimeouts.setStatus('current')
if mibBuilder.loadTexts: poolQueueTimeouts.setDescription('Total connections that timed-out while queued.')
poolMinQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMinQueueTime.setStatus('current')
if mibBuilder.loadTexts: poolMinQueueTime.setDescription('Minimum time a connection was queued for, over the last second.')
poolMaxQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMaxQueueTime.setStatus('current')
if mibBuilder.loadTexts: poolMaxQueueTime.setDescription('Maximum time a connection was queued for, over the last second.')
poolMeanQueueTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolMeanQueueTime.setStatus('current')
if mibBuilder.loadTexts: poolMeanQueueTime.setDescription('Mean time a connection was queued for, over the last second.')
poolBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesIn.setStatus('current')
if mibBuilder.loadTexts: poolBytesIn.setDescription('Bytes received by this pool from nodes.')
poolBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 23), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBytesOut.setStatus('current')
if mibBuilder.loadTexts: poolBytesOut.setDescription('Bytes sent by this pool to nodes.')
poolBwLimitPktsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBwLimitPktsDrop.setStatus('current')
if mibBuilder.loadTexts: poolBwLimitPktsDrop.setDescription('Number of packets dropped by this pool due to BW Limits.')
poolBwLimitPktsDropLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBwLimitPktsDropLo.setStatus('obsolete')
if mibBuilder.loadTexts: poolBwLimitPktsDropLo.setDescription('Number of packets dropped by this pool due to BW Limits ( low 32bits ).')
poolBwLimitPktsDropHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBwLimitPktsDropHi.setStatus('obsolete')
if mibBuilder.loadTexts: poolBwLimitPktsDropHi.setDescription('Number of packets dropped by this pool due to BW Limits ( high 32bits ).')
poolBwLimitBytesDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBwLimitBytesDrop.setStatus('current')
if mibBuilder.loadTexts: poolBwLimitBytesDrop.setDescription('Bytes dropped by this pool due to BW Limits.')
poolBwLimitBytesDropLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 28), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBwLimitBytesDropLo.setStatus('obsolete')
if mibBuilder.loadTexts: poolBwLimitBytesDropLo.setDescription('Bytes dropped by this pool due to BW Limits ( low 32bits ).')
poolBwLimitBytesDropHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 3, 2, 1, 29), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: poolBwLimitBytesDropHi.setStatus('obsolete')
if mibBuilder.loadTexts: poolBwLimitBytesDropHi.setDescription('Bytes dropped by this pool due to BW Limits ( high 32bits ).')
nodeNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNumber.setStatus('obsolete')
if mibBuilder.loadTexts: nodeNumber.setDescription('The number of IPv4 nodes on this system.')
nodeTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2), )
if mibBuilder.loadTexts: nodeTable.setStatus('obsolete')
if mibBuilder.loadTexts: nodeTable.setDescription('This table defines all the information for a particular IPv4 node.')
nodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "nodeIPAddress"), (0, "ZXTM-MIB-SMIv2", "nodePort"))
if mibBuilder.loadTexts: nodeEntry.setStatus('obsolete')
if mibBuilder.loadTexts: nodeEntry.setDescription('This defines a row in the IPv4 nodes table.')
nodeIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: nodeIPAddress.setDescription('The IPv4 address of this node.')
nodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePort.setStatus('obsolete')
if mibBuilder.loadTexts: nodePort.setDescription('The port this node listens on.')
nodeHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeHostName.setStatus('obsolete')
if mibBuilder.loadTexts: nodeHostName.setDescription('The resolved name for this node.')
nodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alive", 1), ("dead", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeState.setStatus('obsolete')
if mibBuilder.loadTexts: nodeState.setDescription('The state of this node.')
nodeBytesToNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBytesToNodeLo.setStatus('obsolete')
if mibBuilder.loadTexts: nodeBytesToNodeLo.setDescription('Bytes sent to this node ( low 32bits ).')
nodeBytesToNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBytesToNodeHi.setStatus('obsolete')
if mibBuilder.loadTexts: nodeBytesToNodeHi.setDescription('Bytes sent to this node ( high 32bits ).')
nodeBytesFromNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBytesFromNodeLo.setStatus('obsolete')
if mibBuilder.loadTexts: nodeBytesFromNodeLo.setDescription('Bytes received from this node ( low 32bits ).')
nodeBytesFromNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeBytesFromNodeHi.setStatus('obsolete')
if mibBuilder.loadTexts: nodeBytesFromNodeHi.setDescription('Bytes received from this node ( high 32bits ).')
nodeCurrentRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCurrentRequests.setStatus('obsolete')
if mibBuilder.loadTexts: nodeCurrentRequests.setDescription('Connections currently established to this node.')
nodeTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeTotalConn.setStatus('obsolete')
if mibBuilder.loadTexts: nodeTotalConn.setDescription('Requests sent to this node.')
nodePooledConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodePooledConn.setStatus('obsolete')
if mibBuilder.loadTexts: nodePooledConn.setDescription('Requests that reused an existing pooled/keepalive connection rather than creating a new TCP connection.')
nodeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeFailures.setStatus('obsolete')
if mibBuilder.loadTexts: nodeFailures.setDescription('Failures of this node.')
nodeNewConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNewConn.setStatus('obsolete')
if mibBuilder.loadTexts: nodeNewConn.setDescription('Requests that created a new connection to this node.')
nodeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeErrors.setStatus('obsolete')
if mibBuilder.loadTexts: nodeErrors.setDescription('Number of timeouts, connection problems and other errors for this node.')
nodeResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeResponseMin.setStatus('obsolete')
if mibBuilder.loadTexts: nodeResponseMin.setDescription('Minimum response time (ms) in the last second for this node.')
nodeResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeResponseMax.setStatus('obsolete')
if mibBuilder.loadTexts: nodeResponseMax.setDescription('Maximum response time (ms) in the last second for this node.')
nodeResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeResponseMean.setStatus('obsolete')
if mibBuilder.loadTexts: nodeResponseMean.setDescription('Mean response time (ms) in the last second for this node.')
nodeNumberInet46 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeNumberInet46.setStatus('current')
if mibBuilder.loadTexts: nodeNumberInet46.setDescription('The number of nodes on this system (includes IPv4 and IPv6 nodes).')
nodeCurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 2, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeCurrentConn.setStatus('obsolete')
if mibBuilder.loadTexts: nodeCurrentConn.setDescription('Requests currently established to this node. ( does not include idle keepalives ).')
nodeInet46Table = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4), )
if mibBuilder.loadTexts: nodeInet46Table.setStatus('current')
if mibBuilder.loadTexts: nodeInet46Table.setDescription('This table defines all the information for a particular node (includes IPv4 and IPv6 addresses).')
nodeInet46Entry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "nodeInet46AddressType"), (0, "ZXTM-MIB-SMIv2", "nodeInet46Address"), (0, "ZXTM-MIB-SMIv2", "nodeInet46Port"))
if mibBuilder.loadTexts: nodeInet46Entry.setStatus('current')
if mibBuilder.loadTexts: nodeInet46Entry.setDescription('This defines a row in the nodes table (includes IPv4 and IPv6 addresses).')
nodeInet46AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46AddressType.setStatus('current')
if mibBuilder.loadTexts: nodeInet46AddressType.setDescription('The IP address type of this node.')
nodeInet46Address = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46Address.setStatus('current')
if mibBuilder.loadTexts: nodeInet46Address.setDescription('The IPv4 or IPv6 address of this node.')
nodeInet46Port = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46Port.setStatus('current')
if mibBuilder.loadTexts: nodeInet46Port.setDescription('The port this node listens on.')
nodeInet46HostName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46HostName.setStatus('current')
if mibBuilder.loadTexts: nodeInet46HostName.setDescription('The resolved name for this node.')
nodeInet46State = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("alive", 1), ("dead", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46State.setStatus('current')
if mibBuilder.loadTexts: nodeInet46State.setDescription('The state of this node.')
nodeInet46BytesToNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesToNodeLo.setStatus('obsolete')
if mibBuilder.loadTexts: nodeInet46BytesToNodeLo.setDescription('Bytes sent to this node ( low 32bits ).')
nodeInet46BytesToNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesToNodeHi.setStatus('obsolete')
if mibBuilder.loadTexts: nodeInet46BytesToNodeHi.setDescription('Bytes sent to this node ( high 32bits ).')
nodeInet46BytesFromNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesFromNodeLo.setStatus('obsolete')
if mibBuilder.loadTexts: nodeInet46BytesFromNodeLo.setDescription('Bytes received from this node ( low 32bits ).')
nodeInet46BytesFromNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesFromNodeHi.setStatus('obsolete')
if mibBuilder.loadTexts: nodeInet46BytesFromNodeHi.setDescription('Bytes received from this node ( high 32bits ).')
nodeInet46CurrentRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46CurrentRequests.setStatus('current')
if mibBuilder.loadTexts: nodeInet46CurrentRequests.setDescription('Active connections established to this node, does not include idle connections.')
nodeInet46TotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46TotalConn.setStatus('current')
if mibBuilder.loadTexts: nodeInet46TotalConn.setDescription('Requests sent to this node.')
nodeInet46PooledConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46PooledConn.setStatus('current')
if mibBuilder.loadTexts: nodeInet46PooledConn.setDescription('Requests that reused an existing pooled/keepalive connection rather than creating a new TCP connection.')
nodeInet46Failures = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46Failures.setStatus('current')
if mibBuilder.loadTexts: nodeInet46Failures.setDescription('Failures of this node.')
nodeInet46NewConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46NewConn.setStatus('current')
if mibBuilder.loadTexts: nodeInet46NewConn.setDescription('Requests that created a new connection to this node.')
nodeInet46Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46Errors.setStatus('current')
if mibBuilder.loadTexts: nodeInet46Errors.setDescription('Number of timeouts, connection problems and other errors for this node.')
nodeInet46ResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 16), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46ResponseMin.setStatus('current')
if mibBuilder.loadTexts: nodeInet46ResponseMin.setDescription('Minimum response time (ms) in the last second for this node.')
nodeInet46ResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46ResponseMax.setStatus('current')
if mibBuilder.loadTexts: nodeInet46ResponseMax.setDescription('Maximum response time (ms) in the last second for this node.')
nodeInet46ResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46ResponseMean.setStatus('current')
if mibBuilder.loadTexts: nodeInet46ResponseMean.setDescription('Mean response time (ms) in the last second for this node.')
nodeInet46IdleConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46IdleConns.setStatus('current')
if mibBuilder.loadTexts: nodeInet46IdleConns.setDescription('Number of idle HTTP connections to this node.')
nodeInet46CurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46CurrentConn.setStatus('current')
if mibBuilder.loadTexts: nodeInet46CurrentConn.setDescription('Current connections established to this node, includes idle connections.')
nodeInet46BytesToNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesToNode.setStatus('current')
if mibBuilder.loadTexts: nodeInet46BytesToNode.setDescription('Bytes sent to this node.')
nodeInet46BytesFromNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 4, 1, 22), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodeInet46BytesFromNode.setStatus('current')
if mibBuilder.loadTexts: nodeInet46BytesFromNode.setDescription('Bytes received from this node.')
perPoolNodeNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNumber.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeNumber.setDescription('The number of nodes on this system.')
perPoolNodeTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6), )
if mibBuilder.loadTexts: perPoolNodeTable.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeTable.setDescription('This table defines all the information for a particular node in a pool.')
perPoolNodeEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "perPoolNodePoolName"), (0, "ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), (0, "ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), (0, "ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: perPoolNodeEntry.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeEntry.setDescription('This defines a row in the perPoolNodes table.')
perPoolNodePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePoolName.setStatus('current')
if mibBuilder.loadTexts: perPoolNodePoolName.setDescription('The name of the pool that this node belongs to.')
perPoolNodeNodeAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNodeAddressType.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeNodeAddressType.setDescription('The IP address type of this node.')
perPoolNodeNodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNodeAddress.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeNodeAddress.setDescription('The IPv4 or IPv6 address of this node.')
perPoolNodeNodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNodePort.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeNodePort.setDescription('The port that this node listens on.')
perPoolNodeNodeHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNodeHostName.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeNodeHostName.setDescription('The name for this node provided in the configuration.')
perPoolNodeState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("alive", 1), ("dead", 2), ("unknown", 3), ("draining", 4), ("drainingtodelete", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeState.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeState.setDescription('The state of this node.')
perPoolNodeBytesToNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesToNodeLo.setStatus('obsolete')
if mibBuilder.loadTexts: perPoolNodeBytesToNodeLo.setDescription('Bytes sent to this node ( low 32bits ).')
perPoolNodeBytesToNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesToNodeHi.setStatus('obsolete')
if mibBuilder.loadTexts: perPoolNodeBytesToNodeHi.setDescription('Bytes sent to this node ( high 32bits ).')
perPoolNodeBytesFromNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesFromNodeLo.setStatus('obsolete')
if mibBuilder.loadTexts: perPoolNodeBytesFromNodeLo.setDescription('Bytes received from this node ( low 32bits ).')
perPoolNodeBytesFromNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesFromNodeHi.setStatus('obsolete')
if mibBuilder.loadTexts: perPoolNodeBytesFromNodeHi.setDescription('Bytes received from this node ( high 32bits ).')
perPoolNodeCurrentRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeCurrentRequests.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeCurrentRequests.setDescription('Active connections established to this node, does not include idle connections.')
perPoolNodeTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeTotalConn.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeTotalConn.setDescription('Requests sent to this node.')
perPoolNodePooledConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePooledConn.setStatus('current')
if mibBuilder.loadTexts: perPoolNodePooledConn.setDescription('Requests that reused an existing pooled/keepalive connection rather than creating a new TCP connection.')
perPoolNodeFailures = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeFailures.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeFailures.setDescription('Failures of this node.')
perPoolNodeNewConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeNewConn.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeNewConn.setDescription('Requests that created a new connection to this node.')
perPoolNodeErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeErrors.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeErrors.setDescription('Number of timeouts, connection problems and other errors for this node.')
perPoolNodeResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeResponseMin.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeResponseMin.setDescription('Minimum response time (ms) in the last second for this node.')
perPoolNodeResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 18), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeResponseMax.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeResponseMax.setDescription('Maximum response time (ms) in the last second for this node.')
perPoolNodeResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 19), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeResponseMean.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeResponseMean.setDescription('Mean response time (ms) in the last second for this node.')
perPoolNodeIdleConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 20), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeIdleConns.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeIdleConns.setDescription('Number of idle HTTP connections to this node.')
perPoolNodeCurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 21), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeCurrentConn.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeCurrentConn.setDescription('Current connections established to a node, includes idle connections.')
perPoolNodePktsToNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePktsToNodeLo.setStatus('obsolete')
if mibBuilder.loadTexts: perPoolNodePktsToNodeLo.setDescription('Packets sent to this node ( low 32bits ).')
perPoolNodePktsToNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePktsToNodeHi.setStatus('obsolete')
if mibBuilder.loadTexts: perPoolNodePktsToNodeHi.setDescription('Packets sent to this node ( high 32bits ).')
perPoolNodePktsFromNodeLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 24), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePktsFromNodeLo.setStatus('obsolete')
if mibBuilder.loadTexts: perPoolNodePktsFromNodeLo.setDescription('Pkts received from this node ( low 32bits ).')
perPoolNodePktsFromNodeHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePktsFromNodeHi.setStatus('obsolete')
if mibBuilder.loadTexts: perPoolNodePktsFromNodeHi.setDescription('Pkts received from this node ( high 32bits ).')
perPoolNodeL4StatelessBuckets = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 26), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeL4StatelessBuckets.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeL4StatelessBuckets.setDescription('Number of hash buckets occupied for this node for L4 stateless processing.')
perPoolNodeBytesToNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesToNode.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeBytesToNode.setDescription('Bytes sent to this node.')
perPoolNodeBytesFromNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 28), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodeBytesFromNode.setStatus('current')
if mibBuilder.loadTexts: perPoolNodeBytesFromNode.setDescription('Bytes received from this node.')
perPoolNodePktsToNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 29), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePktsToNode.setStatus('current')
if mibBuilder.loadTexts: perPoolNodePktsToNode.setDescription('Packets sent to this node.')
perPoolNodePktsFromNode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 4, 6, 1, 30), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perPoolNodePktsFromNode.setStatus('current')
if mibBuilder.loadTexts: perPoolNodePktsFromNode.setDescription('Packets received from this node.')
trafficIPNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNumber.setStatus('obsolete')
if mibBuilder.loadTexts: trafficIPNumber.setDescription('The number of traffic IPv4 addresses on this system.')
trafficIPNumberRaised = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNumberRaised.setStatus('obsolete')
if mibBuilder.loadTexts: trafficIPNumberRaised.setDescription('The number of traffic IPv4 addresses currently raised on this system.')
trafficIPTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3), )
if mibBuilder.loadTexts: trafficIPTable.setStatus('obsolete')
if mibBuilder.loadTexts: trafficIPTable.setDescription('This table details the traffic IPv4 addresses that are hosted by this traffic manager cluster.')
trafficIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "trafficIPAddress"))
if mibBuilder.loadTexts: trafficIPEntry.setStatus('obsolete')
if mibBuilder.loadTexts: trafficIPEntry.setDescription('This defines a row in the IPv4 traffic IP table.')
trafficIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPAddress.setStatus('obsolete')
if mibBuilder.loadTexts: trafficIPAddress.setDescription('This is a traffic IP address.')
trafficIPState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raised", 1), ("lowered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPState.setStatus('obsolete')
if mibBuilder.loadTexts: trafficIPState.setDescription('Whether this traffic IP address is currently being hosted by this traffic manager.')
trafficIPTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 3, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPTime.setStatus('obsolete')
if mibBuilder.loadTexts: trafficIPTime.setDescription("The time (in hundredths of a second) since trafficIPState last changed (this value will wrap if the state hasn't changed for 497 days).")
trafficIPGatewayPingRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPGatewayPingRequests.setStatus('current')
if mibBuilder.loadTexts: trafficIPGatewayPingRequests.setDescription('Number of ping requests sent to the gateway machine.')
trafficIPGatewayPingResponses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPGatewayPingResponses.setStatus('current')
if mibBuilder.loadTexts: trafficIPGatewayPingResponses.setDescription('Number of ping responses received from the gateway machine.')
trafficIPNodePingRequests = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNodePingRequests.setStatus('current')
if mibBuilder.loadTexts: trafficIPNodePingRequests.setDescription('Number of ping requests sent to the backend nodes.')
trafficIPNodePingResponses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNodePingResponses.setStatus('current')
if mibBuilder.loadTexts: trafficIPNodePingResponses.setDescription('Number of ping responses received from the backend nodes.')
trafficIPPingResponseErrors = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPPingResponseErrors.setStatus('current')
if mibBuilder.loadTexts: trafficIPPingResponseErrors.setDescription('Number of ping response errors.')
trafficIPARPMessage = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPARPMessage.setStatus('current')
if mibBuilder.loadTexts: trafficIPARPMessage.setDescription('Number of ARP messages sent for raised Traffic IP Addresses.')
trafficIPNumberInet46 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNumberInet46.setStatus('current')
if mibBuilder.loadTexts: trafficIPNumberInet46.setDescription('The number of traffic IP addresses on this system (includes IPv4 and IPv6 addresses).')
trafficIPNumberRaisedInet46 = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPNumberRaisedInet46.setStatus('current')
if mibBuilder.loadTexts: trafficIPNumberRaisedInet46.setDescription('The number of traffic IP addresses currently raised on this system (includes IPv4 and IPv6 addresses).')
trafficIPInet46Table = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12), )
if mibBuilder.loadTexts: trafficIPInet46Table.setStatus('current')
if mibBuilder.loadTexts: trafficIPInet46Table.setDescription('This table details the traffic IP addresses that are hosted by this traffic manager cluster (includes IPv4 and IPv6 addresses).')
trafficIPInet46Entry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), (0, "ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: trafficIPInet46Entry.setStatus('current')
if mibBuilder.loadTexts: trafficIPInet46Entry.setDescription('This defines a row in the traffic IP table.')
trafficIPInet46AddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPInet46AddressType.setStatus('current')
if mibBuilder.loadTexts: trafficIPInet46AddressType.setDescription('The traffic IP address type.')
trafficIPInet46Address = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPInet46Address.setStatus('current')
if mibBuilder.loadTexts: trafficIPInet46Address.setDescription('This is a traffic IP address.')
trafficIPInet46State = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("raised", 1), ("lowered", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPInet46State.setStatus('current')
if mibBuilder.loadTexts: trafficIPInet46State.setDescription('Whether this traffic IP address is currently being hosted by this traffic manager.')
trafficIPInet46Time = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 6, 12, 1, 4), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trafficIPInet46Time.setStatus('current')
if mibBuilder.loadTexts: trafficIPInet46Time.setDescription("The time (in hundredths of a second) since trafficIPState last changed (this value will wrap if the state hasn't changed for 497 days).")
serviceProtNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtNumber.setStatus('current')
if mibBuilder.loadTexts: serviceProtNumber.setDescription('The number of service protection classes defined.')
serviceProtTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2), )
if mibBuilder.loadTexts: serviceProtTable.setStatus('current')
if mibBuilder.loadTexts: serviceProtTable.setDescription('This table provides information and statistics for service protection classes.')
serviceProtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "serviceProtName"))
if mibBuilder.loadTexts: serviceProtEntry.setStatus('current')
if mibBuilder.loadTexts: serviceProtEntry.setDescription('This defines a row in the service protection table.')
serviceProtName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtName.setStatus('current')
if mibBuilder.loadTexts: serviceProtName.setDescription('The name of the service protection class.')
serviceProtTotalRefusal = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtTotalRefusal.setStatus('current')
if mibBuilder.loadTexts: serviceProtTotalRefusal.setDescription('Connections refused by this service protection class.')
serviceProtLastRefusalTime = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 3), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtLastRefusalTime.setStatus('current')
if mibBuilder.loadTexts: serviceProtLastRefusalTime.setDescription('The time (in hundredths of a second) since this service protection class last refused a connection (this value will wrap if no connections are refused in more than 497 days).')
serviceProtRefusalIP = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalIP.setStatus('current')
if mibBuilder.loadTexts: serviceProtRefusalIP.setDescription('Connections refused by this service protection class because the source IP address was banned.')
serviceProtRefusalConc1IP = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalConc1IP.setStatus('current')
if mibBuilder.loadTexts: serviceProtRefusalConc1IP.setDescription('Connections refused by this service protection class because the source IP address issued too many concurrent connections.')
serviceProtRefusalConc10IP = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalConc10IP.setStatus('current')
if mibBuilder.loadTexts: serviceProtRefusalConc10IP.setDescription('Connections refused by this service protection class because the top 10 source IP addresses issued too many concurrent connections.')
serviceProtRefusalConnRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalConnRate.setStatus('current')
if mibBuilder.loadTexts: serviceProtRefusalConnRate.setDescription('Connections refused by this service protection class because the source IP address issued too many connections within 60 seconds.')
serviceProtRefusalRFC2396 = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalRFC2396.setStatus('current')
if mibBuilder.loadTexts: serviceProtRefusalRFC2396.setDescription('Connections refused by this service protection class because the HTTP request was not RFC 2396 compliant.')
serviceProtRefusalSize = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalSize.setStatus('current')
if mibBuilder.loadTexts: serviceProtRefusalSize.setDescription('Connections refused by this service protection class because the request was larger than the defined limits allowed.')
serviceProtRefusalBinary = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 5, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceProtRefusalBinary.setStatus('current')
if mibBuilder.loadTexts: serviceProtRefusalBinary.setDescription('Connections refused by this service protection class because the request contained disallowed binary content.')
serviceLevelNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelNumber.setStatus('current')
if mibBuilder.loadTexts: serviceLevelNumber.setDescription('The number of SLM classes defined.')
serviceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2), )
if mibBuilder.loadTexts: serviceLevelTable.setStatus('current')
if mibBuilder.loadTexts: serviceLevelTable.setDescription('This table provides information and statistics for SLM classes.')
serviceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "serviceLevelName"))
if mibBuilder.loadTexts: serviceLevelEntry.setStatus('current')
if mibBuilder.loadTexts: serviceLevelEntry.setDescription('This defines a row in the SLM table.')
serviceLevelName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelName.setStatus('current')
if mibBuilder.loadTexts: serviceLevelName.setDescription('The name of the SLM class.')
serviceLevelTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelTotalConn.setStatus('current')
if mibBuilder.loadTexts: serviceLevelTotalConn.setDescription('Requests handled by this SLM class.')
serviceLevelTotalNonConf = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelTotalNonConf.setStatus('current')
if mibBuilder.loadTexts: serviceLevelTotalNonConf.setDescription('Non-conforming requests handled by this SLM class.')
serviceLevelResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelResponseMin.setStatus('current')
if mibBuilder.loadTexts: serviceLevelResponseMin.setDescription('Minimum response time (ms) in the last second for this SLM class.')
serviceLevelResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelResponseMax.setStatus('current')
if mibBuilder.loadTexts: serviceLevelResponseMax.setDescription('Maximum response time (ms) in the last second for this SLM class.')
serviceLevelResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelResponseMean.setStatus('current')
if mibBuilder.loadTexts: serviceLevelResponseMean.setDescription('Mean response time (ms) in the last second for this SLM class.')
serviceLevelIsOK = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notok", 1), ("ok", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelIsOK.setStatus('current')
if mibBuilder.loadTexts: serviceLevelIsOK.setDescription('Indicates if this SLM class is currently conforming.')
serviceLevelConforming = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelConforming.setStatus('current')
if mibBuilder.loadTexts: serviceLevelConforming.setDescription('Percentage of requests associated with this SLM class that are conforming')
serviceLevelCurrentConns = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 7, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serviceLevelCurrentConns.setStatus('current')
if mibBuilder.loadTexts: serviceLevelCurrentConns.setDescription('The number of connections currently associated with this SLM class.')
perNodeServiceLevelTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1), )
if mibBuilder.loadTexts: perNodeServiceLevelTable.setStatus('obsolete')
if mibBuilder.loadTexts: perNodeServiceLevelTable.setDescription('This table provides information and statistics for SLM classes on a per node basis (IPv4 nodes only).')
perNodeServiceLevelEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelSLMName"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelNodeIPAddr"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelNodePort"))
if mibBuilder.loadTexts: perNodeServiceLevelEntry.setStatus('obsolete')
if mibBuilder.loadTexts: perNodeServiceLevelEntry.setDescription('This defines a row in the per-node SLM table (IPv4 nodes only).')
perNodeServiceLevelSLMName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelSLMName.setStatus('obsolete')
if mibBuilder.loadTexts: perNodeServiceLevelSLMName.setDescription('The name of the SLM class.')
perNodeServiceLevelNodeIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelNodeIPAddr.setStatus('obsolete')
if mibBuilder.loadTexts: perNodeServiceLevelNodeIPAddr.setDescription('The IP address of this node.')
perNodeServiceLevelNodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelNodePort.setStatus('obsolete')
if mibBuilder.loadTexts: perNodeServiceLevelNodePort.setDescription('The port number of this node.')
perNodeServiceLevelTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelTotalConn.setStatus('obsolete')
if mibBuilder.loadTexts: perNodeServiceLevelTotalConn.setDescription('Requests handled by this SLM class to this node.')
perNodeServiceLevelTotalNonConf = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelTotalNonConf.setStatus('obsolete')
if mibBuilder.loadTexts: perNodeServiceLevelTotalNonConf.setDescription('Non-conforming requests handled by this SLM class to this node.')
perNodeServiceLevelResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelResponseMin.setStatus('obsolete')
if mibBuilder.loadTexts: perNodeServiceLevelResponseMin.setDescription('Minimum response time (ms) in the last second for this SLM class to this node.')
perNodeServiceLevelResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelResponseMax.setStatus('obsolete')
if mibBuilder.loadTexts: perNodeServiceLevelResponseMax.setDescription('Maximum response time (ms) in the last second for this SLM class to this node.')
perNodeServiceLevelResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelResponseMean.setStatus('obsolete')
if mibBuilder.loadTexts: perNodeServiceLevelResponseMean.setDescription('Mean response time (ms) in the last second for this SLM class to this node.')
perNodeServiceLevelInet46Table = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2), )
if mibBuilder.loadTexts: perNodeServiceLevelInet46Table.setStatus('current')
if mibBuilder.loadTexts: perNodeServiceLevelInet46Table.setDescription('This table provides information and statistics for SLM classes on a per node basis (includes IPv4 and IPv6 nodes).')
perNodeServiceLevelInet46Entry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46SLMName"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodeAddressType"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodeAddress"), (0, "ZXTM-MIB-SMIv2", "perNodeServiceLevelInet46NodePort"))
if mibBuilder.loadTexts: perNodeServiceLevelInet46Entry.setStatus('current')
if mibBuilder.loadTexts: perNodeServiceLevelInet46Entry.setDescription('This defines a row in the per-node SLM table (includes IPv4 and IPv6 nodes).')
perNodeServiceLevelInet46SLMName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46SLMName.setStatus('current')
if mibBuilder.loadTexts: perNodeServiceLevelInet46SLMName.setDescription('The name of the SLM class.')
perNodeServiceLevelInet46NodeAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46NodeAddressType.setStatus('current')
if mibBuilder.loadTexts: perNodeServiceLevelInet46NodeAddressType.setDescription('The type of IP address of this node.')
perNodeServiceLevelInet46NodeAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 3), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46NodeAddress.setStatus('current')
if mibBuilder.loadTexts: perNodeServiceLevelInet46NodeAddress.setDescription('The IP address of this node.')
perNodeServiceLevelInet46NodePort = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46NodePort.setStatus('current')
if mibBuilder.loadTexts: perNodeServiceLevelInet46NodePort.setDescription('The port number of this node.')
perNodeServiceLevelInet46TotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46TotalConn.setStatus('current')
if mibBuilder.loadTexts: perNodeServiceLevelInet46TotalConn.setDescription('Requests handled by this SLM class to this node.')
perNodeServiceLevelInet46TotalNonConf = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46TotalNonConf.setStatus('current')
if mibBuilder.loadTexts: perNodeServiceLevelInet46TotalNonConf.setDescription('Non-conforming requests handled by this SLM class to this node.')
perNodeServiceLevelInet46ResponseMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46ResponseMin.setStatus('current')
if mibBuilder.loadTexts: perNodeServiceLevelInet46ResponseMin.setDescription('Minimum response time (ms) in the last second for this SLM class to this node.')
perNodeServiceLevelInet46ResponseMax = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46ResponseMax.setStatus('current')
if mibBuilder.loadTexts: perNodeServiceLevelInet46ResponseMax.setDescription('Maximum response time (ms) in the last second for this SLM class to this node.')
perNodeServiceLevelInet46ResponseMean = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 8, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perNodeServiceLevelInet46ResponseMean.setStatus('current')
if mibBuilder.loadTexts: perNodeServiceLevelInet46ResponseMean.setDescription('Mean response time (ms) in the last second for this SLM class to this node.')
bandwidthClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassNumber.setStatus('current')
if mibBuilder.loadTexts: bandwidthClassNumber.setDescription('The number of bandwidth classes defined.')
bandwidthClassTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2), )
if mibBuilder.loadTexts: bandwidthClassTable.setStatus('current')
if mibBuilder.loadTexts: bandwidthClassTable.setDescription('This table provides information and statistics for bandwidth classes.')
bandwidthClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "bandwidthClassName"))
if mibBuilder.loadTexts: bandwidthClassEntry.setStatus('current')
if mibBuilder.loadTexts: bandwidthClassEntry.setDescription('This defines a row in the bandwidth class.')
bandwidthClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassName.setStatus('current')
if mibBuilder.loadTexts: bandwidthClassName.setDescription('The name of the bandwidth class.')
bandwidthClassMaximum = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassMaximum.setStatus('current')
if mibBuilder.loadTexts: bandwidthClassMaximum.setDescription('Maximum bandwidth class limit (kbits/s).')
bandwidthClassGuarantee = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassGuarantee.setStatus('current')
if mibBuilder.loadTexts: bandwidthClassGuarantee.setDescription('Guaranteed bandwidth class limit (kbits/s). Currently unused.')
bandwidthClassBytesOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesOutLo.setStatus('obsolete')
if mibBuilder.loadTexts: bandwidthClassBytesOutLo.setDescription('Bytes output by connections assigned to this bandwidth class ( low 32bits ).')
bandwidthClassBytesOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesOutHi.setStatus('obsolete')
if mibBuilder.loadTexts: bandwidthClassBytesOutHi.setDescription('Bytes output by connections assigned to this bandwidth class ( high 32bits ).')
bandwidthClassBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesOut.setStatus('current')
if mibBuilder.loadTexts: bandwidthClassBytesOut.setDescription('Bytes output by connections assigned to this bandwidth class.')
bandwidthClassPktsDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 7), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassPktsDrop.setStatus('current')
if mibBuilder.loadTexts: bandwidthClassPktsDrop.setDescription('Number of packets dropped by this bandwidth class.')
bandwidthClassPktsDropLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassPktsDropLo.setStatus('obsolete')
if mibBuilder.loadTexts: bandwidthClassPktsDropLo.setDescription('Number of packets dropped by this bandwidth class ( low 32bits ).')
bandwidthClassPktsDropHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassPktsDropHi.setStatus('obsolete')
if mibBuilder.loadTexts: bandwidthClassPktsDropHi.setDescription('Number of packets dropped by this bandwidth class ( high 32bits ).')
bandwidthClassBytesDrop = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesDrop.setStatus('current')
if mibBuilder.loadTexts: bandwidthClassBytesDrop.setDescription(' Bytes dropped by this bandwidth class.')
bandwidthClassBytesDropLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesDropLo.setStatus('obsolete')
if mibBuilder.loadTexts: bandwidthClassBytesDropLo.setDescription('Bytes dropped by this bandwidth class ( low 32bits ).')
bandwidthClassBytesDropHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 9, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bandwidthClassBytesDropHi.setStatus('obsolete')
if mibBuilder.loadTexts: bandwidthClassBytesDropHi.setDescription('Bytes dropped by this bandwidth class ( high 32bits ).')
rateClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassNumber.setStatus('current')
if mibBuilder.loadTexts: rateClassNumber.setDescription('The number of rate classes defined.')
rateClassTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2), )
if mibBuilder.loadTexts: rateClassTable.setStatus('current')
if mibBuilder.loadTexts: rateClassTable.setDescription('This table provides information and statistics for rate classes.')
rateClassEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "rateClassName"))
if mibBuilder.loadTexts: rateClassEntry.setStatus('current')
if mibBuilder.loadTexts: rateClassEntry.setDescription('This defines a row in the rate class info.')
rateClassName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassName.setStatus('current')
if mibBuilder.loadTexts: rateClassName.setDescription('The name of the rate class.')
rateClassMaxRatePerMin = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassMaxRatePerMin.setStatus('current')
if mibBuilder.loadTexts: rateClassMaxRatePerMin.setDescription('The maximum rate that requests may pass through this rate class (requests/min).')
rateClassMaxRatePerSec = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassMaxRatePerSec.setStatus('current')
if mibBuilder.loadTexts: rateClassMaxRatePerSec.setDescription('The maximum rate that requests may pass through this rate class (requests/sec).')
rateClassQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassQueueLength.setStatus('current')
if mibBuilder.loadTexts: rateClassQueueLength.setDescription('The current number of requests queued by this rate class.')
rateClassCurrentRate = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassCurrentRate.setStatus('current')
if mibBuilder.loadTexts: rateClassCurrentRate.setDescription('The average rate that requests are passing through this rate class.')
rateClassDropped = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassDropped.setStatus('current')
if mibBuilder.loadTexts: rateClassDropped.setDescription('Requests dropped from this rate class without being processed (e.g. timeouts).')
rateClassConnsEntered = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassConnsEntered.setStatus('current')
if mibBuilder.loadTexts: rateClassConnsEntered.setDescription('Connections that have entered the rate class and have been queued.')
rateClassConnsLeft = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 10, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rateClassConnsLeft.setStatus('current')
if mibBuilder.loadTexts: rateClassConnsLeft.setDescription('Connections that have left the rate class.')
userCounterNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounterNumber.setStatus('current')
if mibBuilder.loadTexts: userCounterNumber.setDescription('The number of user defined counters.')
userCounterTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 2), )
if mibBuilder.loadTexts: userCounterTable.setStatus('current')
if mibBuilder.loadTexts: userCounterTable.setDescription('This table holds the values for user defined counters.')
userCounterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "userCounterName"))
if mibBuilder.loadTexts: userCounterEntry.setStatus('current')
if mibBuilder.loadTexts: userCounterEntry.setDescription('This defines a row in the user counters table.')
userCounterName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounterName.setStatus('current')
if mibBuilder.loadTexts: userCounterName.setDescription('The name of the user counter.')
userCounterValue = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounterValue.setStatus('current')
if mibBuilder.loadTexts: userCounterValue.setDescription('The value of the user counter.')
userCounter64Table = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 3), )
if mibBuilder.loadTexts: userCounter64Table.setStatus('current')
if mibBuilder.loadTexts: userCounter64Table.setDescription('This table holds the values for user defined 64-bit counters.')
userCounter64Entry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 3, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "userCounter64Name"))
if mibBuilder.loadTexts: userCounter64Entry.setStatus('current')
if mibBuilder.loadTexts: userCounter64Entry.setDescription('This defines a row in the 64-bit user counters table.')
userCounter64Name = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 3, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounter64Name.setStatus('current')
if mibBuilder.loadTexts: userCounter64Name.setDescription('The name of the 64-bit user counter.')
userCounter64Value = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 11, 3, 1, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: userCounter64Value.setStatus('current')
if mibBuilder.loadTexts: userCounter64Value.setDescription('The value of the 64-bit user counter.')
interfaceNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceNumber.setStatus('current')
if mibBuilder.loadTexts: interfaceNumber.setDescription('The number of network interfaces.')
interfaceTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2), )
if mibBuilder.loadTexts: interfaceTable.setStatus('current')
if mibBuilder.loadTexts: interfaceTable.setDescription('This table gives statistics for the network interfaces on this system.')
interfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "interfaceName"))
if mibBuilder.loadTexts: interfaceEntry.setStatus('current')
if mibBuilder.loadTexts: interfaceEntry.setDescription('This defines a row in the network interfaces table.')
interfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceName.setStatus('current')
if mibBuilder.loadTexts: interfaceName.setDescription('The name of the network interface.')
interfaceRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxPackets.setStatus('current')
if mibBuilder.loadTexts: interfaceRxPackets.setDescription('The number of packets received by this interface.')
interfaceTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxPackets.setStatus('current')
if mibBuilder.loadTexts: interfaceTxPackets.setDescription('The number of packets transmitted by this interface.')
interfaceRxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxErrors.setStatus('current')
if mibBuilder.loadTexts: interfaceRxErrors.setDescription('The number of receive errors reported by this interface.')
interfaceTxErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxErrors.setStatus('current')
if mibBuilder.loadTexts: interfaceTxErrors.setDescription('The number of transmit errors reported by this interface.')
interfaceCollisions = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceCollisions.setStatus('current')
if mibBuilder.loadTexts: interfaceCollisions.setDescription('The number of collisions reported by this interface.')
interfaceRxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxBytesLo.setStatus('obsolete')
if mibBuilder.loadTexts: interfaceRxBytesLo.setDescription('Bytes received by this interface ( low 32bits ).')
interfaceRxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxBytesHi.setStatus('obsolete')
if mibBuilder.loadTexts: interfaceRxBytesHi.setDescription('Bytes received by this interface ( high 32bits ).')
interfaceTxBytesLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxBytesLo.setStatus('obsolete')
if mibBuilder.loadTexts: interfaceTxBytesLo.setDescription('Bytes transmitted by this interface ( low 32bits ).')
interfaceTxBytesHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxBytesHi.setStatus('obsolete')
if mibBuilder.loadTexts: interfaceTxBytesHi.setDescription('Bytes transmitted by this interface ( high 32bits ).')
interfaceRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceRxBytes.setStatus('current')
if mibBuilder.loadTexts: interfaceRxBytes.setDescription('Bytes received by this interface.')
interfaceTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 12, 2, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: interfaceTxBytes.setStatus('current')
if mibBuilder.loadTexts: interfaceTxBytes.setDescription('Bytes transmitted by this interface.')
webCacheHitsLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheHitsLo.setStatus('obsolete')
if mibBuilder.loadTexts: webCacheHitsLo.setDescription('Number of times a page has been successfully found in the web cache (low 32 bits).')
webCacheHitsHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheHitsHi.setStatus('obsolete')
if mibBuilder.loadTexts: webCacheHitsHi.setDescription('Number of times a page has been successfully found in the web cache (high 32 bits).')
webCacheMissesLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMissesLo.setStatus('obsolete')
if mibBuilder.loadTexts: webCacheMissesLo.setDescription('Number of times a page has not been found in the web cache (low 32 bits).')
webCacheMissesHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMissesHi.setStatus('obsolete')
if mibBuilder.loadTexts: webCacheMissesHi.setDescription('Number of times a page has not been found in the web cache (high 32 bits).')
webCacheLookupsLo = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheLookupsLo.setStatus('obsolete')
if mibBuilder.loadTexts: webCacheLookupsLo.setDescription('Number of times a page has been looked up in the web cache (low 32 bits).')
webCacheLookupsHi = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheLookupsHi.setStatus('obsolete')
if mibBuilder.loadTexts: webCacheLookupsHi.setDescription('Number of times a page has been looked up in the web cache (high 32 bits).')
webCacheMemUsed = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMemUsed.setStatus('current')
if mibBuilder.loadTexts: webCacheMemUsed.setDescription('Total memory used by the web cache in kilobytes.')
webCacheMemMaximum = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMemMaximum.setStatus('current')
if mibBuilder.loadTexts: webCacheMemMaximum.setDescription('The maximum amount of memory the web cache can use in kilobytes.')
webCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: webCacheHitRate.setDescription('The percentage of web cache lookups that succeeded.')
webCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheEntries.setStatus('current')
if mibBuilder.loadTexts: webCacheEntries.setDescription('The number of items in the web cache.')
webCacheMaxEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 11), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMaxEntries.setStatus('current')
if mibBuilder.loadTexts: webCacheMaxEntries.setDescription('The maximum number of items in the web cache.')
webCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheOldest.setStatus('current')
if mibBuilder.loadTexts: webCacheOldest.setDescription('The age of the oldest item in the web cache (in seconds).')
webCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheHits.setStatus('current')
if mibBuilder.loadTexts: webCacheHits.setDescription('Number of times a page has been successfully found in the web cache.')
webCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheMisses.setStatus('current')
if mibBuilder.loadTexts: webCacheMisses.setDescription('Number of times a page has not been found in the web cache.')
webCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 15), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheLookups.setStatus('current')
if mibBuilder.loadTexts: webCacheLookups.setDescription('Number of times a page has been looked up in the web cache.')
webCacheURLStoreAllocated = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 16), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheURLStoreAllocated.setStatus('current')
if mibBuilder.loadTexts: webCacheURLStoreAllocated.setDescription('Amount of allocated space in the web cache URL store.')
webCacheURLStoreFree = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheURLStoreFree.setStatus('current')
if mibBuilder.loadTexts: webCacheURLStoreFree.setDescription('Amount of free space in the web cache URL store.')
webCacheURLStoreSize = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 18), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheURLStoreSize.setStatus('current')
if mibBuilder.loadTexts: webCacheURLStoreSize.setDescription('Total amount of space in the web cache URL store.')
webCacheURLStoreTotalAllocations = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 19), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheURLStoreTotalAllocations.setStatus('current')
if mibBuilder.loadTexts: webCacheURLStoreTotalAllocations.setDescription('Total number of allocations for the web cache URL store.')
webCacheURLStoreTotalFailures = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 20), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheURLStoreTotalFailures.setStatus('current')
if mibBuilder.loadTexts: webCacheURLStoreTotalFailures.setDescription('Total number of allocation failures for the web cache URL store.')
webCacheURLStoreTotalFrees = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: webCacheURLStoreTotalFrees.setStatus('current')
if mibBuilder.loadTexts: webCacheURLStoreTotalFrees.setDescription('Total number of blocks freed in the web cache URL store.')
sslCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheHits.setStatus('current')
if mibBuilder.loadTexts: sslCacheHits.setDescription('Number of times a SSL entry has been successfully found in the server cache.')
sslCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheMisses.setStatus('current')
if mibBuilder.loadTexts: sslCacheMisses.setDescription('Number of times a SSL entry has not been available in the server cache.')
sslCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheLookups.setStatus('current')
if mibBuilder.loadTexts: sslCacheLookups.setDescription('Number of times a SSL entry has been looked up in the server cache.')
sslCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: sslCacheHitRate.setDescription('The percentage of SSL server cache lookups that succeeded.')
sslCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheEntries.setStatus('current')
if mibBuilder.loadTexts: sslCacheEntries.setDescription('The total number of SSL sessions stored in the server cache.')
sslCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheEntriesMax.setStatus('current')
if mibBuilder.loadTexts: sslCacheEntriesMax.setDescription('The maximum number of SSL entries in the server cache.')
sslCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 2, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslCacheOldest.setStatus('current')
if mibBuilder.loadTexts: sslCacheOldest.setDescription('The age of the oldest SSL session in the server cache (in seconds).')
aspSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheHits.setStatus('current')
if mibBuilder.loadTexts: aspSessionCacheHits.setDescription('Number of times a ASP session entry has been successfully found in the cache.')
aspSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheMisses.setStatus('current')
if mibBuilder.loadTexts: aspSessionCacheMisses.setDescription('Number of times a ASP session entry has not been available in the cache.')
aspSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheLookups.setStatus('current')
if mibBuilder.loadTexts: aspSessionCacheLookups.setDescription('Number of times a ASP session entry has been looked up in the cache.')
aspSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: aspSessionCacheHitRate.setDescription('The percentage of ASP session lookups that succeeded.')
aspSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheEntries.setStatus('current')
if mibBuilder.loadTexts: aspSessionCacheEntries.setDescription('The total number of ASP sessions stored in the cache.')
aspSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheEntriesMax.setStatus('current')
if mibBuilder.loadTexts: aspSessionCacheEntriesMax.setDescription('The maximum number of ASP sessions in the cache.')
aspSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 3, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: aspSessionCacheOldest.setStatus('current')
if mibBuilder.loadTexts: aspSessionCacheOldest.setDescription('The age of the oldest ASP session in the cache (in seconds).')
ipSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheHits.setStatus('current')
if mibBuilder.loadTexts: ipSessionCacheHits.setDescription('Number of times a IP session entry has been successfully found in the cache.')
ipSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheMisses.setStatus('current')
if mibBuilder.loadTexts: ipSessionCacheMisses.setDescription('Number of times a IP session entry has not been available in the cache.')
ipSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheLookups.setStatus('current')
if mibBuilder.loadTexts: ipSessionCacheLookups.setDescription('Number of times a IP session entry has been looked up in the cache.')
ipSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: ipSessionCacheHitRate.setDescription('The percentage of IP session lookups that succeeded.')
ipSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheEntries.setStatus('current')
if mibBuilder.loadTexts: ipSessionCacheEntries.setDescription('The total number of IP sessions stored in the cache.')
ipSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheEntriesMax.setStatus('current')
if mibBuilder.loadTexts: ipSessionCacheEntriesMax.setDescription('The maximum number of IP sessions in the cache.')
ipSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 4, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipSessionCacheOldest.setStatus('current')
if mibBuilder.loadTexts: ipSessionCacheOldest.setDescription('The age of the oldest IP session in the cache (in seconds).')
j2eeSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheHits.setStatus('current')
if mibBuilder.loadTexts: j2eeSessionCacheHits.setDescription('Number of times a J2EE session entry has been successfully found in the cache.')
j2eeSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheMisses.setStatus('current')
if mibBuilder.loadTexts: j2eeSessionCacheMisses.setDescription('Number of times a J2EE session entry has not been available in the cache.')
j2eeSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheLookups.setStatus('current')
if mibBuilder.loadTexts: j2eeSessionCacheLookups.setDescription('Number of times a J2EE session entry has been looked up in the cache.')
j2eeSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: j2eeSessionCacheHitRate.setDescription('The percentage of J2EE session lookups that succeeded.')
j2eeSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheEntries.setStatus('current')
if mibBuilder.loadTexts: j2eeSessionCacheEntries.setDescription('The total number of J2EE sessions stored in the cache.')
j2eeSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheEntriesMax.setStatus('current')
if mibBuilder.loadTexts: j2eeSessionCacheEntriesMax.setDescription('The maximum number of J2EE sessions in the cache.')
j2eeSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 5, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2eeSessionCacheOldest.setStatus('current')
if mibBuilder.loadTexts: j2eeSessionCacheOldest.setDescription('The age of the oldest J2EE session in the cache (in seconds).')
uniSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheHits.setStatus('current')
if mibBuilder.loadTexts: uniSessionCacheHits.setDescription('Number of times a universal session entry has been successfully found in the cache.')
uniSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheMisses.setStatus('current')
if mibBuilder.loadTexts: uniSessionCacheMisses.setDescription('Number of times a universal session entry has not been available in the cache.')
uniSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheLookups.setStatus('current')
if mibBuilder.loadTexts: uniSessionCacheLookups.setDescription('Number of times a universal session entry has been looked up in the cache.')
uniSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: uniSessionCacheHitRate.setDescription('The percentage of universal session lookups that succeeded.')
uniSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheEntries.setStatus('current')
if mibBuilder.loadTexts: uniSessionCacheEntries.setDescription('The total number of universal sessions stored in the cache.')
uniSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheEntriesMax.setStatus('current')
if mibBuilder.loadTexts: uniSessionCacheEntriesMax.setDescription('The maximum number of universal sessions in the cache.')
uniSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 6, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: uniSessionCacheOldest.setStatus('current')
if mibBuilder.loadTexts: uniSessionCacheOldest.setDescription('The age of the oldest universal session in the cache (in seconds).')
sslSessionCacheHits = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheHits.setStatus('current')
if mibBuilder.loadTexts: sslSessionCacheHits.setDescription('Number of times a SSL session persistence entry has been successfully found in the cache.')
sslSessionCacheMisses = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheMisses.setStatus('current')
if mibBuilder.loadTexts: sslSessionCacheMisses.setDescription('Number of times a SSL session persistence entry has not been available in the cache.')
sslSessionCacheLookups = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheLookups.setStatus('current')
if mibBuilder.loadTexts: sslSessionCacheLookups.setDescription('Number of times a SSL session persistence entry has been looked up in the cache.')
sslSessionCacheHitRate = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheHitRate.setStatus('current')
if mibBuilder.loadTexts: sslSessionCacheHitRate.setDescription('The percentage of SSL session persistence lookups that succeeded.')
sslSessionCacheEntries = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheEntries.setStatus('current')
if mibBuilder.loadTexts: sslSessionCacheEntries.setDescription('The total number of SSL session persistence entries stored in the cache.')
sslSessionCacheEntriesMax = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheEntriesMax.setStatus('current')
if mibBuilder.loadTexts: sslSessionCacheEntriesMax.setDescription('The maximum number of SSL session persistence entries in the cache.')
sslSessionCacheOldest = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 17, 7, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslSessionCacheOldest.setStatus('current')
if mibBuilder.loadTexts: sslSessionCacheOldest.setDescription('The age of the oldest SSL session in the cache (in seconds).')
sslOcspStaplingCacheCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 1), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingCacheCount.setStatus('current')
if mibBuilder.loadTexts: sslOcspStaplingCacheCount.setDescription('The number of entries in the OCSP stapling cache.')
sslOcspStaplingCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingCount.setStatus('current')
if mibBuilder.loadTexts: sslOcspStaplingCount.setDescription('The number of outgoing OCSP requests for OCSP stapling.')
sslOcspStaplingSuccessCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingSuccessCount.setStatus('current')
if mibBuilder.loadTexts: sslOcspStaplingSuccessCount.setDescription('The number of successful outgoing OCSP requests for OCSP stapling.')
sslOcspStaplingFailureCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingFailureCount.setStatus('current')
if mibBuilder.loadTexts: sslOcspStaplingFailureCount.setDescription('The number of failed outgoing OCSP requests for OCSP stapling.')
sslOcspStaplingGoodCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingGoodCount.setStatus('current')
if mibBuilder.loadTexts: sslOcspStaplingGoodCount.setDescription("The number of 'good' OCSP responses for OCSP stapling.")
sslOcspStaplingRevokedCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingRevokedCount.setStatus('current')
if mibBuilder.loadTexts: sslOcspStaplingRevokedCount.setDescription("The number of 'revoked' OCSP responses for OCSP stapling.")
sslOcspStaplingUnknownCount = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 32, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sslOcspStaplingUnknownCount.setStatus('current')
if mibBuilder.loadTexts: sslOcspStaplingUnknownCount.setDescription("The number of 'unknown' OCSP requests for OCSP stapling.")
ruleNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleNumber.setStatus('current')
if mibBuilder.loadTexts: ruleNumber.setDescription('The number of TrafficScript rules.')
ruleTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2), )
if mibBuilder.loadTexts: ruleTable.setStatus('current')
if mibBuilder.loadTexts: ruleTable.setDescription('This table provides information and statistics for TrafficScript rules.')
ruleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: ruleEntry.setStatus('current')
if mibBuilder.loadTexts: ruleEntry.setDescription('This defines a row in the rules table.')
ruleName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleName.setStatus('current')
if mibBuilder.loadTexts: ruleName.setDescription('The name of the TrafficScript rule.')
ruleExecutions = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleExecutions.setStatus('current')
if mibBuilder.loadTexts: ruleExecutions.setDescription('Number of times this TrafficScript rule has been executed.')
ruleAborts = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleAborts.setStatus('current')
if mibBuilder.loadTexts: ruleAborts.setDescription('Number of times this TrafficScript rule has aborted.')
ruleResponds = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleResponds.setStatus('current')
if mibBuilder.loadTexts: ruleResponds.setDescription('Number of times this TrafficScript rule has responded directly to the client.')
rulePoolSelect = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rulePoolSelect.setStatus('current')
if mibBuilder.loadTexts: rulePoolSelect.setDescription('Number of times this TrafficScript rule has selected a pool to use.')
ruleRetries = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleRetries.setStatus('current')
if mibBuilder.loadTexts: ruleRetries.setDescription('Number of times this TrafficScript rule has forced the request to be retried.')
ruleDiscards = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleDiscards.setStatus('current')
if mibBuilder.loadTexts: ruleDiscards.setDescription('Number of times this TrafficScript rule has discarded the connection.')
ruleExecutionTimeWarnings = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 18, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ruleExecutionTimeWarnings.setStatus('current')
if mibBuilder.loadTexts: ruleExecutionTimeWarnings.setDescription('Number of times this TrafficScript rule has exceeded the execution time warning threshold.')
monitorNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorNumber.setStatus('current')
if mibBuilder.loadTexts: monitorNumber.setDescription('The number of Monitors.')
monitorTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19, 2), )
if mibBuilder.loadTexts: monitorTable.setStatus('current')
if mibBuilder.loadTexts: monitorTable.setDescription('This table provides information and statistics on Monitors.')
monitorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "monitorName"))
if mibBuilder.loadTexts: monitorEntry.setStatus('current')
if mibBuilder.loadTexts: monitorEntry.setDescription('This defines a row in the monitors table.')
monitorName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 19, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: monitorName.setStatus('current')
if mibBuilder.loadTexts: monitorName.setDescription('The name of the monitor.')
licensekeyNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensekeyNumber.setStatus('current')
if mibBuilder.loadTexts: licensekeyNumber.setDescription('The number of License keys.')
licensekeyTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20, 2), )
if mibBuilder.loadTexts: licensekeyTable.setStatus('current')
if mibBuilder.loadTexts: licensekeyTable.setDescription('This table provides information and statistics on License Keys.')
licensekeyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: licensekeyEntry.setStatus('current')
if mibBuilder.loadTexts: licensekeyEntry.setDescription('This defines a row in the license keys table.')
licensekeyName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 20, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: licensekeyName.setStatus('current')
if mibBuilder.loadTexts: licensekeyName.setDescription('The name of the License Key.')
zxtmNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxtmNumber.setStatus('current')
if mibBuilder.loadTexts: zxtmNumber.setDescription('The number of traffic managers in the cluster.')
zxtmTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21, 2), )
if mibBuilder.loadTexts: zxtmTable.setStatus('current')
if mibBuilder.loadTexts: zxtmTable.setDescription('This table provides information and statistics on traffic managers.')
zxtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "zxtmName"))
if mibBuilder.loadTexts: zxtmEntry.setStatus('current')
if mibBuilder.loadTexts: zxtmEntry.setDescription('This defines a row in the traffic managers table.')
zxtmName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 21, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: zxtmName.setStatus('current')
if mibBuilder.loadTexts: zxtmName.setDescription('The name of the traffic manager.')
glbServiceNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceNumber.setStatus('current')
if mibBuilder.loadTexts: glbServiceNumber.setDescription('The number of GLB Services on this system.')
glbServiceTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2), )
if mibBuilder.loadTexts: glbServiceTable.setStatus('current')
if mibBuilder.loadTexts: glbServiceTable.setDescription('This table provides information and statistics for GLB Services.')
glbServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbServiceEntry.setStatus('current')
if mibBuilder.loadTexts: glbServiceEntry.setDescription('This defines a row in the GLB Services table.')
glbServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceName.setStatus('current')
if mibBuilder.loadTexts: glbServiceName.setDescription('The name of the GLB Service.')
glbServiceResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceResponses.setStatus('current')
if mibBuilder.loadTexts: glbServiceResponses.setDescription('Number of A records this GLB Service has altered.')
glbServiceUnmodified = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceUnmodified.setStatus('current')
if mibBuilder.loadTexts: glbServiceUnmodified.setDescription('Number of A records this GLB Service has passed through unmodified.')
glbServiceDiscarded = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 24, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: glbServiceDiscarded.setStatus('current')
if mibBuilder.loadTexts: glbServiceDiscarded.setDescription('Number of A records this GLB Service has discarded.')
perLocationServiceTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1), )
if mibBuilder.loadTexts: perLocationServiceTable.setStatus('current')
if mibBuilder.loadTexts: perLocationServiceTable.setDescription('This table provides information and statistics for GLB Services on a per location basis.')
perLocationServiceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "perLocationServiceLocationName"), (0, "ZXTM-MIB-SMIv2", "perLocationServiceName"))
if mibBuilder.loadTexts: perLocationServiceEntry.setStatus('current')
if mibBuilder.loadTexts: perLocationServiceEntry.setDescription('This defines a row in the per-location table.')
perLocationServiceLocationName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceLocationName.setStatus('current')
if mibBuilder.loadTexts: perLocationServiceLocationName.setDescription('The name of the location.')
perLocationServiceLocationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceLocationCode.setStatus('current')
if mibBuilder.loadTexts: perLocationServiceLocationCode.setDescription('The code for the location.')
perLocationServiceName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceName.setStatus('current')
if mibBuilder.loadTexts: perLocationServiceName.setDescription('The name of the GLB Service.')
perLocationServiceDraining = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("draining", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceDraining.setStatus('current')
if mibBuilder.loadTexts: perLocationServiceDraining.setDescription('The draining state of this location for this GLB Service.')
perLocationServiceState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alive", 1), ("dead", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceState.setStatus('current')
if mibBuilder.loadTexts: perLocationServiceState.setDescription('The state of this location for this GLB Service.')
perLocationServiceFrontendState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alive", 1), ("dead", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceFrontendState.setStatus('current')
if mibBuilder.loadTexts: perLocationServiceFrontendState.setDescription('The frontend state of this location for this GLB Service.')
perLocationServiceMonitorState = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("alive", 1), ("dead", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceMonitorState.setStatus('current')
if mibBuilder.loadTexts: perLocationServiceMonitorState.setDescription('The monitor state of this location for this GLB Service.')
perLocationServiceLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 8), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceLoad.setStatus('current')
if mibBuilder.loadTexts: perLocationServiceLoad.setDescription('The load metric for this location for this GLB Service.')
perLocationServiceResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 25, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: perLocationServiceResponses.setStatus('current')
if mibBuilder.loadTexts: perLocationServiceResponses.setDescription('Number of A records that have been altered to point to this location for this GLB Service.')
locationTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1), )
if mibBuilder.loadTexts: locationTable.setStatus('current')
if mibBuilder.loadTexts: locationTable.setDescription('This table provides information and statistics for GLB Services on a per location basis.')
locationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "locationName"))
if mibBuilder.loadTexts: locationEntry.setStatus('current')
if mibBuilder.loadTexts: locationEntry.setDescription('This defines a row in the per-location table.')
locationName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locationName.setStatus('current')
if mibBuilder.loadTexts: locationName.setDescription('The name of the location.')
locationCode = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: locationCode.setStatus('current')
if mibBuilder.loadTexts: locationCode.setDescription('The code for the location.')
locationLoad = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1, 3), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locationLoad.setStatus('current')
if mibBuilder.loadTexts: locationLoad.setDescription('The mean load metric for this location.')
locationResponses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 26, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: locationResponses.setStatus('current')
if mibBuilder.loadTexts: locationResponses.setDescription('Number of A records that have been altered to point to this location.')
eventNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventNumber.setStatus('current')
if mibBuilder.loadTexts: eventNumber.setDescription('The number of event configurations.')
eventTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 2), )
if mibBuilder.loadTexts: eventTable.setStatus('current')
if mibBuilder.loadTexts: eventTable.setDescription('This table gives information on the event configurations in the traffic manager.')
eventEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "eventName"))
if mibBuilder.loadTexts: eventEntry.setStatus('current')
if mibBuilder.loadTexts: eventEntry.setDescription('This defines a row in the events table.')
eventName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventName.setStatus('current')
if mibBuilder.loadTexts: eventName.setDescription('The name of the event configuration.')
eventsMatched = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 13, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: eventsMatched.setStatus('current')
if mibBuilder.loadTexts: eventsMatched.setDescription('Number of times this event configuration has matched.')
actionNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionNumber.setStatus('current')
if mibBuilder.loadTexts: actionNumber.setDescription('The number of actions configured in the traffic manager.')
actionTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 2), )
if mibBuilder.loadTexts: actionTable.setStatus('current')
if mibBuilder.loadTexts: actionTable.setDescription('This table gives information on the action configurations in the traffic manager.')
actionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "actionName"))
if mibBuilder.loadTexts: actionEntry.setStatus('current')
if mibBuilder.loadTexts: actionEntry.setDescription('This defines a row in the actions table.')
actionName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionName.setStatus('current')
if mibBuilder.loadTexts: actionName.setDescription('The name of the action.')
actionsProcessed = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 14, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionsProcessed.setStatus('current')
if mibBuilder.loadTexts: actionsProcessed.setDescription('Number of times this action has been processed.')
fullLogLine = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: fullLogLine.setStatus('current')
if mibBuilder.loadTexts: fullLogLine.setDescription('The full log line of an event (for traps).')
confName = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: confName.setStatus('current')
if mibBuilder.loadTexts: confName.setDescription('The name of the configuration file affected (for traps).')
customEventName = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: customEventName.setStatus('current')
if mibBuilder.loadTexts: customEventName.setDescription('The name of the Custom Event (for traps).')
domainName = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 22, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: domainName.setStatus('current')
if mibBuilder.loadTexts: domainName.setDescription('The DNS domain name (for traps).')
testaction = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 1)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "actionName"))
if mibBuilder.loadTexts: testaction.setStatus('current')
if mibBuilder.loadTexts: testaction.setDescription('Testing configuration for an action (emitted when testing an action in the UI)')
running = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 2)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: running.setStatus('current')
if mibBuilder.loadTexts: running.setDescription('Software is running')
fewfreefds = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 3)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: fewfreefds.setStatus('current')
if mibBuilder.loadTexts: fewfreefds.setDescription('Running out of free file descriptors')
restartrequired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 4)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: restartrequired.setStatus('current')
if mibBuilder.loadTexts: restartrequired.setDescription('Software must be restarted to apply configuration changes')
upgradereboot = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 288)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: upgradereboot.setStatus('current')
if mibBuilder.loadTexts: upgradereboot.setDescription('Virtual Traffic Manager Appliance reboot required')
sysctlreboot = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 289)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: sysctlreboot.setStatus('current')
if mibBuilder.loadTexts: sysctlreboot.setDescription('Virtual Traffic Manager Appliance reboot required')
upgraderestart = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 290)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: upgraderestart.setStatus('current')
if mibBuilder.loadTexts: upgraderestart.setDescription('Virtual Traffic Manager software restart required')
unspecifiedreboot = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 291)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: unspecifiedreboot.setStatus('current')
if mibBuilder.loadTexts: unspecifiedreboot.setDescription('Virtual Traffic Manager restart/reboot required')
timemovedback = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 5)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: timemovedback.setStatus('current')
if mibBuilder.loadTexts: timemovedback.setDescription('Time has been moved back')
sslfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 6)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: sslfail.setStatus('current')
if mibBuilder.loadTexts: sslfail.setDescription('One or more SSL connections from clients failed recently')
hardware = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 7)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: hardware.setStatus('deprecated')
if mibBuilder.loadTexts: hardware.setDescription("Appliance hardware notification. Deprecated, replaced with 'appliance'")
zxtmswerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 8)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: zxtmswerror.setStatus('current')
if mibBuilder.loadTexts: zxtmswerror.setDescription('Internal software error')
customevent = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 9)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "customEventName"))
if mibBuilder.loadTexts: customevent.setStatus('current')
if mibBuilder.loadTexts: customevent.setDescription("A custom event was emitted using the TrafficScript 'event.emit()' function")
versionmismatch = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 10)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: versionmismatch.setStatus('current')
if mibBuilder.loadTexts: versionmismatch.setDescription('Configuration update refused: traffic manager version mismatch')
autherror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 114)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autherror.setStatus('current')
if mibBuilder.loadTexts: autherror.setDescription('An error occurred during user authentication')
rebootrequired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 233)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: rebootrequired.setStatus('obsolete')
if mibBuilder.loadTexts: rebootrequired.setDescription('Machine must be rebooted to apply configuration changes')
appliance = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 236)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: appliance.setStatus('current')
if mibBuilder.loadTexts: appliance.setDescription('Appliance notification')
machineok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 11)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "zxtmName"))
if mibBuilder.loadTexts: machineok.setStatus('current')
if mibBuilder.loadTexts: machineok.setDescription('Remote machine is now working')
machinetimeout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 12)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "zxtmName"))
if mibBuilder.loadTexts: machinetimeout.setStatus('current')
if mibBuilder.loadTexts: machinetimeout.setDescription('Remote machine has timed out and been marked as failed')
machinefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 13)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "zxtmName"))
if mibBuilder.loadTexts: machinefail.setStatus('current')
if mibBuilder.loadTexts: machinefail.setDescription('Remote machine has failed')
allmachinesok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 14)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: allmachinesok.setStatus('current')
if mibBuilder.loadTexts: allmachinesok.setDescription('All machines are working')
flipperbackendsworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 15)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: flipperbackendsworking.setStatus('current')
if mibBuilder.loadTexts: flipperbackendsworking.setDescription('Back-end nodes are now working')
flipperfrontendsworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 16)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: flipperfrontendsworking.setStatus('current')
if mibBuilder.loadTexts: flipperfrontendsworking.setDescription('Frontend machines are now working')
pingbackendfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 17)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: pingbackendfail.setStatus('current')
if mibBuilder.loadTexts: pingbackendfail.setDescription('Failed to ping back-end nodes')
pingfrontendfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 18)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: pingfrontendfail.setStatus('current')
if mibBuilder.loadTexts: pingfrontendfail.setDescription('Failed to ping any of the machines used to check the front-end connectivity')
pinggwfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 19)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: pinggwfail.setStatus('current')
if mibBuilder.loadTexts: pinggwfail.setDescription('Failed to ping default gateway')
pingsendfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 237)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: pingsendfail.setStatus('current')
if mibBuilder.loadTexts: pingsendfail.setDescription('Failed to send ping packets')
statebaddata = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 20)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: statebaddata.setStatus('current')
if mibBuilder.loadTexts: statebaddata.setDescription('Received an invalid response from another cluster member')
stateconnfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 21)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: stateconnfail.setStatus('current')
if mibBuilder.loadTexts: stateconnfail.setDescription('Failed to connect to another cluster member for state sharing')
stateok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 22)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: stateok.setStatus('current')
if mibBuilder.loadTexts: stateok.setDescription('Successfully connected to another cluster member for state sharing')
statereadfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 23)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: statereadfail.setStatus('current')
if mibBuilder.loadTexts: statereadfail.setDescription('Reading state data from another cluster member failed')
statetimeout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 24)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: statetimeout.setStatus('current')
if mibBuilder.loadTexts: statetimeout.setDescription('Timeout while sending state data to another cluster member')
stateunexpected = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 25)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: stateunexpected.setStatus('current')
if mibBuilder.loadTexts: stateunexpected.setDescription('Received unexpected state data from another cluster member')
statewritefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 26)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: statewritefail.setStatus('current')
if mibBuilder.loadTexts: statewritefail.setDescription('Writing state data to another cluster member failed')
activatealldead = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 107)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: activatealldead.setStatus('current')
if mibBuilder.loadTexts: activatealldead.setDescription('Activating this machine automatically because it is the only working machine in its Traffic IP Groups')
machinerecovered = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 108)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: machinerecovered.setStatus('current')
if mibBuilder.loadTexts: machinerecovered.setDescription('Remote machine has recovered and can raise Traffic IP addresses')
flipperrecovered = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 109)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: flipperrecovered.setStatus('current')
if mibBuilder.loadTexts: flipperrecovered.setDescription('Machine is ready to raise Traffic IP addresses')
activatedautomatically = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 110)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: activatedautomatically.setStatus('current')
if mibBuilder.loadTexts: activatedautomatically.setDescription('Machine has recovered and been activated automatically because it would cause no service disruption')
zclustermoderr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 111)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: zclustermoderr.setStatus('current')
if mibBuilder.loadTexts: zclustermoderr.setDescription('An error occurred when using the zcluster Multi-Hosted IP kernel module')
ec2flipperraiselocalworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 112)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2flipperraiselocalworking.setStatus('current')
if mibBuilder.loadTexts: ec2flipperraiselocalworking.setDescription('Moving EC2 IP Address; local machine is working')
ec2flipperraiseothersdead = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 113)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2flipperraiseothersdead.setStatus('current')
if mibBuilder.loadTexts: ec2flipperraiseothersdead.setDescription('Moving EC2 IP Address; other machines have failed')
ec2iperr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 130)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2iperr.setStatus('current')
if mibBuilder.loadTexts: ec2iperr.setDescription('Problem occurred when managing an EC2 IP address')
ec2vpceipassocerr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 207)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2vpceipassocerr.setStatus('obsolete')
if mibBuilder.loadTexts: ec2vpceipassocerr.setDescription('Problem occurred while getting a list of private IP addresses and their EIP associations')
ec2vpciderr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 208)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2vpciderr.setStatus('obsolete')
if mibBuilder.loadTexts: ec2vpciderr.setDescription('Problem occurred while getting VPCID')
dropec2ipwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 131)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: dropec2ipwarn.setStatus('current')
if mibBuilder.loadTexts: dropec2ipwarn.setDescription('Removing EC2 IP Address from all machines; it is no longer a part of any Traffic IP Groups')
ec2nopublicip = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 132)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2nopublicip.setStatus('current')
if mibBuilder.loadTexts: ec2nopublicip.setDescription('Cannot raise Elastic IP on this machine until EC2 provides it with a public IP address')
ec2nosecondaryprivateip = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 206)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2nosecondaryprivateip.setStatus('current')
if mibBuilder.loadTexts: ec2nosecondaryprivateip.setDescription('Cannot raise Elastic IP on this machine as no suitable secondary IP is available on the allowed network card(s)')
ec2dataretrievalfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 266)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2dataretrievalfailed.setStatus('current')
if mibBuilder.loadTexts: ec2dataretrievalfailed.setDescription('Traffic manager failed to get the required data from Amazon servers')
ec2dataretrievalsuccessful = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 267)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2dataretrievalsuccessful.setStatus('current')
if mibBuilder.loadTexts: ec2dataretrievalsuccessful.setDescription('Traffic manager has now successfully retrieved the required data from Amazon servers')
ec2initialized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 287)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ec2initialized.setStatus('current')
if mibBuilder.loadTexts: ec2initialized.setDescription('The EC2 instance is now initialized')
gcedataretrievalfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 292)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: gcedataretrievalfailed.setStatus('current')
if mibBuilder.loadTexts: gcedataretrievalfailed.setDescription('Traffic manager failed to get the required data from GCE instance')
gcedataretrievalsuccessful = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 293)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: gcedataretrievalsuccessful.setStatus('current')
if mibBuilder.loadTexts: gcedataretrievalsuccessful.setDescription('Traffic manager has now successfully retrieved the required data from GCE instance')
multihostload = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 133)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: multihostload.setStatus('current')
if mibBuilder.loadTexts: multihostload.setDescription('The amount of load handled by the local machine destined for this Traffic IP has changed')
flipperraiseremotedropped = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 198)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: flipperraiseremotedropped.setStatus('current')
if mibBuilder.loadTexts: flipperraiseremotedropped.setDescription('This Traffic Manager has re-raised traffic IP addresses as the remote machine which was hosting them has dropped them')
autofailbacktimerstarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 294)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autofailbacktimerstarted.setStatus('current')
if mibBuilder.loadTexts: autofailbacktimerstarted.setDescription('Auto-failback wait period started')
autofailbacktimerstopped = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 295)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autofailbacktimerstopped.setStatus('current')
if mibBuilder.loadTexts: autofailbacktimerstopped.setDescription('Auto-failback delay timer stopped due to system failure')
autofailbackafterdelay = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 296)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autofailbackafterdelay.setStatus('current')
if mibBuilder.loadTexts: autofailbackafterdelay.setDescription('Automatic failback after delay')
autofailbacktimercancelled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 297)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autofailbacktimercancelled.setStatus('current')
if mibBuilder.loadTexts: autofailbacktimercancelled.setDescription('Auto-failback delay timer cancelled')
sslhwfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 27)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: sslhwfail.setStatus('current')
if mibBuilder.loadTexts: sslhwfail.setDescription('SSL hardware support failed')
sslhwrestart = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 28)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: sslhwrestart.setStatus('current')
if mibBuilder.loadTexts: sslhwrestart.setDescription('SSL hardware support restarted')
sslhwstart = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 29)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: sslhwstart.setStatus('current')
if mibBuilder.loadTexts: sslhwstart.setDescription('SSL hardware support started')
confdel = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 30)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"))
if mibBuilder.loadTexts: confdel.setStatus('current')
if mibBuilder.loadTexts: confdel.setDescription('Configuration file deleted')
confmod = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 31)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"))
if mibBuilder.loadTexts: confmod.setStatus('current')
if mibBuilder.loadTexts: confmod.setDescription('Configuration file modified')
confadd = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 32)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"))
if mibBuilder.loadTexts: confadd.setStatus('current')
if mibBuilder.loadTexts: confadd.setDescription('Configuration file added')
confok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 33)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"))
if mibBuilder.loadTexts: confok.setStatus('current')
if mibBuilder.loadTexts: confok.setDescription('Configuration file now OK')
confreptimeout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 178)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: confreptimeout.setStatus('current')
if mibBuilder.loadTexts: confreptimeout.setDescription('Replication of configuration has timed out')
confrepfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 179)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: confrepfailed.setStatus('current')
if mibBuilder.loadTexts: confrepfailed.setDescription('Replication of configuration has failed')
javadied = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 34)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: javadied.setStatus('current')
if mibBuilder.loadTexts: javadied.setDescription('Java runner died')
javastop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 35)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: javastop.setStatus('current')
if mibBuilder.loadTexts: javastop.setDescription('Java support has stopped')
javastartfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 36)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: javastartfail.setStatus('current')
if mibBuilder.loadTexts: javastartfail.setDescription('Java runner failed to start')
javaterminatefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 37)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: javaterminatefail.setStatus('current')
if mibBuilder.loadTexts: javaterminatefail.setDescription('Java runner failed to terminate')
javanotfound = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 38)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: javanotfound.setStatus('current')
if mibBuilder.loadTexts: javanotfound.setDescription('Cannot start Java runner, program not found')
javastarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 39)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: javastarted.setStatus('current')
if mibBuilder.loadTexts: javastarted.setDescription('Java runner started')
servleterror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 40)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: servleterror.setStatus('current')
if mibBuilder.loadTexts: servleterror.setDescription('Servlet encountered an error')
monitorfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 41)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "monitorName"))
if mibBuilder.loadTexts: monitorfail.setStatus('current')
if mibBuilder.loadTexts: monitorfail.setDescription('Monitor has detected a failure')
monitorok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 42)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "monitorName"))
if mibBuilder.loadTexts: monitorok.setStatus('current')
if mibBuilder.loadTexts: monitorok.setDescription('Monitor is working')
rulexmlerr = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 43)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulexmlerr.setStatus('current')
if mibBuilder.loadTexts: rulexmlerr.setDescription('Rule encountered an XML error')
pooluseunknown = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 44)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: pooluseunknown.setStatus('current')
if mibBuilder.loadTexts: pooluseunknown.setDescription('Rule selected an unknown pool')
ruleabort = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 45)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: ruleabort.setStatus('current')
if mibBuilder.loadTexts: ruleabort.setDescription('Rule aborted during execution')
rulebufferlarge = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 46)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulebufferlarge.setStatus('current')
if mibBuilder.loadTexts: rulebufferlarge.setDescription('Rule has buffered more data than expected')
rulebodycomperror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 47)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulebodycomperror.setStatus('current')
if mibBuilder.loadTexts: rulebodycomperror.setDescription('Rule encountered invalid data while uncompressing response')
forwardproxybadhost = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 48)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: forwardproxybadhost.setStatus('current')
if mibBuilder.loadTexts: forwardproxybadhost.setDescription('Rule selected an unresolvable host')
invalidemit = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 49)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: invalidemit.setStatus('current')
if mibBuilder.loadTexts: invalidemit.setDescription('Rule used event.emit() with an invalid custom event')
rulenopersistence = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 50)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulenopersistence.setStatus('current')
if mibBuilder.loadTexts: rulenopersistence.setDescription('Rule selected an unknown session persistence class')
rulelogmsginfo = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 51)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulelogmsginfo.setStatus('current')
if mibBuilder.loadTexts: rulelogmsginfo.setDescription('Rule logged an info message using log.info')
rulelogmsgwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 52)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulelogmsgwarn.setStatus('current')
if mibBuilder.loadTexts: rulelogmsgwarn.setDescription('Rule logged a warning message using log.warn')
rulelogmsgserious = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 53)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulelogmsgserious.setStatus('current')
if mibBuilder.loadTexts: rulelogmsgserious.setDescription('Rule logged an error message using log.error')
norate = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 54)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: norate.setStatus('current')
if mibBuilder.loadTexts: norate.setDescription('Rule selected an unknown rate shaping class')
poolactivenodesunknown = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 55)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: poolactivenodesunknown.setStatus('current')
if mibBuilder.loadTexts: poolactivenodesunknown.setDescription('Rule references an unknown pool via pool.activenodes')
datastorefull = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 56)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: datastorefull.setStatus('current')
if mibBuilder.loadTexts: datastorefull.setDescription('data.set() has run out of space')
ruleoverrun = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 242)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: ruleoverrun.setStatus('current')
if mibBuilder.loadTexts: ruleoverrun.setDescription('Rule exceeded execution time warning threshold')
rulestreamerrortoomuch = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 210)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulestreamerrortoomuch.setStatus('current')
if mibBuilder.loadTexts: rulestreamerrortoomuch.setDescription('Rule supplied too much data in HTTP stream')
rulestreamerrornotenough = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 211)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulestreamerrornotenough.setStatus('current')
if mibBuilder.loadTexts: rulestreamerrornotenough.setDescription('Rule did not supply enough data in HTTP stream')
rulestreamerrorprocessfailure = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 212)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulestreamerrorprocessfailure.setStatus('current')
if mibBuilder.loadTexts: rulestreamerrorprocessfailure.setDescription('Data supplied to HTTP stream could not be processed')
rulestreamerrornotstarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 213)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulestreamerrornotstarted.setStatus('current')
if mibBuilder.loadTexts: rulestreamerrornotstarted.setDescription('Attempt to stream data or finish a stream before streaming had been initialized')
rulestreamerrornotfinished = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 214)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulestreamerrornotfinished.setStatus('current')
if mibBuilder.loadTexts: rulestreamerrornotfinished.setDescription('Attempt to initialize HTTP stream before previous stream had finished')
rulestreamerrorinternal = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 215)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulestreamerrorinternal.setStatus('current')
if mibBuilder.loadTexts: rulestreamerrorinternal.setDescription('Internal error while processing HTTP stream')
rulestreamerrorgetresponse = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 216)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: rulestreamerrorgetresponse.setStatus('current')
if mibBuilder.loadTexts: rulestreamerrorgetresponse.setDescription('Attempt to use http.getResponse or http.getResponseBody after http.stream.startResponse')
rulesinvalidrequestbody = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 217)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: rulesinvalidrequestbody.setStatus('current')
if mibBuilder.loadTexts: rulesinvalidrequestbody.setDescription('Client sent invalid HTTP request body')
aptimizeuseunknownprofile = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 222)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: aptimizeuseunknownprofile.setStatus('current')
if mibBuilder.loadTexts: aptimizeuseunknownprofile.setDescription('Rule selected an unknown Web Accelerator profile')
aptimizedisabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 223)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: aptimizedisabled.setStatus('current')
if mibBuilder.loadTexts: aptimizedisabled.setDescription('Rule attempted to use Web Accelerator but it is not enabled')
aptimizeuseunknownscope = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 224)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: aptimizeuseunknownscope.setStatus('current')
if mibBuilder.loadTexts: aptimizeuseunknownscope.setDescription('Rule selected an unknown Web Accelerator scope')
datalocalstorefull = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 228)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: datalocalstorefull.setStatus('current')
if mibBuilder.loadTexts: datalocalstorefull.setDescription('data.local.set() has run out of space')
serviceruleabort = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 218)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: serviceruleabort.setStatus('current')
if mibBuilder.loadTexts: serviceruleabort.setDescription('GLB service rule aborted during execution')
servicerulelocunknown = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 219)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: servicerulelocunknown.setStatus('current')
if mibBuilder.loadTexts: servicerulelocunknown.setDescription('GLB service rule specified an unknown location')
servicerulelocnotconfigured = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 220)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: servicerulelocnotconfigured.setStatus('current')
if mibBuilder.loadTexts: servicerulelocnotconfigured.setDescription('GLB service rule specified a location that is not configured for the service')
servicerulelocdead = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 221)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"), ("ZXTM-MIB-SMIv2", "ruleName"))
if mibBuilder.loadTexts: servicerulelocdead.setStatus('current')
if mibBuilder.loadTexts: servicerulelocdead.setDescription('GLB service rule specified a location that has either failed or been marked as draining in the service configuration')
expired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 57)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: expired.setStatus('current')
if mibBuilder.loadTexts: expired.setDescription('License key has expired')
licensecorrupt = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 58)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: licensecorrupt.setStatus('current')
if mibBuilder.loadTexts: licensecorrupt.setDescription('License key is corrupt')
expiresoon = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 59)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: expiresoon.setStatus('current')
if mibBuilder.loadTexts: expiresoon.setDescription('License key expires within 7 days')
usinglicense = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 60)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: usinglicense.setStatus('current')
if mibBuilder.loadTexts: usinglicense.setDescription('Using license key')
licenseclustertoobig = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 61)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: licenseclustertoobig.setStatus('current')
if mibBuilder.loadTexts: licenseclustertoobig.setDescription('Cluster size exceeds license key limit')
unlicensed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 62)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: unlicensed.setStatus('current')
if mibBuilder.loadTexts: unlicensed.setDescription('Started without a license')
usingdevlicense = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 63)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: usingdevlicense.setStatus('current')
if mibBuilder.loadTexts: usingdevlicense.setDescription('Using a development license')
morememallowed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 124)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: morememallowed.setStatus('current')
if mibBuilder.loadTexts: morememallowed.setDescription('License allows more memory for caching')
lessmemallowed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 125)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: lessmemallowed.setStatus('current')
if mibBuilder.loadTexts: lessmemallowed.setDescription('License allows less memory for caching')
cachesizereduced = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 123)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: cachesizereduced.setStatus('current')
if mibBuilder.loadTexts: cachesizereduced.setDescription('Configured cache size exceeds license limit, only using amount allowed by license')
tpslimited = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 134)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: tpslimited.setStatus('current')
if mibBuilder.loadTexts: tpslimited.setDescription('License key transactions-per-second limit has been hit')
ssltpslimited = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 135)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ssltpslimited.setStatus('current')
if mibBuilder.loadTexts: ssltpslimited.setDescription('License key SSL transactions-per-second limit has been hit')
bwlimited = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 136)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: bwlimited.setStatus('current')
if mibBuilder.loadTexts: bwlimited.setDescription('License key bandwidth limit has been hit')
licensetoomanylocations = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 137)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: licensetoomanylocations.setStatus('current')
if mibBuilder.loadTexts: licensetoomanylocations.setDescription('A location has been disabled because you have exceeded the licence limit')
autoscalinglicenseerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 175)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autoscalinglicenseerror.setStatus('current')
if mibBuilder.loadTexts: autoscalinglicenseerror.setDescription('Autoscaling not permitted by licence key')
autoscalinglicenseenabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 176)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autoscalinglicenseenabled.setStatus('current')
if mibBuilder.loadTexts: autoscalinglicenseenabled.setDescription('Autoscaling support has been enabled')
autoscalinglicensedisabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 177)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: autoscalinglicensedisabled.setStatus('current')
if mibBuilder.loadTexts: autoscalinglicensedisabled.setDescription('Autoscaling support has been disabled')
analyticslicenseenabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 180)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: analyticslicenseenabled.setStatus('current')
if mibBuilder.loadTexts: analyticslicenseenabled.setDescription('Realtime Analytics support has been enabled')
analyticslicensedisabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 181)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: analyticslicensedisabled.setStatus('current')
if mibBuilder.loadTexts: analyticslicensedisabled.setDescription('Realtime Analytics support has been disabled')
poolnonodes = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 64)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: poolnonodes.setStatus('current')
if mibBuilder.loadTexts: poolnonodes.setDescription('Pool configuration contains no valid backend nodes')
poolok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 65)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: poolok.setStatus('current')
if mibBuilder.loadTexts: poolok.setDescription('Pool now has working nodes')
pooldied = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 66)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: pooldied.setStatus('current')
if mibBuilder.loadTexts: pooldied.setDescription('Pool has no back-end nodes responding')
noderesolvefailure = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 67)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: noderesolvefailure.setStatus('current')
if mibBuilder.loadTexts: noderesolvefailure.setDescription('Failed to resolve node address')
noderesolvemultiple = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 68)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: noderesolvemultiple.setStatus('current')
if mibBuilder.loadTexts: noderesolvemultiple.setDescription('Node resolves to multiple IP addresses')
nodeworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 69)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: nodeworking.setStatus('current')
if mibBuilder.loadTexts: nodeworking.setDescription('Node is working again')
nostarttls = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 70)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: nostarttls.setStatus('current')
if mibBuilder.loadTexts: nostarttls.setDescription("Node doesn't provide STARTTLS support")
nodefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 71)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: nodefail.setStatus('current')
if mibBuilder.loadTexts: nodefail.setDescription('Node has failed')
nodedrainingtodelete = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 280)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: nodedrainingtodelete.setStatus('current')
if mibBuilder.loadTexts: nodedrainingtodelete.setDescription('Removed node is in use and will be drained')
nodedrainingtodeletetimeout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 281)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: nodedrainingtodeletetimeout.setStatus('current')
if mibBuilder.loadTexts: nodedrainingtodeletetimeout.setDescription('Draining to delete period for node has expired')
starttlsinvalid = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 72)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: starttlsinvalid.setStatus('current')
if mibBuilder.loadTexts: starttlsinvalid.setDescription('Node returned invalid STARTTLS response')
ehloinvalid = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 73)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: ehloinvalid.setStatus('current')
if mibBuilder.loadTexts: ehloinvalid.setDescription('Node returned invalid EHLO response')
usedcredsdeleted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 126)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"))
if mibBuilder.loadTexts: usedcredsdeleted.setStatus('current')
if mibBuilder.loadTexts: usedcredsdeleted.setDescription('A Cloud Credentials object has been deleted but it was still in use')
autoscalestatusupdateerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 129)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"))
if mibBuilder.loadTexts: autoscalestatusupdateerror.setStatus('current')
if mibBuilder.loadTexts: autoscalestatusupdateerror.setDescription('An API call made by the autoscaler process has reported an error')
autoscaleresponseparseerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 159)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"))
if mibBuilder.loadTexts: autoscaleresponseparseerror.setStatus('current')
if mibBuilder.loadTexts: autoscaleresponseparseerror.setDescription('An API call made by the autoscaler process has returned a response that could not be parsed')
autoscalingchangeprocessfailure = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 182)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalingchangeprocessfailure.setStatus('current')
if mibBuilder.loadTexts: autoscalingchangeprocessfailure.setDescription('An API process that should have created or destroyed a node has failed to produce the expected result')
autoscalewrongimageid = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 183)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalewrongimageid.setStatus('current')
if mibBuilder.loadTexts: autoscalewrongimageid.setDescription('A node created by the autoscaler has the wrong imageid')
autoscalewrongname = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 184)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalewrongname.setStatus('current')
if mibBuilder.loadTexts: autoscalewrongname.setDescription('A node created by the autoscaler has a non-matching name')
autoscalewrongsizeid = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 185)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalewrongsizeid.setStatus('current')
if mibBuilder.loadTexts: autoscalewrongsizeid.setDescription('A node created by the autoscaler has the wrong sizeid')
apistatusprocesshanging = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 127)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"))
if mibBuilder.loadTexts: apistatusprocesshanging.setStatus('current')
if mibBuilder.loadTexts: apistatusprocesshanging.setDescription('A cloud API process querying changes to cloud instances is hanging')
autonodedestructioncomplete = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 138)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodedestructioncomplete.setStatus('current')
if mibBuilder.loadTexts: autonodedestructioncomplete.setDescription('The destruction of a node in an autoscaled pool is now complete')
autonodeexisted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 139)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodeexisted.setStatus('current')
if mibBuilder.loadTexts: autonodeexisted.setDescription("IP address of newly created instance already existed in pool's node list")
autoscaledpooltoosmall = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 140)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscaledpooltoosmall.setStatus('current')
if mibBuilder.loadTexts: autoscaledpooltoosmall.setDescription('Minimum size undercut - growing')
autoscaleinvalidargforcreatenode = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 141)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscaleinvalidargforcreatenode.setStatus('current')
if mibBuilder.loadTexts: autoscaleinvalidargforcreatenode.setDescription("The 'imageid' was empty when attempting to create a node in an autoscaled pool")
autonodedisappeared = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 142)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodedisappeared.setStatus('current')
if mibBuilder.loadTexts: autonodedisappeared.setDescription('A node in an autoscaled pool has disappeared from the cloud')
autonoderemoved = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 244)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonoderemoved.setStatus('current')
if mibBuilder.loadTexts: autonoderemoved.setDescription('A node in an DNS-derived autoscaled pool has been removed')
nameserverunavailable = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 256)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: nameserverunavailable.setStatus('current')
if mibBuilder.loadTexts: nameserverunavailable.setDescription('DNS-derived Autoscaling will not update, as the DNS server is unavailable')
nameserveravailable = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 257)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: nameserveravailable.setStatus('current')
if mibBuilder.loadTexts: nameserveravailable.setDescription('DNS-derived Autoscaling will resume updating, as the DNS server is now responding')
autoscaleresolvefailure = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 258)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscaleresolvefailure.setStatus('current')
if mibBuilder.loadTexts: autoscaleresolvefailure.setDescription("A hostname used for DNS-derived Autoscaling doesn't resolve")
autoscaledpoolrefractory = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 143)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscaledpoolrefractory.setStatus('current')
if mibBuilder.loadTexts: autoscaledpoolrefractory.setDescription('An autoscaled pool is now refractory')
cannotshrinkemptypool = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 144)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: cannotshrinkemptypool.setStatus('current')
if mibBuilder.loadTexts: cannotshrinkemptypool.setDescription('Attempt to scale down a pool that only had pending nodes or none at all')
autoscalinghysteresiscantgrow = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 145)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalinghysteresiscantgrow.setStatus('current')
if mibBuilder.loadTexts: autoscalinghysteresiscantgrow.setDescription('An autoscaled pool is waiting to grow')
autonodecreationcomplete = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 146)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodecreationcomplete.setStatus('current')
if mibBuilder.loadTexts: autonodecreationcomplete.setDescription('The creation of a new node requested by an autoscaled pool is now complete')
autonodestatuschange = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 147)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodestatuschange.setStatus('current')
if mibBuilder.loadTexts: autonodestatuschange.setDescription('The status of a node in an autoscaled pool has changed')
autoscalinghysteresiscantshrink = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 148)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalinghysteresiscantshrink.setStatus('current')
if mibBuilder.loadTexts: autoscalinghysteresiscantshrink.setDescription('An autoscaled pool is waiting to shrink')
autoscalingpoolstatechange = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 149)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalingpoolstatechange.setStatus('current')
if mibBuilder.loadTexts: autoscalingpoolstatechange.setDescription("An autoscaled pool's state has changed")
autonodedestroyed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 128)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodedestroyed.setStatus('current')
if mibBuilder.loadTexts: autonodedestroyed.setDescription('A cloud API call to destroy a node has been started')
autonodecreationstarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 165)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodecreationstarted.setStatus('current')
if mibBuilder.loadTexts: autonodecreationstarted.setDescription('Creation of new node instigated')
autoscaleinvalidargfordeletenode = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 166)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscaleinvalidargfordeletenode.setStatus('current')
if mibBuilder.loadTexts: autoscaleinvalidargfordeletenode.setDescription("'unique id' was empty when attempting to destroy a node in an autoscaled pool")
autoscalinghitroof = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 167)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalinghitroof.setStatus('current')
if mibBuilder.loadTexts: autoscalinghitroof.setDescription('Maximum size reached by autoscaled pool, cannot grow further')
autoscalinghitfloor = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 168)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalinghitfloor.setStatus('current')
if mibBuilder.loadTexts: autoscalinghitfloor.setDescription('Minimum size reached, cannot shrink further')
apichangeprocesshanging = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 169)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: apichangeprocesshanging.setStatus('current')
if mibBuilder.loadTexts: apichangeprocesshanging.setDescription('API change process still running after refractory period is over')
autoscaledpooltoobig = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 170)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscaledpooltoobig.setStatus('current')
if mibBuilder.loadTexts: autoscaledpooltoobig.setDescription('Over maximum size - shrinking')
autoscalingprocesstimedout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 171)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "cloudcredentialsName"))
if mibBuilder.loadTexts: autoscalingprocesstimedout.setStatus('current')
if mibBuilder.loadTexts: autoscalingprocesstimedout.setDescription('A cloud API process has timed out')
autoscalingdisabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 172)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalingdisabled.setStatus('current')
if mibBuilder.loadTexts: autoscalingdisabled.setDescription('Autoscaling for a pool has been disabled due to errors communicating with the cloud API')
autoscalednodecontested = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 163)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalednodecontested.setStatus('current')
if mibBuilder.loadTexts: autoscalednodecontested.setDescription('Two pools are trying to use the same instance')
autoscalepoolconfupdate = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 164)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalepoolconfupdate.setStatus('current')
if mibBuilder.loadTexts: autoscalepoolconfupdate.setDescription('A pool config file has been updated by the autoscaler process')
autoscalingresuscitatepool = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 188)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autoscalingresuscitatepool.setStatus('current')
if mibBuilder.loadTexts: autoscalingresuscitatepool.setDescription('An autoscaled pool has failed completely')
autonodenopublicip = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 238)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "poolName"))
if mibBuilder.loadTexts: autonodenopublicip.setStatus('current')
if mibBuilder.loadTexts: autonodenopublicip.setDescription('Node has no public IP address')
flipperraiselocalworking = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 74)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: flipperraiselocalworking.setStatus('current')
if mibBuilder.loadTexts: flipperraiselocalworking.setDescription('Raising Traffic IP Address; local machine is working')
flipperraiseothersdead = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 75)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: flipperraiseothersdead.setStatus('current')
if mibBuilder.loadTexts: flipperraiseothersdead.setDescription('Raising Traffic IP Address; other machines have failed')
flipperraiseosdrop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 76)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: flipperraiseosdrop.setStatus('current')
if mibBuilder.loadTexts: flipperraiseosdrop.setDescription('Raising Traffic IP Address; Operating System had dropped this IP address')
dropipinfo = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 77)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: dropipinfo.setStatus('current')
if mibBuilder.loadTexts: dropipinfo.setDescription('Dropping Traffic IP Address due to a configuration change or traffic manager recovery')
dropipwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 78)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: dropipwarn.setStatus('current')
if mibBuilder.loadTexts: dropipwarn.setDescription('Dropping Traffic IP Address due to an error')
flipperdadreraise = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 79)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: flipperdadreraise.setStatus('current')
if mibBuilder.loadTexts: flipperdadreraise.setDescription('Re-raising Traffic IP Address; Operating system did not fully raise the address')
flipperipexists = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 80)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "trafficIPInet46AddressType"), ("ZXTM-MIB-SMIv2", "trafficIPInet46Address"))
if mibBuilder.loadTexts: flipperipexists.setStatus('current')
if mibBuilder.loadTexts: flipperipexists.setDescription('Failed to raise Traffic IP Address; the address exists elsewhere on your network and cannot be raised')
triggersummary = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 81)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "serviceProtName"))
if mibBuilder.loadTexts: triggersummary.setStatus('current')
if mibBuilder.loadTexts: triggersummary.setDescription('Summary of recent service protection events')
slmclasslimitexceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 82)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: slmclasslimitexceeded.setStatus('current')
if mibBuilder.loadTexts: slmclasslimitexceeded.setDescription('SLM shared memory limit exceeded')
slmrecoveredwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 83)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "serviceLevelName"))
if mibBuilder.loadTexts: slmrecoveredwarn.setStatus('current')
if mibBuilder.loadTexts: slmrecoveredwarn.setDescription('SLM has recovered')
slmrecoveredserious = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 84)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "serviceLevelName"))
if mibBuilder.loadTexts: slmrecoveredserious.setStatus('current')
if mibBuilder.loadTexts: slmrecoveredserious.setDescription('SLM has risen above the serious threshold')
slmfallenbelowwarn = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 85)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "serviceLevelName"))
if mibBuilder.loadTexts: slmfallenbelowwarn.setStatus('current')
if mibBuilder.loadTexts: slmfallenbelowwarn.setDescription('SLM has fallen below warning threshold')
slmfallenbelowserious = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 86)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "serviceLevelName"))
if mibBuilder.loadTexts: slmfallenbelowserious.setStatus('current')
if mibBuilder.loadTexts: slmfallenbelowserious.setDescription('SLM has fallen below serious threshold')
vscrloutofdate = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 87)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: vscrloutofdate.setStatus('current')
if mibBuilder.loadTexts: vscrloutofdate.setDescription('CRL for a Certificate Authority is out of date')
vsstart = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 88)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: vsstart.setStatus('current')
if mibBuilder.loadTexts: vsstart.setDescription('Virtual server started')
vsstop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 89)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: vsstop.setStatus('current')
if mibBuilder.loadTexts: vsstop.setDescription('Virtual server stopped')
privkeyok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 90)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: privkeyok.setStatus('current')
if mibBuilder.loadTexts: privkeyok.setDescription('Private key now OK (hardware available)')
ssldrop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 91)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: ssldrop.setStatus('current')
if mibBuilder.loadTexts: ssldrop.setDescription('Request(s) received while SSL configuration invalid, connection closed')
vslogwritefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 92)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: vslogwritefail.setStatus('current')
if mibBuilder.loadTexts: vslogwritefail.setDescription('Failed to write log file for virtual server')
vssslcertexpired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 93)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: vssslcertexpired.setStatus('current')
if mibBuilder.loadTexts: vssslcertexpired.setDescription('Public SSL certificate expired')
vssslcerttoexpire = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 94)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: vssslcerttoexpire.setStatus('current')
if mibBuilder.loadTexts: vssslcerttoexpire.setDescription('Public SSL certificate will expire within seven days')
vscacertexpired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 95)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: vscacertexpired.setStatus('current')
if mibBuilder.loadTexts: vscacertexpired.setDescription('Certificate Authority certificate expired')
vscacerttoexpire = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 96)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: vscacerttoexpire.setStatus('current')
if mibBuilder.loadTexts: vscacerttoexpire.setDescription('Certificate Authority certificate will expire within seven days')
sslhandshakemsgsizelimit = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 200)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: sslhandshakemsgsizelimit.setStatus('current')
if mibBuilder.loadTexts: sslhandshakemsgsizelimit.setDescription('SSL handshake messages have exceeded the size permitted by configuration')
sslrehandshakemininterval = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 199)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: sslrehandshakemininterval.setStatus('current')
if mibBuilder.loadTexts: sslrehandshakemininterval.setDescription('SSL re-handshake requests have exceeded the frequency permitted by configuration')
glbmissingips = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 150)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: glbmissingips.setStatus('current')
if mibBuilder.loadTexts: glbmissingips.setDescription('A DNS Query returned IP addresses that are not configured in any location')
glbdeadlocmissingips = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 158)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: glbdeadlocmissingips.setStatus('current')
if mibBuilder.loadTexts: glbdeadlocmissingips.setDescription('A DNS Query returned IP addresses that are not configured for any location that is currently alive')
glbnolocations = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 151)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: glbnolocations.setStatus('current')
if mibBuilder.loadTexts: glbnolocations.setDescription('No valid location could be chosen for Global Load Balancing')
glbactivedcmismatch = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 272)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: glbactivedcmismatch.setStatus('current')
if mibBuilder.loadTexts: glbactivedcmismatch.setDescription('Active datacentre mismatches among cluster members')
locationmonitorok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 152)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationmonitorok.setStatus('current')
if mibBuilder.loadTexts: locationmonitorok.setDescription('A monitor has indicated this location is now working')
locationmonitorfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 153)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationmonitorfail.setStatus('current')
if mibBuilder.loadTexts: locationmonitorfail.setDescription('A monitor has detected a failure in this location')
locationok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 154)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationok.setStatus('current')
if mibBuilder.loadTexts: locationok.setDescription('Location is now healthy for GLB Service')
locationfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 155)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationfail.setStatus('current')
if mibBuilder.loadTexts: locationfail.setDescription('Location has failed for GLB Service')
locationsoapok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 156)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationsoapok.setStatus('current')
if mibBuilder.loadTexts: locationsoapok.setDescription('An external SOAP agent indicates this location is now working')
locationsoapfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 157)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationsoapfail.setStatus('current')
if mibBuilder.loadTexts: locationsoapfail.setDescription('An external SOAP agent has detected a failure in this location')
locationdraining = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 273)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationdraining.setStatus('current')
if mibBuilder.loadTexts: locationdraining.setDescription('Location is being drained for GLB Service')
locationnotdraining = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 274)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationnotdraining.setStatus('current')
if mibBuilder.loadTexts: locationnotdraining.setDescription('Location is not being drained for GLB Service')
locationdisabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 275)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationdisabled.setStatus('current')
if mibBuilder.loadTexts: locationdisabled.setDescription('Location has been disabled for GLB Service')
locationenabled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 276)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationenabled.setStatus('current')
if mibBuilder.loadTexts: locationenabled.setDescription('Location has just been enabled for GLB Service')
locationunavailable = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 277)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationunavailable.setStatus('current')
if mibBuilder.loadTexts: locationunavailable.setDescription('Location has become unavailable for GLB Service')
locationavailable = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 278)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: locationavailable.setStatus('current')
if mibBuilder.loadTexts: locationavailable.setDescription('Location is now available for GLB Service')
glbmanualfailback = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 279)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbmanualfailback.setStatus('current')
if mibBuilder.loadTexts: glbmanualfailback.setDescription('Manual failback triggered')
glbnewmaster = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 160)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbnewmaster.setStatus('current')
if mibBuilder.loadTexts: glbnewmaster.setDescription('A location has been set as active for a GLB service')
glblogwritefail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 161)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glblogwritefail.setStatus('current')
if mibBuilder.loadTexts: glblogwritefail.setDescription('Failed to write log file for GLB service')
glbfailalter = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 162)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbfailalter.setStatus('current')
if mibBuilder.loadTexts: glbfailalter.setDescription('Failed to alter DNS packet for global load balancing')
glbservicedied = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 190)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbservicedied.setStatus('current')
if mibBuilder.loadTexts: glbservicedied.setDescription('GLB Service has failed')
glbserviceok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 191)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbserviceok.setStatus('current')
if mibBuilder.loadTexts: glbserviceok.setDescription('GLB Service has recovered')
locmovemachine = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 173)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"), ("ZXTM-MIB-SMIv2", "zxtmName"))
if mibBuilder.loadTexts: locmovemachine.setStatus('current')
if mibBuilder.loadTexts: locmovemachine.setDescription('Machine now in location')
locempty = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 174)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "locationName"))
if mibBuilder.loadTexts: locempty.setStatus('current')
if mibBuilder.loadTexts: locempty.setDescription('Location no longer contains any machines')
glbtoomanylocations = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 259)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "glbServiceName"))
if mibBuilder.loadTexts: glbtoomanylocations.setStatus('current')
if mibBuilder.loadTexts: glbtoomanylocations.setDescription('There are too many Data Centers configured and the Global Load Balancing feature is not guaranteed to work reliably with more than 255 Data Centres')
dnszonevalidate = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 260)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: dnszonevalidate.setStatus('current')
if mibBuilder.loadTexts: dnszonevalidate.setDescription('The built-in DNS server has failed to validate a DNS zone file')
dnszonecreaterecord = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 261)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: dnszonecreaterecord.setStatus('current')
if mibBuilder.loadTexts: dnszonecreaterecord.setDescription('The built-in DNS server has failed to create a DNS record')
dnszoneparsechild = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 262)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: dnszoneparsechild.setStatus('obsolete')
if mibBuilder.loadTexts: dnszoneparsechild.setDescription('The built-in DNS server has failed to parse a DNS zone file')
dnserroraddzone = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 263)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "domainName"))
if mibBuilder.loadTexts: dnserroraddzone.setStatus('current')
if mibBuilder.loadTexts: dnserroraddzone.setDescription('The built-in DNS server has failed to add a DNS zone')
dnsaddzone = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 264)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "domainName"))
if mibBuilder.loadTexts: dnsaddzone.setStatus('current')
if mibBuilder.loadTexts: dnsaddzone.setDescription('The built-in DNS server has successfully added a DNS zone')
dnszoneparse = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 265)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: dnszoneparse.setStatus('current')
if mibBuilder.loadTexts: dnszoneparse.setDescription('The built-in DNS server has failed to parse a DNS zone file')
dnszonedelete = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 268)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "domainName"))
if mibBuilder.loadTexts: dnszonedelete.setStatus('current')
if mibBuilder.loadTexts: dnszonedelete.setDescription('DNS zone has been deleted')
dnserrordeletezone = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 269)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "domainName"))
if mibBuilder.loadTexts: dnserrordeletezone.setStatus('current')
if mibBuilder.loadTexts: dnserrordeletezone.setDescription('The built-in DNS server has failed to delete a DNS zone')
dnssecexpired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 270)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "domainName"))
if mibBuilder.loadTexts: dnssecexpired.setStatus('current')
if mibBuilder.loadTexts: dnssecexpired.setDescription('DNSSEC zone contains expired signatures')
dnssecexpires = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 271)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "confName"), ("ZXTM-MIB-SMIv2", "domainName"))
if mibBuilder.loadTexts: dnssecexpires.setStatus('current')
if mibBuilder.loadTexts: dnssecexpires.setDescription('DNSSEC zone contains signatures that are about to expire')
fipsfailinit = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 229)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: fipsfailinit.setStatus('current')
if mibBuilder.loadTexts: fipsfailinit.setDescription('FIPS 140-2 cryptographic module initialization failed')
fipsfailops = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 230)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: fipsfailops.setStatus('current')
if mibBuilder.loadTexts: fipsfailops.setDescription('FIPS 140-2 cryptographic module operations failed')
ocspstaplingfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 234)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ocspstaplingfail.setStatus('current')
if mibBuilder.loadTexts: ocspstaplingfail.setDescription('OCSP request (for OCSP stapling) failed')
ocspstaplingnomem = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 235)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ocspstaplingnomem.setStatus('current')
if mibBuilder.loadTexts: ocspstaplingnomem.setDescription('Insufficient memory for OCSP stapling')
ocspstaplingrevoked = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 239)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ocspstaplingrevoked.setStatus('current')
if mibBuilder.loadTexts: ocspstaplingrevoked.setDescription('An OCSP request (for OCSP stapling) reported that a certificate was revoked')
ocspstaplingunknown = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 240)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ocspstaplingunknown.setStatus('current')
if mibBuilder.loadTexts: ocspstaplingunknown.setDescription('An OCSP request (for OCSP stapling) reported that a certificate was unknown')
ocspstaplingunrevoked = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 241)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ocspstaplingunrevoked.setStatus('current')
if mibBuilder.loadTexts: ocspstaplingunrevoked.setDescription('An old but good OCSP response was returned for a revoked certificate')
routingswoperational = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 245)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: routingswoperational.setStatus('current')
if mibBuilder.loadTexts: routingswoperational.setDescription('Routing software is now operational')
routingswfailurelimitreached = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 246)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: routingswfailurelimitreached.setStatus('current')
if mibBuilder.loadTexts: routingswfailurelimitreached.setDescription('Routing software has failed and reached its failure limit')
routingswfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 247)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: routingswfailed.setStatus('current')
if mibBuilder.loadTexts: routingswfailed.setDescription('Routing software had a major failure and will be restarted')
routingswstartfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 248)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: routingswstartfailed.setStatus('current')
if mibBuilder.loadTexts: routingswstartfailed.setDescription('Routing software failed to start')
ospfneighborsok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 253)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ospfneighborsok.setStatus('current')
if mibBuilder.loadTexts: ospfneighborsok.setDescription('All monitored OSPF neighbors are peered')
ospfneighborsdegraded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 254)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ospfneighborsdegraded.setStatus('current')
if mibBuilder.loadTexts: ospfneighborsdegraded.setDescription('Some of the monitored OSPF neighbors are not peered')
ospfneighborsfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 255)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: ospfneighborsfailed.setStatus('current')
if mibBuilder.loadTexts: ospfneighborsfailed.setDescription('None of the monitored OSPF neighbors are peered')
bgpneighborsok = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 282)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: bgpneighborsok.setStatus('current')
if mibBuilder.loadTexts: bgpneighborsok.setDescription('There are established sessions with all BGP neighbors')
bgpneighborsdegraded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 283)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: bgpneighborsdegraded.setStatus('current')
if mibBuilder.loadTexts: bgpneighborsdegraded.setDescription('Some of the BGP neighbors do not have established sessions')
bgpneighborsfailed = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 284)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: bgpneighborsfailed.setStatus('current')
if mibBuilder.loadTexts: bgpneighborsfailed.setDescription('None of the BGP neighbors have an established session')
bgpnoneighbors = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 285)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: bgpnoneighbors.setStatus('current')
if mibBuilder.loadTexts: bgpnoneighbors.setDescription('There are no valid BGP neighbors defined')
maxclientbufferdrop = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 97)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: maxclientbufferdrop.setStatus('current')
if mibBuilder.loadTexts: maxclientbufferdrop.setDescription('Dropped connection, request exceeded max_client_buffer limit')
respcompfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 98)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: respcompfail.setStatus('current')
if mibBuilder.loadTexts: respcompfail.setDescription('Error compressing HTTP response')
responsetoolarge = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 99)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: responsetoolarge.setStatus('current')
if mibBuilder.loadTexts: responsetoolarge.setDescription('Response headers from webserver too large')
sipstreamnoports = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 100)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: sipstreamnoports.setStatus('current')
if mibBuilder.loadTexts: sipstreamnoports.setDescription('No suitable ports available for streaming data connection')
rtspstreamnoports = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 101)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: rtspstreamnoports.setStatus('current')
if mibBuilder.loadTexts: rtspstreamnoports.setDescription('No suitable ports available for streaming data connection')
geodataloadfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 102)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: geodataloadfail.setStatus('current')
if mibBuilder.loadTexts: geodataloadfail.setDescription('Failed to load geolocation data')
poolpersistencemismatch = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 103)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: poolpersistencemismatch.setStatus('current')
if mibBuilder.loadTexts: poolpersistencemismatch.setDescription("Pool uses a session persistence class that does not work with this virtual server's protocol")
connerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 104)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: connerror.setStatus('current')
if mibBuilder.loadTexts: connerror.setDescription('A protocol error has occurred')
connfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 105)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: connfail.setStatus('current')
if mibBuilder.loadTexts: connfail.setDescription('A socket connection failure has occurred')
badcontentlen = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 106)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "perPoolNodePoolName"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddressType"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodeAddress"), ("ZXTM-MIB-SMIv2", "perPoolNodeNodePort"))
if mibBuilder.loadTexts: badcontentlen.setStatus('current')
if mibBuilder.loadTexts: badcontentlen.setDescription('HTTP response contained an invalid Content-Length header')
logfiledeleted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 115)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "virtualserverName"))
if mibBuilder.loadTexts: logfiledeleted.setStatus('current')
if mibBuilder.loadTexts: logfiledeleted.setDescription('A virtual server request log file was deleted (appliances only)')
license_graceperiodexpired = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 116)).setLabel("license-graceperiodexpired").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_graceperiodexpired.setStatus('current')
if mibBuilder.loadTexts: license_graceperiodexpired.setDescription('Unable to authorize license key')
license_authorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 117)).setLabel("license-authorized").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_authorized.setStatus('current')
if mibBuilder.loadTexts: license_authorized.setDescription('License key authorized')
license_rejected_authorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 118)).setLabel("license-rejected-authorized").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_rejected_authorized.setStatus('current')
if mibBuilder.loadTexts: license_rejected_authorized.setDescription('License server rejected license key; key remains authorized')
license_rejected_unauthorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 119)).setLabel("license-rejected-unauthorized").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_rejected_unauthorized.setStatus('current')
if mibBuilder.loadTexts: license_rejected_unauthorized.setDescription('License server rejected license key; key is not authorized')
license_timedout_authorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 120)).setLabel("license-timedout-authorized").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_timedout_authorized.setStatus('current')
if mibBuilder.loadTexts: license_timedout_authorized.setDescription('Unable to contact license server; license key remains authorized')
license_timedout_unauthorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 121)).setLabel("license-timedout-unauthorized").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_timedout_unauthorized.setStatus('current')
if mibBuilder.loadTexts: license_timedout_unauthorized.setDescription('Unable to contact license server; license key is not authorized')
license_unauthorized = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 122)).setLabel("license-unauthorized").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_unauthorized.setStatus('current')
if mibBuilder.loadTexts: license_unauthorized.setDescription('License key is not authorized')
license_rejected_unauthorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 192)).setLabel("license-rejected-unauthorized-ts").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_rejected_unauthorized_ts.setStatus('current')
if mibBuilder.loadTexts: license_rejected_unauthorized_ts.setDescription('License key rejected from authorization code')
license_authorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 193)).setLabel("license-authorized-ts").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_authorized_ts.setStatus('current')
if mibBuilder.loadTexts: license_authorized_ts.setDescription('License key authorized by authorization code')
license_rejected_authorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 194)).setLabel("license-rejected-authorized-ts").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_rejected_authorized_ts.setStatus('current')
if mibBuilder.loadTexts: license_rejected_authorized_ts.setDescription('License key rejected from authorization code; key remains authorized')
license_timedout_authorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 195)).setLabel("license-timedout-authorized-ts").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_timedout_authorized_ts.setStatus('current')
if mibBuilder.loadTexts: license_timedout_authorized_ts.setDescription('Unable to run authorization code to completion; key remains valid')
license_timedout_unauthorized_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 196)).setLabel("license-timedout-unauthorized-ts").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_timedout_unauthorized_ts.setStatus('current')
if mibBuilder.loadTexts: license_timedout_unauthorized_ts.setDescription('Unable to run authorization code to completion')
license_graceperiodexpired_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 197)).setLabel("license-graceperiodexpired-ts").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_graceperiodexpired_ts.setStatus('current')
if mibBuilder.loadTexts: license_graceperiodexpired_ts.setDescription('Unable to authorize license key')
license_explicitlydisabled_ts = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 209)).setLabel("license-explicitlydisabled-ts").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"), ("ZXTM-MIB-SMIv2", "licensekeyName"))
if mibBuilder.loadTexts: license_explicitlydisabled_ts.setStatus('current')
if mibBuilder.loadTexts: license_explicitlydisabled_ts.setDescription('License key explicitly disabled from authorization code')
numnodes_exceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 205)).setLabel("numnodes-exceeded").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: numnodes_exceeded.setStatus('current')
if mibBuilder.loadTexts: numnodes_exceeded.setDescription('Total number of nodes exceeded the maximum number of nodes that can be monitored')
numpools_exceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 202)).setLabel("numpools-exceeded").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: numpools_exceeded.setStatus('current')
if mibBuilder.loadTexts: numpools_exceeded.setDescription('Total number of pools exceeded the maximum limit')
numlocations_exceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 203)).setLabel("numlocations-exceeded").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: numlocations_exceeded.setStatus('current')
if mibBuilder.loadTexts: numlocations_exceeded.setDescription('Total number of locations exceeded the maximum limit')
numtipg_exceeded = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 204)).setLabel("numtipg-exceeded").setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: numtipg_exceeded.setStatus('current')
if mibBuilder.loadTexts: numtipg_exceeded.setDescription('Total number of traffic IP group exceeded the maximum limit')
logdiskoverload = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 186)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: logdiskoverload.setStatus('current')
if mibBuilder.loadTexts: logdiskoverload.setDescription('Log disk partition usage has exceeded threshold')
logdiskfull = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 187)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: logdiskfull.setStatus('current')
if mibBuilder.loadTexts: logdiskfull.setDescription('Log disk partition full')
zxtmhighload = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 189)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: zxtmhighload.setStatus('current')
if mibBuilder.loadTexts: zxtmhighload.setDescription('The number of simultaneously active connections has reached a level that the software cannot process in due time; there is a high risk of connections timing out')
sslcrltoobig = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 201)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: sslcrltoobig.setStatus('current')
if mibBuilder.loadTexts: sslcrltoobig.setDescription('CRL does not fit in the configured amount of shared memory, increase ssl!crl_mem!size and restart software')
childcommsfail = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 225)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: childcommsfail.setStatus('current')
if mibBuilder.loadTexts: childcommsfail.setDescription('There was an error communicating with a child process')
childhung = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 226)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: childhung.setStatus('deprecated')
if mibBuilder.loadTexts: childhung.setDescription('The child process did not respond within the configured time')
childkilled = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 227)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: childkilled.setStatus('deprecated')
if mibBuilder.loadTexts: childkilled.setDescription('The child process has been killed because it did not respond to control requests within the configured time')
clocknotmonotonic = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 231)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: clocknotmonotonic.setStatus('current')
if mibBuilder.loadTexts: clocknotmonotonic.setDescription('The monotonic system clock went backwards')
clockjump = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 232)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: clockjump.setStatus('current')
if mibBuilder.loadTexts: clockjump.setDescription('The system clock jumped forwards or backwards by more than one second')
zxtmcpustarvation = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 286)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: zxtmcpustarvation.setStatus('current')
if mibBuilder.loadTexts: zxtmcpustarvation.setDescription('The number of simultaneously active connections has reached a level that the software cannot process in due time because of CPU starvation; there is a high risk of connections timing out')
appfirewallcontrolstarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 243)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: appfirewallcontrolstarted.setStatus('current')
if mibBuilder.loadTexts: appfirewallcontrolstarted.setDescription('Application firewall started')
appfirewallcontrolstopped = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 249)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: appfirewallcontrolstopped.setStatus('current')
if mibBuilder.loadTexts: appfirewallcontrolstopped.setDescription('Application firewall stopped')
appfirewallcontrolrestarted = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 250)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: appfirewallcontrolrestarted.setStatus('current')
if mibBuilder.loadTexts: appfirewallcontrolrestarted.setDescription('Application firewall restarted')
appfirewallcontroltimeout = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 251)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: appfirewallcontroltimeout.setStatus('current')
if mibBuilder.loadTexts: appfirewallcontroltimeout.setDescription('Application firewall control command timed out')
appfirewallcontrolerror = NotificationType((1, 3, 6, 1, 4, 1, 7146, 1, 2, 15, 0, 252)).setObjects(("ZXTM-MIB-SMIv2", "fullLogLine"))
if mibBuilder.loadTexts: appfirewallcontrolerror.setStatus('current')
if mibBuilder.loadTexts: appfirewallcontrolerror.setDescription('Application firewall control command failed')
cloudcredentialsClassNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsClassNumber.setStatus('current')
if mibBuilder.loadTexts: cloudcredentialsClassNumber.setDescription('The number of cloud credentials sets defined.')
cloudcredentialsTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2), )
if mibBuilder.loadTexts: cloudcredentialsTable.setStatus('current')
if mibBuilder.loadTexts: cloudcredentialsTable.setDescription('This table provides statistics for cloud credentials sets.')
cloudcredentialsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "cloudcredentialsName"))
if mibBuilder.loadTexts: cloudcredentialsEntry.setStatus('current')
if mibBuilder.loadTexts: cloudcredentialsEntry.setDescription('This defines a row in the cloud credentials table.')
cloudcredentialsName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsName.setStatus('current')
if mibBuilder.loadTexts: cloudcredentialsName.setDescription('The name of this set of cloud credentials.')
cloudcredentialsStatusRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsStatusRequests.setStatus('current')
if mibBuilder.loadTexts: cloudcredentialsStatusRequests.setDescription('The number of status API requests made with this set of cloud credentials.')
cloudcredentialsNodeCreations = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsNodeCreations.setStatus('current')
if mibBuilder.loadTexts: cloudcredentialsNodeCreations.setDescription('The number of instance creation API requests made with this set of cloud credentials.')
cloudcredentialsNodeDeletions = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 23, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cloudcredentialsNodeDeletions.setStatus('current')
if mibBuilder.loadTexts: cloudcredentialsNodeDeletions.setDescription('The number of instance destruction API requests made with this set of cloud credentials.')
listenIPTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2), )
if mibBuilder.loadTexts: listenIPTable.setStatus('current')
if mibBuilder.loadTexts: listenIPTable.setDescription('This table defines all the information for a particular listening IP (includes IPv4 and IPv6 addresses).')
listenIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "listenIPAddressType"), (0, "ZXTM-MIB-SMIv2", "listenIPAddress"))
if mibBuilder.loadTexts: listenIPEntry.setStatus('current')
if mibBuilder.loadTexts: listenIPEntry.setDescription('This defines a row in the listenips table (includes IPv4 and IPv6 addresses).')
listenIPAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 1), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPAddressType.setStatus('current')
if mibBuilder.loadTexts: listenIPAddressType.setDescription('The IP address type of this listening IP.')
listenIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 2), InetAddress().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPAddress.setStatus('current')
if mibBuilder.loadTexts: listenIPAddress.setDescription('The IPv4 or IPv6 address of this listening IP.')
listenIPBytesInLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesInLo.setStatus('obsolete')
if mibBuilder.loadTexts: listenIPBytesInLo.setDescription('Bytes sent to this listening IP ( low 32bits ).')
listenIPBytesInHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesInHi.setStatus('obsolete')
if mibBuilder.loadTexts: listenIPBytesInHi.setDescription('Bytes sent to this listening IP ( high 32bits ).')
listenIPBytesOutLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesOutLo.setStatus('obsolete')
if mibBuilder.loadTexts: listenIPBytesOutLo.setDescription('Bytes sent from this listening IP ( low 32bits ).')
listenIPBytesOutHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesOutHi.setStatus('obsolete')
if mibBuilder.loadTexts: listenIPBytesOutHi.setDescription('Bytes sent from this listening IP ( high 32bits ).')
listenIPCurrentConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 7), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPCurrentConn.setStatus('current')
if mibBuilder.loadTexts: listenIPCurrentConn.setDescription('TCP connections currently established to this listening IP.')
listenIPTotalConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPTotalConn.setStatus('obsolete')
if mibBuilder.loadTexts: listenIPTotalConn.setDescription('Formerly provided the number of requests sent to this listening IP, now deprecated.')
listenIPMaxConn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 9), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPMaxConn.setStatus('current')
if mibBuilder.loadTexts: listenIPMaxConn.setDescription('Maximum number of simultaneous TCP connections this listening IP has processed at any one time.')
listenIPBytesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesIn.setStatus('current')
if mibBuilder.loadTexts: listenIPBytesIn.setDescription('Bytes sent to this listening IP.')
listenIPBytesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPBytesOut.setStatus('current')
if mibBuilder.loadTexts: listenIPBytesOut.setDescription('Bytes sent from this listening IP.')
listenIPTotalRequestsLo = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPTotalRequestsLo.setStatus('obsolete')
if mibBuilder.loadTexts: listenIPTotalRequestsLo.setDescription('Requests sent to this listening IP.')
listenIPTotalRequestsHi = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPTotalRequestsHi.setStatus('obsolete')
if mibBuilder.loadTexts: listenIPTotalRequestsHi.setDescription('Requests sent to this listening IP.')
listenIPTotalRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 27, 2, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: listenIPTotalRequests.setStatus('current')
if mibBuilder.loadTexts: listenIPTotalRequests.setDescription('Requests sent to this listening IP.')
authenticatorNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorNumber.setStatus('current')
if mibBuilder.loadTexts: authenticatorNumber.setDescription('The number of Authenticators.')
authenticatorTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2), )
if mibBuilder.loadTexts: authenticatorTable.setStatus('current')
if mibBuilder.loadTexts: authenticatorTable.setDescription('This table provides information and statistics for Authenticators.')
authenticatorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "authenticatorName"))
if mibBuilder.loadTexts: authenticatorEntry.setStatus('current')
if mibBuilder.loadTexts: authenticatorEntry.setDescription('This defines a row in the authenticators table.')
authenticatorName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorName.setStatus('current')
if mibBuilder.loadTexts: authenticatorName.setDescription('The name of the Authenticator.')
authenticatorRequests = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorRequests.setStatus('current')
if mibBuilder.loadTexts: authenticatorRequests.setDescription('Number of times this Authenticator has been asked to authenticate.')
authenticatorPasses = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorPasses.setStatus('current')
if mibBuilder.loadTexts: authenticatorPasses.setDescription('Number of times this Authenticator has successfully authenticated.')
authenticatorFails = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorFails.setStatus('current')
if mibBuilder.loadTexts: authenticatorFails.setDescription('Number of times this Authenticator has failed to authenticate.')
authenticatorErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 28, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: authenticatorErrors.setStatus('current')
if mibBuilder.loadTexts: authenticatorErrors.setDescription('Number of connection errors that have occurred when trying to connect to an authentication server.')
steelheadNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steelheadNumber.setStatus('current')
if mibBuilder.loadTexts: steelheadNumber.setDescription('The number of Steelheads.')
steelheadTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 2), )
if mibBuilder.loadTexts: steelheadTable.setStatus('current')
if mibBuilder.loadTexts: steelheadTable.setDescription('This table provides information and statistics for Steelheads.')
steelheadEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "steelheadName"))
if mibBuilder.loadTexts: steelheadEntry.setStatus('current')
if mibBuilder.loadTexts: steelheadEntry.setDescription('This defines a row in the steelheads table.')
steelheadName = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: steelheadName.setStatus('current')
if mibBuilder.loadTexts: steelheadName.setDescription('The name of the Steelhead.')
steelheadOptimized = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 31, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: steelheadOptimized.setStatus('current')
if mibBuilder.loadTexts: steelheadOptimized.setDescription('The current number of connections being forwarded to the Cloud Steelhead for optimization.')
dataPlaneAccelCoreNumber = MibScalar((1, 3, 6, 1, 4, 1, 7146, 1, 2, 33, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataPlaneAccelCoreNumber.setStatus('current')
if mibBuilder.loadTexts: dataPlaneAccelCoreNumber.setDescription('The number of data plane acceleration cores.')
dpaCoreUtilizationTable = MibTable((1, 3, 6, 1, 4, 1, 7146, 1, 2, 33, 2), )
if mibBuilder.loadTexts: dpaCoreUtilizationTable.setStatus('current')
if mibBuilder.loadTexts: dpaCoreUtilizationTable.setDescription('This table gives cpu utilization for the io processors.')
dpaCoreUtilizationEntry = MibTableRow((1, 3, 6, 1, 4, 1, 7146, 1, 2, 33, 2, 1), ).setIndexNames((0, "ZXTM-MIB-SMIv2", "coreId"))
if mibBuilder.loadTexts: dpaCoreUtilizationEntry.setStatus('current')
if mibBuilder.loadTexts: dpaCoreUtilizationEntry.setDescription('This defines a row in the cpu utilization for the data plane acceleration core utilization table.')
coreId = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 33, 2, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: coreId.setStatus('current')
if mibBuilder.loadTexts: coreId.setDescription('The name of data plane acceleration core.')
coreUtilizationPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 7146, 1, 2, 33, 2, 1, 2), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: coreUtilizationPercent.setStatus('current')
if mibBuilder.loadTexts: coreUtilizationPercent.setDescription('The cpu utilization of the data plane acceleration core.')
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", autoscalingchangeprocessfailure=autoscalingchangeprocessfailure, autoscaleinvalidargfordeletenode=autoscaleinvalidargfordeletenode, sslCipherRSADecryptsExternal=sslCipherRSADecryptsExternal, products=products, sslrehandshakemininterval=sslrehandshakemininterval, dnszonedelete=dnszonedelete, perPoolNodeEntry=perPoolNodeEntry, autoscalingdisabled=autoscalingdisabled, j2eeSessionCacheMisses=j2eeSessionCacheMisses, bandwidthClassBytesOutHi=bandwidthClassBytesOutHi, ec2vpceipassocerr=ec2vpceipassocerr, perNodeServiceLevelInet46NodeAddress=perNodeServiceLevelInet46NodeAddress, ruleNumber=ruleNumber, bandwidthClassGuarantee=bandwidthClassGuarantee, j2eeSessionCacheHitRate=j2eeSessionCacheHitRate, steelheadNumber=steelheadNumber, aspSessionCacheOldest=aspSessionCacheOldest, ipSessionCacheHits=ipSessionCacheHits, rateClassTable=rateClassTable, glblogwritefail=glblogwritefail, trafficIPInet46Entry=trafficIPInet46Entry, virtualserverTotalDgram=virtualserverTotalDgram, totalTransactions=totalTransactions, j2eeSessionCacheEntriesMax=j2eeSessionCacheEntriesMax, glbnolocations=glbnolocations, webCacheMemUsed=webCacheMemUsed, perNodeServiceLevelNodeIPAddr=perNodeServiceLevelNodeIPAddr, nameserveravailable=nameserveravailable, actionTable=actionTable, rulestreamerrorgetresponse=rulestreamerrorgetresponse, appfirewallcontroltimeout=appfirewallcontroltimeout, nodePort=nodePort, routingswfailed=routingswfailed, nodeBytesToNodeHi=nodeBytesToNodeHi, license_rejected_unauthorized=license_rejected_unauthorized, poolMeanQueueTime=poolMeanQueueTime, serviceProtRefusalConnRate=serviceProtRefusalConnRate, perPoolNodePktsToNodeLo=perPoolNodePktsToNodeLo, zxtm=zxtm, listenIPTable=listenIPTable, virtualserverDirectReplies=virtualserverDirectReplies, aptimizeuseunknownscope=aptimizeuseunknownscope, poolBwLimitPktsDrop=poolBwLimitPktsDrop, ruleResponds=ruleResponds, activatedautomatically=activatedautomatically, glbmissingips=glbmissingips, bandwidthClassPktsDrop=bandwidthClassPktsDrop, authenticatorFails=authenticatorFails, sslSessionIDMemCacheMiss=sslSessionIDMemCacheMiss, listenIPBytesInLo=listenIPBytesInLo, rulestreamerrorprocessfailure=rulestreamerrorprocessfailure, virtualserverSIPTotalCalls=virtualserverSIPTotalCalls, interfaceTxBytesHi=interfaceTxBytesHi, perNodeServiceLevelInet46NodePort=perNodeServiceLevelInet46NodePort, nodeInet46Table=nodeInet46Table, locationavailable=locationavailable, bgpneighborsfailed=bgpneighborsfailed, serviceLevelNumber=serviceLevelNumber, virtualserverHttpRewriteLocation=virtualserverHttpRewriteLocation, sslHandshakeTLSv12=sslHandshakeTLSv12, sslSessionCacheEntriesMax=sslSessionCacheEntriesMax, bgpneighborsdegraded=bgpneighborsdegraded, serviceLevelResponseMean=serviceLevelResponseMean, poolNumber=poolNumber, perNodeServiceLevelInet46ResponseMax=perNodeServiceLevelInet46ResponseMax, eventEntry=eventEntry, perPoolNodeNodeHostName=perPoolNodeNodeHostName, virtualserverTable=virtualserverTable, sysCPUUserBusyPercent=sysCPUUserBusyPercent, sslCipherRSAEncrypts=sslCipherRSAEncrypts, javanotfound=javanotfound, trafficIPInet46AddressType=trafficIPInet46AddressType, aspSessionCacheMisses=aspSessionCacheMisses, monitorName=monitorName, confok=confok, perLocationServiceFrontendState=perLocationServiceFrontendState, nodeInet46PooledConn=nodeInet46PooledConn, bandwidthClassBytesDropLo=bandwidthClassBytesDropLo, serviceProtTable=serviceProtTable, ospfneighborsdegraded=ospfneighborsdegraded, stateok=stateok, appfirewallcontrolrestarted=appfirewallcontrolrestarted, ipSessionCacheHitRate=ipSessionCacheHitRate, autherror=autherror, interfaceCollisions=interfaceCollisions, sslClientCertInvalid=sslClientCertInvalid, uniSessionCacheHits=uniSessionCacheHits, sslCipherECDHAgreements=sslCipherECDHAgreements, running=running, dropipinfo=dropipinfo, numtipg_exceeded=numtipg_exceeded, poolDisabled=poolDisabled, nodeInet46BytesToNodeHi=nodeInet46BytesToNodeHi, perPoolNodeL4StatelessBuckets=perPoolNodeL4StatelessBuckets, locationEntry=locationEntry, glbdeadlocmissingips=glbdeadlocmissingips, vsstop=vsstop, totalBadDNSPackets=totalBadDNSPackets, perNodeServiceLevelInet46Entry=perNodeServiceLevelInet46Entry, perNodeServiceLevelResponseMean=perNodeServiceLevelResponseMean, virtualserverName=virtualserverName, virtualserverHttpRewriteCookie=virtualserverHttpRewriteCookie, trafficIPGatewayPingRequests=trafficIPGatewayPingRequests, trafficIPTime=trafficIPTime, hourlyPeakRequestsPerSecond=hourlyPeakRequestsPerSecond, sysMemInUse=sysMemInUse, ruleEntry=ruleEntry, rateClassConnsEntered=rateClassConnsEntered, interfaceEntry=interfaceEntry, trapsZero=trapsZero, sslSessionIDDiskCacheMiss=sslSessionIDDiskCacheMiss, virtualserverGzipBytesSavedHi=virtualserverGzipBytesSavedHi, autofailbacktimerstopped=autofailbacktimerstopped, sslCipherAESEncrypts=sslCipherAESEncrypts, virtualserverBwLimitBytesDropHi=virtualserverBwLimitBytesDropHi, uniSessionCacheOldest=uniSessionCacheOldest, monitors=monitors, virtualserverNumber=virtualserverNumber, sslCipherECDSASigns=sslCipherECDSASigns, ruleName=ruleName, sslHandshakeSSLv3=sslHandshakeSSLv3, autofailbacktimerstarted=autofailbacktimerstarted, rateClassQueueLength=rateClassQueueLength, eventsSeen=eventsSeen, locationdisabled=locationdisabled, nodeInet46NewConn=nodeInet46NewConn, appfirewallcontrolstarted=appfirewallcontrolstarted, dpaCoreUtilizationTable=dpaCoreUtilizationTable, rulexmlerr=rulexmlerr, trafficIPTable=trafficIPTable, confreptimeout=confreptimeout, actionEntry=actionEntry, noderesolvemultiple=noderesolvemultiple, steelheadTable=steelheadTable, pooluseunknown=pooluseunknown, stateunexpected=stateunexpected, monitorfail=monitorfail, ruleRetries=ruleRetries, autonodedisappeared=autonodedisappeared, ospfneighborsok=ospfneighborsok, perPoolNodePktsToNode=perPoolNodePktsToNode, rulelogmsgwarn=rulelogmsgwarn, serviceProtLastRefusalTime=serviceProtLastRefusalTime, dataPlaneAccelCoreNumber=dataPlaneAccelCoreNumber, rulestreamerrorinternal=rulestreamerrorinternal, virtualserverMaxConn=virtualserverMaxConn, sslOcspStaplingGoodCount=sslOcspStaplingGoodCount, poolBytesOutLo=poolBytesOutLo, autofailbacktimercancelled=autofailbacktimercancelled, starttlsinvalid=starttlsinvalid, perNodeServiceLevelSLMName=perNodeServiceLevelSLMName, perNodeServiceLevelInet46Table=perNodeServiceLevelInet46Table, sipstreamnoports=sipstreamnoports, virtualserverCurrentConn=virtualserverCurrentConn, numpools_exceeded=numpools_exceeded, poolTotalConn=poolTotalConn, numberSNMPBadRequests=numberSNMPBadRequests, bandwidthmgt=bandwidthmgt, interfaceTxPackets=interfaceTxPackets, multihostload=multihostload, bgpneighborsok=bgpneighborsok, ruleExecutionTimeWarnings=ruleExecutionTimeWarnings, virtualserverPktsInLo=virtualserverPktsInLo, slmrecoveredwarn=slmrecoveredwarn, glbservicedied=glbservicedied, trafficIPNumberRaised=trafficIPNumberRaised, trafficIPInet46Time=trafficIPInet46Time, eventName=eventName, glbServiceEntry=glbServiceEntry, bandwidthClassPktsDropHi=bandwidthClassPktsDropHi, analyticslicensedisabled=analyticslicensedisabled, zxtmcpustarvation=zxtmcpustarvation, ipsessioncache=ipsessioncache, vsstart=vsstart, aspSessionCacheHits=aspSessionCacheHits, restartrequired=restartrequired, listenIPTotalRequestsLo=listenIPTotalRequestsLo, sslCipherECDSAVerifies=sslCipherECDSAVerifies, sslocspstapling=sslocspstapling, virtualserverProtocol=virtualserverProtocol, dropipwarn=dropipwarn, rulebufferlarge=rulebufferlarge, dataMemoryUsage=dataMemoryUsage, glbtoomanylocations=glbtoomanylocations, listenIPAddress=listenIPAddress, pooldied=pooldied, serviceLevelConforming=serviceLevelConforming, sslCipherDSASigns=sslCipherDSASigns, logfiledeleted=logfiledeleted, sysMemSwapTotal=sysMemSwapTotal, serviceLevelEntry=serviceLevelEntry, sslSessionCacheMisses=sslSessionCacheMisses, locationsoapok=locationsoapok, zxtmEntry=zxtmEntry, autonodestatuschange=autonodestatuschange, sslCipherDHAgreements=sslCipherDHAgreements, sslcrltoobig=sslcrltoobig, virtualserverBytesOut=virtualserverBytesOut, webCacheLookups=webCacheLookups, virtualserverCertStatusRequests=virtualserverCertStatusRequests, virtualserverTotalHTTP2RequestsLo=virtualserverTotalHTTP2RequestsLo, autoscalestatusupdateerror=autoscalestatusupdateerror, bgpnoneighbors=bgpnoneighbors, rateClassConnsLeft=rateClassConnsLeft, cloudcredentialsNodeDeletions=cloudcredentialsNodeDeletions, poolBwLimitBytesDropHi=poolBwLimitBytesDropHi, autoscalednodecontested=autoscalednodecontested, serviceLevelTotalConn=serviceLevelTotalConn, webCacheMemMaximum=webCacheMemMaximum, ruleTable=ruleTable, trafficIPInet46State=trafficIPInet46State, nodeInet46HostName=nodeInet46HostName, nodeResponseMean=nodeResponseMean, datastorefull=datastorefull, virtualserverTotalHTTP1RequestsLo=virtualserverTotalHTTP1RequestsLo, javastartfail=javastartfail, nodedrainingtodelete=nodedrainingtodelete, totalDNSResponses=totalDNSResponses, nodeNumberInet46=nodeNumberInet46, bwlimited=bwlimited, poolFailPool=poolFailPool, obsoleteNotificationGroup=obsoleteNotificationGroup, virtualserverBytesOutHi=virtualserverBytesOutHi, nodeBytesToNodeLo=nodeBytesToNodeLo, autonodenopublicip=autonodenopublicip, interfaceRxBytesLo=interfaceRxBytesLo, perlocationservices=perlocationservices, coreUtilizationPercent=coreUtilizationPercent, nodeInet46BytesToNodeLo=nodeInet46BytesToNodeLo, servicerulelocdead=servicerulelocdead, sslhandshakemsgsizelimit=sslhandshakemsgsizelimit, sslCipherECDHGenerates=sslCipherECDHGenerates, interfaceName=interfaceName, ipSessionCacheEntries=ipSessionCacheEntries, servicerulelocnotconfigured=servicerulelocnotconfigured, servleterror=servleterror, glbServiceName=glbServiceName, uniSessionCacheLookups=uniSessionCacheLookups, sslCacheEntries=sslCacheEntries, nodeInet46CurrentRequests=nodeInet46CurrentRequests, logdiskoverload=logdiskoverload, aspSessionCacheEntries=aspSessionCacheEntries, autoscalewrongname=autoscalewrongname, nodeInet46AddressType=nodeInet46AddressType, webCacheHitRate=webCacheHitRate, locationunavailable=locationunavailable, slmfallenbelowserious=slmfallenbelowserious, rebootrequired=rebootrequired, autoscaleresolvefailure=autoscaleresolvefailure, locationnotdraining=locationnotdraining, bandwidthClassBytesOutLo=bandwidthClassBytesOutLo, sysFDsFree=sysFDsFree, sslOcspStaplingFailureCount=sslOcspStaplingFailureCount, totalBytesOutLo=totalBytesOutLo)
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", virtualserverL4UDPUnreachables=virtualserverL4UDPUnreachables, poolBwLimitBytesDrop=poolBwLimitBytesDrop, triggersummary=triggersummary, locempty=locempty, childkilled=childkilled, listenIPTotalRequests=listenIPTotalRequests, ipSessionCacheLookups=ipSessionCacheLookups, poolQueueTimeouts=poolQueueTimeouts, versionmismatch=versionmismatch, serviceProtRefusalConc1IP=serviceProtRefusalConc1IP, badcontentlen=badcontentlen, license_unauthorized=license_unauthorized, totalBytesIn=totalBytesIn, virtualserverConnectionErrors=virtualserverConnectionErrors, licensekeyNumber=licensekeyNumber, license_rejected_authorized=license_rejected_authorized, rateClassMaxRatePerMin=rateClassMaxRatePerMin, autoscalewrongimageid=autoscalewrongimageid, virtualserverDiscard=virtualserverDiscard, authenticators=authenticators, autofailbackafterdelay=autofailbackafterdelay, locationfail=locationfail, trafficIPNumberInet46=trafficIPNumberInet46, webCacheLookupsLo=webCacheLookupsLo, hardware=hardware, poolNodes=poolNodes, cloudcredentialsTable=cloudcredentialsTable, virtualserverGzipBytesSaved=virtualserverGzipBytesSaved, listenIPBytesOutLo=listenIPBytesOutLo, ec2nosecondaryprivateip=ec2nosecondaryprivateip, serviceProtRefusalBinary=serviceProtRefusalBinary, poolnonodes=poolnonodes, customevent=customevent, poolBwLimitPktsDropHi=poolBwLimitPktsDropHi, perLocationServiceLocationName=perLocationServiceLocationName, sslCipherRC4Decrypts=sslCipherRC4Decrypts, poolPersistence=poolPersistence, vssslcerttoexpire=vssslcerttoexpire, autoscalingprocesstimedout=autoscalingprocesstimedout, sslOcspStaplingCacheCount=sslOcspStaplingCacheCount, virtualserverBwLimitPktsDropLo=virtualserverBwLimitPktsDropLo, geodataloadfail=geodataloadfail, virtualserverHttpCacheHitRate=virtualserverHttpCacheHitRate, steelheads=steelheads, perPoolNodeTotalConn=perPoolNodeTotalConn, totalConn=totalConn, virtualserverPktsIn=virtualserverPktsIn, autoscaledpoolrefractory=autoscaledpoolrefractory, actions=actions, numberDNSPTRRequests=numberDNSPTRRequests, sslHandshakeTLSv1=sslHandshakeTLSv1, sysctlreboot=sysctlreboot, virtualserverTotalHTTPRequestsLo=virtualserverTotalHTTPRequestsLo, rulestreamerrornotstarted=rulestreamerrornotstarted, locationmonitorok=locationmonitorok, locationsoapfail=locationsoapfail, numberSNMPUnauthorisedRequests=numberSNMPUnauthorisedRequests, perNodeServiceLevelInet46NodeAddressType=perNodeServiceLevelInet46NodeAddressType, licensekeyEntry=licensekeyEntry, extra=extra, sslOcspStaplingSuccessCount=sslOcspStaplingSuccessCount, cloudcredentialsNodeCreations=cloudcredentialsNodeCreations, perNodeServiceLevelResponseMax=perNodeServiceLevelResponseMax, respcompfail=respcompfail, bandwidthClassName=bandwidthClassName, perPoolNodeBytesToNodeLo=perPoolNodeBytesToNodeLo, perPoolNodeIdleConns=perPoolNodeIdleConns, locationResponses=locationResponses, confName=confName, perNodeServiceLevelResponseMin=perNodeServiceLevelResponseMin, ruleExecutions=ruleExecutions, domainName=domainName, uniSessionCacheEntriesMax=uniSessionCacheEntriesMax, virtualserverCertStatusResponses=virtualserverCertStatusResponses, poolok=poolok, expiresoon=expiresoon, locationdraining=locationdraining, servicelevelmonitoring=servicelevelmonitoring, license_authorized=license_authorized, glbfailalter=glbfailalter, perPoolNodeTable=perPoolNodeTable, sysCPUSystemBusyPercent=sysCPUSystemBusyPercent, aptimizeuseunknownprofile=aptimizeuseunknownprofile, virtualserverBwLimitPktsDropHi=virtualserverBwLimitPktsDropHi, trafficIPARPMessage=trafficIPARPMessage, perNodeServiceLevelInet46ResponseMin=perNodeServiceLevelInet46ResponseMin, dnserrordeletezone=dnserrordeletezone, timemovedback=timemovedback, autonodedestructioncomplete=autonodedestructioncomplete, numlocations_exceeded=numlocations_exceeded, virtualserverConnectionFailures=virtualserverConnectionFailures, listenIPTotalConn=listenIPTotalConn, appfirewallcontrolstopped=appfirewallcontrolstopped, autonoderemoved=autonoderemoved, sslHandshakeSSLv2=sslHandshakeSSLv2, dnszoneparse=dnszoneparse, virtualserverTotalConn=virtualserverTotalConn, rulenopersistence=rulenopersistence, vslogwritefail=vslogwritefail, license_rejected_unauthorized_ts=license_rejected_unauthorized_ts, statereadfail=statereadfail, routingswfailurelimitreached=routingswfailurelimitreached, bandwidthClassBytesOut=bandwidthClassBytesOut, norate=norate, cache=cache, actionNumber=actionNumber, autoscalinglicenseenabled=autoscalinglicenseenabled, sslCipherEncrypts=sslCipherEncrypts, license_timedout_authorized_ts=license_timedout_authorized_ts, totalRequests=totalRequests, virtualserverBwLimitPktsDrop=virtualserverBwLimitPktsDrop, datalocalstorefull=datalocalstorefull, serviceProtTotalRefusal=serviceProtTotalRefusal, serviceProtName=serviceProtName, nodeInet46IdleConns=nodeInet46IdleConns, trafficIPNumber=trafficIPNumber, rateClassEntry=rateClassEntry, listenIPCurrentConn=listenIPCurrentConn, sysMemTotal=sysMemTotal, perPoolNodeNewConn=perPoolNodeNewConn, authenticatorErrors=authenticatorErrors, virtualserverBwLimitBytesDrop=virtualserverBwLimitBytesDrop, persistence=persistence, licensecorrupt=licensecorrupt, numberDNSARequests=numberDNSARequests, perPoolNodePktsToNodeHi=perPoolNodePktsToNodeHi, appfirewallcontrolerror=appfirewallcontrolerror, rulelogmsgserious=rulelogmsgserious, autoscalinghitroof=autoscalinghitroof, sslSessionIDMemCacheHit=sslSessionIDMemCacheHit, userCounter64Name=userCounter64Name, machinerecovered=machinerecovered, dnszonecreaterecord=dnszonecreaterecord, dpaCoreUtilizationEntry=dpaCoreUtilizationEntry, serviceLevelResponseMax=serviceLevelResponseMax, sslCipherRSAEncryptsExternal=sslCipherRSAEncryptsExternal, serviceLevelTotalNonConf=serviceLevelTotalNonConf, perPoolNodePktsFromNodeLo=perPoolNodePktsFromNodeLo, serviceProtRefusalSize=serviceProtRefusalSize, webCacheURLStoreTotalAllocations=webCacheURLStoreTotalAllocations, sslCacheLookups=sslCacheLookups, numberSNMPGetRequests=numberSNMPGetRequests, appliance=appliance, license_timedout_unauthorized=license_timedout_unauthorized, dnssecexpires=dnssecexpires, autoscaledpooltoosmall=autoscaledpooltoosmall, serviceLevelName=serviceLevelName, lessmemallowed=lessmemallowed, serviceLevelResponseMin=serviceLevelResponseMin, nodeEntry=nodeEntry, rulebodycomperror=rulebodycomperror, virtualserverBytesInLo=virtualserverBytesInLo, perPoolNodeBytesToNodeHi=perPoolNodeBytesToNodeHi, userCounterName=userCounterName, eventsMatched=eventsMatched, license_graceperiodexpired=license_graceperiodexpired, poolTable=poolTable, sysMemSwapped=sysMemSwapped, sysCPUBusyPercent=sysCPUBusyPercent, listenIPBytesOut=listenIPBytesOut, glbserviceok=glbserviceok, ehloinvalid=ehloinvalid, totalBytesOut=totalBytesOut, dataEntries=dataEntries, glbServiceResponses=glbServiceResponses, sslCipherDESDecrypts=sslCipherDESDecrypts, perLocationServiceLoad=perLocationServiceLoad, zxtmtraps=zxtmtraps, userCounter64Value=userCounter64Value, virtualserverTotalRequestsLo=virtualserverTotalRequestsLo, poolState=poolState, nodeState=nodeState, sslSessionCacheHits=sslSessionCacheHits, nodeCurrentRequests=nodeCurrentRequests, interfaceRxErrors=interfaceRxErrors, deprecatedGroup=deprecatedGroup, poolBytesInHi=poolBytesInHi, actionName=actionName, deprecatedCompliance=deprecatedCompliance, PYSNMP_MODULE_ID=zxtm, glbServiceNumber=glbServiceNumber, ipSessionCacheMisses=ipSessionCacheMisses, locmovemachine=locmovemachine, listenIPBytesOutHi=listenIPBytesOutHi, hourlyPeakSSLConnectionsPerSecond=hourlyPeakSSLConnectionsPerSecond, virtualserverHttpCacheLookups=virtualserverHttpCacheLookups, childhung=childhung, license_graceperiodexpired_ts=license_graceperiodexpired_ts, perPoolNodePooledConn=perPoolNodePooledConn, poolEntry=poolEntry, serviceProtNumber=serviceProtNumber, sysMemBuffered=sysMemBuffered, bandwidthClassEntry=bandwidthClassEntry, perPoolNodeBytesFromNode=perPoolNodeBytesFromNode, trafficIPState=trafficIPState, interfaceRxBytes=interfaceRxBytes, sslConnections=sslConnections, interfaceTxBytesLo=interfaceTxBytesLo, aspSessionCacheEntriesMax=aspSessionCacheEntriesMax, poolAlgorithm=poolAlgorithm, sslCacheOldest=sslCacheOldest, zxtmTable=zxtmTable, ec2dataretrievalsuccessful=ec2dataretrievalsuccessful, confadd=confadd, numberDNSACacheHits=numberDNSACacheHits, rulePoolSelect=rulePoolSelect, virtualserverTotalHTTP2Requests=virtualserverTotalHTTP2Requests, perLocationServiceState=perLocationServiceState, licensekeyTable=licensekeyTable, perLocationServiceMonitorState=perLocationServiceMonitorState, privkeyok=privkeyok, poolMinQueueTime=poolMinQueueTime, listenips=listenips, autoscalinghysteresiscantshrink=autoscalinghysteresiscantshrink, perPoolNodeResponseMin=perPoolNodeResponseMin, numberSNMPGetBulkRequests=numberSNMPGetBulkRequests, nodeInet46Entry=nodeInet46Entry, sslfail=sslfail, cloudcredentials=cloudcredentials, unisessioncache=unisessioncache, virtualserverConnectTimedOut=virtualserverConnectTimedOut, flipperfrontendsworking=flipperfrontendsworking, serviceProtRefusalRFC2396=serviceProtRefusalRFC2396, javadied=javadied, slmfallenbelowwarn=slmfallenbelowwarn, flipperipexists=flipperipexists, bandwidthClassBytesDrop=bandwidthClassBytesDrop, poolMaxQueueTime=poolMaxQueueTime, ipSessionCacheOldest=ipSessionCacheOldest, virtualserverHttpCacheHits=virtualserverHttpCacheHits, nodeInet46BytesFromNode=nodeInet46BytesFromNode, license_authorized_ts=license_authorized_ts, webCacheHitsLo=webCacheHitsLo, slmclasslimitexceeded=slmclasslimitexceeded, fipsfailinit=fipsfailinit, serviceruleabort=serviceruleabort, ocspstaplingfail=ocspstaplingfail, perNodeServiceLevelInet46ResponseMean=perNodeServiceLevelInet46ResponseMean, customEventName=customEventName, poolDraining=poolDraining, perPoolNodeFailures=perPoolNodeFailures, usinglicense=usinglicense, analyticslicenseenabled=analyticslicenseenabled, virtualserverPktsOut=virtualserverPktsOut, sslcache=sslcache, rateClassMaxRatePerSec=rateClassMaxRatePerSec, nodeResponseMin=nodeResponseMin, sslOcspStaplingCount=sslOcspStaplingCount, usedcredsdeleted=usedcredsdeleted, rtspstreamnoports=rtspstreamnoports, upgraderestart=upgraderestart, rateClassCurrentRate=rateClassCurrentRate, virtualserverTotalHTTP1Requests=virtualserverTotalHTTP1Requests, userCounter64Entry=userCounter64Entry)
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", totalBytesInHi=totalBytesInHi, webCacheOldest=webCacheOldest, autoscalingresuscitatepool=autoscalingresuscitatepool, virtualserverPktsInHi=virtualserverPktsInHi, connratelimit=connratelimit, zxtmName=zxtmName, nodeBytesFromNodeLo=nodeBytesFromNodeLo, trafficIPNodePingResponses=trafficIPNodePingResponses, invalidemit=invalidemit, glbservices=glbservices, ec2nopublicip=ec2nopublicip, perPoolNodeBytesFromNodeHi=perPoolNodeBytesFromNodeHi, virtualserverBytesIn=virtualserverBytesIn, servicerulelocunknown=servicerulelocunknown, numnodes_exceeded=numnodes_exceeded, userCounterTable=userCounterTable, perPoolNodeErrors=perPoolNodeErrors, virtualserverTotalHTTP2RequestsHi=virtualserverTotalHTTP2RequestsHi, uniSessionCacheMisses=uniSessionCacheMisses, flipperraiselocalworking=flipperraiselocalworking, sslCipherDSAVerifies=sslCipherDSAVerifies, perPoolNodeCurrentConn=perPoolNodeCurrentConn, clockjump=clockjump, listenIPAddressType=listenIPAddressType, machinefail=machinefail, perPoolNodeNodeAddressType=perPoolNodeNodeAddressType, pinggwfail=pinggwfail, zxtmswerror=zxtmswerror, interfaceTxBytes=interfaceTxBytes, bandwidthClassTable=bandwidthClassTable, interfaceRxPackets=interfaceRxPackets, virtualserverBytesInHi=virtualserverBytesInHi, sslSessionCacheOldest=sslSessionCacheOldest, perNodeServiceLevelEntry=perNodeServiceLevelEntry, ruleAborts=ruleAborts, flipperraiseosdrop=flipperraiseosdrop, sslCipherRC4Encrypts=sslCipherRC4Encrypts, trafficIPEntry=trafficIPEntry, virtualserverProcessingTimedOut=virtualserverProcessingTimedOut, perPoolNodeResponseMean=perPoolNodeResponseMean, statetimeout=statetimeout, rulelogmsginfo=rulelogmsginfo, nostarttls=nostarttls, trafficIPNodePingRequests=trafficIPNodePingRequests, virtualserverPort=virtualserverPort, nodeInet46Failures=nodeInet46Failures, flipperbackendsworking=flipperbackendsworking, nodeResponseMax=nodeResponseMax, pingfrontendfail=pingfrontendfail, webCacheMissesHi=webCacheMissesHi, nodefail=nodefail, ec2flipperraiselocalworking=ec2flipperraiselocalworking, steelheadEntry=steelheadEntry, autoscalinghysteresiscantgrow=autoscalinghysteresiscantgrow, trafficIPInet46Address=trafficIPInet46Address, webCacheURLStoreAllocated=webCacheURLStoreAllocated, autonodecreationcomplete=autonodecreationcomplete, ec2vpciderr=ec2vpciderr, autoscaleinvalidargforcreatenode=autoscaleinvalidargforcreatenode, perPoolNodeNumber=perPoolNodeNumber, zxtmNumber=zxtmNumber, cloudcredentialsName=cloudcredentialsName, gcedataretrievalsuccessful=gcedataretrievalsuccessful, ruleDiscards=ruleDiscards, connfail=connfail, perNodeServiceLevelInet46TotalNonConf=perNodeServiceLevelInet46TotalNonConf, zeus=zeus, userCounter64Table=userCounter64Table, hourlyPeakBytesInPerSecond=hourlyPeakBytesInPerSecond, cannotshrinkemptypool=cannotshrinkemptypool, allmachinesok=allmachinesok, autoscalinglicenseerror=autoscalinglicenseerror, ospfneighborsfailed=ospfneighborsfailed, interfaceNumber=interfaceNumber, sslSessionCacheLookups=sslSessionCacheLookups, pingsendfail=pingsendfail, nodeFailures=nodeFailures, sslCacheEntriesMax=sslCacheEntriesMax, virtualserverEntry=virtualserverEntry, locationCode=locationCode, virtualserverTotalHTTP1RequestsHi=virtualserverTotalHTTP1RequestsHi, serviceProtEntry=serviceProtEntry, nodedrainingtodeletetimeout=nodedrainingtodeletetimeout, nodeInet46ResponseMin=nodeInet46ResponseMin, nodeInet46ResponseMax=nodeInet46ResponseMax, perNodeServiceLevelInet46SLMName=perNodeServiceLevelInet46SLMName, poolBwLimitPktsDropLo=poolBwLimitPktsDropLo, j2eeSessionCacheOldest=j2eeSessionCacheOldest, fullLogLine=fullLogLine, numberDNSPTRCacheHits=numberDNSPTRCacheHits, upTime=upTime, sslCipher3DESEncrypts=sslCipher3DESEncrypts, webCacheURLStoreSize=webCacheURLStoreSize, virtualserverUdpTimedOut=virtualserverUdpTimedOut, perPoolNodePktsFromNodeHi=perPoolNodePktsFromNodeHi, zclustermoderr=zclustermoderr, poolBwLimitBytesDropLo=poolBwLimitBytesDropLo, webcache=webcache, nodeInet46BytesToNode=nodeInet46BytesToNode, nodeInet46ResponseMean=nodeInet46ResponseMean, monitorNumber=monitorNumber, nodeInet46TotalConn=nodeInet46TotalConn, connerror=connerror, sslCipherRSADecrypts=sslCipherRSADecrypts, autoscalepoolconfupdate=autoscalepoolconfupdate, deprecatedNotificationGroup=deprecatedNotificationGroup, dnsaddzone=dnsaddzone, vscacerttoexpire=vscacerttoexpire, serviceLevelIsOK=serviceLevelIsOK, perLocationServiceDraining=perLocationServiceDraining, globals=globals, tpslimited=tpslimited, numberSNMPGetNextRequests=numberSNMPGetNextRequests, perNodeServiceLevelTable=perNodeServiceLevelTable, childcommsfail=childcommsfail, poolpersistencemismatch=poolpersistencemismatch, nodeTotalConn=nodeTotalConn, aspSessionCacheLookups=aspSessionCacheLookups, pingbackendfail=pingbackendfail, webCacheURLStoreFree=webCacheURLStoreFree, virtualserverBwLimitBytesDropLo=virtualserverBwLimitBytesDropLo, aspsessioncache=aspsessioncache, javaterminatefail=javaterminatefail, sslhwfail=sslhwfail, dpaCoreUtilization=dpaCoreUtilization, morememallowed=morememallowed, perPoolNodeResponseMax=perPoolNodeResponseMax, ssltpslimited=ssltpslimited, ssldrop=ssldrop, trapobjects=trapobjects, dnszoneparsechild=dnszoneparsechild, authenticatorTable=authenticatorTable, nodeInet46CurrentConn=nodeInet46CurrentConn, listenIPEntry=listenIPEntry, machinetimeout=machinetimeout, sslCipherDESEncrypts=sslCipherDESEncrypts, eventTable=eventTable, uniSessionCacheEntries=uniSessionCacheEntries, j2eesessioncache=j2eesessioncache, sslHandshakeTLSv11=sslHandshakeTLSv11, bandwidthClassMaximum=bandwidthClassMaximum, aptimizedisabled=aptimizedisabled, rateClassDropped=rateClassDropped, totalBytesOutHi=totalBytesOutHi, numIdleConnections=numIdleConnections, rulestreamerrornotfinished=rulestreamerrornotfinished, virtualserverGzip=virtualserverGzip, autoscalinglicensedisabled=autoscalinglicensedisabled, dnssecexpired=dnssecexpired, fipsfailops=fipsfailops, licensekeys=licensekeys, nodeErrors=nodeErrors, routingswoperational=routingswoperational, glbactivedcmismatch=glbactivedcmismatch, j2eeSessionCacheHits=j2eeSessionCacheHits, perLocationServiceLocationCode=perLocationServiceLocationCode, rateClassNumber=rateClassNumber, sslCipher3DESDecrypts=sslCipher3DESDecrypts, compliance=compliance, sslCipherAESDecrypts=sslCipherAESDecrypts, bandwidthClassPktsDropLo=bandwidthClassPktsDropLo, virtualserverKeepaliveTimedOut=virtualserverKeepaliveTimedOut, perNodeServiceLevelNodePort=perNodeServiceLevelNodePort, nodeIPAddress=nodeIPAddress, sslClientCertNotSent=sslClientCertNotSent, virtualserverMaxDurationTimedOut=virtualserverMaxDurationTimedOut, steelheadOptimized=steelheadOptimized, cloudcredentialsEntry=cloudcredentialsEntry, userCounterValue=userCounterValue, version=version, glbnewmaster=glbnewmaster, webCacheMissesLo=webCacheMissesLo, rateClassName=rateClassName, testaction=testaction, glbServiceTable=glbServiceTable, locationName=locationName, rules=rules, actionsProcessed=actionsProcessed, trafficIPPingResponseErrors=trafficIPPingResponseErrors, nodeInet46Address=nodeInet46Address, virtualservers=virtualservers, sysCPUIdlePercent=sysCPUIdlePercent, maxclientbufferdrop=maxclientbufferdrop, statebaddata=statebaddata, obsoleteGroup=obsoleteGroup, poolSessionMigrated=poolSessionMigrated, perPoolNodeBytesToNode=perPoolNodeBytesToNode, dnserroraddzone=dnserroraddzone, serviceLevelTable=serviceLevelTable, autoscalingpoolstatechange=autoscalingpoolstatechange, ec2initialized=ec2initialized, trafficips=trafficips, serviceProtRefusalIP=serviceProtRefusalIP, sslSessionCacheHitRate=sslSessionCacheHitRate, ocspstaplingunrevoked=ocspstaplingunrevoked, bandwidthClassNumber=bandwidthClassNumber, locations=locations, bandwidthClassBytesDropHi=bandwidthClassBytesDropHi, machineok=machineok, nodeBytesFromNodeHi=nodeBytesFromNodeHi, perPoolNodeNodePort=perPoolNodeNodePort, j2eeSessionCacheLookups=j2eeSessionCacheLookups, license_timedout_authorized=license_timedout_authorized, pernodeservicelevelmon=pernodeservicelevelmon, license_rejected_authorized_ts=license_rejected_authorized_ts, listenIPTotalRequestsHi=listenIPTotalRequestsHi, apistatusprocesshanging=apistatusprocesshanging, totalBackendServerErrors=totalBackendServerErrors, monitorEntry=monitorEntry, confmod=confmod, forwardproxybadhost=forwardproxybadhost, virtualserverTotalRequestsHi=virtualserverTotalRequestsHi, notificationGroup=notificationGroup, glbmanualfailback=glbmanualfailback, locationLoad=locationLoad, webCacheURLStoreTotalFailures=webCacheURLStoreTotalFailures, obsoleteCompliance=obsoleteCompliance, nodeCurrentConn=nodeCurrentConn, ec2iperr=ec2iperr, clocknotmonotonic=clocknotmonotonic, sslhwrestart=sslhwrestart, locationmonitorfail=locationmonitorfail, totalCurrentConn=totalCurrentConn, virtualserverPktsOutLo=virtualserverPktsOutLo, autonodeexisted=autonodeexisted, serviceLevelCurrentConns=serviceLevelCurrentConns, serviceProtRefusalConc10IP=serviceProtRefusalConc10IP, sysMemFree=sysMemFree, perPoolNodeNodeAddress=perPoolNodeNodeAddress, usingdevlicense=usingdevlicense, authenticatorRequests=authenticatorRequests, sslCipherDHGenerates=sslCipherDHGenerates, noderesolvefailure=noderesolvefailure, interfaceTxErrors=interfaceTxErrors, numberChildProcesses=numberChildProcesses, cloudcredentialsClassNumber=cloudcredentialsClassNumber, sslCipherAESGCMDecrypts=sslCipherAESGCMDecrypts, sslSessionCacheEntries=sslSessionCacheEntries, perNodeServiceLevelTotalNonConf=perNodeServiceLevelTotalNonConf, virtualserverL4TCPConnectResets=virtualserverL4TCPConnectResets, perPoolNodeBytesFromNodeLo=perPoolNodeBytesFromNodeLo, ocspstaplingunknown=ocspstaplingunknown, virtualserverDefaultTrafficPool=virtualserverDefaultTrafficPool, webCacheMaxEntries=webCacheMaxEntries, perPoolNodeCurrentRequests=perPoolNodeCurrentRequests, flipperraiseremotedropped=flipperraiseremotedropped, rulestreamerrornotenough=rulestreamerrornotenough, glbServiceDiscarded=glbServiceDiscarded, poolBytesInLo=poolBytesInLo, ocspstaplingnomem=ocspstaplingnomem, conformanceGroups=conformanceGroups, webCacheLookupsHi=webCacheLookupsHi, webCacheEntries=webCacheEntries, userCounterNumber=userCounterNumber)
mibBuilder.exportSymbols("ZXTM-MIB-SMIv2", perPoolNodePktsFromNode=perPoolNodePktsFromNode, sslsessioncache=sslsessioncache, activatealldead=activatealldead, javastop=javastop, webCacheHits=webCacheHits, locationenabled=locationenabled, coreId=coreId, sslCipherDecrypts=sslCipherDecrypts, zxtmhighload=zxtmhighload, autoscalewrongsizeid=autoscalewrongsizeid, authenticatorEntry=authenticatorEntry, complianceStatements=complianceStatements, stateconnfail=stateconnfail, confrepfailed=confrepfailed, j2eeSessionCacheEntries=j2eeSessionCacheEntries, aspSessionCacheHitRate=aspSessionCacheHitRate, confdel=confdel, licensetoomanylocations=licensetoomanylocations, webCacheHitsHi=webCacheHitsHi, dnszonevalidate=dnszonevalidate, sslCipherAESGCMEncrypts=sslCipherAESGCMEncrypts, perLocationServiceTable=perLocationServiceTable, upgradereboot=upgradereboot, webCacheURLStoreTotalFrees=webCacheURLStoreTotalFrees, hourlyPeakBytesOutPerSecond=hourlyPeakBytesOutPerSecond, virtualserverTotalRequests=virtualserverTotalRequests, nameserverunavailable=nameserverunavailable, ruleoverrun=ruleoverrun, pools=pools, autoscalinghitfloor=autoscalinghitfloor, trafficIPInet46Table=trafficIPInet46Table, poolBytesIn=poolBytesIn, statewritefail=statewritefail, licensekeyName=licensekeyName, eventNumber=eventNumber, mainGroup=mainGroup, ec2dataretrievalfailed=ec2dataretrievalfailed, gcedataretrievalfailed=gcedataretrievalfailed, userCounterEntry=userCounterEntry, routingswstartfailed=routingswstartfailed, unspecifiedreboot=unspecifiedreboot, nodeNumber=nodeNumber, autoscaledpooltoobig=autoscaledpooltoobig, sslOcspStaplingUnknownCount=sslOcspStaplingUnknownCount, ocspstaplingrevoked=ocspstaplingrevoked, logdiskfull=logdiskfull, sslClientCertExpired=sslClientCertExpired, cloudcredentialsStatusRequests=cloudcredentialsStatusRequests, virtualserverTotalHTTPRequests=virtualserverTotalHTTPRequests, serviceprotection=serviceprotection, poolName=poolName, virtualserverSIPRejectedRequests=virtualserverSIPRejectedRequests, interfaceRxBytesHi=interfaceRxBytesHi, sslClientCertRevoked=sslClientCertRevoked, trafficIPNumberRaisedInet46=trafficIPNumberRaisedInet46, nodeHostName=nodeHostName, nodeInet46Port=nodeInet46Port, nodeInet46BytesFromNodeHi=nodeInet46BytesFromNodeHi, listenIPMaxConn=listenIPMaxConn, interfaceTable=interfaceTable, monitorTable=monitorTable, autonodecreationstarted=autonodecreationstarted, locationok=locationok, sslhwstart=sslhwstart, nodes=nodes, dropec2ipwarn=dropec2ipwarn, sslCacheHits=sslCacheHits, javastarted=javastarted, cachesizereduced=cachesizereduced, nodeTable=nodeTable, license_explicitlydisabled_ts=license_explicitlydisabled_ts, authenticatorPasses=authenticatorPasses, events=events, steelheadName=steelheadName, poolConnsQueued=poolConnsQueued, authenticatorNumber=authenticatorNumber, webCacheMisses=webCacheMisses, authenticatorName=authenticatorName, flipperraiseothersdead=flipperraiseothersdead, rulestreamerrortoomuch=rulestreamerrortoomuch, timeLastConfigUpdate=timeLastConfigUpdate, trafficIPAddress=trafficIPAddress, nodeInet46State=nodeInet46State, flipperdadreraise=flipperdadreraise, virtualserverDataTimedOut=virtualserverDataTimedOut, virtualserverGzipBytesSavedLo=virtualserverGzipBytesSavedLo, perLocationServiceEntry=perLocationServiceEntry, fewfreefds=fewfreefds, perPoolNodeState=perPoolNodeState, licenseclustertoobig=licenseclustertoobig, vscacertexpired=vscacertexpired, license_timedout_unauthorized_ts=license_timedout_unauthorized_ts, autonodedestroyed=autonodedestroyed, listenIPBytesIn=listenIPBytesIn, ec2flipperraiseothersdead=ec2flipperraiseothersdead, glbServiceUnmodified=glbServiceUnmodified, perNodeServiceLevelTotalConn=perNodeServiceLevelTotalConn, perNodeServiceLevelInet46TotalConn=perNodeServiceLevelInet46TotalConn, listenIPBytesInHi=listenIPBytesInHi, unlicensed=unlicensed, virtualserverTotalHTTPRequestsHi=virtualserverTotalHTTPRequestsHi, zxtms=zxtms, poolBytesOut=poolBytesOut, ipSessionCacheEntriesMax=ipSessionCacheEntriesMax, trafficIPGatewayPingResponses=trafficIPGatewayPingResponses, nodePooledConn=nodePooledConn, sslCacheHitRate=sslCacheHitRate, totalBytesInLo=totalBytesInLo, perLocationServiceResponses=perLocationServiceResponses, vssslcertexpired=vssslcertexpired, virtualserverBytesOutLo=virtualserverBytesOutLo, poolactivenodesunknown=poolactivenodesunknown, autoscaleresponseparseerror=autoscaleresponseparseerror, locationTable=locationTable, sslOcspStaplingRevokedCount=sslOcspStaplingRevokedCount, responsetoolarge=responsetoolarge, uniSessionCacheHitRate=uniSessionCacheHitRate, ruleabort=ruleabort, nodeNewConn=nodeNewConn, netinterfaces=netinterfaces, flipperrecovered=flipperrecovered, expired=expired, perLocationServiceName=perLocationServiceName, sslCacheMisses=sslCacheMisses, sslSessionIDDiskCacheHit=sslSessionIDDiskCacheHit, slmrecoveredserious=slmrecoveredserious, poolBytesOutHi=poolBytesOutHi, apichangeprocesshanging=apichangeprocesshanging, perPoolNodePoolName=perPoolNodePoolName, virtualserverPktsOutHi=virtualserverPktsOutHi, monitorok=monitorok, nodeInet46BytesFromNodeLo=nodeInet46BytesFromNodeLo, rulesinvalidrequestbody=rulesinvalidrequestbody, vscrloutofdate=vscrloutofdate, nodeInet46Errors=nodeInet46Errors, nodeworking=nodeworking)
