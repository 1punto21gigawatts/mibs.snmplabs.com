#
# PySNMP MIB module NETAL-PRODUCTS (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETAL-PRODUCTS
# Produced by pysmi-0.3.4 at Wed May  1 14:18:16 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "SingleValueConstraint")
netalModules, networkAlchemy, netalProducts = mibBuilder.importSymbols("NETAL-SMI", "netalModules", "networkAlchemy", "netalProducts")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
IpAddress, TimeTicks, enterprises, ObjectIdentity, Counter32, Gauge32, NotificationType, Unsigned32, ModuleIdentity, iso, MibIdentifier, Integer32, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "IpAddress", "TimeTicks", "enterprises", "ObjectIdentity", "Counter32", "Gauge32", "NotificationType", "Unsigned32", "ModuleIdentity", "iso", "MibIdentifier", "Integer32", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
netalProductsMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2972, 5, 1))
if mibBuilder.loadTexts: netalProductsMIB.setLastUpdated('200101160000Z')
if mibBuilder.loadTexts: netalProductsMIB.setOrganization('Network Alchemy, Inc.')
if mibBuilder.loadTexts: netalProductsMIB.setContactInfo(' Network Alchemy Customer Support Postal: 1538 Pacific Av. Santa Cruz, CA 95060 USA E-Mail: snmp-contact@network-alchemy.com')
if mibBuilder.loadTexts: netalProductsMIB.setDescription('The Network Alchemy products MIB module.')
netalHardwareUnknown = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 1))
if mibBuilder.loadTexts: netalHardwareUnknown.setStatus('current')
if mibBuilder.loadTexts: netalHardwareUnknown.setDescription('Unknown hardware.')
netalKiltlifterUnknown = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 2))
if mibBuilder.loadTexts: netalKiltlifterUnknown.setStatus('current')
if mibBuilder.loadTexts: netalKiltlifterUnknown.setDescription('Kiltlifter UNKNOWN.')
netalStingrayUnknown = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 3))
if mibBuilder.loadTexts: netalStingrayUnknown.setStatus('current')
if mibBuilder.loadTexts: netalStingrayUnknown.setDescription('Stingray UNKNOWN.')
netalCryptoCluster500 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 4))
if mibBuilder.loadTexts: netalCryptoCluster500.setStatus('current')
if mibBuilder.loadTexts: netalCryptoCluster500.setDescription('CryptoCluster 500.')
netalCryptoCluster5010 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 5))
if mibBuilder.loadTexts: netalCryptoCluster5010.setStatus('current')
if mibBuilder.loadTexts: netalCryptoCluster5010.setDescription('CryptoCluster 5010.')
netalCryptoCluster501 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 8))
if mibBuilder.loadTexts: netalCryptoCluster501.setStatus('current')
if mibBuilder.loadTexts: netalCryptoCluster501.setDescription('CryptoCluster 501.')
netalCryptoCluster5000 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 10))
if mibBuilder.loadTexts: netalCryptoCluster5000.setStatus('current')
if mibBuilder.loadTexts: netalCryptoCluster5000.setDescription('CryptoCluster 5000.')
netalCryptoCluster2500 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 11))
if mibBuilder.loadTexts: netalCryptoCluster2500.setStatus('current')
if mibBuilder.loadTexts: netalCryptoCluster2500.setDescription('CryptoCluster 2500.')
netalCryptoCluster2501 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 12))
if mibBuilder.loadTexts: netalCryptoCluster2501.setStatus('current')
if mibBuilder.loadTexts: netalCryptoCluster2501.setDescription('CryptoCluster 2501.')
netalFreeBSDApplication = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 13))
if mibBuilder.loadTexts: netalFreeBSDApplication.setStatus('current')
if mibBuilder.loadTexts: netalFreeBSDApplication.setDescription('FreeBSD application.')
netalCryptoCluster5200 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 15))
if mibBuilder.loadTexts: netalCryptoCluster5200.setStatus('current')
if mibBuilder.loadTexts: netalCryptoCluster5200.setDescription('CryptoCluster 5200.')
netalCryptoCluster5205 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 16))
if mibBuilder.loadTexts: netalCryptoCluster5205.setStatus('current')
if mibBuilder.loadTexts: netalCryptoCluster5205.setDescription('CryptoCluster 5205.')
netalCA200 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 18))
if mibBuilder.loadTexts: netalCA200.setStatus('current')
if mibBuilder.loadTexts: netalCA200.setDescription('CA200.')
netalCA600 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 19))
if mibBuilder.loadTexts: netalCA600.setStatus('current')
if mibBuilder.loadTexts: netalCA600.setDescription('CA600.')
netalChameleon100 = ObjectIdentity((1, 3, 6, 1, 4, 1, 2972, 1, 20))
if mibBuilder.loadTexts: netalChameleon100.setStatus('current')
if mibBuilder.loadTexts: netalChameleon100.setDescription('Chameleon 100.')
mibBuilder.exportSymbols("NETAL-PRODUCTS", netalCryptoCluster2501=netalCryptoCluster2501, netalCA600=netalCA600, netalCA200=netalCA200, netalCryptoCluster2500=netalCryptoCluster2500, netalHardwareUnknown=netalHardwareUnknown, PYSNMP_MODULE_ID=netalProductsMIB, netalProductsMIB=netalProductsMIB, netalCryptoCluster5010=netalCryptoCluster5010, netalCryptoCluster501=netalCryptoCluster501, netalCryptoCluster5000=netalCryptoCluster5000, netalCryptoCluster5200=netalCryptoCluster5200, netalChameleon100=netalChameleon100, netalCryptoCluster5205=netalCryptoCluster5205, netalKiltlifterUnknown=netalKiltlifterUnknown, netalFreeBSDApplication=netalFreeBSDApplication, netalStingrayUnknown=netalStingrayUnknown, netalCryptoCluster500=netalCryptoCluster500)
