#
# PySNMP MIB module Juniper-ERX-Registry (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Juniper-ERX-Registry
# Produced by pysmi-0.3.4 at Wed May  1 14:02:31 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
juniAdmin, = mibBuilder.importSymbols("Juniper-Registry", "juniAdmin")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, MibIdentifier, Counter32, TimeTicks, Counter64, IpAddress, Unsigned32, Gauge32, Bits, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "MibIdentifier", "Counter32", "TimeTicks", "Counter64", "IpAddress", "Unsigned32", "Gauge32", "Bits", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
juniErxRegistry = ModuleIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2))
juniErxRegistry.setRevisions(('2006-07-22 05:43', '2006-06-23 16:07', '2006-04-03 10:43', '2006-05-02 14:53', '2006-04-12 13:05', '2006-03-31 13:12', '2006-02-28 08:22', '2005-09-21 15:48', '2004-05-25 18:32', '2003-11-12 20:20', '2003-11-12 19:30', '2003-07-17 21:07', '2002-10-21 15:00', '2002-10-16 18:50', '2002-10-10 18:51', '2002-05-08 12:34', '2002-05-07 14:05', '2001-08-20 16:08', '2001-06-12 18:27', '2001-06-04 20:11',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: juniErxRegistry.setRevisionsDescriptions(('Obsolete erxSrp5Plus SRP.', 'Obsolete line cards: CT1-FULL, ERX-X21-V35-MOD, HSSI-3F, CE1-FULL.', 'changed status of erxSrp5Plus, erxSrp310, erxSrp5g1gEcc, erxSrp5g2gEcc to deprecated.', 'Deprecated line cards: CT1-FULL, ERX-X21-V35-MOD, HSSI-3F, CE1-FULL.', 'Changed the status of the E3-3A board to obsolete.', 'Changed the status of erxSrp5, erxSrp40, erxSrp40Plus, board to obsolete. Added new boards (erxSrp10g1gEcc, erxSrp10g2gEcc, erxSrp5g1gEcc, erxSrp5g2gEcc).', 'Added new board (erxSrp40g2gEc2).', 'Changed the status of the CT3, CT3 I/O, T3-3F, T3-3A, E3-3F, 10/100 FE-2 and 10/100 FE-2 I/O boards to obsolete.', 'Added support for the Fe8 FX IOA.', 'Added Hybrid line module and Hybrid IOA modules. Added GE2 line module and GE2 IOA module.', 'Rebranded the ERX as an E-series product.', 'Added ERX-310 hardware support. Added new Service module.', 'Replaced Unisphere names with Juniper names. Added 256M versions of OCx ATM and GE/FE modules.', 'Added support for OC12 channelized ATM/POS I/O adapters. Added support fo OC48 line card and I/O adapter. Added 12 port T3/E3 redundant midplane support.', 'Added SRP module with 40 gbps plus switch fabric. Added Vitrual Tunneling Server (VTS) module. Added X.21/V.35 Server module and I/O adapter. Added OC12 APS I/O adapters. Added redundant midplane spare I/O adapters.', 'Added GE SFP IOA module.', "Added SRP modules with 5 gbps and 40 gbps 'plus' switch fabrics.", 'Added 12 port T3/E3 channelized modules.', 'Added High Speed Serial Interface (HSSI) modules.', 'Initial version of this SNMP management information module.',))
if mibBuilder.loadTexts: juniErxRegistry.setLastUpdated('200607220543Z')
if mibBuilder.loadTexts: juniErxRegistry.setOrganization('Juniper Networks, Inc.')
if mibBuilder.loadTexts: juniErxRegistry.setContactInfo(' Juniper Networks, Inc. Postal: 10 Technology Park Drive Westford, MA 01886-3146 USA Tel: +1 978 589 5800 Email: mib@Juniper.net')
if mibBuilder.loadTexts: juniErxRegistry.setDescription('Juniper first generation E-series (ERX) edge router product family system-specific object identification values. This module defines AutonomousType (OID) values for all the physical entity types (entPhysicalVendorType). This module will be updated whenever a new type of module or other hardware becomes available in first generation E-series systems.')
juniErxEntPhysicalType = MibIdentifier((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1))
erxChassis = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 1))
if mibBuilder.loadTexts: erxChassis.setStatus('current')
if mibBuilder.loadTexts: erxChassis.setDescription("The vendor type ID for a generic first generation E-series (ERX) chassis. This identifies an 'overall' physical entity for any ERX system.")
erx700Chassis = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 1, 1))
if mibBuilder.loadTexts: erx700Chassis.setStatus('current')
if mibBuilder.loadTexts: erx700Chassis.setDescription("The vendor type ID for a first generation E-series (ERX) 7-slot chassis. This is the 'overall' physical entity for an ERX-700 or ERX-705 system (Product Code: BASE-7).")
erx1400Chassis = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 1, 2))
if mibBuilder.loadTexts: erx1400Chassis.setStatus('current')
if mibBuilder.loadTexts: erx1400Chassis.setDescription("The vendor type ID for a first generation E-series (ERX) 14-slot chassis. This is the 'overall' physical entity for an ERX-1400 system (Product Code: BASE-14).")
erx1440Chassis = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 1, 3))
if mibBuilder.loadTexts: erx1440Chassis.setStatus('current')
if mibBuilder.loadTexts: erx1440Chassis.setDescription("The vendor type ID for a first generation E-series (ERX) 14-slot chassis. This is the 'overall' physical entity for an ERX-1440 system (Product Code: BASE-1440).")
erx310ACChassis = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 1, 4))
if mibBuilder.loadTexts: erx310ACChassis.setStatus('current')
if mibBuilder.loadTexts: erx310ACChassis.setDescription("The vendor type ID for a first generation E-series (ERX) 3-slot chassis. This is the 'overall' physical entity for an ERX-310 system with AC power (Product Code: EX3-BS310AC-SYS).")
erx310DCChassis = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 1, 5))
if mibBuilder.loadTexts: erx310DCChassis.setStatus('current')
if mibBuilder.loadTexts: erx310DCChassis.setDescription("The vendor type ID for a first generation E-series (ERX) 3-slot chassis. This is the 'overall' physical entity for an ERX-310 system with redundant DC power (Product Code: EX3-BS310DC-SYS).")
erxFanAssembly = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 2))
if mibBuilder.loadTexts: erxFanAssembly.setStatus('current')
if mibBuilder.loadTexts: erxFanAssembly.setDescription('The vendor type ID for an ERX fan assembly.')
erx700FanAssembly = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 2, 1))
if mibBuilder.loadTexts: erx700FanAssembly.setStatus('current')
if mibBuilder.loadTexts: erx700FanAssembly.setDescription('The vendor type ID for an ERX 7-slot fan assembly with four fans and two -12 volt, 15 watt power converters (Product Code: FAN-7).')
erx1400FanAssembly = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 2, 2))
if mibBuilder.loadTexts: erx1400FanAssembly.setStatus('current')
if mibBuilder.loadTexts: erx1400FanAssembly.setDescription('The vendor type ID for an ERX 14-slot fan assembly with six fans and two -24 volt, 50 watt power converters (Product Code: FAN-14).')
erx300FanAssembly = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 2, 3))
if mibBuilder.loadTexts: erx300FanAssembly.setStatus('current')
if mibBuilder.loadTexts: erx300FanAssembly.setDescription('The vendor type ID for an ERX 3-slot fan assembly (Product Code: EX3-FANTRAY-FRU).')
erxPowerInput = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 3))
if mibBuilder.loadTexts: erxPowerInput.setStatus('current')
if mibBuilder.loadTexts: erxPowerInput.setDescription('The vendor type ID for an ERX power distribution unit.')
erxPdu = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 3, 1))
if mibBuilder.loadTexts: erxPdu.setStatus('current')
if mibBuilder.loadTexts: erxPdu.setDescription('The vendor type ID for an ERX-700, ERX-705 or ERX-1400 power distribution unit (Product Code: PDU).')
erx1440Pdu = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 3, 2))
if mibBuilder.loadTexts: erx1440Pdu.setStatus('current')
if mibBuilder.loadTexts: erx1440Pdu.setDescription('The vendor type ID for an ERX-1440 power distribution unit (Product Code: ERX-PDU-40-FRU).')
erx300ACPdu = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 3, 3))
if mibBuilder.loadTexts: erx300ACPdu.setStatus('current')
if mibBuilder.loadTexts: erx300ACPdu.setDescription('The vendor type ID for an ERX 3-slot AC power supply and power distribution unit (Product Code: EX3-ACPWR-FRU).')
erx300DCPdu = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 3, 4))
if mibBuilder.loadTexts: erx300DCPdu.setStatus('current')
if mibBuilder.loadTexts: erx300DCPdu.setDescription('The vendor type ID for an ERX 3-slot DC power distribution unit (Product Code: EX3-DCPSDIST-PNL).')
erxMidplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4))
if mibBuilder.loadTexts: erxMidplane.setStatus('current')
if mibBuilder.loadTexts: erxMidplane.setDescription('The vendor type ID for an ERX midplane.')
erx700Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 1))
if mibBuilder.loadTexts: erx700Midplane.setStatus('current')
if mibBuilder.loadTexts: erx700Midplane.setDescription('The vendor type ID for an ERX 7-slot midplane.')
erx1400Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 2))
if mibBuilder.loadTexts: erx1400Midplane.setStatus('current')
if mibBuilder.loadTexts: erx1400Midplane.setDescription('The vendor type ID for an ERX-1400 (10G 14-slot) midplane.')
erx1Plus1RedundantT1E1Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 3))
if mibBuilder.loadTexts: erx1Plus1RedundantT1E1Midplane.setStatus('deprecated')
if mibBuilder.loadTexts: erx1Plus1RedundantT1E1Midplane.setDescription('The vendor type ID for an ERX 1 + 1 redundant T1/E1 midplane (Product Code: REDMID-T1/E1/1/1). This product has reached End-of-life.')
erx2Plus1RedundantT1E1Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 4))
if mibBuilder.loadTexts: erx2Plus1RedundantT1E1Midplane.setStatus('current')
if mibBuilder.loadTexts: erx2Plus1RedundantT1E1Midplane.setDescription('The vendor type ID for an ERX 2 + 1 redundant T1/E1 midplane (Product Code: REDMID-T1/E1/2/1).')
erx3Plus1RedundantT1E1Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 5))
if mibBuilder.loadTexts: erx3Plus1RedundantT1E1Midplane.setStatus('current')
if mibBuilder.loadTexts: erx3Plus1RedundantT1E1Midplane.setDescription('The vendor type ID for an ERX 3 + 1 redundant T1/E1 midplane (Product Code: REDMID-T1/E1/3/1).')
erx4Plus1RedundantT1E1Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 6))
if mibBuilder.loadTexts: erx4Plus1RedundantT1E1Midplane.setStatus('current')
if mibBuilder.loadTexts: erx4Plus1RedundantT1E1Midplane.setDescription('The vendor type ID for an ERX 4 + 1 redundant T1/E1 midplane (Product Code: REDMID-T1/E1/4/1).')
erx5Plus1RedundantT1E1Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 7))
if mibBuilder.loadTexts: erx5Plus1RedundantT1E1Midplane.setStatus('current')
if mibBuilder.loadTexts: erx5Plus1RedundantT1E1Midplane.setDescription('The vendor type ID for an ERX 5 + 1 redundant T1/E1 midplane (Product Code: REDMID-T1/E1/5/1).')
erx1Plus1RedundantT3E3Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 8))
if mibBuilder.loadTexts: erx1Plus1RedundantT3E3Midplane.setStatus('deprecated')
if mibBuilder.loadTexts: erx1Plus1RedundantT3E3Midplane.setDescription('The vendor type ID for an ERX 1 + 1 redundant CT3/T3/E3 midplane (Product Code: REDMID-T3/E3/1/1). This product has reached End-of-life.')
erx2Plus1RedundantT3E3Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 9))
if mibBuilder.loadTexts: erx2Plus1RedundantT3E3Midplane.setStatus('current')
if mibBuilder.loadTexts: erx2Plus1RedundantT3E3Midplane.setDescription('The vendor type ID for an ERX 2 + 1 redundant CT3/T3/E3 midplane (Product Code: REDMID-T3/E3/2/1).')
erx3Plus1RedundantT3E3Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 10))
if mibBuilder.loadTexts: erx3Plus1RedundantT3E3Midplane.setStatus('current')
if mibBuilder.loadTexts: erx3Plus1RedundantT3E3Midplane.setDescription('The vendor type ID for an ERX 3 + 1 redundant CT3/T3/E3 midplane (Product Code: REDMID-T3/E3/3/1).')
erx4Plus1RedundantT3E3Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 11))
if mibBuilder.loadTexts: erx4Plus1RedundantT3E3Midplane.setStatus('current')
if mibBuilder.loadTexts: erx4Plus1RedundantT3E3Midplane.setDescription('The vendor type ID for an ERX 4 + 1 redundant CT3/T3/E3 midplane (Product Code: REDMID-T3/E3/4/1).')
erx5Plus1RedundantT3E3Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 12))
if mibBuilder.loadTexts: erx5Plus1RedundantT3E3Midplane.setStatus('current')
if mibBuilder.loadTexts: erx5Plus1RedundantT3E3Midplane.setDescription('The vendor type ID for an ERX 5 + 1 redundant CT3/T3/E3 midplane (Product Code: REDMID-T3/E3/5/1).')
erx1Plus1RedundantOcMidplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 13))
if mibBuilder.loadTexts: erx1Plus1RedundantOcMidplane.setStatus('deprecated')
if mibBuilder.loadTexts: erx1Plus1RedundantOcMidplane.setDescription('The vendor type ID for an ERX 1 + 1 redundant OC3/OC12 midplane (Product Code: REDMID-OC/1/1). This product has reached End-of-life.')
erx2Plus1RedundantOcMidplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 14))
if mibBuilder.loadTexts: erx2Plus1RedundantOcMidplane.setStatus('current')
if mibBuilder.loadTexts: erx2Plus1RedundantOcMidplane.setDescription('The vendor type ID for an ERX 2 + 1 redundant OC3/OC12 midplane (Product Code: REDMID-OC/2/1).')
erx3Plus1RedundantOcMidplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 15))
if mibBuilder.loadTexts: erx3Plus1RedundantOcMidplane.setStatus('deprecated')
if mibBuilder.loadTexts: erx3Plus1RedundantOcMidplane.setDescription('The vendor type ID for an ERX 3 + 1 redundant OC3/OC12 midplane (Product Code: REDMID-OC/3/1). This product has reached End-of-life.')
erx4Plus1RedundantOcMidplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 16))
if mibBuilder.loadTexts: erx4Plus1RedundantOcMidplane.setStatus('deprecated')
if mibBuilder.loadTexts: erx4Plus1RedundantOcMidplane.setDescription('The vendor type ID for an ERX 4 + 1 redundant OC3/OC12 midplane (Product Code: REDMID-OC/4/1). This product has reached End-of-life.')
erx5Plus1RedundantOcMidplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 17))
if mibBuilder.loadTexts: erx5Plus1RedundantOcMidplane.setStatus('current')
if mibBuilder.loadTexts: erx5Plus1RedundantOcMidplane.setDescription('The vendor type ID for an ERX 5 + 1 redundant OC3/OC12 midplane (Product Code: REDMID-OC/5/1).')
erx2Plus1Redundant12T3E3Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 18))
if mibBuilder.loadTexts: erx2Plus1Redundant12T3E3Midplane.setStatus('current')
if mibBuilder.loadTexts: erx2Plus1Redundant12T3E3Midplane.setDescription('The vendor type ID for an ERX 2 + 1 redundant 12 port T3/E3 midplane (Product Code: ERX-12T3-2-1-RMD).')
erx5Plus1Redundant12T3E3Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 19))
if mibBuilder.loadTexts: erx5Plus1Redundant12T3E3Midplane.setStatus('current')
if mibBuilder.loadTexts: erx5Plus1Redundant12T3E3Midplane.setDescription('The vendor type ID for an ERX 5 + 1 redundant 12 port T3/E3 midplane (Product Code: ERX-12T3-5-1-RMD).')
erx1440Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 20))
if mibBuilder.loadTexts: erx1440Midplane.setStatus('current')
if mibBuilder.loadTexts: erx1440Midplane.setDescription('The vendor type ID for an ERX-1440 (40G 14-slot) midplane.')
erx300Midplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 21))
if mibBuilder.loadTexts: erx300Midplane.setStatus('current')
if mibBuilder.loadTexts: erx300Midplane.setDescription('The vendor type ID for an ERX 3-slot midplane.')
erx2Plus1RedundantCOcMidplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 22))
if mibBuilder.loadTexts: erx2Plus1RedundantCOcMidplane.setStatus('current')
if mibBuilder.loadTexts: erx2Plus1RedundantCOcMidplane.setDescription('The vendor type ID for an ERX 2 + 1 redundant channelized OC3/OC12 midplane (Product Code: ERX-COCX-2-1-RMD).')
erx5Plus1RedundantCOcMidplane = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 4, 23))
if mibBuilder.loadTexts: erx5Plus1RedundantCOcMidplane.setStatus('current')
if mibBuilder.loadTexts: erx5Plus1RedundantCOcMidplane.setDescription('The vendor type ID for an ERX 5 + 1 redundant channelized OC3/OC12 midplane (Product Code: ERX-COCX-5-1-RMD).')
erxSrpModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 5))
if mibBuilder.loadTexts: erxSrpModule.setStatus('current')
if mibBuilder.loadTexts: erxSrpModule.setDescription('The vendor type ID for an ERX Switch and Router Processor (SRP) module.')
erxSrp5 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 5, 1))
if mibBuilder.loadTexts: erxSrp5.setStatus('obsolete')
if mibBuilder.loadTexts: erxSrp5.setDescription('The vendor type ID for an ERX Switch and Router Processor (SRP) module with 5 Gbps switch fabric (Product Code: SRP-5). This product has reached End-of-life.')
erxSrp10 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 5, 2))
if mibBuilder.loadTexts: erxSrp10.setStatus('deprecated')
if mibBuilder.loadTexts: erxSrp10.setDescription('The vendor type ID for an ERX Switch and Router Processor (SRP) module with 10 Gbps switch fabric (Product Code: SRP-10). This product has reached End-of-life.')
erxSrp10Ecc = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 5, 3))
if mibBuilder.loadTexts: erxSrp10Ecc.setStatus('current')
if mibBuilder.loadTexts: erxSrp10Ecc.setDescription('The vendor type ID for an ERX Switch and Router Processor (SRP) module with 10 Gbps switch fabric with ECC (Product Code: SRP-10-ECC).')
erxSrp40 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 5, 4))
if mibBuilder.loadTexts: erxSrp40.setStatus('obsolete')
if mibBuilder.loadTexts: erxSrp40.setDescription('The vendor type ID for an ERX Switch and Router Processor (SRP) module with 40 Gbps switch fabric with ECC (Product Code: SRP-40-ECC). This product has reached End-of-life.')
erxSrp5Plus = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 5, 5))
if mibBuilder.loadTexts: erxSrp5Plus.setStatus('obsolete')
if mibBuilder.loadTexts: erxSrp5Plus.setDescription("The vendor type ID for an ERX Switch and Router Processor (SRP) module with 5 Gbps 'plus' switch fabric (Product Code: ERX-5ECC-SRP).")
erxSrp40Plus = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 5, 6))
if mibBuilder.loadTexts: erxSrp40Plus.setStatus('obsolete')
if mibBuilder.loadTexts: erxSrp40Plus.setDescription("The vendor type ID for an ERX Switch and Router Processor (SRP) module with 40 Gbps 'plus' switch fabric (Product Code: ERX-40EC2-SRP).")
erxSrp310 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 5, 7))
if mibBuilder.loadTexts: erxSrp310.setStatus('deprecated')
if mibBuilder.loadTexts: erxSrp310.setDescription('The vendor type ID for an ERX Switch and Router Processor (SRP) module for the ERX-310 (Product Code: EX3-SRP-MOD).')
erxSrp40g2gEc2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 5, 8))
if mibBuilder.loadTexts: erxSrp40g2gEc2.setStatus('current')
if mibBuilder.loadTexts: erxSrp40g2gEc2.setDescription("The vendor type ID for an ERX Switch and Router Processor (SRP) module with 40 Gbps 'plus' switch fabric and 2GB memory (Product Code: ERX-40G2GEC2-SRP).")
erxSrp10g1gEcc = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 5, 9))
if mibBuilder.loadTexts: erxSrp10g1gEcc.setStatus('current')
if mibBuilder.loadTexts: erxSrp10g1gEcc.setDescription('The vendor type ID for an ERX Switch and Router Processor (SRP) module with 10 Gbps switch fabric and 1GB memory (Product Code: ERX-10G1GECC-SRP).')
erxSrp10g2gEcc = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 5, 10))
if mibBuilder.loadTexts: erxSrp10g2gEcc.setStatus('current')
if mibBuilder.loadTexts: erxSrp10g2gEcc.setDescription('The vendor type ID for an ERX Switch and Router Processor (SRP) module with 10 Gbps switch fabric and 2GB memory (Product Code: ERX-10G2GECC-SRP).')
erxSrp5g1gEcc = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 5, 11))
if mibBuilder.loadTexts: erxSrp5g1gEcc.setStatus('deprecated')
if mibBuilder.loadTexts: erxSrp5g1gEcc.setDescription("The vendor type ID for an ERX Switch and Router Processor (SRP) module with 5 Gbps 'plus' switch fabric and 1GB memory (Product Code: ERX-5G1GECC-SRP).")
erxSrp5g2gEcc = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 5, 12))
if mibBuilder.loadTexts: erxSrp5g2gEcc.setStatus('deprecated')
if mibBuilder.loadTexts: erxSrp5g2gEcc.setDescription("The vendor type ID for an ERX Switch and Router Processor (SRP) module with 5 Gbps 'plus' switch fabric and 2GB memory (Product Code: ERX-5G2GECC-SRP).")
erxSrpIoAdapter = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 6))
if mibBuilder.loadTexts: erxSrpIoAdapter.setStatus('current')
if mibBuilder.loadTexts: erxSrpIoAdapter.setDescription('The vendor type ID for an ERX SRP I/O adapter.')
erxSrpIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 6, 1))
if mibBuilder.loadTexts: erxSrpIoa.setStatus('current')
if mibBuilder.loadTexts: erxSrpIoa.setDescription('The vendor type ID for an ERX-700/705/1400/1440 SRP I/O adapter (Product Code: SRP_I/O).')
erxSrp310Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 6, 2))
if mibBuilder.loadTexts: erxSrp310Ioa.setStatus('current')
if mibBuilder.loadTexts: erxSrp310Ioa.setDescription('The vendor type ID for an ERX-310 SRP I/O adapter (Product Code: EX3-SRP-IOA).')
erxLineModule = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7))
if mibBuilder.loadTexts: erxLineModule.setStatus('current')
if mibBuilder.loadTexts: erxLineModule.setDescription('The vendor type ID for an ERX line module.')
erxCt1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 1))
if mibBuilder.loadTexts: erxCt1.setStatus('obsolete')
if mibBuilder.loadTexts: erxCt1.setDescription('The vendor type ID for an ERX 24 port T1 fully channelized line module (Product Code: CT1-FULL).')
erxCe1 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 2))
if mibBuilder.loadTexts: erxCe1.setStatus('obsolete')
if mibBuilder.loadTexts: erxCe1.setDescription('The vendor type ID for an ERX 20 port E1 fully channelized line module (Product Code: CE1-FULL).')
erxCt3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 4))
if mibBuilder.loadTexts: erxCt3.setStatus('obsolete')
if mibBuilder.loadTexts: erxCt3.setDescription('The vendor type ID for an ERX 3 port T3 channelized line module (Product Code: CT3-3). This product has reached End-of-life.')
erxT3Atm = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 5))
if mibBuilder.loadTexts: erxT3Atm.setStatus('obsolete')
if mibBuilder.loadTexts: erxT3Atm.setDescription('The vendor type ID for an ERX 3 port T3 unchannelized cell service line module (Product Code: T3-3A). This product has reached End-of-life.')
erxT3Frame = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 6))
if mibBuilder.loadTexts: erxT3Frame.setStatus('obsolete')
if mibBuilder.loadTexts: erxT3Frame.setDescription('The vendor type ID for an ERX 3 port T3 unchannelized packet service line module (Product Code: T3-3F). This product has reached End-of-life.')
erxE3Atm = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 7))
if mibBuilder.loadTexts: erxE3Atm.setStatus('obsolete')
if mibBuilder.loadTexts: erxE3Atm.setDescription('The vendor type ID for an ERX 3 port E3 unchannelized cell service line module (Product Code: E3-3A).')
erxE3Frame = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 8))
if mibBuilder.loadTexts: erxE3Frame.setStatus('obsolete')
if mibBuilder.loadTexts: erxE3Frame.setDescription('The vendor type ID for an ERX 3 port E3 unchannelized packet service line module (Product Code: E3-3F). This product has reached End-of-life.')
erxOc3 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 9))
if mibBuilder.loadTexts: erxOc3.setStatus('deprecated')
if mibBuilder.loadTexts: erxOc3.setDescription('The vendor type ID for an ERX dual port Optical Carrier 3 (OC-3/STM-1) SONET/SDH line module (Product Code: OC3-2). This product has reached End-of-life.')
erxOc3Oc12Atm = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 10))
if mibBuilder.loadTexts: erxOc3Oc12Atm.setStatus('current')
if mibBuilder.loadTexts: erxOc3Oc12Atm.setDescription('The vendor type ID for an ERX OC3/OC12 multi-personality cell service line module (Product Code: OC3/OC12-ATM).')
erxOc3Oc12Pos = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 11))
if mibBuilder.loadTexts: erxOc3Oc12Pos.setStatus('current')
if mibBuilder.loadTexts: erxOc3Oc12Pos.setDescription('The vendor type ID for an ERX OC3/OC12 multi-personality packet service line module (Product Code: OC3/OC12-POS).')
erxCOcx = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 12))
if mibBuilder.loadTexts: erxCOcx.setStatus('current')
if mibBuilder.loadTexts: erxCOcx.setDescription('The vendor type ID for an ERX OC3/STM1 and OC12/STM4 channelized line module (Product Code: COCX/STMX-F0).')
erxFe2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 13))
if mibBuilder.loadTexts: erxFe2.setStatus('obsolete')
if mibBuilder.loadTexts: erxFe2.setDescription('The vendor type ID for an ERX dual port fast (10/100) Ethernet line module (Product Code: 10/100_FE-2). This product has reached End-of-life.')
erxGeFe = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 14))
if mibBuilder.loadTexts: erxGeFe.setStatus('current')
if mibBuilder.loadTexts: erxGeFe.setDescription('The vendor type ID for an ERX multi-personality gigabit or fast (10/100) Ethernet line module (Product Code: GE/FE-8).')
erxTunnelService = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 15))
if mibBuilder.loadTexts: erxTunnelService.setStatus('current')
if mibBuilder.loadTexts: erxTunnelService.setDescription('The vendor type ID for an ERX L2TP LNS and GRE Tunnel Service line module (Product Code: TUNNEL-SERVICE).')
erxHssi = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 16))
if mibBuilder.loadTexts: erxHssi.setStatus('obsolete')
if mibBuilder.loadTexts: erxHssi.setDescription('The vendor type ID for an ERX 3 port High Speed Serial Interface (HSSI) line module (Product Code: HSSI-3F).')
erxVts = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 17))
if mibBuilder.loadTexts: erxVts.setStatus('current')
if mibBuilder.loadTexts: erxVts.setDescription('The vendor type ID for an ERX Virtual Tunnelling Server (VTS) line module (Product Code: ERX-IPSEC-MOD).')
erxCt3P12 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 18))
if mibBuilder.loadTexts: erxCt3P12.setStatus('current')
if mibBuilder.loadTexts: erxCt3P12.setDescription('The vendor type ID for an ERX 12 port T3 channelized line module (Product Code: CT3-12-F0).')
erxV35 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 19))
if mibBuilder.loadTexts: erxV35.setStatus('obsolete')
if mibBuilder.loadTexts: erxV35.setDescription('The vendor type ID for an ERX X.21/V.35 server line module (Product Code: ERX-X21-V35-MOD).')
erxUt3E3Ocx = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 20))
if mibBuilder.loadTexts: erxUt3E3Ocx.setStatus('current')
if mibBuilder.loadTexts: erxUt3E3Ocx.setDescription('The vendor type ID for an ERX OC12, quad OC3 or 12 port T3/E3 server line module (Product Code: ERX-UT3E3OCX-MOD).')
erxOc48 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 21))
if mibBuilder.loadTexts: erxOc48.setStatus('current')
if mibBuilder.loadTexts: erxOc48.setDescription('The vendor type ID for an ERX single port OC-48/STM-16 SONET/SDH line module (Product Code: ERX-OC48ST16-MOD).')
erxOc3Oc12Atm256M = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 22))
if mibBuilder.loadTexts: erxOc3Oc12Atm256M.setStatus('current')
if mibBuilder.loadTexts: erxOc3Oc12Atm256M.setDescription('The vendor type ID for an ERX OC3/OC12 multi-personality cell service line module with 256mb of memory (Product Code: ERX-OCXA256M-MOD).')
erxGeFe256M = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 23))
if mibBuilder.loadTexts: erxGeFe256M.setStatus('current')
if mibBuilder.loadTexts: erxGeFe256M.setDescription('The vendor type ID for an ERX multi-personality gigabit or fast (10/100) Ethernet line module with 256mb of memory (Product Code: ERX-GEFE256M-MOD).')
erxService = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 24))
if mibBuilder.loadTexts: erxService.setStatus('current')
if mibBuilder.loadTexts: erxService.setDescription('The vendor type ID for an ERX L2TP LNS and GRE Tunnel Service line module with 256mb of memory and NAT and firewall capabilities (Product Code: ERX-SERVICE-MOD).')
erxOc3Hybrid = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 25))
if mibBuilder.loadTexts: erxOc3Hybrid.setStatus('current')
if mibBuilder.loadTexts: erxOc3Hybrid.setDescription('The vendor type ID for an ERX OC3 multi-personality cell service line module (Product Code: [450-00050-00]).')
erxGe2 = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 7, 26))
if mibBuilder.loadTexts: erxGe2.setStatus('current')
if mibBuilder.loadTexts: erxGe2.setDescription('The vendor type ID for an ERX 2 port GE line module (Product Code: [450-00044-00]).')
erxLineIoAdapter = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8))
if mibBuilder.loadTexts: erxLineIoAdapter.setStatus('current')
if mibBuilder.loadTexts: erxLineIoAdapter.setDescription('The vendor type ID for an ERX I/O adapter for a line module.')
erxCt1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 1))
if mibBuilder.loadTexts: erxCt1Ioa.setStatus('obsolete')
if mibBuilder.loadTexts: erxCt1Ioa.setDescription('The vendor type ID for an ERX 24 port T1/J1 channelized I/O adapter (Product Code: CT1-FULL-I/O).')
erxCe1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 2))
if mibBuilder.loadTexts: erxCe1Ioa.setStatus('obsolete')
if mibBuilder.loadTexts: erxCe1Ioa.setDescription('The vendor type ID for an ERX 20 port E1 channelized RJ48 I/O adapter (Product Code: CE1-FULL-I/O).')
erxCe1TIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 3))
if mibBuilder.loadTexts: erxCe1TIoa.setStatus('obsolete')
if mibBuilder.loadTexts: erxCe1TIoa.setDescription('The vendor type ID for an ERX 20 port E1 channelized Telco I/O adapter (Product Code: CE1-FULL-I/OT).')
erxCt3Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 4))
if mibBuilder.loadTexts: erxCt3Ioa.setStatus('obsolete')
if mibBuilder.loadTexts: erxCt3Ioa.setDescription('The vendor type ID for an ERX 3 port T3/E3 channelized I/O adapter (Product Code: CT3/T3-3_I/O). This product has reached End-of-life.')
erxE3Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 5))
if mibBuilder.loadTexts: erxE3Ioa.setStatus('current')
if mibBuilder.loadTexts: erxE3Ioa.setDescription('The vendor type ID for an ERX 3 port E3 I/O adapter (Product Code: E3-3_I/O).')
erxOc3Mm2Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 6))
if mibBuilder.loadTexts: erxOc3Mm2Ioa.setStatus('deprecated')
if mibBuilder.loadTexts: erxOc3Mm2Ioa.setDescription('The vendor type ID for an ERX dual port OC3/STM1 multi-mode I/O adapter (Product Code: OC3-2M_I/O). This product has reached End-of-life.')
erxOc3Sm2Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 7))
if mibBuilder.loadTexts: erxOc3Sm2Ioa.setStatus('deprecated')
if mibBuilder.loadTexts: erxOc3Sm2Ioa.setDescription('The vendor type ID for an ERX dual port OC3/STM1 single-mode I/O adapter (Product Code: OC3-2S_I/O). This product has reached End-of-life.')
erxOc3Mm4Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 8))
if mibBuilder.loadTexts: erxOc3Mm4Ioa.setStatus('current')
if mibBuilder.loadTexts: erxOc3Mm4Ioa.setDescription('The vendor type ID for an ERX 4 port OC3/STM1 multi-mode I/O adapter (Product Code: OC3-4MM_I/O).')
erxOc3SmIr4Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 9))
if mibBuilder.loadTexts: erxOc3SmIr4Ioa.setStatus('current')
if mibBuilder.loadTexts: erxOc3SmIr4Ioa.setDescription('The vendor type ID for an ERX 4 port OC3/STM single-mode intermediate- reach I/O adapter (Product Code: OC3-4SM_I/O).')
erxOc3SmLr4Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 10))
if mibBuilder.loadTexts: erxOc3SmLr4Ioa.setStatus('current')
if mibBuilder.loadTexts: erxOc3SmLr4Ioa.setDescription('The vendor type ID for an ERX 4 port OC3/STM1 single-mode long-reach I/O adapter (Product Code: OC3-4LH-I/O).')
erxCOc3Mm4Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 11))
if mibBuilder.loadTexts: erxCOc3Mm4Ioa.setStatus('current')
if mibBuilder.loadTexts: erxCOc3Mm4Ioa.setDescription('The vendor type ID for an ERX 4 port OC3/STM channelized multi-mode I/O adapter (Product Code: COC3F0-MM-I/O).')
erxCOc3SmIr4Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 12))
if mibBuilder.loadTexts: erxCOc3SmIr4Ioa.setStatus('current')
if mibBuilder.loadTexts: erxCOc3SmIr4Ioa.setDescription('The vendor type ID for an ERX 4 port OC3/STM1 channelized single-mode intermediate-reach I/O adapter (Product Code: COC3F0-SM-I/O).')
erxCOc3SmLr4Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 13))
if mibBuilder.loadTexts: erxCOc3SmLr4Ioa.setStatus('current')
if mibBuilder.loadTexts: erxCOc3SmLr4Ioa.setDescription('The vendor type ID for an ERX 4 port OC3/STM1 channelized single-mode long-reach I/O adapter (Product Code: ERX-COC3-4LH-IOA).')
erxOc12Mm1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 14))
if mibBuilder.loadTexts: erxOc12Mm1Ioa.setStatus('current')
if mibBuilder.loadTexts: erxOc12Mm1Ioa.setDescription('The vendor type ID for an ERX single port OC12/STM4 multi-mode I/O adapter (Product Code: OC12-MM_I/O).')
erxOc12SmIr1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 15))
if mibBuilder.loadTexts: erxOc12SmIr1Ioa.setStatus('current')
if mibBuilder.loadTexts: erxOc12SmIr1Ioa.setDescription('The vendor type ID for an ERX single port OC12/STM4 single-mode intermediate-reach I/O adapter (Product Code: OC12-SM_I/O).')
erxOc12SmLr1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 16))
if mibBuilder.loadTexts: erxOc12SmLr1Ioa.setStatus('current')
if mibBuilder.loadTexts: erxOc12SmLr1Ioa.setDescription('The vendor type ID for an ERX single port OC12/STM4 single-mode long-reach I/O adapter (Product Code: OC12-LH-I/O).')
erxCOc12Mm1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 17))
if mibBuilder.loadTexts: erxCOc12Mm1Ioa.setStatus('current')
if mibBuilder.loadTexts: erxCOc12Mm1Ioa.setDescription('The vendor type ID for an ERX single port OC12/STM4 channelized (OC3/STM1 or OC1/STM0) multi-mode I/O adapter (Product Code: COC12F0-MM-I/O).')
erxCOc12SmIr1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 18))
if mibBuilder.loadTexts: erxCOc12SmIr1Ioa.setStatus('current')
if mibBuilder.loadTexts: erxCOc12SmIr1Ioa.setDescription('The vendor type ID for an ERX single port OC12/STM4 channelized (OC3/STM1 or OC1/STM0) single-mode intermediate-reach I/O adapter (Product Code: COC12F0-SM-I/O).')
erxCOc12SmLr1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 19))
if mibBuilder.loadTexts: erxCOc12SmLr1Ioa.setStatus('current')
if mibBuilder.loadTexts: erxCOc12SmLr1Ioa.setDescription('The vendor type ID for an ERX single port OC12/STM4 channelized (OC3/STM1 or OC1/STM0) single-mode long-reach I/O adapter (Product Code: ERX-COC12-LH-IOA).')
erxFe2Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 20))
if mibBuilder.loadTexts: erxFe2Ioa.setStatus('obsolete')
if mibBuilder.loadTexts: erxFe2Ioa.setDescription('The vendor type ID for an ERX dual port 10/100 Fast Ethernet I/O adapter (Product Code: 10/100_FE-2_I/O). This product has reached End-of-life.')
erxFe8Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 21))
if mibBuilder.loadTexts: erxFe8Ioa.setStatus('current')
if mibBuilder.loadTexts: erxFe8Ioa.setDescription('The vendor type ID for an ERX 8 port 10/100 Fast Ethernet I/O adapter (Product Code: FE-8_I/O).')
erxGeMm1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 22))
if mibBuilder.loadTexts: erxGeMm1Ioa.setStatus('deprecated')
if mibBuilder.loadTexts: erxGeMm1Ioa.setDescription('The vendor type ID for an ERX single port Gigabit Ethernet multi-mode I/O adapter (Product Code: GE_M_I/O). This product has reached End-of-life.')
erxGeSm1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 23))
if mibBuilder.loadTexts: erxGeSm1Ioa.setStatus('deprecated')
if mibBuilder.loadTexts: erxGeSm1Ioa.setDescription('The vendor type ID for an ERX single port Gigabit Ethernet single-mode I/O adapter (Product Code: GE_S_I/O). This product has reached End-of-life.')
erxHssiIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 24))
if mibBuilder.loadTexts: erxHssiIoa.setStatus('obsolete')
if mibBuilder.loadTexts: erxHssiIoa.setDescription('The vendor type ID for an ERX 3 port High Speed Serial Interface (HSSI) I/O adapter (Product Code: HSSI-3-I/O).')
erxCt3P12Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 25))
if mibBuilder.loadTexts: erxCt3P12Ioa.setStatus('current')
if mibBuilder.loadTexts: erxCt3P12Ioa.setDescription('The vendor type ID for an ERX 12 port T3 channelized and unchannelized I/O adapter (Product Code: T312-F0-F3-I/O).')
erxV35Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 26))
if mibBuilder.loadTexts: erxV35Ioa.setStatus('obsolete')
if mibBuilder.loadTexts: erxV35Ioa.setDescription('The vendor type ID for an ERX X.21/V.35 I/O adapter (Product Code: ERX-X21-V35-IOA).')
erxGeSfpIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 27))
if mibBuilder.loadTexts: erxGeSfpIoa.setStatus('current')
if mibBuilder.loadTexts: erxGeSfpIoa.setDescription('The vendor type ID for an ERX single port Gigabit Ethernet SFP I/O adapter (Product Code: ERX-GIGESFP-IOA).')
erxUe3P12Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 28))
if mibBuilder.loadTexts: erxUe3P12Ioa.setStatus('current')
if mibBuilder.loadTexts: erxUe3P12Ioa.setDescription('The vendor type ID for an ERX 12 port unchannelized E3 I/O adapter (Product Code: E3-12-F3-I/O).')
erxT3Atm4Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 29))
if mibBuilder.loadTexts: erxT3Atm4Ioa.setStatus('current')
if mibBuilder.loadTexts: erxT3Atm4Ioa.setDescription('The vendor type ID for an ERX 4 port T3 I/O adapter (Product Code: ERX-4T3ATM-IOA).')
erxCOc12Mm1ApsIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 30))
if mibBuilder.loadTexts: erxCOc12Mm1ApsIoa.setStatus('current')
if mibBuilder.loadTexts: erxCOc12Mm1ApsIoa.setDescription('The vendor type ID for an ERX single port OC12/STM4 channelized multi-mode with 1+1 Automatic Protection Switching (APS) I/O adapter (Product Code: ERX-COC12-MA-IOA).')
erxCOc12SmIr1ApsIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 31))
if mibBuilder.loadTexts: erxCOc12SmIr1ApsIoa.setStatus('current')
if mibBuilder.loadTexts: erxCOc12SmIr1ApsIoa.setDescription('The vendor type ID for an ERX single port OC12/STM4 channelized single-mode intermediate-reach with 1+1 Automatic Protection Switching (APS) I/O adapter (Product Code: ERX-COC12-SA-IOA).')
erxCOc12SmLr1ApsIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 32))
if mibBuilder.loadTexts: erxCOc12SmLr1ApsIoa.setStatus('current')
if mibBuilder.loadTexts: erxCOc12SmLr1ApsIoa.setDescription('The vendor type ID for an ERX single port OC12/STM4 channelized single-mode long-reach with 1+1 Automatic Protection Switching (APS) I/O adapter (Product Code: ERX-COC12-LA-IOA).')
erxOc12Mm1ApsIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 33))
if mibBuilder.loadTexts: erxOc12Mm1ApsIoa.setStatus('current')
if mibBuilder.loadTexts: erxOc12Mm1ApsIoa.setDescription('The vendor type ID for an ERX single port OC12/STM4 multi-mode with 1+1 Automatic Protection Switching (APS) I/O adapter (Product Code: ERX-OC12MM-A-IOA).')
erxOc12SmIr1ApsIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 34))
if mibBuilder.loadTexts: erxOc12SmIr1ApsIoa.setStatus('current')
if mibBuilder.loadTexts: erxOc12SmIr1ApsIoa.setDescription('The vendor type ID for an ERX single port OC12/STM4 single-mode intermediate-reach with 1+1 Automatic Protection Switching (APS) I/O adapter (Product Code: ERX-OC12SM-A-IOA).')
erxOc12SmLr1ApsIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 35))
if mibBuilder.loadTexts: erxOc12SmLr1ApsIoa.setStatus('current')
if mibBuilder.loadTexts: erxOc12SmLr1ApsIoa.setDescription('The vendor type ID for an ERX single port OC12/STM4 single-mode long-reach with 1+1 Automatic Protection Switching (APS) I/O adapter (Product Code: ERX-OC12LH-A-IOA).')
erxCOc12AtmPosMm1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 36))
if mibBuilder.loadTexts: erxCOc12AtmPosMm1Ioa.setStatus('current')
if mibBuilder.loadTexts: erxCOc12AtmPosMm1Ioa.setDescription('The vendor type ID for an ERX single port OC12/STM4 channelized multi-mode ATM/POS I/O adapter (Product Code: ERX-1COC12MM-IOA).')
erxCOc12AtmPosSmIr1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 37))
if mibBuilder.loadTexts: erxCOc12AtmPosSmIr1Ioa.setStatus('current')
if mibBuilder.loadTexts: erxCOc12AtmPosSmIr1Ioa.setDescription('The vendor type ID for an ERX single port OC12/STM4 channelized single-mode intermediate-reach ATM/POS I/O adapter (Product Code: ERX-1COC12SM-IOA).')
erxCOc12AtmPosSmLr1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 38))
if mibBuilder.loadTexts: erxCOc12AtmPosSmLr1Ioa.setStatus('current')
if mibBuilder.loadTexts: erxCOc12AtmPosSmLr1Ioa.setDescription('The vendor type ID for an ERX single port OC12/STM4 channelized single-mode long-reach ATM/POS I/O adapter (Product Code: ERX-1COC12LH-IOA).')
erxCOc12AtmPosMm1ApsIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 39))
if mibBuilder.loadTexts: erxCOc12AtmPosMm1ApsIoa.setStatus('current')
if mibBuilder.loadTexts: erxCOc12AtmPosMm1ApsIoa.setDescription('The vendor type ID for an ERX single port OC12/STM4 channelized ATM/POS multi-mode with 1+1 Automatic Protection Switching (APS) I/O adapter (Product Code: ERX-2COC12MM-IOA).')
erxCOc12AtmPosSmIr1ApsIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 40))
if mibBuilder.loadTexts: erxCOc12AtmPosSmIr1ApsIoa.setStatus('current')
if mibBuilder.loadTexts: erxCOc12AtmPosSmIr1ApsIoa.setDescription('The vendor type ID for an ERX single port OC12/STM4 channelized ATM/POS single-mode intermediate-reach with 1+1 Automatic Protection Switching (APS) I/O adapter (Product Code: ERX-2COC12SM-IOA).')
erxCOc12AtmPosSmLr1ApsIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 41))
if mibBuilder.loadTexts: erxCOc12AtmPosSmLr1ApsIoa.setStatus('current')
if mibBuilder.loadTexts: erxCOc12AtmPosSmLr1ApsIoa.setDescription('The vendor type ID for an ERX single port OC12/STM4 channelized ATM/POS single-mode long-reach with 1+1 Automatic Protection Switching (APS) I/O adapter (Product Code: ERX-2COC12LH-IOA).')
erxT1E1RedundantIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 42))
if mibBuilder.loadTexts: erxT1E1RedundantIoa.setStatus('current')
if mibBuilder.loadTexts: erxT1E1RedundantIoa.setDescription('The vendor type ID for an ERX T1/E1 redundant midplane spare I/O adapter (Product Code: PNL-RDMD-T1/E1).')
erxT3E3RedundantIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 43))
if mibBuilder.loadTexts: erxT3E3RedundantIoa.setStatus('current')
if mibBuilder.loadTexts: erxT3E3RedundantIoa.setDescription('The vendor type ID for an ERX T3/E3 redundant midplane spare I/O adapter (Product Code: PNL-RDMD-T3/E3).')
erxCt3RedundantIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 44))
if mibBuilder.loadTexts: erxCt3RedundantIoa.setStatus('current')
if mibBuilder.loadTexts: erxCt3RedundantIoa.setDescription('The vendor type ID for an ERX channelized T3 redundant midplane spare I/O adapter (Product Code: ERX-12PT3E3-PNL).')
erxOcxRedundantIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 45))
if mibBuilder.loadTexts: erxOcxRedundantIoa.setStatus('current')
if mibBuilder.loadTexts: erxOcxRedundantIoa.setDescription('The vendor type ID for an ERX OC3/OC12 redundant midplane spare I/O adapter (Product Code: PNL-RDMD-OCX).')
erxCOcxRedundantIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 46))
if mibBuilder.loadTexts: erxCOcxRedundantIoa.setStatus('current')
if mibBuilder.loadTexts: erxCOcxRedundantIoa.setDescription('The vendor type ID for an ERX channelized OC3/OC12 redundant midplane spare I/O adapter (Product Code: ERX-COCXPNL-IOA).')
erxOc3Mm4ApsIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 47))
if mibBuilder.loadTexts: erxOc3Mm4ApsIoa.setStatus('current')
if mibBuilder.loadTexts: erxOc3Mm4ApsIoa.setDescription('The vendor type ID for an ERX 4 port OC3/STM4 multi-mode with 1+1 Automatic Protection Switching (APS) I/O adapter (Product Code: ERX-OC3M-APS-IOA).')
erxOc3SmIr4ApsIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 48))
if mibBuilder.loadTexts: erxOc3SmIr4ApsIoa.setStatus('current')
if mibBuilder.loadTexts: erxOc3SmIr4ApsIoa.setDescription('The vendor type ID for an ERX 4 port OC3/STM4 single-mode intermediate-reach with 1+1 Automatic Protection Switching (APS) I/O adapter (Product Code: ERX-OC3S-APS-IOA).')
erxOc3SmLr4ApsIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 49))
if mibBuilder.loadTexts: erxOc3SmLr4ApsIoa.setStatus('current')
if mibBuilder.loadTexts: erxOc3SmLr4ApsIoa.setDescription('The vendor type ID for an ERX 4 port OC3/STM4 single-mode long-reach with 1+1 Automatic Protection Switching (APS) I/O adapter (Product Code: ERX-OC3L-APS-IOA).')
erxOc48Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 50))
if mibBuilder.loadTexts: erxOc48Ioa.setStatus('current')
if mibBuilder.loadTexts: erxOc48Ioa.setDescription('The vendor type ID for an ERX single port OC48/STM16 I/O adapter (Product Code: ERX-OC48ST16-IOA).')
erxOc3Atm2Ge1Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 51))
if mibBuilder.loadTexts: erxOc3Atm2Ge1Ioa.setStatus('current')
if mibBuilder.loadTexts: erxOc3Atm2Ge1Ioa.setDescription('The vendor type ID for an ERX dual port OC3 ATM plus single port Gigabit Ethernet I/O adapter (Product Code: [450-00057-00]).')
erxOc3Atm2Pos2Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 52))
if mibBuilder.loadTexts: erxOc3Atm2Pos2Ioa.setStatus('current')
if mibBuilder.loadTexts: erxOc3Atm2Pos2Ioa.setDescription('The vendor type ID for an ERX dual port OC3 ATM plus dual port OC3 POS I/O adapter (Product Code: [450-00054-00]).')
erxGe2Ioa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 53))
if mibBuilder.loadTexts: erxGe2Ioa.setStatus('current')
if mibBuilder.loadTexts: erxGe2Ioa.setDescription('The vendor type ID for an ERX dual port Gigabit Ethernet SFP I/O adapter (Product Code: [450-00073-00]).')
erxFe8FxIoa = ObjectIdentity((1, 3, 6, 1, 4, 1, 4874, 4, 2, 2, 1, 8, 54))
if mibBuilder.loadTexts: erxFe8FxIoa.setStatus('current')
if mibBuilder.loadTexts: erxFe8FxIoa.setDescription('The vendor type ID for an ERX 8 port 100 Fast Ethernet SFP optical I/O adapter (Product Code: 450-00081-00).')
mibBuilder.exportSymbols("Juniper-ERX-Registry", erx5Plus1Redundant12T3E3Midplane=erx5Plus1Redundant12T3E3Midplane, erxCt3=erxCt3, erxE3Atm=erxE3Atm, erxSrp310Ioa=erxSrp310Ioa, erxFe2=erxFe2, erx2Plus1Redundant12T3E3Midplane=erx2Plus1Redundant12T3E3Midplane, erx1440Chassis=erx1440Chassis, erxLineIoAdapter=erxLineIoAdapter, erxOc3Mm4ApsIoa=erxOc3Mm4ApsIoa, erxCt1Ioa=erxCt1Ioa, erxSrp10g1gEcc=erxSrp10g1gEcc, erxOc12SmLr1ApsIoa=erxOc12SmLr1ApsIoa, erxCt3RedundantIoa=erxCt3RedundantIoa, erx4Plus1RedundantT3E3Midplane=erx4Plus1RedundantT3E3Midplane, erxOc48Ioa=erxOc48Ioa, erx1Plus1RedundantT3E3Midplane=erx1Plus1RedundantT3E3Midplane, erx700Chassis=erx700Chassis, erxCe1TIoa=erxCe1TIoa, erxOc12SmLr1Ioa=erxOc12SmLr1Ioa, erx5Plus1RedundantCOcMidplane=erx5Plus1RedundantCOcMidplane, erxSrpIoAdapter=erxSrpIoAdapter, erxPowerInput=erxPowerInput, erxCOc12SmLr1Ioa=erxCOc12SmLr1Ioa, erxT3Frame=erxT3Frame, erxSrp5g1gEcc=erxSrp5g1gEcc, erxE3Ioa=erxE3Ioa, erxOc3Sm2Ioa=erxOc3Sm2Ioa, erx2Plus1RedundantCOcMidplane=erx2Plus1RedundantCOcMidplane, erxCOc12AtmPosMm1ApsIoa=erxCOc12AtmPosMm1ApsIoa, erx700FanAssembly=erx700FanAssembly, erxCOc12SmLr1ApsIoa=erxCOc12SmLr1ApsIoa, erx1Plus1RedundantOcMidplane=erx1Plus1RedundantOcMidplane, erxSrp5g2gEcc=erxSrp5g2gEcc, erxGeSm1Ioa=erxGeSm1Ioa, erxCOcx=erxCOcx, erx1400FanAssembly=erx1400FanAssembly, erx310DCChassis=erx310DCChassis, erxPdu=erxPdu, erx1Plus1RedundantT1E1Midplane=erx1Plus1RedundantT1E1Midplane, erx5Plus1RedundantT1E1Midplane=erx5Plus1RedundantT1E1Midplane, erx2Plus1RedundantOcMidplane=erx2Plus1RedundantOcMidplane, erxLineModule=erxLineModule, erxCOcxRedundantIoa=erxCOcxRedundantIoa, erx3Plus1RedundantOcMidplane=erx3Plus1RedundantOcMidplane, erxOc3Atm2Ge1Ioa=erxOc3Atm2Ge1Ioa, erx700Midplane=erx700Midplane, erxOc3Oc12Atm256M=erxOc3Oc12Atm256M, erxSrp10=erxSrp10, erxOc3SmIr4ApsIoa=erxOc3SmIr4ApsIoa, erxT1E1RedundantIoa=erxT1E1RedundantIoa, erxV35Ioa=erxV35Ioa, erx3Plus1RedundantT1E1Midplane=erx3Plus1RedundantT1E1Midplane, erxCt3P12=erxCt3P12, erxUt3E3Ocx=erxUt3E3Ocx, erx310ACChassis=erx310ACChassis, erxSrp5=erxSrp5, erxService=erxService, erxCt1=erxCt1, erx5Plus1RedundantT3E3Midplane=erx5Plus1RedundantT3E3Midplane, erxGeSfpIoa=erxGeSfpIoa, erxCOc12Mm1ApsIoa=erxCOc12Mm1ApsIoa, erxOc3Hybrid=erxOc3Hybrid, erxOc3=erxOc3, erxSrp40g2gEc2=erxSrp40g2gEc2, erxOcxRedundantIoa=erxOcxRedundantIoa, erx5Plus1RedundantOcMidplane=erx5Plus1RedundantOcMidplane, erxSrpIoa=erxSrpIoa, erxSrp5Plus=erxSrp5Plus, erxSrpModule=erxSrpModule, erxOc3Mm4Ioa=erxOc3Mm4Ioa, erxGe2=erxGe2, erxOc3SmLr4ApsIoa=erxOc3SmLr4ApsIoa, erxFanAssembly=erxFanAssembly, erxCt3Ioa=erxCt3Ioa, erxSrp310=erxSrp310, erx3Plus1RedundantT3E3Midplane=erx3Plus1RedundantT3E3Midplane, erx300DCPdu=erx300DCPdu, erxOc48=erxOc48, erxT3Atm=erxT3Atm, erxMidplane=erxMidplane, erx2Plus1RedundantT3E3Midplane=erx2Plus1RedundantT3E3Midplane, erxOc12Mm1ApsIoa=erxOc12Mm1ApsIoa, erxFe8Ioa=erxFe8Ioa, erxCOc3Mm4Ioa=erxCOc3Mm4Ioa, erxOc3Oc12Atm=erxOc3Oc12Atm, erxCOc3SmIr4Ioa=erxCOc3SmIr4Ioa, erx1400Chassis=erx1400Chassis, erxOc3Atm2Pos2Ioa=erxOc3Atm2Pos2Ioa, erx4Plus1RedundantT1E1Midplane=erx4Plus1RedundantT1E1Midplane, erxCe1Ioa=erxCe1Ioa, erxCOc3SmLr4Ioa=erxCOc3SmLr4Ioa, erxFe2Ioa=erxFe2Ioa, erx4Plus1RedundantOcMidplane=erx4Plus1RedundantOcMidplane, erx1440Midplane=erx1440Midplane, erxOc3SmIr4Ioa=erxOc3SmIr4Ioa, erxVts=erxVts, erx1400Midplane=erx1400Midplane, erxCOc12AtmPosSmIr1Ioa=erxCOc12AtmPosSmIr1Ioa, erxGeFe256M=erxGeFe256M, PYSNMP_MODULE_ID=juniErxRegistry, erxCOc12AtmPosSmIr1ApsIoa=erxCOc12AtmPosSmIr1ApsIoa, erxOc12SmIr1Ioa=erxOc12SmIr1Ioa, erxUe3P12Ioa=erxUe3P12Ioa, erxCe1=erxCe1, erxHssiIoa=erxHssiIoa, erxCOc12SmIr1ApsIoa=erxCOc12SmIr1ApsIoa, erxCOc12AtmPosSmLr1ApsIoa=erxCOc12AtmPosSmLr1ApsIoa, erxCOc12SmIr1Ioa=erxCOc12SmIr1Ioa, erx300FanAssembly=erx300FanAssembly, erxChassis=erxChassis, erxCOc12AtmPosMm1Ioa=erxCOc12AtmPosMm1Ioa, erxT3E3RedundantIoa=erxT3E3RedundantIoa, erx300ACPdu=erx300ACPdu, erxFe8FxIoa=erxFe8FxIoa, erx2Plus1RedundantT1E1Midplane=erx2Plus1RedundantT1E1Midplane, erxGeMm1Ioa=erxGeMm1Ioa, erxV35=erxV35, erxE3Frame=erxE3Frame, erxOc3Oc12Pos=erxOc3Oc12Pos, erxOc12Mm1Ioa=erxOc12Mm1Ioa, erxCOc12AtmPosSmLr1Ioa=erxCOc12AtmPosSmLr1Ioa, erxCOc12Mm1Ioa=erxCOc12Mm1Ioa, erxOc12SmIr1ApsIoa=erxOc12SmIr1ApsIoa, erxGe2Ioa=erxGe2Ioa, erxOc3SmLr4Ioa=erxOc3SmLr4Ioa, erxSrp10Ecc=erxSrp10Ecc, erxSrp40Plus=erxSrp40Plus, erx300Midplane=erx300Midplane, erx1440Pdu=erx1440Pdu, erxSrp10g2gEcc=erxSrp10g2gEcc, erxHssi=erxHssi, erxGeFe=erxGeFe, erxOc3Mm2Ioa=erxOc3Mm2Ioa, erxTunnelService=erxTunnelService, erxT3Atm4Ioa=erxT3Atm4Ioa, erxSrp40=erxSrp40, juniErxRegistry=juniErxRegistry, juniErxEntPhysicalType=juniErxEntPhysicalType, erxCt3P12Ioa=erxCt3P12Ioa)
