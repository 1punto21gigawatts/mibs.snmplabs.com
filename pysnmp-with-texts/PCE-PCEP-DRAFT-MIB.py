#
# PySNMP MIB module PCE-PCEP-DRAFT-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PCE-PCEP-DRAFT-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
InetAddress, InetPortNumber, InetAddressPrefixLength, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddress", "InetPortNumber", "InetAddressPrefixLength", "InetAddressType")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Unsigned32, iso, Counter32, TimeTicks, MibIdentifier, Integer32, Counter64, experimental, Bits, ModuleIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ObjectIdentity, IpAddress, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "iso", "Counter32", "TimeTicks", "MibIdentifier", "Integer32", "Counter64", "experimental", "Bits", "ModuleIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ObjectIdentity", "IpAddress", "Gauge32")
TimeInterval, RowStatus, StorageType, DisplayString, TimeStamp, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "TimeInterval", "RowStatus", "StorageType", "DisplayString", "TimeStamp", "TruthValue", "TextualConvention")
pcePcepDraftMIB = ModuleIdentity((1, 3, 6, 1, 3, 9999))
pcePcepDraftMIB.setRevisions(('2007-07-08 12:00', '2007-02-20 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: pcePcepDraftMIB.setRevisionsDescriptions((' Changes from -00- draft : 1. Clarified the notion of PCEP Client. 2. Added new objects to the PCEP client and session tables to manage PCEP protocol as in section 8 of draft-ietf-pce-pcep-08.txt 3. Did not add all the objects to manage the recommendations in draft-ietf-pce-pcep-08.txt to control the complexity of the MIB.', 'draft-00 version',))
if mibBuilder.loadTexts: pcePcepDraftMIB.setLastUpdated('200707080000Z')
if mibBuilder.loadTexts: pcePcepDraftMIB.setOrganization('Path Computation Element (PCE) Working Group')
if mibBuilder.loadTexts: pcePcepDraftMIB.setContactInfo(' A S Kiran Koushik Cisco Systems Inc. Stephan Emile France Telecom DR&D Email: kkoushik@cisco.com Email: emile.stephan@orange-ft.com Email comments directly to the PCE WG Mailing List at pce@ietf.org WG-URL: http://www.ietf.org/html.charters/pce-charter.html ')
if mibBuilder.loadTexts: pcePcepDraftMIB.setDescription('This MIB module defines a collection of objects for managing PCE communication protocol(PCEP).')
class PcePcepIdentifier(TextualConvention, OctetString):
    description = 'The LDP identifier is a six octet quantity which is used to identify a PCE client.'
    status = 'current'
    displayHint = '1d.1d.1d.1d:1d:1d'
    subtypeSpec = OctetString.subtypeSpec + ValueSizeConstraint(6, 6)
    fixedLength = 6

pcePcepNotifications = MibIdentifier((1, 3, 6, 1, 3, 9999, 0))
pcePcepMIBObjects = MibIdentifier((1, 3, 6, 1, 3, 9999, 1))
pcePcepConformance = MibIdentifier((1, 3, 6, 1, 3, 9999, 2))
pcePcepClientObjects = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 1))
pcePcepClientLastChange = MibScalar((1, 3, 6, 1, 3, 9999, 1, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepClientLastChange.setStatus('current')
if mibBuilder.loadTexts: pcePcepClientLastChange.setDescription('The value of sysUpTime at the time of the most recent addition or deletion of an entry to/from the pcePcepClientTable/pcePcepClientStatsTable, or the most recent change in value of any objects in the pcePcepClientTable. If no such changes have occurred since the last re-initialization of the local management subsystem, then this object contains a zero value.')
pcePcepClientIndexNext = MibScalar((1, 3, 6, 1, 3, 9999, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepClientIndexNext.setStatus('current')
if mibBuilder.loadTexts: pcePcepClientIndexNext.setDescription('This object contains an appropriate value to be used for pcePcepClientIndex when creating entries in the pcePcepClientTable. The value 0 indicates that no unassigned entries are available.')
pcePcepClientTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 1, 3), )
if mibBuilder.loadTexts: pcePcepClientTable.setStatus('current')
if mibBuilder.loadTexts: pcePcepClientTable.setDescription('This table contains information about the PCEP Client.')
pcePcepClientEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 1, 3, 1), ).setIndexNames((0, "PCE-PCEP-DRAFT-MIB", "pcePcepClientPcepId"), (0, "PCE-PCEP-DRAFT-MIB", "pcePcepClientIndex"))
if mibBuilder.loadTexts: pcePcepClientEntry.setStatus('current')
if mibBuilder.loadTexts: pcePcepClientEntry.setDescription('An entry in this table represents a PCEP client. An entry can be created by a network administrator or by an SNMP agent as instructed by PCEP.')
pcePcepClientPcepId = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 1, 3, 1, 1), PcePcepIdentifier())
if mibBuilder.loadTexts: pcePcepClientPcepId.setStatus('current')
if mibBuilder.loadTexts: pcePcepClientPcepId.setDescription('The PCEP client identifier.')
pcePcepClientIndex = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 1, 3, 1, 2), Unsigned32())
if mibBuilder.loadTexts: pcePcepClientIndex.setStatus('current')
if mibBuilder.loadTexts: pcePcepClientIndex.setDescription("This index is used to uniquely identify the PCEP client. Before creating a row in this table, the 'pcePcepClientIndexNext' object should be retrieved. That value should be used for the value of this index when creating a row in this table. NOTE: if a value of zero (0) is retrieved, that indicates that no rows can be created in this table at this time.")
pcePcepClientAdminStatus = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2))).clone('enable')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pcePcepClientAdminStatus.setStatus('current')
if mibBuilder.loadTexts: pcePcepClientAdminStatus.setDescription("The administrative status of this PCEP Client. If this object is changed from 'enable' to 'disable' and this entity has already attempted to establish contact with a Peer, then all contact with that Peer is lost and all information from that Peer needs to be removed from the MIB. (This implies that the network management subsystem should clean up any related entry in the pcePcepPeerTable. This further implies that a 'tear-down' for that session is issued and the session and all information related to that session cease to exist). At this point the operator is able to change values which are related to this entity. When the admin status is set back to 'enable', then this Entity will attempt to establish a new session with the Peer.")
pcePcepClientOperStatus = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 1, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("unknown", 1), ("enabled", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepClientOperStatus.setStatus('current')
if mibBuilder.loadTexts: pcePcepClientOperStatus.setDescription('The operational status of this PCEP client. The value of unknown(1) indicates that the operational status cannot be determined at this time. The value of unknown should be a transient condition before changing to enabled(2) or disabled(3).')
pcePcepClientTcpPort = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 1, 3, 1, 6), InetPortNumber()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pcePcepClientTcpPort.setStatus('current')
if mibBuilder.loadTexts: pcePcepClientTcpPort.setDescription('The TCP Port for PCEP. The default value is the well-known value of this port.')
pcePcepClientKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 1, 3, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pcePcepClientKeepAliveTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepClientKeepAliveTimer.setDescription('The integer value which is the proposed keep alive timer for this PCEP client.')
pcePcepClientStorageType = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 1, 3, 1, 8), StorageType().clone('nonVolatile')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pcePcepClientStorageType.setStatus('current')
if mibBuilder.loadTexts: pcePcepClientStorageType.setDescription("The storage type for this conceptual row. Conceptual rows having the value 'permanent(4)' need not allow write-access to any columnar objects in the row.")
pcePcepClientRowStatus = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 1, 3, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: pcePcepClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: pcePcepClientRowStatus.setDescription("The status of this conceptual row. All writable objects in this row may be modified at any time, however, as described in detail in the section entitled, 'Changing Values After Session Establishment', and again described in the DESCRIPTION clause of the pcePcepClientAdminStatus object, if a session has been initiated with a Peer, changing objects in this table will wreak havoc with the session and interrupt traffic. To repeat again: the recommended procedure is to set the pcePcepClientAdminStatus to down, thereby explicitly causing a session to be torn down. Then, change objects in this entry, then set the pcePcepClientAdminStatus to enable, which enables a new session to be initiated.")
pcePcepClientDeadTimer = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 1, 3, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(4, 262140))).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: pcePcepClientDeadTimer.setStatus('current')
if mibBuilder.loadTexts: pcePcepClientDeadTimer.setDescription('The value which indicates a period of time after the expiration of which a PCEP peer declares the session down if no PCEP message has been received. The Deadtimer value is recommended to be 4 times the Keepalive value.')
pcePcepSessionObjects = MibIdentifier((1, 3, 6, 1, 3, 9999, 1, 3))
pcePcepPeerLastChange = MibScalar((1, 3, 6, 1, 3, 9999, 1, 3, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerLastChange.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerLastChange.setDescription('The value of sysUpTime at the time of the most recent addition or deletion to/from the pcePcepPeerTable/pcePcepSessionTable.')
pcePcepPeerTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 3, 2), )
if mibBuilder.loadTexts: pcePcepPeerTable.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerTable.setDescription('Information about PCEP peers known by Entities in the pcePcepClientTable. The information in this table is based on information from the Client-Peer interaction during session initialization but is not appropriate for the pcePcepSessionTable, because objects in this table may or may not be used in session establishment.')
pcePcepPeerEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 3, 2, 1), ).setIndexNames((0, "PCE-PCEP-DRAFT-MIB", "pcePcepClientPcepId"), (0, "PCE-PCEP-DRAFT-MIB", "pcePcepClientIndex"), (0, "PCE-PCEP-DRAFT-MIB", "pcePcepPeerPcepId"))
if mibBuilder.loadTexts: pcePcepPeerEntry.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerEntry.setDescription('Information about a single Peer which is related to a Session. This table is augmented by the pcePcepSessionTable.')
pcePcepPeerPcepId = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 2, 1, 1), PcePcepIdentifier())
if mibBuilder.loadTexts: pcePcepPeerPcepId.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerPcepId.setDescription('The PCEP identifier of this PCE Peer.')
pcePcepPeerTransportAddrType = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 2, 1, 2), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerTransportAddrType.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerTransportAddrType.setDescription('The type of the Internet address for the pcePcepPeerTransportAddr object. The PCEP specification describes this as being either an IPv4 Transport Address or IPv6 Transport This object specifies how the value of the pcePcepPeerTransportAddr object should be interpreted.')
pcePcepPeerTransportAddr = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 2, 1, 3), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepPeerTransportAddr.setStatus('current')
if mibBuilder.loadTexts: pcePcepPeerTransportAddr.setDescription('The Internet address advertised by the peer. The type of this address is specified by the value of the pcePcepPeerTransportAddrType object.')
pcePcepSessionMax = MibScalar((1, 3, 6, 1, 3, 9999, 1, 3, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessionMax.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessionMax.setDescription('The maximum number of sessions that can be setup on this PCEP client.')
pcePcepSessionTable = MibTable((1, 3, 6, 1, 3, 9999, 1, 3, 3), )
if mibBuilder.loadTexts: pcePcepSessionTable.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessionTable.setDescription('A table of Sessions between PCEP clients. This table AUGMENTS the pcePcepPeerTable. Each row in this table represents a single session.')
pcePcepSessionEntry = MibTableRow((1, 3, 6, 1, 3, 9999, 1, 3, 3, 1), )
pcePcepPeerEntry.registerAugmentions(("PCE-PCEP-DRAFT-MIB", "pcePcepSessionEntry"))
pcePcepSessionEntry.setIndexNames(*pcePcepPeerEntry.getIndexNames())
if mibBuilder.loadTexts: pcePcepSessionEntry.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessionEntry.setDescription('An entry in this table represents information on a single session between two PCEP clients. The information contained in a row is read-only.')
pcePcepSessionStateLastChange = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 3, 1, 1), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessionStateLastChange.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessionStateLastChange.setDescription('The value of sysUpTime at the time this Session entered its current state as denoted by the pcePcepSessionState object.')
pcePcepSessionState = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("sessionUp", 1), ("keepWait", 2), ("openWait", 3), ("tcpPending", 4), ("idle", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessionState.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessionState.setDescription('The current state of the session, all of the states 1 to 5 are based on the state machine for session negotiation behavior.')
pcePcepSessionKeepAliveHoldTimeRem = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 3, 1, 3), TimeInterval()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessionKeepAliveHoldTimeRem.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessionKeepAliveHoldTimeRem.setDescription('The keep alive hold time remaining for this session.')
pcePcepSessionKeepAliveTime = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 3, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessionKeepAliveTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessionKeepAliveTime.setDescription("The negotiated KeepAlive Time which represents the amount of seconds between keep alive messages. The pcePcepClientKeepAliveHoldTimer related to this Session is the value that was proposed as the KeepAlive Time for this session. This value is negotiated during session initialization between the entity's proposed value (i.e., the value configured in pcePcepClientKeepAliveHoldTimer) and the peer's proposed KeepAlive Hold Timer value. This value is the smaller of the two proposed values.")
pcePcepSessionDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 3, 1, 5), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessionDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessionDiscontinuityTime.setDescription("The value of sysUpTime on the most recent occasion at which any one or more of this session's counters suffered a discontinuity. The relevant counters are the specific instances associated with this session of any Counter32 object contained in the pcePcepSessionStatsTable. The initial value of this object is the value of sysUpTime when the entry was created in this table. Also, a command generator can distinguish when a session between a given Entity and Peer goes away and a new session is established. This value would change and thus indicate to the command generator that this is a different session.")
pcePcepSessionSpeakerRole = MibTableColumn((1, 3, 6, 1, 3, 9999, 1, 3, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("pcc", 1), ("pce", 2), ("pccandpce", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: pcePcepSessionSpeakerRole.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessionSpeakerRole.setDescription('The value of this object indicates the PCEP speaker role in this session.')
pcePcepSessionUp = NotificationType((1, 3, 6, 1, 3, 9999, 0, 1)).setObjects(("PCE-PCEP-DRAFT-MIB", "pcePcepSessionState"), ("PCE-PCEP-DRAFT-MIB", "pcePcepSessionDiscontinuityTime"))
if mibBuilder.loadTexts: pcePcepSessionUp.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessionUp.setDescription("This notification is sent when the value of 'pcePcepSessionState' enters the 'sessionUp(1)' state.")
pcePcepSessionDown = NotificationType((1, 3, 6, 1, 3, 9999, 0, 2)).setObjects(("PCE-PCEP-DRAFT-MIB", "pcePcepSessionState"), ("PCE-PCEP-DRAFT-MIB", "pcePcepSessionDiscontinuityTime"))
if mibBuilder.loadTexts: pcePcepSessionDown.setStatus('current')
if mibBuilder.loadTexts: pcePcepSessionDown.setDescription("This notification is sent when the value of 'pcePcepSessionState' leaves the 'sessionUp(1)' state.")
pcePcepGroups = MibIdentifier((1, 3, 6, 1, 3, 9999, 2, 1))
pcePcepCompliances = MibIdentifier((1, 3, 6, 1, 3, 9999, 2, 2))
pcePcepModuleFullCompliance = ModuleCompliance((1, 3, 6, 1, 3, 9999, 2, 2, 1)).setObjects(("PCE-PCEP-DRAFT-MIB", "pcePcepGeneralGroup"), ("PCE-PCEP-DRAFT-MIB", "pcePcepNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcePcepModuleFullCompliance = pcePcepModuleFullCompliance.setStatus('current')
if mibBuilder.loadTexts: pcePcepModuleFullCompliance.setDescription('The Module is implemented with support for read-create and read-write. In other words, both monitoring and configuration are available when using this MODULE-COMPLIANCE.')
pcePcepModuleReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 3, 9999, 2, 2, 2)).setObjects(("PCE-PCEP-DRAFT-MIB", "pcePcepGeneralGroup"), ("PCE-PCEP-DRAFT-MIB", "pcePcepNotificationsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcePcepModuleReadOnlyCompliance = pcePcepModuleReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: pcePcepModuleReadOnlyCompliance.setDescription('The Module is implemented with support for read-only. In other words, only monitoring is available by implementing this MODULE-COMPLIANCE.')
pcePcepGeneralGroup = ObjectGroup((1, 3, 6, 1, 3, 9999, 2, 1, 1)).setObjects(("PCE-PCEP-DRAFT-MIB", "pcePcepClientLastChange"), ("PCE-PCEP-DRAFT-MIB", "pcePcepClientIndexNext"), ("PCE-PCEP-DRAFT-MIB", "pcePcepClientAdminStatus"), ("PCE-PCEP-DRAFT-MIB", "pcePcepClientOperStatus"), ("PCE-PCEP-DRAFT-MIB", "pcePcepClientTcpPort"), ("PCE-PCEP-DRAFT-MIB", "pcePcepClientKeepAliveTimer"), ("PCE-PCEP-DRAFT-MIB", "pcePcepClientStorageType"), ("PCE-PCEP-DRAFT-MIB", "pcePcepClientRowStatus"), ("PCE-PCEP-DRAFT-MIB", "pcePcepPeerLastChange"), ("PCE-PCEP-DRAFT-MIB", "pcePcepPeerTransportAddrType"), ("PCE-PCEP-DRAFT-MIB", "pcePcepPeerTransportAddr"), ("PCE-PCEP-DRAFT-MIB", "pcePcepSessionStateLastChange"), ("PCE-PCEP-DRAFT-MIB", "pcePcepSessionState"), ("PCE-PCEP-DRAFT-MIB", "pcePcepSessionKeepAliveHoldTimeRem"), ("PCE-PCEP-DRAFT-MIB", "pcePcepSessionKeepAliveTime"), ("PCE-PCEP-DRAFT-MIB", "pcePcepSessionDiscontinuityTime"), ("PCE-PCEP-DRAFT-MIB", "pcePcepClientDeadTimer"), ("PCE-PCEP-DRAFT-MIB", "pcePcepSessionMax"), ("PCE-PCEP-DRAFT-MIB", "pcePcepSessionSpeakerRole"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcePcepGeneralGroup = pcePcepGeneralGroup.setStatus('current')
if mibBuilder.loadTexts: pcePcepGeneralGroup.setDescription('Objects that apply to all PCEP MIB implementations.')
pcePcepNotificationsGroup = NotificationGroup((1, 3, 6, 1, 3, 9999, 2, 1, 2)).setObjects(("PCE-PCEP-DRAFT-MIB", "pcePcepSessionUp"), ("PCE-PCEP-DRAFT-MIB", "pcePcepSessionDown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    pcePcepNotificationsGroup = pcePcepNotificationsGroup.setStatus('current')
if mibBuilder.loadTexts: pcePcepNotificationsGroup.setDescription('The notifications for a PCEP MIB implementation.')
mibBuilder.exportSymbols("PCE-PCEP-DRAFT-MIB", pcePcepDraftMIB=pcePcepDraftMIB, pcePcepClientIndexNext=pcePcepClientIndexNext, pcePcepSessionEntry=pcePcepSessionEntry, pcePcepSessionUp=pcePcepSessionUp, pcePcepSessionStateLastChange=pcePcepSessionStateLastChange, pcePcepClientDeadTimer=pcePcepClientDeadTimer, PcePcepIdentifier=PcePcepIdentifier, pcePcepClientKeepAliveTimer=pcePcepClientKeepAliveTimer, pcePcepClientRowStatus=pcePcepClientRowStatus, PYSNMP_MODULE_ID=pcePcepDraftMIB, pcePcepConformance=pcePcepConformance, pcePcepNotificationsGroup=pcePcepNotificationsGroup, pcePcepSessionObjects=pcePcepSessionObjects, pcePcepGroups=pcePcepGroups, pcePcepSessionKeepAliveHoldTimeRem=pcePcepSessionKeepAliveHoldTimeRem, pcePcepPeerEntry=pcePcepPeerEntry, pcePcepModuleReadOnlyCompliance=pcePcepModuleReadOnlyCompliance, pcePcepMIBObjects=pcePcepMIBObjects, pcePcepNotifications=pcePcepNotifications, pcePcepClientOperStatus=pcePcepClientOperStatus, pcePcepModuleFullCompliance=pcePcepModuleFullCompliance, pcePcepSessionKeepAliveTime=pcePcepSessionKeepAliveTime, pcePcepPeerTransportAddrType=pcePcepPeerTransportAddrType, pcePcepClientAdminStatus=pcePcepClientAdminStatus, pcePcepPeerTransportAddr=pcePcepPeerTransportAddr, pcePcepSessionMax=pcePcepSessionMax, pcePcepClientLastChange=pcePcepClientLastChange, pcePcepSessionSpeakerRole=pcePcepSessionSpeakerRole, pcePcepClientStorageType=pcePcepClientStorageType, pcePcepSessionTable=pcePcepSessionTable, pcePcepGeneralGroup=pcePcepGeneralGroup, pcePcepClientIndex=pcePcepClientIndex, pcePcepClientEntry=pcePcepClientEntry, pcePcepSessionDown=pcePcepSessionDown, pcePcepClientObjects=pcePcepClientObjects, pcePcepPeerLastChange=pcePcepPeerLastChange, pcePcepClientTable=pcePcepClientTable, pcePcepCompliances=pcePcepCompliances, pcePcepSessionState=pcePcepSessionState, pcePcepClientPcepId=pcePcepClientPcepId, pcePcepClientTcpPort=pcePcepClientTcpPort, pcePcepSessionDiscontinuityTime=pcePcepSessionDiscontinuityTime, pcePcepPeerTable=pcePcepPeerTable, pcePcepPeerPcepId=pcePcepPeerPcepId)
