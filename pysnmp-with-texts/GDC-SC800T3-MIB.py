#
# PySNMP MIB module GDC-SC800T3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GDC-SC800T3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:18:52 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint")
gdc, = mibBuilder.importSymbols("GDCCMN-MIB", "gdc")
SCinstance, = mibBuilder.importSymbols("GDCMACRO-MIB", "SCinstance")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
TimeTicks, ModuleIdentity, Bits, NotificationType, Unsigned32, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Gauge32, MibIdentifier, iso, ObjectIdentity, Counter64, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "ModuleIdentity", "Bits", "NotificationType", "Unsigned32", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Gauge32", "MibIdentifier", "iso", "ObjectIdentity", "Counter64", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ds3 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19))
sc800t3 = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1))
sc800t3Version = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 1))
sc800t3Configuration = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 2))
sc800t3Diagnostics = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 3))
sc800t3Maintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 4))
sc800t3Alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5))
sc800t3Performance = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 6))
sc800t3AlarmConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 7))
sc800t3LocalAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 8))
sc800t3MIBversion = MibScalar((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(5, 5)).setFixedLength(5)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3MIBversion.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3MIBversion.setDescription("Identifies the version of the MIB. The format of the version is x.yzT, where 'x' identifies the major revision number, 'y' identifies the minor revision number, 'z' identifies the typographical revision, and T identifies the test revision. Upon formal release, no designation for the test revision will be present. Acceptable values for the individual revision components are as follows: x: 1 - 9, y: 0 - 9, z: 0 - 9, T: A - Z")
sc800t3VersionTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2), )
if mibBuilder.loadTexts: sc800t3VersionTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3VersionTable.setDescription(' ')
sc800t3VersionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3VersionIndex"))
if mibBuilder.loadTexts: sc800t3VersionEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3VersionEntry.setDescription('An entry in the GDC SC800T3 Version Table.')
sc800t3VersionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3VersionIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3VersionIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3ActiveFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3ActiveFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3ActiveFirmwareRev.setDescription('The version number of the firmware currently executing. The format is MM.NN.BB where: MM: Major Revision (0-99) NN: Minor Revision (0-99) BB: Bug Fix Revision (0-99)')
sc800t3StandbyFirmwareRev = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3StandbyFirmwareRev.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3StandbyFirmwareRev.setDescription('The version number of the firmware stored (in a compressed format) but not currently executing. MM: Major Revision (0-99) NN: Minor Revision (0-99) BB: Bug Fix Revision (0-99) ')
sc800t3StoredFirmwareStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("statBlank", 1), ("statDownLoading", 2), ("statOK", 3), ("statCheckSumBad", 4), ("statUnZipping", 5), ("statBadUnZip", 6), ("statDownloadAborted", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3StoredFirmwareStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3StoredFirmwareStatus.setDescription('This object represents the state of the Non-Active or Stored firmware: statBlank(1) Factory Default statDownLoading(2) In process of downloading firmware statOK(3) Zipped version checksum succesful (OK to switch) (can set sc800t3SwitchActive to switchActive(2)) statCheckSumBad(4) Failed checksum after download statUnZipping(5) In process of uncompressing into active area statBadUnZip(6) Failed last uncompress statDownloadAborted(7) Download aborted by user')
sc800t3SwitchActiveFirmware = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("switchNorm", 1), ("switchActive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3SwitchActiveFirmware.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3SwitchActiveFirmware.setDescription('This object is used to switch the active executing firmware from the version in sc800t3ActiveRev to the version in sc800t3StoredRev. When a switchActive(2) is set (write only) the element will: 1) reboot 2) uncompress stored code into active area 3) perform checksum on active area 4) Set sc800t3StoredStatus object to indicate results 5) If succesfull: update sc800t3ActiveFirmwareRev and sc800t3StoredFirmwareRev and begin executing If failed: replace active area with previous revision The switchNorm(1) enumeration will always be read. Setting switchActive(2) when the sc800t3StoredStatus is not statOK(3) will result in an error. ')
sc800t3DownloadingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disableAll", 1), ("enableAndWait", 2), ("enableAndSwitch", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DownloadingMode.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3DownloadingMode.setDescription('This object is used to configure the download mode: disableAll(1) Prevents any firmware downloading to SC800T3 enableAndWait(2) Allows downloading zipped code to be stored only! enableAndSwitch(3) Allows downloading and then unzips and begins executing the new code')
sc800t3EraseFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("erase", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3EraseFlash.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3EraseFlash.setDescription('A set of this object to erase(2) will erase the application stored in flash. After setting this object, there should be a delay of at least 2 minutes before downloading the unit.')
sc800t3ChannelConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 1), )
if mibBuilder.loadTexts: sc800t3ChannelConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3ChannelConfigTable.setDescription('The GDC SC800T3 Channel Configuration table.')
sc800t3ChannelConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 1, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3ChannelConfigIndex"))
if mibBuilder.loadTexts: sc800t3ChannelConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3ChannelConfigEntry.setDescription('The sc800t3 Channel Configuration table entry.')
sc800t3ChannelConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3ChannelConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3ChannelConfigIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3ForcedDCE = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("followsDte", 1), ("forcedOn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3ForcedDCE.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3ForcedDCE.setDescription("Controls the operation of Data Communications Equipment (DCE) signal. The value followsDte(1) indicates that the channel's DCE follows Data Terminal Equipment (DTE) ready. The value forcedOn(2) indicates that DCE is forced on.")
sc800t3ChannelDTEtest = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3ChannelDTEtest.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3ChannelDTEtest.setDescription('DTE interface supporting loop A and loop B tests. See ANSI TIA/EIA-613-1993 specification for details on encoding of inter changes.')
sc800t3DTELoopTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DTELoopTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3DTELoopTimeout.setDescription('Enables/disables DTE loop time out.')
sc800t3NetworkConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2), )
if mibBuilder.loadTexts: sc800t3NetworkConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NetworkConfigTable.setDescription('The GDC SC800T3 Network Configuration table.')
sc800t3NetworkConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3NetworkConfigIndex"))
if mibBuilder.loadTexts: sc800t3NetworkConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NetworkConfigEntry.setDescription('The sc800t3 Network Configuration table entry.')
sc800t3NetworkConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3NetworkConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NetworkConfigIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3NetworkFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("m13", 1), ("cbitParity", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3NetworkFrameType.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NetworkFrameType.setDescription('Is the framing type of the network interface. Setting the value of the object to m13(1) configures the network interface to M-13 framing. Setting the value of this object to cbitParity configures the network interface 20 C-bit parity framing')
sc800t3NetworkTransmitClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("internal", 1), ("receive", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3NetworkTransmitClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NetworkTransmitClockSource.setDescription('The DSU transmit clock source option. This is the selection for the transmitter timing clock source.')
sc800t3NetworkAISLoopdown = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3NetworkAISLoopdown.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NetworkAISLoopdown.setDescription('The time in seconds when receiving a continuous AIS signal before a remotely initiated loopback is terminated. When this object has the value 4, then there is no time limit and the loop must be terminated by remotely issued in-band loopdown codes. When the object has a value between 5 and 60, then this is time in seconds of continuous AIS signal before the loopback is terminated.')
sc800t3NetworkLineType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("longCable", 1), ("shortCable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3NetworkLineType.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NetworkLineType.setDescription('The operating mode of the interface. Setting the value of this object to longCable(1) configures the interface as standard DS-3. Setting the value of this object to shortCable(2) configures the interface to operate as a standard cross-connect DSX-3.')
sc800t3NetworkIdleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notReceived", 1), ("received", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3NetworkIdleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NetworkIdleStatus.setDescription('Returns a value of received(2) when the sc800t3 receives a DS3 idle from the network.')
sc800t3NetworkTransmitIdleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("inactive", 1), ("active", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3NetworkTransmitIdleStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NetworkTransmitIdleStatus.setDescription('When set to active(2), the sc800t3 will transmit a DS3 idle signal to the network.')
sc800t3NetworkSesBERThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("thresone", 1), ("thresseven", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3NetworkSesBERThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NetworkSesBERThreshold.setDescription('When set to thresone(1), the SES BER threshold will be set to 1X10^-6 and when it is set to thresseven(2), it will be set to 7.5X10^-5.')
sc800t3InbandLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 2, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3InbandLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3InbandLoopback.setDescription('Enables/disables the inband loop back.')
sc800t3DiagTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1), )
if mibBuilder.loadTexts: sc800t3DiagTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3DiagTable.setDescription('The SC800T3 Diagnostics table.')
sc800t3DiagEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3DiagIndex"))
if mibBuilder.loadTexts: sc800t3DiagEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3DiagEntry.setDescription('The SNMPSC800T3 Diagnostics table entry.')
sc800t3DiagIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3DiagIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3DiagIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3DiagTestDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))).clone(namedValues=NamedValues(("testTime30Secs", 1), ("testTime1Min", 2), ("testTime2Mins", 3), ("testTime3Mins", 4), ("testTime4Mins", 5), ("testTime5Mins", 6), ("testTime6Mins", 7), ("testTime7Mins", 8), ("testTime8Mins", 9), ("testTime9Mins", 10), ("testTime10Mins", 11), ("testTime15Mins", 12), ("testTime20Mins", 13), ("testTime25Mins", 14), ("testTime30Mins", 15), ("testTimeInfinite", 16)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DiagTestDuration.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3DiagTestDuration.setDescription('Selects the duration to run a diagnostic test.')
sc800t3InsertBitError = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("insertBitErrorNorm", 1), ("insertOneBitError", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3InsertBitError.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3InsertBitError.setDescription('A set of 2 will insert one bit error for test. Management may only write a 2. A 1 will always be read.')
sc800t3DiagT3Test = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("t3NoTest", 1), ("t3LineLoopback", 2), ("t3PayLoadLoopback", 3), ("t3LocalLoopback", 4), ("t3LocalLoopbackST", 5), ("t3DTELoopback", 6), ("t3RemoteLineLoopback", 7), ("t3RemoteLineLoopbackST", 8), ("t3RemotePayload", 9), ("t3RemotePayloadST", 10), ("t3EndToEndST", 11)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DiagT3Test.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3DiagT3Test.setDescription('A set of 2-11 starts the specified test and a set of t3NoTest(1) stops the current running test. A get returns the current active test.')
sc800t3DiagTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3DiagTestResults.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3DiagTestResults.setDescription('Returns a the folowing bytes. Octet 1 bit 7 - F/U bit 6 - 1: Test complete bit 5 - 1: Test aborted bit 4 - F/U bit 3 - remote status 0: inactive 1: active bit 2 - 1: Bit errors over range bit 1 - Bit Errors bit 0 - Bit Errors Octet 2 bit 7 - F/U bit 6 - 2^13 bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 Bit Error Count bit 1 - 2^8 bit 0 - 2^7 Octet 3 bit 7 - F/U bit 6 - 2^6 bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0')
sc800t3DiagResetTestResults = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("resetTestResult", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DiagResetTestResults.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3DiagResetTestResults.setDescription('This object will clear the results register while running any test except for Network Delay. Starting a new test will automatically zero out the register. A normal(1) will always be read. Management will set a resetTestResult(2) to reset the test results. ')
sc800t3MaintenanceTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1), )
if mibBuilder.loadTexts: sc800t3MaintenanceTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3MaintenanceTable.setDescription('The table describes the maintenance functions for the sc800t3. ')
sc800t3MaintenanceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3MaintenanceIndex"))
if mibBuilder.loadTexts: sc800t3MaintenanceEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3MaintenanceEntry.setDescription('An entry in the GDC maintenance Table')
sc800t3MaintenanceIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3MaintenanceIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3MaintenanceIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3LedStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(3, 3)).setFixedLength(3)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3LedStatus.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3LedStatus.setDescription('Returns a bitwise snapshot of the front panel LED state and front panel switches. Octet 1 bit 7 - f/u bit 6 - NTWK 0:LED off 1:LED on bit 5 - TM 0:LED off 1:LED on bit 4 - ALM 0:LED off 1:LED on bit 3 - f/u bit 2 - f/u bit 1 - f/u bit 0 - f/u Octet 2 bit 7 - f/u bit 6 - f/u bit 5 - f/u bit 4 - f/u bit 3 - f/u bit 2 - f/u bit 1 - f/u bit 0 - f/u Octet 3 bit 7 - f/u bit 6 - f/u bit 5 - f/u bit 4 - f/u bit 3 - f/u bit 2 - f/u bit 1 - f/u bit 0 - f/u ')
sc800t3SoftReset = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3SoftReset.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3SoftReset.setDescription('Supports the action of soft resetting the unit. When this object is set to reset(1), then the unit performs a soft reset. The value norm will be returned when the reset is complete. The value of norm can not be set by management.')
sc800t3DefaultInit = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("normal", 1), ("factoryDefault", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DefaultInit.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3DefaultInit.setDescription('This is used to allow the NonVolatile Configuration to be set to a factory default state. When this value is set to factoryDefault, the unit will reset to the default configuration. The value of normal will be returned when the initialization is complete. The value normal can not be set by management.')
sc800t3ValidNearEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3ValidNearEndIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3ValidNearEndIntervals.setDescription('The number of previous near end intervals for which valid data was collected. The value will be 31 unless the interface was brought on-line within the last 7.75 hours, in which case the value will be the number of complete 15 minute intervals since the interface has been online.')
sc800t3ValidFarEndIntervals = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3ValidFarEndIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3ValidFarEndIntervals.setDescription('The number of previous far end intervals for which valid data was collected. The value will be 31 unless the interface was brought on-line within the last 7.75 hours, in which case the value will be the number of complete 15 minute intervals since the interface has been online.')
sc800t3ShelfType = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("spectracomm", 1), ("twinPack", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3ShelfType.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3ShelfType.setDescription('Type of shelf the sc800t3 is located in.')
sc800t3TwinPackPowerSupply = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("bottomOnly", 2), ("topOnly", 3), ("both", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3TwinPackPowerSupply.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3TwinPackPowerSupply.setDescription('Power supplies currently installed in Twin Pack. When the sc800t3 is located in a Spectracomm shelf none(1) will always be returned.')
sc800t3TestAllLeds = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("allLedsON", 1), ("allLedsOFF", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3TestAllLeds.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3TestAllLeds.setDescription('This variable is used to test the front panel leds and individual segments of the display. A one (1) will turn all leds and display segments on. They will remain on until a two (2) is set or the card is rebooted')
sc800t3NearEndResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3NearEndResetStats.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NearEndResetStats.setDescription('Supports the action of soft resetting the sc800t3ValidNearEndIntervals object. When this object is set to reset(2), then the unit will reset the sc800t3ValidNearEndIntervals object to zero. The value of norm(1) can not be set by management.')
sc800t3FarEndResetStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("norm", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3FarEndResetStats.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3FarEndResetStats.setDescription('Supports the action of soft resetting the sc800t3ValidFarEndIntervals object. When this object is set to reset(2), then the unit will reset the sc800t3ValidFarEndIntervals object to zero. The value of norm(1) can not be set by management.')
sc800t3NearEndStatLastInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3NearEndStatLastInitial.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NearEndStatLastInitial.setDescription('Number of seconds from midnight Dec 31 1969 up until sc800t3ValidNearEndIntervals was last initialized to zero.')
sc800t3FarEndStatLastInitial = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 4, 1, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3FarEndStatLastInitial.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3FarEndStatLastInitial.setDescription('Number of seconds from midnight Dec 31 1969 up until sc800t3ValidFarEndIntervals was last initialized to zero.')
sc800t3NoResponse = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 1))
sc800t3DiagRxErrAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 2))
sc800t3PowerUpAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 3))
sc800t3POSTFail = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 4))
sc800t3UnsolicitedTest = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 5))
sc800t3ConfigChange = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 6))
sc800t3TimingLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 7))
sc800t3LossOfSignal = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 8))
sc800t3OutOfFrame = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 9))
sc800t3AIS = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 10))
sc800t3DTEReadyLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 11))
sc800t3DTETXCLKLoss = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 12))
sc800t3RXDNoTrans = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 13))
sc800t3TXDNoTrans = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 14))
sc800t3RemoteNotResponding = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 15))
sc800t3TopPowerSupplyFail = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 16))
sc800t3BottomPowerSupplyFail = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 17))
sc800t3DTETest = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 18))
sc800t3RAI = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 19))
sc800t3ES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 20))
sc800t3SES = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 21))
sc800t3SAS = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 22))
sc800t3UAS = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 23))
sc800t3CodeViolations = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 24))
sc800t3ESline = MibIdentifier((1, 3, 6, 1, 4, 1, 498, 19, 1, 5, 25))
sc800t3AlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 7, 1), )
if mibBuilder.loadTexts: sc800t3AlarmConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3AlarmConfigTable.setDescription('The sc800t3AlarmConfigTable contains entries that configure alarm reporting. The structure of the table is such that alarm configuration is supported on a unit and interface basis, and then on an alarm type basis within the interface. For simplicity sake alarms, be they unit or interface related, are represented in one table.')
sc800t3AlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 7, 1, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3AlarmConfigIndex"), (0, "GDC-SC800T3-MIB", "sc800t3AlarmConfigIdentifier"))
if mibBuilder.loadTexts: sc800t3AlarmConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3AlarmConfigEntry.setDescription('An entry in the GDC Alarm Configuration table.')
sc800t3AlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 7, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3AlarmConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3AlarmConfigIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3AlarmConfigIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 7, 1, 1, 2), ObjectIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3AlarmConfigIdentifier.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3AlarmConfigIdentifier.setDescription('format: iso.org.dod.internet.private.enterprises.gdc. ds3.sc800t3.sc800t3Alarms.ALM example: 1.3.6.1.4.1.498.19.1.5.ALM where ALM = 1 for sc800t3NoResponse alarm, 2 for sc800t3DiagRxErr alarm, etc., as specified in the Alarm Definitions above.')
sc800t3AlarmCountWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 7, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("reportAll", 1), ("last1sec", 2), ("last1min", 3), ("last1hr", 4), ("reportWhen", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3AlarmCountWindow.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3AlarmCountWindow.setDescription('This variable sets/reads the alarm window. This window is used with the alarm threshold to determine how long the alarm should be active before reporting.')
sc800t3AlarmCountThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 7, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("thresGT10", 1), ("thresGT100", 2), ("thresGT1000", 3), ("thresGT10000", 4), ("thresGT100000", 5), ("thresGT1000000", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3AlarmCountThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3AlarmCountThreshold.setDescription('This function sets/reads the alarm threshold criteria. This threshold is used along with the the alarm window to determine the number of instances in a given time frame for an alarm to occur before the alarm is considered active.')
sc800t3CurrentNearEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 1), )
if mibBuilder.loadTexts: sc800t3CurrentNearEndTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentNearEndTable.setDescription('Gives the statistic count for the current 15 minute interval.')
sc800t3CurrentNearEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 1, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3CurrentNearEndIndex"))
if mibBuilder.loadTexts: sc800t3CurrentNearEndEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentNearEndEntry.setDescription('An entry in the sc800t3 CurrentNearEnd table.')
sc800t3CurrentNearEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentNearEndIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentNearEndIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3CurrentNearEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentNearEndStat.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentNearEndStat.setDescription('Returns a bitwise snapshot of the statistics. Octet 1 bit 7 - parity bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - 2^9 Errored Seconds (ES) bit 1 - 2^8 bit 0 - 2^7 Octet 2 bit 7 - parity bit 6 - 2^6 Errored Seconds (ES) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 3 bit 7 - parity Severely Errored Seconds (SES) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 4 bit 7 - parity Severely Errored Frames (SAS) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 5 bit 7 - parity Unavailable Seconds (UAS) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 6 bit 7 - parity Code Violations (CV) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - n/a bit 0 - n/a Octet 7 bit 7 - parity bit 6 - 2^13 Code Violations (CV) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 8 bit 7 - parity bit 6 - 2^6 Code Violations (CV) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 9 bit 7 - parity bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - 2^9 Errored Seconds Line (ESl) bit 1 - 2^8 bit 0 - 2^7 Octet 10 bit 7 - parity bit 6 - 2^6 Errored Seconds Line (ESl) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 11 bit 7 - parity bit 6 - 2^6 Percent Complete bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0')
sc800t3CurrentFarEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 3), )
if mibBuilder.loadTexts: sc800t3CurrentFarEndTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentFarEndTable.setDescription('Gives the statistic count for the current 15 minute interval.')
sc800t3CurrentFarEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 3, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3CurrentFarEndIndex"))
if mibBuilder.loadTexts: sc800t3CurrentFarEndEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentFarEndEntry.setDescription('An entry in the sc800t3 CurrentFarEnd table.')
sc800t3CurrentFarEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 3, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentFarEndIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentFarEndIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3CurrentFarEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 3, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentFarEndStat.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentFarEndStat.setDescription('Returns a bitwise snapshot of the statistics. Octet 1 bit 7 - parity bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - 2^9 Errored Seconds (ES) bit 1 - 2^8 bit 0 - 2^7 Octet 2 bit 7 - parity bit 6 - 2^6 Errored Seconds (ES) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 3 bit 7 - parity Severely Errored Seconds (SES) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 4 bit 7 - parity Severely Errored Frames (SAS) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 5 bit 7 - parity Unavailable Seconds (UAS) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 6 bit 7 - parity Code Violations (CV) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - n/a bit 0 - n/a Octet 7 bit 7 - parity bit 6 - 2^13 Code Violations (CV) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 8 bit 7 - parity bit 6 - 2^6 Code Violations (CV) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 9 bit 7 - parity bit 6 - 2^6 Percent Complete bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0')
sc800t3CurrentDayNearEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 4), )
if mibBuilder.loadTexts: sc800t3CurrentDayNearEndTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentDayNearEndTable.setDescription('Gives totals for the current day of all the near end statistics.')
sc800t3CurrentDayNearEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 4, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3CurrentDayNearEndIndex"))
if mibBuilder.loadTexts: sc800t3CurrentDayNearEndEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentDayNearEndEntry.setDescription('An entry in the sc800t3 CurrentDayNearEndTable.')
sc800t3CurrentDayNearEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 4, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentDayNearEndIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentDayNearEndIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3CurrentDayNearEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 4, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentDayNearEndStat.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentDayNearEndStat.setDescription('Returns a bitwise snapshot of the statistics. Octet 1 bit 7 - parity bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - 2^15 Errored Seconds (ES) bit 0 - 2^14 Octet 2 bit 7 - parity bit 6 - 2^13 Errored Seconds (ES) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 3 bit 7 - parity bit 6 - 2^6 Errored Seconds (ES) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 4 bit 7 - parity Severely Errored Seconds (SES) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 5 bit 7 - parity bit 6 - 2^6 Severely Errored Seconds (SES) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 6 bit 7 - parity Severely Errored Frame (SAS) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 7 bit 7 - parity bit 6 - 2^6 Severely Errored Frame (SAS) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 8 bit 7 - parity Unavailable Seconds (UAS) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 9 bit 7 - parity bit 6 - 2^6 Unavailable Seconds (UAS) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 10 bit 7 - parity Code Violations (CV) bit 6 - Invalid Data Flag bit 5 - 2^19 bit 4 - 2^18 bit 3 - 2^17 bit 2 - 2^16 bit 1 - 2^15 bit 0 - 2^14 Octet 11 bit 7 - parity bit 6 - 2^13 Code Violations (CV) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 12 bit 7 - parity bit 6 - 2^6 Code Violations (CV) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 13 bit 7 - parity bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - 2^15 Errored Seconds Line (ESl) bit 0 - 2^14 Octet 14 bit 7 - parity bit 6 - 2^13 Errored Seconds Line (ESl) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 15 bit 7 - parity bit 6 - 2^6 Errored Seconds Line (ESl) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 16 bit 7 - parity bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - 2^15 FC-P Path Failure Events bit 0 - 2^14 Octet 17 bit 7 - parity bit 6 - 2^13 FC-P Path Failure Events bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 18 bit 7 - parity bit 6 - 2^6 FC-P Path Failure Events bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0')
sc800t3CurrentDayFarEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 6), )
if mibBuilder.loadTexts: sc800t3CurrentDayFarEndTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentDayFarEndTable.setDescription('Gives totals for the current day of all the Far End statistics.')
sc800t3CurrentDayFarEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 6, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3CurrentDayFarEndIndex"))
if mibBuilder.loadTexts: sc800t3CurrentDayFarEndEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentDayFarEndEntry.setDescription('An entry in the sc800t3CurrentDayFarEndTable.')
sc800t3CurrentDayFarEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 6, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentDayFarEndIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentDayFarEndIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3CurrentDayFarEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 6, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3CurrentDayFarEndStat.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3CurrentDayFarEndStat.setDescription('Returns a bitwise snapshot of the statistics. Octet 1 bit 7 - parity bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - 2^15 Errored Seconds (ES) bit 0 - 2^14 Octet 2 bit 7 - parity bit 6 - 2^13 Errored Seconds (ES) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 3 bit 7 - parity bit 6 - 2^6 Errored Seconds (ES) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 4 bit 7 - parity Severely Errored Seconds (SES) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 5 bit 7 - parity bit 6 - 2^6 Severely Errored Seconds (SES) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 6 bit 7 - parity Severely Errored Frame (SAS) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 7 bit 7 - parity bit 6 - 2^6 Severely Errored Frame (SAS) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 8 bit 7 - parity Unavailable Seconds (UAS) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 9 bit 7 - parity bit 6 - 2^6 Unavailable Seconds (UAS) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 10 bit 7 - parity Code Violations (CV) bit 6 - Invalid Data Flag bit 5 - 2^19 bit 4 - 2^18 bit 3 - 2^17 bit 2 - 2^16 bit 1 - 2^15 bit 0 - 2^14 Octet 11 bit 7 - parity bit 6 - 2^13 Code Violations (CV) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 12 bit 7 - parity bit 6 - 2^6 Code Violations (CV) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 13 bit 7 - parity FCCP-PFE Path Failure Events bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - 2^15 bit 0 - 2^14 Octet 14 bit 7 - parity bit 6 - 2^13 FCCP-PFE Path Failure Events bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 15 bit 7 - parity bit 6 - 2^6 FCCP-PFE Path Failure Events bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0')
sc800t3PreviousDayNearEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 2), )
if mibBuilder.loadTexts: sc800t3PreviousDayNearEndTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousDayNearEndTable.setDescription('Gives totals for the previous day of all the near end statistics.')
sc800t3PreviousDayNearEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 2, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3PreviousDayNearEndIndex"))
if mibBuilder.loadTexts: sc800t3PreviousDayNearEndEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousDayNearEndEntry.setDescription('An entry in the sc800t3 PreviousDayNearEndTable.')
sc800t3PreviousDayNearEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 2, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousDayNearEndIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousDayNearEndIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3PreviousDayNearEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(18, 18)).setFixedLength(18)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousDayNearEndStat.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousDayNearEndStat.setDescription('Returns a bitwise snapshot of the statistics. Octet 1 bit 7 - parity bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - 2^15 Errored Seconds (ES) bit 0 - 2^14 Octet 2 bit 7 - parity bit 6 - 2^13 Errored Seconds (ES) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 3 bit 7 - parity bit 6 - 2^6 Errored Seconds (ES) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 4 bit 7 - parity Severely Errored Seconds (SES) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 5 bit 7 - parity bit 6 - 2^6 Severely Errored Seconds (SES) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 6 bit 7 - parity Severely Errored Frame (SAS) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 7 bit 7 - parity bit 6 - 2^6 Severely Errored Frame (SAS) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 8 bit 7 - parity Unavailable Seconds (UAS) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 9 bit 7 - parity bit 6 - 2^6 Unavailable Seconds (UAS) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 10 bit 7 - parity Code Violations (CV) bit 6 - Invalid Data Flag bit 5 - 2^19 bit 4 - 2^18 bit 3 - 2^17 bit 2 - 2^16 bit 1 - 2^15 bit 0 - 2^14 Octet 11 bit 7 - parity bit 6 - 2^13 Code Violations (CV) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 12 bit 7 - parity bit 6 - 2^6 Code Violations (CV) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 13 bit 7 - parity bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - 2^15 Errored Seconds Line (ESl) bit 0 - 2^14 Octet 14 bit 7 - parity bit 6 - 2^13 Errored Seconds Line (ESl) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 15 bit 7 - parity bit 6 - 2^6 Errored Seconds Line (ESl) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 16 bit 7 - parity bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - 2^15 FC-P Path Failure Events bit 0 - 2^14 Octet 17 bit 7 - parity bit 6 - 2^13 FC-P Path Failure Events bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 18 bit 7 - parity bit 6 - 2^6 FC-P Path Failure Events bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0')
sc800t3PreviousDayFarEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 5), )
if mibBuilder.loadTexts: sc800t3PreviousDayFarEndTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousDayFarEndTable.setDescription('Gives totals for the previous day of all the Far End statistics.')
sc800t3PreviousDayFarEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 5, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3PreviousDayFarEndIndex"))
if mibBuilder.loadTexts: sc800t3PreviousDayFarEndEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousDayFarEndEntry.setDescription('An entry in the sc800t3PreviousDayFarEndTable.')
sc800t3PreviousDayFarEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 5, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousDayFarEndIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousDayFarEndIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3PreviousDayFarEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 5, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(15, 15)).setFixedLength(15)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousDayFarEndStat.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousDayFarEndStat.setDescription('Returns a bitwise snapshot of the statistics. Octet 1 bit 7 - parity bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - 2^15 Errored Seconds (ES) bit 0 - 2^14 Octet 2 bit 7 - parity bit 6 - 2^13 Errored Seconds (ES) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 3 bit 7 - parity bit 6 - 2^6 Errored Seconds (ES) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 4 bit 7 - parity Severely Errored Seconds (SES) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 5 bit 7 - parity bit 6 - 2^6 Severely Errored Seconds (SES) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 6 bit 7 - parity Severely Errored Frame (SAS) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 7 bit 7 - parity bit 6 - 2^6 Severely Errored Frame (SAS) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 8 bit 7 - parity Unavailable Seconds (UAS) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 9 bit 7 - parity bit 6 - 2^6 Unavailable Seconds (UAS) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 10 bit 7 - parity Code Violations (CV) bit 6 - Invalid Data Flag bit 5 - 2^19 bit 4 - 2^18 bit 3 - 2^17 bit 2 - 2^16 bit 1 - 2^15 bit 0 - 2^14 Octet 11 bit 7 - parity bit 6 - 2^13 Code Violations (CV) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 12 bit 7 - parity bit 6 - 2^6 Code Violations (CV) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 13 bit 7 - parity FCCP-PFE Path Failure Events bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - 2^15 bit 0 - 2^14 Octet 14 bit 7 - parity bit 6 - 2^13 FCCP-PFE Path Failure Events bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 15 bit 7 - parity bit 6 - 2^6 FCCP-PFE Path Failure Events bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0')
sc800t3NearEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 7), )
if mibBuilder.loadTexts: sc800t3NearEndIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NearEndIntervalTable.setDescription('The sc800t3 Near End Interval table.')
sc800t3NearEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 7, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3NearEndIntervalIndex"), (0, "GDC-SC800T3-MIB", "sc800t3NearEndIntervalNumber"))
if mibBuilder.loadTexts: sc800t3NearEndIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NearEndIntervalEntry.setDescription('An entry in the Interval table.')
sc800t3NearEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 7, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3NearEndIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NearEndIntervalIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3NearEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 7, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3NearEndIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NearEndIntervalNumber.setDescription('A number between 1 and 31, where 1 is the most recently completed minute interval and 31 is the least recently completed 15 minutes interval (assuming that all 31 intervals are valid).')
sc800t3NearEndIntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 7, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3NearEndIntervalStats.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3NearEndIntervalStats.setDescription('Returns a bitwise snapshot of the statistics. Octet 1 bit 7 - parity bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - 2^9 Errored Seconds (ES) bit 1 - 2^8 bit 0 - 2^7 Octet 2 bit 7 - parity bit 6 - 2^6 Errored Seconds (ES) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 3 bit 7 - parity Severely Errored Seconds (SES) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 4 bit 7 - parity Severely Errored Frames (SAS) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 5 bit 7 - parity Unavailable Seconds (UAS) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 6 bit 7 - parity Code Violations (CV) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - n/a bit 0 - n/a Octet 7 bit 7 - parity bit 6 - 2^13 Code Violations (CV) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 8 bit 7 - parity bit 6 - 2^6 Code Violations (CV) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 9 bit 7 - parity bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - 2^9 Errored Seconds Line (ESl) bit 1 - 2^8 bit 0 - 2^7 Octet 10 bit 7 - parity bit 6 - 2^6 Errored Seconds Line (ESl) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 11 bit 7 - parity bit 6 - n/a Interval (1-31) bit 5 - n/a bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0')
sc800t3FarEndIntervalTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 9), )
if mibBuilder.loadTexts: sc800t3FarEndIntervalTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3FarEndIntervalTable.setDescription('The sc800t3 Far End Interval table.')
sc800t3FarEndIntervalEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 9, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3FarEndIntervalIndex"), (0, "GDC-SC800T3-MIB", "sc800t3FarEndIntervalNumber"))
if mibBuilder.loadTexts: sc800t3FarEndIntervalEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3FarEndIntervalEntry.setDescription('An entry in the Interval table.')
sc800t3FarEndIntervalIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 9, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3FarEndIntervalIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3FarEndIntervalIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3FarEndIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 9, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3FarEndIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3FarEndIntervalNumber.setDescription('A number between 1 and 31, where 1 is the most recently completed minute interval and 31 is the least recently completed 15 minutes interval (assuming that all 31 intervals are valid).')
sc800t3FarEndIntervalStats = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 9, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(9, 9)).setFixedLength(9)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3FarEndIntervalStats.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3FarEndIntervalStats.setDescription('Returns a bitwise snapshot of the statistics. Octet 1 bit 7 - parity bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - 2^9 Errored Seconds (ES) bit 1 - 2^8 bit 0 - 2^7 Octet 2 bit 7 - parity bit 6 - 2^6 Errored Seconds (ES) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 3 bit 7 - parity Severely Errored Seconds (SES) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 4 bit 7 - parity Severely Errored Frames (SAS) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 5 bit 7 - parity Unavailable Seconds (UAS) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 6 bit 7 - parity Code Violations (CV) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - n/a bit 0 - n/a Octet 7 bit 7 - parity bit 6 - 2^13 Code Violations (CV) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 8 bit 7 - parity bit 6 - 2^6 Code Violations (CV) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 9 bit 7 - parity bit 6 - n/a Interval (1-31) bit 5 - n/a bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0')
sc800t3PreviousNearEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 10), )
if mibBuilder.loadTexts: sc800t3PreviousNearEndTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousNearEndTable.setDescription('Gives the statistic count for the previous 15 minute interval.')
sc800t3PreviousNearEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 10, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3PreviousNearEndIndex"))
if mibBuilder.loadTexts: sc800t3PreviousNearEndEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousNearEndEntry.setDescription('An entry in the sc800t3 PreviousNearEnd table.')
sc800t3PreviousNearEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 10, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousNearEndIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousNearEndIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3PreviousNearEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(11, 11)).setFixedLength(11)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousNearEndStat.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousNearEndStat.setDescription('Returns a bitwise snapshot of the statistics. Octet 1 bit 7 - f/u bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - 2^9 Errored Seconds (ES) bit 1 - 2^8 bit 0 - 2^7 Octet 2 bit 7 - f/u bit 6 - 2^6 Errored Seconds (ES) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 3 bit 7 - f/u Severely Errored Seconds (SES) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 4 bit 7 - f/u Severely Errored Frames (SAS) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 5 bit 7 - f/u Unavailable Seconds (UAS) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 6 bit 7 - f/u Code Violations (CV) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - n/a bit 0 - n/a Octet 7 bit 7 - f/u bit 6 - 2^13 Code Violations (CV) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 8 bit 7 - f/u bit 6 - 2^6 Code Violations (CV) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 9 bit 7 - fu bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - 2^9 Errored Seconds Line (ESl) bit 1 - 2^8 bit 0 - 2^7 Octet 10 bit 7 - f/u bit 6 - 2^6 Errored Seconds Line (ESl) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 11 bit 7 - f/u bit 6 - 2^6 Percent Complete bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0')
sc800t3PreviousFarEndTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 11), )
if mibBuilder.loadTexts: sc800t3PreviousFarEndTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousFarEndTable.setDescription('Gives the statistic count for the previous 15 minute interval.')
sc800t3PreviousFarEndEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 11, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3PreviousFarEndIndex"))
if mibBuilder.loadTexts: sc800t3PreviousFarEndEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousFarEndEntry.setDescription('An entry in the sc800t3 PreviousFarEnd table.')
sc800t3PreviousFarEndIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 11, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousFarEndIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousFarEndIndex.setDescription('Integer value which uniquely identifies the SC800T3 to which this entry is applicable. SCinstance is defined to be SLDi where: S (byte value) - physical shelf slot location (01-32) L (byte value) - line number (01) D (byte value) - drop number (00) i (byte value) - interface number (00)')
sc800t3PreviousFarEndStat = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 6, 11, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3PreviousFarEndStat.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3PreviousFarEndStat.setDescription('Returns a bitwise snapshot of the statistics. Octet 1 bit 7 - f/u bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - 2^9 Errored Seconds (ES) bit 1 - 2^8 bit 0 - 2^7 Octet 2 bit 7 - f/u bit 6 - 2^6 Errored Seconds (ES) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 3 bit 7 - f/u Severely Errored Seconds (SES) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 4 bit 7 - f/u Severely Errored Frames (SAS) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 5 bit 7 - f/u Unavailable Seconds (UAS) bit 6 - Invalid Data Flag bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0 Octet 6 bit 7 - f/u Code Violations (CV) bit 6 - Invalid Data Flag bit 5 - n/a bit 4 - n/a bit 3 - n/a bit 2 - n/a bit 1 - n/a bit 0 - n/a Octet 7 bit 7 - f/u bit 6 - 2^13 Code Violations (CV) bit 5 - 2^12 bit 4 - 2^11 bit 3 - 2^10 bit 2 - 2^9 bit 1 - 2^8 bit 0 - 2^7 Octet 8 bit 7 - f/u bit 6 - 2^6 Code Violations (CV) bit 5 - 2^5 bit 4 - 2^4 bit 3 - 2^3 bit 2 - 2^2 bit 1 - 2^1 bit 0 - 2^0')
sc800t3LocalAlarmConfigTable = MibTable((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1), )
if mibBuilder.loadTexts: sc800t3LocalAlarmConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3LocalAlarmConfigTable.setDescription('The sc800t3LocalAlarmConfigTable contains entries that configure alarm reporting. The structure of the table is such that alarm configuration is supported on a unit and interface basis, and then on an alarm type basis within the interface. For simplicity sake alarms, be they unit or interface related, are represented in one table.')
sc800t3LocalAlarmConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1), ).setIndexNames((0, "GDC-SC800T3-MIB", "sc800t3LocalAlarmConfigIndex"))
if mibBuilder.loadTexts: sc800t3LocalAlarmConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3LocalAlarmConfigEntry.setDescription('An entry in the GDC Local Alarm Configuration table.')
sc800t3LocalAlarmConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 1), SCinstance()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sc800t3LocalAlarmConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3LocalAlarmConfigIndex.setDescription('The index value which uniquely identifies the interface to which this entry is applicable.')
sc800t3OOF = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3OOF.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3OOF.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3AISLOCAL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3AISLOCAL.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3AISLOCAL.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3TIMLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3TIMLOS.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3TIMLOS.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3TXDLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3TXDLOS.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3TXDLOS.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3RXDLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3RXDLOS.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3RXDLOS.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3LOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3LOS.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3LOS.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3TPSFAIL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3TPSFAIL.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3TPSFAIL.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3BPSFAIL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3BPSFAIL.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3BPSFAIL.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3DTECLKLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DTECLKLOS.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3DTECLKLOS.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3DTERDYLOS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3DTERDYLOS.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3DTERDYLOS.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3RAILOCAL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3RAILOCAL.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3RAILOCAL.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3THRESHESL = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3THRESHESL.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3THRESHESL.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3THRESHES = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3THRESHES.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3THRESHES.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3THRESHSES = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3THRESHSES.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3THRESHSES.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3THRESHSAS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3THRESHSAS.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3THRESHSAS.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3THRESHUAS = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3THRESHUAS.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3THRESHUAS.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
sc800t3THRESHCV = MibTableColumn((1, 3, 6, 1, 4, 1, 498, 19, 1, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("disabled", 1), ("enabledMajor", 2), ("enabledMinor", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sc800t3THRESHCV.setStatus('mandatory')
if mibBuilder.loadTexts: sc800t3THRESHCV.setDescription('Disables or enables the alarm on the Major buss or Minor buss.')
mibBuilder.exportSymbols("GDC-SC800T3-MIB", sc800t3LocalAlarms=sc800t3LocalAlarms, sc800t3TimingLoss=sc800t3TimingLoss, sc800t3NetworkConfigIndex=sc800t3NetworkConfigIndex, sc800t3BottomPowerSupplyFail=sc800t3BottomPowerSupplyFail, sc800t3NetworkTransmitIdleStatus=sc800t3NetworkTransmitIdleStatus, sc800t3MaintenanceIndex=sc800t3MaintenanceIndex, sc800t3FarEndIntervalTable=sc800t3FarEndIntervalTable, sc800t3DiagTestResults=sc800t3DiagTestResults, sc800t3Version=sc800t3Version, sc800t3NetworkIdleStatus=sc800t3NetworkIdleStatus, sc800t3DiagT3Test=sc800t3DiagT3Test, sc800t3TopPowerSupplyFail=sc800t3TopPowerSupplyFail, sc800t3DTELoopTimeout=sc800t3DTELoopTimeout, sc800t3TXDNoTrans=sc800t3TXDNoTrans, sc800t3ValidNearEndIntervals=sc800t3ValidNearEndIntervals, sc800t3PreviousFarEndStat=sc800t3PreviousFarEndStat, sc800t3CodeViolations=sc800t3CodeViolations, sc800t3PreviousFarEndTable=sc800t3PreviousFarEndTable, sc800t3NetworkConfigTable=sc800t3NetworkConfigTable, sc800t3AlarmCountWindow=sc800t3AlarmCountWindow, sc800t3OOF=sc800t3OOF, sc800t3Maintenance=sc800t3Maintenance, sc800t3THRESHUAS=sc800t3THRESHUAS, sc800t3CurrentNearEndIndex=sc800t3CurrentNearEndIndex, sc800t3RXDNoTrans=sc800t3RXDNoTrans, sc800t3NoResponse=sc800t3NoResponse, sc800t3DefaultInit=sc800t3DefaultInit, sc800t3=sc800t3, sc800t3ChannelDTEtest=sc800t3ChannelDTEtest, sc800t3ChannelConfigTable=sc800t3ChannelConfigTable, sc800t3ShelfType=sc800t3ShelfType, sc800t3CurrentDayNearEndTable=sc800t3CurrentDayNearEndTable, sc800t3AlarmCountThreshold=sc800t3AlarmCountThreshold, sc800t3CurrentNearEndStat=sc800t3CurrentNearEndStat, sc800t3THRESHCV=sc800t3THRESHCV, sc800t3RemoteNotResponding=sc800t3RemoteNotResponding, sc800t3SES=sc800t3SES, sc800t3NearEndIntervalTable=sc800t3NearEndIntervalTable, sc800t3PreviousDayFarEndIndex=sc800t3PreviousDayFarEndIndex, sc800t3VersionEntry=sc800t3VersionEntry, sc800t3AlarmConfigEntry=sc800t3AlarmConfigEntry, sc800t3InsertBitError=sc800t3InsertBitError, sc800t3DiagTable=sc800t3DiagTable, sc800t3PowerUpAlm=sc800t3PowerUpAlm, sc800t3UnsolicitedTest=sc800t3UnsolicitedTest, sc800t3CurrentNearEndTable=sc800t3CurrentNearEndTable, sc800t3CurrentDayNearEndEntry=sc800t3CurrentDayNearEndEntry, sc800t3LocalAlarmConfigTable=sc800t3LocalAlarmConfigTable, sc800t3LedStatus=sc800t3LedStatus, sc800t3FarEndResetStats=sc800t3FarEndResetStats, sc800t3AlarmConfig=sc800t3AlarmConfig, sc800t3NetworkSesBERThreshold=sc800t3NetworkSesBERThreshold, sc800t3NearEndIntervalEntry=sc800t3NearEndIntervalEntry, sc800t3LocalAlarmConfigIndex=sc800t3LocalAlarmConfigIndex, sc800t3AlarmConfigIdentifier=sc800t3AlarmConfigIdentifier, sc800t3CurrentFarEndTable=sc800t3CurrentFarEndTable, sc800t3StoredFirmwareStatus=sc800t3StoredFirmwareStatus, sc800t3PreviousNearEndEntry=sc800t3PreviousNearEndEntry, sc800t3StandbyFirmwareRev=sc800t3StandbyFirmwareRev, sc800t3DiagIndex=sc800t3DiagIndex, sc800t3RAILOCAL=sc800t3RAILOCAL, sc800t3DiagRxErrAlm=sc800t3DiagRxErrAlm, sc800t3PreviousFarEndEntry=sc800t3PreviousFarEndEntry, sc800t3NetworkLineType=sc800t3NetworkLineType, sc800t3ConfigChange=sc800t3ConfigChange, sc800t3FarEndIntervalIndex=sc800t3FarEndIntervalIndex, sc800t3Performance=sc800t3Performance, sc800t3LocalAlarmConfigEntry=sc800t3LocalAlarmConfigEntry, sc800t3PreviousNearEndIndex=sc800t3PreviousNearEndIndex, sc800t3ForcedDCE=sc800t3ForcedDCE, sc800t3PreviousFarEndIndex=sc800t3PreviousFarEndIndex, sc800t3PreviousDayNearEndTable=sc800t3PreviousDayNearEndTable, sc800t3NetworkTransmitClockSource=sc800t3NetworkTransmitClockSource, sc800t3ValidFarEndIntervals=sc800t3ValidFarEndIntervals, sc800t3THRESHESL=sc800t3THRESHESL, sc800t3CurrentNearEndEntry=sc800t3CurrentNearEndEntry, sc800t3FarEndIntervalStats=sc800t3FarEndIntervalStats, sc800t3ChannelConfigIndex=sc800t3ChannelConfigIndex, sc800t3InbandLoopback=sc800t3InbandLoopback, sc800t3TIMLOS=sc800t3TIMLOS, sc800t3Configuration=sc800t3Configuration, sc800t3DTERDYLOS=sc800t3DTERDYLOS, sc800t3PreviousDayFarEndEntry=sc800t3PreviousDayFarEndEntry, sc800t3VersionIndex=sc800t3VersionIndex, sc800t3TXDLOS=sc800t3TXDLOS, sc800t3SoftReset=sc800t3SoftReset, sc800t3TestAllLeds=sc800t3TestAllLeds, sc800t3THRESHES=sc800t3THRESHES, sc800t3MaintenanceEntry=sc800t3MaintenanceEntry, sc800t3NearEndStatLastInitial=sc800t3NearEndStatLastInitial, sc800t3NearEndIntervalIndex=sc800t3NearEndIntervalIndex, sc800t3AlarmConfigTable=sc800t3AlarmConfigTable, sc800t3SAS=sc800t3SAS, sc800t3UAS=sc800t3UAS, sc800t3LOS=sc800t3LOS, sc800t3NetworkFrameType=sc800t3NetworkFrameType, sc800t3FarEndStatLastInitial=sc800t3FarEndStatLastInitial, sc800t3CurrentDayFarEndEntry=sc800t3CurrentDayFarEndEntry, sc800t3CurrentFarEndEntry=sc800t3CurrentFarEndEntry, sc800t3CurrentDayNearEndIndex=sc800t3CurrentDayNearEndIndex, sc800t3RXDLOS=sc800t3RXDLOS, sc800t3PreviousDayNearEndEntry=sc800t3PreviousDayNearEndEntry, sc800t3FarEndIntervalNumber=sc800t3FarEndIntervalNumber, sc800t3DiagTestDuration=sc800t3DiagTestDuration, sc800t3CurrentFarEndStat=sc800t3CurrentFarEndStat, sc800t3PreviousNearEndStat=sc800t3PreviousNearEndStat, sc800t3PreviousDayNearEndIndex=sc800t3PreviousDayNearEndIndex, sc800t3POSTFail=sc800t3POSTFail, sc800t3PreviousDayNearEndStat=sc800t3PreviousDayNearEndStat, sc800t3MIBversion=sc800t3MIBversion, sc800t3CurrentDayNearEndStat=sc800t3CurrentDayNearEndStat, sc800t3DTECLKLOS=sc800t3DTECLKLOS, sc800t3DownloadingMode=sc800t3DownloadingMode, sc800t3NetworkAISLoopdown=sc800t3NetworkAISLoopdown, sc800t3NetworkConfigEntry=sc800t3NetworkConfigEntry, sc800t3CurrentDayFarEndIndex=sc800t3CurrentDayFarEndIndex, sc800t3RAI=sc800t3RAI, sc800t3Alarms=sc800t3Alarms, sc800t3THRESHSES=sc800t3THRESHSES, sc800t3PreviousNearEndTable=sc800t3PreviousNearEndTable, sc800t3DTEReadyLoss=sc800t3DTEReadyLoss, sc800t3BPSFAIL=sc800t3BPSFAIL, ds3=ds3, sc800t3SwitchActiveFirmware=sc800t3SwitchActiveFirmware, sc800t3TwinPackPowerSupply=sc800t3TwinPackPowerSupply, sc800t3NearEndResetStats=sc800t3NearEndResetStats, sc800t3NearEndIntervalStats=sc800t3NearEndIntervalStats, sc800t3AIS=sc800t3AIS, sc800t3AISLOCAL=sc800t3AISLOCAL, sc800t3THRESHSAS=sc800t3THRESHSAS, sc800t3FarEndIntervalEntry=sc800t3FarEndIntervalEntry, sc800t3ES=sc800t3ES, sc800t3CurrentDayFarEndStat=sc800t3CurrentDayFarEndStat, sc800t3DiagResetTestResults=sc800t3DiagResetTestResults, sc800t3ESline=sc800t3ESline, sc800t3LossOfSignal=sc800t3LossOfSignal, sc800t3Diagnostics=sc800t3Diagnostics, sc800t3EraseFlash=sc800t3EraseFlash, sc800t3DTETest=sc800t3DTETest, sc800t3ChannelConfigEntry=sc800t3ChannelConfigEntry, sc800t3DTETXCLKLoss=sc800t3DTETXCLKLoss, sc800t3TPSFAIL=sc800t3TPSFAIL, sc800t3NearEndIntervalNumber=sc800t3NearEndIntervalNumber, sc800t3PreviousDayFarEndStat=sc800t3PreviousDayFarEndStat, sc800t3ActiveFirmwareRev=sc800t3ActiveFirmwareRev, sc800t3CurrentFarEndIndex=sc800t3CurrentFarEndIndex, sc800t3DiagEntry=sc800t3DiagEntry, sc800t3OutOfFrame=sc800t3OutOfFrame, sc800t3PreviousDayFarEndTable=sc800t3PreviousDayFarEndTable, sc800t3AlarmConfigIndex=sc800t3AlarmConfigIndex, sc800t3MaintenanceTable=sc800t3MaintenanceTable, sc800t3VersionTable=sc800t3VersionTable, sc800t3CurrentDayFarEndTable=sc800t3CurrentDayFarEndTable)
