#
# PySNMP MIB module ASCEND-MIBLSMS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ASCEND-MIBLSMS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:27:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
configuration, = mibBuilder.importSymbols("ASCEND-MIB", "configuration")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Bits, ModuleIdentity, NotificationType, Counter64, Integer32, Unsigned32, Gauge32, ObjectIdentity, MibIdentifier, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, iso, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "ModuleIdentity", "NotificationType", "Counter64", "Integer32", "Unsigned32", "Gauge32", "ObjectIdentity", "MibIdentifier", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "iso", "Counter32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
class DisplayString(OctetString):
    pass

miblsmsProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 529, 23, 150))
miblsmsProfileTable = MibTable((1, 3, 6, 1, 4, 1, 529, 23, 150, 1), )
if mibBuilder.loadTexts: miblsmsProfileTable.setStatus('mandatory')
if mibBuilder.loadTexts: miblsmsProfileTable.setDescription('A list of miblsmsProfile profile entries.')
miblsmsProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 529, 23, 150, 1, 1), ).setIndexNames((0, "ASCEND-MIBLSMS-MIB", "lsmsProfile-Index-o"))
if mibBuilder.loadTexts: miblsmsProfileEntry.setStatus('mandatory')
if mibBuilder.loadTexts: miblsmsProfileEntry.setDescription('A miblsmsProfile entry containing objects that maps to the parameters of miblsmsProfile profile.')
lsmsProfile_Index_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 150, 1, 1, 1), Integer32()).setLabel("lsmsProfile-Index-o").setMaxAccess("readonly")
if mibBuilder.loadTexts: lsmsProfile_Index_o.setStatus('mandatory')
if mibBuilder.loadTexts: lsmsProfile_Index_o.setDescription('')
lsmsProfile_Active = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 150, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("lsmsProfile-Active").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsmsProfile_Active.setStatus('mandatory')
if mibBuilder.loadTexts: lsmsProfile_Active.setDescription('This field is used to control whether Communications with the LSMS should be active or not (Yes/No). More specifically, if the router should start to listen for requests from the LSMS.')
lsmsProfile_LsmsIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 150, 1, 1, 3), IpAddress()).setLabel("lsmsProfile-LsmsIpAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsmsProfile_LsmsIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lsmsProfile_LsmsIpAddr.setDescription('IP address of the LSMS. It is used in validating requests from the LSMS and to communicate in an in-secure fashion directly with the LSMS.')
lsmsProfile_NocGatewayIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 150, 1, 1, 4), IpAddress()).setLabel("lsmsProfile-NocGatewayIpAddr").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsmsProfile_NocGatewayIpAddr.setStatus('mandatory')
if mibBuilder.loadTexts: lsmsProfile_NocGatewayIpAddr.setDescription('IP address of NOC Gateway to the LSMS. This is the Tunnel Endpoint address of the Secure Communications Channel. It is essentially the address of the device that terminates the tunnel with the router and sits between the LSMS and router.')
lsmsProfile_Spi = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 150, 1, 1, 5), DisplayString()).setLabel("lsmsProfile-Spi").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsmsProfile_Spi.setStatus('mandatory')
if mibBuilder.loadTexts: lsmsProfile_Spi.setDescription('Security Parameter Index that is used for Encrypting Secure Communications Channel (IPsec Tunnel) traffic between the Router and LSMS. The SPI is used to distinguish among different security associations terminating at the same destination and using the same IPsec protocol.')
lsmsProfile_PresharedKey = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 150, 1, 1, 6), DisplayString()).setLabel("lsmsProfile-PresharedKey").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsmsProfile_PresharedKey.setStatus('mandatory')
if mibBuilder.loadTexts: lsmsProfile_PresharedKey.setDescription('Preshared Key used to create Authentication and Encryption keys that are used to create the IPsec tunnel for the Secure Communications Channel.')
lsmsProfile_AllowInsecure = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 150, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setLabel("lsmsProfile-AllowInsecure").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsmsProfile_AllowInsecure.setStatus('mandatory')
if mibBuilder.loadTexts: lsmsProfile_AllowInsecure.setDescription('This field is used to permit insecure communications. Insecure communications allows data to be sent in clear outside of an IPsec tunnel (Yes/No).')
lsmsProfile_Action_o = MibScalar((1, 3, 6, 1, 4, 1, 529, 23, 150, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("noAction", 1), ("createProfile", 2), ("deleteProfile", 3)))).setLabel("lsmsProfile-Action-o").setMaxAccess("readwrite")
if mibBuilder.loadTexts: lsmsProfile_Action_o.setStatus('mandatory')
if mibBuilder.loadTexts: lsmsProfile_Action_o.setDescription('')
mibBuilder.exportSymbols("ASCEND-MIBLSMS-MIB", lsmsProfile_Action_o=lsmsProfile_Action_o, DisplayString=DisplayString, lsmsProfile_AllowInsecure=lsmsProfile_AllowInsecure, miblsmsProfileEntry=miblsmsProfileEntry, lsmsProfile_Active=lsmsProfile_Active, lsmsProfile_Spi=lsmsProfile_Spi, miblsmsProfile=miblsmsProfile, lsmsProfile_PresharedKey=lsmsProfile_PresharedKey, lsmsProfile_Index_o=lsmsProfile_Index_o, miblsmsProfileTable=miblsmsProfileTable, lsmsProfile_LsmsIpAddr=lsmsProfile_LsmsIpAddr, lsmsProfile_NocGatewayIpAddr=lsmsProfile_NocGatewayIpAddr)
