#
# PySNMP MIB module DLMOD-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLMOD-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:51:01 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Unsigned32, ObjectIdentity, Counter32, MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, TimeTicks, NotificationType, Counter64, ModuleIdentity, Integer32, IpAddress, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Unsigned32", "ObjectIdentity", "Counter32", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "TimeTicks", "NotificationType", "Counter64", "ModuleIdentity", "Integer32", "IpAddress", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
ucdavis, = mibBuilder.importSymbols("UCD-SNMP-MIB", "ucdavis")
dlmod = MibIdentifier((1, 3, 6, 1, 4, 1, 2021, 14))
dlmodNextIndex = MibScalar((1, 3, 6, 1, 4, 1, 2021, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlmodNextIndex.setStatus('current')
if mibBuilder.loadTexts: dlmodNextIndex.setDescription('The index number of next appropiate unassigned entry in dlmodTable')
dlmodTable = MibTable((1, 3, 6, 1, 4, 1, 2021, 14, 2), )
if mibBuilder.loadTexts: dlmodTable.setStatus('current')
if mibBuilder.loadTexts: dlmodTable.setDescription('A list of dlmodEntry')
dlmodEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2021, 14, 2, 1), ).setIndexNames((0, "DLMOD-MIB", "dlmodIndex"))
if mibBuilder.loadTexts: dlmodEntry.setStatus('current')
if mibBuilder.loadTexts: dlmodEntry.setDescription('A list parameters of dynamic module')
dlmodIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 14, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlmodIndex.setStatus('current')
if mibBuilder.loadTexts: dlmodIndex.setDescription('An index that uniqely indenties an entry in dlmodTable')
dlmodName = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 14, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlmodName.setStatus('current')
if mibBuilder.loadTexts: dlmodName.setDescription('The module name')
dlmodPath = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 14, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlmodPath.setStatus('current')
if mibBuilder.loadTexts: dlmodPath.setDescription('The path of the module executable file')
dlmodError = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 14, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlmodError.setStatus('current')
if mibBuilder.loadTexts: dlmodError.setDescription('The last error from dlmod_load_module')
dlmodStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2021, 14, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("loaded", 1), ("unloaded", 2), ("error", 3), ("load", 4), ("unload", 5), ("create", 6), ("delete", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlmodStatus.setStatus('current')
if mibBuilder.loadTexts: dlmodStatus.setDescription('Module status')
mibBuilder.exportSymbols("DLMOD-MIB", dlmodTable=dlmodTable, dlmodNextIndex=dlmodNextIndex, dlmodEntry=dlmodEntry, dlmodError=dlmodError, dlmod=dlmod, dlmodPath=dlmodPath, dlmodStatus=dlmodStatus, dlmodName=dlmodName, dlmodIndex=dlmodIndex)
