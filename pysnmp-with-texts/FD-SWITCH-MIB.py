#
# PySNMP MIB module FD-SWITCH-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/FD-SWITCH-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:13:06 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
epon, = mibBuilder.importSymbols("EPON-EOC-MIB", "epon")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, Unsigned32, NotificationType, MibIdentifier, Gauge32, IpAddress, ModuleIdentity, Counter64, ObjectIdentity, TimeTicks, Counter32, Bits, iso, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "Unsigned32", "NotificationType", "MibIdentifier", "Gauge32", "IpAddress", "ModuleIdentity", "Counter64", "ObjectIdentity", "TimeTicks", "Counter32", "Bits", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, MacAddress, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "MacAddress", "RowStatus", "TextualConvention")
coreSwitch = ModuleIdentity((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2))
if mibBuilder.loadTexts: coreSwitch.setLastUpdated('201005271056Z')
if mibBuilder.loadTexts: coreSwitch.setOrganization('epon eoc factory.')
if mibBuilder.loadTexts: coreSwitch.setContactInfo('')
if mibBuilder.loadTexts: coreSwitch.setDescription('core switch mib module')
class SniPortList(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("ge1", 1), ("ge2", 2), ("ge3", 3), ("ge4", 4), ("ge5", 5), ("ge6", 6), ("ge7", 7), ("ge8", 8))

class SwPortList(TextualConvention, Integer32):
    description = 'Description.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
    namedValues = NamedValues(("ge1", 1), ("ge2", 2), ("ge3", 3), ("ge4", 4), ("ge5", 5), ("ge6", 6), ("ge7", 7), ("ge8", 8), ("ge9", 9), ("ge10", 10), ("ge11", 11), ("ge12", 12), ("ge13", 13), ("ge14", 14), ("ge15", 15), ("ge16", 16))

class OperSwitch(TextualConvention, Integer32):
    description = 'Device function operation switch type'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("enable", 1), ("disable", 2))

class PortList(TextualConvention, OctetString):
    description = "Each octet within this value specifies a set of eight ports, with the first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16, etc. Within each octet, the most significant bit represents the lowest numbered port, and the least significant bit represents the highest numbered port. Thus, each port of the bridge is represented by a single bit within the value of this object. If that bit has a value of '1' then that port is included in the set of ports; the port is not included if its bit has a value of '0'."
    status = 'current'

class DeviceStatus(TextualConvention, Integer32):
    description = 'Device work status type. One device or dummy device may have following five work status: notPresent(1): the device is not present (not installed) offline(2):the device is present,but can not be communicated (or failed to get its info) online(3):the device is present and can be communicated normal(4):the device is online and work well abnormal(5): the device is online but work abnormal for some reason'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("notPresent", 1), ("offline", 2), ("online", 3), ("normal", 4), ("abnormal", 5))

switchConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 1))
switchMode = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("sniDestinated", 1), ("transparent", 2), ("normal", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: switchMode.setStatus('current')
if mibBuilder.loadTexts: switchMode.setDescription('The work mode of the core switch, now it can work in following three modes: sniDestinated: SNI port is specified,all internal port (connected with OLT LNP port) exchange traffic with the only one specified SNI port, all other SNI port is not in use in this mode. When set to this mode, the ONUs registered on different PON port(OLT) can not communicate each other transparent: Each SNI port corresponding to one PON port, and the port pairs are isolate each other normal: lay2 switch mode ')
destinedSNIPort = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 1, 2), SniPortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinedSNIPort.setStatus('current')
if mibBuilder.loadTexts: destinedSNIPort.setDescription(' ')
inBandInterface = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 2))
netInterfaceTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 2, 1), )
if mibBuilder.loadTexts: netInterfaceTable.setStatus('current')
if mibBuilder.loadTexts: netInterfaceTable.setDescription(' ')
netInterfaceEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 2, 1, 1), ).setIndexNames((0, "FD-SWITCH-MIB", "ifIndex"))
if mibBuilder.loadTexts: netInterfaceEntry.setStatus('current')
if mibBuilder.loadTexts: netInterfaceEntry.setDescription(' ')
ifIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 2, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: ifIndex.setStatus('current')
if mibBuilder.loadTexts: ifIndex.setDescription(' ')
ifName = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 2, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifName.setStatus('current')
if mibBuilder.loadTexts: ifName.setDescription(' ')
ifIpAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 2, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifIpAddr.setStatus('current')
if mibBuilder.loadTexts: ifIpAddr.setDescription(' ')
ifNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 2, 1, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifNetMask.setStatus('current')
if mibBuilder.loadTexts: ifNetMask.setDescription(' ')
ifDefautGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 2, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifDefautGateway.setStatus('current')
if mibBuilder.loadTexts: ifDefautGateway.setDescription(' ')
ifVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifVlan.setStatus('current')
if mibBuilder.loadTexts: ifVlan.setDescription(' ')
ifShutDown = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 2, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("operational", 1), ("shutdown", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ifShutDown.setStatus('current')
if mibBuilder.loadTexts: ifShutDown.setDescription(' ')
ifStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("down", 1), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ifStatus.setStatus('current')
if mibBuilder.loadTexts: ifStatus.setDescription(' ')
switchPort = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3))
swPortStatusTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 1), )
if mibBuilder.loadTexts: swPortStatusTable.setStatus('current')
if mibBuilder.loadTexts: swPortStatusTable.setDescription(' ')
swPortStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 1, 1), ).setIndexNames((0, "FD-SWITCH-MIB", "swSniPortId"))
if mibBuilder.loadTexts: swPortStatusEntry.setStatus('current')
if mibBuilder.loadTexts: swPortStatusEntry.setDescription(' ')
swSniPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 1, 1, 1), SniPortList())
if mibBuilder.loadTexts: swSniPortId.setStatus('current')
if mibBuilder.loadTexts: swSniPortId.setDescription('Description.')
sfpPlugStauts = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("plugIn", 1), ("plugOut", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sfpPlugStauts.setStatus('current')
if mibBuilder.loadTexts: sfpPlugStauts.setDescription(' ')
trsPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: trsPower.setStatus('current')
if mibBuilder.loadTexts: trsPower.setDescription(' ')
resPower = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resPower.setStatus('current')
if mibBuilder.loadTexts: resPower.setDescription(' ')
swPortLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortLinkState.setStatus('current')
if mibBuilder.loadTexts: swPortLinkState.setDescription(' ')
swPortProtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("linkUp", 1), ("linkDown", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortProtStatus.setStatus('current')
if mibBuilder.loadTexts: swPortProtStatus.setDescription(' ')
swPortWorkSpd = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("mbps10", 1), ("mbps100", 2), ("mbps1G", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortWorkSpd.setStatus('current')
if mibBuilder.loadTexts: swPortWorkSpd.setDescription(' ')
swPortWorkDup = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("fullDup", 1), ("halfDup", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortWorkDup.setStatus('current')
if mibBuilder.loadTexts: swPortWorkDup.setDescription(' ')
swPortWorkFlowCtr = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: swPortWorkFlowCtr.setStatus('current')
if mibBuilder.loadTexts: swPortWorkFlowCtr.setDescription(' ')
swPortCfgTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2), )
if mibBuilder.loadTexts: swPortCfgTable.setStatus('current')
if mibBuilder.loadTexts: swPortCfgTable.setDescription(' ')
swPortCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1), ).setIndexNames((0, "FD-SWITCH-MIB", "swPortId"))
if mibBuilder.loadTexts: swPortCfgEntry.setStatus('current')
if mibBuilder.loadTexts: swPortCfgEntry.setDescription(' ')
swPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 2), SwPortList())
if mibBuilder.loadTexts: swPortId.setStatus('current')
if mibBuilder.loadTexts: swPortId.setDescription(' ')
sfpModeCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("copper", 1), ("fiber", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sfpModeCfg.setStatus('current')
if mibBuilder.loadTexts: sfpModeCfg.setDescription('this object is only effective when the port is SNI(ge1~ge8)')
swPortCfgSpd = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("mbps10", 1), ("mbps100", 2), ("mbps1G", 3), ("mbps10G", 4), ("auto", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortCfgSpd.setStatus('current')
if mibBuilder.loadTexts: swPortCfgSpd.setDescription(' ')
swPortCfgDup = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("full", 1), ("half", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortCfgDup.setStatus('current')
if mibBuilder.loadTexts: swPortCfgDup.setDescription(' ')
swPortRstAuto = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("restart", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortRstAuto.setStatus('current')
if mibBuilder.loadTexts: swPortRstAuto.setDescription(' ')
swPortFlowCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortFlowCtl.setStatus('current')
if mibBuilder.loadTexts: swPortFlowCtl.setDescription(' ')
swPortDftPri = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortDftPri.setStatus('current')
if mibBuilder.loadTexts: swPortDftPri.setDescription(' ')
swPortDftVid = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortDftVid.setStatus('current')
if mibBuilder.loadTexts: swPortDftVid.setDescription(' ')
swPortForceLinkDown = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("forceDown", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortForceLinkDown.setStatus('current')
if mibBuilder.loadTexts: swPortForceLinkDown.setDescription(' ')
swPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 11), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortEnable.setStatus('current')
if mibBuilder.loadTexts: swPortEnable.setDescription(' ')
swPortIngressFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 12), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortIngressFilter.setStatus('current')
if mibBuilder.loadTexts: swPortIngressFilter.setDescription(' ')
swPortPermitFrameType = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("tagged", 1), ("allType", 2), ("unTagged", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortPermitFrameType.setStatus('current')
if mibBuilder.loadTexts: swPortPermitFrameType.setDescription(' ')
swPortNestVlanEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 14), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortNestVlanEnable.setStatus('current')
if mibBuilder.loadTexts: swPortNestVlanEnable.setDescription(' ')
swPortProtVlan = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 15), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortProtVlan.setStatus('current')
if mibBuilder.loadTexts: swPortProtVlan.setDescription(' ')
swPortBroadCastRateCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 16), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortBroadCastRateCtl.setStatus('current')
if mibBuilder.loadTexts: swPortBroadCastRateCtl.setDescription(' ')
swPortMultiCastRateCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 17), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortMultiCastRateCtl.setStatus('current')
if mibBuilder.loadTexts: swPortMultiCastRateCtl.setDescription('Description.')
swPortUnkUcCastRateCtl = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 18), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortUnkUcCastRateCtl.setStatus('current')
if mibBuilder.loadTexts: swPortUnkUcCastRateCtl.setDescription('Description.')
swPortBroadCastRate = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 2, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortBroadCastRate.setStatus('current')
if mibBuilder.loadTexts: swPortBroadCastRate.setDescription(' ')
swPortRateCtlMode = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 3, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("kBps", 1), ("kpps", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: swPortRateCtlMode.setStatus('current')
if mibBuilder.loadTexts: swPortRateCtlMode.setDescription('Description.')
vlan = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4))
proSupportedTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 1), )
if mibBuilder.loadTexts: proSupportedTable.setStatus('current')
if mibBuilder.loadTexts: proSupportedTable.setDescription(' ')
proSupportedEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 1, 1), ).setIndexNames((0, "FD-SWITCH-MIB", "proSupportedId"))
if mibBuilder.loadTexts: proSupportedEntry.setStatus('current')
if mibBuilder.loadTexts: proSupportedEntry.setDescription(' ')
proSupportedId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: proSupportedId.setStatus('current')
if mibBuilder.loadTexts: proSupportedId.setDescription('Description.')
proSupported = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proSupported.setStatus('current')
if mibBuilder.loadTexts: proSupported.setDescription(' ')
proSupportedRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 1, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: proSupportedRowStatus.setStatus('current')
if mibBuilder.loadTexts: proSupportedRowStatus.setDescription(' ')
proVlanTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 2), )
if mibBuilder.loadTexts: proVlanTable.setStatus('current')
if mibBuilder.loadTexts: proVlanTable.setDescription(' ')
proVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 2, 1), ).setIndexNames((0, "FD-SWITCH-MIB", "swPortId"), (0, "FD-SWITCH-MIB", "proVlanIdx"))
if mibBuilder.loadTexts: proVlanEntry.setStatus('current')
if mibBuilder.loadTexts: proVlanEntry.setDescription(' ')
proVlanIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: proVlanIdx.setStatus('current')
if mibBuilder.loadTexts: proVlanIdx.setDescription('Description.')
proVlanProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1500, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proVlanProtocol.setStatus('current')
if mibBuilder.loadTexts: proVlanProtocol.setDescription('Description.')
proVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4094))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: proVlanId.setStatus('current')
if mibBuilder.loadTexts: proVlanId.setDescription(' ')
proVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: proVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: proVlanRowStatus.setDescription(' ')
qVlanTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 3), )
if mibBuilder.loadTexts: qVlanTable.setStatus('current')
if mibBuilder.loadTexts: qVlanTable.setDescription('Description.')
qVlanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 3, 1), ).setIndexNames((0, "FD-SWITCH-MIB", "qVlanId"))
if mibBuilder.loadTexts: qVlanEntry.setStatus('current')
if mibBuilder.loadTexts: qVlanEntry.setDescription('Description.')
qVlanId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 3, 1, 1), Unsigned32())
if mibBuilder.loadTexts: qVlanId.setStatus('current')
if mibBuilder.loadTexts: qVlanId.setDescription('Description.')
qVlanStaticEgressPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 3, 1, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qVlanStaticEgressPorts.setStatus('current')
if mibBuilder.loadTexts: qVlanStaticEgressPorts.setDescription('first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16.')
qVlanStaticUntaggedPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 3, 1, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qVlanStaticUntaggedPorts.setStatus('current')
if mibBuilder.loadTexts: qVlanStaticUntaggedPorts.setDescription('first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16.')
qVlanRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 3, 1, 4), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: qVlanRowStatus.setStatus('current')
if mibBuilder.loadTexts: qVlanRowStatus.setDescription('Description.')
qVlanCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 4))
vlanMode = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 4, 4, 1), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: vlanMode.setStatus('current')
if mibBuilder.loadTexts: vlanMode.setDescription('vlan mode :enable (vlan aware) or disable (vlan unaware).')
trunk = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 5))
trunkConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 5, 1))
trunkBlance = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("balanceMac", 1), ("balanceIp", 2), ("balanceL4Port", 3), ("balanceIpMac", 4), ("balanceL4PortMac", 5), ("balanceInL2If", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: trunkBlance.setStatus('current')
if mibBuilder.loadTexts: trunkBlance.setDescription(' ')
trunkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 5, 2), )
if mibBuilder.loadTexts: trunkGroupTable.setStatus('current')
if mibBuilder.loadTexts: trunkGroupTable.setDescription(' ')
trunkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 5, 2, 1), ).setIndexNames((0, "FD-SWITCH-MIB", "trunkGroupId"))
if mibBuilder.loadTexts: trunkGroupEntry.setStatus('current')
if mibBuilder.loadTexts: trunkGroupEntry.setDescription(' ')
trunkGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 5, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: trunkGroupId.setStatus('current')
if mibBuilder.loadTexts: trunkGroupId.setDescription(' ')
trunkGroupMembers = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 5, 2, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupMembers.setStatus('current')
if mibBuilder.loadTexts: trunkGroupMembers.setDescription(' ')
trunkGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 5, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: trunkGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: trunkGroupRowStatus.setDescription(' ')
rstp = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6))
rstpConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 1))
rstpEnable = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 1, 1), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rstpEnable.setStatus('current')
if mibBuilder.loadTexts: rstpEnable.setDescription(' ')
bridgePri = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4096, 8192, 12288, 16384, 20480, 24576, 28672, 32768, 36864, 40960, 45056, 49152, 53248, 57344, 61440))).clone(namedValues=NamedValues(("p0", 1), ("p4096", 4096), ("p8192", 8192), ("p12288", 12288), ("p16384", 16384), ("p20480", 20480), ("p24576", 24576), ("p28672", 28672), ("p32768", 32768), ("p36864", 36864), ("p40960", 40960), ("p45056", 45056), ("p49152", 49152), ("p53248", 53248), ("p57344", 57344), ("p61440", 61440)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgePri.setStatus('current')
if mibBuilder.loadTexts: bridgePri.setDescription(' ')
bridgeMaxAge = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(6, 40))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeMaxAge.setStatus('current')
if mibBuilder.loadTexts: bridgeMaxAge.setDescription(' ')
bridgeForwardDelay = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(4, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bridgeForwardDelay.setStatus('current')
if mibBuilder.loadTexts: bridgeForwardDelay.setDescription(' ')
transmitHoldCount = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: transmitHoldCount.setStatus('current')
if mibBuilder.loadTexts: transmitHoldCount.setDescription(' ')
bridgeIdAddr = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 1, 6), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeIdAddr.setStatus('current')
if mibBuilder.loadTexts: bridgeIdAddr.setDescription(' ')
bridgeHelloTime = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: bridgeHelloTime.setStatus('current')
if mibBuilder.loadTexts: bridgeHelloTime.setDescription(' ')
rootPri = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rootPri.setStatus('current')
if mibBuilder.loadTexts: rootPri.setDescription(' ')
rootAddr = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 1, 9), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rootAddr.setStatus('current')
if mibBuilder.loadTexts: rootAddr.setDescription(' ')
rootPathCost = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rootPathCost.setStatus('current')
if mibBuilder.loadTexts: rootPathCost.setDescription(' ')
rstpPortTable = MibTable((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 2), )
if mibBuilder.loadTexts: rstpPortTable.setStatus('current')
if mibBuilder.loadTexts: rstpPortTable.setDescription(' ')
rstpPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 2, 1), ).setIndexNames((0, "FD-SWITCH-MIB", "swSniPortId"))
if mibBuilder.loadTexts: rstpPortEntry.setStatus('current')
if mibBuilder.loadTexts: rstpPortEntry.setDescription(' ')
rstpMode = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("stp", 1), ("rstp", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstpMode.setStatus('current')
if mibBuilder.loadTexts: rstpMode.setDescription(' ')
rstpPri = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16, 32, 48, 64, 80, 96, 112, 128, 144, 160, 176, 192, 208, 224, 240))).clone(namedValues=NamedValues(("p0", 1), ("p16", 16), ("p32", 32), ("p48", 48), ("p64", 64), ("p80", 80), ("p96", 96), ("p112", 112), ("p128", 128), ("p144", 144), ("p160", 160), ("p176", 176), ("p192", 192), ("p208", 208), ("p224", 224), ("p240", 240)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rstpPri.setStatus('current')
if mibBuilder.loadTexts: rstpPri.setDescription(' ')
rstpPathCost = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 200000000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rstpPathCost.setStatus('current')
if mibBuilder.loadTexts: rstpPathCost.setDescription(' ')
rstpMCheck = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 2, 1, 4), OperSwitch()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rstpMCheck.setStatus('current')
if mibBuilder.loadTexts: rstpMCheck.setDescription(' ')
rstpEdgeConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nonEdge", 1), ("edge", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rstpEdgeConfig.setStatus('current')
if mibBuilder.loadTexts: rstpEdgeConfig.setDescription(' ')
rstpOperEdge = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("edge", 1), ("nonEdge", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstpOperEdge.setStatus('current')
if mibBuilder.loadTexts: rstpOperEdge.setDescription(' ')
rstpP2PCfg = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("share", 1), ("p2p", 2), ("auto", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rstpP2PCfg.setStatus('current')
if mibBuilder.loadTexts: rstpP2PCfg.setDescription(' ')
rstpOperP2P = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("share", 1), ("p2p", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstpOperP2P.setStatus('current')
if mibBuilder.loadTexts: rstpOperP2P.setDescription(' ')
rstpPortState = MibTableColumn((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 6, 2, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("linkdown", 1), ("discarding", 2), ("learning", 3), ("forwarding", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: rstpPortState.setStatus('current')
if mibBuilder.loadTexts: rstpPortState.setDescription(' ')
mirror = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 7))
destinationPort = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("none", 0), ("ge1", 1), ("ge2", 2), ("ge3", 3), ("ge4", 4), ("ge5", 5), ("ge6", 6), ("ge7", 7), ("ge8", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: destinationPort.setStatus('current')
if mibBuilder.loadTexts: destinationPort.setDescription("a mirroring destination port, one of none & ge1~ge16, 0 means 'NONE'")
sourceIngressPorts = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 7, 2), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceIngressPorts.setStatus('current')
if mibBuilder.loadTexts: sourceIngressPorts.setDescription('port bitmap: first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16.')
sourceEgressPorts = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 7, 3), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceEgressPorts.setStatus('current')
if mibBuilder.loadTexts: sourceEgressPorts.setDescription('port bitmap: first octet specifying ports 1 through 8, the second octet specifying ports 9 through 16.')
sourceVlan = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 7, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 18))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sourceVlan.setStatus('current')
if mibBuilder.loadTexts: sourceVlan.setDescription('first 2byte is the number of vlans, maxmun number is 8,format: 2byte 2byte 2byte 2byte ----------------------------------------------- | vlanNum(N<=8) | vlan1 | vlan2 | ... | vlanN | -----------------------------------------------')
operation = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 7, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("none", 0), ("delete", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operation.setStatus('current')
if mibBuilder.loadTexts: operation.setDescription('operation: delete:clear all the mirror data,disable mirroring function.')
igmpsnooping = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 8))
igmpsnoopingAdmin = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 8, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsnoopingAdmin.setStatus('current')
if mibBuilder.loadTexts: igmpsnoopingAdmin.setDescription('enable or disable igmp-snooping.')
igmpsnoopingRouterAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 8, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsnoopingRouterAgingTime.setStatus('current')
if mibBuilder.loadTexts: igmpsnoopingRouterAgingTime.setDescription('setting igmp-snooping router-port aging-time.')
igmpsnoopingHostAgingTime = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 8, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(200, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsnoopingHostAgingTime.setStatus('current')
if mibBuilder.loadTexts: igmpsnoopingHostAgingTime.setDescription('setting igmp-snooping member port aging-time.')
igmpsnoopingVlanData = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 8, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsnoopingVlanData.setStatus('current')
if mibBuilder.loadTexts: igmpsnoopingVlanData.setDescription('igmpsnooping vlan data.')
igmpsnoopingQueryProxy = MibScalar((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 8, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: igmpsnoopingQueryProxy.setStatus('current')
if mibBuilder.loadTexts: igmpsnoopingQueryProxy.setDescription('setting igmp-snooping query proxy.')
coreSwitchConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 10))
coreSwitchGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 10, 1))
inbandNetIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 10, 1, 1)).setObjects(("FD-SWITCH-MIB", "ifName"), ("FD-SWITCH-MIB", "ifIpAddr"), ("FD-SWITCH-MIB", "ifNetMask"), ("FD-SWITCH-MIB", "ifDefautGateway"), ("FD-SWITCH-MIB", "ifVlan"), ("FD-SWITCH-MIB", "ifShutDown"), ("FD-SWITCH-MIB", "ifStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    inbandNetIfGroup = inbandNetIfGroup.setStatus('current')
if mibBuilder.loadTexts: inbandNetIfGroup.setDescription('A collection of objects providing inband network interface configuration')
switchCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 10, 1, 2)).setObjects(("FD-SWITCH-MIB", "switchMode"), ("FD-SWITCH-MIB", "destinedSNIPort"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    switchCfgGroup = switchCfgGroup.setStatus('current')
if mibBuilder.loadTexts: switchCfgGroup.setDescription('A connection of objects providing basic switch configuration')
swPortManageGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 10, 1, 3)).setObjects(("FD-SWITCH-MIB", "sfpPlugStauts"), ("FD-SWITCH-MIB", "trsPower"), ("FD-SWITCH-MIB", "resPower"), ("FD-SWITCH-MIB", "swPortLinkState"), ("FD-SWITCH-MIB", "swPortProtStatus"), ("FD-SWITCH-MIB", "swPortWorkSpd"), ("FD-SWITCH-MIB", "swPortWorkDup"), ("FD-SWITCH-MIB", "swPortWorkFlowCtr"), ("FD-SWITCH-MIB", "sfpModeCfg"), ("FD-SWITCH-MIB", "swPortCfgSpd"), ("FD-SWITCH-MIB", "swPortCfgDup"), ("FD-SWITCH-MIB", "swPortRstAuto"), ("FD-SWITCH-MIB", "swPortFlowCtl"), ("FD-SWITCH-MIB", "swPortDftPri"), ("FD-SWITCH-MIB", "swPortDftVid"), ("FD-SWITCH-MIB", "swPortForceLinkDown"), ("FD-SWITCH-MIB", "swPortEnable"), ("FD-SWITCH-MIB", "swPortIngressFilter"), ("FD-SWITCH-MIB", "swPortPermitFrameType"), ("FD-SWITCH-MIB", "swPortNestVlanEnable"), ("FD-SWITCH-MIB", "swPortProtVlan"), ("FD-SWITCH-MIB", "swPortBroadCastRateCtl"), ("FD-SWITCH-MIB", "swPortBroadCastRate"), ("FD-SWITCH-MIB", "swPortMultiCastRateCtl"), ("FD-SWITCH-MIB", "swPortUnkUcCastRateCtl"), ("FD-SWITCH-MIB", "swPortRateCtlMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    swPortManageGroup = swPortManageGroup.setStatus('current')
if mibBuilder.loadTexts: swPortManageGroup.setDescription('A collection of objects providing switch port configuration management')
swVlanGroups = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 10, 1, 4)).setObjects(("FD-SWITCH-MIB", "proSupportedRowStatus"), ("FD-SWITCH-MIB", "proVlanRowStatus"), ("FD-SWITCH-MIB", "proSupported"), ("FD-SWITCH-MIB", "proVlanProtocol"), ("FD-SWITCH-MIB", "proVlanId"), ("FD-SWITCH-MIB", "qVlanStaticEgressPorts"), ("FD-SWITCH-MIB", "qVlanStaticUntaggedPorts"), ("FD-SWITCH-MIB", "qVlanRowStatus"), ("FD-SWITCH-MIB", "vlanMode"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    swVlanGroups = swVlanGroups.setStatus('current')
if mibBuilder.loadTexts: swVlanGroups.setDescription('A collection of objects providing switch vlan configuration management')
swTrunkGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 10, 1, 5)).setObjects(("FD-SWITCH-MIB", "trunkBlance"), ("FD-SWITCH-MIB", "trunkGroupMembers"), ("FD-SWITCH-MIB", "trunkGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    swTrunkGroup = swTrunkGroup.setStatus('current')
if mibBuilder.loadTexts: swTrunkGroup.setDescription('A collection of objects providing switch trunk management')
swRstpGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 10, 1, 6)).setObjects(("FD-SWITCH-MIB", "rstpEnable"), ("FD-SWITCH-MIB", "bridgePri"), ("FD-SWITCH-MIB", "bridgeMaxAge"), ("FD-SWITCH-MIB", "bridgeForwardDelay"), ("FD-SWITCH-MIB", "transmitHoldCount"), ("FD-SWITCH-MIB", "bridgeIdAddr"), ("FD-SWITCH-MIB", "bridgeHelloTime"), ("FD-SWITCH-MIB", "rootPri"), ("FD-SWITCH-MIB", "rootAddr"), ("FD-SWITCH-MIB", "rootPathCost"), ("FD-SWITCH-MIB", "rstpMode"), ("FD-SWITCH-MIB", "rstpPri"), ("FD-SWITCH-MIB", "rstpPathCost"), ("FD-SWITCH-MIB", "rstpMCheck"), ("FD-SWITCH-MIB", "rstpEdgeConfig"), ("FD-SWITCH-MIB", "rstpOperEdge"), ("FD-SWITCH-MIB", "rstpP2PCfg"), ("FD-SWITCH-MIB", "rstpOperP2P"), ("FD-SWITCH-MIB", "rstpPortState"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    swRstpGroup = swRstpGroup.setStatus('current')
if mibBuilder.loadTexts: swRstpGroup.setDescription('A collection of objects providing switch rstp configuration managment')
mirrorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 10, 1, 7)).setObjects(("FD-SWITCH-MIB", "destinationPort"), ("FD-SWITCH-MIB", "sourceIngressPorts"), ("FD-SWITCH-MIB", "sourceEgressPorts"), ("FD-SWITCH-MIB", "sourceVlan"), ("FD-SWITCH-MIB", "operation"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    mirrorGroup = mirrorGroup.setStatus('current')
if mibBuilder.loadTexts: mirrorGroup.setDescription('Description.')
coreSwitchCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 10, 2))
coreSwitchCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 34592, 1, 3, 2, 10, 2, 1)).setObjects(("FD-SWITCH-MIB", "inbandNetIfGroup"), ("FD-SWITCH-MIB", "switchCfgGroup"), ("FD-SWITCH-MIB", "swPortManageGroup"), ("FD-SWITCH-MIB", "swVlanGroups"), ("FD-SWITCH-MIB", "swTrunkGroup"), ("FD-SWITCH-MIB", "swRstpGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    coreSwitchCompliance = coreSwitchCompliance.setStatus('current')
if mibBuilder.loadTexts: coreSwitchCompliance.setDescription('The compliance statement')
mibBuilder.exportSymbols("FD-SWITCH-MIB", swPortBroadCastRate=swPortBroadCastRate, ifShutDown=ifShutDown, sourceIngressPorts=sourceIngressPorts, qVlanEntry=qVlanEntry, swPortRateCtlMode=swPortRateCtlMode, swPortIngressFilter=swPortIngressFilter, qVlanId=qVlanId, destinationPort=destinationPort, trunkGroupId=trunkGroupId, qVlanStaticUntaggedPorts=qVlanStaticUntaggedPorts, bridgePri=bridgePri, rstpMode=rstpMode, PYSNMP_MODULE_ID=coreSwitch, igmpsnoopingQueryProxy=igmpsnoopingQueryProxy, swTrunkGroup=swTrunkGroup, igmpsnoopingRouterAgingTime=igmpsnoopingRouterAgingTime, rootPri=rootPri, swPortMultiCastRateCtl=swPortMultiCastRateCtl, inBandInterface=inBandInterface, trunk=trunk, proVlanEntry=proVlanEntry, igmpsnoopingHostAgingTime=igmpsnoopingHostAgingTime, mirrorGroup=mirrorGroup, transmitHoldCount=transmitHoldCount, proSupportedId=proSupportedId, switchCfgGroup=switchCfgGroup, ifIndex=ifIndex, rstpPortState=rstpPortState, vlan=vlan, SwPortList=SwPortList, ifNetMask=ifNetMask, netInterfaceEntry=netInterfaceEntry, swPortDftVid=swPortDftVid, swPortEnable=swPortEnable, qVlanTable=qVlanTable, swPortWorkSpd=swPortWorkSpd, qVlanRowStatus=qVlanRowStatus, sfpPlugStauts=sfpPlugStauts, swRstpGroup=swRstpGroup, bridgeForwardDelay=bridgeForwardDelay, rstpPortEntry=rstpPortEntry, mirror=mirror, trunkGroupEntry=trunkGroupEntry, proSupportedRowStatus=proSupportedRowStatus, swPortPermitFrameType=swPortPermitFrameType, igmpsnooping=igmpsnooping, proVlanTable=proVlanTable, SniPortList=SniPortList, proVlanIdx=proVlanIdx, sourceEgressPorts=sourceEgressPorts, swPortBroadCastRateCtl=swPortBroadCastRateCtl, rstpPortTable=rstpPortTable, igmpsnoopingVlanData=igmpsnoopingVlanData, destinedSNIPort=destinedSNIPort, swPortForceLinkDown=swPortForceLinkDown, rstpP2PCfg=rstpP2PCfg, coreSwitchGroups=coreSwitchGroups, swVlanGroups=swVlanGroups, trunkGroupTable=trunkGroupTable, trsPower=trsPower, rstpConfig=rstpConfig, rootPathCost=rootPathCost, ifIpAddr=ifIpAddr, qVlanStaticEgressPorts=qVlanStaticEgressPorts, igmpsnoopingAdmin=igmpsnoopingAdmin, OperSwitch=OperSwitch, resPower=resPower, trunkConfig=trunkConfig, proVlanProtocol=proVlanProtocol, swPortManageGroup=swPortManageGroup, bridgeIdAddr=bridgeIdAddr, sourceVlan=sourceVlan, swPortCfgDup=swPortCfgDup, rstpMCheck=rstpMCheck, PortList=PortList, swPortId=swPortId, swPortWorkDup=swPortWorkDup, proVlanId=proVlanId, rstpPri=rstpPri, bridgeHelloTime=bridgeHelloTime, switchPort=switchPort, ifVlan=ifVlan, operation=operation, qVlanCfg=qVlanCfg, swPortCfgSpd=swPortCfgSpd, swPortStatusEntry=swPortStatusEntry, swPortWorkFlowCtr=swPortWorkFlowCtr, rstpOperP2P=rstpOperP2P, swPortNestVlanEnable=swPortNestVlanEnable, swPortDftPri=swPortDftPri, swPortCfgEntry=swPortCfgEntry, trunkBlance=trunkBlance, coreSwitchCompliances=coreSwitchCompliances, ifName=ifName, coreSwitchConformance=coreSwitchConformance, swPortProtStatus=swPortProtStatus, rstp=rstp, rootAddr=rootAddr, DeviceStatus=DeviceStatus, swPortLinkState=swPortLinkState, swPortStatusTable=swPortStatusTable, rstpEdgeConfig=rstpEdgeConfig, vlanMode=vlanMode, swPortUnkUcCastRateCtl=swPortUnkUcCastRateCtl, coreSwitch=coreSwitch, swPortRstAuto=swPortRstAuto, bridgeMaxAge=bridgeMaxAge, proVlanRowStatus=proVlanRowStatus, swSniPortId=swSniPortId, swPortProtVlan=swPortProtVlan, trunkGroupRowStatus=trunkGroupRowStatus, netInterfaceTable=netInterfaceTable, rstpEnable=rstpEnable, coreSwitchCompliance=coreSwitchCompliance, sfpModeCfg=sfpModeCfg, inbandNetIfGroup=inbandNetIfGroup, swPortCfgTable=swPortCfgTable, rstpOperEdge=rstpOperEdge, proSupported=proSupported, switchConfig=switchConfig, proSupportedTable=proSupportedTable, switchMode=switchMode, swPortFlowCtl=swPortFlowCtl, ifStatus=ifStatus, rstpPathCost=rstpPathCost, ifDefautGateway=ifDefautGateway, proSupportedEntry=proSupportedEntry, trunkGroupMembers=trunkGroupMembers)
