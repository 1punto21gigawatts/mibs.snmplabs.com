#
# PySNMP MIB module GUDEADS-EPC8X-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/GUDEADS-EPC8X-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:20:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, ObjectGroup, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "ObjectGroup", "NotificationGroup")
ObjectIdentity, Counter64, MibIdentifier, NotificationType, iso, TimeTicks, Counter32, enterprises, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, Gauge32, ModuleIdentity, IpAddress, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ObjectIdentity", "Counter64", "MibIdentifier", "NotificationType", "iso", "TimeTicks", "Counter32", "enterprises", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "Gauge32", "ModuleIdentity", "IpAddress", "Bits", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
gudeads = ModuleIdentity((1, 3, 6, 1, 4, 1, 28507))
gudeads.setRevisions(('2007-03-05 13:56',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: gudeads.setRevisionsDescriptions(('$Id: GUDEADS-EPC8X-MIB.txt,v 1.9 2008/08/06 15:14:23 petes1 Exp $',))
if mibBuilder.loadTexts: gudeads.setLastUpdated('200703051356Z')
if mibBuilder.loadTexts: gudeads.setOrganization('Gude Analog- und Digitalsysteme GmbH')
if mibBuilder.loadTexts: gudeads.setContactInfo('http://www.gudeads.com/')
if mibBuilder.loadTexts: gudeads.setDescription('')
events = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 1, 0))
epc8TrapIPTable = MibTable((1, 3, 6, 1, 4, 1, 28507, 1, 1, 1, 2), )
if mibBuilder.loadTexts: epc8TrapIPTable.setStatus('current')
if mibBuilder.loadTexts: epc8TrapIPTable.setDescription('list of all Trap receiver')
gadsEPC8 = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 1))
epc8TrapIPEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28507, 1, 1, 1, 2, 1), ).setIndexNames((0, "GUDEADS-EPC8X-MIB", "epc8TrapIPIndex"))
if mibBuilder.loadTexts: epc8TrapIPEntry.setStatus('current')
if mibBuilder.loadTexts: epc8TrapIPEntry.setDescription('an entry containing management informations regarding the list of trap receivers')
epc8TrapIPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 1, 1, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: epc8TrapIPIndex.setStatus('current')
if mibBuilder.loadTexts: epc8TrapIPIndex.setDescription('A unique value, greater than zero, for each receiver slot.')
epc8TrapIPPort = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 1, 1, 1, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024)).clone(162)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: epc8TrapIPPort.setStatus('current')
if mibBuilder.loadTexts: epc8TrapIPPort.setDescription('IP Port specifying one Trap receiver slot. A value of 0 disables this slot.')
epc8portNumber = MibScalar((1, 3, 6, 1, 4, 1, 28507, 1, 1, 2, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8))).setMaxAccess("readonly")
if mibBuilder.loadTexts: epc8portNumber.setStatus('current')
if mibBuilder.loadTexts: epc8portNumber.setDescription('The number of PowerPorts')
epc8PortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 1, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 8)))
if mibBuilder.loadTexts: epc8PortIndex.setStatus('current')
if mibBuilder.loadTexts: epc8PortIndex.setDescription('A unique value, greater than zero, for each PowerPort.')
epc8PortStartupMode = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 1, 1, 2, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("off", 0), ("on", 1), ("laststate", 2))).clone('off')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: epc8PortStartupMode.setStatus('current')
if mibBuilder.loadTexts: epc8PortStartupMode.setDescription('set Mode of startup sequence (off, on , remember last state)')
epc8Sensors = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 1, 1, 3))
epc8Irms = MibScalar((1, 3, 6, 1, 4, 1, 28507, 1, 1, 3, 1), Integer32()).setUnits('mA').setMaxAccess("readonly")
if mibBuilder.loadTexts: epc8Irms.setStatus('current')
if mibBuilder.loadTexts: epc8Irms.setDescription('actual rms Current, a value of -9999 indicates that data is not available')
epc8SensorTable = MibTable((1, 3, 6, 1, 4, 1, 28507, 1, 1, 3, 2), )
if mibBuilder.loadTexts: epc8SensorTable.setStatus('current')
if mibBuilder.loadTexts: epc8SensorTable.setDescription('')
epc8SensorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28507, 1, 1, 3, 2, 1), ).setIndexNames((0, "GUDEADS-EPC8X-MIB", "epc8SensorIndex"))
if mibBuilder.loadTexts: epc8SensorEntry.setStatus('current')
if mibBuilder.loadTexts: epc8SensorEntry.setDescription('')
epc8SensorIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 1, 1, 3, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2)))
if mibBuilder.loadTexts: epc8SensorIndex.setStatus('current')
if mibBuilder.loadTexts: epc8SensorIndex.setDescription('')
epc8TempSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 1, 1, 3, 2, 1, 2), Integer32()).setUnits('10th of degree Celsius').setMaxAccess("readonly")
if mibBuilder.loadTexts: epc8TempSensor.setStatus('current')
if mibBuilder.loadTexts: epc8TempSensor.setDescription('actual temperature, a value of -9999 indicates that data is not available')
epc8HygroSensor = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 1, 1, 3, 2, 1, 3), Integer32()).setUnits('10th of percentage humidity').setMaxAccess("readonly")
if mibBuilder.loadTexts: epc8HygroSensor.setStatus('current')
if mibBuilder.loadTexts: epc8HygroSensor.setDescription('actual humidity, a value of -9999 indicates that data is not available')
epcSwitchEvtPort1 = NotificationType((1, 3, 6, 1, 4, 1, 28507, 1, 0, 1)).setObjects(("GUDEADS-EPC8X-MIB", "epc8PortName"), ("GUDEADS-EPC8X-MIB", "epc8PortState"), ("GUDEADS-EPC8X-MIB", "epc8PortSwitchCount"))
if mibBuilder.loadTexts: epcSwitchEvtPort1.setStatus('current')
if mibBuilder.loadTexts: epcSwitchEvtPort1.setDescription('Event is triggered when a port is switched')
epcSwitchEvtPort2 = NotificationType((1, 3, 6, 1, 4, 1, 28507, 1, 0, 2)).setObjects(("GUDEADS-EPC8X-MIB", "epc8PortName"), ("GUDEADS-EPC8X-MIB", "epc8PortState"), ("GUDEADS-EPC8X-MIB", "epc8PortSwitchCount"))
if mibBuilder.loadTexts: epcSwitchEvtPort2.setStatus('current')
if mibBuilder.loadTexts: epcSwitchEvtPort2.setDescription('Event is triggered when a port is switched')
epcSwitchEvtPort3 = NotificationType((1, 3, 6, 1, 4, 1, 28507, 1, 0, 3)).setObjects(("GUDEADS-EPC8X-MIB", "epc8PortName"), ("GUDEADS-EPC8X-MIB", "epc8PortState"), ("GUDEADS-EPC8X-MIB", "epc8PortSwitchCount"))
if mibBuilder.loadTexts: epcSwitchEvtPort3.setStatus('current')
if mibBuilder.loadTexts: epcSwitchEvtPort3.setDescription('Event is triggered when a port is switched')
epcSwitchEvtPort4 = NotificationType((1, 3, 6, 1, 4, 1, 28507, 1, 0, 4)).setObjects(("GUDEADS-EPC8X-MIB", "epc8PortName"), ("GUDEADS-EPC8X-MIB", "epc8PortState"), ("GUDEADS-EPC8X-MIB", "epc8PortSwitchCount"))
if mibBuilder.loadTexts: epcSwitchEvtPort4.setStatus('current')
if mibBuilder.loadTexts: epcSwitchEvtPort4.setDescription('Event is triggered when a port is switched')
epcSwitchEvtPort5 = NotificationType((1, 3, 6, 1, 4, 1, 28507, 1, 0, 5)).setObjects(("GUDEADS-EPC8X-MIB", "epc8PortName"), ("GUDEADS-EPC8X-MIB", "epc8PortState"), ("GUDEADS-EPC8X-MIB", "epc8PortSwitchCount"))
if mibBuilder.loadTexts: epcSwitchEvtPort5.setStatus('current')
if mibBuilder.loadTexts: epcSwitchEvtPort5.setDescription('Event is triggered when a port is switched')
epcSwitchEvtPort6 = NotificationType((1, 3, 6, 1, 4, 1, 28507, 1, 0, 6)).setObjects(("GUDEADS-EPC8X-MIB", "epc8PortName"), ("GUDEADS-EPC8X-MIB", "epc8PortState"), ("GUDEADS-EPC8X-MIB", "epc8PortSwitchCount"))
if mibBuilder.loadTexts: epcSwitchEvtPort6.setStatus('current')
if mibBuilder.loadTexts: epcSwitchEvtPort6.setDescription('Event is triggered when a port is switched')
epcSwitchEvtPort7 = NotificationType((1, 3, 6, 1, 4, 1, 28507, 1, 0, 7)).setObjects(("GUDEADS-EPC8X-MIB", "epc8PortName"), ("GUDEADS-EPC8X-MIB", "epc8PortState"), ("GUDEADS-EPC8X-MIB", "epc8PortSwitchCount"))
if mibBuilder.loadTexts: epcSwitchEvtPort7.setStatus('current')
if mibBuilder.loadTexts: epcSwitchEvtPort7.setDescription('Event is triggered when a port is switched')
epcSwitchEvtPort8 = NotificationType((1, 3, 6, 1, 4, 1, 28507, 1, 0, 8)).setObjects(("GUDEADS-EPC8X-MIB", "epc8PortName"), ("GUDEADS-EPC8X-MIB", "epc8PortState"), ("GUDEADS-EPC8X-MIB", "epc8PortSwitchCount"))
if mibBuilder.loadTexts: epcSwitchEvtPort8.setStatus('current')
if mibBuilder.loadTexts: epcSwitchEvtPort8.setDescription('Event is triggered when a port is switched')
epc8SNMPaccess = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 1, 1, 1))
epc8TrapCtrl = MibScalar((1, 3, 6, 1, 4, 1, 28507, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: epc8TrapCtrl.setStatus('current')
if mibBuilder.loadTexts: epc8TrapCtrl.setDescription('0 = off 1 = Ver. 1 2 = Ver. 2c')
epc8Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 1, 1))
epc8powerports = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 1, 1, 2))
epc8portTable = MibTable((1, 3, 6, 1, 4, 1, 28507, 1, 1, 2, 2), )
if mibBuilder.loadTexts: epc8portTable.setStatus('current')
if mibBuilder.loadTexts: epc8portTable.setDescription('list of all EPC Powerports')
epc8portEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28507, 1, 1, 2, 2, 1), ).setIndexNames((0, "GUDEADS-EPC8X-MIB", "epc8PortIndex"))
if mibBuilder.loadTexts: epc8portEntry.setStatus('current')
if mibBuilder.loadTexts: epc8portEntry.setDescription('An entry containing management information applicable to a particular powerport.')
epc8PortName = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 1, 1, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: epc8PortName.setStatus('current')
if mibBuilder.loadTexts: epc8PortName.setDescription('A textual string containing name of a PowerPort.')
epc8PortState = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 1, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("off", 0), ("on", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: epc8PortState.setStatus('current')
if mibBuilder.loadTexts: epc8PortState.setDescription('current state a PowerPort')
epc8PortStartupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 1, 1, 2, 2, 1, 6), Integer32()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: epc8PortStartupDelay.setStatus('current')
if mibBuilder.loadTexts: epc8PortStartupDelay.setDescription('Delay in sec for startup action')
epc8PortRepowerTime = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 1, 1, 2, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: epc8PortRepowerTime.setStatus('current')
if mibBuilder.loadTexts: epc8PortRepowerTime.setDescription('Delay in sec for repower port after switching off')
epc8PortSwitchCount = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 1, 1, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: epc8PortSwitchCount.setStatus('current')
if mibBuilder.loadTexts: epc8PortSwitchCount.setDescription('The total number of switch actions ocurred on a PowerPort. Does not count switch commands which will not switch the ralay state, so just real relay switches are displayed here.')
epc8TrapIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 28507, 1, 1, 1, 2, 1, 2), IpAddress().clone(hexValue="00000000")).setMaxAccess("readwrite")
if mibBuilder.loadTexts: epc8TrapIPAddr.setStatus('current')
if mibBuilder.loadTexts: epc8TrapIPAddr.setDescription("IP Address specifying one Trap receiver slot. A value of '00000000'H disables this slot.")
epc8Conf = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 1, 3))
epc8Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 1, 3, 1))
epc8Compls = MibIdentifier((1, 3, 6, 1, 4, 1, 28507, 1, 3, 2))
epc8TempEvtSen1 = NotificationType((1, 3, 6, 1, 4, 1, 28507, 1, 0, 9)).setObjects(("GUDEADS-EPC8X-MIB", "epc8TempSensor"))
if mibBuilder.loadTexts: epc8TempEvtSen1.setStatus('current')
if mibBuilder.loadTexts: epc8TempEvtSen1.setDescription('temperature limits exceeded')
epc8TempEvtSen2 = NotificationType((1, 3, 6, 1, 4, 1, 28507, 1, 0, 10)).setObjects(("GUDEADS-EPC8X-MIB", "epc8TempSensor"))
if mibBuilder.loadTexts: epc8TempEvtSen2.setStatus('current')
if mibBuilder.loadTexts: epc8TempEvtSen2.setDescription('temperature limits exceeded')
epc8HygroEvtSen1 = NotificationType((1, 3, 6, 1, 4, 1, 28507, 1, 0, 11)).setObjects(("GUDEADS-EPC8X-MIB", "epc8HygroSensor"))
if mibBuilder.loadTexts: epc8HygroEvtSen1.setStatus('current')
if mibBuilder.loadTexts: epc8HygroEvtSen1.setDescription('hygro limits exceeded')
epc8HygroEvtSen2 = NotificationType((1, 3, 6, 1, 4, 1, 28507, 1, 0, 12)).setObjects(("GUDEADS-EPC8X-MIB", "epc8HygroSensor"))
if mibBuilder.loadTexts: epc8HygroEvtSen2.setStatus('current')
if mibBuilder.loadTexts: epc8HygroEvtSen2.setDescription('hygro limits exceeded')
epc8BasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 28507, 1, 3, 1, 1)).setObjects(("GUDEADS-EPC8X-MIB", "epc8portNumber"), ("GUDEADS-EPC8X-MIB", "epc8PortName"), ("GUDEADS-EPC8X-MIB", "epc8PortState"), ("GUDEADS-EPC8X-MIB", "epc8PortSwitchCount"), ("GUDEADS-EPC8X-MIB", "epc8TrapCtrl"), ("GUDEADS-EPC8X-MIB", "epc8TrapIPAddr"), ("GUDEADS-EPC8X-MIB", "epc8TrapIPPort"), ("GUDEADS-EPC8X-MIB", "epc8PortStartupMode"), ("GUDEADS-EPC8X-MIB", "epc8PortStartupDelay"), ("GUDEADS-EPC8X-MIB", "epc8PortRepowerTime"), ("GUDEADS-EPC8X-MIB", "epc8Irms"), ("GUDEADS-EPC8X-MIB", "epc8TempSensor"), ("GUDEADS-EPC8X-MIB", "epc8HygroSensor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    epc8BasicGroup = epc8BasicGroup.setStatus('current')
if mibBuilder.loadTexts: epc8BasicGroup.setDescription('Basic objects.')
epc8NotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 28507, 1, 3, 1, 2)).setObjects(("GUDEADS-EPC8X-MIB", "epcSwitchEvtPort1"), ("GUDEADS-EPC8X-MIB", "epcSwitchEvtPort2"), ("GUDEADS-EPC8X-MIB", "epcSwitchEvtPort3"), ("GUDEADS-EPC8X-MIB", "epcSwitchEvtPort4"), ("GUDEADS-EPC8X-MIB", "epcSwitchEvtPort5"), ("GUDEADS-EPC8X-MIB", "epcSwitchEvtPort6"), ("GUDEADS-EPC8X-MIB", "epcSwitchEvtPort7"), ("GUDEADS-EPC8X-MIB", "epcSwitchEvtPort8"), ("GUDEADS-EPC8X-MIB", "epc8TempEvtSen1"), ("GUDEADS-EPC8X-MIB", "epc8HygroEvtSen1"), ("GUDEADS-EPC8X-MIB", "epc8TempEvtSen2"), ("GUDEADS-EPC8X-MIB", "epc8HygroEvtSen2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    epc8NotificationGroup = epc8NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: epc8NotificationGroup.setDescription('')
mibBuilder.exportSymbols("GUDEADS-EPC8X-MIB", epc8HygroEvtSen1=epc8HygroEvtSen1, epc8TrapIPTable=epc8TrapIPTable, epc8TrapCtrl=epc8TrapCtrl, epc8SensorIndex=epc8SensorIndex, epc8SNMPaccess=epc8SNMPaccess, epc8PortName=epc8PortName, epc8PortIndex=epc8PortIndex, epcSwitchEvtPort1=epcSwitchEvtPort1, gudeads=gudeads, epc8Compls=epc8Compls, epc8portNumber=epc8portNumber, epc8Irms=epc8Irms, epc8TrapIPPort=epc8TrapIPPort, epc8SensorEntry=epc8SensorEntry, epc8powerports=epc8powerports, epcSwitchEvtPort7=epcSwitchEvtPort7, epc8portTable=epc8portTable, epcSwitchEvtPort5=epcSwitchEvtPort5, epcSwitchEvtPort2=epcSwitchEvtPort2, epc8PortSwitchCount=epc8PortSwitchCount, epc8TrapIPEntry=epc8TrapIPEntry, epc8BasicGroup=epc8BasicGroup, epc8PortState=epc8PortState, epcSwitchEvtPort4=epcSwitchEvtPort4, epc8HygroEvtSen2=epc8HygroEvtSen2, PYSNMP_MODULE_ID=gudeads, epc8Objects=epc8Objects, epcSwitchEvtPort6=epcSwitchEvtPort6, epcSwitchEvtPort3=epcSwitchEvtPort3, epc8TrapIPAddr=epc8TrapIPAddr, epc8Sensors=epc8Sensors, epc8TempSensor=epc8TempSensor, events=events, epc8Groups=epc8Groups, epc8PortStartupDelay=epc8PortStartupDelay, epc8Conf=epc8Conf, epc8TempEvtSen1=epc8TempEvtSen1, epc8NotificationGroup=epc8NotificationGroup, epc8TempEvtSen2=epc8TempEvtSen2, epc8TrapIPIndex=epc8TrapIPIndex, epc8portEntry=epc8portEntry, gadsEPC8=gadsEPC8, epc8SensorTable=epc8SensorTable, epc8PortRepowerTime=epc8PortRepowerTime, epc8PortStartupMode=epc8PortStartupMode, epc8HygroSensor=epc8HygroSensor, epcSwitchEvtPort8=epcSwitchEvtPort8)
