#
# PySNMP MIB module VDSL-LINE-EXT-MCM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/VDSL-LINE-EXT-MCM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:33:34 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
Counter64, TimeTicks, Gauge32, IpAddress, iso, transmission, Integer32, Bits, MibIdentifier, Unsigned32, ObjectIdentity, Counter32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "TimeTicks", "Gauge32", "IpAddress", "iso", "transmission", "Integer32", "Bits", "MibIdentifier", "Unsigned32", "ObjectIdentity", "Counter32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "ModuleIdentity")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
vdslLineConfProfileName, = mibBuilder.importSymbols("VDSL-LINE-MIB", "vdslLineConfProfileName")
vdslExtMCMMIB = ModuleIdentity((1, 3, 6, 1, 2, 1, 10, 229))
vdslExtMCMMIB.setRevisions(('2005-04-28 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: vdslExtMCMMIB.setRevisionsDescriptions(('Initial version, published as RFC 4070.',))
if mibBuilder.loadTexts: vdslExtMCMMIB.setLastUpdated('200504280000Z')
if mibBuilder.loadTexts: vdslExtMCMMIB.setOrganization('ADSLMIB Working Group')
if mibBuilder.loadTexts: vdslExtMCMMIB.setContactInfo('WG-email: adslmib@ietf.org Info: https://www1.ietf.org/mailman/listinfo/adslmib Chair: Mike Sneed Sand Channel Systems Postal: P.O. Box 37324 Raleigh NC 27627-732 Email: sneedmike@hotmail.com Phone: +1 206 600 7022 Co-Chair/Co-editor: Bob Ray PESA Switching Systems, Inc. Postal: 330-A Wynn Drive Huntsville, AL 35805 USA Email: rray@pesa.com Phone: +1 256 726 9200 ext. 142 Co-editor: Menachem Dodge ECI Telecom Ltd. Postal: 30 hasivim St. Petach Tikva 49517, Israel. Email: mbdodge@ieee.org Phone: +972 3 926 8421 ')
if mibBuilder.loadTexts: vdslExtMCMMIB.setDescription('The VDSL-LINE-MIB found in RFC 3728 defines objects for the management of a pair of VDSL transceivers at each end of the VDSL line. The VDSL-LINE-MIB configures and monitors the line code independent parameters (TC layer) of the VDSL line. This MIB module is an optional extension of the VDSL-LINE-MIB and defines objects for configuration and monitoring of the line code specific (LCS) elements (PMD layer) for VDSL lines using MCM coding. The objects in this extension MIB MUST NOT be used for VDSL lines using Single Carrier Modulation (SCM) line coding. If an object in this extension MIB is referenced by a line which does not use MCM, it has no effect on the operation of that line. Naming Conventions: Vtuc -- (VTUC) transceiver at near (Central) end of line Vtur -- (VTUR) transceiver at Remote end of line Vtu -- One of either Vtuc or Vtur Curr -- Current LCS -- Line Code Specific Max -- Maximum PSD -- Power Spectral Density Rx -- Receive Tx -- Transmit Copyright (C) The Internet Society (2005). This version of this MIB module is part of RFC 4070: see the RFC itself for full legal notices.')
vdslLineExtMCMMib = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 229, 1))
vdslLineExtMCMMibObjects = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 229, 1, 1))
vdslLineMCMConfProfileTable = MibTable((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 1), )
if mibBuilder.loadTexts: vdslLineMCMConfProfileTable.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTable.setDescription('This table contains additional information on multiple carrier VDSL lines. One entry in this table reflects a profile defined by a manager which can be used to configure the VDSL line. If an entry in this table is referenced by a line which does not use MCM, it has no effect on the operation of that line. All read-create-objects defined in this table SHOULD be stored persistently.')
vdslLineMCMConfProfileEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 1, 1), ).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"))
if mibBuilder.loadTexts: vdslLineMCMConfProfileEntry.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileEntry.setDescription('Each entry consists of a list of parameters that represents the configuration of a multiple carrier modulation VDSL modem.')
vdslLineMCMConfProfileTxWindowLength = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 255))).setUnits('samples').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxWindowLength.setReference('T1E1.4/2000-013R4')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxWindowLength.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxWindowLength.setDescription('Specifies the length of the transmit window, counted in samples at the sampling rate corresponding to the negotiated value of N.')
vdslLineMCMConfProfileRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 1, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile is activated by setting this object to `active'. When `active' is set, the system will validate the profile. None of the columns in this row may be modified while the row is in the 'active' state. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `notInService') it must first be unreferenced from all associated lines.")
vdslLineMCMConfProfileTxBandTable = MibTable((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2), )
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandTable.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandTable.setDescription('This table contains transmit band descriptor configuration information for a VDSL line. Each entry in this table reflects the configuration for one of possibly many bands with a multiple carrier modulation (MCM) VDSL line. These entries are defined by a manager and can be used to configure the VDSL line. If an entry in this table is referenced by a line which does not use MCM, it has no effect on the operation of that line. All read-create-objects defined in this table SHOULD be stored persistently.')
vdslLineMCMConfProfileTxBandEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1), ).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"), (0, "VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxBandNumber"))
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandEntry.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandEntry.setDescription('Each entry consists of a transmit band descriptor, which is defined by a start and a stop tone index.')
vdslLineMCMConfProfileTxBandNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandNumber.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandNumber.setDescription('The index for this band descriptor entry.')
vdslLineMCMConfProfileTxBandStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandStart.setReference('T1E1.4/2000-013R4')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandStart.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandStart.setDescription('Start tone index for this band.')
vdslLineMCMConfProfileTxBandStop = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandStop.setReference('T1E1.4/2000-013R4')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandStop.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandStop.setDescription('Stop tone index for this band.')
vdslLineMCMConfProfileTxBandRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 2, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandRowStatus.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxBandRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile is activated by setting this object to `active'. When `active' is set, the system will validate the profile. Each entry must be internally consistent, the Stop Tone must be greater than the Start Tone. Each entry must also be externally consistent, all entries indexed by a specific profile must not overlap. Validation of the profile will check both internal and external consistency. None of the columns in this row may be modified while the row is in the 'active' state. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `notInService') it must be first unreferenced from all associated lines.")
vdslLineMCMConfProfileRxBandTable = MibTable((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3), )
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandTable.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandTable.setDescription('This table contains receive band descriptor configuration information for a VDSL line. Each entry in this table reflects the configuration for one of possibly many bands with a multiple carrier modulation (MCM) VDSL line. These entries are defined by a manager and can be used to configure the VDSL line. If an entry in this table is referenced by a line which does not use MCM, it has no effect on the operation of that line. All read-create-objects defined in this table SHOULD be stored persistently.')
vdslLineMCMConfProfileRxBandEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1), ).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"), (0, "VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileRxBandNumber"))
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandEntry.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandEntry.setDescription('Each entry consists of a transmit band descriptor, which is defined by a start and a stop tone index.')
vdslLineMCMConfProfileRxBandNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandNumber.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandNumber.setDescription('The index for this band descriptor entry.')
vdslLineMCMConfProfileRxBandStart = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandStart.setReference('T1E1.4/2000-013R4')
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandStart.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandStart.setDescription('Start tone index for this band.')
vdslLineMCMConfProfileRxBandStop = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandStop.setReference('T1E1.4/2000-013R4')
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandStop.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandStop.setDescription('Stop tone index for this band.')
vdslLineMCMConfProfileRxBandRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandRowStatus.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileRxBandRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile is activated by setting this object to `active'. When `active' is set, the system will validate the profile. Each entry must be internally consistent, the Stop Tone must be greater than the Start Tone. Each entry must also be externally consistent, all entries indexed by a specific profile must not overlap. Validation of the profile will check both internal and external consistency. None of the columns in this row may be modified while the row is in the 'active' state. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `notInService') it must be first unreferenced from all associated lines.")
vdslLineMCMConfProfileTxPSDTable = MibTable((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4), )
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDTable.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDTable.setDescription('This table contains transmit PSD mask descriptor configuration information for a VDSL line. Each entry in this table reflects the configuration for one tone within a multiple carrier modulation (MCM) VDSL line. These entries are defined by a manager and can be used to configure the VDSL line. If an entry in this table is referenced by a line which does not use MCM, it has no effect on the operation of that line. All read-create-objects defined in this table SHOULD be stored persistently.')
vdslLineMCMConfProfileTxPSDEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1), ).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"), (0, "VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxPSDNumber"))
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDEntry.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDEntry.setDescription('Each entry consists of a transmit PSD mask descriptor, which defines the power spectral density (PSD) for a tone.')
vdslLineMCMConfProfileTxPSDNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDNumber.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDNumber.setDescription('The index for this mask descriptor entry.')
vdslLineMCMConfProfileTxPSDTone = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDTone.setReference('T1E1.4/2000-013R4')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDTone.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDTone.setDescription('The tone index for which the PSD is being specified.')
vdslLineMCMConfProfileTxPSDPSD = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1, 3), Unsigned32()).setUnits('0.5dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDPSD.setReference('T1E1.4/2000-013R4')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDPSD.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDPSD.setDescription('Power Spectral Density level in steps of 0.5dBm/Hz with an offset of -140dBm/Hz.')
vdslLineMCMConfProfileTxPSDRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 4, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDRowStatus.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileTxPSDRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile is activated by setting this object to `active'. When `active' is set, the system will validate the profile. None of the columns in this row may be modified while the row is in the 'active' state. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `notInService') it must be first unreferenced from all associated lines.")
vdslLineMCMConfProfileMaxTxPSDTable = MibTable((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5), )
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDTable.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDTable.setDescription('This table contains transmit maximum PSD mask descriptor configuration information for a VDSL line. Each entry in this table reflects the configuration for one tone within a multiple carrier modulation (MCM) VDSL modem. These entries are defined by a manager and can be used to configure the VDSL line. If an entry in this table is referenced by a line which does not use MCM, it has no effect on the operation of that line. All read-create-objects defined in this table SHOULD be stored persistently.')
vdslLineMCMConfProfileMaxTxPSDEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1), ).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"), (0, "VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxTxPSDNumber"))
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDEntry.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDEntry.setDescription('Each entry consists of a transmit PSD mask descriptor, which defines the maximum power spectral density (PSD) for a tone.')
vdslLineMCMConfProfileMaxTxPSDNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDNumber.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDNumber.setDescription('The index for this band descriptor entry.')
vdslLineMCMConfProfileMaxTxPSDTone = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDTone.setReference('T1E1.4/2000-013R4')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDTone.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDTone.setDescription('The tone index for which the PSD is being specified. There must not be multiple rows defined, for a particular profile, with the same value for this field.')
vdslLineMCMConfProfileMaxTxPSDPSD = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1, 3), Unsigned32()).setUnits('0.5dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDPSD.setReference('T1E1.4/2000-013R4')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDPSD.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDPSD.setDescription('Power Spectral Density level in steps of 0.5dBm/Hz with an offset of -140dBm/Hz.')
vdslLineMCMConfProfileMaxTxPSDRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDRowStatus.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxTxPSDRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile is activated by setting this object to `active'. When `active' is set, the system will validate the profile. There must be only one entry in this table for each tone associated with a specific profile. This will be checked during the validation process. None of the columns in this row may be modified while the row is in the 'active' state. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `notInService') it must be first unreferenced from all associated lines.")
vdslLineMCMConfProfileMaxRxPSDTable = MibTable((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6), )
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDTable.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDTable.setDescription('This table contains maximum receive PSD mask descriptor configuration information for a VDSL line. Each entry in this table reflects the configuration for one tone within a multiple carrier modulation (MCM) VDSL modem. These entries are defined by a manager and can be used to configure the VDSL line. If an entry in this table is referenced by a line which does not use MCM, it has no effect on the operation of that line. All read-create-objects defined in this table SHOULD be stored persistently.')
vdslLineMCMConfProfileMaxRxPSDEntry = MibTableRow((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1), ).setIndexNames((0, "VDSL-LINE-MIB", "vdslLineConfProfileName"), (0, "VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxRxPSDNumber"))
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDEntry.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDEntry.setDescription('Each entry consists of a transmit PSD mask descriptor, which defines the power spectral density (PSD) for a tone.')
vdslLineMCMConfProfileMaxRxPSDNumber = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096)))
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDNumber.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDNumber.setDescription('The index for this band descriptor entry.')
vdslLineMCMConfProfileMaxRxPSDTone = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 4096))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDTone.setReference('T1E1.4/2000-013R4')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDTone.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDTone.setDescription('The tone index for which the PSD is being specified. There must not be multiple rows defined, for a particular profile, with the same value for this field.')
vdslLineMCMConfProfileMaxRxPSDPSD = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1, 3), Unsigned32()).setUnits('0.5dBm/Hz').setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDPSD.setReference('T1E1.4/2000-013R4')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDPSD.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDPSD.setDescription('Power Spectral Density level in steps of 0.5dBm/Hz with an offset of -140dBm/Hz.')
vdslLineMCMConfProfileMaxRxPSDRowStatus = MibTableColumn((1, 3, 6, 1, 2, 1, 10, 229, 1, 1, 6, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDRowStatus.setStatus('current')
if mibBuilder.loadTexts: vdslLineMCMConfProfileMaxRxPSDRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A profile is activated by setting this object to `active'. When `active' is set, the system will validate the profile. There must be only one entry in this table for each tone associated with a specific profile. This will be checked during the validation process. None of the columns in this row may be modified while the row is in the 'active' state. Before a profile can be deleted or taken out of service, (by setting this object to `destroy' or `notInService') it must be first unreferenced from all associated lines.")
vdslLineExtMCMConformance = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 229, 1, 2))
vdslLineExtMCMGroups = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 229, 1, 2, 1))
vdslLineExtMCMCompliances = MibIdentifier((1, 3, 6, 1, 2, 1, 10, 229, 1, 2, 2))
vdslLineExtMCMMibCompliance = ModuleCompliance((1, 3, 6, 1, 2, 1, 10, 229, 1, 2, 2, 1)).setObjects(("VDSL-LINE-EXT-MCM-MIB", "vdslLineExtMCMGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vdslLineExtMCMMibCompliance = vdslLineExtMCMMibCompliance.setStatus('current')
if mibBuilder.loadTexts: vdslLineExtMCMMibCompliance.setDescription('The compliance statement for SNMP entities which manage VDSL interfaces.')
vdslLineExtMCMGroup = ObjectGroup((1, 3, 6, 1, 2, 1, 10, 229, 1, 2, 1, 1)).setObjects(("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxWindowLength"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileRowStatus"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxBandStart"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxBandStop"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxBandRowStatus"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileRxBandStart"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileRxBandStop"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileRxBandRowStatus"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxPSDTone"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxPSDPSD"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileTxPSDRowStatus"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxTxPSDTone"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxTxPSDPSD"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxTxPSDRowStatus"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxRxPSDTone"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxRxPSDPSD"), ("VDSL-LINE-EXT-MCM-MIB", "vdslLineMCMConfProfileMaxRxPSDRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    vdslLineExtMCMGroup = vdslLineExtMCMGroup.setStatus('current')
if mibBuilder.loadTexts: vdslLineExtMCMGroup.setDescription('A collection of objects providing configuration information for a VDSL line based upon multiple carrier modulation modem.')
mibBuilder.exportSymbols("VDSL-LINE-EXT-MCM-MIB", vdslLineMCMConfProfileMaxRxPSDEntry=vdslLineMCMConfProfileMaxRxPSDEntry, vdslLineMCMConfProfileEntry=vdslLineMCMConfProfileEntry, vdslLineMCMConfProfileTxBandTable=vdslLineMCMConfProfileTxBandTable, vdslLineMCMConfProfileTxPSDRowStatus=vdslLineMCMConfProfileTxPSDRowStatus, vdslLineExtMCMGroup=vdslLineExtMCMGroup, vdslLineMCMConfProfileRxBandTable=vdslLineMCMConfProfileRxBandTable, vdslLineExtMCMMibCompliance=vdslLineExtMCMMibCompliance, vdslLineMCMConfProfileRxBandNumber=vdslLineMCMConfProfileRxBandNumber, vdslLineMCMConfProfileMaxRxPSDRowStatus=vdslLineMCMConfProfileMaxRxPSDRowStatus, vdslLineMCMConfProfileTxPSDTone=vdslLineMCMConfProfileTxPSDTone, vdslLineMCMConfProfileTxPSDPSD=vdslLineMCMConfProfileTxPSDPSD, vdslExtMCMMIB=vdslExtMCMMIB, vdslLineMCMConfProfileRxBandStart=vdslLineMCMConfProfileRxBandStart, vdslLineMCMConfProfileTxPSDNumber=vdslLineMCMConfProfileTxPSDNumber, PYSNMP_MODULE_ID=vdslExtMCMMIB, vdslLineMCMConfProfileTxBandEntry=vdslLineMCMConfProfileTxBandEntry, vdslLineMCMConfProfileMaxTxPSDTable=vdslLineMCMConfProfileMaxTxPSDTable, vdslLineMCMConfProfileTxBandStart=vdslLineMCMConfProfileTxBandStart, vdslLineMCMConfProfileMaxTxPSDNumber=vdslLineMCMConfProfileMaxTxPSDNumber, vdslLineMCMConfProfileRxBandEntry=vdslLineMCMConfProfileRxBandEntry, vdslLineMCMConfProfileTable=vdslLineMCMConfProfileTable, vdslLineMCMConfProfileRxBandRowStatus=vdslLineMCMConfProfileRxBandRowStatus, vdslLineMCMConfProfileRowStatus=vdslLineMCMConfProfileRowStatus, vdslLineExtMCMCompliances=vdslLineExtMCMCompliances, vdslLineMCMConfProfileTxBandRowStatus=vdslLineMCMConfProfileTxBandRowStatus, vdslLineExtMCMMibObjects=vdslLineExtMCMMibObjects, vdslLineMCMConfProfileMaxRxPSDTable=vdslLineMCMConfProfileMaxRxPSDTable, vdslLineMCMConfProfileRxBandStop=vdslLineMCMConfProfileRxBandStop, vdslLineMCMConfProfileTxPSDEntry=vdslLineMCMConfProfileTxPSDEntry, vdslLineMCMConfProfileMaxRxPSDNumber=vdslLineMCMConfProfileMaxRxPSDNumber, vdslLineMCMConfProfileTxBandNumber=vdslLineMCMConfProfileTxBandNumber, vdslLineMCMConfProfileMaxRxPSDTone=vdslLineMCMConfProfileMaxRxPSDTone, vdslLineMCMConfProfileMaxTxPSDEntry=vdslLineMCMConfProfileMaxTxPSDEntry, vdslLineExtMCMMib=vdslLineExtMCMMib, vdslLineMCMConfProfileMaxTxPSDRowStatus=vdslLineMCMConfProfileMaxTxPSDRowStatus, vdslLineMCMConfProfileTxBandStop=vdslLineMCMConfProfileTxBandStop, vdslLineMCMConfProfileMaxRxPSDPSD=vdslLineMCMConfProfileMaxRxPSDPSD, vdslLineMCMConfProfileMaxTxPSDTone=vdslLineMCMConfProfileMaxTxPSDTone, vdslLineMCMConfProfileMaxTxPSDPSD=vdslLineMCMConfProfileMaxTxPSDPSD, vdslLineExtMCMConformance=vdslLineExtMCMConformance, vdslLineMCMConfProfileTxWindowLength=vdslLineMCMConfProfileTxWindowLength, vdslLineExtMCMGroups=vdslLineExtMCMGroups, vdslLineMCMConfProfileTxPSDTable=vdslLineMCMConfProfileTxPSDTable)
