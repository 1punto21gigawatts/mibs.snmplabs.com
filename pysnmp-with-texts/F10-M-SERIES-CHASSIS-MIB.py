#
# PySNMP MIB module F10-M-SERIES-CHASSIS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/F10-M-SERIES-CHASSIS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:11:27 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint")
chAlarmVarInteger, chAlarmVarSlot, chAlarmVarString, chAlarmVarPort = mibBuilder.importSymbols("F10-CHASSIS-MIB", "chAlarmVarInteger", "chAlarmVarSlot", "chAlarmVarString", "chAlarmVarPort")
f10Mgmt, = mibBuilder.importSymbols("FORCE10-SMI", "f10Mgmt")
F10ProcessorModuleType, F10MfgDate, F10ChassisType, F10SwDate, F10HundredthdB, F10MSeriesPortType = mibBuilder.importSymbols("FORCE10-TC", "F10ProcessorModuleType", "F10MfgDate", "F10ChassisType", "F10SwDate", "F10HundredthdB", "F10MSeriesPortType")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
TimeTicks, Counter64, iso, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Unsigned32, Gauge32, MibIdentifier, NotificationType, Integer32, ModuleIdentity, ObjectIdentity, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Counter64", "iso", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Unsigned32", "Gauge32", "MibIdentifier", "NotificationType", "Integer32", "ModuleIdentity", "ObjectIdentity", "Counter32")
DateAndTime, MacAddress, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "DateAndTime", "MacAddress", "RowStatus", "TextualConvention", "DisplayString")
f10MSerChassisMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 6027, 3, 19))
f10MSerChassisMib.setRevisions(('2012-11-02 12:00', '2012-12-03 12:00', '2012-03-27 12:00', '2007-10-03 12:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: f10MSerChassisMib.setRevisionsDescriptions(('Added the new trap for notifying stack role changes.', 'Adding new objects - chSysSwInPartitionAImgVers and chSysSwInPartitionBImgVers', 'Adding new objects - Dell PPID, Revision, Service Tag, Express Service Code.', 'Initial version of this mib.',))
if mibBuilder.loadTexts: f10MSerChassisMib.setLastUpdated('201203271200Z')
if mibBuilder.loadTexts: f10MSerChassisMib.setOrganization('Dell Inc.')
if mibBuilder.loadTexts: f10MSerChassisMib.setContactInfo('http://www.force10networks.com/support')
if mibBuilder.loadTexts: f10MSerChassisMib.setDescription('Dell Networking OS M-Series Chassis MIB. ')
f10MSerChassisObject = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1))
chObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 1))
chSysObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2))
chAlarmObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4))
class CodeType(TextualConvention, Unsigned32):
    description = 'The code type value for a given unit, displayed in hexadecimal.'
    status = 'current'
    displayHint = 'x'

class UnitType(TextualConvention, Unsigned32):
    description = 'The unit type value for a given unit, displayed in hexadecimal.'
    status = 'current'
    displayHint = 'x'

chNumStackUnits = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumStackUnits.setStatus('current')
if mibBuilder.loadTexts: chNumStackUnits.setDescription('The total number of stack units configured on the chassis.')
chNumMaxStackableUnits = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chNumMaxStackableUnits.setStatus('current')
if mibBuilder.loadTexts: chNumMaxStackableUnits.setDescription('Indicates the maximum allowed Unit Number configurable on the chassis.')
chStackUnitIndexNext = MibScalar((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 6), ))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitIndexNext.setStatus('current')
if mibBuilder.loadTexts: chStackUnitIndexNext.setDescription('This object contains the next appropriate value to be used for chStackUnitIndex when creating entries in the chStackUnitTable. The value 0 indicates that no unassigned entries are available. To obtain the chStackUnitIndexNext value for a new entry, the manager must first issue a management protocol retrieval operation to obtain the current value of this object. The agent should modify the value to reflect the next unassigned number after each retrieval operation. After a manager retrieves a value the agent will determine when this index value will be made available for reuse. Note that this object is not the unit number assigned by the management unit. The max number of stackable units allowed on this chassis is found from the object chNumMaxStackableUnits.')
chStackUnitTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1), )
if mibBuilder.loadTexts: chStackUnitTable.setStatus('current')
if mibBuilder.loadTexts: chStackUnitTable.setDescription('A list of stack units configured in the chassis. The StackUnit table contains the management information of each stacked unit in the chassis. ')
chStackUnitEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitIndex"))
if mibBuilder.loadTexts: chStackUnitEntry.setStatus('current')
if mibBuilder.loadTexts: chStackUnitEntry.setDescription('A list of units entries containing information for each stacked unit.')
chStackUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: chStackUnitIndex.setStatus('current')
if mibBuilder.loadTexts: chStackUnitIndex.setDescription('The unique index for this entry. Refer to the object chStackUnitIndexNext.')
chStackUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 6), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chStackUnitNumber.setStatus('current')
if mibBuilder.loadTexts: chStackUnitNumber.setDescription('The unit number associated with this unit. The unit number can be manually assigned to stack members. Note that the unit number assignment is based on the following factors: - if the unit number is requested here, but another unit already uses that number, the unit changes its configured unit number to the lowest unassigned unit number. - if the unit number is 0, i.e. unassigned, then the unit sets its configured unit number to the lowest unassigned unit number. - if the unit number is configured and no other device uses the unit number, then the unit starts using the configured unit number. - if a unit detects that the maximum number of units already exist, the unit sets its unit number to 0, i.e. unassigned, and stays in the Initialization state. - The max number of stackable units allowed on this chassis is found from the object chNumMaxStackableUnits.')
chStackUnitSID = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chStackUnitSID.setStatus('deprecated')
if mibBuilder.loadTexts: chStackUnitSID.setDescription('The unique switch type index (SID).')
chStackUnitMgmtStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("mgmtUnit", 1), ("standbyUnit", 2), ("stackUnit", 3), ("unassigned", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chStackUnitMgmtStatus.setStatus('current')
if mibBuilder.loadTexts: chStackUnitMgmtStatus.setDescription('Indicates whether the unit is a Management Unit, a Stack Unit, or unassigned. Setting this object to mgmtUnit(1) initiates transfer of the management functionality to the specified stack unit. Object values stackUnit(2) and unassigned(3) cannot be set.')
chStackUnitHwMgmtPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("disabled", 0), ("unsassigned", 1), ("assigned", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitHwMgmtPreference.setStatus('current')
if mibBuilder.loadTexts: chStackUnitHwMgmtPreference.setDescription('indicates whether the unit is capable of becoming a management unit. if it is unsigned, this unit can be a management unit.')
chStackUnitAdmMgmtPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(1, 15), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chStackUnitAdmMgmtPreference.setStatus('current')
if mibBuilder.loadTexts: chStackUnitAdmMgmtPreference.setDescription('indicates how likely this unit is to be chosen as the management unit. A value of 0 indicates a disabled or unassigned preference.')
chStackUnitModelID = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitModelID.setStatus('current')
if mibBuilder.loadTexts: chStackUnitModelID.setDescription('The plugged-in model ID for this unit.')
chStackUnitStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ok", 1), ("unsupported", 2), ("codeMismatch", 3), ("configMismatch", 4), ("unitDown", 5), ("notPresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitStatus.setStatus('current')
if mibBuilder.loadTexts: chStackUnitStatus.setDescription('The status of this unit.')
chStackUnitDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chStackUnitDescription.setStatus('current')
if mibBuilder.loadTexts: chStackUnitDescription.setDescription('The description of this unit.')
chStackUnitCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitCodeVersion.setStatus('current')
if mibBuilder.loadTexts: chStackUnitCodeVersion.setDescription('Current code version of this unit.')
chStackUnitCodeVersionInFlash = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitCodeVersionInFlash.setStatus('current')
if mibBuilder.loadTexts: chStackUnitCodeVersionInFlash.setDescription("Code version of this unit's flash.")
chStackUnitSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitSerialNumber.setStatus('current')
if mibBuilder.loadTexts: chStackUnitSerialNumber.setDescription("The unit's serial number.")
chStackUnitUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 13), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitUpTime.setStatus('current')
if mibBuilder.loadTexts: chStackUnitUpTime.setDescription('The system up time of the unit.')
chStackUnitTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 14), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitTemp.setStatus('current')
if mibBuilder.loadTexts: chStackUnitTemp.setDescription('The temperature of the unit.')
chStackUnitType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 15), UnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitType.setStatus('current')
if mibBuilder.loadTexts: chStackUnitType.setDescription('The Unit Type identifier for this unit.')
chStackUnitSysType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 16), F10ChassisType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitSysType.setStatus('current')
if mibBuilder.loadTexts: chStackUnitSysType.setDescription('The Dell Networking OS system type for this unit.')
chStackUnitVendorId = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 17), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitVendorId.setStatus('current')
if mibBuilder.loadTexts: chStackUnitVendorId.setDescription('The vendor id that manufactured this unit.')
chStackUnitMfgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 18), F10MfgDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitMfgDate.setStatus('current')
if mibBuilder.loadTexts: chStackUnitMfgDate.setDescription('The date the unit is manufactured.')
chStackUnitMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 19), MacAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitMacAddress.setStatus('current')
if mibBuilder.loadTexts: chStackUnitMacAddress.setDescription('A 6-octet MAC Address assigned to this unit.')
chStackUnitPartNum = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitPartNum.setStatus('current')
if mibBuilder.loadTexts: chStackUnitPartNum.setDescription('The unit part number')
chStackUnitProductRev = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 21), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitProductRev.setStatus('current')
if mibBuilder.loadTexts: chStackUnitProductRev.setDescription("The unit manufacturer's product revision")
chStackUnitProductOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitProductOrder.setStatus('current')
if mibBuilder.loadTexts: chStackUnitProductOrder.setDescription('The product order number for this unit.')
chStackUnitCountryCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(2, 2)).setFixedLength(2)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitCountryCode.setStatus('current')
if mibBuilder.loadTexts: chStackUnitCountryCode.setDescription("The unit manufacturer's country code")
chStackUnitNum10GigEtherPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitNum10GigEtherPorts.setStatus('current')
if mibBuilder.loadTexts: chStackUnitNum10GigEtherPorts.setDescription('The number of 10G Ethernet/802.3 interfaces in this unit.')
chStackUnitNumGigEtherPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitNumGigEtherPorts.setStatus('current')
if mibBuilder.loadTexts: chStackUnitNumGigEtherPorts.setDescription('The number of 1G Ethernet/802.3 interfaces in this unit.')
chStackUnitNumFastEtherPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitNumFastEtherPorts.setStatus('current')
if mibBuilder.loadTexts: chStackUnitNumFastEtherPorts.setDescription('The number of 10/100 Ethernet/802.3 interfaces in this unit.')
chStackUnitNumFanTrays = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitNumFanTrays.setStatus('current')
if mibBuilder.loadTexts: chStackUnitNumFanTrays.setDescription('The number of fan trays on the unit.')
chStackUnitNumPowerSupplies = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitNumPowerSupplies.setStatus('current')
if mibBuilder.loadTexts: chStackUnitNumPowerSupplies.setDescription('The number of power supplies available to the unit.')
chStackUnitNumPluggableModules = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitNumPluggableModules.setStatus('current')
if mibBuilder.loadTexts: chStackUnitNumPluggableModules.setDescription('The number of pluggable modules in the stack.')
chStackUnitNum40GigEtherPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitNum40GigEtherPorts.setStatus('current')
if mibBuilder.loadTexts: chStackUnitNum40GigEtherPorts.setDescription('The number of 40G Ethernet/802.3 interfaces in this unit.')
chStackUnitRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 31), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: chStackUnitRowStatus.setStatus('current')
if mibBuilder.loadTexts: chStackUnitRowStatus.setDescription('Creation of new instances requires the object chStackUnitIndexNext to be retreived to create an entry. active(1) - This instance is active. createAndGo(4) - Creates a new instance. destroy(6) - Removes this instance.')
chStackUnitPiecePartID = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 24))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitPiecePartID.setStatus('current')
if mibBuilder.loadTexts: chStackUnitPiecePartID.setDescription("The unit's piece part id.")
chStackUnitPPIDRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitPPIDRevision.setStatus('current')
if mibBuilder.loadTexts: chStackUnitPPIDRevision.setDescription("The unit's PPID revision.")
chStackUnitServiceTag = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 34), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitServiceTag.setStatus('current')
if mibBuilder.loadTexts: chStackUnitServiceTag.setDescription("The unit's service tag.")
chStackUnitExpressServiceCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 1, 1, 35), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 14))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitExpressServiceCode.setStatus('current')
if mibBuilder.loadTexts: chStackUnitExpressServiceCode.setDescription("The unit's express service code.")
chSysPowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 2), )
if mibBuilder.loadTexts: chSysPowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyTable.setDescription('A list of power supply resident in the M-series chassis.')
chSysPowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 2, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"), (0, "F10-M-SERIES-CHASSIS-MIB", "chSysPowerSupplyIndex"))
if mibBuilder.loadTexts: chSysPowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyEntry.setDescription('A power supply entry containing objects for a particular power supply.')
chSysPowerSupplyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyIndex.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyIndex.setDescription('The unique index of the power supply.')
chSysPowerSupplyOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("normal", 1), ("warning", 2), ("critical", 3), ("shutdown", 4), ("notPresent", 5), ("notFunctioning", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyOperStatus.setDescription('The status of the power supply.')
chSysPowerSupplyType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("unknown", 1), ("ac", 2), ("dc", 3), ("externalPowerSupply", 4), ("internalRedundant", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPowerSupplyType.setStatus('current')
if mibBuilder.loadTexts: chSysPowerSupplyType.setDescription('The type of the power supply.')
chSysFanTrayTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 3), )
if mibBuilder.loadTexts: chSysFanTrayTable.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayTable.setDescription('A list of fan tray resident in the M-series chassis.')
chSysFanTrayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 3, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"), (0, "F10-M-SERIES-CHASSIS-MIB", "chSysFanTrayIndex"))
if mibBuilder.loadTexts: chSysFanTrayEntry.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayEntry.setDescription('A fan entry containing objects for a particular fan tray.')
chSysFanTrayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayIndex.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayIndex.setDescription('The unique index of the fan tray.')
chSysFanTrayOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysFanTrayOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysFanTrayOperStatus.setDescription('The status of the fan tray.')
chSysPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4), )
if mibBuilder.loadTexts: chSysPortTable.setStatus('current')
if mibBuilder.loadTexts: chSysPortTable.setDescription('A list of ports in the M-series chassis.')
chSysPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"), (0, "F10-M-SERIES-CHASSIS-MIB", "chSysPortIndex"))
if mibBuilder.loadTexts: chSysPortEntry.setStatus('current')
if mibBuilder.loadTexts: chSysPortEntry.setDescription('A port entry containing objects for a particular port.')
chSysPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortIndex.setStatus('current')
if mibBuilder.loadTexts: chSysPortIndex.setDescription('A unique index for each slot within the unit. ')
chSysPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 2), F10MSeriesPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortType.setStatus('current')
if mibBuilder.loadTexts: chSysPortType.setDescription('The type of port in the unit.')
chSysPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortAdminStatus.setStatus('current')
if mibBuilder.loadTexts: chSysPortAdminStatus.setDescription('The admin status of the card. The port admin status is Up if the user has configured it to be up otherwise, the admin status is Down.')
chSysPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("ready", 1), ("portDown", 2), ("portProblem", 3), ("cardProblem", 4), ("cardDown", 5), ("notPresent", 6)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortOperStatus.setStatus('current')
if mibBuilder.loadTexts: chSysPortOperStatus.setDescription("The operational status provides further condition of the card. If the chSysPortAdminStatus is 'up', the valid state is 'ready' - the card is present and ready and the chSysPortAdminStatus status is 'up'. 'portDown' - the port is down or not enabled. 'portProblem' - port hardware problems. 'cardProblem' - not used. Same as cardDown. 'cardDown' - the card is downed. 'notPresent' - the card is not present.")
chSysPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: chSysPortIfIndex.setDescription('The index of ifIndex in the Interface Mib. This index can link to the ifEntry to get this interface/port information')
chSysPortXfpRecvPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 6), F10HundredthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortXfpRecvPower.setStatus('current')
if mibBuilder.loadTexts: chSysPortXfpRecvPower.setDescription(' The power signal strength (dB) received for 1G/10G/40G Ethernet/802.3 interface. ')
chSysPortXfpRecvTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortXfpRecvTemp.setStatus('current')
if mibBuilder.loadTexts: chSysPortXfpRecvTemp.setDescription('The temperature value received for the optics.')
chSysPortXfpTxPower = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 4, 1, 8), F10HundredthdB()).setUnits('dB').setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysPortXfpTxPower.setStatus('current')
if mibBuilder.loadTexts: chSysPortXfpTxPower.setDescription(' The power signal strength (dB) Transmitted for 1G/10G/40G Ethernet/802.3 interface. ')
chSysStackPortTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5), )
if mibBuilder.loadTexts: chSysStackPortTable.setStatus('current')
if mibBuilder.loadTexts: chSysStackPortTable.setDescription('A list of stack ports in the M-series chassis.')
chSysStackPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"), (0, "F10-M-SERIES-CHASSIS-MIB", "chSysStackPortIndex"))
if mibBuilder.loadTexts: chSysStackPortEntry.setStatus('current')
if mibBuilder.loadTexts: chSysStackPortEntry.setDescription('A stack port entry containing objects for a particular stack port.')
chSysStackPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortIndex.setStatus('current')
if mibBuilder.loadTexts: chSysStackPortIndex.setDescription('The index for each stack port within the unit. 1 - stack port A, 2 - stack port B ')
chSysStackPortConfiguredMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stack", 1), ("ethernet", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortConfiguredMode.setStatus('current')
if mibBuilder.loadTexts: chSysStackPortConfiguredMode.setDescription('Configured mode of the Stack Port. Changes to this value happen only after a reset of the unit.')
chSysStackPortRunningMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("stack", 1), ("ethernet", 2), ("unknown", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortRunningMode.setStatus('current')
if mibBuilder.loadTexts: chSysStackPortRunningMode.setDescription('Operational mode of the Stack Port.')
chSysStackPortLinkStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("up", 1), ("down", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortLinkStatus.setStatus('current')
if mibBuilder.loadTexts: chSysStackPortLinkStatus.setDescription('Link status of the Stack Port. Ports in ethernet mode will return a status of down(2).')
chSysStackPortLinkSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortLinkSpeed.setStatus('current')
if mibBuilder.loadTexts: chSysStackPortLinkSpeed.setDescription('Speed of the Stack Port measured in Gb/s. Ports in ethernet mode will return a speed of 0.')
chSysStackPortRxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortRxDataRate.setStatus('current')
if mibBuilder.loadTexts: chSysStackPortRxDataRate.setDescription('Received Data rate on the stacking port. Measured in Mb/s. Ports in ethernet mode will return 0.')
chSysStackPortRxErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortRxErrorRate.setStatus('current')
if mibBuilder.loadTexts: chSysStackPortRxErrorRate.setDescription('Received error rate on the stack port. Measured in Errors per Second. Ports in ethernet mode will return 0.')
chSysStackPortRxTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortRxTotalErrors.setStatus('current')
if mibBuilder.loadTexts: chSysStackPortRxTotalErrors.setDescription('Received number of errors since boot. The counter may wrap. Ports in ethernet mode will return 0.')
chSysStackPortTxDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortTxDataRate.setStatus('current')
if mibBuilder.loadTexts: chSysStackPortTxDataRate.setDescription('Transmitted Data rate on the stacking port. Measured in Mb/s. Ports in ethernet mode will return 0.')
chSysStackPortTxErrorRate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortTxErrorRate.setStatus('current')
if mibBuilder.loadTexts: chSysStackPortTxErrorRate.setDescription('Transmitted error rate on the stack port. Measured in Errors per Second. Ports in ethernet mode will return 0.')
chSysStackPortTxTotalErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 5, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysStackPortTxTotalErrors.setStatus('current')
if mibBuilder.loadTexts: chSysStackPortTxTotalErrors.setDescription('Transmitted number of errors since boot. The counter may wrap. Ports in ethernet mode will return 0.')
chSysProcessorTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 6), )
if mibBuilder.loadTexts: chSysProcessorTable.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorTable.setDescription('A list of Processors resident in the M-series chassis.')
chSysProcessorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 6, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"))
if mibBuilder.loadTexts: chSysProcessorEntry.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorEntry.setDescription('A list of Processor entries.')
chSysProcessorModule = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 6, 1, 1), F10ProcessorModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorModule.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorModule.setDescription('The type of module running on the Processor.')
chSysProcessorUpTime = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 6, 1, 2), TimeTicks()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorUpTime.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorUpTime.setDescription('The SysUpTime for this Processor.')
chSysProcessorNvramSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 6, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorNvramSize.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorNvramSize.setDescription('Total Non-volatile RAM in Kbytes.')
chSysProcessorMemSize = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysProcessorMemSize.setStatus('current')
if mibBuilder.loadTexts: chSysProcessorMemSize.setDescription('The size of the RAM in Mb.')
chSysSwModuleTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7), )
if mibBuilder.loadTexts: chSysSwModuleTable.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleTable.setDescription('A list of software version information in a processor.')
chSysSwModuleEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"))
if mibBuilder.loadTexts: chSysSwModuleEntry.setStatus('current')
if mibBuilder.loadTexts: chSysSwModuleEntry.setDescription('A software module entry containing version number information for a particular processor.')
chSysSwRuntimeImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwRuntimeImgVersion.setStatus('current')
if mibBuilder.loadTexts: chSysSwRuntimeImgVersion.setDescription("This variable indicates the software module version that is currently running on the processor. The software release version is in the format as follow: <major version>.<minor version>.<minor version>...... '1.2' indicate major version of 1 and minor release of 2.")
chSysSwRuntimeImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 2), F10SwDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwRuntimeImgDate.setStatus('current')
if mibBuilder.loadTexts: chSysSwRuntimeImgDate.setDescription('The release date of this software module.')
chSysSwCurrentBootImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgVersion.setStatus('current')
if mibBuilder.loadTexts: chSysSwCurrentBootImgVersion.setDescription("This provides the uboot image version that is currently running and it is in the format as follow: <major version>.<minor version>.<minor version>...... '1.2' indicate major version of 1 and minor release of 2.")
chSysSwCurrentBootImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 4), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgDate.setStatus('current')
if mibBuilder.loadTexts: chSysSwCurrentBootImgDate.setDescription('The release date of this software module If the CPU is reset, the software module running date (chSysSwModuleRunningDate) will change to this current date.')
chSysSwCurrentBootImgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImgStatus.setStatus('current')
if mibBuilder.loadTexts: chSysSwCurrentBootImgStatus.setDescription('The status of current boot image.')
chSysSwBackupBootImgVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgVersion.setStatus('current')
if mibBuilder.loadTexts: chSysSwBackupBootImgVersion.setDescription("This provides the uboot image version that would be the backup image and it is in the format as follow: <major version>.<minor version>.<minor version>...... '1.2' indicate major version of 1 and minor release of 2.")
chSysSwBackupBootImgDate = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 7), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgDate.setStatus('current')
if mibBuilder.loadTexts: chSysSwBackupBootImgDate.setDescription('The backup boot image released date.')
chSysSwBackupBootImgStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ok", 1), ("failed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwBackupBootImgStatus.setStatus('current')
if mibBuilder.loadTexts: chSysSwBackupBootImgStatus.setDescription('The status of the backup boot image.')
chSysSwNextRebootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootImage-A", 1), ("bootImage-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwNextRebootImage.setStatus('current')
if mibBuilder.loadTexts: chSysSwNextRebootImage.setDescription('The boot flash image selection. When the chassis is rebooted, this is the boot image to use.')
chSysSwCurrentBootImage = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("bootImage-A", 1), ("bootImage-B", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwCurrentBootImage.setStatus('current')
if mibBuilder.loadTexts: chSysSwCurrentBootImage.setDescription('The current boot image. This is the boot image described by the chSysSwCurrentBootImgVersion, chSysSwCurrentBootImgDate, and chSysSwCurrentBootImgStatus objects. ')
chSysSwInPartitionAImgVers = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwInPartitionAImgVers.setStatus('current')
if mibBuilder.loadTexts: chSysSwInPartitionAImgVers.setDescription('This provides the Dell Networking OS system image version that is stored in partition A: and The version string has Major and Minor release numbers. It also denotes if the release is Maintenance, Technical, Patch, Beta, or Generally Available')
chSysSwInPartitionBImgVers = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 7, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysSwInPartitionBImgVers.setStatus('current')
if mibBuilder.loadTexts: chSysSwInPartitionBImgVers.setDescription('This provides the Dell Networking OS system image version that is stored in partition B: and The version string has Major and Minor release numbers. It also denotes if the release is Maintenance, Technical, Patch, Beta, or Generally Available')
chStackUnitUtilTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8), )
if mibBuilder.loadTexts: chStackUnitUtilTable.setStatus('current')
if mibBuilder.loadTexts: chStackUnitUtilTable.setDescription('A table listing the cpu and memory utilization in the stack unit.')
chStackUnitUtilEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"))
if mibBuilder.loadTexts: chStackUnitUtilEntry.setStatus('current')
if mibBuilder.loadTexts: chStackUnitUtilEntry.setDescription('A row in each processor cpu and mmory utilization')
chStackUnitCpuType = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8, 1, 1), F10ProcessorModuleType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitCpuType.setStatus('current')
if mibBuilder.loadTexts: chStackUnitCpuType.setDescription('The type of module running on the Processor.')
chStackUnitCpuUtil5Sec = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8, 1, 2), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitCpuUtil5Sec.setStatus('current')
if mibBuilder.loadTexts: chStackUnitCpuUtil5Sec.setDescription('CPU utilization in percentage for last 5 seconds.')
chStackUnitCpuUtil1Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8, 1, 3), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitCpuUtil1Min.setStatus('current')
if mibBuilder.loadTexts: chStackUnitCpuUtil1Min.setDescription('CPU utilization in percentage for last 1 minute.')
chStackUnitCpuUtil5Min = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8, 1, 4), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitCpuUtil5Min.setStatus('current')
if mibBuilder.loadTexts: chStackUnitCpuUtil5Min.setDescription('CPU utilization in percentage for last 5 minutes.')
chStackUnitMemUsageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8, 1, 5), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitMemUsageUtil.setStatus('current')
if mibBuilder.loadTexts: chStackUnitMemUsageUtil.setDescription('Total memory usage in percentage.')
chStackUnitFlashUsageUtil = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 8, 1, 6), Gauge32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: chStackUnitFlashUsageUtil.setStatus('current')
if mibBuilder.loadTexts: chStackUnitFlashUsageUtil.setDescription('Total flash usage in percentage.')
chSysSwCoresTable = MibTable((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 9), )
if mibBuilder.loadTexts: chSysSwCoresTable.setStatus('current')
if mibBuilder.loadTexts: chSysSwCoresTable.setDescription('A table containing information about the software cores that have been generated as a result of system failures.')
chSysCoresEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 9, 1), ).setIndexNames((0, "F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"), (0, "F10-M-SERIES-CHASSIS-MIB", "chSysCoresInstance"))
if mibBuilder.loadTexts: chSysCoresEntry.setStatus('current')
if mibBuilder.loadTexts: chSysCoresEntry.setDescription('A row in the software core table representing information about a core that has been generated.')
chSysCoresInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresInstance.setStatus('current')
if mibBuilder.loadTexts: chSysCoresInstance.setDescription('A unique index assigned to the cores stored on this stack unit.')
chSysCoresFileName = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 9, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresFileName.setStatus('current')
if mibBuilder.loadTexts: chSysCoresFileName.setDescription('The name of the core file including the path.')
chSysCoresTimeCreated = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 9, 1, 3), F10SwDate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresTimeCreated.setStatus('current')
if mibBuilder.loadTexts: chSysCoresTimeCreated.setDescription('The time at which the core file was created.')
chSysCoresStackUnitNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 9, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 12))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresStackUnitNumber.setStatus('current')
if mibBuilder.loadTexts: chSysCoresStackUnitNumber.setDescription('The stack unit member which generated the core.')
chSysCoresProcess = MibTableColumn((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 2, 9, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chSysCoresProcess.setStatus('current')
if mibBuilder.loadTexts: chSysCoresProcess.setDescription('The name of the process which generated the core.')
chAlarmMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0))
chAlarmStackUnitDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 1)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmStackUnitDown.setStatus('current')
if mibBuilder.loadTexts: chAlarmStackUnitDown.setDescription('The driver/agent generate this trap when a stack unit operational status is down.')
chAlarmStackUnitUp = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 2)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmStackUnitUp.setStatus('current')
if mibBuilder.loadTexts: chAlarmStackUnitUp.setDescription('The driver/agent generate this trap when a stack unit operational status is up.')
chAlarmStackUnitReset = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 3)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmStackUnitReset.setStatus('current')
if mibBuilder.loadTexts: chAlarmStackUnitReset.setDescription('The driver/agent generate this trap when a stack unit is reset.')
chAlarmStackUnitOffline = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 4)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmStackUnitOffline.setStatus('current')
if mibBuilder.loadTexts: chAlarmStackUnitOffline.setDescription('The driver/agent generate this trap when a stack unit is set to offline.')
chAlarmStackUnitCodeMismatch = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 5)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmStackUnitCodeMismatch.setStatus('current')
if mibBuilder.loadTexts: chAlarmStackUnitCodeMismatch.setDescription('The driver/agent generate this trap when a stack unit is not the same code as a management stack.')
chAlarmStackPortLinkUp = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 6)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmStackPortLinkUp.setStatus('current')
if mibBuilder.loadTexts: chAlarmStackPortLinkUp.setDescription('The driver/agent generate this trap when a stack port is connected to annother stack member.')
chAlarmStackPortLinkDown = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 7)).setObjects(("F10-CHASSIS-MIB", "chAlarmVarInteger"), ("F10-CHASSIS-MIB", "chAlarmVarString"), ("F10-CHASSIS-MIB", "chAlarmVarSlot"), ("F10-CHASSIS-MIB", "chAlarmVarPort"))
if mibBuilder.loadTexts: chAlarmStackPortLinkDown.setStatus('current')
if mibBuilder.loadTexts: chAlarmStackPortLinkDown.setDescription('The driver/agent generate this trap when a stack port is disconnected from annother stack member.')
chAlarmStackUnitRoleChanged = NotificationType((1, 3, 6, 1, 4, 1, 6027, 3, 19, 1, 4, 0, 8)).setObjects(("F10-M-SERIES-CHASSIS-MIB", "chStackUnitMgmtStatus"), ("F10-CHASSIS-MIB", "chAlarmVarString"))
if mibBuilder.loadTexts: chAlarmStackUnitRoleChanged.setStatus('current')
if mibBuilder.loadTexts: chAlarmStackUnitRoleChanged.setDescription('The driver/agent generate this trap when a stack unit role is changed.')
f10mSeriesMibConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 2))
f10mSeriesMibCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 2, 1))
f10mSeriesMibGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 6027, 3, 19, 2, 2))
f10mSeriesMibCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 6027, 3, 19, 2, 1, 1)).setObjects(("F10-M-SERIES-CHASSIS-MIB", "f10mSeriesComponentGroup"), ("F10-M-SERIES-CHASSIS-MIB", "f10mSeriesSystemGroup"), ("F10-M-SERIES-CHASSIS-MIB", "f10mSeriesNotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10mSeriesMibCompliance = f10mSeriesMibCompliance.setStatus('current')
if mibBuilder.loadTexts: f10mSeriesMibCompliance.setDescription('The compliance statement for Dell product which implement the Dell Networking OS M-Series Chassis MIB.')
f10mSeriesComponentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 19, 2, 2, 1)).setObjects(("F10-M-SERIES-CHASSIS-MIB", "chNumStackUnits"), ("F10-M-SERIES-CHASSIS-MIB", "chNumMaxStackableUnits"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitIndexNext"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10mSeriesComponentGroup = f10mSeriesComponentGroup.setStatus('current')
if mibBuilder.loadTexts: f10mSeriesComponentGroup.setDescription('A collection of objects providing the overall M-series chassis information.')
f10mSeriesSystemGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 6027, 3, 19, 2, 2, 2)).setObjects(("F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumber"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitSID"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitMgmtStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitHwMgmtPreference"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitAdmMgmtPreference"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitModelID"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitDescription"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitCodeVersion"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitCodeVersionInFlash"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitSerialNumber"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitUpTime"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitTemp"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitType"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitSysType"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitVendorId"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitMfgDate"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitMacAddress"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitPartNum"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitProductRev"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitProductOrder"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitCountryCode"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitNum10GigEtherPorts"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumGigEtherPorts"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumFastEtherPorts"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumFanTrays"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumPowerSupplies"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitNumPluggableModules"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitRowStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitPiecePartID"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitPPIDRevision"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitServiceTag"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitExpressServiceCode"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPowerSupplyIndex"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPowerSupplyOperStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPowerSupplyType"), ("F10-M-SERIES-CHASSIS-MIB", "chSysFanTrayIndex"), ("F10-M-SERIES-CHASSIS-MIB", "chSysFanTrayOperStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortIndex"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortType"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortAdminStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortOperStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortIfIndex"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortXfpRecvPower"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortXfpRecvTemp"), ("F10-M-SERIES-CHASSIS-MIB", "chSysPortXfpTxPower"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortIndex"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortConfiguredMode"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortRunningMode"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortLinkStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortLinkSpeed"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortRxDataRate"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortRxErrorRate"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortRxTotalErrors"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortTxDataRate"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortTxErrorRate"), ("F10-M-SERIES-CHASSIS-MIB", "chSysStackPortTxTotalErrors"), ("F10-M-SERIES-CHASSIS-MIB", "chSysProcessorModule"), ("F10-M-SERIES-CHASSIS-MIB", "chSysProcessorUpTime"), ("F10-M-SERIES-CHASSIS-MIB", "chSysProcessorNvramSize"), ("F10-M-SERIES-CHASSIS-MIB", "chSysProcessorMemSize"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwRuntimeImgVersion"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwRuntimeImgDate"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImgVersion"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImgDate"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImgStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwBackupBootImgVersion"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwBackupBootImgDate"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwBackupBootImgStatus"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwNextRebootImage"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwCurrentBootImage"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwInPartitionAImgVers"), ("F10-M-SERIES-CHASSIS-MIB", "chSysSwInPartitionBImgVers"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitCpuType"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitCpuUtil5Sec"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitCpuUtil1Min"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitCpuUtil5Min"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitMemUsageUtil"), ("F10-M-SERIES-CHASSIS-MIB", "chStackUnitFlashUsageUtil"), ("F10-M-SERIES-CHASSIS-MIB", "chSysCoresInstance"), ("F10-M-SERIES-CHASSIS-MIB", "chSysCoresFileName"), ("F10-M-SERIES-CHASSIS-MIB", "chSysCoresTimeCreated"), ("F10-M-SERIES-CHASSIS-MIB", "chSysCoresStackUnitNumber"), ("F10-M-SERIES-CHASSIS-MIB", "chSysCoresProcess"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10mSeriesSystemGroup = f10mSeriesSystemGroup.setStatus('current')
if mibBuilder.loadTexts: f10mSeriesSystemGroup.setDescription('A collection of objects providing the chassis system hardware information.')
f10mSeriesNotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 6027, 3, 19, 2, 2, 3)).setObjects(("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackUnitDown"), ("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackUnitUp"), ("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackUnitReset"), ("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackUnitOffline"), ("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackUnitCodeMismatch"), ("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackPortLinkUp"), ("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackPortLinkDown"), ("F10-M-SERIES-CHASSIS-MIB", "chAlarmStackUnitRoleChanged"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    f10mSeriesNotificationGroup = f10mSeriesNotificationGroup.setStatus('current')
if mibBuilder.loadTexts: f10mSeriesNotificationGroup.setDescription('Notifications for Dell Networking OS M-Series Chassis mib')
mibBuilder.exportSymbols("F10-M-SERIES-CHASSIS-MIB", chSysSwModuleTable=chSysSwModuleTable, chAlarmStackUnitCodeMismatch=chAlarmStackUnitCodeMismatch, chSysCoresEntry=chSysCoresEntry, chAlarmObjects=chAlarmObjects, chSysCoresProcess=chSysCoresProcess, chStackUnitModelID=chStackUnitModelID, chSysPowerSupplyOperStatus=chSysPowerSupplyOperStatus, f10MSerChassisMib=f10MSerChassisMib, chStackUnitVendorId=chStackUnitVendorId, f10mSeriesComponentGroup=f10mSeriesComponentGroup, chSysStackPortConfiguredMode=chSysStackPortConfiguredMode, chSysPortType=chSysPortType, chStackUnitCpuType=chStackUnitCpuType, chSysPowerSupplyType=chSysPowerSupplyType, chSysPowerSupplyIndex=chSysPowerSupplyIndex, chStackUnitSID=chStackUnitSID, chStackUnitNumPowerSupplies=chStackUnitNumPowerSupplies, f10mSeriesMibCompliance=f10mSeriesMibCompliance, chSysSwBackupBootImgDate=chSysSwBackupBootImgDate, PYSNMP_MODULE_ID=f10MSerChassisMib, chSysProcessorModule=chSysProcessorModule, chSysFanTrayEntry=chSysFanTrayEntry, chSysStackPortTxTotalErrors=chSysStackPortTxTotalErrors, chStackUnitStatus=chStackUnitStatus, chSysProcessorMemSize=chSysProcessorMemSize, chSysCoresInstance=chSysCoresInstance, CodeType=CodeType, chStackUnitIndexNext=chStackUnitIndexNext, f10mSeriesMibGroups=f10mSeriesMibGroups, chSysStackPortRxErrorRate=chSysStackPortRxErrorRate, chStackUnitDescription=chStackUnitDescription, chStackUnitNum40GigEtherPorts=chStackUnitNum40GigEtherPorts, chSysStackPortIndex=chSysStackPortIndex, chSysProcessorEntry=chSysProcessorEntry, f10MSerChassisObject=f10MSerChassisObject, chSysPortXfpRecvPower=chSysPortXfpRecvPower, chSysCoresStackUnitNumber=chSysCoresStackUnitNumber, chSysObjects=chSysObjects, chStackUnitIndex=chStackUnitIndex, chSysPortEntry=chSysPortEntry, chSysPowerSupplyTable=chSysPowerSupplyTable, chStackUnitMacAddress=chStackUnitMacAddress, chSysPortIndex=chSysPortIndex, chAlarmMibNotifications=chAlarmMibNotifications, chStackUnitNumPluggableModules=chStackUnitNumPluggableModules, chStackUnitSysType=chStackUnitSysType, chSysStackPortTxDataRate=chSysStackPortTxDataRate, chAlarmStackUnitDown=chAlarmStackUnitDown, chSysPowerSupplyEntry=chSysPowerSupplyEntry, chStackUnitTable=chStackUnitTable, chStackUnitNumber=chStackUnitNumber, chStackUnitCodeVersionInFlash=chStackUnitCodeVersionInFlash, chStackUnitProductOrder=chStackUnitProductOrder, chSysSwBackupBootImgVersion=chSysSwBackupBootImgVersion, chSysProcessorNvramSize=chSysProcessorNvramSize, chStackUnitUpTime=chStackUnitUpTime, chSysStackPortRunningMode=chSysStackPortRunningMode, chSysSwNextRebootImage=chSysSwNextRebootImage, chSysPortAdminStatus=chSysPortAdminStatus, chSysProcessorUpTime=chSysProcessorUpTime, chSysPortTable=chSysPortTable, chStackUnitCountryCode=chStackUnitCountryCode, chStackUnitPartNum=chStackUnitPartNum, chStackUnitCpuUtil1Min=chStackUnitCpuUtil1Min, chStackUnitNumFanTrays=chStackUnitNumFanTrays, chStackUnitCodeVersion=chStackUnitCodeVersion, chSysSwInPartitionBImgVers=chSysSwInPartitionBImgVers, chSysSwInPartitionAImgVers=chSysSwInPartitionAImgVers, chSysSwBackupBootImgStatus=chSysSwBackupBootImgStatus, chSysSwCurrentBootImage=chSysSwCurrentBootImage, chSysSwRuntimeImgVersion=chSysSwRuntimeImgVersion, chStackUnitUtilTable=chStackUnitUtilTable, f10mSeriesMibConformance=f10mSeriesMibConformance, chSysSwCurrentBootImgStatus=chSysSwCurrentBootImgStatus, chStackUnitUtilEntry=chStackUnitUtilEntry, chAlarmStackUnitUp=chAlarmStackUnitUp, chStackUnitAdmMgmtPreference=chStackUnitAdmMgmtPreference, chStackUnitSerialNumber=chStackUnitSerialNumber, chObjects=chObjects, chSysStackPortTable=chSysStackPortTable, chSysPortXfpRecvTemp=chSysPortXfpRecvTemp, chSysCoresTimeCreated=chSysCoresTimeCreated, chSysFanTrayOperStatus=chSysFanTrayOperStatus, chSysSwCurrentBootImgDate=chSysSwCurrentBootImgDate, chSysSwCoresTable=chSysSwCoresTable, chStackUnitMfgDate=chStackUnitMfgDate, chStackUnitPPIDRevision=chStackUnitPPIDRevision, chSysStackPortEntry=chSysStackPortEntry, chStackUnitNum10GigEtherPorts=chStackUnitNum10GigEtherPorts, chStackUnitExpressServiceCode=chStackUnitExpressServiceCode, chAlarmStackUnitRoleChanged=chAlarmStackUnitRoleChanged, chStackUnitNumFastEtherPorts=chStackUnitNumFastEtherPorts, chStackUnitTemp=chStackUnitTemp, chStackUnitPiecePartID=chStackUnitPiecePartID, chSysPortXfpTxPower=chSysPortXfpTxPower, chSysProcessorTable=chSysProcessorTable, chStackUnitServiceTag=chStackUnitServiceTag, f10mSeriesSystemGroup=f10mSeriesSystemGroup, chAlarmStackPortLinkUp=chAlarmStackPortLinkUp, chNumMaxStackableUnits=chNumMaxStackableUnits, chSysPortOperStatus=chSysPortOperStatus, UnitType=UnitType, chSysStackPortLinkSpeed=chSysStackPortLinkSpeed, chStackUnitNumGigEtherPorts=chStackUnitNumGigEtherPorts, chSysStackPortRxDataRate=chSysStackPortRxDataRate, chSysSwCurrentBootImgVersion=chSysSwCurrentBootImgVersion, f10mSeriesNotificationGroup=f10mSeriesNotificationGroup, chSysCoresFileName=chSysCoresFileName, chStackUnitMgmtStatus=chStackUnitMgmtStatus, chStackUnitFlashUsageUtil=chStackUnitFlashUsageUtil, chStackUnitType=chStackUnitType, chSysPortIfIndex=chSysPortIfIndex, chStackUnitEntry=chStackUnitEntry, chSysStackPortRxTotalErrors=chSysStackPortRxTotalErrors, chStackUnitCpuUtil5Min=chStackUnitCpuUtil5Min, chNumStackUnits=chNumStackUnits, chAlarmStackUnitOffline=chAlarmStackUnitOffline, chStackUnitCpuUtil5Sec=chStackUnitCpuUtil5Sec, chAlarmStackUnitReset=chAlarmStackUnitReset, chSysFanTrayTable=chSysFanTrayTable, chStackUnitProductRev=chStackUnitProductRev, f10mSeriesMibCompliances=f10mSeriesMibCompliances, chSysSwModuleEntry=chSysSwModuleEntry, chSysSwRuntimeImgDate=chSysSwRuntimeImgDate, chSysStackPortTxErrorRate=chSysStackPortTxErrorRate, chAlarmStackPortLinkDown=chAlarmStackPortLinkDown, chSysFanTrayIndex=chSysFanTrayIndex, chStackUnitMemUsageUtil=chStackUnitMemUsageUtil, chSysStackPortLinkStatus=chSysStackPortLinkStatus, chStackUnitRowStatus=chStackUnitRowStatus, chStackUnitHwMgmtPreference=chStackUnitHwMgmtPreference)
