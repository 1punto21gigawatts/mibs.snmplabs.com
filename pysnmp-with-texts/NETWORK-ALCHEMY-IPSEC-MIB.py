#
# PySNMP MIB module NETWORK-ALCHEMY-IPSEC-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NETWORK-ALCHEMY-IPSEC-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:20:56 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
ipsec, netalModules = mibBuilder.importSymbols("NETAL-SMI", "ipsec", "netalModules")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, TimeTicks, Unsigned32, Counter64, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, MibIdentifier, Bits, ObjectIdentity, Gauge32, NotificationType, Counter32, IpAddress, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "TimeTicks", "Unsigned32", "Counter64", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "MibIdentifier", "Bits", "ObjectIdentity", "Gauge32", "NotificationType", "Counter32", "IpAddress", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
networkAlchemyIPSECMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 2972, 5, 3))
networkAlchemyIPSECMIB.setRevisions(('2000-10-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: networkAlchemyIPSECMIB.setRevisionsDescriptions(('Cleanup.',))
if mibBuilder.loadTexts: networkAlchemyIPSECMIB.setLastUpdated('200010250000Z')
if mibBuilder.loadTexts: networkAlchemyIPSECMIB.setOrganization('Network Alchemy, Inc.')
if mibBuilder.loadTexts: networkAlchemyIPSECMIB.setContactInfo(' Network Alchemy Customer Support Postal: 1538 Pacific Av. Santa Cruz, CA 95060 USA E-Mail: snmp-contact@network-alchemy.com')
if mibBuilder.loadTexts: networkAlchemyIPSECMIB.setDescription('IPSEC MIB module.')
replayStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2972, 2, 2, 1))
naIKEStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2))
naAHStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3))
naESPStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4))
naKeyStats = MibIdentifier((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5))
replayStatsWraps = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: replayStatsWraps.setStatus('current')
if mibBuilder.loadTexts: replayStatsWraps.setDescription('Number of wrapped sequence numbers detected')
replayStatsReplays = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: replayStatsReplays.setStatus('current')
if mibBuilder.loadTexts: replayStatsReplays.setDescription('Number of legit replayed packets detected')
replayStatsoutofrange = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: replayStatsoutofrange.setStatus('current')
if mibBuilder.loadTexts: replayStatsoutofrange.setDescription('Number of packets earlier than left edge detected')
replayStatstimewarps = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: replayStatstimewarps.setStatus('current')
if mibBuilder.loadTexts: replayStatstimewarps.setDescription("Number of packets that warped the window's left edge")
replayStatsstale = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: replayStatsstale.setStatus('current')
if mibBuilder.loadTexts: replayStatsstale.setDescription('Number of packets in replay update table')
replayStatsreset = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: replayStatsreset.setStatus('current')
if mibBuilder.loadTexts: replayStatsreset.setDescription('Total resets performed')
replayStatsdeferred = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: replayStatsdeferred.setStatus('current')
if mibBuilder.loadTexts: replayStatsdeferred.setDescription('Number of REPLAY-UPDATE messages on lookaside')
naIKEStatsbadhash = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsbadhash.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsbadhash.setDescription('Total authentication failures (pre-shared)')
naIKEStatsbadsig = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsbadsig.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsbadsig.setDescription('Total authentication failures (RSA/DSS)')
naIKEStatsinvalidcookies = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsinvalidcookies.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsinvalidcookies.setDescription('Total packets dropped due to bad cookies')
naIKEStatsacounts = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsacounts.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsacounts.setDescription("Total ISAKMP SA's")
naIKEStatsmainmodes = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsmainmodes.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsmainmodes.setDescription('Total Main Modes')
naIKEStatsquickmodes = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsquickmodes.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsquickmodes.setDescription('Total Quick Modes')
naIKEStatsaggressivemodes = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsaggressivemodes.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsaggressivemodes.setDescription('Total Aggressive Modes')
naIKEStatsnewgroupmodes = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsnewgroupmodes.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsnewgroupmodes.setDescription('Total Oakley New Group Modes')
naIKEStatsfailedsend = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsfailedsend.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsfailedsend.setDescription("Total number of failed ISAKMP sendto's")
naIKEStatstotalnetwork = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatstotalnetwork.setStatus('current')
if mibBuilder.loadTexts: naIKEStatstotalnetwork.setDescription('Total ISAKMP messages received')
naIKEStatstotalsend = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatstotalsend.setStatus('current')
if mibBuilder.loadTexts: naIKEStatstotalsend.setDescription('Total ISAKMP messages sent')
naIKEStatstotalsaapi = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatstotalsaapi.setStatus('current')
if mibBuilder.loadTexts: naIKEStatstotalsaapi.setDescription('Total PFKEY messages received')
naIKEStatstotalipc = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatstotalipc.setStatus('current')
if mibBuilder.loadTexts: naIKEStatstotalipc.setDescription('Total PF_LOCAL messages received')
naIKEStatstotalmanual = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatstotalmanual.setStatus('current')
if mibBuilder.loadTexts: naIKEStatstotalmanual.setDescription("Total number of manual key acquire's")
naIKEStatstotalauto = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatstotalauto.setStatus('current')
if mibBuilder.loadTexts: naIKEStatstotalauto.setDescription("Total number of automatic key acquire's")
naIKEStatstransitions = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatstransitions.setStatus('current')
if mibBuilder.loadTexts: naIKEStatstransitions.setDescription('Cluster state transitions')
naIKEStatssentsa = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatssentsa.setStatus('current')
if mibBuilder.loadTexts: naIKEStatssentsa.setDescription("SA's distributed")
naIKEStatssentipsecsapair = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatssentipsecsapair.setStatus('current')
if mibBuilder.loadTexts: naIKEStatssentipsecsapair.setDescription("IPSEC SA pair's distributed")
naIKEStatssentpacket = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatssentpacket.setStatus('current')
if mibBuilder.loadTexts: naIKEStatssentpacket.setDescription("PACKET's sent")
naIKEStatsrecvsa = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsrecvsa.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsrecvsa.setDescription("SA's processed")
naIKEStatsrecvipsecsapair = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsrecvipsecsapair.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsrecvipsecsapair.setDescription("IPSEC SA pair's processed")
naIKEStatsrecvpacket = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsrecvpacket.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsrecvpacket.setDescription("PACKET's received")
naIKEStatssentinitialstate = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatssentinitialstate.setStatus('current')
if mibBuilder.loadTexts: naIKEStatssentinitialstate.setDescription('IPSEC IKE stat sent_initial_state')
naIKEStatssentflush = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatssentflush.setStatus('current')
if mibBuilder.loadTexts: naIKEStatssentflush.setDescription('IPSEC IKE statsent_flush ')
naIKEStatssentcryptostate = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatssentcryptostate.setStatus('current')
if mibBuilder.loadTexts: naIKEStatssentcryptostate.setDescription('IPSEC IKE stat sent_crypto_state')
naIKEStatssentacquire = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatssentacquire.setStatus('current')
if mibBuilder.loadTexts: naIKEStatssentacquire.setDescription('IPSEC IKE stat sent_acquire')
naIKEStatssentipseclifetime = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatssentipseclifetime.setStatus('current')
if mibBuilder.loadTexts: naIKEStatssentipseclifetime.setDescription('IPSEC IKE stat sent_ipsec_lifetime')
naIKEStatssentikelifetime = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatssentikelifetime.setStatus('current')
if mibBuilder.loadTexts: naIKEStatssentikelifetime.setDescription('IPSEC IKE statsent_ike_lifetime')
naIKEStatssentdelete = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatssentdelete.setStatus('current')
if mibBuilder.loadTexts: naIKEStatssentdelete.setDescription('IPSEC IKE sent_delete')
naIKEStatssentselector = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatssentselector.setStatus('current')
if mibBuilder.loadTexts: naIKEStatssentselector.setDescription('IPSEC IKE sent_selector')
naIKEStatsrecvjoin = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 31), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsrecvjoin.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsrecvjoin.setDescription('IPSEC IKE recv_join')
naIKEStatsrecvrejoin = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsrecvrejoin.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsrecvrejoin.setDescription('IPSEC IKE recv_rejoin')
naIKEStatsrecvflush = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsrecvflush.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsrecvflush.setDescription('IPSEC IKE recv_flush')
naIKEStatsrecvcryptostate = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsrecvcryptostate.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsrecvcryptostate.setDescription('IPSEC IKE recv_crypto_state')
naIKEStatsrecvacquire = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsrecvacquire.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsrecvacquire.setDescription('IPSEC IKE recv_acquire')
naIKEStatsrecvipseclifetime = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsrecvipseclifetime.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsrecvipseclifetime.setDescription('IPSEC IKE recv_ipsec_lifetime')
naIKEStatsrecvikelifetime = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsrecvikelifetime.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsrecvikelifetime.setDescription('IPSEC IKE recv_ike_lifetime')
naIKEStatsrecvdelete = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsrecvdelete.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsrecvdelete.setDescription('IPSEC IKE recv_delete')
naIKEStatsrecvselector = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsrecvselector.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsrecvselector.setDescription('IPSEC IKE recv_selector')
naIKEStatssentinhibit = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatssentinhibit.setStatus('current')
if mibBuilder.loadTexts: naIKEStatssentinhibit.setDescription('IPSEC IKE sent_inhibit')
naIKEStatsrecvinhibit = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 2, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naIKEStatsrecvinhibit.setStatus('current')
if mibBuilder.loadTexts: naIKEStatsrecvinhibit.setDescription('IPSEC IKE recv_inhibit')
naAHStatssent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatssent.setStatus('current')
if mibBuilder.loadTexts: naAHStatssent.setDescription('Total datagrams sent')
naAHStatstunnelsent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatstunnelsent.setStatus('current')
if mibBuilder.loadTexts: naAHStatstunnelsent.setDescription('Total tunnelled datagrams sent')
naAHStatstransportsent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatstransportsent.setStatus('current')
if mibBuilder.loadTexts: naAHStatstransportsent.setDescription('Total transport datagrams sent')
naAHStatsqueuesent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatsqueuesent.setStatus('current')
if mibBuilder.loadTexts: naAHStatsqueuesent.setDescription('Output packets processed by crypto server process')
naAHStatscpusent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatscpusent.setStatus('current')
if mibBuilder.loadTexts: naAHStatscpusent.setDescription('Output packets processed by secondary processor')
naAHStatsidlesent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatsidlesent.setStatus('current')
if mibBuilder.loadTexts: naAHStatsidlesent.setDescription('Output packets processed by idle loop')
naAHStatshifnsent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatshifnsent.setStatus('current')
if mibBuilder.loadTexts: naAHStatshifnsent.setDescription('Output packets processed by a HiFn 77x1 processor')
naAHStatsouterrors = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatsouterrors.setStatus('current')
if mibBuilder.loadTexts: naAHStatsouterrors.setDescription('Output errors')
naAHStatsoutdrops = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatsoutdrops.setStatus('current')
if mibBuilder.loadTexts: naAHStatsoutdrops.setDescription('Packets dropped due to resource allocation failures')
naAHStatsreceived = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatsreceived.setStatus('current')
if mibBuilder.loadTexts: naAHStatsreceived.setDescription('Total datagrams received')
naAHStatstunnelrcvd = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatstunnelrcvd.setStatus('current')
if mibBuilder.loadTexts: naAHStatstunnelrcvd.setDescription('Total tunnelled datagrams received')
naAHStatstransportrcvd = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatstransportrcvd.setStatus('current')
if mibBuilder.loadTexts: naAHStatstransportrcvd.setDescription('Total transport datagrams received')
naAHStatsqueuercvd = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatsqueuercvd.setStatus('current')
if mibBuilder.loadTexts: naAHStatsqueuercvd.setDescription('Input packets processed by crypto server process')
naAHStatscpurcvd = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatscpurcvd.setStatus('current')
if mibBuilder.loadTexts: naAHStatscpurcvd.setDescription('Input packets processed by secondary processor')
naAHStatsidlercvd = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatsidlercvd.setStatus('current')
if mibBuilder.loadTexts: naAHStatsidlercvd.setDescription('Input packets processed by idle loop')
naAHStatshifnrcvd = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatshifnrcvd.setStatus('current')
if mibBuilder.loadTexts: naAHStatshifnrcvd.setDescription('Input packets processed by a HiFn 77x1 processor')
naAHStatsinerrors = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatsinerrors.setStatus('current')
if mibBuilder.loadTexts: naAHStatsinerrors.setDescription('Input errors')
naAHStatsindrops = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatsindrops.setStatus('current')
if mibBuilder.loadTexts: naAHStatsindrops.setDescription('Packets dropped due to resource allocation failures')
naAHStatssafailures = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatssafailures.setStatus('current')
if mibBuilder.loadTexts: naAHStatssafailures.setDescription('Total SA lookup failures')
naAHStatsreplay = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatsreplay.setStatus('current')
if mibBuilder.loadTexts: naAHStatsreplay.setDescription('Total replayed packets detected')
naAHStatsfragments = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatsfragments.setStatus('current')
if mibBuilder.loadTexts: naAHStatsfragments.setDescription('Total fragmented datagrams received (and discarded)')
naAHStatshifnrefused = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatshifnrefused.setStatus('current')
if mibBuilder.loadTexts: naAHStatshifnrefused.setDescription('Total packets not sent to HiFn')
naAHStatscpurefused = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naAHStatscpurefused.setStatus('current')
if mibBuilder.loadTexts: naAHStatscpurefused.setDescription('Total packets refused by secondary CPU queue')
naESPStatssent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatssent.setStatus('current')
if mibBuilder.loadTexts: naESPStatssent.setDescription('Total datagrams sent')
naESPStatstunnelsent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatstunnelsent.setStatus('current')
if mibBuilder.loadTexts: naESPStatstunnelsent.setDescription('Total tunnelled datagrams sent')
naESPStatstransportsent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatstransportsent.setStatus('current')
if mibBuilder.loadTexts: naESPStatstransportsent.setDescription('Total transport datagrams sent')
naESPStatsqueuesent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatsqueuesent.setStatus('current')
if mibBuilder.loadTexts: naESPStatsqueuesent.setDescription('Output packets processed by crypto server process')
naESPStatscpusent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatscpusent.setStatus('current')
if mibBuilder.loadTexts: naESPStatscpusent.setDescription('Output packets processed by secondary processor')
naESPStatsidlesent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatsidlesent.setStatus('current')
if mibBuilder.loadTexts: naESPStatsidlesent.setDescription('Output packets processed by idle loop')
naESPStatshifnsent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatshifnsent.setStatus('current')
if mibBuilder.loadTexts: naESPStatshifnsent.setDescription('Output packets processed by a HiFn 77x1 processor')
naESPStatsouterrors = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatsouterrors.setStatus('current')
if mibBuilder.loadTexts: naESPStatsouterrors.setDescription('Output errors')
naESPStatsoutdrops = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatsoutdrops.setStatus('current')
if mibBuilder.loadTexts: naESPStatsoutdrops.setDescription('Packets dropped due to resource allocation failures')
naESPStatsreceived = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatsreceived.setStatus('current')
if mibBuilder.loadTexts: naESPStatsreceived.setDescription('Total datagrams received')
naESPStatstunnelrcvd = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatstunnelrcvd.setStatus('current')
if mibBuilder.loadTexts: naESPStatstunnelrcvd.setDescription('Total tunnelled datagrams received')
naESPStatstransportrcvd = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatstransportrcvd.setStatus('current')
if mibBuilder.loadTexts: naESPStatstransportrcvd.setDescription('Total transport datagrams received')
naESPStatsqueuercvd = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatsqueuercvd.setStatus('current')
if mibBuilder.loadTexts: naESPStatsqueuercvd.setDescription('Input packets processed by crypto server process')
naESPStatscpurcvd = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatscpurcvd.setStatus('current')
if mibBuilder.loadTexts: naESPStatscpurcvd.setDescription('Input packets processed by secondary processor')
naESPStatsidlercvd = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatsidlercvd.setStatus('current')
if mibBuilder.loadTexts: naESPStatsidlercvd.setDescription('Input packets processed by idle loop')
naESPStatshifnrcvd = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatshifnrcvd.setStatus('current')
if mibBuilder.loadTexts: naESPStatshifnrcvd.setDescription('Input packets processed by a HiFn 77x1 processor')
naESPStatsinerrors = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatsinerrors.setStatus('current')
if mibBuilder.loadTexts: naESPStatsinerrors.setDescription('Input errors')
naESPStatsindrops = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatsindrops.setStatus('current')
if mibBuilder.loadTexts: naESPStatsindrops.setDescription('Packets dropped due to resource allocation failures')
naESPStatssafailures = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatssafailures.setStatus('current')
if mibBuilder.loadTexts: naESPStatssafailures.setDescription('Total SA lookup failures')
naESPStatsreplay = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatsreplay.setStatus('current')
if mibBuilder.loadTexts: naESPStatsreplay.setDescription('Total replayed packets detected')
naESPStatsfragments = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatsfragments.setStatus('current')
if mibBuilder.loadTexts: naESPStatsfragments.setDescription('Total fragmented datagrams received (and discarded)')
naESPStatspadverifyfailures = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatspadverifyfailures.setStatus('current')
if mibBuilder.loadTexts: naESPStatspadverifyfailures.setDescription('Total packet padding verification failures')
naESPStatssignaturefailures = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatssignaturefailures.setStatus('current')
if mibBuilder.loadTexts: naESPStatssignaturefailures.setDescription('Total input packets rejected due to bad signature')
naESPStatsweakkey = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatsweakkey.setStatus('current')
if mibBuilder.loadTexts: naESPStatsweakkey.setDescription('Total weak cryptographic keys detected')
naESPStatskeyparity = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatskeyparity.setStatus('current')
if mibBuilder.loadTexts: naESPStatskeyparity.setDescription('Total DES key parity errors detected')
naESPStatshifnrefused = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatshifnrefused.setStatus('current')
if mibBuilder.loadTexts: naESPStatshifnrefused.setDescription('Total packets not sent to Hi/fn')
naESPStatscpurefused = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 4, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naESPStatscpurefused.setStatus('current')
if mibBuilder.loadTexts: naESPStatscpurefused.setDescription('Total packets refused by secondary CPU queue')
naKeyStatssyntax = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatssyntax.setStatus('current')
if mibBuilder.loadTexts: naKeyStatssyntax.setDescription('Total malformed messages')
naKeyStatsoutbound = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsoutbound.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsoutbound.setDescription('Total SAs in general hash table')
naKeyStatsinbound = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsinbound.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsinbound.setDescription('Total SAs in inbound SPI table')
naKeyStatspending = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatspending.setStatus('current')
if mibBuilder.loadTexts: naKeyStatspending.setDescription('Total pending SAs in pending list')
naKeyStatsselectors = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsselectors.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsselectors.setDescription('Total number of selectors in SPD')
naKeyStatsoutlast = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsoutlast.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsoutlast.setDescription('Total outbound packets that matched last SA used')
naKeyStatsouthash = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsouthash.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsouthash.setDescription('Total outbound packets found in outbound hash table')
naKeyStatsoutnew = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsoutnew.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsoutnew.setDescription('Total outbound packets resulting in new KM requests')
naKeyStatsinlast = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsinlast.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsinlast.setDescription('Total inbound packets that matched last SA used')
naKeyStatsinhash = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsinhash.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsinhash.setDescription('Total inbound packets found in inbound hash table')
naKeyStatsrefresh = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsrefresh.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsrefresh.setDescription('Total key refresh messages delivered')
naKeyStatsreaped = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsreaped.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsreaped.setDescription('Total SAs reaped')
naKeyStatsreapedlarval = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsreapedlarval.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsreapedlarval.setDescription('Total pending entries deleted')
naKeyStatsbypass = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsbypass.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsbypass.setDescription('Total bypass selectors matched (output)')
naKeyStatsdrop = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsdrop.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsdrop.setDescription('Total drop selectors matched (output)')
naKeyStatsprotect = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsprotect.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsprotect.setDescription('Total protect selectors matched (output)')
naKeyStatsinbypass = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsinbypass.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsinbypass.setDescription('Total bypass selectors matched (input)')
naKeyStatsindrop = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsindrop.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsindrop.setDescription('Total drop selectors matched (input)')
naKeyStatsinprotect = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsinprotect.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsinprotect.setDescription('Total protect selectors matched (input)')
naKeyStatsstallq = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsstallq.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsstallq.setDescription('Total packets on stall queue')
naKeyStatsnomatch = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsnomatch.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsnomatch.setDescription('Total packets not matching any selector (output)')
naKeyStatsinnomatch = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsinnomatch.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsinnomatch.setDescription('Total packets not matching any selector (input)')
naKeyStatsinmismatch = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsinmismatch.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsinmismatch.setDescription('Total packets dropped due to security policy mismatch (input)')
naKeyStatsadvmtusent = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsadvmtusent.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsadvmtusent.setDescription('Total advisory MTU ICMP messages sent')
naKeyStatsadvmturcvd = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsadvmturcvd.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsadvmturcvd.setDescription('Total advisory MTU ICMP messages received')
naKeyStatsphantom = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsphantom.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsphantom.setDescription('Total phantom SPIs causing reverse negotiations')
naKeyStatsdynamicselectors = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 27), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatsdynamicselectors.setStatus('current')
if mibBuilder.loadTexts: naKeyStatsdynamicselectors.setDescription('Total dynamic selectors')
naKeyStatstoolarge = MibScalar((1, 3, 6, 1, 4, 1, 2972, 2, 2, 5, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: naKeyStatstoolarge.setStatus('current')
if mibBuilder.loadTexts: naKeyStatstoolarge.setDescription('Total packets discarded because they would become too large (output)')
mibBuilder.exportSymbols("NETWORK-ALCHEMY-IPSEC-MIB", naAHStatsidlesent=naAHStatsidlesent, naIKEStatsrecvipsecsapair=naIKEStatsrecvipsecsapair, naIKEStatsrecvpacket=naIKEStatsrecvpacket, replayStatsoutofrange=replayStatsoutofrange, naIKEStatssentpacket=naIKEStatssentpacket, naAHStatstransportrcvd=naAHStatstransportrcvd, naKeyStatsinbound=naKeyStatsinbound, naESPStatscpurefused=naESPStatscpurefused, naKeyStatsdrop=naKeyStatsdrop, naKeyStatsrefresh=naKeyStatsrefresh, naAHStatsinerrors=naAHStatsinerrors, naKeyStatsinlast=naKeyStatsinlast, naAHStatscpurcvd=naAHStatscpurcvd, naIKEStatsrecvjoin=naIKEStatsrecvjoin, naIKEStatsrecvselector=naIKEStatsrecvselector, naKeyStatsinhash=naKeyStatsinhash, naAHStatshifnrefused=naAHStatshifnrefused, naAHStatsidlercvd=naAHStatsidlercvd, naIKEStatsrecvinhibit=naIKEStatsrecvinhibit, naAHStatshifnsent=naAHStatshifnsent, naIKEStatsacounts=naIKEStatsacounts, naIKEStatssentcryptostate=naIKEStatssentcryptostate, naIKEStatstransitions=naIKEStatstransitions, naIKEStats=naIKEStats, naAHStatssent=naAHStatssent, naESPStatsreplay=naESPStatsreplay, naKeyStatsreapedlarval=naKeyStatsreapedlarval, naIKEStatstotalnetwork=naIKEStatstotalnetwork, naIKEStatssentipsecsapair=naIKEStatssentipsecsapair, naESPStatssignaturefailures=naESPStatssignaturefailures, naIKEStatssentikelifetime=naIKEStatssentikelifetime, naIKEStatstotalsaapi=naIKEStatstotalsaapi, naAHStatsqueuesent=naAHStatsqueuesent, naAHStatstunnelsent=naAHStatstunnelsent, networkAlchemyIPSECMIB=networkAlchemyIPSECMIB, replayStatsreset=replayStatsreset, naIKEStatssentacquire=naIKEStatssentacquire, replayStatstimewarps=replayStatstimewarps, naIKEStatsaggressivemodes=naIKEStatsaggressivemodes, naAHStatstunnelrcvd=naAHStatstunnelrcvd, naIKEStatsmainmodes=naIKEStatsmainmodes, naESPStatsoutdrops=naESPStatsoutdrops, naKeyStats=naKeyStats, naESPStatskeyparity=naESPStatskeyparity, naIKEStatsrecvacquire=naIKEStatsrecvacquire, naESPStatstunnelsent=naESPStatstunnelsent, naIKEStatsbadhash=naIKEStatsbadhash, naIKEStatsrecvdelete=naIKEStatsrecvdelete, naAHStatsreceived=naAHStatsreceived, naIKEStatsrecvrejoin=naIKEStatsrecvrejoin, naAHStatsindrops=naAHStatsindrops, naESPStatsinerrors=naESPStatsinerrors, naIKEStatsrecvcryptostate=naIKEStatsrecvcryptostate, naKeyStatsnomatch=naKeyStatsnomatch, naKeyStatsadvmturcvd=naKeyStatsadvmturcvd, naAHStatsoutdrops=naAHStatsoutdrops, naIKEStatssentdelete=naIKEStatssentdelete, naIKEStatsquickmodes=naIKEStatsquickmodes, naESPStatstransportrcvd=naESPStatstransportrcvd, naKeyStatsselectors=naKeyStatsselectors, naKeyStatspending=naKeyStatspending, naKeyStatsoutbound=naKeyStatsoutbound, naESPStatshifnrcvd=naESPStatshifnrcvd, naAHStatstransportsent=naAHStatstransportsent, naKeyStatsreaped=naKeyStatsreaped, naAHStatsfragments=naAHStatsfragments, naIKEStatsrecvikelifetime=naIKEStatsrecvikelifetime, naAHStatssafailures=naAHStatssafailures, replayStatsWraps=replayStatsWraps, naIKEStatssentipseclifetime=naIKEStatssentipseclifetime, naIKEStatssentinhibit=naIKEStatssentinhibit, naKeyStatsinbypass=naKeyStatsinbypass, naKeyStatsadvmtusent=naKeyStatsadvmtusent, naKeyStatsoutnew=naKeyStatsoutnew, naKeyStatsindrop=naKeyStatsindrop, naIKEStatsrecvflush=naIKEStatsrecvflush, naESPStatstunnelrcvd=naESPStatstunnelrcvd, naKeyStatsinnomatch=naKeyStatsinnomatch, naESPStatsreceived=naESPStatsreceived, naESPStatsqueuercvd=naESPStatsqueuercvd, naESPStats=naESPStats, replayStatsdeferred=replayStatsdeferred, naKeyStatsbypass=naKeyStatsbypass, naESPStatsidlesent=naESPStatsidlesent, naKeyStatsprotect=naKeyStatsprotect, naESPStatssent=naESPStatssent, naIKEStatstotalmanual=naIKEStatstotalmanual, replayStatsReplays=replayStatsReplays, naIKEStatssentselector=naIKEStatssentselector, naIKEStatssentsa=naIKEStatssentsa, naIKEStatssentflush=naIKEStatssentflush, naKeyStatsouthash=naKeyStatsouthash, naAHStatsqueuercvd=naAHStatsqueuercvd, naIKEStatsfailedsend=naIKEStatsfailedsend, naIKEStatsnewgroupmodes=naIKEStatsnewgroupmodes, naIKEStatsbadsig=naIKEStatsbadsig, naESPStatsidlercvd=naESPStatsidlercvd, naESPStatssafailures=naESPStatssafailures, naIKEStatstotalauto=naIKEStatstotalauto, naAHStats=naAHStats, naAHStatscpurefused=naAHStatscpurefused, naIKEStatsrecvsa=naIKEStatsrecvsa, naIKEStatstotalsend=naIKEStatstotalsend, naESPStatscpurcvd=naESPStatscpurcvd, replayStatsstale=replayStatsstale, naKeyStatsinmismatch=naKeyStatsinmismatch, naKeyStatsinprotect=naKeyStatsinprotect, naAHStatscpusent=naAHStatscpusent, naKeyStatssyntax=naKeyStatssyntax, naKeyStatstoolarge=naKeyStatstoolarge, naKeyStatsphantom=naKeyStatsphantom, PYSNMP_MODULE_ID=networkAlchemyIPSECMIB, replayStats=replayStats, naESPStatsqueuesent=naESPStatsqueuesent, naAHStatsouterrors=naAHStatsouterrors, naIKEStatsrecvipseclifetime=naIKEStatsrecvipseclifetime, naKeyStatsoutlast=naKeyStatsoutlast, naAHStatshifnrcvd=naAHStatshifnrcvd, naAHStatsreplay=naAHStatsreplay, naIKEStatstotalipc=naIKEStatstotalipc, naESPStatstransportsent=naESPStatstransportsent, naESPStatshifnrefused=naESPStatshifnrefused, naKeyStatsstallq=naKeyStatsstallq, naIKEStatsinvalidcookies=naIKEStatsinvalidcookies, naKeyStatsdynamicselectors=naKeyStatsdynamicselectors, naIKEStatssentinitialstate=naIKEStatssentinitialstate, naESPStatsouterrors=naESPStatsouterrors, naESPStatsweakkey=naESPStatsweakkey, naESPStatscpusent=naESPStatscpusent, naESPStatshifnsent=naESPStatshifnsent, naESPStatsfragments=naESPStatsfragments, naESPStatsindrops=naESPStatsindrops, naESPStatspadverifyfailures=naESPStatspadverifyfailures)
