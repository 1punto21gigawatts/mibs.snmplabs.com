#
# PySNMP MIB module CISCO-CLASS-BASED-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-CLASS-BASED-QOS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:53:32 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
DlciNumber, = mibBuilder.importSymbols("CISCO-FRAME-RELAY-MIB", "DlciNumber")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
Unsigned64, EntPhysicalIndexOrZero = mibBuilder.importSymbols("CISCO-TC", "Unsigned64", "EntPhysicalIndexOrZero")
CounterBasedGauge64, = mibBuilder.importSymbols("HCNUM-TC", "CounterBasedGauge64")
InterfaceIndex, ifIndex = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex", "ifIndex")
VlanIndex, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "VlanIndex")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
NotificationType, Gauge32, Counter64, TimeTicks, Unsigned32, IpAddress, Integer32, MibIdentifier, ModuleIdentity, dod, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, iso, Counter32, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "Gauge32", "Counter64", "TimeTicks", "Unsigned32", "IpAddress", "Integer32", "MibIdentifier", "ModuleIdentity", "dod", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "iso", "Counter32", "Bits")
TruthValue, TimeStamp, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "TimeStamp", "TextualConvention", "DisplayString")
ciscoCBQosMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 166))
ciscoCBQosMIB.setRevisions(('2014-01-24 00:00', '2013-10-10 00:00', '2013-06-20 00:00', '2013-02-15 00:00', '2012-07-24 00:00', '2012-03-22 00:00', '2009-11-25 00:00', '2009-09-16 00:00', '2009-04-24 00:00', '2009-01-26 00:00', '2008-11-20 00:00', '2008-06-17 00:00', '2007-10-09 00:00', '2007-08-30 00:00', '2007-07-10 00:00', '2004-09-20 00:00', '2004-04-12 00:00', '2003-07-24 00:00', '2003-06-09 00:00', '2003-01-21 00:00', '2002-12-03 00:00', '2002-07-24 00:00', '2001-03-14 00:00', '2000-12-08 00:00', '2000-07-13 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoCBQosMIB.setRevisionsDescriptions(('Added new object cbQosParentPolicyIndex in cbQosServicePolicyTable', 'Added cbQosQueueingStatsGroupRev1 Added ciscocbQosMIBComplianceRev13', 'Added the following 64-bit Objects cbQosCMPrePolicyBitRate64 cbQosCMPostPolicyBitRate64 cbQosCMDropBitRate64 cbQosPoliceConformedBitRate64 cbQosPoliceExceededBitRate64 cbQosPoliceViolatedBitRate64', 'Added Percentage as a unit for cbQoSQueueUnitType', 'The following 2 objects are expanded to include perThousand and perMillion units. 1. QueueingBandwidthUnits 2. CbQosRateType', 'The following 4 changes have been made 1. Added the following 64 bit objects and deprecated the corresponding 32 bit objects ================================================= cbQosQueueingCfgBandwidth64, cbQosQueueingCfgIndividualQSize64, cbQosPoliceCfgBurstSize64, cbQosPoliceCfgExtBurstSize64, cbQosPoliceCfgPir64, cbQosTSCfgBurstSize64, cbQosTSCfgExtBurstSize64 2. Range expanded for ================== cbQosQueueingCfgBandwidth, cbQosQueueingCfgIndividualQSize, cbQosPoliceCfgBurstSize, cbQosPoliceCfgExtBurstSize, cbQosPoliceCfgPir, cbQosTSCfgBurstSize, cbQosTSCfgExtBurstSize, cbQosREDCfgMinThreshold, cbQosREDCfgMaxThreshold, cbQosPoliceCfgRate, cbQosPoliceCfgBurstCell, cbQosPoliceCfgExtBurstCell, cbQosPoliceCfgBurstTime, cbQosPoliceCfgExtBurstTime, cbQosPoliceCfgCdvt, cbQosTSCfgRate,cbQosTSCfgBurstTime, cbQosTSCfgExtBurstTime 3. New object added ================ cbQosPolicyDiscontinuityTime 4. Added new type (srp-priority) to ================================== PoliceAction', 'Added setDei(16), setDeiImposition(17) to the TC PoliceAction. Added dei(14), deiImposition(15) to the TC SetFeatureType. Added dei(9) to the TC REDMechanism. Added objects cbQosSetCfgIpPrecedenceTunnelValue, cbQosSetCfgIpDscpTunnelValue, cbQosSetCfgDei, cbQosSetCfgDeiImposition to CbQosSetCfgEntry Added objects cbQosPoliceCfmColorCfmRate, cbQosPoliceCfmColorExdRate, cbQosPoliceCfmColorVltRate, cbQosPoliceExdColorExdRate, cbQosPoliceExdColorVltRate, cbQosPoliceVltColorVltRate to cbQosPoliceColorStatsEntry. Added Objects cbQosIPHCCfgEnabled to cbQosIPHCCfgEntry Added Objects cbQosIPHCRtpFullHdrPktOverflow, cbQosIPHCRtpFullHdrPkt, cbQosIPHCRtpFullHdrPkt64, cbQosIPHCTcpFullHdrPktOverflow, cbQosIPHCTcpFullHdrPkt, cbQosIPHCTcpFullHdrPkt64 to cbQosIPHCStatsEntry Added ciscocbQosMIBComplianceRev10.', 'Added unconfigured(15) value to PoliceAction TC. Added cbQosCMFragmentPktOverflow, cbQosCMFragmentPkt, cbQosCMFragmentPkt64, cbQosCMFragmentByteOverflow, cbQosCMFragmentByte, cbQosCMFragmentByte64 in CbQosCMStatsEntry. Added evc(7) enum value in InterfaceType TC. Added cbQosEVC in CbQosServicePolicyEntry Changed comments for cbQosPolicyIndex and cbQosObjectsIndex. Added ciscocbQosMIBComplianceRev9.', '- Added cbQosSetCfgFrDe to hold the Fr-De marking configuration value in cbQosSetCfgTable. - Updated the optional groups of ciscocbQosMIBComplianceRev7 with cbQosSetCfgFrDeGroup. - Added MODULE-COMPLIANCE ciscocbQosMIBComplianceRev8.', 'Added account feature in QosObjectType.', 'Added cbQosC3plAccountCfgGroup and cbQosC3plAccountStatsGroup.', '-Added ratioRemaining in QueueingBandwidthUnits -Added l2CosInner in SetFeatureType -Added cbQosQueueingCfgPriorityLevel in cbQosQueueingCfgTable -Added cbQosSetCfgL2CosInnerValue in cbQosSetCfgTable -Added in cbQosREDClassCfgTable cbQosREDClassCfgMaxThresholdUnit, cbQosREDClassCfgMinThresholdUnit -Added cbQosQueueingClassCfgTable - Added following OBJECT-GROUPs cbQosQueueingCfgGroupRev2 cbQosSetCfgL2Group cbQosQueueingClassCfgGroup cbQosPoliceCfgGroupRev3 - Added MODULE-COMPLIANCE cisco cbQosMIBComplianceRev6', '1. Added cbQosTSCfgRate64 to cbQosTSCfgTable to support shaping rates greater than that fit in the range defined for cbQosTSCfgRate. 2. Created cbQosTSCfgExtGroup. 3. Created new compliance module ciscocbQosMIBComplianceRev5 which deprecates ciscocbQosMIBComplianceRev4.', "Added 'setL2CosInner' value to PoliceAction TC.", 'Added following enumerations to RedMechanism TC: mplsExp redDefault redUserDefault', '1. Added vlan-port as a new InterfaceType. 2. Created cbQosServicePolicyExtGroup.', "Added support for Estimate Bandwidth and its Corvil implementation. Corvil's algorithm generates the estimated bandwidth for a class of traffic from knowledge of the QoS targets such as delay and drop, and the observed traffic behavior.", 'Added setIpDscpTunnel, setIpPrecedenceTunnel to the PoliceAction TC. Added srpPriority, frFecnBecn, ipDscpTunnel, ipPrecedenceTunnel to the SetFeatureType TC. Added l2Cos, atmClp to the REDMechanism TC. Added cps to the CbQosRateType TC. Added CbQosTMSetType TC. Added cbQosQueueingCfgAggrQLimitTime to the cbQosQueueingCfgTable. Added cbQosREDClassCfgMinThresholdTime, cbQosREDClassCfgMaxThresholdTime to the cbQosREDClassCfgTable. Added cbQosPoliceCfgCellRate, cbQosPoliceCfgCellPir, cbQosPoliceCfgBurstCell, cbQosPoliceCfgExtBurstCell, cbQosPoliceCfgBurstTime, cbQosPoliceCfgExtBurstTime, cbQosPoliceCfgCdvt, cbQosPoliceCfgConformColor, cbQosPoliceCfgExceedColor to the cbQosPoliceCfgTable. Added cbQosTSCfgBurstTime, cbQosTSCfgExtBurstTime to the cbQosTSCfgTable. Added cbQosSetCfgSrpPriority, cbQosSetCfgFrFecnBecn to the cbQosSetCfgTable. Added cbQosSetStatsTable. Added cbQosPoliceColorStatsTable. Added cbQosTableMapCfgTable. Added cbQosTableMapValueCfgTable. Added cbQosTableMapSetCfgTable.', 'Added controlPlane to the InterfaceType TC. Added cbQosEntityIndex to the cbQosServicePolicyTable.', 'Added compression(9) in QosObjectType TC for IPHC; Added setMplsExpTopMost(11) in PoliceAction TC for POLICE; Added mplsExpTopMost(8) in SetFeatureType TC for SET; Added discardClass(13) in REDMechanism TC for WRED; Added CbQosRateType TC for POLICE and SHAPE; Added IPHCOption TC for IPHC; Added cbQosPoliceCfgRateType, cbQosPoliceCfgPercentRateValue, cbQosPoliceCfgPercentPirValue for POLICE; Added cbQosTSCfgRateType, cbQosTSCfgPercentRateValue for SHAPE; Added cbQosSetCfgMplsExpTopMostValue for SET; Added cbQosIPHCCfg and cbQosIPHCStats tables for IPHC.', 'Added new cbQosPoliceCfgRate64 to cbQosPoliceCfgEntry table to support policing rates greater than fit in the range defined for cbQosPoliceCfgRate', 'Added support for ECN; Pir policing; multiple police actions; added MPLS-EXP/ATM-CLP/DR-DE/ L2Cos/DiscardClass marking in police action; added MPLS-EXP and DiscardClass marking; modified ATM-CLP and FR-DE marking. Added objects to handle queue depth unit type and queue depth pair related objects (e.g., cbQosQueueingCfgQLimitUnits and cbQosQueueingCfgAggregateQLimit pair) to support queue depth in different units.', 'Added support for FR DE, ATM CLP and L2 marking. Added Bandwidth remaining percent option', 'Added support for Police Violate counters and DSCP WRED counters', 'Initial version of Class-based QoS configuration and statistical parameters MIB',))
if mibBuilder.loadTexts: ciscoCBQosMIB.setLastUpdated('201401240000Z')
if mibBuilder.loadTexts: ciscoCBQosMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoCBQosMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W. Tasman Drive San Jose, CA 95134-1706 USA Tel: +1 800 553-NETS E-mail: cs-qos@cisco.com')
if mibBuilder.loadTexts: ciscoCBQosMIB.setDescription("Cisco Class-Based QoS MIB ********************************** Overview ********************************** This MIB provides read access to Quality of Service (QoS) configuration and statistics information for Cisco platforms that support the Modular Quality of Service Command-line Interface (Modular QoS CLI). We recommend users of this MIB to review the user documentation of MQC based QoS features. Configuration information available through this MIB includes all ClassMap, PolicyMap, Match Statements, and Feature Actions configuration parameters. The definitions of each objects mentioned above are explained in the QoS objects section. Statistics available through this MIB include summary counts/rates by traffic class before and after any configured QoS policies are enforced. In addition, detailed feature-specific statistics are available for select PolicyMap features. Contact your Cisco representative to determine on which platforms the MIB is currently supported. ********************************** QoS Acronyms ********************************** BECN: Frame Relay Backward Explicit Congestion Notification CIR : Committed Information Rate DSCP: Differentiated Service Code Point EB : Estimate Bandwidth ECN : Explicite Congestion Notification FECN: Frame Relay Forward Explicit Congestion Notification IPHC: Internet Protocol Header Compression IPSLAs: IP Service Level Agreement Technologies PIR : Peak Information Rate PREC: Precedence QoS : Quality Of Services RED : Random Early Detect SRP : Spatial Reuse Protocol WRED: Weighted Random Early Detect C3PL: Cisco Common Classification Programming Language ********************************** MIB Objects ********************************** This MIB consists of the following object groups: 1 : cbQosServicePolicy 2 : cbQosInterfacePolicy 3 : cbQosFrameRelayVCPolicy 4 : cbQosATMPVCPolicy 5 : cbQosObjects 6 : cbQosPolicyMapCfg 7 : cbQosClassMapCfg 8 : cbQosMatchStmtCfg 9 : cbQosQueueingCfg 10: cbQosREDCfg 11: cbQosREDClassCfg 12: cbQosPoliceCfg 13: cbQosTSCfg 14: cbQosSetCfg 15: cbQosClassMapStats 16: cbQosMatchStmtStats 17: cbQosPoliceStats 18: cbQosQueueingStats 19: cbQosTSStats 20: cbQosREDClassStats 21: cbQosPoliceActionCfg 22: cbQosIPHCCfg 23: cbQosIPHCStats 24: cbQosSetStats 25: cbQosPoliceColorStats 26: cbQosTableMapCfg 27: cbQosTableMapValueCfg 28: cbQosTableMapSetCfg 29: cbQosEBCfg 30: cbQosEBStats 31: cbQosMeasureIPSLACfg 32: cbQosC3plAccountCfg 33: cbQosC3plAccountStats ********************************** Definitions ********************************** A logical interface in the context of this MIB is either a main-interface, a sub-interface, a Frame Relay DLCI, an ATM virtual circuit or the control-plane on the router. The (aggregate) control-plane on the router is defined as a collection of processes running at process level on the platform (route) processor. This includes the functions related to networking control capabilities such as routing, signaling, provisioning, as well as resource and service discovery. Also includes process switched traffic on the device. The term distributed control plane, in the context of this mib, represents the control-plane functionality at the level of individual linecards. This is only applicable for the case of distributed platforms. ********************************** QoS Objects ********************************** To understand Class-Based QoS features and how to navigate the MIB tables above, the key element is to comprehend the relationships among the different QoS objects. QoS objects consist of ClassMaps, Match Statements and PolicyMaps, and each Feature Actions. Match Statement - The specific match criteria to identify packets for classification purposes. ClassMap - A user-defined traffic class that contains one or many match statements used to classify packets into different categories. Feature Action - An action is a QoS feature. Features include police, traffic-shaping, queueing, random detect and packet marking(set). After the traffic is being classified, based on the traffic classification, we can apply these action to each traffic class. PolicyMap - A user-defined policy that associates each QoS action to the user-defined traffic class (ClassMap). Service Policy - Service policy is a policymap that is being attached to a logical interface. Because a policymap can also be a part of the hierarchical structure (inside a classmap), only a policymap that is directly attached to a logical interface is considered a service policy. Each service policy is uniquely identified by an index called cbQosPolicyIndex. This number is usually identical to its cbQosObjectsIndex as a policymap. ***************************************** Runtime Instance vs Configuration objects ***************************************** Each QoS objects have 2 sets of behaviours : 1: A configuration instance - Each QoS objects has it's configuration portion of information attached to it. This information does not change whether this object is attached on multiple logical interfaces and used multiple times. We uniquely identify each QoS object with identical configuration with the same index - cbQosConfigIndex. This index is used in all configuration related tables. 2: A runtime instance - Each QoS objects has it's statistical portion of information attached to it. This information changes when this object is attached on multiple logical interfaces and used in various different places. We uniquely identify each QoS runtime object instance with an index that is unique across multiple instances of the identical object - cbQosObjectsIndex. This index is used in all statistical related tables. In summary, a QoS object has 2 indexes associated with it: cbQosConfigIndex is used to identify it's configuration, which does not change regardless of number of times and where it is being used; and cbQosObjectsIndex is used to identify it's runtime statistics, depending on which logical interface and where in a given PolicyMap hierarchy this object is used, it may have multiple unique identifiers to distinguish each unique usage (instance) of the same object. ********************************** Navigation ********************************** The recommended method of navigating through all of the MIB tables is to start by learning the cbQosServicePolicyTable and cbQosObjectsTable MIB tables. In particular, Cisco Systems recommends understanding the cbQosObjectsIndex and cbQosParentObjectsIndex of each QoS feature. The cbQosPolicyIndex and cbQosObjectsIndex are system-assigned numbers that identify each unique instance of a QoS feature. These indexes are never reused between router reboots, even when changes are made to the QoS configuration. The cbQosPolicyIndex is designed to identify the service policies attached to logical interfaces, while the cbQosObjectsIndex is designed to identify each QoS feature on a specified device. The cbQosParentObjectsIndex is designed to show the hierarchical relationship of each QoS feature. ********************************** cbQosServicePolicyTable ********************************** Accessing cbQosServicePolicyTable requires cbQosPolicyIndex. This index is a system-assigned number to uniquely identify each service policy hanging off of each logical interface. Given cbQosPolicyIndex the tables provide the type of logical interface/media type on which this policy is applied, the direction in which this policy is enforced, and the SNMP interface index and/or the entity index of the underlying interface/entity. In the case of a policy being applied on a Frame Relay DLCI, the cbQosFrDLCI gives you the Frame Relay DLCI number to which this policy is attached. In the case of policy being attached to an ATM VC, cbQosAtmVPI and cbQosAtmVCI display the VPI and VCI of the ATM interface respectively. ********************************** cbQosObjectsTable ********************************** Accessing cbQosObjectsTable requires two indexes, cbQosPolicyIndex and cbQosObjectsIndex. Given a particular service policy on a given logical interface, there could be PolicyMaps, ClassMaps, Match Statements and Feature Actions being used. Each instance of these objects is uniquely identified by cbQosObjectsIndex. Users need to decide which QoS object is interesting and use the cbQosPolicyIndex and cbQosObjectsIndex to locate the right element of interest. This tables provides cbQosObjectsType, cbQosConfigIndex, and cbQosParentObjectsIndex. To understand the relationship of cbQosObjectsIndex, cbQosParentObjectsIndex and the hierarchical relationship of the QoS objects, consider the following QoS configuration example: Interface ethernet 0/1 Input Service Policy cntlWebTraffic ClassMap http match ip http set ip precedence 5 Output Service Policy cntlSNMP_Telnet ClassMap snmp match ip snmp shape average 8000 32 32 ClassMap Telnet match ip telnet shape average 10000 32 32 Interface ethernet 0/2 Input Service Policy cntlWebTraffic ClassMap http match ip http set ip precedence 5 Output Service Policy cntlSNMP_Telnet ClassMap snmp match ip snmp shape average 8000 32 32 ClassMap Telnet match ip telnet shape average 10000 32 32 *** In Ethernet 0/1 *** Assume the router assigned a cbQosConfigIndex=1024 and cbQosObjectsIndex=1084 to Policy cntlWebTraffic. Because it is attached to an interface, it has no parent QoS object, and thus cbQosParentObjectsIndex=0. In addition, because cntlWebTraffic is also the service policy of the interface, it has a unique cbQosPolicyIndex assigned to it. In most cases, it would be the same as the cbQosObjectsIndex, which is 1084 in this case. Therefore, the indexes are: cbQosPolicyIndex = 1084 cbQosObjectsIndex = 1084 cbQosConfigIndex = 1024 Assuming the router assigned a cbQosObjectsIndex=1085 and cbQosConfigIndex=1025 to ClassMap http, it is directly being used by Policy cntlWebTraffic, and therefore the cbQosParentObjectsIndex of ClassMap http will be 1084. Assuming the router assigned a cbQosConfigIndex=1026 and cbQosObjectsIndex=1086 to match ip http, it is directly used by ClassMap http, therefore the cbQosParentObjectsIndex of match ip http will be 1085. Assuming the router assigned a cbQosConfigIndex=1027 and cbQosObjectsIndex=1087 to set ip precedence 5, it is directly used by ClassMap http, therefore the cbQosParentObjectsIndex of match ip http will be 1085. Assuming the router assigned a cbQosConfigIndex=1028 and cbQosObjectsIndex=1088 to Policy cntlSNMP_Telnet. Because it is attached to an interface, it has no parent QoS object, and thus cbQosParentObjectsIndex=0. In addition, because cntlSNMP_Telnet is also the service policy of the interface, it has a unique cbQosPolicyIndex assigned to it. In most cases, it would be the same as the cbQosObjectsIndex, which is 1088 in this case. Assuming the router assigned a cbQosConfigIndex=1029 and cbQosObjectsIndex=1089 to ClassMap snmp, it is directly being used by Policy cntlSNMP_Telnet, and therefore the cbQosParentObjectsIndex of ClassMap snmp will be 1088. Assuming the router assigned a cbQosConfigIndex=1030 and cbQosObjectsIndex=1090 to match ip snmp, it is directly used by ClassMap snmp, and therefore the cbQosParentObjectsIndex of match ip snmp will be 1089. Assuming the router assigned a cbQosConfigIndex=1031 and cbQosObjectsIndex=1091 to shape average 8000 32 32, it is directly used by ClassMap snmp, therefore the cbQosParentObjectsIndex of match ip snmp will be 1089. Assuming the router assigned a cbQosConfigIndex=1032 and cbQosObjectsIndex=1092 to ClassMap Telnet, it is directly being used by Policy cntlSNMP_Telnet, and therefore the cbQosParentObjectsIndex of ClassMap Telnet will be 1088. Assuming the router assigned a cbQosConfigIndex=1033 and cbQosObjectsIndex=1093 to match ip telnet, it is directly used by ClassMap Telnet, and therefore the cbQosParentObjectsIndex of match ip telnet will be 1092. Assuming the router assigned a cbQosConfigIndex=1034 and cbQosObjectsIndex=1094 to shape 10000 32 32, it is directly used by ClassMap telnet, therefore the cbQosParentObjectsIndex of match ip telnet will be 1092. *** In Ethernet 0/2 *** Every objects will have a unique combination of cbQosPolicyIndex and cbQosObjectsIndex, but cbQosConfigIndex will be shared across the same objects that are applied in different places. ********************************** All Config Tables ********************************** Accessing config related tables requires the same index - cbQosConfigIndex. (Per precedence based tables requires a second index, which is IP precedence value) Users should have already gone through the cbQosObjectsTable at this point and understood each cbQosConfigIndex and the corresponding QoS objects. Users can uniquely identify each QoS object defined on the router and query the entries in each stats table on a per QoS object basis. ********************************** All Stats Tables ********************************** Accessing all stats related tables requires the same 2 indexes. They are cbQosPolicyIndex and cbQosObjectsIndex. (Per precedence based tables requires a third index, which is IP precedence value) Users should have already gone through the cbQosObjectsTable at this point and understood the relationship of each cbQosPolicyIndex and cbQosObjectsIndex pair and the corresponding QoS objects. Users can uniquely identify each QoS object defined on the router and query the entries in each stats table on a per QoS object basis.")
class QueueMechanism(TextualConvention, Integer32):
    description = 'This denotes which mechanism is used with QueueLimit. precedence Based on IP precedence dscp Based on DSCP values discardClass Based on discard class qosGroup Based on qosgroup class atmClp Based on atm-clp class mplsExp Based on MPLS Experimental class'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("precedence", 1), ("dscp", 2), ("discardClass", 3), ("qosGroup", 4), ("atmClp", 5), ("mplsExp", 6))

class QosObjectType(TextualConvention, Integer32):
    description = "Enums to indicate different QoS objects . policymap - The object in query is a PolicyMap, being attached on a logical interface. classmap - The object in query is a ClassMap, being used by it's parent PolicyMap. matchStatement - The object in query is a Match Statement, being used by it's parent ClassMap. queueing - The object in query is a queueing feature being applied on the parent ClassMap. randomDetect - The object in query is a Random Detect feature being applied on the parent ClassMap. trafficShaping - The object in query is a traffic-shaping feature being applied on the parent ClassMap. police - The object in query is a Police feature being applied on the parent ClassMap. set - The object in query is a Packet Marking feature being applied on the parent ClassMap. compression - The object in query is a IP header compression feature being applied on the parent ClassMap. ipslaMeasure - The object in query is Measure IPSLAs feature being applied on the parent ClassMap. account - The object in query is C3Pl_Account feature being applied on the parent ClassMap."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))
    namedValues = NamedValues(("policymap", 1), ("classmap", 2), ("matchStatement", 3), ("queueing", 4), ("randomDetect", 5), ("trafficShaping", 6), ("police", 7), ("set", 8), ("compression", 9), ("ipslaMeasure", 10), ("account", 11))

class TrafficDirection(TextualConvention, Integer32):
    description = 'Enums to indicate whether the Policymap is for Input or Output direction.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("input", 1), ("output", 2))

class QosClassInfo(TextualConvention, Integer32):
    description = 'Enums to indicate whether the Classmap is for Match All or Match Any.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("none", 1), ("matchAll", 2), ("matchAny", 3))

class QosMatchInfo(TextualConvention, Integer32):
    description = 'Enums to indicate whether the MatchStatement is matching on negated criteria (Match Not).'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("none", 1), ("matchNot", 2))

class InterfaceType(TextualConvention, Integer32):
    description = 'Enums to indicate the type of logical interface to which a particular service policy is attached. Main Interface - Service policy is attached on the main interface. Sub Interface - Service policy is attached on the sub interface. Frame Relay DLCI - Service policy is attached on the a Frame Relay DLCI. ATM VC - Service policy is attached on the an ATM Virtual Circuit. Control Plane - Service policy is attached to the control plane of the device. Vlan Port - Service policy is attached to a particular vlan of a layer 2 interface that can carry traffic on multiple vlans. EVC - Service policy is attached to the Ethernet Virtual Connections.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))
    namedValues = NamedValues(("mainInterface", 1), ("subInterface", 2), ("frDLCI", 3), ("atmPVC", 4), ("controlPlane", 5), ("vlanPort", 6), ("evc", 7))

class QueueingBandwidthUnits(TextualConvention, Integer32):
    description = 'The units of the bandwidth, used to allocate bandwidth. Bandwidth can be either an absolute kbps number, or be expressed as a percentage of the available bandwidth. kbps Allocated bandwidth in Kilo bits Per Second percentage Allocated bandwidth as percentage of reference bandwidth. percentageRemaining Percentage of unallocated bandwidth reserved for this class. ratioRemaining Ratio of unallocated bandwidth reserved for this class (in relation to other classes). perThousand Allocated bandwidth in Parts Per Thousand perMillion Allocated bandwidth in Parts Per Million.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("kbps", 1), ("percentage", 2), ("percentageRemaining", 3), ("ratioRemaining", 4), ("perThousand", 5), ("perMillion", 6))

class TrafficShapingLimit(TextualConvention, Integer32):
    description = "The limit used by the traffic-shaping feature. This value may be 'average' or 'peak', which indicates whether it is shaping by average rate or peak rate."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("average", 1), ("peak", 2))

class PoliceAction(TextualConvention, Integer32):
    description = 'The available actions taken on packets upon conforming, exceeding or violating the configured police rate. Transmit - Transmit the packet if the packet conforms or exceeds the configured police rate. Set IP DSCP - Set the IP DSCP value if the packet conforms or exceeds the configured police rate. Set IP Precedence - Set the IP precedence value if the packet conforms or exceeds the configured police rate. Set Qos Group - Set the QoS Group value if the packet conforms or exceeds the configured police rate. Set MPLS Exp - Set the MPLS Experimental Imposition vaule for the applicable action. Set ATM CLP - Set the ATM CLP bit for the applicable action. Set FR DE - Set the FR DE bit for the applicable action. Set L2 COS - Set the 802.1p priority field in 802.1Q VLAN tag for the applicable action. Set Discard Class - Set the Discard Class value for the applicable action. Drop - Drop the packet if the packet conforms or exceeds the configured police rate. Set MPLS Exp TopMost - Set the MPLS Experimental TopMost vaule for the applicable action. Set IP DSCP Tunnel - Set the IP DSCP Tunnel value for the applicable action. Set IP Precedence Tunnel - Set the IP Precedence Tunnel value for the applicable action. Set Inner L2 COS - Set the 802.1p priority field in inner 802.1q VLAN tag (QinQ) for the applicable action. Unconfigured - No action is set for this police. Set Dei - Set the DEI(Discard Eligiable Indicator) bit in the topmost 802.1ad header. Set Dei Imposition - Set the DEI bit on all imposed 802.1ad header. Set SRP Priority - Sets the spatial reuse protocol (SRP) priority value of an outgoing packet.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18))
    namedValues = NamedValues(("transmit", 1), ("setIpDSCP", 2), ("setIpPrecedence", 3), ("setQosGroup", 4), ("drop", 5), ("setMplsExp", 6), ("setAtmClp", 7), ("setFrDe", 8), ("setL2Cos", 9), ("setDiscardClass", 10), ("setMplsExpTopMost", 11), ("setIpDscpTunnel", 12), ("setIpPrecedenceTunnel", 13), ("setL2CosInner", 14), ("unconfigured", 15), ("setDei", 16), ("setDeiImposition", 17), ("setSrpPriority", 18))

class SetFeatureType(TextualConvention, Bits):
    description = 'Bit-wise representation of packet marking feature available today. For historical reason, both packet marking and SET terms have been used across Cisco Class-Based QOS, but they have the same meaning. This feature is used to mark/set appropriate fields(e.g, dscp, precedence, mpls-experimental -topmost,l2CosInner) for applicable packets. ipDscp Packet set/mark with DSCP bit ipPrecedence Packet set/mark with Precedence bit qosGroupNumber Packet set/mark with QosGroup bit frDeBit Packet set/mark with FR-DE bit l2Cos Packet set/mark with COS bit mplsExp Packet set/mark with MPLS Experimental bit discardClass Packet set/mark with discard class bit mplsExpTopMost Packet set/mark with MPLS Experimental topmost bit srpPriority Packet set/mark with srp priority bit frFecnBecn Packet set/mark with FECN bit ipDscpTunnel Packet set/mark with DSCP tunnel bit ipPrecedenceTunnel Packet set/mark with Precedence tunnel bit l2CosInner Packet set/mark with COS inner bit dei Packet set/mark with DEI bit deiImposition Packet set/mark with DEI Imposition bit'
    status = 'current'
    namedValues = NamedValues(("ipDscp", 0), ("ipPrecedence", 1), ("qosGroupNumber", 2), ("frDeBit", 3), ("atmClpBit", 4), ("l2Cos", 5), ("mplsExp", 6), ("discardClass", 7), ("mplsExpTopMost", 8), ("srpPriority", 9), ("frFecnBecn", 10), ("ipDscpTunnel", 11), ("ipPrecedenceTunnel", 12), ("l2CosInner", 13), ("dei", 14), ("deiImposition", 15))

class REDMechanism(TextualConvention, Integer32):
    description = 'This denotes which mechanism is used with RED. precedence Based on IP precedence dscp Based on DSCP values discardClass Based on discard class l2Cos Based on L2-COS class atmClp Based on ATM-CLP class mplsExp Based on MPLS Experimental values redDefault Default RED profile redUserDefault User specified Default RED profile dei Based on DEI bit'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))
    namedValues = NamedValues(("precedence", 1), ("dscp", 2), ("discardClass", 3), ("l2Cos", 4), ("atmClp", 5), ("mplsExp", 6), ("redDefault", 7), ("redUserDefault", 8), ("dei", 9))

class CbQosQueueUnitType(TextualConvention, Integer32):
    description = "A value that represents an unit type of queue size. packets(1) Represents the UNITS of 'packets' for queue size. cells(2) Represents the UNITS of 'cells' for queue size. bytes(3) Represents the UNITS of 'bytes' for queue size. ms(4) Represents the UNITS of 'milli-seconds' for queue size us(5) Represents the UNITS of 'micro-seconds' for queue size percentage(6) Represents the UNITS of 'percentage' for queue size To support future extensions, the CbQosQueueUnitType textual convention SHOULD NOT be sub-typed in object type definitions. It MAY be sub-typed in compliance statements in order to require only a subset of these queue size types for a compliant implementation. Implementations must ensure that CbQosQueueUnitType objects and any dependent object (e.g. CbQosQueueDepth) are consistent. An inconsistentValue error must be generated if an attempt to change an CbQosQueueUnitType object would lead to an undefined CbQosQueueDepth value. In particular, CbQoSQueueUnitType/CbQosQueueDepth pairs must be changed together if the CbQosQueueUnitType type changes (e.g. from packets(1) to cells(2))."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("packets", 1), ("cells", 2), ("bytes", 3), ("ms", 4), ("us", 5), ("percentage", 6))

class CbQosQueueDepth(TextualConvention, Unsigned32):
    description = 'Denotes a generic Queue depth value. An CbQoSQueueDepth value is always interpreted within the context of an CbQosQueueUnitType value. Every usage of the CbQosQueueDepth textual convention is required to specify the CbQosQueueUnitType object which provides the context. It is suggested that the CbQoSQueueUnitType object is logically registered before the object(s) which use the CbQosQueueDepth textual convention if they appear in the same logical row. The value of an CbQosQueueDepth object must always be consistent with the value of the associated CbQosQueueUnitType object. Attempts to set an CbQosQueueDepth object to a value which is inconsistent with the associated CbQosQueueUnitType must fail with an inconsistentValue error.'
    status = 'current'

class CbQosRateType(TextualConvention, Integer32):
    description = 'The type of rate. Rate type can be either an absolute bps number, or be expressed as a percentage of the available interface bandwidth, or an absolute cps number. bps Bits Per Second percentage % cps Cells Per Second perThousand Parts Per Thousand perMillion Parts Per Million'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("bps", 1), ("percentage", 2), ("cps", 3), ("perThousand", 4), ("perMillion", 5))

class IPHCOption(TextualConvention, Integer32):
    description = 'Enums to indicate the type of IP header compression. rtp(1) UDP/RTP compression. tcp(2) TCP compression. bothRtpTcp(3) Both UDP/RTP and TCP compression.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("rtp", 1), ("tcp", 2), ("bothRtpTcp", 3))

class CbQosTMSetType(TextualConvention, Integer32):
    description = 'The available packet marking types which can use tablemap to establish to-from relationship for enhanced packeting marking.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6))
    namedValues = NamedValues(("none", 0), ("ipDscp", 1), ("ipPrecedence", 2), ("qosGroup", 3), ("l2Cos", 4), ("mplsExpImp", 5), ("mplsExpTop", 6))

class CbQosEBType(TextualConvention, Integer32):
    description = 'A value that indicates the type of bandwidth estimate algorithm. typeNone no algorithm is selected typeCorvil algorithm based on Corvil bandwidth calculation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("typeNone", 0), ("typeCorvil", 1))

class CbQosEBCtd(TextualConvention, OctetString):
    description = 'A CTD (Corvil Traffic Descriptor) specific value.'
    status = 'current'

class SetC3plAccountFeatureType(TextualConvention, Integer32):
    description = 'Enums to indicate drop types for C3PL Account action.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("queueing", 0), ("wred", 1), ("police", 2))

ciscoCBQosMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1))
ciscocbQosMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 2))
cbQosServicePolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1))
cbQosInterfacePolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 2))
cbQosFrameRelayVCPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 3))
cbQosATMPVCPolicy = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 4))
cbQosObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 5))
cbQosPolicyMapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 6))
cbQosClassMapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 7))
cbQosMatchStmtCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 8))
cbQosQueueingCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9))
cbQosREDCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 10))
cbQosREDClassCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11))
cbQosPoliceCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12))
cbQosTSCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13))
cbQosSetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14))
cbQosClassMapStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15))
cbQosMatchStmtStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16))
cbQosPoliceStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17))
cbQosQueueingStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18))
cbQosTSStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19))
cbQosREDClassStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20))
cbQosPoliceActionCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21))
cbQosIPHCCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 22))
cbQosIPHCStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23))
cbQosSetStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24))
cbQosPoliceColorStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25))
cbQosTableMapCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 26))
cbQosTableMapValueCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 27))
cbQosTableMapSetCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28))
cbQosEBCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 29))
cbQosEBStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 30))
cbQosMeasureIPSLACfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 31))
cbQosQueueingClassCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32))
cbQosC3plAccountCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 33))
cbQosC3plAccountStats = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34))
cbQosQueueingClassCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32, 1), )
if mibBuilder.loadTexts: cbQosQueueingClassCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingClassCfgTable.setDescription('This table specifies the configuration information for weighted queue limit action per IP precedence basis.')
cbQosQueueingClassCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassConfigIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosQlimitWeightValue"))
if mibBuilder.loadTexts: cbQosQueueingClassCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingClassCfgEntry.setDescription('Each entry in this table describes configuration information about a weighted queueing action. The information includes: Threshold value, Units and wieght Type (ip,dscp,mplsExp) This table contains configuration information only, no statistics associated with it. Therefore, it is indexed by the cbQosConfigIndex(which refers to cbQosConfigIndex of cbQosQueueingCfgEntry) and cbQosQueueingClassConfigIndex cbQosQlimitWeightValue i.e(prec,dscp,discard-class,qos-group,atm-clp, mplsExp) of each Weighted Queueing Action.')
cbQosQueueingClassConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535)))
if mibBuilder.loadTexts: cbQosQueueingClassConfigIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingClassConfigIndex.setDescription('This objects depict the config index for Weighted Queue limit configured.')
cbQosQlimitWeightValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: cbQosQlimitWeightValue.setStatus('current')
if mibBuilder.loadTexts: cbQosQlimitWeightValue.setDescription('This object depict the weight value configured for weighted Queue-limit. The Weight value is IP precedence or IP DSCP of this entry.')
cbQosQueueingClassCfgThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32, 1, 1, 3), CbQosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingClassCfgThreshold.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingClassCfgThreshold.setDescription('This object is used to depict the Threshold value for the Weighted Queue Limit.')
cbQosQueueingClassCfgThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32, 1, 1, 4), CbQosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingClassCfgThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingClassCfgThresholdUnit.setDescription('This object is used to depict the Threshold Unit for the Weighted Queue Limit')
cbQosQueueingClassCfgQLimitWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 32, 1, 1, 5), QueueMechanism()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingClassCfgQLimitWeight.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingClassCfgQLimitWeight.setDescription('This objects depict the weight value for Weighted Queue limit configured i.e(precedence,dscp,qos-group,atm-clp,discard-class,mplsExp) .')
cbQosMeasureIPSLACfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 31, 1), )
if mibBuilder.loadTexts: cbQosMeasureIPSLACfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosMeasureIPSLACfgTable.setDescription('This table specifies configuration information for measure type IPSLA action. The measure action relates the policy class to a specific IPSLAs auto group. Configuration of measure action of type IPSLA results in automatic generation of IPSLAs synthetic test operations when the policy is attached to interface. The operations are created according to the characteristics specified and to the destinations specified in IPSLA auto group. The IPSLAs sythentic test operations measure network statistics such as latency, packet loss and jitter. This table is to be used only for retrieving the measure action configuration information.')
cbQosMeasureIPSLACfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 31, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroupIndex"))
if mibBuilder.loadTexts: cbQosMeasureIPSLACfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosMeasureIPSLACfgEntry.setDescription('Each entry describes configuration information about one instance of IPSLAs measure action in the policy map. The table is indexed by the cbQosConfigIndex and cbQosMeasureIPSLACfgGroupIndex.')
cbQosMeasureIPSLACfgGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 31, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMeasureIPSLACfgGroupIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosMeasureIPSLACfgGroupIndex.setDescription('An arbitrary (system-assigned) index for each instance of IPSLAs measure action. The index is unique for each instance for a particular class in particular policy-map. For example consider following configuration: policy-map p1 class c1 measure type ip-sla group g1 measure type ip-sla group g2 class c2 measure type ip-sla group g3 In this case the cbQosMeasureIPSLACfgGroupIndex value for first measure action instance under class c1 will be 1, for second instance it will be 1, and so on. The value for the index will start over again from 1 for class c2.')
cbQosMeasureIPSLACfgGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 31, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMeasureIPSLACfgGroupName.setStatus('current')
if mibBuilder.loadTexts: cbQosMeasureIPSLACfgGroupName.setDescription('IPSLAs auto group name. Group is an aggregation of operations sharing the same type, for example udp-jitter type, with common characteristics like frequency, interval etc. Groups are formed by policies dictated either by customer, or by service level or any other requirements.')
cbQosServicePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1), )
if mibBuilder.loadTexts: cbQosServicePolicyTable.setStatus('current')
if mibBuilder.loadTexts: cbQosServicePolicyTable.setDescription('This table describes the logical interfaces/media types and the policymap that are attached to it.')
cbQosServicePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"))
if mibBuilder.loadTexts: cbQosServicePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosServicePolicyEntry.setDescription('Each entry in this table describes to which a logical interface a given policymap is attached. Depending on the logical interface/media type, some fields may have meaningful values, and some may not. Please see each individual descriptions.')
cbQosPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cbQosPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosPolicyIndex.setDescription('An arbitrary (system-assigned) index for all service policies (PolicyMap that has been attached to a given logical interface).')
cbQosIfType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 2), InterfaceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIfType.setStatus('current')
if mibBuilder.loadTexts: cbQosIfType.setDescription('This describes the logical interface/media type to which this service policy is attached.')
cbQosPolicyDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 3), TrafficDirection()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPolicyDirection.setStatus('current')
if mibBuilder.loadTexts: cbQosPolicyDirection.setDescription('This indicates the direction of traffic for which this service policy is applied.')
cbQosIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 4), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIfIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosIfIndex.setDescription('ifIndex for the interface to which this service is attached. This field makes sense only if the logical interface has a snmp ifIndex. For e.g. the value of this field is meaningless when the cbQosIfType is controlPlane.')
cbQosFrDLCI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 5), DlciNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosFrDLCI.setStatus('current')
if mibBuilder.loadTexts: cbQosFrDLCI.setDescription('DLCI for the FRVC to which this service is attached. This field only make sense if the service policy is attached to a Frame Relay DLCI.')
cbQosAtmVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosAtmVPI.setStatus('current')
if mibBuilder.loadTexts: cbQosAtmVPI.setDescription('VPI for the ATMVC to which this service is attached. This field only make sense if the service policy is attached to a ATM VC.')
cbQosAtmVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosAtmVCI.setStatus('current')
if mibBuilder.loadTexts: cbQosAtmVCI.setDescription('VCI for the ATMVC to which this service is attached. This field only make sense if the service policy is attached to a ATM VC.')
cbQosEntityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 8), EntPhysicalIndexOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEntityIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosEntityIndex.setDescription('In cases where the policy is attached to an entity e.g. control-plane, this object represents the entity physical index of the entity to which the policy has been attached. A value zero may be returned if the policy is not attached to a physical entity or the entPhysicalTable is not supported on the SNMP agent.')
cbQosVlanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 9), VlanIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosVlanIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosVlanIndex.setDescription("If the service policy is attached to a particular vlan on a trunk or multi-vlan access port, then this object specifies the corresponding VLAN. In all other cases the value of this object is '0'.")
cbQosEVC = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEVC.setStatus('current')
if mibBuilder.loadTexts: cbQosEVC.setDescription('for the EVC to which this service is attached. This field only make sense if the service policy is attached to an EVC.')
cbQosPolicyDiscontinuityTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 11), TimeStamp()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPolicyDiscontinuityTime.setStatus('current')
if mibBuilder.loadTexts: cbQosPolicyDiscontinuityTime.setDescription('The value of sysUpTime on the most recent occasion at which any one or more objects of cbQosServicePolicyEntry table for a given instance suffered a discontinuity. If no such discontinuities have occurred since the last re-initialization of the local management subsystem, this object contains a zero value.')
cbQosParentPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 1, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosParentPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosParentPolicyIndex.setDescription('The value refering to service-policy index of a virtual interface on which PolicyMap applied directly. Value set would imply the entry is for a physical interface which is a member of a virtual interface. Value zero implies the entry is for a interface on which PolicyMap applied directly.')
cbQosInterfacePolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 2, 1), )
if mibBuilder.loadTexts: cbQosInterfacePolicyTable.setStatus('current')
if mibBuilder.loadTexts: cbQosInterfacePolicyTable.setDescription('This table describes the service polices that are attached to main and sub interfaces.')
cbQosInterfacePolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 2, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyDirection"))
if mibBuilder.loadTexts: cbQosInterfacePolicyEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosInterfacePolicyEntry.setDescription('Using ifIndex and Direction, each unique index pair translates to a service policy that is attached to a main/sub interface, for particular traffic direction.')
cbQosIFPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 2, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIFPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosIFPolicyIndex.setDescription('An arbitrary (system-assigned) index for all Service Policies. This is identical to cbQosPolicyIndex.')
cbQosFrameRelayPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 3, 1), )
if mibBuilder.loadTexts: cbQosFrameRelayPolicyTable.setStatus('current')
if mibBuilder.loadTexts: cbQosFrameRelayPolicyTable.setDescription('This table describes the service polices that are attached to Frame Relay DLCIs.')
cbQosFrameRelayPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 3, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosFrDLCI"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyDirection"))
if mibBuilder.loadTexts: cbQosFrameRelayPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosFrameRelayPolicyEntry.setDescription('Using ifIndex, FR DLCI, and Direction, each unique index combination translates to a service policy that is attached to a FR DLCI, for particular traffic direction.')
cbQosFRPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 3, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosFRPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosFRPolicyIndex.setDescription('An arbitrary (system-assigned) index for all Service Policies. This is identical to cbQosPolicyIndex.')
cbQosATMPVCPolicyTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 4, 1), )
if mibBuilder.loadTexts: cbQosATMPVCPolicyTable.setStatus('current')
if mibBuilder.loadTexts: cbQosATMPVCPolicyTable.setDescription('This table describes the policies that are attached to a ATM PVC.')
cbQosATMPVCPolicyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 4, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosAtmVPI"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosAtmVCI"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyDirection"))
if mibBuilder.loadTexts: cbQosATMPVCPolicyEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosATMPVCPolicyEntry.setDescription('Using ifIndex, VPI, VCI, and Direction, each unique index combination translates to a service policy that is attached to a ATM VC, for particular traffic direction.')
cbQosATMPolicyIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 4, 1, 1, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosATMPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosATMPolicyIndex.setDescription('An arbitrary (system-assigned) index for all Service Policies. This is identical to cbQosPolicyIndex.')
cbQosObjectsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 5, 1), )
if mibBuilder.loadTexts: cbQosObjectsTable.setStatus('current')
if mibBuilder.loadTexts: cbQosObjectsTable.setDescription('This table specifies QoS objects (classmap, policymap, match statements, and actions) hierarchy. This table also provide relationship between each PolicyIndex/ObjectsIndex pair and the ConfigIndex. ConfigIndex is essential for querying any configuration tables.')
cbQosObjectsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 5, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosObjectsEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosObjectsEntry.setDescription('A QoS object entry. Objects covered in this table are PolicyMap, ClassMap, Match Statements, and Actions. Each entry is indexed by system-generated cbQosPolicyIndex, and cbQosObjectsIndex, which represents a runtime instance of a QoS object. In conjunction with the cbQosParentObjectsIndex, a management station can determine the hierarchical relationship of those QoS objects. Given that classmaps and service policies can be nested entites, each entry in this table represents a unique instance of such object. Each runtime object instance has a corresponding config object, which contains the configuration information of such QoS object. The config object is indexed by cbQosConfigIndex.')
cbQosObjectsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 5, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cbQosObjectsIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosObjectsIndex.setDescription('An arbitrary (system-assigned) instance specific index for cbQosObjectsEntry.')
cbQosConfigIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 5, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosConfigIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosConfigIndex.setDescription('An arbitrary (system-assigned) config (instance independent) index for each Object. Each objects having the same configuration share the same config index.')
cbQosObjectsType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 5, 1, 1, 3), QosObjectType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosObjectsType.setStatus('current')
if mibBuilder.loadTexts: cbQosObjectsType.setDescription('The type of the QoS object.')
cbQosParentObjectsIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 5, 1, 1, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosParentObjectsIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosParentObjectsIndex.setDescription('The parent instance index of a QoS object. For a ClassMap, the parent index would be the index of the attached PolicyMap. For a Match Statement, the parent index would be the index of the ClassMap that uses this Match Statement. For an action, the parent index would be the index of the ClassMap that applies such Action. For a non-hierarchical PolicyMap, the parent would be the logical interface to which the policy is attached, thus the parent index would be 0. For a hierarchical PolicyMap, the parent index would be the index of the ClassMap to which the nested policy is attached.')
cbQosPolicyMapCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 6, 1), )
if mibBuilder.loadTexts: cbQosPolicyMapCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosPolicyMapCfgTable.setDescription('This table specifies Policymap configuration information')
cbQosPolicyMapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 6, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosPolicyMapCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosPolicyMapCfgEntry.setDescription("Each entry in this table describes configuration information about a policymap. The information includes: Name, and it's description. This table contains configuration information only, no statistics associated with it. Therefore, it is indexed by the cbQosConfigIndex of each PolicyMap.")
cbQosPolicyMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 6, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPolicyMapName.setStatus('current')
if mibBuilder.loadTexts: cbQosPolicyMapName.setDescription('Name of the Policymap.')
cbQosPolicyMapDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 6, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPolicyMapDesc.setStatus('current')
if mibBuilder.loadTexts: cbQosPolicyMapDesc.setDescription('Description of the PolicyMap.')
cbQosCMCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 7, 1), )
if mibBuilder.loadTexts: cbQosCMCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosCMCfgTable.setDescription('This table specifies ClassMap configuration information')
cbQosCMCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 7, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosCMCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosCMCfgEntry.setDescription("Each entry in this table describes configuration information about a classmap. The information includes: Name, and it's description and whether it is a Match-All or Match-Any class. This table contains configuration information only, no statistics associated with it. Therefore, it is indexed by the cbQosConfigIndex of each ClassMap.")
cbQosCMName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 7, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMName.setStatus('current')
if mibBuilder.loadTexts: cbQosCMName.setDescription('Name of the Classmap.')
cbQosCMDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 7, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDesc.setStatus('current')
if mibBuilder.loadTexts: cbQosCMDesc.setDescription('Description of the Classmap.')
cbQosCMInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 7, 1, 1, 3), QosClassInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMInfo.setStatus('current')
if mibBuilder.loadTexts: cbQosCMInfo.setDescription('Match all vs Match any in a given class.')
cbQosMatchStmtCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 8, 1), )
if mibBuilder.loadTexts: cbQosMatchStmtCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchStmtCfgTable.setDescription('This table specifies ClassMap configuration information')
cbQosMatchStmtCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 8, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosMatchStmtCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchStmtCfgEntry.setDescription('Each entry in this table describes configuration information about a MatchStatement. The information includes: Name, and whether it is a Match or Match-Not statement. This table contains configuration information only, no statistics associated with it. Therefore, it is indexed by the cbQosConfigIndex of each MatchStatement.')
cbQosMatchStmtName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 8, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchStmtName.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchStmtName.setDescription('Name of the Match Statement.')
cbQosMatchStmtInfo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 8, 1, 1, 2), QosMatchInfo()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchStmtInfo.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchStmtInfo.setDescription('Match vs Match Not in a given class.')
cbQosQueueingCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1), )
if mibBuilder.loadTexts: cbQosQueueingCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgTable.setDescription('This table specifies Queueing Action configuration information')
cbQosQueueingCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosQueueingCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgEntry.setDescription('Each entry in this table describes configuration information about a queueing action. The information includes: Bandwidth, Units, Flow Enabled, Priority Enabled, and Q size. This table contains configuration information only, no statistics associated with it. Therefore, it is indexed by the cbQosConfigIndex of each Queueing Action.')
cbQosQueueingCfgBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2000000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgBandwidth.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosQueueingCfgBandwidth.setDescription("The type of bandwidth configuration value represented by this object is indicated by the value of cbQosQueueingCfgBandwidthUnits for this entry. If the cbQosQueueingCfgBandwidthUnits value is 'kbps(1)' or 'percentage(2)', this object represents the configured bandwidth allocated to this traffic class.In the case of a bandwidth policy, this value represents a minimum bandwidth guarantee for the traffic class. In the case of a priority policy, this value represents the maximum rate at which priority service is guaranteed. If the cbQosQueueingCfgBandwidthUnits value is 'percentageRemaining(3)', this object represents the the percentage of the unallocated bandwidth to allocate to this class. If the cbQosQueueingCfgBandwidthUnits value is 'ratioRemaining(4)', this object represents the ratio value, relative to other class' configured ratio values, used to determine the portion of the unallocated bandwidth to apply to this class. cbQosQueueingCfgBandwidth object is superseded by cbQosQueueingCfgBandwidth64.")
cbQosQueueingCfgBandwidthUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 2), QueueingBandwidthUnits()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgBandwidthUnits.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgBandwidthUnits.setDescription('Units of the accompanying cbQosQueueingCfgbandwidth parameter')
cbQosQueueingCfgFlowEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgFlowEnabled.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgFlowEnabled.setDescription('Boolean to indicate if flow-based fair-queue is enabled for this class.')
cbQosQueueingCfgPriorityEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgPriorityEnabled.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgPriorityEnabled.setDescription('Boolean to indicate if low latency queueing (priority) is enabled for this class.')
cbQosQueueingCfgAggregateQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgAggregateQSize.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosQueueingCfgAggregateQSize.setDescription('Maximum number of packets that can be held in all the individual queues associated with this class before packets are dropped. cbQosQueueingCfgAggregateQSize object is superseded by cbQosQueueingCfgAggregateQLimit.')
cbQosQueueingCfgIndividualQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgIndividualQSize.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosQueueingCfgIndividualQSize.setDescription('Maximum number of packets that can be held in an individual Flow-based fair-queue associated with this class before it drops packets (once the AggregateQSize has been reached). This field only makes sense in the context of Flow-based fair-queueing. cbQosQueueingCfgIndividualQSize object is superseded by cbQosQueueingCfgIndividualQSize64.')
cbQosQueueingCfgDynamicQNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgDynamicQNumber.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgDynamicQNumber.setDescription('Number of dynamic queues supported when flow-based fair-queue is in use.')
cbQosQueueingCfgPrioBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(32, 64000000))).setUnits('Bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgPrioBurstSize.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgPrioBurstSize.setDescription('In the priority queue, this is the number of bytes allowed in a single burst. This parameter only makes sense if Priority is enabled')
cbQosQueueingCfgQLimitUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 9), CbQosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgQLimitUnits.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgQLimitUnits.setDescription('Represents the unit type of cbQosQueueingCfgAggregateQLimit object.')
cbQosQueueingCfgAggregateQLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 10), CbQosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgAggregateQLimit.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgAggregateQLimit.setDescription('Maximum allowed queue size for all the individual queues associated with this class. When the queue size exceed this value, the packets will be dropped.')
cbQosQueueingCfgAggrQLimitTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 11), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgAggrQLimitTime.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgAggrQLimitTime.setDescription('Maximum allowed queue size in milli-seconds for all individual queues associated with this class. It is internally converted to bytes by using the bandwidth that is available for the class.')
cbQosQueueingCfgPriorityLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 12), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgPriorityLevel.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgPriorityLevel.setDescription('The priority level of the queue into which packets matching this class are queued into. A larger priority level indicates higher priority.')
cbQosQueueingCfgBandwidth64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 13), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgBandwidth64.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgBandwidth64.setDescription("This object indicates the guaranteed bandwidth for a particular traffic class. The type of bandwidth configuration value represented by this object is indicated by the value of cbQosQueueingCfgBandwidthUnits. If the cbQosQueueingCfgBandwidthUnits value is 'kbps(1)' or 'percentage(2)', this object represents the configured bandwidth allocated to this traffic class.In the case of a bandwidth policy, this value represents a minimum bandwidth guarantee for the traffic class. In the case of a priority policy, this value represents the maximum rate at which priority service is guaranteed. If the cbQosQueueingCfgBandwidthUnits value is 'percentageRemaining(3)', this object represents the the percentage of the unallocated bandwidth to allocate to this class. If the cbQosQueueingCfgBandwidthUnits value is 'ratioRemaining(4)', this object represents the ratio value, relative to other class' configured ratio values, used to determine the portion of the unallocated bandwidth to apply to this class. If a device implements cbQosQueueingCfgBandwidth64, it should not implement cbQosQueueingCfgBandwidth.")
cbQosQueueingCfgIndividualQSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 9, 1, 1, 14), Unsigned64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCfgIndividualQSize64.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgIndividualQSize64.setDescription('Maximum number of packets that can be held in an individual Flow-based fair-queue associated with this class before it drops packets (once the AggregateQSize has been reached). If a device implements cbQosQueueingCfgIndividualQSize64, then it should not implement cbQosQueueingCfgIndividualQSize.')
cbQosREDCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 10, 1), )
if mibBuilder.loadTexts: cbQosREDCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosREDCfgTable.setDescription('This table specifies WRED Action configuration information')
cbQosREDCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 10, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosREDCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosREDCfgEntry.setDescription('Each entry in this table describes configuration information about a WRED Action. The table holds global (per traffic class) configuration like: Expon Weight and Mean Q size. This table contains configuration information only, no statistics associated with it. Therefore, it is indexed by the cbQosConfigIndex of each WRED Action.')
cbQosREDCfgExponWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDCfgExponWeight.setStatus('current')
if mibBuilder.loadTexts: cbQosREDCfgExponWeight.setDescription('The decay factor for the queue average calculation. The decay factor is equal to raising 2 to the power of N, where N could be up to 16. The smaller the number, the faster it decays.')
cbQosREDCfgMeanQsize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDCfgMeanQsize.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosREDCfgMeanQsize.setDescription('The average queue size, computed and used by the WRED algorithm. cbQosREDCfgMeanQsize object is superseded by cbQosREDMeanQsize.')
cbQosREDCfgDscpPrec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 10, 1, 1, 3), REDMechanism()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDCfgDscpPrec.setStatus('current')
if mibBuilder.loadTexts: cbQosREDCfgDscpPrec.setDescription('The Classification mechanism used by RED')
cbQosREDCfgECNEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 10, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDCfgECNEnabled.setStatus('current')
if mibBuilder.loadTexts: cbQosREDCfgECNEnabled.setDescription('Boolean to indicate if explicit congestion notification enabled for this class.')
cbQosREDClassCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1), )
if mibBuilder.loadTexts: cbQosREDClassCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosREDClassCfgTable.setDescription('This table specifies WRED Action configuration information on a per IP precedence basis.')
cbQosREDClassCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosREDValue"))
if mibBuilder.loadTexts: cbQosREDClassCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosREDClassCfgEntry.setDescription('Each entry in this table describes configuration information about a WRED Action. The table holds the per IP precedence based WRED configuration parameters. This table contains configuration information only, no statistics associated with it. Therefore, it is indexed by the cbQosConfigIndex and cbQosREDValue of each WRED Action.')
cbQosREDValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63)))
if mibBuilder.loadTexts: cbQosREDValue.setStatus('current')
if mibBuilder.loadTexts: cbQosREDValue.setDescription('The IP precedence or IP DSCP of this entry.')
cbQosREDCfgMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDCfgMinThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosREDCfgMinThreshold.setDescription('Minimum threshold in number of packets. When the average queue length reaches this number, WRED begins to drop packets with the specified IP precedence. cbQosREDCfgMinThreshold object is superseded by cbQosREDClassCfgMinThreshold.')
cbQosREDCfgMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32768))).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDCfgMaxThreshold.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosREDCfgMaxThreshold.setDescription('Maximum threshold in number of packets. When the average queue length exceeds this number, WRED drops all packets with the specified IP precedence. cbQosREDCfgMaxThreshold object is superseded by cbQosREDClassCfgMaxThreshold.')
cbQosREDCfgPktDropProb = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDCfgPktDropProb.setStatus('current')
if mibBuilder.loadTexts: cbQosREDCfgPktDropProb.setDescription('Denominator for the fraction of packets dropped when the average queue depth is MaxDepthThreshold. For example, if the denominator is 10, one out of every 10 packets is dropped when the average queue is at the MaxDepthThreshold.')
cbQosREDClassCfgThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 5), CbQosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDClassCfgThresholdUnit.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosREDClassCfgThresholdUnit.setDescription('Represents the unit type to measure the RED thresholds. The objects covered are cbQosREDClassCfgMinThreshold and cbQosREDClassCfgMaxThreshold cbQosREDClassCfgThresholdUnit object is superseded by cbQosREDClassCfgMinThreshold, cbQosREDClassCfgMaxThreshold.')
cbQosREDClassCfgMinThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 6), CbQosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDClassCfgMinThreshold.setStatus('current')
if mibBuilder.loadTexts: cbQosREDClassCfgMinThreshold.setDescription('The minimum WRED threshold value. When the average queue length reaches this number, WRED begins to drop packets according to REDMechanism specificed in cbQosREDCfgDscpPrec.')
cbQosREDClassCfgMaxThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 7), CbQosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDClassCfgMaxThreshold.setStatus('current')
if mibBuilder.loadTexts: cbQosREDClassCfgMaxThreshold.setDescription('The maximum WRED threshold value. When the average queue length exceeds this number, WRED drops all packets according to REDMechanism specificed in cbQosREDCfgDscpPrec.')
cbQosREDClassCfgMinThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 8), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDClassCfgMinThresholdTime.setStatus('current')
if mibBuilder.loadTexts: cbQosREDClassCfgMinThresholdTime.setDescription('The minimum WRED threshold value specified in milli-seconds. The milli-second value is internally converted to bytes by using the bandwidth that is available for the class.')
cbQosREDClassCfgMaxThresholdTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 9), Unsigned32()).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDClassCfgMaxThresholdTime.setStatus('current')
if mibBuilder.loadTexts: cbQosREDClassCfgMaxThresholdTime.setDescription('The maximum WRED threshold value specified in milli-seconds. The milli-second value is internally converted to bytes by using the bandwidth that is available for the class.')
cbQosREDClassCfgMaxThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 10), CbQosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDClassCfgMaxThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: cbQosREDClassCfgMaxThresholdUnit.setDescription('Represents the unit type to measure the RED Maximum thresholds. The objects covered is cbQosREDClassCfgMaxThreshold')
cbQosREDClassCfgMinThresholdUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 11, 1, 1, 11), CbQosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDClassCfgMinThresholdUnit.setStatus('current')
if mibBuilder.loadTexts: cbQosREDClassCfgMinThresholdUnit.setDescription('Represents the unit type to measure the RED Minimum thresholds. The objects covered is cbQosREDClassCfgMinThreshold')
cbQosPoliceCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1), )
if mibBuilder.loadTexts: cbQosPoliceCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgTable.setDescription('This table specifies Police Action configuration information.')
cbQosPoliceCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosPoliceCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgEntry.setDescription('Each entry in this table describes configuration information about a Police Action. The table holds Policy configuration parameters, such as rate, burst size, and actions based on traffic rates. This table contains configuration information only, no statistics associated with it. Therefore, it is indexed by the cbQosConfigIndex.')
cbQosPoliceCfgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgRate.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgRate.setDescription('The committed policing rate. This is the sustained rate permitted by policing. If a committed policing rate greater than 4294967295 is configurable on the system, then the configured rate is available in cbQosPoliceCfgRate64.')
cbQosPoliceCfgBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 512000000))).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgBurstSize.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosPoliceCfgBurstSize.setDescription('The amount of traffic, in bytes, in excess of the committed policing rate that will be permitted by the policing feature. cbQosPoliceCfgBurstSize object is superseded by cbQosPoliceCfgBurstSize64.')
cbQosPoliceCfgExtBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1000, 512000000))).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgExtBurstSize.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosPoliceCfgExtBurstSize.setDescription('The amount of traffic, in bytes, in excess of the burst limit, which may be conditionally permitted by the policing feature. The probability that the traffic is not permitted increases as the received burst size increases. cbQosPoliceCfgExtBurstSize object is superseded by cbQosPoliceCfgExtBurstSize64.')
cbQosPoliceCfgConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 4), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgConformAction.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosPoliceCfgConformAction.setDescription('Action to be taken when the traffic is within the configured rate, that is, the traffic rate is conforming. cbQosPoliceCfgConformAction object is superseded by cbQosPoliceActionCfgConform.')
cbQosPoliceCfgConformSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgConformSetValue.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosPoliceCfgConformSetValue.setDescription('New packet attribute values for each packets that conforms to the configured Police rate. cbQosPoliceCfgConformSetValue object is superseded by cbQosPoliceActionCfgConformSetValue.')
cbQosPoliceCfgExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 6), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgExceedAction.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosPoliceCfgExceedAction.setDescription('Action to be taken when the traffic exceeds the configured rate, that is, the traffic is non-conforming. cbQosPoliceCfgExceedAction object is superseded by cbQosPoliceActionCfgExceed.')
cbQosPoliceCfgExceedSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgExceedSetValue.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosPoliceCfgExceedSetValue.setDescription('New packet attribute values for each packets that conforms to the configured Police rate. cbQosPoliceCfgExceedSetValue object is superseded by cbQosPoliceActionCfgExceedSetValue.')
cbQosPoliceCfgViolateAction = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 8), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgViolateAction.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosPoliceCfgViolateAction.setDescription('Action to be taken when the traffic exceeds the conform and exceed token buckets. cbQosPoliceCfgViolateAction object is superseded by cbQosPoliceActionCfgViolate.')
cbQosPoliceCfgViolateSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(1, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgViolateSetValue.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosPoliceCfgViolateSetValue.setDescription('New packet attribute values for each packets that conforms to the Police violate action. The packet attibute values depend on the action that is taken for the particular packet. For example, if the action was to set the dscp value, this entry describes the value it is set to. cbQosPoliceCfgViolateSetValue object is superseded by cbQosPoliceActionCfgViolateSetValue.')
cbQosPoliceCfgPir = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(8000, 2000000000))).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgPir.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosPoliceCfgPir.setDescription('The committed policing rate. This is the peak rate permitted by two rate policing. cbQosPoliceCfgPir object is superseded by cbQosPoliceCfgPir64.')
cbQosPoliceCfgRate64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 11), Unsigned64()).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgRate64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgRate64.setDescription('The committed policing rate. This is the sustained rate permitted by policing.')
cbQosPoliceCfgRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 12), CbQosRateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgRateType.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgRateType.setDescription('The rate type that configured for CIR & PIR. 1 means rates are configured in bps. 2 means rates are configured in percentage. 3 means rates are configured in cps. 4 means rates are configured in parts per-thousand. 5 means rates are configured in parts per-million.')
cbQosPoliceCfgPercentRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('% of Interface Bandwidth').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgPercentRateValue.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgPercentRateValue.setDescription('The committed policing rate in percentage. Its value is valid only when cbQosPoliceCfgRateType equals to 2.')
cbQosPoliceCfgPercentPirValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('% of Interface Bandwidth').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgPercentPirValue.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgPercentPirValue.setDescription('The peak policing rate in percentage. Its value is valid only when cbQosPoliceCfgRateType equals to 2.')
cbQosPoliceCfgCellRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 15), Unsigned32()).setUnits('cells/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgCellRate.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgCellRate.setDescription('The committed policing rate in cells/second. Its value is valid only when cbQosPoliceCfgRateType equals to 3.')
cbQosPoliceCfgCellPir = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 16), Unsigned32()).setUnits('cells/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgCellPir.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgCellPir.setDescription('The peak policing rate in cells/second. Its value is valid only when cbQosPoliceCfgRateType equals to 3.')
cbQosPoliceCfgBurstCell = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 17), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgBurstCell.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgBurstCell.setDescription('The amount of traffic, in cells, in excess of the committed policing rate that will be permitted by the policing feature.')
cbQosPoliceCfgExtBurstCell = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 18), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('Cells').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgExtBurstCell.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgExtBurstCell.setDescription('The amount of traffic, in cells, in excess of the burst limit, which may be conditionally permitted by the policing feature. The probability that the traffic is not permitted increases as the received burst size increases.')
cbQosPoliceCfgBurstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 19), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgBurstTime.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgBurstTime.setDescription('The amount of traffic time, in ms, in excess of the committed policing rate that will be permitted by the policing feature. The milli-second value is internally converted to bytes by using the bandwidth that is available for the class.')
cbQosPoliceCfgExtBurstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 20), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgExtBurstTime.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgExtBurstTime.setDescription('The amount of traffic time, in ms, in excess of the burst limit, which may be conditionally permitted by the policing feature. The probability that the traffic is not permitted increases as the received burst size increases. The milli-second value is internally converted to bytes by using the bandwidth that is available for the class.')
cbQosPoliceCfgCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 21), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('micro-second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgCdvt.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgCdvt.setDescription('The ATM Cell Delay Variation Tolerance value.')
cbQosPoliceCfgConformColor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 22), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgConformColor.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgConformColor.setDescription('The Classmap name used in AF color-aware mode to specify the conform-color for the incoming packets which was marked by the previous node. At least conform-color must be specified. If only conform-color is specified, all other packets are assumed to be marked exceed. See RFC 2697, A Single Rate Three Color Marker. See RFC 2698, A Two Rate Three Color Marker.')
cbQosPoliceCfgExceedColor = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 23), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgExceedColor.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgExceedColor.setDescription('The Classmap name used in AF color-aware mode to specify the exceed-color for the incoming packets which was marked by the previous node. If both conform-color and exceed-color are specified, all other packets are assumed to be marked violate. Violate-color configuration is not needed.')
cbQosPoliceCfgConditional = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 24), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgConditional.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgConditional.setDescription('This object is use to depict weather police is configured as a conditioniler policer or not')
cbQosPoliceCfgBurstSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 25), Unsigned64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgBurstSize64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgBurstSize64.setDescription('This object indicated the amount of traffic, in bytes, in excess of the committed policing rate that will be permitted by the policing feature. If a device implements cbQosPoliceCfgBurstSize64, then it should not implement cbQosPoliceCfgBurstSize.')
cbQosPoliceCfgExtBurstSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 26), Unsigned64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgExtBurstSize64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgExtBurstSize64.setDescription('This object indicated the amount of traffic, in bytes, in excess of the burst limit, which may be conditionally permitted by the policing feature. The probability that the traffic is not permitted increases as the received burst size increases. If a device implements cbQosPoliceCfgBurstSize64, then it should not implement cbQosPoliceCfgBurstSize.')
cbQosPoliceCfgPir64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 12, 1, 1, 27), Unsigned64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfgPir64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgPir64.setDescription('This object indicates the committed policing rate. This is the peak rate permitted by two rate policing. If a device implements cbQosPoliceCfgPir64, then it should not implement cbQosPoliceCfgPir.')
cbQosPoliceActionCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1), )
if mibBuilder.loadTexts: cbQosPoliceActionCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceActionCfgTable.setDescription('This table specifies Police Action configuration information.')
cbQosPoliceActionCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgIndex"))
if mibBuilder.loadTexts: cbQosPoliceActionCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceActionCfgEntry.setDescription('Each entry in this table describes configuration information about Actions for one Police. The table holds Police action specific configuration parameters. This table is a sub-table for cbQosPoliceCfgTable. There is a 1-to-1 association between one entry here and one entry in cbQosPoliceCfgTable. This table contains configuration information only, no statistics associated with it. This table has two indices. The first is cbQosConfigIndex which is drived directly from cbQosPoliceCfgTable to keep the 1-to-1 mapping nature between two tables. The second is cbQosPoliceActionCfgIndex used to reference the actual actions configured. The maximum number of actions supported is determined by the system, which is 5 currently.')
cbQosPoliceActionCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cbQosPoliceActionCfgIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceActionCfgIndex.setDescription('An arbitrary (system-assigned) index for police actions that are defined by a police configuration.')
cbQosPoliceActionCfgConform = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1, 2), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceActionCfgConform.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceActionCfgConform.setDescription('Action to be taken when the traffic exceeds the conform and exceed token buckets.')
cbQosPoliceActionCfgConformSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceActionCfgConformSetValue.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceActionCfgConformSetValue.setDescription('New packet attribute values for each packet set by police action defined in cbQosPoliceActionCfgConform. This object will be set to zero if the corresponding police action does not require a set value, such as no action, drop action or transmit action.')
cbQosPoliceActionCfgExceed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1, 4), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceActionCfgExceed.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceActionCfgExceed.setDescription('Action to be taken when the traffic exceeds the conform and exceed token buckets.')
cbQosPoliceActionCfgExceedSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1, 5), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceActionCfgExceedSetValue.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceActionCfgExceedSetValue.setDescription('New packet attribute values for each packet set by police action defined in cbQosPoliceActionCfgExceed. This object will be set to zero if the corresponding police action does not require a set value, such as no action, drop action or transmit action.')
cbQosPoliceActionCfgViolate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1, 6), PoliceAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceActionCfgViolate.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceActionCfgViolate.setDescription('Action to be taken when the traffic exceeds the conform and exceed token buckets.')
cbQosPoliceActionCfgViolateSetValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 21, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceActionCfgViolateSetValue.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceActionCfgViolateSetValue.setDescription('New packet attribute values for each packet set by police action defined in cbQosPoliceActionCfgViolate. This object will be set to zero if the corresponding police action does not require a set value, such as no action, drop action or transmit action.')
cbQosTSCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1), )
if mibBuilder.loadTexts: cbQosTSCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgTable.setDescription('This table specifies traffic-shaping Action configuration information.')
cbQosTSCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosTSCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgEntry.setDescription('Each entry in this table describes configuration information about a traffic-shaping Action. The table holds Traffic Shaping configuration parameters, such as rate, burst size, and Shaping types. This table contains configuration information only, no statistics associated with it. Therefore, it is indexed by the cbQosConfigIndex.')
cbQosTSCfgRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgRate.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgRate.setDescription('The committed traffic-shaping rate. This is the sustained rate permitted by the traffic-shaping.')
cbQosTSCfgBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(256, 154400000))).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgBurstSize.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosTSCfgBurstSize.setDescription('The amount of traffic, in bits, in excess of the committed traffic-shaping rate that will be instantaneously permitted by this feature. cbQosTSCfgBurstSize object is superseded by cbQosTSCfgBurstSize64.')
cbQosTSCfgExtBurstSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 154400000))).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgExtBurstSize.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosTSCfgExtBurstSize.setDescription('The amount of traffic, in bits, in excess of the burst limit, which may be conditionally permitted by traffic-shaping feature. cbQosTSCfgExtBurstSize object is superseded by cbQosTSCfgExtBurstSize64.')
cbQosTSCfgAdaptiveEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgAdaptiveEnabled.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgAdaptiveEnabled.setDescription('This object indicates is adaptive traffic-shaping has been enabled.')
cbQosTSCfgAdaptiveRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(8000, 154400000))).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgAdaptiveRate.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgAdaptiveRate.setDescription('This object represents the current adaptive traffic shaping rate.')
cbQosTSCfgLimitType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 6), TrafficShapingLimit()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgLimitType.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgLimitType.setDescription('This object indicates if traffic-shaping is limiting traffic based on the peak rate or the average rate.')
cbQosTSCfgRateType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 7), CbQosRateType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgRateType.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgRateType.setDescription('The rate type that configured for traffic-shaping. 1 means rate is configured in bps. 2 means rate is configured in percentage. 4 means rates are configured in parts per-thousand. 5 means rates are configured in parts per-million.')
cbQosTSCfgPercentRateValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('% of Interface Bandwidth').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgPercentRateValue.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgPercentRateValue.setDescription('The committed traffic-shaping rate in percentage. Its value is valid only when cbQosTSCfgRateType equals to 2.')
cbQosTSCfgBurstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgBurstTime.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgBurstTime.setDescription('The amount of traffic, in ms, in excess of the committed traffic-shaping rate that will be instantaneously permitted by this feature. The milli-second value is internally converted to bits by using the bandwidth that is available for the class.')
cbQosTSCfgExtBurstTime = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295))).setUnits('milli-seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgExtBurstTime.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgExtBurstTime.setDescription('The amount of traffic, in ms, in excess of the burst limit, which may be conditionnally permitted by traffic-shaping feature. The milli-second value is internally converted to bits by using the bandwidth that is available for the class.')
cbQosTSCfgRate64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 11), Unsigned64()).setUnits('bits/second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgRate64.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgRate64.setDescription('The committed shape rate. This is the sustained rate permitted by shaping. This object represents the 64 bit value of object cbQosTSCfgRate')
cbQosTSCfgBurstSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 12), Unsigned64()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgBurstSize64.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgBurstSize64.setDescription('This object indicates the the amount of traffic, in bits, in excess of the committed traffic-shaping rate that will be instantaneously permitted by this feature. If a device implements cbQosTSCfgBurstSize64, then it should not implement cbQosTSCfgBurstSize.')
cbQosTSCfgExtBurstSize64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 13, 1, 1, 13), Unsigned64()).setUnits('bits').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSCfgExtBurstSize64.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgExtBurstSize64.setDescription('This object indicates the amount of traffic, in bits, in excess of the burst limit, which may be conditionally permitted by traffic-shaping feature. If a device implements cbQosTSCfgExtBurstSize64, then it should not implement cbQosTSCfgExtBurstSize.')
cbQosSetCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1), )
if mibBuilder.loadTexts: cbQosSetCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgTable.setDescription('This table specifies Packet Marking Action configuration information.')
cbQosSetCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosSetCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgEntry.setDescription('Each entry in this table describes configuration information about a Packet Marking Action. The table holds Packet Marking configuration parameters, such as type of packet marking and values being set to. This table contains configuration information only, no statistics associated with it. Therefore, it is indexed by the cbQosConfigIndex.')
cbQosSetCfgFeature = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 1), SetFeatureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgFeature.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgFeature.setDescription('The bit-wise position of each packet marking feature.')
cbQosSetCfgIpDSCPValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgIpDSCPValue.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgIpDSCPValue.setDescription('The IP DSCP value at which the packet is being set by the packet marking feature.')
cbQosSetCfgIpPrecedenceValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgIpPrecedenceValue.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgIpPrecedenceValue.setDescription('The IP precedence value at which the packet is being set by the packet marking feature.')
cbQosSetCfgQosGroupValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgQosGroupValue.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgQosGroupValue.setDescription('The QoS Group number at which the packet is being set by the packet marking feature.')
cbQosSetCfgL2CosValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgL2CosValue.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgL2CosValue.setDescription('The Layer 2 Cos value at which the packet is being set by the packet marking feature.')
cbQosSetCfgMplsExpValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 6), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgMplsExpValue.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgMplsExpValue.setDescription('The MPLS experimental value at which the packet is being set by the packet marking feature.')
cbQosSetCfgDiscardClassValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 7), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgDiscardClassValue.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgDiscardClassValue.setDescription('The Discard Class value at which the packet is being set by the packet marking feature.')
cbQosSetCfgMplsExpTopMostValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 8), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgMplsExpTopMostValue.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgMplsExpTopMostValue.setDescription('The MPLS experimental value on the topmost label at which the packet is being set by the packet marking feature.')
cbQosSetCfgSrpPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgSrpPriority.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgSrpPriority.setDescription('The SRP Priority value at which the packet is being set by the packet marking feature. The higher the value the higher the priority. SRP is a Cisco developed protocol. RFC 2892: The Cisco SRP MAC Layer Protocol.')
cbQosSetCfgFrFecnBecn = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 10), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgFrFecnBecn.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgFrFecnBecn.setDescription('This is a configurable parameter in percentage of the queue size. When the current queue size out of the queue limit is greater than this parameter, both Frame Relay FECN and BECN bits will be set for Frame Relay congestion notification mechanism.')
cbQosSetCfgL2CosInnerValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgL2CosInnerValue.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgL2CosInnerValue.setDescription("The value to be set in the 802.1p priority field in the inner 802.1q VLAN tag (QinQ). This object is applicable when cbQosSetCfgFeature has the 'l2CosInner' bit set.")
cbQosSetCfgFrDe = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 12), TruthValue().clone('false')).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgFrDe.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgFrDe.setDescription('The Discard Eligibility (DE) bit is used to indicate that a frame has lower importance than other frames. The DE bit is part of the Address field in the Frame Relay frame header. DTE devices can set the value of the DE bit of a frame to 1 to indicate that the frame has lower importance than other frames. When the network becomes congested, DCE devices will discard frames with the DE bit set before discarding those that do not. This reduces the likelihood of critical data being dropped by Frame Relay DCE devices during periods of congestion.')
cbQosSetCfgIpPrecedenceTunnelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 13), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgIpPrecedenceTunnelValue.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgIpPrecedenceTunnelValue.setDescription('The IP precedence value at which the packet is being set by the packet marking feature.')
cbQosSetCfgIpDSCPTunnelValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 14), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 63))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgIpDSCPTunnelValue.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgIpDSCPTunnelValue.setDescription('The IP DSCP value at which the packet is being set by the packet marking feature.')
cbQosSetCfgDei = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 15), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgDei.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgDei.setDescription('Indicates whether the DEI bit is set in the topmost 802.1ad header.')
cbQosSetCfgDeiImposition = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 14, 1, 1, 16), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetCfgDeiImposition.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgDeiImposition.setDescription('Indicates whether the DEI bit is set in the imposed 802.1ad header.')
cbQosCMStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1), )
if mibBuilder.loadTexts: cbQosCMStatsTable.setStatus('current')
if mibBuilder.loadTexts: cbQosCMStatsTable.setDescription('This table specifies ClassMap related Statistical information.')
cbQosCMStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosCMStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosCMStatsEntry.setDescription('Each entry in this table describes the statistical information about ClassMap. ClassMap specific information you can find in this table are : pre/post policy pkt/byte counts, bit rates, drop pkt/bytes and no buffer drops. This table contains statistical information only, no configuration information associated with it. Therefore, it is indexed by the instance specific IDs, such as cbQosPolicyIndex and cbQosObjectsIndex.')
cbQosCMPrePolicyPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosCMPrePolicyPktOverflow.setDescription('The upper 32 bits count of inbound packets prior to executing any QoS policies.')
cbQosCMPrePolicyPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosCMPrePolicyPkt.setDescription('The lower 32 bits count of inbound packets prior to executing any QoS policies.')
cbQosCMPrePolicyPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosCMPrePolicyPkt64.setDescription('The 64 bits count of inbound packets prior to executing any QoS policies.')
cbQosCMPrePolicyByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosCMPrePolicyByteOverflow.setDescription('The upper 32 bits count of inbound octets prior to executing any QoS policies.')
cbQosCMPrePolicyByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyByte.setStatus('current')
if mibBuilder.loadTexts: cbQosCMPrePolicyByte.setDescription('The lower 32 bits count of inbound octets prior to executing any QoS policies.')
cbQosCMPrePolicyByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosCMPrePolicyByte64.setDescription('The 64 bits count of inbound octets prior to executing any QoS policies.')
cbQosCMPrePolicyBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 7), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyBitRate.setStatus('current')
if mibBuilder.loadTexts: cbQosCMPrePolicyBitRate.setDescription('The bit rate of the traffic prior to executing any QoS policies.')
cbQosCMPostPolicyByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPostPolicyByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosCMPostPolicyByteOverflow.setDescription('The upper 32 bits count of outbound octets after executing QoS policies.')
cbQosCMPostPolicyByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPostPolicyByte.setStatus('current')
if mibBuilder.loadTexts: cbQosCMPostPolicyByte.setDescription('The lower 32 bits count of outbound octets after executing QoS policies.')
cbQosCMPostPolicyByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 10), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPostPolicyByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosCMPostPolicyByte64.setDescription('The 64 bits count of outbound octets after executing QoS policies.')
cbQosCMPostPolicyBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 11), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPostPolicyBitRate.setStatus('current')
if mibBuilder.loadTexts: cbQosCMPostPolicyBitRate.setDescription('The bit rate of the traffic after executing QoS policies.')
cbQosCMDropPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosCMDropPktOverflow.setDescription('The upper 32 bits counter of dropped pkts per class as the result of all features that can produce drops (e.g., police, random detect, etc.).')
cbQosCMDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosCMDropPkt.setDescription('The lower 32 bits counter of dropped pkts per class as the result of all features that can produce drops (e.g., police, random detect, etc.).')
cbQosCMDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosCMDropPkt64.setDescription('The 64 bits counter of dropped pkts per class as the result of all features that can produce drops (e.g., police, random detect, etc.).')
cbQosCMDropByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosCMDropByteOverflow.setDescription('The upper 32 bits counter of dropped bytes per class as the result of all features that can produce drops (e.g., police, random detect, etc.).')
cbQosCMDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropByte.setStatus('current')
if mibBuilder.loadTexts: cbQosCMDropByte.setDescription('The lower 32 bits counter of dropped bytes per class as the result of all features that can produce drops (e.g., police, random detect, etc.).')
cbQosCMDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 17), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosCMDropByte64.setDescription('The 64 bits counter of dropped bytes per class as the result of all features that can produce drops (e.g., police, random detect, etc.).')
cbQosCMDropBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 18), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropBitRate.setStatus('current')
if mibBuilder.loadTexts: cbQosCMDropBitRate.setDescription('The bit rate of the drops per class as the result of all features that can produce drops (e.g., police, random detect, etc.).')
cbQosCMNoBufDropPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMNoBufDropPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosCMNoBufDropPktOverflow.setDescription('The upper 32 bits drop packet count which occured due to a lack of SRAM buffers during output processing on an interface.')
cbQosCMNoBufDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMNoBufDropPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosCMNoBufDropPkt.setDescription('The lower 32 bits drop packet count which occured due to a lack of SRAM buffers during output processing on an interface.')
cbQosCMNoBufDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 21), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMNoBufDropPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosCMNoBufDropPkt64.setDescription('The 64 bits drop packet count which occured due to a lack of SRAM buffers during output processing on an interface.')
cbQosCMFragmentPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 22), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMFragmentPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosCMFragmentPktOverflow.setDescription('The upper 32 bits counter for aggregate fragment pkts')
cbQosCMFragmentPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMFragmentPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosCMFragmentPkt.setDescription('The lower 32 bits counter for aggregate fragment pkts')
cbQosCMFragmentPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 24), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMFragmentPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosCMFragmentPkt64.setDescription('The 64 bits counter for aggregate fragment pkts')
cbQosCMFragmentByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 25), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMFragmentByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosCMFragmentByteOverflow.setDescription('The upper 32 bits counter for aggregate fragment bytes')
cbQosCMFragmentByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMFragmentByte.setStatus('current')
if mibBuilder.loadTexts: cbQosCMFragmentByte.setDescription('The lower 32 bits counter for aggregate fragment bytes')
cbQosCMFragmentByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 27), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMFragmentByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosCMFragmentByte64.setDescription('The 64 bits counter for aggregate fragment bytes')
cbQosCMPrePolicyBitRate64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 28), CounterBasedGauge64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPrePolicyBitRate64.setStatus('current')
if mibBuilder.loadTexts: cbQosCMPrePolicyBitRate64.setDescription('The bit rate of the traffic prior to executing any QoS policies.This object is a 64-bit version of cbQosCMPrePolicyBitRate.')
cbQosCMPostPolicyBitRate64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 29), CounterBasedGauge64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMPostPolicyBitRate64.setStatus('current')
if mibBuilder.loadTexts: cbQosCMPostPolicyBitRate64.setDescription('The bit rate of the traffic after executing QoS policies. This object is a 64-bit version of cbQosCMPostPolicyBitRate.')
cbQosCMDropBitRate64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 15, 1, 1, 30), CounterBasedGauge64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosCMDropBitRate64.setStatus('current')
if mibBuilder.loadTexts: cbQosCMDropBitRate64.setDescription('The bit rate of the drops per class as the result of all features that can produce drops (e.g., police, random detect, etc.). This object is a 64-bit version of cbQosCMDropBitRate.')
cbQosMatchStmtStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1), )
if mibBuilder.loadTexts: cbQosMatchStmtStatsTable.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchStmtStatsTable.setDescription('This table specifies Match Statement related statistical information.')
cbQosMatchStmtStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosMatchStmtStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchStmtStatsEntry.setDescription('Each entry in this table describes the statistical information about Match Statement. Match Statement specific information you can find in this table are : Pre policy pkt/byte counters, and bit rates. This table contains statistical information only, no configuration information associated with it. Therefore, it is indexed by the instance specific IDs, such as cbQosPolicyIndex and cbQosObjectsIndex.')
cbQosMatchPrePolicyPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchPrePolicyPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchPrePolicyPktOverflow.setDescription('The upper 32 bits count of inbound packets prior to executing any QoS policies.')
cbQosMatchPrePolicyPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchPrePolicyPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchPrePolicyPkt.setDescription('The lower 32 bits count of inbound packets prior to executing any QoS policies.')
cbQosMatchPrePolicyPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchPrePolicyPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchPrePolicyPkt64.setDescription('The 64 bits count of inbound packets prior to executing any QoS policies.')
cbQosMatchPrePolicyByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchPrePolicyByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchPrePolicyByteOverflow.setDescription('The upper 32 bits count of inbound octets prior to executing any QoS policies.')
cbQosMatchPrePolicyByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchPrePolicyByte.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchPrePolicyByte.setDescription('The lower 32 bits count of inbound octets prior to executing any QoS policies.')
cbQosMatchPrePolicyByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1, 6), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchPrePolicyByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchPrePolicyByte64.setDescription('The 64 bits count of inbound octets prior to executing any QoS policies.')
cbQosMatchPrePolicyBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 16, 1, 1, 7), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosMatchPrePolicyBitRate.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchPrePolicyBitRate.setDescription('The bit rate of the traffic prior to executing any QoS policies.')
cbQosPoliceStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1), )
if mibBuilder.loadTexts: cbQosPoliceStatsTable.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceStatsTable.setDescription('This table specifies Police Action related Statistical information.')
cbQosPoliceStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosPoliceStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceStatsEntry.setDescription('Each entry in this table describes the statistical information about Police Action. Police Action specific information you can find in this table are : Conformed/Exceeded pkt/byte counters, bit rates. This table contains statistical information only, no configuration information associated with it. Therefore, it is indexed by the instance specific IDs, such as cbQosPolicyIndex and cbQosObjectsIndex.')
cbQosPoliceConformedPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceConformedPktOverflow.setDescription('The upper 32 bits count of packets treated as conforming by the policing feature.')
cbQosPoliceConformedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 2), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceConformedPkt.setDescription('The lower 32 bits count of packets treated as conforming by the policing feature.')
cbQosPoliceConformedPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 3), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceConformedPkt64.setDescription('The 64 bits count of packets treated as conforming by the policing feature.')
cbQosPoliceConformedByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 4), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceConformedByteOverflow.setDescription('The upper 32 bits count of octets treated as conforming by the policing feature.')
cbQosPoliceConformedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 5), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedByte.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceConformedByte.setDescription('The lower 32 bits count of octets treated as conforming by the policing feature.')
cbQosPoliceConformedByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 6), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceConformedByte64.setDescription('The 64 bits count of octets treated as conforming by the policing feature.')
cbQosPoliceConformedBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 7), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedBitRate.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceConformedBitRate.setDescription('The bit rate of conforming traffic.')
cbQosPoliceExceededPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceExceededPktOverflow.setDescription('The upper 32 bits count of packets treated as non-conforming by the policing feature.')
cbQosPoliceExceededPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 9), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceExceededPkt.setDescription('The 32 bits count of packets treated as non-conforming by the policing feature.')
cbQosPoliceExceededPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceExceededPkt64.setDescription('The 64 bits count of packets treated as non-conforming by the policing feature.')
cbQosPoliceExceededByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 11), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceExceededByteOverflow.setDescription('The upper 32 bits count of octets treated as non-conforming by the policing feature.')
cbQosPoliceExceededByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 12), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededByte.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceExceededByte.setDescription('The lower 32 bits count of octets treated as non-conforming by the policing feature.')
cbQosPoliceExceededByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 13), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceExceededByte64.setDescription('The 64 bits count of octets treated as non-conforming by the policing feature.')
cbQosPoliceExceededBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 14), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededBitRate.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceExceededBitRate.setDescription('The bit rate of the non-conforming traffic.')
cbQosPoliceViolatedPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 15), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceViolatedPktOverflow.setDescription('The upper 32 bits count of packets treated as violated by the policing feature.')
cbQosPoliceViolatedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 16), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceViolatedPkt.setDescription('The 32 bits count of packets treated as violated by the policing feature.')
cbQosPoliceViolatedPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 17), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceViolatedPkt64.setDescription('The 64 bits count of packets treated as violated by the policing feature.')
cbQosPoliceViolatedByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 18), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceViolatedByteOverflow.setDescription('The upper 32 bits count of octets treated as violated by the policing feature.')
cbQosPoliceViolatedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 19), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedByte.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceViolatedByte.setDescription('The lower 32 bits count of octets treated as violated by the policing feature.')
cbQosPoliceViolatedByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 20), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceViolatedByte64.setDescription('The 64 bits count of octets treated as violated by the policing feature.')
cbQosPoliceViolatedBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 21), Gauge32()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedBitRate.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceViolatedBitRate.setDescription('The bit rate of the violating traffic.')
cbQosPoliceConformedBitRate64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 22), CounterBasedGauge64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceConformedBitRate64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceConformedBitRate64.setDescription('The bit rate of conforming traffic. This object is a 64-bit version of cbQosPoliceConformedBitRate.')
cbQosPoliceExceededBitRate64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 23), CounterBasedGauge64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExceededBitRate64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceExceededBitRate64.setDescription('The bit rate of non-conforming traffic. This object is a 64-bit version of cbQosPoliceExceededBitRate.')
cbQosPoliceViolatedBitRate64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 17, 1, 1, 24), CounterBasedGauge64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceViolatedBitRate64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceViolatedBitRate64.setDescription('The bit rate of the violating traffic. This object is a 64-bit version of cbQosPoliceViolatedBitRate.')
cbQosQueueingStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1), )
if mibBuilder.loadTexts: cbQosQueueingStatsTable.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingStatsTable.setDescription('This table specifies Queueing Action related Statistical information.')
cbQosQueueingStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosQueueingStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingStatsEntry.setDescription('Each entry in this table describes the statistical information about queueing action. Queueing action specific information you can find in this table are : various Q depth, and discard pkt/byte counters. This table contains statistical information only, no configuration information associated with it. Therefore, it is indexed by the instance specific IDs, such as cbQosPolicyIndex and cbQosObjectsIndex.')
cbQosQueueingCurrentQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 1), Gauge32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCurrentQDepth.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCurrentQDepth.setDescription('The current depth of the queue.')
cbQosQueueingMaxQDepth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 2), Gauge32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingMaxQDepth.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingMaxQDepth.setDescription('The maximum depth of the queue.')
cbQosQueueingDiscardByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 3), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingDiscardByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingDiscardByteOverflow.setDescription('The upper 32 bit count of octets, associated with this class, that were dropped by queueing.')
cbQosQueueingDiscardByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 4), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingDiscardByte.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingDiscardByte.setDescription('The lower 32 bits count of octets, associated with this class, that were dropped by queueing.')
cbQosQueueingDiscardByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 5), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingDiscardByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingDiscardByte64.setDescription('The count of octets, associated with this class, that were dropped by queueing.')
cbQosQueueingDiscardPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 6), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingDiscardPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingDiscardPktOverflow.setDescription('The upper 32 bits count of packets, associated with this class, that were dropped by queueing.')
cbQosQueueingDiscardPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingDiscardPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingDiscardPkt.setDescription('The number of packets, associated with this class, that were dropped by queueing.')
cbQosQueueingDiscardPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingDiscardPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingDiscardPkt64.setDescription('The number of packets, associated with this class, that were dropped by queueing.')
cbQosQueueingCurrentQDepthPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 9), Gauge32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingCurrentQDepthPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCurrentQDepthPkt.setDescription('The current number of packets sitting in the queue')
cbQosQueueingMaxQDepthPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 10), Gauge32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingMaxQDepthPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingMaxQDepthPkt.setDescription('The maximum depth of the queue in packets.')
cbQosQueueingTransmitByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 11), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingTransmitByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingTransmitByte64.setDescription('The count of octets, associated with this class, that were transmitted by queueing.')
cbQosQueueingTransmitPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 18, 1, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosQueueingTransmitPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingTransmitPkt64.setDescription('The number of packets, associated with this class, that were transmitted by queueing.')
cbQosTSStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1), )
if mibBuilder.loadTexts: cbQosTSStatsTable.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsTable.setDescription('This table specifies traffic-shaping Action related Statistical information.')
cbQosTSStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosTSStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsEntry.setDescription('Each entry in this table describes the statistical information about traffic-shaping Action. Traffic-shaping Action specific information you can find in this table are : various delay/drop pkt/byte counters, state of feature, and Q size. This table contains statistical information only, no configuration information associated with it. Therefore, it is indexed by the instance specific IDs, such as cbQosPolicyIndex and cbQosObjectsIndex.')
cbQosTSStatsDelayedByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 1), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDelayedByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsDelayedByteOverflow.setDescription('This object represents the upper 32 bits counter of octets that have been delayed.')
cbQosTSStatsDelayedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 2), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDelayedByte.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsDelayedByte.setDescription('This object represents the lower 32 bits counter of octets that have been delayed.')
cbQosTSStatsDelayedByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 3), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDelayedByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsDelayedByte64.setDescription('This object represents the 64 bits counter of octets that have been delayed.')
cbQosTSStatsDelayedPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 4), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDelayedPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsDelayedPktOverflow.setDescription('This object represents the upper 32 bits counter of packets that have been delayed.')
cbQosTSStatsDelayedPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 5), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDelayedPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsDelayedPkt.setDescription('This object represents the lower 32 bits counter of packets that have been delayed.')
cbQosTSStatsDelayedPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 6), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDelayedPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsDelayedPkt64.setDescription('This object represents the 64 bits counter of packets that have been delayed.')
cbQosTSStatsDropByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 7), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDropByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsDropByteOverflow.setDescription('This object represents the upper 32 bits counter of octets that have been dropped during shaping.')
cbQosTSStatsDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 8), Counter32()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDropByte.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsDropByte.setDescription('This object represents the lower 32 bits counter of octets that have been dropped during shaping.')
cbQosTSStatsDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 9), Counter64()).setUnits('octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDropByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsDropByte64.setDescription('This object represents the 64 bits counter of octets that have been dropped during shaping.')
cbQosTSStatsDropPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 10), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDropPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsDropPktOverflow.setDescription('This object represents the upper 32 bits counter of packets that have been dropped during shaping.')
cbQosTSStatsDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 11), Counter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDropPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsDropPkt.setDescription('This object represents the lower 32 bits counter of packets that have been dropped during shaping.')
cbQosTSStatsDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 12), Counter64()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsDropPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsDropPkt64.setDescription('This object represents the 64 bits counter of packets that have been dropped during shaping.')
cbQosTSStatsActive = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 13), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsActive.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsActive.setDescription('This object indicates the current traffic-shaping state. When traffic-shaping is enabled and the traffic rate exceeds the shape rate, traffic-shaping is considered to be active. Otherwise, it is considered inactive.')
cbQosTSStatsCurrentQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 19, 1, 1, 14), Gauge32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTSStatsCurrentQSize.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsCurrentQSize.setDescription('This object indicates the current traffic-shaping queue depth in packets.')
cbQosREDClassStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1), )
if mibBuilder.loadTexts: cbQosREDClassStatsTable.setStatus('current')
if mibBuilder.loadTexts: cbQosREDClassStatsTable.setDescription('This table specifies per Precedence WRED Action related Statistical information.')
cbQosREDClassStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosREDValue"))
if mibBuilder.loadTexts: cbQosREDClassStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosREDClassStatsEntry.setDescription('Each entry in this table describes the statistical information about per Precedence WRED Action. per Precedence WRED Action specific information you can find in this table are : Random pkt/byte counters, and Tail drop pkt/byte counters. This table contains per Precedence/dscp based statistical information only, no configuration information associated with it. Therefore, it is indexed by the instance specific IDs, and a per Precedence identifier: cbQosPolicyIndex, cbQosObjectsIndex and cbQosREDValue.')
cbQosREDRandomDropPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDRandomDropPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosREDRandomDropPktOverflow.setDescription('The upper 32 bits count of packets dropped when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosREDRandomDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 2), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDRandomDropPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosREDRandomDropPkt.setDescription('The lower 32 bits count of packets dropped when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosREDRandomDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 3), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDRandomDropPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosREDRandomDropPkt64.setDescription('The 64 bits count of packets dropped when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosREDRandomDropByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 4), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDRandomDropByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosREDRandomDropByteOverflow.setDescription('The upper 32 bits count of bytes dropped when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosREDRandomDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 5), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDRandomDropByte.setStatus('current')
if mibBuilder.loadTexts: cbQosREDRandomDropByte.setDescription('The lower 32 bits count of bytes dropped when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosREDRandomDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 6), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDRandomDropByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosREDRandomDropByte64.setDescription('The 64 bits count of bytes dropped when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosREDTailDropPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTailDropPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosREDTailDropPktOverflow.setDescription('The upper 32 bits count of packets dropped when the number of packets in the associated queue was greater than the maximum threshold.')
cbQosREDTailDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTailDropPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosREDTailDropPkt.setDescription('The lower 32 bits count of packets dropped when the number of packets in the associated queue was greater than the maximum threshold.')
cbQosREDTailDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 9), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTailDropPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosREDTailDropPkt64.setDescription('The 64 bits count of packets dropped when the number of packets in the associated queue was greater than the maximum threshold.')
cbQosREDTailDropByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 10), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTailDropByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosREDTailDropByteOverflow.setDescription('The upper 32 bits count of bytes dropped when the number of packets in the associated queue was greater than the maximum threshold.')
cbQosREDTailDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 11), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTailDropByte.setStatus('current')
if mibBuilder.loadTexts: cbQosREDTailDropByte.setDescription('The lower 32 bits count of bytes dropped when the number of packets in the associated queue was greater than the maximum threshold.')
cbQosREDTailDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 12), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTailDropByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosREDTailDropByte64.setDescription('The 64 bits count of bytes dropped when the number of packets in the associated queue was greater than the maximum threshold.')
cbQosREDTransmitPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 13), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTransmitPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosREDTransmitPktOverflow.setDescription('The upper 32 bits count of bytes transmitted.')
cbQosREDTransmitPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 14), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTransmitPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosREDTransmitPkt.setDescription('The lower 32 bits count of bytes trasmitted.')
cbQosREDTransmitPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 15), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTransmitPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosREDTransmitPkt64.setDescription('The 64 bits count of packets transmitted.')
cbQosREDTransmitByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 16), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTransmitByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosREDTransmitByteOverflow.setDescription('The upper 32 bits count of octets transmitted.')
cbQosREDTransmitByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 17), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTransmitByte.setStatus('current')
if mibBuilder.loadTexts: cbQosREDTransmitByte.setDescription('The lower 32 bits count of octets trasmitted.')
cbQosREDTransmitByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 18), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDTransmitByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosREDTransmitByte64.setDescription('The 64 bits count of octets transmitted.')
cbQosREDECNMarkPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 19), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDECNMarkPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosREDECNMarkPktOverflow.setDescription('The upper 32 bits count of packets ecn marked when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosREDECNMarkPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 20), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDECNMarkPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosREDECNMarkPkt.setDescription('The lower 32 bits count of packets ecn marked when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosREDECNMarkPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 21), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDECNMarkPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosREDECNMarkPkt64.setDescription('The 64 bits count of packets ecn marked when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosREDECNMarkByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 22), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDECNMarkByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosREDECNMarkByteOverflow.setDescription('The upper 32 bits count of bytes ecn marked when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosREDECNMarkByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 23), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDECNMarkByte.setStatus('current')
if mibBuilder.loadTexts: cbQosREDECNMarkByte.setDescription('The lower 32 bits count of bytes ecn marked when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosREDECNMarkByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 24), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDECNMarkByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosREDECNMarkByte64.setDescription('The 64 bits count of bytes ecn marked when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosREDMeanQSizeUnits = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 25), CbQosQueueUnitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDMeanQSizeUnits.setStatus('current')
if mibBuilder.loadTexts: cbQosREDMeanQSizeUnits.setDescription('Represents the unit type of cbQosREDMeanQSize object.')
cbQosREDMeanQSize = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 20, 1, 1, 26), CbQosQueueDepth()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosREDMeanQSize.setStatus('current')
if mibBuilder.loadTexts: cbQosREDMeanQSize.setDescription('The average queue size computed and used by the WRED algorithm.')
cbQosIPHCCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 22, 1), )
if mibBuilder.loadTexts: cbQosIPHCCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCCfgTable.setDescription('This table specifies IP Header Compression configuration information.')
cbQosIPHCCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 22, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosIPHCCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCCfgEntry.setDescription('Each entry in this table describes configuration information about IP Header compression. This includes the compression option of UDP/RTP header, TCP header or both. This table contains configuration information only, no statistics associated with it. Therefore, it is indexed by cbQosConfigIndex.')
cbQosIPHCCfgOption = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 22, 1, 1, 1), IPHCOption()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCCfgOption.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCCfgOption.setDescription('The configured IP header compression option. The value is defined by IPHCOption.')
cbQosIPHCCfgEnabled = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 22, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCCfgEnabled.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCCfgEnabled.setDescription('Boolean to indicate if IPHC is enabled for policy class.')
cbQosIPHCStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1), )
if mibBuilder.loadTexts: cbQosIPHCStatsTable.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCStatsTable.setDescription('This table specifies IP Header Compression statistical information.')
cbQosIPHCStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosIPHCStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCStatsEntry.setDescription('Each entry in this table describes statistical information about IP Header compression. This table contains statistical information only, no configuration information associated with it. Therefore, it is indexed by the instance specific IDs, namely cbQosPolicyIndex and cbQosObjectsIndex.')
cbQosIPHCRtpSentPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSentPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpSentPktOverflow.setDescription('The upper 32 bits count of outbound UDP/RTP packets.')
cbQosIPHCRtpSentPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 2), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSentPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpSentPkt.setDescription('The lower 32 bits count of outbound UDP/RTP packets.')
cbQosIPHCRtpSentPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 3), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSentPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpSentPkt64.setDescription('The 64 bits count of outbound UDP/RTP packets.')
cbQosIPHCRtpCmprsOutPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 4), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpCmprsOutPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpCmprsOutPktOverflow.setDescription('The upper 32 bits count of outbound compressed UDP/RTP packets.')
cbQosIPHCRtpCmprsOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 5), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpCmprsOutPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpCmprsOutPkt.setDescription('The lower 32 bits count of outbound compressed UDP/RTP packets.')
cbQosIPHCRtpCmprsOutPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpCmprsOutPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpCmprsOutPkt64.setDescription('The 64 bits count of outbound compressed UDP/RTP packets.')
cbQosIPHCRtpSavedByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 7), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSavedByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpSavedByteOverflow.setDescription('The upper 32 bits count of UDP/RTP bytes that saved due to IPHC.')
cbQosIPHCRtpSavedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 8), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSavedByte.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpSavedByte.setDescription('The lower 32 bits count of UDP/RTP bytes that saved due to IPHC.')
cbQosIPHCRtpSavedByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 9), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSavedByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpSavedByte64.setDescription('The 64 bits count of UDP/RTP bytes that saved due to IPHC.')
cbQosIPHCRtpSentByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 10), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSentByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpSentByteOverflow.setDescription('The upper 32 bits count of outbound UDP/RTP bytes.')
cbQosIPHCRtpSentByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 11), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSentByte.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpSentByte.setDescription('The lower 32 bits count of outbound UDP/RTP bytes.')
cbQosIPHCRtpSentByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 12), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSentByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpSentByte64.setDescription('The 64 bits count of outbound UDP/RTP bytes.')
cbQosIPHCRtpSentByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 13), Gauge32()).setUnits('Octets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpSentByteRate.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpSentByteRate.setDescription('The 32 bits count of outbound UDP/RTP byte rate.')
cbQosIPHCTcpSentPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 14), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSentPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpSentPktOverflow.setDescription('The upper 32 bits count of outbound TCP packets.')
cbQosIPHCTcpSentPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 15), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSentPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpSentPkt.setDescription('The lower 32 bits count of outbound TCP packets.')
cbQosIPHCTcpSentPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 16), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSentPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpSentPkt64.setDescription('The 64 bits count of outbound TCP packets.')
cbQosIPHCTcpCmprsOutPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 17), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpCmprsOutPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpCmprsOutPktOverflow.setDescription('The upper 32 bits count of outbound compressed TCP packets.')
cbQosIPHCTcpCmprsOutPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 18), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpCmprsOutPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpCmprsOutPkt.setDescription('The lower 32 bits count of outbound compressed TCP packets.')
cbQosIPHCTcpCmprsOutPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 19), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpCmprsOutPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpCmprsOutPkt64.setDescription('The 64 bits count of outbound compressed TCP packets.')
cbQosIPHCTcpSavedByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 20), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSavedByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpSavedByteOverflow.setDescription('The upper 32 bits count of TCP bytes that saved due to IPHC.')
cbQosIPHCTcpSavedByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 21), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSavedByte.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpSavedByte.setDescription('The lower 32 bits count of TCP bytes that saved due to IPHC.')
cbQosIPHCTcpSavedByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 22), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSavedByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpSavedByte64.setDescription('The 64 bits count of TCP bytes that saved due to IPHC.')
cbQosIPHCTcpSentByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 23), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSentByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpSentByteOverflow.setDescription('The upper 32 bits count of outbound TCP bytes.')
cbQosIPHCTcpSentByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 24), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSentByte.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpSentByte.setDescription('The lower 32 bits count of outbound TCP bytes.')
cbQosIPHCTcpSentByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 25), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSentByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpSentByte64.setDescription('The 64 bits count of outbound TCP bytes.')
cbQosIPHCTcpSentByteRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 26), Gauge32()).setUnits('Octets per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpSentByteRate.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpSentByteRate.setDescription('The 32 bits count of outbound TCP byte rate.')
cbQosIPHCRtpFullHdrSentPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 27), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpFullHdrSentPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpFullHdrSentPktOverflow.setDescription('The upper 32 bits count of total full header UDP/RTP packets sent out.')
cbQosIPHCRtpFullHdrSentPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 28), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpFullHdrSentPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpFullHdrSentPkt.setDescription('The lower 32 bits count of total full header UDP/RTP packets sent out.')
cbQosIPHCRtpFullHdrSentPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 29), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCRtpFullHdrSentPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCRtpFullHdrSentPkt64.setDescription('The 64 bits count of total fullheader UDP/RTP packets sent out.')
cbQosIPHCTcpFullHdrSentPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 30), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpFullHdrSentPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpFullHdrSentPktOverflow.setDescription('The upper 32 bits count of total fullheader TCP packets sent out.')
cbQosIPHCTcpFullHdrSentPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 31), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpFullHdrSentPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpFullHdrSentPkt.setDescription('The lower 32 bits count of total fullheader TCP packets sent out.')
cbQosIPHCTcpFullHdrSentPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 23, 1, 1, 32), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosIPHCTcpFullHdrSentPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCTcpFullHdrSentPkt64.setDescription('The 64 bits count of total fullheader TCP packets sent out.')
cbQosSetStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1), )
if mibBuilder.loadTexts: cbQosSetStatsTable.setStatus('current')
if mibBuilder.loadTexts: cbQosSetStatsTable.setDescription('This table specifies packet marking statistical information.')
cbQosSetStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosSetStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosSetStatsEntry.setDescription('Each entry in this table describes the packets that marked by each marking type. This table contains statistical information only, no configuration information associated with it. Therefore, it is indexed by the instance specific IDs, namely cbQosPolicyIndex and cbQosObjectsIndex.')
cbQosSetDscpPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 1), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetDscpPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosSetDscpPkt64.setDescription('The 64 bits count of packets whose DSCP field is marked by Set feature.')
cbQosSetPrecedencePkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 2), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetPrecedencePkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosSetPrecedencePkt64.setDescription('The 64 bits count of packets whose Precedence field is marked by Set feature.')
cbQosSetQosGroupPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 3), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetQosGroupPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosSetQosGroupPkt64.setDescription('The 64 bits count of packets whose Qos Group field is marked by Set feature.')
cbQosSetFrDePkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 4), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetFrDePkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosSetFrDePkt64.setDescription('The 64 bits count of packets whose Frame Relay DE Bit is marked by Set feature.')
cbQosSetAtmClpPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetAtmClpPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosSetAtmClpPkt64.setDescription('The 64 bits count of packets whose ATM CLP Bit is marked by Set feature.')
cbQosSetL2CosPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 6), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetL2CosPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosSetL2CosPkt64.setDescription('The 64 bits count of packets whose Layer 2 Cos field is marked by Set feature.')
cbQosSetMplsExpImpositionPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetMplsExpImpositionPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosSetMplsExpImpositionPkt64.setDescription('The 64 bits count of packets whose MPLS Experimental Imposition field is marked by Set feature.')
cbQosSetDiscardClassPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 8), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetDiscardClassPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosSetDiscardClassPkt64.setDescription('The 64 bits count of packets whose Discard Class field is marked by Set feature.')
cbQosSetMplsExpTopMostPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 9), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetMplsExpTopMostPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosSetMplsExpTopMostPkt64.setDescription('The 64 bits count of packets whose MPLS Experimental TopMost field is marked by Set feature.')
cbQosSetSrpPriorityPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 10), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetSrpPriorityPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosSetSrpPriorityPkt64.setDescription('The 64 bits count of packets whose SRP Priority field is marked by Set feature.')
cbQosSetFrFecnBecnPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 11), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetFrFecnBecnPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosSetFrFecnBecnPkt64.setDescription('The 64 bits count of packets whose Frame Relay FECN BECN field is marked by Set feature.')
cbQosSetDscpTunnelPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 12), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetDscpTunnelPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosSetDscpTunnelPkt64.setDescription('The 64 bits count of packets whose DSCP Tunnel field is marked by Set feature.')
cbQosSetPrecedenceTunnelPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 24, 1, 1, 13), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosSetPrecedenceTunnelPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosSetPrecedenceTunnelPkt64.setDescription('The 64 bits count of packets whose Precedence Tunnel field is marked by Set feature.')
cbQosPoliceColorStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1), )
if mibBuilder.loadTexts: cbQosPoliceColorStatsTable.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceColorStatsTable.setDescription('This table specifies Police Action related Statistical information for two rate color aware marker.')
cbQosPoliceColorStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosPoliceColorStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceColorStatsEntry.setDescription('Each entry in this table describes the statistical information about Police Action for Two Rate Color Aware Marker. This table contains statistical information only, no configuration information associated with it. Therefore, it is indexed by the instance specific IDs, such as cbQosPolicyIndex and cbQosObjectsIndex.')
cbQosPoliceCfmColorCfmPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 1), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorCfmPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfmColorCfmPkt64.setDescription('The 64 bits count of packets which are marked as Conform-Color by previous node and treated as conforming by the policing feature on this node.')
cbQosPoliceCfmColorCfmByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 2), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorCfmByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfmColorCfmByte64.setDescription('The 64 bits count of bytes which are marked as Conform-Color by previous node and treated as conforming by the policing feature on this node.')
cbQosPoliceCfmColorExdPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 3), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorExdPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfmColorExdPkt64.setDescription('The 64 bits count of packets which are marked as Conform-Color by previous node and treated as exceeding by the policing feature on this node.')
cbQosPoliceCfmColorExdByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 4), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorExdByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfmColorExdByte64.setDescription('The 64 bits count of bytes which are marked as Conform-Color by previous node and treated as exceeding by the policing feature on this node.')
cbQosPoliceCfmColorVltPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 5), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorVltPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfmColorVltPkt64.setDescription('The 64 bits count of packets which are marked as Conform-Color by previous node and treated as violating by the policing feature on this node.')
cbQosPoliceCfmColorVltByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 6), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorVltByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfmColorVltByte64.setDescription('The 64 bits count of bytes which are marked as Conform-Color by previous node and treated as violating by the policing feature on this node.')
cbQosPoliceExdColorExdPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 7), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExdColorExdPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceExdColorExdPkt64.setDescription('The 64 bits count of packets which are marked as Exceed-Color by previous node and treated as exceeding by the policing feature on this node.')
cbQosPoliceExdColorExdByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 8), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExdColorExdByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceExdColorExdByte64.setDescription('The 64 bits count of bytes which are marked as Exceed-Color by previous node and treated as exceeding by the policing feature on this node.')
cbQosPoliceExdColorVltPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 9), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExdColorVltPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceExdColorVltPkt64.setDescription('The 64 bits count of packets which are marked as Exceed-Color by previous node and treated as violating by the policing feature on this node.')
cbQosPoliceExdColorVltByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 10), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExdColorVltByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceExdColorVltByte64.setDescription('The 64 bits count of bytes which are marked as Exceed-Color by previous node and treated as violating by the policing feature on this node.')
cbQosPoliceVltColorVltPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 11), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceVltColorVltPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceVltColorVltPkt64.setDescription('The 64 bits count of packets which are marked as Violate-Color by previous node and treated as violating by the policing feature on this node.')
cbQosPoliceVltColorVltByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 12), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceVltColorVltByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceVltColorVltByte64.setDescription('The 64 bits count of bytes which are marked as Violate-Color by previous node and treated as violating by the policing feature on this node.')
cbQosPoliceCfmColorCfmBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 13), CounterBasedGauge64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorCfmBitRate.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfmColorCfmBitRate.setDescription('The bit rate of conform color class conform rate.')
cbQosPoliceCfmColorExdBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 14), CounterBasedGauge64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorExdBitRate.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfmColorExdBitRate.setDescription('The bit rate of conform color class exceed rate.')
cbQosPoliceCfmColorVltBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 15), CounterBasedGauge64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceCfmColorVltBitRate.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfmColorVltBitRate.setDescription('The bit rate of conform color class violate rate.')
cbQosPoliceExdColorExdBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 16), CounterBasedGauge64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExdColorExdBitRate.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceExdColorExdBitRate.setDescription('The bit rate of exceed color class exceed rate.')
cbQosPoliceExdColorVltBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 17), CounterBasedGauge64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceExdColorVltBitRate.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceExdColorVltBitRate.setDescription('The bit rate of exceed color class violate rate.')
cbQosPoliceVltColorVltBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 25, 1, 1, 18), CounterBasedGauge64()).setUnits('bits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosPoliceVltColorVltBitRate.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceVltColorVltBitRate.setDescription('The bit rate of violate color class violate rate.')
cbQosTableMapCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 26, 1), )
if mibBuilder.loadTexts: cbQosTableMapCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosTableMapCfgTable.setDescription('This table specifies Table Map basic configuration information.')
cbQosTableMapCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 26, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgIndex"))
if mibBuilder.loadTexts: cbQosTableMapCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosTableMapCfgEntry.setDescription('Each entry in this table describes configuration information about a tablemap name, behavior and default value. Each cbQosTableMapCfgName is a unique character string in QOS. This table contains configuration information only, no statistics associated with it.')
cbQosTableMapCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 26, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cbQosTableMapCfgIndex.setStatus('current')
if mibBuilder.loadTexts: cbQosTableMapCfgIndex.setDescription('An arbitrary (system-assigned) index for tablemap.')
cbQosTableMapCfgName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 26, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTableMapCfgName.setStatus('current')
if mibBuilder.loadTexts: cbQosTableMapCfgName.setDescription('Name of the tablemap.')
cbQosTableMapCfgBehavior = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 26, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("value", 1), ("copy", 2), ("ignore", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTableMapCfgBehavior.setStatus('current')
if mibBuilder.loadTexts: cbQosTableMapCfgBehavior.setDescription('The behavior of a tablemap. value(1) Always set to-value to be a configurable default value <0-99> which is defined in cbQosTableMapCfgDftValue. copy(2) Always copy from-value to to-value in case the from-value is not found in the tablemap. This is the default behavior for a tablemap. ignore(3) Ignore to set to-value when from-value is not found in the tablemap.')
cbQosTableMapCfgDftValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 26, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTableMapCfgDftValue.setStatus('current')
if mibBuilder.loadTexts: cbQosTableMapCfgDftValue.setDescription('The configurable default value used when cbQosTableMapCfgBehavior is value(1).')
cbQosTableMapValueCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 27, 1), )
if mibBuilder.loadTexts: cbQosTableMapValueCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosTableMapValueCfgTable.setDescription('This table specifies the from-value to to-value conversion pairs for a tablemap.')
cbQosTableMapValueCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 27, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapValueCfgFrom"))
if mibBuilder.loadTexts: cbQosTableMapValueCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosTableMapValueCfgEntry.setDescription('Each entry in this table specifies a from-value to to-value conversion pair for a given tablemap. This table contains configuration information only, no statistics associated with it.')
cbQosTableMapValueCfgFrom = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 27, 1, 1, 1), Unsigned32())
if mibBuilder.loadTexts: cbQosTableMapValueCfgFrom.setStatus('current')
if mibBuilder.loadTexts: cbQosTableMapValueCfgFrom.setDescription('This is the from-value in the tablemap. If cbQosTableMapCfgBehavior equals to either copy(2) or ignore(3), when the content in the from-type(e.g., cbQosTMSetIpDscpFromType) equals to this value, the value in the to-type(e.g., IpDscp) will be set to cbQosTableMapValueCfgTo. Each tablemap can configure multiple from-value/to-value pairs.')
cbQosTableMapValueCfgTo = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 27, 1, 1, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTableMapValueCfgTo.setStatus('current')
if mibBuilder.loadTexts: cbQosTableMapValueCfgTo.setDescription('This is the to-value in the tablemap. Its usage is described in cbQosTableMapValueCfgFrom.')
cbQosTableMapSetCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1), )
if mibBuilder.loadTexts: cbQosTableMapSetCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosTableMapSetCfgTable.setDescription('This table specifies enhanced packet marking configuration using a pre-defined tablemap.')
cbQosTableMapSetCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosTableMapSetCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosTableMapSetCfgEntry.setDescription("Each entry in this table describes configuration information for an Enhanced Packet Marking Action. The enhanced packet marking action uses a pre-configured table-map to do the from-value to to-value conversion. The packet marking to-type and from-type relationship can be established by using the table-map. Following is an example: cbQosTMSetIpDscpFromType == qosGroup(3) cbQosTMSetIpDscpMapName == 'MyTableMap', it means that table-map 'MyTableMap' will be used to convert the QosGroup value and the converted value will be used to set IpDSCP. cbQosConfigIndex is drived directly from cbQosSetCfgTable to keep the 1-to-1 mapping between two tables. This table contains configuration information only, no statistics associated with it.")
cbQosTMSetIpDscpFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 1), CbQosTMSetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetIpDscpFromType.setStatus('current')
if mibBuilder.loadTexts: cbQosTMSetIpDscpFromType.setDescription('The packet marking type whose value will be converted to a to-value based on a pre-configured table-map. The to-value will then be used to set IpDSCP.')
cbQosTMSetIpDscpMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetIpDscpMapName.setStatus('current')
if mibBuilder.loadTexts: cbQosTMSetIpDscpMapName.setDescription('The name of a pre-configured table-map used to convert and set IpDSCP value.')
cbQosTMSetIpPrecedenceFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 3), CbQosTMSetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetIpPrecedenceFromType.setStatus('current')
if mibBuilder.loadTexts: cbQosTMSetIpPrecedenceFromType.setDescription('The packet marking type whose value will be converted to a to-value based on a pre-configured table-map. The to-value will then be used to set IpPrecedence.')
cbQosTMSetIpPrecedenceMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetIpPrecedenceMapName.setStatus('current')
if mibBuilder.loadTexts: cbQosTMSetIpPrecedenceMapName.setDescription('The name of a pre-configured table-map used to convert and set IpPrecedence value.')
cbQosTMSetQosGroupFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 5), CbQosTMSetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetQosGroupFromType.setStatus('current')
if mibBuilder.loadTexts: cbQosTMSetQosGroupFromType.setDescription('The packet marking type whose value will be converted to a to-value based on a pre-configured table-map. The to-value will then be used to set QosGroup.')
cbQosTMSetQosGroupMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetQosGroupMapName.setStatus('current')
if mibBuilder.loadTexts: cbQosTMSetQosGroupMapName.setDescription('The name of a pre-configured table-map used to convert and set QosGroup value.')
cbQosTMSetL2CosFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 7), CbQosTMSetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetL2CosFromType.setStatus('current')
if mibBuilder.loadTexts: cbQosTMSetL2CosFromType.setDescription('The packet marking type whose value will be converted to a to-value based on a pre-configured table-map. The to-value will then be used to set L2Cos.')
cbQosTMSetL2CosMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetL2CosMapName.setStatus('current')
if mibBuilder.loadTexts: cbQosTMSetL2CosMapName.setDescription('The name of a pre-configured table-map used to convert and set L2Cos value.')
cbQosTMSetMplsExpImpFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 9), CbQosTMSetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetMplsExpImpFromType.setStatus('current')
if mibBuilder.loadTexts: cbQosTMSetMplsExpImpFromType.setDescription('The packet marking type whose value will be converted to a to-value based on a pre-configured table-map. The to-value will then be used to set MplsExpImposition.')
cbQosTMSetMplsExpImpMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetMplsExpImpMapName.setStatus('current')
if mibBuilder.loadTexts: cbQosTMSetMplsExpImpMapName.setDescription('The name of a pre-configured table-map used to convert and set MplsExpImposition value.')
cbQosTMSetMplsExpTopFromType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 11), CbQosTMSetType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetMplsExpTopFromType.setStatus('current')
if mibBuilder.loadTexts: cbQosTMSetMplsExpTopFromType.setDescription('The packet marking type whose value will be converted to a to-value based on a pre-configured table-map. The to-value will then be used to set MplsExpTopMost.')
cbQosTMSetMplsExpTopMapName = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 28, 1, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosTMSetMplsExpTopMapName.setStatus('current')
if mibBuilder.loadTexts: cbQosTMSetMplsExpTopMapName.setDescription('The name of a pre-configured table-map used to convert and set MplsExpTopMost value.')
cbQosEBCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 29, 1), )
if mibBuilder.loadTexts: cbQosEBCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosEBCfgTable.setDescription('This table specifies Estimate Bandwidth related configuration information.')
cbQosEBCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 29, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosEBCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosEBCfgEntry.setDescription('Each entry in this table describes configuration information about Estimate Bandwidth. It includes: drop target, delay target and delay threshold. This table contains configuration information only. It is indexed by the cbQosConfigIndex.')
cbQosEBCfgMechanism = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 29, 1, 1, 1), CbQosEBType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEBCfgMechanism.setStatus('current')
if mibBuilder.loadTexts: cbQosEBCfgMechanism.setDescription('Bandwidth estimate algorithm type.')
cbQosEBCfgDropTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 29, 1, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50, 1000000))).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEBCfgDropTarget.setStatus('current')
if mibBuilder.loadTexts: cbQosEBCfgDropTarget.setDescription('One-in-Number target indicating that no more than one packet in (this) number will be dropped.')
cbQosEBCfgDelayTarget = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 29, 1, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(50, 1000000))).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEBCfgDelayTarget.setStatus('current')
if mibBuilder.loadTexts: cbQosEBCfgDelayTarget.setDescription('One-in-Number target indicating that no more than one packet in (this) number will exceed the delay threshold specified by cbQosEBCfgDelayThreshold.')
cbQosEBCfgDelayThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 29, 1, 1, 4), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(16, 1000))).setUnits('millisecond').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEBCfgDelayThreshold.setStatus('current')
if mibBuilder.loadTexts: cbQosEBCfgDelayThreshold.setDescription('The time in milliseconds for the delay threshold.')
cbQosEBStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 30, 1), )
if mibBuilder.loadTexts: cbQosEBStatsTable.setStatus('current')
if mibBuilder.loadTexts: cbQosEBStatsTable.setDescription('This table specifies Estimate Bandwidth related statistical information.')
cbQosEBStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 30, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"))
if mibBuilder.loadTexts: cbQosEBStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosEBStatsEntry.setDescription('Each entry in this table describes Estimate Bandwidth related statistical information.')
cbQosEBStatsCorvilEBValue = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 30, 1, 1, 1), Gauge32()).setUnits('kbps').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEBStatsCorvilEBValue.setStatus('current')
if mibBuilder.loadTexts: cbQosEBStatsCorvilEBValue.setDescription('The current Corvil EB bandwidth value.')
cbQosEBStatsCorvilEBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 30, 1, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEBStatsCorvilEBStatus.setStatus('current')
if mibBuilder.loadTexts: cbQosEBStatsCorvilEBStatus.setDescription('Boolean to indicate if Corvil EB is ready. true - Bandwidth estimate is available. false - Bandwidth estimate is not available.')
cbQosEBStatsCorvilCTD = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 30, 1, 1, 3), CbQosEBCtd()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosEBStatsCorvilCTD.setStatus('current')
if mibBuilder.loadTexts: cbQosEBStatsCorvilCTD.setDescription('The Corvil CTD value defined by CbQosEBCtd.')
cbQosC3plAccountCfgTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 33, 1), )
if mibBuilder.loadTexts: cbQosC3plAccountCfgTable.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountCfgTable.setDescription('This table specifies C3pl Account Action configuration information')
cbQosC3plAccountCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 33, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"))
if mibBuilder.loadTexts: cbQosC3plAccountCfgEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountCfgEntry.setDescription('Each entry in this table describes configuration information about a c3pl account action. The information includes: feature type. This table contains configuration information only, no statistics associated with it. Therefore, it is indexed by the cbQosConfigIndex of each C3pl Account Action.')
cbQosC3plAccountFeatureType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 33, 1, 1, 1), SetC3plAccountFeatureType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountFeatureType.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountFeatureType.setDescription('The feature type is used to indicated different drop statistics.')
cbQosC3plAccountStatsTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1), )
if mibBuilder.loadTexts: cbQosC3plAccountStatsTable.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountStatsTable.setDescription('This table specifies C3pl Account Action related statistics information.')
cbQosC3plAccountStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1), ).setIndexNames((0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsIndex"), (0, "CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountFeatureType"))
if mibBuilder.loadTexts: cbQosC3plAccountStatsEntry.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountStatsEntry.setDescription('Each entry in this table describes the statistical information about C3pl Account Action. Account action specific information you can find in this table are : queueing drop pkt/byte counters, wred drop pkt/byte counters, police pkt/byte counters. This table contains statistical information only, no configuration information associated with it. Therefore, it is indexed by the instance specific IDs, such as cbQosPolicyIndex, cbQosObjectsIndex, and cbQosC3plAccountFeatureType.')
cbQosC3plAccountDropPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 1), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountDropPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountDropPktOverflow.setDescription('The upper 32 bits count of packets dropped when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosC3plAccountDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 2), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountDropPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountDropPkt.setDescription('The lower 32 bits count of packets dropped when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosC3plAccountDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 3), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountDropPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountDropPkt64.setDescription('The 64 bits count of packets dropped when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosC3plAccountDropByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 4), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountDropByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountDropByteOverflow.setDescription('The upper 32 bits count of bytes dropped when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosC3plAccountDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 5), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountDropByte.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountDropByte.setDescription('The lower 32 bits count of bytes dropped when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosC3plAccountDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 6), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountDropByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountDropByte64.setDescription('The 64 bits count of bytes dropped when the number of packets in the associated queue was greater than the minimum threshold and less than the maximum threshold.')
cbQosC3plAccountTailDropPktOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 7), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountTailDropPktOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountTailDropPktOverflow.setDescription('The upper 32 bits count of packets dropped when the number of packets in the associated queue was greater than the maximum threshold.')
cbQosC3plAccountTailDropPkt = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 8), Counter32()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountTailDropPkt.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountTailDropPkt.setDescription('The lower 32 bits count of packets dropped when the number of packets in the associated queue was greater than the maximum threshold.')
cbQosC3plAccountTailDropPkt64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 9), Counter64()).setUnits('Packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountTailDropPkt64.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountTailDropPkt64.setDescription('The 64 bits count of packets dropped when the number of packets in the associated queue was greater than the maximum threshold.')
cbQosC3plAccountTailDropByteOverflow = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 10), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountTailDropByteOverflow.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountTailDropByteOverflow.setDescription('The upper 32 bits count of bytes dropped when the number of packets in the associated queue was greater than the maximum threshold.')
cbQosC3plAccountTailDropByte = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 11), Counter32()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountTailDropByte.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountTailDropByte.setDescription('The lower 32 bits count of bytes dropped when the number of packets in the associated queue was greater than the maximum threshold.')
cbQosC3plAccountTailDropByte64 = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 166, 1, 34, 1, 1, 12), Counter64()).setUnits('Octets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cbQosC3plAccountTailDropByte64.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountTailDropByte64.setDescription('The 64 bits count of bytes dropped when the number of packets in the associated queue was greater than the maximum threshold.')
ciscocbQosMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1))
ciscocbQosMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2))
ciscocbQosMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 1)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscocbQosMIBCompliance = ciscocbQosMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: ciscocbQosMIBCompliance.setDescription('The compliance statement for entities that implement class-based QoS on a Cisco router.')
ciscocbQosMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 2)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscocbQosMIBComplianceRev1 = ciscocbQosMIBComplianceRev1.setStatus('deprecated')
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev1.setDescription('The compliance statement for entities that implement class-based QoS on a Cisco router. This compliance module deprecates ciscocbQosMIBCompliance.')
ciscocbQosMIBComplianceRev2 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 3)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNewSetCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscocbQosMIBComplianceRev2 = ciscocbQosMIBComplianceRev2.setStatus('deprecated')
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev2.setDescription('The compliance statement for entities that implement class-based QoS on a Cisco router. This compliance module deprecates ciscocbQosMIBComplianceRev1.')
ciscocbQosMIBComplianceRev3 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 4)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNewSetCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscocbQosMIBComplianceRev3 = ciscocbQosMIBComplianceRev3.setStatus('deprecated')
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev3.setDescription('The compliance statement for entities that implement class-based QoS on a Cisco router. This compliance module deprecates ciscocbQosMIBComplianceRev2.')
ciscocbQosMIBComplianceRev4 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 5)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNewSetCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscocbQosMIBComplianceRev4 = ciscocbQosMIBComplianceRev4.setStatus('deprecated')
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev4.setDescription('The compliance statement for entities that implement class-based QoS on a Cisco router. This compliance module deprecates ciscocbQosMIBComplianceRev2.')
ciscocbQosMIBComplianceRev5 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 6)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNewSetCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscocbQosMIBComplianceRev5 = ciscocbQosMIBComplianceRev5.setStatus('deprecated')
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev5.setDescription('The compliance statement for entities that implement class-based QoS on a Cisco router. This compliance module deprecates ciscocbQosMIBComplianceRev4.')
ciscocbQosMIBComplianceRev6 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 7)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev3"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2Group"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyExtGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscocbQosMIBComplianceRev6 = ciscocbQosMIBComplianceRev6.setStatus('deprecated')
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev6.setDescription('The compliance statement for entities that implement class-based QoS on a Cisco router. This compliance module deprecates ciscocbQosMIBComplianceRev5.')
ciscocbQosMIBComplianceRev7 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 8)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev3"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2Group"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountStatsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscocbQosMIBComplianceRev7 = ciscocbQosMIBComplianceRev7.setStatus('deprecated')
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev7.setDescription('The compliance statement for entities that implement class-based QoS on a Cisco router. This compliance module deprecates ciscocbQosMIBComplianceRev5.')
ciscocbQosMIBComplianceRev8 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 9)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev3"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2Group"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrDeGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscocbQosMIBComplianceRev8 = ciscocbQosMIBComplianceRev8.setStatus('current')
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev8.setDescription('The compliance statement for entities that implement class-based QoS on a Cisco router. This compliance module deprecates ciscocbQosMIBComplianceRev7.')
ciscocbQosMIBComplianceRev9 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 10)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev3"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2Group"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEVCGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFragmentGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscocbQosMIBComplianceRev9 = ciscocbQosMIBComplianceRev9.setStatus('current')
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev9.setDescription('The compliance statement for entities that implement class-based QoS on a Cisco router. This compliance module deprecates ciscocbQosMIBComplianceRev8.')
ciscocbQosMIBComplianceRev10 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 11)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev3"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2Group"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEVCGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFragmentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsExt"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscocbQosMIBComplianceRev10 = ciscocbQosMIBComplianceRev10.setStatus('deprecated')
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev10.setDescription('The compliance statement for entities that implement class-based QoS on a Cisco router. This compliance module deprecates ciscocbQosMIBComplianceRev9.')
ciscocbQosMIBComplianceRev11 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 12)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev3"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQos421XRCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2Group"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEVCGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFragmentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsExt"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscocbQosMIBComplianceRev11 = ciscocbQosMIBComplianceRev11.setStatus('deprecated')
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev11.setDescription('The compliance statement for entities that implement class-based QoS on a Cisco router. This compliance module deprecates ciscocbQosMIBComplianceRev10.')
ciscocbQosMIBComplianceRev12 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 13)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev3"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQos421XRCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosBitRateExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2Group"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEVCGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFragmentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsExt"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscocbQosMIBComplianceRev12 = ciscocbQosMIBComplianceRev12.setStatus('deprecated')
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev12.setDescription('The compliance statement for entities that implement class-based QoS on a Cisco router. This compliance module deprecates ciscocbQosMIBComplianceRev11.')
ciscocbQosMIBComplianceRev13 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 1, 14)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDDscpCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgGroupRev2"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgGroupRev3"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgGroupRev1"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosClassMapStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQos421XRCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosBitRateExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosInterfacePolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrameRelayVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPVCPolicyGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosNoBufferDropGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDynamicQNumberGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassXmitCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassECNMarkCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPirGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAFPoliceViolateCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTrafficShapingDelayCountersGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsImpositionGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMPLSTopMostGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgThresholdTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgColorGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgTimeGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriorityGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecnGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2Group"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosServicePolicyExtGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountCfgGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountStatsGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEVCGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFragmentGroup"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceColorStatsExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCStatsExt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingStatsGroupRev1"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    ciscocbQosMIBComplianceRev13 = ciscocbQosMIBComplianceRev13.setStatus('current')
if mibBuilder.loadTexts: ciscocbQosMIBComplianceRev13.setDescription('The compliance statement for entities that implement class-based QoS on a Cisco router. This compliance module deprecates ciscocbQosMIBComplianceRev12.')
cbQosServicePolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 1)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosIfType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyDirection"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIfIndex"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrDLCI"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAtmVPI"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAtmVCI"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosServicePolicyGroup = cbQosServicePolicyGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosServicePolicyGroup.setDescription('Required objects to provide CB QoS objects configuration information. cbQosServicePolicyGroup object is superseded by cbQosServicePolicyGroupRev1.')
cbQosInterfacePolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 2)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosIFPolicyIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosInterfacePolicyGroup = cbQosInterfacePolicyGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosInterfacePolicyGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosFrameRelayVCPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 3)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosFRPolicyIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosFrameRelayVCPolicyGroup = cbQosFrameRelayVCPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosFrameRelayVCPolicyGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosATMPVCPolicyGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 4)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosATMPolicyIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosATMPVCPolicyGroup = cbQosATMPVCPolicyGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosATMPVCPolicyGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosObjectsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 5)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosConfigIndex"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosObjectsType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosParentObjectsIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosObjectsGroup = cbQosObjectsGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosObjectsGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosPolicyMapCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 6)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyMapDesc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPolicyMapCfgGroup = cbQosPolicyMapCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosPolicyMapCfgGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosClassMapCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 7)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDesc"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosClassMapCfgGroup = cbQosClassMapCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosClassMapCfgGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosMatchStmtCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 8)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchStmtInfo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosMatchStmtCfgGroup = cbQosMatchStmtCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchStmtCfgGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosQueueingCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 9)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgBandwidth"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgBandwidthUnits"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgFlowEnabled"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgPriorityEnabled"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgAggregateQSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgIndividualQSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgPrioBurstSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosQueueingCfgGroup = cbQosQueueingCfgGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosQueueingCfgGroup.setDescription('Required objects to provide CB QoS objects configuration information. cbQosQueueingCfgGroup object is superseded by cbQosQueueingCfgGroupRev1.')
cbQosREDCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 10)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgExponWeight"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgMeanQsize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosREDCfgGroup = cbQosREDCfgGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosREDCfgGroup.setDescription('Required objects to provide CB QoS objects configuration information. cbQosREDCfgGroup object is superseded by cbQosREDCfgGroupRev1.')
cbQosREDClassCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 11)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgMinThreshold"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgMaxThreshold"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgPktDropProb"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosREDClassCfgGroup = cbQosREDClassCfgGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosREDClassCfgGroup.setDescription('Required objects to provide CB QoS objects configuration information. cbQosREDClassCfgGroup object is superseded by cbQosREDClassCfgGroupRev1.')
cbQosPoliceCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 12)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgConformAction"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgConformSetValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExceedAction"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExceedSetValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPir"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceCfgGroup = cbQosPoliceCfgGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosPoliceCfgGroup.setDescription('Required objects to provide CB QoS objects configuration information. cbQosPoliceCfgGroup object is superseded by cbQosPoliceCfgGroupRev1.')
cbQosTSCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 13)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgAdaptiveEnabled"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgAdaptiveRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgLimitType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosTSCfgGroup = cbQosTSCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosSetCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 14)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFeature"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgIpDSCPValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgIpPrecedenceValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgQosGroupValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2CosValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsExpValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosSetCfgGroup = cbQosSetCfgGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosSetCfgGroup.setDescription('Required objects to provide CB QoS objects configuration information. cbQosSetCfgGroup object is superseded by cbQosSetCfgGroupRev1.')
cbQosClassMapStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 15)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPostPolicyByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPostPolicyByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPostPolicyByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPostPolicyBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropBitRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosClassMapStatsGroup = cbQosClassMapStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosClassMapStatsGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosNoBufferDropGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 16)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMNoBufDropPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMNoBufDropPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMNoBufDropPkt64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosNoBufferDropGroup = cbQosNoBufferDropGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosNoBufferDropGroup.setDescription('Optional objects to provide CB QoS summary statistics.')
cbQosQueueingDynamicQNumberGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 17)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgDynamicQNumber"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosQueueingDynamicQNumberGroup = cbQosQueueingDynamicQNumberGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingDynamicQNumberGroup.setDescription('Optional objects to provide CB QoS Queueing information.')
cbQosTrafficShapingDelayCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 18)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDelayedByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDelayedByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDelayedByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDelayedPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDelayedPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDelayedPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsActive"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosTrafficShapingDelayCountersGroup = cbQosTrafficShapingDelayCountersGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosTrafficShapingDelayCountersGroup.setDescription('Optional objects to provide CB QoS traffic-shaping information.')
cbQosMatchStmtStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 19)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchPrePolicyPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchPrePolicyPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchPrePolicyPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchPrePolicyByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchPrePolicyByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchPrePolicyByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMatchPrePolicyBitRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosMatchStmtStatsGroup = cbQosMatchStmtStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosMatchStmtStatsGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosPoliceStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 20)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededBitRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceStatsGroup = cbQosPoliceStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceStatsGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosQueueingStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 21)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCurrentQDepth"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingMaxQDepth"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDiscardByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDiscardByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDiscardByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDiscardPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDiscardPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingDiscardPkt64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosQueueingStatsGroup = cbQosQueueingStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingStatsGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosTSStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 22)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDropByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDropByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDropByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDropPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDropPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsDropPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSStatsCurrentQSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosTSStatsGroup = cbQosTSStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosTSStatsGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosREDClassStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 23)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDRandomDropPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDRandomDropPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDRandomDropPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDRandomDropByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDRandomDropByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDRandomDropByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTailDropPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTailDropPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTailDropPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTailDropByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTailDropByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTailDropByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDMeanQSizeUnits"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDMeanQSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosREDClassStatsGroup = cbQosREDClassStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosREDClassStatsGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosREDClassXmitCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 24)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTransmitPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTransmitPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTransmitPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTransmitByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTransmitByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDTransmitByte64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosREDClassXmitCountersGroup = cbQosREDClassXmitCountersGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosREDClassXmitCountersGroup.setDescription('Optional objects to provide CB QoS objects configuration information.')
cbQosAFPoliceStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 25)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedBitRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosAFPoliceStatsGroup = cbQosAFPoliceStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosAFPoliceStatsGroup.setDescription('Optional objects to provide CB QoS objects configuration information.')
cbQosAFPoliceCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 26)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgViolateAction"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgViolateSetValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosAFPoliceCfgGroup = cbQosAFPoliceCfgGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosAFPoliceCfgGroup.setDescription('Optional objects to provide CB QoS objects configuration information. cbQosAFPoliceCfgGroup object is superseded by cbQosAFPoliceViolateCfgGroup.')
cbQosREDDscpCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 27)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgDscpPrec"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosREDDscpCfgGroup = cbQosREDDscpCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosREDDscpCfgGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosNewSetCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 28)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2CosValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosNewSetCfgGroup = cbQosNewSetCfgGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosNewSetCfgGroup.setDescription('Optional objects to provide CB QoS objects configuration information. cbQosNewSetCfgGroup object is superseded by cbQosSetCfgL2Group.')
cbQosQueueingCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 29)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgBandwidth"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgBandwidthUnits"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgFlowEnabled"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgPriorityEnabled"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgIndividualQSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgPrioBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitUnits"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgAggregateQLimit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosQueueingCfgGroupRev1 = cbQosQueueingCfgGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosQueueingCfgGroupRev1.setDescription('Required objects to provide CB QoS objects configuration information. cbQosQueueingCfgGroupRev1 object is superseded by cbQosQueueingCfgGroupRev2.')
cbQosREDCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 30)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgExponWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosREDCfgGroupRev1 = cbQosREDCfgGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cbQosREDCfgGroupRev1.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosREDClassCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 31)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgPktDropProb"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgThresholdUnit"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMinThreshold"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMaxThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosREDClassCfgGroupRev1 = cbQosREDClassCfgGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosREDClassCfgGroupRev1.setDescription('Required objects to provide CB QoS objects configuration information. cbQosREDClassCfgGroupRev1 object is superseded by .')
cbQosPoliceCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 32)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPir"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceCfgGroupRev1 = cbQosPoliceCfgGroupRev1.setStatus('deprecated')
if mibBuilder.loadTexts: cbQosPoliceCfgGroupRev1.setDescription('Required objects to provide CB QoS objects configuration information. cbQosPoliceCfgGroupRev1 object is superseded by cbQosPoliceCfgGroupRev2.')
cbQosPoliceActionCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 33)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgConform"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgConformSetValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgExceed"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgExceedSetValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceActionCfgGroup = cbQosPoliceActionCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceActionCfgGroup.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosAFPoliceViolateCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 34)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgViolate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceActionCfgViolateSetValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosAFPoliceViolateCfgGroup = cbQosAFPoliceViolateCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosAFPoliceViolateCfgGroup.setDescription('Optional objects to provide CB QoS objects configuration information.')
cbQosREDECNCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 35)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgECNEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosREDECNCfgGroup = cbQosREDECNCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosREDECNCfgGroup.setDescription('Optional objects to provide CB QoS objects configuration information.')
cbQosREDClassECNMarkCountersGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 36)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNMarkPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNMarkPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNMarkPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNMarkByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNMarkByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDECNMarkByte64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosREDClassECNMarkCountersGroup = cbQosREDClassECNMarkCountersGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosREDClassECNMarkCountersGroup.setDescription('Optional objects to provide CB QoS objects configuration information.')
cbQosPoliceCfgExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 37)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgRate64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceCfgExtGroup = cbQosPoliceCfgExtGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgExtGroup.setDescription('Optional objects to provide the information of the committed policing rate that is greater than the maximum value reportable by cbQosPoliceCfgRate.')
cbQosSetCfgGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 38)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFeature"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgIpDSCPValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgIpPrecedenceValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgQosGroupValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosSetCfgGroupRev1 = cbQosSetCfgGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgGroupRev1.setDescription('Required objects to provide CB QoS objects configuration information for SET/Marking feature.')
cbQosSetCfgMplsImpositionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 39)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsExpValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosSetCfgMplsImpositionGroup = cbQosSetCfgMplsImpositionGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgMplsImpositionGroup.setDescription('Optional object to provide CB QoS objects configuration information for SET/Marking feature.')
cbQosSetCfgDiscardClassGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 40)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDiscardClassValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosSetCfgDiscardClassGroup = cbQosSetCfgDiscardClassGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgDiscardClassGroup.setDescription('Optional object to provide CB QoS objects configuration information for SET/Marking feature.')
cbQosSetCfgMPLSTopMostGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 41)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgMplsExpTopMostValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosSetCfgMPLSTopMostGroup = cbQosSetCfgMPLSTopMostGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgMPLSTopMostGroup.setDescription('Optional object to provide CB QoS objects configuration information for SET/Marking feature.')
cbQosPoliceCfgGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 42)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtBurstSize"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceCfgGroupRev2 = cbQosPoliceCfgGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgGroupRev2.setDescription('Required objects to provide CB QoS objects configuration information for POLICE feature.')
cbQosPoliceCfgPirGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 43)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPir"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceCfgPirGroup = cbQosPoliceCfgPirGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgPirGroup.setDescription('Optional objects to provide CB QoS policing PIR rate.')
cbQosPoliceCfgPercentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 44)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgRateType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentRateValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPercentPirValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceCfgPercentGroup = cbQosPoliceCfgPercentGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgPercentGroup.setDescription('Optional objects to provide CB QoS policing CIR and PIR rates in percentage.')
cbQosTSCfgPercentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 45)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgRateType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgPercentRateValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosTSCfgPercentGroup = cbQosTSCfgPercentGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgPercentGroup.setDescription('Optional objects to provide CB QoS committed traffic-shaping rate in percentage.')
cbQosIPHCCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 46)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgOption"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosIPHCCfgGroup = cbQosIPHCCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCCfgGroup.setDescription('Optional object to provide CB QoS IP header compression configuration information.')
cbQosIPHCStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 47)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSentPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSentPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSentPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpCmprsOutPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpCmprsOutPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpCmprsOutPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSavedByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSavedByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSavedByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSentByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSentByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSentByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpSentByteRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSentPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSentPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSentPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpCmprsOutPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpCmprsOutPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpCmprsOutPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSavedByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSavedByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSavedByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSentByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSentByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSentByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpSentByteRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosIPHCStatsGroup = cbQosIPHCStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCStatsGroup.setDescription('Optional objects to provide CB QoS IP header compression statistic information.')
cbQosServicePolicyGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 48)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosIfType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyDirection"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIfIndex"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosFrDLCI"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAtmVPI"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosAtmVCI"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEntityIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosServicePolicyGroupRev1 = cbQosServicePolicyGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cbQosServicePolicyGroupRev1.setDescription('Required objects to provide CB QoS objects configuration information. This group deprecates cbQosServicePolicyGroup.')
cbQosQueueingCfgQLimitTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 49)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgAggrQLimitTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosQueueingCfgQLimitTimeGroup = cbQosQueueingCfgQLimitTimeGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgQLimitTimeGroup.setDescription('Optional object to provide Aggregate Queue time based Limit configuration information.')
cbQosREDCfgThresholdTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 50)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMinThresholdTime"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMaxThresholdTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosREDCfgThresholdTimeGroup = cbQosREDCfgThresholdTimeGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosREDCfgThresholdTimeGroup.setDescription('Optional objects to provide WRED time based threshold Limit configuration information.')
cbQosPoliceCfgCellGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 51)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCellPir"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgBurstCell"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtBurstCell"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceCfgCellGroup = cbQosPoliceCfgCellGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgCellGroup.setDescription('Optional objects to provide CB QoS policing cell based rate configuration information.')
cbQosPoliceCfgTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 52)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgBurstTime"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtBurstTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceCfgTimeGroup = cbQosPoliceCfgTimeGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgTimeGroup.setDescription('Optional objects to provide CB QoS policing time based burst size configuration information.')
cbQosPoliceCfgCdvtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 53)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgCdvt"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceCfgCdvtGroup = cbQosPoliceCfgCdvtGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgCdvtGroup.setDescription('Optional objects to provide CB QoS policing ATM CDVT configuration information.')
cbQosPoliceCfgColorGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 54)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgConformColor"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExceedColor"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceCfgColorGroup = cbQosPoliceCfgColorGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgColorGroup.setDescription('Optional objects to provide CB QoS policing color aware configuration information.')
cbQosTSCfgTimeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 55)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgBurstTime"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtBurstTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosTSCfgTimeGroup = cbQosTSCfgTimeGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgTimeGroup.setDescription('Optional objects to provide CB QoS traffic-shaping time based burst size configuration information.')
cbQosSetCfgSrpPriorityGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 56)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgSrpPriority"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosSetCfgSrpPriorityGroup = cbQosSetCfgSrpPriorityGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgSrpPriorityGroup.setDescription('Optional object to provide CB QoS SET SRP Priority configuration information.')
cbQosSetCfgFrFecnBecnGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 57)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrFecnBecn"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosSetCfgFrFecnBecnGroup = cbQosSetCfgFrFecnBecnGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgFrFecnBecnGroup.setDescription('Optional object to provide CB QoS SET Frame Relay FECN BECN configuration information.')
cbQosSetStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 58)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetDscpPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetPrecedencePkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetQosGroupPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetFrDePkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetAtmClpPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetL2CosPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetMplsExpImpositionPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetDiscardClassPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetMplsExpTopMostPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetSrpPriorityPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetFrFecnBecnPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetDscpTunnelPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetPrecedenceTunnelPkt64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosSetStatsGroup = cbQosSetStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosSetStatsGroup.setDescription('Optional objects to provide CB QoS SET statistical information.')
cbQosPoliceColorStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 59)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorCfmPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorCfmByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorExdPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorExdByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorVltPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorVltByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExdColorExdPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExdColorExdByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExdColorVltPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExdColorVltByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceVltColorVltPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceVltColorVltByte64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceColorStatsGroup = cbQosPoliceColorStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceColorStatsGroup.setDescription('Optional objects to provide CB QoS Assured Forwarding Policing Color Aware statistical information.')
cbQosTableMapCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 60)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgBehavior"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapCfgDftValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTableMapValueCfgTo"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetIpDscpFromType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetIpDscpMapName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetIpPrecedenceFromType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetIpPrecedenceMapName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetQosGroupFromType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetQosGroupMapName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetL2CosFromType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetL2CosMapName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetMplsExpImpFromType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetMplsExpImpMapName"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetMplsExpTopFromType"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTMSetMplsExpTopMapName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosTableMapCfgGroup = cbQosTableMapCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosTableMapCfgGroup.setDescription('Optional objects to provide CB QoS Enhanced Packet Marking configuration information.')
cbQosEBCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 61)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgMechanism"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgDropTarget"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgDelayTarget"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBCfgDelayThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosEBCfgGroup = cbQosEBCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosEBCfgGroup.setDescription('Optional objects to provide Estimate Bandwidth configuration information.')
cbQosEBStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 62)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsCorvilEBValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsCorvilEBStatus"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosEBStatsCorvilCTD"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosEBStatsGroup = cbQosEBStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosEBStatsGroup.setDescription('Optional objects to provide Estimate Bandwidth status information.')
cbQosServicePolicyExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 63)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosVlanIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosServicePolicyExtGroup = cbQosServicePolicyExtGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosServicePolicyExtGroup.setDescription('Optional objects to provide more information about a particular service policy instance.')
cbQosMeasureIPSLACfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 64)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroupIndex"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosMeasureIPSLACfgGroupName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosMeasureIPSLACfgGroup = cbQosMeasureIPSLACfgGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosMeasureIPSLACfgGroup.setDescription('Optional objects to configure IPSLA measure action.')
cbQosTSCfgExtGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 65)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgRate64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosTSCfgExtGroup = cbQosTSCfgExtGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosTSCfgExtGroup.setDescription('Objects to provide the information of the committed shaping rate that is greater than the maximum value reportable by cbQosTSCfgRate.')
cbQosQueueingCfgGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 66)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgBandwidth"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgBandwidthUnits"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgFlowEnabled"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgPriorityEnabled"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgIndividualQSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgPrioBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgQLimitUnits"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgAggregateQLimit"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgPriorityLevel"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosQueueingCfgGroupRev2 = cbQosQueueingCfgGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingCfgGroupRev2.setDescription('Required objects to provide CB QoS objects configuration information')
cbQosSetCfgL2Group = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 67)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2CosValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgL2CosInnerValue"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosSetCfgL2Group = cbQosSetCfgL2Group.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgL2Group.setDescription('Optional objects to provide CB QoS objects configuration information')
cbQosREDClassCfgGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 68)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDCfgPktDropProb"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMinThreshold"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMaxThreshold"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMinThresholdTime"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMaxThresholdTime"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMaxThresholdUnit"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosREDClassCfgMinThresholdUnit"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosREDClassCfgGroupRev2 = cbQosREDClassCfgGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cbQosREDClassCfgGroupRev2.setDescription('Required objects to provide CB QoS objects configuration information.')
cbQosQueueingClassCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 69)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgThreshold"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgThresholdUnit"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingClassCfgQLimitWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosQueueingClassCfgGroup = cbQosQueueingClassCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingClassCfgGroup.setDescription('Required objects to provide CB QoS objects configuration information')
cbQosPoliceCfgGroupRev3 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 70)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtBurstSize"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgConditional"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceCfgGroupRev3 = cbQosPoliceCfgGroupRev3.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceCfgGroupRev3.setDescription('Required objects to provide CB QoS objects configuration information for POLICE feature')
cbQosC3plAccountCfgGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 71)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountFeatureType"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosC3plAccountCfgGroup = cbQosC3plAccountCfgGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountCfgGroup.setDescription('Required objects to provide c3pl account action configuration information (provide drop types) .')
cbQosC3plAccountStatsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 72)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountDropPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountDropPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountDropPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountDropByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountDropByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountDropByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountTailDropPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountTailDropPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountTailDropPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountTailDropByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountTailDropByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosC3plAccountTailDropByte64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosC3plAccountStatsGroup = cbQosC3plAccountStatsGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosC3plAccountStatsGroup.setDescription('Optional objects to provide c3pl account action statistics information.')
cbQosSetCfgFrDeGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 73)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgFrDe"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosSetCfgFrDeGroup = cbQosSetCfgFrDeGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgFrDeGroup.setDescription('Optional object to provide CB QoS objects marking configuration information on frame relay header.')
cbQosEVCGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 74)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosEVC"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosEVCGroup = cbQosEVCGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosEVCGroup.setDescription('Optional objects to provide EVC information.')
cbQosFragmentGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 75)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMFragmentPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMFragmentPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMFragmentPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMFragmentByteOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMFragmentByte"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMFragmentByte64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosFragmentGroup = cbQosFragmentGroup.setStatus('current')
if mibBuilder.loadTexts: cbQosFragmentGroup.setDescription('Optional objects to provide Service Fragment information.')
cbQosSetCfgExt = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 76)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgIpPrecedenceTunnelValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgIpDSCPTunnelValue"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDei"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosSetCfgDeiImposition"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosSetCfgExt = cbQosSetCfgExt.setStatus('current')
if mibBuilder.loadTexts: cbQosSetCfgExt.setDescription('Additional objects for configuring mark action on precedence tunnel,dscp tunnel, dei, dei imposition.')
cbQosPoliceColorStatsExt = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 77)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExdColorExdBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorCfmBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorExdBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfmColorVltBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExdColorVltBitRate"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceVltColorVltBitRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosPoliceColorStatsExt = cbQosPoliceColorStatsExt.setStatus('current')
if mibBuilder.loadTexts: cbQosPoliceColorStatsExt.setDescription('Additional objects for police color aware stats on conform rate, exceed rate, violate rate')
cbQosIPHCCfgExt = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 78)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCCfgEnabled"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosIPHCCfgExt = cbQosIPHCCfgExt.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCCfgExt.setDescription('Additional object to indicate IPHC action configured in policy class.')
cbQosIPHCStatsExt = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 79)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpFullHdrSentPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpFullHdrSentPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCRtpFullHdrSentPkt64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpFullHdrSentPktOverflow"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpFullHdrSentPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosIPHCTcpFullHdrSentPkt64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosIPHCStatsExt = cbQosIPHCStatsExt.setStatus('current')
if mibBuilder.loadTexts: cbQosIPHCStatsExt.setDescription('Additional objects for IPHC stats.')
cbQos421XRCfgExt = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 80)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosPolicyDiscontinuityTime"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgBandwidth64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCfgIndividualQSize64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgBurstSize64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgExtBurstSize64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceCfgPir64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgBurstSize64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosTSCfgExtBurstSize64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQos421XRCfgExt = cbQos421XRCfgExt.setStatus('current')
if mibBuilder.loadTexts: cbQos421XRCfgExt.setDescription('The following 4 changes have been made 1. Added 64 bit objects ======================== cbQosQueueingCfgBandwidth64, cbQosQueueingCfgIndividualQSize64, cbQosPoliceCfgBurstSize64, cbQosPoliceCfgExtBurstSize64, cbQosPoliceCfgPir64, cbQosTSCfgBurstSize64, cbQosTSCfgExtBurstSize64 2. Deprecated the objects corresponding to the newly added 64 bit objects ================================================================ cbQosQueueingCfgBandwidth, cbQosQueueingCfgIndividualQSize, cbQosPoliceCfgBurstSize, cbQosPoliceCfgExtBurstSize, cbQosPoliceCfgPir, cbQosTSCfgBurstSize, cbQosTSCfgExtBurstSize 2. Range expanded for ================== cbQosQueueingCfgBandwidth, cbQosQueueingCfgIndividualQSize, cbQosPoliceCfgBurstSize, cbQosPoliceCfgExtBurstSize, cbQosPoliceCfgPir, cbQosTSCfgBurstSize, cbQosTSCfgExtBurstSize, cbQosREDCfgMinThreshold, cbQosREDCfgMaxThreshold, cbQosPoliceCfgRate, cbQosPoliceCfgBurstCell, cbQosPoliceCfgExtBurstCell, cbQosPoliceCfgBurstTime, cbQosPoliceCfgExtBurstTime, cbQosPoliceCfgCdvt, cbQosTSCfgRate,cbQosTSCfgBurstTime, cbQosTSCfgExtBurstTime 3. New object added ================ cbQosPolicyDiscontinuityTime 4. Added new type (srp-priority) to ================================== PoliceAction')
cbQosBitRateExt = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 81)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPrePolicyBitRate64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMPostPolicyBitRate64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosCMDropBitRate64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceConformedBitRate64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceExceededBitRate64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosPoliceViolatedBitRate64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosBitRateExt = cbQosBitRateExt.setStatus('current')
if mibBuilder.loadTexts: cbQosBitRateExt.setDescription('Added the following 64-bit Bit Rate Objects cbQosCMPrePolicyBitRate64 cbQosCMPostPolicyBitRate64 cbQosCMDropBitRate64 cbQosPoliceConformedBitRate64 cbQosPoliceExceededBitRate64 cbQosPoliceViolatedBitRate64')
cbQosQueueingStatsGroupRev1 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 82)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingCurrentQDepthPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingMaxQDepthPkt"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingTransmitByte64"), ("CISCO-CLASS-BASED-QOS-MIB", "cbQosQueueingTransmitPkt64"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosQueueingStatsGroupRev1 = cbQosQueueingStatsGroupRev1.setStatus('current')
if mibBuilder.loadTexts: cbQosQueueingStatsGroupRev1.setDescription('Optional objects to provide CB QoS objects configuration information.')
cbQosServicePolicyExtGroupRev2 = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 166, 2, 2, 83)).setObjects(("CISCO-CLASS-BASED-QOS-MIB", "cbQosParentPolicyIndex"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cbQosServicePolicyExtGroupRev2 = cbQosServicePolicyExtGroupRev2.setStatus('current')
if mibBuilder.loadTexts: cbQosServicePolicyExtGroupRev2.setDescription('Added cbQosParentPolicyIndex to cbQosServicePolicyTable.')
mibBuilder.exportSymbols("CISCO-CLASS-BASED-QOS-MIB", cbQosFrameRelayPolicyEntry=cbQosFrameRelayPolicyEntry, cbQosCMDropPkt=cbQosCMDropPkt, cbQosMatchStmtStatsEntry=cbQosMatchStmtStatsEntry, cbQosQueueingDiscardPktOverflow=cbQosQueueingDiscardPktOverflow, cbQosSetCfgSrpPriorityGroup=cbQosSetCfgSrpPriorityGroup, cbQosPoliceViolatedByteOverflow=cbQosPoliceViolatedByteOverflow, cbQosREDECNCfgGroup=cbQosREDECNCfgGroup, QueueMechanism=QueueMechanism, cbQosPoliceCfgColorGroup=cbQosPoliceCfgColorGroup, cbQosQueueingCfgGroupRev2=cbQosQueueingCfgGroupRev2, cbQosPolicyMapCfgTable=cbQosPolicyMapCfgTable, cbQosIPHCRtpFullHdrSentPkt64=cbQosIPHCRtpFullHdrSentPkt64, cbQosC3plAccountDropByte=cbQosC3plAccountDropByte, cbQosQueueingClassCfgThresholdUnit=cbQosQueueingClassCfgThresholdUnit, cbQosPoliceExceededByte=cbQosPoliceExceededByte, cbQosPoliceCfgExtBurstSize=cbQosPoliceCfgExtBurstSize, cbQosPoliceCfmColorCfmByte64=cbQosPoliceCfmColorCfmByte64, cbQosCMDropBitRate64=cbQosCMDropBitRate64, cbQosPoliceCfgPercentRateValue=cbQosPoliceCfgPercentRateValue, cbQosPoliceCfgExceedColor=cbQosPoliceCfgExceedColor, cbQosPoliceCfmColorVltBitRate=cbQosPoliceCfmColorVltBitRate, cbQosC3plAccountStatsTable=cbQosC3plAccountStatsTable, cbQosIPHCRtpSentByteOverflow=cbQosIPHCRtpSentByteOverflow, cbQosQueueingStatsGroupRev1=cbQosQueueingStatsGroupRev1, cbQosMatchPrePolicyPktOverflow=cbQosMatchPrePolicyPktOverflow, cbQosIfType=cbQosIfType, cbQosC3plAccountCfgEntry=cbQosC3plAccountCfgEntry, cbQosSetMplsExpTopMostPkt64=cbQosSetMplsExpTopMostPkt64, cbQosSetL2CosPkt64=cbQosSetL2CosPkt64, cbQosClassMapStatsGroup=cbQosClassMapStatsGroup, PoliceAction=PoliceAction, cbQosMatchPrePolicyBitRate=cbQosMatchPrePolicyBitRate, cbQosCMCfgTable=cbQosCMCfgTable, cbQosQueueingCfgQLimitUnits=cbQosQueueingCfgQLimitUnits, cbQosQueueingCfgFlowEnabled=cbQosQueueingCfgFlowEnabled, cbQosQueueingCfgDynamicQNumber=cbQosQueueingCfgDynamicQNumber, cbQosC3plAccountTailDropPktOverflow=cbQosC3plAccountTailDropPktOverflow, cbQosSetCfgDei=cbQosSetCfgDei, cbQosATMPVCPolicyGroup=cbQosATMPVCPolicyGroup, cbQosREDClassCfgMinThreshold=cbQosREDClassCfgMinThreshold, cbQosTSStatsTable=cbQosTSStatsTable, cbQosIPHCTcpCmprsOutPkt64=cbQosIPHCTcpCmprsOutPkt64, cbQosQueueingStatsTable=cbQosQueueingStatsTable, cbQosATMPolicyIndex=cbQosATMPolicyIndex, cbQosPolicyMapDesc=cbQosPolicyMapDesc, cbQosPoliceCfgViolateSetValue=cbQosPoliceCfgViolateSetValue, cbQosSetCfgFrFecnBecn=cbQosSetCfgFrFecnBecn, cbQosCMFragmentByte64=cbQosCMFragmentByte64, cbQosSetAtmClpPkt64=cbQosSetAtmClpPkt64, cbQosQueueingClassConfigIndex=cbQosQueueingClassConfigIndex, cbQosIPHCStatsEntry=cbQosIPHCStatsEntry, cbQosMatchPrePolicyByte=cbQosMatchPrePolicyByte, cbQosSetCfgMplsExpValue=cbQosSetCfgMplsExpValue, cbQosCMDropByte64=cbQosCMDropByte64, cbQosSetCfgIpDSCPValue=cbQosSetCfgIpDSCPValue, cbQosPoliceColorStatsExt=cbQosPoliceColorStatsExt, cbQosPoliceConformedByteOverflow=cbQosPoliceConformedByteOverflow, cbQosTSStatsDropByte=cbQosTSStatsDropByte, cbQosNoBufferDropGroup=cbQosNoBufferDropGroup, cbQosPoliceExceededByte64=cbQosPoliceExceededByte64, cbQosIPHCStatsExt=cbQosIPHCStatsExt, REDMechanism=REDMechanism, cbQosTSStats=cbQosTSStats, cbQosPoliceCfgConformAction=cbQosPoliceCfgConformAction, cbQosIPHCRtpFullHdrSentPkt=cbQosIPHCRtpFullHdrSentPkt, cbQosSetCfgMPLSTopMostGroup=cbQosSetCfgMPLSTopMostGroup, cbQosTSStatsDropByte64=cbQosTSStatsDropByte64, cbQosClassMapCfg=cbQosClassMapCfg, cbQosIPHCCfgTable=cbQosIPHCCfgTable, cbQosPoliceCfgTable=cbQosPoliceCfgTable, cbQosPoliceViolatedPkt=cbQosPoliceViolatedPkt, cbQosEBCfgDropTarget=cbQosEBCfgDropTarget, ciscocbQosMIBComplianceRev2=ciscocbQosMIBComplianceRev2, cbQosTSCfgBurstSize=cbQosTSCfgBurstSize, cbQosTSStatsCurrentQSize=cbQosTSStatsCurrentQSize, cbQosCMPrePolicyBitRate64=cbQosCMPrePolicyBitRate64, cbQosMeasureIPSLACfgGroupName=cbQosMeasureIPSLACfgGroupName, cbQosTableMapCfgBehavior=cbQosTableMapCfgBehavior, cbQosSetCfgGroup=cbQosSetCfgGroup, cbQosCMPrePolicyPktOverflow=cbQosCMPrePolicyPktOverflow, cbQosPoliceActionCfgExceed=cbQosPoliceActionCfgExceed, cbQosIPHCCfgGroup=cbQosIPHCCfgGroup, cbQosPolicyDirection=cbQosPolicyDirection, ciscocbQosMIBComplianceRev5=ciscocbQosMIBComplianceRev5, cbQosPoliceActionCfg=cbQosPoliceActionCfg, cbQosMatchStmtStatsTable=cbQosMatchStmtStatsTable, cbQosParentObjectsIndex=cbQosParentObjectsIndex, cbQosPoliceViolatedPkt64=cbQosPoliceViolatedPkt64, cbQosPoliceCfmColorVltByte64=cbQosPoliceCfmColorVltByte64, cbQosQueueingTransmitPkt64=cbQosQueueingTransmitPkt64, cbQosQueueingMaxQDepth=cbQosQueueingMaxQDepth, cbQosC3plAccountCfgGroup=cbQosC3plAccountCfgGroup, cbQosServicePolicyExtGroupRev2=cbQosServicePolicyExtGroupRev2, cbQosIPHCRtpSentByteRate=cbQosIPHCRtpSentByteRate, cbQosPoliceActionCfgViolateSetValue=cbQosPoliceActionCfgViolateSetValue, cbQosPoliceExdColorExdByte64=cbQosPoliceExdColorExdByte64, cbQosQueueingCfgBandwidthUnits=cbQosQueueingCfgBandwidthUnits, cbQosPolicyMapCfgGroup=cbQosPolicyMapCfgGroup, cbQosTableMapValueCfgFrom=cbQosTableMapValueCfgFrom, cbQosCMPrePolicyByte64=cbQosCMPrePolicyByte64, cbQosPoliceCfgExtBurstSize64=cbQosPoliceCfgExtBurstSize64, cbQosTMSetQosGroupMapName=cbQosTMSetQosGroupMapName, cbQosC3plAccountTailDropPkt=cbQosC3plAccountTailDropPkt, SetFeatureType=SetFeatureType, cbQosPoliceCfmColorCfmPkt64=cbQosPoliceCfmColorCfmPkt64, cbQosObjectsType=cbQosObjectsType, cbQosPoliceColorStatsGroup=cbQosPoliceColorStatsGroup, cbQosTableMapValueCfgTo=cbQosTableMapValueCfgTo, cbQosTSStatsDropPkt64=cbQosTSStatsDropPkt64, cbQosTSCfgGroup=cbQosTSCfgGroup, cbQosPoliceCfgGroupRev3=cbQosPoliceCfgGroupRev3, cbQosPoliceExdColorExdPkt64=cbQosPoliceExdColorExdPkt64, ciscocbQosMIBComplianceRev12=ciscocbQosMIBComplianceRev12, cbQosEVCGroup=cbQosEVCGroup, cbQosTableMapSetCfgEntry=cbQosTableMapSetCfgEntry, cbQosQueueingCurrentQDepth=cbQosQueueingCurrentQDepth, ciscocbQosMIBComplianceRev3=ciscocbQosMIBComplianceRev3, cbQosREDClassCfg=cbQosREDClassCfg, cbQosMeasureIPSLACfgTable=cbQosMeasureIPSLACfgTable, cbQosQueueingCfgEntry=cbQosQueueingCfgEntry, cbQosIPHCTcpSavedByte64=cbQosIPHCTcpSavedByte64, cbQosREDClassCfgThresholdUnit=cbQosREDClassCfgThresholdUnit, QosObjectType=QosObjectType, cbQosCMFragmentPkt64=cbQosCMFragmentPkt64, cbQosPoliceViolatedPktOverflow=cbQosPoliceViolatedPktOverflow, cbQosTSCfgPercentGroup=cbQosTSCfgPercentGroup, cbQosParentPolicyIndex=cbQosParentPolicyIndex, cbQosCMDropByte=cbQosCMDropByte, cbQosMatchPrePolicyPkt64=cbQosMatchPrePolicyPkt64, cbQosSetMplsExpImpositionPkt64=cbQosSetMplsExpImpositionPkt64, cbQosC3plAccountTailDropPkt64=cbQosC3plAccountTailDropPkt64, cbQosQueueingDiscardByteOverflow=cbQosQueueingDiscardByteOverflow, cbQosREDClassStatsGroup=cbQosREDClassStatsGroup, cbQosTSStatsDelayedPktOverflow=cbQosTSStatsDelayedPktOverflow, cbQosPoliceCfgConformSetValue=cbQosPoliceCfgConformSetValue, cbQosFrameRelayVCPolicy=cbQosFrameRelayVCPolicy, cbQosSetCfgExt=cbQosSetCfgExt, cbQosREDCfgTable=cbQosREDCfgTable, cbQosTableMapCfgTable=cbQosTableMapCfgTable, cbQosIPHCRtpSentPkt=cbQosIPHCRtpSentPkt, QueueingBandwidthUnits=QueueingBandwidthUnits, cbQosPoliceCfgExtBurstCell=cbQosPoliceCfgExtBurstCell, cbQosObjectsEntry=cbQosObjectsEntry, cbQosPoliceCfgBurstTime=cbQosPoliceCfgBurstTime, cbQosEBCfgMechanism=cbQosEBCfgMechanism, cbQosPoliceVltColorVltBitRate=cbQosPoliceVltColorVltBitRate, cbQosQueueingMaxQDepthPkt=cbQosQueueingMaxQDepthPkt, cbQosREDCfgPktDropProb=cbQosREDCfgPktDropProb, cbQosQueueingDiscardByte64=cbQosQueueingDiscardByte64, CbQosTMSetType=CbQosTMSetType, cbQosCMDropPktOverflow=cbQosCMDropPktOverflow, cbQosSetCfgIpPrecedenceValue=cbQosSetCfgIpPrecedenceValue, cbQosPoliceCfgExceedAction=cbQosPoliceCfgExceedAction, cbQosPoliceCfgCdvtGroup=cbQosPoliceCfgCdvtGroup, QosMatchInfo=QosMatchInfo, cbQosTMSetMplsExpTopMapName=cbQosTMSetMplsExpTopMapName, cbQosCMDropByteOverflow=cbQosCMDropByteOverflow, cbQosClassMapStats=cbQosClassMapStats, cbQosREDClassStatsEntry=cbQosREDClassStatsEntry, cbQosNewSetCfgGroup=cbQosNewSetCfgGroup, cbQosTableMapValueCfgEntry=cbQosTableMapValueCfgEntry, cbQosEBStatsCorvilCTD=cbQosEBStatsCorvilCTD, cbQosEBCfgDelayThreshold=cbQosEBCfgDelayThreshold, cbQosATMPVCPolicyEntry=cbQosATMPVCPolicyEntry, cbQosCMPostPolicyByteOverflow=cbQosCMPostPolicyByteOverflow, cbQosPoliceActionCfgConform=cbQosPoliceActionCfgConform, cbQosREDRandomDropPktOverflow=cbQosREDRandomDropPktOverflow, cbQosCMDesc=cbQosCMDesc, cbQosObjectsIndex=cbQosObjectsIndex, cbQosIPHCRtpSentByte64=cbQosIPHCRtpSentByte64, cbQosREDCfgGroup=cbQosREDCfgGroup, cbQosEBStatsCorvilEBValue=cbQosEBStatsCorvilEBValue, cbQosREDECNMarkPkt=cbQosREDECNMarkPkt, cbQosMatchPrePolicyByteOverflow=cbQosMatchPrePolicyByteOverflow, cbQosVlanIndex=cbQosVlanIndex, PYSNMP_MODULE_ID=ciscoCBQosMIB, cbQosMatchStmtCfgTable=cbQosMatchStmtCfgTable, cbQosCMPostPolicyBitRate64=cbQosCMPostPolicyBitRate64, cbQosTSStatsDelayedByte64=cbQosTSStatsDelayedByte64, cbQosC3plAccountCfgTable=cbQosC3plAccountCfgTable, cbQosREDCfgMaxThreshold=cbQosREDCfgMaxThreshold, cbQosTSStatsDelayedPkt64=cbQosTSStatsDelayedPkt64, cbQosTMSetIpDscpMapName=cbQosTMSetIpDscpMapName, cbQosREDTailDropByteOverflow=cbQosREDTailDropByteOverflow, cbQosIPHCTcpSentByte64=cbQosIPHCTcpSentByte64, cbQosSetCfgIpPrecedenceTunnelValue=cbQosSetCfgIpPrecedenceTunnelValue, cbQosIPHCTcpSentPkt64=cbQosIPHCTcpSentPkt64, cbQosSetCfgFrFecnBecnGroup=cbQosSetCfgFrFecnBecnGroup, ciscocbQosMIBComplianceRev9=ciscocbQosMIBComplianceRev9, cbQosPoliceActionCfgConformSetValue=cbQosPoliceActionCfgConformSetValue, cbQosSetDiscardClassPkt64=cbQosSetDiscardClassPkt64, cbQosREDCfgExponWeight=cbQosREDCfgExponWeight, cbQosTMSetMplsExpImpFromType=cbQosTMSetMplsExpImpFromType, cbQosPoliceCfgConformColor=cbQosPoliceCfgConformColor, cbQosMatchStmtCfgGroup=cbQosMatchStmtCfgGroup, TrafficDirection=TrafficDirection, cbQosQueueingCfgTable=cbQosQueueingCfgTable, cbQosREDECNMarkByteOverflow=cbQosREDECNMarkByteOverflow, cbQosPoliceActionCfgExceedSetValue=cbQosPoliceActionCfgExceedSetValue, cbQosPoliceStatsTable=cbQosPoliceStatsTable, cbQosREDCfg=cbQosREDCfg, cbQosSetCfgMplsImpositionGroup=cbQosSetCfgMplsImpositionGroup, cbQosPoliceActionCfgEntry=cbQosPoliceActionCfgEntry, cbQosSetCfgFeature=cbQosSetCfgFeature, cbQosTableMapCfgDftValue=cbQosTableMapCfgDftValue, cbQosREDTailDropPkt=cbQosREDTailDropPkt, cbQosREDCfgEntry=cbQosREDCfgEntry, cbQosREDClassCfgTable=cbQosREDClassCfgTable, cbQosTSStatsDelayedByte=cbQosTSStatsDelayedByte, cbQosREDTransmitByteOverflow=cbQosREDTransmitByteOverflow, cbQosTSCfgExtGroup=cbQosTSCfgExtGroup, cbQosTSCfgBurstTime=cbQosTSCfgBurstTime, ciscoCBQosMIBObjects=ciscoCBQosMIBObjects, cbQosAtmVPI=cbQosAtmVPI, cbQosAFPoliceCfgGroup=cbQosAFPoliceCfgGroup, cbQosEVC=cbQosEVC, cbQosClassMapCfgGroup=cbQosClassMapCfgGroup, CbQosQueueUnitType=CbQosQueueUnitType, cbQosMeasureIPSLACfgEntry=cbQosMeasureIPSLACfgEntry, cbQosPolicyMapCfg=cbQosPolicyMapCfg, cbQosTSCfgBurstSize64=cbQosTSCfgBurstSize64, cbQosPoliceConformedByte=cbQosPoliceConformedByte, cbQosPoliceStatsEntry=cbQosPoliceStatsEntry, SetC3plAccountFeatureType=SetC3plAccountFeatureType, cbQosTSCfg=cbQosTSCfg, cbQosMeasureIPSLACfgGroup=cbQosMeasureIPSLACfgGroup, cbQosC3plAccountTailDropByteOverflow=cbQosC3plAccountTailDropByteOverflow, cbQosEBCfgTable=cbQosEBCfgTable, cbQosSetStatsTable=cbQosSetStatsTable, cbQosCMPrePolicyBitRate=cbQosCMPrePolicyBitRate, ciscocbQosMIBComplianceRev4=ciscocbQosMIBComplianceRev4, cbQosCMNoBufDropPkt=cbQosCMNoBufDropPkt, cbQosREDTransmitByte=cbQosREDTransmitByte, cbQosIPHCTcpSentByteRate=cbQosIPHCTcpSentByteRate, cbQosSetCfgDiscardClassGroup=cbQosSetCfgDiscardClassGroup, cbQosPoliceActionCfgIndex=cbQosPoliceActionCfgIndex, cbQosC3plAccountDropByteOverflow=cbQosC3plAccountDropByteOverflow, cbQosCMPrePolicyByteOverflow=cbQosCMPrePolicyByteOverflow, cbQosTSCfgAdaptiveRate=cbQosTSCfgAdaptiveRate, cbQosPoliceCfgPirGroup=cbQosPoliceCfgPirGroup, cbQosIPHCRtpSentPkt64=cbQosIPHCRtpSentPkt64, cbQosEBCfgEntry=cbQosEBCfgEntry, ciscocbQosMIBGroups=ciscocbQosMIBGroups, cbQosTableMapCfgGroup=cbQosTableMapCfgGroup, cbQosREDMeanQSize=cbQosREDMeanQSize, cbQosIPHCTcpCmprsOutPkt=cbQosIPHCTcpCmprsOutPkt, cbQosEBStatsCorvilEBStatus=cbQosEBStatsCorvilEBStatus, cbQosPoliceCfgBurstCell=cbQosPoliceCfgBurstCell, cbQosIPHCRtpSavedByte64=cbQosIPHCRtpSavedByte64, cbQosTableMapCfgName=cbQosTableMapCfgName, cbQosCMPostPolicyByte64=cbQosCMPostPolicyByte64, cbQosQueueingCfgGroup=cbQosQueueingCfgGroup, cbQosPoliceConformedPkt64=cbQosPoliceConformedPkt64, cbQosREDClassCfgMinThresholdTime=cbQosREDClassCfgMinThresholdTime)
mibBuilder.exportSymbols("CISCO-CLASS-BASED-QOS-MIB", cbQosTSStatsDropPkt=cbQosTSStatsDropPkt, cbQosQueueingCfgPrioBurstSize=cbQosQueueingCfgPrioBurstSize, ciscoCBQosMIB=ciscoCBQosMIB, cbQosIPHCStats=cbQosIPHCStats, cbQosTSStatsEntry=cbQosTSStatsEntry, cbQosREDClassStatsTable=cbQosREDClassStatsTable, cbQosIPHCTcpSentPktOverflow=cbQosIPHCTcpSentPktOverflow, cbQosSetPrecedencePkt64=cbQosSetPrecedencePkt64, cbQosIFPolicyIndex=cbQosIFPolicyIndex, cbQosREDTailDropPkt64=cbQosREDTailDropPkt64, cbQosTSCfgExtBurstSize=cbQosTSCfgExtBurstSize, cbQosPoliceCfgRateType=cbQosPoliceCfgRateType, cbQosPoliceExdColorVltByte64=cbQosPoliceExdColorVltByte64, cbQosQueueingStatsGroup=cbQosQueueingStatsGroup, cbQosPoliceExceededBitRate64=cbQosPoliceExceededBitRate64, cbQosPolicyMapCfgEntry=cbQosPolicyMapCfgEntry, IPHCOption=IPHCOption, cbQosInterfacePolicy=cbQosInterfacePolicy, cbQosTMSetL2CosFromType=cbQosTMSetL2CosFromType, cbQosCMNoBufDropPkt64=cbQosCMNoBufDropPkt64, ciscocbQosMIBComplianceRev11=ciscocbQosMIBComplianceRev11, cbQosQueueingClassCfgTable=cbQosQueueingClassCfgTable, QosClassInfo=QosClassInfo, cbQosQueueingCfgQLimitTimeGroup=cbQosQueueingCfgQLimitTimeGroup, cbQosREDECNMarkByte64=cbQosREDECNMarkByte64, cbQosQueueingClassCfg=cbQosQueueingClassCfg, cbQosCMDropPkt64=cbQosCMDropPkt64, cbQosMatchPrePolicyPkt=cbQosMatchPrePolicyPkt, cbQosREDRandomDropByte=cbQosREDRandomDropByte, cbQosREDClassCfgGroupRev1=cbQosREDClassCfgGroupRev1, cbQosPoliceCfgExtGroup=cbQosPoliceCfgExtGroup, cbQosCMCfgEntry=cbQosCMCfgEntry, cbQosCMDropBitRate=cbQosCMDropBitRate, cbQosREDTransmitByte64=cbQosREDTransmitByte64, cbQosREDClassStats=cbQosREDClassStats, cbQosREDClassXmitCountersGroup=cbQosREDClassXmitCountersGroup, cbQosPoliceConformedBitRate64=cbQosPoliceConformedBitRate64, cbQosSetCfgTable=cbQosSetCfgTable, cbQosREDCfgThresholdTimeGroup=cbQosREDCfgThresholdTimeGroup, TrafficShapingLimit=TrafficShapingLimit, cbQosPoliceCfgPercentGroup=cbQosPoliceCfgPercentGroup, cbQosEBStatsEntry=cbQosEBStatsEntry, cbQosServicePolicyExtGroup=cbQosServicePolicyExtGroup, cbQosServicePolicyEntry=cbQosServicePolicyEntry, cbQosREDCfgECNEnabled=cbQosREDCfgECNEnabled, cbQosFrDLCI=cbQosFrDLCI, cbQosIPHCTcpFullHdrSentPkt=cbQosIPHCTcpFullHdrSentPkt, cbQosQueueingCurrentQDepthPkt=cbQosQueueingCurrentQDepthPkt, cbQosIPHCTcpSentByteOverflow=cbQosIPHCTcpSentByteOverflow, cbQosEBStatsTable=cbQosEBStatsTable, cbQosQueueingDiscardPkt64=cbQosQueueingDiscardPkt64, cbQosQueueingCfgPriorityLevel=cbQosQueueingCfgPriorityLevel, cbQosTSCfgRate64=cbQosTSCfgRate64, cbQosCMFragmentPkt=cbQosCMFragmentPkt, cbQosCMStatsTable=cbQosCMStatsTable, cbQosTSStatsActive=cbQosTSStatsActive, cbQosIPHCRtpFullHdrSentPktOverflow=cbQosIPHCRtpFullHdrSentPktOverflow, cbQosTableMapValueCfgTable=cbQosTableMapValueCfgTable, cbQosPoliceStatsGroup=cbQosPoliceStatsGroup, cbQosIfIndex=cbQosIfIndex, cbQosEBStatsGroup=cbQosEBStatsGroup, cbQosSetCfgFrDeGroup=cbQosSetCfgFrDeGroup, cbQosPoliceConformedByte64=cbQosPoliceConformedByte64, CbQosEBType=CbQosEBType, cbQosSetCfgEntry=cbQosSetCfgEntry, cbQosPoliceExdColorVltBitRate=cbQosPoliceExdColorVltBitRate, ciscocbQosMIBComplianceRev7=ciscocbQosMIBComplianceRev7, CbQosEBCtd=CbQosEBCtd, cbQosTMSetQosGroupFromType=cbQosTMSetQosGroupFromType, cbQosCMNoBufDropPktOverflow=cbQosCMNoBufDropPktOverflow, ciscocbQosMIBConformance=ciscocbQosMIBConformance, cbQosPolicyMapName=cbQosPolicyMapName, cbQosREDRandomDropPkt=cbQosREDRandomDropPkt, cbQosTableMapCfgIndex=cbQosTableMapCfgIndex, cbQosPoliceCfgBurstSize=cbQosPoliceCfgBurstSize, CbQosRateType=CbQosRateType, cbQosQueueingClassCfgQLimitWeight=cbQosQueueingClassCfgQLimitWeight, cbQosIPHCStatsGroup=cbQosIPHCStatsGroup, cbQosTMSetMplsExpImpMapName=cbQosTMSetMplsExpImpMapName, cbQosREDCfgGroupRev1=cbQosREDCfgGroupRev1, cbQosREDTailDropByte=cbQosREDTailDropByte, cbQosC3plAccountCfg=cbQosC3plAccountCfg, cbQosC3plAccountDropPktOverflow=cbQosC3plAccountDropPktOverflow, cbQosTableMapSetCfgTable=cbQosTableMapSetCfgTable, cbQosTMSetMplsExpTopFromType=cbQosTMSetMplsExpTopFromType, cbQosPoliceConformedBitRate=cbQosPoliceConformedBitRate, cbQosIPHCRtpSavedByteOverflow=cbQosIPHCRtpSavedByteOverflow, cbQosREDValue=cbQosREDValue, cbQosREDCfgMeanQsize=cbQosREDCfgMeanQsize, cbQosEBCfgGroup=cbQosEBCfgGroup, cbQosQueueingDiscardPkt=cbQosQueueingDiscardPkt, cbQosQueueingCfg=cbQosQueueingCfg, cbQos421XRCfgExt=cbQos421XRCfgExt, cbQosC3plAccountTailDropByte=cbQosC3plAccountTailDropByte, cbQosMatchStmtInfo=cbQosMatchStmtInfo, cbQosPoliceCfgCellGroup=cbQosPoliceCfgCellGroup, cbQosREDClassCfgEntry=cbQosREDClassCfgEntry, cbQosSetCfgL2Group=cbQosSetCfgL2Group, cbQosPoliceCfgCellRate=cbQosPoliceCfgCellRate, cbQosMatchStmtCfg=cbQosMatchStmtCfg, cbQosPoliceCfgPercentPirValue=cbQosPoliceCfgPercentPirValue, cbQosMeasureIPSLACfgGroupIndex=cbQosMeasureIPSLACfgGroupIndex, cbQosFragmentGroup=cbQosFragmentGroup, InterfaceType=InterfaceType, cbQosQueueingDynamicQNumberGroup=cbQosQueueingDynamicQNumberGroup, cbQosEntityIndex=cbQosEntityIndex, cbQosQueueingCfgBandwidth64=cbQosQueueingCfgBandwidth64, cbQosPoliceCfmColorExdByte64=cbQosPoliceCfmColorExdByte64, cbQosSetStats=cbQosSetStats, cbQosREDClassCfgMinThresholdUnit=cbQosREDClassCfgMinThresholdUnit, cbQosIPHCTcpSavedByteOverflow=cbQosIPHCTcpSavedByteOverflow, cbQosREDClassCfgMaxThresholdUnit=cbQosREDClassCfgMaxThresholdUnit, cbQosSetSrpPriorityPkt64=cbQosSetSrpPriorityPkt64, ciscocbQosMIBComplianceRev8=ciscocbQosMIBComplianceRev8, cbQosC3plAccountDropByte64=cbQosC3plAccountDropByte64, cbQosATMPVCPolicy=cbQosATMPVCPolicy, cbQosInterfacePolicyTable=cbQosInterfacePolicyTable, cbQosREDCfgDscpPrec=cbQosREDCfgDscpPrec, cbQosObjectsTable=cbQosObjectsTable, cbQosQueueingDiscardByte=cbQosQueueingDiscardByte, cbQosPolicyIndex=cbQosPolicyIndex, cbQosREDTransmitPkt=cbQosREDTransmitPkt, cbQosInterfacePolicyGroup=cbQosInterfacePolicyGroup, cbQosC3plAccountTailDropByte64=cbQosC3plAccountTailDropByte64, cbQosIPHCCfgEntry=cbQosIPHCCfgEntry, cbQosSetFrDePkt64=cbQosSetFrDePkt64, cbQosPoliceExceededPkt=cbQosPoliceExceededPkt, cbQosFRPolicyIndex=cbQosFRPolicyIndex, cbQosTSCfgRate=cbQosTSCfgRate, cbQosATMPVCPolicyTable=cbQosATMPVCPolicyTable, cbQosPoliceCfgConditional=cbQosPoliceCfgConditional, cbQosObjectsGroup=cbQosObjectsGroup, cbQosPoliceCfgRate64=cbQosPoliceCfgRate64, cbQosPoliceCfgGroupRev2=cbQosPoliceCfgGroupRev2, cbQosMatchStmtStatsGroup=cbQosMatchStmtStatsGroup, cbQosBitRateExt=cbQosBitRateExt, ciscocbQosMIBComplianceRev1=ciscocbQosMIBComplianceRev1, cbQosIPHCTcpSentByte=cbQosIPHCTcpSentByte, cbQosTrafficShapingDelayCountersGroup=cbQosTrafficShapingDelayCountersGroup, cbQosQueueingStats=cbQosQueueingStats, cbQosPoliceConformedPkt=cbQosPoliceConformedPkt, cbQosTSCfgPercentRateValue=cbQosTSCfgPercentRateValue, ciscocbQosMIBComplianceRev10=ciscocbQosMIBComplianceRev10, cbQosC3plAccountStatsEntry=cbQosC3plAccountStatsEntry, cbQosSetCfgL2CosValue=cbQosSetCfgL2CosValue, cbQosIPHCRtpCmprsOutPkt64=cbQosIPHCRtpCmprsOutPkt64, cbQosIPHCRtpSavedByte=cbQosIPHCRtpSavedByte, cbQosQueueingTransmitByte64=cbQosQueueingTransmitByte64, cbQosCMFragmentByte=cbQosCMFragmentByte, cbQosSetCfgGroupRev1=cbQosSetCfgGroupRev1, cbQosQueueingClassCfgEntry=cbQosQueueingClassCfgEntry, cbQosSetCfgDeiImposition=cbQosSetCfgDeiImposition, cbQosCMInfo=cbQosCMInfo, cbQosPoliceExceededPktOverflow=cbQosPoliceExceededPktOverflow, cbQosREDRandomDropByte64=cbQosREDRandomDropByte64, cbQosIPHCStatsTable=cbQosIPHCStatsTable, cbQosSetStatsEntry=cbQosSetStatsEntry, cbQosTSCfgRateType=cbQosTSCfgRateType, cbQosIPHCCfgOption=cbQosIPHCCfgOption, cbQosREDClassCfgMaxThresholdTime=cbQosREDClassCfgMaxThresholdTime, cbQosAtmVCI=cbQosAtmVCI, cbQosIPHCTcpFullHdrSentPkt64=cbQosIPHCTcpFullHdrSentPkt64, cbQosQueueingStatsEntry=cbQosQueueingStatsEntry, cbQosPoliceVltColorVltByte64=cbQosPoliceVltColorVltByte64, cbQosQueueingCfgGroupRev1=cbQosQueueingCfgGroupRev1, cbQosAFPoliceStatsGroup=cbQosAFPoliceStatsGroup, cbQosSetCfgDiscardClassValue=cbQosSetCfgDiscardClassValue, cbQosPoliceCfgGroupRev1=cbQosPoliceCfgGroupRev1, cbQosIPHCRtpSentPktOverflow=cbQosIPHCRtpSentPktOverflow, cbQosIPHCRtpSentByte=cbQosIPHCRtpSentByte, cbQosQueueingCfgIndividualQSize64=cbQosQueueingCfgIndividualQSize64, cbQosIPHCTcpCmprsOutPktOverflow=cbQosIPHCTcpCmprsOutPktOverflow, cbQosTableMapSetCfg=cbQosTableMapSetCfg, cbQosREDECNMarkPktOverflow=cbQosREDECNMarkPktOverflow, ciscocbQosMIBComplianceRev13=ciscocbQosMIBComplianceRev13, cbQosQueueingCfgPriorityEnabled=cbQosQueueingCfgPriorityEnabled, cbQosPoliceViolatedByte64=cbQosPoliceViolatedByte64, cbQosTMSetL2CosMapName=cbQosTMSetL2CosMapName, cbQosQueueingCfgAggregateQSize=cbQosQueueingCfgAggregateQSize, cbQosSetFrFecnBecnPkt64=cbQosSetFrFecnBecnPkt64, cbQosSetCfgSrpPriority=cbQosSetCfgSrpPriority, cbQosPoliceViolatedBitRate64=cbQosPoliceViolatedBitRate64, cbQosREDTailDropPktOverflow=cbQosREDTailDropPktOverflow, cbQosTableMapCfg=cbQosTableMapCfg, cbQosPoliceCfgRate=cbQosPoliceCfgRate, cbQosEBCfgDelayTarget=cbQosEBCfgDelayTarget, cbQosSetCfgL2CosInnerValue=cbQosSetCfgL2CosInnerValue, cbQosEBCfg=cbQosEBCfg, cbQosTableMapValueCfg=cbQosTableMapValueCfg, cbQosCMFragmentPktOverflow=cbQosCMFragmentPktOverflow, cbQosPoliceCfmColorExdPkt64=cbQosPoliceCfmColorExdPkt64, ciscocbQosMIBCompliances=ciscocbQosMIBCompliances, cbQosPoliceStats=cbQosPoliceStats, cbQosMatchStmtName=cbQosMatchStmtName, cbQosPoliceExdColorVltPkt64=cbQosPoliceExdColorVltPkt64, cbQosQueueingCfgIndividualQSize=cbQosQueueingCfgIndividualQSize, cbQosMatchStmtCfgEntry=cbQosMatchStmtCfgEntry, cbQosSetCfgIpDSCPTunnelValue=cbQosSetCfgIpDSCPTunnelValue, cbQosServicePolicyGroupRev1=cbQosServicePolicyGroupRev1, cbQosPoliceCfgCdvt=cbQosPoliceCfgCdvt, cbQosPoliceCfmColorVltPkt64=cbQosPoliceCfmColorVltPkt64, cbQosConfigIndex=cbQosConfigIndex, cbQosREDECNMarkPkt64=cbQosREDECNMarkPkt64, cbQosIPHCTcpFullHdrSentPktOverflow=cbQosIPHCTcpFullHdrSentPktOverflow, cbQosObjects=cbQosObjects, cbQosQueueingCfgAggregateQLimit=cbQosQueueingCfgAggregateQLimit, cbQosMatchPrePolicyByte64=cbQosMatchPrePolicyByte64, cbQosQueueingCfgBandwidth=cbQosQueueingCfgBandwidth, cbQosFrameRelayPolicyTable=cbQosFrameRelayPolicyTable, cbQosPoliceCfgPir64=cbQosPoliceCfgPir64, cbQosCMFragmentByteOverflow=cbQosCMFragmentByteOverflow, cbQosIPHCRtpCmprsOutPktOverflow=cbQosIPHCRtpCmprsOutPktOverflow, CbQosQueueDepth=CbQosQueueDepth, cbQosCMPrePolicyByte=cbQosCMPrePolicyByte, cbQosREDClassECNMarkCountersGroup=cbQosREDClassECNMarkCountersGroup, cbQosSetDscpTunnelPkt64=cbQosSetDscpTunnelPkt64, cbQosTSCfgExtBurstTime=cbQosTSCfgExtBurstTime, cbQosIPHCTcpSavedByte=cbQosIPHCTcpSavedByte, cbQosSetCfgQosGroupValue=cbQosSetCfgQosGroupValue, cbQosPoliceActionCfgTable=cbQosPoliceActionCfgTable, cbQosSetQosGroupPkt64=cbQosSetQosGroupPkt64, cbQosPoliceCfg=cbQosPoliceCfg, cbQosPoliceCfgExceedSetValue=cbQosPoliceCfgExceedSetValue, cbQosPoliceVltColorVltPkt64=cbQosPoliceVltColorVltPkt64, cbQosPoliceExceededByteOverflow=cbQosPoliceExceededByteOverflow, cbQosTMSetIpPrecedenceMapName=cbQosTMSetIpPrecedenceMapName, cbQosCMPostPolicyByte=cbQosCMPostPolicyByte, cbQosTSStatsDelayedPkt=cbQosTSStatsDelayedPkt, cbQosSetCfgMplsExpTopMostValue=cbQosSetCfgMplsExpTopMostValue, cbQosPoliceCfgEntry=cbQosPoliceCfgEntry, cbQosFrameRelayVCPolicyGroup=cbQosFrameRelayVCPolicyGroup, cbQosTSCfgExtBurstSize64=cbQosTSCfgExtBurstSize64, cbQosSetDscpPkt64=cbQosSetDscpPkt64, cbQosPoliceCfgExtBurstTime=cbQosPoliceCfgExtBurstTime, cbQosMeasureIPSLACfg=cbQosMeasureIPSLACfg, cbQosTMSetIpPrecedenceFromType=cbQosTMSetIpPrecedenceFromType, cbQosPoliceExceededBitRate=cbQosPoliceExceededBitRate, cbQosPoliceColorStatsTable=cbQosPoliceColorStatsTable, cbQosTSStatsDelayedByteOverflow=cbQosTSStatsDelayedByteOverflow, cbQosIPHCCfgEnabled=cbQosIPHCCfgEnabled, cbQosTSCfgTimeGroup=cbQosTSCfgTimeGroup, cbQosIPHCTcpSentPkt=cbQosIPHCTcpSentPkt, cbQosInterfacePolicyEntry=cbQosInterfacePolicyEntry, cbQosREDDscpCfgGroup=cbQosREDDscpCfgGroup, cbQosIPHCCfg=cbQosIPHCCfg, cbQosPoliceActionCfgViolate=cbQosPoliceActionCfgViolate, cbQosTSStatsDropByteOverflow=cbQosTSStatsDropByteOverflow, cbQosREDTailDropByte64=cbQosREDTailDropByte64, cbQosREDClassCfgMaxThreshold=cbQosREDClassCfgMaxThreshold, cbQosMatchStmtStats=cbQosMatchStmtStats, cbQosREDRandomDropByteOverflow=cbQosREDRandomDropByteOverflow, cbQosPoliceViolatedByte=cbQosPoliceViolatedByte, cbQosC3plAccountStatsGroup=cbQosC3plAccountStatsGroup, cbQosServicePolicyTable=cbQosServicePolicyTable)
mibBuilder.exportSymbols("CISCO-CLASS-BASED-QOS-MIB", cbQosPolicyDiscontinuityTime=cbQosPolicyDiscontinuityTime, cbQosQlimitWeightValue=cbQosQlimitWeightValue, cbQosQueueingCfgAggrQLimitTime=cbQosQueueingCfgAggrQLimitTime, cbQosPoliceCfgPir=cbQosPoliceCfgPir, cbQosREDMeanQSizeUnits=cbQosREDMeanQSizeUnits, cbQosPoliceViolatedBitRate=cbQosPoliceViolatedBitRate, cbQosCMStatsEntry=cbQosCMStatsEntry, cbQosPoliceColorStats=cbQosPoliceColorStats, cbQosPoliceConformedPktOverflow=cbQosPoliceConformedPktOverflow, cbQosREDTransmitPktOverflow=cbQosREDTransmitPktOverflow, cbQosCMPrePolicyPkt=cbQosCMPrePolicyPkt, cbQosSetCfg=cbQosSetCfg, cbQosTMSetIpDscpFromType=cbQosTMSetIpDscpFromType, cbQosCMPrePolicyPkt64=cbQosCMPrePolicyPkt64, cbQosPoliceExceededPkt64=cbQosPoliceExceededPkt64, cbQosTSCfgLimitType=cbQosTSCfgLimitType, cbQosREDCfgMinThreshold=cbQosREDCfgMinThreshold, cbQosTSStatsGroup=cbQosTSStatsGroup, cbQosC3plAccountDropPkt=cbQosC3plAccountDropPkt, cbQosC3plAccountDropPkt64=cbQosC3plAccountDropPkt64, cbQosServicePolicyGroup=cbQosServicePolicyGroup, cbQosIPHCCfgExt=cbQosIPHCCfgExt, cbQosPoliceCfmColorCfmBitRate=cbQosPoliceCfmColorCfmBitRate, cbQosREDClassCfgGroup=cbQosREDClassCfgGroup, cbQosPoliceCfgGroup=cbQosPoliceCfgGroup, cbQosPoliceCfgCellPir=cbQosPoliceCfgCellPir, cbQosTSCfgTable=cbQosTSCfgTable, cbQosPoliceActionCfgGroup=cbQosPoliceActionCfgGroup, cbQosIPHCRtpCmprsOutPkt=cbQosIPHCRtpCmprsOutPkt, cbQosREDRandomDropPkt64=cbQosREDRandomDropPkt64, cbQosPoliceCfgBurstSize64=cbQosPoliceCfgBurstSize64, ciscocbQosMIBCompliance=ciscocbQosMIBCompliance, cbQosTSStatsDropPktOverflow=cbQosTSStatsDropPktOverflow, cbQosC3plAccountStats=cbQosC3plAccountStats, cbQosPoliceColorStatsEntry=cbQosPoliceColorStatsEntry, cbQosPoliceCfgTimeGroup=cbQosPoliceCfgTimeGroup, cbQosC3plAccountFeatureType=cbQosC3plAccountFeatureType, cbQosSetPrecedenceTunnelPkt64=cbQosSetPrecedenceTunnelPkt64, cbQosServicePolicy=cbQosServicePolicy, ciscocbQosMIBComplianceRev6=ciscocbQosMIBComplianceRev6, cbQosPoliceCfmColorExdBitRate=cbQosPoliceCfmColorExdBitRate, cbQosPoliceExdColorExdBitRate=cbQosPoliceExdColorExdBitRate, cbQosEBStats=cbQosEBStats, cbQosQueueingClassCfgGroup=cbQosQueueingClassCfgGroup, cbQosSetStatsGroup=cbQosSetStatsGroup, cbQosCMName=cbQosCMName, cbQosPoliceCfgViolateAction=cbQosPoliceCfgViolateAction, cbQosSetCfgFrDe=cbQosSetCfgFrDe, cbQosQueueingClassCfgThreshold=cbQosQueueingClassCfgThreshold, cbQosAFPoliceViolateCfgGroup=cbQosAFPoliceViolateCfgGroup, cbQosREDTransmitPkt64=cbQosREDTransmitPkt64, cbQosREDClassCfgGroupRev2=cbQosREDClassCfgGroupRev2, cbQosREDECNMarkByte=cbQosREDECNMarkByte, cbQosTableMapCfgEntry=cbQosTableMapCfgEntry, cbQosTSCfgEntry=cbQosTSCfgEntry, cbQosTSCfgAdaptiveEnabled=cbQosTSCfgAdaptiveEnabled, cbQosCMPostPolicyBitRate=cbQosCMPostPolicyBitRate)
