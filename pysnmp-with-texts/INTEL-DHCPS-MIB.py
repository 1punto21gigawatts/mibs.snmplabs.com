#
# PySNMP MIB module INTEL-DHCPS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/INTEL-DHCPS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:54:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ValueSizeConstraint")
mib2ext, = mibBuilder.importSymbols("INTEL-GEN-MIB", "mib2ext")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, NotificationType, TimeTicks, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Gauge32, MibIdentifier, IpAddress, Unsigned32, ObjectIdentity, Counter64, Counter32, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "NotificationType", "TimeTicks", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Gauge32", "MibIdentifier", "IpAddress", "Unsigned32", "ObjectIdentity", "Counter64", "Counter32", "Integer32")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dhcps = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 7))
dhcpsInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 7, 1))
dhcpsConf = MibIdentifier((1, 3, 6, 1, 4, 1, 343, 6, 7, 2))
dhcpsInfoTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 7, 1, 1), )
if mibBuilder.loadTexts: dhcpsInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsInfoTable.setDescription('Monitoring information for DHCP server.')
dhcpsInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 7, 1, 1, 1), ).setIndexNames((0, "INTEL-DHCPS-MIB", "dhcpsInfoHostAddress"))
if mibBuilder.loadTexts: dhcpsInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsInfoEntry.setDescription('')
dhcpsInfoHostAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 1, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsInfoHostAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsInfoHostAddress.setDescription('The IP address assigned to the client.')
dhcpsInfoMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 1, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsInfoMacAddress.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsInfoMacAddress.setDescription("The client's MAC Address.")
dhcpsInfoHostName = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 1, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsInfoHostName.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsInfoHostName.setDescription("The client's hostname.")
dhcpsInfoAge = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsInfoAge.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsInfoAge.setDescription('The no. of seconds since last change of state.')
dhcpsInfoState = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9))).clone(namedValues=NamedValues(("deleted", 1), ("declined", 2), ("offered", 3), ("assigned", 4), ("modified", 5), ("pinged", 6), ("reserved", 7), ("released", 8), ("obsolete", 9)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsInfoState.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsInfoState.setDescription('The state of the DHCP entry.')
dhcpsConfInfoTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 1), )
if mibBuilder.loadTexts: dhcpsConfInfoTable.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfInfoTable.setDescription('Configuration information for DHCP server.')
dhcpsConfInfoEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 1, 1), ).setIndexNames((0, "INTEL-DHCPS-MIB", "dhcpsConfInfoId"))
if mibBuilder.loadTexts: dhcpsConfInfoEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfInfoEntry.setDescription('')
dhcpsConfInfoId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 1, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsConfInfoId.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfInfoId.setDescription('Parameter block ID. The DHCP server uses two parameter blocks: KBE.1 (75.66.69.1) and KBE.2 (75.66.69.2).')
dhcpsConfInfoHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsConfInfoHandle.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfInfoHandle.setDescription('The current handle for all set requests in dhcpsConfInfoTable.')
dhcpsConfInfoType = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("noTable", 1), ("tableIndexSize0", 2), ("tableIndexSize1", 3), ("tableIndexSize2", 4), ("tableIndexSize4", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsConfInfoType.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfInfoType.setDescription('There are 5 types of parameter blocks: noTable: A plain block of data tableIndexSize0: A table where the indexes are implicit tableIndexSize1: A table where the indexes takes up 1 byte tableIndexSize2: A table where the indexes takes up 2 bytes tableIndexSize4: A table where the indexes takes up 4 bytes.')
dhcpsConfInfoTableOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsConfInfoTableOffset.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfInfoTableOffset.setDescription('The offset in dhcpsConfData where the table starts. Always 0 when dhcpsConfInfoType is noTable.')
dhcpsConfInfoIndexOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsConfInfoIndexOffset.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfInfoIndexOffset.setDescription('The offset in dhcpsConfData where the index can be found. Always 0 when dhcpsConfInfoType is noTable or tableIndexSize0.')
dhcpsConfInfoRecordCount = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsConfInfoRecordCount.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfInfoRecordCount.setDescription('The number of records in the table. Always 0 when dhcpsConfInfoType is noTable.')
dhcpsConfInfoRecordLength = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsConfInfoRecordLength.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfInfoRecordLength.setDescription('The length of a record in the table. Always 0 when dhcpsConfInfoType is noTable.')
dhcpsConfTable = MibTable((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 2), )
if mibBuilder.loadTexts: dhcpsConfTable.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfTable.setDescription('Configuration for DHCP server.')
dhcpsConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 2, 1), ).setIndexNames((0, "INTEL-DHCPS-MIB", "dhcpsConfId"), (0, "INTEL-DHCPS-MIB", "dhcpsConfIndex"), (0, "INTEL-DHCPS-MIB", "dhcpsConfHandle"))
if mibBuilder.loadTexts: dhcpsConfEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfEntry.setDescription('')
dhcpsConfId = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsConfId.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfId.setDescription('Parameter block ID. The DHCP server uses two parameter blocks: KBE.1 (75.66.69.1) and KBE.2 (75.66.69.2).')
dhcpsConfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 2, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsConfIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfIndex.setDescription('The index of the current record in a table. If the index is 0, dhcpsConfData has some non-table data. If dhcpsConfInfoTableOffset is 0, dhcpsConfIndex is always 0.')
dhcpsConfHandle = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsConfHandle.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfHandle.setDescription('The current handle. To get the current handle refer to dhcpsConfInfoHandle.')
dhcpsConfData = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 2, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(255, 255)).setFixedLength(255)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsConfData.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfData.setDescription('The data. All numbers are big-endian. KBE.1 is of type noTable and has the following layout: UINT32 lease_time; BYTE domain_name[27]; BYTE limit_lease; UINT32 primary_dns; UINT32 secondary_dns; UINT32 primary_wins; UINT32 secondary_wins; BYTE node_type; BYTE server_enabled; UINT16 max_entries; KBE.2 is of type tableIndexSize0 and has the following layout: UINT32 start_addr; UINT32 stop_addr; UINT32 mask;')
dhcpsConfOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dhcpsConfOptions.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfOptions.setDescription('Currently not used, always 0.')
dhcpsConfStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 343, 6, 7, 2, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("normal", 1), ("delete", 2), ("copy", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dhcpsConfStatus.setStatus('mandatory')
if mibBuilder.loadTexts: dhcpsConfStatus.setDescription('The status of the record. copy(3) is for future use.')
mibBuilder.exportSymbols("INTEL-DHCPS-MIB", dhcpsConfInfoEntry=dhcpsConfInfoEntry, dhcpsConf=dhcpsConf, dhcpsConfData=dhcpsConfData, dhcpsConfStatus=dhcpsConfStatus, dhcpsConfInfoType=dhcpsConfInfoType, dhcpsInfo=dhcpsInfo, dhcpsInfoEntry=dhcpsInfoEntry, dhcpsInfoHostName=dhcpsInfoHostName, dhcpsInfoMacAddress=dhcpsInfoMacAddress, dhcpsConfOptions=dhcpsConfOptions, dhcpsInfoHostAddress=dhcpsInfoHostAddress, dhcpsConfEntry=dhcpsConfEntry, dhcpsConfIndex=dhcpsConfIndex, dhcps=dhcps, dhcpsConfInfoHandle=dhcpsConfInfoHandle, dhcpsInfoState=dhcpsInfoState, dhcpsConfInfoIndexOffset=dhcpsConfInfoIndexOffset, dhcpsConfInfoTable=dhcpsConfInfoTable, dhcpsConfHandle=dhcpsConfHandle, dhcpsConfInfoId=dhcpsConfInfoId, dhcpsConfInfoTableOffset=dhcpsConfInfoTableOffset, dhcpsConfInfoRecordLength=dhcpsConfInfoRecordLength, dhcpsConfTable=dhcpsConfTable, dhcpsConfInfoRecordCount=dhcpsConfInfoRecordCount, dhcpsInfoAge=dhcpsInfoAge, dhcpsInfoTable=dhcpsInfoTable, dhcpsConfId=dhcpsConfId)
