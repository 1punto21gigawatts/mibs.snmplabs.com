#
# PySNMP MIB module HPIPF02TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HPIPF02TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:37:18 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter32, Bits, NotificationType, TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, MibIdentifier, ObjectIdentity, iso, Unsigned32, NotificationType, Gauge32, IpAddress, ModuleIdentity, enterprises = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "Bits", "NotificationType", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "MibIdentifier", "ObjectIdentity", "iso", "Unsigned32", "NotificationType", "Gauge32", "IpAddress", "ModuleIdentity", "enterprises")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
hp = MibIdentifier((1, 3, 6, 1, 4, 1, 11))
nm = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2))
hpnsa = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23))
hpIpfE0Events = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 35))
hpIpf02Events = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 23, 45))
hpIpfEvtDetailStr = MibScalar((1, 3, 6, 1, 4, 1, 11, 2, 23, 45, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hpIpfEvtDetailStr.setStatus('mandatory')
if mibBuilder.loadTexts: hpIpfEvtDetailStr.setDescription('This string provides a detailed description of the Event along with variable information.')
hpTempHighWarning752 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,752)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpTempHighWarning752.setDescription('One of the temperature sensors crossed its lower non-critical threshold.')
hpTempHighCritical753 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,753)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpTempHighCritical753.setDescription('One of the temperature sensors crossed its upper critical threshold.')
hpTempHighNonRecoverable754 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,754)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpTempHighNonRecoverable754.setDescription('One of the temperature sensors crossed its upper non-recoverable threshold.')
hpTemperature4 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,4)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpTemperature4.setDescription('One of the temperature sensors crossed its upper non-critical threshold.')
hpTemperature5 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,5)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpTemperature5.setDescription('One of the temperature sensors crossed its upper critical threshold.')
hpTemperature6 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,6)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpTemperature6.setDescription('One of the temperature sensors crossed its upper non-recoverable threshold.')
hpTemperature755 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,755)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpTemperature755.setDescription('A temperature inside the server has gone outside the factory specified range.')
hpTemperature756 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,756)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpTemperature756.setDescription('One of the temperature sensors crossed its upper critical threshold.')
hpEnvironment8 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,8)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpEnvironment8.setDescription('One of the voltage sensors crossed its lower critical threshold.')
hpEnvironment9 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,9)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpEnvironment9.setDescription('One of the voltage sensors crossed its lower non-recoverable threshold.')
hpEnvironment10 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,10)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpEnvironment10.setDescription('One of the voltage sensors crossed its upper non-critical threshold.')
hpEnvironment12 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,12)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpEnvironment12.setDescription('One of the voltage sensors crossed its upper non-recoverable threshold - Check all boards with this voltage')
hpEnvironment704 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,704)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpEnvironment704.setDescription('Voltage fault - Check all boards with this voltage')
hpEnvironment728 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,728)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpEnvironment728.setDescription('Voltage degraded to critical level from less severe - Check all boards with this voltage')
hpEnvironment705 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,705)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpEnvironment705.setDescription('Voltage degraded to non-recoverable level from less severe - Check all boards with this voltage')
hpEnvironment706 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,706)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpEnvironment706.setDescription('Voltage becomes non-recoverable from either critical level or less severe level - Check all boards with this voltage')
hpEnvironment707 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,707)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpEnvironment707.setDescription('Voltage absent')
hpFan710 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,710)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpFan710.setDescription('Fan speed lags')
hpChassis26 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,26)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpChassis26.setDescription('The chassis has been opened.')
hpBmcFirmware730 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,730)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpBmcFirmware730.setDescription('The BMC firmware did not detect the system firmware boot.')
hpRedundantPower720 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,720)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpRedundantPower720.setDescription('Power supply failed or disconnected')
hpRedundantPower732 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,732)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpRedundantPower732.setDescription("The Power supply's sensors detect possible problems")
hpRedundantPower722 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,722)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpRedundantPower722.setDescription('Power supply AC lost')
hpRedundantPower757 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,757)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpRedundantPower757.setDescription('The Power Supply AC voltage was lost or is out of range.')
hpRedundantPower758 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,758)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpRedundantPower758.setDescription('The AC voltage connected to the power supply is out of range.')
hpPowerSupply731 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,731)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpPowerSupply731.setDescription('A/C Failed, disconnected, or out of range')
hpPowerSupply726 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,726)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpPowerSupply726.setDescription('A/C Failed, disconnected, or out of range')
hpSystemHW733 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,733)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW733.setDescription('Cooling unit warning')
hpSystemHW734 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,734)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW734.setDescription('Cooling unit failure')
hpECCMemory518 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,518)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpECCMemory518.setDescription('Uncorrectable multi-bit ECC error has occurred in memory module')
hpSystemFW700 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,700)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemFW700.setDescription('System firmware error')
hpSystemHW744 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,744)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW744.setDescription('System event log almost full')
hpSystemHW735 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,735)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW735.setDescription('BMC entering special mode')
hpSystemHW729 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,729)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW729.setDescription('System shut-down or reset caused by sensor reading. ')
hpSystemHW745 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,745)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW745.setDescription('TOC interrupt (crash dump)')
hpSystemHW746 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,746)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW746.setDescription('INIT Initiated')
hpSystemHW751 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,751)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW751.setDescription('PCI parity error detected')
hpSystemHW747 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,747)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW747.setDescription('PCI system error detected')
hpSystemFW699 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,699)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemFW699.setDescription('Machine Check Initiated')
hpSystemHW113 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,113)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW113.setDescription('A SCSI cable has been removed from the hot swap cage.')
hpSystemHW748 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,748)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW748.setDescription('OS run-time critical shutdown')
hpSystemHW749 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,749)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW749.setDescription('ACPI state S5 (soft-off, entered by override)')
hpSystemHW736 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,736)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW736.setDescription('Watchdog timer expired - hard reset')
hpSystemHW737 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,737)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW737.setDescription('Watchdog timer expired - power-off')
hpSystemHW738 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,738)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW738.setDescription('Watchdog timer expired - power-cycle')
hpSystemHW739 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,739)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW739.setDescription('Missing FRU device')
hpSystemHW740 = NotificationType((1, 3, 6, 1, 4, 1, 11, 2, 23, 45) + (0,740)).setObjects(("HPIPF02TRAP-MIB", "hpIpfEvtDetailStr"))
if mibBuilder.loadTexts: hpSystemHW740.setDescription('Missing Entity')
mibBuilder.exportSymbols("HPIPF02TRAP-MIB", nm=nm, hpRedundantPower757=hpRedundantPower757, hpChassis26=hpChassis26, hpSystemHW734=hpSystemHW734, hpSystemHW739=hpSystemHW739, hpTemperature4=hpTemperature4, hpRedundantPower732=hpRedundantPower732, hpTempHighNonRecoverable754=hpTempHighNonRecoverable754, hpIpf02Events=hpIpf02Events, hpEnvironment10=hpEnvironment10, hpSystemHW748=hpSystemHW748, hpECCMemory518=hpECCMemory518, hp=hp, hpIpfEvtDetailStr=hpIpfEvtDetailStr, hpEnvironment706=hpEnvironment706, hpSystemHW729=hpSystemHW729, hpSystemHW744=hpSystemHW744, hpTemperature755=hpTemperature755, hpIpfE0Events=hpIpfE0Events, hpEnvironment728=hpEnvironment728, hpSystemHW113=hpSystemHW113, hpTempHighCritical753=hpTempHighCritical753, hpEnvironment12=hpEnvironment12, hpFan710=hpFan710, hpTemperature6=hpTemperature6, hpSystemFW699=hpSystemFW699, hpTemperature756=hpTemperature756, hpnsa=hpnsa, hpSystemHW746=hpSystemHW746, hpSystemHW749=hpSystemHW749, hpRedundantPower720=hpRedundantPower720, hpTemperature5=hpTemperature5, hpRedundantPower758=hpRedundantPower758, hpSystemHW738=hpSystemHW738, hpPowerSupply731=hpPowerSupply731, hpBmcFirmware730=hpBmcFirmware730, hpSystemHW751=hpSystemHW751, hpEnvironment705=hpEnvironment705, hpRedundantPower722=hpRedundantPower722, hpSystemHW737=hpSystemHW737, hpSystemHW733=hpSystemHW733, hpEnvironment707=hpEnvironment707, hpSystemFW700=hpSystemFW700, hpEnvironment9=hpEnvironment9, hpEnvironment704=hpEnvironment704, hpSystemHW745=hpSystemHW745, hpSystemHW735=hpSystemHW735, hpSystemHW747=hpSystemHW747, hpSystemHW740=hpSystemHW740, hpPowerSupply726=hpPowerSupply726, hpSystemHW736=hpSystemHW736, hpEnvironment8=hpEnvironment8, hpTempHighWarning752=hpTempHighWarning752)
