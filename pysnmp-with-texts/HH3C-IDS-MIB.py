#
# PySNMP MIB module HH3C-IDS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HH3C-IDS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:27:21 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
hh3cCommon, = mibBuilder.importSymbols("HH3C-OID-MIB", "hh3cCommon")
InetAddressType, InetAddress = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter64, ModuleIdentity, Unsigned32, TimeTicks, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter32, ObjectIdentity, iso, Integer32, MibIdentifier, Gauge32, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter64", "ModuleIdentity", "Unsigned32", "TimeTicks", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter32", "ObjectIdentity", "iso", "Integer32", "MibIdentifier", "Gauge32", "NotificationType")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
hh3cIDSMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1))
if mibBuilder.loadTexts: hh3cIDSMib.setLastUpdated('200507141942Z')
if mibBuilder.loadTexts: hh3cIDSMib.setOrganization('Hangzhou H3C Tech. Co., Ltd.')
if mibBuilder.loadTexts: hh3cIDSMib.setContactInfo('Platform Team Hangzhou H3C Tech. Co., Ltd. Hai-Dian District Beijing P.R. China http://www.h3c.com Zip:100085 ')
if mibBuilder.loadTexts: hh3cIDSMib.setDescription('This MIB describes IDS private information. IDS(Instruction Detecting System) is used to detect intruder activity. ')
hh3cIds = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 47))
hh3cIDSTrapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1))
hh3cIDSTrapInfo = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1))
hh3cIDSTrapIPFragmentQueueLen = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1, 1), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIDSTrapIPFragmentQueueLen.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapIPFragmentQueueLen.setDescription('The length of IP fragment queue.')
hh3cIDSTrapStatSessionTabLen = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1, 2), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIDSTrapStatSessionTabLen.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapStatSessionTabLen.setDescription('The length of status session table.')
hh3cIDSTrapIPAddressType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1, 3), InetAddressType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIDSTrapIPAddressType.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapIPAddressType.setDescription('The type of IP Address.')
hh3cIDSTrapIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1, 4), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIDSTrapIPAddress.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapIPAddress.setDescription('IP Address.')
hh3cIDSTrapUserName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIDSTrapUserName.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapUserName.setDescription('User name.')
hh3cIDSTrapLoginType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("telnet", 1), ("ssh", 2), ("web", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIDSTrapLoginType.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapLoginType.setDescription('Login type, including telnet, ssh and web.')
hh3cIDSTrapUpgradeType = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("programme", 1), ("crb", 2), ("vrb", 3)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIDSTrapUpgradeType.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapUpgradeType.setDescription('Upgrade type, including programme(system image), crb(custom rule base, one kind of configuration file), vrb(vendor rule base, one kind of configuration file).')
hh3cIDSTrapCRLName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIDSTrapCRLName.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapCRLName.setDescription('CRL(Certificate Revoke List) name.')
hh3cIDSTrapCertName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIDSTrapCertName.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapCertName.setDescription('Certificate name.')
hh3cIDSTrapDetectRuleID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1, 10), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIDSTrapDetectRuleID.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapDetectRuleID.setDescription('The rule ID which is a unique identifier for a specified detect rule.')
hh3cIDSTrapEngineID = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1, 11), Integer32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIDSTrapEngineID.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapEngineID.setDescription('A unique number used to identify an interface.')
hh3cIDSTrapFileName = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIDSTrapFileName.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapFileName.setDescription('The file name.')
hh3cIDSTrapCfgLineInFile = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1, 13), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIDSTrapCfgLineInFile.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapCfgLineInFile.setDescription('The line number in the configuration file.')
hh3cIDSTrapReasonForError = MibScalar((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 256))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hh3cIDSTrapReasonForError.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapReasonForError.setDescription('The information of the notification. Although the format and content of this object are device specific, they should be defined uniformly in the device.')
hh3cIDSTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2))
hh3cIDSTrapPrefix = MibIdentifier((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2, 0))
hh3cIDSTrapIPFragQueueFull = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2, 0, 1)).setObjects(("HH3C-IDS-MIB", "hh3cIDSTrapIPFragmentQueueLen"), ("HH3C-IDS-MIB", "hh3cIDSTrapReasonForError"))
if mibBuilder.loadTexts: hh3cIDSTrapIPFragQueueFull.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapIPFragQueueFull.setDescription('This notification will be generated when the IP fragment queue is full. The hh3cIDSTrapIPFragmentQueueLen describes the length of current fragment queue. The hh3cIDSTrapReasonForError describes reason for error.')
hh3cIDSTrapStatSessTabFull = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2, 0, 2)).setObjects(("HH3C-IDS-MIB", "hh3cIDSTrapStatSessionTabLen"), ("HH3C-IDS-MIB", "hh3cIDSTrapReasonForError"))
if mibBuilder.loadTexts: hh3cIDSTrapStatSessTabFull.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapStatSessTabFull.setDescription('This notification will be generated when the status session table is full. The hh3cIDSTrapStatSessionTabLen describes the length of current status session table. The hh3cIDSTrapReasonForError describes reason for error.')
hh3cIDSTrapDetectRuleParseFail = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2, 0, 3)).setObjects(("HH3C-IDS-MIB", "hh3cIDSTrapDetectRuleID"), ("HH3C-IDS-MIB", "hh3cIDSTrapEngineID"), ("HH3C-IDS-MIB", "hh3cIDSTrapReasonForError"))
if mibBuilder.loadTexts: hh3cIDSTrapDetectRuleParseFail.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapDetectRuleParseFail.setDescription('This notification will be generated when failing to parse the rules for detecting. The hh3cIDSTrapDetectRuleID object describes rule ID. The hh3cIDSTrapEngineID object identifies an interface the rule applies to. The hh3cIDSTrapReasonForError object describes reason for error.')
hh3cIDSTrapDBConnLost = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2, 0, 4)).setObjects(("HH3C-IDS-MIB", "hh3cIDSTrapIPAddressType"), ("HH3C-IDS-MIB", "hh3cIDSTrapIPAddress"), ("HH3C-IDS-MIB", "hh3cIDSTrapReasonForError"))
if mibBuilder.loadTexts: hh3cIDSTrapDBConnLost.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapDBConnLost.setDescription('This notification will be generated when connecting with database server fails. The hh3cIDSTrapIPAddressType object describes the IP address type of database server. The hh3cIDSTrapIPAddress object describes the IP address of database server. The hh3cIDSTrapReasonForError describes reason of connecting failure.')
hh3cIDSTrapCRLNeedUpdate = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2, 0, 5)).setObjects(("HH3C-IDS-MIB", "hh3cIDSTrapCRLName"), ("HH3C-IDS-MIB", "hh3cIDSTrapReasonForError"))
if mibBuilder.loadTexts: hh3cIDSTrapCRLNeedUpdate.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapCRLNeedUpdate.setDescription('This notification will be generated when IDS device detects that CRL is out of date. The hh3cIDSTrapCRLName object describes the CRL(Certificate Revoke List) name. The hh3cIDSTrapReasonForError object describes reason for error.')
hh3cIDSTrapCertOverdue = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2, 0, 6)).setObjects(("HH3C-IDS-MIB", "hh3cIDSTrapCertName"), ("HH3C-IDS-MIB", "hh3cIDSTrapReasonForError"))
if mibBuilder.loadTexts: hh3cIDSTrapCertOverdue.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapCertOverdue.setDescription('This notification will be generated when IDS device detects that certificate is overdue. The hh3cIDSTrapCertName object describes the certificate name. The hh3cIDSTrapReasonForError object describes reason for error.')
hh3cIDSTrapTooManyLoginFail = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2, 0, 7)).setObjects(("HH3C-IDS-MIB", "hh3cIDSTrapUserName"), ("HH3C-IDS-MIB", "hh3cIDSTrapIPAddressType"), ("HH3C-IDS-MIB", "hh3cIDSTrapIPAddress"), ("HH3C-IDS-MIB", "hh3cIDSTrapLoginType"), ("HH3C-IDS-MIB", "hh3cIDSTrapReasonForError"))
if mibBuilder.loadTexts: hh3cIDSTrapTooManyLoginFail.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapTooManyLoginFail.setDescription('This notification will be generated when the login failure times of a user over a certain number. The hh3cIDSTrapUserName object describes the user name when logging in. The hh3cIDSTrapIPAddressType object describes the IP address type of client. The hh3cIDSTrapIPAddress object describes the IP address of client. The hh3cIDSTrapLoginType object describes login type, including: telnet, ssh, web. The hh3cIDSTrapReasonForError object describes reason for error.')
hh3cIDSTrapUpgradeError = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2, 0, 8)).setObjects(("HH3C-IDS-MIB", "hh3cIDSTrapUpgradeType"), ("HH3C-IDS-MIB", "hh3cIDSTrapReasonForError"))
if mibBuilder.loadTexts: hh3cIDSTrapUpgradeError.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapUpgradeError.setDescription('This notification will be generated when upgrading fails. The hh3cIDSTrapUpgradeType object describes upgrade type, including: programme, vrb. The hh3cIDSTrapReasonForError object describes reason for error.')
hh3cIDSTrapFileAccessError = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2, 0, 9)).setObjects(("HH3C-IDS-MIB", "hh3cIDSTrapFileName"), ("HH3C-IDS-MIB", "hh3cIDSTrapReasonForError"))
if mibBuilder.loadTexts: hh3cIDSTrapFileAccessError.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapFileAccessError.setDescription('This notification will be generated when accessing file fails. The hh3cIDSTrapFileName object describes the name of file accessed. The hh3cIDSTrapReasonForError object describes reason for error.')
hh3cIDSTrapConsArithMemLow = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2, 0, 10)).setObjects(("HH3C-IDS-MIB", "hh3cIDSTrapReasonForError"))
if mibBuilder.loadTexts: hh3cIDSTrapConsArithMemLow.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapConsArithMemLow.setDescription('This notification will be generated when memory used by constructing the arithmetic to seek content is lacking. The hh3cIDSTrapReasonForError object describes reason for error.')
hh3cIDSTrapSSRAMOperFail = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2, 0, 11)).setObjects(("HH3C-IDS-MIB", "hh3cIDSTrapReasonForError"))
if mibBuilder.loadTexts: hh3cIDSTrapSSRAMOperFail.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapSSRAMOperFail.setDescription('This notification will be generated when reading or writing SSRAM of CIE card fails. The hh3cIDSTrapReasonForError object describes reason for error.')
hh3cIDSTrapPacketProcessDisorder = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2, 0, 12)).setObjects(("HH3C-IDS-MIB", "hh3cIDSTrapReasonForError"))
if mibBuilder.loadTexts: hh3cIDSTrapPacketProcessDisorder.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapPacketProcessDisorder.setDescription('This notification will be generated when packets processed is in disorder. The hh3cIDSTrapReasonForError object describes reason for error.')
hh3cIDSTrapCfgFileFormatError = NotificationType((1, 3, 6, 1, 4, 1, 25506, 2, 47, 1, 1, 2, 0, 13)).setObjects(("HH3C-IDS-MIB", "hh3cIDSTrapFileName"), ("HH3C-IDS-MIB", "hh3cIDSTrapCfgLineInFile"))
if mibBuilder.loadTexts: hh3cIDSTrapCfgFileFormatError.setStatus('current')
if mibBuilder.loadTexts: hh3cIDSTrapCfgFileFormatError.setDescription('When devices startup and load the configuration file, if format error is found, this notification will be generated. The hh3cIDSTrapFileName object describes the name of configuration file. The hh3cIDSTrapCfgLineInFile object describes the line number in the file.')
mibBuilder.exportSymbols("HH3C-IDS-MIB", hh3cIDSTrapCertName=hh3cIDSTrapCertName, hh3cIDSTrapUpgradeError=hh3cIDSTrapUpgradeError, hh3cIDSTrapDetectRuleParseFail=hh3cIDSTrapDetectRuleParseFail, hh3cIDSTrapCfgFileFormatError=hh3cIDSTrapCfgFileFormatError, hh3cIDSTrapIPFragmentQueueLen=hh3cIDSTrapIPFragmentQueueLen, hh3cIDSTrapPrefix=hh3cIDSTrapPrefix, hh3cIDSTrapConsArithMemLow=hh3cIDSTrapConsArithMemLow, hh3cIDSTrapCRLNeedUpdate=hh3cIDSTrapCRLNeedUpdate, hh3cIDSTrapStatSessionTabLen=hh3cIDSTrapStatSessionTabLen, hh3cIDSTrapPacketProcessDisorder=hh3cIDSTrapPacketProcessDisorder, hh3cIDSTrapEngineID=hh3cIDSTrapEngineID, hh3cIDSTrapCfgLineInFile=hh3cIDSTrapCfgLineInFile, hh3cIDSTrapIPFragQueueFull=hh3cIDSTrapIPFragQueueFull, hh3cIDSTrapFileName=hh3cIDSTrapFileName, hh3cIDSTrapDBConnLost=hh3cIDSTrapDBConnLost, hh3cIDSTrapFileAccessError=hh3cIDSTrapFileAccessError, hh3cIDSTrapCertOverdue=hh3cIDSTrapCertOverdue, hh3cIDSMib=hh3cIDSMib, hh3cIDSTrapInfo=hh3cIDSTrapInfo, hh3cIDSTrapTooManyLoginFail=hh3cIDSTrapTooManyLoginFail, hh3cIDSTrapCRLName=hh3cIDSTrapCRLName, hh3cIDSTrapIPAddressType=hh3cIDSTrapIPAddressType, hh3cIDSTrapIPAddress=hh3cIDSTrapIPAddress, hh3cIDSTrapLoginType=hh3cIDSTrapLoginType, hh3cIDSTrapUserName=hh3cIDSTrapUserName, hh3cIDSTrapSSRAMOperFail=hh3cIDSTrapSSRAMOperFail, hh3cIds=hh3cIds, hh3cIDSTrap=hh3cIDSTrap, PYSNMP_MODULE_ID=hh3cIDSMib, hh3cIDSTrapGroup=hh3cIDSTrapGroup, hh3cIDSTrapUpgradeType=hh3cIDSTrapUpgradeType, hh3cIDSTrapDetectRuleID=hh3cIDSTrapDetectRuleID, hh3cIDSTrapStatSessTabFull=hh3cIDSTrapStatSessTabFull, hh3cIDSTrapReasonForError=hh3cIDSTrapReasonForError)
