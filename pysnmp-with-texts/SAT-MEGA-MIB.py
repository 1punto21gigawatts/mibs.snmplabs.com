#
# PySNMP MIB module SAT-MEGA-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/SAT-MEGA-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:00:44 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
enterprises, MibIdentifier, iso, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, IpAddress, Counter64, NotificationType, Integer32, ModuleIdentity, Counter32, ObjectIdentity, NotificationType, Bits, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "enterprises", "MibIdentifier", "iso", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "IpAddress", "Counter64", "NotificationType", "Integer32", "ModuleIdentity", "Counter32", "ObjectIdentity", "NotificationType", "Bits", "TimeTicks")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
sat = MibIdentifier((1, 3, 6, 1, 4, 1, 1038))
mega = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4))
products = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 1))
base = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 2))
controller = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 3))
channel = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 4))
x25File = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 5))
nameFile = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 6))
passFile = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 7))
macFile = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 8))
ilanFile = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 9))
elogFile = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 10))
billFile = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 11))
megaPAC_E_cpu_C = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 1, 1)).setLabel("megaPAC-E-cpu-C")
megaPAC_ESL = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 1, 2)).setLabel("megaPAC-ESL")
megaPAC_E_cpu_D_E = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 1, 3)).setLabel("megaPAC-E-cpu-D-E")
megaPAC_V_cpu_8 = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 1, 4)).setLabel("megaPAC-V-cpu-8")
megaPAC_V_cpu_16 = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 1, 5)).setLabel("megaPAC-V-cpu-16")
megaPAC_V_cpu_68040 = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 1, 6)).setLabel("megaPAC-V-cpu-68040")
megaPAC_V_cpu_68060 = MibIdentifier((1, 3, 6, 1, 4, 1, 1038, 4, 1, 7)).setLabel("megaPAC-V-cpu-68060")
baseVersion = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseVersion.setStatus('mandatory')
if mibBuilder.loadTexts: baseVersion.setDescription('Software Version. The software version currently running. Defined as YMMR (i.e. Year, Month, Revision')
baseRestartTime = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseRestartTime.setStatus('mandatory')
if mibBuilder.loadTexts: baseRestartTime.setDescription('BASE Restart Time. The time and data of the last system restart (i.e. power-on or last BOOT)')
baseMaxPacketSize = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseMaxPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: baseMaxPacketSize.setDescription('Node Maximum Packet Size. The maximum single buffer size available on the MegaPAC.')
baseBuffPoolMax = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBuffPoolMax.setStatus('mandatory')
if mibBuilder.loadTexts: baseBuffPoolMax.setDescription('Node Buffer Pool Maximum. The maximum number of buffers available temporary storage of transitting data.')
baseBuffPoolNow = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBuffPoolNow.setStatus('mandatory')
if mibBuilder.loadTexts: baseBuffPoolNow.setDescription('Node Current Buffer Pool. The current number of free buffers available temporary storage of transitting data.')
baseBufferPoolLowest = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBufferPoolLowest.setStatus('mandatory')
if mibBuilder.loadTexts: baseBufferPoolLowest.setDescription('Node Buffer Pool Lowest. The lowest value the buffer pool has ever reached.')
baseBufferPoolEmpty = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseBufferPoolEmpty.setStatus('mandatory')
if mibBuilder.loadTexts: baseBufferPoolEmpty.setDescription("Node Buffer Pool Empty. The number of times that the free buffer pool has fallen below the minimum buffer threshold 'baseBuffThreshold'.")
baseStatBufferThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseStatBufferThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: baseStatBufferThreshold.setDescription('Node Buffer Threshold. When the number of buffers in the free buffer pool reaches this threshold, flow control will occur.')
baseMemorySize = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseMemorySize.setStatus('mandatory')
if mibBuilder.loadTexts: baseMemorySize.setDescription('Node Memory Size. The size of the system memory installed in the MegaPAC.')
baseDataFramesIn = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseDataFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: baseDataFramesIn.setDescription('Node Frames In. The total number of frames received by the MegaPAC.')
baseDataFramesOut = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseDataFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: baseDataFramesOut.setDescription('Node Frames Out. The total number of frames transmitted by the MegaPAC.')
baseDataFrameRateIn = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseDataFrameRateIn.setStatus('mandatory')
if mibBuilder.loadTexts: baseDataFrameRateIn.setDescription('Node Frame Rate In. The rate measured in frames per second that the MegaPAC is currently receiving frames.')
baseDataFrameRateOut = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseDataFrameRateOut.setStatus('mandatory')
if mibBuilder.loadTexts: baseDataFrameRateOut.setDescription('Node Frames Rate Out. The rate measured in frames per second that the MegaPAC is currently transmitting frames.')
baseTotalCallSetUps = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseTotalCallSetUps.setStatus('mandatory')
if mibBuilder.loadTexts: baseTotalCallSetUps.setDescription('Node Total Call Set ups. The total number of calls successfully established by the MegaPAC.')
baseCurrentCalls = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 15), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseCurrentCalls.setStatus('mandatory')
if mibBuilder.loadTexts: baseCurrentCalls.setDescription('Current calls. The number of calls currently active on the MegaPAC.')
baseRetransmissions = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseRetransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: baseRetransmissions.setDescription('Node Retransmissions. The total number of frames which have been retransmitted by the MegaPAC.')
baseRejects = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseRejects.setStatus('mandatory')
if mibBuilder.loadTexts: baseRejects.setDescription('Node Rejects. The total number of frames that have been rejected by the MegaPAC.')
baseTotalTransportCalls = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseTotalTransportCalls.setStatus('mandatory')
if mibBuilder.loadTexts: baseTotalTransportCalls.setDescription('Node Total Transport calls. The total number of transport calls established by the MegaPAC.')
baseCurrentTransportCalls = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseCurrentTransportCalls.setStatus('mandatory')
if mibBuilder.loadTexts: baseCurrentTransportCalls.setDescription('Current Transport Calls. The number of transport calls currently active on the MegaPAC.')
baseRunStatus = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("prom", 1), ("ram", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: baseRunStatus.setStatus('mandatory')
if mibBuilder.loadTexts: baseRunStatus.setDescription("Node Run Status. This parameter indicates whether the operating system has been 'Booted' from RAM (TELELOAD) or EPROM (default).")
baseReports = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 21), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseReports.setStatus('mandatory')
if mibBuilder.loadTexts: baseReports.setDescription('Node Reporting channel. The name of the logical resource (channel) that the system reports will be directed to.')
baseSessionStatistics = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 22), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseSessionStatistics.setStatus('mandatory')
if mibBuilder.loadTexts: baseSessionStatistics.setDescription('Node Session Statistics reporting channel. The name of the logical resource (channel) that the system session statistics will be directed to.')
baseBufferThreshold = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(5, 1000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseBufferThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: baseBufferThreshold.setDescription('Node Buffer Threshold. The threshold before flow control is invoked')
baseInitialPresentationTimer = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseInitialPresentationTimer.setStatus('mandatory')
if mibBuilder.loadTexts: baseInitialPresentationTimer.setDescription('Node Initial Presentation Timer. The maximum time allowed between initial connection to the presentation service and the user entering a valid resource. The call will be disconnected if this timer elapses.')
baseSecondaryPresentationTimer = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 300))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseSecondaryPresentationTimer.setStatus('mandatory')
if mibBuilder.loadTexts: baseSecondaryPresentationTimer.setDescription('Node Secondary Presentation Timer. After a call has been cleared by the Host DTE the user has the option to use the presentation service to establish another call, failure to do so within this time period will result in the initial call being cleared.')
baseInactivityDetectTimer = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseInactivityDetectTimer.setStatus('mandatory')
if mibBuilder.loadTexts: baseInactivityDetectTimer.setDescription('Node Inactivity Timer. This timer will cause calls to be cleared if the IDLE option has been configured on the channel.')
baseSegmentAccounting = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseSegmentAccounting.setStatus('mandatory')
if mibBuilder.loadTexts: baseSegmentAccounting.setDescription('Node Segment Accounting. This parameter causes the frames in/out parameters to be displayed in terms of 64 byte SEGMENTS rather than frames.')
baseTerminalEmulationBuffers = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 640))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseTerminalEmulationBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: baseTerminalEmulationBuffers.setDescription('Terminal Emulation Buffers. The number of system buffers allocated for Terminal Emulation purposes.')
baseTransportBuffers = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2048))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseTransportBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: baseTransportBuffers.setDescription('Transport Buffers. The number of transport buffers allocated for TP 0,2,3,4 sessions.')
baseCountrySettings = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("none", 1), ("japn", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseCountrySettings.setStatus('mandatory')
if mibBuilder.loadTexts: baseCountrySettings.setDescription('Country Setting. Invokes the ASCII representation of the Japanese character set.')
baseTeleloadEnabled = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 129))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("k256", 3), ("k160", 129)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseTeleloadEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: baseTeleloadEnabled.setDescription('Teleload enable. If set to yes the MegaPAC software may be downloaded by ASCII file transfer.')
baseDefaultToPromCompatible = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 2, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: baseDefaultToPromCompatible.setStatus('mandatory')
if mibBuilder.loadTexts: baseDefaultToPromCompatible.setDescription('Cold Boot From PROM. If set to yes the MegaPAC software may be downloaded by ASCII file transfer.')
ctrlNumberConfigured = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlNumberConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlNumberConfigured.setDescription('Total Number of Controllers Configured. The number of controllers in the MegaPAC which have been configured.')
ctrlTotalNumber = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlTotalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlTotalNumber.setDescription('Total Number of Controllers. The TOTAL number of controllers in the MegaPAC including unconfigured (NULL) controllers.')
ctrlStatTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3), )
if mibBuilder.loadTexts: ctrlStatTable.setStatus('mandatory')
ctrlStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1), ).setIndexNames((0, "SAT-MEGA-MIB", "ctrlStatIndex"))
if mibBuilder.loadTexts: ctrlStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatEntry.setDescription('')
ctrlStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatIndex.setReference('ALL')
if mibBuilder.loadTexts: ctrlStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatIndex.setDescription("Controller index. The position of this controller in relation to 'BASE'. i.e. BASE = 0 NMSC = 1 PS01 = 2 ...")
ctrlStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatName.setReference('ALL')
if mibBuilder.loadTexts: ctrlStatName.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatName.setDescription('Controller name. The unique 4 character name by which this controller is known.')
ctrlStatType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39))).clone(namedValues=NamedValues(("x25", 1), ("mux", 2), ("null", 3), ("epci", 4), ("hdlc", 8), ("qllc", 9), ("xlan", 10), ("ilan", 11), ("term", 12), ("lan", 13), ("clus", 14), ("mult", 15), ("sdlc", 16), ("ip", 17), ("sru", 18), ("v25b", 19), ("cons", 20), ("nmsc", 21), ("dlc", 22), ("map", 23), ("tlan", 24), ("snmp", 25), ("nfrm", 26), ("xfrm", 27), ("tip", 28), ("rout", 29), ("ppp", 30), ("ipx", 31), ("tipx", 32), ("esis", 34), ("tesis", 35), ("vfrm", 36), ("smdx", 37), ("dlcx", 38), ("edlc", 39)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatType.setReference('PPP X25 XFRM NFRM VFRM CONS IP TIP IPX TIPX ESIS DLC LAN TLAN ILAN XLAN SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatType.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatType.setDescription('Controller Type. The type of controller this is. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, IP, TIP, IPX, TIPX, ESIS, DLC, LAN, TLAN, ILAN, XLAN SDLC, TERM, QLLC AND HDLC')
ctrlStatSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 17, 33))).clone(namedValues=NamedValues(("none", 1), ("sio", 2), ("xio", 3), ("xio-sio", 4), ("generic", 5), ("scc", 17), ("vio", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatSubType.setReference('PPP X25 XFRM NFRM VFRM SDLC QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatSubType.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatSubType.setDescription('Sub Type. The serial I/O board installed.')
ctrlStatNumberChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatNumberChannels.setReference('PPP X25 XFRM NFRM VFRM CONS IP TIP IPX TIPX ESIS DLC LAN TLAN ILAN XLAN SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatNumberChannels.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatNumberChannels.setDescription('Channel Count. The number of channels assigned to a controller. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, IP, TIP, IPX, TIPX, ESIS, DLC, LAN, TLAN, ILAN, XLAN SDLC, TERM, QLLC AND HDLC')
ctrlStatFirstChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatFirstChannelIndex.setReference('PPP X25 XFRM NFRM VFRM CONS IP TIP IPX TIPX ESIS DLC LAN TLAN ILAN XLAN SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatFirstChannelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatFirstChannelIndex.setDescription('First Channnel. The 1st channel index number used by the controller : PPP, X.25, XFRM, NFRM VFRM, CONS, IP, TIP, IPX, TIPX, ESIS, DLC, LAN, TLAN, ILAN, XLAN SDLC, TERM, QLLC & HDLC')
ctrlStatCRCErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatCRCErrors.setReference('PPP X25 XFRM NFRM VFRM CONS IP TIP IPX TIPX ESIS DLC LAN TLAN ILAN XLAN SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatCRCErrors.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatCRCErrors.setDescription('CRC Errors. The number of packets received for which the checksum was not valid. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, IP, TIP, IPX, TIPX, ESIS, DLC, LAN, TLAN, ILAN, XLAN SDLC, TERM, QLLC AND HDLC')
ctrlStatTotalCallSetUps = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatTotalCallSetUps.setReference('PPP X25 XFRM NFRM VFRM CONS IP TIP IPX TIPX ESIS DLC LAN TLAN ILAN XLAN SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatTotalCallSetUps.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatTotalCallSetUps.setDescription('Total Call Set ups. The total number of successful calls established on this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, IP, TIP, IPX, TIPX, ESIS, DLC, LAN, TLAN, ILAN, XLAN SDLC, TERM, QLLC AND HDLC')
ctrlStatCurrentCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatCurrentCalls.setReference('PPP X25 XFRM NFRM VFRM CONS IP TIP IPX TIPX ESIS DLC LAN TLAN ILAN XLAN SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatCurrentCalls.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatCurrentCalls.setDescription('Current Calls. The number of calls currently active on this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, IP, TIP, IPX, TIPX, ESIS, DLC, LAN, TLAN, ILAN, XLAN SDLC, TERM, QLLC AND HDLC')
ctrlStatDataIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatDataIn.setReference('PPP X25 XFRM NFRM VFRM CONS IP TIP IPX TIPX ESIS DLC LAN TLAN ILAN XLAN SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatDataIn.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatDataIn.setDescription('Data In. The total number of data bytes received on this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, IP, TIP, IPX, TIPX, ESIS, DLC, LAN, TLAN, ILAN, XLAN SDLC, TERM, QLLC AND HDLC')
ctrlStatDataOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatDataOut.setReference('PPP X25 XFRM NFRM VFRM CONS IP TIP IPX TIPX ESIS DLC LAN TLAN ILAN XLAN SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatDataOut.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatDataOut.setDescription('Data Out. The total number of data bytes transmitted on this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, IP, TIP, IPX, TIPX, ESIS, DLC, LAN, TLAN, ILAN, XLAN SDLC, TERM, QLLC AND HDLC')
ctrlStatDataFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatDataFramesIn.setReference('PPP X25 XFRM NFRM VFRM CONS IP TIP IPX TIPX ESIS DLC LAN TLAN ILAN XLAN SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatDataFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatDataFramesIn.setDescription('Data Frames In. The total number of data frames received on this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, IP, TIP, IPX, TIPX, ESIS, DLC, LAN, TLAN, ILAN, XLAN SDLC, TERM, QLLC AND HDLC')
ctrlStatDataFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 13), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatDataFramesOut.setReference('PPP X25 XFRM NFRM VFRM CONS IP TIP IPX TIPX ESIS DLC LAN TLAN ILAN XLAN SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatDataFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatDataFramesOut.setDescription('Data Frames Out. The total number of data frames transmitted on this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, IP, TIP, IPX, TIPX, ESIS, DLC, LAN, TLAN, ILAN, XLAN SDLC, TERM, QLLC AND HDLC')
ctrlStatDataFrameRateIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatDataFrameRateIn.setReference('PPP X25 XFRM NFRM VFRM CONS IP TIP IPX TIPX ESIS DLC LAN TLAN ILAN XLAN SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatDataFrameRateIn.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatDataFrameRateIn.setDescription('Data Frame Rate In. The rate that frames are arriving on this link, specified in frames per second. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, IP, TIP, IPX, TIPX, ESIS, DLC, LAN, TLAN, ILAN, XLAN SDLC, TERM, QLLC AND HDLC')
ctrlStatDataFrameRateOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatDataFrameRateOut.setReference('PPP X25 XFRM NFRM VFRM CONS IP TIP IPX TIPX ESIS DLC LAN TLAN ILAN XLAN SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatDataFrameRateOut.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatDataFrameRateOut.setDescription('Data Frame Frate Out. The rate that frames are being transmitted on this link, specified in frames per second. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, IP, TIP, IPX, TIPX, ESIS, DLC, LAN, TLAN, ILAN, XLAN SDLC, TERM, QLLC AND HDLC')
ctrlStatCallsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 16), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatCallsReceived.setReference('PPP X25 XFRM NFRM VFRM CONS DLC SDLC TERM QLLC HDLC IPX TIPX ESIS LAN TLAN ILAN XLAN')
if mibBuilder.loadTexts: ctrlStatCallsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatCallsReceived.setDescription('Calls Received. The total number of incoming call requests seen on this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, DLC, SDLC, TERM, QLLC, HDLC, IPX, TIPX, ESIS, LAN, TLAN, ILAN AND XLAN')
ctrlStatCallsSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 17), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatCallsSent.setReference('PPP X25 XFRM NFRM VFRM CONS DLC SDLC TERM QLLC HDLC IPX TIPX ESIS LAN TLAN ILAN XLAN')
if mibBuilder.loadTexts: ctrlStatCallsSent.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatCallsSent.setDescription('Calls Sent. The total number of call requests sent out on this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, DLC, SDLC, TERM, QLLC, HDLC, IPX, TIPX, ESIS, LAN, TLAN, ILAN AND XLAN')
ctrlStatClearsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 18), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatClearsReceived.setReference('PPP X25 XFRM NFRM VFRM CONS DLC SDLC TERM QLLC HDLC IPX TIPX ESIS LAN TLAN ILAN XLAN')
if mibBuilder.loadTexts: ctrlStatClearsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatClearsReceived.setDescription('Clears Received. The total number of call clear requests received on this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, DLC, SDLC, TERM, QLLC, HDLC, IPX, TIPX, ESIS, LAN, TLAN, ILAN AND XLAN')
ctrlStatRetransmissions = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 19), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatRetransmissions.setReference('PPP X25 XFRM NFRM VFRM CONS DLC SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatRetransmissions.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatRetransmissions.setDescription('Retransmissions. The number of packets that have been transmitted more than once on this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, DLC, SDLC, TERM, QLLC AND HDLC')
ctrlStatRejects = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 20), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatRejects.setReference('PPP X25 XFRM NFRM VFRM CONS DLC SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatRejects.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatRejects.setDescription('Rejects. The total number of packets which have been rejected on this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, DLC, SDLC, TERM, QLLC AND HDLC')
ctrlStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 9, 11, 13, 15, 17, 19, 21, 23, 25))).clone(namedValues=NamedValues(("disc", 1), ("sabm", 9), ("data", 11), ("blkd", 13), ("wake", 15), ("cls", 17), ("frmr", 19), ("stop", 21), ("xidr", 23), ("xidc", 25)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatState.setReference('PPP X25 XFRM NFRM VFRM CONS DLC SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatState.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatState.setDescription('State. The level 2 data state of the link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, DLC, SDLC, TERM, QLLC AND HDLC')
ctrlStatSubState = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 22), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 9, 1, 3, 129))).clone(namedValues=NamedValues(("norm", 1), ("rej", 5), ("disc", 9), ("idle", 1), ("actv", 3), ("new", 129)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatSubState.setReference('PPP X25 XFRM NFRM VFRM CONS DLC SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatSubState.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatSubState.setDescription('Sub State. The level 3 state of this link. Applicable controllers: PPP, X.25, XFRM, NFRM, VFRM, CONS, DLC, SDLC, TERM, QLLC AND HDLC')
ctrlStatNoTries = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 23), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatNoTries.setReference('PPP X25 XFRM NFRM VFRM CONS DLC SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatNoTries.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatNoTries.setDescription('Tries. The number of un-numbered control frames sent to try and establish the link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, DLC, SDLC, TERM, QLLC AND HDLC')
ctrlStatOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16385, 32769, 8193, 4097, 2049, 257, 1025, 513, 17, 5, 9, 3, 2, 40961))).clone(namedValues=NamedValues(("none", 1), ("iso1984", 16385), ("poll", 32769), ("ext", 8193), ("hold", 4097), ("stat", 2049), ("net", 257), ("dmod", 1025), ("dcd", 513), ("ui", 17), ("xidc", 5), ("xidr", 9), ("test", 3), ("dtr", 2), ("poll-ext", 40961)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatOptions.setReference('PPP X25 XFRM NFRM VFRM CONS DLC SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatOptions.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatOptions.setDescription('Options The options currently configured for this link. Note, that the values returned by the MegaPAC may be additive values - representing combined combinations for the table listed e.g. poll+ext. In this situation modify the MIB entering the resulting integer value minus one e.g. 32769+8193-1=40961 (poll+ext) Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, DLC, SDLC, TERM, QLLC AND HDLC')
ctrlStatLCGN = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatLCGN.setReference('PPP X25 XFRM NFRM VFRM CONS DLC SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatLCGN.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatLCGN.setDescription('LCGN The logical channel group number for this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, DLC, SDLC, TERM, QLLC AND HDLC')
ctrlStatResetsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 26), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatResetsReceived.setReference('PPP X25 XFRM NFRM VFRM CONS DLC SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatResetsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatResetsReceived.setDescription('Resets Received. The total number of reset packets received on this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, DLC, SDLC, TERM, QLLC AND HDLC')
ctrlStatInterruptsReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 27), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatInterruptsReceived.setReference('PPP X25 XFRM NFRM VFRM CONS DLC SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatInterruptsReceived.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatInterruptsReceived.setDescription('Interupts Received. The total number of interrupt packets received on this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, DLC, SDLC, TERM, QLLC AND HDLC')
ctrlStatOutputQueueLength = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 28), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatOutputQueueLength.setReference('PPP X25 XFRM NFRM VFRM CONS DLC SDLC TERM QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatOutputQueueLength.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatOutputQueueLength.setDescription('Output Queue Length. The number of packets queued for transmission on this link. Applicable controllers: PPP, X.25, XFRM, NFRM VFRM, CONS, DLC, SDLC, TERM, QLLC AND HDLC')
ctrlStatStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatStationAddress.setReference('CONS IPX TIPX ESIS LAN TLAN ILAN XLAN IP TIP')
if mibBuilder.loadTexts: ctrlStatStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatStationAddress.setDescription('Local MAC Address The MAC Address of the MegaPAC. Applicable controllers: CONS, IPX, TIPX, ESIS, IP, TIP LAN, TLAN, ILAN AND XLAN')
ctrlStatDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 30), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatDestinationAddress.setReference('CONS')
if mibBuilder.loadTexts: ctrlStatDestinationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatDestinationAddress.setDescription('Destination MAC Address. The MAC Address of the destination device. Applicable controllers: CONS only')
ctrlStatEIA = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(8, 8)).setFixedLength(8)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatEIA.setReference('X25 QLLC HDLC')
if mibBuilder.loadTexts: ctrlStatEIA.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatEIA.setDescription('EIA state. Displays the EIA signals currently on the link. Applicable controllers: X.25, QLLC and HDLC')
ctrlStatSdlcOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 33, 65, 129, 17, 193))).clone(namedValues=NamedValues(("none", 1), ("pu4", 33), ("wait", 65), ("xid", 129), ("idle", 17), ("wait-xid", 193)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatSdlcOptions.setReference('QLLC SDLC')
if mibBuilder.loadTexts: ctrlStatSdlcOptions.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatSdlcOptions.setDescription('SDLC Options. A range of link level options used for establishing IBM connections. Note, that the values returned by the MegaPAC may be additive values - representing combined combinations for the table listed e.g. wait+xid. In this situation modify the MIB entering the resulting integer value minus one e.g. 129+65-1=193 (wait+xid)')
ctrlStatArpRequestRec = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatArpRequestRec.setReference('IP TIP')
if mibBuilder.loadTexts: ctrlStatArpRequestRec.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatArpRequestRec.setDescription('ARP Requests Received. The number of ARP requests sent to the MegaPAC')
ctrlStatArpRequestSent = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 34), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatArpRequestSent.setReference('IP TIP')
if mibBuilder.loadTexts: ctrlStatArpRequestSent.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatArpRequestSent.setDescription('ARP Requests Sent. The number of ARP requests processed to the local LAN by the MegaPAC')
ctrlStatArpResponsesRec = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatArpResponsesRec.setReference('IP TIP')
if mibBuilder.loadTexts: ctrlStatArpResponsesRec.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatArpResponsesRec.setDescription('ARP Respones Received. The number of ARP responses returned to the the MegaPAC')
ctrlStatFRTxSeqLost = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatFRTxSeqLost.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlStatFRTxSeqLost.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatFRTxSeqLost.setDescription('Number of LMI without Reply')
ctrlStatFRRxSeqLost = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 37), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatFRRxSeqLost.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlStatFRRxSeqLost.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatFRRxSeqLost.setDescription('Number of Lost LMI')
ctrlStatFRCurTxSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 38), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatFRCurTxSeq.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlStatFRCurTxSeq.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatFRCurTxSeq.setDescription('LMI sequence number sent in enquiries')
ctrlStatFRCurRxSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatFRCurRxSeq.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlStatFRCurRxSeq.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatFRCurRxSeq.setDescription('LMI sequence number received in responses')
ctrlStatFRRcvBecn = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 40), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatFRRcvBecn.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlStatFRRcvBecn.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatFRRcvBecn.setDescription('Number of received frames with BECN')
ctrlStatFRRcvFecn = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 41), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatFRRcvFecn.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlStatFRRcvFecn.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatFRRcvFecn.setDescription('Number of received frames with FECN')
ctrlStatFRThroughput = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 42), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatFRThroughput.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlStatFRThroughput.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatFRThroughput.setDescription('Number of characters during T')
ctrlStatFRLMI = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 2))).clone(namedValues=NamedValues(("down", 0), ("up", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatFRLMI.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlStatFRLMI.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatFRLMI.setDescription('Status of LMI')
ctrlStatFRrespLmi = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 44), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatFRrespLmi.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlStatFRrespLmi.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatFRrespLmi.setDescription('Count of LMI responses')
ctrlStatFRCurSndSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatFRCurSndSeq.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlStatFRCurSndSeq.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatFRCurSndSeq.setDescription('LMI sequence number sent in responses')
ctrlStatFRCurRcvSeq = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 46), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatFRCurRcvSeq.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlStatFRCurRcvSeq.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatFRCurRcvSeq.setDescription('LMI sequence number received in enquiries')
ctrlStatFRRcvDe = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 3, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlStatFRRcvDe.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlStatFRRcvDe.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlStatFRRcvDe.setDescription('Number of received frames with DE bit set')
ctrlParamTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4), )
if mibBuilder.loadTexts: ctrlParamTable.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamTable.setDescription('The controller configuration table.')
ctrlParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1), ).setIndexNames((0, "SAT-MEGA-MIB", "ctrlParamIndex"))
if mibBuilder.loadTexts: ctrlParamEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamEntry.setDescription('An individual controller configuration.')
ctrlParamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ctrlParamIndex.setReference('ALL')
if mibBuilder.loadTexts: ctrlParamIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamIndex.setDescription("Index The position of this controller in relation to 'BASE'. i.e. BASE = 0 NMSC = 1 PS01 = 2 ... Applicable: All controller types")
ctrlParamName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamName.setReference('ALL')
if mibBuilder.loadTexts: ctrlParamName.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamName.setDescription('Name. The unique 4 character name by which this controller is known. Applicable: All controller types')
ctrlParamType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39))).clone(namedValues=NamedValues(("x25", 1), ("mux", 2), ("null", 3), ("epci", 4), ("hdlc", 8), ("qllc", 9), ("xlan", 10), ("ilan", 11), ("term", 12), ("lan", 13), ("clus", 14), ("mult", 15), ("sdlc", 16), ("ip", 17), ("sru", 18), ("v25b", 19), ("cons", 20), ("nmsc", 21), ("dlc", 22), ("map", 23), ("tlan", 24), ("snmp", 25), ("nfrm", 26), ("xfrm", 27), ("tip", 28), ("rout", 29), ("ppp", 30), ("ipx", 31), ("tipx", 32), ("esis", 34), ("tesis", 35), ("vfrm", 36), ("smdx", 37), ("dlcx", 38), ("edlc", 39)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamType.setReference('ALL')
if mibBuilder.loadTexts: ctrlParamType.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamType.setDescription('Type. The type of controller this is. Applicable: All controller types')
ctrlParamSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 17, 33))).clone(namedValues=NamedValues(("none", 1), ("sio", 2), ("xio", 3), ("xio-sio", 4), ("generic", 5), ("scc", 17), ("vio", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamSubType.setReference('NFRM VFRM PPP QLLC SDLC X25 NULL XFRM')
if mibBuilder.loadTexts: ctrlParamSubType.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamSubType.setDescription('Sub-Type. The link between the controller and its associated hardware type. Applicable: X25, SDLC, QLLC, HDLC and NULL controller types')
ctrlParamNoChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamNoChannels.setReference('ALL')
if mibBuilder.loadTexts: ctrlParamNoChannels.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamNoChannels.setDescription('Number of channels. The number of logical channels configured on the controller. Applicable: All controller types')
ctrlParamSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(19, 18, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0))).clone(namedValues=NamedValues(("speed-2mbps", 19), ("speed-1mbps", 18), ("speed-512kbps", 17), ("speed-256kbps", 16), ("speed-128kbps", 15), ("speed-64kbps", 14), ("speed-12-75bps", 13), ("speed-19200bps", 12), ("speed-9600bps", 11), ("speed-7200bps", 10), ("speed-4800bps", 9), ("speed-3600bps", 8), ("speed-2400bps", 7), ("speed-2000bps", 6), ("speed-1800bps", 5), ("speed-1200bps", 4), ("speed-600bps", 3), ("speed-300bps", 2), ("ext-clock", 1), ("none", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamSpeed.setReference('NFRM VFRM PPP QLLC SDLC X25 NULL XFRM')
if mibBuilder.loadTexts: ctrlParamSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamSpeed.setDescription('Speed. The clock speed of the interface. Applicable: X25, SDLC, QLLC, HDLC and NULL controller types')
ctrlParamInterfaceType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 1))).clone(namedValues=NamedValues(("x21", 2), ("v35", 3), ("v24", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamInterfaceType.setReference('NFRM VFRM PPP QLLC SDLC X25 NULL XFRM')
if mibBuilder.loadTexts: ctrlParamInterfaceType.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamInterfaceType.setDescription('The serial interface type. Note, Only applicable to MegaCard Applicable: XFRM, NFRM, PPP, X25, HDLC controller types')
ctrlParamPacketSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 5, 9, 17, 33, 1))).clone(namedValues=NamedValues(("bytes-32", 2), ("bytes-64", 3), ("bytes-128", 5), ("bytes-256", 9), ("bytes-512", 17), ("bytes-1024", 33), ("tran", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamPacketSize.setReference('CONS DLC TERM X25 NULL HDLC')
if mibBuilder.loadTexts: ctrlParamPacketSize.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamPacketSize.setDescription("Packet Size. The maximum packet size in bytes of outgoing packets, this parameter must be less than or equal to the 'BASE' statistic 'maxPacketSize'. Applicable: X25, TERM, HDLC, CONS, DLC and NULL controller types")
ctrlParamV54Modem = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(61, 1))).clone(namedValues=NamedValues(("yes", 61), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamV54Modem.setReference('X25 NULL HDLC')
if mibBuilder.loadTexts: ctrlParamV54Modem.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamV54Modem.setDescription("V54 Modem. Enable V54 loop back testing. Note this does not initiate loop back testing, the loop back is initiated by typing in the 'TEST' command. Applicable: X25, HDLC and NULL controller types")
ctrlParamAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("dte-a", 1), ("dce-b", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamAddress.setReference('X25 NULL HDLC')
if mibBuilder.loadTexts: ctrlParamAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamAddress.setDescription('Address. The logical address designation of the controller. Applicable: X25, HDLC and NULL controller types')
ctrlParamOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 16385, 32769, 33025, 8193, 4097, 2049, 257, 1025, 513, 17, 5, 9, 3, 2, 40961))).clone(namedValues=NamedValues(("none", 1), ("iso1984", 16385), ("poll", 32769), ("poll-net", 33025), ("ext", 8193), ("hold", 4097), ("stat", 2049), ("net", 257), ("dmod", 1025), ("dcd", 513), ("ui", 17), ("xidc", 5), ("xidr", 9), ("test", 3), ("dtr", 2), ("poll-ext", 40961)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamOptions.setReference('CONS DLC ILAN QLLC SDLC X25 NULL XLAN')
if mibBuilder.loadTexts: ctrlParamOptions.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamOptions.setDescription('Options. A range of controller options, options may be specified individually or added together. Note, that the values returned by the MegaPAC may be additive values - representing combined combinations for the table listed e.g. poll+ext. In this situation modify the MIB entering the resulting integer value minus one e.g. 32769+8193-1=40961 (poll+ext) Applicable: X25, HDLC, CONS, ILAN, XLAN, DLC')
ctrlParamInitFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(48, 64, 68, 84, 1))).clone(namedValues=NamedValues(("sabm", 48), ("sabm-pbit", 64), ("disc", 68), ("disc-pbit", 84), ("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamInitFrame.setReference('CONS DLC ILAN X25 NULL XLAN')
if mibBuilder.loadTexts: ctrlParamInitFrame.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamInitFrame.setDescription('Initial Frame. Applicable: X25, HDLC, CONS, ILAN, XLAN, DLC and NULL controller types')
ctrlParamT1 = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamT1.setReference('CONS DLC ILAN X25 NULL XLAN HDLC')
if mibBuilder.loadTexts: ctrlParamT1.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamT1.setDescription('T1. Timer for retransmission of unacknowleged frames. Specified in 0.1 second units. Applicable: X25, HDLC, CONS, ILAN, XLAN, DLC and NULL controller types')
ctrlParamTries = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTries.setReference('CONS DLC ILAN QLLC SDLC X25 NULL XLAN HDLC')
if mibBuilder.loadTexts: ctrlParamTries.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamTries.setDescription('Tries. The number of times a frame will be retransmitted before a link restart is initiated. Applicable: X25, SDLC, QLLC, HDLC, CONS, ILAN, XLAN, DLC and NULL controller types')
ctrlParamKLevel2 = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamKLevel2.setReference('CONS X25 NULL XLAN ILAN DLC HDLC')
if mibBuilder.loadTexts: ctrlParamKLevel2.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamKLevel2.setDescription('KLevel 2. The level 2 window size. Applicable: X25, HDLC, CONS, ILAN, XLAN, DLC and NULL controller types')
ctrlParamKLevel3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamKLevel3.setReference('CONS X25 NULL XFRM XLAN HDLC DLC ILAN')
if mibBuilder.loadTexts: ctrlParamKLevel3.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamKLevel3.setDescription('KLevel 3. The level 3 window size. Applicable: X25, HDLC, CONS, ILAN, XLAN, DLC and NULL controller types')
ctrlParamLineGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamLineGroup.setReference('CONS ILAN X25 NULL XFRM XLAN')
if mibBuilder.loadTexts: ctrlParamLineGroup.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamLineGroup.setDescription('Line Group. The line group is used for load sharing. If two links have same (non-zero) line group then data may be shared between them. Applicable: X25, HDLC, CONS, ILAN, XLAN, DLC and NULL controller types')
ctrlParamLCGN = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamLCGN.setReference('CONS ILAN X25 NULL XFRM XLAN')
if mibBuilder.loadTexts: ctrlParamLCGN.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamLCGN.setDescription('LCGN. The logical channel group number for this link. Applicable: X25, HDLC, CONS, ILAN, XLAN, DLC and NULL controller types')
ctrlParamLCNOffset = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 19), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamLCNOffset.setReference('CONS ILAN X25 NULL XFRM XLAN')
if mibBuilder.loadTexts: ctrlParamLCNOffset.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamLCNOffset.setDescription("LCN Offset. This parameter is used in conjunction with the LCGN. It's purpose is to shift the channel range by the appropriate offset. Applicable: X25, HDLC, CONS, ILAN, XLAN, DLC and NULL controller types")
ctrlParamAddressGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamAddressGroup.setReference('CONS ILAN X25 NULL XFRM XLAN')
if mibBuilder.loadTexts: ctrlParamAddressGroup.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamAddressGroup.setDescription('Address Group. This parameter is used in conjunction with the address group field in the x25 file to provide different addressing domains. Applicable: X25, HDLC, CONS, ILAN, XLAN, DLC and NULL controller types')
ctrlParamFrameSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 21), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 7))).clone(namedValues=NamedValues(("extended", 15), ("normal", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamFrameSequence.setReference('CONS ILAN QLLC SDLC X25 NULL XFRM XLAN')
if mibBuilder.loadTexts: ctrlParamFrameSequence.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamFrameSequence.setDescription('Frame Sequence. This parameter determines if normal or extended frame sequencing is supported. Applicable: X25, SDLC, QLLC, HDLC, CONS, ILAN, XLAN, DLC and NULL controller types')
ctrlParamCallTimeOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 200))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamCallTimeOut.setReference('CONS ILAN QLLC SDLC TERM X25 NULL XFRM XLAN')
if mibBuilder.loadTexts: ctrlParamCallTimeOut.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamCallTimeOut.setDescription('Call Time Out. The time in seconds the MegaPAC will wait to receive a call accept packet before clearing the call. Applicable: X25, TERM, SDLC, QLLC, HDLC, CONS, ILAN, XLAN, DLC and NULL controller types')
ctrlParamErrorThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 250))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamErrorThreshold.setReference('CONS ILAN X25 NULL XFRM XLAN HDLC')
if mibBuilder.loadTexts: ctrlParamErrorThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamErrorThreshold.setDescription('Error Threshold. The number of CRC errors that will be accepted before generating an error report. Applicable: X25, HDLC, CONS, ILAN, XLAN, DLC and NULL controller types')
ctrlParamLoopBarPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamLoopBarPriority.setReference('CONS X25 NULL XFRM XLAN HDLC')
if mibBuilder.loadTexts: ctrlParamLoopBarPriority.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamLoopBarPriority.setDescription('Loop Bar Priority. Prevents calls from looping on the same controller. Applicable: X25, HDLC, CONS, XLAN, DLC and NULL controller types')
ctrlParamExtendedCallMgmt = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4, 5, 13, 1, 17, 33))).clone(namedValues=NamedValues(("in", 2), ("out", 3), ("in-out", 4), ("v25b", 5), ("v25m", 13), ("none", 1), ("poll", 17), ("fep", 33)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamExtendedCallMgmt.setReference('CONS X25 NULL XFRM XLAN HDLC PPP')
if mibBuilder.loadTexts: ctrlParamExtendedCallMgmt.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamExtendedCallMgmt.setDescription('Extended Call Management. Invokes extended packet processing facilities via the MAC file. For PPP, IN and OUT have special meaning: IN stands for PAP and OUT for CHAP. Applicable: X25, HDLC, CONS, XLAN, DLC and NULL controller types. Also for PPP.')
ctrlParamOptionalTimers = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 1))).clone(namedValues=NamedValues(("t13", 2), ("t23", 3), ("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamOptionalTimers.setReference('CONS X25 NULL XFRM XLAN HDLC')
if mibBuilder.loadTexts: ctrlParamOptionalTimers.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamOptionalTimers.setDescription('Optional Timers. Optional level 3 timers for clearing calls when a clear confirmation has not been received after a clear request has been sent. T13 is used if the controller is set to be a logical DCE and the timeout will be 60 seconds. T23 is used if the controller is a logical DTE and the timeout is 180 seconds. Applicable: X25, HDLC, CONS, XLAN, DLC and NULL controller types')
ctrlParamOptionalFlags = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 27), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamOptionalFlags.setReference('CONS X25 NULL XFRM XLAN HDLC')
if mibBuilder.loadTexts: ctrlParamOptionalFlags.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamOptionalFlags.setDescription('Optional Flags. This parameter is used to insert extra flags between frames to slow down the rate of transmission. It will only take effect on controllers with a sub-type of XIO. Applicable: X25, HDLC, CONS, XLAN, DLC and NULL controller types')
ctrlParamTransportLevelType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(34, 1))).clone(namedValues=NamedValues(("iso", 34), ("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTransportLevelType.setReference('CONS X25 NULL XFRM XLAN HDLC')
if mibBuilder.loadTexts: ctrlParamTransportLevelType.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamTransportLevelType.setDescription('Transport Level Type. Enable the ISO transport facility. Applicable: X25, HDLC, CONS, XLAN, DLC and NULL controller types')
ctrlParamTransportClass = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(49, 33, 1))).clone(namedValues=NamedValues(("class3", 49), ("class2", 33), ("none", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTransportClass.setReference('CONS X25 NULL XFRM XLAN HDLC')
if mibBuilder.loadTexts: ctrlParamTransportClass.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamTransportClass.setDescription('Transport Class. The type of transport class implemented. Applicable: X25, HDLC, CONS, XLAN, DLC and NULL controller types')
ctrlParamDefaultWindowSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDefaultWindowSize.setReference('CONS X25 NULL XFRM XLAN HDLC')
if mibBuilder.loadTexts: ctrlParamDefaultWindowSize.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamDefaultWindowSize.setDescription('Default Window Size. The initial credit limit to be used on a transport session. Applicable: X25, HDLC, CONS, XLAN, DLC and NULL controller types')
ctrlParamDisableFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDisableFlowControl.setReference('CONS X25 NULL XFRM XLAN HDLC')
if mibBuilder.loadTexts: ctrlParamDisableFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamDisableFlowControl.setDescription('Disable Flow Control. Enable/disable flow control on a transport class 2 call. Applicable: X25, HDLC, CONS, XLAN, DLC and NULL controller types')
ctrlParamTSAPFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 32), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("text", 2), ("hex", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTSAPFormat.setReference('CONS X25 NULL XFRM XLAN HDLC')
if mibBuilder.loadTexts: ctrlParamTSAPFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamTSAPFormat.setDescription("TSAP Format. Determines how the TSAP's will be treated internally by the MegaPAC. If set to text the local and remote TSAP's will be converted to form a 4 character internal resource name. If set to hex the first two hexadecimal pairs will form the resource name. Applicable: X25, HDLC, CONS, XLAN, DLC and NULL controller types")
ctrlParamMaximumTPDUSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 33), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(11, 10, 9, 8, 1))).clone(namedValues=NamedValues(("bytes-1024", 11), ("bytes-512", 10), ("bytes-256", 9), ("bytes128", 8), ("bytes-128", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamMaximumTPDUSize.setReference('CONS X25 NULL XFRM XLAN HDLC ILAN')
if mibBuilder.loadTexts: ctrlParamMaximumTPDUSize.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamMaximumTPDUSize.setDescription('Max. TPDU Size. The maximum Transport Protocol Data Unit Size. Applicable: X25, HDLC, CONS, ILAN, XLAN and NULL controller types')
ctrlParamTTRTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTTRTime.setReference('CONS X25 NULL XFRM XLAN HDLC')
if mibBuilder.loadTexts: ctrlParamTTRTime.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamTTRTime.setDescription('TTR Timer. Time To Resynchronise. Specifies the time delay in seconds for the transport class three timer to resync at the initiating end. Applicable: X25, HDLC, CONS, XLAN and NULL controller types')
ctrlParamTWRTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 120))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTWRTime.setReference('CONS X25 NULL XFRM XLAN HDLC')
if mibBuilder.loadTexts: ctrlParamTWRTime.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamTWRTime.setDescription('TWR Timer. Time to Wait for Resynchronisation. The time delay in seconds allowed for the transport class 3 timer at the responding end to wait for resynchronisation, before clearing down the transport session. Applicable: X25, HDLC, CONS, XLAN and NULL controller types')
ctrlParamDestinationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 36), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDestinationAddress.setReference('CONS DLC ILAN XLAN')
if mibBuilder.loadTexts: ctrlParamDestinationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamDestinationAddress.setDescription('Destination Address. The physical address of the target device. Applicable: CONS, ILAN, DLC and XLAN controller types')
ctrlParamDSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 37), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDSAP.setReference('CONS DLC ILAN XLAN')
if mibBuilder.loadTexts: ctrlParamDSAP.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamDSAP.setDescription('DSAP. The Destination Service Access Point. Applicable: CONS, ILAN, DLC and XLAN controller types')
ctrlParamSSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamSSAP.setReference('CONS DLC ILAN XLAN')
if mibBuilder.loadTexts: ctrlParamSSAP.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamSSAP.setDescription('SSAP. The Source Service Access Point. Applicable: CONS, ILAN, DLC and XLAN controller types')
ctrlParamSDLCOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 39), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 33, 65, 129, 17, 193))).clone(namedValues=NamedValues(("none", 1), ("pu4", 33), ("wait", 65), ("xid", 129), ("idle", 17), ("wait-xid", 193)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamSDLCOptions.setReference('SDLC QLLC')
if mibBuilder.loadTexts: ctrlParamSDLCOptions.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamSDLCOptions.setDescription('SDLC Options. A range of link level options used for establishing IBM connections. Applicable: SDLC and QLLC controller types')
ctrlParamPrimaryStation = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("yes", 2), ("no", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamPrimaryStation.setReference('SDLC QLLC')
if mibBuilder.loadTexts: ctrlParamPrimaryStation.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamPrimaryStation.setDescription('Primary Station. This parameter determines whether the MegaPAC will operate as a HOST primary connection (yes) or a CLUSTER secondary connection (no). Applicable: SDLC and QLLC controller types')
ctrlParamIdleDetectTime = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 41), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamIdleDetectTime.setReference('SDLC QLLC SRU')
if mibBuilder.loadTexts: ctrlParamIdleDetectTime.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamIdleDetectTime.setDescription('Idle Detect Timer. This parameter determines the time period in tenths of a second before an unacknowleged POLL/RESPONSE frame will be retransmitted. Applicable: SDLC, QLLC and SRU controller types')
ctrlParamPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 42), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamPollInterval.setReference('MAP MULT NFRM VFRM QLLC SDLC XFRM')
if mibBuilder.loadTexts: ctrlParamPollInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamPollInterval.setDescription('Poll Interval. The time period in tenths of a second between sending POLL frames. Applicable: SDLC, QLLC, MAP and MULT controller types')
ctrlParamDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 43), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDuplex.setReference('SDLC QLLC')
if mibBuilder.loadTexts: ctrlParamDuplex.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamDuplex.setDescription('Duplex. Enables SDLC full duplex operation, half duplex operation is reserved for future use. Applicable: SDLC and QLLC controller types')
ctrlParamTransmitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTransmitDelay.setReference('SDLC QLLC')
if mibBuilder.loadTexts: ctrlParamTransmitDelay.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamTransmitDelay.setDescription('Transmit Delay. Determines the time period in tenths of a second between the MegaPAC receiving an RR frame with the P-Bit set and the MegaPAC issuing an RR response with the F-Bit set. Applicable: SDLC and QLLC controller types')
ctrlParamSlowPollTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 45), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamSlowPollTimer.setReference('SDLC QLLC')
if mibBuilder.loadTexts: ctrlParamSlowPollTimer.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamSlowPollTimer.setDescription('Slow Poll Timer. When the controller has been defined as a primary station a slow poll rate can be specified for polling a Cluster controller that is down. This is to avoid causing delays to working Cluster controllers in a multi-point mode. The value is specified in tenths of a second. Applicable: SDLC and QLLC controller types')
ctrlParamMaxCallInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 46), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamMaxCallInterval.setReference('SDLC QLLC')
if mibBuilder.loadTexts: ctrlParamMaxCallInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamMaxCallInterval.setDescription('Max. Call Interval. When controller is configured as a primary station, a call request retry interval may be defined, so as to avoid the situation where successive call requests are continuously generated to the network. The initial call interval is 2 seconds, this interval is progressively doubled until the Maximum Call Interval (defined in minutes) is reached. Applicable: SDLC and QLLC controller types')
ctrlParamMaxCallCycles = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 47), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamMaxCallCycles.setReference('SDLC QLLC')
if mibBuilder.loadTexts: ctrlParamMaxCallCycles.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamMaxCallCycles.setDescription('Max. Call Cycles. This parameter is used in conjunction with the Maximum Call Interval parameter. It specifies the maximum number of call request cycles that can take effect before call requests continue at the Maximum Call Interval parameter setting. Each cycle consisting of call requests being initiated at intervals in incrementing multiples of two seconds, up to the Maximum Call Interval parameter. Applicable: SDLC and QLLC controller types')
ctrlParamGroupPoll = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamGroupPoll.setReference('SDLC QLLC')
if mibBuilder.loadTexts: ctrlParamGroupPoll.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamGroupPoll.setDescription('Group Poll. Used in SNA applications, where the specified value would generate multiple down-stream poll requests. Applicable: QLLC, DLC controllers')
ctrlParamDelayToRTSLow = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDelayToRTSLow.setReference('TERM')
if mibBuilder.loadTexts: ctrlParamDelayToRTSLow.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamDelayToRTSLow.setDescription('Delay RTS Low. Specifies the number of padding characters to be inserted between the end of data transmission and the dropping of the RTS signal. Only required for synchronous operation. Applicable: TERM controller only')
ctrlParamDelayToCTSHigh = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 256))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDelayToCTSHigh.setReference('TERM')
if mibBuilder.loadTexts: ctrlParamDelayToCTSHigh.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamDelayToCTSHigh.setDescription('Delay CTS High. Specifies the number of padding characters to be inserted between the dropping of RTS and the raising of CTS. Only required for synchronous operation. Applicable: TERM controller only')
ctrlParamInputSyncDeletion = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 51), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamInputSyncDeletion.setReference('TERM')
if mibBuilder.loadTexts: ctrlParamInputSyncDeletion.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamInputSyncDeletion.setDescription('Input Sync Deletion. If set, all SYNC characters will be stripped prior to transmission. Only effective in synchronous full duplex mode. Applicable: TERM controller only')
ctrlParamOutputSyncInsertion = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamOutputSyncInsertion.setReference('TERM')
if mibBuilder.loadTexts: ctrlParamOutputSyncInsertion.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamOutputSyncInsertion.setDescription('Output Sync Insertion. Specifies the number of SYNC characters to be transmitted prior to the start of the data block. Only effective in synchronous operation. Applicable: TERM controller only')
ctrlParamDCDFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDCDFilter.setReference('TERM')
if mibBuilder.loadTexts: ctrlParamDCDFilter.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamDCDFilter.setDescription('DCD Filter. A filter delay specified in tenths of a second which prevents unwanted link restarts caused by toggling of DCD signal. Applicable: TERM controller only')
ctrlParamInhibitTimeFill = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 54), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamInhibitTimeFill.setReference('TERM')
if mibBuilder.loadTexts: ctrlParamInhibitTimeFill.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamInhibitTimeFill.setDescription('Inhibit Time Fill Allows the insertion of time fill frames to compensate for network delays. Effective in synchronous mode only. Applicable: TERM controller only')
ctrlParamDirectedBroadcasts = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 55), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDirectedBroadcasts.setReference('LAN TLAN')
if mibBuilder.loadTexts: ctrlParamDirectedBroadcasts.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamDirectedBroadcasts.setDescription('Directed Broadcasts. ???. Applicable: LAN and TLAN Controllers only')
ctrlParamDefaultLocalPrinter = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 56), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDefaultLocalPrinter.setReference('CLUS')
if mibBuilder.loadTexts: ctrlParamDefaultLocalPrinter.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamDefaultLocalPrinter.setDescription('Default Local Printer. The number of the channel which is reserved for a Screen Print server, a value of (0) disables the Screen Print facility. Applicable: Cluster Controllers only')
ctrlParamNewLANInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("no", 2), ("yes", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamNewLANInterface.setReference('IP TIP IPX TIPX ESIS DLC LAN TLAN ILAN XLAN')
if mibBuilder.loadTexts: ctrlParamNewLANInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamNewLANInterface.setDescription('New NFRM Port. The controller marks the first position of a controller connection to a LAN interface. All other controllers defined as NEWPhysicalInterface/ NO will map to the same interface defined as NewPhysicalInterface/ YES.')
ctrlParamNewSerialInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 58), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamNewSerialInterface.setReference('PPP X25 XFRM NFRM VFRM SDLC QLLC HDLC')
if mibBuilder.loadTexts: ctrlParamNewSerialInterface.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamNewSerialInterface.setDescription('New NFRM Port. The controller marks the first position of a controller connection to a serial interface. All other controllers defined as NEWPhysicalInterface/ NO will map to the same interface defined as NewPhysicalInterface/ YES.')
ctrlParamDlci = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 59), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1022))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamDlci.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlParamDlci.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamDlci.setDescription('DLCI Number')
ctrlParamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 60), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 4))).clone(namedValues=NamedValues(("dte", 2), ("dce", 3), ("dte-dce", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamMode.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlParamMode.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamMode.setDescription('Status of DLCI. Defines a Network to Network Interfaces (NNI) or User Network Interface (UNI) implentation. Where MegaPAC connects to a Frame Relay switch, this parameter just be defined as DTE i.e. a UNI. When MegaPAC acts as a Frame Relay switch, connecting to DTE using Network side of UNI, DCE operation must be specified. Otherwise when operating as a switch, connected to another switch, NNI i.e. DCE+DTE operation must be specified. All controllers mapped to the same physical interface must be configured the same mode setting.')
ctrlParamLmi = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 129))).clone(namedValues=NamedValues(("no", 1), ("yes", 2), ("ansi", 129)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamLmi.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlParamLmi.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamLmi.setDescription('Type of Local Management Interface (LMI). Ansi = ANSI LMI yes = T1.S1 LMI no = LMI disabled.')
ctrlParamKeepAliveTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 62), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 80))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamKeepAliveTimer.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlParamKeepAliveTimer.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamKeepAliveTimer.setDescription('Only applicable if the LMI is active. Specifies in seconds the interval between keep alive messages. If this end is a DTE, this is the actual interval between Status Requests generated to the DCE (T391). If this end is a DCE, then the timer is used simply to detect whether connection to the DTE has been lost (T392). Note : it is the DTE which is the active partner across the LMI interface, in accordance with the LMI specification.')
ctrlParamFullStatusInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 63), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamFullStatusInterval.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlParamFullStatusInterval.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamFullStatusInterval.setDescription('Full status enquiry timer (number of times of T391/T392) Specifies how often a DTE sends a or a DCE expects a Full Status Request message. The number specified is the ratio between Status Requests messages, and Full Status Request enquiries (N391/N393).')
ctrlParamBandwidth = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 64), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamBandwidth.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlParamBandwidth.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamBandwidth.setDescription('Rhe sample period used in enforcing the committed information rate (CIR). The CIR expressed in terms of characters per 1/10 th second. There are two further parameters which appear directly after the BANDWIDTH/ promt which are designed to handle bursty traffic (i.e. Bc and Be)')
ctrlParamBurstCommit = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 65), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamBurstCommit.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlParamBurstCommit.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamBurstCommit.setDescription('Burst Commit, i.e the number of characters the remote end is committed to buffering, in our case in a 1/10 th of a second period')
ctrlParamBurstEligibility = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 66), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamBurstEligibility.setReference(' XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlParamBurstEligibility.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamBurstEligibility.setDescription('Burst Eligibility, i.e the DLCI in questions is enabled to transmit a burst beyond its committed information rate, when enabled to do so by the state of the other DLCIs.')
ctrlParamTimerT3 = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 67), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTimerT3.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamTimerT3.setDescription('T3. Timer to disconnect the link if no flags are received. Specified in 0.1 second units. Applicable: X25 controller types with XIO subtype')
ctrlParamFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 68), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamFlowControl.setReference(' MULT ')
if mibBuilder.loadTexts: ctrlParamFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamFlowControl.setDescription('Enables MULT flow control. On MULT controller type flow control inhibits data on all ressources when a single ressource requires flow control.')
ctrlParamConfigState = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 69), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamConfigState.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamConfigState.setDescription('Command to set the state of the controller. Set this parameter to 1 to restart the controller. Set this parameter to 2 to stop the controller. The value read is meaningless.')
ctrlParamTry = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 3, 4, 1, 70), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 99))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ctrlParamTry.setReference('XFRM NFRM VFRM')
if mibBuilder.loadTexts: ctrlParamTry.setStatus('mandatory')
if mibBuilder.loadTexts: ctrlParamTry.setDescription('This value used to detect whether connection to the other end has been lost. The number specified is the ratio between Status Requests messages, and Full Status Request enquiries, above which an LMI error is recognized (N392).')
chanNumberConfigured = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanNumberConfigured.setStatus('mandatory')
if mibBuilder.loadTexts: chanNumberConfigured.setDescription('Number of channels. The number of channels configured.')
chanStatTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2), )
if mibBuilder.loadTexts: chanStatTable.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatTable.setDescription('A table of channels associated with a controller.')
chanStatEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1), ).setIndexNames((0, "SAT-MEGA-MIB", "chanStatIndex"))
if mibBuilder.loadTexts: chanStatEntry.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatEntry.setDescription('An individual channel entry.')
chanStatIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatIndex.setReference('NMS CONS V25B SRU IP SDLC MULT CLUS LAN TERM ILAN XLAN QLLC HDLC X25 MAP SNMP DLC TLAN NFRM XFRM PPP ESIS IPX TIPX TIP ROUT')
if mibBuilder.loadTexts: chanStatIndex.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatIndex.setDescription('Index. The position of this channel in the controller channel Table. Applicable controllers: NMS, CONS, V25B, SRU, IP, SDLC, MULT, CLUS, LAN, TERM, ILAN, XLAN, QLLC, HDLC, X25, MUX, MAP, DLC, TLAN, NFRM, XFRM, PPP, ESIS, IPX, TIPX, TIP, ROUT and SNMP')
chanStatName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatName.setReference('NMS CONS V25B SRU IP SDLC MULT CLUS LAN TERM ILAN XLAN QLLC HDLC X25 MAP SNMP DLC TLAN NFRM XFRM PPP ESIS IPX TIPX TIP ROUT')
if mibBuilder.loadTexts: chanStatName.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatName.setDescription('Name. A user defined name for routing calls to this channel. Applicable controllers: NMS, CONS, V25B, SRU, IP, SDLC, MULT, CLUS, LAN, TERM, ILAN, XLAN, QLLC, HDLC, X25, MUX, MAP, DLC, TLAN, NFRM, XFRM, PPP, ESIS, IPX, TIPX, TIP, ROUT and SNMP')
chanStatControllerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatControllerIndex.setReference('NMS CONS V25B SRU IP SDLC MULT CLUS LAN TERM ILAN XLAN QLLC HDLC X25 MAP SNMP DLC TLAN NFRM XFRM PPP ESIS IPX TIPX TIP ROUT')
if mibBuilder.loadTexts: chanStatControllerIndex.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatControllerIndex.setDescription('Controller Index. The index to the controller that this channel operates within. Applicable controllers: NMS, CONS, V25B, SRU, IP, SDLC, MULT, CLUS, LAN, TERM, ILAN, XLAN, QLLC, HDLC, X25, MUX, MAP, DLC, TLAN, NFRM, XFRM, PPP, ESIS, IPX, TIPX, TIP, ROUT and SNMP')
chanStatNameCtrlName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatNameCtrlName.setReference('NMS CONS V25B SRU IP SDLC MULT CLUS LAN TERM ILAN XLAN QLLC HDLC X25 MAP SNMP DLC TLAN NFRM XFRM PPP ESIS IPX TIPX TIP ROUT')
if mibBuilder.loadTexts: chanStatNameCtrlName.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatNameCtrlName.setDescription('Controller Name. The controller NAME supporting this channel Applicable controllers: NMS, CONS, V25B, SRU, IP, SDLC, MULT, CLUS, LAN, TERM, ILAN, XLAN, QLLC, HDLC, X25, MUX, MAP, DLC, TLAN, NFRM, XFRM, PPP, ESIS, IPX, TIPX, TIP, ROUT and SNMP')
chanStatConnectedToChannelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatConnectedToChannelIndex.setReference('NMS CONS V25B SRU IP SDLC MULT CLUS LAN TERM ILAN XLAN QLLC HDLC X25 MAP SNMP DLC TLAN NFRM VFRM XFRM PPP ESIS IPX TIPX TIP ROUT')
if mibBuilder.loadTexts: chanStatConnectedToChannelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatConnectedToChannelIndex.setDescription('Connected to Index. The INDEX of the controller that this channel is connected to. Applicable controllers: NMS, CONS, V25B, SRU, IP, SDLC, MULT, CLUS, LAN, TERM, ILAN, XLAN, QLLC, HDLC, X25, MUX, MAP, DLC, TLAN, NFRM, XFRM, PPP, ESIS, IPX, TIPX, TIP, ROUT and SNMP')
chanStatState = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 73, 69, 57, 49, 45, 41, 37, 33, 29, 25, 21, 17, 13, 9, 5))).clone(namedValues=NamedValues(("disc", 1), ("emul", 73), ("emul", 69), ("post", 57), ("busy", 49), ("call", 45), ("data", 41), ("wake", 37), ("setup", 33), ("rout", 29), ("addr", 25), ("name", 21), ("look", 17), ("serv", 13), ("pass", 9), ("rung", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatState.setReference('NMS CONS V25B SRU IP SDLC MULT CLUS LAN TERM ILAN XLAN QLLC HDLC X25 MAP SNMP DLC TLAN NFRM VFRM XFRM PPP ESIS IPX TIPX TIP ROUT')
if mibBuilder.loadTexts: chanStatState.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatState.setDescription('State. The current Status of the channel, the status may be one or a combination of the following: Applicable controllers: NMS, CONS, V25B, SRU, IP, SDLC, MULT, CLUS, LAN, TERM, ILAN, XLAN, QLLC, HDLC, X25, MUX, MAP, DLC, TLAN, NFRM VFRM, XFRM, PPP, ESIS, IPX, TIPX, TIP, ROUT and SNMP')
chanStatSessionStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 9, 17, 33, 65, 129))).clone(namedValues=NamedValues(("none", 1), ("tran", 2), ("dri", 3), ("dro", 5), ("call", 9), ("pad", 17), ("queu", 33), ("stat", 65), ("disc", 129)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatSessionStatus.setReference('NMS CONS V25B SRU IP SDLC MULT CLUS LAN TERM ILAN XLAN QLLC HDLC X25 MAP SNMP DLC TLAN NFRM VFRM XFRM PPP ESIS IPX TIPX TIP ROUT')
if mibBuilder.loadTexts: chanStatSessionStatus.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatSessionStatus.setDescription('Session Status. The Status of the channel during a call session, the status may be one or a combination of the following: State Description CALL Call Originator. DRI Flow controlling input. DRO Flow controlling on output. TRAN Presentation service not involved in call set-up. QUEU Queued to selected resource. STAT Awaiting queue status information. PAD In PAD Recall mode. DISC Data buffers draining before clearing call. Applicable controllers: NMS, CONS, V25B, SRU, IP, SDLC, MULT, CLUS, LAN, TERM, ILAN, XLAN, QLLC, HDLC, X25, MUX, MAP, DLC, TLAN, NFRM VFRM, XFRM, PPP, ESIS, IPX, TIPX, TIP, ROUT and SNMP')
chanStatEIA = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 9, 17, 33, 65, 129))).clone(namedValues=NamedValues(("none", 1), ("dcd", 2), ("ring", 3), ("x28", 5), ("rej", 9), ("iso", 17), ("tcal", 33), ("closed", 65), ("down", 129)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatEIA.setReference('NMS CONS V25B SRU IP SDLC MULT CLUS LAN TERM ILAN XLAN QLLC HDLC X25 MAP ROUT DLC TLAN NFRM VFRM XFRM PPP ESIS IPX TIPX TIP SNMP')
if mibBuilder.loadTexts: chanStatEIA.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatEIA.setDescription('EIA Displays the status of the V24/V28 signals on term or muxport links, or call status on X.25 links. The down state indicates that level 2 is inactive. Applicable controllers: NMS, CONS, V25B, SRU, IP, SDLC, MULT, CLUS, LAN, TERM, ILAN, XLAN, QLLC, HDLC, X25, MUX, MAP, DLC, TLAN, NFRM VFRM, XFRM, PPP, ESIS, IPX, TIPX, TIP, ROUT and SNMP')
chanStatTotalFramesIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTotalFramesIn.setReference('CONS IP SDLC LAN ILAN XLAN QLLC HDLC X25 ROUT DLC TLAN NFRM VFRM XFRM PPP ESIS IPX TIPX TIP')
if mibBuilder.loadTexts: chanStatTotalFramesIn.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatTotalFramesIn.setDescription('Total Frames In. The total number of frames received on this channel since it entered Data State. Applicable controllers: CONS, IP, SDLC, TIP, LAN, TIPX, ILAN, XLAN, QLLC, HDLC, X25, DLC, TLAN, NFRM VFRM, XFRM, PPP, ESIS, IPX and ROUT')
chanStatTotalFramesOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTotalFramesOut.setReference('CONS IP SDLC LAN ILAN XLAN QLLC HDLC X25 ROUT DLC TLAN NFRM VFRM XFRM PPP ESIS IPX TIPX TIP')
if mibBuilder.loadTexts: chanStatTotalFramesOut.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatTotalFramesOut.setDescription('Total Frames out. The total number of frames transmitted on this channel since it entered Data State. Applicable controllers: CONS, IP, SDLC, TIP, LAN, TIPX, ILAN, XLAN, QLLC, HDLC, X25, DLC, TLAN, NFRM VFRM, XFRM, PPP, ESIS, IPX and ROUT')
chanStatTotalCharsIn = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTotalCharsIn.setReference('CONS IP SDLC LAN ILAN XLAN QLLC HDLC X25 ROUT DLC TLAN NFRM VFRM XFRM PPP ESIS IPX TIPX TIP')
if mibBuilder.loadTexts: chanStatTotalCharsIn.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatTotalCharsIn.setDescription('Total Characters In. The total number of characters received on this channel since it entered Data State. Applicable controllers: CONS, IP, SDLC, TIP, LAN, TIPX, ILAN, XLAN, QLLC, HDLC, X25, DLC, TLAN, NFRM VFRM, XFRM, PPP, ESIS, IPX and ROUT')
chanStatTotalCharsOut = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTotalCharsOut.setReference('CONS IP SDLC LAN ILAN XLAN QLLC HDLC X25 ROUT DLC TLAN NFRM VFRM XFRM PPP ESIS IPX TIPX TIP')
if mibBuilder.loadTexts: chanStatTotalCharsOut.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatTotalCharsOut.setDescription('Total Characters Out. The total number of characters transmitted on this channel since it entered Data State. Applicable controllers: CONS, IP, SDLC, TIP, LAN, TIPX, ILAN, XLAN, QLLC, HDLC, X25, DLC, TLAN, NFRM VFRM, XFRM, PPP, ESIS, IPX and ROUT')
chanStatTxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTxWindow.setReference('CONS ILAN XLAN HDLC X25 NFRM VFRM XFRM ')
if mibBuilder.loadTexts: chanStatTxWindow.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatTxWindow.setDescription('Tx Window. The Level 3 Transmit Window size. Applicable controllers: CONS, ILAN, XLAN, HDLC, X25, NFRM VFRM and XFRM')
chanStatRxWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatRxWindow.setReference('CONS ILAN XLAN HDLC X25 NFRM VFRM XFRM ')
if mibBuilder.loadTexts: chanStatRxWindow.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatRxWindow.setDescription('Rx Window. The Level 3 Receive Window size. Applicable controllers: CONS, ILAN, XLAN, HDLC, X25, NFRM VFRM and XFRM')
chanStatTxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTxSize.setReference('CONS ILAN XLAN HDLC X25 NFRM VFRM XFRM ')
if mibBuilder.loadTexts: chanStatTxSize.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatTxSize.setDescription('Tx Size. The maximum size for outgoing packets. Applicable controllers: CONS, ILAN, XLAN, HDLC, X25, NFRM VFRM and XFRM')
chanStatRxSize = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatRxSize.setReference('CONS ILAN XLAN HDLC X25 NFRM VFRM XFRM ')
if mibBuilder.loadTexts: chanStatRxSize.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatRxSize.setDescription('Rx Size. The maximum acceptable size for incoming packets. Applicable controllers: CONS, ILAN, XLAN, HDLC, X25, NFRM VFRM and XFRM')
chanStatCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatCause.setReference('CONS QLLC XLAN HDLC X25 NFRM VFRM XFRM SDLC DLC')
if mibBuilder.loadTexts: chanStatCause.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatCause.setDescription('Cause. The value of the cause code in the last Clear Packet received or transmitted (decimal). Applicable controllers: CONS, QLLC, XLAN, HDLC, X25, NFRM VFRM, SDLC, DLC and XFRM')
chanStatDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDiagnostic.setReference('CONS QLLC XLAN HDLC X25 NFRM VFRM XFRM SDLC DLC')
if mibBuilder.loadTexts: chanStatDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatDiagnostic.setDescription('Diagnostic. The value of the diagnostic code in the last Clear Packet received or transmitted (decimal). Applicable controllers: CONS, QLLC, XLAN, HDLC, X25, NFRM VFRM, SDLC, DLC and XFRM')
chanStatResetCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatResetCause.setReference('CONS QLLC XLAN HDLC X25 NFRM VFRM XFRM SDLC DLC')
if mibBuilder.loadTexts: chanStatResetCause.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatResetCause.setDescription('Reset Cause. The value of the last reset code in the last RESET packet transmitted. Applicable controllers: CONS, QLLC, XLAN, HDLC, X25, NFRM VFRM, SDLC, DLC and XFRM')
chanStatResetDiagnostic = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatResetDiagnostic.setReference('CONS QLLC XLAN HDLC X25 NFRM VFRM XFRM SDLC DLC')
if mibBuilder.loadTexts: chanStatResetDiagnostic.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatResetDiagnostic.setDescription('Reset Diagnostic. The value of the last diagnostic code in the last RESET packet transmitted. Applicable controllers: CONS, QLLC, XLAN, HDLC, X25, NFRM VFRM, SDLC, DLC and XFRM')
chanStatResetCauseReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatResetCauseReceived.setReference('CONS QLLC XLAN HDLC X25 NFRM VFRM XFRM SDLC DLC')
if mibBuilder.loadTexts: chanStatResetCauseReceived.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatResetCauseReceived.setDescription('Reset Cause Received. The value of the last reset code in the last RESET packet received. Applicable controllers: CONS, QLLC, XLAN, HDLC, X25, NFRM VFRM, SDLC, DLC and XFRM')
chanStatResetDiagReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatResetDiagReceived.setReference('CONS QLLC XLAN HDLC X25 NFRM VFRM XFRM SDLC DLC')
if mibBuilder.loadTexts: chanStatResetDiagReceived.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatResetDiagReceived.setDescription('Reset Diagnostic Received. The value of the last diagnostic code in the last RESET packet received. Applicable controllers: CONS, QLLC, XLAN, HDLC, X25, NFRM VFRM, SDLC, DLC and XFRM')
chanStatLevel3State = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 7, 9, 11, 13))).clone(namedValues=NamedValues(("disc", 1), ("rest", 3), ("call", 5), ("data", 7), ("cls", 9), ("clr", 11), ("reset", 13)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatLevel3State.setReference('CONS XLAN HDLC X25 NFRM VFRM XFRM')
if mibBuilder.loadTexts: chanStatLevel3State.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatLevel3State.setDescription('Level 3 State. The level 3 status of the channel. Applicable controllers: CONS, XLAN, HDLC, X25, NFRM VFRM and XFRM')
chanStatCallPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatCallPriority.setReference('CONS XLAN HDLC X25 NFRM VFRM XFRM')
if mibBuilder.loadTexts: chanStatCallPriority.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatCallPriority.setDescription('Call Priority. Call and Resource priorities are used primarily for providing alternate routing. For a call to succeed the Call Priority on the incoming channel must be greater than or equal to the Resource Priority on the outgoing channel. Applicable controllers: CONS, XLAN, HDLC, X25, NFRM VFRM and XFRM')
chanStatResourcePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatResourcePriority.setReference('CONS XLAN HDLC X25 NFRM VFRM XFRM')
if mibBuilder.loadTexts: chanStatResourcePriority.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatResourcePriority.setDescription('Resource Priority See chanCallPriority above. Applicable controllers: CONS, XLAN, HDLC, X25, NFRM VFRM and XFRM')
chanStatPadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 17, 33))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2), ("rev", 3), ("prof", 5), ("mask", 17), ("x28", 33)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPadEnable.setReference('CONS XLAN HDLC X25 NFRM VFRM XFRM')
if mibBuilder.loadTexts: chanStatPadEnable.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatPadEnable.setDescription('PAD Enable. The value of this statistic reflects the setting as configured on the channel. Applicable controllers: CONS, XLAN, HDLC, X25, NFRM VFRM and XFRM')
chanStatPortMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 129, 137))).clone(namedValues=NamedValues(("no", 1), ("srce", 2), ("dest", 129), ("wild", 137)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPortMatch.setReference('IP LAN TLAN ESIS IPX TIPX TIP')
if mibBuilder.loadTexts: chanStatPortMatch.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatPortMatch.setDescription('Port Match. The TCP port that is connected Applicable controllers: IP, LAN, TLAN, ESIS, IPX, TIPX, and TIP')
chanStatPrimaryStation = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 28), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPrimaryStation.setReference('SDLC QLLC DLC')
if mibBuilder.loadTexts: chanStatPrimaryStation.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatPrimaryStation.setDescription('Primary Station. Determines whether the MegaPAC port is functioning as a Primary or Secondary SDLC station. Applicable controllers: QLLC, SDLC and DLC')
chanStatSDLCState = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 29), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 7, 9))).clone(namedValues=NamedValues(("idle", 1), ("snrm", 3), ("active", 5), ("poll", 7), ("disc", 9)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatSDLCState.setReference('SDLC QLLC DLC')
if mibBuilder.loadTexts: chanStatSDLCState.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatSDLCState.setDescription("SDLC State. The State of the SDLC connection, may be one of the following: State Description ACTIVE The SNRM and UA commands have been sent successfully. If primary, the P-Bit has not been sent (i.e. has not been polled). If secondary, the P-Bit has not been received (has got F-Bit and not been polled again). DISC Primary station only. Either a 'STOP' command has been issued for the port, or a QDISC command has been received from the network. The MegaPAC will be sending an SDLC DISC command with the P-Bit set. POLL If primary, the MegaPAC has sent a frame with the P-Bit (has polled). If secondary, the MegaPAC has received the P-Bit (has been polled). SNRM Only for primary stations. The MegaPAC has sent a SNRM, but has not received a UA. Applicable controllers: QLLC, SDLC and DLC")
chanStatQLLCState = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 30), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 9, 13, 17, 21))).clone(namedValues=NamedValues(("inop", 1), ("clsd", 5), ("openi", 9), ("frmr", 13), ("clsi", 17), ("open", 21)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatQLLCState.setReference('SDLC QLLC DLC')
if mibBuilder.loadTexts: chanStatQLLCState.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatQLLCState.setDescription('QLLC State. The State of the QLLC connection, may be one of the following: State Description CLSD The MegaPAC has received a QDISC and sent a QUA on the network. This sets the DISC state on the SDLC port. CLSI The MegaPAC has sent a QDISC and is waiting for a QUA. FRMR The MegaPAC has received a QFRMR from the network. INOP The SVC is down. OPEN The VC is running. QSM and QUA have been sent and received. OPNI The MegaPAC has sent a QSM and is awaiting a QUA. Applicable controllers: QLLC, SDLC and DLC')
chanStatSDLCTransmitState = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 31), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 7, 11))).clone(namedValues=NamedValues(("idle", 1), ("norm", 3), ("rtry", 7), ("rnr", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatSDLCTransmitState.setReference('SDLC QLLC DLC')
if mibBuilder.loadTexts: chanStatSDLCTransmitState.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatSDLCTransmitState.setDescription('SDLC Transmit State. May be one of the following: State Description NORM The MegaPAC is allowed to transmit data. NULL The MegaPAC is not allowed to transmit data. RNR The MegaPAC has received an RNR. RTRY The MegaPAC is in the retransmission state. Applicable controllers: QLLC, SDLC and DLC')
chanStatPolls = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 32), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPolls.setReference('SDLC QLLC DLC')
if mibBuilder.loadTexts: chanStatPolls.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatPolls.setDescription('Polls. The quantity of polls that have occured since the link was established Applicable controllers: QLLC, SDLC and DLC')
chanStatStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 33), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatStationAddress.setReference('SDLC QLLC DLC')
if mibBuilder.loadTexts: chanStatStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatStationAddress.setDescription("Station Address. The IBM PU's address that this channel is using Applicable controllers: QLLC, SDLC and DLC")
chanStatXIDIdentification = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatXIDIdentification.setReference('SDLC QLLC DLC')
if mibBuilder.loadTexts: chanStatXIDIdentification.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatXIDIdentification.setDescription('XID Identification. This field contains the first 64 bytes of the XID that has been used. Applicable controllers: QLLC, SDLC and DLC')
chanStatTries = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 35), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTries.setReference('SDLC QLLC DLC PPP')
if mibBuilder.loadTexts: chanStatTries.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatTries.setDescription('Tries. The number of times the current command has been transmitted. Applicable controllers: QLLC, SDLC, PPP and DLC')
chanStatWindow = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 36), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatWindow.setReference('SDLC QLLC DLC')
if mibBuilder.loadTexts: chanStatWindow.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatWindow.setDescription('KLevel 2. The level 2 window size. Applicable controllers: QLLC, SDLC and DLC')
chanStatLUActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatLUActive.setReference('CLUS')
if mibBuilder.loadTexts: chanStatLUActive.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatLUActive.setDescription('LU Active. If set to YES then the MegaPAC Logical Unit has responded positively to an ACTLU command. If set to NO the MegaPAC has either not received or has responded negatively to an ACTLU command. Applicable controllers: CLUS only')
chanStatBindActive = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 38), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("no", 1), ("yes", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatBindActive.setReference('CLUS')
if mibBuilder.loadTexts: chanStatBindActive.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatBindActive.setDescription('Bind Active. If set to YES then the MegaPAC Logical Unit has responded positively to a BIND command. If set to NO the MegaPAC has either not received or has responded negatively to a BIND command. Applicable controllers: CLUS only')
chanStatLUType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatLUType.setReference('CLUS')
if mibBuilder.loadTexts: chanStatLUType.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatLUType.setDescription('LU Type. The Session type taken from the BIND command. It may be one of the following: Session Type Description 0 User defined applications. 1 Printer. 2 Full Screen 3270 applications. 3 Older type printers. Applicable controllers: CLUS only')
chanStatBreaksReceived = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 40), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatBreaksReceived.setReference('TERM')
if mibBuilder.loadTexts: chanStatBreaksReceived.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatBreaksReceived.setDescription('Breaks Rx The number of Break characters received from the terminal. Applicable controllers: TERM only')
chanStatFramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 41), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatFramingErrors.setReference('TERM')
if mibBuilder.loadTexts: chanStatFramingErrors.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatFramingErrors.setDescription("Framing Errors. The number of characters received with no stop bit appended. The MegaPAC substitutes a '#' character in place of each framing error. Applicable controllers: TERM only")
chanStatInputOverruns = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 42), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatInputOverruns.setReference('TERM')
if mibBuilder.loadTexts: chanStatInputOverruns.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatInputOverruns.setDescription('Input Overruns. The number of times that data has been discarded due to a lack of receive buffers. Applicable controllers: TERM only')
chanStatParityErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 43), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatParityErrors.setReference('TERM')
if mibBuilder.loadTexts: chanStatParityErrors.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatParityErrors.setDescription('TParity Errors. he number of parity errors received on this channel. Applicable controllers: TERM only')
chanStatTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 44), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 225, 209, 999, 177, 161, 129, 113, 97, 81, 65, 41))).clone(namedValues=NamedValues(("asyn", 2), ("sync", 3), ("hp", 225), ("x28", 209), ("x28f", 999), ("ansi", 177), ("ext-ansi", 161), ("vpad", 129), ("mtrm", 113), ("slip", 97), ("buf", 81), ("tpad", 65), ("vt200", 41)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTerminalType.setReference('TERM')
if mibBuilder.loadTexts: chanStatTerminalType.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatTerminalType.setDescription('Terminal Type. The type of emulation to be applied to the TERM controller, it may be one or more of the following: Type comment ASYN ASCII data support SYNC Bi-sync data support MINI Minitel terminal support HP H.P ENQ / ACK async protocol support X28 X28 command syntax (English) X28F X28 command syntax (French) ANSI Async ASCII Terminal support VPAD Viewdata PAD Emulation support MTRM MegaTerm PC Emulation support BUF Used for Buffer PVC call set-ups TPAD ACAB30 transaction card terminal support VT22 Async VT220Terminal support')
chanStatCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 4, 2, 33, 17, 65, 66, 10, 74, 81, 25, 89, 97))).clone(namedValues=NamedValues(("none", 1), ("osi", 5), ("queu", 4), ("call", 2), ("svc", 33), ("out", 17), ("stat", 65), ("call-stat", 66), ("call-pvc", 10), ("call-pvc-stat", 74), ("out-stat", 81), ("out-pvc", 25), ("out-pvc-stat", 89), ("svc-stat", 97)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatCircuitType.setReference('TERM')
if mibBuilder.loadTexts: chanStatCircuitType.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatCircuitType.setDescription('Circuit Type. The type of circuit used on this channel, it may be one or more of the following:')
chanStatOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 9, 17, 65, 129, 257, 513, 1025, 2049, 4097, 8193, 16385, 32769))).clone(namedValues=NamedValues(("none", 1), ("rts", 2), ("idle", 3), ("busy", 5), ("hold", 9), ("nbrk", 17), ("arps", 65), ("iso", 129), ("pass", 257), ("bill", 513), ("msgs", 1025), ("gate", 2049), ("name", 4097), ("talk", 8193), ("x28", 16385), ("supr", 32769)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatOptions.setReference('TERM')
if mibBuilder.loadTexts: chanStatOptions.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatOptions.setDescription('The option(s) which have been envoked on this channel, one or more of:')
chanStatBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatBuffers.setReference('TERM')
if mibBuilder.loadTexts: chanStatBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatBuffers.setDescription('Buffers. The number of data buffers to be used as a threshold value before flow control to the terminal is invoked.')
chanStatDiscMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 48), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDiscMode.setReference('TERM')
if mibBuilder.loadTexts: chanStatDiscMode.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatDiscMode.setDescription('Disc mode. Specifies the call disconnect character that may be applied having established a route via the presentation service.')
chanStatMenuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 49), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatMenuNumber.setReference('TERM')
if mibBuilder.loadTexts: chanStatMenuNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatMenuNumber.setDescription('Menu Number. Specifies which menu will be displayed to the user by the presentation service.')
chanStatHelpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 50), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatHelpNumber.setReference('TERM')
if mibBuilder.loadTexts: chanStatHelpNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatHelpNumber.setDescription('Help Number. Specifies which help menu will be displayed to the user by the presentation service.')
chanStatNewsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 51), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatNewsNumber.setReference('TERM')
if mibBuilder.loadTexts: chanStatNewsNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatNewsNumber.setDescription('News Number. The Menu number that will be displayed if an outgoing resource is unavailable.')
chanStatPadRecall = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 52), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPadRecall.setReference('TERM')
if mibBuilder.loadTexts: chanStatPadRecall.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatPadRecall.setDescription('Pad Recall. This parameter allows the user to escape from the data transfer state to the PAD command state. The permitted values are: 0 No PAD recall 1 Escape character is ^P 2 - 126 The decimal value specified is the escape character')
chanStatEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 53), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("controlled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatEcho.setReference('TERM')
if mibBuilder.loadTexts: chanStatEcho.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatEcho.setDescription("Echo. Determines whether 'echo' is enabled or disabled. If set to controlled, the echo facility is controlled by the operator.")
chanStatDataForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 54), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDataForwarding.setReference('TERM')
if mibBuilder.loadTexts: chanStatDataForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatDataForwarding.setDescription('Data Forwarding. This parameter controls which character or characters cause the accumulated data to be forwarded. The possible values may be added together to forward on one of a number of conditions. The allowable values are: 0 Forward only on buffer full. 128 Forward on graphics characters. 64 Forward on all characters in columns 0 and 1 of the International Alphabet No. 5. 1 Forward on A-Z, a-z and 0-9. 2 Forward on Carriage Return. 4 Forward on ESC, BEL, ENQ, ACK. 8 Forward on DEL, CAN, DC2. 16 Forward on EXT, EOT. 32 Forward on HT, LF, VT, FF.')
chanStatDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 55), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDelay.setReference('TERM')
if mibBuilder.loadTexts: chanStatDelay.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatDelay.setDescription('Delay. Specifies the idle time in tenths of a second, allowable between successive characters before the accumulated data is forwarded. A value of 0 disables the timeout facility.')
chanStatDRI = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 129, 3, 1, 33, 65))).clone(namedValues=NamedValues(("enabled", 2), ("cts", 129), ("init-enable", 3), ("disabled", 1), ("rts", 33), ("init", 65)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDRI.setReference('TERM')
if mibBuilder.loadTexts: chanStatDRI.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatDRI.setDescription('DRI. Flow control of terminal by the MegaPAC. Valid settings are: enabled MegaPAC flow controls terminal using XON/XOFF. cts MegaPAC flow controls terminal using CTS. init+enable MegaPAC sends XON automatically on initialisation. disable No flow control.')
chanStatPadSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 57), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPadSignals.setReference('TERM')
if mibBuilder.loadTexts: chanStatPadSignals.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatPadSignals.setDescription('Pad Signals. Enable X.28 prompts and/or messages to be displayed on the users terminal.')
chanStatBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 58), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatBreak.setReference('TERM')
if mibBuilder.loadTexts: chanStatBreak.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatBreak.setDescription('Break. The Action the MegaPAC will take on receipt of a Break Signal. The valid values are: 0 When the MegaPAC receives a Break Signal from the terminal no action is taken. 1 When the MegaPAC receives a Break Signal from the terminal it will transmit an INTERRUPT packet. 2 When the MegaPAC receives a Break Signal from the terminal it will transmit an RESET packet. 5 When the MegaPAC receives a Break Signal from the terminal it will transmit an INTERRUPT packet and an indication of Break PAD message. 8 When the MegaPAC receives a Break Signal from the terminal it will escape from data transfer state. 21 When the MegaPAC receives a Break Signal from the terminal it will transmit an INTERRUPT packet and an indication of Break PAD message, while setting (X3) parameter (8) to the value 1 (discard any data received from the network).')
chanStatPadding = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 59), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPadding.setReference('TERM')
if mibBuilder.loadTexts: chanStatPadding.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatPadding.setDescription('Padding. The number of NULL characters inserted after a carriage return.')
chanStatFold = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 60), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatFold.setReference('TERM')
if mibBuilder.loadTexts: chanStatFold.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatFold.setDescription('Fold The number of characters output before line folding occurs. Setting to 0 disables line folding.')
chanStatDRO = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 61), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 129, 1, 65))).clone(namedValues=NamedValues(("enabled", 2), ("cts", 129), ("disabled", 1), ("init", 65)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDRO.setReference('TERM')
if mibBuilder.loadTexts: chanStatDRO.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatDRO.setDescription('Data Restraint Out.')
chanStatLFI = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 62), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatLFI.setReference('TERM')
if mibBuilder.loadTexts: chanStatLFI.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatLFI.setDescription('LFI. This parameter controls linefeed insertion after a carriage return. The valid seetings are: 0 Line feed insertion disabled. 1 A linefeed is inserted after a carriage return, in the data forwarded to the terminal. 4 A linefeed is sent to the terminal after echo of a carriage return to the terminal. 5 As defined by values 1 + 4. 6 Linefeed inserted after carriage return from terminal and each carriage return echoed to the terminal. 7 As defined by values 1 + 6.')
chanStatLFPad = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 63), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatLFPad.setReference('TERM')
if mibBuilder.loadTexts: chanStatLFPad.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatLFPad.setDescription('LFPad. The number of NULL padding characters sent to a device following a linefeed character.')
chanStatEdit = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 64), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatEdit.setReference('TERM')
if mibBuilder.loadTexts: chanStatEdit.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatEdit.setDescription('Edit. Controls editing of text in data transfer state.')
chanStatCharDel = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatCharDel.setReference('TERM')
if mibBuilder.loadTexts: chanStatCharDel.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatCharDel.setDescription('Char Del. The keystroke used for deleting a character.')
chanStatBufferDel = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatBufferDel.setReference('TERM')
if mibBuilder.loadTexts: chanStatBufferDel.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatBufferDel.setDescription('Buffer Del. The keystroke used for deleting the buffer.')
chanStatDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDisp.setReference('TERM')
if mibBuilder.loadTexts: chanStatDisp.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatDisp.setDescription('Disp The keystroke used to redisplay the data in the buffer.')
chanStatEditServiceSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatEditServiceSignals.setReference('TERM')
if mibBuilder.loadTexts: chanStatEditServiceSignals.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatEditServiceSignals.setDescription("Edit Service Signals. This parameter enables the user to edit the PAD service signals (echoing). The valid settings are: 0 No editing PAD service signals are echoed. 1 A '\\' will be echoed for each character deleted. 2 A 'BS' character will be echoed for each character deleted. 8 and 32-126 Specifies the decimal value of the ASCII character to be echoed for each character deleted.")
chanStatEchoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 69), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatEchoMask.setReference('TERM')
if mibBuilder.loadTexts: chanStatEchoMask.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatEchoMask.setDescription('Echo Mask. This parameter controls the characters which should not be echoed. The valid settings are: 0 All characters should be echoed to the terminal. 1 do not echo carriage return. 2 do not echo linefeed. 4 do not echo VT, HT and FF characters. 8 do not echo BEL and BS character. 16 do not echo ESC and ENQ. 32 do not echo ACK, NAK, STX, SOH, EOT, ETB or ETX. 64 do not echo editing characters as defined by parameters 16, 17 and 18. 128 do not echo other control characters and DEL.')
chanStatParityTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 70), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatParityTreatment.setReference('TERM')
if mibBuilder.loadTexts: chanStatParityTreatment.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatParityTreatment.setDescription('Parity Treatment. Determines the parity generation and checking performed valid settings are: 0 No parity generation or checking. 1 Check parity. 2 Generate parity. 3 Check and generate parity.')
chanStatPageWait = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 71), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatPageWait.setReference('TERM')
if mibBuilder.loadTexts: chanStatPageWait.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatPageWait.setDescription('PageWait. Specifies the number of lines to be transmitted, after which the MegaPAC will wait until instructed by the user to continue sending data (by entering <CTRL >Q). A value of 0 disables the page wait facility.')
chanStatForce = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatForce.setReference('TERM')
if mibBuilder.loadTexts: chanStatForce.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatForce.setDescription('Forward Char. The ASCII character which will force data forwarding, 0 disables forced data forwarding.')
chanStatBreakChar = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 73), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatBreakChar.setReference('TERM')
if mibBuilder.loadTexts: chanStatBreakChar.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatBreakChar.setDescription('Break Char. The ASCII character in decimal which is used to simulate a BREAK signal.')
chanStatNetworkParity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 74), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 0))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("mark", 4), ("spac", 8), ("none", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatNetworkParity.setReference('TERM')
if mibBuilder.loadTexts: chanStatNetworkParity.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatNetworkParity.setDescription('Network Parity. With the Terminal type set to ASYN+X28, the parity an be forced onto the network side by selecting the approriate value.')
chanStatEscapeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 75), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatEscapeDelay.setReference('TERM')
if mibBuilder.loadTexts: chanStatEscapeDelay.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatEscapeDelay.setDescription('Escape Delay. Specifies the time in tenths of a second, that after receiving an ESC character, all characters are buffered before being forwarded. During this time the ECHO facility is turned off, and is only restored when the delay timer has expired.')
chanStatTransportLevelState = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 76), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 5, 7, 9, 11))).clone(namedValues=NamedValues(("disc", 1), ("call", 3), ("init", 5), ("data", 7), ("cls", 9), ("clr", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatTransportLevelState.setReference('ILAN')
if mibBuilder.loadTexts: chanStatTransportLevelState.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatTransportLevelState.setDescription('Transport Level State. Transport Class 4 session statistics')
chanStatDestTsap = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 77), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatDestTsap.setReference('ILAN')
if mibBuilder.loadTexts: chanStatDestTsap.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatDestTsap.setDescription('Destination TSAP The destination Transport Service Access Point. Applicable controllers: ILAN only')
chanStatLinkState = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 78), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 13, 11, 9, 7, 5, 3, 1))).clone(namedValues=NamedValues(("open", 15), ("acks", 13), ("ackr", 11), ("reqs", 9), ("stpi", 7), ("clsi", 5), ("stop", 3), ("clos", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatLinkState.setReference('PPP')
if mibBuilder.loadTexts: chanStatLinkState.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatLinkState.setDescription('Link State. The current state of the Link Control Protocol Applicable controllers: PPP only')
chanStatProtocolState = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 79), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(15, 13, 11, 9, 7, 5, 3, 1))).clone(namedValues=NamedValues(("open", 15), ("acks", 13), ("ackr", 11), ("reqs", 9), ("stpi", 7), ("clsi", 5), ("stop", 3), ("clos", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatProtocolState.setReference('PPP')
if mibBuilder.loadTexts: chanStatProtocolState.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatProtocolState.setDescription('Protocol State. The current state of the Protocol Control Protocol Applicable controllers: PPP only')
chanStatProtocol = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 80), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(32802, 32812))).clone(namedValues=NamedValues(("ip", 32802), ("ipx", 32812)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatProtocol.setReference('PPP')
if mibBuilder.loadTexts: chanStatProtocol.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatProtocol.setDescription('Protocol Displays the protocol configured for the channel Applicable controllers: PPP only')
chanStatIdentity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 81), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatIdentity.setReference('PPP')
if mibBuilder.loadTexts: chanStatIdentity.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatIdentity.setDescription('Identity. The current value of the IDENTITY filed being put into the Link Control Protocol or Protocol Control Protocol commands. Applicable controllers: PPP only')
chanStatFrameRelayWait = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 2, 1, 82), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanStatFrameRelayWait.setReference('NFRM')
if mibBuilder.loadTexts: chanStatFrameRelayWait.setStatus('mandatory')
if mibBuilder.loadTexts: chanStatFrameRelayWait.setDescription('FrameRelayWait. The current value of the FRMWAIBUF counter. This counter is incremented each time a buffer is delayed because of the channel priority (DLCI currently occupied by data from channels with higher priority). Applicable controllers: NFRM only')
chanParamTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3), )
if mibBuilder.loadTexts: chanParamTable.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamTable.setDescription('A table of channels associated with this Level 2 controller.')
chanParamEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1), ).setIndexNames((0, "SAT-MEGA-MIB", "chanParamIndex"))
if mibBuilder.loadTexts: chanParamEntry.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamEntry.setDescription('An individual Channel.')
chanParamIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: chanParamIndex.setReference('ALL')
if mibBuilder.loadTexts: chanParamIndex.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamIndex.setDescription('Index. The position of this channel in the controller channel Table. Applicable: All controller types')
chanParamName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamName.setReference('ALL')
if mibBuilder.loadTexts: chanParamName.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamName.setDescription('Name. A user defined name for routing calls to this channel. Applicable: All controller types')
chanParamDRCMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDRCMask.setReference('ALL')
if mibBuilder.loadTexts: chanParamDRCMask.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamDRCMask.setDescription('DRC Mask. A four character string used to force expicit routing to the named resource. Applicable: All controller types')
chanParamTerminalType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3, 225, 209, 999, 177, 161, 129, 113, 97, 81, 65, 41))).clone(namedValues=NamedValues(("asyn", 2), ("sync", 3), ("hp", 225), ("x28", 209), ("x28f", 999), ("ansi", 177), ("ext-ansi", 161), ("vpad", 129), ("mtrm", 113), ("slip", 97), ("buf", 81), ("tpad", 65), ("vt200", 41)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamTerminalType.setReference('CLUS CONS IP TIP TERM X25 XFRM XLAN DLC ILAN SDLC QLLC')
if mibBuilder.loadTexts: chanParamTerminalType.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamTerminalType.setDescription('Terminal Type. If the channel is to perform terminal emulation, then the setting defined will be specific to the users terminal envoking emulation. Applicable: X25, CONS, HDLC, ILAN, XLAN, SDLC, QLLC, TERM, IP, DLC and CLUS controller types')
chanParamCircuitType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 5, 4, 2, 33, 17, 65, 66, 10, 74, 81, 25, 89, 97))).clone(namedValues=NamedValues(("none", 1), ("osi", 5), ("queu", 4), ("call", 2), ("svc", 33), ("out", 17), ("stat", 65), ("call-stat", 66), ("call-pvc", 10), ("call-pvc-stat", 74), ("out-stat", 81), ("out-pvc", 25), ("out-pvc-stat", 89), ("svc-stat", 97)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamCircuitType.setReference('CONS DLC ESIS HDLC ILAN IP TIP IPX TIPX LAN TLAN MAP MULT NFRM VFRM NMS PPP QLLC SDLC ROUT SRU TERM V25B X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamCircuitType.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamCircuitType.setDescription('Circuit Type. The type of circuit used on this channel Applicable: X25, CONS, HDLC, ILAN, XLAN, SDLC, QLLC, TERM, IP, LAN, V25B, NMS, MULT, MAP, TLAN, DLC and SRU controller types')
chanParamOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 9, 17, 65, 33, 129, 257, 513, 1025, 2049, 4097, 8193, 16385, 32769, 5121, 13313, 1281, 3329, 5377, 13569, 15617))).clone(namedValues=NamedValues(("none", 1), ("rts", 2), ("idle", 3), ("busy", 5), ("hold", 9), ("nbrk", 17), ("arps", 65), ("diag", 33), ("iso", 129), ("pass", 257), ("bill", 513), ("msgs", 1025), ("gate", 2049), ("name", 4097), ("talk", 8193), ("x28", 16385), ("supr", 32769), ("msgs-name", 5121), ("msgs-name-talk", 13313), ("msgs-pass", 1281), ("msgs-pass-gate", 3329), ("msgs-name-pass", 5377), ("msgs-name-pass-talk", 13569), ("msgs-name-pass-talk-gate", 15617)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamOptions.setReference('CLUS CONS IP TIP PPP ROUT TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamOptions.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamOptions.setDescription('Options. A range of channel options, these options may be specified individually or added together. Applicable: X25, CONS, HDLC, ILAN, XLAN, SDLC, QLLC, TERM, IP, LAN, V25, TLAN, DLC and CLUS controller types')
chanParamBuffers = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 240))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamBuffers.setReference('ALL')
if mibBuilder.loadTexts: chanParamBuffers.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamBuffers.setDescription('Buffers. The number of system buffers allocated to this channel for incoming calls. Applicable: X25, CONS, HDLC, ILAN, XLAN, SDLC, QLLC, TERM, IP, LAN, V25B, NMS, MULT, MAP, TLAN, DLC and SRU controller types')
chanParamDiscMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDiscMode.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamDiscMode.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamDiscMode.setDescription('DISC Mode. The number of the character in decimal which forces disconnection of the call. Applicable: X25, CONS, HDLC, ILAN, XLAN, SDLC, QLLC TERM, DLC and IP controller types')
chanParamMenuNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamMenuNumber.setReference('CLUS CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamMenuNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamMenuNumber.setDescription('Menu Number. Specifies which menu will be displayed to the user by the presentation service. Applicable: X25, CONS, HDLC, ILAN, XLAN, SDLC, QLLC TERM, DLC, IP and CLUS controller types')
chanParamHelpNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamHelpNumber.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamHelpNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamHelpNumber.setDescription('Help Number. Specifies which help screen will be displayed to the user by the presentation service. Applicable: X25, CONS, HDLC, ILAN, XLAN, SDLC, QLLC TERM, DLC and IP controller types')
chanParamNewsNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamNewsNumber.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamNewsNumber.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamNewsNumber.setDescription('News Number. The number of the menu which will be displayed if an outgoing channel is unavailable. Applicable: X25, CONS, HDLC, ILAN, XLAN, SDLC, QLLC TERM, DLC and IP controller types')
chanParamCallPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamCallPriority.setReference('CONS DLC ESIS HDLC ILAN IP TIP IPX TIPX LAN TLAN MAP MULT NFRM VFRM NMS QLLC SDLC ROUT SRU TERM V25B X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamCallPriority.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamCallPriority.setDescription('Call Priority. Call and Resource priorities are used primarily for providing alternate routing. For a call to succeed the Call Priority on the incoming channel must be greater than or equal to the Resource Priority on the outgoing channel. Applicable: X25, HDLC, CONS, XLAN, TERM, IP, LAN, NMS, V25B, MULT, MAP, TLAN, DLC and SRU controller types')
chanParamResourcePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamResourcePriority.setReference('CONS DLC ESIS HDLC ILAN IP TIP IPX TIPX LAN TLAN MAP MULT NFRM VFRM NMS QLLC SDLC ROUT SRU TERM V25B X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamResourcePriority.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamResourcePriority.setDescription('Resource Priority. Call and Resource priorities are used primarily for providing alternate routing. For a call to succeed the Call Priority on the incoming channel must be greater than or equal to the Resource Priority on the outgoing channel. Applicable: X25, HDLC, CONS, XLAN, TERM, IP, LAN, NMS, V25B, MULT, MAP, TLAN, DLC and SRU controller types')
chanParamPadEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 34))).clone(namedValues=NamedValues(("disable", 1), ("enable", 2), ("rev", 3), ("enable-rev", 4), ("prof", 5), ("enable-prof", 6), ("mask", 7), ("enable-mask", 8), ("x28", 34)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPadEnable.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamPadEnable.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamPadEnable.setDescription("Pad Enable. The effect of the PAD Enable parameters are as follows: enable PAD services enabled. The logical channel will respond to X.29 packets. enable-rev REVerse PAD enabled. When a call is established to this channel, the MegaPAC will generate an X.29 qualified data packet back to the caller, containing the X.3 operating values specified in the channel's configuration. enable-prof The X.3 profile settings for the channel will be derived by referencing the logical channel's NAME/ parameter to the NAME/ field in the PROF file. The X.3 settings as contained in the PROF file record are then loaded onto the channel. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types")
chanParamPadRecall = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPadRecall.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamPadRecall.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamPadRecall.setDescription('Pad Recall (1). This parameter allows the user to escape from the data transfer state to the PAD command state. The permitted values are: 0 No PAD recall 1 Escape character is ^P 2 - 126 The decimal value specified is the escape character Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamEcho = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2), ("controlled", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamEcho.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamEcho.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamEcho.setDescription("Echo. Determines whether 'echo' is enabled or disabled. If set to controlled, the echo facility is controlled by the operator. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types")
chanParamDataForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDataForwarding.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamDataForwarding.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamDataForwarding.setDescription('Data Forwarding. This parameter controls which character or characters cause the accumulated data to be forwarded. The possible values may be added together to forward on one of a number of conditions. The allowable values are: 0 Forward only on buffer full. 128 Forward on graphics characters. 64 Forward on all characters in columns 0 and 1 of the International Alphabet No. 5. 1 Forward on A-Z, a-z and 0-9. 2 Forward on Carriage Return. 4 Forward on ESC, BEL, ENQ, ACK. 8 Forward on DEL, CAN, DC2. 16 Forward on EXT, EOT. 32 Forward on HT, LF, VT, FF. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDelay.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamDelay.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamDelay.setDescription('Delay. Specifies the idle time in tenths of a second, allowable between successive characters before the accumulated data is forwarded. A value of 0 disables the timeout facility. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamDRI = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 19), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 129, 3, 1, 33, 65))).clone(namedValues=NamedValues(("enabled", 2), ("cts", 129), ("init-enable", 3), ("disabled", 1), ("rts", 33), ("init", 65)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDRI.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamDRI.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamDRI.setDescription('DRI. Flow control of terminal by the MegaPAC. Valid settings are: enabled MegaPAC flow controls terminal using XON/XOFF. cts MegaPAC flow controls terminal using CTS. init+enable MegaPAC sends XON automatically on initialisation. disable No flow control. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamPadSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPadSignals.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamPadSignals.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamPadSignals.setDescription('Pad Signals. Enable X.28 prompts and/or messages to be displayed on the users terminal. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamBreak = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamBreak.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamBreak.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamBreak.setDescription('Break. The Action the MegaPAC will take on receipt of a Break Signal. The valid values are: 0 When the MegaPAC receives a Break Signal from the terminal no action is taken. 1 When the MegaPAC receives a Break Signal from the terminal it will transmit an INTERRUPT packet. 2 When the MegaPAC receives a Break Signal from the terminal it will transmit an RESET packet. 5 When the MegaPAC receives a Break Signal from the terminal it will transmit an INTERRUPT packet and an indication of Break PAD message. 8 When the MegaPAC receives a Break Signal from the terminal it will escape from data transfer state. 21 When the MegaPAC receives a Break Signal from the terminal it will transmit an INTERRUPT packet and an indication of Break PAD message, while setting (X3) parameter (8) to the value 1 (discard any data received from the network). Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamPadding = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPadding.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamPadding.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamPadding.setDescription('Padding. The number of NULL characters inserted after a carriage return. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamFold = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamFold.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamFold.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamFold.setDescription('Fold. The number of characters output before line folding occurs. Setting to 0 disables line folding. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamDRO = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 129, 1, 65))).clone(namedValues=NamedValues(("enabled", 2), ("cts", 129), ("disabled", 1), ("init", 65)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDRO.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamDRO.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamDRO.setDescription('Data Restraint Out. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamLFI = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 25), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamLFI.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamLFI.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamLFI.setDescription('LFI. This parameter controls linefeed insertion after a carriage return. The valid settings are: 0 Line feed insertion disabled. 1 A linefeed is inserted after a carriage return, in the data forwarded to the terminal. 4 A linefeed is sent to the terminal after echo of a carriage return to the terminal. 5 As defined by values 1 + 4. 6 Linefeed inserted after carriage return from terminal and each carriage return echoed to the terminal. 7 As defined by values 1 + 6. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamLFPad = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 26), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamLFPad.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamLFPad.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamLFPad.setDescription('LFPad. The number of NULL padding characters sent to a device following a linefeed character. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamEdit = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 27), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 1))).clone(namedValues=NamedValues(("enable", 2), ("disable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamEdit.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamEdit.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamEdit.setDescription('Edit. Controls editing of text in data transfer state. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamCharDel = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 28), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamCharDel.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamCharDel.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamCharDel.setDescription('Char Delete. The keystroke used for deleting a character. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamBufferDel = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 29), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamBufferDel.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamBufferDel.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamBufferDel.setDescription('Buffer Delete. The keystroke used for deleting the buffer. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamDisp = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 30), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 127))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamDisp.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamDisp.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamDisp.setDescription('Disp. The keystroke used to redisplay the data in the buffer. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamEditServiceSignals = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 31), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 126))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamEditServiceSignals.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamEditServiceSignals.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamEditServiceSignals.setDescription("Edit Service Signals. This parameter enables the user to edit the PAD service signals (echoing). The valid settings are: 0 No editing PAD service signals are echoed. 1 A '\\' will be echoed for each character deleted. 2 A 'BS' character will be echoed for each character deleted. 8 and 32-126 Specifies the decimal value of the ASCII character to be echoed for each character deleted. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types")
chanParamEchoMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamEchoMask.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamEchoMask.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamEchoMask.setDescription('Echo Mask. This parameter controls the characters which should not be echoed. The valid settings are: 0 All characters should be echoed to the terminal. 1 do not echo carriage return. 2 do not echo linefeed. 4 do not echo VT, HT and FF characters. 8 do not echo BEL and BS character. 16 do not echo ESC and ENQ. 32 do not echo ACK, NAK, STX, SOH, EOT, ETB or ETX. 64 do not echo editing characters as defined by parameters 16, 17 and 18. 128 do not echo other control characters and DEL. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamParityTreatment = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 33), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 3))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamParityTreatment.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamParityTreatment.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamParityTreatment.setDescription('Parity Treatment. Determines the parity generation and checking performed valid settings are: 0 No parity generation or checking. 1 Check parity. 2 Generate parity. 3 Check and generate parity. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamPageWait = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPageWait.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamPageWait.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamPageWait.setDescription('Page Wait. Specifies the number of lines to be transmitted, after which the MegaPAC will wait until instructed by the user to continue sending data (by entering <CTRL >Q). A value of 0 disables the page wait facility. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamForce = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamForce.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamForce.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamForce.setDescription('Force. The ASCII character which will force data forwarding, 0 disables forced data forwarding. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamBreakChar = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 36), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamBreakChar.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamBreakChar.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamBreakChar.setDescription('Break Character. The ASCII character in decimal which is used to simulate a BREAK signal. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, IP, DLC and TERM controller types')
chanParamNetworkParity = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 37), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 4, 8, 0))).clone(namedValues=NamedValues(("even", 1), ("odd", 2), ("mark", 4), ("spac", 8), ("none", 0)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamNetworkParity.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamNetworkParity.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamNetworkParity.setDescription('Network Parity. With the Terminal type set to ASYN+X28, the parity can be forced onto the network side by selecting the approriate value. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, DLC and TERM controller types')
chanParamEscapeDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 38), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamEscapeDelay.setReference('CONS IP TIP TERM X25 XFRM XLAN')
if mibBuilder.loadTexts: chanParamEscapeDelay.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamEscapeDelay.setDescription('Escape Delay. Specifies the time in tenths of a second, that after receiving an ESC character, all characters are buffered before being forwarded. During this time the ECHO facility is turned off, and is only restored when the delay timer has expired. Applicable: X25, HDLC, CONS, ILAN, XLAN, SDLC, QLLC, DLC and TERM controller types')
chanParamStationAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 39), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamStationAddress.setReference('SDLC QLLC DLC')
if mibBuilder.loadTexts: chanParamStationAddress.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamStationAddress.setDescription('Station Address. Physical Unit Address of the Cluster Controller. Applicable: SDLC, QLLC and DLC controller types')
chanParamProvideXID = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamProvideXID.setReference('SDLC QLLC DLC')
if mibBuilder.loadTexts: chanParamProvideXID.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamProvideXID.setDescription('Provide XID. ???? Applicable: SDLC, QLLC and DLC controller types')
chanParamMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 5, 9, 17, 32, 33, 65, 81, 97, 129, 193))).clone(namedValues=NamedValues(("none", 1), ("path", 2), ("push", 3), ("pull", 5), ("stop", 9), ("auto", 17), ("auto-pull-path-push-stop", 32), ("sym", 33), ("data", 65), ("wait", 81), ("hub", 97), ("resp", 129), ("sat", 193)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamMode.setReference('MAP MULT NMS SRU V25B')
if mibBuilder.loadTexts: chanParamMode.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamMode.setDescription('Mode. This parameter provides a number of additional connection facilities for channels on virtual controllers. The options available are of an additive nature, the valid options and their integer values are: Option Integer Value DATA ?? RESP ?? SYM ?? AUTO ?? PATH ?? PUSH ?? PULL ?? STOP ?? NONE ?? Applicable: NMS, V25B, MULT, MAP and SRU controller types')
chanParamPortMatch = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 42), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 129, 137))).clone(namedValues=NamedValues(("no", 1), ("source", 2), ("destination", 129), ("wild", 137)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPortMatch.setReference('IP TIP')
if mibBuilder.loadTexts: chanParamPortMatch.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamPortMatch.setDescription('Port Match. This parameter optionally allows the Source and Destination ports to be used in conjunction with the IP address for routing. Applicable: IP controller type only')
chanParamReverseTelnetPort = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamReverseTelnetPort.setReference('IP TIP')
if mibBuilder.loadTexts: chanParamReverseTelnetPort.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamReverseTelnetPort.setDescription("Reverse Telnet Port. The port number which will respond to TELNET open requests. The default value for TELNET ports is '23'. Applicable: IP controller type only")
chanParamBroadcastFilterTimer = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 44), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12000))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamBroadcastFilterTimer.setReference('ESIS IPX TIPX LAN TLAN')
if mibBuilder.loadTexts: chanParamBroadcastFilterTimer.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamBroadcastFilterTimer.setDescription('Broadcast Filter Timer. ????? Applicable: LAN and TLAN controller types')
chanParamInhibitLearning = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 45), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamInhibitLearning.setReference('ESIS IPX TIPX LAN TLAN')
if mibBuilder.loadTexts: chanParamInhibitLearning.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamInhibitLearning.setDescription("Inhibit Learning. This parameter determines whether the 'bridge' will work in Directed or Learning mode. If InhibitLearning is set to 'Yes' then the bridge will only forward frames whose addresses are fixed in the forwarding table. Applicable: LAN and TLAN controller types")
chanParamRetainSession = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 46), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notify", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamRetainSession.setReference('CLUS')
if mibBuilder.loadTexts: chanParamRetainSession.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamRetainSession.setDescription('Retain Session. This parameter determines if and how a session will be cleared down when the call is cleared. The parameter is only applicable to channels (2) to (n). If set to NOTIFY or NO the session will be cleared when the call disconnects , NOTIFY will cause a NOTIFY RU to be sent indicating the disconnection. If this parameter is set to YES then the session will be retained on channel disconnection, this is used to provide a hot key switching facility. Applicable: CLUS controller type only')
chanParamPrinterType = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 47), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ibm", 1), ("none", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPrinterType.setReference('CLUS')
if mibBuilder.loadTexts: chanParamPrinterType.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamPrinterType.setDescription('Printer Type. If set to IBM the logical channel will act as an appication system printer, otherwise it operates in screen emulation mode. Only applicable to channels (2) to (n). Applicable: CLUS controller type only')
chanParamScreenPrinter = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 48), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("yes", 1), ("no", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamScreenPrinter.setReference('CLUS')
if mibBuilder.loadTexts: chanParamScreenPrinter.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamScreenPrinter.setDescription('Screen Printer. If set to YES, screen printer requests are to be processed and sent to this LU address (in this mode, the terminal attaching to this channel MUST have a printer attached). If set to NO, screen printing is supported via the LOCAL PRINTER or the DEFAULT LOCAL PRINTER parameters. Applicable: CLUS controller type only')
chanParamLocalPrinter = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 49), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamLocalPrinter.setReference('CLUS')
if mibBuilder.loadTexts: chanParamLocalPrinter.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamLocalPrinter.setDescription('Local Printer. This parameter specifies the channel to which screen printing should be directed. It takes precedence over the value defined by the DEFAULT LOCAL PRINTER at controller level. This parameter may only be applied to channels (2) to (n). Applicable: CLUS controller type only')
chanParamBnnDsap = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 50), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamBnnDsap.setReference(' NFRM ')
if mibBuilder.loadTexts: chanParamBnnDsap.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamBnnDsap.setDescription('DSAP. The Destination Service Access Point. Applicable: NFRM controller type with SNA protocol encapsulation.')
chanParamBnnSsap = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 254))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamBnnSsap.setReference(' NFRM ')
if mibBuilder.loadTexts: chanParamBnnSsap.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamBnnSsap.setDescription('SSAP. The Source Service Access Point. Applicable: NFRM controller type with SNA protocol encapsulation.')
chanParamBnnPuTyp = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 52), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 130, 131))).clone(namedValues=NamedValues(("none", 0), ("pu2-0", 130), ("pu2-1", 131)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamBnnPuTyp.setReference('NFRM')
if mibBuilder.loadTexts: chanParamBnnPuTyp.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamBnnPuTyp.setDescription('PU TYPE. IBM PU type. Applicable: NFRM controller type with SNA protocol encapsulation.')
chanParamPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 4, 3, 1, 53), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: chanParamPriority.setReference('NFRM')
if mibBuilder.loadTexts: chanParamPriority.setStatus('mandatory')
if mibBuilder.loadTexts: chanParamPriority.setDescription('Channel Priority. The internal priority which will be assigned to the channel. Data from the channel with the highest priority i.e. 1 will overtake data of from less priority channels on the same DLCI. Applicable: NFRM controller type.')
x25FileSize = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25FileSize.setStatus('mandatory')
if mibBuilder.loadTexts: x25FileSize.setDescription('X25 file size. The number of entries configured into the X25 file.')
x25Table = MibTable((1, 3, 6, 1, 4, 1, 1038, 4, 5, 2), )
if mibBuilder.loadTexts: x25Table.setStatus('mandatory')
if mibBuilder.loadTexts: x25Table.setDescription('A table of X.25 routing entries')
x25Entry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 4, 5, 2, 1), ).setIndexNames((0, "SAT-MEGA-MIB", "x25Index"))
if mibBuilder.loadTexts: x25Entry.setStatus('mandatory')
x25Index = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: x25Index.setStatus('mandatory')
if mibBuilder.loadTexts: x25Index.setDescription('Index. The index to an individual X.25 entry')
x25Name = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 5, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Name.setStatus('mandatory')
if mibBuilder.loadTexts: x25Name.setDescription("Name. A 4 character name which is used to match on the 'NAME' parameter of the channel on which a call will be routed over the X.25 network.")
x25AddressGroup = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 5, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25AddressGroup.setStatus('mandatory')
if mibBuilder.loadTexts: x25AddressGroup.setDescription("Addr Grp. An integer used to partition the X.25 routing tables. Any match on a channel name will only take effect if the channel 'AddressGroup' parameter is set to the same value.")
x25Address = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 5, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25Address.setStatus('mandatory')
if mibBuilder.loadTexts: x25Address.setDescription('Address. The numeric address which is used to match on the incoming X.25 address in a call request packet.')
x25UserData = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 5, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 30))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: x25UserData.setStatus('mandatory')
if mibBuilder.loadTexts: x25UserData.setDescription('User Data A text field in which Call User Data or Facilities may be placed. The user data will be inserted into call request packets generated by the MegaPAC.')
nameFileSize = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 6, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: nameFileSize.setDescription('Name File Size. The number of entries configured into the NAME file.')
nameTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 4, 6, 2), )
if mibBuilder.loadTexts: nameTable.setStatus('mandatory')
if mibBuilder.loadTexts: nameTable.setDescription("A table of 'Name' entries.")
nameEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 4, 6, 2, 1), ).setIndexNames((0, "SAT-MEGA-MIB", "nameIndex"))
if mibBuilder.loadTexts: nameEntry.setStatus('mandatory')
nameIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nameIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nameIndex.setDescription('Index. The index into the name table.')
nameName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 6, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameName.setStatus('mandatory')
if mibBuilder.loadTexts: nameName.setDescription('Name. A string of up to 8 characters in length which is typed in by the network user in order to establish a connection to a specific resource.')
nameDRCMask = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 6, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameDRCMask.setStatus('mandatory')
if mibBuilder.loadTexts: nameDRCMask.setDescription('DRC Mask. The four character resource (channel) name to which the call will be directed.')
nameCallPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 6, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameCallPriority.setStatus('mandatory')
if mibBuilder.loadTexts: nameCallPriority.setDescription('Call Priority. The internal call priority which will be assigned to the call.')
nameBilling = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 6, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameBilling.setStatus('mandatory')
if mibBuilder.loadTexts: nameBilling.setDescription('Billing If enabled, statistics relating to the call will be sent to the billing file.')
nameOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 6, 2, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 9, 65, 129, 33, 49))).clone(namedValues=NamedValues(("none", 1), ("iso", 2), ("prof", 5), ("icl7561", 9), ("teln", 65), ("rev-teln", 129), ("ppp", 33), ("ppp-pap", 49)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nameOptions.setStatus('mandatory')
if mibBuilder.loadTexts: nameOptions.setDescription('Options Enables the appropriate terminal emulation options.')
passFileSize = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: passFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: passFileSize.setDescription('Pass File Size. The number of entries configured into the PASSWORD file.')
macFileSize = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: macFileSize.setDescription('Mac File Size. The number of entries configured into the MAC file.')
macTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 4, 8, 2), )
if mibBuilder.loadTexts: macTable.setStatus('mandatory')
if mibBuilder.loadTexts: macTable.setDescription('A table of MAC entries')
macEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 4, 8, 2, 1), ).setIndexNames((0, "SAT-MEGA-MIB", "macIndex"))
if mibBuilder.loadTexts: macEntry.setStatus('mandatory')
macIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 8, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: macIndex.setStatus('mandatory')
if mibBuilder.loadTexts: macIndex.setDescription('Index. An index to an individual entry in the MAC table.')
macName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 8, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macName.setStatus('mandatory')
if mibBuilder.loadTexts: macName.setDescription('Name. The level 2 controller name to which this entry applies.')
macFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 8, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 16386, 16387, 16388, 16389, 16390, 16391, 16392, 32769, 32770, 32771, 32772, 32773, 32774, 32775, 32776, 32777, 32778, 32781, 32782, 32783, 32784, 32786, 32785, 8, 7))).clone(namedValues=NamedValues(("nop", 1), ("cad", 2), ("dad", 3), ("cud", 4), ("else", 5), ("fac", 6), ("inse", 16386), ("dele", 16387), ("copy", 16388), ("posn", 16389), ("mark", 16390), ("data", 16391), ("eof", 16392), ("ibeg", 32769), ("iend", 32770), ("obeg", 32771), ("oend", 32772), ("pu", 32773), ("xid", 32774), ("list", 32775), ("mask", 32776), ("sync", 32777), ("tab", 32778), ("rout", 32781), ("nvmt", 32782), ("add", 32783), ("bar", 32784), ("dhcp", 32786), ("time", 32785), ("dpr", 8), ("cpr", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macFunction.setStatus('mandatory')
if mibBuilder.loadTexts: macFunction.setDescription('Function. The function field determines what action should be taken if their is a match on this entry.')
macOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(99, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 1, 161, 133, 65, 8193, 129))).clone(namedValues=NamedValues(("tlat", 99), ("rej", 2), ("tcal", 3), ("iso", 4), ("cad", 5), ("thru", 6), ("talk", 7), ("bill", 8), ("ccit-1980", 9), ("expe", 10), ("jump", 11), ("copy", 12), ("none", 1), ("wipx", 161), ("sap", 133), ("y13", 65), ("disc", 8193), ("not", 129)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macOptions.setStatus('mandatory')
if mibBuilder.loadTexts: macOptions.setDescription('Options. Specific actions that may be envoked in conjunction with the function field.')
macSelector = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macSelector.setStatus('mandatory')
if mibBuilder.loadTexts: macSelector.setDescription('Selector. This field can contain a string of between 0 and 32 Hexadecimal characters, that must be matched by the Function DAD, CAD, CUD or FAC.')
macGenerator = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 8, 2, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: macGenerator.setStatus('mandatory')
if mibBuilder.loadTexts: macGenerator.setDescription('Generator. This field can contain a string of between 0 and 32 Hexadecimal characters, and can have different purposes depending on the Function or Options fields.')
ilanFileSize = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilanFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: ilanFileSize.setDescription('Ilan File Size. The number of entries configured into the ILAN file.')
ilanTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 4, 9, 2), )
if mibBuilder.loadTexts: ilanTable.setStatus('mandatory')
if mibBuilder.loadTexts: ilanTable.setDescription('A table of ILAN entries')
ilanEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 4, 9, 2, 1), ).setIndexNames((0, "SAT-MEGA-MIB", "ilanIndex"))
if mibBuilder.loadTexts: ilanEntry.setStatus('mandatory')
ilanIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ilanIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ilanIndex.setDescription('Index. An index to an individual entry in the ILAN table.')
ilanName = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 9, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilanName.setStatus('mandatory')
if mibBuilder.loadTexts: ilanName.setDescription('Name. The Resource which this entry applies to.')
ilanOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 9, 2, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 16, 4, 8))).clone(namedValues=NamedValues(("iso", 1), ("expe", 2), ("none", 3), ("y13", 16), ("dbit", 4), ("talk", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilanOptions.setStatus('mandatory')
if mibBuilder.loadTexts: ilanOptions.setDescription('Options ISO Allows transport calls to be set up on the outgoing channel. EXPE Allows expedited data to be sent.')
ilanEthernetAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 9, 2, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(12, 12)).setFixedLength(12)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilanEthernetAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ilanEthernetAddress.setDescription('Ethernet Address. The destination MAC address of the named host.')
ilanTSAP = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 9, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 20))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ilanTSAP.setStatus('mandatory')
if mibBuilder.loadTexts: ilanTSAP.setDescription('TSAP. The Transport Service Access Point required on the destination Host.')
elogFileSize = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 10, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elogFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: elogFileSize.setDescription('Elog File Size. The size of the error log file.')
elogTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 4, 10, 2), )
if mibBuilder.loadTexts: elogTable.setStatus('mandatory')
if mibBuilder.loadTexts: elogTable.setDescription('A table of Error Log entries.')
elogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 4, 10, 2, 1), ).setIndexNames((0, "SAT-MEGA-MIB", "elogIndex"))
if mibBuilder.loadTexts: elogEntry.setStatus('mandatory')
elogIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elogIndex.setStatus('mandatory')
if mibBuilder.loadTexts: elogIndex.setDescription('Index. The index to an Error Log entry.')
elogRecord = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 10, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(128, 128)).setFixedLength(128)).setMaxAccess("readonly")
if mibBuilder.loadTexts: elogRecord.setStatus('mandatory')
if mibBuilder.loadTexts: elogRecord.setDescription('Record. The Error Log entry in ascii format.')
errorLogReport = NotificationType((1, 3, 6, 1, 4, 1, 1038) + (0,0))
if mibBuilder.loadTexts: errorLogReport.setDescription('Record. The Error Log entry in ascii format')
billFileSize = MibScalar((1, 3, 6, 1, 4, 1, 1038, 4, 11, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billFileSize.setStatus('mandatory')
if mibBuilder.loadTexts: billFileSize.setDescription('Bill File Size. The number of entries configured into the BILL file.')
billTable = MibTable((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2), )
if mibBuilder.loadTexts: billTable.setStatus('mandatory')
if mibBuilder.loadTexts: billTable.setDescription("A table of 'Bill' entries.")
billEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1), ).setIndexNames((0, "SAT-MEGA-MIB", "billIndex"))
if mibBuilder.loadTexts: billEntry.setStatus('mandatory')
billIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: billIndex.setStatus('mandatory')
if mibBuilder.loadTexts: billIndex.setDescription('Index. The index into the bill table.')
billPass = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billPass.setStatus('mandatory')
if mibBuilder.loadTexts: billPass.setDescription('Password A string of up to 8 characters in length which is typed in by the network user in order to establish a connection to a specific resource.')
billDay = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billDay.setStatus('mandatory')
if mibBuilder.loadTexts: billDay.setDescription('DAY')
billMonth = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 12))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billMonth.setStatus('mandatory')
if mibBuilder.loadTexts: billMonth.setDescription('Month ')
billYear = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billYear.setStatus('mandatory')
if mibBuilder.loadTexts: billYear.setDescription('YEAR')
billHour = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billHour.setStatus('mandatory')
if mibBuilder.loadTexts: billHour.setDescription('Hour')
billMins = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billMins.setStatus('mandatory')
if mibBuilder.loadTexts: billMins.setDescription('Mins')
billCause = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billCause.setStatus('mandatory')
if mibBuilder.loadTexts: billCause.setDescription('Cause')
billDiagn = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billDiagn.setStatus('mandatory')
if mibBuilder.loadTexts: billDiagn.setDescription('Diagn')
billRev = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billRev.setStatus('mandatory')
if mibBuilder.loadTexts: billRev.setDescription('Rev')
billCallm = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billCallm.setStatus('mandatory')
if mibBuilder.loadTexts: billCallm.setDescription('Callm')
billCalls = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billCalls.setStatus('mandatory')
if mibBuilder.loadTexts: billCalls.setDescription('Calls')
billCname = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billCname.setStatus('mandatory')
if mibBuilder.loadTexts: billCname.setDescription('Cname')
billRname = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 14), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billRname.setStatus('mandatory')
if mibBuilder.loadTexts: billRname.setDescription('Rname')
billPrx = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billPrx.setStatus('mandatory')
if mibBuilder.loadTexts: billPrx.setDescription('Prx')
billPtx = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billPtx.setStatus('mandatory')
if mibBuilder.loadTexts: billPtx.setDescription('Ptx')
billCrx = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billCrx.setStatus('mandatory')
if mibBuilder.loadTexts: billCrx.setDescription('Crx')
billCtx = MibTableColumn((1, 3, 6, 1, 4, 1, 1038, 4, 11, 2, 1, 18), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(4, 4)).setFixedLength(4)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: billCtx.setStatus('mandatory')
if mibBuilder.loadTexts: billCtx.setDescription('Ctx')
mibBuilder.exportSymbols("SAT-MEGA-MIB", ctrlStatTable=ctrlStatTable, chanParamMenuNumber=chanParamMenuNumber, x25UserData=x25UserData, x25Address=x25Address, nameTable=nameTable, chanStatDRI=chanStatDRI, chanParamLFPad=chanParamLFPad, ctrlParamGroupPoll=ctrlParamGroupPoll, baseTransportBuffers=baseTransportBuffers, ctrlStatEIA=ctrlStatEIA, baseBufferPoolLowest=baseBufferPoolLowest, chanStatDataForwarding=chanStatDataForwarding, ilanEntry=ilanEntry, baseSegmentAccounting=baseSegmentAccounting, ilanIndex=ilanIndex, chanStatEditServiceSignals=chanStatEditServiceSignals, ctrlStatOptions=ctrlStatOptions, baseReports=baseReports, chanStatXIDIdentification=chanStatXIDIdentification, chanParamPadRecall=chanParamPadRecall, baseTeleloadEnabled=baseTeleloadEnabled, chanStatWindow=chanStatWindow, chanStatQLLCState=chanStatQLLCState, chanParamBroadcastFilterTimer=chanParamBroadcastFilterTimer, ctrlParamLCNOffset=ctrlParamLCNOffset, elogEntry=elogEntry, chanStatDestTsap=chanStatDestTsap, chanParamIndex=chanParamIndex, chanStatTransportLevelState=chanStatTransportLevelState, base=base, ctrlStatFRThroughput=ctrlStatFRThroughput, channel=channel, ctrlParamSDLCOptions=ctrlParamSDLCOptions, chanStatDelay=chanStatDelay, chanStatControllerIndex=chanStatControllerIndex, chanStatFrameRelayWait=chanStatFrameRelayWait, chanStatHelpNumber=chanStatHelpNumber, ctrlParamTransportLevelType=ctrlParamTransportLevelType, chanParamPrinterType=chanParamPrinterType, ctrlStatFRCurRcvSeq=ctrlStatFRCurRcvSeq, chanStatNetworkParity=chanStatNetworkParity, chanStatTotalCharsIn=chanStatTotalCharsIn, baseBuffPoolNow=baseBuffPoolNow, ctrlParamTSAPFormat=ctrlParamTSAPFormat, chanStatTerminalType=chanStatTerminalType, chanParamPadEnable=chanParamPadEnable, billDay=billDay, chanStatTotalCharsOut=chanStatTotalCharsOut, chanParamPageWait=chanParamPageWait, chanParamResourcePriority=chanParamResourcePriority, baseMemorySize=baseMemorySize, x25Entry=x25Entry, chanStatResourcePriority=chanStatResourcePriority, ctrlParamKLevel2=ctrlParamKLevel2, chanStatFold=chanStatFold, ctrlStatState=ctrlStatState, ctrlParamLmi=ctrlParamLmi, billCname=billCname, chanParamOptions=chanParamOptions, chanStatLUType=chanStatLUType, billRname=billRname, elogRecord=elogRecord, chanStatIndex=chanStatIndex, baseDataFrameRateOut=baseDataFrameRateOut, chanParamEcho=chanParamEcho, billMins=billMins, chanStatBreak=chanStatBreak, chanParamDRO=chanParamDRO, baseTerminalEmulationBuffers=baseTerminalEmulationBuffers, macGenerator=macGenerator, chanParamInhibitLearning=chanParamInhibitLearning, ilanEthernetAddress=ilanEthernetAddress, nameFile=nameFile, chanStatName=chanStatName, ctrlStatDataFramesIn=ctrlStatDataFramesIn, chanStatFramingErrors=chanStatFramingErrors, chanParamProvideXID=chanParamProvideXID, chanStatInputOverruns=chanStatInputOverruns, ilanOptions=ilanOptions, ctrlParamPrimaryStation=ctrlParamPrimaryStation, chanStatProtocolState=chanStatProtocolState, macFileSize=macFileSize, baseBufferPoolEmpty=baseBufferPoolEmpty, billRev=billRev, chanParamDRI=chanParamDRI, ctrlStatCallsReceived=ctrlStatCallsReceived, ctrlParamDlci=ctrlParamDlci, controller=controller, ctrlParamOptionalTimers=ctrlParamOptionalTimers, chanStatStationAddress=chanStatStationAddress, baseDefaultToPromCompatible=baseDefaultToPromCompatible, macTable=macTable, errorLogReport=errorLogReport, chanParamRetainSession=chanParamRetainSession, ctrlStatSubType=ctrlStatSubType, chanStatPortMatch=chanStatPortMatch, chanParamBreakChar=chanParamBreakChar, baseRejects=baseRejects, chanStatLFPad=chanStatLFPad, ctrlStatNumberChannels=ctrlStatNumberChannels, baseTotalCallSetUps=baseTotalCallSetUps, billMonth=billMonth, chanParamLFI=chanParamLFI, chanStatLinkState=chanStatLinkState, ctrlParamTTRTime=ctrlParamTTRTime, nameFileSize=nameFileSize, ctrlParamDefaultWindowSize=ctrlParamDefaultWindowSize, ctrlParamSubType=ctrlParamSubType, ctrlStatDataOut=ctrlStatDataOut, ctrlParamTransportClass=ctrlParamTransportClass, ctrlParamEntry=ctrlParamEntry, chanStatParityErrors=chanStatParityErrors, ilanTSAP=ilanTSAP, chanStatResetDiagnostic=chanStatResetDiagnostic, chanStatPadding=chanStatPadding, ctrlParamCallTimeOut=ctrlParamCallTimeOut, ctrlParamExtendedCallMgmt=ctrlParamExtendedCallMgmt, ctrlStatResetsReceived=ctrlStatResetsReceived, ctrlStatFRLMI=ctrlStatFRLMI, ctrlParamMode=ctrlParamMode, chanStatCallPriority=chanStatCallPriority, ctrlStatDataFramesOut=ctrlStatDataFramesOut, chanStatEchoMask=chanStatEchoMask, ctrlParamMaxCallCycles=ctrlParamMaxCallCycles, chanStatBuffers=chanStatBuffers, chanStatSDLCTransmitState=chanStatSDLCTransmitState, ctrlParamSlowPollTimer=ctrlParamSlowPollTimer, chanParamCircuitType=chanParamCircuitType, chanStatConnectedToChannelIndex=chanStatConnectedToChannelIndex, baseSecondaryPresentationTimer=baseSecondaryPresentationTimer, chanParamName=chanParamName, chanParamPadding=chanParamPadding, chanStatResetCauseReceived=chanStatResetCauseReceived, ctrlParamTimerT3=ctrlParamTimerT3, ctrlParamTable=ctrlParamTable, chanParamTerminalType=chanParamTerminalType, chanParamBufferDel=chanParamBufferDel, x25FileSize=x25FileSize, ctrlParamTWRTime=ctrlParamTWRTime, baseCountrySettings=baseCountrySettings, ctrlParamTries=ctrlParamTries, x25File=x25File, ctrlParamFlowControl=ctrlParamFlowControl, ctrlParamTransmitDelay=ctrlParamTransmitDelay, macIndex=macIndex, nameCallPriority=nameCallPriority, ctrlParamKeepAliveTimer=ctrlParamKeepAliveTimer, chanStatBufferDel=chanStatBufferDel, ctrlStatArpResponsesRec=ctrlStatArpResponsesRec, ctrlParamLoopBarPriority=ctrlParamLoopBarPriority, megaPAC_E_cpu_D_E=megaPAC_E_cpu_D_E, chanStatDiagnostic=chanStatDiagnostic, ctrlStatFRCurRxSeq=ctrlStatFRCurRxSeq, chanStatRxWindow=chanStatRxWindow, chanParamBreak=chanParamBreak, ctrlStatFRCurSndSeq=ctrlStatFRCurSndSeq, chanStatNameCtrlName=chanStatNameCtrlName, billCalls=billCalls, ctrlStatClearsReceived=ctrlStatClearsReceived, chanStatRxSize=chanStatRxSize, baseDataFramesIn=baseDataFramesIn, ctrlStatCurrentCalls=ctrlStatCurrentCalls, chanStatNewsNumber=chanStatNewsNumber, ctrlParamConfigState=ctrlParamConfigState, megaPAC_E_cpu_C=megaPAC_E_cpu_C, ctrlParamV54Modem=ctrlParamV54Modem, ctrlTotalNumber=ctrlTotalNumber, ctrlParamBurstEligibility=ctrlParamBurstEligibility, ctrlParamPollInterval=ctrlParamPollInterval, ctrlStatDestinationAddress=ctrlStatDestinationAddress, chanParamBnnSsap=chanParamBnnSsap, baseInactivityDetectTimer=baseInactivityDetectTimer, chanParamEdit=chanParamEdit, baseCurrentTransportCalls=baseCurrentTransportCalls, nameOptions=nameOptions, ctrlParamOptions=ctrlParamOptions, nameName=nameName, ctrlParamBurstCommit=ctrlParamBurstCommit, ctrlStatFRTxSeqLost=ctrlStatFRTxSeqLost, ctrlStatRejects=ctrlStatRejects, nameBilling=nameBilling, ctrlStatArpRequestSent=ctrlStatArpRequestSent, chanStatDRO=chanStatDRO, passFile=passFile, billHour=billHour, chanStatPolls=chanStatPolls, chanParamNewsNumber=chanParamNewsNumber, chanParamFold=chanParamFold, chanParamDelay=chanParamDelay, chanStatLevel3State=chanStatLevel3State, chanParamForce=chanParamForce, ctrlParamDirectedBroadcasts=ctrlParamDirectedBroadcasts, ctrlParamOutputSyncInsertion=ctrlParamOutputSyncInsertion, chanStatResetDiagReceived=chanStatResetDiagReceived, billEntry=billEntry, ctrlParamKLevel3=ctrlParamKLevel3, ctrlStatIndex=ctrlStatIndex, ctrlParamInputSyncDeletion=ctrlParamInputSyncDeletion, billCtx=billCtx, ctrlParamNewLANInterface=ctrlParamNewLANInterface, ctrlStatRetransmissions=ctrlStatRetransmissions, ctrlParamTry=ctrlParamTry, ctrlParamDestinationAddress=ctrlParamDestinationAddress, chanParamTable=chanParamTable, chanStatTotalFramesOut=chanStatTotalFramesOut, ctrlParamPacketSize=ctrlParamPacketSize, nameEntry=nameEntry, chanStatEcho=chanStatEcho, ctrlParamNoChannels=ctrlParamNoChannels, chanStatTxWindow=chanStatTxWindow, nameIndex=nameIndex, ctrlParamInhibitTimeFill=ctrlParamInhibitTimeFill, chanParamEchoMask=chanParamEchoMask, megaPAC_ESL=megaPAC_ESL, ctrlStatOutputQueueLength=ctrlStatOutputQueueLength, ctrlParamDisableFlowControl=ctrlParamDisableFlowControl, chanParamEscapeDelay=chanParamEscapeDelay, ctrlParamNewSerialInterface=ctrlParamNewSerialInterface, chanStatForce=chanStatForce, chanNumberConfigured=chanNumberConfigured, chanParamDataForwarding=chanParamDataForwarding, ctrlParamFullStatusInterval=ctrlParamFullStatusInterval, ctrlStatCRCErrors=ctrlStatCRCErrors, megaPAC_V_cpu_68040=megaPAC_V_cpu_68040, ctrlStatSdlcOptions=ctrlStatSdlcOptions, chanStatEscapeDelay=chanStatEscapeDelay, chanParamStationAddress=chanParamStationAddress, ctrlStatName=ctrlStatName, x25Table=x25Table, megaPAC_V_cpu_8=megaPAC_V_cpu_8, baseRetransmissions=baseRetransmissions, chanStatBreakChar=chanStatBreakChar, chanStatState=chanStatState, chanParamPadSignals=chanParamPadSignals, chanParamLocalPrinter=chanParamLocalPrinter, ilanFileSize=ilanFileSize, ctrlParamIndex=ctrlParamIndex, baseCurrentCalls=baseCurrentCalls, x25AddressGroup=x25AddressGroup, ctrlStatDataIn=ctrlStatDataIn, ctrlStatFRRxSeqLost=ctrlStatFRRxSeqLost, ctrlParamInitFrame=ctrlParamInitFrame, ctrlParamLCGN=ctrlParamLCGN, chanStatTxSize=chanStatTxSize, billCause=billCause, billPrx=billPrx, macName=macName, ctrlStatFRRcvBecn=ctrlStatFRRcvBecn, chanStatPrimaryStation=chanStatPrimaryStation, ctrlParamInterfaceType=ctrlParamInterfaceType, elogTable=elogTable, chanStatLFI=chanStatLFI, macSelector=macSelector, sat=sat)
mibBuilder.exportSymbols("SAT-MEGA-MIB", baseDataFramesOut=baseDataFramesOut, baseStatBufferThreshold=baseStatBufferThreshold, nameDRCMask=nameDRCMask, ctrlParamSSAP=ctrlParamSSAP, chanStatOptions=chanStatOptions, ctrlNumberConfigured=ctrlNumberConfigured, ctrlStatSubState=ctrlStatSubState, ctrlParamDuplex=ctrlParamDuplex, chanParamScreenPrinter=chanParamScreenPrinter, macEntry=macEntry, chanStatProtocol=chanStatProtocol, chanStatLUActive=chanStatLUActive, ctrlParamT1=ctrlParamT1, ctrlParamMaximumTPDUSize=ctrlParamMaximumTPDUSize, billFile=billFile, billFileSize=billFileSize, chanStatParityTreatment=chanStatParityTreatment, chanStatEdit=chanStatEdit, chanStatMenuNumber=chanStatMenuNumber, chanParamPortMatch=chanParamPortMatch, ctrlStatNoTries=ctrlStatNoTries, chanStatBindActive=chanStatBindActive, chanParamDRCMask=chanParamDRCMask, ctrlParamDelayToRTSLow=ctrlParamDelayToRTSLow, billTable=billTable, elogIndex=elogIndex, chanStatPadEnable=chanStatPadEnable, ctrlStatType=ctrlStatType, chanParamReverseTelnetPort=chanParamReverseTelnetPort, chanStatCharDel=chanStatCharDel, macOptions=macOptions, ilanName=ilanName, chanParamNetworkParity=chanParamNetworkParity, baseMaxPacketSize=baseMaxPacketSize, chanParamBnnDsap=chanParamBnnDsap, macFile=macFile, ctrlStatArpRequestRec=ctrlStatArpRequestRec, chanParamCallPriority=chanParamCallPriority, chanStatTries=chanStatTries, ctrlStatFRCurTxSeq=ctrlStatFRCurTxSeq, chanParamBuffers=chanParamBuffers, megaPAC_V_cpu_68060=megaPAC_V_cpu_68060, mega=mega, chanStatTotalFramesIn=chanStatTotalFramesIn, chanParamEntry=chanParamEntry, billCrx=billCrx, ctrlParamErrorThreshold=ctrlParamErrorThreshold, chanStatBreaksReceived=chanStatBreaksReceived, ctrlParamType=ctrlParamType, chanParamPriority=chanParamPriority, baseDataFrameRateIn=baseDataFrameRateIn, ctrlStatEntry=ctrlStatEntry, ctrlStatDataFrameRateIn=ctrlStatDataFrameRateIn, ctrlStatInterruptsReceived=ctrlStatInterruptsReceived, elogFile=elogFile, ctrlStatStationAddress=ctrlStatStationAddress, x25Name=x25Name, baseInitialPresentationTimer=baseInitialPresentationTimer, ctrlStatLCGN=ctrlStatLCGN, baseSessionStatistics=baseSessionStatistics, billCallm=billCallm, baseRestartTime=baseRestartTime, ctrlParamAddressGroup=ctrlParamAddressGroup, ctrlParamDefaultLocalPrinter=ctrlParamDefaultLocalPrinter, billDiagn=billDiagn, ctrlParamDCDFilter=ctrlParamDCDFilter, ctrlParamAddress=ctrlParamAddress, ctrlParamSpeed=ctrlParamSpeed, chanStatPadSignals=chanStatPadSignals, billIndex=billIndex, chanParamParityTreatment=chanParamParityTreatment, megaPAC_V_cpu_16=megaPAC_V_cpu_16, chanStatIdentity=chanStatIdentity, ctrlStatCallsSent=ctrlStatCallsSent, baseBuffPoolMax=baseBuffPoolMax, baseBufferThreshold=baseBufferThreshold, chanParamMode=chanParamMode, macFunction=macFunction, billPtx=billPtx, chanStatCircuitType=chanStatCircuitType, chanParamDisp=chanParamDisp, chanStatCause=chanStatCause, elogFileSize=elogFileSize, billYear=billYear, chanStatEntry=chanStatEntry, baseTotalTransportCalls=baseTotalTransportCalls, ctrlStatTotalCallSetUps=ctrlStatTotalCallSetUps, chanStatEIA=chanStatEIA, ctrlStatFRRcvDe=ctrlStatFRRcvDe, chanParamCharDel=chanParamCharDel, ctrlStatFRRcvFecn=ctrlStatFRRcvFecn, chanParamBnnPuTyp=chanParamBnnPuTyp, baseRunStatus=baseRunStatus, chanParamEditServiceSignals=chanParamEditServiceSignals, ctrlStatFRrespLmi=ctrlStatFRrespLmi, ctrlStatFirstChannelIndex=ctrlStatFirstChannelIndex, ctrlParamIdleDetectTime=ctrlParamIdleDetectTime, ilanFile=ilanFile, chanStatSessionStatus=chanStatSessionStatus, chanStatResetCause=chanStatResetCause, ctrlParamName=ctrlParamName, chanStatPageWait=chanStatPageWait, billPass=billPass, ctrlParamDelayToCTSHigh=ctrlParamDelayToCTSHigh, chanStatPadRecall=chanStatPadRecall, ilanTable=ilanTable, chanParamHelpNumber=chanParamHelpNumber, passFileSize=passFileSize, chanParamDiscMode=chanParamDiscMode, ctrlParamFrameSequence=ctrlParamFrameSequence, ctrlParamDSAP=ctrlParamDSAP, x25Index=x25Index, chanStatSDLCState=chanStatSDLCState, chanStatTable=chanStatTable, chanStatDisp=chanStatDisp, baseVersion=baseVersion, ctrlParamBandwidth=ctrlParamBandwidth, ctrlParamMaxCallInterval=ctrlParamMaxCallInterval, ctrlStatDataFrameRateOut=ctrlStatDataFrameRateOut, ctrlParamOptionalFlags=ctrlParamOptionalFlags, chanStatDiscMode=chanStatDiscMode, ctrlParamLineGroup=ctrlParamLineGroup, products=products)
