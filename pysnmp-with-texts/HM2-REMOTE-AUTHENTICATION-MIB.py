#
# PySNMP MIB module HM2-REMOTE-AUTHENTICATION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HM2-REMOTE-AUTHENTICATION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:32:24 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
Hm2TlsCipherSuites, Hm2TlsVersions = mibBuilder.importSymbols("HM2-MGMTACCESS-MIB", "Hm2TlsCipherSuites", "Hm2TlsVersions")
hm2ConfigurationMibs, HmEnabledStatus = mibBuilder.importSymbols("HM2-TC-MIB", "hm2ConfigurationMibs", "HmEnabledStatus")
Hm2UserAccessRoles, = mibBuilder.importSymbols("HM2-USERMGMT-MIB", "Hm2UserAccessRoles")
InetPortNumber, InetAddress, InetAddressType = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetPortNumber", "InetAddress", "InetAddressType")
SnmpAdminString, = mibBuilder.importSymbols("SNMP-FRAMEWORK-MIB", "SnmpAdminString")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Integer32, TimeTicks, ObjectIdentity, ModuleIdentity, Counter64, Counter32, Gauge32, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, NotificationType, MibIdentifier, iso, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "TimeTicks", "ObjectIdentity", "ModuleIdentity", "Counter64", "Counter32", "Gauge32", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "NotificationType", "MibIdentifier", "iso", "IpAddress")
RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "RowStatus", "TextualConvention", "DisplayString")
hm2RemoteAuthMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 248, 11, 26))
hm2RemoteAuthMib.setRevisions(('2014-03-06 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hm2RemoteAuthMib.setRevisionsDescriptions(('Initial version.',))
if mibBuilder.loadTexts: hm2RemoteAuthMib.setLastUpdated('201403060000Z')
if mibBuilder.loadTexts: hm2RemoteAuthMib.setOrganization('Hirschmann Automation and Control GmbH')
if mibBuilder.loadTexts: hm2RemoteAuthMib.setContactInfo('Postal: Stuttgarter Str. 45-51 72654 Neckartenzlingen Germany Phone: +49 7127 140 E-mail: hac.support@belden.com')
if mibBuilder.loadTexts: hm2RemoteAuthMib.setDescription('Hirschmann MIB for remote authentication protocols. Copyright (C) 2014. All Rights Reserved.')
hm2RemoteAuthMibNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 26, 0))
hm2RemoteAuthMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 26, 1))
hm2RemoteAuthMibSNMPExtensionGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 26, 3))
hm2LdapGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1))
hm2LdapConfigGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10))
hm2LdapMappingGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20))
hm2LdapClientAdminState = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 1), HmEnabledStatus().clone('disable')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientAdminState.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientAdminState.setDescription('Enables/disables the LDAP client admin mode.')
hm2LdapClientCacheTimeout = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1440)).clone(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientCacheTimeout.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientCacheTimeout.setDescription('Configures the LDAP user cache entry timeout in minutes. Default timeout value is 10 minutes.')
hm2LdapClientServerBaseDN = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 3), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientServerBaseDN.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerBaseDN.setDescription('Base distinguished name for LDAP query to remote authentication server.')
hm2LdapClientServerSearchAttribute = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)).clone('userPrincipalName')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientServerSearchAttribute.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerSearchAttribute.setDescription("Search attribute for LDAP query to remote authentication server, e.g. 'userPrincipalName'.")
hm2LdapClientServerBindUser = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 5), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientServerBindUser.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerBindUser.setDescription('User name of user that has permission to do user requests on a remote authentication server.')
hm2LdapClientServerBindUserPasswd = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 6), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientServerBindUserPasswd.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerBindUserPasswd.setDescription('Password of user that has permission to do user requests on a remote authentication server.')
hm2LdapClientServerDefaultDomain = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 7), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientServerDefaultDomain.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerDefaultDomain.setDescription('Default domain used for users without a domain name.')
hm2LdapClientTlsVersions = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 8), Hm2TlsVersions().clone(namedValues=NamedValues(("tlsv1-0", 0), ("tlsv1-2", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientTlsVersions.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientTlsVersions.setDescription('The TLS version supported by the LDAP client.')
hm2LdapClientTlsCipherSuites = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 9), Hm2TlsCipherSuites().clone(namedValues=NamedValues(("tls-dhe-rsa-with-aes-128-cbc-sha", 2), ("tls-ecdhe-rsa-with-aes-128-cbc-sha", 4), ("tls-ecdhe-rsa-with-aes-128-gcm-sha256", 6)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapClientTlsCipherSuites.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientTlsCipherSuites.setDescription('The cipher suite supported by the LDAP client.')
hm2LdapClientServerAddrTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20), )
if mibBuilder.loadTexts: hm2LdapClientServerAddrTable.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerAddrTable.setDescription('This table contains objects to configure client connections to remote authentication server(s).')
hm2LdapClientServerAddrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1), ).setIndexNames((0, "HM2-REMOTE-AUTHENTICATION-MIB", "hm2LdapClientServerIndex"))
if mibBuilder.loadTexts: hm2LdapClientServerAddrEntry.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerAddrEntry.setDescription('The Ldap client connection objects.')
hm2LdapClientServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2LdapClientServerIndex.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerIndex.setDescription('Index for remote authentication server table.')
hm2LdapClientServerDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 2), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapClientServerDescr.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerDescr.setDescription('The description of the server configured.')
hm2LdapClientServerAddrType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 3), InetAddressType().clone('ipv4')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapClientServerAddrType.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerAddrType.setDescription('Address type.')
hm2LdapClientServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 4), InetAddress().clone(hexValue="00000000")).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapClientServerAddr.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerAddr.setDescription('IP address of remote authentication server.')
hm2LdapClientServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 5), InetPortNumber().clone(389)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapClientServerPort.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerPort.setDescription('The port number of the remote authentication server.')
hm2LdapClientServerSecurity = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("ssl", 2), ("startTLS", 3))).clone('startTLS')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapClientServerSecurity.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerSecurity.setDescription('Configures connection security options. - none -> connection to AD server is unprotected. (Attention: passwords are transmitted as plain text) - ssl -> SSL connection is established between device and AD server and AD server certificate is proved valid with loaded certificate authority (CA certificate). - startTLS -> TLS connection is established between device and AD server and AD server certificate is proved valid with loaded certificate authority (CA certificate).')
hm2LdapClientServerStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ok", 1), ("unreachable", 2), ("other", 3))).clone('other')).setMaxAccess("readonly")
if mibBuilder.loadTexts: hm2LdapClientServerStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerStatus.setDescription('Status of authentication against remote authentication server: - ok -> Server reachable, authentication succeeded - unreachable -> Server (primary and backup) not reachable - other -> any other error state')
hm2LdapClientServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 10, 20, 1, 8), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapClientServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LdapClientServerRowStatus.setDescription("Indicates the status of an entry in this table, and is used to create/delete entries. Objects within this table can by changed while the status is 'active'.")
hm2LdapRoleMatchingPolicy = MibScalar((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("highest", 1), ("first", 2))).clone(1)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hm2LdapRoleMatchingPolicy.setStatus('current')
if mibBuilder.loadTexts: hm2LdapRoleMatchingPolicy.setDescription("Configures the way role mapping table entries are applied. If set to first (2) the first matching entry determines the user's role. If set to highest (1) the the matching entry with the highest role is used.")
hm2LdapRoleMappingTable = MibTable((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 10), )
if mibBuilder.loadTexts: hm2LdapRoleMappingTable.setStatus('current')
if mibBuilder.loadTexts: hm2LdapRoleMappingTable.setDescription('This table contains string objects to configure the mapping to an available user role.')
hm2LdapRoleMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 10, 1), ).setIndexNames((0, "HM2-REMOTE-AUTHENTICATION-MIB", "hm2LdapRoleMappingIndex"))
if mibBuilder.loadTexts: hm2LdapRoleMappingEntry.setStatus('current')
if mibBuilder.loadTexts: hm2LdapRoleMappingEntry.setDescription('The role mapping string objects.')
hm2LdapRoleMappingIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hm2LdapRoleMappingIndex.setStatus('current')
if mibBuilder.loadTexts: hm2LdapRoleMappingIndex.setDescription('Index for remote authentication role mapping table.')
hm2LdapRoleMappingAccessRole = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 10, 1, 2), Hm2UserAccessRoles()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapRoleMappingAccessRole.setStatus('current')
if mibBuilder.loadTexts: hm2LdapRoleMappingAccessRole.setDescription('The access role to be mapped.')
hm2LdapRoleMappingType = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("attribute", 1), ("group", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapRoleMappingType.setStatus('current')
if mibBuilder.loadTexts: hm2LdapRoleMappingType.setDescription('Type of this entry')
hm2LdapRoleMappingParameter = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 10, 1, 4), SnmpAdminString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapRoleMappingParameter.setStatus('current')
if mibBuilder.loadTexts: hm2LdapRoleMappingParameter.setDescription('The search string for the entry. For hm2LdapRoleMappingType attribute(1) this is in the form attribute=value. For hm2LdapRoleMappingType group(2) this is the group.')
hm2LdapRoleMappingRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 248, 11, 26, 1, 1, 20, 10, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hm2LdapRoleMappingRowStatus.setStatus('current')
if mibBuilder.loadTexts: hm2LdapRoleMappingRowStatus.setDescription("Indicates the status of an entry in this table, and is used to create/delete entries. Objects within this table can by changed while the status is 'active'.")
hm2LdapSESGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 248, 11, 26, 3, 1))
hm2LdapSESDuplicateIPorHost = ObjectIdentity((1, 3, 6, 1, 4, 1, 248, 11, 26, 3, 1, 1))
if mibBuilder.loadTexts: hm2LdapSESDuplicateIPorHost.setStatus('current')
if mibBuilder.loadTexts: hm2LdapSESDuplicateIPorHost.setDescription('Indicates that there exists a remote authentication client server entry with the same IP address or host name.')
hm2LdapConfigStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 248, 11, 26, 0, 1)).setObjects(("HM2-REMOTE-AUTHENTICATION-MIB", "hm2LdapClientServerIndex"), ("HM2-REMOTE-AUTHENTICATION-MIB", "hm2LdapClientServerStatus"))
if mibBuilder.loadTexts: hm2LdapConfigStatusTrap.setStatus('current')
if mibBuilder.loadTexts: hm2LdapConfigStatusTrap.setDescription('This notification is send when authentication via Ldap to a remote authentication server is done.')
mibBuilder.exportSymbols("HM2-REMOTE-AUTHENTICATION-MIB", hm2LdapClientServerAddrType=hm2LdapClientServerAddrType, hm2LdapClientServerBaseDN=hm2LdapClientServerBaseDN, hm2LdapClientServerRowStatus=hm2LdapClientServerRowStatus, hm2LdapRoleMappingType=hm2LdapRoleMappingType, hm2LdapClientServerPort=hm2LdapClientServerPort, hm2LdapMappingGroup=hm2LdapMappingGroup, hm2LdapRoleMappingEntry=hm2LdapRoleMappingEntry, hm2LdapClientServerBindUser=hm2LdapClientServerBindUser, hm2RemoteAuthMibSNMPExtensionGroup=hm2RemoteAuthMibSNMPExtensionGroup, hm2LdapSESDuplicateIPorHost=hm2LdapSESDuplicateIPorHost, hm2LdapClientServerIndex=hm2LdapClientServerIndex, hm2LdapClientServerAddr=hm2LdapClientServerAddr, hm2LdapClientTlsVersions=hm2LdapClientTlsVersions, hm2LdapConfigStatusTrap=hm2LdapConfigStatusTrap, hm2LdapSESGroup=hm2LdapSESGroup, hm2LdapClientServerSecurity=hm2LdapClientServerSecurity, hm2LdapClientServerStatus=hm2LdapClientServerStatus, hm2LdapClientServerBindUserPasswd=hm2LdapClientServerBindUserPasswd, hm2LdapClientServerSearchAttribute=hm2LdapClientServerSearchAttribute, hm2LdapGroup=hm2LdapGroup, hm2LdapClientServerAddrTable=hm2LdapClientServerAddrTable, hm2LdapClientCacheTimeout=hm2LdapClientCacheTimeout, hm2LdapRoleMappingRowStatus=hm2LdapRoleMappingRowStatus, hm2LdapClientServerDescr=hm2LdapClientServerDescr, hm2LdapRoleMappingTable=hm2LdapRoleMappingTable, hm2LdapClientAdminState=hm2LdapClientAdminState, hm2LdapClientTlsCipherSuites=hm2LdapClientTlsCipherSuites, hm2RemoteAuthMibObjects=hm2RemoteAuthMibObjects, hm2LdapClientServerAddrEntry=hm2LdapClientServerAddrEntry, hm2LdapRoleMappingParameter=hm2LdapRoleMappingParameter, hm2LdapConfigGroup=hm2LdapConfigGroup, hm2LdapClientServerDefaultDomain=hm2LdapClientServerDefaultDomain, PYSNMP_MODULE_ID=hm2RemoteAuthMib, hm2RemoteAuthMib=hm2RemoteAuthMib, hm2LdapRoleMappingAccessRole=hm2LdapRoleMappingAccessRole, hm2LdapRoleMappingIndex=hm2LdapRoleMappingIndex, hm2RemoteAuthMibNotifications=hm2RemoteAuthMibNotifications, hm2LdapRoleMatchingPolicy=hm2LdapRoleMatchingPolicy)
