#
# PySNMP MIB module CYAN-DTM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CYAN-DTM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:33:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection")
CyanTypeTc, cyanEntityModules = mibBuilder.importSymbols("CYAN-MIB", "CyanTypeTc", "cyanEntityModules")
CyanOffOnTc, CyanAdminStateTc, CyanLEDTc, CyanSecServiceStateTc, CyanOpStateTc, CyanActvStdbyTc, CyanOpStateQualTc = mibBuilder.importSymbols("CYAN-TC-MIB", "CyanOffOnTc", "CyanAdminStateTc", "CyanLEDTc", "CyanSecServiceStateTc", "CyanOpStateTc", "CyanActvStdbyTc", "CyanOpStateQualTc")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Bits, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, Unsigned32, IpAddress, Counter32, TimeTicks, NotificationType, ModuleIdentity, Gauge32, Counter64, Integer32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "Unsigned32", "IpAddress", "Counter32", "TimeTicks", "NotificationType", "ModuleIdentity", "Gauge32", "Counter64", "Integer32", "ObjectIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
cyanDtmModule = ModuleIdentity((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120))
cyanDtmModule.setRevisions(('2014-12-07 05:45',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cyanDtmModule.setRevisionsDescriptions(('Release 6.0 build 1416362081',))
if mibBuilder.loadTexts: cyanDtmModule.setLastUpdated('201412070545Z')
if mibBuilder.loadTexts: cyanDtmModule.setOrganization('Cyan, Inc.')
if mibBuilder.loadTexts: cyanDtmModule.setContactInfo(' E-mail: support@cyaninc.com Postal: Cyan, Inc. 1390 N. McDowell Blvd., # G-327 Petaluma, CA 94954 USA Tel: +1-707-735-2300')
if mibBuilder.loadTexts: cyanDtmModule.setDescription('MIB module for Digital Transmission Module (DTM)')
cyanDtmMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1))
cyanDtmTable = MibTable((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1), )
if mibBuilder.loadTexts: cyanDtmTable.setStatus('current')
if mibBuilder.loadTexts: cyanDtmTable.setDescription('A list of Dtm entries.')
cyanDtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1), ).setIndexNames((0, "CYAN-DTM-MIB", "cyanDtmShelfId"), (0, "CYAN-DTM-MIB", "cyanDtmDtmId"))
if mibBuilder.loadTexts: cyanDtmEntry.setStatus('current')
if mibBuilder.loadTexts: cyanDtmEntry.setDescription('An entry of Dtm.')
cyanDtmShelfId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255)))
if mibBuilder.loadTexts: cyanDtmShelfId.setStatus('current')
if mibBuilder.loadTexts: cyanDtmShelfId.setDescription('Shelf Id')
cyanDtmDtmId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 2), Unsigned32())
if mibBuilder.loadTexts: cyanDtmDtmId.setStatus('current')
if mibBuilder.loadTexts: cyanDtmDtmId.setDescription('Dtm Module Id')
cyanDtmActiveLed = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 3), CyanLEDTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmActiveLed.setStatus('current')
if mibBuilder.loadTexts: cyanDtmActiveLed.setDescription('Active LED status')
cyanDtmActivestandbyState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 4), CyanActvStdbyTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmActivestandbyState.setStatus('current')
if mibBuilder.loadTexts: cyanDtmActivestandbyState.setDescription('Active/standby state')
cyanDtmAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 5), CyanAdminStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmAdminState.setStatus('current')
if mibBuilder.loadTexts: cyanDtmAdminState.setDescription('Administrative state')
cyanDtmAlarmLed = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 6), CyanLEDTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmAlarmLed.setStatus('current')
if mibBuilder.loadTexts: cyanDtmAlarmLed.setDescription('Alarm LED status')
cyanDtmAssetTag = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 124))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmAssetTag.setStatus('current')
if mibBuilder.loadTexts: cyanDtmAssetTag.setDescription('Asset Tag')
cyanDtmAutoinserviceSoakTimeSec = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmAutoinserviceSoakTimeSec.setStatus('current')
if mibBuilder.loadTexts: cyanDtmAutoinserviceSoakTimeSec.setDescription('Auto-In-Service soak time')
cyanDtmBaseMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmBaseMacAddress.setStatus('current')
if mibBuilder.loadTexts: cyanDtmBaseMacAddress.setDescription('Base MAC address of a range of addresses')
cyanDtmCurrCyanSwBuildVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmCurrCyanSwBuildVersions.setStatus('current')
if mibBuilder.loadTexts: cyanDtmCurrCyanSwBuildVersions.setDescription('Current Cyan software build versions')
cyanDtmCurrCyanSwRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmCurrCyanSwRelease.setStatus('current')
if mibBuilder.loadTexts: cyanDtmCurrCyanSwRelease.setDescription('Current Cyan software release')
cyanDtmCurrent = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmCurrent.setStatus('current')
if mibBuilder.loadTexts: cyanDtmCurrent.setDescription('Current Draw')
cyanDtmDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmDescription.setStatus('current')
if mibBuilder.loadTexts: cyanDtmDescription.setDescription('Description')
cyanDtmExhaustAirTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 14), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmExhaustAirTemp.setStatus('current')
if mibBuilder.loadTexts: cyanDtmExhaustAirTemp.setDescription('Exhaust air temperature')
cyanDtmExhaustTempAlarmHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmExhaustTempAlarmHighThres.setStatus('current')
if mibBuilder.loadTexts: cyanDtmExhaustTempAlarmHighThres.setDescription('High alarm threshold for exhaust air temperature')
cyanDtmExhaustTempAlarmLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmExhaustTempAlarmLowThres.setStatus('current')
if mibBuilder.loadTexts: cyanDtmExhaustTempAlarmLowThres.setDescription('Low alarm threshold for exhaust air temperature')
cyanDtmExhaustTempWarnHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmExhaustTempWarnHighThres.setStatus('current')
if mibBuilder.loadTexts: cyanDtmExhaustTempWarnHighThres.setDescription('High warning threshold for exhaust air temperature')
cyanDtmExhaustTempWarnLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmExhaustTempWarnLowThres.setStatus('current')
if mibBuilder.loadTexts: cyanDtmExhaustTempWarnLowThres.setDescription('Low warning threshold for exhaust air temperature')
cyanDtmExpectedTemperatureRise = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmExpectedTemperatureRise.setStatus('current')
if mibBuilder.loadTexts: cyanDtmExpectedTemperatureRise.setDescription('Expected temperature rise')
cyanDtmIdentifier = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 20), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmIdentifier.setStatus('current')
if mibBuilder.loadTexts: cyanDtmIdentifier.setDescription('string OID')
cyanDtmIntakeAirTemp = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 21), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmIntakeAirTemp.setStatus('current')
if mibBuilder.loadTexts: cyanDtmIntakeAirTemp.setDescription('In-take air temperature')
cyanDtmIntakeTempAlarmHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmIntakeTempAlarmHighThres.setStatus('current')
if mibBuilder.loadTexts: cyanDtmIntakeTempAlarmHighThres.setDescription('High alarm threshold for in-take air temperature')
cyanDtmIntakeTempAlarmLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 23), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmIntakeTempAlarmLowThres.setStatus('current')
if mibBuilder.loadTexts: cyanDtmIntakeTempAlarmLowThres.setDescription('Low alarm threshold for in-take air temperature')
cyanDtmIntakeTempWarnHighThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmIntakeTempWarnHighThres.setStatus('current')
if mibBuilder.loadTexts: cyanDtmIntakeTempWarnHighThres.setDescription('High warning threshold for in-take air temperature')
cyanDtmIntakeTempWarnLowThres = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 25), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-128000, 128000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmIntakeTempWarnLowThres.setStatus('current')
if mibBuilder.loadTexts: cyanDtmIntakeTempWarnLowThres.setDescription('Low warning threshold for in-take air temperature')
cyanDtmLedTest = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 26), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmLedTest.setStatus('current')
if mibBuilder.loadTexts: cyanDtmLedTest.setDescription('Change value of this attribute to run LED test on this module')
cyanDtmMacBlockSize = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 27), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmMacBlockSize.setStatus('current')
if mibBuilder.loadTexts: cyanDtmMacBlockSize.setDescription('Number of MAC addresses allocated from the base MAC address')
cyanDtmMfgCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 10))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmMfgCleiCode.setStatus('current')
if mibBuilder.loadTexts: cyanDtmMfgCleiCode.setDescription('Common Language Equipment Identifier')
cyanDtmMfgEciCode = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 29), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 6))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmMfgEciCode.setStatus('current')
if mibBuilder.loadTexts: cyanDtmMfgEciCode.setDescription('Equipment Catalog Item')
cyanDtmMfgModuleId = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 30), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmMfgModuleId.setStatus('current')
if mibBuilder.loadTexts: cyanDtmMfgModuleId.setDescription('Module ID')
cyanDtmMfgPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 31), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmMfgPartNumber.setStatus('current')
if mibBuilder.loadTexts: cyanDtmMfgPartNumber.setDescription('Manufacturing part number')
cyanDtmMfgRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 32), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 4))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmMfgRevision.setStatus('current')
if mibBuilder.loadTexts: cyanDtmMfgRevision.setDescription('Mfg revision number')
cyanDtmMfgSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 33), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 16))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmMfgSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cyanDtmMfgSerialNumber.setDescription('Mfg serial number')
cyanDtmName = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 34), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmName.setStatus('current')
if mibBuilder.loadTexts: cyanDtmName.setDescription('Cyan name')
cyanDtmOidClass = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 35), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmOidClass.setStatus('current')
if mibBuilder.loadTexts: cyanDtmOidClass.setDescription('OID Class')
cyanDtmOperState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 36), CyanOpStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmOperState.setStatus('current')
if mibBuilder.loadTexts: cyanDtmOperState.setDescription('Primary Operation State')
cyanDtmOperStateQual = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 37), CyanOpStateQualTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmOperStateQual.setStatus('current')
if mibBuilder.loadTexts: cyanDtmOperStateQual.setDescription('Operation state qualifier')
cyanDtmOssLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmOssLabel.setStatus('current')
if mibBuilder.loadTexts: cyanDtmOssLabel.setDescription('CyMS label')
cyanDtmOvervoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 39), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmOvervoltageThreshold.setStatus('current')
if mibBuilder.loadTexts: cyanDtmOvervoltageThreshold.setDescription('Over-voltage warning threshold')
cyanDtmOwner = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 40), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmOwner.setStatus('current')
if mibBuilder.loadTexts: cyanDtmOwner.setDescription('Owner')
cyanDtmPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 11))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmPartNumber.setStatus('current')
if mibBuilder.loadTexts: cyanDtmPartNumber.setDescription('Cyan part number')
cyanDtmPowerLed = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 42), CyanLEDTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmPowerLed.setStatus('current')
if mibBuilder.loadTexts: cyanDtmPowerLed.setDescription('Power LED status')
cyanDtmPsuTemperature = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 43), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-25000, 85000))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmPsuTemperature.setStatus('current')
if mibBuilder.loadTexts: cyanDtmPsuTemperature.setDescription('Temperature reading in the power supply')
cyanDtmPwrFeedAStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 44), CyanOffOnTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmPwrFeedAStatus.setStatus('current')
if mibBuilder.loadTexts: cyanDtmPwrFeedAStatus.setDescription('Status of power supply A')
cyanDtmPwrFeedAVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 45), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmPwrFeedAVoltage.setStatus('current')
if mibBuilder.loadTexts: cyanDtmPwrFeedAVoltage.setDescription('Voltage level of power supply A')
cyanDtmPwrFeedBStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 46), CyanOffOnTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmPwrFeedBStatus.setStatus('current')
if mibBuilder.loadTexts: cyanDtmPwrFeedBStatus.setDescription('Status of power supply B')
cyanDtmPwrFeedBVoltage = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 47), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmPwrFeedBVoltage.setStatus('current')
if mibBuilder.loadTexts: cyanDtmPwrFeedBVoltage.setDescription('Voltage level of power supply B')
cyanDtmRevertCyanSwBuildVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 48), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmRevertCyanSwBuildVersions.setStatus('current')
if mibBuilder.loadTexts: cyanDtmRevertCyanSwBuildVersions.setDescription('Revert Cyan software build versions')
cyanDtmRevertCyanSwRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 49), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmRevertCyanSwRelease.setStatus('current')
if mibBuilder.loadTexts: cyanDtmRevertCyanSwRelease.setDescription('Revert Cyan software release')
cyanDtmSecServState = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 50), CyanSecServiceStateTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmSecServState.setStatus('current')
if mibBuilder.loadTexts: cyanDtmSecServState.setDescription('Secondary service state')
cyanDtmSynchLed = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 51), CyanLEDTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmSynchLed.setStatus('current')
if mibBuilder.loadTexts: cyanDtmSynchLed.setDescription('Synch LED status')
cyanDtmType = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 52), CyanTypeTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmType.setStatus('current')
if mibBuilder.loadTexts: cyanDtmType.setDescription('Equipment type')
cyanDtmUndervoltageThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 53), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmUndervoltageThreshold.setStatus('current')
if mibBuilder.loadTexts: cyanDtmUndervoltageThreshold.setDescription('Under-voltage warning threshold')
cyanDtmUpgradeCyanSwBuildVersions = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 54), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmUpgradeCyanSwBuildVersions.setStatus('current')
if mibBuilder.loadTexts: cyanDtmUpgradeCyanSwBuildVersions.setDescription('Upgrade Cyan software build versions')
cyanDtmUpgradeCyanSwRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 1, 1, 1, 55), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cyanDtmUpgradeCyanSwRelease.setStatus('current')
if mibBuilder.loadTexts: cyanDtmUpgradeCyanSwRelease.setDescription('Upgrade Cyan software release')
cyanDtmObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 20)).setObjects(("CYAN-DTM-MIB", "cyanDtmActiveLed"), ("CYAN-DTM-MIB", "cyanDtmActivestandbyState"), ("CYAN-DTM-MIB", "cyanDtmAdminState"), ("CYAN-DTM-MIB", "cyanDtmAlarmLed"), ("CYAN-DTM-MIB", "cyanDtmAssetTag"), ("CYAN-DTM-MIB", "cyanDtmAutoinserviceSoakTimeSec"), ("CYAN-DTM-MIB", "cyanDtmBaseMacAddress"), ("CYAN-DTM-MIB", "cyanDtmCurrCyanSwBuildVersions"), ("CYAN-DTM-MIB", "cyanDtmCurrCyanSwRelease"), ("CYAN-DTM-MIB", "cyanDtmCurrent"), ("CYAN-DTM-MIB", "cyanDtmDescription"), ("CYAN-DTM-MIB", "cyanDtmExhaustAirTemp"), ("CYAN-DTM-MIB", "cyanDtmExhaustTempAlarmHighThres"), ("CYAN-DTM-MIB", "cyanDtmExhaustTempAlarmLowThres"), ("CYAN-DTM-MIB", "cyanDtmExhaustTempWarnHighThres"), ("CYAN-DTM-MIB", "cyanDtmExhaustTempWarnLowThres"), ("CYAN-DTM-MIB", "cyanDtmExpectedTemperatureRise"), ("CYAN-DTM-MIB", "cyanDtmIdentifier"), ("CYAN-DTM-MIB", "cyanDtmIntakeAirTemp"), ("CYAN-DTM-MIB", "cyanDtmIntakeTempAlarmHighThres"), ("CYAN-DTM-MIB", "cyanDtmIntakeTempAlarmLowThres"), ("CYAN-DTM-MIB", "cyanDtmIntakeTempWarnHighThres"), ("CYAN-DTM-MIB", "cyanDtmIntakeTempWarnLowThres"), ("CYAN-DTM-MIB", "cyanDtmLedTest"), ("CYAN-DTM-MIB", "cyanDtmMacBlockSize"), ("CYAN-DTM-MIB", "cyanDtmMfgCleiCode"), ("CYAN-DTM-MIB", "cyanDtmMfgEciCode"), ("CYAN-DTM-MIB", "cyanDtmMfgModuleId"), ("CYAN-DTM-MIB", "cyanDtmMfgPartNumber"), ("CYAN-DTM-MIB", "cyanDtmMfgRevision"), ("CYAN-DTM-MIB", "cyanDtmMfgSerialNumber"), ("CYAN-DTM-MIB", "cyanDtmName"), ("CYAN-DTM-MIB", "cyanDtmOidClass"), ("CYAN-DTM-MIB", "cyanDtmOperState"), ("CYAN-DTM-MIB", "cyanDtmOperStateQual"), ("CYAN-DTM-MIB", "cyanDtmOssLabel"), ("CYAN-DTM-MIB", "cyanDtmOvervoltageThreshold"), ("CYAN-DTM-MIB", "cyanDtmOwner"), ("CYAN-DTM-MIB", "cyanDtmPartNumber"), ("CYAN-DTM-MIB", "cyanDtmPowerLed"), ("CYAN-DTM-MIB", "cyanDtmPsuTemperature"), ("CYAN-DTM-MIB", "cyanDtmPwrFeedAStatus"), ("CYAN-DTM-MIB", "cyanDtmPwrFeedAVoltage"), ("CYAN-DTM-MIB", "cyanDtmPwrFeedBStatus"), ("CYAN-DTM-MIB", "cyanDtmPwrFeedBVoltage"), ("CYAN-DTM-MIB", "cyanDtmRevertCyanSwBuildVersions"), ("CYAN-DTM-MIB", "cyanDtmRevertCyanSwRelease"), ("CYAN-DTM-MIB", "cyanDtmSecServState"), ("CYAN-DTM-MIB", "cyanDtmSynchLed"), ("CYAN-DTM-MIB", "cyanDtmType"), ("CYAN-DTM-MIB", "cyanDtmUndervoltageThreshold"), ("CYAN-DTM-MIB", "cyanDtmUpgradeCyanSwBuildVersions"), ("CYAN-DTM-MIB", "cyanDtmUpgradeCyanSwRelease"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cyanDtmObjectGroup = cyanDtmObjectGroup.setStatus('current')
if mibBuilder.loadTexts: cyanDtmObjectGroup.setDescription('Group of objects that comes with Dtm module')
cyanDtmCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 28533, 5, 30, 120, 30)).setObjects(("CYAN-DTM-MIB", "cyanDtmObjectGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cyanDtmCompliance = cyanDtmCompliance.setStatus('current')
if mibBuilder.loadTexts: cyanDtmCompliance.setDescription('The basic info needed to be a cyan Dtm')
mibBuilder.exportSymbols("CYAN-DTM-MIB", cyanDtmCurrCyanSwBuildVersions=cyanDtmCurrCyanSwBuildVersions, cyanDtmTable=cyanDtmTable, cyanDtmMacBlockSize=cyanDtmMacBlockSize, cyanDtmPwrFeedAStatus=cyanDtmPwrFeedAStatus, cyanDtmOidClass=cyanDtmOidClass, cyanDtmIntakeTempWarnLowThres=cyanDtmIntakeTempWarnLowThres, cyanDtmPartNumber=cyanDtmPartNumber, cyanDtmRevertCyanSwBuildVersions=cyanDtmRevertCyanSwBuildVersions, cyanDtmCompliance=cyanDtmCompliance, cyanDtmActiveLed=cyanDtmActiveLed, cyanDtmExpectedTemperatureRise=cyanDtmExpectedTemperatureRise, cyanDtmPsuTemperature=cyanDtmPsuTemperature, cyanDtmIdentifier=cyanDtmIdentifier, cyanDtmObjectGroup=cyanDtmObjectGroup, cyanDtmPowerLed=cyanDtmPowerLed, cyanDtmModule=cyanDtmModule, cyanDtmSynchLed=cyanDtmSynchLed, cyanDtmDescription=cyanDtmDescription, cyanDtmExhaustTempWarnHighThres=cyanDtmExhaustTempWarnHighThres, cyanDtmOvervoltageThreshold=cyanDtmOvervoltageThreshold, cyanDtmMfgEciCode=cyanDtmMfgEciCode, cyanDtmExhaustTempAlarmLowThres=cyanDtmExhaustTempAlarmLowThres, cyanDtmAdminState=cyanDtmAdminState, cyanDtmCurrCyanSwRelease=cyanDtmCurrCyanSwRelease, cyanDtmIntakeTempAlarmHighThres=cyanDtmIntakeTempAlarmHighThres, cyanDtmSecServState=cyanDtmSecServState, cyanDtmBaseMacAddress=cyanDtmBaseMacAddress, cyanDtmExhaustAirTemp=cyanDtmExhaustAirTemp, cyanDtmIntakeTempWarnHighThres=cyanDtmIntakeTempWarnHighThres, cyanDtmCurrent=cyanDtmCurrent, cyanDtmActivestandbyState=cyanDtmActivestandbyState, cyanDtmExhaustTempWarnLowThres=cyanDtmExhaustTempWarnLowThres, cyanDtmMibObjects=cyanDtmMibObjects, cyanDtmUpgradeCyanSwBuildVersions=cyanDtmUpgradeCyanSwBuildVersions, cyanDtmMfgRevision=cyanDtmMfgRevision, cyanDtmPwrFeedBStatus=cyanDtmPwrFeedBStatus, cyanDtmOperStateQual=cyanDtmOperStateQual, cyanDtmUndervoltageThreshold=cyanDtmUndervoltageThreshold, cyanDtmExhaustTempAlarmHighThres=cyanDtmExhaustTempAlarmHighThres, cyanDtmMfgCleiCode=cyanDtmMfgCleiCode, cyanDtmIntakeTempAlarmLowThres=cyanDtmIntakeTempAlarmLowThres, cyanDtmType=cyanDtmType, PYSNMP_MODULE_ID=cyanDtmModule, cyanDtmEntry=cyanDtmEntry, cyanDtmMfgModuleId=cyanDtmMfgModuleId, cyanDtmShelfId=cyanDtmShelfId, cyanDtmPwrFeedBVoltage=cyanDtmPwrFeedBVoltage, cyanDtmUpgradeCyanSwRelease=cyanDtmUpgradeCyanSwRelease, cyanDtmOperState=cyanDtmOperState, cyanDtmAutoinserviceSoakTimeSec=cyanDtmAutoinserviceSoakTimeSec, cyanDtmAssetTag=cyanDtmAssetTag, cyanDtmIntakeAirTemp=cyanDtmIntakeAirTemp, cyanDtmOssLabel=cyanDtmOssLabel, cyanDtmAlarmLed=cyanDtmAlarmLed, cyanDtmOwner=cyanDtmOwner, cyanDtmDtmId=cyanDtmDtmId, cyanDtmMfgSerialNumber=cyanDtmMfgSerialNumber, cyanDtmMfgPartNumber=cyanDtmMfgPartNumber, cyanDtmName=cyanDtmName, cyanDtmRevertCyanSwRelease=cyanDtmRevertCyanSwRelease, cyanDtmLedTest=cyanDtmLedTest, cyanDtmPwrFeedAVoltage=cyanDtmPwrFeedAVoltage)
