#
# PySNMP MIB module HUAWEI-IPPOOL-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-IPPOOL-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:45:17 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ConstraintsIntersection", "SingleValueConstraint")
huaweiUtility, = mibBuilder.importSymbols("HUAWEI-MIB", "huaweiUtility")
Ipv6AddressPrefix, Ipv6Address, Ipv6AddressIfIdentifier = mibBuilder.importSymbols("IPV6-TC", "Ipv6AddressPrefix", "Ipv6Address", "Ipv6AddressIfIdentifier")
ObjectGroup, NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "ObjectGroup", "NotificationGroup", "ModuleCompliance")
Counter32, TimeTicks, Bits, Gauge32, ObjectIdentity, iso, Unsigned32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, NotificationType, MibIdentifier, Integer32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter32", "TimeTicks", "Bits", "Gauge32", "ObjectIdentity", "iso", "Unsigned32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "NotificationType", "MibIdentifier", "Integer32", "Counter64")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
hwIppool = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 6, 8))
hwIppool.setRevisions(('2015-08-12 00:00', '2015-03-31 00:00', '2015-02-11 00:00', '2014-12-26 00:00', '2014-12-26 00:00', '2014-07-25 00:00', '2014-03-14 00:00', '2013-11-28 00:00', '2013-11-08 00:00', '2013-10-17 00:00', '2013-07-27 00:00', '2013-07-19 00:00', '2013-05-22 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwIppool.setRevisionsDescriptions(('Modify V2.12-V2.13 mod hwIPPoolType for supporting local rui-slave address pool.', 'Modify V2.11-V2.12 mod for DAP warning fail reason.', 'Modify V2.10-V2.11 mod for hwIPv6RemotePoolExportHostRoutePDprefix.', 'Modify V2.09-V2.10 add for pool weight and DAP warning.', 'V2.08-V2.09 add for pool weight and DAP warning.', 'V2.07-V2.08 add four dhcpv6 server support polling.', ' V1.2-V1.3 add four nodes.', 'The MIB contains objects of module IPPOOL.', 'The MIB contains objects of module IPPOOL.', ' V1.3-V1.4 add three nodes for export NA/PD/ND route,three table for DHCP enhence.', ' V1.2-V1.3 add four nodes.', ' V1.1-V1.2 add two nodes for dhcp server down.', 'V1.0-V1.1 increate option/s size from 64 to 255.',))
if mibBuilder.loadTexts: hwIppool.setLastUpdated('201508120000Z')
if mibBuilder.loadTexts: hwIppool.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwIppool.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwIppool.setDescription('The MIB contains objects of module IPPOOL.')
hwIPPoolMibObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1))
hwIPPoolTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1), )
if mibBuilder.loadTexts: hwIPPoolTable.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolTable.setDescription('The configuration table of IP address pool.')
hwIPPoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"))
if mibBuilder.loadTexts: hwIPPoolEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolEntry.setDescription('The configuration list of IP address pool, which is used to configure the relevant attributes of the IP address pool inside the device.')
hwIPPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolIndex.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolIndex.setDescription('Exclusive index of address pool.')
hwIPPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 35))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolName.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolName.setDescription('IP address pool name, the service module guarantees the exclusiveness of the name.')
hwIPPoolRouterIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolRouterIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolRouterIPAddr.setDescription('Gateway IP address. By default, the mask is 255.255.255.255.')
hwIPPoolRouterIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolRouterIPMask.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolRouterIPMask.setDescription('Gateway mask. By default, the mask is 255.255.255.255.')
hwIPPoolPriDNSIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 5), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolPriDNSIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolPriDNSIPAddr.setDescription('Primary DNS IP address. By default, it is 255.255.255.255.')
hwIPPoolSecDNSIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 6), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolSecDNSIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolSecDNSIPAddr.setDescription('Second DNS IP address. By default, it is 255.255.255.255.')
hwIPPoolPriNBNSIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 7), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolPriNBNSIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolPriNBNSIPAddr.setDescription('Primary Netbios IP address. By default, it is 255.255.255.255.')
hwIPPoolSecNBNSIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 8), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolSecNBNSIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolSecNBNSIPAddr.setDescription('Second Netbios IP address. By default, it is 255.255.255.255.')
hwIPPoolIPAddrLease = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 9), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolIPAddrLease.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolIPAddrLease.setDescription('IP address lease: 0~(1000*24*60-1)(m) unit: minute. It is allowed not to specify the lease during the adding. The default value is 3*24*60(m).')
hwIPPoolStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolStatus.setDescription('Row admin status, either Add or Delete. Supports adding and deletion.')
hwIPPoolVPNInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolVPNInstance.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolVPNInstance.setDescription('IP VPN-instance name.')
hwIPPoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("local", 1), ("relay", 2), ("server", 3), ("localRuiSlave", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolType.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolType.setDescription('Value indicates the type of pool, 1-local, 2-relay, 3-server, 4-localRuiSlave.')
hwIPPoolNetwork = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 13), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolNetwork.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolNetwork.setDescription('Network ip address of a DHCP Server global pool. To delete a configured network ip, please set hwDHCPSGlobalPoolConfigUndoFlag to 1')
hwIPPoolNetworkMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolNetworkMask.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolNetworkMask.setDescription('Net mask of a DHCP Server global pool(network). The SET operation to this object ought to be with the SET of hwDHCPSGlobalPoolNetwork together, and any SET operation alone to this object will be regarded as an invalid operation. When a network ip of a DHCP server global pool was deleted, the net mask would also be deleted automatically, and no further operation needed')
hwIPPoolIPTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolIPTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolIPTotalNum.setDescription('the number of total addresses.')
hwIPPoolIPUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolIPUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolIPUsedNum.setDescription('the number of used addresses.')
hwIPPoolIPConflictNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolIPConflictNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolIPConflictNum.setDescription('the number of conflict addresses.')
hwIPPoolIPExcludeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolIPExcludeNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolIPExcludeNum.setDescription('the number of exclude addresses.')
hwIPPoolIPIdleNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolIPIdleNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolIPIdleNum.setDescription('the number of idle addresses.')
hwIPPoolIPUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolIPUsedPercent.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolIPUsedPercent.setDescription('used percent.')
hwIPPoolDNSIPAddrString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 21), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolDNSIPAddrString.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDNSIPAddrString.setDescription('String of DNS server ip addresses for DHCP clients. Since mostly 8 ip addresses can be configured for a pool totally, a string is defined to get or configure 8 ip addresses at a time')
hwIPPoolDNSIPAddrStringUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 22), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolDNSIPAddrStringUndo.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDNSIPAddrStringUndo.setDescription('A DNS server ip address to be deleted. This object is only for deleting a given ip address of DNS server.')
hwIPPoolNBNSIPAddrString = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 23), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolNBNSIPAddrString.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolNBNSIPAddrString.setDescription('String of NetBIOS server ip addresses for DHCP clients. Since mostly 8 ip addresses can be configured for a pool totally, so a string is defined to get or configure 8 ip addresses at a time')
hwIPPoolNBNSIPAddrStringUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 24), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 129))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolNBNSIPAddrStringUndo.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolNBNSIPAddrStringUndo.setDescription('A NetBIOS server ip address to delete. This object is only for deleting a given ip address of NetBIOS server')
hwIPPoolRouterUnnumberedIfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 25), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolRouterUnnumberedIfName.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolRouterUnnumberedIfName.setDescription('unnumbered interface name.')
hwIPPoolConflictAutoRecycleInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(ValueRangeConstraint(0, 0), ValueRangeConstraint(30, 1440), ))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolConflictAutoRecycleInterval.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolConflictAutoRecycleInterval.setDescription('The flag indicates whether funtion of conflict auto recycle is enabled.')
hwIPPoolLowAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 27), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolLowAddr.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolLowAddr.setDescription('The lowest IP address in the pool.')
hwIPPoolHighAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 28), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolHighAddr.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolHighAddr.setDescription('The highest IP address in the pool.')
hwIPPoolReqNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 29), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolReqNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolReqNum.setDescription('The number of the request packet.')
hwIPPoolReqSucNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 1, 1, 30), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolReqSucNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolReqSucNum.setDescription('The number of the effective request packet.')
hwIPSectionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 2), )
if mibBuilder.loadTexts: hwIPSectionTable.setStatus('current')
if mibBuilder.loadTexts: hwIPSectionTable.setDescription('The configuration table of IP section.')
hwIPSectionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 2, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"), (0, "HUAWEI-IPPOOL-MIB", "hwIPSectionIndex"))
if mibBuilder.loadTexts: hwIPSectionEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPSectionEntry.setDescription('IPSection Entry. IP section configuration table, used to manage the IP address of user. There are at most eight address sections to each address pool. Its indexes are hwIPPoolIndex (from the external) and HwIPSectionIndex.')
hwIPSectionIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 2, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPSectionIndex.setStatus('current')
if mibBuilder.loadTexts: hwIPSectionIndex.setDescription('Index of address section.')
hwIPSectionDesc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 2, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPSectionDesc.setStatus('current')
if mibBuilder.loadTexts: hwIPSectionDesc.setDescription('IP section DESCRIPTION, which can be empty.')
hwIPSectionLowAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPSectionLowAddr.setStatus('current')
if mibBuilder.loadTexts: hwIPSectionLowAddr.setDescription('Start of address.')
hwIPSectionHighAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPSectionHighAddr.setStatus('current')
if mibBuilder.loadTexts: hwIPSectionHighAddr.setDescription('End of address.')
hwIPSectionLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPSectionLength.setStatus('current')
if mibBuilder.loadTexts: hwIPSectionLength.setDescription("IP section's length.")
hwIPSectionUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 2, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPSectionUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwIPSectionUsedNum.setDescription('The number of Used addresses.')
hwIPSectionConflict = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 2, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPSectionConflict.setStatus('current')
if mibBuilder.loadTexts: hwIPSectionConflict.setDescription('The number of conflict addresses.')
hwIPSectionInvalid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPSectionInvalid.setStatus('current')
if mibBuilder.loadTexts: hwIPSectionInvalid.setDescription('The number of invalid addresses.')
hwIPSectionAvailableNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 2, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65536))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPSectionAvailableNum.setStatus('current')
if mibBuilder.loadTexts: hwIPSectionAvailableNum.setDescription('The number of available addresses.')
hwIPSectionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 2, 1, 10), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPSectionRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPSectionRowStatus.setDescription('Row admin status, either Add or Delete.')
hwIPPoolExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3), )
if mibBuilder.loadTexts: hwIPPoolExtTable.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolExtTable.setDescription('Extend table of the local address pool. When IP addresses are allocated by the built-in DHCP servers, you need to configure the lease and option.')
hwIPPoolExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"))
if mibBuilder.loadTexts: hwIPPoolExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolExtEntry.setDescription('DESCRIPTION.')
hwIPPoolAvailableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolAvailableStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolAvailableStatus.setDescription('Whether the address is prohibited.')
hwIPDhcpOptionId1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPDhcpOptionId1.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOptionId1.setDescription('Option ID. When IP addresses are allocated by the built-in DHCP sever, the option is a configuration parameter, which needs to be defined and explained by the carrier.')
hwIPDhcpOption1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPDhcpOption1.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOption1.setDescription('Value of the option.')
hwIPDhcpOptionId2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPDhcpOptionId2.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOptionId2.setDescription('Option ID. When IP addresses are allocated by the built-in DHCP sever, the option is a configuration parameter, which needs to be defined and explained by the carrier.')
hwIPDhcpOption2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPDhcpOption2.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOption2.setDescription('Value of the option.')
hwIPDhcpOptionId3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPDhcpOptionId3.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOptionId3.setDescription('Option ID. When IP addresses are allocated by the built-in DHCP sever, the option is a configuration parameter, which needs to be defined and explained by the carrier.')
hwIPDhcpOption3 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPDhcpOption3.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOption3.setDescription('Value of the option.')
hwIPDhcpOptionId4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(128, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPDhcpOptionId4.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOptionId4.setDescription('Option ID. When IP addresses are allocated by the built-in DHCP sever, the option is a configuration parameter, which needs to be defined and explained by the carrier.')
hwIPDhcpOption4 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPDhcpOption4.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOption4.setDescription('Value of the option.')
hwIPDnsSuffix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 50))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPDnsSuffix.setStatus('current')
if mibBuilder.loadTexts: hwIPDnsSuffix.setDescription('DNS suffix, a string of 0-50 characters. If the value is 0, it indicates that the suffix is deleted.')
hwIPDhcpSvrIPRsv = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPDhcpSvrIPRsv.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpSvrIPRsv.setDescription('mode of IP addresses reserving. 1 indicates leasing management, 2 indicates MAC binding, and other values are invalid. ')
hwIPPoolIpAddrRenewal = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 12), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolIpAddrRenewal.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolIpAddrRenewal.setDescription('ip address renewal: 0~(1000*24*60-1)(m) unit: minute. It is allowed not to specify the renewal during the adding. The default value is 2160(m)')
hwIPPoolIpAddrRebinding = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 13), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolIpAddrRebinding.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolIpAddrRebinding.setDescription('ip address rebinding: 0~(1000*24*60-1)(m) unit: minute. It is allowed not to specify the renewal during the adding. The default value is 3780(m)')
hwIPPoolSIPAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 14), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolSIPAddr1.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolSIPAddr1.setDescription('SIP Server IP address')
hwIPPoolSIPAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 15), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolSIPAddr2.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolSIPAddr2.setDescription('SIP Server IP address')
hwIPPoolSIPName1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 16), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolSIPName1.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolSIPName1.setDescription('The name of SIP server. 0 indicates to delete the SIP server. ')
hwIPPoolSIPName2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 3, 1, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 63))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolSIPName2.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolSIPName2.setDescription('The name of SIP server. 0 indicates to delete the SIP server. ')
hwIPAddressStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 4), )
if mibBuilder.loadTexts: hwIPAddressStatusTable.setStatus('current')
if mibBuilder.loadTexts: hwIPAddressStatusTable.setDescription('Address status table. It supports the query and setting of status of the local address pool. It does not support the query and setting of status of the remote address pool for the following reasons: 1. The status of the remote address pool cannot be set. 2. The remote and local address pools map different status tables, with different indexes. 3. The remote address pool is managed by the remote equipment, rather than the local equipment. The local equipment displays only the approximate status of the remote address pool.')
hwIPAddressStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 4, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"), (0, "HUAWEI-IPPOOL-MIB", "hwIPSectionIndex"), (0, "HUAWEI-IPPOOL-MIB", "hwIPAddress"))
if mibBuilder.loadTexts: hwIPAddressStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPAddressStatusEntry.setDescription('DESCRIPTION.')
hwIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 4, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwIPAddress.setDescription('IP address.')
hwIPAddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("idle", 0), ("occupied", 1), ("prohibitive", 2), ("conflictive", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPAddressStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPAddressStatus.setDescription('Status of the address.')
hwPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 4, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwPoolName.setStatus('current')
if mibBuilder.loadTexts: hwPoolName.setDescription('IP address pool name.')
hwDhcpSvrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 5), )
if mibBuilder.loadTexts: hwDhcpSvrGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSvrGroupTable.setDescription('Configuration table of the DHCP server group. To monitor the status of the remote DHCP server, you need to configure the local DHCP server. You can configure a maximum of 4094 DHCP server groups. Each server group consists of two DHCP servers. Select the server based on the server status.')
hwDhcpSvrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 5, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPPoolDhcpSvrGroupIndex"))
if mibBuilder.loadTexts: hwDhcpSvrGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSvrGroupEntry.setDescription('DESCRIPTION.')
hwIPPoolDhcpSvrGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolDhcpSvrGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDhcpSvrGroupIndex.setDescription('Index of a DHCP server group. When you create an address pool, the equipment adds the hwIPPoolDhcpSvrGroupIndex entry by default and sends it to the NMS.')
hwIPPoolDhcpSvrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 5, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolDhcpSvrGroupName.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDhcpSvrGroupName.setDescription('Name of the DHCP server group.')
hwIPDhcpSvrPriAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPDhcpSvrPriAddr.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpSvrPriAddr.setDescription('Primary IP address of the DHCP server group.')
hwIPDhcpSvrScdiAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPDhcpSvrScdiAddr.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpSvrScdiAddr.setDescription('Secondary IP address of the DHCP server group.')
hwIPDhcpSvrPriState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 5, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stop", 0), ("use", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPDhcpSvrPriState.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpSvrPriState.setDescription('Status of the primary DHCP server.')
hwIPDhcpScdPriState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 5, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("stop", 0), ("use", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPDhcpScdPriState.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpScdPriState.setDescription('Status of the secondary DHCP server.')
hwIPDhcpSvrAutoRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 5, 1, 7), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPDhcpSvrAutoRelease.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpSvrAutoRelease.setDescription('Whether the server supports the Release packet.')
hwIPDhcpSvrRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 5, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPDhcpSvrRefCount.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpSvrRefCount.setDescription('Number of times the server group is referenced.')
hwIPDhcpSvrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 5, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpSvrRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpSvrRowStatus.setDescription('DHCP server row status.')
hwIPDhcpSvrPriVpnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 5, 1, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpSvrPriVpnInstance.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpSvrPriVpnInstance.setDescription('VPN instance of the primary DHCP server.')
hwIPDhcpSvrScdVpnInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 5, 1, 11), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpSvrScdVpnInstance.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpSvrScdVpnInstance.setDescription('VPN instance of the secondary DHCP server.')
hwIPDhcpSvrSouce = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 5, 1, 12), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpSvrSouce.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpSvrSouce.setDescription('DHCP source interface address.')
hwRemotePoolTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6), )
if mibBuilder.loadTexts: hwRemotePoolTable.setStatus('current')
if mibBuilder.loadTexts: hwRemotePoolTable.setDescription('Configuration table of the remote address pool. The remote address pool must be configured on the local equipment in the following cases: Users obtain IP addresses through the built-in DHCP client and need to renew the addresses. The equipment needs to record the IP addresses to be renewed. The equipment needs to report the routes of the users.')
hwRemotePoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolIndex"))
if mibBuilder.loadTexts: hwRemotePoolEntry.setStatus('current')
if mibBuilder.loadTexts: hwRemotePoolEntry.setDescription('DESCRIPTION.')
hwRemoteIPPoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRemoteIPPoolIndex.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolIndex.setDescription('Index of an address pool. When you create an address pool, the equipment adds the hwRemoteIPPoolIndex x entry by default and sends it the NMS. ')
hwRemoteIPPoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRemoteIPPoolName.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolName.setDescription('Name of an address pool. The service module ensures that the name is unique.')
hwRemoteIPPoolRouterIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteIPPoolRouterIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolRouterIPAddr.setDescription('IP address of the gateway.')
hwRemoteIPPoolRouterIPMask = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteIPPoolRouterIPMask.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolRouterIPMask.setDescription('IP address mask.')
hwRemoteIPPoolDhcpSvrGroupID = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteIPPoolDhcpSvrGroupID.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolDhcpSvrGroupID.setDescription('Name of the associated DHCP server group.')
hwRemoteIPPoolAvailableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("locked", 0), ("unlocked", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteIPPoolAvailableStatus.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolAvailableStatus.setDescription('Whether the address pool is locked, 0: locked, 1: not locked.')
hwRemoteIPPoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwRemoteIPPoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolRowStatus.setDescription(' Row status of IP pool. ')
hwRemoteIPPoolPriDNSIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteIPPoolPriDNSIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolPriDNSIPAddress.setDescription('IP address of the active DNS server.')
hwRemoteIPPoolSecDNSIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 9), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteIPPoolSecDNSIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolSecDNSIPAddress.setDescription('IP address of the standby DNS server.')
hwRemoteIPPoolPriNBNSIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 10), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteIPPoolPriNBNSIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolPriNBNSIPAddress.setDescription('IP address of the active NBNS server.')
hwRemoteIPPoolSecNBNSIPAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 11), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteIPPoolSecNBNSIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolSecNBNSIPAddress.setDescription('IP address of the standby NBNS server.')
hwRemoteIPPoolVPNInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteIPPoolVPNInstance.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolVPNInstance.setDescription('IP VPN-instance name.')
hwRemoteIPPoolDhcpGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 13), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwRemoteIPPoolDhcpGroupName.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolDhcpGroupName.setDescription('DHCP server group name.')
hwRemoteIPPoolLeaseManageEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("disable", 0), ("enable", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteIPPoolLeaseManageEnable.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolLeaseManageEnable.setDescription('Whether the address pool lease manage is enable, 0: diable, 1: enable.')
hwRemoteIPPoolWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 6, 1, 15), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwRemoteIPPoolWeight.setStatus('current')
if mibBuilder.loadTexts: hwRemoteIPPoolWeight.setDescription('The weight of this Remote IP pool.')
hwIPPoolStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 7))
hwIPPoolNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 7, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolNum.setDescription('Number of configured addresses pools.')
hwIPIdleTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 7, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPIdleTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwIPIdleTotalNum.setDescription('Number of idle addresses on the equipment.')
hwIPUsedTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 7, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPUsedTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwIPUsedTotalNum.setDescription('Number of addresses in use on the equipment.')
hwIPConflictTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPConflictTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwIPConflictTotalNum.setDescription('Number of conflicting addresses on the equipment.')
hwIPExcludeTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 7, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPExcludeTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwIPExcludeTotalNum.setDescription('Number of excluded addresses on the equipment.')
hwIPTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 7, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwIPTotalNum.setDescription('The total number of IP address.')
hwIPUsedPercent = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 7, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPUsedPercent.setStatus('current')
if mibBuilder.loadTexts: hwIPUsedPercent.setDescription('The percent of used IP address.')
hwDhcpServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 8), )
if mibBuilder.loadTexts: hwDhcpServerTable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpServerTable.setDescription('DHCP server configuration table.')
hwDhcpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 8, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwDhcpServerIndex"))
if mibBuilder.loadTexts: hwDhcpServerEntry.setStatus('current')
if mibBuilder.loadTexts: hwDhcpServerEntry.setDescription('Description.')
hwDhcpServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpServerIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpServerIndex.setDescription('The index of DHCP server.')
hwIPPoolDhcpServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 8, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolDhcpServerIP.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDhcpServerIP.setDescription('The IP address of DHCP server.')
hwIPPoolDhcpServerVRFName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 8, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolDhcpServerVRFName.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDhcpServerVRFName.setDescription('The name of VPN instance for the master DHCP server. ')
hwIPPoolDhcpServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolDhcpServerState.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDhcpServerState.setDescription('The state of DHCP server.')
hwIPPoolDhcpServerSendDisvSpdNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 8, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolDhcpServerSendDisvSpdNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDhcpServerSendDisvSpdNum.setDescription('The send discovering speed number.')
hwIPPoolDhcpServerSendDisvSpdSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 8, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolDhcpServerSendDisvSpdSec.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDhcpServerSendDisvSpdSec.setDescription('The interval of discovery packets sent by DHCP server. ')
hwIPPoolDhcpServerDeadCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 8, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolDhcpServerDeadCount.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDhcpServerDeadCount.setDescription('The threshold of no response packets from DHCP server, when the number count over the threshold, DHCP server is changed from up to down status. The default value is 1.')
hwIPPoolDhcpServerNakCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolDhcpServerNakCount.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDhcpServerNakCount.setDescription('The threshold of nak packets from DHCP server, when nak packets count over the threshold, DHCP server is changed from up to down status. The default value is 10.')
hwIPPoolDhcpServerTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 8, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 60))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolDhcpServerTimeout.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDhcpServerTimeout.setDescription('The timeout interval for response packet,the time unit is second and default value is 25 seconds.')
hwIPPoolDhcpServerDeadTime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 8, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolDhcpServerDeadTime.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDhcpServerDeadTime.setDescription('The interval of DHCP server automatically recover up status, the time unit is minute and default value is 3 minutes.')
hwIPPoolOptionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 9), )
if mibBuilder.loadTexts: hwIPPoolOptionTable.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolOptionTable.setDescription('A table for configuring options to DHCP server pools, include option code type and value and so on .')
hwIPPoolOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 9, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"), (0, "HUAWEI-IPPOOL-MIB", "hwIPDhcpOptionId"))
if mibBuilder.loadTexts: hwIPPoolOptionEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolOptionEntry.setDescription('DESCRIPTION.')
hwIPDhcpOptionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPDhcpOptionId.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOptionId.setDescription('Option ID. When IP addresses are allocated by the built-in DHCP sever, the option is a configuration parameter, which needs to be defined and explained by the carrier.')
hwIPDhcpOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 9, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPDhcpOption.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOption.setDescription('Value of the option.')
hwIPDhcpOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 9, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpOptionRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOptionRowStatus.setDescription('This object is used to configuration new rows in this table, modify existing rows, and to delete existing rows.Only three actions are used: active(1), createAndGo(4), destroy(6). while configuration new option, you must specify option type and value')
hwIPPoolGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 10), )
if mibBuilder.loadTexts: hwIPPoolGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupTable.setDescription('Configuration table of the address Pool Group. IP Pool Group support an aggregation of IP Pools. Many Ip Pools of different gateway can be referenced by IP Pool Group. The max number of IP Pools referenced by an Ip Pool Group is 1024 ')
hwIPPoolGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 10, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPPoolGroupName"))
if mibBuilder.loadTexts: hwIPPoolGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupEntry.setDescription('The configuration list of IP address pool group, which is used to configure the relevant attributes of the IP address pool group inside the device.')
hwIPPoolGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 10, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolGroupName.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupName.setDescription(' Name of an IP Pool Group. ')
hwIPPoolGroupVPNInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 10, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolGroupVPNInstance.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupVPNInstance.setDescription(" Vpn instance of an address Pool Group. Vpn instance of All IP Pools must accord with the vpn instance of IP Pool Group. Use string '--' to undo vpn instance in Pool Group. ")
hwIPPoolGroupIncludeUndo = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 10, 1, 3), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolGroupIncludeUndo.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupIncludeUndo.setDescription('Whether dereference all IP Pools in Pool Group. Only support dereference all IP Pools in this operation. If dereference Pool one by one is needed, please use IPPoolGroupExtTable. ')
hwIPPoolGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 10, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupRowStatus.setDescription(' Row status of IP Pool Group. Support Active, CreateAndGo and Destroy. ')
hwIPPoolGroupExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 11), )
if mibBuilder.loadTexts: hwIPPoolGroupExtTable.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupExtTable.setDescription('Configuration extension table of the address pool group. The extension table can set the order of an IP pool in IP Pool Group. The extension table can be used to dereference an IP pool in IP pool Group. ')
hwIPPoolGroupExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 11, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPPoolGroupName"), (0, "HUAWEI-IPPOOL-MIB", "hwIPPoolGroupExtIncludePoolName"))
if mibBuilder.loadTexts: hwIPPoolGroupExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupExtEntry.setDescription('The configuration list of IP address pool group extension table.')
hwIPPoolGroupExtIncludePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 11, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolGroupExtIncludePoolName.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupExtIncludePoolName.setDescription(' The IP Pool referenced in IP Pool Group. ')
hwIPPoolGroupExtIncludePoolMoveOrder = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolGroupExtIncludePoolMoveOrder.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupExtIncludePoolMoveOrder.setDescription('The order of IP Pool in IP Pool Group. Specify the move order to adjust the order of the IP Pool in IP Pool Group. Only supoort set operation.')
hwIPPoolGroupExtRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 11, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolGroupExtRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupExtRowStatus.setDescription(' Row status of IP pool group extension. Support CreateAndGo and Destroy. ')
hwIPPoolGroupDisplayTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 12), )
if mibBuilder.loadTexts: hwIPPoolGroupDisplayTable.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupDisplayTable.setDescription(' Display table of the address pool group. ')
hwIPPoolGroupDisplayEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 12, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPPoolGroupName"))
if mibBuilder.loadTexts: hwIPPoolGroupDisplayEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupDisplayEntry.setDescription('The configuration list of IP address pool display group table.')
hwIPPoolGroupIncludePoolNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolGroupIncludePoolNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupIncludePoolNum.setDescription(' The number of IP Pools referenced in IP Pool Group. ')
hwIPPoolGroupBoundByDomainNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 12, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolGroupBoundByDomainNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupBoundByDomainNum.setDescription(' The number of IP Pool Groups referenced in domains. ')
hwIPPoolGroupIPTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 12, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolGroupIPTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupIPTotalNum.setDescription(' The Total number of IP in IP Pool Group. ')
hwIPPoolGroupIPUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 12, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolGroupIPUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupIPUsedNum.setDescription(' The Used number of IP in IP Pool Group. ')
hwIPPoolGroupIPConflictedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 12, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolGroupIPConflictedNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupIPConflictedNum.setDescription(' The Conflicted number of IP in IP Pool Group. ')
hwIPPoolGroupIPDisableNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 12, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolGroupIPDisableNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupIPDisableNum.setDescription(' The Disable number of IP in IP Pool Group. ')
hwIPPoolGroupIPDesignatedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 12, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolGroupIPDesignatedNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupIPDesignatedNum.setDescription(' The Designated number of IP in IP Pool Group. ')
hwIPPoolGroupIPFreeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 12, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolGroupIPFreeNum.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupIPFreeNum.setDescription(' The Free number of IP in IP Pool Group. ')
hwIPPoolGroupIPUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 12, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolGroupIPUsedPercent.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupIPUsedPercent.setDescription(' The Used Percent of IP in IP Pool Group. ')
hwIPPoolDomainSearchListTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 13), )
if mibBuilder.loadTexts: hwIPPoolDomainSearchListTable.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDomainSearchListTable.setDescription(' Set the domain search list which is uesed to fill content of DHCP packet option 119. The option is passed from the DHCP Server to the DHCP Client to specify the domain search list used when resolving hostnames using DNS. ')
hwIPv6PrefixTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16), )
if mibBuilder.loadTexts: hwIPv6PrefixTable.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixTable.setDescription(' The configuration table of IPv6 prefix pool. ')
hwIPv6PoolTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17), )
if mibBuilder.loadTexts: hwIPv6PoolTable.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolTable.setDescription(' The configuration table of IPv6 address pool. ')
hwIPv6PoolStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18), )
if mibBuilder.loadTexts: hwIPv6PoolStatusTable.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolStatusTable.setDescription(" The configuration table of IPv6 address pool's usage. ")
hwIPv6DuidBindPrefixTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 19), )
if mibBuilder.loadTexts: hwIPv6DuidBindPrefixTable.setStatus('current')
if mibBuilder.loadTexts: hwIPv6DuidBindPrefixTable.setDescription(' The binding of client DUID and prefix. ')
hwDhcpv6SvrGroupTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20), )
if mibBuilder.loadTexts: hwDhcpv6SvrGroupTable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6SvrGroupTable.setDescription(' The configuration table of the DHCPv6 server group. ')
hwIPv6RemotePoolTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 21), )
if mibBuilder.loadTexts: hwIPv6RemotePoolTable.setStatus('current')
if mibBuilder.loadTexts: hwIPv6RemotePoolTable.setDescription(' The configuration table of IPv6 remote address pool. ')
hwIPPoolDomainSearchListEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 13, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"), (0, "HUAWEI-IPPOOL-MIB", "hwIPPoolDomainSearchList"))
if mibBuilder.loadTexts: hwIPPoolDomainSearchListEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDomainSearchListEntry.setDescription('The configuration list of IP address pool DomainSearchList table.')
hwIPPoolDomainSearchList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 13, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPPoolDomainSearchList.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDomainSearchList.setDescription(' The domain search list which is used to fill content of DHCP packet option 119. ')
hwIPPoolDomainSearchListRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 13, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPPoolDomainSearchListRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDomainSearchListRowStatus.setDescription(' Row status of IP pool DomainSearchList. Support CreateAndGo and Destroy. ')
hwIPv6PrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPv6PrefixIndex"))
if mibBuilder.loadTexts: hwIPv6PrefixEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixEntry.setDescription('The configuration list of IPv6 prefix pool.')
hwIPv6PoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPv6PoolIndex"))
if mibBuilder.loadTexts: hwIPv6PoolEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolEntry.setDescription('The configuration list of IPv6 address pool.')
hwIPv6PoolStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPv6PoolIndex"))
if mibBuilder.loadTexts: hwIPv6PoolStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolStatusEntry.setDescription("The configuration list of IPv6 address pool's usage.")
hwIPv6DuidBindPrefixEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 19, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPv6PrefixIndex"), (0, "HUAWEI-IPPOOL-MIB", "hwIPv6ClientDuid"))
if mibBuilder.loadTexts: hwIPv6DuidBindPrefixEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPv6DuidBindPrefixEntry.setDescription("The binding of client's DUID and prefix.")
hwDhcpv6SvrGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwDhcpv6SvrGroupIndex"))
if mibBuilder.loadTexts: hwDhcpv6SvrGroupEntry.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6SvrGroupEntry.setDescription('The configuration list of DHCPv6 server group.')
hwIPv6RemotePoolEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 21, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPv6RemotePoolIndex"))
if mibBuilder.loadTexts: hwIPv6RemotePoolEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPv6RemotePoolEntry.setDescription('The configuration list of IPv6 remote address pool.')
hwIPv6PrefixIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6PrefixIndex.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixIndex.setDescription('The index of IPv6 prefix pool.')
hwIPv6PrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PrefixName.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixName.setDescription('The name of IPv6 prefix pool')
hwIPv6PrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("delegation", 2), ("remote", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PrefixType.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixType.setDescription('The type of IPv6 prefix pool.')
hwIPv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 4), Ipv6AddressPrefix()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6Prefix.setStatus('current')
if mibBuilder.loadTexts: hwIPv6Prefix.setDescription('The prefix of IPv6 prefix pool. This node is valid only for local and delegation prefix pool.')
hwIPv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 5), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixLen.setDescription('The prefix length of IPv6 prefix pool. Note that 0 is not a configurable value.')
hwIPv6PrefixDelegatingLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PrefixDelegatingLen.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixDelegatingLen.setDescription('The delegating prefix length of IPv6 prefix pool. Note that 0 is not a configurable value. This node is valid only for local and delegation prefix pool.')
hwIPv6PrefixAdvPreferredLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 7), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PrefixAdvPreferredLifetime.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixAdvPreferredLifetime.setDescription('The preferred lifetime(seconds) of IPv6 prefix pool.')
hwIPv6PrefixAdvValidLifetime = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 8), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PrefixAdvValidLifetime.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixAdvValidLifetime.setDescription('The valid lifetime(seconds) of the IPv6 prefix.')
hwIPv6PrefixAvailableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PrefixAvailableStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixAvailableStatus.setDescription('The flag indicating whether the IPv6 prefix pool is locked.')
hwIPv6VPNInstance = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 10), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6VPNInstance.setStatus('current')
if mibBuilder.loadTexts: hwIPv6VPNInstance.setDescription('The vpn instance name of the IPv6 prefix pool.')
hwIPv6PrefixReservedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("noneReserved", 0), ("macReserved", 1), ("macPlusLeaseReserved", 2), ("duidReserved", 3), ("duidPlusLeaseReserved", 4)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PrefixReservedFlag.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixReservedFlag.setDescription('The reserved flag of the IPv6 prefix pool. 0-none reserved, 1-mac reserved, 2-mac plus lease reserved, 3-duid reserved, 4-duid plus lease reserved.')
hwIPv6LinkAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 12), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6LinkAddress.setStatus('current')
if mibBuilder.loadTexts: hwIPv6LinkAddress.setDescription('The link address of the IPv6 remote prefix pool. This node is valid only for remote prefix pool.')
hwIPv6SlaacUnsharedFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 13), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6SlaacUnsharedFlag.setStatus('current')
if mibBuilder.loadTexts: hwIPv6SlaacUnsharedFlag.setDescription('The flag indicates whether prefix pool is used in unshared-mode. The node is valid only for delegation prefix pool.')
hwIPv6PrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PrefixRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixRowStatus.setDescription('Row admin status. Support adding, modification and deletion.')
hwIPPoolPDUnshareOnly = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 16, 1, 15), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolPDUnshareOnly.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolPDUnshareOnly.setDescription('The flag indicates whether the prefix pool only for DHCPv6 IA_PD. The node is valid only for delegation prefix pool.')
hwIPv6PoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6PoolIndex.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolIndex.setDescription('The index of IPv6 addres pool.')
hwIPv6PoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolName.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolName.setDescription('The name of IPv6 addres pool.')
hwIPv6PoolType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("local", 1), ("delegation", 2), ("relay", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolType.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolType.setDescription('The type of IPv6 addres pool.')
hwIPv6PoolPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolPrefixName.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolPrefixName.setDescription('The prefix pool name of IPv6 addres pool.')
hwIPv6PoolDnsIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1, 5), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 81))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolDnsIPAddr.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolDnsIPAddr.setDescription('The DNS of IPv6 addres pool. The format to set value is : operator+space+primary DNS+space+secondary DNS. operator: 1-Add, 2-Delete.')
hwIPv6PoolDnsSearchList = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolDnsSearchList.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolDnsSearchList.setDescription('The DNS search list of IPv6 addres pool.')
hwIPv6PoolPreference = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolPreference.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolPreference.setDescription('The preference of IPv6 addres pool.')
hwIPv6PoolAvailableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolAvailableStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolAvailableStatus.setDescription('The flag indicating whether IPv6 address pool is locked.')
hwIPv6PoolRenewPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolRenewPercent.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolRenewPercent.setDescription('The renew time percent of IPv6 addres pool. When hwIPv6PoolRenewPercent is specified, you need also specify hwIPv6PoolRebindingPercent.')
hwIPv6PoolRebindingPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(10, 99))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolRebindingPercent.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolRebindingPercent.setDescription('The rebinding time percent of IPv6 addres pool. When hwIPv6PoolRebindingPercent is specified, you need also specify hwIPv6PoolRenewPercent.')
hwIPv6PoolRapidCommitFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1, 11), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolRapidCommitFlag.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolRapidCommitFlag.setDescription('The flag indicating whether DHCPv6 rapid-commit is enabled.')
hwIPv6PoolUnicastOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1, 12), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolUnicastOption.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolUnicastOption.setDescription('The flag indicating whether DHCPv6 server unicast option is enabled.')
hwIPv6PoolAFTRName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 63))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolAFTRName.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolAFTRName.setDescription('Configure the name of Address Family Transition Router.')
hwIPv6PoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 17, 1, 14), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6PoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolRowStatus.setDescription('Row admin status. Support adding, modification and deletion.')
hwIPv6FreeAddressNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6FreeAddressNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6FreeAddressNum.setDescription('The free address number of IPv6 addres pool.')
hwIPv6UsedAddressNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6UsedAddressNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6UsedAddressNum.setDescription('The used address number of IPv6 addres pool.')
hwIPv6FreePrefixNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6FreePrefixNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6FreePrefixNum.setDescription('The free prefix number of IPv6 addres pool.')
hwIPv6UsedPrefixNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6UsedPrefixNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6UsedPrefixNum.setDescription('The used prefix number of IPv6 addres pool.')
hwIPv6AddressTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6AddressTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6AddressTotalNum.setDescription('The total IPv6 address number of IPv6 address pool.')
hwIPv6AddressUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6AddressUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6AddressUsedNum.setDescription('The used IPv6 address number of IPv6 address pool.')
hwIPv6AddressFreeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6AddressFreeNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6AddressFreeNum.setDescription('The free IPv6 address number of IPv6 address pool.')
hwIPv6AddressConflictNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6AddressConflictNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6AddressConflictNum.setDescription('The conflict IPv6 address number of IPv6 address pool.')
hwIPv6AddressExcludeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6AddressExcludeNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6AddressExcludeNum.setDescription('The excluded IPv6 address number of IPv6 address pool.')
hwIPv6AddressUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6AddressUsedPercent.setStatus('current')
if mibBuilder.loadTexts: hwIPv6AddressUsedPercent.setDescription('The percent of used IPv6 addressof IPv6 address pool.')
hwIPv6NDRAPrefixTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6NDRAPrefixTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6NDRAPrefixTotalNum.setDescription('The total NDRA prefix number of IPv6 address pool.')
hwIPv6NDRAPrefixUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6NDRAPrefixUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6NDRAPrefixUsedNum.setDescription('The used NDRA prefix number of IPv6 address pool.')
hwIPv6NDRAPrefixFreeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6NDRAPrefixFreeNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6NDRAPrefixFreeNum.setDescription('The free NDRA prefix number of IPv6 address pool.')
hwIPv6NDRAPrefixConflictNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6NDRAPrefixConflictNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6NDRAPrefixConflictNum.setDescription('The conflict NDRA prefix number of IPv6 address pool.')
hwIPv6NDRAPrefixExcludeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6NDRAPrefixExcludeNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6NDRAPrefixExcludeNum.setDescription('The excluded NDRA prefix number of IPv6 address pool.')
hwIPv6NDRAPrefixUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6NDRAPrefixUsedPercent.setStatus('current')
if mibBuilder.loadTexts: hwIPv6NDRAPrefixUsedPercent.setDescription('The percent of used IPv6 NDRA prefix of IPv6 address pool.')
hwIPv6PDPrefixTotalNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6PDPrefixTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PDPrefixTotalNum.setDescription('The total PD prefix number of IPv6 address pool.')
hwIPv6PDPrefixUsedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6PDPrefixUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PDPrefixUsedNum.setDescription('The used PD prefix number of IPv6 address pool.')
hwIPv6PDPrefixFreeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6PDPrefixFreeNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PDPrefixFreeNum.setDescription('The free PD prefix number of IPv6 address pool.')
hwIPv6PDPrefixConflictNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6PDPrefixConflictNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PDPrefixConflictNum.setDescription('The conflict PD prefix number of IPv6 address pool.')
hwIPv6PDPrefixExcludeNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6PDPrefixExcludeNum.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PDPrefixExcludeNum.setDescription('The excluded PD prefix number of IPv6 address pool.')
hwIPv6PDPrefixUsedPercent = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 18, 1, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6PDPrefixUsedPercent.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PDPrefixUsedPercent.setDescription('The percent of used IPv6 PD prefix of IPv6 address pool.')
hwIPv6ClientDuid = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 19, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(8, 28))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6ClientDuid.setStatus('current')
if mibBuilder.loadTexts: hwIPv6ClientDuid.setDescription('The client duid.')
hwIPv6BindPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 19, 1, 2), Ipv6AddressPrefix()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6BindPrefix.setStatus('current')
if mibBuilder.loadTexts: hwIPv6BindPrefix.setDescription('The binding prefix of client.')
hwIPv6DuidBindPrefixRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 19, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6DuidBindPrefixRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPv6DuidBindPrefixRowStatus.setDescription('Row admin status. Support adding and deletion.')
hwDhcpv6SvrGroupIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpv6SvrGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6SvrGroupIndex.setDescription('The index of DHCPv6 server group.')
hwDhcpv6SvrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpv6SvrGroupName.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6SvrGroupName.setDescription('The name of DHCPv6 server group.')
hwIPDhcpv6SvrAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 3), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpv6SvrAddr1.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpv6SvrAddr1.setDescription('The primary DNS address.')
hwIPDhcpv6SvrAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 4), Ipv6Address()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpv6SvrAddr2.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpv6SvrAddr2.setDescription('The seconday DNS address.')
hwIPDhcpv6PriSvrState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPDhcpv6PriSvrState.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpv6PriSvrState.setDescription('The status of primary DNS.')
hwIPDhcpv6ScdSvrState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPDhcpv6ScdSvrState.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpv6ScdSvrState.setDescription('The status of secondary DNS.')
hwIPDhcpv6SvrAutoRelease = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 7), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpv6SvrAutoRelease.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpv6SvrAutoRelease.setDescription('The flag indicating whether server will automaticly send DHCPv6 release packet.')
hwIPDhcpv6SvrGroupRefCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4096))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPDhcpv6SvrGroupRefCount.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpv6SvrGroupRefCount.setDescription('The referenced count of DHCPv6 server group.')
hwDhcpv6SvrInterface1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 9), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpv6SvrInterface1.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6SvrInterface1.setDescription('The outer interface of primary DHCPv6 server.')
hwDhcpv6SvrInterface2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 10), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpv6SvrInterface2.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6SvrInterface2.setDescription('The outer interface of secondary DHCPv6 server.')
hwDhcpv6SvrAlgorithm = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("masterbackup", 1), ("loadingshare", 2), ("polling", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpv6SvrAlgorithm.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6SvrAlgorithm.setDescription('The algorithm of selecting DHCPv6 server.')
hwDhcpv6SvrWeight1 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpv6SvrWeight1.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6SvrWeight1.setDescription('The weight of primary DHCPv6 server.')
hwDhcpv6SvrWeight2 = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpv6SvrWeight2.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6SvrWeight2.setDescription('The weight of secondary DHCPv6 server.')
hwIPDhcpv6Svr1VrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 14), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpv6Svr1VrfName.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpv6Svr1VrfName.setDescription('The vpn instance name of primary DHCPv6 server.')
hwIPDhcpv6Svr2VrfName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 15), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpv6Svr2VrfName.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpv6Svr2VrfName.setDescription('The vpn instance name of secondary DHCPv6 server.')
hwDhcpv6SvrGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 16), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpv6SvrGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6SvrGroupRowStatus.setDescription('Row admin status. Support adding, modification and deletion.')
hwDhcpv6SvrSourceInterface = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 20, 1, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 47))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwDhcpv6SvrSourceInterface.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6SvrSourceInterface.setDescription('The interface name whose IP address is the source IP address carried in the packets sent to the server.')
hwIPv6RemotePoolIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1023))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6RemotePoolIndex.setStatus('current')
if mibBuilder.loadTexts: hwIPv6RemotePoolIndex.setDescription('The index of remote address pool.')
hwIPv6RemotePoolName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 21, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6RemotePoolName.setStatus('current')
if mibBuilder.loadTexts: hwIPv6RemotePoolName.setDescription('The name of remote address pool.')
hwIPv6RemotePoolPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 21, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6RemotePoolPrefixName.setStatus('current')
if mibBuilder.loadTexts: hwIPv6RemotePoolPrefixName.setDescription('The prefix pool name of remote address pool.')
hwIPv6RemotePoolDhcpv6SvrGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 21, 1, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6RemotePoolDhcpv6SvrGroupName.setStatus('current')
if mibBuilder.loadTexts: hwIPv6RemotePoolDhcpv6SvrGroupName.setDescription('The DHCPv6 server group name of remote address pool.')
hwIPv6RemotePoolAvailableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 21, 1, 5), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6RemotePoolAvailableStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPv6RemotePoolAvailableStatus.setDescription('The flag indicating whether remote address pool is locked.')
hwIPv6RemotePoolExportHostRouteFlag = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 21, 1, 6), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6RemotePoolExportHostRouteFlag.setStatus('current')
if mibBuilder.loadTexts: hwIPv6RemotePoolExportHostRouteFlag.setDescription('The flag indicating whether to export ipv6 host route.')
hwIPv6RemotePoolRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 21, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6RemotePoolRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPv6RemotePoolRowStatus.setDescription('Row admin status. Support adding, modification and deletion.')
hwIPv6RemotePoolExportHostRouteIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 21, 1, 8), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6RemotePoolExportHostRouteIPv6Address.setStatus('current')
if mibBuilder.loadTexts: hwIPv6RemotePoolExportHostRouteIPv6Address.setDescription("The flag indicating whether to export host's ipv6 address route .")
hwIPv6RemotePoolExportHostRoutePDPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 21, 1, 9), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6RemotePoolExportHostRoutePDPrefix.setStatus('current')
if mibBuilder.loadTexts: hwIPv6RemotePoolExportHostRoutePDPrefix.setDescription("The flag indicating whether to export host's pd prefix route.")
hwIPv6RemotePoolExportHostRouteNDPrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 21, 1, 10), TruthValue()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPv6RemotePoolExportHostRouteNDPrefix.setStatus('current')
if mibBuilder.loadTexts: hwIPv6RemotePoolExportHostRouteNDPrefix.setDescription("The flag indicating whether to export host's nd prefix route.")
hwIPv6RemotePoolWeight = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 21, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPv6RemotePoolWeight.setStatus('current')
if mibBuilder.loadTexts: hwIPv6RemotePoolWeight.setDescription('The weight of this Remote IPv6 pool.')
hwIPv6PoolStatistic = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22))
hwIpv6PoolNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpv6PoolNum.setStatus('current')
if mibBuilder.loadTexts: hwIpv6PoolNum.setDescription('Number of configured IPv6 address pools.')
hwIpv6AddressIdleTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpv6AddressIdleTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwIpv6AddressIdleTotalNum.setDescription('Number of idle IPv6 addresses on the equipment.')
hwIpv6PrefixIdleTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpv6PrefixIdleTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwIpv6PrefixIdleTotalNum.setDescription('Number of idle IPv6 prefixes on the equipment.')
hwIpv6AddressUsedTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpv6AddressUsedTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwIpv6AddressUsedTotalNum.setDescription('Number of IPv6 addresses in use on the equipment.')
hwIpv6PrefixUsedTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpv6PrefixUsedTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwIpv6PrefixUsedTotalNum.setDescription('Number of IPv6 prefixes in use on the equipment.')
hwAllIPv6AddressTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllIPv6AddressTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwAllIPv6AddressTotalNum.setDescription('The total IPv6 address number.')
hwAllIPv6AddressUsedNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllIPv6AddressUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwAllIPv6AddressUsedNum.setDescription('The used IPv6 address number.')
hwAllIPv6AddressIdleNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllIPv6AddressIdleNum.setStatus('current')
if mibBuilder.loadTexts: hwAllIPv6AddressIdleNum.setDescription('The free IPv6 address number.')
hwAllIPv6ConflictAddressNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllIPv6ConflictAddressNum.setStatus('current')
if mibBuilder.loadTexts: hwAllIPv6ConflictAddressNum.setDescription('The conflict IPv6 address number.')
hwAllIPv6ExcludeAddressNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllIPv6ExcludeAddressNum.setStatus('current')
if mibBuilder.loadTexts: hwAllIPv6ExcludeAddressNum.setDescription('The excluded IPv6 address number.')
hwAllIPv6AddressUsedPercent = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllIPv6AddressUsedPercent.setStatus('current')
if mibBuilder.loadTexts: hwAllIPv6AddressUsedPercent.setDescription('The percent of used IPv6 address.')
hwAllNDRAPrefixTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllNDRAPrefixTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwAllNDRAPrefixTotalNum.setDescription('The total NDRA prefix number.')
hwAllNDRAPrefixUsedNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllNDRAPrefixUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwAllNDRAPrefixUsedNum.setDescription('The used NDRA prefix number.')
hwAllNDRAPrefixFreeNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllNDRAPrefixFreeNum.setStatus('current')
if mibBuilder.loadTexts: hwAllNDRAPrefixFreeNum.setDescription('The free NDRA prefix number.')
hwAllNDRAPrefixConflictNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllNDRAPrefixConflictNum.setStatus('current')
if mibBuilder.loadTexts: hwAllNDRAPrefixConflictNum.setDescription('The conflict NDRA prefix number.')
hwAllNDRAPrefixExcludeNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllNDRAPrefixExcludeNum.setStatus('current')
if mibBuilder.loadTexts: hwAllNDRAPrefixExcludeNum.setDescription('The excluded NDRA prefix number.')
hwAllNDRAPrefixUsedPercent = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllNDRAPrefixUsedPercent.setStatus('current')
if mibBuilder.loadTexts: hwAllNDRAPrefixUsedPercent.setDescription('The percent of used IPv6 NDRA prefix.')
hwAllPDPrefixTotalNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllPDPrefixTotalNum.setStatus('current')
if mibBuilder.loadTexts: hwAllPDPrefixTotalNum.setDescription('The total PD prefix number.')
hwAllPDPrefixUsedNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllPDPrefixUsedNum.setStatus('current')
if mibBuilder.loadTexts: hwAllPDPrefixUsedNum.setDescription('The used PD prefix number.')
hwAllPDPrefixFreeNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllPDPrefixFreeNum.setStatus('current')
if mibBuilder.loadTexts: hwAllPDPrefixFreeNum.setDescription('The free PD prefix number.')
hwAllPDPrefixConflictNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllPDPrefixConflictNum.setStatus('current')
if mibBuilder.loadTexts: hwAllPDPrefixConflictNum.setDescription('The conflict PD prefix number.')
hwAllPDPrefixExcludeNum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllPDPrefixExcludeNum.setStatus('current')
if mibBuilder.loadTexts: hwAllPDPrefixExcludeNum.setDescription('The excluded PD prefix number.')
hwAllPDPrefixUsedPercent = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 22, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwAllPDPrefixUsedPercent.setStatus('current')
if mibBuilder.loadTexts: hwAllPDPrefixUsedPercent.setDescription('The percent of used IPv6 PD prefix.')
hwDhcpv6ServerTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 23), )
if mibBuilder.loadTexts: hwDhcpv6ServerTable.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6ServerTable.setDescription(' DHCPv6 server configuration table. ')
hwDhcpv6ServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 23, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwDhcpv6SvrIndex"))
if mibBuilder.loadTexts: hwDhcpv6ServerEntry.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6ServerEntry.setDescription('The configuration of DHCPv6 server table.')
hwDhcpv6SvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 23, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpv6SvrIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6SvrIndex.setDescription('The index of DHCPv6 server.')
hwDhcpv6ServerIP = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 23, 1, 2), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpv6ServerIP.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6ServerIP.setDescription('The IPv6 address of DHCPv6 server.')
hwDhcpv6ServerVRFName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 23, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpv6ServerVRFName.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6ServerVRFName.setDescription('The name of VPN instance for the DHCPv6 server. ')
hwDhcpv6ServerIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 23, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpv6ServerIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6ServerIfIndex.setDescription('The IfIndex of DHCPv6 server.')
hwDhcpv6ServerState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 23, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("down", 0), ("up", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwDhcpv6ServerState.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6ServerState.setDescription('The state of DHCPv6 server.')
hwDhcpv6ServerSendSolicitSpeedNum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 23, 1, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpv6ServerSendSolicitSpeedNum.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6ServerSendSolicitSpeedNum.setDescription('The speed of sending solicit packet.')
hwDhcpv6ServerSendSolicitSpeedSec = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 23, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 10))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwDhcpv6ServerSendSolicitSpeedSec.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6ServerSendSolicitSpeedSec.setDescription('The interval of solicit packets sent by DHCPv6 server. ')
hwIPPoolOptionExtTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 14), )
if mibBuilder.loadTexts: hwIPPoolOptionExtTable.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolOptionExtTable.setDescription('A Ext table for configuring options to DHCP server pools, include option code type and value and so on .')
hwIPPoolOptionExtEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 14, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"), (0, "HUAWEI-IPPOOL-MIB", "hwIPDhcpOptionId"), (0, "HUAWEI-IPPOOL-MIB", "hwIPDhcpOptionSubId"))
if mibBuilder.loadTexts: hwIPPoolOptionExtEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolOptionExtEntry.setDescription('DESCRIPTION.')
hwIPDhcpOptionSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPDhcpOptionSubId.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOptionSubId.setDescription('Sub Option ID. When IP addresses are allocated by the built-in DHCP sever, the option is a configuration parameter, which needs to be defined and explained by the carrier.')
hwIPDhcpOptionSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 14, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ip", 1), ("string", 2)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpOptionSubType.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOptionSubType.setDescription('Value indicates the type of sub-option, 1-ip, 2-string.')
hwIPDhcpOptionSubValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 14, 1, 3), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpOptionSubValue.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOptionSubValue.setDescription('Value of the sub-option.')
hwIPDhcpOptionSubRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 14, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpOptionSubRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpOptionSubRowStatus.setDescription('This object is used to configuration new rows in this table, modify existing rows, and to delete existing rows.Only three actions are used: active(1), createAndGo(4), destroy(6). while configuration new suboption, you must specify suboption type and value')
hwIPPoolReplyOptionTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 15), )
if mibBuilder.loadTexts: hwIPPoolReplyOptionTable.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolReplyOptionTable.setDescription('A table for configuring options which will be replied to client in according to specified option value of DHCP client request ')
hwIPPoolReplyOptionEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 15, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"), (0, "HUAWEI-IPPOOL-MIB", "hwIPDhcpSpecOptionId"), (0, "HUAWEI-IPPOOL-MIB", "hwIPDhcpSpecOption"), (0, "HUAWEI-IPPOOL-MIB", "hwIPDhcpReplyOptionId"), (0, "HUAWEI-IPPOOL-MIB", "hwIPDhcpReplyOptionSubId"))
if mibBuilder.loadTexts: hwIPPoolReplyOptionEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolReplyOptionEntry.setDescription('DESCRIPTION.')
hwIPDhcpSpecOptionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(60, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPDhcpSpecOptionId.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpSpecOptionId.setDescription('Option ID. Option code from DHCP request of client.')
hwIPDhcpSpecOption = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 15, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPDhcpSpecOption.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpSpecOption.setDescription('Option ID. Option code from DHCP request of client.')
hwIPDhcpReplyOptionId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 15, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(2, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPDhcpReplyOptionId.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpReplyOptionId.setDescription('This object is used to configuration option code which is needed to reply to client according to specified option value in DHCP request, Option code, from 2 to 254, include 2 and 254, exclude 3,6,15,44,46,50-54,57-60,82')
hwIPDhcpReplyOptionSubId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 15, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 254))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPDhcpReplyOptionSubId.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpReplyOptionSubId.setDescription('Sub Option ID. When IP addresses are allocated by the built-in DHCP sever, the option is a configuration parameter, which needs to be defined and explained by the carrier.')
hwIPDhcpReplyOptionSubType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 15, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ip", 1), ("string", 2), ("hex", 3)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpReplyOptionSubType.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpReplyOptionSubType.setDescription('Value indicates the type of sub-option, 1-ip, 2-string, 3-hex.')
hwIPDhcpReplyOptionSub = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 15, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 128))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpReplyOptionSub.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpReplyOptionSub.setDescription('Value of the sub-option.')
hwIPDhcpReplyOptionRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 15, 1, 50), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwIPDhcpReplyOptionRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPDhcpReplyOptionRowStatus.setDescription('This object is used to configuration new rows in this table, modify existing rows, and to delete existing rows.Only three actions are used: active(1), createAndGo(4), destroy(6). while configuration new option, you must specify option type and value')
hwIPV6AddressStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 24), )
if mibBuilder.loadTexts: hwIPV6AddressStatusTable.setStatus('current')
if mibBuilder.loadTexts: hwIPV6AddressStatusTable.setDescription('A table for configuring the status of ipv6 address which in ipv6 local preifx ')
hwIPV6AddressStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 24, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPv6PrefixIndex"), (0, "HUAWEI-IPPOOL-MIB", "hwIPv6Address"))
if mibBuilder.loadTexts: hwIPV6AddressStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPV6AddressStatusEntry.setDescription('DESCRIPTION.')
hwIPv6Address = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 24, 1, 1), Ipv6Address()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6Address.setStatus('current')
if mibBuilder.loadTexts: hwIPv6Address.setDescription('Ipv6Address.')
hwIPv6AddressStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 24, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("idle", 0), ("occupied", 1), ("prohibitive", 2), ("conflictive", 3), ("flex", 4), ("static", 5), ("radius", 6), ("reserved", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPv6AddressStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPv6AddressStatus.setDescription('Ipv6Address status: idle(0) occupied(1) prohibitive(2) conflictive(3). Status can set idle(0) when prohibitive(2) conflictive(3) reserved(7),set prohibitive(2) when idle(0).')
hwIPv6LocalPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 24, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6LocalPrefixName.setStatus('current')
if mibBuilder.loadTexts: hwIPv6LocalPrefixName.setDescription("Ipv6 Local prefix's name.")
hwIPV6PrefixStatusTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 25), )
if mibBuilder.loadTexts: hwIPV6PrefixStatusTable.setStatus('current')
if mibBuilder.loadTexts: hwIPV6PrefixStatusTable.setDescription('A table for configuring the status of ipv6 prefix which in ipv6 delegation preifx ')
hwIPV6PrefixStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 25, 1), ).setIndexNames((0, "HUAWEI-IPPOOL-MIB", "hwIPv6PrefixIndex"), (0, "HUAWEI-IPPOOL-MIB", "hwIpv6Prefix"))
if mibBuilder.loadTexts: hwIPV6PrefixStatusEntry.setStatus('current')
if mibBuilder.loadTexts: hwIPV6PrefixStatusEntry.setDescription('DESCRIPTION.')
hwIpv6Prefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 25, 1, 1), Ipv6AddressPrefix()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpv6Prefix.setStatus('current')
if mibBuilder.loadTexts: hwIpv6Prefix.setDescription('Ipv6Prefix.')
hwIpv6PrefixLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 25, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIpv6PrefixLen.setStatus('current')
if mibBuilder.loadTexts: hwIpv6PrefixLen.setDescription('Ipv6PrefixLength.')
hwIPv6PrefixStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 25, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("idle", 0), ("occupied", 1), ("prohibitive", 2), ("conflictive", 3), ("flex", 4), ("static", 5), ("radius", 6), ("reserved", 7), ("binded", 8)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPv6PrefixStatus.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixStatus.setDescription('Ipv6 Prefix status:idle(0) occupied(1) prohibitive(2) conflictive(3). Status can set idle(0) when prohibitive(2) conflictive(3) reserved(7),set prohibitive(2) when idle(0).')
hwIPv6DelegationPrefixName = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 25, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 32))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwIPv6DelegationPrefixName.setStatus('current')
if mibBuilder.loadTexts: hwIPv6DelegationPrefixName.setDescription("Ipv6 Delegation prefix's name.")
hwIPPoolConstantIndex = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 26))
hwIPPoolConstantIndexEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 26, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolConstantIndexEnable.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolConstantIndexEnable.setDescription('Enable IP Pool Constant index function.')
hwIPPoolSetting = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 27))
hwIPPoolAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 27, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPPoolAlgorithm.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolAlgorithm.setDescription('The ipv4 remote pool algorithm.')
hwIPv6PoolAlgorithm = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 1, 27, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwIPv6PoolAlgorithm.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolAlgorithm.setDescription('The ipv6 remote pool algorithm.')
hwIPPoolMibTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2))
hwIPPoolTrapOid = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 1))
hwUserIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 1, 1), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwUserIPAddress.setStatus('current')
if mibBuilder.loadTexts: hwUserIPAddress.setDescription('IP address of the user.')
hwDHCPServerAddr = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 1, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwDHCPServerAddr.setStatus('current')
if mibBuilder.loadTexts: hwDHCPServerAddr.setDescription('IP address of the DHCP server.')
hwDhcpSvrVrfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwDhcpSvrVrfName.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSvrVrfName.setDescription('DHCP VPN instance name.')
hwIPPoolGroupIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 1, 4), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIPPoolGroupIndex.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupIndex.setDescription('Exclusive index of IP pool group.')
hwDhcpSvrDownReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwDhcpSvrDownReason.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSvrDownReason.setDescription('DHCP server down reason.')
hwIPPoolDAPName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 253))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIPPoolDAPName.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDAPName.setDescription('DAP name.')
hwIPPoolDAPReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 1, 8), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwIPPoolDAPReason.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDAPReason.setDescription('Failure Cause of Address Segment Application.')
hwIPPoolTrapsDefine = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2))
hwIPPoolTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0))
hwUserIPConflictAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 1)).setObjects(("HUAWEI-IPPOOL-MIB", "hwUserIPAddress"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolName"))
if mibBuilder.loadTexts: hwUserIPConflictAlarm.setStatus('current')
if mibBuilder.loadTexts: hwUserIPConflictAlarm.setDescription(' 1 Notice/Trap name: IP address conflict error. 2 Notice/Trap generation cause: user IP address conflict. 3 Repair suggestions: Check whether to renew configuring the BAS IP pool. Check whether the IP address of BAS interface conflicts user IP address.')
hwUserIPLeaseAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 2)).setObjects(("HUAWEI-IPPOOL-MIB", "hwUserIPAddress"))
if mibBuilder.loadTexts: hwUserIPLeaseAlarm.setStatus('current')
if mibBuilder.loadTexts: hwUserIPLeaseAlarm.setDescription(' 1 Notice/Trap name: IP address lease alarm. 2 Notice/Trap generation cause: The user IP lease is over. 3 Repair suggestion: Check whether to renew configuring BAS IP pool.')
hwAllocUserIPFailAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 3)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolName"))
if mibBuilder.loadTexts: hwAllocUserIPFailAlarm.setStatus('current')
if mibBuilder.loadTexts: hwAllocUserIPFailAlarm.setDescription(' 1 Notice/Trap name: allocate user IP fail alarm. 2 Notice/Trap generation cause: there are no enough IP addresses for users. 3 Repair suggestion: Check whether there are enough addresses in IP pool of the domain.')
hwDhcpServerDown = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 4)).setObjects(("HUAWEI-IPPOOL-MIB", "hwDHCPServerAddr"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolRouterIPAddr"), ("HUAWEI-IPPOOL-MIB", "hwDhcpSvrVrfName"), ("HUAWEI-IPPOOL-MIB", "hwDhcpSvrDownReason"))
if mibBuilder.loadTexts: hwDhcpServerDown.setStatus('current')
if mibBuilder.loadTexts: hwDhcpServerDown.setDescription(' Description: The DHCP server does not respond. This alarm is generated if the network is unstable, the DHCP server is Down, or there is not any available address in the DHCP server when a user applies for an address to the external DHCP server. Parameter: IP address of the DHCP server, address pool that the user expects (the address pool is identified by the gateway address because there may be multiple address pools on a server), VPN instance name, The reason of that DHCP server is set down status. ')
hwLocalIPPoolDifferWithServer = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 5)).setObjects(("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolName"))
if mibBuilder.loadTexts: hwLocalIPPoolDifferWithServer.setStatus('current')
if mibBuilder.loadTexts: hwLocalIPPoolDifferWithServer.setDescription(' The configuration of the IP address pool on the DHCP server is not the same as the configuration of the remote address pool on the local equipment. Solution: Check whether the configuration of the IP address pool on the DHCP server, including the gateway address, mask, and the address range, is the same as the configuration of the remote address pool on the local equipment. ')
hwUsedIPReachThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 6)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolName"))
if mibBuilder.loadTexts: hwUsedIPReachThreshold.setStatus('current')
if mibBuilder.loadTexts: hwUsedIPReachThreshold.setDescription(' The number of used IP addresses in the pool exceeds the threshold. Repair suggestion: Check the configuration of the IP address pool. ')
hwUsedIPReachThresholdResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 7)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolName"))
if mibBuilder.loadTexts: hwUsedIPReachThresholdResume.setStatus('current')
if mibBuilder.loadTexts: hwUsedIPReachThresholdResume.setDescription(' The number of used IP addresses in the pool is under the threshold. ')
hwUsedDeleteUnnumberedRouter = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 8)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolName"))
if mibBuilder.loadTexts: hwUsedDeleteUnnumberedRouter.setStatus('current')
if mibBuilder.loadTexts: hwUsedDeleteUnnumberedRouter.setDescription(' The interface is unnumbered by the pool. ')
hwPoolGroupUsedIPReachThreshold = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 9)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupName"))
if mibBuilder.loadTexts: hwPoolGroupUsedIPReachThreshold.setStatus('current')
if mibBuilder.loadTexts: hwPoolGroupUsedIPReachThreshold.setDescription(' The number of used IP addresses in the IP pool group exceeds the threshold. Repair suggestion: Check the configuration of the IP address pool group. ')
hwPoolGroupUsedIPReachThresholdResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 10)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupName"))
if mibBuilder.loadTexts: hwPoolGroupUsedIPReachThresholdResume.setStatus('current')
if mibBuilder.loadTexts: hwPoolGroupUsedIPReachThresholdResume.setDescription(' The number of used IP addresses in the IP pool group is under the threshold. ')
hwIPPoolConstantIndexFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 11))
if mibBuilder.loadTexts: hwIPPoolConstantIndexFail.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolConstantIndexFail.setDescription(' The constance index of ip pool recover failure. ')
hwIPv6PrefixConstantIndexFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 12))
if mibBuilder.loadTexts: hwIPv6PrefixConstantIndexFail.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixConstantIndexFail.setDescription(' The constance index of ipv6 prefix pool recover failure. ')
hwIPv6PoolConstantIndexFail = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 13))
if mibBuilder.loadTexts: hwIPv6PoolConstantIndexFail.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolConstantIndexFail.setDescription(' The constance index of ipv6 pool recover failure. ')
hwUsedIPExhaust = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 14)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolName"))
if mibBuilder.loadTexts: hwUsedIPExhaust.setStatus('current')
if mibBuilder.loadTexts: hwUsedIPExhaust.setDescription(' The number of IP addresses in the IP pool is exhausted. ')
hwUsedIPExhaustResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 15)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolName"))
if mibBuilder.loadTexts: hwUsedIPExhaustResume.setStatus('current')
if mibBuilder.loadTexts: hwUsedIPExhaustResume.setDescription(' The number of IP addresses in the IP pool is under the exhaust. ')
hwPoolGroupUsedIPExhaust = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 16)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupName"))
if mibBuilder.loadTexts: hwPoolGroupUsedIPExhaust.setStatus('current')
if mibBuilder.loadTexts: hwPoolGroupUsedIPExhaust.setDescription(' The number of IP addresses in the IP pool group is exhausted. ')
hwPoolGroupUsedIPExhaustResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 17)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupName"))
if mibBuilder.loadTexts: hwPoolGroupUsedIPExhaustResume.setStatus('current')
if mibBuilder.loadTexts: hwPoolGroupUsedIPExhaustResume.setDescription(' The number of IP addresses in the IP pool group is under the exhaust. ')
hwUsedIPv6AddressAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 18)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPv6PoolIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolName"))
if mibBuilder.loadTexts: hwUsedIPv6AddressAlarm.setStatus('current')
if mibBuilder.loadTexts: hwUsedIPv6AddressAlarm.setDescription(' The number of used IPv6 addresses in the pool exceeds the threshold. Repair suggestion: Check the configuration of the IP address pool. ')
hwUsedIPv6AddressAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 19)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPv6PoolIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolName"))
if mibBuilder.loadTexts: hwUsedIPv6AddressAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwUsedIPv6AddressAlarmResume.setDescription(' The number of used IPv6 addresses in the IP pool group is under the threshold. ')
hwIPv6AddressExhaustAlarm = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 20)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPv6PoolIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolName"))
if mibBuilder.loadTexts: hwIPv6AddressExhaustAlarm.setStatus('current')
if mibBuilder.loadTexts: hwIPv6AddressExhaustAlarm.setDescription(' The IPv6 addresses in the IPv6 pool is exhausted. ')
hwIPv6AddressExhaustAlarmResume = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 21)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPv6PoolIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolName"))
if mibBuilder.loadTexts: hwIPv6AddressExhaustAlarmResume.setStatus('current')
if mibBuilder.loadTexts: hwIPv6AddressExhaustAlarmResume.setDescription(' The IPv6 addresses exhausted alarm cleared. ')
hwIPPoolDAPApplyUnsuccessful = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 22)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolName"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolRouterIPAddr"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolRouterIPMask"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDAPReason"))
if mibBuilder.loadTexts: hwIPPoolDAPApplyUnsuccessful.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDAPApplyUnsuccessful.setDescription(' Fail to apply for the address segment. ')
hwIPPoolDAPReleaseUnsuccessful = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 23)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolName"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolRouterIPAddr"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolRouterIPMask"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDAPReason"))
if mibBuilder.loadTexts: hwIPPoolDAPReleaseUnsuccessful.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDAPReleaseUnsuccessful.setDescription(' Fail to release the address segment. ')
hwIPPoolDAPSubnetFull = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 24)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolName"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDAPName"))
if mibBuilder.loadTexts: hwIPPoolDAPSubnetFull.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDAPSubnetFull.setDescription(' The number of address segments dynamically allocated to the device reached the upper limit allowed by the dynamic address pool. ')
hwIPPoolDAPDeviceSubnetFull = NotificationType((1, 3, 6, 1, 4, 1, 2011, 6, 8, 2, 2, 0, 25))
if mibBuilder.loadTexts: hwIPPoolDAPDeviceSubnetFull.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDAPDeviceSubnetFull.setDescription(' The number of address segments dynamically allocated to the device reached the maximum number allowed. ')
hwIpPoolMIBConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3))
hwIpPoolCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 1))
hwIpPoolCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 1, 1)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIpPoolTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwIpSectionTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwIpPoolExtTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwIpAddressStatusTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwDhcpSvrGroupTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwRemotePoolTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwDhcpServerTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwIpPoolStatisticGroup"), ("HUAWEI-IPPOOL-MIB", "hwIpPoolTrapOidGroup"), ("HUAWEI-IPPOOL-MIB", "hwIpPoolTrapsGroup"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupExtTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupDisplayTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PrefixTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolStatusTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwIPv6DuidBindPrefixTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwDhcpv6SvrGroupTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwIPv6RemotePoolTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolStatisticGroup"), ("HUAWEI-IPPOOL-MIB", "hwIPV6AddressStatusTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwIPV6PrefixStatusTableGroup"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolConstantIndexGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpPoolCompliance = hwIpPoolCompliance.setStatus('current')
if mibBuilder.loadTexts: hwIpPoolCompliance.setDescription('The compliance statement for systems supporting this module.')
hwIpPoolObjectGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2))
hwIpPoolTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 1)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolName"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolRouterIPAddr"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolRouterIPMask"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolPriDNSIPAddr"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolSecDNSIPAddr"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolPriNBNSIPAddr"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolSecNBNSIPAddr"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolIPAddrLease"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolStatus"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolVPNInstance"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolType"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolNetwork"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolNetworkMask"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolIPTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolIPUsedNum"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolIPConflictNum"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolIPExcludeNum"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolIPIdleNum"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolIPUsedPercent"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDNSIPAddrString"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDNSIPAddrStringUndo"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolNBNSIPAddrString"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolNBNSIPAddrStringUndo"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpPoolTableGroup = hwIpPoolTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpPoolTableGroup.setDescription('The HUAWEI IP pool configuration group.')
hwIpSectionTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 2)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPSectionIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPSectionDesc"), ("HUAWEI-IPPOOL-MIB", "hwIPSectionLowAddr"), ("HUAWEI-IPPOOL-MIB", "hwIPSectionHighAddr"), ("HUAWEI-IPPOOL-MIB", "hwIPSectionLength"), ("HUAWEI-IPPOOL-MIB", "hwIPSectionUsedNum"), ("HUAWEI-IPPOOL-MIB", "hwIPSectionConflict"), ("HUAWEI-IPPOOL-MIB", "hwIPSectionInvalid"), ("HUAWEI-IPPOOL-MIB", "hwIPSectionAvailableNum"), ("HUAWEI-IPPOOL-MIB", "hwIPSectionRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpSectionTableGroup = hwIpSectionTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpSectionTableGroup.setDescription('The HUAWEI IP section configuration group.')
hwIpPoolExtTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 3)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolAvailableStatus"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpOptionId1"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpOption1"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpOptionId2"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpOption2"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpOptionId3"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpOption3"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpOptionId4"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpOption4"), ("HUAWEI-IPPOOL-MIB", "hwIPDnsSuffix"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpSvrIPRsv"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolIpAddrRenewal"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolIpAddrRebinding"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolSIPAddr1"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolSIPAddr2"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolSIPName1"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolSIPName2"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpPoolExtTableGroup = hwIpPoolExtTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpPoolExtTableGroup.setDescription('The HUAWEI IP pool extension configuration group.')
hwIpAddressStatusTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 4)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPAddress"), ("HUAWEI-IPPOOL-MIB", "hwIPAddressStatus"), ("HUAWEI-IPPOOL-MIB", "hwPoolName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpAddressStatusTableGroup = hwIpAddressStatusTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpAddressStatusTableGroup.setDescription('The HUAWEI IP address status configuration group.')
hwDhcpSvrGroupTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 5)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolDhcpSvrGroupIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDhcpSvrGroupName"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpSvrPriAddr"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpSvrScdiAddr"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpSvrPriState"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpScdPriState"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpSvrAutoRelease"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpSvrRefCount"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpSvrRowStatus"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpSvrPriVpnInstance"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpSvrScdVpnInstance"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpSvrSouce"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDhcpSvrGroupTableGroup = hwDhcpSvrGroupTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwDhcpSvrGroupTableGroup.setDescription('The HUAWEI DHCP service group configuration group.')
hwRemotePoolTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 6)).setObjects(("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolIndex"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolName"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolRouterIPAddr"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolRouterIPMask"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolDhcpSvrGroupID"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolAvailableStatus"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolRowStatus"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolPriDNSIPAddress"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolSecDNSIPAddress"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolPriNBNSIPAddress"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolSecNBNSIPAddress"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolVPNInstance"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolDhcpGroupName"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolLeaseManageEnable"), ("HUAWEI-IPPOOL-MIB", "hwRemoteIPPoolWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwRemotePoolTableGroup = hwRemotePoolTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwRemotePoolTableGroup.setDescription('The HUAWEI remote pool configuration group.')
hwIpPoolStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 7)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolNum"), ("HUAWEI-IPPOOL-MIB", "hwIPIdleTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwIPUsedTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwIPConflictTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwIPExcludeTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwIPTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwIPUsedPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpPoolStatisticGroup = hwIpPoolStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpPoolStatisticGroup.setDescription('The HUAWEI IP pool statistics group.')
hwIpPoolTrapOidGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 8)).setObjects(("HUAWEI-IPPOOL-MIB", "hwUserIPAddress"), ("HUAWEI-IPPOOL-MIB", "hwDHCPServerAddr"), ("HUAWEI-IPPOOL-MIB", "hwDhcpSvrVrfName"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupIndex"), ("HUAWEI-IPPOOL-MIB", "hwDhcpSvrDownReason"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpPoolTrapOidGroup = hwIpPoolTrapOidGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpPoolTrapOidGroup.setDescription('The HUAWEI IP pool trap OID group.')
hwIpPoolTrapsGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 9)).setObjects(("HUAWEI-IPPOOL-MIB", "hwUserIPConflictAlarm"), ("HUAWEI-IPPOOL-MIB", "hwUserIPLeaseAlarm"), ("HUAWEI-IPPOOL-MIB", "hwAllocUserIPFailAlarm"), ("HUAWEI-IPPOOL-MIB", "hwDhcpServerDown"), ("HUAWEI-IPPOOL-MIB", "hwLocalIPPoolDifferWithServer"), ("HUAWEI-IPPOOL-MIB", "hwUsedIPReachThreshold"), ("HUAWEI-IPPOOL-MIB", "hwUsedIPReachThresholdResume"), ("HUAWEI-IPPOOL-MIB", "hwUsedDeleteUnnumberedRouter"), ("HUAWEI-IPPOOL-MIB", "hwPoolGroupUsedIPReachThreshold"), ("HUAWEI-IPPOOL-MIB", "hwPoolGroupUsedIPReachThresholdResume"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolConstantIndexFail"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PrefixConstantIndexFail"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolConstantIndexFail"), ("HUAWEI-IPPOOL-MIB", "hwUsedIPExhaust"), ("HUAWEI-IPPOOL-MIB", "hwUsedIPExhaustResume"), ("HUAWEI-IPPOOL-MIB", "hwPoolGroupUsedIPExhaust"), ("HUAWEI-IPPOOL-MIB", "hwPoolGroupUsedIPExhaustResume"), ("HUAWEI-IPPOOL-MIB", "hwUsedIPv6AddressAlarm"), ("HUAWEI-IPPOOL-MIB", "hwUsedIPv6AddressAlarmResume"), ("HUAWEI-IPPOOL-MIB", "hwIPv6AddressExhaustAlarm"), ("HUAWEI-IPPOOL-MIB", "hwIPv6AddressExhaustAlarmResume"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIpPoolTrapsGroup = hwIpPoolTrapsGroup.setStatus('current')
if mibBuilder.loadTexts: hwIpPoolTrapsGroup.setDescription('The HUAWEI IP pool traps group.')
hwDhcpServerTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 10)).setObjects(("HUAWEI-IPPOOL-MIB", "hwDhcpServerIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDhcpServerIP"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDhcpServerVRFName"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDhcpServerState"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDhcpServerSendDisvSpdNum"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDhcpServerSendDisvSpdSec"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDhcpServerDeadCount"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDhcpServerNakCount"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDhcpServerTimeout"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDhcpServerDeadTime"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDhcpServerTableGroup = hwDhcpServerTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwDhcpServerTableGroup.setDescription('The HUAWEI IP pool DHCP server configure group.')
hwIPPoolOptionTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 11)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPDhcpOptionId"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpOption"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpOptionRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPPoolOptionTableGroup = hwIPPoolOptionTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolOptionTableGroup.setDescription('A table for configuring options to DHCP server pools, include option code type and value and so on .')
hwIPPoolGroupTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 12)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupName"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupVPNInstance"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupIncludeUndo"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPPoolGroupTableGroup = hwIPPoolGroupTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupTableGroup.setDescription('The HUAWEI Ip pool group configuration group.')
hwIPPoolGroupExtTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 13)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupExtIncludePoolName"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupExtIncludePoolMoveOrder"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupExtRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPPoolGroupExtTableGroup = hwIPPoolGroupExtTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupExtTableGroup.setDescription('The HUAWEI Ip pool group extension configuration group.')
hwIPPoolGroupDisplayTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 14)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupIncludePoolNum"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupBoundByDomainNum"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupIPTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupIPUsedNum"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupIPConflictedNum"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupIPDisableNum"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupIPDesignatedNum"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupIPFreeNum"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolGroupIPUsedPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPPoolGroupDisplayTableGroup = hwIPPoolGroupDisplayTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolGroupDisplayTableGroup.setDescription('A table for displaying HUAWEI IP pool group.')
hwIPPoolDomainSearchListGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 15)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolDomainSearchList"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolDomainSearchListRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPPoolDomainSearchListGroup = hwIPPoolDomainSearchListGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolDomainSearchListGroup.setDescription('Set the domain search list name which is uesed to fill content of DHCP packet option 119.')
hwIPPoolOptionExtTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 16)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPDhcpOptionSubId"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpOptionSubType"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpOptionSubValue"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpOptionSubRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPPoolOptionExtTableGroup = hwIPPoolOptionExtTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolOptionExtTableGroup.setDescription('A table for configuring options to DHCP server pools, include suboption code type and value and so on .')
hwIPPoolReplyOptionGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 17)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPDhcpSpecOptionId"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpSpecOption"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpReplyOptionId"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpReplyOptionSubId"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpReplyOptionSubType"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpReplyOptionSub"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpReplyOptionRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPPoolReplyOptionGroup = hwIPPoolReplyOptionGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolReplyOptionGroup.setDescription('Dhcp reply options which will be replied to client in according to specified option value of DHCP client request ')
hwIPv6PrefixTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 18)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPv6PrefixIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PrefixName"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PrefixType"), ("HUAWEI-IPPOOL-MIB", "hwIPv6Prefix"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PrefixLen"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PrefixDelegatingLen"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PrefixAdvPreferredLifetime"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PrefixAdvValidLifetime"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PrefixAvailableStatus"), ("HUAWEI-IPPOOL-MIB", "hwIPv6VPNInstance"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PrefixReservedFlag"), ("HUAWEI-IPPOOL-MIB", "hwIPv6LinkAddress"), ("HUAWEI-IPPOOL-MIB", "hwIPv6SlaacUnsharedFlag"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PrefixRowStatus"), ("HUAWEI-IPPOOL-MIB", "hwIPPoolPDUnshareOnly"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPv6PrefixTableGroup = hwIPv6PrefixTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PrefixTableGroup.setDescription('.')
hwIPv6PoolTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 19)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPv6PoolIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolName"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolType"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolPrefixName"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolDnsIPAddr"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolDnsSearchList"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolPreference"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolAvailableStatus"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolRenewPercent"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolRebindingPercent"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolRapidCommitFlag"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolUnicastOption"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolAFTRName"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PoolRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPv6PoolTableGroup = hwIPv6PoolTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolTableGroup.setDescription('.')
hwIPv6PoolStatusTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 20)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPv6FreeAddressNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6UsedAddressNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6FreePrefixNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6UsedPrefixNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6AddressTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6AddressUsedNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6AddressFreeNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6AddressConflictNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6AddressExcludeNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6AddressUsedPercent"), ("HUAWEI-IPPOOL-MIB", "hwIPv6NDRAPrefixTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6NDRAPrefixUsedNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6NDRAPrefixFreeNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6NDRAPrefixConflictNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6NDRAPrefixExcludeNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6NDRAPrefixUsedPercent"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PDPrefixTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PDPrefixUsedNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PDPrefixFreeNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PDPrefixConflictNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PDPrefixExcludeNum"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PDPrefixUsedPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPv6PoolStatusTableGroup = hwIPv6PoolStatusTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolStatusTableGroup.setDescription('.')
hwIPv6DuidBindPrefixTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 21)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPv6ClientDuid"), ("HUAWEI-IPPOOL-MIB", "hwIPv6BindPrefix"), ("HUAWEI-IPPOOL-MIB", "hwIPv6DuidBindPrefixRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPv6DuidBindPrefixTableGroup = hwIPv6DuidBindPrefixTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPv6DuidBindPrefixTableGroup.setDescription('.')
hwDhcpv6SvrGroupTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 22)).setObjects(("HUAWEI-IPPOOL-MIB", "hwDhcpv6SvrGroupIndex"), ("HUAWEI-IPPOOL-MIB", "hwDhcpv6SvrGroupName"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpv6SvrAddr1"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpv6SvrAddr2"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpv6PriSvrState"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpv6ScdSvrState"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpv6SvrAutoRelease"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpv6SvrGroupRefCount"), ("HUAWEI-IPPOOL-MIB", "hwDhcpv6SvrInterface1"), ("HUAWEI-IPPOOL-MIB", "hwDhcpv6SvrInterface2"), ("HUAWEI-IPPOOL-MIB", "hwDhcpv6SvrAlgorithm"), ("HUAWEI-IPPOOL-MIB", "hwDhcpv6SvrWeight1"), ("HUAWEI-IPPOOL-MIB", "hwDhcpv6SvrWeight2"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpv6Svr1VrfName"), ("HUAWEI-IPPOOL-MIB", "hwIPDhcpv6Svr2VrfName"), ("HUAWEI-IPPOOL-MIB", "hwDhcpv6SvrGroupRowStatus"), ("HUAWEI-IPPOOL-MIB", "hwDhcpv6SvrSourceInterface"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwDhcpv6SvrGroupTableGroup = hwDhcpv6SvrGroupTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwDhcpv6SvrGroupTableGroup.setDescription('.')
hwIPv6RemotePoolTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 23)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPv6RemotePoolIndex"), ("HUAWEI-IPPOOL-MIB", "hwIPv6RemotePoolName"), ("HUAWEI-IPPOOL-MIB", "hwIPv6RemotePoolPrefixName"), ("HUAWEI-IPPOOL-MIB", "hwIPv6RemotePoolDhcpv6SvrGroupName"), ("HUAWEI-IPPOOL-MIB", "hwIPv6RemotePoolAvailableStatus"), ("HUAWEI-IPPOOL-MIB", "hwIPv6RemotePoolExportHostRouteFlag"), ("HUAWEI-IPPOOL-MIB", "hwIPv6RemotePoolRowStatus"), ("HUAWEI-IPPOOL-MIB", "hwIPv6RemotePoolExportHostRouteIPv6Address"), ("HUAWEI-IPPOOL-MIB", "hwIPv6RemotePoolExportHostRoutePDPrefix"), ("HUAWEI-IPPOOL-MIB", "hwIPv6RemotePoolExportHostRouteNDPrefix"), ("HUAWEI-IPPOOL-MIB", "hwIPv6RemotePoolWeight"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPv6RemotePoolTableGroup = hwIPv6RemotePoolTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPv6RemotePoolTableGroup.setDescription('.')
hwIPv6PoolStatisticGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 24)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIpv6PoolNum"), ("HUAWEI-IPPOOL-MIB", "hwIpv6AddressIdleTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwIpv6PrefixIdleTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwIpv6AddressUsedTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwIpv6PrefixUsedTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwAllIPv6AddressTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwAllIPv6AddressUsedNum"), ("HUAWEI-IPPOOL-MIB", "hwAllIPv6AddressIdleNum"), ("HUAWEI-IPPOOL-MIB", "hwAllIPv6ConflictAddressNum"), ("HUAWEI-IPPOOL-MIB", "hwAllIPv6ExcludeAddressNum"), ("HUAWEI-IPPOOL-MIB", "hwAllIPv6AddressUsedPercent"), ("HUAWEI-IPPOOL-MIB", "hwAllNDRAPrefixTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwAllNDRAPrefixUsedNum"), ("HUAWEI-IPPOOL-MIB", "hwAllNDRAPrefixFreeNum"), ("HUAWEI-IPPOOL-MIB", "hwAllNDRAPrefixConflictNum"), ("HUAWEI-IPPOOL-MIB", "hwAllNDRAPrefixExcludeNum"), ("HUAWEI-IPPOOL-MIB", "hwAllNDRAPrefixUsedPercent"), ("HUAWEI-IPPOOL-MIB", "hwAllPDPrefixTotalNum"), ("HUAWEI-IPPOOL-MIB", "hwAllPDPrefixUsedNum"), ("HUAWEI-IPPOOL-MIB", "hwAllPDPrefixFreeNum"), ("HUAWEI-IPPOOL-MIB", "hwAllPDPrefixConflictNum"), ("HUAWEI-IPPOOL-MIB", "hwAllPDPrefixExcludeNum"), ("HUAWEI-IPPOOL-MIB", "hwAllPDPrefixUsedPercent"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPv6PoolStatisticGroup = hwIPv6PoolStatisticGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPv6PoolStatisticGroup.setDescription('The HUAWEI IPv6 pool statistics group.')
hwIPV6AddressStatusTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 25)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPv6Address"), ("HUAWEI-IPPOOL-MIB", "hwIPv6AddressStatus"), ("HUAWEI-IPPOOL-MIB", "hwIPv6LocalPrefixName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPV6AddressStatusTableGroup = hwIPV6AddressStatusTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPV6AddressStatusTableGroup.setDescription('The HUAWEI IPv6 address status configuration group.')
hwIPV6PrefixStatusTableGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 26)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIpv6Prefix"), ("HUAWEI-IPPOOL-MIB", "hwIpv6PrefixLen"), ("HUAWEI-IPPOOL-MIB", "hwIPv6PrefixStatus"), ("HUAWEI-IPPOOL-MIB", "hwIPv6DelegationPrefixName"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPV6PrefixStatusTableGroup = hwIPV6PrefixStatusTableGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPV6PrefixStatusTableGroup.setDescription('The HUAWEI IPv6 prefix status configuration group.')
hwIPPoolConstantIndexGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 6, 8, 3, 2, 27)).setObjects(("HUAWEI-IPPOOL-MIB", "hwIPPoolConstantIndexEnable"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwIPPoolConstantIndexGroup = hwIPPoolConstantIndexGroup.setStatus('current')
if mibBuilder.loadTexts: hwIPPoolConstantIndexGroup.setDescription('Enable IP Pool Constant index function.')
mibBuilder.exportSymbols("HUAWEI-IPPOOL-MIB", hwIPv6PoolType=hwIPv6PoolType, hwIPv6PoolAFTRName=hwIPv6PoolAFTRName, hwIPPoolHighAddr=hwIPPoolHighAddr, hwAllNDRAPrefixTotalNum=hwAllNDRAPrefixTotalNum, hwIPDhcpOptionId4=hwIPDhcpOptionId4, hwIPv6PrefixDelegatingLen=hwIPv6PrefixDelegatingLen, hwIPv6PoolRebindingPercent=hwIPv6PoolRebindingPercent, hwIPv6DuidBindPrefixTable=hwIPv6DuidBindPrefixTable, hwIPPoolNBNSIPAddrString=hwIPPoolNBNSIPAddrString, hwIPV6AddressStatusEntry=hwIPV6AddressStatusEntry, hwIPv6AddressFreeNum=hwIPv6AddressFreeNum, hwIPPoolIPIdleNum=hwIPPoolIPIdleNum, hwIPv6PrefixAvailableStatus=hwIPv6PrefixAvailableStatus, hwIPPoolEntry=hwIPPoolEntry, hwIPv6AddressTotalNum=hwIPv6AddressTotalNum, hwIPv6NDRAPrefixConflictNum=hwIPv6NDRAPrefixConflictNum, hwIPDhcpOption3=hwIPDhcpOption3, hwIPv6LocalPrefixName=hwIPv6LocalPrefixName, hwIPPoolGroupExtTableGroup=hwIPPoolGroupExtTableGroup, hwIPPoolTraps=hwIPPoolTraps, hwIPv6NDRAPrefixFreeNum=hwIPv6NDRAPrefixFreeNum, hwIPv6PoolRenewPercent=hwIPv6PoolRenewPercent, hwIPPoolIPConflictNum=hwIPPoolIPConflictNum, hwIPv6PDPrefixExcludeNum=hwIPv6PDPrefixExcludeNum, hwIPSectionInvalid=hwIPSectionInvalid, hwIPDhcpOptionId1=hwIPDhcpOptionId1, hwIPv6PDPrefixUsedPercent=hwIPv6PDPrefixUsedPercent, hwIPDhcpv6SvrAutoRelease=hwIPDhcpv6SvrAutoRelease, hwIPAddressStatusTable=hwIPAddressStatusTable, hwIpPoolTrapOidGroup=hwIpPoolTrapOidGroup, hwIPPoolIPUsedNum=hwIPPoolIPUsedNum, hwIPPoolIPUsedPercent=hwIPPoolIPUsedPercent, hwIPDhcpv6SvrAddr1=hwIPDhcpv6SvrAddr1, hwIPPoolPriDNSIPAddr=hwIPPoolPriDNSIPAddr, hwIPDhcpOptionId2=hwIPDhcpOptionId2, hwIPPoolMibObjects=hwIPPoolMibObjects, hwIPSectionIndex=hwIPSectionIndex, hwIpv6PoolNum=hwIpv6PoolNum, hwIPPoolGroupBoundByDomainNum=hwIPPoolGroupBoundByDomainNum, hwAllNDRAPrefixFreeNum=hwAllNDRAPrefixFreeNum, hwIPv6PrefixLen=hwIPv6PrefixLen, hwIPv6FreeAddressNum=hwIPv6FreeAddressNum, hwIPv6ClientDuid=hwIPv6ClientDuid, hwRemoteIPPoolSecNBNSIPAddress=hwRemoteIPPoolSecNBNSIPAddress, hwPoolGroupUsedIPReachThresholdResume=hwPoolGroupUsedIPReachThresholdResume, hwIPv6PrefixTable=hwIPv6PrefixTable, hwIPv6RemotePoolExportHostRouteFlag=hwIPv6RemotePoolExportHostRouteFlag, hwIPv6PrefixEntry=hwIPv6PrefixEntry, hwIPPoolSIPName1=hwIPPoolSIPName1, hwUsedDeleteUnnumberedRouter=hwUsedDeleteUnnumberedRouter, hwIPPoolGroupExtIncludePoolName=hwIPPoolGroupExtIncludePoolName, hwIPv6RemotePoolTableGroup=hwIPv6RemotePoolTableGroup, hwRemoteIPPoolRouterIPAddr=hwRemoteIPPoolRouterIPAddr, hwIPDhcpOptionSubValue=hwIPDhcpOptionSubValue, hwUsedIPReachThreshold=hwUsedIPReachThreshold, hwIPPoolNBNSIPAddrStringUndo=hwIPPoolNBNSIPAddrStringUndo, hwIPPoolGroupIPDesignatedNum=hwIPPoolGroupIPDesignatedNum, hwIPPoolDhcpServerVRFName=hwIPPoolDhcpServerVRFName, hwIPPoolSecDNSIPAddr=hwIPPoolSecDNSIPAddr, hwDHCPServerAddr=hwDHCPServerAddr, hwIPPoolGroupName=hwIPPoolGroupName, hwDhcpv6SvrIndex=hwDhcpv6SvrIndex, hwIPPoolIPTotalNum=hwIPPoolIPTotalNum, hwIPPoolDNSIPAddrString=hwIPPoolDNSIPAddrString, hwDhcpv6SvrInterface2=hwDhcpv6SvrInterface2, hwIPDhcpOption1=hwIPDhcpOption1, hwIPv6AddressExhaustAlarm=hwIPv6AddressExhaustAlarm, hwIPPoolSIPName2=hwIPPoolSIPName2, hwIPPoolGroupIPTotalNum=hwIPPoolGroupIPTotalNum, hwIPPoolDomainSearchListTable=hwIPPoolDomainSearchListTable, hwIPSectionConflict=hwIPSectionConflict, hwIPv6PoolDnsSearchList=hwIPv6PoolDnsSearchList, hwIPv6NDRAPrefixExcludeNum=hwIPv6NDRAPrefixExcludeNum, hwIPPoolDhcpServerTimeout=hwIPPoolDhcpServerTimeout, hwIPPoolDhcpServerSendDisvSpdNum=hwIPPoolDhcpServerSendDisvSpdNum, hwRemoteIPPoolRouterIPMask=hwRemoteIPPoolRouterIPMask, hwIPPoolGroupIPUsedPercent=hwIPPoolGroupIPUsedPercent, hwIPv6PDPrefixUsedNum=hwIPv6PDPrefixUsedNum, hwIPDhcpReplyOptionSubId=hwIPDhcpReplyOptionSubId, hwIPDhcpOptionSubType=hwIPDhcpOptionSubType, hwIPv6PoolAlgorithm=hwIPv6PoolAlgorithm, hwIPv6UsedPrefixNum=hwIPv6UsedPrefixNum, hwIPDhcpSvrIPRsv=hwIPDhcpSvrIPRsv, hwIPv6PoolStatusTableGroup=hwIPv6PoolStatusTableGroup, hwIPv6PoolIndex=hwIPv6PoolIndex, hwIPv6RemotePoolTable=hwIPv6RemotePoolTable, hwIPPoolConflictAutoRecycleInterval=hwIPPoolConflictAutoRecycleInterval, hwIPPoolDomainSearchListEntry=hwIPPoolDomainSearchListEntry, hwIPPoolConstantIndexGroup=hwIPPoolConstantIndexGroup, hwAllPDPrefixFreeNum=hwAllPDPrefixFreeNum, hwIPSectionRowStatus=hwIPSectionRowStatus, hwIPPoolDhcpServerDeadTime=hwIPPoolDhcpServerDeadTime, hwRemoteIPPoolDhcpSvrGroupID=hwRemoteIPPoolDhcpSvrGroupID, hwAllIPv6AddressTotalNum=hwAllIPv6AddressTotalNum, hwIPv6AddressUsedNum=hwIPv6AddressUsedNum, hwIPDhcpOption4=hwIPDhcpOption4, hwAllNDRAPrefixUsedPercent=hwAllNDRAPrefixUsedPercent, hwIPDhcpSvrScdiAddr=hwIPDhcpSvrScdiAddr, hwIPv6PoolConstantIndexFail=hwIPv6PoolConstantIndexFail, hwIPv6AddressExcludeNum=hwIPv6AddressExcludeNum, hwAllNDRAPrefixUsedNum=hwAllNDRAPrefixUsedNum, hwIPSectionLength=hwIPSectionLength, hwIPConflictTotalNum=hwIPConflictTotalNum, hwIPPoolIpAddrRebinding=hwIPPoolIpAddrRebinding, hwIPPoolConstantIndex=hwIPPoolConstantIndex, hwIpPoolObjectGroups=hwIpPoolObjectGroups, hwDhcpv6SvrGroupIndex=hwDhcpv6SvrGroupIndex, hwIPv6PoolName=hwIPv6PoolName, hwIPV6AddressStatusTableGroup=hwIPV6AddressStatusTableGroup, hwIPv6RemotePoolPrefixName=hwIPv6RemotePoolPrefixName, hwDhcpServerIndex=hwDhcpServerIndex, hwIPv6PrefixConstantIndexFail=hwIPv6PrefixConstantIndexFail, hwIPPoolGroupEntry=hwIPPoolGroupEntry, hwIPv6PoolEntry=hwIPv6PoolEntry, hwIPv6PrefixType=hwIPv6PrefixType, hwIPPoolDAPReason=hwIPPoolDAPReason, hwDhcpv6SvrWeight1=hwDhcpv6SvrWeight1, hwRemoteIPPoolVPNInstance=hwRemoteIPPoolVPNInstance, hwIPPoolVPNInstance=hwIPPoolVPNInstance, hwIPV6PrefixStatusTableGroup=hwIPV6PrefixStatusTableGroup, hwRemoteIPPoolPriNBNSIPAddress=hwRemoteIPPoolPriNBNSIPAddress, hwIpPoolTrapsGroup=hwIpPoolTrapsGroup, hwIPPoolGroupIPUsedNum=hwIPPoolGroupIPUsedNum, hwUserIPConflictAlarm=hwUserIPConflictAlarm, hwDhcpv6SvrAlgorithm=hwDhcpv6SvrAlgorithm, hwIPv6Prefix=hwIPv6Prefix, hwDhcpv6ServerIP=hwDhcpv6ServerIP, hwIPDhcpSvrRowStatus=hwIPDhcpSvrRowStatus, hwIPSectionLowAddr=hwIPSectionLowAddr, hwIPPoolTrapsDefine=hwIPPoolTrapsDefine, hwIPDhcpSpecOption=hwIPDhcpSpecOption, hwIPPoolGroupExtIncludePoolMoveOrder=hwIPPoolGroupExtIncludePoolMoveOrder, hwIPv6PoolAvailableStatus=hwIPv6PoolAvailableStatus, hwIPDhcpReplyOptionSubType=hwIPDhcpReplyOptionSubType, hwIPv6PoolRapidCommitFlag=hwIPv6PoolRapidCommitFlag, hwIPv6PoolPreference=hwIPv6PoolPreference, hwAllIPv6ExcludeAddressNum=hwAllIPv6ExcludeAddressNum, hwDhcpv6SvrInterface1=hwDhcpv6SvrInterface1, hwIPPoolRouterIPMask=hwIPPoolRouterIPMask, hwIPPoolRouterUnnumberedIfName=hwIPPoolRouterUnnumberedIfName, hwIPv6DuidBindPrefixRowStatus=hwIPv6DuidBindPrefixRowStatus, hwPoolGroupUsedIPReachThreshold=hwPoolGroupUsedIPReachThreshold, hwIPPoolGroupDisplayTableGroup=hwIPPoolGroupDisplayTableGroup, hwAllPDPrefixUsedPercent=hwAllPDPrefixUsedPercent, hwPoolGroupUsedIPExhaustResume=hwPoolGroupUsedIPExhaustResume, hwIPSectionUsedNum=hwIPSectionUsedNum, hwIPPoolLowAddr=hwIPPoolLowAddr, hwIPv6PrefixStatus=hwIPv6PrefixStatus, hwDhcpv6ServerTable=hwDhcpv6ServerTable, hwIPPoolOptionExtEntry=hwIPPoolOptionExtEntry, hwIPDhcpv6SvrGroupRefCount=hwIPDhcpv6SvrGroupRefCount, hwIPDhcpv6Svr2VrfName=hwIPDhcpv6Svr2VrfName, hwIPPoolIndex=hwIPPoolIndex, hwIPDhcpReplyOptionRowStatus=hwIPDhcpReplyOptionRowStatus, hwIPv6DelegationPrefixName=hwIPv6DelegationPrefixName, hwIPPoolGroupExtTable=hwIPPoolGroupExtTable, hwIPDhcpReplyOptionSub=hwIPDhcpReplyOptionSub, hwIPv6PrefixAdvValidLifetime=hwIPv6PrefixAdvValidLifetime, hwIPDhcpSvrRefCount=hwIPDhcpSvrRefCount, hwIPPoolGroupDisplayEntry=hwIPPoolGroupDisplayEntry, hwIPSectionEntry=hwIPSectionEntry, hwIPPoolOptionExtTable=hwIPPoolOptionExtTable, hwUsedIPv6AddressAlarm=hwUsedIPv6AddressAlarm, hwIPv6RemotePoolName=hwIPv6RemotePoolName, hwIPPoolOptionTableGroup=hwIPPoolOptionTableGroup, hwIPPoolDAPDeviceSubnetFull=hwIPPoolDAPDeviceSubnetFull, hwIPDhcpOptionSubId=hwIPDhcpOptionSubId, hwIPDhcpSvrSouce=hwIPDhcpSvrSouce, hwIPv6PoolStatisticGroup=hwIPv6PoolStatisticGroup, hwDhcpv6SvrGroupTable=hwDhcpv6SvrGroupTable, hwIPDhcpOptionRowStatus=hwIPDhcpOptionRowStatus, hwRemoteIPPoolPriDNSIPAddress=hwRemoteIPPoolPriDNSIPAddress, hwIPPoolGroupIPFreeNum=hwIPPoolGroupIPFreeNum, hwIPDhcpOptionId3=hwIPDhcpOptionId3, hwIPV6PrefixStatusTable=hwIPV6PrefixStatusTable, hwIPv6PoolUnicastOption=hwIPv6PoolUnicastOption, hwDhcpv6SvrGroupRowStatus=hwDhcpv6SvrGroupRowStatus, hwUsedIPExhaustResume=hwUsedIPExhaustResume, hwDhcpv6ServerSendSolicitSpeedSec=hwDhcpv6ServerSendSolicitSpeedSec, hwIPDhcpOptionId=hwIPDhcpOptionId, hwIPDhcpSvrPriState=hwIPDhcpSvrPriState, hwRemoteIPPoolRowStatus=hwRemoteIPPoolRowStatus, hwIPIdleTotalNum=hwIPIdleTotalNum, hwIPDhcpSvrPriVpnInstance=hwIPDhcpSvrPriVpnInstance, hwIPv6DuidBindPrefixTableGroup=hwIPv6DuidBindPrefixTableGroup, PYSNMP_MODULE_ID=hwIppool, hwIPDhcpSvrAutoRelease=hwIPDhcpSvrAutoRelease, hwIPv6PoolDnsIPAddr=hwIPv6PoolDnsIPAddr, hwIPDhcpv6Svr1VrfName=hwIPDhcpv6Svr1VrfName, hwIPPoolDhcpServerState=hwIPPoolDhcpServerState, hwIPv6AddressExhaustAlarmResume=hwIPv6AddressExhaustAlarmResume, hwIPPoolDhcpSvrGroupName=hwIPPoolDhcpSvrGroupName, hwDhcpv6SvrGroupEntry=hwDhcpv6SvrGroupEntry, hwIPPoolDhcpServerIP=hwIPPoolDhcpServerIP, hwUserIPAddress=hwUserIPAddress, hwRemotePoolTableGroup=hwRemotePoolTableGroup, hwIPv6AddressStatus=hwIPv6AddressStatus, hwIPPoolType=hwIPPoolType, hwIPDhcpScdPriState=hwIPDhcpScdPriState, hwIPAddressStatus=hwIPAddressStatus, hwIpPoolStatisticGroup=hwIpPoolStatisticGroup, hwIPDhcpv6PriSvrState=hwIPDhcpv6PriSvrState, hwIPv6NDRAPrefixTotalNum=hwIPv6NDRAPrefixTotalNum, hwIPPoolGroupIPConflictedNum=hwIPPoolGroupIPConflictedNum, hwRemotePoolEntry=hwRemotePoolEntry, hwIppool=hwIppool, hwIPUsedTotalNum=hwIPUsedTotalNum, hwIPPoolDhcpServerNakCount=hwIPPoolDhcpServerNakCount, hwAllPDPrefixExcludeNum=hwAllPDPrefixExcludeNum, hwIPv6PrefixReservedFlag=hwIPv6PrefixReservedFlag, hwIPDhcpOption=hwIPDhcpOption, hwIPPoolGroupIncludeUndo=hwIPPoolGroupIncludeUndo, hwDhcpv6SvrGroupName=hwDhcpv6SvrGroupName, hwDhcpServerTableGroup=hwDhcpServerTableGroup, hwIPPoolReqNum=hwIPPoolReqNum, hwRemoteIPPoolDhcpGroupName=hwRemoteIPPoolDhcpGroupName, hwIpv6Prefix=hwIpv6Prefix, hwIPTotalNum=hwIPTotalNum, hwDhcpSvrGroupTableGroup=hwDhcpSvrGroupTableGroup, hwIPv6FreePrefixNum=hwIPv6FreePrefixNum, hwUsedIPv6AddressAlarmResume=hwUsedIPv6AddressAlarmResume, hwIPPoolDhcpServerDeadCount=hwIPPoolDhcpServerDeadCount, hwIpv6AddressUsedTotalNum=hwIpv6AddressUsedTotalNum, hwAllPDPrefixTotalNum=hwAllPDPrefixTotalNum, hwIPUsedPercent=hwIPUsedPercent, hwIPPoolGroupIndex=hwIPPoolGroupIndex, hwIPv6NDRAPrefixUsedNum=hwIPv6NDRAPrefixUsedNum, hwIPSectionDesc=hwIPSectionDesc, hwAllNDRAPrefixExcludeNum=hwAllNDRAPrefixExcludeNum, hwRemoteIPPoolName=hwRemoteIPPoolName, hwRemotePoolTable=hwRemotePoolTable, hwDhcpv6ServerIfIndex=hwDhcpv6ServerIfIndex, hwRemoteIPPoolSecDNSIPAddress=hwRemoteIPPoolSecDNSIPAddress, hwIPDhcpOptionSubRowStatus=hwIPDhcpOptionSubRowStatus, hwDhcpv6SvrGroupTableGroup=hwDhcpv6SvrGroupTableGroup, hwIPDnsSuffix=hwIPDnsSuffix, hwIPPoolGroupIncludePoolNum=hwIPPoolGroupIncludePoolNum, hwIPPoolMibTrap=hwIPPoolMibTrap, hwIPPoolPDUnshareOnly=hwIPPoolPDUnshareOnly, hwIPPoolReplyOptionTable=hwIPPoolReplyOptionTable, hwIPPoolGroupExtRowStatus=hwIPPoolGroupExtRowStatus, hwIPPoolDAPApplyUnsuccessful=hwIPPoolDAPApplyUnsuccessful, hwDhcpv6ServerSendSolicitSpeedNum=hwDhcpv6ServerSendSolicitSpeedNum, hwIPPoolStatus=hwIPPoolStatus, hwIPv6PoolPrefixName=hwIPv6PoolPrefixName, hwIPPoolDAPSubnetFull=hwIPPoolDAPSubnetFull, hwIpPoolExtTableGroup=hwIpPoolExtTableGroup, hwIPV6AddressStatusTable=hwIPV6AddressStatusTable, hwIPv6BindPrefix=hwIPv6BindPrefix, hwIPPoolIPAddrLease=hwIPPoolIPAddrLease, hwIPPoolDNSIPAddrStringUndo=hwIPPoolDNSIPAddrStringUndo, hwIPPoolGroupExtEntry=hwIPPoolGroupExtEntry, hwIPv6SlaacUnsharedFlag=hwIPv6SlaacUnsharedFlag, hwDhcpv6ServerEntry=hwDhcpv6ServerEntry)
mibBuilder.exportSymbols("HUAWEI-IPPOOL-MIB", hwIPPoolDhcpServerSendDisvSpdSec=hwIPPoolDhcpServerSendDisvSpdSec, hwIPv6PDPrefixFreeNum=hwIPv6PDPrefixFreeNum, hwIPPoolAlgorithm=hwIPPoolAlgorithm, hwIPv6LinkAddress=hwIPv6LinkAddress, hwDhcpv6SvrWeight2=hwDhcpv6SvrWeight2, hwAllocUserIPFailAlarm=hwAllocUserIPFailAlarm, hwIpSectionTableGroup=hwIpSectionTableGroup, hwIPv6RemotePoolExportHostRoutePDPrefix=hwIPv6RemotePoolExportHostRoutePDPrefix, hwIPSectionAvailableNum=hwIPSectionAvailableNum, hwIPPoolStatistic=hwIPPoolStatistic, hwAllNDRAPrefixConflictNum=hwAllNDRAPrefixConflictNum, hwIPv6UsedAddressNum=hwIPv6UsedAddressNum, hwIPv6PoolStatusTable=hwIPv6PoolStatusTable, hwIPDhcpv6ScdSvrState=hwIPDhcpv6ScdSvrState, hwUserIPLeaseAlarm=hwUserIPLeaseAlarm, hwIPv6PoolTable=hwIPv6PoolTable, hwIpPoolMIBConformance=hwIpPoolMIBConformance, hwIPv6AddressConflictNum=hwIPv6AddressConflictNum, hwIPv6RemotePoolRowStatus=hwIPv6RemotePoolRowStatus, hwIPv6Address=hwIPv6Address, hwDhcpSvrDownReason=hwDhcpSvrDownReason, hwDhcpv6SvrSourceInterface=hwDhcpv6SvrSourceInterface, hwIPPoolGroupTable=hwIPPoolGroupTable, hwIPv6PrefixIndex=hwIPv6PrefixIndex, hwPoolGroupUsedIPExhaust=hwPoolGroupUsedIPExhaust, hwIPPoolGroupRowStatus=hwIPPoolGroupRowStatus, hwIPPoolReplyOptionEntry=hwIPPoolReplyOptionEntry, hwIPDhcpSvrPriAddr=hwIPDhcpSvrPriAddr, hwIPDhcpReplyOptionId=hwIPDhcpReplyOptionId, hwIpv6PrefixLen=hwIpv6PrefixLen, hwIPPoolTable=hwIPPoolTable, hwIPPoolRouterIPAddr=hwIPPoolRouterIPAddr, hwIPPoolReqSucNum=hwIPPoolReqSucNum, hwIPPoolSIPAddr2=hwIPPoolSIPAddr2, hwIPv6RemotePoolDhcpv6SvrGroupName=hwIPv6RemotePoolDhcpv6SvrGroupName, hwIPv6PDPrefixTotalNum=hwIPv6PDPrefixTotalNum, hwAllPDPrefixUsedNum=hwAllPDPrefixUsedNum, hwIPPoolAvailableStatus=hwIPPoolAvailableStatus, hwAllPDPrefixConflictNum=hwAllPDPrefixConflictNum, hwIPPoolReplyOptionGroup=hwIPPoolReplyOptionGroup, hwIPv6RemotePoolExportHostRouteNDPrefix=hwIPv6RemotePoolExportHostRouteNDPrefix, hwIPAddress=hwIPAddress, hwIPv6PrefixAdvPreferredLifetime=hwIPv6PrefixAdvPreferredLifetime, hwIPV6PrefixStatusEntry=hwIPV6PrefixStatusEntry, hwIPDhcpSpecOptionId=hwIPDhcpSpecOptionId, hwIPv6PoolTableGroup=hwIPv6PoolTableGroup, hwIPPoolExtEntry=hwIPPoolExtEntry, hwIPSectionTable=hwIPSectionTable, hwIPPoolNetwork=hwIPPoolNetwork, hwAllIPv6AddressUsedNum=hwAllIPv6AddressUsedNum, hwRemoteIPPoolWeight=hwRemoteIPPoolWeight, hwDhcpSvrVrfName=hwDhcpSvrVrfName, hwDhcpv6ServerVRFName=hwDhcpv6ServerVRFName, hwIPv6PoolRowStatus=hwIPv6PoolRowStatus, hwIPPoolIpAddrRenewal=hwIPPoolIpAddrRenewal, hwRemoteIPPoolIndex=hwRemoteIPPoolIndex, hwAllIPv6AddressUsedPercent=hwAllIPv6AddressUsedPercent, hwIPv6PoolStatusEntry=hwIPv6PoolStatusEntry, hwIPv6PoolStatistic=hwIPv6PoolStatistic, hwIPPoolDomainSearchListGroup=hwIPPoolDomainSearchListGroup, hwUsedIPExhaust=hwUsedIPExhaust, hwIPv6DuidBindPrefixEntry=hwIPv6DuidBindPrefixEntry, hwAllIPv6ConflictAddressNum=hwAllIPv6ConflictAddressNum, hwIPPoolDAPReleaseUnsuccessful=hwIPPoolDAPReleaseUnsuccessful, hwIPv6NDRAPrefixUsedPercent=hwIPv6NDRAPrefixUsedPercent, hwDhcpServerEntry=hwDhcpServerEntry, hwIPv6PrefixRowStatus=hwIPv6PrefixRowStatus, hwIPAddressStatusEntry=hwIPAddressStatusEntry, hwIPPoolNetworkMask=hwIPPoolNetworkMask, hwIPv6RemotePoolAvailableStatus=hwIPv6RemotePoolAvailableStatus, hwIPPoolPriNBNSIPAddr=hwIPPoolPriNBNSIPAddr, hwIPDhcpOption2=hwIPDhcpOption2, hwIPPoolDAPName=hwIPPoolDAPName, hwIPv6RemotePoolEntry=hwIPv6RemotePoolEntry, hwUsedIPReachThresholdResume=hwUsedIPReachThresholdResume, hwIPPoolGroupIPDisableNum=hwIPPoolGroupIPDisableNum, hwIPPoolOptionEntry=hwIPPoolOptionEntry, hwIPExcludeTotalNum=hwIPExcludeTotalNum, hwDhcpSvrGroupTable=hwDhcpSvrGroupTable, hwDhcpSvrGroupEntry=hwDhcpSvrGroupEntry, hwIPv6RemotePoolWeight=hwIPv6RemotePoolWeight, hwIPv6RemotePoolExportHostRouteIPv6Address=hwIPv6RemotePoolExportHostRouteIPv6Address, hwIPPoolName=hwIPPoolName, hwIPPoolSIPAddr1=hwIPPoolSIPAddr1, hwDhcpServerDown=hwDhcpServerDown, hwIPv6VPNInstance=hwIPv6VPNInstance, hwIPPoolSecNBNSIPAddr=hwIPPoolSecNBNSIPAddr, hwIPPoolDhcpSvrGroupIndex=hwIPPoolDhcpSvrGroupIndex, hwIpAddressStatusTableGroup=hwIpAddressStatusTableGroup, hwPoolName=hwPoolName, hwIPPoolConstantIndexFail=hwIPPoolConstantIndexFail, hwIPv6PrefixTableGroup=hwIPv6PrefixTableGroup, hwIPPoolNum=hwIPPoolNum, hwIPv6AddressUsedPercent=hwIPv6AddressUsedPercent, hwIPPoolConstantIndexEnable=hwIPPoolConstantIndexEnable, hwIPPoolDomainSearchList=hwIPPoolDomainSearchList, hwIPPoolTrapOid=hwIPPoolTrapOid, hwIPPoolOptionExtTableGroup=hwIPPoolOptionExtTableGroup, hwIPPoolGroupVPNInstance=hwIPPoolGroupVPNInstance, hwIpPoolTableGroup=hwIpPoolTableGroup, hwIPDhcpv6SvrAddr2=hwIPDhcpv6SvrAddr2, hwIPPoolGroupDisplayTable=hwIPPoolGroupDisplayTable, hwIPPoolExtTable=hwIPPoolExtTable, hwIpv6AddressIdleTotalNum=hwIpv6AddressIdleTotalNum, hwAllIPv6AddressIdleNum=hwAllIPv6AddressIdleNum, hwIPPoolIPExcludeNum=hwIPPoolIPExcludeNum, hwIPv6PDPrefixConflictNum=hwIPv6PDPrefixConflictNum, hwIpv6PrefixUsedTotalNum=hwIpv6PrefixUsedTotalNum, hwIpPoolCompliances=hwIpPoolCompliances, hwLocalIPPoolDifferWithServer=hwLocalIPPoolDifferWithServer, hwIPSectionHighAddr=hwIPSectionHighAddr, hwIPDhcpSvrScdVpnInstance=hwIPDhcpSvrScdVpnInstance, hwIpv6PrefixIdleTotalNum=hwIpv6PrefixIdleTotalNum, hwIPPoolSetting=hwIPPoolSetting, hwIpPoolCompliance=hwIpPoolCompliance, hwRemoteIPPoolAvailableStatus=hwRemoteIPPoolAvailableStatus, hwIPv6PrefixName=hwIPv6PrefixName, hwRemoteIPPoolLeaseManageEnable=hwRemoteIPPoolLeaseManageEnable, hwIPv6RemotePoolIndex=hwIPv6RemotePoolIndex, hwIPPoolOptionTable=hwIPPoolOptionTable, hwDhcpServerTable=hwDhcpServerTable, hwIPPoolGroupTableGroup=hwIPPoolGroupTableGroup, hwIPPoolDomainSearchListRowStatus=hwIPPoolDomainSearchListRowStatus, hwDhcpv6ServerState=hwDhcpv6ServerState)
