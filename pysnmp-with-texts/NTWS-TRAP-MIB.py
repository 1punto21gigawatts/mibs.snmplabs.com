#
# PySNMP MIB module NTWS-TRAP-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NTWS-TRAP-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:51 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ValueRangeConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ConstraintsIntersection")
NtwsApPortOrDapNum, NtwsRadioType, NtwsApWasOperational, NtwsRadioMode, NtwsAccessType, NtwsApTransition, NtwsApServiceAvailability, NtwsApConnectSecurityType, NtwsApSerialNum, NtwsPowerLevel, NtwsCryptoType, NtwsChannelChangeType, NtwsApAttachType, NtwsApNum, NtwsApFingerprint, NtwsRadioMimoState, NtwsRadioChannelWidth, NtwsRadioNum, NtwsRadioPowerChangeType, NtwsRadioConfigState, NtwsApFailDetail = mibBuilder.importSymbols("NTWS-AP-TC", "NtwsApPortOrDapNum", "NtwsRadioType", "NtwsApWasOperational", "NtwsRadioMode", "NtwsAccessType", "NtwsApTransition", "NtwsApServiceAvailability", "NtwsApConnectSecurityType", "NtwsApSerialNum", "NtwsPowerLevel", "NtwsCryptoType", "NtwsChannelChangeType", "NtwsApAttachType", "NtwsApNum", "NtwsApFingerprint", "NtwsRadioMimoState", "NtwsRadioChannelWidth", "NtwsRadioNum", "NtwsRadioPowerChangeType", "NtwsRadioConfigState", "NtwsApFailDetail")
NtwsClientDot1xState, NtwsUserAccessType, NtwsClientAccessMode, NtwsClientSessionState, NtwsClientAuthenProtocolType = mibBuilder.importSymbols("NTWS-CLIENT-SESSION-TC", "NtwsClientDot1xState", "NtwsUserAccessType", "NtwsClientAccessMode", "NtwsClientSessionState", "NtwsClientAuthenProtocolType")
NtwsRFDetectClassificationReason, = mibBuilder.importSymbols("NTWS-RF-DETECT-TC", "NtwsRFDetectClassificationReason")
ntwsTemporary, ntwsTraps, ntwsMibs = mibBuilder.importSymbols("NTWS-ROOT-MIB", "ntwsTemporary", "ntwsTraps", "ntwsMibs")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibIdentifier, IpAddress, NotificationType, ObjectIdentity, Unsigned32, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, TimeTicks, Gauge32, ModuleIdentity, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "IpAddress", "NotificationType", "ObjectIdentity", "Unsigned32", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "TimeTicks", "Gauge32", "ModuleIdentity", "Counter32", "Counter64")
MacAddress, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "MacAddress", "TextualConvention", "DisplayString")
ntwsTrapMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 45, 6, 1, 4, 1))
ntwsTrapMib.setRevisions(('2008-05-15 02:15', '2008-05-07 02:12', '2008-04-22 02:02', '2008-04-10 02:01', '2008-04-08 01:58', '2008-02-18 01:57', '2007-12-03 01:53', '2007-11-15 01:52', '2007-11-01 01:45', '2007-10-01 01:41', '2007-08-31 01:40', '2007-08-31 01:30', '2007-08-24 01:22', '2007-07-06 01:10', '2007-06-05 01:07', '2007-05-17 01:06', '2007-05-04 01:03', '2007-04-19 01:00', '2007-03-27 00:54', '2007-02-15 00:53', '2007-01-09 00:52', '2007-01-09 00:51', '2007-01-09 00:50', '2006-09-28 00:45', '2006-08-08 00:42', '2006-07-31 00:40', '2006-07-28 00:32', '2006-07-23 00:29', '2006-07-12 00:28', '2006-07-07 00:26', '2006-07-07 00:25', '2006-07-06 00:23', '2006-04-19 00:22', '2006-04-19 00:21', '2005-01-01 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ntwsTrapMib.setRevisionsDescriptions(('v3.8.5: Clarified description to reflect the actual use and avoid future misuse of ntwsDeviceSerNum. Updated description for ntwsApName. Documented the meaning of NtwsClientIpAddrChangeReason enumeration values.', 'v3.8.2: Added new trap: ntwsClusterFailureTrap, related TC and objects: NtwsClusterFailureReason, ntwsClusterFailureReason, ntwsClusterFailureDescription.', 'v3.7.2: Added new traps: ntwsRFDetectRogueDeviceTrap2, ntwsRFDetectSuspectDeviceTrap2 and related objects: ntwsRFDetectXmtrRadioType, ntwsRFDetectXmtrCryptoType. Obsoleted ntwsRFDetectRogueDeviceTrap, ntwsRFDetectSuspectDeviceTrap.', 'v3.7.1: Added new trap: ntwsClientAuthorizationSuccessTrap4, and related object: ntwsClientRadioType. Obsoletes ntwsClientAuthorizationSuccessTrap, ntwsClientAuthorizationSuccessTrap2, ntwsClientAuthorizationSuccessTrap3.', 'v3.6.8: Obsoleted two traps: ntwsRFDetectSpoofedMacAPTrap, ntwsRFDetectSpoofedSsidAPTrap.', 'v3.6.7: Redesigned the AP Operational - Radio Status trap to support 11n-capable APs. Added varbindings: ntwsRadioChannelWidth, ntwsRadioMimoState. The new trap is ntwsApOperRadioStatusTrap3.', 'v3.6.3: Obsoleted one object: ntwsApPortOrDapNum (previously deprecated).', 'v3.6.2: Added three new traps: ntwsApManagerChangeTrap, ntwsClientClearedTrap2, ntwsMobilityDomainResiliencyStatusTrap, related TCs and objects: NtwsApMgrChangeReason, ntwsApMgrChangeReason, ntwsApMgrOldIp, ntwsApMgrNewIp, ntwsClientSessionElapsedSeconds, NtwsClientClearedReason, ntwsClientClearedReason, NtwsMobilityDomainResiliencyStatus, ntwsMobilityDomainResiliencyStatus. Obsoleted one trap: ntwsClientClearedTrap, and related object: ntwsClientSessionElapsedTime.', 'v3.5.5: Added new trap: ntwsClientAuthorizationSuccessTrap3, related TC and objects: NtwsClientAuthorizationReason ntwsClientAuthorizationReason, ntwsClientAccessMode, ntwsPhysPortNum. Obsoletes ntwsClientAuthorizationSuccessTrap, ntwsClientAuthorizationSuccessTrap2.', 'v3.5.1: Cleaned up object (ntwsAPAccessType). Marked it as obsolete, because instrumentation code for traps using it was removed long time ago.', "v3.5.0: Corrected ntwsClientMACAddress2 SYNTAX: its value was always a MacAddress, not an arbitrary 'OCTET STRING (SIZE (6))'. There is no change on the wire, just a more appropriate DISPLAY-HINT.", 'v3.4.0, MRT v5.2: Made changes in order to comply with corporate MIB conventions.', 'v3.3.2: Added new trap: ntwsMichaelMICFailure, related TC and object: NtwsMichaelMICFailureCause, ntwsMichaelMICFailureCause. Obsoletes ntwsMpMichaelMICFailure, ntwsMpMichaelMICFailure2.', 'v3.2.0: Redesigned the AP Status traps. - Replaced ntwsApAttachType and ntwsApPortOrDapNum with a single varbinding, ntwsApNum. - Added varbinding ntwsRadioMode to the AP Operational - Radio Status trap. The new traps are ntwsApNonOperStatusTrap2, ntwsApOperRadioStatusTrap2.', 'v3.1.2: Obsoleted one trap: ntwsRFDetectUnAuthorizedAPTrap', 'v3.1.1: Added new trap: ntwsConfigurationSavedTrap and related objects: ntwsConfigSaveFileName, ntwsConfigSaveInitiatorType, ntwsConfigSaveInitiatorIp, ntwsConfigSaveInitiatorDetails, ntwsConfigSaveGeneration.', 'v3.0.1: added one value (3) to NtwsClientIpAddrChangeReason', 'v3.0.0: Added six new traps: ntwsRFDetectRogueDeviceTrap, ntwsRFDetectRogueDeviceDisappearTrap, ntwsRFDetectSuspectDeviceTrap, ntwsRFDetectSuspectDeviceDisappearTrap, ntwsRFDetectClientViaRogueWiredAPTrap3, ntwsRFDetectClassificationChangeTrap and related object: ntwsRFDetectClassificationReason. Obsoleted seven traps: ntwsRFDetectRogueAPTrap, ntwsRFDetectRogueDisappearTrap, ntwsRFDetectInterferingRogueAPTrap, ntwsRFDetectInterferingRogueDisappearTrap, ntwsRFDetectUnAuthorizedSsidTrap, ntwsRFDetectUnAuthorizedOuiTrap, ntwsRFDetectClientViaRogueWiredAPTrap2.', 'v2.9.2: added three values (13, 14, 15) to NtwsAuthorizationFailureType', 'v2.9.1: Cleaned up trap (ntwsClientAuthorizationSuccessTrap) and object (ntwsRadioRssi) deprecated long time ago. Marked them as obsolete, because instrumentation code was removed already.', 'v2.9.0: Added two textual conventions: NtwsUserAttributeList, NtwsSessionDisconnectType three new traps: ntwsClientDynAuthorChangeSuccessTrap, ntwsClientDynAuthorChangeFailureTrap, ntwsClientDisconnectTrap and related objects: ntwsClientDynAuthorClientIp, ntwsChangedUserParamOldValues, ntwsChangedUserParamNewValues, ntwsClientDisconnectSource, ntwsClientDisconnectDescription', 'v2.8.5: added one value (24) to NtwsRFDetectDoSType', 'v2.6.4: Added two new traps: ntwsMobilityDomainFailOverTrap, ntwsMobilityDomainFailBackTrap and related objects: ntwsMobilityDomainSecondarySeedIp, ntwsMobilityDomainPrimarySeedIp', 'v2.6.2: Factored out four textual conventions into a new module, Client Session TC: NtwsClientSessionState, NtwsClientAuthenProtocolType, NtwsClientDot1xState, NtwsUserAccessType and imported them from there.', 'v2.5.2: Added new trap: ntwsApRejectLicenseExceededTrap and related object: ntwsNumLicensedActiveAPs', 'v2.5.0: Added new trap: ntwsRFDetectAdhocUserDisappearTrap', 'v2.4.7: Removed unused imports', 'v2.4.1: Added new trap: ntwsRFDetectBlacklistedTrap, related textual convention: NtwsBlacklistingCause and objects: ntwsBlacklistingRemainingTime, ntwsBlacklistingCause', 'v2.4.0: Added new trap: RFDetectClientViaRogueWiredAPTrap2 and related object: ntwsRFDetectRogueAPMacAddr. This trap obsoletes the RFDetectClientViaRogueWiredAPTrap', 'v2.3.1: Added 3 new traps: ntwsClientAssociationSuccessTrap, ntwsClientAuthenticationSuccessTrap, ntwsClientDeAuthenticationTrap', 'v2.3.0: Added new trap: ntwsClientIpAddrChangeTrap and related object: NtwsClientIpAddrChangeReason', 'v2.2.0: added two values (13, 14) to NtwsAuthenticationFailureType', 'v2.1.6: Updated client connection failure causes and descriptions', 'v2.0.6: Revised for release', 'v1: initial version',))
if mibBuilder.loadTexts: ntwsTrapMib.setLastUpdated('200805150215Z')
if mibBuilder.loadTexts: ntwsTrapMib.setOrganization('Nortel Networks')
if mibBuilder.loadTexts: ntwsTrapMib.setContactInfo('www.nortelnetworks.com')
if mibBuilder.loadTexts: ntwsTrapMib.setDescription("Notifications emitted by Nortel Networks wireless switches. AP = Access Point; AC = Access Controller (wireless switch), the device that runs a SNMP Agent implementing this MIB. Copyright 2008 Nortel Networks. All rights reserved. This Nortel Networks SNMP Management Information Base Specification (Specification) embodies Nortel Networks' confidential and proprietary intellectual property. This Specification is supplied 'AS IS' and Nortel Networks makes no warranty, either express or implied, as to the use, operation, condition, or performance of the Specification.")
ntwsTrapsV2 = MibIdentifier((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0))
class NtwsAssociationFailureType(TextualConvention, Integer32):
    description = "Enumeration of the reasons for an AP to fail a client's 802.11 association"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 1), ("load-balance", 2), ("quiet-period", 3), ("dot1x", 4), ("no-prev-assoc", 5), ("glare", 6), ("cipher-rejected", 7), ("cipher-mismatch", 8), ("wep-not-configured", 9), ("bad-assoc-request", 10), ("out-of-memory", 11), ("tkip-cm-active", 12), ("roam-in-progress", 13))

class NtwsAuthenticationFailureType(TextualConvention, Integer32):
    description = "Enumeration of the reasons for AAA authentication to fail user-glob-mismatch - auth rule/user not found for console login user-does-not-exist - login failed because user not found invalid-password - login failed because of invalid password server-timeout - unable to contact a AAA server signature-failed - incorrect password for mschapv2 local-certificate-error - certificate error all-servers-down - unable to contact any AAA server in the group authentication-type-mismatch - client and switch are using different authentication methods server-rejected - received reject from AAA server fallthru-auth-misconfig - problem with fallthru authentication no-lastresort-auth - problem with last-resort authentication exceeded-max-attempts - local user failed to login within allowed number of attempts resulting in account lockout password-expired - user's password expired"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
    namedValues = NamedValues(("other", 1), ("user-glob-mismatch", 2), ("user-does-not-exist", 3), ("invalid-password", 4), ("server-timeout", 5), ("signature-failed", 6), ("local-certificate-error", 7), ("all-servers-down", 8), ("authentication-type-mismatch", 9), ("server-rejected", 10), ("fallthru-auth-misconfig", 11), ("no-lastresort-auth", 12), ("exceeded-max-attempts", 13), ("password-expired", 14))

class NtwsAuthorizationFailureType(TextualConvention, Integer32):
    description = 'Enumeration of the reasons for AAA authorization failure'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15))
    namedValues = NamedValues(("other", 1), ("user-param", 2), ("location-policy", 3), ("vlan-tunnel-failure", 4), ("ssid-mismatch", 5), ("acl-mismatch", 6), ("timeofday-mismatch", 7), ("crypto-type-mismatch", 8), ("mobility-profile-mismatch", 9), ("start-date-mismatch", 10), ("end-date-mismatch", 11), ("svr-type-mismatch", 12), ("ssid-defaults", 13), ("qos-profile-mismatch", 14), ("simultaneous-logins", 15))

class NtwsDot1xFailureType(TextualConvention, Integer32):
    description = "Enumeration of the dot1x failure reasons. quiet-period occurs when client is denied access for a period of time after a failed connection attempt administrative-kill means that the session was cleared using the 'clear dot1x client' command bad-rsnie means that client sent an invalid IE timeout is when there are excessive retransmissions max-sessions-exceeded means the maximum allowed wired clients has been exceeded on the switch fourway-hs-failure is for failures occuring the 4-way key handshake user-glob-mismatch means the name received in the dot1x identity request does not match any configured userglobs in the system reauth-disabled means that the client is trying to reauthenticate but reauthentication is disabled gkhs-failure means that either there was no response from the client during the GKHS or the response did not have an IE force-unauth-configured means that the client is trying to connect through a port which is configured as force-unauth cert-not-installed means that there is no certificate installed on the switch"
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13))
    namedValues = NamedValues(("other", 1), ("quiet-period", 2), ("administrative-kill", 3), ("bad-rsnie", 4), ("timeout", 5), ("max-sessions-exceeded", 6), ("fourway-hs-failure", 7), ("user-glob-mismatch", 8), ("bonded-auth-failure", 9), ("reauth-disabled", 10), ("gkhs-failure", 11), ("force-unauth-configured", 12), ("cert-not-installed", 13))

class NtwsRFDetectDoSType(TextualConvention, Integer32):
    description = 'The types of denial of service (DoS) attacks'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24))
    namedValues = NamedValues(("probe-flood", 1), ("auth-flood", 2), ("null-data-flood", 3), ("mgmt-6-flood", 4), ("mgmt-7-flood", 5), ("mgmt-d-flood", 6), ("mgmt-e-flood", 7), ("mgmt-f-flood", 8), ("fakeap-ssid", 9), ("fakeap-bssid", 10), ("bcast-deauth", 11), ("null-probe-resp", 12), ("disassoc-spoof", 13), ("deauth-spoof", 14), ("decrypt-err", 15), ("weak-wep-iv", 16), ("wireless-bridge", 17), ("netstumbler", 18), ("wellenreiter", 19), ("adhoc-client-frame", 20), ("associate-pkt-flood", 21), ("re-associate-pkt-flood", 22), ("de-associate-pkt-flood", 23), ("bssid-spoof", 24))

class NtwsClientIpAddrChangeReason(TextualConvention, Integer32):
    description = 'Describes the reasons for client IP address changes: client-connected: IP address assigned on initial connection; other: IP address changed after initial connection; dhcp-to-static: erroneous condition where client IP address is changed to a static address while the dhcp-restrict option is enabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("client-connected", 1), ("other", 2), ("dhcp-to-static", 3))

class NtwsBlacklistingCause(TextualConvention, Integer32):
    description = "Enumeration of reasons for blacklisting a transmitter: bl-configured: administrative action (explicitly added to the Black List), bl-associate-pkt-flood: Association request flood detected, bl-re-associate-pkt-flood: Re-association request flood detected, bl-de-associate-pkt-flood: De-association request flood detected. (The leading 'bl-' stands for 'Black-Listed'; reading it as 'Blocked' would also make sense)."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("bl-configured", 1), ("bl-associate-pkt-flood", 2), ("bl-re-associate-pkt-flood", 3), ("bl-de-associate-pkt-flood", 4))

class NtwsUserAttributeList(DisplayString):
    description = 'Display string listing AAA attributes and their values. These strings can be used, for example, in change of authorization notifications. The syntax is: attribute_name1=value1, attribute_name2=value2, ... where attribute_name can be one of the following: vlan-name, in-acl, out-acl, mobility-prof, time-of-day, end-date, sess-timeout, acct-interval, service-type. Example: vlan-name=red, in-acl=in_acl_1'
    status = 'current'
    subtypeSpec = DisplayString.subtypeSpec + ValueSizeConstraint(0, 2048)

class NtwsSessionDisconnectType(TextualConvention, Integer32):
    description = 'Enumeration of the sources that can initiate the termination of a session: admin-disconnect: session terminated by administrative action (from console, telnet session, WebView, or WMS). dyn-auth-disconnect: session terminated by dynamic authorization client; description will have the IP address of the dynamic authorization client which sent the request.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("admin-disconnect", 2), ("dyn-auth-disconnect", 3))

class NtwsConfigSaveInitiatorType(TextualConvention, Integer32):
    description = 'Enumeration of the sources that can initiate a configuration save: cli-console: configuration save requested from serial console administrative session. cli-remote: configuration save requested from telnet or ssh administrative session. https: configuration save requested via HTTPS API (WMS or WebView). snmp-set: configuration saved as a result of performing a SNMP SET operation.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("other", 1), ("cli-console", 2), ("cli-remote", 3), ("https", 4), ("snmp-set", 5))

class NtwsMichaelMICFailureCause(TextualConvention, Integer32):
    description = 'Describes the cause/source of Michael MIC Failure detection.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("detected-by-ap", 1), ("detected-by-client", 2))

class NtwsClientAuthorizationReason(TextualConvention, Integer32):
    description = 'Enumeration of the reasons for AAA authorization.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))
    namedValues = NamedValues(("other", 1), ("new-client", 2), ("re-auth", 3), ("roam", 4))

class NtwsApMgrChangeReason(TextualConvention, Integer32):
    description = "Enumeration of the reasons why AP is switching to its secondary link: failover: AP's primary link failed. load-balancing: AP's primary link is overloaded."
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("failover", 2), ("load-balancing", 3))

class NtwsClientClearedReason(TextualConvention, Integer32):
    description = 'Enumeration of the reasons for clearing a session: normal: Session was cleared from the switch as the last step in the normal session termination process. backup-failure: The backup switch could not activate a session from a failed MX.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("normal", 2), ("backup-failure", 3))

class NtwsMobilityDomainResiliencyStatus(TextualConvention, Integer32):
    description = 'Enumeration of the current resilient capacity status for a mobility domain: resilient: Every AP in the mobility domain has a secondary backup link. If the primary switch of an AP failed, the AP and its sessions would fail over to its backup link. degraded: Some APs only have a primary link. If the primary switch of an AP without a backup link failed, the AP would reboot and its sessions would be lost.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("other", 1), ("resilient", 2), ("degraded", 3))

class NtwsClusterFailureReason(TextualConvention, Integer32):
    description = 'Enumeration of the reasons why the AC goes into cluster failure state: validation-error: Cluster configuration rejected due to validation error.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("other", 1), ("validation-error", 2))

ntwsDeviceId = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 1), ObjectIdentifier()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsDeviceId.setStatus('current')
if mibBuilder.loadTexts: ntwsDeviceId.setDescription('Enumeration of devices as indicated in registration MIB. This object is used within notifications and is not accessible.')
ntwsMobilityDomainIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 2), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsMobilityDomainIp.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilityDomainIp.setDescription('IP address of the other switch which the send switch is reporting on. This object is used within notifications and is not accessible.')
ntwsAPMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 3), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsAPMACAddress.setStatus('current')
if mibBuilder.loadTexts: ntwsAPMACAddress.setDescription('MAC address of the AP of interest. This object is used within notifications and is not accessible.')
ntwsClientMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 4), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientMACAddress.setStatus('current')
if mibBuilder.loadTexts: ntwsClientMACAddress.setDescription('MAC address of the client of interest. This object is used within notifications and is not accessible.')
ntwsRFDetectXmtrMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 5), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRFDetectXmtrMacAddr.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectXmtrMacAddr.setDescription("Describes the transmitter's MAC address. This object is used within notifications and is not accessible.")
ntwsPortNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 6), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 22))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsPortNum.setStatus('current')
if mibBuilder.loadTexts: ntwsPortNum.setDescription('Port number on the AC which reported this rogue during a detection sweep. This object is used within notifications and is not accessible.')
ntwsAPRadioNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 7), NtwsRadioNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsAPRadioNum.setStatus('current')
if mibBuilder.loadTexts: ntwsAPRadioNum.setDescription('Radio number of the AP which reported this rogue during a detection sweep. This object is used within notifications and is not accessible.')
ntwsRadioRssi = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioRssi.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsRadioRssi.setDescription('The received signal strength as measured by the AP radio which reported this rogue during a detection sweep. This object is used within notifications and is not accessible. Not used by any notification.')
ntwsRadioBSSID = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(6, 6)).setFixedLength(6)).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioBSSID.setStatus('current')
if mibBuilder.loadTexts: ntwsRadioBSSID.setDescription('The basic service set identifier of the rogue from the beacon frame reported by the AP during a detection sweep. This object is used within notifications and is not accessible.')
ntwsUserName = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 10), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsUserName.setStatus('current')
if mibBuilder.loadTexts: ntwsUserName.setDescription('The client user name as learned from the AAA process. This object is used within notifications and is not accessible.')
ntwsClientAuthServerIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 11), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAuthServerIp.setStatus('current')
if mibBuilder.loadTexts: ntwsClientAuthServerIp.setDescription('The client authentication server ip address. This object is used within notifications and is not accessible.')
ntwsClientSessionState = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 12), NtwsClientSessionState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientSessionState.setStatus('current')
if mibBuilder.loadTexts: ntwsClientSessionState.setDescription('The state for a client session. This object is used within notifications and is not accessible.')
ntwsDAPNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 13), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsDAPNum.setStatus('current')
if mibBuilder.loadTexts: ntwsDAPNum.setDescription('The DAP number on the wireless switch. This object is used within notifications and is not accessible.')
ntwsClientIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 14), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientIp.setStatus('current')
if mibBuilder.loadTexts: ntwsClientIp.setDescription('The client ip address. This object is used within notifications and is not accessible.')
ntwsClientSessionId = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 15), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientSessionId.setStatus('current')
if mibBuilder.loadTexts: ntwsClientSessionId.setDescription('The unique global id for a client session. This object is used within notifications and is not accessible.')
ntwsClientAuthenProtocolType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 16), NtwsClientAuthenProtocolType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAuthenProtocolType.setStatus('current')
if mibBuilder.loadTexts: ntwsClientAuthenProtocolType.setDescription('The authentication protocol for a client. This object is used within notifications and is not accessible.')
ntwsClientVLANName = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 17), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientVLANName.setStatus('current')
if mibBuilder.loadTexts: ntwsClientVLANName.setDescription('The vlan name a client is on. This object is used within notifications and is not accessible.')
ntwsClientSessionStartTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 18), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientSessionStartTime.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsClientSessionStartTime.setDescription("The start time of a client session, relative to the sysUptime. This object is used within notifications and is not accessible. Obsolete. Do not use it because it's not vital information and often *cannot* be implemented to match the declared semantics: a client session might have been created on another wireless switch, *before* the current switch booted (the local zero of sysUptime).")
ntwsClientFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 19), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientFailureCause.setStatus('current')
if mibBuilder.loadTexts: ntwsClientFailureCause.setDescription('Display string for possible failure cause for a client session. This object is used within notifications and is not accessible.')
ntwsClientRoamedFromPortNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 20), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 20))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientRoamedFromPortNum.setStatus('current')
if mibBuilder.loadTexts: ntwsClientRoamedFromPortNum.setDescription('The port number on the AC a client has roamed from. This object is used within notifications and is not accessible.')
ntwsClientRoamedFromRadioNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 21), NtwsRadioNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientRoamedFromRadioNum.setStatus('current')
if mibBuilder.loadTexts: ntwsClientRoamedFromRadioNum.setDescription('The radio number of the AP the client is roamed from. This object is used within notifications and is not accessible.')
ntwsClientRoamedFromDAPNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 22), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientRoamedFromDAPNum.setStatus('current')
if mibBuilder.loadTexts: ntwsClientRoamedFromDAPNum.setDescription('The DAP number on the AC which reported this rogue during roam. This object is used within notifications and is not accessible.')
ntwsUserParams = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 23), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsUserParams.setStatus('current')
if mibBuilder.loadTexts: ntwsUserParams.setDescription('A display string of User Parameters for client user authorization attributes learned through AAA and/or used by the system. Note that the syntax will be (name=value, name=value,..) for the parsing purpose. This object is used within notifications and is not accessible.')
ntwsClientLocationPolicyIndex = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 24), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientLocationPolicyIndex.setStatus('current')
if mibBuilder.loadTexts: ntwsClientLocationPolicyIndex.setDescription('Index of the Location Policy rule applied to a user. This object is used within notifications and is not accessible.')
ntwsClientAssociationFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 25), NtwsAssociationFailureType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAssociationFailureCause.setStatus('current')
if mibBuilder.loadTexts: ntwsClientAssociationFailureCause.setDescription('The client association failure cause. This object is used within notifications and is not accessible.')
ntwsClientAuthenticationFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 26), NtwsAuthenticationFailureType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAuthenticationFailureCause.setStatus('current')
if mibBuilder.loadTexts: ntwsClientAuthenticationFailureCause.setDescription('The client authentication failure cause. This object is used within notifications and is not accessible.')
ntwsClientAuthorizationFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 27), NtwsAuthorizationFailureType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAuthorizationFailureCause.setStatus('current')
if mibBuilder.loadTexts: ntwsClientAuthorizationFailureCause.setDescription('The client authorization failure cause. Note that if it is the user-param, we would additionally expect the failure cause description to list the user attribute value that caused the failure. This object is used within notifications and is not accessible.')
ntwsClientFailureCauseDescription = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 28), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientFailureCauseDescription.setStatus('current')
if mibBuilder.loadTexts: ntwsClientFailureCauseDescription.setDescription('Display string for describing the client failure cause. This object is used within notifications and is not accessible.')
ntwsClientRoamedFromWsIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 29), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientRoamedFromWsIp.setStatus('current')
if mibBuilder.loadTexts: ntwsClientRoamedFromWsIp.setDescription('The system IP address of the AC (wireless switch) a client roamed from. This object is used within notifications and is not accessible.')
ntwsClientRoamedFromAccessType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 30), NtwsAccessType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientRoamedFromAccessType.setStatus('current')
if mibBuilder.loadTexts: ntwsClientRoamedFromAccessType.setDescription('The client access type (ap, dap, wired) that a client roamed from. This object is used within notifications and is not accessible.')
ntwsClientAccessType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 31), NtwsAccessType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAccessType.setStatus('current')
if mibBuilder.loadTexts: ntwsClientAccessType.setDescription('The client access type (ap, dap, wired). This object is used within notifications and is not accessible. For new traps, use ntwsClientAccessMode instead of this object.')
ntwsRadioMACAddress = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 32), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioMACAddress.setStatus('current')
if mibBuilder.loadTexts: ntwsRadioMACAddress.setDescription('AP Radio MAC address. This object is used within notifications and is not accessible.')
ntwsRadioPowerChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 33), NtwsRadioPowerChangeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioPowerChangeReason.setStatus('current')
if mibBuilder.loadTexts: ntwsRadioPowerChangeReason.setDescription('The type of event that caused an AP radio power change; occurs due to auto-tune operation. This object is used within notifications and is not accessible.')
ntwsNewChannelNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 34), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsNewChannelNum.setStatus('current')
if mibBuilder.loadTexts: ntwsNewChannelNum.setDescription('New channel number of the AP radio used after an auto tune event. This object is used within notifications and is not accessible.')
ntwsOldChannelNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 35), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsOldChannelNum.setStatus('current')
if mibBuilder.loadTexts: ntwsOldChannelNum.setDescription('Old channel number of the AP radio used before an auto tune event. This object is used within notifications and is not accessible.')
ntwsChannelChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 36), NtwsChannelChangeType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsChannelChangeReason.setStatus('current')
if mibBuilder.loadTexts: ntwsChannelChangeReason.setDescription('The type of event that caused an AP radio channel change; occurs due to auto-tune operation. This object is used within notifications and is not accessible.')
ntwsRFDetectListenerListInfo = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 37), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 571))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRFDetectListenerListInfo.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectListenerListInfo.setDescription('The RF Detection Listener list info including a list of (listener mac, rssi, channel, ssid, time). There will be a maximum of 6 entries in the list. Formats: MAC: 18 bytes: %2.2X:%2.2X:%2.2X:%2.2X:%2.2X:%2.2X RSSI: 10 bytes: %10d CHANNEL: 3 bytes: %3d SSID: 32 bytes: %s TIME: 26 bytes: %s Maximum size per entry is 89+4+2 = 95 bytes. Maximum size of the string is 6*95= 571 bytes (include NULL). This object is used within notifications and is not accessible.')
ntwsRadioSSID = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 38), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioSSID.setStatus('current')
if mibBuilder.loadTexts: ntwsRadioSSID.setDescription('The radio SSID string This object is used within notifications and is not accessible.')
ntwsNewPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 39), NtwsPowerLevel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsNewPowerLevel.setStatus('current')
if mibBuilder.loadTexts: ntwsNewPowerLevel.setDescription('New power level of the AP radio used after an auto tune event. This object is used within notifications and is not accessible.')
ntwsOldPowerLevel = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 40), NtwsPowerLevel()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsOldPowerLevel.setStatus('current')
if mibBuilder.loadTexts: ntwsOldPowerLevel.setDescription('Old power level of the AP radio used before an auto tune event. This object is used within notifications and is not accessible.')
ntwsRadioPowerChangeDescription = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 41), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioPowerChangeDescription.setStatus('current')
if mibBuilder.loadTexts: ntwsRadioPowerChangeDescription.setDescription('The radio power change description. In the case of reason being dup-pkts-threshold-exceed(1), and retransmit-threshold-exceed(2), clientMacAddress will be included in the description. This object is used within notifications and is not accessible.')
ntwsCounterMeasurePerformerListInfo = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 42), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsCounterMeasurePerformerListInfo.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsCounterMeasurePerformerListInfo.setDescription('A list of information for APs performing Counter Measures including a list of performer mac addresses. This object is used within notifications and is not accessible. Not used by any notification.')
ntwsClientDot1xState = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 43), NtwsClientDot1xState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientDot1xState.setStatus('current')
if mibBuilder.loadTexts: ntwsClientDot1xState.setDescription('The state for a client 802.1X. This object is used within notifications and is not accessible.')
ntwsClientDot1xFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 44), NtwsDot1xFailureType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientDot1xFailureCause.setStatus('current')
if mibBuilder.loadTexts: ntwsClientDot1xFailureCause.setDescription('The client 802.1X failure cause. This object is used within notifications and is not accessible.')
ntwsAPAccessType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 45), NtwsAccessType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsAPAccessType.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsAPAccessType.setDescription('The access point access type (ap, dap,). This object is used within notifications and is not accessible. Not used by any notification.')
ntwsUserAccessType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 46), NtwsUserAccessType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsUserAccessType.setStatus('current')
if mibBuilder.loadTexts: ntwsUserAccessType.setDescription('The user access type (MAC, WEB, DOT1X, LAST-RESORT). This object is used within notifications and is not accessible.')
ntwsClientSessionElapsedTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 47), TimeTicks()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientSessionElapsedTime.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsClientSessionElapsedTime.setDescription('The elapsed time for a client session. Obsoleted because session time is usually reported in seconds. This object is used within notifications and is not accessible.')
ntwsLocalId = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 48), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65000))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsLocalId.setStatus('current')
if mibBuilder.loadTexts: ntwsLocalId.setDescription('Local Id for the session. This object is used within notifications and is not accessible.')
ntwsRFDetectDoSType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 49), NtwsRFDetectDoSType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRFDetectDoSType.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectDoSType.setDescription('The type of denial of service (DoS) attack. This object is used within notifications and is not accessible.')
ntwsSourceWsIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 50), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsSourceWsIp.setStatus('current')
if mibBuilder.loadTexts: ntwsSourceWsIp.setDescription('IP address of another AC (wireless switch). This object is used within notifications and is not accessible.')
ntwsClientVLANid = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 51), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientVLANid.setStatus('current')
if mibBuilder.loadTexts: ntwsClientVLANid.setDescription('VLAN ID used by client traffic. This object is used within notifications and is not accessible.')
ntwsClientVLANtag = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 52), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 4095))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientVLANtag.setStatus('current')
if mibBuilder.loadTexts: ntwsClientVLANtag.setDescription('VLAN tag used by client traffic. This object is used within notifications and is not accessible.')
ntwsDeviceModel = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 53), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsDeviceModel.setStatus('current')
if mibBuilder.loadTexts: ntwsDeviceModel.setDescription('The model of a device in printable US-ASCII. If unknown (or not available), then the value is a zero length string. This object is used within notifications and is not accessible.')
ntwsDeviceSerNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 54), NtwsApSerialNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsDeviceSerNum.setStatus('current')
if mibBuilder.loadTexts: ntwsDeviceSerNum.setDescription('The serial number of an AP in printable US-ASCII. If unknown (or not available), then the value is a zero length string. Should NOT be used to identify other devices, for example an AC (wireless switch). This object is used within notifications and is not accessible.')
ntwsRsaPubKeyFingerPrint = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 55), NtwsApFingerprint()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRsaPubKeyFingerPrint.setStatus('current')
if mibBuilder.loadTexts: ntwsRsaPubKeyFingerPrint.setDescription('The hash of the RSA public key (of a key pair) in binary form that uniquely identifies the public key of an AP. This object is used within notifications and is not accessible.')
ntwsDAPconnectWarningType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 56), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("not-configured-fingerprint-connect", 1), ("secure-handshake-failure", 2), ("not-configured-fingerprint-required", 3), ("fingerprint-mismatch", 4)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsDAPconnectWarningType.setStatus('current')
if mibBuilder.loadTexts: ntwsDAPconnectWarningType.setDescription("The type of DAP connect warning. The values are: not-configured-fingerprint-connect(1)...a DAP, which has an RSA keypair but did not have its fingerprint configured on the AC, has connected to the AC when 'dap security' set to 'OPTIONAL' secure-handshake-failure(2).............a DAP tried to connect to the AC with security, but the handshake failed not-configured-fingerprint-required(3)..a DAP tried to connect to the AC with security, but 'dap security' set to 'REQUIRED', and no fingerprint was configured for the DAP fingerprint-mismatch(4).................a DAP tried to connect to the AC with security and its fingerprint was configured, but the fingerprint did not match the computed one This object is used within notifications and is not accessible.")
ntwsClientMACAddress2 = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 57), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientMACAddress2.setStatus('current')
if mibBuilder.loadTexts: ntwsClientMACAddress2.setDescription('MAC address of the second client of interest. This object is used within notifications and is not accessible.')
ntwsApAttachType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 58), NtwsApAttachType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApAttachType.setStatus('current')
if mibBuilder.loadTexts: ntwsApAttachType.setDescription('How the AP is attached to the AC (directly or via L2/L3 network). This object is used within notifications and is not accessible.')
ntwsApPortOrDapNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 59), NtwsApPortOrDapNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApPortOrDapNum.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApPortOrDapNum.setDescription('The Port Number if the AP is directly attached, or the CLI-assigned DAP Number if attached via L2/L3 network. This object is used within notifications and is not accessible. Obsoleted by ntwsApNum. (In 6.0, direct- and network-attached APs were unified.)')
ntwsApName = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 60), DisplayString()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApName.setStatus('current')
if mibBuilder.loadTexts: ntwsApName.setDescription("The name of the AP, as assigned in AC's CLI; defaults to AP<Number> (examples: 'AP01', 'AP22', 'AP333', 'AP4444'); could have been changed from CLI to a meaningful name, for example the location of the AP (example: 'MeetingRoom73'). This object is used within notifications and is not accessible.")
ntwsApTransition = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 61), NtwsApTransition()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApTransition.setStatus('current')
if mibBuilder.loadTexts: ntwsApTransition.setDescription('AP state Transition, as seen by the AC. This object is used within notifications and is not accessible.')
ntwsApFailDetail = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 62), NtwsApFailDetail()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApFailDetail.setStatus('current')
if mibBuilder.loadTexts: ntwsApFailDetail.setDescription("Detailed failure code for some of the transitions specified in 'ntwsApTransition' object. This object is used within notifications and is not accessible.")
ntwsRadioType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 63), NtwsRadioType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioType.setStatus('current')
if mibBuilder.loadTexts: ntwsRadioType.setDescription('Indicates the AP Radio Type, as seen by AC. This object is used within notifications and is not accessible.')
ntwsRadioConfigState = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 64), NtwsRadioConfigState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioConfigState.setStatus('current')
if mibBuilder.loadTexts: ntwsRadioConfigState.setDescription('Indicates the Radio State, as seen by the AC. This object is used within notifications and is not accessible.')
ntwsApConnectSecurityType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 65), NtwsApConnectSecurityType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApConnectSecurityType.setStatus('current')
if mibBuilder.loadTexts: ntwsApConnectSecurityType.setDescription('Indicates the security level of the connection between AP and AC. This object is used within notifications and is not accessible.')
ntwsApServiceAvailability = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 66), NtwsApServiceAvailability()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApServiceAvailability.setStatus('current')
if mibBuilder.loadTexts: ntwsApServiceAvailability.setDescription('Indicates the level of wireless service availability. This object is used within notifications and is not accessible.')
ntwsApWasOperational = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 67), NtwsApWasOperational()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApWasOperational.setStatus('current')
if mibBuilder.loadTexts: ntwsApWasOperational.setDescription('Indicates whether the AP was operational before a transition occured. This object is used within notifications and is not accessible.')
ntwsClientTimeSinceLastRoam = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 68), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientTimeSinceLastRoam.setStatus('current')
if mibBuilder.loadTexts: ntwsClientTimeSinceLastRoam.setDescription('The time in seconds since the most recent roam of a given client. This object is used within notifications and is not accessible.')
ntwsClientIpAddrChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 69), NtwsClientIpAddrChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientIpAddrChangeReason.setStatus('current')
if mibBuilder.loadTexts: ntwsClientIpAddrChangeReason.setDescription('Indicates the reason why client IP address changed. This object is used within notifications and is not accessible.')
ntwsRFDetectRogueAPMacAddr = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 70), MacAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRFDetectRogueAPMacAddr.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectRogueAPMacAddr.setDescription('Describes the MAC address of the Rogue AP the transmitter is connected to. This object is used within notifications and is not accessible.')
ntwsBlacklistingRemainingTime = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 71), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsBlacklistingRemainingTime.setStatus('current')
if mibBuilder.loadTexts: ntwsBlacklistingRemainingTime.setDescription('The time in seconds remaining until a given transmitter could be removed from the Black List. This object is used within notifications and is not accessible.')
ntwsBlacklistingCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 72), NtwsBlacklistingCause()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsBlacklistingCause.setStatus('current')
if mibBuilder.loadTexts: ntwsBlacklistingCause.setDescription('Indicates the reason why a given transmitter is blacklisted. This object is used within notifications and is not accessible.')
ntwsNumLicensedActiveAPs = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 73), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsNumLicensedActiveAPs.setStatus('current')
if mibBuilder.loadTexts: ntwsNumLicensedActiveAPs.setDescription('Indicates the maximum (licensed) number of active APs for this AC. This object is used within notifications and is not accessible.')
ntwsClientDynAuthorClientIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 74), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientDynAuthorClientIp.setStatus('current')
if mibBuilder.loadTexts: ntwsClientDynAuthorClientIp.setDescription('The dynamic authorization client IP address which caused the change of authorization. This object is used within notifications and is not accessible.')
ntwsChangedUserParamOldValues = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 75), NtwsUserAttributeList()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsChangedUserParamOldValues.setStatus('current')
if mibBuilder.loadTexts: ntwsChangedUserParamOldValues.setDescription('A display string listing the changed AAA attributes and their values, before the change of authorization was executed. This object is used within notifications and is not accessible.')
ntwsChangedUserParamNewValues = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 76), NtwsUserAttributeList()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsChangedUserParamNewValues.setStatus('current')
if mibBuilder.loadTexts: ntwsChangedUserParamNewValues.setDescription('A display string listing the changed AAA attributes and their values, after the change of authorization was executed. This object is used within notifications and is not accessible.')
ntwsClientDisconnectSource = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 77), NtwsSessionDisconnectType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientDisconnectSource.setStatus('current')
if mibBuilder.loadTexts: ntwsClientDisconnectSource.setDescription('The external source that initiated the termination of a session. This object is used within notifications and is not accessible.')
ntwsClientDisconnectDescription = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 78), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientDisconnectDescription.setStatus('current')
if mibBuilder.loadTexts: ntwsClientDisconnectDescription.setDescription('Display string for providing available information related to the external source that initiated a session termination. This object is used within notifications and is not accessible.')
ntwsMobilityDomainSecondarySeedIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 79), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsMobilityDomainSecondarySeedIp.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilityDomainSecondarySeedIp.setDescription('The secondary seed IP address to which the Mobility Domain has failed over. This object is used within notifications and is not accessible.')
ntwsMobilityDomainPrimarySeedIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 80), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsMobilityDomainPrimarySeedIp.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilityDomainPrimarySeedIp.setDescription('The primary seed IP address to which the Mobility Domain has failed back. This object is used within notifications and is not accessible.')
ntwsRFDetectClassificationReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 81), NtwsRFDetectClassificationReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRFDetectClassificationReason.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectClassificationReason.setDescription('Indicates the reason why a RF device is classified the way it is. This object is used within notifications and is not accessible.')
ntwsConfigSaveFileName = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 82), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsConfigSaveFileName.setStatus('current')
if mibBuilder.loadTexts: ntwsConfigSaveFileName.setDescription('Display string listing the name of the file to which the running configuration was saved. This object is used within notifications and is not accessible.')
ntwsConfigSaveInitiatorType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 83), NtwsConfigSaveInitiatorType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsConfigSaveInitiatorType.setStatus('current')
if mibBuilder.loadTexts: ntwsConfigSaveInitiatorType.setDescription('Indicates the source that initiated a configuration save. This object is used within notifications and is not accessible.')
ntwsConfigSaveInitiatorIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 84), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsConfigSaveInitiatorIp.setStatus('current')
if mibBuilder.loadTexts: ntwsConfigSaveInitiatorIp.setDescription('The IP address of the source that initiated a configuration save. This object is used within notifications and is not accessible.')
ntwsConfigSaveInitiatorDetails = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 85), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsConfigSaveInitiatorDetails.setStatus('current')
if mibBuilder.loadTexts: ntwsConfigSaveInitiatorDetails.setDescription('Display string listing additional information regarding the source that initiated a configuration save, when available. This object is used within notifications and is not accessible.')
ntwsConfigSaveGeneration = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 86), Counter32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsConfigSaveGeneration.setStatus('current')
if mibBuilder.loadTexts: ntwsConfigSaveGeneration.setDescription('Indicates the number of configuration changes since the last system boot. The generation count is used to track the number of times the running configuration has been changed due to administrative actions (set/clear), SNMP requests (SET), XML requests (e.g. WMS). This object is used within notifications and is not accessible.')
ntwsApNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 87), NtwsApNum()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApNum.setStatus('current')
if mibBuilder.loadTexts: ntwsApNum.setDescription('The administratively assigned AP Number, unique on same AC (switch), regardless of how APs are attached to the AC. This object is used within notifications and is not accessible. Obsoletes ntwsApPortOrDapNum. For clarity, use this object to identify an AP since in 6.0 directly attached APs and DAPs were unified.')
ntwsRadioMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 88), NtwsRadioMode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioMode.setStatus('current')
if mibBuilder.loadTexts: ntwsRadioMode.setDescription('Indicates the administratively controlled Radio Mode (enabled/disabled/sentry). This object is used within notifications and is not accessible.')
ntwsMichaelMICFailureCause = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 89), NtwsMichaelMICFailureCause()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsMichaelMICFailureCause.setStatus('current')
if mibBuilder.loadTexts: ntwsMichaelMICFailureCause.setDescription('Indicates the Michael MIC Failure cause / who detected it. This object is used within notifications and is not accessible.')
ntwsClientAccessMode = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 90), NtwsClientAccessMode()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAccessMode.setStatus('current')
if mibBuilder.loadTexts: ntwsClientAccessMode.setDescription('The client access mode (ap, wired). This object is used within notifications and is not accessible. Intended to replace ntwsClientAccessType. (In 6.0, direct- and network-attached APs were unified.)')
ntwsClientAuthorizationReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 91), NtwsClientAuthorizationReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientAuthorizationReason.setStatus('current')
if mibBuilder.loadTexts: ntwsClientAuthorizationReason.setDescription('Indicates the reason why client performed AAA authorization. This object is used within notifications and is not accessible.')
ntwsPhysPortNum = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 92), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 1024))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsPhysPortNum.setStatus('current')
if mibBuilder.loadTexts: ntwsPhysPortNum.setDescription("Physical Port Number on the AC. Zero means the port is unknown or not applicable (for example, when ntwsClientAccessMode = 'ap'). This object is used within notifications and is not accessible.")
ntwsApMgrOldIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 93), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApMgrOldIp.setStatus('current')
if mibBuilder.loadTexts: ntwsApMgrOldIp.setDescription("The IP address of the AP's former primary manager switch. This object is used within notifications and is not accessible.")
ntwsApMgrNewIp = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 94), IpAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApMgrNewIp.setStatus('current')
if mibBuilder.loadTexts: ntwsApMgrNewIp.setDescription("The IP address of the AP's new primary manager switch. This address was formerly the AP's secondary backup link. This object is used within notifications and is not accessible.")
ntwsApMgrChangeReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 95), NtwsApMgrChangeReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsApMgrChangeReason.setStatus('current')
if mibBuilder.loadTexts: ntwsApMgrChangeReason.setDescription("Indicates the reason why the AP's primary manager changed. This object is used within notifications and is not accessible.")
ntwsClientClearedReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 96), NtwsClientClearedReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientClearedReason.setStatus('current')
if mibBuilder.loadTexts: ntwsClientClearedReason.setDescription('Indicates the reason why client was cleared. This object is used within notifications and is not accessible.')
ntwsMobilityDomainResiliencyStatus = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 97), NtwsMobilityDomainResiliencyStatus()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsMobilityDomainResiliencyStatus.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilityDomainResiliencyStatus.setDescription('Indicates the current resilient capacity status for a mobility domain. This object is used within notifications and is not accessible.')
ntwsClientSessionElapsedSeconds = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 98), Unsigned32()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientSessionElapsedSeconds.setStatus('current')
if mibBuilder.loadTexts: ntwsClientSessionElapsedSeconds.setDescription('Indicates the time in seconds elapsed since the start of the Client Session. This object is used within notifications and is not accessible.')
ntwsRadioChannelWidth = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 99), NtwsRadioChannelWidth()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioChannelWidth.setStatus('current')
if mibBuilder.loadTexts: ntwsRadioChannelWidth.setDescription('Indicates the administratively controlled Channel Width (20MHz/40MHz). This object is used within notifications and is not accessible.')
ntwsRadioMimoState = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 100), NtwsRadioMimoState()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRadioMimoState.setStatus('current')
if mibBuilder.loadTexts: ntwsRadioMimoState.setDescription('Indicates the Radio MIMO State, as seen by the AC (1x1/2x3/3x3). This object is used within notifications and is not accessible.')
ntwsClientRadioType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 101), NtwsRadioType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClientRadioType.setStatus('current')
if mibBuilder.loadTexts: ntwsClientRadioType.setDescription('Indicates the Client Radio Type, as detected by an attached AP and reported to the AC. This object is used within notifications and is not accessible.')
ntwsRFDetectXmtrRadioType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 102), NtwsRadioType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRFDetectXmtrRadioType.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectXmtrRadioType.setDescription('Indicates the Radio Type of the Transmitter, as detected by an attached AP and reported to the AC. The Transmitter may be a wireless client or an AP. This object is used within notifications and is not accessible.')
ntwsRFDetectXmtrCryptoType = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 103), NtwsCryptoType()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsRFDetectXmtrCryptoType.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectXmtrCryptoType.setDescription('Indicates the Crypto Type used by the Transmitter, as detected by an attached AP and reported to the AC. This object is used within notifications and is not accessible.')
ntwsClusterFailureReason = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 104), NtwsClusterFailureReason()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClusterFailureReason.setStatus('current')
if mibBuilder.loadTexts: ntwsClusterFailureReason.setDescription('Indicates the reason why cluster configuration failed to apply. This object is used within notifications and is not accessible.')
ntwsClusterFailureDescription = MibScalar((1, 3, 6, 1, 4, 1, 45, 6, 1, 2, 105), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: ntwsClusterFailureDescription.setStatus('current')
if mibBuilder.loadTexts: ntwsClusterFailureDescription.setDescription('Display string for describing the cluster configuration failure cause. This object is used within notifications and is not accessible.')
ntwsDeviceFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 1)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceId"))
if mibBuilder.loadTexts: ntwsDeviceFailTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsDeviceFailTrap.setDescription('The device has a failure indication')
ntwsDeviceOkayTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 2)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceId"))
if mibBuilder.loadTexts: ntwsDeviceOkayTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsDeviceOkayTrap.setDescription('The device has recovered')
ntwsPoEFailTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 3)).setObjects(("NTWS-TRAP-MIB", "ntwsPortNum"))
if mibBuilder.loadTexts: ntwsPoEFailTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsPoEFailTrap.setDescription('PoE has failed on the indicated port')
ntwsApTimeoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 4)).setObjects(("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPMACAddress"), ("NTWS-TRAP-MIB", "ntwsAPAccessType"), ("NTWS-TRAP-MIB", "ntwsDAPNum"))
if mibBuilder.loadTexts: ntwsApTimeoutTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApTimeoutTrap.setDescription("The AP entering the AC at port ntwsPortNum with MAC ntwsRadioMacAddress and of the access type (ap or dap) has not responded. Replaced by ntwsApNonOperStatusTrap2, with ntwsApTransition = 'timeout'.")
ntwsAPBootTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 5)).setObjects(("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPMACAddress"), ("NTWS-TRAP-MIB", "ntwsAPAccessType"), ("NTWS-TRAP-MIB", "ntwsDAPNum"))
if mibBuilder.loadTexts: ntwsAPBootTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsAPBootTrap.setDescription("The AP entering the AC at port ntwsPortNum with MAC ntwsRadioMacAddress and of the access type (ap or dap) has booted. Replaced by ntwsApNonOperStatusTrap2, with ntwsApTransition = 'bootSuccess'.")
ntwsMobilityDomainJoinTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 6)).setObjects(("NTWS-TRAP-MIB", "ntwsMobilityDomainIp"))
if mibBuilder.loadTexts: ntwsMobilityDomainJoinTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilityDomainJoinTrap.setDescription('The mobility domain member has received an UP notice from the remote address.')
ntwsMobilityDomainTimeoutTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 7)).setObjects(("NTWS-TRAP-MIB", "ntwsMobilityDomainIp"))
if mibBuilder.loadTexts: ntwsMobilityDomainTimeoutTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilityDomainTimeoutTrap.setDescription('The mobility domain member has declared the remote address to be DOWN.')
ntwsMpMichaelMICFailure = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 8)).setObjects(("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsRadioMACAddress"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"))
if mibBuilder.loadTexts: ntwsMpMichaelMICFailure.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsMpMichaelMICFailure.setDescription('Two Michael MIC failures were seen within 60 seconds of each other. Obsoleted by ntwsMichaelMICFailure.')
ntwsRFDetectRogueAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 9)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectRogueAPTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsRFDetectRogueAPTrap.setDescription('This trap is sent when RF detection finds a rogue AP. XmtrMacAddr is the radio MAC address from the beacon. ListenerListInfo is a display string of a list of listener information. Obsoleted by ntwsRFDetectRogueDeviceTrap2.')
ntwsRFDetectAdhocUserTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 10)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectAdhocUserTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectAdhocUserTrap.setDescription('This trap is sent when RF detection sweep finds a ad-hoc user. ntwsRFDetectXmtrMacAddr is the MAC address of the ad-hoc user. ntwsRFDetectListenerListInfo is a display string of a list of listener information.')
ntwsRFDetectRogueDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 11)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: ntwsRFDetectRogueDisappearTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsRFDetectRogueDisappearTrap.setDescription('This trap is sent when a rogue has disappeared. Obsoleted by ntwsRFDetectRogueDeviceDisappearTrap.')
ntwsClientAuthenticationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 12)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientAuthenticationFailureCause"), ("NTWS-TRAP-MIB", "ntwsClientFailureCauseDescription"))
if mibBuilder.loadTexts: ntwsClientAuthenticationFailureTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsClientAuthenticationFailureTrap.setDescription('This trap is sent if a client authentication fails.')
ntwsClientAuthorizationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 13)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientLocationPolicyIndex"), ("NTWS-TRAP-MIB", "ntwsUserParams"), ("NTWS-TRAP-MIB", "ntwsClientAuthorizationFailureCause"), ("NTWS-TRAP-MIB", "ntwsClientFailureCauseDescription"))
if mibBuilder.loadTexts: ntwsClientAuthorizationFailureTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsClientAuthorizationFailureTrap.setDescription('This trap is sent if a client authorization fails.')
ntwsClientAssociationFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 14)).setObjects(("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientAssociationFailureCause"), ("NTWS-TRAP-MIB", "ntwsClientFailureCauseDescription"))
if mibBuilder.loadTexts: ntwsClientAssociationFailureTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsClientAssociationFailureTrap.setDescription('This trap is sent if a client association fails.')
ntwsClientAuthorizationSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 15)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientVLANName"), ("NTWS-TRAP-MIB", "ntwsClientSessionState"), ("NTWS-TRAP-MIB", "ntwsClientSessionStartTime"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsRadioRssi"))
if mibBuilder.loadTexts: ntwsClientAuthorizationSuccessTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsClientAuthorizationSuccessTrap.setDescription('This trap is sent when a client authorizes. Obsoleted by ntwsClientAuthorizationSuccessTrap4.')
ntwsClientDeAssociationTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 16)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientVLANName"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"))
if mibBuilder.loadTexts: ntwsClientDeAssociationTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsClientDeAssociationTrap.setDescription('This trap is sent if a client de-association occurred.')
ntwsClientRoamingTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 17)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientRoamedFromAccessType"), ("NTWS-TRAP-MIB", "ntwsClientRoamedFromPortNum"), ("NTWS-TRAP-MIB", "ntwsClientRoamedFromRadioNum"), ("NTWS-TRAP-MIB", "ntwsClientRoamedFromDAPNum"), ("NTWS-TRAP-MIB", "ntwsClientRoamedFromWsIp"), ("NTWS-TRAP-MIB", "ntwsClientTimeSinceLastRoam"))
if mibBuilder.loadTexts: ntwsClientRoamingTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsClientRoamingTrap.setDescription('This trap is sent if a client roams from one location to another.')
ntwsAutoTuneRadioPowerChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 18)).setObjects(("NTWS-TRAP-MIB", "ntwsRadioMACAddress"), ("NTWS-TRAP-MIB", "ntwsNewPowerLevel"), ("NTWS-TRAP-MIB", "ntwsOldPowerLevel"), ("NTWS-TRAP-MIB", "ntwsRadioPowerChangeReason"), ("NTWS-TRAP-MIB", "ntwsRadioPowerChangeDescription"))
if mibBuilder.loadTexts: ntwsAutoTuneRadioPowerChangeTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsAutoTuneRadioPowerChangeTrap.setDescription("This trap is sent if a radio's power level has changed based on auto-tune.")
ntwsAutoTuneRadioChannelChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 19)).setObjects(("NTWS-TRAP-MIB", "ntwsRadioMACAddress"), ("NTWS-TRAP-MIB", "ntwsNewChannelNum"), ("NTWS-TRAP-MIB", "ntwsOldChannelNum"), ("NTWS-TRAP-MIB", "ntwsChannelChangeReason"))
if mibBuilder.loadTexts: ntwsAutoTuneRadioChannelChangeTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsAutoTuneRadioChannelChangeTrap.setDescription("This trap is sent if a radio's channel has changed based on auto-tune.")
ntwsCounterMeasureStartTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 20)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRadioMACAddress"))
if mibBuilder.loadTexts: ntwsCounterMeasureStartTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsCounterMeasureStartTrap.setDescription('This trap is sent when counter measures are started against a rogue. ntwsRFDetectXmtrMacAddr is the mac address of the rogue we are doing counter measures against. ntwsRadioMACAddress identifies the radio performing the countermeasures.')
ntwsCounterMeasureStopTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 21)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRadioMACAddress"))
if mibBuilder.loadTexts: ntwsCounterMeasureStopTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsCounterMeasureStopTrap.setDescription('This trap is sent when counter measures are stopped against a rogue. ntwsRFDetectXmtrMacAddr is the mac address of the rogue we were doing counter measures against. ntwsRadioMACAddress identifies the radio performing the countermeasures.')
ntwsClientDot1xFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 22)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientDot1xState"), ("NTWS-TRAP-MIB", "ntwsClientDot1xFailureCause"), ("NTWS-TRAP-MIB", "ntwsClientFailureCauseDescription"))
if mibBuilder.loadTexts: ntwsClientDot1xFailureTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsClientDot1xFailureTrap.setDescription('This trap is sent if a client failed 802.1X.')
ntwsClientClearedTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 23)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientSessionElapsedTime"), ("NTWS-TRAP-MIB", "ntwsLocalId"))
if mibBuilder.loadTexts: ntwsClientClearedTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsClientClearedTrap.setDescription('This trap is sent when a client session is cleared. Obsoleted by ntwsClientClearedTrap2.')
ntwsClientAuthorizationSuccessTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 24)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientVLANName"), ("NTWS-TRAP-MIB", "ntwsClientSessionState"), ("NTWS-TRAP-MIB", "ntwsClientSessionStartTime"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsUserAccessType"), ("NTWS-TRAP-MIB", "ntwsLocalId"))
if mibBuilder.loadTexts: ntwsClientAuthorizationSuccessTrap2.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsClientAuthorizationSuccessTrap2.setDescription('This trap is sent when a client authorizes. Obsoleted by ntwsClientAuthorizationSuccessTrap4.')
ntwsRFDetectSpoofedMacAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 25)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectSpoofedMacAPTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsRFDetectSpoofedMacAPTrap.setDescription('This trap is sent when RF detection finds an AP using the MAC of the listener. ntwsRFDetectXmtrMacAddr is the radio MAC address from the beacon. ntwsRFDetectListenerListInfo is a display string of a list of listener information. Obsoleted by ntwsRFDetectDoSTrap and ntwsRFDetectRogueDeviceTrap2. One of the two traps will be sent depending on the type of AP MAC spoofing detected.')
ntwsRFDetectSpoofedSsidAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 26)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectSpoofedSsidAPTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsRFDetectSpoofedSsidAPTrap.setDescription('This trap is sent when RF detection finds an AP using the SSID of the listener, and the AP is not in the mobility domain. ntwsRFDetectXmtrMacAddr is the radio MAC address from the beacon. ntwsRFDetectListenerListInfo is a display string of a list of listener information. Obsoleted by ntwsRFDetectRogueDeviceTrap2 and ntwsRFDetectSuspectDeviceTrap2. One of the two traps will be sent, depending on RF detection classification rules.')
ntwsRFDetectDoSTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 27)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectDoSType"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectDoSTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectDoSTrap.setDescription('This trap is sent when RF detection finds a denial of service (DoS) occurring. ntwsRFDetectDoSType specifies the type of DoS. ntwsRFDetectXmtrMacAddr is the radio MAC address from the beacon. ntwsRFDetectListenerListInfo is a display string of a list of listener information.')
ntwsRFDetectClientViaRogueWiredAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 28)).setObjects(("NTWS-TRAP-MIB", "ntwsSourceWsIp"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsClientVLANid"), ("NTWS-TRAP-MIB", "ntwsClientVLANtag"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectClientViaRogueWiredAPTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsRFDetectClientViaRogueWiredAPTrap.setDescription("This trap is sent when a client is detected that connected via a rogue AP that is attached to a wired port. ntwsSourceWsIp is the IP address of the AC (switch) with the wired port. ntwsPortNum is the port on the AC. ntwsClientVLANid is the VLAN ID of the client's traffic. ntwsClientVLANtag is the VLAN tag of the client's traffic. ntwsRFDetectXmtrMacAddr is the MAC address of the client. ntwsRFDetectListenerListInfo is a display string of a list of listener information. Obsoleted by ntwsRFDetectClientViaRogueWiredAPTrap3.")
ntwsRFDetectInterferingRogueAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 29)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectInterferingRogueAPTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsRFDetectInterferingRogueAPTrap.setDescription('This trap is sent when RF detection finds an interfering rogue AP. ntwsRFDetectXmtrMacAddr is the radio MAC address from the beacon. ntwsRFDetectListenerListInfo is a display string of a list of listener information. Obsoleted by ntwsRFDetectSuspectDeviceTrap2.')
ntwsRFDetectInterferingRogueDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 30)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: ntwsRFDetectInterferingRogueDisappearTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsRFDetectInterferingRogueDisappearTrap.setDescription('This trap is sent when an interfering rogue has disappeared. ntwsRFDetectXmtrMacAddr is the radio MAC address from the beacon. Obsoleted by ntwsRFDetectSuspectDeviceDisappearTrap.')
ntwsRFDetectUnAuthorizedSsidTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 31)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectUnAuthorizedSsidTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsRFDetectUnAuthorizedSsidTrap.setDescription('This trap is sent when RF detection finds use of an unauthorized SSID. ntwsRFDetectXmtrMacAddr is the radio MAC address from the beacon. ntwsRFDetectListenerListInfo is a display string of a list of listener information. Obsoleted by ntwsRFDetectRogueDeviceTrap2 and ntwsRFDetectSuspectDeviceTrap2. One of the two traps will be sent if the device having an unauthorized SSID is classified as rogue or suspect because of this.')
ntwsRFDetectUnAuthorizedOuiTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 32)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectUnAuthorizedOuiTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsRFDetectUnAuthorizedOuiTrap.setDescription('This trap is sent when RF detection finds use of an unauthorized OUI. ntwsRFDetectXmtrMacAddr is the radio MAC address from the beacon. ntwsRFDetectListenerListInfo is a display string of a list of listener information. Obsoleted by ntwsRFDetectRogueDeviceTrap2 and ntwsRFDetectSuspectDeviceTrap2. One of the two traps will be sent if the device having an unauthorized OUI is classified as rogue or suspect because of this.')
ntwsRFDetectUnAuthorizedAPTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 33)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"))
if mibBuilder.loadTexts: ntwsRFDetectUnAuthorizedAPTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsRFDetectUnAuthorizedAPTrap.setDescription('This trap is sent when RF detection finds operation of an unauthorized AP. ntwsRFDetectXmtrMacAddr is the radio MAC address from the beacon. ntwsRFDetectListenerListInfo is a display string of a list of listener information. Obsoleted by ntwsRFDetectRogueDeviceTrap2.')
ntwsDAPConnectWarningTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 34)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceModel"), ("NTWS-TRAP-MIB", "ntwsDeviceSerNum"), ("NTWS-TRAP-MIB", "ntwsRsaPubKeyFingerPrint"), ("NTWS-TRAP-MIB", "ntwsDAPconnectWarningType"))
if mibBuilder.loadTexts: ntwsDAPConnectWarningTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsDAPConnectWarningTrap.setDescription("A DAP, tried to connect to the AC. ntwsDeviceModel provides the model of the DAP. ntwsDeviceSerNum provides the serial number of the DAP. ntwsRsaPubKeyFingerPrint provides the computed fingerprint of the DAP. ntwsDAPconnectWarningType provides the type of connect warning. Replaced by ntwsApNonOperStatusTrap2, with ntwsApTransition = 'connectFail'.")
ntwsRFDetectDoSPortTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 35)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectDoSType"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"))
if mibBuilder.loadTexts: ntwsRFDetectDoSPortTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectDoSPortTrap.setDescription("This trap is sent when RF detection finds a denial of service (DoS) occurring. This has port and AP info instead of 'Listener info'. ntwsRFDetectDoSType specifies the type of DoS. ntwsRFDetectXmtrMacAddr is the radio MAC address from the beacon. ntwsClientAccessType specifies whether wired, AP, or DAP. ntwsPortNum (for wired or AP), the port that is used. ntwsDAPNum (for a DAP), the ID of the DAP.")
ntwsMpMichaelMICFailure2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 36)).setObjects(("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress2"))
if mibBuilder.loadTexts: ntwsMpMichaelMICFailure2.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsMpMichaelMICFailure2.setDescription('Two Michael MIC failures were seen within 60 seconds of each other. Object ntwsClientMACAddress is the source of the first failure, and object ntwsClientMACAddress2 source of the second failure. Obsoleted by ntwsMichaelMICFailure.')
ntwsApNonOperStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 37)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceSerNum"), ("NTWS-TRAP-MIB", "ntwsAPMACAddress"), ("NTWS-TRAP-MIB", "ntwsApAttachType"), ("NTWS-TRAP-MIB", "ntwsApPortOrDapNum"), ("NTWS-TRAP-MIB", "ntwsApName"), ("NTWS-TRAP-MIB", "ntwsApTransition"), ("NTWS-TRAP-MIB", "ntwsApFailDetail"), ("NTWS-TRAP-MIB", "ntwsApWasOperational"))
if mibBuilder.loadTexts: ntwsApNonOperStatusTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApNonOperStatusTrap.setDescription('This trap is sent when the AP changes state and the new one is a non-operational state. Obsoleted by ntwsApNonOperStatusTrap2.')
ntwsApOperRadioStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 38)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceSerNum"), ("NTWS-TRAP-MIB", "ntwsApAttachType"), ("NTWS-TRAP-MIB", "ntwsApPortOrDapNum"), ("NTWS-TRAP-MIB", "ntwsApName"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioMACAddress"), ("NTWS-TRAP-MIB", "ntwsRadioType"), ("NTWS-TRAP-MIB", "ntwsRadioConfigState"), ("NTWS-TRAP-MIB", "ntwsApConnectSecurityType"), ("NTWS-TRAP-MIB", "ntwsApServiceAvailability"))
if mibBuilder.loadTexts: ntwsApOperRadioStatusTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApOperRadioStatusTrap.setDescription('This trap is sent when the Radio changes state. It also contains aggregate information about the AP in operational state - security level and service availability. Obsoleted by ntwsApOperRadioStatusTrap3.')
ntwsClientIpAddrChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 39)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientVLANName"), ("NTWS-TRAP-MIB", "ntwsClientSessionState"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsUserAccessType"), ("NTWS-TRAP-MIB", "ntwsLocalId"), ("NTWS-TRAP-MIB", "ntwsClientIpAddrChangeReason"))
if mibBuilder.loadTexts: ntwsClientIpAddrChangeTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsClientIpAddrChangeTrap.setDescription("This trap is sent when a client's IP address changes. The most likely case for this is when the client first connects to the network.")
ntwsClientAssociationSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 40)).setObjects(("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"))
if mibBuilder.loadTexts: ntwsClientAssociationSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsClientAssociationSuccessTrap.setDescription('This trap is sent if a client association succeeds. WARNING: DO NOT enable it in normal use. It may impair switch performance! Only recommended for debugging network issues.')
ntwsClientAuthenticationSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 41)).setObjects(("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"))
if mibBuilder.loadTexts: ntwsClientAuthenticationSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsClientAuthenticationSuccessTrap.setDescription('This trap is sent if a client authentication succeeds.')
ntwsClientDeAuthenticationTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 42)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientVLANName"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"))
if mibBuilder.loadTexts: ntwsClientDeAuthenticationTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsClientDeAuthenticationTrap.setDescription('This trap is sent if a client de-authentication occured.')
ntwsRFDetectBlacklistedTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 43)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsBlacklistingRemainingTime"), ("NTWS-TRAP-MIB", "ntwsBlacklistingCause"))
if mibBuilder.loadTexts: ntwsRFDetectBlacklistedTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectBlacklistedTrap.setDescription("This trap is sent if an association, re-association or de-association request (packet) is detected from a blacklisted transmitter (identified by MAC: 'ntwsRFDetectXmtrMacAddr'). If 'ntwsBlacklistingCause' is 'configured', then 'ntwsBlacklistingRemainingTime' will be zero, meaning indefinite time (depending on administrative actions on the Black List). Otherwise, 'ntwsBlacklistingRemainingTime' will indicate the time in seconds until this transmitter's requests could be allowed.")
ntwsRFDetectClientViaRogueWiredAPTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 44)).setObjects(("NTWS-TRAP-MIB", "ntwsSourceWsIp"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsClientVLANid"), ("NTWS-TRAP-MIB", "ntwsClientVLANtag"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"), ("NTWS-TRAP-MIB", "ntwsRFDetectRogueAPMacAddr"))
if mibBuilder.loadTexts: ntwsRFDetectClientViaRogueWiredAPTrap2.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsRFDetectClientViaRogueWiredAPTrap2.setDescription("This trap is sent when a client is detected that connected via a rogue AP that is attached to a wired port. ntwsSourceWsIp is the IP address of the AC (switch) with the wired port. ntwsPortNum is the port on the AC. ntwsClientVLANid is the VLAN ID of the client's traffic. ntwsClientVLANtag is the VLAN tag of the client's traffic. ntwsRFDetectXmtrMacAddr is the MAC address of the client. ntwsRFDetectListenerListInfo is a display string of a list of listener information. ntwsRFDetectRogueAPMacAddr is the MAC address of the Rogue AP (wired) the client is connected to. Obsoleted by ntwsRFDetectClientViaRogueWiredAPTrap3.")
ntwsRFDetectAdhocUserDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 45)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: ntwsRFDetectAdhocUserDisappearTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectAdhocUserDisappearTrap.setDescription('This trap is sent when RF detection sweep finds that an ad-hoc user disappeared. ntwsRFDetectXmtrMacAddr is the MAC address of the ad-hoc user.')
ntwsApRejectLicenseExceededTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 46)).setObjects(("NTWS-TRAP-MIB", "ntwsNumLicensedActiveAPs"))
if mibBuilder.loadTexts: ntwsApRejectLicenseExceededTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsApRejectLicenseExceededTrap.setDescription('This trap is sent when an AC (wireless switch) receives a packet from an inactive AP and attaching that AP would make the AC exceed the maximum (licensed) number of active APs.')
ntwsClientDynAuthorChangeSuccessTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 47)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientSessionState"), ("NTWS-TRAP-MIB", "ntwsClientDynAuthorClientIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsUserAccessType"), ("NTWS-TRAP-MIB", "ntwsLocalId"), ("NTWS-TRAP-MIB", "ntwsChangedUserParamOldValues"), ("NTWS-TRAP-MIB", "ntwsChangedUserParamNewValues"))
if mibBuilder.loadTexts: ntwsClientDynAuthorChangeSuccessTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsClientDynAuthorChangeSuccessTrap.setDescription('This trap is sent when the authorization attributes for a user are dynamically changed by an authorized dynamic authorization client.')
ntwsClientDynAuthorChangeFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 48)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientDynAuthorClientIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsUserParams"), ("NTWS-TRAP-MIB", "ntwsClientAuthorizationFailureCause"), ("NTWS-TRAP-MIB", "ntwsClientFailureCauseDescription"))
if mibBuilder.loadTexts: ntwsClientDynAuthorChangeFailureTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsClientDynAuthorChangeFailureTrap.setDescription('This trap is sent if a change of authorization request sent by an authorized dynamic authorization client is unsuccessful.')
ntwsClientDisconnectTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 49)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientAccessType"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsDAPNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsLocalId"), ("NTWS-TRAP-MIB", "ntwsClientDisconnectSource"), ("NTWS-TRAP-MIB", "ntwsClientDisconnectDescription"))
if mibBuilder.loadTexts: ntwsClientDisconnectTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsClientDisconnectTrap.setDescription('This trap is sent when a client session is terminated administratively.')
ntwsMobilityDomainFailOverTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 50)).setObjects(("NTWS-TRAP-MIB", "ntwsMobilityDomainSecondarySeedIp"))
if mibBuilder.loadTexts: ntwsMobilityDomainFailOverTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilityDomainFailOverTrap.setDescription('This trap is sent when the Mobility Domain fails over to the secondary seed.')
ntwsMobilityDomainFailBackTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 51)).setObjects(("NTWS-TRAP-MIB", "ntwsMobilityDomainPrimarySeedIp"))
if mibBuilder.loadTexts: ntwsMobilityDomainFailBackTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilityDomainFailBackTrap.setDescription('This trap is sent when the Mobility Domain fails back to the primary seed.')
ntwsRFDetectRogueDeviceTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 52)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"), ("NTWS-TRAP-MIB", "ntwsRFDetectClassificationReason"))
if mibBuilder.loadTexts: ntwsRFDetectRogueDeviceTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsRFDetectRogueDeviceTrap.setDescription('This trap is sent when RF detection finds a rogue device. XmtrMacAddr is the radio MAC address from the beacon. ListenerListInfo is a display string of a list of listener information. ClassificationReason indicates the reason why the device is classified as rogue. Obsoleted by ntwsRFDetectRogueDeviceTrap2.')
ntwsRFDetectRogueDeviceDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 53)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: ntwsRFDetectRogueDeviceDisappearTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectRogueDeviceDisappearTrap.setDescription('This trap is sent when a rogue device has disappeared. This trap obsoletes the ntwsRFDetectRogueDisappearTrap.')
ntwsRFDetectSuspectDeviceTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 54)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"), ("NTWS-TRAP-MIB", "ntwsRFDetectClassificationReason"))
if mibBuilder.loadTexts: ntwsRFDetectSuspectDeviceTrap.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsRFDetectSuspectDeviceTrap.setDescription('This trap is sent when RF detection finds a suspect device. ntwsRFDetectXmtrMacAddr is the radio MAC address from the beacon. ntwsRFDetectListenerListInfo is a display string of a list of listener information. ClassificationReason indicates the reason why the device is classified as suspect. Obsoleted by ntwsRFDetectSuspectDeviceTrap2.')
ntwsRFDetectSuspectDeviceDisappearTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 55)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"))
if mibBuilder.loadTexts: ntwsRFDetectSuspectDeviceDisappearTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectSuspectDeviceDisappearTrap.setDescription('This trap is sent when a suspect device has disappeared. ntwsRFDetectXmtrMacAddr is the radio MAC address from the beacon. This trap obsoletes the ntwsRFDetectInterferingRogueDisappearTrap.')
ntwsRFDetectClientViaRogueWiredAPTrap3 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 56)).setObjects(("NTWS-TRAP-MIB", "ntwsSourceWsIp"), ("NTWS-TRAP-MIB", "ntwsPortNum"), ("NTWS-TRAP-MIB", "ntwsClientVLANid"), ("NTWS-TRAP-MIB", "ntwsClientVLANtag"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"), ("NTWS-TRAP-MIB", "ntwsRFDetectRogueAPMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectClassificationReason"))
if mibBuilder.loadTexts: ntwsRFDetectClientViaRogueWiredAPTrap3.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectClientViaRogueWiredAPTrap3.setDescription("This trap is sent when a client is detected that connected via a rogue AP that is attached to a wired port. ntwsSourceWsIp is the IP address of the AC (switch) with the wired port. ntwsPortNum is the port on the AC. ntwsClientVLANid is the VLAN ID of the client's traffic. ntwsClientVLANtag is the VLAN tag of the client's traffic. ntwsRFDetectXmtrMacAddr is the MAC address of the client. ntwsRFDetectListenerListInfo is a display string of a list of listener information. ntwsRFDetectRogueAPMacAddr is the MAC address of the Rogue AP (wired) the client is connected to. ClassificationReason indicates the reason why the AP is classified as rogue. This trap obsoletes the ntwsRFDetectClientViaRogueWiredAPTrap and ntwsRFDetectClientViaRogueWiredAPTrap2.")
ntwsRFDetectClassificationChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 57))
if mibBuilder.loadTexts: ntwsRFDetectClassificationChangeTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectClassificationChangeTrap.setDescription('This trap is sent when RF detection classification rules change.')
ntwsConfigurationSavedTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 58)).setObjects(("NTWS-TRAP-MIB", "ntwsConfigSaveFileName"), ("NTWS-TRAP-MIB", "ntwsConfigSaveInitiatorType"), ("NTWS-TRAP-MIB", "ntwsConfigSaveInitiatorIp"), ("NTWS-TRAP-MIB", "ntwsConfigSaveInitiatorDetails"), ("NTWS-TRAP-MIB", "ntwsConfigSaveGeneration"))
if mibBuilder.loadTexts: ntwsConfigurationSavedTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsConfigurationSavedTrap.setDescription('This trap is sent when the running configuration of the switch is written to a configuration file.')
ntwsApNonOperStatusTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 59)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceSerNum"), ("NTWS-TRAP-MIB", "ntwsAPMACAddress"), ("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsApName"), ("NTWS-TRAP-MIB", "ntwsApTransition"), ("NTWS-TRAP-MIB", "ntwsApFailDetail"), ("NTWS-TRAP-MIB", "ntwsApWasOperational"))
if mibBuilder.loadTexts: ntwsApNonOperStatusTrap2.setStatus('current')
if mibBuilder.loadTexts: ntwsApNonOperStatusTrap2.setDescription('This trap is sent when the AP changes state and the new one is a non-operational state. Obsoletes ntwsApNonOperStatusTrap.')
ntwsApOperRadioStatusTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 60)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceSerNum"), ("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsApName"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioMACAddress"), ("NTWS-TRAP-MIB", "ntwsRadioType"), ("NTWS-TRAP-MIB", "ntwsRadioMode"), ("NTWS-TRAP-MIB", "ntwsRadioConfigState"), ("NTWS-TRAP-MIB", "ntwsApConnectSecurityType"), ("NTWS-TRAP-MIB", "ntwsApServiceAvailability"))
if mibBuilder.loadTexts: ntwsApOperRadioStatusTrap2.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsApOperRadioStatusTrap2.setDescription('This trap is sent when the Radio changes state. It also contains aggregate information about the AP in operational state - security level and service availability. Obsoleted by ntwsApOperRadioStatusTrap3.')
ntwsMichaelMICFailure = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 61)).setObjects(("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioMACAddress"), ("NTWS-TRAP-MIB", "ntwsMichaelMICFailureCause"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress2"))
if mibBuilder.loadTexts: ntwsMichaelMICFailure.setStatus('current')
if mibBuilder.loadTexts: ntwsMichaelMICFailure.setDescription('Two Michael MIC failures were seen within 60 seconds of each other. Object ntwsClientMACAddress indicates the source of the first failure, and object ntwsClientMACAddress2 indicates the source of the second failure. Service is interrupted for 60 seconds on the radio due to TKIP countermeasures having commenced. The radio is identified by ntwsApNum and ntwsAPRadioNum. An alternative way to identify the radio is ntwsRadioMACAddress. Obsoletes ntwsMpMichaelMICFailure and ntwsMpMichaelMICFailure2.')
ntwsClientAuthorizationSuccessTrap3 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 62)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientVLANName"), ("NTWS-TRAP-MIB", "ntwsClientSessionState"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessMode"), ("NTWS-TRAP-MIB", "ntwsPhysPortNum"), ("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsUserAccessType"), ("NTWS-TRAP-MIB", "ntwsLocalId"), ("NTWS-TRAP-MIB", "ntwsClientAuthorizationReason"))
if mibBuilder.loadTexts: ntwsClientAuthorizationSuccessTrap3.setStatus('obsolete')
if mibBuilder.loadTexts: ntwsClientAuthorizationSuccessTrap3.setDescription("This trap is sent when a client authorizes. If ntwsClientAccessMode = 'ap': ntwsApNum, ntwsAPRadioNum, ntwsRadioSSID identify the AP/radio/BSS providing wireless service to this client at the time this trap was sent. If ntwsClientAccessMode = 'wired': ntwsPhysPortNum identifies the physical port on the AC used by this wired-auth client. Obsoleted by ntwsClientAuthorizationSuccessTrap4.")
ntwsApManagerChangeTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 63)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceSerNum"), ("NTWS-TRAP-MIB", "ntwsAPMACAddress"), ("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsApName"), ("NTWS-TRAP-MIB", "ntwsApMgrOldIp"), ("NTWS-TRAP-MIB", "ntwsApMgrNewIp"), ("NTWS-TRAP-MIB", "ntwsApMgrChangeReason"))
if mibBuilder.loadTexts: ntwsApManagerChangeTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsApManagerChangeTrap.setDescription("This trap is sent when the AP's secondary link becomes its primary link.")
ntwsClientClearedTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 64)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientAccessMode"), ("NTWS-TRAP-MIB", "ntwsPhysPortNum"), ("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientSessionElapsedSeconds"), ("NTWS-TRAP-MIB", "ntwsLocalId"), ("NTWS-TRAP-MIB", "ntwsClientClearedReason"))
if mibBuilder.loadTexts: ntwsClientClearedTrap2.setStatus('current')
if mibBuilder.loadTexts: ntwsClientClearedTrap2.setDescription('This trap is sent when a client session is cleared. Obsoletes ntwsClientClearedTrap.')
ntwsMobilityDomainResiliencyStatusTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 65)).setObjects(("NTWS-TRAP-MIB", "ntwsMobilityDomainResiliencyStatus"))
if mibBuilder.loadTexts: ntwsMobilityDomainResiliencyStatusTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsMobilityDomainResiliencyStatusTrap.setDescription('This trap is sent by a mobility domain seed to announce changes in resilient capacity status.')
ntwsApOperRadioStatusTrap3 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 66)).setObjects(("NTWS-TRAP-MIB", "ntwsDeviceSerNum"), ("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsApName"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioMACAddress"), ("NTWS-TRAP-MIB", "ntwsRadioType"), ("NTWS-TRAP-MIB", "ntwsRadioMode"), ("NTWS-TRAP-MIB", "ntwsRadioConfigState"), ("NTWS-TRAP-MIB", "ntwsRadioChannelWidth"), ("NTWS-TRAP-MIB", "ntwsRadioMimoState"), ("NTWS-TRAP-MIB", "ntwsApConnectSecurityType"), ("NTWS-TRAP-MIB", "ntwsApServiceAvailability"))
if mibBuilder.loadTexts: ntwsApOperRadioStatusTrap3.setStatus('current')
if mibBuilder.loadTexts: ntwsApOperRadioStatusTrap3.setDescription('This trap is sent when the Radio changes state. It also contains aggregate information about the AP in operational state - security level and service availability. Obsoletes ntwsApOperRadioStatusTrap and ntwsApOperRadioStatusTrap2.')
ntwsClientAuthorizationSuccessTrap4 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 67)).setObjects(("NTWS-TRAP-MIB", "ntwsUserName"), ("NTWS-TRAP-MIB", "ntwsClientSessionId"), ("NTWS-TRAP-MIB", "ntwsClientMACAddress"), ("NTWS-TRAP-MIB", "ntwsClientIp"), ("NTWS-TRAP-MIB", "ntwsClientVLANName"), ("NTWS-TRAP-MIB", "ntwsClientSessionState"), ("NTWS-TRAP-MIB", "ntwsClientAuthServerIp"), ("NTWS-TRAP-MIB", "ntwsClientAuthenProtocolType"), ("NTWS-TRAP-MIB", "ntwsClientAccessMode"), ("NTWS-TRAP-MIB", "ntwsPhysPortNum"), ("NTWS-TRAP-MIB", "ntwsApNum"), ("NTWS-TRAP-MIB", "ntwsAPRadioNum"), ("NTWS-TRAP-MIB", "ntwsRadioSSID"), ("NTWS-TRAP-MIB", "ntwsClientRadioType"), ("NTWS-TRAP-MIB", "ntwsUserAccessType"), ("NTWS-TRAP-MIB", "ntwsLocalId"), ("NTWS-TRAP-MIB", "ntwsClientAuthorizationReason"))
if mibBuilder.loadTexts: ntwsClientAuthorizationSuccessTrap4.setStatus('current')
if mibBuilder.loadTexts: ntwsClientAuthorizationSuccessTrap4.setDescription("This trap is sent when a client authorizes. If ntwsClientAccessMode = 'ap': ntwsApNum, ntwsAPRadioNum, ntwsRadioSSID identify the AP/radio/BSS providing wireless service to this client at the time this trap was sent; ntwsClientRadioType gives the type of radio used by this client. If ntwsClientAccessMode = 'wired': ntwsPhysPortNum identifies the physical port on the AC used by this wired-auth client. Obsoletes ntwsClientAuthorizationSuccessTrap, ntwsClientAuthorizationSuccessTrap2, ntwsClientAuthorizationSuccessTrap3.")
ntwsRFDetectRogueDeviceTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 68)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrRadioType"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrCryptoType"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"), ("NTWS-TRAP-MIB", "ntwsRFDetectClassificationReason"))
if mibBuilder.loadTexts: ntwsRFDetectRogueDeviceTrap2.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectRogueDeviceTrap2.setDescription('This trap is sent when RF detection finds a rogue device. ntwsRFDetectXmtrMacAddr is the radio MAC address from the beacon. ntwsRFDetectXmtrRadioType indicates the Type of Radio used by the transmitter (rogue device). ntwsRFDetectXmtrCryptoType indicates the Type of Crypto used by the transmitter (rogue device). ntwsRFDetectListenerListInfo is a display string of a list of listener information. ntwsRFDetectClassificationReason indicates the reason why the device is classified as rogue. Obsoletes ntwsRFDetectRogueAPTrap, ntwsRFDetectUnAuthorizedAPTrap, ntwsRFDetectRogueDeviceTrap.')
ntwsRFDetectSuspectDeviceTrap2 = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 69)).setObjects(("NTWS-TRAP-MIB", "ntwsRFDetectXmtrMacAddr"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrRadioType"), ("NTWS-TRAP-MIB", "ntwsRFDetectXmtrCryptoType"), ("NTWS-TRAP-MIB", "ntwsRFDetectListenerListInfo"), ("NTWS-TRAP-MIB", "ntwsRFDetectClassificationReason"))
if mibBuilder.loadTexts: ntwsRFDetectSuspectDeviceTrap2.setStatus('current')
if mibBuilder.loadTexts: ntwsRFDetectSuspectDeviceTrap2.setDescription('This trap is sent when RF detection finds a suspect device. ntwsRFDetectXmtrMacAddr is the radio MAC address from the beacon. ntwsRFDetectXmtrRadioType indicates the Type of Radio used by the transmitter (suspect device). ntwsRFDetectXmtrCryptoType indicates the Type of Crypto used by the transmitter (suspect device). ntwsRFDetectListenerListInfo is a display string of a list of listener information. ntwsRFDetectClassificationReason indicates the reason why the device is classified as suspect. Obsoletes ntwsRFDetectInterferingRogueAPTrap, ntwsRFDetectSuspectDeviceTrap.')
ntwsClusterFailureTrap = NotificationType((1, 3, 6, 1, 4, 1, 45, 6, 1, 5, 0, 70)).setObjects(("NTWS-TRAP-MIB", "ntwsClusterFailureReason"), ("NTWS-TRAP-MIB", "ntwsClusterFailureDescription"))
if mibBuilder.loadTexts: ntwsClusterFailureTrap.setStatus('current')
if mibBuilder.loadTexts: ntwsClusterFailureTrap.setDescription("This trap is sent when the cluster configuration failed to apply. If ntwsClusterFailureReason = 'validation-error': The validation error is reported by the receiving end of the configuration updates. The receiving end can be any AC (switch) in the mobility domain: member, secondary seed or primary seed. - Primary seed will be the receiving end of configuration updates when Primary seed is joining the cluster and Secondary seed has preempt mode enabled. - Both Secondary seed and member will be at the receiving end when Primary seed is active.")
mibBuilder.exportSymbols("NTWS-TRAP-MIB", ntwsDAPNum=ntwsDAPNum, ntwsRFDetectRogueAPMacAddr=ntwsRFDetectRogueAPMacAddr, ntwsClientClearedTrap2=ntwsClientClearedTrap2, ntwsMobilityDomainResiliencyStatus=ntwsMobilityDomainResiliencyStatus, ntwsPortNum=ntwsPortNum, NtwsApMgrChangeReason=NtwsApMgrChangeReason, ntwsLocalId=ntwsLocalId, ntwsOldChannelNum=ntwsOldChannelNum, ntwsNumLicensedActiveAPs=ntwsNumLicensedActiveAPs, ntwsClientIpAddrChangeTrap=ntwsClientIpAddrChangeTrap, ntwsMpMichaelMICFailure2=ntwsMpMichaelMICFailure2, ntwsNewChannelNum=ntwsNewChannelNum, ntwsRFDetectClientViaRogueWiredAPTrap3=ntwsRFDetectClientViaRogueWiredAPTrap3, NtwsClientAuthorizationReason=NtwsClientAuthorizationReason, ntwsMobilityDomainPrimarySeedIp=ntwsMobilityDomainPrimarySeedIp, ntwsRFDetectSuspectDeviceDisappearTrap=ntwsRFDetectSuspectDeviceDisappearTrap, ntwsAPBootTrap=ntwsAPBootTrap, ntwsClientLocationPolicyIndex=ntwsClientLocationPolicyIndex, NtwsDot1xFailureType=NtwsDot1xFailureType, ntwsDeviceSerNum=ntwsDeviceSerNum, ntwsCounterMeasureStartTrap=ntwsCounterMeasureStartTrap, ntwsConfigSaveGeneration=ntwsConfigSaveGeneration, ntwsClientDot1xFailureCause=ntwsClientDot1xFailureCause, ntwsApOperRadioStatusTrap3=ntwsApOperRadioStatusTrap3, ntwsClientRoamedFromDAPNum=ntwsClientRoamedFromDAPNum, ntwsApWasOperational=ntwsApWasOperational, ntwsConfigurationSavedTrap=ntwsConfigurationSavedTrap, ntwsConfigSaveInitiatorIp=ntwsConfigSaveInitiatorIp, ntwsClientDynAuthorClientIp=ntwsClientDynAuthorClientIp, ntwsRadioChannelWidth=ntwsRadioChannelWidth, ntwsMobilityDomainJoinTrap=ntwsMobilityDomainJoinTrap, ntwsRFDetectSpoofedMacAPTrap=ntwsRFDetectSpoofedMacAPTrap, ntwsRFDetectXmtrCryptoType=ntwsRFDetectXmtrCryptoType, ntwsClientSessionId=ntwsClientSessionId, ntwsRFDetectDoSPortTrap=ntwsRFDetectDoSPortTrap, ntwsApMgrChangeReason=ntwsApMgrChangeReason, ntwsOldPowerLevel=ntwsOldPowerLevel, ntwsRFDetectDoSTrap=ntwsRFDetectDoSTrap, ntwsApMgrNewIp=ntwsApMgrNewIp, ntwsRadioPowerChangeDescription=ntwsRadioPowerChangeDescription, ntwsClientSessionElapsedSeconds=ntwsClientSessionElapsedSeconds, ntwsClientIpAddrChangeReason=ntwsClientIpAddrChangeReason, ntwsApTimeoutTrap=ntwsApTimeoutTrap, NtwsAuthenticationFailureType=NtwsAuthenticationFailureType, ntwsClientRadioType=ntwsClientRadioType, ntwsRsaPubKeyFingerPrint=ntwsRsaPubKeyFingerPrint, ntwsClientAuthorizationSuccessTrap3=ntwsClientAuthorizationSuccessTrap3, ntwsApServiceAvailability=ntwsApServiceAvailability, ntwsClientSessionState=ntwsClientSessionState, NtwsBlacklistingCause=NtwsBlacklistingCause, ntwsClientAccessType=ntwsClientAccessType, ntwsChannelChangeReason=ntwsChannelChangeReason, ntwsConfigSaveFileName=ntwsConfigSaveFileName, ntwsClientAuthenticationFailureTrap=ntwsClientAuthenticationFailureTrap, ntwsClientVLANName=ntwsClientVLANName, ntwsRFDetectRogueDisappearTrap=ntwsRFDetectRogueDisappearTrap, NtwsClientIpAddrChangeReason=NtwsClientIpAddrChangeReason, ntwsClientAuthorizationFailureTrap=ntwsClientAuthorizationFailureTrap, ntwsClientDynAuthorChangeFailureTrap=ntwsClientDynAuthorChangeFailureTrap, ntwsSourceWsIp=ntwsSourceWsIp, ntwsApPortOrDapNum=ntwsApPortOrDapNum, ntwsClientAuthorizationSuccessTrap2=ntwsClientAuthorizationSuccessTrap2, ntwsRFDetectRogueDeviceTrap2=ntwsRFDetectRogueDeviceTrap2, ntwsRFDetectXmtrRadioType=ntwsRFDetectXmtrRadioType, ntwsMpMichaelMICFailure=ntwsMpMichaelMICFailure, ntwsClientDisconnectDescription=ntwsClientDisconnectDescription, ntwsRFDetectClientViaRogueWiredAPTrap=ntwsRFDetectClientViaRogueWiredAPTrap, ntwsClientFailureCauseDescription=ntwsClientFailureCauseDescription, ntwsMobilityDomainFailBackTrap=ntwsMobilityDomainFailBackTrap, ntwsRFDetectListenerListInfo=ntwsRFDetectListenerListInfo, ntwsClusterFailureTrap=ntwsClusterFailureTrap, ntwsApNonOperStatusTrap=ntwsApNonOperStatusTrap, ntwsClientFailureCause=ntwsClientFailureCause, NtwsClusterFailureReason=NtwsClusterFailureReason, ntwsClusterFailureDescription=ntwsClusterFailureDescription, ntwsClientSessionStartTime=ntwsClientSessionStartTime, ntwsRFDetectAdhocUserTrap=ntwsRFDetectAdhocUserTrap, ntwsRFDetectBlacklistedTrap=ntwsRFDetectBlacklistedTrap, ntwsClientRoamedFromWsIp=ntwsClientRoamedFromWsIp, ntwsRFDetectUnAuthorizedOuiTrap=ntwsRFDetectUnAuthorizedOuiTrap, NtwsUserAttributeList=NtwsUserAttributeList, ntwsRFDetectClassificationReason=ntwsRFDetectClassificationReason, ntwsRFDetectAdhocUserDisappearTrap=ntwsRFDetectAdhocUserDisappearTrap, ntwsCounterMeasurePerformerListInfo=ntwsCounterMeasurePerformerListInfo, ntwsClientDynAuthorChangeSuccessTrap=ntwsClientDynAuthorChangeSuccessTrap, ntwsClientAuthorizationSuccessTrap4=ntwsClientAuthorizationSuccessTrap4, ntwsMichaelMICFailureCause=ntwsMichaelMICFailureCause, ntwsClientRoamingTrap=ntwsClientRoamingTrap, ntwsApManagerChangeTrap=ntwsApManagerChangeTrap, ntwsRadioPowerChangeReason=ntwsRadioPowerChangeReason, ntwsClientMACAddress=ntwsClientMACAddress, ntwsRFDetectDoSType=ntwsRFDetectDoSType, ntwsRFDetectUnAuthorizedSsidTrap=ntwsRFDetectUnAuthorizedSsidTrap, ntwsRadioConfigState=ntwsRadioConfigState, ntwsClientDeAssociationTrap=ntwsClientDeAssociationTrap, ntwsRFDetectRogueDeviceDisappearTrap=ntwsRFDetectRogueDeviceDisappearTrap, ntwsRFDetectClassificationChangeTrap=ntwsRFDetectClassificationChangeTrap, ntwsRadioMACAddress=ntwsRadioMACAddress, ntwsRFDetectRogueAPTrap=ntwsRFDetectRogueAPTrap, ntwsClientAccessMode=ntwsClientAccessMode, ntwsClientAuthenticationFailureCause=ntwsClientAuthenticationFailureCause, ntwsApName=ntwsApName, ntwsRFDetectUnAuthorizedAPTrap=ntwsRFDetectUnAuthorizedAPTrap, ntwsUserAccessType=ntwsUserAccessType, ntwsBlacklistingRemainingTime=ntwsBlacklistingRemainingTime, ntwsTrapsV2=ntwsTrapsV2, ntwsApFailDetail=ntwsApFailDetail, ntwsDeviceModel=ntwsDeviceModel, ntwsConfigSaveInitiatorDetails=ntwsConfigSaveInitiatorDetails, ntwsClientAssociationFailureTrap=ntwsClientAssociationFailureTrap, ntwsRFDetectInterferingRogueDisappearTrap=ntwsRFDetectInterferingRogueDisappearTrap, ntwsRFDetectInterferingRogueAPTrap=ntwsRFDetectInterferingRogueAPTrap, ntwsApAttachType=ntwsApAttachType, ntwsRFDetectXmtrMacAddr=ntwsRFDetectXmtrMacAddr, ntwsClientRoamedFromAccessType=ntwsClientRoamedFromAccessType, ntwsClientClearedReason=ntwsClientClearedReason, ntwsUserName=ntwsUserName, ntwsDeviceOkayTrap=ntwsDeviceOkayTrap, ntwsApNum=ntwsApNum, ntwsChangedUserParamOldValues=ntwsChangedUserParamOldValues, ntwsRadioBSSID=ntwsRadioBSSID, ntwsClusterFailureReason=ntwsClusterFailureReason, NtwsClientClearedReason=NtwsClientClearedReason, ntwsAutoTuneRadioPowerChangeTrap=ntwsAutoTuneRadioPowerChangeTrap, ntwsClientTimeSinceLastRoam=ntwsClientTimeSinceLastRoam, NtwsConfigSaveInitiatorType=NtwsConfigSaveInitiatorType, ntwsAPMACAddress=ntwsAPMACAddress, ntwsRadioMode=ntwsRadioMode, ntwsClientVLANid=ntwsClientVLANid, ntwsApNonOperStatusTrap2=ntwsApNonOperStatusTrap2, ntwsClientMACAddress2=ntwsClientMACAddress2, ntwsRadioType=ntwsRadioType, ntwsMichaelMICFailure=ntwsMichaelMICFailure, ntwsMobilityDomainFailOverTrap=ntwsMobilityDomainFailOverTrap, ntwsMobilityDomainIp=ntwsMobilityDomainIp, ntwsCounterMeasureStopTrap=ntwsCounterMeasureStopTrap, PYSNMP_MODULE_ID=ntwsTrapMib, ntwsBlacklistingCause=ntwsBlacklistingCause, ntwsDAPConnectWarningTrap=ntwsDAPConnectWarningTrap, ntwsClientDisconnectTrap=ntwsClientDisconnectTrap, ntwsClientAuthServerIp=ntwsClientAuthServerIp, ntwsDAPconnectWarningType=ntwsDAPconnectWarningType, ntwsMobilityDomainSecondarySeedIp=ntwsMobilityDomainSecondarySeedIp, ntwsRFDetectRogueDeviceTrap=ntwsRFDetectRogueDeviceTrap, NtwsMichaelMICFailureCause=NtwsMichaelMICFailureCause, ntwsClientRoamedFromRadioNum=ntwsClientRoamedFromRadioNum, ntwsTrapMib=ntwsTrapMib, ntwsClientAuthenProtocolType=ntwsClientAuthenProtocolType, ntwsClientRoamedFromPortNum=ntwsClientRoamedFromPortNum, ntwsDeviceFailTrap=ntwsDeviceFailTrap, ntwsClientDot1xState=ntwsClientDot1xState, ntwsClientAuthenticationSuccessTrap=ntwsClientAuthenticationSuccessTrap, ntwsChangedUserParamNewValues=ntwsChangedUserParamNewValues, ntwsClientDisconnectSource=ntwsClientDisconnectSource, ntwsClientAuthorizationSuccessTrap=ntwsClientAuthorizationSuccessTrap, ntwsClientAuthorizationReason=ntwsClientAuthorizationReason, ntwsClientDot1xFailureTrap=ntwsClientDot1xFailureTrap, NtwsSessionDisconnectType=NtwsSessionDisconnectType, ntwsAPAccessType=ntwsAPAccessType, ntwsApOperRadioStatusTrap2=ntwsApOperRadioStatusTrap2, ntwsRFDetectClientViaRogueWiredAPTrap2=ntwsRFDetectClientViaRogueWiredAPTrap2, ntwsClientSessionElapsedTime=ntwsClientSessionElapsedTime, ntwsConfigSaveInitiatorType=ntwsConfigSaveInitiatorType, ntwsApRejectLicenseExceededTrap=ntwsApRejectLicenseExceededTrap, NtwsRFDetectDoSType=NtwsRFDetectDoSType, ntwsClientAuthorizationFailureCause=ntwsClientAuthorizationFailureCause, ntwsRadioRssi=ntwsRadioRssi, ntwsRFDetectSuspectDeviceTrap=ntwsRFDetectSuspectDeviceTrap, ntwsApMgrOldIp=ntwsApMgrOldIp, ntwsClientAssociationFailureCause=ntwsClientAssociationFailureCause, ntwsClientVLANtag=ntwsClientVLANtag, ntwsRFDetectSuspectDeviceTrap2=ntwsRFDetectSuspectDeviceTrap2, ntwsMobilityDomainResiliencyStatusTrap=ntwsMobilityDomainResiliencyStatusTrap, ntwsUserParams=ntwsUserParams, ntwsRadioSSID=ntwsRadioSSID, ntwsApConnectSecurityType=ntwsApConnectSecurityType, NtwsMobilityDomainResiliencyStatus=NtwsMobilityDomainResiliencyStatus, NtwsAuthorizationFailureType=NtwsAuthorizationFailureType, ntwsPoEFailTrap=ntwsPoEFailTrap, ntwsClientClearedTrap=ntwsClientClearedTrap, ntwsAutoTuneRadioChannelChangeTrap=ntwsAutoTuneRadioChannelChangeTrap, ntwsPhysPortNum=ntwsPhysPortNum, ntwsDeviceId=ntwsDeviceId, ntwsNewPowerLevel=ntwsNewPowerLevel, ntwsApTransition=ntwsApTransition, ntwsMobilityDomainTimeoutTrap=ntwsMobilityDomainTimeoutTrap, ntwsClientAssociationSuccessTrap=ntwsClientAssociationSuccessTrap, ntwsClientIp=ntwsClientIp, ntwsApOperRadioStatusTrap=ntwsApOperRadioStatusTrap, ntwsClientDeAuthenticationTrap=ntwsClientDeAuthenticationTrap, ntwsRadioMimoState=ntwsRadioMimoState, ntwsAPRadioNum=ntwsAPRadioNum, ntwsRFDetectSpoofedSsidAPTrap=ntwsRFDetectSpoofedSsidAPTrap, NtwsAssociationFailureType=NtwsAssociationFailureType)
