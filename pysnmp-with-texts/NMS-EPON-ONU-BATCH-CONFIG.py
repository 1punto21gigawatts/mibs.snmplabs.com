#
# PySNMP MIB module NMS-EPON-ONU-BATCH-CONFIG (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NMS-EPON-ONU-BATCH-CONFIG
# Produced by pysmi-0.3.4 at Wed May  1 14:21:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
nmsEPONGroup, = mibBuilder.importSymbols("NMS-SMI", "nmsEPONGroup")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, IpAddress, TimeTicks, iso, Bits, ModuleIdentity, Unsigned32, Counter32, MibIdentifier, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, ObjectIdentity, Counter64, Gauge32 = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "IpAddress", "TimeTicks", "iso", "Bits", "ModuleIdentity", "Unsigned32", "Counter32", "MibIdentifier", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ObjectIdentity", "Counter64", "Gauge32")
DisplayString, PhysAddress, MacAddress, RowStatus, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "MacAddress", "RowStatus", "TruthValue", "TextualConvention")
nmsEponOnuBatchConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 11606, 10, 101, 22))
nmsEponOnuConfigIndex = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 101, 22, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nmsEponOnuConfigIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nmsEponOnuConfigIndex.setDescription("ONU index, just LLID the same value as llidIfIndex in NMS-EPON-LLID.MIB. While setting, the buffer will be written into the corresponding ONU config information, you can read nmsEponOnuBatchConfigTable to get this configuration. After setting, the newly updating configuration of this ONU won't be upated to the buffer. When you set this value to 0, the buffer will be cleared, and nmsEponOnuConfigTable will be null.")
nmsEponOnuConfigTable = MibTable((1, 3, 6, 1, 4, 1, 11606, 10, 101, 22, 2), )
if mibBuilder.loadTexts: nmsEponOnuConfigTable.setStatus('mandatory')
if mibBuilder.loadTexts: nmsEponOnuConfigTable.setDescription('A list of the ONU config table entries. The corresponding onu id will read/write to nmsEponOnuConfigIndex. Get-next and get-bulk operation is only supported')
nmsEponOnuConfigEntry = MibTableRow((1, 3, 6, 1, 4, 1, 11606, 10, 101, 22, 2, 1), ).setIndexNames((0, "NMS-EPON-ONU-BATCH-CONFIG", "onuConfigSequenceNo"))
if mibBuilder.loadTexts: nmsEponOnuConfigEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nmsEponOnuConfigEntry.setDescription('A collection of certain ONU configuration. The ONU id can be read or set by nmsEponOnuConfigIndex.')
onuConfigSequenceNo = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 101, 22, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuConfigSequenceNo.setStatus('mandatory')
if mibBuilder.loadTexts: onuConfigSequenceNo.setDescription('ONU configuration command sequence number.')
onuConfigCommand = MibTableColumn((1, 3, 6, 1, 4, 1, 11606, 10, 101, 22, 2, 1, 2), OctetString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: onuConfigCommand.setStatus('mandatory')
if mibBuilder.loadTexts: onuConfigCommand.setDescription('ONU configuration command value.')
onuConfigurationAdd = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 101, 22, 3), OctetString()).setMaxAccess("writeonly")
if mibBuilder.loadTexts: onuConfigurationAdd.setStatus('mandatory')
if mibBuilder.loadTexts: onuConfigurationAdd.setDescription("ONU configuration command set value. After this operation, buffer will be added, but the configuration won't work.")
onuCfgApplyLLIDs = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 101, 22, 4), PortList()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: onuCfgApplyLLIDs.setStatus('mandatory')
if mibBuilder.loadTexts: onuCfgApplyLLIDs.setDescription('ONU LLID list, which defines the ONU to be applied.')
onuCfgApplyAction = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 101, 22, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("no_action", 0), ("apply", 1)))).setMaxAccess("writeonly")
if mibBuilder.loadTexts: onuCfgApplyAction.setStatus('mandatory')
if mibBuilder.loadTexts: onuCfgApplyAction.setDescription('While set to 1, all the configuration command in buffer will apply to device and the configuration works.')
ounCfgApplyResult = MibScalar((1, 3, 6, 1, 4, 1, 11606, 10, 101, 22, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("success", 0), ("processing", 1), ("other", 2), ("reserved", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ounCfgApplyResult.setStatus('mandatory')
if mibBuilder.loadTexts: ounCfgApplyResult.setDescription('ONU configuraton appling result.')
mibBuilder.exportSymbols("NMS-EPON-ONU-BATCH-CONFIG", onuConfigCommand=onuConfigCommand, onuCfgApplyAction=onuCfgApplyAction, nmsEponOnuBatchConfig=nmsEponOnuBatchConfig, nmsEponOnuConfigEntry=nmsEponOnuConfigEntry, ounCfgApplyResult=ounCfgApplyResult, nmsEponOnuConfigTable=nmsEponOnuConfigTable, onuCfgApplyLLIDs=onuCfgApplyLLIDs, nmsEponOnuConfigIndex=nmsEponOnuConfigIndex, onuConfigurationAdd=onuConfigurationAdd, onuConfigSequenceNo=onuConfigSequenceNo)
