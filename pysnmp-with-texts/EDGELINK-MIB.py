#
# PySNMP MIB module EDGELINK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EDGELINK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:59:26 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ConstraintsUnion, ValueRangeConstraint, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "ValueRangeConstraint", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
NotificationType, NotificationType, IpAddress, ModuleIdentity, ObjectSyntax, Counter32, Bits, Integer32, Gauge32, MibIdentifier, iso, enterprises, Counter64, TimeTicks, ObjectName, Unsigned32, ObjectIdentity, MibScalar, MibTable, MibTableRow, MibTableColumn = mibBuilder.importSymbols("SNMPv2-SMI", "NotificationType", "NotificationType", "IpAddress", "ModuleIdentity", "ObjectSyntax", "Counter32", "Bits", "Integer32", "Gauge32", "MibIdentifier", "iso", "enterprises", "Counter64", "TimeTicks", "ObjectName", "Unsigned32", "ObjectIdentity", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
telco = MibIdentifier((1, 3, 6, 1, 4, 1, 564))
edgeLink = MibIdentifier((1, 3, 6, 1, 4, 1, 564, 101))
elM13v1 = MibIdentifier((1, 3, 6, 1, 4, 1, 564, 101, 1))
elDS1CM = MibIdentifier((1, 3, 6, 1, 4, 1, 564, 101, 1, 1))
elCM = MibIdentifier((1, 3, 6, 1, 4, 1, 564, 101, 1, 2))
elCMIfc = MibIdentifier((1, 3, 6, 1, 4, 1, 564, 101, 1, 3))
elPM = MibIdentifier((1, 3, 6, 1, 4, 1, 564, 101, 1, 4))
elDS1PM = MibIdentifier((1, 3, 6, 1, 4, 1, 564, 101, 1, 5))
elDS1PMCur = MibIdentifier((1, 3, 6, 1, 4, 1, 564, 101, 1, 6))
elDS1PMIvl = MibIdentifier((1, 3, 6, 1, 4, 1, 564, 101, 1, 7))
elDS1PMTot = MibIdentifier((1, 3, 6, 1, 4, 1, 564, 101, 1, 8))
elFM = MibIdentifier((1, 3, 6, 1, 4, 1, 564, 101, 1, 9))
elFMAlmLog = MibIdentifier((1, 3, 6, 1, 4, 1, 564, 101, 1, 10))
elFMCurAlm = MibIdentifier((1, 3, 6, 1, 4, 1, 564, 101, 1, 11))
elFMTrapFields = MibIdentifier((1, 3, 6, 1, 4, 1, 564, 101, 1, 12))
elDS1CMTable = MibTable((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 1), )
if mibBuilder.loadTexts: elDS1CMTable.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1CMTable.setDescription('DS1 Configuration Management table.')
elDS1CMEntry = MibTableRow((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 1, 1), ).setIndexNames((0, "EDGELINK-MIB", "elDS1CMChannelNumber"))
if mibBuilder.loadTexts: elDS1CMEntry.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1CMEntry.setDescription('DS1 Configuration Management table entry.')
elDS1CMChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1CMChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1CMChannelNumber.setDescription('Table index, the DS1 channel number.')
elDS1CMLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ds1LineCodeAMI", 0), ("ds1LineCodeB8ZS", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elDS1CMLineCode.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1CMLineCode.setDescription('Select DS1 line code for the channel number selected by this tables index.')
elDS1CMLineBuildout = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4))).clone(namedValues=NamedValues(("ds1LineBuildout0to133ft", 0), ("ds1LineBuildout133to266ft", 1), ("ds1LineBuildout266to399ft", 2), ("ds1LineBuildout399to533ft", 3), ("ds1LineBuildout533to655ft", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elDS1CMLineBuildout.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1CMLineBuildout.setDescription('Select line build-out for the DS1 line selected by this tables index:, 0 to 133 ft, or 133 to 266 ft, 266 to 399 ft, 399 to 533 ft, or 533 to 655 ft.')
elDS1CMLoopbackMode = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ds1LpbkNone", 1), ("ds1LpbkTerminal", 2), ("ds1LpbkFacility", 3), ("ds1LpbkRemoteTerminal", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elDS1CMLoopbackMode.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1CMLoopbackMode.setDescription('Set the DS1 loopback mode to Line, terminal, remote, or none. In M13 Mode, issuing a DS1 Remote Terminal Lpbk will cause any previous Remote DS1 Terminal Lpbk(s) to be Dropped.')
elDS1CMServiceMode = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ds1SetOutOfService", 0), ("ds1SetInService", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elDS1CMServiceMode.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1CMServiceMode.setDescription('Set the DS1 service mode for the channel indicated to in-service or out-of-service. Certain service effecting operations can not be initiated unless the DS1 channel is placed out-of-service.')
elDS1CMInterfaceEquipped = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 3))).clone(namedValues=NamedValues(("ds1Equipped", 0), ("ds1Unequipped", 1), ("ds1Disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elDS1CMInterfaceEquipped.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1CMInterfaceEquipped.setDescription("DS1 Interfaces may be 'equipped' or 'unequipped'. No PM or FM operations will occur on an unequipped interface. Access is allowed to MIB variables which correspond to unequipped interfaces, although PM and FM values will be zeros. When the DS1 interface is Disaled an AIS will be sent on the channel.")
elDS1CMChannelName = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 1, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elDS1CMChannelName.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1CMChannelName.setDescription('A ChannelName can be assigned for each DS1 channel. The Channel name cannot be more than 10 characters.')
elDS1CMInputStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ds1InputPresent", 0), ("ds1NoInputpresent", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1CMInputStatus.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1CMInputStatus.setDescription('Reports the input State of the DS1 channel indexed by Channel Number.')
elDS1CMMaskState = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("ds1InputInit", 1), ("ds1WaitingForInput", 2), ("ds1TimerRunning", 3), ("ds1MonitorActivated", 4), ("ds1UnEquipped", 5), ("ds1StatusReported", 6), ("ds1AlarmedState", 7), ("ds1DisabledState", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1CMMaskState.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1CMMaskState.setDescription('Get the state of the DS1 Channel identified by the index. The Mask state identifies the Autosense State of the DS1 Channel.')
elDS1CMInterfaceRescan = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ds1AllChannelsAutoSenseEnable", 1), ("ds1AllChannelsAutoSenseDisable", 2), ("ds1ChannelRescan", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elDS1CMInterfaceRescan.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1CMInterfaceRescan.setDescription('Rescan the DS1 Channel identified by the index.')
elALLDS1CMLineCode = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ds1LineCodeAMI", 0), ("ds1LineCodeB8ZS", 1), ("indeterminate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elALLDS1CMLineCode.setStatus('mandatory')
if mibBuilder.loadTexts: elALLDS1CMLineCode.setDescription('Set DS1 line code for all DS1 channels. A value Inderminate(3) will be returned if All the DS1 Channels are not set to either ds1LineCodeAMI or ds1LineCodeB8ZS.')
elALLDS1CMLineBuildout = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds1LineBuildout0to133ft", 0), ("ds1LineBuildout133to266ft", 1), ("ds1LineBuildout266to399ft", 2), ("ds1LineBuildout399to533ft", 3), ("ds1LineBuildout533to655ft", 4), ("indeterminate", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elALLDS1CMLineBuildout.setStatus('mandatory')
if mibBuilder.loadTexts: elALLDS1CMLineBuildout.setDescription('Select line build-out for All the DS1 lines to 0 to 133 ft, or 133 to 266 ft, 266 to 399 ft, 399 to 533 ft, or 533 to 655 ft.')
elALLDS1CMLoopbackMode = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("ds1LpbkNone", 1), ("ds1LpbkTerminal", 2), ("ds1LpbkFacility", 3), ("ds1LpbkRemoteTerminal", 4), ("indeterminate", 5)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elALLDS1CMLoopbackMode.setStatus('mandatory')
if mibBuilder.loadTexts: elALLDS1CMLoopbackMode.setDescription('Set the DS1 loopback mode to Line, Terminal, Remote, or None for All the DS1 Channels. In M13 Mode, issuing a DS1 Remote Terminal Lpbk will cause any previous Remote DS1 Terminal Lpbk(s) to be dropped.')
elALLDS1CMServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ds1SetOutOfService", 0), ("ds1SetInService", 1), ("indeterminate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elALLDS1CMServiceMode.setStatus('mandatory')
if mibBuilder.loadTexts: elALLDS1CMServiceMode.setDescription('Set the DS1 service mode for All DS1 channels to in-service or out-of-service. Certain service effecting operations can not be initiated unless All the DS1 channels will be placed out-of-service.')
elALLDS1CMInterfaceEquipped = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ds1Equipped", 0), ("ds1Unequipped", 1), ("indeterminate", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elALLDS1CMInterfaceEquipped.setStatus('mandatory')
if mibBuilder.loadTexts: elALLDS1CMInterfaceEquipped.setDescription("Set All the DS1 Channels to 'equipped' or 'unequipped' state. No PM or FM operations will occur on an unequipped DS1 interface. Access is allowed to MIB variables which correspond to unequipped interfaces, although PM and FM values will be zeros.")
elCMSystemStatus = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elCMSystemStatus.setStatus('mandatory')
if mibBuilder.loadTexts: elCMSystemStatus.setDescription('This DisplayString gives the summary information about the Current EdgeLink100 System Status. The Description includes ... 1) chasisType --- UnProtected(1) / Protected(0) 2) Active Module --- Card-A(1) / Card-B (2) 3) Fault LED Status --- ON(1 -7) / OFF(0) 4) Abnormal LED Status --- ON(1) / OFF(0). Fault LED Status is a combined value of the three bits each representing CRITICAL, MAJOR and MINOR Alarms. The three LEDS are inside the EL100 Case on the Cards. 0 => No Alarms. 1 => Critical Alarm (001) 2 => Major Alarm (010) 3 => Critical and Major Alarms (011) 4 => Minor Alarm (100) 5 => Minor and Critical Alarms (101) 6 => Minor and Major Alarms (110) 7 => Major Minor and Critical Alarms (111). ')
elCMDS3ParityMode = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 2, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 4))).clone(namedValues=NamedValues(("ds3pBitParityMode", 2), ("ds3cBitParityMode", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMDS3ParityMode.setStatus('mandatory')
if mibBuilder.loadTexts: elCMDS3ParityMode.setDescription("Select C-bit or P-bit parity mode for DS3 interface. This Object can't be set when ServiceMode is IN-Service")
elCMDS3LineBuildout = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 2, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2))).clone(namedValues=NamedValues(("ds3LineBuildout0to100ft", 0), ("ds3LineBuildout100to200ft", 1), ("ds3LineBuildout200to450ft", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMDS3LineBuildout.setStatus('mandatory')
if mibBuilder.loadTexts: elCMDS3LineBuildout.setDescription("Select line build-out for DS3 Line, 0 to 100 ft, 100 to 200 ft, or 200-450.This MIB Object can't be set when ServiceMode is IN-Service")
elCMDS3TxTiming = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 2, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ds3TxTimingLooped", 1), ("ds3TxTimingLocal", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMDS3TxTiming.setStatus('mandatory')
if mibBuilder.loadTexts: elCMDS3TxTiming.setDescription("Select mode for DS3 transmit timing. This MIB Object can't be set when ServiceMode is IN-Service")
elCMProtectionMode = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 2, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("protModeProtected", 0), ("protModeUnprotected", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMProtectionMode.setStatus('mandatory')
if mibBuilder.loadTexts: elCMProtectionMode.setDescription('In unprotected mode, switching is prohibited. While in protected mode, a standing minor alarm will occur if the off-line card is unavailable or not in operation. The system can be set to unprotected mode to turnoff this alarm. If the off-line card becomes operational while in unprotected mode, the mode is automatically switched to protected mode. The user will not be allowed to set the system to protectedMode.')
elCMCardSelect = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 2, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("cardAOnline", 0), ("cardBOnline", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMCardSelect.setStatus('mandatory')
if mibBuilder.loadTexts: elCMCardSelect.setDescription('Read or select choice of on-line card. This operation will force a switch to occur if the off-line card is selected.')
elCMClearTooManySwitches = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 2, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indeterminate", 1), ("clearTooManySwitchesLock", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMClearTooManySwitches.setStatus('mandatory')
if mibBuilder.loadTexts: elCMClearTooManySwitches.setDescription('Clear switching-disabled state which occurs as a result of too many switches between the cards in a protected system in a 10 minute interval. ClearTooManySwitchesLock command is used to remove the standing Alarm. On a read, the value indeterminate will be returned if the SNMP variable was never set to clearTooManySwitchesLock(2), otherwise clearTooManySwitchesLock(2) will be returned.')
elCMDS3LoopbackMode = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ds3LpbkNone", 1), ("ds3LpbkTerminal", 2), ("ds3LpbkFacility", 3), ("ds3LpbkRemoteFacility", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMDS3LoopbackMode.setStatus('mandatory')
if mibBuilder.loadTexts: elCMDS3LoopbackMode.setDescription("Set the DS3 loopback mode to line, terminal, remote, or none. The System can't be set to ds3LpbkRemoteFacility when it is in M13 Mode. The Terminal LoopBack is feasible only when the elCMDS3TxTiming Object is set to ds3TxTimingLocal.")
elCMDS3ServiceMode = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 2, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("ds3SetOutOfService", 0), ("ds3SetInService", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMDS3ServiceMode.setStatus('mandatory')
if mibBuilder.loadTexts: elCMDS3ServiceMode.setDescription('Set the DS3 service mode to in-service or out-of-service. Certain service effecting operations can not be initiated unless the DS3 channel is placed out-of-service.')
elCMCurTimeDate = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 2, 10), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMCurTimeDate.setStatus('mandatory')
if mibBuilder.loadTexts: elCMCurTimeDate.setDescription('Read or set the system real time clock. The string is in the form MM/DD/YYYY HH:MM:SS.')
elCMBerThreshold = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 2, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("ds3BerThreshold10-6", 1), ("ds3BerThreshold10-7", 2), ("ds3BerThreshold10-8", 3), ("ds3BerThreshold10-9", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMBerThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: elCMBerThreshold.setDescription("Set the BER Threshold value for the system to 10-6, 10-7, 10-8 or 10-9. BerThershold can't changed when the ServiceMode is IN-Service.")
elCMSystemInfo = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 2, 12), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elCMSystemInfo.setStatus('mandatory')
if mibBuilder.loadTexts: elCMSystemInfo.setDescription('Gets information about the MPU type, board revision, card revision level, software revision, CLEI code, MAC address, and Date of manufacture.')
elCMPPPPortBaudRate = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 2, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11))).clone(namedValues=NamedValues(("baud300", 1), ("baud1200", 2), ("baud2400", 3), ("baud4800", 4), ("baud9600", 5), ("baud14400", 6), ("baud19200", 7), ("baud28800", 8), ("baud38400", 9), ("baud57600", 10), ("baud115200", 11)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elCMPPPPortBaudRate.setStatus('mandatory')
if mibBuilder.loadTexts: elCMPPPPortBaudRate.setDescription('Specifies the baud rate on the craft/PPP port when that port is running PPP (i.e. when carrier detect is asserted).')
elCMRemoteCBitIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 3, 1), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMRemoteCBitIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: elCMRemoteCBitIPAddress.setDescription("This is the IP address of the partner EdgeLink's C-bit channel interface. This is used for partner-to-partner communications. Must be on same subnet as elCMLocalCBitIPAddress. This IP must be the same as elCMLocalCBitIPAddress on the partner device.")
elCMLocalCBitIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMLocalCBitIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: elCMLocalCBitIPAddress.setDescription('This is the IP address of my C-bit channel interface and is used for partner-to-partner communications. Must be on same subnet as elCMRemoteCBitIPAddress. This IP must be the same as elCMRemoteCBitIPAddress on the partner device.')
elCMCBitIPSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 3, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMCBitIPSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: elCMCBitIPSubnetMask.setDescription('Specifies the subnet address mask for the C-Bit IP channel.')
elCMRemotePPPIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMRemotePPPIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: elCMRemotePPPIPAddress.setDescription('This is the IP Address for the Remote Client during PPP session.')
elCMIfcTable = MibTable((1, 3, 6, 1, 4, 1, 564, 101, 1, 3, 5), )
if mibBuilder.loadTexts: elCMIfcTable.setStatus('mandatory')
if mibBuilder.loadTexts: elCMIfcTable.setDescription('Ethernet/PPP Interfaces table.')
elCMIfcEntry = MibTableRow((1, 3, 6, 1, 4, 1, 564, 101, 1, 3, 5, 1), ).setIndexNames((0, "EDGELINK-MIB", "elCMIfcInterfaceNumber"))
if mibBuilder.loadTexts: elCMIfcEntry.setStatus('mandatory')
if mibBuilder.loadTexts: elCMIfcEntry.setDescription('Ethernet/PPP Interfaces table entry.')
elCMIfcInterfaceNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 3, 5, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ifEthernet", 1), ("ifPPP", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elCMIfcInterfaceNumber.setStatus('mandatory')
if mibBuilder.loadTexts: elCMIfcInterfaceNumber.setDescription('Table index. The table has one row for each external IP interface, Ethernet and PPP.')
elCMIfcMyIPAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 3, 5, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMIfcMyIPAddr.setStatus('mandatory')
if mibBuilder.loadTexts: elCMIfcMyIPAddr.setDescription('The IP address for this interface.')
elCMIfcMyIPSubnetAddrMask = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 3, 5, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMIfcMyIPSubnetAddrMask.setStatus('mandatory')
if mibBuilder.loadTexts: elCMIfcMyIPSubnetAddrMask.setDescription('Subnet address mask for this IP address.')
elCMIfcMyDefaultGatewayAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 3, 5, 1, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMIfcMyDefaultGatewayAddr.setStatus('mandatory')
if mibBuilder.loadTexts: elCMIfcMyDefaultGatewayAddr.setDescription('Default gateway address for this interface. If 0, it will be ignored.')
elCMIfcTrapSendAddr1 = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 3, 5, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMIfcTrapSendAddr1.setStatus('mandatory')
if mibBuilder.loadTexts: elCMIfcTrapSendAddr1.setDescription('Address 1 of 4 to send traps to. If 0, will be ignored.')
elCMIfcTrapSendAddr2 = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 3, 5, 1, 6), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMIfcTrapSendAddr2.setStatus('mandatory')
if mibBuilder.loadTexts: elCMIfcTrapSendAddr2.setDescription('Address 2 of 4 to send traps to. If 0, will be ignored.')
elCMIfcTrapSendAddr3 = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 3, 5, 1, 7), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMIfcTrapSendAddr3.setStatus('mandatory')
if mibBuilder.loadTexts: elCMIfcTrapSendAddr3.setDescription('Address 3 of 4 to send traps to. If 0, will be ignored.')
elCMIfcTrapSendAddr4 = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 3, 5, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elCMIfcTrapSendAddr4.setStatus('mandatory')
if mibBuilder.loadTexts: elCMIfcTrapSendAddr4.setDescription('Address 4 of 4 to send traps to. If 0, will be ignored.')
elPMDS3TotalSwitches = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elPMDS3TotalSwitches.setStatus('mandatory')
if mibBuilder.loadTexts: elPMDS3TotalSwitches.setDescription('Number of switches which have occurred since startup, or since last time PM metrics were cleared.')
elPMClearAllPMMetrics = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 4, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indeterminate", 1), ("clearAllPMMetrics", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elPMClearAllPMMetrics.setStatus('mandatory')
if mibBuilder.loadTexts: elPMClearAllPMMetrics.setDescription('Clears all Performance Management related metrics and statistics. On a read, the value indeterminate(1) will be returned if this variable was never set to clearAllPMMetrics(2), otherwise clearAllPMMetrics(2) will be returned.')
elDS1PMTimeElapsed = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 5, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 899))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1PMTimeElapsed.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMTimeElapsed.setDescription('The number of elapsed seconds in the current interval of DS1 PM data.')
elDS1PMValidIntervals = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 5, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1PMValidIntervals.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMValidIntervals.setDescription('The number of intervals which have elapsed and for which PM data can read, up to and including 96.')
elDS1PMCurTable = MibTable((1, 3, 6, 1, 4, 1, 564, 101, 1, 6, 1), )
if mibBuilder.loadTexts: elDS1PMCurTable.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMCurTable.setDescription('DS1 current PM metrics table.')
elDS1PMCurEntry = MibTableRow((1, 3, 6, 1, 4, 1, 564, 101, 1, 6, 1, 1), ).setIndexNames((0, "EDGELINK-MIB", "elDS1PMCurChannelNumber"))
if mibBuilder.loadTexts: elDS1PMCurEntry.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMCurEntry.setDescription('DS1 current PM metrics table entry.')
elDS1PMCurChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 6, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1PMCurChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMCurChannelNumber.setDescription('Table index. Rows are indexed by DS1 channel.')
elDS1PMCurLineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1PMCurLineCodeViolations.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMCurLineCodeViolations.setDescription('Number of line code violations in the current 15 minute interval.')
elDS1PMCurErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1PMCurErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMCurErroredSeconds.setDescription('Number of errored seconds in the current interval.')
elDS1PMIvlTable = MibTable((1, 3, 6, 1, 4, 1, 564, 101, 1, 7, 1), )
if mibBuilder.loadTexts: elDS1PMIvlTable.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMIvlTable.setDescription('DS1 Interval PM metrics table.')
elDS1PMIvlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 564, 101, 1, 7, 1, 1), ).setIndexNames((0, "EDGELINK-MIB", "elDS1PMIvlChannelNumber"), (0, "EDGELINK-MIB", "elDS1PMIvlIntervalNumber"))
if mibBuilder.loadTexts: elDS1PMIvlEntry.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMIvlEntry.setDescription('DS1 Interval PM metrics table entry.')
elDS1PMIvlChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 7, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1PMIvlChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMIvlChannelNumber.setDescription('Primary table index, a DS1 channel number.')
elDS1PMIvlIntervalNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 7, 1, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 96))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1PMIvlIntervalNumber.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMIvlIntervalNumber.setDescription('Secondary table index, the interval number.')
elDS1PMIvlLineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1PMIvlLineCodeViolations.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMIvlLineCodeViolations.setDescription('Number of line code violations for the channel specified by elDS1PMIvlChannelNumber and in the interval indicated by elDS1PMIvlIntervalNumber.')
elDS1PMIvlErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1PMIvlErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMIvlErroredSeconds.setDescription('Number of errored seconds for the channel specified by elDS1PMIvlChannelNumber and in the interval indicated by elDS1PMIvlIntervalNumber.')
elDS1PMTotTable = MibTable((1, 3, 6, 1, 4, 1, 564, 101, 1, 8, 1), )
if mibBuilder.loadTexts: elDS1PMTotTable.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMTotTable.setDescription('DS1 Total PM metrics table.')
elDS1PMTotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 564, 101, 1, 8, 1, 1), ).setIndexNames((0, "EDGELINK-MIB", "elDS1PMTotChannelNumber"))
if mibBuilder.loadTexts: elDS1PMTotEntry.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMTotEntry.setDescription('DS1 Total PM metrics table entry.')
elDS1PMTotChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 8, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 28))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1PMTotChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMTotChannelNumber.setDescription('Table index, DS1 channel number.')
elDS1PMTotLineCodeViolations = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 8, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1PMTotLineCodeViolations.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMTotLineCodeViolations.setDescription('Total number of line code violations for the channel specified by elDS1PMIvlChannelNumber.')
elDS1PMTotErroredSeconds = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 8, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elDS1PMTotErroredSeconds.setStatus('mandatory')
if mibBuilder.loadTexts: elDS1PMTotErroredSeconds.setDescription('Total number of errored seconds for the channel specified by elDS1PMIvlChannelNumber.')
elFMFillAlarmLogTable = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 9, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indeterminate", 1), ("fillAlarmLogTable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elFMFillAlarmLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: elFMFillAlarmLogTable.setDescription('Take a snapshot of the alarm log. Must be done before reading the log into the alarm log table, elFMAlmLogTable. On a read, the value indeterminate(1) will be returned if the SNMP variable was never set to fillAlarmLogTable(2), otherwise fillAlarmLogTable(2) will be returned.')
elFMClearAlarmLog = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 9, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("indeterminate", 1), ("clearAlarmLog", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elFMClearAlarmLog.setStatus('mandatory')
if mibBuilder.loadTexts: elFMClearAlarmLog.setDescription("Clears the system's alarm log. On a read, the value indeterminate(1) will be returned if the SNMP variable was never set to clearAlarmLog(2) otherwise clearAlarmLog(2) will be returned.")
elFMDS1AutoSenseMode = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableDs1AutoSense", 1), ("disableDs1AutoSense", 2), ("rescanAllDs1Inputs", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elFMDS1AutoSenseMode.setStatus('mandatory')
if mibBuilder.loadTexts: elFMDS1AutoSenseMode.setDescription('The AutoSense Mode will be enabled or Disabled on all the 28 Ds1 channels. The Rescan command will scan all the equipped DS1 Inputs and update their state.')
elFMDS1InputAlarmMode = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 9, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("statusOnDs1InputLos", 0), ("alarmOnDs1InputLos", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: elFMDS1InputAlarmMode.setStatus('mandatory')
if mibBuilder.loadTexts: elFMDS1InputAlarmMode.setDescription('This command changes the severity of the DS1 LOS as either Major alarm or status depending on the selection.')
elFMAlmLogTable = MibTable((1, 3, 6, 1, 4, 1, 564, 101, 1, 10, 1), )
if mibBuilder.loadTexts: elFMAlmLogTable.setStatus('mandatory')
if mibBuilder.loadTexts: elFMAlmLogTable.setDescription('Alarm log table. This table holds a snapshot of the alarm log, and is filled by elFMFillAlarmLogTable.')
elFMAlmLogEntry = MibTableRow((1, 3, 6, 1, 4, 1, 564, 101, 1, 10, 1, 1), ).setIndexNames((0, "EDGELINK-MIB", "elFMAlmLogEntryNumber"))
if mibBuilder.loadTexts: elFMAlmLogEntry.setStatus('mandatory')
if mibBuilder.loadTexts: elFMAlmLogEntry.setDescription('Alarm log table entry.')
elFMAlmLogEntryNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 100))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elFMAlmLogEntryNumber.setStatus('mandatory')
if mibBuilder.loadTexts: elFMAlmLogEntryNumber.setDescription('Table index, between 1 and 100.')
elFMAlmLogTableAlarmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elFMAlmLogTableAlarmNumber.setStatus('mandatory')
if mibBuilder.loadTexts: elFMAlmLogTableAlarmNumber.setDescription('Alarm number.')
elFMAlmLogTableDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 10, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elFMAlmLogTableDescription.setStatus('mandatory')
if mibBuilder.loadTexts: elFMAlmLogTableDescription.setDescription('Alarm description.')
elFMAlmLogTableStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 10, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 0))).clone(namedValues=NamedValues(("set", 1), ("clear", 0)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elFMAlmLogTableStatus.setStatus('mandatory')
if mibBuilder.loadTexts: elFMAlmLogTableStatus.setDescription('Alarm status.')
elFMAlmLogTableTimestamp = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 10, 1, 1, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elFMAlmLogTableTimestamp.setStatus('mandatory')
if mibBuilder.loadTexts: elFMAlmLogTableTimestamp.setDescription('Alarm time stamp in the form mm/dd/yy hh:mm:ss.')
elFMAlmLogTableChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elFMAlmLogTableChannel.setStatus('mandatory')
if mibBuilder.loadTexts: elFMAlmLogTableChannel.setDescription('Channel associated with the alarm, if any.')
elFMCurAlmTable = MibTable((1, 3, 6, 1, 4, 1, 564, 101, 1, 11, 1), )
if mibBuilder.loadTexts: elFMCurAlmTable.setStatus('mandatory')
if mibBuilder.loadTexts: elFMCurAlmTable.setDescription('Current alarms table.')
elFMCurAlmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 564, 101, 1, 11, 1, 1), ).setIndexNames((0, "EDGELINK-MIB", "elFMCurAlmTableAlarmNumber"), (0, "EDGELINK-MIB", "elFMCurAlmTableChannel"))
if mibBuilder.loadTexts: elFMCurAlmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: elFMCurAlmEntry.setDescription('Current alarms table entry.')
elFMCurAlmTableAlarmNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elFMCurAlmTableAlarmNumber.setStatus('mandatory')
if mibBuilder.loadTexts: elFMCurAlmTableAlarmNumber.setDescription('Primary table index, an alarm number.')
elFMCurAlmTableChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 11, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elFMCurAlmTableChannel.setStatus('mandatory')
if mibBuilder.loadTexts: elFMCurAlmTableChannel.setDescription('Secondary table index. Channel associated with the alarm, can be 0 if channel number is irrelevant to the alarm.')
elFMCurAlmTableDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 564, 101, 1, 11, 1, 1, 3), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 80))).setMaxAccess("readonly")
if mibBuilder.loadTexts: elFMCurAlmTableDescription.setStatus('mandatory')
if mibBuilder.loadTexts: elFMCurAlmTableDescription.setDescription('Alarm description.')
elFMTrapAlarmNumber = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 12, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elFMTrapAlarmNumber.setStatus('mandatory')
if mibBuilder.loadTexts: elFMTrapAlarmNumber.setDescription('Alarm number associated with the last sent trap.')
elFMTrapAlarmText = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 12, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elFMTrapAlarmText.setStatus('mandatory')
if mibBuilder.loadTexts: elFMTrapAlarmText.setDescription('Alarm text associated with the last sent trap.')
elFMTrapTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 12, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elFMTrapTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: elFMTrapTimeStamp.setDescription('Time stamp associated with the last sent trap.')
elFMTrapAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 12, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elFMTrapAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: elFMTrapAlarmStatus.setDescription('Alarm status associated with the last sent trap.')
elFMTrapChannelNumber = MibScalar((1, 3, 6, 1, 4, 1, 564, 101, 1, 12, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: elFMTrapChannelNumber.setStatus('mandatory')
if mibBuilder.loadTexts: elFMTrapChannelNumber.setDescription('Channel number associated with the last sent trap, if any.')
edgeLinkEvent = NotificationType((1, 3, 6, 1, 4, 1, 564, 101, 1) + (0,1)).setObjects(("EDGELINK-MIB", "elFMTrapAlarmNumber"), ("EDGELINK-MIB", "elFMTrapAlarmText"), ("EDGELINK-MIB", "elFMTrapTimeStamp"), ("EDGELINK-MIB", "elFMTrapAlarmStatus"), ("EDGELINK-MIB", "elFMTrapChannelNumber"), ("EDGELINK-MIB", "elCMSystemStatus"))
if mibBuilder.loadTexts: edgeLinkEvent.setDescription('This trap is sent when an alarm event is set or cleard.')
mibBuilder.exportSymbols("EDGELINK-MIB", elFMTrapChannelNumber=elFMTrapChannelNumber, elFMCurAlmTableChannel=elFMCurAlmTableChannel, elDS1PMTot=elDS1PMTot, elCMIfcMyDefaultGatewayAddr=elCMIfcMyDefaultGatewayAddr, elPM=elPM, elFMAlmLogTable=elFMAlmLogTable, elCMCBitIPSubnetMask=elCMCBitIPSubnetMask, elFMCurAlmTableAlarmNumber=elFMCurAlmTableAlarmNumber, elFMAlmLogTableTimestamp=elFMAlmLogTableTimestamp, elFMAlmLogTableAlarmNumber=elFMAlmLogTableAlarmNumber, elFMAlmLogEntryNumber=elFMAlmLogEntryNumber, elDS1PMIvl=elDS1PMIvl, elCMIfcInterfaceNumber=elCMIfcInterfaceNumber, elDS1PMCur=elDS1PMCur, elFMClearAlarmLog=elFMClearAlarmLog, elCMDS3LineBuildout=elCMDS3LineBuildout, elDS1CMInputStatus=elDS1CMInputStatus, elCMProtectionMode=elCMProtectionMode, elFMTrapAlarmStatus=elFMTrapAlarmStatus, elM13v1=elM13v1, elDS1PM=elDS1PM, elDS1CMChannelNumber=elDS1CMChannelNumber, elFMCurAlm=elFMCurAlm, elPMDS3TotalSwitches=elPMDS3TotalSwitches, elCMIfcMyIPSubnetAddrMask=elCMIfcMyIPSubnetAddrMask, elDS1PMIvlIntervalNumber=elDS1PMIvlIntervalNumber, elDS1PMCurTable=elDS1PMCurTable, elFMTrapFields=elFMTrapFields, elCMRemotePPPIPAddress=elCMRemotePPPIPAddress, elFMFillAlarmLogTable=elFMFillAlarmLogTable, elDS1CMTable=elDS1CMTable, elCMIfcMyIPAddr=elCMIfcMyIPAddr, elDS1PMIvlTable=elDS1PMIvlTable, elDS1CMInterfaceRescan=elDS1CMInterfaceRescan, elALLDS1CMLineBuildout=elALLDS1CMLineBuildout, elFMCurAlmTable=elFMCurAlmTable, elFMCurAlmEntry=elFMCurAlmEntry, elDS1PMCurLineCodeViolations=elDS1PMCurLineCodeViolations, elDS1PMIvlLineCodeViolations=elDS1PMIvlLineCodeViolations, elFMTrapAlarmText=elFMTrapAlarmText, elCMIfcTrapSendAddr1=elCMIfcTrapSendAddr1, elCMIfcTrapSendAddr4=elCMIfcTrapSendAddr4, telco=telco, elCMLocalCBitIPAddress=elCMLocalCBitIPAddress, elFMAlmLogTableDescription=elFMAlmLogTableDescription, elDS1PMCurChannelNumber=elDS1PMCurChannelNumber, elCMDS3TxTiming=elCMDS3TxTiming, elDS1CMLoopbackMode=elDS1CMLoopbackMode, elALLDS1CMLoopbackMode=elALLDS1CMLoopbackMode, elCMIfc=elCMIfc, elCMCurTimeDate=elCMCurTimeDate, elCMSystemStatus=elCMSystemStatus, elCMBerThreshold=elCMBerThreshold, elFMTrapAlarmNumber=elFMTrapAlarmNumber, elALLDS1CMLineCode=elALLDS1CMLineCode, edgeLink=edgeLink, elPMClearAllPMMetrics=elPMClearAllPMMetrics, elFMAlmLogTableChannel=elFMAlmLogTableChannel, elCMCardSelect=elCMCardSelect, elCMClearTooManySwitches=elCMClearTooManySwitches, elDS1PMTotLineCodeViolations=elDS1PMTotLineCodeViolations, elDS1CMInterfaceEquipped=elDS1CMInterfaceEquipped, elFMAlmLog=elFMAlmLog, edgeLinkEvent=edgeLinkEvent, elFMCurAlmTableDescription=elFMCurAlmTableDescription, elDS1CMMaskState=elDS1CMMaskState, elDS1PMTotEntry=elDS1PMTotEntry, elDS1PMTotChannelNumber=elDS1PMTotChannelNumber, elCMDS3ServiceMode=elCMDS3ServiceMode, elDS1CMEntry=elDS1CMEntry, elDS1CM=elDS1CM, elFMAlmLogTableStatus=elFMAlmLogTableStatus, elALLDS1CMInterfaceEquipped=elALLDS1CMInterfaceEquipped, elDS1CMServiceMode=elDS1CMServiceMode, elCMRemoteCBitIPAddress=elCMRemoteCBitIPAddress, elDS1PMTimeElapsed=elDS1PMTimeElapsed, elFMTrapTimeStamp=elFMTrapTimeStamp, elDS1CMLineBuildout=elDS1CMLineBuildout, elDS1CMChannelName=elDS1CMChannelName, elDS1PMCurEntry=elDS1PMCurEntry, elFMAlmLogEntry=elFMAlmLogEntry, elCMIfcTrapSendAddr2=elCMIfcTrapSendAddr2, elCMIfcEntry=elCMIfcEntry, elDS1PMCurErroredSeconds=elDS1PMCurErroredSeconds, elDS1PMIvlErroredSeconds=elDS1PMIvlErroredSeconds, elCMPPPPortBaudRate=elCMPPPPortBaudRate, elDS1PMIvlEntry=elDS1PMIvlEntry, elDS1CMLineCode=elDS1CMLineCode, elCMIfcTable=elCMIfcTable, elFMDS1InputAlarmMode=elFMDS1InputAlarmMode, elFM=elFM, elCMSystemInfo=elCMSystemInfo, elDS1PMIvlChannelNumber=elDS1PMIvlChannelNumber, elDS1PMTotTable=elDS1PMTotTable, elCM=elCM, elDS1PMTotErroredSeconds=elDS1PMTotErroredSeconds, elCMIfcTrapSendAddr3=elCMIfcTrapSendAddr3, elDS1PMValidIntervals=elDS1PMValidIntervals, elCMDS3ParityMode=elCMDS3ParityMode, elCMDS3LoopbackMode=elCMDS3LoopbackMode, elALLDS1CMServiceMode=elALLDS1CMServiceMode, elFMDS1AutoSenseMode=elFMDS1AutoSenseMode)
