#
# PySNMP MIB module NSCHippiSonet-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/NSCHippiSonet-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:25:03 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
nscHippiSonet, = mibBuilder.importSymbols("NSC-MIB", "nscHippiSonet")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Gauge32, Bits, IpAddress, Integer32, NotificationType, MibIdentifier, iso, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, TimeTicks, Counter64, Counter32 = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "Bits", "IpAddress", "Integer32", "NotificationType", "MibIdentifier", "iso", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "TimeTicks", "Counter64", "Counter32")
TextualConvention, DisplayString, PhysAddress = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString", "PhysAddress")
nscHippiSonetEngineStatus = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetEngineStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetEngineStatus.setDescription('String describing the current state of the engine.')
nscHippiSonetRegisters = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2))
nscHippiSonetMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3))
nscHippiSonetAtoD = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 4))
nscHippiSonetSourceIField = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetSourceIField.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetSourceIField.setDescription('Hippi source I-Field register.')
nscHippiSonetProfile = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 6))
nscHippiSonetUnframer = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2, 1))
nscHippiSonetUnframerStatus = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetUnframerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetUnframerStatus.setDescription('Unframer status register.')
nscHippiSonetUnframerOHdma = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetUnframerOHdma.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetUnframerOHdma.setDescription('Unframer overhead DMA register.')
nscHippiSonetFramer = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2, 2))
nscHippiSonetFramerStatus = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetFramerStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetFramerStatus.setDescription('Framer status register.')
nscHippiSonetFramerAdaptID = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2, 2, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetFramerAdaptID.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetFramerAdaptID.setDescription('Adaptor ID (HDA) and enable status.')
nscHippiSonetFramerInput = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetFramerInput.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetFramerInput.setDescription('Framer input register.')
nscHippiSonetFramerData = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2, 2, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetFramerData.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetFramerData.setDescription('Framer data register.')
nscHippiSonetFramerIField = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2, 2, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetFramerIField.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetFramerIField.setDescription('Framer I-Field register.')
nscHippiSonetMegaFifo = MibIdentifier((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2, 3))
nscHippiSonetMFcontrol = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2, 3, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMFcontrol.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMFcontrol.setDescription('Mega FIFO control register.')
nscHippiSonetMFstatus = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2, 3, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMFstatus.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMFstatus.setDescription('Mega FIFO status register.')
nscHippiSonetMFtimeout = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2, 3, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMFtimeout.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMFtimeout.setDescription('Mega FIFO timeout register.')
nscHippiSonetMFConnectStatus = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 2, 3, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMFConnectStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMFConnectStatus.setDescription('Mega FIFO connection status register.')
nscHippiSonetMonClock = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonClock.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonClock.setDescription('500 Khz clock value (for time stamps).')
nscHippiSonetMonMFFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonMFFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonMFFlowControl.setDescription('Mega FIFO flow control duration.')
nscHippiSonetMonDLFlowControl = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonDLFlowControl.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonDLFlowControl.setDescription('Down line flow control duration')
nscHippiSonetMonBIPErrors = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonBIPErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonBIPErrors.setDescription('Received path BIP Errors.')
nscHippiSonetMonSrcBusy = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonSrcBusy.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonSrcBusy.setDescription('Duration in 500Khz that the source was busy.')
nscHippiSonetMonSrcSOC = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonSrcSOC.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonSrcSOC.setDescription('Number of source start of connections')
nscHippiSonetMonSrcEOC = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonSrcEOC.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonSrcEOC.setDescription('Number of source end of connections')
nscHippiSonetMonDstConnectDuration = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonDstConnectDuration.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonDstConnectDuration.setDescription('Number 500Khz cycles destination has been connected')
nscHippiSonetMonSrcConnectDuration = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonSrcConnectDuration.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonSrcConnectDuration.setDescription('Number 500Khz cycles source has been connected')
nscHippiSonetMonDstConnectReject = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonDstConnectReject.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonDstConnectReject.setDescription('Number of Destination connect rejects.')
nscHippiSonetMonSrcConnectFail = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonSrcConnectFail.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonSrcConnectFail.setDescription('Number of source connect failures.')
nscHippiSonetMonLOF = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonLOF.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonLOF.setDescription('Number of receive sonet Loss of Frame events')
nscHippiSonetMonLOS = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonLOS.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonLOS.setDescription('Number of receive sonet Loss of Signal events')
nscHippiSonetMonDstBursts = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonDstBursts.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonDstBursts.setDescription('Number of Destination bursts')
nscHippiSonetMonDstPackets = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonDstPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonDstPackets.setDescription('Number of Destination packets')
nscHippiSonetMonDstSync = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonDstSync.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonDstSync.setDescription('Number of Destination sync errors')
nscHippiSonetMonDstLLRC = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonDstLLRC.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonDstLLRC.setDescription('Number of Destination LLRC errors')
nscHippiSonetMonDstPE = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 18), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonDstPE.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonDstPE.setDescription('Number of Destination Parity Errors')
nscHippiSonetMonDstConnect = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 19), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonDstConnect.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonDstConnect.setDescription('Number of Destination connects')
nscHippiSonetMonSrcConnect = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 20), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonSrcConnect.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonSrcConnect.setDescription('Number of source connects')
nscHippiSonetMonSrcPackets = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 21), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonSrcPackets.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonSrcPackets.setDescription('Number of source packets')
nscHippiSonetMonSrcBursts = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 22), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonSrcBursts.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonSrcBursts.setDescription('Number of source bursts')
nscHippiSonetMonSrcForceErrors = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 23), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonSrcForceErrors.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonSrcForceErrors.setDescription('Number of Source Bad-data Force Errors')
nscHippiSonetMonSrcCRC = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 24), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonSrcCRC.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonSrcCRC.setDescription('Number of Source CRC errors')
nscHippiSonetMonDstWords = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 25), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonDstWords.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonDstWords.setDescription('Number of Destination burst words / 32 (Kbits)')
nscHippiSonetMonSrcWords = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 3, 26), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetMonSrcWords.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetMonSrcWords.setDescription('Number of Destination burst words / 32 (Kbits)')
nscHippiSonetADRecvOpticalPower = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetADRecvOpticalPower.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetADRecvOpticalPower.setDescription("Receive optical power in dbm's")
nscHippiSonetADLaserBias = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetADLaserBias.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetADLaserBias.setDescription('Laser bias voltage (in milli-volts)')
nscHippiSonetADLaserBackface = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetADLaserBackface.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetADLaserBackface.setDescription('Laser backface voltage (in milli-volts)')
nscHippiSonetADInternalTemp = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetADInternalTemp.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetADInternalTemp.setDescription('Internal temperature (degrees F)')
nscHippiSonetADExhaustTemp = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetADExhaustTemp.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetADExhaustTemp.setDescription('Exhaust temperature (degrees F)')
nscHippiSonetOpticalRcvOffset = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 6, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetOpticalRcvOffset.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetOpticalRcvOffset.setDescription('String representation of the floating value for the offset of the optical receive light formula.')
nscHippiSonetOpticalRcvSlope = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 6, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetOpticalRcvSlope.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetOpticalRcvSlope.setDescription('String representation of the floating value for the slope of the optical receive light formula.')
nscHippiSonetBiasCurrent = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 6, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetBiasCurrent.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetBiasCurrent.setDescription('Integer representation of the floating value for the baseline current of the transmit laser in milliamps. This value is used by the machine to determine the life of the laser.')
nscHippiSonetBiasTemp = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 6, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetBiasTemp.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetBiasTemp.setDescription('Temperature in celcius at which the profiled bias current was taken. This value is used with the bias current to determine the life of the laser.')
nscHippiSonetBackfaceVoltage = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 6, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nscHippiSonetBackfaceVoltage.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetBackfaceVoltage.setDescription('String representation of the floting value of the Voltage in millivolts that was measured at the backface of the laser when it was new. This value is used with the current backface voltage as an additional method of determining if the transmit laser has become defective.')
nscHippiSonetIField = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 6, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscHippiSonetIField.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetIField.setDescription('The I-Field address that is used by the hippi interface.')
nscHippiSonetBootPort = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 6, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 1))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscHippiSonetBootPort.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetBootPort.setDescription('Which rs232 port the boot information should be sent to. Ports 1 & 2 are the only valid ports with 1 being located on the back of the machine and 2 on the front.')
nscHippiSonetPortSpeed = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 6, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscHippiSonetPortSpeed.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetPortSpeed.setDescription('The baud rate to set the rs232 ports to at boot time.')
nscHippiSonetThreshold = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 6, 9), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 7))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscHippiSonetThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetThreshold.setDescription('Threshold of the mega-fifo at which flow control will be activated. The value represents 8ths of the fifo with 7 representing the fifo must be full before flow control is activated and 0 indicating that flow control will happen as soon as the mega-fifo starts to fill. This value may need to be adjusted to deal with time delays over vary long sonet links in that you want flow control to propagate back to the transmitting sonet box before it puts enough information on the line to overflow this machine.')
nscHippiTimeout = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 6, 10), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 32767))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscHippiTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiTimeout.setDescription('Timeout value to use when trying to connect from our hippi source. This timer is started when the source raises connect. If the destination fails to respond before the timer goes off, the connect will be aborted. The timer is represented as the number of 500 KHz clock ticks.')
nscHippiSonetDipSwitch = MibScalar((1, 3, 6, 1, 4, 1, 10, 2, 1, 5, 6, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nscHippiSonetDipSwitch.setStatus('mandatory')
if mibBuilder.loadTexts: nscHippiSonetDipSwitch.setDescription('This is a software switch that functions much like a hardware dip switch. At the moment, the only use of this switch is to define whether the unit will act as the master clock for the sonet line. The bit values are defined as follows: x x x x x x 1 - assert master clock x x x x x 1 x - not assigned x x x x 1 x x - not assigned x x x 1 x x x - not assigned x x 1 x x x x - not assigned x 1 x x x x x - not assigned 1 x x x x x x - not assigned')
mibBuilder.exportSymbols("NSCHippiSonet-MIB", nscHippiSonetMonClock=nscHippiSonetMonClock, nscHippiSonetMonDstPackets=nscHippiSonetMonDstPackets, nscHippiSonetMonDLFlowControl=nscHippiSonetMonDLFlowControl, nscHippiSonetMegaFifo=nscHippiSonetMegaFifo, nscHippiSonetMonLOS=nscHippiSonetMonLOS, nscHippiSonetEngineStatus=nscHippiSonetEngineStatus, nscHippiSonetFramerAdaptID=nscHippiSonetFramerAdaptID, nscHippiSonetMonSrcConnectFail=nscHippiSonetMonSrcConnectFail, nscHippiSonetBiasTemp=nscHippiSonetBiasTemp, nscHippiSonetMonSrcPackets=nscHippiSonetMonSrcPackets, nscHippiSonetFramerIField=nscHippiSonetFramerIField, nscHippiSonetMonDstConnectDuration=nscHippiSonetMonDstConnectDuration, nscHippiSonetBackfaceVoltage=nscHippiSonetBackfaceVoltage, nscHippiSonetUnframerStatus=nscHippiSonetUnframerStatus, nscHippiSonetFramerStatus=nscHippiSonetFramerStatus, nscHippiSonetMonDstConnectReject=nscHippiSonetMonDstConnectReject, nscHippiSonetMonDstWords=nscHippiSonetMonDstWords, nscHippiSonetOpticalRcvOffset=nscHippiSonetOpticalRcvOffset, nscHippiSonetMonBIPErrors=nscHippiSonetMonBIPErrors, nscHippiSonetMonDstConnect=nscHippiSonetMonDstConnect, nscHippiSonetPortSpeed=nscHippiSonetPortSpeed, nscHippiSonetMonDstLLRC=nscHippiSonetMonDstLLRC, nscHippiSonetUnframerOHdma=nscHippiSonetUnframerOHdma, nscHippiSonetMonDstSync=nscHippiSonetMonDstSync, nscHippiSonetADLaserBias=nscHippiSonetADLaserBias, nscHippiSonetMFtimeout=nscHippiSonetMFtimeout, nscHippiSonetADExhaustTemp=nscHippiSonetADExhaustTemp, nscHippiSonetFramerInput=nscHippiSonetFramerInput, nscHippiSonetMonSrcCRC=nscHippiSonetMonSrcCRC, nscHippiSonetMonLOF=nscHippiSonetMonLOF, nscHippiSonetMonDstBursts=nscHippiSonetMonDstBursts, nscHippiSonetADRecvOpticalPower=nscHippiSonetADRecvOpticalPower, nscHippiSonetADInternalTemp=nscHippiSonetADInternalTemp, nscHippiSonetMFcontrol=nscHippiSonetMFcontrol, nscHippiSonetMFConnectStatus=nscHippiSonetMFConnectStatus, nscHippiSonetMonSrcConnectDuration=nscHippiSonetMonSrcConnectDuration, nscHippiSonetFramer=nscHippiSonetFramer, nscHippiSonetDipSwitch=nscHippiSonetDipSwitch, nscHippiSonetMonitor=nscHippiSonetMonitor, nscHippiSonetMonMFFlowControl=nscHippiSonetMonMFFlowControl, nscHippiSonetUnframer=nscHippiSonetUnframer, nscHippiSonetFramerData=nscHippiSonetFramerData, nscHippiSonetIField=nscHippiSonetIField, nscHippiSonetOpticalRcvSlope=nscHippiSonetOpticalRcvSlope, nscHippiSonetRegisters=nscHippiSonetRegisters, nscHippiSonetSourceIField=nscHippiSonetSourceIField, nscHippiSonetMonSrcForceErrors=nscHippiSonetMonSrcForceErrors, nscHippiSonetBiasCurrent=nscHippiSonetBiasCurrent, nscHippiSonetMonDstPE=nscHippiSonetMonDstPE, nscHippiSonetProfile=nscHippiSonetProfile, nscHippiSonetMonSrcBusy=nscHippiSonetMonSrcBusy, nscHippiSonetMonSrcSOC=nscHippiSonetMonSrcSOC, nscHippiSonetAtoD=nscHippiSonetAtoD, nscHippiTimeout=nscHippiTimeout, nscHippiSonetMFstatus=nscHippiSonetMFstatus, nscHippiSonetMonSrcConnect=nscHippiSonetMonSrcConnect, nscHippiSonetMonSrcEOC=nscHippiSonetMonSrcEOC, nscHippiSonetMonSrcWords=nscHippiSonetMonSrcWords, nscHippiSonetBootPort=nscHippiSonetBootPort, nscHippiSonetMonSrcBursts=nscHippiSonetMonSrcBursts, nscHippiSonetThreshold=nscHippiSonetThreshold, nscHippiSonetADLaserBackface=nscHippiSonetADLaserBackface)
