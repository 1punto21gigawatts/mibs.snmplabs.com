#
# PySNMP MIB module TPT-RESOURCE-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TPT-RESOURCE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:26:39 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint", "ValueSizeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
TimeTicks, Gauge32, iso, ModuleIdentity, Counter64, Counter32, ObjectIdentity, IpAddress, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, MibIdentifier, Bits, Integer32 = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Gauge32", "iso", "ModuleIdentity", "Counter64", "Counter32", "ObjectIdentity", "IpAddress", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "MibIdentifier", "Bits", "Integer32")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
tpt_tpa_unkparams, tpt_tpa_objs, tpt_tpa_eventsV2 = mibBuilder.importSymbols("TPT-TPAMIBS-MIB", "tpt-tpa-unkparams", "tpt-tpa-objs", "tpt-tpa-eventsV2")
tpt_resource = ModuleIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5)).setLabel("tpt-resource")
tpt_resource.setRevisions(('2016-05-25 18:54',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tpt_resource.setRevisionsDescriptions(('Updated copyright information. Minor MIB syntax fixes.',))
if mibBuilder.loadTexts: tpt_resource.setLastUpdated('201605251854Z')
if mibBuilder.loadTexts: tpt_resource.setOrganization('Trend Micro, Inc.')
if mibBuilder.loadTexts: tpt_resource.setContactInfo('www.trendmicro.com')
if mibBuilder.loadTexts: tpt_resource.setDescription("Resource consumption and threshold notifications. Copyright (C) 2016 Trend Micro Incorporated. All Rights Reserved. Trend Micro makes no warranty of any kind with regard to this material, including, but not limited to, the implied warranties of merchantability and fitness for a particular purpose. Trend Micro shall not be liable for errors contained herein or for incidental or consequential damages in connection with the furnishing, performance, or use of this material. This document contains proprietary information, which is protected by copyright. No part of this document may be photocopied, reproduced, or translated into another language without the prior written consent of Trend Micro. The information is provided 'as is' without warranty of any kind and is subject to change without notice. The only warranties for Trend Micro products and services are set forth in the express warranty statements accompanying such products and services. Nothing herein should be construed as constituting an additional warranty. Trend Micro shall not be liable for technical or editorial errors or omissions contained herein. TippingPoint(R), the TippingPoint logo, and Digital Vaccine(R) are registered trademarks of Trend Micro. All other company and product names may be trademarks of their respective holders. All rights reserved. This document contains confidential information, trade secrets or both, which are the property of Trend Micro. No part of this documentation may be reproduced in any form or by any means or used to make any derivative work (such as translation, transformation, or adaptation) without written permission from Trend Micro or one of its subsidiaries. All other company and product names may be trademarks of their respective holders. ")
class ResourceIdentifier(TextualConvention, Integer32):
    description = 'An identifier of the resource parameter pertaining to a notification.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))
    namedValues = NamedValues(("filesystem", 1), ("hpCPU", 2), ("hpMemory", 3), ("chassisTemp", 4), ("fan", 5), ("powerSupply", 6), ("hardDisk", 7), ("i2cBus", 8))

class ResourceState(TextualConvention, Integer32):
    description = 'A selection from a set of state levels used in resource thresholds.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("unknown", 0), ("red", 1), ("yellow", 2), ("green", 3))

class PowerSupplyState(TextualConvention, Integer32):
    description = 'A selection from a set of state levels used in power supply status.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unknown", 0), ("red", 1), ("green", 2))

class SnmpVersions(TextualConvention, Integer32):
    description = 'An indicator of which SNMP versions are enabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("snmpv2", 1), ("snmpv3", 2), ("snmpv2-and-snmpv3", 3))

class EnabledOrNot(TextualConvention, Integer32):
    description = 'An indication of whether a feature is configured as enabled or disabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1))
    namedValues = NamedValues(("disabled", 0), ("enabled", 1))

class FilesystemState(TextualConvention, Integer32):
    description = 'Current state of the filesystem.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2))
    namedValues = NamedValues(("unformatted", 0), ("formatted", 1), ("mounted", 2))

class RemoteAuthType(TextualConvention, Integer32):
    description = 'An indication of which remote authentication are enabled.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))
    namedValues = NamedValues(("none", 0), ("radius", 1), ("sms", 2), ("tacacs", 3))

resourceNumberOfFilesystems = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNumberOfFilesystems.setStatus('current')
if mibBuilder.loadTexts: resourceNumberOfFilesystems.setDescription("The number of filesystems on the device's hard disk.")
resourceFSTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 2), )
if mibBuilder.loadTexts: resourceFSTable.setStatus('current')
if mibBuilder.loadTexts: resourceFSTable.setDescription('Table of per-filesystem resource information.')
resourceFSEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 2, 1), ).setIndexNames((0, "TPT-RESOURCE-MIB", "resourceFSIndex"))
if mibBuilder.loadTexts: resourceFSEntry.setStatus('current')
if mibBuilder.loadTexts: resourceFSEntry.setDescription('An entry in the resource filesystem table. Rows cannot be created or deleted. ')
resourceFSInUseMB = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceFSInUseMB.setStatus('current')
if mibBuilder.loadTexts: resourceFSInUseMB.setDescription('The number of MB in use for this filesystem.')
resourceFSThresholdMaj = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceFSThresholdMaj.setStatus('current')
if mibBuilder.loadTexts: resourceFSThresholdMaj.setDescription('The major threshold value (percent) in use for this filesystem.')
resourceFSThresholdCrit = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceFSThresholdCrit.setStatus('current')
if mibBuilder.loadTexts: resourceFSThresholdCrit.setDescription('The critical threshold value (percent) in use for this filesystem.')
resourceFSRangeMin = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceFSRangeMin.setStatus('current')
if mibBuilder.loadTexts: resourceFSRangeMin.setDescription('The minimum value of the range of MB in use (usually zero).')
resourceFSRangeMax = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceFSRangeMax.setStatus('current')
if mibBuilder.loadTexts: resourceFSRangeMax.setDescription('The size (in MB) of this filesystem.')
resourceFSName = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 2, 1, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceFSName.setStatus('current')
if mibBuilder.loadTexts: resourceFSName.setDescription('The name of this filesystem.')
resourceFSIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 2, 1, 7), Unsigned32())
if mibBuilder.loadTexts: resourceFSIndex.setStatus('current')
if mibBuilder.loadTexts: resourceFSIndex.setDescription('The number of this table row, from one to the number of filesystems.')
resourceFSState = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 2, 1, 8), FilesystemState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceFSState.setStatus('current')
if mibBuilder.loadTexts: resourceFSState.setDescription('Current state of the filesystem.')
resourceFSEncryption = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 2, 1, 9), EnabledOrNot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceFSEncryption.setStatus('current')
if mibBuilder.loadTexts: resourceFSEncryption.setDescription('Indicates whether this filesystem is encrypted or not.')
resourceHPMemoryObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 3))
if mibBuilder.loadTexts: resourceHPMemoryObjs.setStatus('current')
if mibBuilder.loadTexts: resourceHPMemoryObjs.setDescription('Sub-tree of host processor memory information.')
resourceHPMemoryInUsePercent = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceHPMemoryInUsePercent.setStatus('current')
if mibBuilder.loadTexts: resourceHPMemoryInUsePercent.setDescription('The percentage of host processor memory in use.')
resourceHPMemoryThresholdMaj = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 3, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceHPMemoryThresholdMaj.setStatus('current')
if mibBuilder.loadTexts: resourceHPMemoryThresholdMaj.setDescription('The major threshold value for host processor memory in use.')
resourceHPMemoryThresholdCrit = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 3, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceHPMemoryThresholdCrit.setStatus('current')
if mibBuilder.loadTexts: resourceHPMemoryThresholdCrit.setDescription('The critical threshold value for host processor memory in use.')
resourceHPMemoryRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 3, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceHPMemoryRangeMin.setStatus('current')
if mibBuilder.loadTexts: resourceHPMemoryRangeMin.setDescription('The minimum percentage of host processor memory in use (usually zero).')
resourceHPMemoryRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 3, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceHPMemoryRangeMax.setStatus('current')
if mibBuilder.loadTexts: resourceHPMemoryRangeMax.setDescription('The maximum percentage of host processor memory in use (usually 100).')
resourceHPMemoryTotal = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 3, 6), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceHPMemoryTotal.setStatus('current')
if mibBuilder.loadTexts: resourceHPMemoryTotal.setDescription('The size (in bytes) of host processor memory.')
resourceHPCPUObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4))
if mibBuilder.loadTexts: resourceHPCPUObjs.setStatus('current')
if mibBuilder.loadTexts: resourceHPCPUObjs.setDescription('Sub-tree of host processor CPU information.')
resourceHPCPUBusyPercent = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceHPCPUBusyPercent.setStatus('current')
if mibBuilder.loadTexts: resourceHPCPUBusyPercent.setDescription('The percentage of host processor CPU busy.')
resourceHPCPUThresholdMaj = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceHPCPUThresholdMaj.setStatus('current')
if mibBuilder.loadTexts: resourceHPCPUThresholdMaj.setDescription('The major threshold value for host processor CPU busy.')
resourceHPCPUThresholdCrit = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceHPCPUThresholdCrit.setStatus('current')
if mibBuilder.loadTexts: resourceHPCPUThresholdCrit.setDescription('The critical threshold value for host processor CPU busy.')
resourceHPCPURangeMin = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceHPCPURangeMin.setStatus('current')
if mibBuilder.loadTexts: resourceHPCPURangeMin.setDescription('The minimum percentage of host processor CPU busy (usually zero).')
resourceHPCPURangeMax = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceHPCPURangeMax.setStatus('current')
if mibBuilder.loadTexts: resourceHPCPURangeMax.setDescription('The maximum percentage of host processor CPU busy (usually 100).')
resourceNPCPUBusyPercentA = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNPCPUBusyPercentA.setStatus('current')
if mibBuilder.loadTexts: resourceNPCPUBusyPercentA.setDescription('Total Utilization of XLR A')
resourceNPCPUBusyPercentTier2A = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier2A.setStatus('current')
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier2A.setDescription('F Thread Utilization of XLR A')
resourceNPCPUBusyPercentTier3A = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier3A.setStatus('current')
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier3A.setDescription('KS Thread Utilization of XLR A')
resourceNPCPUBusyPercentTier4A = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier4A.setStatus('current')
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier4A.setDescription('L Thread Utilization of XLR A')
resourceNPCPUBusyPercentB = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNPCPUBusyPercentB.setStatus('current')
if mibBuilder.loadTexts: resourceNPCPUBusyPercentB.setDescription('Total Utilization of XLR B')
resourceNPCPUBusyPercentTier2B = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier2B.setStatus('current')
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier2B.setDescription('F Thread Utilization of XLR B')
resourceNPCPUBusyPercentTier3B = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier3B.setStatus('current')
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier3B.setDescription('KS Thread Utilization of XLR B')
resourceNPCPUBusyPercentTier4B = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier4B.setStatus('current')
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier4B.setDescription('L Thread Utilization of XLR B')
resourceNPCPUBusyPercentC = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNPCPUBusyPercentC.setStatus('current')
if mibBuilder.loadTexts: resourceNPCPUBusyPercentC.setDescription('Total Utilization of XLR C')
resourceNPCPUBusyPercentTier2C = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier2C.setStatus('current')
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier2C.setDescription('F Thread Utilization of XLR C')
resourceNPCPUBusyPercentTier3C = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier3C.setStatus('current')
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier3C.setDescription('KS Thread Utilization of XLR C')
resourceNPCPUBusyPercentTier4C = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 4, 17), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier4C.setStatus('current')
if mibBuilder.loadTexts: resourceNPCPUBusyPercentTier4C.setDescription('L Thread Utilization of XLR C')
resourceChassisTempObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 5))
if mibBuilder.loadTexts: resourceChassisTempObjs.setStatus('current')
if mibBuilder.loadTexts: resourceChassisTempObjs.setDescription('Sub-tree of chassis temperature information.')
resourceChassisTempDegreesC = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceChassisTempDegreesC.setStatus('current')
if mibBuilder.loadTexts: resourceChassisTempDegreesC.setDescription('The chassis temperature in degrees C.')
resourceChassisTempThresholdMaj = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceChassisTempThresholdMaj.setStatus('current')
if mibBuilder.loadTexts: resourceChassisTempThresholdMaj.setDescription('The major threshold value for chassis temperature.')
resourceChassisTempThresholdCrit = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 5, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceChassisTempThresholdCrit.setStatus('current')
if mibBuilder.loadTexts: resourceChassisTempThresholdCrit.setDescription('The critical threshold value for chassis temperature.')
resourceChassisTempRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 5, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceChassisTempRangeMin.setStatus('current')
if mibBuilder.loadTexts: resourceChassisTempRangeMin.setDescription('The minimum value of the chassis temperature range.')
resourceChassisTempRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 5, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceChassisTempRangeMax.setStatus('current')
if mibBuilder.loadTexts: resourceChassisTempRangeMax.setDescription('The maximum value of the chassis temperature range.')
resourcePowerSupplyObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 9))
if mibBuilder.loadTexts: resourcePowerSupplyObjs.setStatus('current')
if mibBuilder.loadTexts: resourcePowerSupplyObjs.setDescription('Sub-tree of power supply information.')
resourcePowerSupplyStatus = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 9, 1), ResourceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourcePowerSupplyStatus.setStatus('deprecated')
if mibBuilder.loadTexts: resourcePowerSupplyStatus.setDescription('DEPRECATED as of TOS V. 3.5.0. If the device has dual power supplies and power supply monitoring is enabled, this value indicates whether one or both power supplies is functional (red or green respectively). Otherwise the value is unknown.')
resourcePowerSupplyQuantity = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 9, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourcePowerSupplyQuantity.setStatus('current')
if mibBuilder.loadTexts: resourcePowerSupplyQuantity.setDescription('The number of power supplies (1 or 2).')
resourcePowerSupplyMonitoring = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 9, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourcePowerSupplyMonitoring.setStatus('current')
if mibBuilder.loadTexts: resourcePowerSupplyMonitoring.setDescription('If power supply monitoring is currently enabled, this value is 1; otherwise, this value is 0.')
resourcePowerSupplyTable = MibTable((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 9, 4), )
if mibBuilder.loadTexts: resourcePowerSupplyTable.setStatus('current')
if mibBuilder.loadTexts: resourcePowerSupplyTable.setDescription('Table of power supplies on the device. The number of entries depends on the value of resourcePowerSupplyQuantity. The maximum number of entries is implementation dependent.')
resourcePowerSupplyEntry = MibTableRow((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 9, 4, 1), ).setIndexNames((0, "TPT-RESOURCE-MIB", "powerSupplyUnitIndex"))
if mibBuilder.loadTexts: resourcePowerSupplyEntry.setStatus('current')
if mibBuilder.loadTexts: resourcePowerSupplyEntry.setDescription('An entry in the power supply table. Rows cannot be created or deleted.')
powerSupplyUnitIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 9, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyUnitIndex.setStatus('current')
if mibBuilder.loadTexts: powerSupplyUnitIndex.setDescription('Index into the power supply units on a device. Starts with 1')
powerSupplyStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 9, 4, 1, 2), ResourceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: powerSupplyStatus.setStatus('current')
if mibBuilder.loadTexts: powerSupplyStatus.setDescription('If the device has dual power supplies and power supply monitoring is enabled, this value indicates whether one or both power supplies is functional (red or green respectively). Otherwise the value is unknown.')
resourceLogCountObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 7))
if mibBuilder.loadTexts: resourceLogCountObjs.setStatus('current')
if mibBuilder.loadTexts: resourceLogCountObjs.setDescription('Sub-tree of system log entry counts by type.')
resourceLogCountCritical = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 7, 1), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceLogCountCritical.setStatus('current')
if mibBuilder.loadTexts: resourceLogCountCritical.setDescription("The number of system log entries of type 'critical'.")
resourceLogCountError = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 7, 2), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceLogCountError.setStatus('current')
if mibBuilder.loadTexts: resourceLogCountError.setDescription("The number of system log entries of type 'error'.")
resourceLogCountWarning = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 7, 3), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceLogCountWarning.setStatus('current')
if mibBuilder.loadTexts: resourceLogCountWarning.setDescription("The number of system log entries of type 'warning'.")
resourceLogCountInfo = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 7, 4), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceLogCountInfo.setStatus('current')
if mibBuilder.loadTexts: resourceLogCountInfo.setDescription("The number of system log entries of type 'info'.")
resourceMetricObjs = ObjectIdentity((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 8))
if mibBuilder.loadTexts: resourceMetricObjs.setStatus('current')
if mibBuilder.loadTexts: resourceMetricObjs.setDescription('Sub-tree of selected system performance metrics.')
resourceMetricFastpath = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 8, 1), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceMetricFastpath.setStatus('current')
if mibBuilder.loadTexts: resourceMetricFastpath.setDescription('Fast path throughput in bits per second.')
resourceMetricSmartpath = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 8, 2), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceMetricSmartpath.setStatus('current')
if mibBuilder.loadTexts: resourceMetricSmartpath.setDescription('Smart path throughput in bits per second.')
resourceMetricCongestion = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 8, 3), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceMetricCongestion.setStatus('current')
if mibBuilder.loadTexts: resourceMetricCongestion.setDescription('Congestion count in packets.')
resourceVersion = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 6), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 60))).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceVersion.setStatus('current')
if mibBuilder.loadTexts: resourceVersion.setDescription('Build version and date.')
resourceDateTime = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 10), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceDateTime.setStatus('current')
if mibBuilder.loadTexts: resourceDateTime.setDescription('Current date and time of device in seconds since January 1, 1970. No timezone offset (UTC)')
resourceSnmpRunState = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 11), SnmpVersions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceSnmpRunState.setStatus('current')
if mibBuilder.loadTexts: resourceSnmpRunState.setDescription('An indicator of which SNMP versions are running on the device.')
resourceSnmpConfig = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 12), SnmpVersions()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceSnmpConfig.setStatus('current')
if mibBuilder.loadTexts: resourceSnmpConfig.setDescription('An indicator of which SNMP versions are configured on the device.')
resourceRemoteAuthEnabled = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 13), EnabledOrNot()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceRemoteAuthEnabled.setStatus('current')
if mibBuilder.loadTexts: resourceRemoteAuthEnabled.setDescription('An indicator of whether remote authentication is enabled on the device.')
resourceRemoteAuthTimeout = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceRemoteAuthTimeout.setStatus('current')
if mibBuilder.loadTexts: resourceRemoteAuthTimeout.setDescription('The configured remote authentication timeout value in seconds.')
resourceRemoteAuthType = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 2, 5, 15), RemoteAuthType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: resourceRemoteAuthType.setStatus('current')
if mibBuilder.loadTexts: resourceRemoteAuthType.setDescription('An indicator of which remote authentication mechanism is enabled on the device.')
tptResourceNotifyDeviceID = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 61), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 40))).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptResourceNotifyDeviceID.setStatus('current')
if mibBuilder.loadTexts: tptResourceNotifyDeviceID.setDescription('The unique identifier of the device sending this notification.')
tptResourceNotifyIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 62), ResourceIdentifier()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptResourceNotifyIdentifier.setStatus('current')
if mibBuilder.loadTexts: tptResourceNotifyIdentifier.setDescription('The type of the resource that triggered this notification.')
tptResourceNotifyFSIndex = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 63), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptResourceNotifyFSIndex.setStatus('current')
if mibBuilder.loadTexts: tptResourceNotifyFSIndex.setDescription('For a filesystem resource, the index of the filesystem (otherwise 0).')
tptResourceNotifyCurrentValue = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 64), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptResourceNotifyCurrentValue.setStatus('current')
if mibBuilder.loadTexts: tptResourceNotifyCurrentValue.setDescription('The current value of the resource that triggered this notification.')
tptResourceNotifyThresholdMaj = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 65), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptResourceNotifyThresholdMaj.setStatus('current')
if mibBuilder.loadTexts: tptResourceNotifyThresholdMaj.setDescription('The major threshold of this resource (between green and yellow states).')
tptResourceNotifyThresholdCrit = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 66), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptResourceNotifyThresholdCrit.setStatus('current')
if mibBuilder.loadTexts: tptResourceNotifyThresholdCrit.setDescription('The critical threshold of this resource (between yellow and red states).')
tptResourceNotifyRangeMin = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 67), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptResourceNotifyRangeMin.setStatus('current')
if mibBuilder.loadTexts: tptResourceNotifyRangeMin.setDescription('The minimum end of the range of values that this resource can take.')
tptResourceNotifyRangeMax = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 68), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptResourceNotifyRangeMax.setStatus('current')
if mibBuilder.loadTexts: tptResourceNotifyRangeMax.setDescription('The maximum end of the range of values that this resource can take.')
tptResourceNotifyStateBefore = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 69), ResourceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptResourceNotifyStateBefore.setStatus('current')
if mibBuilder.loadTexts: tptResourceNotifyStateBefore.setDescription('The state of this resource before the current threshold transition.')
tptResourceNotifyStateAfter = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 70), ResourceState()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptResourceNotifyStateAfter.setStatus('current')
if mibBuilder.loadTexts: tptResourceNotifyStateAfter.setDescription('The state of this resource after the current threshold transition.')
tptResourceNotifyTimeStamp = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 71), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptResourceNotifyTimeStamp.setStatus('current')
if mibBuilder.loadTexts: tptResourceNotifyTimeStamp.setDescription('The time of the threshold crossing represented by this notification (in seconds since January 1, 1970).')
tptResourceNotifySubIdentifier = MibScalar((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 1, 72), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: tptResourceNotifySubIdentifier.setStatus('current')
if mibBuilder.loadTexts: tptResourceNotifySubIdentifier.setDescription('Sub-Identifier into the type of the resource which trigger this notification. It starts with 1. It is not used in models 5100N or older (set to 0).')
tptResourceNotify = NotificationType((1, 3, 6, 1, 4, 1, 10734, 3, 3, 3, 0, 14)).setObjects(("TPT-RESOURCE-MIB", "tptResourceNotifyDeviceID"), ("TPT-RESOURCE-MIB", "tptResourceNotifyIdentifier"), ("TPT-RESOURCE-MIB", "tptResourceNotifyFSIndex"), ("TPT-RESOURCE-MIB", "tptResourceNotifyCurrentValue"), ("TPT-RESOURCE-MIB", "tptResourceNotifyThresholdMaj"), ("TPT-RESOURCE-MIB", "tptResourceNotifyThresholdCrit"), ("TPT-RESOURCE-MIB", "tptResourceNotifyRangeMin"), ("TPT-RESOURCE-MIB", "tptResourceNotifyRangeMax"), ("TPT-RESOURCE-MIB", "tptResourceNotifyStateBefore"), ("TPT-RESOURCE-MIB", "tptResourceNotifyStateAfter"), ("TPT-RESOURCE-MIB", "tptResourceNotifyTimeStamp"), ("TPT-RESOURCE-MIB", "tptResourceNotifySubIdentifier"))
if mibBuilder.loadTexts: tptResourceNotify.setStatus('current')
if mibBuilder.loadTexts: tptResourceNotify.setDescription('Notification: Used to inform the management station that a resource parameter has crossed a predefined threshold.')
mibBuilder.exportSymbols("TPT-RESOURCE-MIB", resourceFSThresholdMaj=resourceFSThresholdMaj, resourceChassisTempRangeMin=resourceChassisTempRangeMin, tptResourceNotifyStateBefore=tptResourceNotifyStateBefore, tptResourceNotifyIdentifier=tptResourceNotifyIdentifier, resourceVersion=resourceVersion, resourceLogCountObjs=resourceLogCountObjs, resourceNPCPUBusyPercentTier3A=resourceNPCPUBusyPercentTier3A, resourceMetricCongestion=resourceMetricCongestion, resourceMetricObjs=resourceMetricObjs, resourceNPCPUBusyPercentTier2C=resourceNPCPUBusyPercentTier2C, resourceHPCPUObjs=resourceHPCPUObjs, ResourceIdentifier=ResourceIdentifier, resourceLogCountInfo=resourceLogCountInfo, RemoteAuthType=RemoteAuthType, resourceHPMemoryObjs=resourceHPMemoryObjs, resourceFSThresholdCrit=resourceFSThresholdCrit, resourceMetricFastpath=resourceMetricFastpath, resourceNPCPUBusyPercentTier4B=resourceNPCPUBusyPercentTier4B, resourceNPCPUBusyPercentTier2B=resourceNPCPUBusyPercentTier2B, resourceChassisTempRangeMax=resourceChassisTempRangeMax, EnabledOrNot=EnabledOrNot, resourceFSState=resourceFSState, resourcePowerSupplyObjs=resourcePowerSupplyObjs, resourceFSTable=resourceFSTable, resourceHPMemoryRangeMin=resourceHPMemoryRangeMin, resourceChassisTempThresholdMaj=resourceChassisTempThresholdMaj, resourceChassisTempDegreesC=resourceChassisTempDegreesC, resourceSnmpConfig=resourceSnmpConfig, tptResourceNotifyTimeStamp=tptResourceNotifyTimeStamp, FilesystemState=FilesystemState, resourceHPMemoryThresholdCrit=resourceHPMemoryThresholdCrit, resourceHPMemoryInUsePercent=resourceHPMemoryInUsePercent, resourceFSEntry=resourceFSEntry, PowerSupplyState=PowerSupplyState, tptResourceNotifyCurrentValue=tptResourceNotifyCurrentValue, resourceNPCPUBusyPercentC=resourceNPCPUBusyPercentC, resourcePowerSupplyStatus=resourcePowerSupplyStatus, resourceHPCPUThresholdCrit=resourceHPCPUThresholdCrit, powerSupplyStatus=powerSupplyStatus, resourceRemoteAuthType=resourceRemoteAuthType, resourceHPMemoryThresholdMaj=resourceHPMemoryThresholdMaj, resourceHPCPUBusyPercent=resourceHPCPUBusyPercent, tptResourceNotifyDeviceID=tptResourceNotifyDeviceID, resourceFSInUseMB=resourceFSInUseMB, resourceHPMemoryRangeMax=resourceHPMemoryRangeMax, resourceDateTime=resourceDateTime, resourceFSRangeMax=resourceFSRangeMax, resourceHPCPURangeMin=resourceHPCPURangeMin, resourceFSRangeMin=resourceFSRangeMin, resourcePowerSupplyQuantity=resourcePowerSupplyQuantity, tptResourceNotifyRangeMin=tptResourceNotifyRangeMin, resourceNPCPUBusyPercentTier2A=resourceNPCPUBusyPercentTier2A, SnmpVersions=SnmpVersions, resourceFSEncryption=resourceFSEncryption, tptResourceNotifyFSIndex=tptResourceNotifyFSIndex, resourceRemoteAuthEnabled=resourceRemoteAuthEnabled, tptResourceNotifySubIdentifier=tptResourceNotifySubIdentifier, resourceFSName=resourceFSName, resourceNPCPUBusyPercentTier4C=resourceNPCPUBusyPercentTier4C, resourceChassisTempObjs=resourceChassisTempObjs, resourceNPCPUBusyPercentTier4A=resourceNPCPUBusyPercentTier4A, resourceHPCPURangeMax=resourceHPCPURangeMax, resourceMetricSmartpath=resourceMetricSmartpath, resourceNumberOfFilesystems=resourceNumberOfFilesystems, resourcePowerSupplyMonitoring=resourcePowerSupplyMonitoring, resourceLogCountWarning=resourceLogCountWarning, resourceChassisTempThresholdCrit=resourceChassisTempThresholdCrit, resourceRemoteAuthTimeout=resourceRemoteAuthTimeout, tptResourceNotifyThresholdCrit=tptResourceNotifyThresholdCrit, tptResourceNotifyRangeMax=tptResourceNotifyRangeMax, resourceLogCountCritical=resourceLogCountCritical, tptResourceNotifyThresholdMaj=tptResourceNotifyThresholdMaj, resourceNPCPUBusyPercentB=resourceNPCPUBusyPercentB, tptResourceNotify=tptResourceNotify, resourceNPCPUBusyPercentTier3C=resourceNPCPUBusyPercentTier3C, resourceSnmpRunState=resourceSnmpRunState, tptResourceNotifyStateAfter=tptResourceNotifyStateAfter, resourceNPCPUBusyPercentTier3B=resourceNPCPUBusyPercentTier3B, resourcePowerSupplyEntry=resourcePowerSupplyEntry, PYSNMP_MODULE_ID=tpt_resource, resourceNPCPUBusyPercentA=resourceNPCPUBusyPercentA, powerSupplyUnitIndex=powerSupplyUnitIndex, resourceHPMemoryTotal=resourceHPMemoryTotal, resourceHPCPUThresholdMaj=resourceHPCPUThresholdMaj, resourceLogCountError=resourceLogCountError, ResourceState=ResourceState, resourceFSIndex=resourceFSIndex, tpt_resource=tpt_resource, resourcePowerSupplyTable=resourcePowerSupplyTable)
