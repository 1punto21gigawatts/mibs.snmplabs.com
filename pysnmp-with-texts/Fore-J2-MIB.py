#
# PySNMP MIB module Fore-J2-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/Fore-J2-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:17:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueSizeConstraint, ConstraintsUnion, ValueRangeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueSizeConstraint", "ConstraintsUnion", "ValueRangeConstraint", "ConstraintsIntersection")
asx, = mibBuilder.importSymbols("Fore-Common-MIB", "asx")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, Counter32, Counter64, ObjectIdentity, IpAddress, TimeTicks, Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Integer32, ModuleIdentity, Unsigned32, MibIdentifier, iso = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Counter32", "Counter64", "ObjectIdentity", "IpAddress", "TimeTicks", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Integer32", "ModuleIdentity", "Unsigned32", "MibIdentifier", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
foreJ2 = ModuleIdentity((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6))
if mibBuilder.loadTexts: foreJ2.setLastUpdated('9911050000Z')
if mibBuilder.loadTexts: foreJ2.setOrganization('FORE')
if mibBuilder.loadTexts: foreJ2.setContactInfo(' Postal: FORE Systems Inc. 1000 FORE Drive Warrendale, PA 15086-7502 Tel: +1 724 742 6900 Email: nm_mibs@fore.com Web: http://www.fore.com')
if mibBuilder.loadTexts: foreJ2.setDescription('write something interesting here')
j2ConfGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 1))
j2StatsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2))
j2ConfTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 1, 1), )
if mibBuilder.loadTexts: j2ConfTable.setStatus('current')
if mibBuilder.loadTexts: j2ConfTable.setDescription('A table of J2 switch port configuration information.')
j2ConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 1, 1, 1), ).setIndexNames((0, "Fore-J2-MIB", "j2ConfBoard"), (0, "Fore-J2-MIB", "j2ConfModule"), (0, "Fore-J2-MIB", "j2ConfPort"))
if mibBuilder.loadTexts: j2ConfEntry.setStatus('current')
if mibBuilder.loadTexts: j2ConfEntry.setDescription('A table entry containing J2 configuration information for each port.')
j2ConfBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2ConfBoard.setStatus('current')
if mibBuilder.loadTexts: j2ConfBoard.setDescription("The index of this port's switch board.")
j2ConfModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2ConfModule.setStatus('current')
if mibBuilder.loadTexts: j2ConfModule.setDescription('The network module of this port.')
j2ConfPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2ConfPort.setStatus('current')
if mibBuilder.loadTexts: j2ConfPort.setDescription('The number of this port.')
j2LineLength = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("j2ShortLine", 1), ("j2LongLine", 2))).clone('j2ShortLine')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2LineLength.setStatus('current')
if mibBuilder.loadTexts: j2LineLength.setDescription('This variable represents the length of the physical medium connected to the J2 interface: j2ShortLine (1) means the line is a short line with less than 4db of attenuation from the transmitting source. j2LongLine (2) means the line is a long line, with greater than 4db of attenuation from the transmitting source.')
j2LoopbackConfig = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 1, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("j2NoLoop", 1), ("j2LineLoop", 2), ("j2DiagLoop", 3), ("j2OtherLoop", 4))).clone('j2NoLoop')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2LoopbackConfig.setStatus('current')
if mibBuilder.loadTexts: j2LoopbackConfig.setDescription("This variable represents the loopback configuration of the J2 interface. j2NoLoop (1) means that the interface is not in a loopback state. j2LineLoop (2) means that receive signal is looped back for retransmission without passing through the port's reframing function. j2DiagLoop (3) means that the transmit data stream is looped back to the receiver. j2OtherLoop (4) means that the interface is in a loopback that is not defined here.")
j2TxClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("rxTiming", 1), ("localTiming", 2))).clone('localTiming')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2TxClockSource.setStatus('current')
if mibBuilder.loadTexts: j2TxClockSource.setDescription('The source of the transmit clock.')
j2LineStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 1, 1, 1, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65534)).clone(1)).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2LineStatus.setStatus('current')
if mibBuilder.loadTexts: j2LineStatus.setDescription('This variable indicates the Line Status of the interface. The variable contains loopback state information and failure state information. It is a bit map represented as a sum. The j2NoAlarm should be set if and only if no other flag is set. The various bit positions are: 1 j2NoAlarm 2 j2RxLOF Receive Loss of Frame 4 j2RxLOC Receive Loss of Clock (Not used anymore) 8 j2RxAIS Receive Alarm Indication Signal 16 j2TxLOC Transmit Loss of Clock (Not used anymore) 32 j2RxRAIS Receive Remote Alarm Indication Signal 64 j2RxLOS Receive Loss of Signal 128 j2TxRAIS Transmit Yellow ( Remote Alarm Indication Signal) 256 j2Other any line status not defined here 32768 j2RxLCD Receiving LCD failure indication.')
j2IdleUnassignedCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 1, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unassigned", 1), ("idle", 2))).clone('unassigned')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: j2IdleUnassignedCells.setStatus('current')
if mibBuilder.loadTexts: j2IdleUnassignedCells.setDescription("This variable indicates the types of cells that should be sent in case there is no real data to send. According to the ATM Forum, Unassigned cells should be sent (octet 1-3 are 0's, octet 4 is 0000xxx0, where x is 'don't care'). According to the CCITT specifications, Idle cells should be sent (everything is '0' except for the CLP bit which is '1'). By default, unassigned cells are transmitted in case there is no data to send.")
j2ErrorTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 1), )
if mibBuilder.loadTexts: j2ErrorTable.setStatus('current')
if mibBuilder.loadTexts: j2ErrorTable.setDescription('A table of J2 error counters.')
j2ErrorEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 1, 1), ).setIndexNames((0, "Fore-J2-MIB", "j2ErrorBoard"), (0, "Fore-J2-MIB", "j2ErrorModule"), (0, "Fore-J2-MIB", "j2ErrorPort"))
if mibBuilder.loadTexts: j2ErrorEntry.setStatus('current')
if mibBuilder.loadTexts: j2ErrorEntry.setDescription('A table entry containing J2 error counters.')
j2ErrorBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2ErrorBoard.setStatus('current')
if mibBuilder.loadTexts: j2ErrorBoard.setDescription("The index of this port's switch board.")
j2ErrorModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2ErrorModule.setStatus('current')
if mibBuilder.loadTexts: j2ErrorModule.setDescription('The network module of this port.')
j2ErrorPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2ErrorPort.setStatus('current')
if mibBuilder.loadTexts: j2ErrorPort.setDescription('The number of this port.')
j2B8ZSCodingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 1, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2B8ZSCodingErrors.setStatus('current')
if mibBuilder.loadTexts: j2B8ZSCodingErrors.setDescription('The number of B8ZS coding violation errors.')
j2CRC5Errors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 1, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2CRC5Errors.setStatus('current')
if mibBuilder.loadTexts: j2CRC5Errors.setDescription('The number of CRC-5 received errors.')
j2FramingErrors = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 1, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2FramingErrors.setStatus('current')
if mibBuilder.loadTexts: j2FramingErrors.setDescription('The number of framing patterns received in error.')
j2RxLossOfFrame = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 1, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2RxLossOfFrame.setStatus('current')
if mibBuilder.loadTexts: j2RxLossOfFrame.setDescription('The number of seconds during which the receiver was experiencing Loss Of Frame.')
j2RxLossOfClock = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2RxLossOfClock.setStatus('current')
if mibBuilder.loadTexts: j2RxLossOfClock.setDescription('The number of seconds during which the receiver was not observing transitions on the received clock signal.')
j2RxAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2RxAIS.setStatus('current')
if mibBuilder.loadTexts: j2RxAIS.setDescription('The number of seconds during which the receiver detected an Alarm Indication Signal.')
j2TxLossOfClock = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 1, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2TxLossOfClock.setStatus('current')
if mibBuilder.loadTexts: j2TxLossOfClock.setDescription('The number of seconds during which the transmitter was experiencing Loss Of Clock.')
j2RxRemoteAIS = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 1, 1, 11), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2RxRemoteAIS.setStatus('current')
if mibBuilder.loadTexts: j2RxRemoteAIS.setDescription('The number of seconds during which the receiver observed the Alarm Indication Signal in the m-bits channel.')
j2RxLossOfSignal = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 1, 1, 12), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2RxLossOfSignal.setStatus('current')
if mibBuilder.loadTexts: j2RxLossOfSignal.setDescription('The number of seconds during which the transmitter was experien cing Loss Of Signal.')
j2AtmTable = MibTable((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 2), )
if mibBuilder.loadTexts: j2AtmTable.setStatus('current')
if mibBuilder.loadTexts: j2AtmTable.setDescription('A table of J2 ATM statistics information.')
j2AtmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 2, 1), ).setIndexNames((0, "Fore-J2-MIB", "j2AtmBoard"), (0, "Fore-J2-MIB", "j2AtmModule"), (0, "Fore-J2-MIB", "j2AtmPort"))
if mibBuilder.loadTexts: j2AtmEntry.setStatus('current')
if mibBuilder.loadTexts: j2AtmEntry.setDescription('A table entry containing J2 ATM statistics information.')
j2AtmBoard = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2AtmBoard.setStatus('current')
if mibBuilder.loadTexts: j2AtmBoard.setDescription("The index of this port's switch board.")
j2AtmModule = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2AtmModule.setStatus('current')
if mibBuilder.loadTexts: j2AtmModule.setDescription('The network module of this port.')
j2AtmPort = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2AtmPort.setStatus('current')
if mibBuilder.loadTexts: j2AtmPort.setDescription('The number of this port.')
j2AtmHCSs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2AtmHCSs.setStatus('current')
if mibBuilder.loadTexts: j2AtmHCSs.setDescription('Number of header check sequence (HCS) error events. The HCS is a CRC-8 calculation over the first 4 octets of the ATM cell header.')
j2AtmRxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2AtmRxCells.setStatus('current')
if mibBuilder.loadTexts: j2AtmRxCells.setDescription('Number of ATM cells that were received.')
j2AtmTxCells = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 2, 1, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2AtmTxCells.setStatus('current')
if mibBuilder.loadTexts: j2AtmTxCells.setDescription('Number of non-null ATM cells that were transmitted.')
j2AtmLCDs = MibTableColumn((1, 3, 6, 1, 4, 1, 326, 2, 2, 1, 1, 6, 2, 2, 1, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: j2AtmLCDs.setStatus('current')
if mibBuilder.loadTexts: j2AtmLCDs.setDescription('The number of seconds in which Loss of Cell Delineation (LCD) has occurred. An LCD defect is detected when an out of cell delination state has persisted for 4ms. An LCD defect is cleared when the sync state has been maintained for 4ms.')
mibBuilder.exportSymbols("Fore-J2-MIB", j2RxAIS=j2RxAIS, j2RxRemoteAIS=j2RxRemoteAIS, j2AtmRxCells=j2AtmRxCells, j2FramingErrors=j2FramingErrors, j2LineStatus=j2LineStatus, j2RxLossOfClock=j2RxLossOfClock, j2LineLength=j2LineLength, j2LoopbackConfig=j2LoopbackConfig, j2AtmEntry=j2AtmEntry, j2IdleUnassignedCells=j2IdleUnassignedCells, PYSNMP_MODULE_ID=foreJ2, j2ErrorPort=j2ErrorPort, j2AtmModule=j2AtmModule, j2AtmTxCells=j2AtmTxCells, j2ErrorBoard=j2ErrorBoard, j2ConfModule=j2ConfModule, j2ConfEntry=j2ConfEntry, j2AtmBoard=j2AtmBoard, j2ConfTable=j2ConfTable, foreJ2=foreJ2, j2ErrorModule=j2ErrorModule, j2ConfGroup=j2ConfGroup, j2AtmLCDs=j2AtmLCDs, j2RxLossOfFrame=j2RxLossOfFrame, j2B8ZSCodingErrors=j2B8ZSCodingErrors, j2ConfBoard=j2ConfBoard, j2ConfPort=j2ConfPort, j2AtmPort=j2AtmPort, j2TxClockSource=j2TxClockSource, j2ErrorTable=j2ErrorTable, j2StatsGroup=j2StatsGroup, j2RxLossOfSignal=j2RxLossOfSignal, j2CRC5Errors=j2CRC5Errors, j2AtmHCSs=j2AtmHCSs, j2AtmTable=j2AtmTable, j2TxLossOfClock=j2TxLossOfClock, j2ErrorEntry=j2ErrorEntry)
