#
# PySNMP MIB module PANDATEL-GMD-MODEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/PANDATEL-GMD-MODEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 14:37:23 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint")
device_id, mdmSpecifics = mibBuilder.importSymbols("PANDATEL-MODEM-MIB", "device-id", "mdmSpecifics")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
ModuleIdentity, MibIdentifier, IpAddress, Gauge32, NotificationType, Counter32, Integer32, Bits, TimeTicks, Counter64, ObjectIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, enterprises, iso = mibBuilder.importSymbols("SNMPv2-SMI", "ModuleIdentity", "MibIdentifier", "IpAddress", "Gauge32", "NotificationType", "Counter32", "Integer32", "Bits", "TimeTicks", "Counter64", "ObjectIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "enterprises", "iso")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
gmd_modem = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 10000, 2, 203)).setLabel("gmd-modem")
gmd = MibIdentifier((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203))
gmdModemTable = MibTable((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1), )
if mibBuilder.loadTexts: gmdModemTable.setStatus('mandatory')
if mibBuilder.loadTexts: gmdModemTable.setDescription('This table contains information about all GM-D modems in all racks.')
gmdTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1), ).setIndexNames((0, "PANDATEL-GMD-MODEM-MIB", "mdmRack"), (0, "PANDATEL-GMD-MODEM-MIB", "mdmModem"), (0, "PANDATEL-GMD-MODEM-MIB", "mdmPosition"))
if mibBuilder.loadTexts: gmdTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: gmdTableEntry.setDescription('The index of the table.')
mdmRack = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmRack.setStatus('mandatory')
if mibBuilder.loadTexts: mdmRack.setDescription('The index of the rack where the modem is installed.')
mdmModem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModem.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModem.setDescription('This entry displays the slot number where the corresponding modem is installed in the rack.')
mdmPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("local", 1), ("remote", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPosition.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPosition.setDescription("This entry displays the location of the corresponding modem: 'local' or 'remote'. The modem which is plugged into a managed rack is 'local', the counterpart is 'remote'.")
mdmModemName = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemName.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemName.setDescription('The verbal name of this modem.')
mdmDataEquipmentEmulation = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("other", 1), ("dte", 2), ("dce", 3), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmDataEquipmentEmulation.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDataEquipmentEmulation.setDescription("Interface mode of the unit: 'dte' or 'dce'.")
mdmModemProperty = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 99))).clone(namedValues=NamedValues(("other", 1), ("e1", 2), ("t1", 3), ("unknown", 99)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmModemProperty.setStatus('mandatory')
if mibBuilder.loadTexts: mdmModemProperty.setDescription("This entry displays the speed class of the GM-D: 'e1'.")
mdmHDSLUnit = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("ntu", 2), ("ltu", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmHDSLUnit.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHDSLUnit.setDescription("HDSL unit type: Line Termination Unit ('LTU') or Network Termination Unit ('NTU')")
mdmClockSystem = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 23), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("dual", 2), ("single", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmClockSystem.setStatus('mandatory')
if mibBuilder.loadTexts: mdmClockSystem.setDescription("The clock system of the link: 'dual' or 'single'.")
mdmClockSource = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 24), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("other", 1), ("internal", 2), ("remote", 3), ("external", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmClockSource.setStatus('mandatory')
if mibBuilder.loadTexts: mdmClockSource.setDescription("The clock source of the link: 'internal', 'external', or 'remote'.")
mdmDataRate = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 25), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1))).clone(namedValues=NamedValues(("other", 1)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmDataRate.setStatus('mandatory')
if mibBuilder.loadTexts: mdmDataRate.setDescription("The data rate at the interface in bits per seconds. The data rate at the remote counterpart changes simultaneously. A data rate of 2.048 Mbps (E1) automatically disables CRC4, sets mdmStartChannel to 'unframed' and enables time slot 16. A data rate of 1.984 Mbps (E1) automatically sets mdmStartChannel to 'channel-1' and enables time slot 16.")
mdmStartChannel = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 26), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 98, 99, 100))).clone(namedValues=NamedValues(("channel-1", 1), ("channel-2", 2), ("channel-3", 3), ("channel-4", 4), ("channel-5", 5), ("channel-6", 6), ("channel-7", 7), ("channel-8", 8), ("channel-9", 9), ("channel-10", 10), ("channel-11", 11), ("channel-12", 12), ("channel-13", 13), ("channel-14", 14), ("channel-15", 15), ("channel-16", 16), ("channel-17", 17), ("channel-18", 18), ("channel-19", 19), ("channel-20", 20), ("channel-21", 21), ("channel-22", 22), ("channel-23", 23), ("channel-24", 24), ("channel-25", 25), ("channel-26", 26), ("channel-27", 27), ("channel-28", 28), ("channel-29", 29), ("channel-30", 30), ("channel-31", 31), ("unframed", 98), ("other", 99), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmStartChannel.setStatus('mandatory')
if mibBuilder.loadTexts: mdmStartChannel.setDescription("This entry determines the start channel for framing. Start channel and data rate must match. A start channel which is too high will be ignored. The remote unit's configuration changes simultaneously.")
mdmTimeslot16 = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 40), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 100))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmTimeslot16.setStatus('mandatory')
if mibBuilder.loadTexts: mdmTimeslot16.setDescription('This entry enables or disables time slot 16. If it is disabled, it will not be used for data transmission but for framing.')
mdmCRC4Generation = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 41), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCRC4Generation.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCRC4Generation.setDescription('This entry enables or disables the generation of a CRC4 check sum.')
mdmHDSLFramer = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 62), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("other", 1), ("disable", 2), ("enable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmHDSLFramer.setStatus('mandatory')
if mibBuilder.loadTexts: mdmHDSLFramer.setDescription("This entry enables or disables HDSL framing. The remote unit's configuration changes simultaneously.")
mdmCRC6Test = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 100), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 3, 4, 100))).clone(namedValues=NamedValues(("other", 1), ("start", 3), ("stop", 4), ("not-available", 100)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: mdmCRC6Test.setStatus('mandatory')
if mibBuilder.loadTexts: mdmCRC6Test.setDescription("This entry enables the execution of a CRC6 test. Write requests with values other than 'start' or 'stop' will be rejected.")
mdmPair1CRC6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 101), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 7, 100))).clone(namedValues=NamedValues(("other", 1), ("never-started", 2), ("running", 5), ("stopped", 6), ("start-failed", 7), ("not-available", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPair1CRC6Status.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPair1CRC6Status.setDescription('This entry indicates the status of the CRC6 test at pair 1.')
mdmPair1CRC6Error = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 102), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPair1CRC6Error.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPair1CRC6Error.setDescription('This entry indicates the number of errors detected during the last 60 seconds at pair 1.')
mdmPair2CRC6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 103), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 7, 100))).clone(namedValues=NamedValues(("other", 1), ("never-started", 2), ("running", 5), ("stopped", 6), ("start-failed", 7), ("not-available", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPair2CRC6Status.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPair2CRC6Status.setDescription('This entry indicates the status of the CRC6 test at pair 2.')
mdmPair2CRC6Error = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 104), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPair2CRC6Error.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPair2CRC6Error.setDescription('This entry indicates the number of errors detected during the last 60 seconds at pair 2.')
mdmPair3CRC6Status = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 105), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 5, 6, 7, 100))).clone(namedValues=NamedValues(("other", 1), ("never-started", 2), ("running", 5), ("stopped", 6), ("start-failed", 7), ("not-available", 100)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPair3CRC6Status.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPair3CRC6Status.setDescription('This entry indicates the status of the CRC6 test at pair 3.')
mdmPair3CRC6Error = MibTableColumn((1, 3, 6, 1, 4, 1, 760, 1, 1, 2, 1, 10, 203, 1, 1, 106), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: mdmPair3CRC6Error.setStatus('mandatory')
if mibBuilder.loadTexts: mdmPair3CRC6Error.setDescription('This entry indicates the number of errors detected during the last 60 seconds at pair 3.')
mibBuilder.exportSymbols("PANDATEL-GMD-MODEM-MIB", gmd=gmd, mdmTimeslot16=mdmTimeslot16, mdmModem=mdmModem, mdmHDSLUnit=mdmHDSLUnit, mdmClockSystem=mdmClockSystem, mdmCRC6Test=mdmCRC6Test, mdmDataRate=mdmDataRate, mdmPair2CRC6Status=mdmPair2CRC6Status, mdmDataEquipmentEmulation=mdmDataEquipmentEmulation, mdmPosition=mdmPosition, mdmPair3CRC6Error=mdmPair3CRC6Error, mdmModemName=mdmModemName, mdmStartChannel=mdmStartChannel, mdmCRC4Generation=mdmCRC4Generation, mdmPair3CRC6Status=mdmPair3CRC6Status, mdmPair2CRC6Error=mdmPair2CRC6Error, gmdModemTable=gmdModemTable, gmdTableEntry=gmdTableEntry, mdmPair1CRC6Status=mdmPair1CRC6Status, gmd_modem=gmd_modem, mdmClockSource=mdmClockSource, mdmPair1CRC6Error=mdmPair1CRC6Error, mdmModemProperty=mdmModemProperty, mdmRack=mdmRack, mdmHDSLFramer=mdmHDSLFramer)
