#
# PySNMP MIB module ANS-GS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/ANS-GS-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:22:45 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
RowStatus, RowPointer, DateAndTime, mlpmpR115 = mibBuilder.importSymbols("ANS-COMMON-MIB", "RowStatus", "RowPointer", "DateAndTime", "mlpmpR115")
ansBoardSubrackIndex, ansBoardPosition, ansBoardSystemNodeIndex = mibBuilder.importSymbols("ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex", "ansBoardPosition", "ansBoardSystemNodeIndex")
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, SingleValueConstraint, ConstraintsUnion, ValueSizeConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ValueSizeConstraint", "ConstraintsIntersection")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
MibIdentifier, Bits, Integer32, ObjectIdentity, Gauge32, Counter32, iso, NotificationType, MibScalar, MibTable, MibTableRow, MibTableColumn, Counter64, Unsigned32, TimeTicks, ModuleIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "MibIdentifier", "Bits", "Integer32", "ObjectIdentity", "Gauge32", "Counter32", "iso", "NotificationType", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Counter64", "Unsigned32", "TimeTicks", "ModuleIdentity", "IpAddress")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
connections = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4))
accessUserPort = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1))
accessServicePort = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2))
accessServiceUserPort = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3))
accessInternalPort = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4))
ansAtmCreateCC = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5))
ansCeAtmCreateCC = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6))
ansCeCeCreateCC = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7))
ansCrossConnect = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8))
ansApplData = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 9))
ansAal1Pars = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 10))
ansEthPars = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 11))
ethernetPort = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 12))
pdhPort = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 13))
terminalId = MibIdentifier((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 14))
class AnsPortType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))
    namedValues = NamedValues(("atm", 1), ("ethernet", 2), ("other", 3), ("e1", 4), ("ds1", 5))

class AnsCCType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("vpc", 1), ("vcc", 2))

class AnsCCServiceClass(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("cbr1", 1), ("cbr2", 2), ("ubr", 3))

class AnsCCSourceType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("normal", 1), ("epd", 2))

class AnsCCMulti(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("ptp", 1), ("ptmp", 2))

class AnsCCAdminStatus(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2))
    namedValues = NamedValues(("unlocked", 1), ("locked", 2))

class AnsAal1ParsType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3))
    namedValues = NamedValues(("unstructured", 1), ("structured-contiguous", 2), ("structured-free", 3))

class AnsAal1ParsTcMode(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("undefined", -1), ("immediate", 1), ("deleyed", 2))

class AnsAal1ParsTcType(Integer32):
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(-1, 1, 2))
    namedValues = NamedValues(("undefined", -1), ("service-specific", 1), ("ds0ais", 2))

ansAccessUserPortTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1), )
if mibBuilder.loadTexts: ansAccessUserPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortTable.setDescription("Entries in the ansAccessUserPortTable represents the physical ATM interface towards the STU located in the NIU and will be of type 'ATM'.")
ansAccessUserPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansAccessUserPortSystemNode"), (0, "ANS-GS-MIB", "ansAccessUserPortSubrack"), (0, "ANS-GS-MIB", "ansAccessUserPortPosition"), (0, "ANS-GS-MIB", "ansAccessUserPortIndex"))
if mibBuilder.loadTexts: ansAccessUserPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortEntry.setDescription('')
ansAccessUserPortSystemNode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortSystemNode.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortSystemNode.setDescription('Reference to the system node the user port is contained within.')
ansAccessUserPortSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortSubrack.setDescription('Reference to the subrack the user port belongs to.')
ansAccessUserPortPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortPosition.setDescription('Reference to the board the user port belongs to.')
ansAccessUserPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortIndex.setDescription('Reference to the interface within the board.')
ansAccessUserPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 5), AnsPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortType.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortType.setDescription('Indicates the type of physical interface that is connected to the port.')
ansAccessUserPortMaxBwDs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortMaxBwDs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortMaxBwDs.setDescription('Maximum cell rate this port is capable of in the downstream direction.')
ansAccessUserPortMaxBwUs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortMaxBwUs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortMaxBwUs.setDescription('Maximum cell rate this port is capable of in the upstream direction.')
ansAccessUserPortAvailBwDs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortAvailBwDs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortAvailBwDs.setDescription('Available bandwidth in cells per second over the port in the downstream direction.')
ansAccessUserPortAvailBwUs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortAvailBwUs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortAvailBwUs.setDescription('Available bandwidth in cells per second over the port in the upstream direction.')
ansAccessUserPortMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortMinVpi.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortMinVpi.setDescription('The smallest VPI accepted in both directions through this user port.')
ansAccessUserPortMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortMaxVpi.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortMaxVpi.setDescription('The largest VPI accepted in both directions through this user port.')
ansAccessUserPortMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortMinVci.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortMinVci.setDescription('The smallest VCI accepted in both directions through this user port.')
ansAccessUserPortMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortMaxVci.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortMaxVci.setDescription('The largest VCI accepted in both directions through this user port.')
ansAccessUserPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 14), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAccessUserPortLabel.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortLabel.setDescription('A settable name or description of this user port.')
ansAccessUserPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortOperStatus.setDescription('')
ansAccessUserPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAccessUserPortAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortAdminStatus.setDescription('')
ansAccessUserPortUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessUserPortUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortUsageState.setDescription('')
ansAccessUserPortAtmFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 1, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nni", 1), ("uni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAccessUserPortAtmFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessUserPortAtmFormat.setDescription('')
ansAccessServicePortTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1), )
if mibBuilder.loadTexts: ansAccessServicePortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortTable.setDescription('Entries in the ansAccessServicePortTable represents a bidirectional STM1 port in the RF-shelf.')
ansAccessServicePortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansAccessServicePortSystemNode"), (0, "ANS-GS-MIB", "ansAccessServicePortSubrack"), (0, "ANS-GS-MIB", "ansAccessServicePortPosition"), (0, "ANS-GS-MIB", "ansAccessServicePortIndex"))
if mibBuilder.loadTexts: ansAccessServicePortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortEntry.setDescription('')
ansAccessServicePortSystemNode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortSystemNode.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortSystemNode.setDescription('Indicates wich system node the port is contained within.')
ansAccessServicePortSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortSubrack.setDescription('Indicates wich subrack the port is contained within.')
ansAccessServicePortPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortPosition.setDescription('Indicates the slot position within the subrack')
ansAccessServicePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortIndex.setDescription('Indicates physical port index on the board.')
ansAccessServicePortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAccessServicePortLabel.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortLabel.setDescription('Text string that may be used to name the port.')
ansAccessServicePortMaxBwDs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortMaxBwDs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortMaxBwDs.setDescription('Maximum cell rate this port is capable of in the downstream direction.')
ansAccessServicePortMaxBwUs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortMaxBwUs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortMaxBwUs.setDescription('Maximum cell rate this port is capable of in the upstream direction.')
ansAccessServicePortAvailBwDs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortAvailBwDs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortAvailBwDs.setDescription('Available bandwidth in cells per second over the port in the downstream direction.')
ansAccessServicePortAvailBwUs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortAvailBwUs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortAvailBwUs.setDescription('Available bandwidth in cells per second over the port in the upstream direction.')
ansAccessServicePortMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortMinVpi.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortMinVpi.setDescription('The smallest VPI value possible over this port in both directions.')
ansAccessServicePortMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortMaxVpi.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortMaxVpi.setDescription('The largest VPI value possible over this port in both directions.')
ansAccessServicePortMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortMinVci.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortMinVci.setDescription('The smallest VCI value possible over this port in both directions.')
ansAccessServicePortMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortMaxVci.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortMaxVci.setDescription('The largest VCI value possible over this port in both directions.')
ansAccessServicePortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortOperStatus.setDescription('')
ansAccessServicePortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAccessServicePortAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortAdminStatus.setDescription('')
ansAccessServicePortUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortUsageState.setDescription('')
ansAccessServicePortAtmFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nni", 1), ("uni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAccessServicePortAtmFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortAtmFormat.setDescription('')
ansAccessServicePortType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 2, 1, 1, 18), AnsPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServicePortType.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServicePortType.setDescription('Indicates the type of physical interface that is connected to the service port.')
ansAtmCreateCCTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1), )
if mibBuilder.loadTexts: ansAtmCreateCCTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCreateCCTable.setDescription('Entries in the ansAtmCreateCCTable represents ATM VP and VP cross-connections between access user ports and access service ports.')
ansAtmCreateCCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansAtmCCAUPSystemNode"), (0, "ANS-GS-MIB", "ansAtmCCAUPSubrack"), (0, "ANS-GS-MIB", "ansAtmCCAUPPosition"), (0, "ANS-GS-MIB", "ansAtmCCAUPIndex"), (0, "ANS-GS-MIB", "ansAtmCCAUPVPI"), (0, "ANS-GS-MIB", "ansAtmCCAUPVCI"))
if mibBuilder.loadTexts: ansAtmCreateCCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCreateCCEntry.setDescription('')
ansAtmCCAUPSystemNode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAtmCCAUPSystemNode.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCAUPSystemNode.setDescription('Reference to the system node the access user port belongs to.')
ansAtmCCAUPSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAtmCCAUPSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCAUPSubrack.setDescription('Reference to the subrack the access user port belongs to.')
ansAtmCCAUPPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAtmCCAUPPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCAUPPosition.setDescription("Reference to user port's slot position within the subrack.")
ansAtmCCAUPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAtmCCAUPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCAUPIndex.setDescription("Reference to user port's physical interface on the board.")
ansAtmCCAUPVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAtmCCAUPVPI.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCAUPVPI.setDescription('VPI value at the user port. (100001 = any) Assigned by system.')
ansAtmCCAUPVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAtmCCAUPVCI.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCAUPVCI.setDescription('VCI value at the user port. (100000 = undefined) Not applicable. (100001 = any) Assigned by system.')
ansAtmCCASPSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAtmCCASPSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCASPSubrack.setDescription('Reference to the subrack the access service port belongs to.')
ansAtmCCASPPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAtmCCASPPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCASPPosition.setDescription("Reference to access service port port's slot position within the subrack.")
ansAtmCCASPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAtmCCASPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCASPIndex.setDescription("Reference to access service port's physical interface on the board.")
ansAtmCCASPVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAtmCCASPVPI.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCASPVPI.setDescription('VPI value at the access service port. (100001 = any) Assigned by system.')
ansAtmCCASPVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAtmCCASPVCI.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCASPVCI.setDescription('VCI value at the access service port. (100000 = undefined) Not applicable. (100001 = any) Assigned by system.')
ansAtmCCType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 12), AnsCCType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAtmCCType.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCType.setDescription('Indicates if the entry is a VC or VP cross-connection.')
ansAtmCCServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 13), AnsCCServiceClass()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAtmCCServiceClass.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCServiceClass.setDescription('Indicates ATM bearer service type. cbr1: Highest priority constant bit-rate service, used for circuit emulated POTS. cbr2: Lower priority constant bit-rate service, used for video transmissions. ubr: Lowest priority service, used for datacom.')
ansAtmCCSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 14), AnsCCSourceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAtmCCSourceType.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCSourceType.setDescription('Indicates the type of service that is transported on top of the ATM layer. ')
ansAtmCCServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(2, 3))).clone(namedValues=NamedValues(("atm", 2), ("ethernet", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAtmCCServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCServiceType.setDescription('Indicates the type of connection ATM or ETHERNET.')
ansAtmCCPcrAtoB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAtmCCPcrAtoB.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCPcrAtoB.setDescription('Bandwidth in cells per second for the cross-connection in the downstream direction. UBR connections may be given any positive cell rate. The -1 indicates the unspecified value.')
ansAtmCCPcrBtoA = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 17), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAtmCCPcrBtoA.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCPcrBtoA.setDescription('Bandwidth in cells per second for the cross-connection in the upstream direction. UBR connections may be given any positive cell rate. The -1 indicates the unspecified value.')
ansAtmCCMulti = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 18), AnsCCMulti()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAtmCCMulti.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCMulti.setDescription('Indicates if the cross- connection is part of a point-to-point or a point-to-multi point connection.')
ansAtmCCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 19), AnsCCAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAtmCCAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCAdminStatus.setDescription('Indicetes the administrative state of the cross-connection.')
ansAtmCCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 5, 1, 1, 20), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAtmCCRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansAtmCCRowStatus.setDescription("Used to create cross-connect. To create a cross-connect ansCCRowStatus must be set to 'createAndGo'.")
ansCeAtmCreateCCTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1), )
if mibBuilder.loadTexts: ansCeAtmCreateCCTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCreateCCTable.setDescription('Entries in the ansCeAtmCreateCCTable represents ATM VP and VP cross-connections between access user ports and access service ports.')
ansCeAtmCreateCCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansCeAtmCCAUPSystemNode"), (0, "ANS-GS-MIB", "ansCeAtmCCAUPSubrack"), (0, "ANS-GS-MIB", "ansCeAtmCCAUPPosition"), (0, "ANS-GS-MIB", "ansCeAtmCCAUPIndex"), (0, "ANS-GS-MIB", "ansCeAtmCCAUPVPI"), (0, "ANS-GS-MIB", "ansCeAtmCCAUPVCI"))
if mibBuilder.loadTexts: ansCeAtmCreateCCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCreateCCEntry.setDescription('')
ansCeAtmCCAUPSystemNode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCeAtmCCAUPSystemNode.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCAUPSystemNode.setDescription('Reference to the system node the access user port belongs to.')
ansCeAtmCCAUPSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCeAtmCCAUPSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCAUPSubrack.setDescription('Reference to the subrack the access user port belongs to.')
ansCeAtmCCAUPPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCeAtmCCAUPPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCAUPPosition.setDescription("Reference to user port's slot position within the subrack.")
ansCeAtmCCAUPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCeAtmCCAUPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCAUPIndex.setDescription("Reference to user port's physical interface on the board.")
ansCeAtmCCAUPVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCeAtmCCAUPVPI.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCAUPVPI.setDescription('VPI value at the user port. (100001 = any) Assigned by system.')
ansCeAtmCCAUPVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCeAtmCCAUPVCI.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCAUPVCI.setDescription('VCI value at the user port. (100000 = undefined) Not applicable. (100001 = any) Assigned by system.')
ansCeAtmCCASPSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCASPSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCASPSubrack.setDescription('Reference to the subrack the access service port belongs to.')
ansCeAtmCCASPPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCASPPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCASPPosition.setDescription("Reference to access service port port's slot position within the subrack.")
ansCeAtmCCASPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCASPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCASPIndex.setDescription("Reference to access service port's physical interface on the board.")
ansCeAtmCCASPVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCASPVPI.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCASPVPI.setDescription('VPI value at the access service port. (100001 = any) Assigned by system.')
ansCeAtmCCASPVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCASPVCI.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCASPVCI.setDescription('VCI value at the access service port. (100000 = undefined) Not applicable. (100001 = any) Assigned by system.')
ansCeAtmCCType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 12), AnsCCType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCType.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCType.setDescription('Indicates if the entry is a VC or VP cross-connection.')
ansCeAtmCCServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 13), AnsCCServiceClass()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCServiceClass.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCServiceClass.setDescription('Indicates ATM bearer service type. cbr1: Highest priority constant bit-rate service, used for circuit emulated POTS. cbr2: Lower priority constant bit-rate service, used for video transmissions. ubr: Lowest priority service, used for datacom.')
ansCeAtmCCSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 14), AnsCCSourceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCSourceType.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCSourceType.setDescription('Indicates the type of service that is transported on top of the ATM layer. ')
ansCeAtmCCPcrAtoB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCPcrAtoB.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCPcrAtoB.setDescription('Bandwidth in cells per second for the cross-connection in the downstream direction. UBR connections may be given any positive cell rate. The -1 indicetes the unspecified value.')
ansCeAtmCCPcrBtoA = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCPcrBtoA.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCPcrBtoA.setDescription('Bandwidth in cells per second for the cross-connection in the upstream direction. UBR connections may be given any positive cell rate. The -1 indicates the unspecified value.')
ansCeAtmCCMulti = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 17), AnsCCMulti()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCMulti.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCMulti.setDescription('Indicates if the cross- connection is part of a point-to-point or a point-to-multi point connection.')
ansCeAtmCCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 18), AnsCCAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCAdminStatus.setDescription('Indicetes the administrative state of the cross-connection.')
ansCeAtmCCTimeSlotPa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCTimeSlotPa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCTimeSlotPa.setDescription('The TS list must have the format: [int1,int2,...]. not_used (unstructured)')
ansCeAtmCCTypePa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 20), AnsAal1ParsType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCTypePa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCTypePa.setDescription('')
ansCeAtmCCFillLevelPa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCFillLevelPa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCFillLevelPa.setDescription('')
ansCeAtmCCCdvtPa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCCdvtPa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCCdvtPa.setDescription('')
ansCeAtmCCMaxBuffSizePa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCMaxBuffSizePa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCMaxBuffSizePa.setDescription('(-1) undefined')
ansCeAtmCCTcModePa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 24), AnsAal1ParsTcMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCTcModePa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCTcModePa.setDescription('')
ansCeAtmCCTcTypePa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 25), AnsAal1ParsTcType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCTcTypePa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCTcTypePa.setDescription('')
ansCeAtmCCTcBtoAPa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCTcBtoAPa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCTcBtoAPa.setDescription('(-1) undefined')
ansCeAtmCCTcAtoBPa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCTcAtoBPa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCTcAtoBPa.setDescription('(-1) undefined')
ansCeAtmCCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 6, 1, 1, 28), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeAtmCCRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeAtmCCRowStatus.setDescription("Used to create cross-connect. To create a cross-connect ansCCRowStatus must be set to 'createAndGo'.")
ansCeCeCreateCCTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1), )
if mibBuilder.loadTexts: ansCeCeCreateCCTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCreateCCTable.setDescription('Entries in the ansCeCeCreateCCTable represents ATM VP and VP cross-connections between access user ports and access service ports.')
ansCeCeCreateCCEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansCeCeCCAUPSystemNode"), (0, "ANS-GS-MIB", "ansCeCeCCAUPSubrack"), (0, "ANS-GS-MIB", "ansCeCeCCAUPPosition"), (0, "ANS-GS-MIB", "ansCeCeCCAUPIndex"), (0, "ANS-GS-MIB", "ansCeCeCCAUPVPI"), (0, "ANS-GS-MIB", "ansCeCeCCAUPVCI"))
if mibBuilder.loadTexts: ansCeCeCreateCCEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCreateCCEntry.setDescription('')
ansCeCeCCAUPSystemNode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCeCeCCAUPSystemNode.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCAUPSystemNode.setDescription('Reference to the system node the access user port belongs to.')
ansCeCeCCAUPSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCeCeCCAUPSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCAUPSubrack.setDescription('Reference to the subrack the access user port belongs to.')
ansCeCeCCAUPPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCeCeCCAUPPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCAUPPosition.setDescription("Reference to user port's slot position within the subrack.")
ansCeCeCCAUPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCeCeCCAUPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCAUPIndex.setDescription("Reference to user port's physical interface on the board.")
ansCeCeCCAUPVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCeCeCCAUPVPI.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCAUPVPI.setDescription('VPI value at the user port. (100001 = any) Assigned by system.')
ansCeCeCCAUPVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCeCeCCAUPVCI.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCAUPVCI.setDescription('VCI value at the user port. (100000 = undefined) Not applicable. (100001 = any) Assigned by system.')
ansCeCeCCASPSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCASPSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCASPSubrack.setDescription('Reference to the subrack the access service port belongs to.')
ansCeCeCCASPPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCASPPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCASPPosition.setDescription("Reference to access service port port's slot position within the subrack.")
ansCeCeCCASPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCASPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCASPIndex.setDescription("Reference to access service port's physical interface on the board.")
ansCeCeCCASPVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCASPVPI.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCASPVPI.setDescription('VPI value at the access service port. (100001 = any) Assigned by system.')
ansCeCeCCASPVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCASPVCI.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCASPVCI.setDescription('VCI value at the access service port. (100000 = undefined) Not applicable. (100001 = any) Assigned by system.')
ansCeCeCCType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 12), AnsCCType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCType.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCType.setDescription('Indicates if the entry is a VC or VP cross-connection.')
ansCeCeCCServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 13), AnsCCServiceClass()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCServiceClass.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCServiceClass.setDescription('Indicates ATM bearer service type. cbr1: Highest priority constant bit-rate service, used for circuit emulated POTS. cbr2: Lower priority constant bit-rate service, used for video transmissions. ubr: Lowest priority service, used for datacom.')
ansCeCeCCSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 14), AnsCCSourceType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCSourceType.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCSourceType.setDescription('Indicates the type of service that is transported on top of the ATM layer. ')
ansCeCeCCPcrAtoB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCPcrAtoB.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCPcrAtoB.setDescription('Bandwidth in cells per second for the cross-connection in the downstream direction. UBR connections may be given any positive cell rate. The -1 indicetes the unspecified value.')
ansCeCeCCPcrBtoA = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCPcrBtoA.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCPcrBtoA.setDescription('Bandwidth in cells per second for the cross-connection in the upstream direction. UBR connections may be given any positive cell rate. The -1 indicates the unspecified value.')
ansCeCeCCMulti = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 17), AnsCCMulti()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCMulti.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCMulti.setDescription('Indicates if the cross- connection is part of a point-to-point or a point-to-multi point connection.')
ansCeCeCCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 18), AnsCCAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCAdminStatus.setDescription('')
ansCeCeCCTimeSlotPa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 19), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCTimeSlotPa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCTimeSlotPa.setDescription('The TS list must have the format: [int1,int2,...]. not_used (unstructured)')
ansCeCeCCTypePa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 20), AnsAal1ParsType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCTypePa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCTypePa.setDescription('')
ansCeCeCCFillLevelPa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 21), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCFillLevelPa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCFillLevelPa.setDescription('')
ansCeCeCCCdvtPa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 22), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCCdvtPa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCCdvtPa.setDescription('')
ansCeCeCCMaxBuffSizePa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 23), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCMaxBuffSizePa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCMaxBuffSizePa.setDescription('(-1) undefined')
ansCeCeCCTcModePa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 24), AnsAal1ParsTcMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCTcModePa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCTcModePa.setDescription('')
ansCeCeCCTcTypePa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 25), AnsAal1ParsTcType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCTcTypePa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCTcTypePa.setDescription('')
ansCeCeCCTcBtoAPa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 26), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCTcBtoAPa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCTcBtoAPa.setDescription('(-1) undefined')
ansCeCeCCTcAtoBPa = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 27), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCTcAtoBPa.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCTcAtoBPa.setDescription('(-1) undefined')
ansCeCeCCTimeSlotPb = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 28), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCTimeSlotPb.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCTimeSlotPb.setDescription('The TS list must have the format: [int1,int2,...]. not_used (unstructured)')
ansCeCeCCTypePb = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 29), AnsAal1ParsType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCTypePb.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCTypePb.setDescription('')
ansCeCeCCFillLevelPb = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 30), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCFillLevelPb.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCFillLevelPb.setDescription('')
ansCeCeCCCdvtPb = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 31), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCCdvtPb.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCCdvtPb.setDescription('')
ansCeCeCCMaxBuffSizePb = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 32), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCMaxBuffSizePb.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCMaxBuffSizePb.setDescription('(-1) undefined')
ansCeCeCCTcModePb = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 33), AnsAal1ParsTcMode()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCTcModePb.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCTcModePb.setDescription('')
ansCeCeCCTcTypePb = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 34), AnsAal1ParsTcType()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCTcTypePb.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCTcTypePb.setDescription('')
ansCeCeCCTcBtoAPb = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 35), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCTcBtoAPb.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCTcBtoAPb.setDescription('(-1) undefined')
ansCeCeCCTcAtoBPb = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 36), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCTcAtoBPb.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCTcAtoBPb.setDescription('(-1) undefined')
ansCeCeCCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 7, 1, 1, 37), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCeCeCCRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansCeCeCCRowStatus.setDescription("Used to create cross-connect. To create a cross-connect ansCCRowStatus must be set to 'createAndGo'.")
ansCrossConnectTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1), )
if mibBuilder.loadTexts: ansCrossConnectTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansCrossConnectTable.setDescription('Entries in the ansCrossConnectTable represents ATM VP and VP cross-connections between access user ports and access service ports.')
ansCrossConnectEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansCCAUPSystemNode"), (0, "ANS-GS-MIB", "ansCCAUPSubrack"), (0, "ANS-GS-MIB", "ansCCAUPPosition"), (0, "ANS-GS-MIB", "ansCCAUPIndex"), (0, "ANS-GS-MIB", "ansCCAUPVPI"), (0, "ANS-GS-MIB", "ansCCAUPVCI"))
if mibBuilder.loadTexts: ansCrossConnectEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansCrossConnectEntry.setDescription('')
ansCCAUPSystemNode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: ansCCAUPSystemNode.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCAUPSystemNode.setDescription('Reference to the system node the access user port belongs to.')
ansCCAUPSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 2), Integer32())
if mibBuilder.loadTexts: ansCCAUPSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCAUPSubrack.setDescription('Reference to the subrack the access user port belongs to.')
ansCCAUPPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 3), Integer32())
if mibBuilder.loadTexts: ansCCAUPPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCAUPPosition.setDescription("Reference to user port's slot position within the subrack.")
ansCCAUPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 4), Integer32())
if mibBuilder.loadTexts: ansCCAUPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCAUPIndex.setDescription("Reference to user port's physical interface on the board.")
ansCCAUPVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 5), Integer32())
if mibBuilder.loadTexts: ansCCAUPVPI.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCAUPVPI.setDescription('VPI value at the user port.')
ansCCAUPVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 6), Integer32())
if mibBuilder.loadTexts: ansCCAUPVCI.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCAUPVCI.setDescription('VCI value at the user port. (100000 = undefined) Not applicable.')
ansCCASPSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCCASPSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCASPSubrack.setDescription('Reference to the subrack the access service port belongs to.')
ansCCASPPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCCASPPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCASPPosition.setDescription("Reference to access service port port's slot position within the subrack.")
ansCCASPIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCCASPIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCASPIndex.setDescription("Reference to access service port's physical interface on the board.")
ansCCASPVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCCASPVPI.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCASPVPI.setDescription('VPI value at the access service port.')
ansCCASPVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCCASPVCI.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCASPVCI.setDescription('VCI value at the access service port. (100000 = undefined) Not applicable.')
ansCCType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 12), AnsCCType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCCType.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCType.setDescription('Indicates if the entry is a VC or VP cross-connection.')
ansCCServiceClass = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 13), AnsCCServiceClass()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCCServiceClass.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCServiceClass.setDescription('Indicates ATM bearer service type. cbr1: Highest priority constant bit-rate service, used for circuit emulated POTS. cbr2: Lower priority constant bit-rate service, used for video transmissions. ubr: Lowest priority service, used for datacom.')
ansCCPcrAtoB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 14), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCCPcrAtoB.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCPcrAtoB.setDescription('Bandwidth in cells per second for the cross-connection in the downstream direction. UBR connections may be given any positive cell rate. The -1 indicates unspecified value.')
ansCCPcrBtoA = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCCPcrBtoA.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCPcrBtoA.setDescription('Bandwidth in cells per second for the cross-connection in the upstream direction. UBR connections may be given any positive cell rate. The -1 indicates unspecified value.')
ansCCSourceType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 16), AnsCCSourceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCCSourceType.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCSourceType.setDescription('Indicates the type of service that is transported on top of the ATM layer. ')
ansCCServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("ce", 1), ("atm", 2), ("ethernet", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCCServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCServiceType.setDescription('Indicates the type of connection CE, ATM or ETHERNET.')
ansCCOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 18), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCCOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCOperStatus.setDescription('')
ansCCLastOperStatusChange = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 19), DateAndTime()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCCLastOperStatusChange.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCLastOperStatusChange.setDescription('The time this VP cross-connect entered its current operational state.')
ansCCAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 20), AnsCCAdminStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCCAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCAdminStatus.setDescription('')
ansCCMulti = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 21), AnsCCMulti()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansCCMulti.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCMulti.setDescription('Indicates if the cross- connection is part of a point-to-point or a point-to-multi point connection.')
ansCCRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 8, 1, 1, 22), RowStatus()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansCCRowStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansCCRowStatus.setDescription("Used to delete cross-connect. A cross-connection is removed by seting the attribute to 'destroy'.")
ansApplDataTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 9, 1), )
if mibBuilder.loadTexts: ansApplDataTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansApplDataTable.setDescription('')
ansApplDataEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 9, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansApplDataSystemNode"), (0, "ANS-GS-MIB", "ansApplDataSubrack"), (0, "ANS-GS-MIB", "ansApplDataPosition"), (0, "ANS-GS-MIB", "ansApplDataIndex"), (0, "ANS-GS-MIB", "ansApplDataVPI"), (0, "ANS-GS-MIB", "ansApplDataVCI"))
if mibBuilder.loadTexts: ansApplDataEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansApplDataEntry.setDescription('')
ansApplDataSystemNode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansApplDataSystemNode.setStatus('mandatory')
if mibBuilder.loadTexts: ansApplDataSystemNode.setDescription('Reference to the system node the access user port belongs to.')
ansApplDataSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansApplDataSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: ansApplDataSubrack.setDescription('Reference to the subrack the access user port belongs to.')
ansApplDataPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansApplDataPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansApplDataPosition.setDescription("Reference to user port's slot position within the subrack.")
ansApplDataIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansApplDataIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansApplDataIndex.setDescription("Reference to user port's physical interface on the board.")
ansApplDataVPI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 9, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansApplDataVPI.setStatus('mandatory')
if mibBuilder.loadTexts: ansApplDataVPI.setDescription('VPI value at the user port.')
ansApplDataVCI = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 9, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansApplDataVCI.setStatus('mandatory')
if mibBuilder.loadTexts: ansApplDataVCI.setDescription('VCI value at the user port.')
ansApplDataOpState = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 9, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("disabled", 1), ("enabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansApplDataOpState.setStatus('mandatory')
if mibBuilder.loadTexts: ansApplDataOpState.setDescription('')
ansApplDataAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 9, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("locked", 1), ("unlocked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansApplDataAdminState.setStatus('mandatory')
if mibBuilder.loadTexts: ansApplDataAdminState.setDescription('')
ansApplDataServiceParams = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 9, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("undefined", -1), ("aal1", 1), ("ethernet", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansApplDataServiceParams.setStatus('mandatory')
if mibBuilder.loadTexts: ansApplDataServiceParams.setDescription('')
ansAal1ParsTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 10, 1), )
if mibBuilder.loadTexts: ansAal1ParsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansAal1ParsTable.setDescription('')
ansAal1ParsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 10, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansApplDataSystemNode"), (0, "ANS-GS-MIB", "ansApplDataSubrack"), (0, "ANS-GS-MIB", "ansApplDataPosition"), (0, "ANS-GS-MIB", "ansApplDataIndex"), (0, "ANS-GS-MIB", "ansApplDataVPI"), (0, "ANS-GS-MIB", "ansApplDataVCI"))
if mibBuilder.loadTexts: ansAal1ParsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansAal1ParsEntry.setDescription('')
ansAal1ParsTimeSlot = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 10, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAal1ParsTimeSlot.setStatus('mandatory')
if mibBuilder.loadTexts: ansAal1ParsTimeSlot.setDescription('The TS list has the format: [int1,int2,...]. not_used (unstructured)')
ansAal1ParsType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 10, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("undefined", -1), ("unstructured", 1), ("structured-contiguous", 2), ("structured-free", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAal1ParsType.setStatus('mandatory')
if mibBuilder.loadTexts: ansAal1ParsType.setDescription('')
ansAal1ParsFillLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 10, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAal1ParsFillLevel.setStatus('mandatory')
if mibBuilder.loadTexts: ansAal1ParsFillLevel.setDescription('(-1) undefined')
ansAal1ParsCdvt = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 10, 1, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAal1ParsCdvt.setStatus('mandatory')
if mibBuilder.loadTexts: ansAal1ParsCdvt.setDescription('(-1) undefined')
ansAal1ParsMaxBuffSize = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 10, 1, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAal1ParsMaxBuffSize.setStatus('mandatory')
if mibBuilder.loadTexts: ansAal1ParsMaxBuffSize.setDescription('(-1) undefined')
ansAal1ParsTcMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 10, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("undefined", -1), ("immediate", 1), ("deleyed", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAal1ParsTcMode.setStatus('mandatory')
if mibBuilder.loadTexts: ansAal1ParsTcMode.setDescription('')
ansAal1ParsTcType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 10, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("undefined", -1), ("service-specific", 1), ("ds0ais", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAal1ParsTcType.setStatus('mandatory')
if mibBuilder.loadTexts: ansAal1ParsTcType.setDescription('')
ansAal1ParsTcBtoA = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 10, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAal1ParsTcBtoA.setStatus('mandatory')
if mibBuilder.loadTexts: ansAal1ParsTcBtoA.setDescription('(-1) undefined')
ansAal1ParsTcAtoB = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAal1ParsTcAtoB.setStatus('mandatory')
if mibBuilder.loadTexts: ansAal1ParsTcAtoB.setDescription('(-1) undefined')
ansEthParsTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 11, 1), )
if mibBuilder.loadTexts: ansEthParsTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansEthParsTable.setDescription('')
ansEthParsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 11, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansApplDataSystemNode"), (0, "ANS-GS-MIB", "ansApplDataSubrack"), (0, "ANS-GS-MIB", "ansApplDataPosition"), (0, "ANS-GS-MIB", "ansApplDataIndex"), (0, "ANS-GS-MIB", "ansApplDataVPI"), (0, "ANS-GS-MIB", "ansApplDataVCI"))
if mibBuilder.loadTexts: ansEthParsEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansEthParsEntry.setDescription('')
ansEthParsPcrShaping = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 11, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansEthParsPcrShaping.setStatus('mandatory')
if mibBuilder.loadTexts: ansEthParsPcrShaping.setDescription('(-1) unspecified.')
ethernetPortTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 12, 1), )
if mibBuilder.loadTexts: ethernetPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetPortTable.setDescription('Entries in the ethernetPortTable represents extension records of the ethernet ports in the ansAccessUserPortTable.')
ethernetPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 12, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansAccessUserPortSystemNode"), (0, "ANS-GS-MIB", "ansAccessUserPortSubrack"), (0, "ANS-GS-MIB", "ansAccessUserPortPosition"), (0, "ANS-GS-MIB", "ansAccessUserPortIndex"))
if mibBuilder.loadTexts: ethernetPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetPortEntry.setDescription('')
ethernetPortFcsEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPortFcsEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetPortFcsEncapsulation.setDescription('Turn the sending off FCS checksum on or off.')
ethernetPortMuxOrEncapsulation = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 12, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("vcBasedMultiplexing", 1), ("llcEncapsulation", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPortMuxOrEncapsulation.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetPortMuxOrEncapsulation.setDescription('Reference to transfer of ethernet frames.')
ethernetPortIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 12, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetPortIpAddress.setDescription('IP adress of the NT when attribute ethernetPortMuxOrEncapsulation is set to pppVc or pppLlc')
ethernetPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 12, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("base10", 1), ("base100", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ethernetPortType.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetPortType.setDescription('Ethernet Type')
ethernetPortOperatingMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 12, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("base10", 1), ("base100", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ethernetPortOperatingMode.setStatus('mandatory')
if mibBuilder.loadTexts: ethernetPortOperatingMode.setDescription('Ethernet Type')
ansAccessServiceUserPortTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1), )
if mibBuilder.loadTexts: ansAccessServiceUserPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortTable.setDescription('Entries in the ansAccessServiceUserPortTable represents a bidirectional STM1 port in the RF-shelf.')
ansAccessServiceUserPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansAccessServiceUserPortSystemNode"), (0, "ANS-GS-MIB", "ansAccessServiceUserPortSubrack"), (0, "ANS-GS-MIB", "ansAccessServiceUserPortPosition"), (0, "ANS-GS-MIB", "ansAccessServiceUserPortIndex"))
if mibBuilder.loadTexts: ansAccessServiceUserPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortEntry.setDescription('')
ansAccessServiceUserPortSystemNode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortSystemNode.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortSystemNode.setDescription('Indicates wich system node the port is contained within.')
ansAccessServiceUserPortSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortSubrack.setDescription('Indicates wich subrack the port is contained within.')
ansAccessServiceUserPortPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortPosition.setDescription('Indicates the slot position within the subrack')
ansAccessServiceUserPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortIndex.setDescription('Indicates physical port index on the board.')
ansAccessServiceUserPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAccessServiceUserPortLabel.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortLabel.setDescription('Text string that may be used to name the port.')
ansAccessServiceUserPortMaxBwDs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortMaxBwDs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortMaxBwDs.setDescription('Maximum cell rate this port is capable of in the downstream direction.')
ansAccessServiceUserPortMaxBwUs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortMaxBwUs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortMaxBwUs.setDescription('Maximum cell rate this port is capable of in the upstream direction.')
ansAccessServiceUserPortAvailBwDs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortAvailBwDs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortAvailBwDs.setDescription('Available bandwidth in cells per second over the port in the downstream direction.')
ansAccessServiceUserPortAvailBwUs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortAvailBwUs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortAvailBwUs.setDescription('Available bandwidth in cells per second over the port in the upstream direction.')
ansAccessServiceUserPortMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortMinVpi.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortMinVpi.setDescription('The smallest VPI value possible over this port in both directions.')
ansAccessServiceUserPortMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortMaxVpi.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortMaxVpi.setDescription('The largest VPI value possible over this port in both directions.')
ansAccessServiceUserPortMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortMinVci.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortMinVci.setDescription('The smallest VCI value possible over this port in both directions.')
ansAccessServiceUserPortMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortMaxVci.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortMaxVci.setDescription('The largest VCI value possible over this port in both directions.')
ansAccessServiceUserPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortOperStatus.setDescription('')
ansAccessServiceUserPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAccessServiceUserPortAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortAdminStatus.setDescription('')
ansAccessServiceUserPortUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortUsageState.setDescription('')
ansAccessServiceUserPortAtmFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nni", 1), ("uni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAccessServiceUserPortAtmFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortAtmFormat.setDescription('')
ansAccessServiceUserPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 3, 1, 1, 18), AnsPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessServiceUserPortType.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessServiceUserPortType.setDescription('Indicates the type of physical interface that is connected to the service-user port.')
ansAccessInternalPortTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1), )
if mibBuilder.loadTexts: ansAccessInternalPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortTable.setDescription('Entries in the ansAccessInternalPortTable represents a bidirectional STM1 port')
ansAccessInternalPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansAccessInternalPortSystemNode"), (0, "ANS-GS-MIB", "ansAccessInternalPortSubrack"), (0, "ANS-GS-MIB", "ansAccessInternalPortPosition"), (0, "ANS-GS-MIB", "ansAccessInternalPortIndex"))
if mibBuilder.loadTexts: ansAccessInternalPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortEntry.setDescription('')
ansAccessInternalPortSystemNode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortSystemNode.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortSystemNode.setDescription('Indicates wich system node the port is contained within.')
ansAccessInternalPortSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortSubrack.setDescription('Indicates wich subrack the port is contained within.')
ansAccessInternalPortPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortPosition.setDescription('Indicates the slot position within the subrack')
ansAccessInternalPortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortIndex.setDescription('Indicates physical port index on the board.')
ansAccessInternalPortLabel = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAccessInternalPortLabel.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortLabel.setDescription('Text string that may be used to name the port.')
ansAccessInternalPortMaxBwDs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortMaxBwDs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortMaxBwDs.setDescription('Maximum cell rate this port is capable of in the downstream direction.')
ansAccessInternalPortMaxBwUs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortMaxBwUs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortMaxBwUs.setDescription('Maximum cell rate this port is capable of in the upstream direction.')
ansAccessInternalPortAvailBwDs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortAvailBwDs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortAvailBwDs.setDescription('Available bandwidth in cells per second over the port in the downstream direction.')
ansAccessInternalPortAvailBwUs = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortAvailBwUs.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortAvailBwUs.setDescription('Available bandwidth in cells per second over the port in the upstream direction.')
ansAccessInternalPortMinVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortMinVpi.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortMinVpi.setDescription('The smallest VPI value possible over this port in both directions.')
ansAccessInternalPortMaxVpi = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortMaxVpi.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortMaxVpi.setDescription('The largest VPI value possible over this port in both directions.')
ansAccessInternalPortMinVci = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortMinVci.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortMinVci.setDescription('The smallest VCI value possible over this port in both directions.')
ansAccessInternalPortMaxVci = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortMaxVci.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortMaxVci.setDescription('The largest VCI value possible over this port in both directions.')
ansAccessInternalPortOperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortOperStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortOperStatus.setDescription('')
ansAccessInternalPortAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("unlocked", 1), ("locked", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAccessInternalPortAdminStatus.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortAdminStatus.setDescription('')
ansAccessInternalPortUsageState = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("idle", 1), ("active", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortUsageState.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortUsageState.setDescription('')
ansAccessInternalPortAtmFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 17), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("nni", 1), ("uni", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ansAccessInternalPortAtmFormat.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortAtmFormat.setDescription('')
ansAccessInternalPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 4, 1, 1, 18), AnsPortType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansAccessInternalPortType.setStatus('mandatory')
if mibBuilder.loadTexts: ansAccessInternalPortType.setDescription('Indicates the type of physical interface that is connected to the internal port.')
pdhPortTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 13, 1), )
if mibBuilder.loadTexts: pdhPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPortTable.setDescription('PDH Port Table')
pdhPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 13, 1, 1), ).setIndexNames((0, "ANS-EQUIPMENT-MIB", "ansBoardSystemNodeIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardSubrackIndex"), (0, "ANS-EQUIPMENT-MIB", "ansBoardPosition"), (0, "ANS-GS-MIB", "pdhPortPort"))
if mibBuilder.loadTexts: pdhPortEntry.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPortEntry.setDescription('This entity represents a PDH port for circuit emulation.')
pdhPortPort = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 13, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPortPort.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPortPort.setDescription('Port at AT and CE board')
pdhPortTsUsed = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 13, 1, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pdhPortTsUsed.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPortTsUsed.setDescription('Timeslot used')
pdhPortClockMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 13, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("synchronous", 1), ("asynchronous", 2), ("looped-asynchronous", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPortClockMode.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPortClockMode.setDescription('...')
pdhPortHaulMode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 13, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("short", 1), ("long", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPortHaulMode.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPortHaulMode.setDescription('...')
pdhPortLineCode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 13, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("hdb3", 1), ("ami", 2), ("b8zs", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPortLineCode.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPortLineCode.setDescription('hdb3 valid for ansAccessUser/ServicePortType = e1 ami valid for ansAccessUser/ServicePortType = ds1 b8zs valid for ansAccessUser/ServicePortType = ds1')
pdhPortLoopback = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 13, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("off", -1), ("internal", 1), ("external", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPortLoopback.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPortLoopback.setDescription('...')
pdhPortCas = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 13, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2))).clone(namedValues=NamedValues(("not-used", -1), ("cas", 1), ("basic", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPortCas.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPortCas.setDescription('...')
pdhPortFrameFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 13, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(-1, 1, 2, 3))).clone(namedValues=NamedValues(("not-used", -1), ("sf", 1), ("esf", 2), ("e1-crc", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPortFrameFormat.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPortFrameFormat.setDescription('...')
pdhPortServiceType = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 13, 1, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("structured", 1), ("unstructured", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pdhPortServiceType.setStatus('mandatory')
if mibBuilder.loadTexts: pdhPortServiceType.setDescription('...')
ansTerminalIdTable = MibTable((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 14, 1), )
if mibBuilder.loadTexts: ansTerminalIdTable.setStatus('mandatory')
if mibBuilder.loadTexts: ansTerminalIdTable.setDescription('Entries in the ansTerminalIdTable represent the system node, subrack and position of ATs; These pieces of information can be used as an index into terminal specific tables to obtain complete information')
ansTerminalIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 14, 1, 1), ).setIndexNames((0, "ANS-GS-MIB", "ansTerminalIdIdent"))
if mibBuilder.loadTexts: ansTerminalIdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ansTerminalIdEntry.setDescription('')
ansTerminalIdIdent = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 14, 1, 1, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(20, 20)).setFixedLength(20)).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTerminalIdIdent.setStatus('mandatory')
if mibBuilder.loadTexts: ansTerminalIdIdent.setDescription('An index that uniquely identifies an AT')
ansTerminalIdSystemNode = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 14, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTerminalIdSystemNode.setStatus('mandatory')
if mibBuilder.loadTexts: ansTerminalIdSystemNode.setDescription('Reference to the system node the AT belongs to')
ansTerminalIdSubrack = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 14, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTerminalIdSubrack.setStatus('mandatory')
if mibBuilder.loadTexts: ansTerminalIdSubrack.setDescription('Reference to the subrack the AT belongs to')
ansTerminalIdPosition = MibTableColumn((1, 3, 6, 1, 4, 1, 193, 96, 115, 4, 14, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ansTerminalIdPosition.setStatus('mandatory')
if mibBuilder.loadTexts: ansTerminalIdPosition.setDescription('Reference to the slot the AT belongs to')
mibBuilder.exportSymbols("ANS-GS-MIB", ansAtmCCMulti=ansAtmCCMulti, ansCeCeCCASPIndex=ansCeCeCCASPIndex, AnsCCAdminStatus=AnsCCAdminStatus, pdhPortClockMode=pdhPortClockMode, ansCeCeCCCdvtPa=ansCeCeCCCdvtPa, ansCCAUPSubrack=ansCCAUPSubrack, terminalId=terminalId, ansCeCeCCCdvtPb=ansCeCeCCCdvtPb, ansCeCeCCAUPVCI=ansCeCeCCAUPVCI, ansCeCeCCASPPosition=ansCeCeCCASPPosition, ansCeCeCCTcTypePa=ansCeCeCCTcTypePa, ansCrossConnect=ansCrossConnect, ansAccessServiceUserPortLabel=ansAccessServiceUserPortLabel, ansAal1ParsTcBtoA=ansAal1ParsTcBtoA, ansAccessServicePortMaxBwDs=ansAccessServicePortMaxBwDs, ansCeAtmCCPcrBtoA=ansCeAtmCCPcrBtoA, ansAccessServicePortLabel=ansAccessServicePortLabel, ansCeCeCCTimeSlotPa=ansCeCeCCTimeSlotPa, ethernetPortEntry=ethernetPortEntry, ansEthPars=ansEthPars, ansAccessServicePortAvailBwUs=ansAccessServicePortAvailBwUs, ansCeCeCCTcBtoAPa=ansCeCeCCTcBtoAPa, ansCCAdminStatus=ansCCAdminStatus, ansAccessServicePortMaxVpi=ansAccessServicePortMaxVpi, ansAtmCreateCC=ansAtmCreateCC, ansCeAtmCCPcrAtoB=ansCeAtmCCPcrAtoB, ansCCASPPosition=ansCCASPPosition, pdhPortLoopback=pdhPortLoopback, ansAccessUserPortMaxVpi=ansAccessUserPortMaxVpi, ansCCSourceType=ansCCSourceType, ansCeCeCCRowStatus=ansCeCeCCRowStatus, ansCeCeCreateCCEntry=ansCeCeCreateCCEntry, pdhPortFrameFormat=pdhPortFrameFormat, ansAtmCCASPVPI=ansAtmCCASPVPI, ansTerminalIdPosition=ansTerminalIdPosition, ansCeCeCCMaxBuffSizePa=ansCeCeCCMaxBuffSizePa, ansCeAtmCCASPIndex=ansCeAtmCCASPIndex, ansCeCeCCTcAtoBPa=ansCeCeCCTcAtoBPa, ansApplDataPosition=ansApplDataPosition, ansCeCeCCTcTypePb=ansCeCeCCTcTypePb, ansTerminalIdIdent=ansTerminalIdIdent, ansCeAtmCCMaxBuffSizePa=ansCeAtmCCMaxBuffSizePa, ansTerminalIdTable=ansTerminalIdTable, ansCCPcrAtoB=ansCCPcrAtoB, ansCeAtmCCTcAtoBPa=ansCeAtmCCTcAtoBPa, ansTerminalIdSystemNode=ansTerminalIdSystemNode, ansAccessServiceUserPortEntry=ansAccessServiceUserPortEntry, ansCeAtmCreateCCEntry=ansCeAtmCreateCCEntry, connections=connections, ansAal1ParsCdvt=ansAal1ParsCdvt, ansAccessInternalPortMinVpi=ansAccessInternalPortMinVpi, ansAccessServicePortPosition=ansAccessServicePortPosition, ansAccessInternalPortSubrack=ansAccessInternalPortSubrack, AnsCCMulti=AnsCCMulti, ansAccessUserPortMinVci=ansAccessUserPortMinVci, ansCrossConnectTable=ansCrossConnectTable, ansApplData=ansApplData, ansAccessInternalPortMaxVci=ansAccessInternalPortMaxVci, ansAccessServicePortSystemNode=ansAccessServicePortSystemNode, ansAccessServiceUserPortSubrack=ansAccessServiceUserPortSubrack, ansAal1ParsTimeSlot=ansAal1ParsTimeSlot, ansCeCeCCTcModePa=ansCeCeCCTcModePa, ansAccessUserPortMinVpi=ansAccessUserPortMinVpi, ansCCType=ansCCType, ansAccessUserPortEntry=ansAccessUserPortEntry, ansAccessInternalPortMinVci=ansAccessInternalPortMinVci, ansAtmCCAUPIndex=ansAtmCCAUPIndex, ansCeAtmCCTcTypePa=ansCeAtmCCTcTypePa, ansAccessUserPortAvailBwUs=ansAccessUserPortAvailBwUs, ansAtmCCASPVCI=ansAtmCCASPVCI, AnsAal1ParsType=AnsAal1ParsType, ansAccessInternalPortTable=ansAccessInternalPortTable, AnsCCType=AnsCCType, ansAccessInternalPortPosition=ansAccessInternalPortPosition, ansCeCeCCTcBtoAPb=ansCeCeCCTcBtoAPb, ansAal1ParsTcMode=ansAal1ParsTcMode, ansAtmCCASPPosition=ansAtmCCASPPosition, AnsPortType=AnsPortType, ansAccessUserPortSubrack=ansAccessUserPortSubrack, ansAtmCCSourceType=ansAtmCCSourceType, ansAal1Pars=ansAal1Pars, ansCeAtmCCAUPPosition=ansCeAtmCCAUPPosition, ansCeAtmCCAUPVPI=ansCeAtmCCAUPVPI, ansAccessInternalPortMaxBwUs=ansAccessInternalPortMaxBwUs, ansCCRowStatus=ansCCRowStatus, ansCeCeCCASPSubrack=ansCeCeCCASPSubrack, ansAccessServiceUserPortType=ansAccessServiceUserPortType, ansAccessUserPortMaxVci=ansAccessUserPortMaxVci, ansCCServiceType=ansCCServiceType, ansAccessUserPortMaxBwDs=ansAccessUserPortMaxBwDs, ansCCASPVCI=ansCCASPVCI, ansTerminalIdEntry=ansTerminalIdEntry, ansApplDataServiceParams=ansApplDataServiceParams, ansEthParsEntry=ansEthParsEntry, ethernetPortFcsEncapsulation=ethernetPortFcsEncapsulation, ansAccessServiceUserPortSystemNode=ansAccessServiceUserPortSystemNode, ansApplDataSubrack=ansApplDataSubrack, ansAal1ParsTcAtoB=ansAal1ParsTcAtoB, ansCeCeCCAUPVPI=ansCeCeCCAUPVPI, ansAccessInternalPortAvailBwUs=ansAccessInternalPortAvailBwUs, ansCeAtmCCRowStatus=ansCeAtmCCRowStatus, ansCeAtmCCAUPSubrack=ansCeAtmCCAUPSubrack, ansAtmCCASPSubrack=ansAtmCCASPSubrack, ansCeCeCCTypePb=ansCeCeCCTypePb, ansCeAtmCCASPPosition=ansCeAtmCCASPPosition, ansAccessServiceUserPortIndex=ansAccessServiceUserPortIndex, ansCeAtmCCASPVCI=ansCeAtmCCASPVCI, ansApplDataVPI=ansApplDataVPI, pdhPortPort=pdhPortPort, ansCeCeCreateCC=ansCeCeCreateCC, ansCeAtmCCTcModePa=ansCeAtmCCTcModePa, ethernetPortMuxOrEncapsulation=ethernetPortMuxOrEncapsulation, ansCeAtmCCAdminStatus=ansCeAtmCCAdminStatus, ethernetPortOperatingMode=ethernetPortOperatingMode, ansAal1ParsTcType=ansAal1ParsTcType, ansAccessServiceUserPortPosition=ansAccessServiceUserPortPosition, accessInternalPort=accessInternalPort, ansAccessServiceUserPortAtmFormat=ansAccessServiceUserPortAtmFormat, ansCeCeCCASPVCI=ansCeCeCCASPVCI, ansCeAtmCreateCC=ansCeAtmCreateCC, ansAccessServicePortMaxVci=ansAccessServicePortMaxVci, ansAal1ParsFillLevel=ansAal1ParsFillLevel, ansAccessServiceUserPortMaxVpi=ansAccessServiceUserPortMaxVpi, ansAtmCCAUPVCI=ansAtmCCAUPVCI, ansCeAtmCCType=ansCeAtmCCType, ansAccessInternalPortMaxBwDs=ansAccessInternalPortMaxBwDs, ansCCServiceClass=ansCCServiceClass, ansAccessUserPortAtmFormat=ansAccessUserPortAtmFormat, ansAccessServiceUserPortMaxVci=ansAccessServiceUserPortMaxVci, ansAccessServicePortOperStatus=ansAccessServicePortOperStatus, pdhPortServiceType=pdhPortServiceType, ansCCLastOperStatusChange=ansCCLastOperStatusChange, ansCeCeCCAUPSubrack=ansCeCeCCAUPSubrack, ansCeAtmCCServiceClass=ansCeAtmCCServiceClass, ansCeAtmCCAUPIndex=ansCeAtmCCAUPIndex, ansCeCeCCAUPPosition=ansCeCeCCAUPPosition, ansCCASPIndex=ansCCASPIndex, ansAccessServicePortMaxBwUs=ansAccessServicePortMaxBwUs, ansCeAtmCCMulti=ansCeAtmCCMulti, ansCeCeCCTcAtoBPb=ansCeCeCCTcAtoBPb, ansAtmCCAUPPosition=ansAtmCCAUPPosition, ansCeCeCCSourceType=ansCeCeCCSourceType, AnsAal1ParsTcType=AnsAal1ParsTcType, ansAccessUserPortPosition=ansAccessUserPortPosition, ansAtmCCPcrBtoA=ansAtmCCPcrBtoA, ansEthParsTable=ansEthParsTable, ansAccessServiceUserPortAvailBwUs=ansAccessServiceUserPortAvailBwUs, ansCeCeCCFillLevelPa=ansCeCeCCFillLevelPa, ansAccessServiceUserPortOperStatus=ansAccessServiceUserPortOperStatus, ansAccessInternalPortAvailBwDs=ansAccessInternalPortAvailBwDs, accessServicePort=accessServicePort, ansAccessUserPortLabel=ansAccessUserPortLabel, ansCeCeCCServiceClass=ansCeCeCCServiceClass, ansCCASPVPI=ansCCASPVPI, ansAccessInternalPortUsageState=ansAccessInternalPortUsageState, ansAccessUserPortType=ansAccessUserPortType, pdhPortEntry=pdhPortEntry, ansAccessServiceUserPortMinVci=ansAccessServiceUserPortMinVci, ansCeAtmCCASPSubrack=ansCeAtmCCASPSubrack, ansAtmCCAUPSystemNode=ansAtmCCAUPSystemNode, ansCCAUPIndex=ansCCAUPIndex, ansAccessServiceUserPortMaxBwUs=ansAccessServiceUserPortMaxBwUs, ansAal1ParsEntry=ansAal1ParsEntry, ansCCASPSubrack=ansCCASPSubrack, ansCeCeCCASPVPI=ansCeCeCCASPVPI, ansApplDataAdminState=ansApplDataAdminState, ansAccessServicePortEntry=ansAccessServicePortEntry, ansAccessInternalPortEntry=ansAccessInternalPortEntry, ansAccessInternalPortAtmFormat=ansAccessInternalPortAtmFormat, AnsCCSourceType=AnsCCSourceType, ansCeCeCreateCCTable=ansCeCeCreateCCTable, ansTerminalIdSubrack=ansTerminalIdSubrack, AnsAal1ParsTcMode=AnsAal1ParsTcMode, accessUserPort=accessUserPort, ansCeCeCCTypePa=ansCeCeCCTypePa, ansAccessServicePortType=ansAccessServicePortType, ansCeCeCCMaxBuffSizePb=ansCeCeCCMaxBuffSizePb, ansCrossConnectEntry=ansCrossConnectEntry, accessServiceUserPort=accessServiceUserPort, ansAccessServicePortMinVci=ansAccessServicePortMinVci, ansAccessUserPortTable=ansAccessUserPortTable, ansCeCeCCFillLevelPb=ansCeCeCCFillLevelPb, ansAal1ParsTable=ansAal1ParsTable, ansAccessUserPortAvailBwDs=ansAccessUserPortAvailBwDs, ansCeCeCCTcModePb=ansCeCeCCTcModePb, ansAal1ParsMaxBuffSize=ansAal1ParsMaxBuffSize, ansCCAUPVPI=ansCCAUPVPI, ansCeCeCCAUPIndex=ansCeCeCCAUPIndex, ansCCOperStatus=ansCCOperStatus, pdhPortHaulMode=pdhPortHaulMode, ansAccessUserPortMaxBwUs=ansAccessUserPortMaxBwUs, ansCeCeCCType=ansCeCeCCType, ansAtmCCAUPSubrack=ansAtmCCAUPSubrack, ansCeAtmCCASPVPI=ansCeAtmCCASPVPI, ansAccessUserPortSystemNode=ansAccessUserPortSystemNode, ansCeAtmCCAUPVCI=ansCeAtmCCAUPVCI, ansAtmCCServiceClass=ansAtmCCServiceClass, ansCeAtmCCSourceType=ansCeAtmCCSourceType, ansAtmCCAdminStatus=ansAtmCCAdminStatus, pdhPortCas=pdhPortCas, pdhPort=pdhPort, ansAal1ParsType=ansAal1ParsType, ansAccessServiceUserPortUsageState=ansAccessServiceUserPortUsageState, ethernetPortIpAddress=ethernetPortIpAddress, ansAccessInternalPortMaxVpi=ansAccessInternalPortMaxVpi, ansCCMulti=ansCCMulti, ansAccessUserPortAdminStatus=ansAccessUserPortAdminStatus, ansAtmCCType=ansAtmCCType, ansAtmCCASPIndex=ansAtmCCASPIndex, pdhPortTsUsed=pdhPortTsUsed, ansAtmCCRowStatus=ansAtmCCRowStatus, ansAccessServiceUserPortMinVpi=ansAccessServiceUserPortMinVpi, ansAccessServicePortAtmFormat=ansAccessServicePortAtmFormat, ansAccessServicePortSubrack=ansAccessServicePortSubrack, ansCeAtmCCFillLevelPa=ansCeAtmCCFillLevelPa, ansAccessServicePortMinVpi=ansAccessServicePortMinVpi, ethernetPortType=ethernetPortType, ansAccessServicePortAvailBwDs=ansAccessServicePortAvailBwDs, ansApplDataTable=ansApplDataTable, ansAccessInternalPortAdminStatus=ansAccessInternalPortAdminStatus, pdhPortTable=pdhPortTable, ansAccessUserPortIndex=ansAccessUserPortIndex, ansCCAUPVCI=ansCCAUPVCI, ansCCPcrBtoA=ansCCPcrBtoA, ansEthParsPcrShaping=ansEthParsPcrShaping, ansAccessServiceUserPortAdminStatus=ansAccessServiceUserPortAdminStatus, ansCeCeCCPcrBtoA=ansCeCeCCPcrBtoA, ansApplDataIndex=ansApplDataIndex, ansAccessServicePortIndex=ansAccessServicePortIndex, ansAccessInternalPortLabel=ansAccessInternalPortLabel, ansCeCeCCTimeSlotPb=ansCeCeCCTimeSlotPb, ansCeCeCCAUPSystemNode=ansCeCeCCAUPSystemNode, ansCeAtmCCTypePa=ansCeAtmCCTypePa, ansCeAtmCCCdvtPa=ansCeAtmCCCdvtPa, ansApplDataSystemNode=ansApplDataSystemNode, ansCeCeCCMulti=ansCeCeCCMulti, ansAccessUserPortUsageState=ansAccessUserPortUsageState, ansCeAtmCCTcBtoAPa=ansCeAtmCCTcBtoAPa, ansAccessServicePortAdminStatus=ansAccessServicePortAdminStatus, ansAtmCreateCCEntry=ansAtmCreateCCEntry, ansAtmCCServiceType=ansAtmCCServiceType, ansCeAtmCCAUPSystemNode=ansCeAtmCCAUPSystemNode, ansCCAUPSystemNode=ansCCAUPSystemNode, ansAtmCreateCCTable=ansAtmCreateCCTable, ansCeCeCCPcrAtoB=ansCeCeCCPcrAtoB, ansAccessInternalPortType=ansAccessInternalPortType, ansCeCeCCAdminStatus=ansCeCeCCAdminStatus, AnsCCServiceClass=AnsCCServiceClass, ansAccessServicePortUsageState=ansAccessServicePortUsageState, ansCeAtmCCTimeSlotPa=ansCeAtmCCTimeSlotPa, ansAccessInternalPortIndex=ansAccessInternalPortIndex, ansAccessInternalPortSystemNode=ansAccessInternalPortSystemNode, ansAccessUserPortOperStatus=ansAccessUserPortOperStatus, ethernetPort=ethernetPort)
mibBuilder.exportSymbols("ANS-GS-MIB", ansAccessServicePortTable=ansAccessServicePortTable, pdhPortLineCode=pdhPortLineCode, ansApplDataEntry=ansApplDataEntry, ansAccessServiceUserPortTable=ansAccessServiceUserPortTable, ansAccessInternalPortOperStatus=ansAccessInternalPortOperStatus, ansAccessServiceUserPortMaxBwDs=ansAccessServiceUserPortMaxBwDs, ansAccessServiceUserPortAvailBwDs=ansAccessServiceUserPortAvailBwDs, ansCCAUPPosition=ansCCAUPPosition, ethernetPortTable=ethernetPortTable, ansAtmCCAUPVPI=ansAtmCCAUPVPI, ansApplDataOpState=ansApplDataOpState, ansAtmCCPcrAtoB=ansAtmCCPcrAtoB, ansCeAtmCreateCCTable=ansCeAtmCreateCCTable, ansApplDataVCI=ansApplDataVCI)
