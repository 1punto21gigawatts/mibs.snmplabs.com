#
# PySNMP MIB module DLGSRPRF-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DLGSRPRF-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:47:48 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueSizeConstraint, ValueRangeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueSizeConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
dlgPerformanceInfo, = mibBuilder.importSymbols("DLGC-GLOBAL-REG", "dlgPerformanceInfo")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Counter64, Counter32, Gauge32, Bits, NotificationType, ObjectIdentity, TimeTicks, Unsigned32, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, IpAddress, iso, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "Counter32", "Gauge32", "Bits", "NotificationType", "ObjectIdentity", "TimeTicks", "Unsigned32", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "IpAddress", "iso", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
dlgPiSram = MibIdentifier((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1))
dlgPsCurrentStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 4))
dlgPsTotalStats = MibIdentifier((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 5))
dlgPiSramMibRev = MibIdentifier((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 6))
dlgPiSramMibRevMajor = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 6, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPiSramMibRevMajor.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPiSramMibRevMajor.setDescription('The Major Revision level. A change in the major revision level represents a major change in the architecture of the MIB. A change in the major revision level may indicate a significant change in the information supported and/or the meaning of the supported information, correct interpretation of data may require a MIB document with the same major revision level.')
dlgPiSramMibRevMinor = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 6, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPiSramMibRevMinor.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPiSramMibRevMinor.setDescription('The Minor Revision level. A change in the minor revision level may represent some minor additional support. no changes to any pre-existing information has occurred.')
dlgPsStatsEnableMask = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlgPsStatsEnableMask.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsStatsEnableMask.setDescription('Statistics Collection Enable mask. This mask enables or disables all statistics defined in this MIB. 0 - Disables statistics collection. 1 - Enables statistics collection. 2 - Clear existing statistics (resets all stats to zero) Default value is 1 - statistics collection enabled')
dlgPsPollingInterval = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dlgPsPollingInterval.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsPollingInterval.setDescription("The Agent's polling interval in seconds. This is the length of time that the Agent will keeps stats within the Current Stats group. By default, this value is 3600 seconds (1 hour). At the end of each interval the statistics are reset to zero and the counters begin counting up again. The dlgPsElapsedTime variable provides an indication how long into the current interval the agent has been collecting statistics.")
dlgPsElapsedTime = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsElapsedTime.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsElapsedTime.setDescription('Number of Elapsed seconds since the start of the current polling interval.')
dlgPsCurrentInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 4, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsCurrentInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsCurrentInterrupts.setDescription('Number of hardware interrupts generated by Span or D4x based boards for the current interval.')
dlgPsCurrentDrvCommands = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 4, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsCurrentDrvCommands.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsCurrentDrvCommands.setDescription('Number of commands sent to the driver for the current interval.')
dlgPsCurrentFWCommands = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 4, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsCurrentFWCommands.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsCurrentFWCommands.setDescription('Number of commands sent to the Firmware for the current interval.')
dlgPsCurrentUnSolEvents = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 4, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsCurrentUnSolEvents.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsCurrentUnSolEvents.setDescription('Number of unsolicited events from the Firmware for the current interval.')
dlgPsCurrentBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 4, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsCurrentBytesRead.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsCurrentBytesRead.setDescription('Number of bytes read from the Firmware during record for the current interval.')
dlgPsCurrentBytesWritten = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 4, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsCurrentBytesWritten.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsCurrentBytesWritten.setDescription('Number of bytes written to the Firmware during playback for the current interval.')
dlgPsCurrentLostMsgToFW = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 4, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsCurrentLostMsgToFW.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsCurrentLostMsgToFW.setDescription('Number of lost messages (commands) to the Firmware for the current interval. This value should always be zero. A non zero value typically indicates a Firmware or hardware failure.')
dlgPsCurrentLostMsgFromFW = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 4, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsCurrentLostMsgFromFW.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsCurrentLostMsgFromFW.setDescription('Number of lost messages (events) from the Firmware for the current interval. This value should typically be zero. A non zero value indicates the host cannot service all the messages being generated by the firmware.')
dlgPsCurrentFWErrorMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 4, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsCurrentFWErrorMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsCurrentFWErrorMsgs.setDescription('Number of error message packets generated by the Firmware for the current interval. This should typically be zero.')
dlgPsCurrentDrvErrorMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 4, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsCurrentDrvErrorMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsCurrentDrvErrorMsgs.setDescription('Number of error message packets generated by the Driver for the current interval. This should tpyically be zero.')
dlgPsTotalInterrupts = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 5, 1), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsTotalInterrupts.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsTotalInterrupts.setDescription('Total Number of hardware interrupts generated by the Span or D4x based boards.')
dlgPsTotalDrvCommands = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 5, 2), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsTotalDrvCommands.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsTotalDrvCommands.setDescription('Total Number of commands sent to the driver.')
dlgPsTotalFWCommands = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 5, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsTotalFWCommands.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsTotalFWCommands.setDescription('Total Number of commands sent to the Firmware.')
dlgPsTotalUnSolEvents = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 5, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsTotalUnSolEvents.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsTotalUnSolEvents.setDescription('Total Number of unsolicited events from the Firmware.')
dlgPsTotalBytesRead = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 5, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsTotalBytesRead.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsTotalBytesRead.setDescription('Total Number of bytes Read from the Firmware during record.')
dlgPsTotalBytesWritten = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 5, 6), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsTotalBytesWritten.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsTotalBytesWritten.setDescription('Total Number of bytes written to the Firmware during playback.')
dlgPsTotalLostMsgToFW = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 5, 7), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsTotalLostMsgToFW.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsTotalLostMsgToFW.setDescription('Total Number of lost messages (commands) to the Firmware. This value should always be zero. A non zero value typically indicates a Firmware or Hardware failure.')
dlgPsTotalLostMsgFromFW = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 5, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsTotalLostMsgFromFW.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsTotalLostMsgFromFW.setDescription('Total Number of lost messages (events) from the Firmware. This value should typically be zero. A non zero value indicates the host cannot service all the messages being generated by the firmware.')
dlgPsTotalFWErrorMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 5, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsTotalFWErrorMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsTotalFWErrorMsgs.setDescription('Total Number of error message packets gernerated by the Firmware. This should typically be zero.')
dlgPsTotalDrvErrorMsgs = MibScalar((1, 3, 6, 1, 4, 1, 3028, 1, 2, 1, 5, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dlgPsTotalDrvErrorMsgs.setStatus('mandatory')
if mibBuilder.loadTexts: dlgPsTotalDrvErrorMsgs.setDescription('Total Number of error message packets generated by the Driver. This should typically be zero.')
mibBuilder.exportSymbols("DLGSRPRF-MIB", dlgPsCurrentDrvCommands=dlgPsCurrentDrvCommands, dlgPsPollingInterval=dlgPsPollingInterval, dlgPsCurrentBytesRead=dlgPsCurrentBytesRead, dlgPsTotalStats=dlgPsTotalStats, dlgPsElapsedTime=dlgPsElapsedTime, dlgPsCurrentLostMsgToFW=dlgPsCurrentLostMsgToFW, dlgPiSram=dlgPiSram, dlgPsTotalLostMsgToFW=dlgPsTotalLostMsgToFW, dlgPsStatsEnableMask=dlgPsStatsEnableMask, dlgPiSramMibRev=dlgPiSramMibRev, dlgPsTotalFWCommands=dlgPsTotalFWCommands, dlgPsTotalFWErrorMsgs=dlgPsTotalFWErrorMsgs, dlgPsTotalLostMsgFromFW=dlgPsTotalLostMsgFromFW, dlgPsCurrentDrvErrorMsgs=dlgPsCurrentDrvErrorMsgs, dlgPsCurrentFWErrorMsgs=dlgPsCurrentFWErrorMsgs, dlgPiSramMibRevMinor=dlgPiSramMibRevMinor, dlgPsTotalUnSolEvents=dlgPsTotalUnSolEvents, dlgPsTotalBytesRead=dlgPsTotalBytesRead, dlgPsTotalDrvCommands=dlgPsTotalDrvCommands, dlgPsTotalInterrupts=dlgPsTotalInterrupts, dlgPsTotalDrvErrorMsgs=dlgPsTotalDrvErrorMsgs, dlgPsCurrentStats=dlgPsCurrentStats, dlgPsTotalBytesWritten=dlgPsTotalBytesWritten, dlgPiSramMibRevMajor=dlgPiSramMibRevMajor, dlgPsCurrentFWCommands=dlgPsCurrentFWCommands, dlgPsCurrentInterrupts=dlgPsCurrentInterrupts, dlgPsCurrentBytesWritten=dlgPsCurrentBytesWritten, dlgPsCurrentLostMsgFromFW=dlgPsCurrentLostMsgFromFW, dlgPsCurrentUnSolEvents=dlgPsCurrentUnSolEvents)
