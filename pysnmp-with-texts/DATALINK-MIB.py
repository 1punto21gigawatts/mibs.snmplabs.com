#
# PySNMP MIB module DATALINK-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/DATALINK-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:37:02 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, OctetString, Integer = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "OctetString", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
private, ModuleIdentity, ObjectIdentity, internet, mgmt, TimeTicks, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, MibIdentifier, enterprises, NotificationType, ObjectName, Bits, Integer32, IpAddress, Gauge32, iso, NotificationType, Counter32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "private", "ModuleIdentity", "ObjectIdentity", "internet", "mgmt", "TimeTicks", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "MibIdentifier", "enterprises", "NotificationType", "ObjectName", "Bits", "Integer32", "IpAddress", "Gauge32", "iso", "NotificationType", "Counter32", "Counter64")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
asentria = MibIdentifier((1, 3, 6, 1, 4, 1, 3052))
datalink = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1))
productIds = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 1))
productConfig = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 2))
unitIds = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 3))
serialPorts = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 4))
time = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 5))
snmpsetup = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 6))
passwords = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 7))
ftpsetup = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 8))
databases = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 9))
alarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 10))
actions = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 11))
controls = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 12))
alarmhistory = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 13))
realtimesocket = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 14))
iprestrictions = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 15))
ipsetup = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 16))
pppsetup = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 17))
ccode = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 18))
techsupport = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 99))
hardware = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 2, 4))
factorysetup = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5))
commandPassword = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 7, 5))
entireDatabase = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1))
databaseStatus = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 1))
databaseFiles = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2))
filesetup = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 1))
nodataAlarms = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3))
nodataAlarmHolidays = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3))
actionsBuzzer = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 11, 1))
actionsTraps = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 11, 5))
opSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1))
auxportMode = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6))
inlineHskMode = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6, 4))
modemSettings = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2))
dataRelease = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 12, 3))
otherControls = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 12, 4))
ftpPush = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3))
actionQueue = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1))
actionHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2))
ipCurrent = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 16, 1))
ipNew = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 16, 2))
pppIdentification = MibIdentifier((1, 3, 6, 1, 4, 1, 3052, 1, 17, 1))
datalinkThisProduct = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: datalinkThisProduct.setStatus('mandatory')
if mibBuilder.loadTexts: datalinkThisProduct.setDescription('This is a factory-configured string for the product name')
productname = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: productname.setStatus('mandatory')
if mibBuilder.loadTexts: productname.setDescription('A second string which may also contain name/version info')
systemversion = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: systemversion.setStatus('mandatory')
if mibBuilder.loadTexts: systemversion.setDescription('system rom version number')
appversion = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: appversion.setStatus('mandatory')
if mibBuilder.loadTexts: appversion.setDescription('application version')
numberports = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberports.setStatus('mandatory')
if mibBuilder.loadTexts: numberports.setDescription('number of RS232 ports found')
netcard = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: netcard.setStatus('mandatory')
if mibBuilder.loadTexts: netcard.setDescription('0 if no net card, 1 if net card found')
modems = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: modems.setStatus('mandatory')
if mibBuilder.loadTexts: modems.setDescription('0 if no modem, 1 if modem was found')
networkenabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: networkenabled.setStatus('mandatory')
if mibBuilder.loadTexts: networkenabled.setDescription('0 if not enabled, 1 if enabled')
memorysize = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 4, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: memorysize.setStatus('mandatory')
if mibBuilder.loadTexts: memorysize.setDescription('memory size in K')
modemreport = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemreport.setStatus('mandatory')
if mibBuilder.loadTexts: modemreport.setDescription('5-char string, speed to report for modem speed')
modemportspeed = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemportspeed.setStatus('mandatory')
if mibBuilder.loadTexts: modemportspeed.setDescription('modem port baud rate 38400, 19200, etc. ')
modemsetupstring = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemsetupstring.setStatus('mandatory')
if mibBuilder.loadTexts: modemsetupstring.setDescription('modem setup string, e.g., ATe0v0s0=1')
modemcddelay = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemcddelay.setStatus('mandatory')
if mibBuilder.loadTexts: modemcddelay.setDescription('seconds after CD before sending answer string')
modemtype = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemtype.setStatus('mandatory')
if mibBuilder.loadTexts: modemtype.setDescription('number factory-assigned to this particular modem, manufacturer, etc.')
serialnumber = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialnumber.setStatus('mandatory')
if mibBuilder.loadTexts: serialnumber.setDescription('up to 10 chars for factory-assigned serial number')
dateofmanufacture = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 5, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dateofmanufacture.setStatus('mandatory')
if mibBuilder.loadTexts: dateofmanufacture.setDescription('up to 8 chars for factory-assigned date of manufacture')
databasemode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databasemode.setStatus('mandatory')
if mibBuilder.loadTexts: databasemode.setDescription('database compatibility mode, 1 -normal, 2 commandset2, etc.')
datalinkSiteId = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 3, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datalinkSiteId.setStatus('mandatory')
if mibBuilder.loadTexts: datalinkSiteId.setDescription('Site ID string')
idByPortTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 3, 2), )
if mibBuilder.loadTexts: idByPortTable.setStatus('mandatory')
if mibBuilder.loadTexts: idByPortTable.setDescription('an id for type of data by port')
sitebyport = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 3, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "siteindex"))
if mibBuilder.loadTexts: sitebyport.setStatus('mandatory')
if mibBuilder.loadTexts: sitebyport.setDescription('entry for table')
siteindex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: siteindex.setStatus('mandatory')
if mibBuilder.loadTexts: siteindex.setDescription('index for which port')
siteID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 3, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: siteID.setStatus('mandatory')
if mibBuilder.loadTexts: siteID.setDescription('site id or type of data by port')
numberPorts = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 4, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: numberPorts.setStatus('mandatory')
if mibBuilder.loadTexts: numberPorts.setDescription('number of RS232 ports found. ')
portSetupTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2), )
if mibBuilder.loadTexts: portSetupTable.setStatus('mandatory')
if mibBuilder.loadTexts: portSetupTable.setDescription('port setup table, serial params, collect data, etc.')
portSetupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "portIndex"))
if mibBuilder.loadTexts: portSetupEntry.setStatus('mandatory')
if mibBuilder.loadTexts: portSetupEntry.setDescription('port setup table, serial params, collect data, etc.')
portIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portIndex.setStatus('mandatory')
if mibBuilder.loadTexts: portIndex.setDescription('index for table')
portBaud = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBaud.setStatus('mandatory')
if mibBuilder.loadTexts: portBaud.setDescription('baud rate, 19200, 9600, etc.')
portWord = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portWord.setStatus('mandatory')
if mibBuilder.loadTexts: portWord.setDescription('word length, must be 7 or 8')
portParity = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portParity.setStatus('mandatory')
if mibBuilder.loadTexts: portParity.setDescription('a single-char string with values of N E or O')
portStopbits = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStopbits.setStatus('mandatory')
if mibBuilder.loadTexts: portStopbits.setDescription('number of stop bits, must be 1')
portDataStore = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDataStore.setStatus('mandatory')
if mibBuilder.loadTexts: portDataStore.setDescription('0 data is not stored, 1 data is stored from this port')
portBinaryMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portBinaryMode.setStatus('mandatory')
if mibBuilder.loadTexts: portBinaryMode.setDescription('0 data is ASCII, 1 data is binary')
portWrapMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portWrapMode.setStatus('mandatory')
if mibBuilder.loadTexts: portWrapMode.setDescription('0 oldest data not overwritten, 1 older data is overwritten')
portHskMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portHskMode.setStatus('mandatory')
if mibBuilder.loadTexts: portHskMode.setDescription('HSK mode to use when buffer close to full, 0 none, 1 xon, 2 DTR, 3 DTR and Xon')
portDateTimeStampMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portDateTimeStampMode.setStatus('mandatory')
if mibBuilder.loadTexts: portDateTimeStampMode.setDescription('Date/time stamp mode to use,bit mapped bit 0 - do date stamp bit 1 - include year bit 2 - include year 19xx or 20xx bit 3 - include day of week bit 4 - space after date bit 5 - include time bit 6 - include seconds bit 7 - space after time')
portPTMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPTMode.setStatus('mandatory')
if mibBuilder.loadTexts: portPTMode.setDescription('pass-through access mode. 0=none, 1=by modem, 2=by network any write kills the passthrough connection. any write requires private community name')
portPTTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: portPTTime.setStatus('mandatory')
if mibBuilder.loadTexts: portPTTime.setDescription('pass-through access mode time of this connection, in seconds')
portStoreFile = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portStoreFile.setStatus('mandatory')
if mibBuilder.loadTexts: portStoreFile.setDescription('selects which data file data from this port is stored into')
portPtStripOutputLfs = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPtStripOutputLfs.setStatus('mandatory')
if mibBuilder.loadTexts: portPtStripOutputLfs.setDescription('0/1 no/yes in pass-through, strip LFs going to device on this port')
portPtStripInputLfs = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 15), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portPtStripInputLfs.setStatus('mandatory')
if mibBuilder.loadTexts: portPtStripInputLfs.setDescription('0/1 no/yes in pass-through, strip LFs coming from device on this port')
portlowDTR = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 4, 2, 1, 16), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: portlowDTR.setStatus('mandatory')
if mibBuilder.loadTexts: portlowDTR.setDescription('0/1 no/yes set DTR low and only raise it on SysAdmin & bypass connections')
currenttime = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 5, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: currenttime.setStatus('mandatory')
if mibBuilder.loadTexts: currenttime.setDescription('Text string for date and time: SUN 01/02/98 12:34:27')
autoDstAdjust = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autoDstAdjust.setStatus('mandatory')
if mibBuilder.loadTexts: autoDstAdjust.setDescription('0 no adjust, 1 adjust')
snmpTrapsEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapsEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: snmpTrapsEnabled.setDescription('0 do not send any traps, 1 do send traps')
snmpManagerTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 6, 2), )
if mibBuilder.loadTexts: snmpManagerTable.setStatus('mandatory')
if mibBuilder.loadTexts: snmpManagerTable.setDescription('management station names and addresses')
snmpTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 6, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "snmpMgrIndex"))
if mibBuilder.loadTexts: snmpTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: snmpTableEntry.setDescription('entry for snmp table')
snmpMgrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 6, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snmpMgrIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snmpMgrIndex.setDescription('index for table')
snmpManagerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 6, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManagerIp.setStatus('mandatory')
if mibBuilder.loadTexts: snmpManagerIp.setDescription('the ip address of a manager')
snmpManagerName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 6, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpManagerName.setStatus('mandatory')
if mibBuilder.loadTexts: snmpManagerName.setDescription('the name of a manager, up to 80 chars')
snmpTrapsAutoRepeatTime = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpTrapsAutoRepeatTime.setStatus('mandatory')
if mibBuilder.loadTexts: snmpTrapsAutoRepeatTime.setDescription('0 do not repeat, else number of minutes to repeat')
snmpSendTestTrap = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 6, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: snmpSendTestTrap.setStatus('mandatory')
if mibBuilder.loadTexts: snmpSendTestTrap.setDescription('0 on read, any Set sends test trap to all managers in table')
modemPasswords = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemPasswords.setStatus('mandatory')
if mibBuilder.loadTexts: modemPasswords.setDescription('0 no modem passwords required, 1 modem passwords are required write requires private community name')
tcpPasswords = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tcpPasswords.setStatus('mandatory')
if mibBuilder.loadTexts: tcpPasswords.setDescription('0 no telnet/tcp passwords required, 1 passwords are required write requires private community name')
ftpPasswords = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPasswords.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPasswords.setDescription('0 no ftp passwords required, 1 passwords are required write requires private community name')
promptPasswords = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: promptPasswords.setStatus('mandatory')
if mibBuilder.loadTexts: promptPasswords.setDescription('0 no Password: prompt, 1 -> show Password: prompt')
commandNeedsPassword = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandNeedsPassword.setStatus('mandatory')
if mibBuilder.loadTexts: commandNeedsPassword.setDescription('0 not needed, 1 is needed write requires private community name')
commandPasswordTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 5, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandPasswordTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: commandPasswordTimeout.setDescription('1-99, number of minutes of no activity which auto logs user out')
passwordTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 7, 6), )
if mibBuilder.loadTexts: passwordTable.setStatus('mandatory')
if mibBuilder.loadTexts: passwordTable.setDescription('Table of password entries, r-w only with private comm. name')
passwordTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 7, 6, 1), ).setIndexNames((0, "DATALINK-MIB", "passwordIndex"))
if mibBuilder.loadTexts: passwordTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: passwordTableEntry.setDescription('entry to password table')
passwordIndex = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: passwordIndex.setStatus('mandatory')
if mibBuilder.loadTexts: passwordIndex.setDescription('index to password table')
passwordCommand = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 6, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwordCommand.setStatus('mandatory')
if mibBuilder.loadTexts: passwordCommand.setDescription('password for command access')
passwordAccess = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 7, 6, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: passwordAccess.setStatus('mandatory')
if mibBuilder.loadTexts: passwordAccess.setDescription('password for pass-through access')
ftpAutoDelete = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpAutoDelete.setStatus('mandatory')
if mibBuilder.loadTexts: ftpAutoDelete.setDescription('0 files not autodeleted, 1 deleted on reading')
ftpDataMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpDataMode.setStatus('mandatory')
if mibBuilder.loadTexts: ftpDataMode.setDescription('0 normal, 1 compression mode 1, etc.')
ftpPushEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPushEnabled.setDescription('0-no, 1-yes, enables ftp data push')
ftpPushTiming = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushTiming.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPushTiming.setDescription('how often data is pushed, 2-255 minutes')
ftpPushTimer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushTimer.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPushTimer.setDescription('timer which counts to ftpPushTiming')
ftpPushIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPushIPAddress.setDescription('ip address of ftp server to which we push the data')
ftpPushUser = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushUser.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPushUser.setDescription('text string to send for the user id')
ftpPushPass = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 6), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushPass.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPushPass.setDescription('text string to send for the ftp server password')
ftpPushAcct = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushAcct.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPushAcct.setDescription('text string to send for the account, if used')
ftpPushDir = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushDir.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPushDir.setDescription('text string to send for the directory we CWD to')
ftppushTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 9), )
if mibBuilder.loadTexts: ftppushTable.setStatus('mandatory')
if mibBuilder.loadTexts: ftppushTable.setDescription('Table of ftp push enables')
ftppushTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 9, 1), ).setIndexNames((0, "DATALINK-MIB", "ftppushIndex"))
if mibBuilder.loadTexts: ftppushTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ftppushTableEntry.setDescription('entry to ftp push table')
ftppushIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 9, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftppushIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ftppushIndex.setDescription('index to ftp push table')
ftppushEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 9, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftppushEnable.setStatus('mandatory')
if mibBuilder.loadTexts: ftppushEnable.setDescription('enable for ftp push, indexed by file')
ftpPushAlarms = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPushAlarms.setDescription('0-no, 1-yes, do we push the ALARMS file')
ftpPushCount = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ftpPushCount.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPushCount.setDescription('number of ftp data pushes tried since reboot')
ftpPushStatusMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushStatusMode.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPushStatusMode.setDescription('0-none, 1-append, 2-replace, status file modes')
ftpPushServerName = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 8, 3, 13), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ftpPushServerName.setStatus('mandatory')
if mibBuilder.loadTexts: ftpPushServerName.setDescription('Name of the FTP Push Targer Server')
databasePfull = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databasePfull.setStatus('mandatory')
if mibBuilder.loadTexts: databasePfull.setDescription('percentage full of all database')
databaseSize = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseSize.setStatus('mandatory')
if mibBuilder.loadTexts: databaseSize.setDescription('Size of Data Storage Area, in bytes')
databaseRecordsAvailable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseRecordsAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: databaseRecordsAvailable.setDescription('Records which are available to read, total in all files')
databaseRecordsDeleted = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseRecordsDeleted.setStatus('mandatory')
if mibBuilder.loadTexts: databaseRecordsDeleted.setDescription('Records which are deleted, total in all files')
databaseAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2), )
if mibBuilder.loadTexts: databaseAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: databaseAlarmTable.setDescription('table for levels 1 2 3 of all database alarms and actions')
databaseAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "databaseAlarmIndex"))
if mibBuilder.loadTexts: databaseAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: databaseAlarmEntry.setDescription('entry for database alarm config and actions table')
databaseAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: databaseAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: databaseAlarmIndex.setDescription('Index for table, 1 2 or 3')
databaseAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmActive.setStatus('mandatory')
if mibBuilder.loadTexts: databaseAlarmActive.setDescription('0/1, 1 = active')
databaseAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: databaseAlarmThreshold.setDescription('1-99, percentage full threshold level')
databaseAlarmBeeperActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmBeeperActions.setStatus('mandatory')
if mibBuilder.loadTexts: databaseAlarmBeeperActions.setDescription('0 1 2, -> none, 1/10 or 10/10')
databaseAlarmSerialActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmSerialActions.setStatus('mandatory')
if mibBuilder.loadTexts: databaseAlarmSerialActions.setDescription('bits 0-7 show which messages 1-8 are sent')
databaseAlarmPagerActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmPagerActions.setStatus('mandatory')
if mibBuilder.loadTexts: databaseAlarmPagerActions.setDescription('bits 0-7 show which pagers 1-8 are used')
databaseAlarmCalloutActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmCalloutActions.setStatus('mandatory')
if mibBuilder.loadTexts: databaseAlarmCalloutActions.setDescription('bits 0-7 show which modem callouts 1-8 are used')
databaseAlarmTrapActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmTrapActions.setStatus('mandatory')
if mibBuilder.loadTexts: databaseAlarmTrapActions.setDescription('0/1 for traps are sent or not')
databaseAlarmFileStore = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmFileStore.setStatus('mandatory')
if mibBuilder.loadTexts: databaseAlarmFileStore.setDescription('0-no, 1-yes, store alarms in the ALARMS file')
databaseAlarmFileMaxSize = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: databaseAlarmFileMaxSize.setStatus('mandatory')
if mibBuilder.loadTexts: databaseAlarmFileMaxSize.setDescription('in K, max size for alarms file 4-32k')
charmaskEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charmaskEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: charmaskEnabled.setDescription('0/1 char masking enabled')
charmask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: charmask.setStatus('mandatory')
if mibBuilder.loadTexts: charmask.setDescription('32-byte hex ascii for character masking')
maxRecordChars = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: maxRecordChars.setStatus('mandatory')
if mibBuilder.loadTexts: maxRecordChars.setDescription('max characters in an ASCII record')
binRecordBlocking = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: binRecordBlocking.setStatus('mandatory')
if mibBuilder.loadTexts: binRecordBlocking.setDescription('# chars max to block binary records into')
recordCollectionTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: recordCollectionTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: recordCollectionTimeout.setDescription('# seconds to allow before terminating a record automatically')
fileTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2), )
if mibBuilder.loadTexts: fileTable.setStatus('mandatory')
if mibBuilder.loadTexts: fileTable.setDescription('table of directory entries')
fileTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "fileTableIndex"))
if mibBuilder.loadTexts: fileTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fileTableEntry.setDescription('entry for table')
fileTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fileTableIndex.setDescription('index for the table')
fileName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileName.setStatus('mandatory')
if mibBuilder.loadTexts: fileName.setDescription('name of the file')
fileType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileType.setStatus('mandatory')
if mibBuilder.loadTexts: fileType.setDescription('type of data, up to 24 chars')
fileSize = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileSize.setStatus('mandatory')
if mibBuilder.loadTexts: fileSize.setDescription('file size in bytes')
fileRecords = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileRecords.setStatus('mandatory')
if mibBuilder.loadTexts: fileRecords.setDescription('file size in records')
fileRecordsAvailable = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileRecordsAvailable.setStatus('mandatory')
if mibBuilder.loadTexts: fileRecordsAvailable.setDescription('# recs available')
fileRecordsDeleted = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileRecordsDeleted.setStatus('mandatory')
if mibBuilder.loadTexts: fileRecordsDeleted.setDescription('# recs deleted')
filePercentNow = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: filePercentNow.setStatus('mandatory')
if mibBuilder.loadTexts: filePercentNow.setDescription('% of all of memory this file is, right now')
fileAlarms = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3), )
if mibBuilder.loadTexts: fileAlarms.setStatus('mandatory')
if mibBuilder.loadTexts: fileAlarms.setDescription('file alarms, indexed by file and threshold')
fileAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1), ).setIndexNames((0, "DATALINK-MIB", "fileAlarmFileIndex"), (0, "DATALINK-MIB", "fileAlarmThreshold"))
if mibBuilder.loadTexts: fileAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: fileAlarmEntry.setDescription('entry to the table')
fileAlarmFileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileAlarmFileIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fileAlarmFileIndex.setDescription('index for filenumber')
fileAlarmThresholdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: fileAlarmThresholdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: fileAlarmThresholdIndex.setDescription('index for filenumber threshold')
fileAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAlarmActive.setStatus('mandatory')
if mibBuilder.loadTexts: fileAlarmActive.setDescription('0/1 this file alarm active')
fileAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: fileAlarmThreshold.setDescription('1-99, threshold level')
fileAlarmBeeperActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAlarmBeeperActions.setStatus('mandatory')
if mibBuilder.loadTexts: fileAlarmBeeperActions.setDescription('0 1 2, none, 1/10 or 10/10')
fileAlarmSerialActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAlarmSerialActions.setStatus('mandatory')
if mibBuilder.loadTexts: fileAlarmSerialActions.setDescription('bits 0-7 show which messages 1-8 are sent')
fileAlarmPagerActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAlarmPagerActions.setStatus('mandatory')
if mibBuilder.loadTexts: fileAlarmPagerActions.setDescription('bits 0-7 show which pagers 1-8 are used')
fileAlarmCalloutActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAlarmCalloutActions.setStatus('mandatory')
if mibBuilder.loadTexts: fileAlarmCalloutActions.setDescription('bits 0-7 show which modem callouts 1-8 are used')
fileAlarmTrapActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 9, 2, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: fileAlarmTrapActions.setStatus('mandatory')
if mibBuilder.loadTexts: fileAlarmTrapActions.setDescription('0/1 for traps are sent or not')
dataAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1), )
if mibBuilder.loadTexts: dataAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmTable.setDescription('table of read-only items for data alarm setup')
dataAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1), ).setIndexNames((0, "DATALINK-MIB", "dataAlarmIndex"))
if mibBuilder.loadTexts: dataAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmEntry.setDescription('Data alarm table entry')
dataAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmIndex.setDescription('index for data alarms')
dataAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmActive.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmActive.setDescription('0/1 active')
dataAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmName.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmName.setDescription('name of alarm')
dataAlarmCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmCounter.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmCounter.setDescription('counter for this alarm')
dataAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmThreshold.setDescription('threshold for this alarm')
dataAlarmClearMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmClearMode.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmClearMode.setDescription('code for clearing mode')
dataAlarmClearTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmClearTime.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmClearTime.setDescription('time of day, e.g., 01:20')
dataAlarmAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dataAlarmAcked.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmAcked.setDescription('0 on read, any set to ack this alarm')
dataAlarmBeeperActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmBeeperActions.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmBeeperActions.setDescription('0 1 2, none, 1/10 or 10/10')
dataAlarmSerialActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmSerialActions.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmSerialActions.setDescription('bits 0-7 show which messages 1-8 are sent')
dataAlarmPagerActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 11), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmPagerActions.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmPagerActions.setDescription('bits 0-7 show which pagers 1-8 are used')
dataAlarmCalloutActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 12), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmCalloutActions.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmCalloutActions.setDescription('bits 0-7 show which modem callouts 1-8 are used')
dataAlarmTrapActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmTrapActions.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmTrapActions.setDescription('0/1 for traps are sent or not')
dataAlarmString = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 14), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmString.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmString.setDescription('last data alarm string for this alarm')
dataAlarmPort = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 15), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmPort.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmPort.setDescription('port number for last data alarm string for this alarm')
dataAlarmAutoClear = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 1, 1, 16), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: dataAlarmAutoClear.setStatus('mandatory')
if mibBuilder.loadTexts: dataAlarmAutoClear.setDescription('0/1 disabled/enabled to auto clear counter when it reached threshold')
sensorAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2), )
if mibBuilder.loadTexts: sensorAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmTable.setDescription('table of read-only items for sensor alarm setup')
sensorAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "sensorAlarmIndex"))
if mibBuilder.loadTexts: sensorAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmEntry.setDescription('sensor alarm table entry')
sensorAlarmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAlarmIndex.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmIndex.setDescription('index for sensor alarms')
sensorAlarmActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmActive.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmActive.setDescription('0/1 active')
sensorAlarmName = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmName.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmName.setDescription('name of alarm')
sensorAlarmMode = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmMode.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmMode.setDescription('0 - open active, 1 - closed active')
sensorAlarmCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmCounter.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmCounter.setDescription('counter for this alarm')
sensorAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmThreshold.setDescription('threshold for this alarm')
sensorAlarmAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmAcked.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmAcked.setDescription('0 on read, any set to ack this alarm')
sensorAlarmBeeperActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmBeeperActions.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmBeeperActions.setDescription('0 1 2, none, 1/10 or 10/10')
sensorAlarmSerialActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmSerialActions.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmSerialActions.setDescription('bits 0-7 show which messages 1-8 are sent')
sensorAlarmPagerActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmPagerActions.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmPagerActions.setDescription('bits 0-7 show which pagers 1-8 are used')
sensorAlarmCalloutActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmCalloutActions.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmCalloutActions.setDescription('bits 0-7 show which modem callouts 1-8 are used')
sensorAlarmTrapActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sensorAlarmTrapActions.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmTrapActions.setDescription('0/1 for traps are sent or not')
sensorAlarmState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 2, 1, 13), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sensorAlarmState.setStatus('mandatory')
if mibBuilder.loadTexts: sensorAlarmState.setDescription('0-> open 1-> closed for current state')
nodataAlarmStatus = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 1), )
if mibBuilder.loadTexts: nodataAlarmStatus.setStatus('mandatory')
if mibBuilder.loadTexts: nodataAlarmStatus.setDescription('no data status table')
nodataAlarmStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 1, 1), ).setIndexNames((0, "DATALINK-MIB", "nodataAlarmStatusIndex"))
if mibBuilder.loadTexts: nodataAlarmStatusEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nodataAlarmStatusEntry.setDescription('status table entry')
nodataAlarmStatusIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodataAlarmStatusIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nodataAlarmStatusIndex.setDescription('index for table')
nodataAlarmStatusCounter = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataAlarmStatusCounter.setStatus('mandatory')
if mibBuilder.loadTexts: nodataAlarmStatusCounter.setDescription('the nodata counter')
nodataAlarmStatusAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataAlarmStatusAcked.setStatus('mandatory')
if mibBuilder.loadTexts: nodataAlarmStatusAcked.setDescription('reads as 0, any write acks this alarm')
nodataTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2), )
if mibBuilder.loadTexts: nodataTable.setStatus('mandatory')
if mibBuilder.loadTexts: nodataTable.setDescription('nodata table')
nodataTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "nodataTablePortIndex"), (0, "DATALINK-MIB", "nodataTableScheduleIndex"), (0, "DATALINK-MIB", "nodataTableLevelIndex"))
if mibBuilder.loadTexts: nodataTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nodataTableEntry.setDescription('nodata defn. table entry')
nodataTablePortIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 1), Integer32())
if mibBuilder.loadTexts: nodataTablePortIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nodataTablePortIndex.setDescription('index by port')
nodataTableScheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 2), Integer32())
if mibBuilder.loadTexts: nodataTableScheduleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nodataTableScheduleIndex.setDescription('index by schedule')
nodataTableLevelIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 3), Integer32())
if mibBuilder.loadTexts: nodataTableLevelIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nodataTableLevelIndex.setDescription('index by level')
nodataTableActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTableActive.setStatus('mandatory')
if mibBuilder.loadTexts: nodataTableActive.setDescription('0/1 , enabled or not')
nodataTableSchedule = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTableSchedule.setStatus('mandatory')
if mibBuilder.loadTexts: nodataTableSchedule.setDescription('schedule, format is hh:mm-hh:mm')
nodataTableThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTableThreshold.setStatus('mandatory')
if mibBuilder.loadTexts: nodataTableThreshold.setDescription('#minutes for no data for alarm')
nodataTableBeeperActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTableBeeperActions.setStatus('mandatory')
if mibBuilder.loadTexts: nodataTableBeeperActions.setDescription('0 1 2, none, 1/10 or 10/10')
nodataTableSerialActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTableSerialActions.setStatus('mandatory')
if mibBuilder.loadTexts: nodataTableSerialActions.setDescription('bits 0-7 show which messages 1-8 are sent')
nodataTablePagerActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTablePagerActions.setStatus('mandatory')
if mibBuilder.loadTexts: nodataTablePagerActions.setDescription('bits 0-7 show which pagers 1-8 are used')
nodataTableCalloutActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTableCalloutActions.setStatus('mandatory')
if mibBuilder.loadTexts: nodataTableCalloutActions.setDescription('bits 0-7 show which modem callouts 1-8 are used')
nodataTableTrapActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 2, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataTableTrapActions.setStatus('mandatory')
if mibBuilder.loadTexts: nodataTableTrapActions.setDescription('0/1 for traps are sent or not')
nodataNumberHolidays = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodataNumberHolidays.setStatus('mandatory')
if mibBuilder.loadTexts: nodataNumberHolidays.setDescription('number of nodata holidays defined')
nodataHolidayTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 2), )
if mibBuilder.loadTexts: nodataHolidayTable.setStatus('mandatory')
if mibBuilder.loadTexts: nodataHolidayTable.setDescription('holiday table')
nodataHolidayTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "nodataHolidayIndex"))
if mibBuilder.loadTexts: nodataHolidayTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: nodataHolidayTableEntry.setDescription('holiday table entry')
nodataHolidayIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodataHolidayIndex.setStatus('mandatory')
if mibBuilder.loadTexts: nodataHolidayIndex.setDescription('index for holiday list')
nodataHolidayItem = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: nodataHolidayItem.setStatus('mandatory')
if mibBuilder.loadTexts: nodataHolidayItem.setDescription('holiday list item, format is mm/dd')
nodataHolidayAdd = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataHolidayAdd.setStatus('mandatory')
if mibBuilder.loadTexts: nodataHolidayAdd.setDescription('null on read, set with holiday to add MM/DD')
nodataHolidayDelete = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataHolidayDelete.setStatus('mandatory')
if mibBuilder.loadTexts: nodataHolidayDelete.setDescription('null on read, set with holiday to delete MM/DD')
nodataHolidayClear = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 10, 3, 3, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: nodataHolidayClear.setStatus('mandatory')
if mibBuilder.loadTexts: nodataHolidayClear.setDescription('read returns 0, write requires private community name. used to clear the holiday list')
scheduleAlarmTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4), )
if mibBuilder.loadTexts: scheduleAlarmTable.setStatus('mandatory')
if mibBuilder.loadTexts: scheduleAlarmTable.setDescription('scheduled alarm table')
scheduleAlarmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1), ).setIndexNames((0, "DATALINK-MIB", "scheduleIndex"))
if mibBuilder.loadTexts: scheduleAlarmEntry.setStatus('mandatory')
if mibBuilder.loadTexts: scheduleAlarmEntry.setDescription('schedule table entry')
scheduleIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: scheduleIndex.setStatus('mandatory')
if mibBuilder.loadTexts: scheduleIndex.setDescription('day index')
scheduleActive = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleActive.setStatus('mandatory')
if mibBuilder.loadTexts: scheduleActive.setDescription('if active or not')
scheduleTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleTime.setStatus('mandatory')
if mibBuilder.loadTexts: scheduleTime.setDescription('time of day format is: hh:mm')
scheduleAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleAcked.setStatus('mandatory')
if mibBuilder.loadTexts: scheduleAcked.setDescription('reads 0, any set acks alarm')
scheduleBeeperActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleBeeperActions.setStatus('mandatory')
if mibBuilder.loadTexts: scheduleBeeperActions.setDescription('0 1 2, none, 1/10 or 10/10')
scheduleSerialActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleSerialActions.setStatus('mandatory')
if mibBuilder.loadTexts: scheduleSerialActions.setDescription('bits 0-7 show which messages 1-8 are sent')
schedulePagerActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: schedulePagerActions.setStatus('mandatory')
if mibBuilder.loadTexts: schedulePagerActions.setDescription('bits 0-7 show which pagers 1-8 are used')
scheduleCalloutActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleCalloutActions.setStatus('mandatory')
if mibBuilder.loadTexts: scheduleCalloutActions.setDescription('bits 0-7 show which modem callouts 1-8 are used')
scheduleTrapActions = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 10, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: scheduleTrapActions.setStatus('mandatory')
if mibBuilder.loadTexts: scheduleTrapActions.setDescription('0/1 for traps are sent or not')
actionsBuzzerState = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 11, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionsBuzzerState.setStatus('mandatory')
if mibBuilder.loadTexts: actionsBuzzerState.setDescription('current buzzer state 0.1.2')
actionsSerialTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 11, 2), )
if mibBuilder.loadTexts: actionsSerialTable.setStatus('mandatory')
if mibBuilder.loadTexts: actionsSerialTable.setDescription('serial message table')
actionsSerialTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 11, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "serialTableIndex"))
if mibBuilder.loadTexts: actionsSerialTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: actionsSerialTableEntry.setDescription('serial table entry')
serialTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: serialTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: serialTableIndex.setDescription('serial table index')
serialTableMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 2, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: serialTableMessage.setStatus('mandatory')
if mibBuilder.loadTexts: serialTableMessage.setDescription('serial table string')
actionsPagerTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3), )
if mibBuilder.loadTexts: actionsPagerTable.setStatus('mandatory')
if mibBuilder.loadTexts: actionsPagerTable.setDescription('pager table')
actionsPagerTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1), ).setIndexNames((0, "DATALINK-MIB", "pagerTableIndex"))
if mibBuilder.loadTexts: actionsPagerTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: actionsPagerTableEntry.setDescription('pager table entry')
pagerTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pagerTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: pagerTableIndex.setDescription('table index')
pagerType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerType.setStatus('mandatory')
if mibBuilder.loadTexts: pagerType.setDescription('0-numeric, 1-alpha')
pagerPhonenumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerPhonenumber.setStatus('mandatory')
if mibBuilder.loadTexts: pagerPhonenumber.setDescription('phone number to call for pager')
pagerID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerID.setStatus('mandatory')
if mibBuilder.loadTexts: pagerID.setDescription('ID or 2nd number to dial')
pagerDialDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerDialDelay.setStatus('mandatory')
if mibBuilder.loadTexts: pagerDialDelay.setDescription('# seconds on numeric to delay between dial and send pagerID or message')
pagerHangupDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerHangupDelay.setStatus('mandatory')
if mibBuilder.loadTexts: pagerHangupDelay.setDescription('# seconds on numeric to delay between messages and before hangup')
pagerMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 7), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerMessage.setStatus('mandatory')
if mibBuilder.loadTexts: pagerMessage.setDescription('message, either alpha or numeric')
pagerSendId = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerSendId.setStatus('mandatory')
if mibBuilder.loadTexts: pagerSendId.setDescription('0/1 send unit ID or not to pager')
pagerSendReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerSendReason.setStatus('mandatory')
if mibBuilder.loadTexts: pagerSendReason.setDescription('0/1 send reason for page or not to pager')
pagerMaxAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerMaxAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: pagerMaxAttempts.setDescription('max tries to be successful')
pagerAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: pagerAttempts.setDescription('current number of tries')
pagerAttemptDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerAttemptDelay.setStatus('mandatory')
if mibBuilder.loadTexts: pagerAttemptDelay.setDescription('# minutes between attempts')
pagerRepeat = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerRepeat.setStatus('mandatory')
if mibBuilder.loadTexts: pagerRepeat.setDescription('0/1 do we repeat successful')
pagerRepeatDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 3, 1, 14), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pagerRepeatDelay.setStatus('mandatory')
if mibBuilder.loadTexts: pagerRepeatDelay.setDescription('# minutes between repeats, if used')
actionsCalloutTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4), )
if mibBuilder.loadTexts: actionsCalloutTable.setStatus('mandatory')
if mibBuilder.loadTexts: actionsCalloutTable.setDescription('callout table')
actionsCalloutTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1), ).setIndexNames((0, "DATALINK-MIB", "calloutTableIndex"))
if mibBuilder.loadTexts: actionsCalloutTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: actionsCalloutTableEntry.setDescription('callout table entry')
calloutTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: calloutTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: calloutTableIndex.setDescription('table index')
calloutPhonenumber = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutPhonenumber.setStatus('mandatory')
if mibBuilder.loadTexts: calloutPhonenumber.setDescription('phone number to call for callout')
calloutMaxConnecttime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutMaxConnecttime.setStatus('mandatory')
if mibBuilder.loadTexts: calloutMaxConnecttime.setDescription('# seconds to wait for carrier')
calloutMessage = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutMessage.setStatus('mandatory')
if mibBuilder.loadTexts: calloutMessage.setDescription('message to send')
calloutSendId = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutSendId.setStatus('mandatory')
if mibBuilder.loadTexts: calloutSendId.setDescription('0/1 send unit ID or not to callout')
calloutSendReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutSendReason.setStatus('mandatory')
if mibBuilder.loadTexts: calloutSendReason.setDescription('0/1 send reason for page or not to callout')
calloutCommandWait = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutCommandWait.setStatus('mandatory')
if mibBuilder.loadTexts: calloutCommandWait.setDescription('#seconds to wait for a command on a callout before hangup')
calloutMaxAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutMaxAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: calloutMaxAttempts.setDescription('max tries to be successful')
calloutAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: calloutAttempts.setDescription('current number of tries')
calloutAttemptDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutAttemptDelay.setStatus('mandatory')
if mibBuilder.loadTexts: calloutAttemptDelay.setDescription('# minutes between attempts')
calloutRepeat = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutRepeat.setStatus('mandatory')
if mibBuilder.loadTexts: calloutRepeat.setDescription('0/1 do we repeat successful')
calloutRepeatDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 11, 4, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: calloutRepeatDelay.setStatus('mandatory')
if mibBuilder.loadTexts: calloutRepeatDelay.setDescription('# minutes between repeats, if used')
actionsTrapsEntSpecific = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 11, 5, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionsTrapsEntSpecific.setStatus('mandatory')
if mibBuilder.loadTexts: actionsTrapsEntSpecific.setDescription('0/1 enterprise specific traps enabled')
actionsTrapsEntSpecCount = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 11, 5, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionsTrapsEntSpecCount.setStatus('mandatory')
if mibBuilder.loadTexts: actionsTrapsEntSpecCount.setDescription('number of enterprise specific traps sent since last re-boot')
linefeeds = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: linefeeds.setStatus('mandatory')
if mibBuilder.loadTexts: linefeeds.setDescription('0/1 are linefeeds added to CRs on command responses?')
duplex = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: duplex.setStatus('mandatory')
if mibBuilder.loadTexts: duplex.setDescription('0-half 1-full')
response = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: response.setStatus('mandatory')
if mibBuilder.loadTexts: response.setDescription('0-codes 1-words')
datafilterEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: datafilterEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: datafilterEnabled.setDescription('0/1 off/on')
alarmfilterEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: alarmfilterEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: alarmfilterEnabled.setDescription('0/1 off/on')
operatingMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: operatingMode.setStatus('mandatory')
if mibBuilder.loadTexts: operatingMode.setDescription('1 command 2 input/access 3 unused 4 inline 5 extmodem')
inlineMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inlineMode.setStatus('mandatory')
if mibBuilder.loadTexts: inlineMode.setDescription('1,2,3 if inline, mode 1 (N->2) mode 2 (1->2, 3->4) mode 3 (1->2, 3->4, 5->6)')
inlineSource = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inlineSource.setStatus('mandatory')
if mibBuilder.loadTexts: inlineSource.setDescription('if inline and inlineMode==1, source of I/O2 inline')
inlineHsk2 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inlineHsk2.setStatus('mandatory')
if mibBuilder.loadTexts: inlineHsk2.setDescription('handshake mode 0-3 for inline port I/O 2')
inlineHsk4 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inlineHsk4.setStatus('mandatory')
if mibBuilder.loadTexts: inlineHsk4.setDescription('handshake mode 0-3 for inline port I/O 4')
inlineHsk6 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 6, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: inlineHsk6.setStatus('mandatory')
if mibBuilder.loadTexts: inlineHsk6.setDescription('handshake mode 0-3 for inline port I/O 6')
sureEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sureEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: sureEnabled.setDescription('0/1 off/on')
commandTcpipTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: commandTcpipTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: commandTcpipTimeout.setDescription('0-none, else number of no-activity minutes -> tcpip command to drop')
sysadminTcpipTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysadminTcpipTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: sysadminTcpipTimeout.setDescription('0-none, else number of no-activity minutes -> tcpip sysadmin to drop')
bypassEndchar = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: bypassEndchar.setStatus('mandatory')
if mibBuilder.loadTexts: bypassEndchar.setDescription('ascii value for character to exit bypass mode. default ->27')
routerAutoPing = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 1, 11), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: routerAutoPing.setStatus('mandatory')
if mibBuilder.loadTexts: routerAutoPing.setDescription('0/1 = no/yes, default is 0, do we ping the default router every 10 minutes?')
modemParity = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemParity.setStatus('mandatory')
if mibBuilder.loadTexts: modemParity.setDescription('1 7E 2 7O 3 8N')
modemUserSetup = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 2), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemUserSetup.setStatus('mandatory')
if mibBuilder.loadTexts: modemUserSetup.setDescription('sent to modem on init before the factory setup string')
modemTapSetup = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemTapSetup.setStatus('mandatory')
if mibBuilder.loadTexts: modemTapSetup.setDescription('sent to modem on just before doing TAP (alpha pager) protocol')
modemAnswerString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAnswerString.setStatus('mandatory')
if mibBuilder.loadTexts: modemAnswerString.setDescription('sent when modem makes connection')
modemExtSetup = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemExtSetup.setStatus('mandatory')
if mibBuilder.loadTexts: modemExtSetup.setDescription('sent to ext. modem for setup string')
modemExtSetupTime = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemExtSetupTime.setStatus('mandatory')
if mibBuilder.loadTexts: modemExtSetupTime.setDescription('# minutes of idle time between sending ext. modem setup string')
modemInactivityTimer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemInactivityTimer.setStatus('mandatory')
if mibBuilder.loadTexts: modemInactivityTimer.setDescription('# minutes of no transmit which aborts a connection')
modemAutoexecString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 8), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAutoexecString.setStatus('mandatory')
if mibBuilder.loadTexts: modemAutoexecString.setDescription('command string which auto-executes after modem connection if no other command within 10 seconds')
modemAutoexecEnabled = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemAutoexecEnabled.setStatus('mandatory')
if mibBuilder.loadTexts: modemAutoexecEnabled.setDescription('0/1 autoexec enabled')
modemTimeBetweenOutbound = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: modemTimeBetweenOutbound.setStatus('mandatory')
if mibBuilder.loadTexts: modemTimeBetweenOutbound.setDescription('# seconds (minimum) between outbound call attempts')
releaseMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 3, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: releaseMode.setStatus('mandatory')
if mibBuilder.loadTexts: releaseMode.setDescription('1-Line 3-CBB 4-Xmodem')
autodeleteEnable = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 3, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: autodeleteEnable.setStatus('mandatory')
if mibBuilder.loadTexts: autodeleteEnable.setDescription('1/2 off/on autodelete for CBB and Xmodem')
releaseCompressed = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 3, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: releaseCompressed.setStatus('mandatory')
if mibBuilder.loadTexts: releaseCompressed.setDescription('1-compressed 2-decompressed')
waitMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 4, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: waitMode.setStatus('mandatory')
if mibBuilder.loadTexts: waitMode.setDescription('1/2 off/on wait for 02 after 01 on rlmodes')
tagMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tagMode.setStatus('mandatory')
if mibBuilder.loadTexts: tagMode.setDescription('1/2 off/on Line/Block tag enabled')
crcMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 4, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: crcMode.setStatus('mandatory')
if mibBuilder.loadTexts: crcMode.setDescription('1/2 off/on add CRC to ascii releases')
dleMode = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 4, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dleMode.setStatus('mandatory')
if mibBuilder.loadTexts: dleMode.setDescription('1/2 off/on use DLE stuffing on CBB')
cbbRetransmits = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 4, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbbRetransmits.setStatus('mandatory')
if mibBuilder.loadTexts: cbbRetransmits.setDescription('# times a block retransmitted in CBB mode')
cbbTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 4, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: cbbTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: cbbTimeout.setDescription('# seconds to wait for an ack before retransmit in CBB mode')
activeDatabase = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 12, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: activeDatabase.setStatus('mandatory')
if mibBuilder.loadTexts: activeDatabase.setDescription('selects a file. ports 2001-2006 auto select this variable')
actionCount = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionCount.setStatus('mandatory')
if mibBuilder.loadTexts: actionCount.setDescription('number of active items in action table, 0-nn')
actionTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2), )
if mibBuilder.loadTexts: actionTable.setStatus('mandatory')
if mibBuilder.loadTexts: actionTable.setDescription('action queue table')
actionTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "actionTableIndex"))
if mibBuilder.loadTexts: actionTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: actionTableEntry.setDescription('action queue entry')
actionTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: actionTableIndex.setDescription('action table entry')
actionAcked = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: actionAcked.setStatus('mandatory')
if mibBuilder.loadTexts: actionAcked.setDescription('reads 0, any set removes (acks) this action')
actionReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionReason.setStatus('mandatory')
if mibBuilder.loadTexts: actionReason.setDescription('code reason for action')
actionReasonID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionReasonID.setStatus('mandatory')
if mibBuilder.loadTexts: actionReasonID.setDescription('which of the (reasons) e.g, alarm 3 vs. alarm 4')
actionReasonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionReasonLevel.setStatus('mandatory')
if mibBuilder.loadTexts: actionReasonLevel.setDescription('which of the levels for alarms which have 1-3 levels')
actionType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionType.setStatus('mandatory')
if mibBuilder.loadTexts: actionType.setDescription('type of action being taken (page, callout, etc.)')
actionTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionTypeID.setStatus('mandatory')
if mibBuilder.loadTexts: actionTypeID.setDescription('which of the actions e.g, pager 3 vs. pager 4')
actionRepeatTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionRepeatTime.setStatus('mandatory')
if mibBuilder.loadTexts: actionRepeatTime.setDescription('#minutes between repeats of attempts of this action')
actionAttempts = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 9), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionAttempts.setStatus('mandatory')
if mibBuilder.loadTexts: actionAttempts.setDescription('# of attempts to try this action so far')
actionNextAttempt = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 10), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionNextAttempt.setStatus('mandatory')
if mibBuilder.loadTexts: actionNextAttempt.setDescription('# minutes until the next attempt of this action')
actionTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: actionTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: actionTimeStamp.setDescription('date and time string: 02/34 12:34, or text message if no items')
historyCount = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyCount.setStatus('mandatory')
if mibBuilder.loadTexts: historyCount.setDescription('number of history items in history table, 0-nn')
historyTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2), )
if mibBuilder.loadTexts: historyTable.setStatus('mandatory')
if mibBuilder.loadTexts: historyTable.setDescription('action history table')
historyTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1), ).setIndexNames((0, "DATALINK-MIB", "historyTableIndex"))
if mibBuilder.loadTexts: historyTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: historyTableEntry.setDescription('history queue entry')
historyTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: historyTableIndex.setDescription('history table entry')
historyEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: historyEntryType.setStatus('mandatory')
if mibBuilder.loadTexts: historyEntryType.setDescription('type of entry (e.g., modem fail, pager pass, etc.)')
historyReason = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyReason.setStatus('mandatory')
if mibBuilder.loadTexts: historyReason.setDescription('code reason for history')
historyReasonID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyReasonID.setStatus('mandatory')
if mibBuilder.loadTexts: historyReasonID.setDescription('which of the (reasons) e.g, alarm 3 vs. alarm 4')
historyReasonLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyReasonLevel.setStatus('mandatory')
if mibBuilder.loadTexts: historyReasonLevel.setDescription('which of the levels for alarms which have 1-3 levels')
historyType = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyType.setStatus('mandatory')
if mibBuilder.loadTexts: historyType.setDescription('type of history being taken (page, callout, etc.)')
historyTypeID = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyTypeID.setStatus('mandatory')
if mibBuilder.loadTexts: historyTypeID.setDescription('which of the historys e.g, pager 3 vs. pager 4')
historyTimeStamp = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: historyTimeStamp.setStatus('mandatory')
if mibBuilder.loadTexts: historyTimeStamp.setDescription('date and time string: 02/34 12:34, or text message if no items')
historyClearLog = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 13, 2, 2, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: historyClearLog.setStatus('mandatory')
if mibBuilder.loadTexts: historyClearLog.setDescription('reads 0, any set clears all history log items')
lastCalloutPageReason = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 13, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: lastCalloutPageReason.setStatus('mandatory')
if mibBuilder.loadTexts: lastCalloutPageReason.setDescription('the reason string for the last callout or page, or NONE if never used')
rtsShowAnswer = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 14, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsShowAnswer.setStatus('deprecated')
if mibBuilder.loadTexts: rtsShowAnswer.setDescription('0-no 1-yes, show answer string on connection (deprecated)')
rtsNeedPassword = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 14, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsNeedPassword.setStatus('deprecated')
if mibBuilder.loadTexts: rtsNeedPassword.setDescription('0-no 1-yes, need password on RTS connection (deprecated)')
rtsWaitXon = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 14, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsWaitXon.setStatus('deprecated')
if mibBuilder.loadTexts: rtsWaitXon.setDescription('0-no 1-yes, wait for Xon after connection before sending data (deprecated)')
rtsIdleTimeout = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 14, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsIdleTimeout.setStatus('deprecated')
if mibBuilder.loadTexts: rtsIdleTimeout.setDescription('0-255, 0-none, 1-255 #idle minutes no data = shutdown socket (deprecated)')
rtsEmptyClose = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 14, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsEmptyClose.setStatus('deprecated')
if mibBuilder.loadTexts: rtsEmptyClose.setDescription('0->no, 1-> yes, when file empty close socket (polling, not rt data) (deprecated)')
rtsTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6), )
if mibBuilder.loadTexts: rtsTable.setStatus('mandatory')
if mibBuilder.loadTexts: rtsTable.setDescription('real time socket table')
rtsTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1), ).setIndexNames((0, "DATALINK-MIB", "rtsTableIndex"))
if mibBuilder.loadTexts: rtsTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: rtsTableEntry.setDescription('rts table entry')
rtsTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: rtsTableIndex.setDescription('rts table entry index')
rtsNoStore = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsNoStore.setStatus('mandatory')
if mibBuilder.loadTexts: rtsNoStore.setDescription("0-allow storage, 1-don't store data when RTS socket not connected")
rtsDenied = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsDenied.setStatus('mandatory')
if mibBuilder.loadTexts: rtsDenied.setDescription("0-don't allow, 1=yes allow this rts socket to connect")
rtsSocketState = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsSocketState.setStatus('mandatory')
if mibBuilder.loadTexts: rtsSocketState.setDescription('0-closed, 1-wait for pass, 2-wait for xon, 3=open for data')
rtsPortShowAnswer = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsPortShowAnswer.setStatus('mandatory')
if mibBuilder.loadTexts: rtsPortShowAnswer.setDescription('0-no 1-yes, show answer string on connection')
rtsPortNeedPassword = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: rtsPortNeedPassword.setStatus('mandatory')
if mibBuilder.loadTexts: rtsPortNeedPassword.setDescription('0-no 1-yes, need password on RTS connection')
rtsPortWaitXon = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsPortWaitXon.setStatus('mandatory')
if mibBuilder.loadTexts: rtsPortWaitXon.setDescription('0-no 1-yes, wait for Xon after connection before sending data')
rtsPortIdleTimeout = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 8), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsPortIdleTimeout.setStatus('mandatory')
if mibBuilder.loadTexts: rtsPortIdleTimeout.setDescription('0-255, 0-none, 1-255 #idle minutes no data = shutdown socket')
rtsPortEmptyClose = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 14, 6, 1, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: rtsPortEmptyClose.setStatus('mandatory')
if mibBuilder.loadTexts: rtsPortEmptyClose.setDescription('0->no, 1-> yes, when file empty close socket (polling, not rt data)')
iprestrictTable = MibTable((1, 3, 6, 1, 4, 1, 3052, 1, 15, 1), )
if mibBuilder.loadTexts: iprestrictTable.setStatus('mandatory')
if mibBuilder.loadTexts: iprestrictTable.setDescription('ip restrictions table')
iprestrictTableEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3052, 1, 15, 1, 1), ).setIndexNames((0, "DATALINK-MIB", "iprestrictTableIndex"))
if mibBuilder.loadTexts: iprestrictTableEntry.setStatus('mandatory')
if mibBuilder.loadTexts: iprestrictTableEntry.setDescription('ip restriction table entry')
iprestrictTableIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 15, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iprestrictTableIndex.setStatus('mandatory')
if mibBuilder.loadTexts: iprestrictTableIndex.setDescription('ip restrict table entry index')
iprestrictIpAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 3052, 1, 15, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iprestrictIpAddress.setStatus('mandatory')
if mibBuilder.loadTexts: iprestrictIpAddress.setDescription('an ip address which forces a restriction or allowance for an ip range')
suspendIPRestrictions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 15, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: suspendIPRestrictions.setStatus('mandatory')
if mibBuilder.loadTexts: suspendIPRestrictions.setDescription('read returns 0, writing requires the private community name. default is 0 set to 1 to suspend IP restrictions while loading the list set back to 0 to allow the restrictions to be used.')
killIPRestrictions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 15, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: killIPRestrictions.setStatus('mandatory')
if mibBuilder.loadTexts: killIPRestrictions.setDescription('read returns 0, writing requires the private community name. any set removes all entries from the IP restrcition list.')
addIPRestrictions = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 15, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: addIPRestrictions.setStatus('mandatory')
if mibBuilder.loadTexts: addIPRestrictions.setDescription('read returns 0, writing requires the private community name. any set adds an entry to the IP restriction list note that list is no re-sorted, so must add in order')
ipCurrentStatic = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurrentStatic.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurrentStatic.setDescription('1=static, 0=dynamic')
ipCurrentAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurrentAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurrentAddress.setDescription('current IP address')
ipCurrentSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurrentSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurrentSubnetMask.setDescription('current subnet mask')
ipCurrentDefaultRouter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 1, 4), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipCurrentDefaultRouter.setStatus('mandatory')
if mibBuilder.loadTexts: ipCurrentDefaultRouter.setDescription('current default router')
ipNewStatic = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewStatic.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewStatic.setDescription('1=static, 0=dynamic. write requires private community name.')
ipNewAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 2, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewAddress.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewAddress.setDescription('read=current new address, write requires private community name.')
ipNewSubnetMask = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 2, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewSubnetMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewSubnetMask.setDescription('read=current new subnet mask, write requires private community name.')
ipNewDefaultRouter = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 2, 4), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewDefaultRouter.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewDefaultRouter.setDescription('read=current new default router, write requires private community name.')
ipNewSetup = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 16, 2, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipNewSetup.setStatus('mandatory')
if mibBuilder.loadTexts: ipNewSetup.setDescription('read=0. write requires private community name. any write causes the current object values for ipNewStatic, ipNewAddress, ipNewSubnetMask and ipNewDefaultRouter to be used. Causes the unit to re-initialize its network stacks with these new values. Changes to ipNewStatic, ipNewAddress, ipNewSubnetMask and ipNewDefaultRouter do not affect the network stack until ipNewSetup is written with some value:')
pppIDString = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 17, 1, 1), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: pppIDString.setStatus('mandatory')
if mibBuilder.loadTexts: pppIDString.setDescription('sent in ppp up trap to provide host identification string')
pppIPAddress = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 17, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: pppIPAddress.setStatus('mandatory')
if mibBuilder.loadTexts: pppIPAddress.setDescription('sent in ppp up trap to provide host identification by IP address')
ccodeLoaded = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 18, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccodeLoaded.setStatus('mandatory')
if mibBuilder.loadTexts: ccodeLoaded.setDescription('0/1, no/yes, is ccode loaded')
ccodeRunning = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 18, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccodeRunning.setStatus('mandatory')
if mibBuilder.loadTexts: ccodeRunning.setDescription('0/1, no/yes, is ccode running')
ccodeStackMainWas = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 18, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccodeStackMainWas.setStatus('mandatory')
if mibBuilder.loadTexts: ccodeStackMainWas.setDescription('# of bytes of stack used by main app, last time run')
ccodeStackMainNow = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 18, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccodeStackMainNow.setStatus('mandatory')
if mibBuilder.loadTexts: ccodeStackMainNow.setDescription('# of bytes of stack used by main app, this time run')
ccodeStackT2Was = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 18, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccodeStackT2Was.setStatus('mandatory')
if mibBuilder.loadTexts: ccodeStackT2Was.setDescription('# of bytes of stack used by 2nd task of app, last time run')
ccodeStackT2Was2 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 18, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ccodeStackT2Was2.setStatus('mandatory')
if mibBuilder.loadTexts: ccodeStackT2Was2.setDescription('# of bytes of stack used by 2nd task of app, this time run')
techsupportInt1 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 99, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportInt1.setStatus('mandatory')
if mibBuilder.loadTexts: techsupportInt1.setDescription('a debugging integer for technical support use only. Do not use')
techsupportInt2 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 99, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportInt2.setStatus('mandatory')
if mibBuilder.loadTexts: techsupportInt2.setDescription('a debugging integer for technical support use only. Do not use')
techsupportInt3 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 99, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportInt3.setStatus('mandatory')
if mibBuilder.loadTexts: techsupportInt3.setDescription('a debugging integer for technical support use only. Do not use')
techsupportInt4 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 99, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportInt4.setStatus('mandatory')
if mibBuilder.loadTexts: techsupportInt4.setDescription('a debugging integer for technical support use only. Do not use')
techsupportInt5 = MibScalar((1, 3, 6, 1, 4, 1, 3052, 1, 99, 5), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: techsupportInt5.setStatus('mandatory')
if mibBuilder.loadTexts: techsupportInt5.setDescription('a debugging integer for technical support use only. Do not use')
datalinkDbasePfullTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,501)).setObjects(("DATALINK-MIB", "databaseAlarmIndex"), ("DATALINK-MIB", "databasePfull"))
if mibBuilder.loadTexts: datalinkDbasePfullTrap.setDescription('The datalinkDbasePfullTrap is issued when the database reaches a pre-determined threshold level, which causes a trap.')
datalinkFilePfullTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,502)).setObjects(("DATALINK-MIB", "fileAlarmFileIndex"), ("DATALINK-MIB", "fileAlarmThresholdIndex"), ("DATALINK-MIB", "filePercentNow"))
if mibBuilder.loadTexts: datalinkFilePfullTrap.setDescription('The datalinkFilePfullTrap is issued when one of the data files reaches a pre-determined threshold level, which causes a trap.')
datalinkDataAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,503)).setObjects(("DATALINK-MIB", "dataAlarmIndex"), ("DATALINK-MIB", "dataAlarmName"), ("DATALINK-MIB", "dataAlarmString"), ("DATALINK-MIB", "dataAlarmPort"))
if mibBuilder.loadTexts: datalinkDataAlarmTrap.setDescription('The datalinkDataAlarmTrap is issued when one of the data alarms reaches a pre-determined threshold level, which causes a trap.')
datalinkSensorAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,504)).setObjects(("DATALINK-MIB", "sensorAlarmIndex"), ("DATALINK-MIB", "sensorAlarmName"), ("DATALINK-MIB", "sensorAlarmState"))
if mibBuilder.loadTexts: datalinkSensorAlarmTrap.setDescription('The datalinkSensorAlarmTrap is issued when one of the External Sensors is triggered for a pre-determined threshold amount of time, which causes a trap.')
datalinkNoDataAlarmTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,505)).setObjects(("DATALINK-MIB", "nodataTablePortIndex"), ("DATALINK-MIB", "nodataTableScheduleIndex"), ("DATALINK-MIB", "nodataTableLevelIndex"), ("DATALINK-MIB", "nodataAlarmStatusCounter"), ("DATALINK-MIB", "nodataTableThreshold"))
if mibBuilder.loadTexts: datalinkNoDataAlarmTrap.setDescription('The datalinkNoDataAlarmTrap is issued when one of the ports receives no input data for a pre-determined threshold amount of time, which causes a trap.')
datalinkSchedTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,506)).setObjects(("DATALINK-MIB", "scheduleIndex"))
if mibBuilder.loadTexts: datalinkSchedTrap.setDescription('The datalinkSchedTrap is issued when a scheduled event causes a trap.')
datalinkImmediateTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,507))
if mibBuilder.loadTexts: datalinkImmediateTrap.setDescription('The datalinkImmediateTrap is issued when the dotrap command is used to issue a test trap to all snmp managers')
datalinkPPPupTrap = NotificationType((1, 3, 6, 1, 4, 1, 3052) + (0,509)).setObjects(("DATALINK-MIB", "pppIDString"), ("DATALINK-MIB", "pppIPAddress"))
if mibBuilder.loadTexts: datalinkPPPupTrap.setDescription('The datalinkPPPupTrap is issued when the PPP interface is brought up and the ppp connection has been established')
mibBuilder.exportSymbols("DATALINK-MIB", cbbRetransmits=cbbRetransmits, rtsWaitXon=rtsWaitXon, sensorAlarmTable=sensorAlarmTable, actionHistory=actionHistory, scheduleActive=scheduleActive, alarmfilterEnabled=alarmfilterEnabled, rtsNoStore=rtsNoStore, pagerTableIndex=pagerTableIndex, modemTapSetup=modemTapSetup, actionTable=actionTable, ccodeStackMainWas=ccodeStackMainWas, modemExtSetup=modemExtSetup, ftpsetup=ftpsetup, rtsTable=rtsTable, dleMode=dleMode, netcard=netcard, releaseCompressed=releaseCompressed, nodataAlarmStatus=nodataAlarmStatus, modemTimeBetweenOutbound=modemTimeBetweenOutbound, calloutRepeatDelay=calloutRepeatDelay, productname=productname, calloutSendReason=calloutSendReason, rtsSocketState=rtsSocketState, ftpPushEnabled=ftpPushEnabled, pagerHangupDelay=pagerHangupDelay, systemversion=systemversion, ftpPushCount=ftpPushCount, portParity=portParity, calloutMessage=calloutMessage, dataAlarmString=dataAlarmString, fileRecordsAvailable=fileRecordsAvailable, dataAlarmName=dataAlarmName, databaseAlarmCalloutActions=databaseAlarmCalloutActions, calloutTableIndex=calloutTableIndex, techsupport=techsupport, fileTableIndex=fileTableIndex, databaseSize=databaseSize, actionCount=actionCount, rtsNeedPassword=rtsNeedPassword, scheduleAlarmTable=scheduleAlarmTable, actionTableIndex=actionTableIndex, calloutSendId=calloutSendId, modems=modems, dataAlarmAcked=dataAlarmAcked, modemAutoexecString=modemAutoexecString, datalinkPPPupTrap=datalinkPPPupTrap, ftpAutoDelete=ftpAutoDelete, nodataNumberHolidays=nodataNumberHolidays, historyTypeID=historyTypeID, filesetup=filesetup, sitebyport=sitebyport, pagerMaxAttempts=pagerMaxAttempts, historyReasonLevel=historyReasonLevel, techsupportInt3=techsupportInt3, autodeleteEnable=autodeleteEnable, binRecordBlocking=binRecordBlocking, charmask=charmask, autoDstAdjust=autoDstAdjust, databaseAlarmThreshold=databaseAlarmThreshold, factorysetup=factorysetup, bypassEndchar=bypassEndchar, modemUserSetup=modemUserSetup, datalinkFilePfullTrap=datalinkFilePfullTrap, ftpPasswords=ftpPasswords, commandPassword=commandPassword, pagerPhonenumber=pagerPhonenumber, nodataTableLevelIndex=nodataTableLevelIndex, ftpPush=ftpPush, nodataAlarmStatusCounter=nodataAlarmStatusCounter, sensorAlarmEntry=sensorAlarmEntry, datalinkSiteId=datalinkSiteId, memorysize=memorysize, scheduleAcked=scheduleAcked, snmpManagerTable=snmpManagerTable, nodataTableSerialActions=nodataTableSerialActions, portSetupEntry=portSetupEntry, ftpPushUser=ftpPushUser, inlineHskMode=inlineHskMode, ipNewDefaultRouter=ipNewDefaultRouter, fileAlarmBeeperActions=fileAlarmBeeperActions, nodataHolidayClear=nodataHolidayClear, modemExtSetupTime=modemExtSetupTime, fileName=fileName, nodataTablePortIndex=nodataTablePortIndex, snmpSendTestTrap=snmpSendTestTrap, pagerID=pagerID, dataAlarmPort=dataAlarmPort, nodataTableThreshold=nodataTableThreshold, duplex=duplex, nodataAlarmHolidays=nodataAlarmHolidays, pagerAttemptDelay=pagerAttemptDelay, sensorAlarmActive=sensorAlarmActive, databasemode=databasemode, portWord=portWord, tcpPasswords=tcpPasswords, nodataTableEntry=nodataTableEntry, modemsetupstring=modemsetupstring, rtsIdleTimeout=rtsIdleTimeout, filePercentNow=filePercentNow, rtsTableEntry=rtsTableEntry, sensorAlarmMode=sensorAlarmMode, scheduleCalloutActions=scheduleCalloutActions, datafilterEnabled=datafilterEnabled, maxRecordChars=maxRecordChars, dataAlarmTable=dataAlarmTable, ftpPushIPAddress=ftpPushIPAddress, actionAcked=actionAcked, nodataAlarms=nodataAlarms, modemcddelay=modemcddelay, ftpPushAlarms=ftpPushAlarms, sensorAlarmState=sensorAlarmState, fileAlarmFileIndex=fileAlarmFileIndex, inlineHsk4=inlineHsk4, historyClearLog=historyClearLog, scheduleIndex=scheduleIndex, unitIds=unitIds, snmpMgrIndex=snmpMgrIndex, historyType=historyType, dataAlarmBeeperActions=dataAlarmBeeperActions, operatingMode=operatingMode, realtimesocket=realtimesocket, actionsPagerTable=actionsPagerTable, calloutRepeat=calloutRepeat, snmpTrapsAutoRepeatTime=snmpTrapsAutoRepeatTime, fileAlarmSerialActions=fileAlarmSerialActions, actionsBuzzer=actionsBuzzer, datalinkThisProduct=datalinkThisProduct, fileRecords=fileRecords, nodataTableCalloutActions=nodataTableCalloutActions, fileType=fileType, pagerType=pagerType, pagerMessage=pagerMessage, killIPRestrictions=killIPRestrictions, dataAlarmClearTime=dataAlarmClearTime, sensorAlarmSerialActions=sensorAlarmSerialActions, ipCurrentAddress=ipCurrentAddress, rtsShowAnswer=rtsShowAnswer, schedulePagerActions=schedulePagerActions, snmpManagerName=snmpManagerName, entireDatabase=entireDatabase, modemSettings=modemSettings, fileAlarmThreshold=fileAlarmThreshold, sensorAlarmCalloutActions=sensorAlarmCalloutActions, scheduleAlarmEntry=scheduleAlarmEntry, ipNew=ipNew, fileTableEntry=fileTableEntry, passwordTableEntry=passwordTableEntry, modemreport=modemreport, portDateTimeStampMode=portDateTimeStampMode, sensorAlarmTrapActions=sensorAlarmTrapActions, alarmhistory=alarmhistory, passwordCommand=passwordCommand, historyReason=historyReason, dataAlarmIndex=dataAlarmIndex, serialTableIndex=serialTableIndex, ftpPushAcct=ftpPushAcct, actionType=actionType, fileAlarmEntry=fileAlarmEntry, ftpPushStatusMode=ftpPushStatusMode, commandPasswordTimeout=commandPasswordTimeout, dataRelease=dataRelease, databaseAlarmFileMaxSize=databaseAlarmFileMaxSize, ftpPushTiming=ftpPushTiming, modemtype=modemtype, portSetupTable=portSetupTable, time=time, ipCurrent=ipCurrent, pppIDString=pppIDString, techsupportInt2=techsupportInt2, fileAlarmPagerActions=fileAlarmPagerActions, currenttime=currenttime, siteindex=siteindex, inlineSource=inlineSource, rtsTableIndex=rtsTableIndex, modemAutoexecEnabled=modemAutoexecEnabled, dataAlarmEntry=dataAlarmEntry, historyTimeStamp=historyTimeStamp, iprestrictTableEntry=iprestrictTableEntry, actionQueue=actionQueue, serialnumber=serialnumber, rtsPortNeedPassword=rtsPortNeedPassword, actionsTrapsEntSpecCount=actionsTrapsEntSpecCount, scheduleTrapActions=scheduleTrapActions, ftpPushDir=ftpPushDir, ccodeRunning=ccodeRunning, fileAlarms=fileAlarms, snmpTableEntry=snmpTableEntry, dataAlarmActive=dataAlarmActive, portWrapMode=portWrapMode, productIds=productIds, snmpTrapsEnabled=snmpTrapsEnabled, asentria=asentria, actionAttempts=actionAttempts, sysadminTcpipTimeout=sysadminTcpipTimeout, dataAlarmSerialActions=dataAlarmSerialActions, passwordIndex=passwordIndex, fileAlarmThresholdIndex=fileAlarmThresholdIndex, sensorAlarmBeeperActions=sensorAlarmBeeperActions, otherControls=otherControls, nodataAlarmStatusIndex=nodataAlarmStatusIndex, datalink=datalink, historyTableIndex=historyTableIndex, portPtStripOutputLfs=portPtStripOutputLfs, dataAlarmCalloutActions=dataAlarmCalloutActions, dataAlarmClearMode=dataAlarmClearMode, serialTableMessage=serialTableMessage, portlowDTR=portlowDTR, calloutCommandWait=calloutCommandWait, appversion=appversion, actionRepeatTime=actionRepeatTime, databaseAlarmTable=databaseAlarmTable, response=response, rtsDenied=rtsDenied, commandNeedsPassword=commandNeedsPassword, modemInactivityTimer=modemInactivityTimer, nodataTableTrapActions=nodataTableTrapActions, ftppushEnable=ftppushEnable, iprestrictTableIndex=iprestrictTableIndex, actionsTraps=actionsTraps, actionsSerialTableEntry=actionsSerialTableEntry, datalinkNoDataAlarmTrap=datalinkNoDataAlarmTrap, modemParity=modemParity, opSettings=opSettings, actionsCalloutTable=actionsCalloutTable, databaseAlarmEntry=databaseAlarmEntry, portIndex=portIndex, nodataTableBeeperActions=nodataTableBeeperActions, actionReasonID=actionReasonID, portStoreFile=portStoreFile, passwords=passwords, databaseAlarmBeeperActions=databaseAlarmBeeperActions, ftpPushTimer=ftpPushTimer, calloutMaxConnecttime=calloutMaxConnecttime, calloutAttemptDelay=calloutAttemptDelay, fileRecordsDeleted=fileRecordsDeleted, databaseAlarmActive=databaseAlarmActive, waitMode=waitMode, actions=actions, snmpManagerIp=snmpManagerIp, snmpsetup=snmpsetup, actionTypeID=actionTypeID, passwordAccess=passwordAccess, datalinkImmediateTrap=datalinkImmediateTrap, addIPRestrictions=addIPRestrictions, sensorAlarmThreshold=sensorAlarmThreshold, databaseStatus=databaseStatus, nodataHolidayItem=nodataHolidayItem, dataAlarmPagerActions=dataAlarmPagerActions, actionNextAttempt=actionNextAttempt, inlineHsk2=inlineHsk2, nodataAlarmStatusAcked=nodataAlarmStatusAcked, ccode=ccode, ipNewStatic=ipNewStatic, datalinkDataAlarmTrap=datalinkDataAlarmTrap)
mibBuilder.exportSymbols("DATALINK-MIB", ipNewSetup=ipNewSetup, databaseAlarmFileStore=databaseAlarmFileStore, pppsetup=pppsetup, fileTable=fileTable, tagMode=tagMode, databaseRecordsAvailable=databaseRecordsAvailable, ipCurrentStatic=ipCurrentStatic, portPTTime=portPTTime, recordCollectionTimeout=recordCollectionTimeout, sensorAlarmPagerActions=sensorAlarmPagerActions, datalinkSensorAlarmTrap=datalinkSensorAlarmTrap, nodataTableSchedule=nodataTableSchedule, activeDatabase=activeDatabase, pagerSendReason=pagerSendReason, databases=databases, rtsPortEmptyClose=rtsPortEmptyClose, ipsetup=ipsetup, nodataAlarmStatusEntry=nodataAlarmStatusEntry, sensorAlarmAcked=sensorAlarmAcked, rtsPortShowAnswer=rtsPortShowAnswer, nodataTableScheduleIndex=nodataTableScheduleIndex, datalinkDbasePfullTrap=datalinkDbasePfullTrap, scheduleSerialActions=scheduleSerialActions, iprestrictIpAddress=iprestrictIpAddress, numberPorts=numberPorts, ftpDataMode=ftpDataMode, ipNewSubnetMask=ipNewSubnetMask, sureEnabled=sureEnabled, fileAlarmCalloutActions=fileAlarmCalloutActions, rtsPortWaitXon=rtsPortWaitXon, calloutAttempts=calloutAttempts, fileAlarmActive=fileAlarmActive, ftppushIndex=ftppushIndex, actionTimeStamp=actionTimeStamp, modemAnswerString=modemAnswerString, scheduleTime=scheduleTime, siteID=siteID, inlineMode=inlineMode, numberports=numberports, historyReasonID=historyReasonID, databaseFiles=databaseFiles, pagerRepeatDelay=pagerRepeatDelay, ccodeLoaded=ccodeLoaded, actionReason=actionReason, actionsBuzzerState=actionsBuzzerState, passwordTable=passwordTable, alarms=alarms, releaseMode=releaseMode, techsupportInt4=techsupportInt4, pagerSendId=pagerSendId, rtsEmptyClose=rtsEmptyClose, nodataTable=nodataTable, charmaskEnabled=charmaskEnabled, nodataHolidayTableEntry=nodataHolidayTableEntry, suspendIPRestrictions=suspendIPRestrictions, lastCalloutPageReason=lastCalloutPageReason, actionsSerialTable=actionsSerialTable, databaseAlarmTrapActions=databaseAlarmTrapActions, portPTMode=portPTMode, ccodeStackMainNow=ccodeStackMainNow, portStopbits=portStopbits, controls=controls, databasePfull=databasePfull, nodataTableActive=nodataTableActive, databaseRecordsDeleted=databaseRecordsDeleted, ipNewAddress=ipNewAddress, historyCount=historyCount, historyTableEntry=historyTableEntry, serialPorts=serialPorts, fileAlarmTrapActions=fileAlarmTrapActions, nodataHolidayIndex=nodataHolidayIndex, datalinkSchedTrap=datalinkSchedTrap, nodataTablePagerActions=nodataTablePagerActions, techsupportInt1=techsupportInt1, nodataHolidayTable=nodataHolidayTable, rtsPortIdleTimeout=rtsPortIdleTimeout, cbbTimeout=cbbTimeout, actionsTrapsEntSpecific=actionsTrapsEntSpecific, nodataHolidayDelete=nodataHolidayDelete, pagerRepeat=pagerRepeat, ccodeStackT2Was2=ccodeStackT2Was2, ftppushTableEntry=ftppushTableEntry, ipCurrentSubnetMask=ipCurrentSubnetMask, crcMode=crcMode, pagerAttempts=pagerAttempts, routerAutoPing=routerAutoPing, historyEntryType=historyEntryType, fileSize=fileSize, actionsCalloutTableEntry=actionsCalloutTableEntry, inlineHsk6=inlineHsk6, portPtStripInputLfs=portPtStripInputLfs, ftpPushPass=ftpPushPass, dataAlarmThreshold=dataAlarmThreshold, databaseAlarmSerialActions=databaseAlarmSerialActions, databaseAlarmIndex=databaseAlarmIndex, modemportspeed=modemportspeed, hardware=hardware, iprestrictions=iprestrictions, actionTableEntry=actionTableEntry, auxportMode=auxportMode, dataAlarmTrapActions=dataAlarmTrapActions, calloutPhonenumber=calloutPhonenumber, actionReasonLevel=actionReasonLevel, idByPortTable=idByPortTable, dataAlarmCounter=dataAlarmCounter, portDataStore=portDataStore, portHskMode=portHskMode, databaseAlarmPagerActions=databaseAlarmPagerActions, modemPasswords=modemPasswords, techsupportInt5=techsupportInt5, actionsPagerTableEntry=actionsPagerTableEntry, linefeeds=linefeeds, portBaud=portBaud, ftpPushServerName=ftpPushServerName, ipCurrentDefaultRouter=ipCurrentDefaultRouter, iprestrictTable=iprestrictTable, dateofmanufacture=dateofmanufacture, calloutMaxAttempts=calloutMaxAttempts, commandTcpipTimeout=commandTcpipTimeout, pppIdentification=pppIdentification, portBinaryMode=portBinaryMode, promptPasswords=promptPasswords, ftppushTable=ftppushTable, historyTable=historyTable, sensorAlarmIndex=sensorAlarmIndex, pagerDialDelay=pagerDialDelay, sensorAlarmName=sensorAlarmName, sensorAlarmCounter=sensorAlarmCounter, pppIPAddress=pppIPAddress, networkenabled=networkenabled, ccodeStackT2Was=ccodeStackT2Was, productConfig=productConfig, nodataHolidayAdd=nodataHolidayAdd, dataAlarmAutoClear=dataAlarmAutoClear, scheduleBeeperActions=scheduleBeeperActions)
