#
# PySNMP MIB module HP-VLAN-CAR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HP-SN-MIBS
# Produced by pysmi-0.3.4 at Wed May  1 13:36:22 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueSizeConstraint, SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueSizeConstraint", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion")
PacketSource, RateLimitType, RateLimitAction = mibBuilder.importSymbols("HP-CAR-MIB", "PacketSource", "RateLimitType", "RateLimitAction")
snVLanCAR, = mibBuilder.importSymbols("HP-SN-SWITCH-GROUP-MIB", "snVLanCAR")
NotificationGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ModuleCompliance")
Bits, MibIdentifier, TimeTicks, Integer32, NotificationType, Unsigned32, iso, Gauge32, Counter64, ObjectIdentity, Counter32, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "MibIdentifier", "TimeTicks", "Integer32", "NotificationType", "Unsigned32", "iso", "Gauge32", "Counter64", "ObjectIdentity", "Counter32", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
snVLanCARs = MibIdentifier((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1))
snVLanCARTable = MibTable((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1), )
if mibBuilder.loadTexts: snVLanCARTable.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARTable.setDescription('A table of rate limit configuration entries for a vlan. Rate Limit is a method of traffic control. It allows a set of rate limits to be configured and applied to packets flowing into/out of an interface to regulate network traffic.')
snVLanCAREntry = MibTableRow((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1), ).setIndexNames((0, "HP-VLAN-CAR-MIB", "snVLanCARVLanId"), (0, "HP-VLAN-CAR-MIB", "snVLanCARDirection"), (0, "HP-VLAN-CAR-MIB", "snVLanCARRowIndex"))
if mibBuilder.loadTexts: snVLanCAREntry.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCAREntry.setDescription('A collection of rate-limit configuration objects on this vlan.')
snVLanCARVLanId = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 4095))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARVLanId.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARVLanId.setDescription('The VLAN ID as one of the indices of this table . Each VLAN ID can have a membership of multiple ports.')
snVLanCARDirection = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 2), PacketSource()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARDirection.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARDirection.setDescription('The input or output transmission direction for the Rate Limit object.')
snVLanCARRowIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARRowIndex.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARRowIndex.setDescription('The table index for rate limit objects. It increases as the rate limit entries are added. Skips the number when a row is deleted.')
snVLanCARType = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 4), RateLimitType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARType.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARType.setDescription('The type of traffic rate-limited against.')
snVLanCARAccIdx = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARAccIdx.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARAccIdx.setDescription('The index to the access list if RateLimitType is either quickAcc or standardAcc.')
snVLanCARRate = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARRate.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARRate.setDescription('The comitted access rate. This determines the long term average transmission rate. Traffic that falls under this rate always conforms. This is average rate in bits per second.')
snVLanCARLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARLimit.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARLimit.setDescription('This is the normal burst size that determines how large traffic bursts can be before some traffic exceeds the rate limit. This specifies the number of bytes that are guaranteed to be transported by the network at the average rate under normal conditions during committed time interval. This normal burst size is in bytes.')
snVLanCARExtLimit = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARExtLimit.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARExtLimit.setDescription('This is the extended burst limit that determines how large traffic bursts can be before all the traffic exceeds the rate limit. This burst size is in bytes. ')
snVLanCARConformAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 9), RateLimitAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARConformAction.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARConformAction.setDescription('Action to be taken when the traffic is within the Rate Limit. drop drop the packet. xmit transmit the packet. continue continue to evaluate to the subsequent rate limits. precedXmit rewrite the IP precedence and transmit the packet. precedCont rewrite the IP precedence and allow it evaluated by subsequent rate limits.')
snVLanCARExceedAction = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 10), RateLimitAction()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARExceedAction.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARExceedAction.setDescription('Action to be taken when the traffic exceeds the Rate Limit. drop drop the packet. xmit transmit the packet. continue continue to evaluate to the subsequent rate limits. precedXmit rewrite the IP precedence and transmit the packet. precedCont rewrite the IP precedence and allow it evaluated by subsequent rate limits.')
snVLanCARStatSwitchedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 11), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARStatSwitchedPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARStatSwitchedPkts.setDescription('The counter of packets permitted by this rate limit.')
snVLanCARStatSwitchedBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 12), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARStatSwitchedBytes.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARStatSwitchedBytes.setDescription('The counter of bytes permitted by this interface.')
snVLanCARStatFilteredPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 13), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARStatFilteredPkts.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARStatFilteredPkts.setDescription('The counter of packets which exceeded this rate limit.')
snVLanCARStatFilteredBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 14), Counter64()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARStatFilteredBytes.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARStatFilteredBytes.setDescription('The counter of bytes which exceeded this rate limit.')
snVLanCARStatCurBurst = MibTableColumn((1, 3, 6, 1, 4, 1, 11, 2, 3, 7, 11, 12, 1, 3, 17, 1, 1, 1, 15), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: snVLanCARStatCurBurst.setStatus('mandatory')
if mibBuilder.loadTexts: snVLanCARStatCurBurst.setDescription('The current received burst size.')
mibBuilder.exportSymbols("HP-VLAN-CAR-MIB", snVLanCARRate=snVLanCARRate, snVLanCARExtLimit=snVLanCARExtLimit, snVLanCARStatFilteredBytes=snVLanCARStatFilteredBytes, snVLanCARStatCurBurst=snVLanCARStatCurBurst, snVLanCARTable=snVLanCARTable, snVLanCARDirection=snVLanCARDirection, snVLanCARStatFilteredPkts=snVLanCARStatFilteredPkts, snVLanCARStatSwitchedBytes=snVLanCARStatSwitchedBytes, snVLanCARVLanId=snVLanCARVLanId, snVLanCARRowIndex=snVLanCARRowIndex, snVLanCARLimit=snVLanCARLimit, snVLanCARStatSwitchedPkts=snVLanCARStatSwitchedPkts, snVLanCARConformAction=snVLanCARConformAction, snVLanCARs=snVLanCARs, snVLanCAREntry=snVLanCAREntry, snVLanCARAccIdx=snVLanCARAccIdx, snVLanCARType=snVLanCARType, snVLanCARExceedAction=snVLanCARExceedAction)
