#
# PySNMP MIB module TIARA-NETWORKS-SYSTEM-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/TIARA-NETWORKS-SYSTEM-MIB
# Produced by pysmi-0.3.4 at Wed May  1 15:16:35 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, SingleValueConstraint, ConstraintsUnion, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "SingleValueConstraint", "ConstraintsUnion", "ConstraintsIntersection")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Gauge32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, Bits, Counter64, Integer32, Counter32, iso, NotificationType, ModuleIdentity, TimeTicks, Unsigned32, MibIdentifier, ObjectIdentity, IpAddress = mibBuilder.importSymbols("SNMPv2-SMI", "Gauge32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "Bits", "Counter64", "Integer32", "Counter32", "iso", "NotificationType", "ModuleIdentity", "TimeTicks", "Unsigned32", "MibIdentifier", "ObjectIdentity", "IpAddress")
TextualConvention, TruthValue, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "TruthValue", "DisplayString")
tiaraMgmt, = mibBuilder.importSymbols("TIARA-NETWORKS-SMI", "tiaraMgmt")
tiaraSystemMib = ModuleIdentity((1, 3, 6, 1, 4, 1, 3174, 2, 1))
tiaraSystemMib.setRevisions(('1900-08-18 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: tiaraSystemMib.setRevisionsDescriptions(('Initial version of this MIB module.',))
if mibBuilder.loadTexts: tiaraSystemMib.setLastUpdated('0008180000Z')
if mibBuilder.loadTexts: tiaraSystemMib.setOrganization('Tiara Networks, Inc.')
if mibBuilder.loadTexts: tiaraSystemMib.setContactInfo(' Tiara Networks Customer Support 525 Race Street, Suite 100, San Jose, CA 95126 USA Tel: +1 408-216-4700 Fax: +1 408-216-4701 Email: support@tiaranetworks.com')
if mibBuilder.loadTexts: tiaraSystemMib.setDescription('System group for Tiara Networks products.')
systemObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 3174, 2, 1, 1))
dnsGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3174, 2, 1, 2))
systemEnableNotification = MibIdentifier((1, 3, 6, 1, 4, 1, 3174, 2, 1, 3))
systemNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3174, 2, 1, 4))
userAdminGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3174, 2, 1, 5))
ethernetFailOverGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3174, 2, 1, 6))
failOverEnableNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3174, 2, 1, 7))
failOverNotifications = MibIdentifier((1, 3, 6, 1, 4, 1, 3174, 2, 1, 8))
vlanGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 3174, 2, 1, 9))
sysIpAddr = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysIpAddr.setStatus('current')
if mibBuilder.loadTexts: sysIpAddr.setDescription("This entity's IP address.")
sysNetMask = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysNetMask.setStatus('current')
if mibBuilder.loadTexts: sysNetMask.setDescription("This entity's subnet mask.")
sysBroadcast = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 1, 3), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysBroadcast.setStatus('current')
if mibBuilder.loadTexts: sysBroadcast.setDescription("This entity's broadcast address.")
sysVersion = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 1, 4), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysVersion.setStatus('current')
if mibBuilder.loadTexts: sysVersion.setDescription('This variable contains a printable octet string that contains the system bootstrap and software version identification.')
sysHostName = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 1, 6), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysHostName.setStatus('current')
if mibBuilder.loadTexts: sysHostName.setDescription(' Hostname of the system. ')
sysDomainName = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDomainName.setStatus('current')
if mibBuilder.loadTexts: sysDomainName.setDescription(' Domain name of the host. ')
sysAlarmStatus = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("clear", 1), ("minor", 2), ("major", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: sysAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: sysAlarmStatus.setDescription('This variable is set to major when the summary LED on the system is illuminated. This happens when any of the WAN physical interfaces have at least one alarm.')
sysReset = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("other", 1), ("reset", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysReset.setStatus('current')
if mibBuilder.loadTexts: sysReset.setDescription(' Writing a 2 to this object resets the system. ')
sysDateTime = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 1, 11), OctetString().subtype(subtypeSpec=ValueSizeConstraint(10, 10)).setFixedLength(10)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: sysDateTime.setStatus('current')
if mibBuilder.loadTexts: sysDateTime.setDescription(" System date/time -- A date-time specification. -- -- field octets contents range -- ===== ====== ======== ===== -- 1 1 direction from UTC '+' / '-' -- 2 1 hours from UTC 0..23 -- 3 1 minutes from UTC 0..59 -- 4 1 month 1..12 -- 5 1 day 1..31 -- 6 2 year 1970..2100 -- 7 1 hour 0..23 -- 8 1 minutes 0..59 -- 9 1 seconds 0..60 -- (use 60 for leap-second) -- -- For example, Tuesday May 26, 1992 at 1:30:15 PM -- EDT would be displayed as: -- -- 1992-5-26,13:30:15.0,-4:0 -- -- Note that if only local time is known, then -- time zone information (fields 8-10) is not -- present. ")
arpClearAtTable = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 1, 12), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: arpClearAtTable.setStatus('current')
if mibBuilder.loadTexts: arpClearAtTable.setDescription('Perform a clearing of the entire ARP address translation table. MIB II address translation table can be used to delete an individual entry. ')
ipClearRouteTable = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 1, 13), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipClearRouteTable.setStatus('current')
if mibBuilder.loadTexts: ipClearRouteTable.setDescription('Perform a clearing of the entire Routing table. MIB II routing table can be used to delete an individual entry. ')
dnsEnable = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 2, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enabled", 1), ("disabled", 2))).clone('disabled')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsEnable.setStatus('current')
if mibBuilder.loadTexts: dnsEnable.setDescription('Indicates if the DNS feature is enabled or disabled.')
dnsServerTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 1, 2, 2), )
if mibBuilder.loadTexts: dnsServerTable.setStatus('current')
if mibBuilder.loadTexts: dnsServerTable.setDescription('This table lists a maximum of 3 DNS servers dnsEntryStatus variable is used to add an entry or remove an entry from table. The first added entry will be used first. If it is not reachable, the next entry in the list will be tried, and the next one, and so on. When creating a row, send oids for both dnsServerEntryType dnsServerAddr in the same snmp SET request. A row creation request for a secondary request should return a failure unless a primary name server has already been configured.')
dnsServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 1, 2, 2, 1), ).setIndexNames((0, "TIARA-NETWORKS-SYSTEM-MIB", "dnsServerAddr"))
if mibBuilder.loadTexts: dnsServerEntry.setStatus('current')
if mibBuilder.loadTexts: dnsServerEntry.setDescription('A DNS server table entry.')
dnsServerEntryType = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 1, 2, 2, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("invalid", 1), ("primary", 2), ("other", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerEntryType.setStatus('current')
if mibBuilder.loadTexts: dnsServerEntryType.setDescription('To add a new entry to the dnsServerTable, set this object to primary(2) or other(3) for an IP address that is not already in the table. The primary entry will be used first, if it is reachable. Otherwise, one of the other entries will be used. Setting one entry to primary(2) causes any previous primary entry to change to other(3). To remove an entry from the table, set this object to invalid(1). ')
dnsServerAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 1, 2, 2, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: dnsServerAddr.setStatus('current')
if mibBuilder.loadTexts: dnsServerAddr.setDescription('The IP address of a DNS server.')
userName = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 5, 1), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 64)))
if mibBuilder.loadTexts: userName.setStatus('current')
if mibBuilder.loadTexts: userName.setDescription(' Name of the user. ')
tiaraEthernetFailOverTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 1, 6, 1), )
if mibBuilder.loadTexts: tiaraEthernetFailOverTable.setStatus('current')
if mibBuilder.loadTexts: tiaraEthernetFailOverTable.setDescription('A table maintaining failover and holdDown for Ethernet interfaces: tiaraFailOverIndex = Ethernet index tiaraFailOverEnable = Enable Failover tiaraHoldDownTime = Holddown Time ')
tiaraEthernetFailOverEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 1, 6, 1, 1), ).setIndexNames((0, "TIARA-NETWORKS-SYSTEM-MIB", "tiaraFailOverIndex"))
if mibBuilder.loadTexts: tiaraEthernetFailOverEntry.setStatus('current')
if mibBuilder.loadTexts: tiaraEthernetFailOverEntry.setDescription('A failover entry for each Ethernet.')
tiaraFailOverIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 1, 6, 1, 1, 1), Integer32())
if mibBuilder.loadTexts: tiaraFailOverIndex.setStatus('current')
if mibBuilder.loadTexts: tiaraFailOverIndex.setDescription('A numeric index for an Ethernet interface. This value is the same as the ifIndex for Ethernet interface.')
tiaraFailOverEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 1, 6, 1, 1, 2), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tiaraFailOverEnable.setStatus('current')
if mibBuilder.loadTexts: tiaraFailOverEnable.setDescription('This object toggles the failover enable mode for a particular Ethernet interface. The default mode is failover disabled. At present this is only applicable for data using source forwarding on an Ethernet interface. If failover is enabled on a particular Ethernet interface and the Ethernet interface link goes down, source forwarded traffic will switch over to the other Ethernet interface.')
tiaraHoldDownTime = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 1, 6, 1, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(3, 900))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: tiaraHoldDownTime.setStatus('current')
if mibBuilder.loadTexts: tiaraHoldDownTime.setDescription('The time, in seconds, that an Ethernet interface should be in holdDown when it receives an up signal. In other words, no source forwarding traffic should be sent on the Ethernet interface during the holdDown time period. The default is 3 seconds and the maximum is 900 seconds (15 minutes). This applies when failover is enabled on the interface and traffic has switched over to the other Ethernet interface .')
enableFailOverNotification = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 7, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableFailOverNotification.setStatus('current')
if mibBuilder.loadTexts: enableFailOverNotification.setDescription('Indicates whether the system produces the failOverNotification trap. The default is yes. ')
enableFailOverFailNotification = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 7, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableFailOverFailNotification.setStatus('current')
if mibBuilder.loadTexts: enableFailOverFailNotification.setDescription('Indicates whether the system produces the failOverFailNotification trap. The default is yes. ')
failOverNotification = NotificationType((1, 3, 6, 1, 4, 1, 3174, 2, 1, 8) + (0,1)).setObjects(("TIARA-NETWORKS-SYSTEM-MIB", "tiaraFailOverIndex"))
if mibBuilder.loadTexts: failOverNotification.setDescription(' A failOverNotification is sent on a successful fail over. ')
failOverFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 3174, 2, 1, 8) + (0,2)).setObjects(("TIARA-NETWORKS-SYSTEM-MIB", "tiaraFailOverIndex"))
if mibBuilder.loadTexts: failOverFailNotification.setDescription(' A failOverFailNotification is sent when a fail over to the other port fails. ')
vlanType = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanType.setStatus('current')
if mibBuilder.loadTexts: vlanType.setDescription('VLAN Type.')
vlanStatsTable = MibTable((1, 3, 6, 1, 4, 1, 3174, 2, 1, 9, 2), )
if mibBuilder.loadTexts: vlanStatsTable.setStatus('current')
if mibBuilder.loadTexts: vlanStatsTable.setDescription('VLAN Table.')
vlanStatsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 3174, 2, 1, 9, 2, 1), ).setIndexNames((0, "TIARA-NETWORKS-SYSTEM-MIB", "vlanTag"))
if mibBuilder.loadTexts: vlanStatsEntry.setStatus('current')
if mibBuilder.loadTexts: vlanStatsEntry.setDescription('A VLAN table entry.')
vlanTag = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 1, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTag.setStatus('current')
if mibBuilder.loadTexts: vlanTag.setDescription('VLAN ID (Tag).')
vlanInterfaceList = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 1, 9, 2, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanInterfaceList.setStatus('current')
if mibBuilder.loadTexts: vlanInterfaceList.setDescription('VLAN Interface List.')
vlanTxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 1, 9, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanTxPkts.setStatus('current')
if mibBuilder.loadTexts: vlanTxPkts.setDescription('Packets transmitted on this VLAN.')
vlanRxPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 1, 9, 2, 1, 4), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanRxPkts.setStatus('current')
if mibBuilder.loadTexts: vlanRxPkts.setDescription('Packets received on this VLAN.')
vlanDroppedPkts = MibTableColumn((1, 3, 6, 1, 4, 1, 3174, 2, 1, 9, 2, 1, 5), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: vlanDroppedPkts.setStatus('current')
if mibBuilder.loadTexts: vlanDroppedPkts.setDescription('Packets dropped on this VLAN.')
enableSysShutDownNotification = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 3, 1), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableSysShutDownNotification.setStatus('current')
if mibBuilder.loadTexts: enableSysShutDownNotification.setDescription('Indicates whether the system produces the shutDownNotification TRAP. The default is yes. ')
enableUserLoginNotification = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 3, 2), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableUserLoginNotification.setStatus('current')
if mibBuilder.loadTexts: enableUserLoginNotification.setDescription('Indicates whether the system produces the userLoginNotification TRAP. The default is yes. ')
enableUserLogOffNotification = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 3, 3), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableUserLogOffNotification.setStatus('current')
if mibBuilder.loadTexts: enableUserLogOffNotification.setDescription('Indicates whether the system produces the userLoginOffNotification TRAP. The default is yes. ')
enableUserLoginFailNotification = MibScalar((1, 3, 6, 1, 4, 1, 3174, 2, 1, 3, 4), TruthValue().clone('true')).setMaxAccess("readwrite")
if mibBuilder.loadTexts: enableUserLoginFailNotification.setStatus('current')
if mibBuilder.loadTexts: enableUserLoginFailNotification.setDescription('Indicates whether the system produces the userLoginFailNotification TRAP. the default is yes. ')
shutDownNotification = NotificationType((1, 3, 6, 1, 4, 1, 3174, 2, 1, 4) + (0,1))
if mibBuilder.loadTexts: shutDownNotification.setDescription(' A shutDownNotification is sent for the reboot command. ')
userLoginNotification = NotificationType((1, 3, 6, 1, 4, 1, 3174, 2, 1, 4) + (0,2)).setObjects(("TIARA-NETWORKS-SYSTEM-MIB", "userName"))
if mibBuilder.loadTexts: userLoginNotification.setDescription(' A userAccessNotification is sent when a user logs in successfully. ')
userLogOffNotification = NotificationType((1, 3, 6, 1, 4, 1, 3174, 2, 1, 4) + (0,3)).setObjects(("TIARA-NETWORKS-SYSTEM-MIB", "userName"))
if mibBuilder.loadTexts: userLogOffNotification.setDescription(' A userAccessNotification is sent when a user logs off. ')
userLoginFailNotification = NotificationType((1, 3, 6, 1, 4, 1, 3174, 2, 1, 4) + (0,4)).setObjects(("TIARA-NETWORKS-SYSTEM-MIB", "userName"))
if mibBuilder.loadTexts: userLoginFailNotification.setDescription(' A userAccessNotification is sent when a user login fails. ')
mibBuilder.exportSymbols("TIARA-NETWORKS-SYSTEM-MIB", vlanTxPkts=vlanTxPkts, failOverNotifications=failOverNotifications, dnsServerEntry=dnsServerEntry, systemNotifications=systemNotifications, vlanType=vlanType, sysNetMask=sysNetMask, ethernetFailOverGroup=ethernetFailOverGroup, enableSysShutDownNotification=enableSysShutDownNotification, userLoginNotification=userLoginNotification, tiaraEthernetFailOverEntry=tiaraEthernetFailOverEntry, userLoginFailNotification=userLoginFailNotification, failOverFailNotification=failOverFailNotification, userLogOffNotification=userLogOffNotification, enableUserLoginNotification=enableUserLoginNotification, dnsServerEntryType=dnsServerEntryType, sysReset=sysReset, vlanStatsTable=vlanStatsTable, dnsGroup=dnsGroup, tiaraEthernetFailOverTable=tiaraEthernetFailOverTable, ipClearRouteTable=ipClearRouteTable, vlanInterfaceList=vlanInterfaceList, PYSNMP_MODULE_ID=tiaraSystemMib, arpClearAtTable=arpClearAtTable, sysVersion=sysVersion, userName=userName, enableUserLogOffNotification=enableUserLogOffNotification, enableUserLoginFailNotification=enableUserLoginFailNotification, failOverEnableNotifications=failOverEnableNotifications, dnsServerTable=dnsServerTable, failOverNotification=failOverNotification, sysBroadcast=sysBroadcast, sysDomainName=sysDomainName, tiaraFailOverEnable=tiaraFailOverEnable, systemObjects=systemObjects, shutDownNotification=shutDownNotification, enableFailOverNotification=enableFailOverNotification, tiaraSystemMib=tiaraSystemMib, vlanDroppedPkts=vlanDroppedPkts, tiaraHoldDownTime=tiaraHoldDownTime, sysDateTime=sysDateTime, userAdminGroup=userAdminGroup, sysHostName=sysHostName, sysAlarmStatus=sysAlarmStatus, dnsServerAddr=dnsServerAddr, dnsEnable=dnsEnable, tiaraFailOverIndex=tiaraFailOverIndex, systemEnableNotification=systemEnableNotification, vlanRxPkts=vlanRxPkts, sysIpAddr=sysIpAddr, vlanStatsEntry=vlanStatsEntry, vlanTag=vlanTag, enableFailOverFailNotification=enableFailOverFailNotification, vlanGroup=vlanGroup)
