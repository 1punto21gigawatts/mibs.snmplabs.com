#
# PySNMP MIB module HUAWEI-OSPFV3-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/HUAWEI-OSPFV3-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:47:38 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ValueRangeConstraint, ConstraintsIntersection, ConstraintsUnion, ValueSizeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ValueRangeConstraint", "ConstraintsIntersection", "ConstraintsUnion", "ValueSizeConstraint")
hwDatacomm, = mibBuilder.importSymbols("HUAWEI-MIB", "hwDatacomm")
InterfaceIndex, = mibBuilder.importSymbols("IF-MIB", "InterfaceIndex")
InetAddressType, InetAddress, InetAddressPrefixLength = mibBuilder.importSymbols("INET-ADDRESS-MIB", "InetAddressType", "InetAddress", "InetAddressPrefixLength")
DesignatedRouterPriority, BigMetric, HelloRange, Status, Metric = mibBuilder.importSymbols("OSPF-MIB", "DesignatedRouterPriority", "BigMetric", "HelloRange", "Status", "Metric")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, Integer32, MibScalar, MibTable, MibTableRow, MibTableColumn, Unsigned32, iso, Counter32, NotificationType, mib_2, Counter64, Gauge32, IpAddress, MibIdentifier, ModuleIdentity, ObjectIdentity, Bits = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Integer32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Unsigned32", "iso", "Counter32", "NotificationType", "mib-2", "Counter64", "Gauge32", "IpAddress", "MibIdentifier", "ModuleIdentity", "ObjectIdentity", "Bits")
TruthValue, RowStatus, TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "RowStatus", "TextualConvention", "DisplayString")
hwOspfv3 = ModuleIdentity((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147))
hwOspfv3.setRevisions(('2015-05-03 11:10', '2015-04-03 11:10', '2007-06-12 21:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: hwOspfv3.setRevisionsDescriptions(('Added hwOspfv3IntraAreaRouterIdConflictRecovered to indicates process id', 'Added hwOspfv3IntraAreaRouterIdConflictRecovered to indicates the routerid conflict recovered', 'Initial version, published as RFC xxxx',))
if mibBuilder.loadTexts: hwOspfv3.setLastUpdated('201505031110Z')
if mibBuilder.loadTexts: hwOspfv3.setOrganization('Huawei Technologies Co.,Ltd.')
if mibBuilder.loadTexts: hwOspfv3.setContactInfo("Huawei Industrial Base Bantian, Longgang Shenzhen 518129 People's Republic of China Website: http://www.huawei.com Email: support@huawei.com ")
if mibBuilder.loadTexts: hwOspfv3.setDescription('The MIB module for OSPF version 3. Copyright (C) The Internet Society (2006). This version of this MIB module is part of RFC draft-ietf-ospf-ospfv3-mib-11; see the RFC itself for full legal notices.')
class HWOspfv3UpToRefreshIntervalTc(TextualConvention, Unsigned32):
    description = 'The values one might be able to configure for variables bounded by the Refresh Interval'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 3600)

class HWOspfv3DeadIntRangeTc(TextualConvention, Unsigned32):
    description = 'The range, in seconds, of dead interval value.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 65535)

class HWOspfv3RouterIdTc(TextualConvention, Unsigned32):
    description = "A 32-bit, unsigned integer uniquely identifying the router in the Autonomous System. To ensure uniqueness, this may default to the value of one of the router's IPv4 host addresses if IPv4 is configured on the router."
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class HWOspfv3LsIdTC(TextualConvention, Unsigned32):
    reference = 'OSPF Version 2, Section 12.1.4, Link State ID'
    description = 'A unique 32-bit identifier of the piece of the routing domain that is being described by a link state advertisement. In contrast to OSPFv2, the Link State ID (LSID) has no addressing semantics.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(1, 4294967295)

class HWOspfv3AreaIdTc(TextualConvention, Unsigned32):
    description = 'An OSPFv3 Area Identifier'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 4294967295)

class HWOspfv3IfInstIdTc(TextualConvention, Unsigned32):
    description = 'An OSPFv3 interface instance ID'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ValueRangeConstraint(0, 255)

class HWOspfv3LsaSequenceTC(TextualConvention, Integer32):
    reference = 'OSPF Version 2, Section 12.1.6, LS sequence number'
    description = 'The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number, the more recent the advertisement.'
    status = 'current'
    displayHint = 'd'

class HWOspfv3LsaAgeTC(TextualConvention, Unsigned32):
    reference = 'OSPF Version 2, Section 12.1.1, LS age; Extending OSPF to Support Demand Circuits, Section 2.2, The LS age field'
    description = 'The age of the link state advertisement in seconds. The high-order bit of the LS age field is considered the DoNotAge bit for support of on-demand circuits.'
    status = 'current'
    displayHint = 'd'
    subtypeSpec = Unsigned32.subtypeSpec + ConstraintsUnion(ValueRangeConstraint(0, 3600), ValueRangeConstraint(32768, 36368), )
class HWHelloRange(TextualConvention, Integer32):
    description = 'The range of intervals on which hello messages are exchanged.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ValueRangeConstraint(0, 65535)

hwOspfv3Notifications = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0))
hwOspfv3Objects = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1))
hwOspfv3Conformance = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2))
hwOspfv3GeneralGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1))
hwOspfv3RouterId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 1), HWOspfv3RouterIdTc()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOspfv3RouterId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3RouterId.setDescription("A 32-bit integer uniquely identifying the router in the Autonomous System. To ensure uniqueness, this may default to the value of one of the router's IPv4 host addresses, represented as a 32-bit unsigned integer, if IPv4 is configured on the router.")
hwOspfv3AdminStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 2), Status()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOspfv3AdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AdminStatus.setDescription("The administrative status of OSPFv3 in the router. The value 'enabled' denotes that the OSPFv3 Process is active on at least one interface; 'disabled' disables it on all interfaces.")
hwOspfv3VersionNumber = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(3))).clone(namedValues=NamedValues(("version3", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VersionNumber.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VersionNumber.setDescription('The version number of OSPF for IPv6 is 3.')
hwOspfv3AreaBdrRtrStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AreaBdrRtrStatus.setReference('OSPF Version 2, Section 3 Splitting the AS into Areas')
if mibBuilder.loadTexts: hwOspfv3AreaBdrRtrStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaBdrRtrStatus.setDescription('A flag to note whether this router is an area border router.')
hwOspfv3AsBdrRtrStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOspfv3AsBdrRtrStatus.setReference('OSPF Version 2, Section 3.3 Classification of routers')
if mibBuilder.loadTexts: hwOspfv3AsBdrRtrStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AsBdrRtrStatus.setDescription('A flag to note whether this router is configured as an Autonomous System border router.')
hwOspfv3AsScopeLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AsScopeLsaCount.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AsScopeLsaCount.setDescription('The number of AS-Scope (e.g. AS-External) link state advertisements in the link state database.')
hwOspfv3AsScopeLsaCksumSum = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AsScopeLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AsScopeLsaCksumSum.setDescription("The 32-bit unsigned sum of the LS checksums of the AS-scoped link state advertisements contained in the link state database. This sum can be used to determine if there has been a change in a router's link state database, and to compare the link state database of two routers.")
hwOspfv3OriginateNewLsas = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 8), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3OriginateNewLsas.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3OriginateNewLsas.setDescription('The number of new link-state advertisements that have been originated. This number is incremented each time the router originates a new LSA.')
hwOspfv3RxNewLsas = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3RxNewLsas.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3RxNewLsas.setDescription('The number of link state advertisements received determined to be new instantiations. This number does not include newer instantiations of self-originated link state advertisements.')
hwOspfv3ExtLsaCount = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3ExtLsaCount.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3ExtLsaCount.setDescription('The number of AS-Scope External(LS type 0x4005) link state advertisements in the link state database')
hwOspfv3ExtAreaLsdbLimit = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(-1, 2147483647))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOspfv3ExtAreaLsdbLimit.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3ExtAreaLsdbLimit.setDescription("The maximum number of non-default AS-external-LSAs entries that can be stored in the link state database. If the value is -1, then there is no limit. When the number of non-default AS-external-LSAs in a router's link-state database reaches ospfv3ExtAreaLsdbLimit, the router enters Overflow state. The router never holds more than ospfv3ExtAreaLsdbLimit non-default AS-external-LSAs in its database. Ospfv3ExtAreaLsdbLimit MUST be set identically in all routers attached to the OSPFv3 backbone and/or any regular OSPFv3 area. (i.e., OSPFv3 stub areas and NSSAs are excluded).")
hwOspfv3RestartSupport = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("none", 1), ("plannedOnly", 2), ("plannedAndUnplanned", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOspfv3RestartSupport.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3RestartSupport.setDescription("The router's support for OSPFv3 Graceful restart. Options include: no restart support, only planned restarts or both planned and unplanned restarts.")
hwOspfv3RestartInterval = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 13), HWOspfv3UpToRefreshIntervalTc()).setUnits('seconds').setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOspfv3RestartInterval.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3RestartInterval.setDescription('Configured OSPFv3 Graceful restart timeout interval.')
hwOspfv3RestartStatus = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notRestarting", 1), ("plannedRestart", 2), ("unplannedRestart", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3RestartStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3RestartStatus.setDescription('The current status of OSPFv3 Graceful restart capability.')
hwOspfv3RestartAge = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 15), HWOspfv3UpToRefreshIntervalTc()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3RestartAge.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3RestartAge.setDescription('Remaining time in current OSPFv3 Graceful restart interval.')
hwOspfv3RestartExitRc = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3RestartExitRc.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3RestartExitRc.setDescription('Describes the outcome of the last attempt at a Graceful restart. none:............no restart has yet been attempted. inProgress:......a restart attempt is currently underway. completed:.......the last restart completed successfully. timedOut:........the last restart timed out. topologyChanged:.the last restart was aborted due to a topology change.')
hwOspfv3NotificationEnable = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 17), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOspfv3NotificationEnable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NotificationEnable.setDescription('If this object is set to true(1), then it enables the generation of OSPFv3 Notifications. If it is set to false(2), these notifications are not generated. Configured values MUST survive an agent reboot.')
hwOspfv3ReferenceBandwidth = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 1, 18), Unsigned32().clone(100000)).setMaxAccess("readwrite")
if mibBuilder.loadTexts: hwOspfv3ReferenceBandwidth.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3ReferenceBandwidth.setDescription('Reference bandwidth in kilobits per second for calculating default interface metrics. The default value is 100,000 KBPS (100 MBPS). This object is persistent, and when written, the entity SHOULD save the change to non-volatile storage.')
hwOspfv3AreaTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2), )
if mibBuilder.loadTexts: hwOspfv3AreaTable.setReference('OSPF Version 2, Section 6 The Area Data Structure')
if mibBuilder.loadTexts: hwOspfv3AreaTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaTable.setDescription("Information describing the configured parameters and cumulative statistics of the router's attached areas.")
hwOspfv3AreaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1), ).setIndexNames((0, "HUAWEI-OSPFV3-MIB", "hwOspfv3AreaId"))
if mibBuilder.loadTexts: hwOspfv3AreaEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaEntry.setDescription("Information describing the configured parameters and cumulative statistics of one of the router's attached areas.")
hwOspfv3AreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1, 1), HWOspfv3AreaIdTc())
if mibBuilder.loadTexts: hwOspfv3AreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: hwOspfv3AreaId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaId.setDescription('A 32-bit integer uniquely identifying an area. Area ID 0 is used for the OSPFv3 backbone.')
hwOspfv3AreaImportAsExtern = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("importExternal", 1), ("importNoExternal", 2), ("importNssa", 3))).clone('importExternal')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3AreaImportAsExtern.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: hwOspfv3AreaImportAsExtern.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaImportAsExtern.setDescription('Indicates whether an area is a Stub area, NSSA, or standard area. AS-scope LSAs are not imported into Stub Areas or NSSAs. NSSAs import AS-External data as NSSA LSAs which have Area-scope')
hwOspfv3AreaSpfRuns = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1, 3), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AreaSpfRuns.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaSpfRuns.setDescription("The number of times that the intra-area route table has been calculated using this area's link state database. This is typically done using Dijkstra's algorithm.")
hwOspfv3AreaBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1, 4), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AreaBdrRtrCount.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaBdrRtrCount.setDescription('The total number of area border routers reachable within this area. This is initially zero, and is calculated in each SPF Pass.')
hwOspfv3AreaAsBdrRtrCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1, 5), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AreaAsBdrRtrCount.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaAsBdrRtrCount.setDescription('The total number of Autonomous System border routers reachable within this area. This is initially zero, and is calculated in each SPF Pass.')
hwOspfv3AreaScopeLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1, 6), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AreaScopeLsaCount.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaScopeLsaCount.setDescription("The total number of Area-Scope link state advertisements in this area's link state database.")
hwOspfv3AreaScopeLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1, 7), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AreaScopeLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaScopeLsaCksumSum.setDescription("The 32-bit unsigned sum of the Area-Scope link state advertisements' LS checksums contained in this area's link state database. The sum can be used to determine if there has been a change in a router's link state database, and to compare the link-state database of two routers.")
hwOspfv3AreaSummary = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("noAreaSummary", 1), ("sendAreaSummary", 2))).clone('sendAreaSummary')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3AreaSummary.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaSummary.setDescription('The variable ospfv3AreaSummary controls the import of Inter-Area LSAs into stub and NSSA areas. It has no effect on other areas. If it is noAreaSummary, the router will neither originate nor propagate Inter-Area LSAs into the stub or NSSA area. It will rely entirely on its default route. If it is sendAreaSummary, the router will both summarize and propagate Inter-Area LSAs.')
hwOspfv3AreaRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1, 9), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3AreaRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaRowStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
hwOspfv3AreaStubMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1, 10), BigMetric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3AreaStubMetric.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaStubMetric.setDescription('The metric value advertised for the default route into Stub and NSSA areas.')
hwOspfv3AreaNssaTranslatorRole = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("always", 1), ("candidate", 2))).clone('candidate')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3AreaNssaTranslatorRole.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaNssaTranslatorRole.setDescription("Indicates an NSSA border router's policy to perform NSSA translation of NSSA-LSAs into AS-External-LSAs.")
hwOspfv3AreaNssaTranslatorState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1, 12), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enabled", 1), ("elected", 2), ("disabled", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AreaNssaTranslatorState.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaNssaTranslatorState.setDescription("Indicates if and how an NSSA border router is performing NSSA translation of NSSA-LSAs into AS-External-LSAs. When this object is set to 'enabled', the NSSA border router's ospfv3AreaNssaTranslatorRole has been set to 'always'. When this object is set to 'elected', a candidate NSSA border router is translating NSSA-LSAs into AS-External-LSAs. When this object is set to 'disabled', a candidate NSSA Border router is NOT translating NSSA-LSAs into AS-External-LSAs.")
hwOspfv3AreaNssaTranslatorStabInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1, 13), Unsigned32().clone(40)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3AreaNssaTranslatorStabInterval.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaNssaTranslatorStabInterval.setDescription('The stability interval defined as the number of seconds after an elected translator determines its services are no longer required that it should continue to perform its translation duties.')
hwOspfv3AreaNssaTranslatorEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 2, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AreaNssaTranslatorEvents.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaNssaTranslatorEvents.setDescription('Indicates the number of Translator state changes that have occurred since the last start-up of the OSPFv3 routing process. Discontinuities in the value of this counter can occur at re-initialization of the management system and at other times as indicated by the value of ospfv3DiscontinuityTime.')
hwOspfv3AsLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 3), )
if mibBuilder.loadTexts: hwOspfv3AsLsdbTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AsLsdbTable.setDescription("The OSPFv3 Process's AS-Scope Link State Database.")
hwOspfv3AsLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 3, 1), ).setIndexNames((0, "HUAWEI-OSPFV3-MIB", "hwOspfv3AsLsdbType"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3AsLsdbRouterId"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3AsLsdbLsId"))
if mibBuilder.loadTexts: hwOspfv3AsLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AsLsdbEntry.setDescription('A single AS-Scope Link State Advertisement.')
hwOspfv3AsLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 3, 1, 1), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: hwOspfv3AsLsdbType.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AsLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertisement format. AS-Scope LSAs not recognized by the router may be stored in the database.')
hwOspfv3AsLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 3, 1, 2), HWOspfv3RouterIdTc())
if mibBuilder.loadTexts: hwOspfv3AsLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: hwOspfv3AsLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AsLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
hwOspfv3AsLsdbLsId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 3, 1, 3), Unsigned32())
if mibBuilder.loadTexts: hwOspfv3AsLsdbLsId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AsLsdbLsId.setDescription('The Link State ID is an LS Type Specific field containing a unique identifier; it identifies the piece of the routing domain that is being described by the advertisement. In contrast to OSPFv2, the LSID has no addressing semantics.')
hwOspfv3AsLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 3, 1, 4), HWOspfv3LsaSequenceTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AsLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: hwOspfv3AsLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AsLsdbSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
hwOspfv3AsLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 3, 1, 5), HWOspfv3LsaAgeTC()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AsLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: hwOspfv3AsLsdbAge.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AsLsdbAge.setDescription('This field is the age of the link state advertisement in seconds.')
hwOspfv3AsLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 3, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AsLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: hwOspfv3AsLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AsLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
hwOspfv3AsLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 3, 1, 7), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AsLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AsLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
hwOspfv3AsLsdbTypeKnown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 3, 1, 8), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AsLsdbTypeKnown.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AsLsdbTypeKnown.setDescription('Indicates whether the LSA type is recognized by this Router.')
hwOspfv3AreaLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 4), )
if mibBuilder.loadTexts: hwOspfv3AreaLsdbTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbTable.setDescription("The OSPFv3 Process's Area-Scope Link State Database.")
hwOspfv3AreaLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 4, 1), ).setIndexNames((0, "HUAWEI-OSPFV3-MIB", "hwOspfv3AreaLsdbAreaId"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3AreaLsdbType"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3AreaLsdbRouterId"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3AreaLsdbLsId"))
if mibBuilder.loadTexts: hwOspfv3AreaLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbEntry.setDescription('A single Area-Scope Link State Advertisement.')
hwOspfv3AreaLsdbAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 4, 1, 1), HWOspfv3AreaIdTc())
if mibBuilder.loadTexts: hwOspfv3AreaLsdbAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbAreaId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbAreaId.setDescription('The 32-bit identifier of the Area from which the LSA was received.')
hwOspfv3AreaLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: hwOspfv3AreaLsdbType.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertisement format. Area-Scope LSAs unrecognized by the router are also stored in this database.')
hwOspfv3AreaLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 4, 1, 3), HWOspfv3RouterIdTc())
if mibBuilder.loadTexts: hwOspfv3AreaLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbRouterId.setDescription('The 32-bit number that uniquely identifies the originating router in the Autonomous System.')
hwOspfv3AreaLsdbLsId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 4, 1, 4), Unsigned32())
if mibBuilder.loadTexts: hwOspfv3AreaLsdbLsId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbLsId.setDescription('The Link State ID is an LS Type Specific field containing a unique identifier; it identifies the piece of the routing domain that is being described by the advertisement. In contrast to OSPFv2, the LSID has no addressing semantics.')
hwOspfv3AreaLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 4, 1, 5), HWOspfv3LsaSequenceTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AreaLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
hwOspfv3AreaLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 4, 1, 6), HWOspfv3LsaAgeTC()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AreaLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbAge.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbAge.setDescription('This field is the age of the link state advertisement in seconds.')
hwOspfv3AreaLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 4, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AreaLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
hwOspfv3AreaLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 4, 1, 8), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AreaLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
hwOspfv3AreaLsdbTypeKnown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 4, 1, 9), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AreaLsdbTypeKnown.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbTypeKnown.setDescription('Indicates whether the LSA type is recognized by this Router.')
hwOspfv3LinkLsdbTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 5), )
if mibBuilder.loadTexts: hwOspfv3LinkLsdbTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbTable.setDescription("The OSPFv3 Process's Link-Scope Link State Database.")
hwOspfv3LinkLsdbEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 5, 1), ).setIndexNames((0, "HUAWEI-OSPFV3-MIB", "hwOspfv3LinkLsdbIfIndex"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3LinkLsdbIfInstId"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3LinkLsdbType"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3LinkLsdbRouterId"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3LinkLsdbLsId"))
if mibBuilder.loadTexts: hwOspfv3LinkLsdbEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbEntry.setDescription('A single Link-Scope Link State Advertisement.')
hwOspfv3LinkLsdbIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 5, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwOspfv3LinkLsdbIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbIfIndex.setDescription('The identifier of the link from which the LSA was received.')
hwOspfv3LinkLsdbIfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 5, 1, 2), HWOspfv3IfInstIdTc())
if mibBuilder.loadTexts: hwOspfv3LinkLsdbIfInstId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbIfInstId.setDescription('The identifier of the interface instance from which the LSA was received.')
hwOspfv3LinkLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 5, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 4294967295)))
if mibBuilder.loadTexts: hwOspfv3LinkLsdbType.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbType.setDescription('The type of the link state advertisement. Each link state type has a separate advertisement format. Link-Scope LSAs unrecognized by the router are also stored in this database.')
hwOspfv3LinkLsdbRouterId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 5, 1, 4), HWOspfv3RouterIdTc())
if mibBuilder.loadTexts: hwOspfv3LinkLsdbRouterId.setReference('OSPF Version 2, Appendix C.1 Global parameters')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbRouterId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbRouterId.setDescription('The 32 bit number that uniquely identifies the originating router in the Autonomous System.')
hwOspfv3LinkLsdbLsId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 5, 1, 5), HWOspfv3LsIdTC())
if mibBuilder.loadTexts: hwOspfv3LinkLsdbLsId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbLsId.setDescription('The Link State ID is an LS Type Specific field containing a unique identifier; it identifies the piece of the routing domain that is being described by the advertisement. In contrast to OSPFv2, the LSID has no addressing semantics.')
hwOspfv3LinkLsdbSequence = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 5, 1, 6), HWOspfv3LsaSequenceTC()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3LinkLsdbSequence.setReference('OSPF Version 2, Section 12.1.6 LS sequence number')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbSequence.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbSequence.setDescription('The sequence number field is a signed 32-bit integer. It is used to detect old and duplicate link state advertisements. The space of sequence numbers is linearly ordered. The larger the sequence number the more recent the advertisement.')
hwOspfv3LinkLsdbAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 5, 1, 7), HWOspfv3LsaAgeTC()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3LinkLsdbAge.setReference('OSPF Version 2, Section 12.1.1 LS age')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbAge.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbAge.setDescription('This field is the age of the link state advertisement in seconds.')
hwOspfv3LinkLsdbChecksum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 5, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3LinkLsdbChecksum.setReference('OSPF Version 2, Section 12.1.7 LS checksum')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbChecksum.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbChecksum.setDescription("This field is the checksum of the complete contents of the advertisement, excepting the age field. The age field is excepted so that an advertisement's age can be incremented without updating the checksum. The checksum used is the same that is used for ISO connectionless datagrams; it is commonly referred to as the Fletcher checksum.")
hwOspfv3LinkLsdbAdvertisement = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 5, 1, 9), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3LinkLsdbAdvertisement.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbAdvertisement.setDescription('The entire Link State Advertisement, including its header.')
hwOspfv3LinkLsdbTypeKnown = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 5, 1, 10), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3LinkLsdbTypeKnown.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbTypeKnown.setDescription('Indicates whether the LSA type is recognized by this Router.')
hwOspfv3IfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6), )
if mibBuilder.loadTexts: hwOspfv3IfTable.setReference('OSPF Version 2, Appendix C.3 Router interface parameters')
if mibBuilder.loadTexts: hwOspfv3IfTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfTable.setDescription('The OSPFv3 Interface Table describes the interfaces from the viewpoint of OSPFv3.')
hwOspfv3IfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1), ).setIndexNames((0, "HUAWEI-OSPFV3-MIB", "hwOspfv3IfIndex"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3IfInstId"))
if mibBuilder.loadTexts: hwOspfv3IfEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfEntry.setDescription('The OSPFv3 Interface Entry describes one interface from the viewpoint of OSPFv3.')
hwOspfv3IfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwOspfv3IfIndex.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfIndex.setDescription('The interface index of this OSPFv3 interface. It corresponds to the interface index of the IPv6 interface on which OSPFv3 is configured.')
hwOspfv3IfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 2), HWOspfv3IfInstIdTc())
if mibBuilder.loadTexts: hwOspfv3IfInstId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfInstId.setDescription('Enables multiple interface instances of OSPFv3 to be run over a single link. Each protocol instance would be assigned a separate ID. This ID has local link significance only.')
hwOspfv3IfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 3), HWOspfv3AreaIdTc()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3IfAreaId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfAreaId.setDescription('A 32-bit integer uniquely identifying the area to which the interface connects. Area ID 0 is used for the OSPFv3 backbone.')
hwOspfv3IfType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("broadcast", 1), ("nbma", 2), ("pointToPoint", 3), ("loopback", 4), ("pointToMultipoint", 5), ("p2mpNonbroadcast", 6)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3IfType.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfType.setDescription('The OSPFv3 interface type.')
hwOspfv3IfAdminStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 5), Status().clone('enabled')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3IfAdminStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfAdminStatus.setDescription("The OSPFv3 interface's administrative status. The value formed on the interface, and the interface will be advertised as an internal route to some area. The value 'disabled' denotes that the interface is external to OSPFv3.")
hwOspfv3IfRtrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 6), DesignatedRouterPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3IfRtrPriority.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfRtrPriority.setDescription('The priority of this interface. Used in multi-access networks, this field is used in the designated router election algorithm. The value 0 signifies that the router is not eligible to become the designated router on this particular network. In the event of a tie in this value, routers will use their Router ID as a tie breaker.')
hwOspfv3IfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 7), HWOspfv3UpToRefreshIntervalTc().clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3IfTransitDelay.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfTransitDelay.setDescription('The estimated number of seconds it takes to transmit a link state update packet over this interface.')
hwOspfv3IfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 8), HWOspfv3UpToRefreshIntervalTc().clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3IfRetransInterval.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfRetransInterval.setDescription('The number of seconds between link state advertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database description and link state request packets.')
hwOspfv3IfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 9), HWHelloRange().clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3IfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the router sends on the interface. This value must be the same for all routers attached to a common network.')
hwOspfv3IfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 10), HWOspfv3DeadIntRangeTc().clone(40)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3IfRtrDeadInterval.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before its neighbors declare the router down on the interface. This should be some multiple of the Hello interval. This value must be the same for all routers attached to a common network.")
hwOspfv3IfState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 11), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("down", 1), ("loopback", 2), ("waiting", 3), ("pointToPoint", 4), ("designatedRouter", 5), ("backupDesignatedRouter", 6), ("otherDesignatedRouter", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3IfState.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfState.setDescription('The OSPFv3 Interface State.')
hwOspfv3IfDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 12), HWOspfv3RouterIdTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3IfDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfDesignatedRouter.setDescription('The Router ID of the Designated Router.')
hwOspfv3IfBackupDesignatedRouter = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 13), HWOspfv3RouterIdTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3IfBackupDesignatedRouter.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfBackupDesignatedRouter.setDescription('The Router ID of the Backup Designated Router.')
hwOspfv3IfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 14), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3IfEvents.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfEvents.setDescription('The number of times this OSPFv3 interface has changed its state, or an error has occurred.')
hwOspfv3IfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 15), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3IfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfRowStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
hwOspfv3IfMetricValue = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 16), Metric()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3IfMetricValue.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfMetricValue.setDescription('The metric assigned to this interface. The default value of the Metric is Reference Bandwidth / ifSpeed. The value of the reference bandwidth is configured by the ospfv3ReferenceBandwidth object.')
hwOspfv3IfLinkScopeLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 17), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3IfLinkScopeLsaCount.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfLinkScopeLsaCount.setDescription("The total number of Link-Scope link state advertisements in this link's link state database.")
hwOspfv3IfLinkLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 18), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3IfLinkLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfLinkLsaCksumSum.setDescription("The 32-bit unsigned sum of the Link-Scope link state advertisements' LS checksums contained in this link's link state database. The sum can be used to determine if there has been a change in a router's link state database, and to compare the link state database of two routers.")
hwOspfv3IfPollInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 19), Unsigned32().clone(120)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3IfPollInterval.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfPollInterval.setDescription('The larger time interval, in seconds, between the Hello packets sent to an inactive non-broadcast multi-access neighbor.')
hwOspfv3IfMulticastForwarding = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 6, 1, 20), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("blocked", 1), ("multicast", 2), ("unicast", 3))).clone('blocked')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3IfMulticastForwarding.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfMulticastForwarding.setDescription('The way multicasts should forwarded on this interface; not forwarded, forwarded as data link multicasts, or forwarded as data link unicasts. Data link multicasting is not meaningful on point to point and NBMA interfaces, and setting ospfv3MulticastForwarding to 0 effectively disables all multicast forwarding.')
hwOspfv3VirtIfTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7), )
if mibBuilder.loadTexts: hwOspfv3VirtIfTable.setReference('OSPF Version 2, Appendix C.4 Virtual link parameters')
if mibBuilder.loadTexts: hwOspfv3VirtIfTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfTable.setDescription("Information about this router's virtual interfaces.")
hwOspfv3VirtIfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7, 1), ).setIndexNames((0, "HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfAreaId"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfNeighbor"))
if mibBuilder.loadTexts: hwOspfv3VirtIfEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfEntry.setDescription('Information about a single Virtual Interface.')
hwOspfv3VirtIfAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7, 1, 1), HWOspfv3AreaIdTc())
if mibBuilder.loadTexts: hwOspfv3VirtIfAreaId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfAreaId.setDescription('The Transit Area that the Virtual Link traverses. By definition, this is not Area 0')
hwOspfv3VirtIfNeighbor = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7, 1, 2), HWOspfv3RouterIdTc())
if mibBuilder.loadTexts: hwOspfv3VirtIfNeighbor.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfNeighbor.setDescription('The Router ID of the Virtual Neighbor.')
hwOspfv3VirtIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfIndex.setDescription("The local interface index assigned to this OSPFv3 virtual interface. It is advertised in Hello's sent over the virtual link and in the router's router-LSAs.")
hwOspfv3VirtIfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7, 1, 4), HWOspfv3IfInstIdTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtIfInstId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfInstId.setDescription('Specifies the interface instance ID to be used for the virtual interface. This ID has local link significance only.')
hwOspfv3VirtIfTransitDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7, 1, 5), HWOspfv3UpToRefreshIntervalTc().clone(1)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3VirtIfTransitDelay.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfTransitDelay.setDescription('The estimated number of seconds it takes to transmit a link state update packet over this interface.')
hwOspfv3VirtIfRetransInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7, 1, 6), HWOspfv3UpToRefreshIntervalTc().clone(5)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3VirtIfRetransInterval.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfRetransInterval.setDescription('The number of seconds between link state advertisement retransmissions, for adjacencies belonging to this interface. This value is also used when retransmitting database description and link state request packets. This value should be well over the expected round-trip time.')
hwOspfv3VirtIfHelloInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7, 1, 7), HelloRange().clone(10)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3VirtIfHelloInterval.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfHelloInterval.setDescription('The length of time, in seconds, between the Hello packets that the router sends on the interface. This value must be the same for the virtual neighbor.')
hwOspfv3VirtIfRtrDeadInterval = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7, 1, 8), HWOspfv3DeadIntRangeTc().clone(40)).setUnits('seconds').setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3VirtIfRtrDeadInterval.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfRtrDeadInterval.setDescription("The number of seconds that a router's Hello packets have not been seen before its neighbors declare the router down. This should be some multiple of the Hello interval. This value must be the same for the virtual neighbor.")
hwOspfv3VirtIfState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 4))).clone(namedValues=NamedValues(("down", 1), ("pointToPoint", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtIfState.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfState.setDescription('OSPFv3 virtual interface states. The same encoding as the hwOspfv3IfTable is used.')
hwOspfv3VirtIfEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7, 1, 10), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtIfEvents.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfEvents.setDescription('The number of state changes or error events on this Virtual Link')
hwOspfv3VirtIfRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7, 1, 11), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3VirtIfRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfRowStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
hwOspfv3VirtIfLinkScopeLsaCount = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7, 1, 12), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtIfLinkScopeLsaCount.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfLinkScopeLsaCount.setDescription("The total number of Link-Scope link state advertisements in this virtual link's link state database.")
hwOspfv3VirtIfLinkLsaCksumSum = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 7, 1, 13), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtIfLinkLsaCksumSum.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfLinkLsaCksumSum.setDescription("The 32-bit unsigned sum of the Link-Scope link-state advertisements' LS checksums contained in this virtual link's link-state database. The sum can be used to determine if there has been a change in a router's link state database, and to compare the link state database of two routers.")
hwOspfv3NbrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8), )
if mibBuilder.loadTexts: hwOspfv3NbrTable.setReference('OSPF Version 2, Section 10 The Neighbor Data Structure')
if mibBuilder.loadTexts: hwOspfv3NbrTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrTable.setDescription('A table of non-virtual neighbor information.')
hwOspfv3NbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1), ).setIndexNames((0, "HUAWEI-OSPFV3-MIB", "hwOspfv3NbrIfIndex"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3NbrIfInstId"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3NbrRtrId"))
if mibBuilder.loadTexts: hwOspfv3NbrEntry.setReference('OSPF Version 2, Section 10 The Neighbor Data Structure')
if mibBuilder.loadTexts: hwOspfv3NbrEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrEntry.setDescription('The information regarding a single neighbor.')
hwOspfv3NbrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwOspfv3NbrIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrIfIndex.setDescription('The local link ID of the link over which the neighbor can be reached.')
hwOspfv3NbrIfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 2), HWOspfv3IfInstIdTc())
if mibBuilder.loadTexts: hwOspfv3NbrIfInstId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrIfInstId.setDescription('Interface instance over which the neighbor can be reached. This ID has local link significance only.')
hwOspfv3NbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 3), HWOspfv3RouterIdTc())
if mibBuilder.loadTexts: hwOspfv3NbrRtrId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrRtrId.setDescription('A 32-bit integer uniquely identifying the neighboring router in the Autonomous System.')
hwOspfv3NbrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 4), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3NbrAddressType.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrAddressType.setDescription('The address type of ospfv3NbrAddress. Only IPv6 addresses without zone index are expected.')
hwOspfv3NbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 5), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3NbrAddress.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrAddress.setDescription('The IPv6 address of the neighbor associated with the local link.')
hwOspfv3NbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3NbrOptions.setReference('OSPF Version 3, Appendix A.2 the Options field')
if mibBuilder.loadTexts: hwOspfv3NbrOptions.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrOptions.setDescription("A Bit Mask corresponding to the neighbor's options field.")
hwOspfv3NbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 7), DesignatedRouterPriority()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3NbrPriority.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrPriority.setDescription('The priority of this neighbor in the designated router election algorithm. The value 0 signifies that the neighbor is not eligible to become the designated router on this particular network.')
hwOspfv3NbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3NbrState.setReference('OSPF Version 2, Section 10.1 Neighbor States')
if mibBuilder.loadTexts: hwOspfv3NbrState.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrState.setDescription('The State of the relationship with this Neighbor.')
hwOspfv3NbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3NbrEvents.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrEvents.setDescription('The number of times this neighbor relationship has changed state, or an error has occurred.')
hwOspfv3NbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3NbrLsRetransQLen.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrLsRetransQLen.setDescription('The current length of the retransmission queue.')
hwOspfv3NbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3NbrHelloSuppressed.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrHelloSuppressed.setDescription('Indicates whether Hellos are being suppressed to the neighbor')
hwOspfv3NbrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 12), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3NbrIfId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrIfId.setDescription("The interface ID that the neighbor advertises in its Hello Packets on this link, that is, the neighbor's local interface index.")
hwOspfv3NbrRestartHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notHelping", 1), ("helping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3NbrRestartHelperStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrRestartHelperStatus.setDescription('Indicates whether the router is acting as a Graceful restart helper for the neighbor.')
hwOspfv3NbrRestartHelperAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 14), HWOspfv3UpToRefreshIntervalTc()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3NbrRestartHelperAge.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrRestartHelperAge.setDescription('Remaining time in current OSPFv3 Graceful restart interval, if the router is acting as a restart helper for the neighbor.')
hwOspfv3NbrRestartHelperExitRc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 8, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3NbrRestartHelperExitRc.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrRestartHelperExitRc.setDescription('Describes the outcome of the last attempt at acting as a Graceful restart helper for the neighbor. none:............no restart has yet been attempted. inProgress:......a restart attempt is currently underway. completed:.......the last restart completed successfully. timedOut:........the last restart timed out. topologyChanged:.the last restart was aborted due to a topology change.')
hwOspfv3CfgNbrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 9), )
if mibBuilder.loadTexts: hwOspfv3CfgNbrTable.setReference('OSPF Version 2, Section 10 The Neighbor Data Structure')
if mibBuilder.loadTexts: hwOspfv3CfgNbrTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3CfgNbrTable.setDescription('A table of configured, non-virtual neighbor information.')
hwOspfv3CfgNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 9, 1), ).setIndexNames((0, "HUAWEI-OSPFV3-MIB", "hwOspfv3CfgNbrIfIndex"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3CfgNbrIfInstId"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3CfgNbrRtrId"))
if mibBuilder.loadTexts: hwOspfv3CfgNbrEntry.setReference('OSPF Version 2, Section 10 The Neighbor Data Structure')
if mibBuilder.loadTexts: hwOspfv3CfgNbrEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3CfgNbrEntry.setDescription('The information regarding a single configured neighbor or neighbor discovered by lower-level protocols such as Inverse Neighbor Discovery.')
hwOspfv3CfgNbrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 9, 1, 1), InterfaceIndex())
if mibBuilder.loadTexts: hwOspfv3CfgNbrIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3CfgNbrIfIndex.setDescription('The local link ID of the link over which the neighbor can be reached.')
hwOspfv3CfgNbrIfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 9, 1, 2), HWOspfv3IfInstIdTc())
if mibBuilder.loadTexts: hwOspfv3CfgNbrIfInstId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3CfgNbrIfInstId.setDescription('Interface instance over which the neighbor can be reached. This ID has local link significance only.')
hwOspfv3CfgNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 9, 1, 3), HWOspfv3RouterIdTc())
if mibBuilder.loadTexts: hwOspfv3CfgNbrRtrId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3CfgNbrRtrId.setDescription('A 32-bit integer uniquely identifying the static neighbor router in the Autonomous System.')
hwOspfv3CfgNbrPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 9, 1, 4), DesignatedRouterPriority().clone(1)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3CfgNbrPriority.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3CfgNbrPriority.setDescription('The priority of this neighbor in the designated router election algorithm. The value 0 signifies that the neighbor is not eligible to become the designated router on this particular network.')
hwOspfv3CfgNbrRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 9, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3CfgNbrRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3CfgNbrRowStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
hwOspfv3VirtNbrTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10), )
if mibBuilder.loadTexts: hwOspfv3VirtNbrTable.setReference('OSPF Version 2, Section 15 Virtual Links')
if mibBuilder.loadTexts: hwOspfv3VirtNbrTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrTable.setDescription('A table of virtual neighbor information.')
hwOspfv3VirtNbrEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1), ).setIndexNames((0, "HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrArea"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrRtrId"))
if mibBuilder.loadTexts: hwOspfv3VirtNbrEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrEntry.setDescription('Virtual neighbor information.')
hwOspfv3VirtNbrArea = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 1), HWOspfv3AreaIdTc())
if mibBuilder.loadTexts: hwOspfv3VirtNbrArea.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrArea.setDescription('The Transit Area Identifier.')
hwOspfv3VirtNbrRtrId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 2), HWOspfv3RouterIdTc())
if mibBuilder.loadTexts: hwOspfv3VirtNbrRtrId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrRtrId.setDescription('A 32-bit integer uniquely identifying the neighboring router in the Autonomous System.')
hwOspfv3VirtNbrIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 3), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtNbrIfIndex.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrIfIndex.setDescription('The local interface ID for the virtual link over which the neighbor can be reached.')
hwOspfv3VirtNbrIfInstId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 4), HWOspfv3IfInstIdTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtNbrIfInstId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrIfInstId.setDescription('The interface instance for the virtual link over which the neighbor can be reached.')
hwOspfv3VirtNbrAddressType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 5), InetAddressType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtNbrAddressType.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrAddressType.setDescription('The address type of ospfv3VirtNbrAddress. Only IPv6 addresses without zone index are expected.')
hwOspfv3VirtNbrAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 6), InetAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtNbrAddress.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrAddress.setDescription('The IPv6 address advertised by this Virtual Neighbor. It must be a Global scope address.')
hwOspfv3VirtNbrOptions = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtNbrOptions.setReference('OSPF Version 3, Appendix A.2 the Options field')
if mibBuilder.loadTexts: hwOspfv3VirtNbrOptions.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrOptions.setDescription("A Bit Mask corresponding to the neighbor's options field.")
hwOspfv3VirtNbrState = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("down", 1), ("attempt", 2), ("init", 3), ("twoWay", 4), ("exchangeStart", 5), ("exchange", 6), ("loading", 7), ("full", 8)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtNbrState.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrState.setDescription('The state of the Virtual Neighbor Relationship.')
hwOspfv3VirtNbrEvents = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 9), Counter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtNbrEvents.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrEvents.setDescription('The number of times this virtual link has changed its state, or an error has occurred.')
hwOspfv3VirtNbrLsRetransQLen = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 10), Gauge32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtNbrLsRetransQLen.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrLsRetransQLen.setDescription('The current length of the retransmission queue.')
hwOspfv3VirtNbrHelloSuppressed = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 11), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtNbrHelloSuppressed.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrHelloSuppressed.setDescription('Indicates whether Hellos are being suppressed to the neighbor')
hwOspfv3VirtNbrIfId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 12), InterfaceIndex()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtNbrIfId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrIfId.setDescription("The interface ID that the neighbor advertises in its Hello Packets on this virtual link, that is, the neighbor's local interface ID.")
hwOspfv3VirtNbrRestartHelperStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 13), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("notHelping", 1), ("helping", 2)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtNbrRestartHelperStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrRestartHelperStatus.setDescription('Indicates whether the router is acting as a Graceful restart helper for the neighbor.')
hwOspfv3VirtNbrRestartHelperAge = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 14), HWOspfv3UpToRefreshIntervalTc()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtNbrRestartHelperAge.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrRestartHelperAge.setDescription('Remaining time in current OSPFv3 Graceful restart interval, if the router is acting as a restart helper for the neighbor.')
hwOspfv3VirtNbrRestartHelperExitRc = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 10, 1, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("none", 1), ("inProgress", 2), ("completed", 3), ("timedOut", 4), ("topologyChanged", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3VirtNbrRestartHelperExitRc.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrRestartHelperExitRc.setDescription('Describes the outcome of the last attempt at acting as a Graceful restart helper for the neighbor. none:............no restart has yet been attempted. inProgress:......a restart attempt is currently underway. completed:.......the last restart completed successfully. timedOut:........the last restart timed out. topologyChanged:.the last restart was aborted due to a topology change.')
hwOspfv3AreaAggregateTable = MibTable((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 11), )
if mibBuilder.loadTexts: hwOspfv3AreaAggregateTable.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaAggregateTable.setDescription('A range of IPv6 prefixes specified by a prefix/prefix length pair. Note that if ranges are configured such that one range subsumes another range the most specific match is the preferred one.')
hwOspfv3AreaAggregateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 11, 1), ).setIndexNames((0, "HUAWEI-OSPFV3-MIB", "hwOspfv3AreaAggregateAreaId"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3AreaAggregateAreaLsdbType"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3AreaAggregatePrefixType"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3AreaAggregatePrefix"), (0, "HUAWEI-OSPFV3-MIB", "hwOspfv3AreaAggregatePrefixLength"))
if mibBuilder.loadTexts: hwOspfv3AreaAggregateEntry.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: hwOspfv3AreaAggregateEntry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaAggregateEntry.setDescription('A range of IPv6 prefixes specified by a prefix/prefix length pair. Note that if ranges are configured such that one range subsumes another range the most specific match is the preferred one.')
hwOspfv3AreaAggregateAreaId = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 11, 1, 1), HWOspfv3AreaIdTc())
if mibBuilder.loadTexts: hwOspfv3AreaAggregateAreaId.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: hwOspfv3AreaAggregateAreaId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaAggregateAreaId.setDescription('The Area the Address Aggregate is to be found within.')
hwOspfv3AreaAggregateAreaLsdbType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 11, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(8195, 8199))).clone(namedValues=NamedValues(("interAreaPrefixLsa", 8195), ("nssaExternalLsa", 8199))))
if mibBuilder.loadTexts: hwOspfv3AreaAggregateAreaLsdbType.setReference('OSPF Version 2, Appendix A.4.1 The Link State Advertisement header')
if mibBuilder.loadTexts: hwOspfv3AreaAggregateAreaLsdbType.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaAggregateAreaLsdbType.setDescription('The type of the Address Aggregate. This field specifies the Area Lsdb type that this Address Aggregate applies to.')
hwOspfv3AreaAggregatePrefixType = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 11, 1, 4), InetAddressType())
if mibBuilder.loadTexts: hwOspfv3AreaAggregatePrefixType.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaAggregatePrefixType.setDescription('The prefix type of ospfv3AreaAggregatePrefix. Only IPv6 addresses are expected.')
hwOspfv3AreaAggregatePrefix = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 11, 1, 5), InetAddress())
if mibBuilder.loadTexts: hwOspfv3AreaAggregatePrefix.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: hwOspfv3AreaAggregatePrefix.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaAggregatePrefix.setDescription('The IPv6 Prefix.')
hwOspfv3AreaAggregatePrefixLength = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 11, 1, 6), InetAddressPrefixLength().subtype(subtypeSpec=ValueRangeConstraint(1, 128))).setUnits('bits')
if mibBuilder.loadTexts: hwOspfv3AreaAggregatePrefixLength.setReference('OSPF Version 2, Appendix C.2 Area parameters')
if mibBuilder.loadTexts: hwOspfv3AreaAggregatePrefixLength.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaAggregatePrefixLength.setDescription('The length of the prefix (in bits). A prefix can not be shorter than 0 bits.')
hwOspfv3AreaAggregateRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 11, 1, 7), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3AreaAggregateRowStatus.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaAggregateRowStatus.setDescription('This object permits management of the table by facilitating actions such as row creation, construction and destruction. The value of this object has no effect on whether other objects in this conceptual row can be modified.')
hwOspfv3AreaAggregateEffect = MibTableColumn((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 11, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("advertiseMatching", 1), ("doNotAdvertiseMatching", 2))).clone('advertiseMatching')).setMaxAccess("readcreate")
if mibBuilder.loadTexts: hwOspfv3AreaAggregateEffect.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaAggregateEffect.setDescription('Prefixes subsumed by ranges either trigger the advertisement of the indicated aggregate (advertiseMatching), or result in the prefix not being advertised at all outside the area.')
hwOspfv3NotificationEntry = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 12))
hwOspfv3ConfigErrorType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 12, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("badVersion", 1), ("areaMismatch", 2), ("unknownNbmaNbr", 3), ("unknownVirtualNbr", 4), ("helloIntervalMismatch", 5), ("deadIntervalMismatch", 6), ("optionMismatch", 7), ("mtuMismatch", 8), ("duplicateRouterId", 9), ("noError", 10)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwOspfv3ConfigErrorType.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3ConfigErrorType.setDescription('Potential types of configuration conflicts. Used by the ospfv3ConfigError and ospfv3ConfigVirtError notifications. When the last value of a notification using this object is needed, but no notifications of that type have been sent, this value pertaining to this object should be returned as noError')
hwOspfv3PacketType = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 12, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6))).clone(namedValues=NamedValues(("hello", 1), ("dbDescript", 2), ("lsReq", 3), ("lsUpdate", 4), ("lsAck", 5), ("nullPacket", 6)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwOspfv3PacketType.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3PacketType.setDescription('OSPFv3 packet types. When the last value of a notification using this object is needed, but no notifications of that type have been sent, the value pertaining to this object should be returned as nullPacket')
hwOspfv3PacketSrc = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 12, 3), InetAddress()).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwOspfv3PacketSrc.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3PacketSrc.setDescription('The IPv6 address of an inbound packet that cannot be identified by a neighbor instance. When the last value of a notification using this object is needed, but no notifications of that type have been sent, the value pertaining to this object should be returned as 0. Only IPv6 addresses without zone index are expected.')
hwOspfv3IfName = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 12, 4), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 64))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwOspfv3IfName.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfName.setDescription('The interface name')
hwOspfv3IfStateChgReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 12, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("noEvent", 1), ("interfaceUp", 2), ("waitTimerExpired", 3), ("backupSeenOccured", 4), ("neighborChangeEventOccured", 5), ("loopInd", 6), ("unloopInd", 7), ("interfaceDown", 8)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwOspfv3IfStateChgReason.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfStateChgReason.setDescription('Interface state change reason.')
hwOspfv3NbrStateChgReason = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 12, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("noEvent", 1), ("receivedHelloPacket", 2), ("start", 3), ("receivedTwoWay", 4), ("negotiationDone", 5), ("exchangeDone", 6), ("receivedBadLSRequest", 7), ("loadingDone", 8), ("establishedAdjacency", 9), ("mismatchInSeqNumber", 10), ("receivedOneWay", 11), ("nbrKilled", 12), ("inactivityTimerExpired", 13), ("linkDown", 14)))).setMaxAccess("accessiblefornotify")
if mibBuilder.loadTexts: hwOspfv3NbrStateChgReason.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrStateChgReason.setDescription('Neighbor state change reason.')
hwOspfv3ProcessId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 12, 7), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3ProcessId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3ProcessId.setDescription('The process ID indicates the OSPFv3 process number. The value ranges from 1 to 65535.')
hwOspfv3AreaIdIndex = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 12, 8), HWOspfv3AreaIdTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3AreaIdIndex.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaIdIndex.setDescription('A 32-bit integer uniquely identifying an area. Area ID 0 is used for the OSPFv3 backbone.')
hwOspfv3NewRouterId = MibScalar((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 1, 12, 9), HWOspfv3RouterIdTc()).setMaxAccess("readonly")
if mibBuilder.loadTexts: hwOspfv3NewRouterId.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NewRouterId.setDescription("A 32-bit integer uniquely identifying the router in the Autonomous System. To ensure uniqueness, this may default to the value of one of the router's IPv4 host addresses, represented as a 32-bit unsigned integer, if IPv4 is configured on the router.")
hwOspfv3VirtIfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 1)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfState"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfStateChgReason"))
if mibBuilder.loadTexts: hwOspfv3VirtIfStateChange.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfStateChange.setDescription('An ospfv3VirtIfStateChange notification signifies that there has been a change in the state of an OSPFv3 virtual interface. This notification should be generated when the interface state regresses (e.g., goes from Point-to-Point to Down) or progresses to a terminal state (i.e., Point-to-Point).')
hwOspfv3NbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 2)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrState"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfName"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrStateChgReason"))
if mibBuilder.loadTexts: hwOspfv3NbrStateChange.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrStateChange.setDescription('An ospfv3NbrStateChange notification signifies that there has been a change in the state of a non-virtual OSPFv3 neighbor. This notification should be generated when the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way or Down) or progresses to a terminal state (e.g., 2-Way or Full). When an neighbor transitions from or to Full on non-broadcast multi-access and broadcast networks, the notification should be generated by the designated router. A designated router transitioning to Down will be noted by ospfIfStateChange.')
hwOspfv3VirtNbrStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 3)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrState"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrStateChgReason"))
if mibBuilder.loadTexts: hwOspfv3VirtNbrStateChange.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrStateChange.setDescription('An ospfv3VirtNbrStateChange notification signifies that there has been a change in the state of an OSPFv3 virtual neighbor. This notification should be generated when the neighbor state regresses (e.g., goes from Attempt or Full to 1-Way or Down) or progresses to a terminal state (e.g., Full).')
hwOspfv3IfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 4)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfState"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3PacketSrc"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3ConfigErrorType"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3PacketType"))
if mibBuilder.loadTexts: hwOspfv3IfConfigError.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfConfigError.setDescription("An ospfv3IfConfigError notification signifies that a packet has been received on a non-virtual interface from a router whose configuration parameters conflict with this router's configuration parameters. Note that the event optionMismatch should cause a notification only if it prevents an adjacency from forming.")
hwOspfv3VirtIfConfigError = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 5)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfState"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3ConfigErrorType"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3PacketType"))
if mibBuilder.loadTexts: hwOspfv3VirtIfConfigError.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfConfigError.setDescription("An ospfv3VirtIfConfigError notification signifies that a packet has been received on a virtual interface from a router whose configuration parameters conflict with this router's configuration parameters. Note that the event optionMismatch should cause a notification only if it prevents an adjacency from forming.")
hwOspfv3IfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 6)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfState"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3PacketSrc"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3PacketType"))
if mibBuilder.loadTexts: hwOspfv3IfRxBadPacket.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfRxBadPacket.setDescription('An ospfv3IfRxBadPacket notification signifies that an OSPFv3 packet that cannot be parsed has been received on a non-virtual interface.')
hwOspfv3VirtIfRxBadPacket = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 7)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfState"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3PacketType"))
if mibBuilder.loadTexts: hwOspfv3VirtIfRxBadPacket.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfRxBadPacket.setDescription('An ospfv3VirtIfRxBadPacket notification signifies that an OSPFv3 packet that cannot be parsed has been received on a virtual interface.')
hwOspfv3IfStateChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 8)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfState"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfName"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfStateChgReason"))
if mibBuilder.loadTexts: hwOspfv3IfStateChange.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfStateChange.setDescription('An ospfv3IfStateChange notification signifies that there has been a change in the state of a non-virtual OSPFv3 interface. This notification should be generated when the interface state regresses (e.g., goes from Dr to Down) or progresses to a terminal state (i.e., Point-to-Point, DR Other, Dr, or Backup).')
hwOspfv3RestartStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 9)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3RestartStatus"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3RestartInterval"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3RestartExitRc"))
if mibBuilder.loadTexts: hwOspfv3RestartStatusChange.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3RestartStatusChange.setDescription('An ospfv3RestartStatusChange notification signifies that there has been a change in the graceful restart state for the router. This notification should be generated when the router restart status changes.')
hwOspfv3NbrRestartHelperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 10)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrRestartHelperStatus"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrRestartHelperAge"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrRestartHelperExitRc"))
if mibBuilder.loadTexts: hwOspfv3NbrRestartHelperStatusChange.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrRestartHelperStatusChange.setDescription('An ospfv3NbrRestartHelperStatusChange notification signifies that there has been a change in the graceful restart helper state for the neighbor. This notification should be generated when the neighbor restart helper status transitions for a neighbor.')
hwOspfv3VirtNbrRestartHelperStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 11)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrRestartHelperStatus"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrRestartHelperAge"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrRestartHelperExitRc"))
if mibBuilder.loadTexts: hwOspfv3VirtNbrRestartHelperStatusChange.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrRestartHelperStatusChange.setDescription('An ospfv3VirtNbrRestartHelperStatusChange notification signifies that there has been a change in the graceful restart helper state for the virtual neighbor. This notification should be generated when the virtual neighbor restart helper status transitions for a virtual neighbor.')
hwOspfv3NssaTranslatorStatusChange = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 12)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaNssaTranslatorState"))
if mibBuilder.loadTexts: hwOspfv3NssaTranslatorStatusChange.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NssaTranslatorStatusChange.setDescription("An ospfv3NssaTranslatorStatusChange notification indicates that there has been a change in the router's ability to translate OSPFv3 NSSA LSAs into OSPFv3 External LSAs. This notification should be generated when the Translator Status transitions from or to any defined status on a per area basis.")
hwOspfv3LastAuthKeyExpiry = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 13)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfName"))
if mibBuilder.loadTexts: hwOspfv3LastAuthKeyExpiry.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3LastAuthKeyExpiry.setDescription('An hwOspfv3LastAuthKeyExpiry notification indicates that the last key associated with an interface has expired. When this notification is received, either the lifetime of the key should be extended or a new key should be configured.')
hwOspfv3AuthSequenceNumWrap = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 14)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfName"))
if mibBuilder.loadTexts: hwOspfv3AuthSequenceNumWrap.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AuthSequenceNumWrap.setDescription('An hwOspfv3AuthSequenceNumWrap notification indicates that the 64-bit authentication sequence number has wrapped. When this notification is received, all the keys must be reset to avoid the possibility of replay attacks.')
hwOspfv3IntraAreaRouterIdConflictRecovered = NotificationType((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 0, 15)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3ProcessId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaIdIndex"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NewRouterId"))
if mibBuilder.loadTexts: hwOspfv3IntraAreaRouterIdConflictRecovered.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IntraAreaRouterIdConflictRecovered.setDescription('The object is used to monitor router ID conflict recovery in an intra area.')
hwOspfv3Groups = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 1))
hwOspfv3Compliances = MibIdentifier((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 2))
hwOspfv3Compliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 2, 1)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3BasicGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3CfgNbrGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaAggregateGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AsLsdbGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaLsdbGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3LinkLsdbGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NotificationObjectGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3Compliance = hwOspfv3Compliance.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3Compliance.setDescription('The compliance statement')
hwOspfv3ReadOnlyCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 2, 2)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3BasicGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3CfgNbrGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaAggregateGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AsLsdbGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaLsdbGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3LinkLsdbGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NotificationObjectGroup"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NotificationGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3ReadOnlyCompliance = hwOspfv3ReadOnlyCompliance.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3ReadOnlyCompliance.setDescription('When this MIB module is implemented without support for read-create (i.e., in read-only mode), the implementation can claim read-only compliance. Such a device can then be monitored, but cannot be configured with this MIB.')
hwOspfv3BasicGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 1, 1)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3RouterId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AdminStatus"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VersionNumber"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaBdrRtrStatus"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AsBdrRtrStatus"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AsScopeLsaCount"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AsScopeLsaCksumSum"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3OriginateNewLsas"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3RxNewLsas"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3ExtLsaCount"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3ExtAreaLsdbLimit"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3RestartSupport"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3RestartInterval"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3RestartStatus"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3RestartAge"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3RestartExitRc"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NotificationEnable"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3ReferenceBandwidth"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3BasicGroup = hwOspfv3BasicGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3BasicGroup.setDescription('These objects are used for managing/monitoring OSPFv3 global parameters.')
hwOspfv3AreaGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 1, 2)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaImportAsExtern"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaSpfRuns"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaBdrRtrCount"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaAsBdrRtrCount"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaScopeLsaCount"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaScopeLsaCksumSum"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaSummary"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaRowStatus"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaStubMetric"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaNssaTranslatorRole"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaNssaTranslatorState"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaNssaTranslatorStabInterval"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaNssaTranslatorEvents"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3AreaGroup = hwOspfv3AreaGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaGroup.setDescription('These objects are used for OSPFv3 systems supporting areas.')
hwOspfv3AsLsdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 1, 3)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3AsLsdbSequence"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AsLsdbAge"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AsLsdbChecksum"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AsLsdbAdvertisement"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AsLsdbTypeKnown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3AsLsdbGroup = hwOspfv3AsLsdbGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AsLsdbGroup.setDescription('These objects are used for OSPFv3 systems that display their AS-scope link state database.')
hwOspfv3AreaLsdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 1, 4)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaLsdbSequence"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaLsdbAge"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaLsdbChecksum"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaLsdbAdvertisement"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaLsdbTypeKnown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3AreaLsdbGroup = hwOspfv3AreaLsdbGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaLsdbGroup.setDescription('These objects are used for OSPFv3 systems that display their Area-scope link state database.')
hwOspfv3LinkLsdbGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 1, 5)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3LinkLsdbSequence"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3LinkLsdbAge"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3LinkLsdbChecksum"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3LinkLsdbAdvertisement"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3LinkLsdbTypeKnown"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3LinkLsdbGroup = hwOspfv3LinkLsdbGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3LinkLsdbGroup.setDescription('These objects are used for OSPFv3 systems that display their Link-scope link state database.')
hwOspfv3IfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 1, 6)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3IfAreaId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfType"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfAdminStatus"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfRtrPriority"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfTransitDelay"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfRetransInterval"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfHelloInterval"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfRtrDeadInterval"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfState"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfDesignatedRouter"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfBackupDesignatedRouter"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfEvents"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfRowStatus"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfMetricValue"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfLinkScopeLsaCount"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfLinkLsaCksumSum"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfPollInterval"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfMulticastForwarding"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3IfGroup = hwOspfv3IfGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3IfGroup.setDescription('These interface objects used for managing/monitoring OSPFv3 interfaces.')
hwOspfv3VirtIfGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 1, 7)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfIndex"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfInstId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfTransitDelay"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfRetransInterval"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfHelloInterval"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfRtrDeadInterval"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfState"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfEvents"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfRowStatus"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfLinkScopeLsaCount"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfLinkLsaCksumSum"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3VirtIfGroup = hwOspfv3VirtIfGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtIfGroup.setDescription('These virtual interface objects are used for managing/monitoring OSPFv3 virtual interfaces.')
hwOspfv3NbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 1, 8)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrAddressType"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrAddress"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrOptions"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrPriority"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrState"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrEvents"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrLsRetransQLen"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrHelloSuppressed"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrIfId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrRestartHelperStatus"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrRestartHelperAge"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrRestartHelperExitRc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3NbrGroup = hwOspfv3NbrGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NbrGroup.setDescription('These neighbor objects are used for managing/monitoring OSPFv3 neighbors.')
hwOspfv3CfgNbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 1, 9)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3CfgNbrPriority"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3CfgNbrRowStatus"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3CfgNbrGroup = hwOspfv3CfgNbrGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3CfgNbrGroup.setDescription('These configured neighbor objects are used for managing/monitoring OSPFv3 configured neighbors.')
hwOspfv3VirtNbrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 1, 10)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrIfIndex"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrIfInstId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrAddressType"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrAddress"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrOptions"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrState"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrEvents"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrLsRetransQLen"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrHelloSuppressed"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrIfId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrRestartHelperStatus"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrRestartHelperAge"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrRestartHelperExitRc"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3VirtNbrGroup = hwOspfv3VirtNbrGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3VirtNbrGroup.setDescription('These virtual neighbor objects are used for managing/monitoring OSPFv3 virtual neighbors.')
hwOspfv3AreaAggregateGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 1, 11)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaAggregateRowStatus"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaAggregateEffect"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3AreaAggregateGroup = hwOspfv3AreaAggregateGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3AreaAggregateGroup.setDescription('These area aggregate objects used required for aggregating OSPFv3 prefixes for summarization across areas.')
hwOspfv3NotificationObjectGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 1, 12)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3ConfigErrorType"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3PacketType"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3PacketSrc"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfName"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfStateChgReason"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrStateChgReason"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3ProcessId"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AreaIdIndex"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NewRouterId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3NotificationObjectGroup = hwOspfv3NotificationObjectGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NotificationObjectGroup.setDescription('These objects are used to record notification parameters')
hwOspfv3NotificationGroup = NotificationGroup((1, 3, 6, 1, 4, 1, 2011, 5, 25, 147, 2, 1, 13)).setObjects(("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfStateChange"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrStateChange"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrStateChange"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfConfigError"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfConfigError"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfRxBadPacket"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtIfRxBadPacket"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IfStateChange"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3RestartStatusChange"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NbrRestartHelperStatusChange"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3VirtNbrRestartHelperStatusChange"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3NssaTranslatorStatusChange"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3LastAuthKeyExpiry"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3AuthSequenceNumWrap"), ("HUAWEI-OSPFV3-MIB", "hwOspfv3IntraAreaRouterIdConflictRecovered"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    hwOspfv3NotificationGroup = hwOspfv3NotificationGroup.setStatus('current')
if mibBuilder.loadTexts: hwOspfv3NotificationGroup.setDescription('This group is used for OSPFv3 notifications')
mibBuilder.exportSymbols("HUAWEI-OSPFV3-MIB", hwOspfv3VirtIfRetransInterval=hwOspfv3VirtIfRetransInterval, hwOspfv3NbrGroup=hwOspfv3NbrGroup, hwOspfv3VirtIfStateChange=hwOspfv3VirtIfStateChange, hwOspfv3VirtNbrEntry=hwOspfv3VirtNbrEntry, HWOspfv3LsaSequenceTC=HWOspfv3LsaSequenceTC, hwOspfv3PacketType=hwOspfv3PacketType, hwOspfv3IfGroup=hwOspfv3IfGroup, hwOspfv3LinkLsdbAdvertisement=hwOspfv3LinkLsdbAdvertisement, hwOspfv3IfTransitDelay=hwOspfv3IfTransitDelay, hwOspfv3AreaAggregateAreaId=hwOspfv3AreaAggregateAreaId, hwOspfv3VirtNbrAddress=hwOspfv3VirtNbrAddress, hwOspfv3NotificationEnable=hwOspfv3NotificationEnable, hwOspfv3AreaAggregateGroup=hwOspfv3AreaAggregateGroup, hwOspfv3AsBdrRtrStatus=hwOspfv3AsBdrRtrStatus, hwOspfv3VirtNbrIfInstId=hwOspfv3VirtNbrIfInstId, hwOspfv3AsLsdbType=hwOspfv3AsLsdbType, hwOspfv3LastAuthKeyExpiry=hwOspfv3LastAuthKeyExpiry, hwOspfv3LinkLsdbEntry=hwOspfv3LinkLsdbEntry, hwOspfv3AreaLsdbEntry=hwOspfv3AreaLsdbEntry, hwOspfv3AreaLsdbLsId=hwOspfv3AreaLsdbLsId, hwOspfv3IfMetricValue=hwOspfv3IfMetricValue, hwOspfv3NbrState=hwOspfv3NbrState, hwOspfv3AreaAggregateEffect=hwOspfv3AreaAggregateEffect, hwOspfv3NbrStateChange=hwOspfv3NbrStateChange, hwOspfv3NbrEntry=hwOspfv3NbrEntry, hwOspfv3NbrRestartHelperStatusChange=hwOspfv3NbrRestartHelperStatusChange, hwOspfv3IfInstId=hwOspfv3IfInstId, hwOspfv3IfConfigError=hwOspfv3IfConfigError, hwOspfv3ProcessId=hwOspfv3ProcessId, hwOspfv3RestartInterval=hwOspfv3RestartInterval, hwOspfv3VirtIfRxBadPacket=hwOspfv3VirtIfRxBadPacket, hwOspfv3Notifications=hwOspfv3Notifications, hwOspfv3NotificationEntry=hwOspfv3NotificationEntry, hwOspfv3AreaAggregateTable=hwOspfv3AreaAggregateTable, PYSNMP_MODULE_ID=hwOspfv3, hwOspfv3VersionNumber=hwOspfv3VersionNumber, hwOspfv3VirtIfRowStatus=hwOspfv3VirtIfRowStatus, hwOspfv3VirtIfLinkLsaCksumSum=hwOspfv3VirtIfLinkLsaCksumSum, hwOspfv3AreaAggregatePrefixLength=hwOspfv3AreaAggregatePrefixLength, hwOspfv3ConfigErrorType=hwOspfv3ConfigErrorType, hwOspfv3AreaScopeLsaCount=hwOspfv3AreaScopeLsaCount, hwOspfv3IfName=hwOspfv3IfName, hwOspfv3ExtAreaLsdbLimit=hwOspfv3ExtAreaLsdbLimit, hwOspfv3VirtNbrLsRetransQLen=hwOspfv3VirtNbrLsRetransQLen, hwOspfv3NbrRestartHelperExitRc=hwOspfv3NbrRestartHelperExitRc, hwOspfv3RestartStatus=hwOspfv3RestartStatus, hwOspfv3LinkLsdbIfIndex=hwOspfv3LinkLsdbIfIndex, hwOspfv3VirtNbrRestartHelperExitRc=hwOspfv3VirtNbrRestartHelperExitRc, hwOspfv3AreaLsdbRouterId=hwOspfv3AreaLsdbRouterId, hwOspfv3ReadOnlyCompliance=hwOspfv3ReadOnlyCompliance, hwOspfv3LinkLsdbIfInstId=hwOspfv3LinkLsdbIfInstId, hwOspfv3LinkLsdbRouterId=hwOspfv3LinkLsdbRouterId, hwOspfv3AreaLsdbAdvertisement=hwOspfv3AreaLsdbAdvertisement, hwOspfv3AsLsdbGroup=hwOspfv3AsLsdbGroup, hwOspfv3AreaImportAsExtern=hwOspfv3AreaImportAsExtern, HWOspfv3LsIdTC=HWOspfv3LsIdTC, hwOspfv3VirtIfHelloInterval=hwOspfv3VirtIfHelloInterval, hwOspfv3VirtNbrRtrId=hwOspfv3VirtNbrRtrId, HWOspfv3UpToRefreshIntervalTc=HWOspfv3UpToRefreshIntervalTc, hwOspfv3CfgNbrRtrId=hwOspfv3CfgNbrRtrId, hwOspfv3AreaLsdbAge=hwOspfv3AreaLsdbAge, hwOspfv3AreaLsdbTypeKnown=hwOspfv3AreaLsdbTypeKnown, hwOspfv3VirtIfState=hwOspfv3VirtIfState, hwOspfv3VirtNbrState=hwOspfv3VirtNbrState, hwOspfv3VirtNbrEvents=hwOspfv3VirtNbrEvents, hwOspfv3LinkLsdbTypeKnown=hwOspfv3LinkLsdbTypeKnown, hwOspfv3AreaLsdbGroup=hwOspfv3AreaLsdbGroup, hwOspfv3AreaLsdbTable=hwOspfv3AreaLsdbTable, hwOspfv3IntraAreaRouterIdConflictRecovered=hwOspfv3IntraAreaRouterIdConflictRecovered, hwOspfv3AreaRowStatus=hwOspfv3AreaRowStatus, hwOspfv3AsLsdbAge=hwOspfv3AsLsdbAge, hwOspfv3LinkLsdbChecksum=hwOspfv3LinkLsdbChecksum, hwOspfv3VirtIfAreaId=hwOspfv3VirtIfAreaId, hwOspfv3VirtIfInstId=hwOspfv3VirtIfInstId, hwOspfv3NbrIfId=hwOspfv3NbrIfId, hwOspfv3VirtIfEntry=hwOspfv3VirtIfEntry, hwOspfv3NbrLsRetransQLen=hwOspfv3NbrLsRetransQLen, hwOspfv3AsLsdbTypeKnown=hwOspfv3AsLsdbTypeKnown, hwOspfv3VirtNbrGroup=hwOspfv3VirtNbrGroup, hwOspfv3CfgNbrTable=hwOspfv3CfgNbrTable, hwOspfv3IfLinkScopeLsaCount=hwOspfv3IfLinkScopeLsaCount, HWOspfv3RouterIdTc=HWOspfv3RouterIdTc, hwOspfv3VirtIfIndex=hwOspfv3VirtIfIndex, hwOspfv3AreaAggregatePrefixType=hwOspfv3AreaAggregatePrefixType, hwOspfv3Conformance=hwOspfv3Conformance, hwOspfv3AreaStubMetric=hwOspfv3AreaStubMetric, hwOspfv3Objects=hwOspfv3Objects, hwOspfv3AreaIdIndex=hwOspfv3AreaIdIndex, hwOspfv3IfRxBadPacket=hwOspfv3IfRxBadPacket, hwOspfv3VirtIfConfigError=hwOspfv3VirtIfConfigError, hwOspfv3AreaLsdbType=hwOspfv3AreaLsdbType, hwOspfv3VirtNbrHelloSuppressed=hwOspfv3VirtNbrHelloSuppressed, hwOspfv3IfAreaId=hwOspfv3IfAreaId, hwOspfv3RxNewLsas=hwOspfv3RxNewLsas, hwOspfv3VirtIfGroup=hwOspfv3VirtIfGroup, hwOspfv3Groups=hwOspfv3Groups, hwOspfv3VirtNbrArea=hwOspfv3VirtNbrArea, hwOspfv3VirtNbrOptions=hwOspfv3VirtNbrOptions, hwOspfv3LinkLsdbTable=hwOspfv3LinkLsdbTable, hwOspfv3AsLsdbSequence=hwOspfv3AsLsdbSequence, hwOspfv3NbrPriority=hwOspfv3NbrPriority, hwOspfv3AdminStatus=hwOspfv3AdminStatus, hwOspfv3VirtNbrStateChange=hwOspfv3VirtNbrStateChange, hwOspfv3RouterId=hwOspfv3RouterId, hwOspfv3IfRowStatus=hwOspfv3IfRowStatus, hwOspfv3LinkLsdbSequence=hwOspfv3LinkLsdbSequence, hwOspfv3LinkLsdbGroup=hwOspfv3LinkLsdbGroup, hwOspfv3NbrRestartHelperAge=hwOspfv3NbrRestartHelperAge, hwOspfv3LinkLsdbAge=hwOspfv3LinkLsdbAge, hwOspfv3IfLinkLsaCksumSum=hwOspfv3IfLinkLsaCksumSum, hwOspfv3IfAdminStatus=hwOspfv3IfAdminStatus, hwOspfv3=hwOspfv3, hwOspfv3VirtNbrAddressType=hwOspfv3VirtNbrAddressType, hwOspfv3IfState=hwOspfv3IfState, hwOspfv3VirtNbrIfIndex=hwOspfv3VirtNbrIfIndex, hwOspfv3ExtLsaCount=hwOspfv3ExtLsaCount, hwOspfv3AreaBdrRtrStatus=hwOspfv3AreaBdrRtrStatus, HWOspfv3IfInstIdTc=HWOspfv3IfInstIdTc, hwOspfv3AreaLsdbChecksum=hwOspfv3AreaLsdbChecksum, hwOspfv3AsLsdbLsId=hwOspfv3AsLsdbLsId, hwOspfv3AreaLsdbAreaId=hwOspfv3AreaLsdbAreaId, hwOspfv3IfPollInterval=hwOspfv3IfPollInterval, hwOspfv3NbrIfIndex=hwOspfv3NbrIfIndex, hwOspfv3CfgNbrPriority=hwOspfv3CfgNbrPriority, hwOspfv3VirtIfTable=hwOspfv3VirtIfTable, hwOspfv3CfgNbrIfIndex=hwOspfv3CfgNbrIfIndex, hwOspfv3CfgNbrRowStatus=hwOspfv3CfgNbrRowStatus, hwOspfv3AreaAggregateRowStatus=hwOspfv3AreaAggregateRowStatus, hwOspfv3CfgNbrIfInstId=hwOspfv3CfgNbrIfInstId, hwOspfv3AreaAggregateAreaLsdbType=hwOspfv3AreaAggregateAreaLsdbType, hwOspfv3VirtNbrTable=hwOspfv3VirtNbrTable, hwOspfv3NbrTable=hwOspfv3NbrTable, hwOspfv3VirtNbrRestartHelperAge=hwOspfv3VirtNbrRestartHelperAge, hwOspfv3NbrAddressType=hwOspfv3NbrAddressType, hwOspfv3VirtIfNeighbor=hwOspfv3VirtIfNeighbor, hwOspfv3VirtNbrIfId=hwOspfv3VirtNbrIfId, hwOspfv3IfEvents=hwOspfv3IfEvents, hwOspfv3AsScopeLsaCount=hwOspfv3AsScopeLsaCount, hwOspfv3Compliances=hwOspfv3Compliances, hwOspfv3IfBackupDesignatedRouter=hwOspfv3IfBackupDesignatedRouter, hwOspfv3AreaSpfRuns=hwOspfv3AreaSpfRuns, hwOspfv3GeneralGroup=hwOspfv3GeneralGroup, hwOspfv3AreaNssaTranslatorRole=hwOspfv3AreaNssaTranslatorRole, hwOspfv3AreaBdrRtrCount=hwOspfv3AreaBdrRtrCount, hwOspfv3IfStateChange=hwOspfv3IfStateChange, HWOspfv3LsaAgeTC=HWOspfv3LsaAgeTC, hwOspfv3AreaAsBdrRtrCount=hwOspfv3AreaAsBdrRtrCount, HWOspfv3AreaIdTc=HWOspfv3AreaIdTc, hwOspfv3IfRtrPriority=hwOspfv3IfRtrPriority, hwOspfv3PacketSrc=hwOspfv3PacketSrc, hwOspfv3NewRouterId=hwOspfv3NewRouterId, hwOspfv3NbrHelloSuppressed=hwOspfv3NbrHelloSuppressed, hwOspfv3IfTable=hwOspfv3IfTable, hwOspfv3CfgNbrEntry=hwOspfv3CfgNbrEntry, hwOspfv3IfIndex=hwOspfv3IfIndex, hwOspfv3CfgNbrGroup=hwOspfv3CfgNbrGroup, hwOspfv3AreaGroup=hwOspfv3AreaGroup, hwOspfv3BasicGroup=hwOspfv3BasicGroup, hwOspfv3VirtNbrRestartHelperStatus=hwOspfv3VirtNbrRestartHelperStatus, hwOspfv3AreaLsdbSequence=hwOspfv3AreaLsdbSequence, hwOspfv3IfDesignatedRouter=hwOspfv3IfDesignatedRouter, HWOspfv3DeadIntRangeTc=HWOspfv3DeadIntRangeTc, hwOspfv3ReferenceBandwidth=hwOspfv3ReferenceBandwidth, hwOspfv3AreaId=hwOspfv3AreaId, hwOspfv3IfHelloInterval=hwOspfv3IfHelloInterval, hwOspfv3AreaAggregatePrefix=hwOspfv3AreaAggregatePrefix, hwOspfv3AreaNssaTranslatorEvents=hwOspfv3AreaNssaTranslatorEvents, hwOspfv3NbrStateChgReason=hwOspfv3NbrStateChgReason, hwOspfv3NbrIfInstId=hwOspfv3NbrIfInstId, HWHelloRange=HWHelloRange, hwOspfv3AsLsdbTable=hwOspfv3AsLsdbTable, hwOspfv3IfType=hwOspfv3IfType, hwOspfv3NbrOptions=hwOspfv3NbrOptions, hwOspfv3RestartSupport=hwOspfv3RestartSupport, hwOspfv3NbrEvents=hwOspfv3NbrEvents, hwOspfv3RestartExitRc=hwOspfv3RestartExitRc, hwOspfv3VirtNbrRestartHelperStatusChange=hwOspfv3VirtNbrRestartHelperStatusChange, hwOspfv3AsScopeLsaCksumSum=hwOspfv3AsScopeLsaCksumSum, hwOspfv3VirtIfRtrDeadInterval=hwOspfv3VirtIfRtrDeadInterval, hwOspfv3AreaAggregateEntry=hwOspfv3AreaAggregateEntry, hwOspfv3VirtIfEvents=hwOspfv3VirtIfEvents, hwOspfv3LinkLsdbLsId=hwOspfv3LinkLsdbLsId, hwOspfv3AsLsdbRouterId=hwOspfv3AsLsdbRouterId, hwOspfv3AreaTable=hwOspfv3AreaTable, hwOspfv3IfEntry=hwOspfv3IfEntry, hwOspfv3LinkLsdbType=hwOspfv3LinkLsdbType, hwOspfv3AreaSummary=hwOspfv3AreaSummary, hwOspfv3VirtIfLinkScopeLsaCount=hwOspfv3VirtIfLinkScopeLsaCount, hwOspfv3RestartAge=hwOspfv3RestartAge, hwOspfv3AreaEntry=hwOspfv3AreaEntry, hwOspfv3AsLsdbEntry=hwOspfv3AsLsdbEntry, hwOspfv3AuthSequenceNumWrap=hwOspfv3AuthSequenceNumWrap, hwOspfv3AreaNssaTranslatorState=hwOspfv3AreaNssaTranslatorState, hwOspfv3NotificationObjectGroup=hwOspfv3NotificationObjectGroup, hwOspfv3Compliance=hwOspfv3Compliance, hwOspfv3NbrRtrId=hwOspfv3NbrRtrId, hwOspfv3AsLsdbChecksum=hwOspfv3AsLsdbChecksum, hwOspfv3NbrRestartHelperStatus=hwOspfv3NbrRestartHelperStatus, hwOspfv3IfRetransInterval=hwOspfv3IfRetransInterval, hwOspfv3NssaTranslatorStatusChange=hwOspfv3NssaTranslatorStatusChange, hwOspfv3IfRtrDeadInterval=hwOspfv3IfRtrDeadInterval, hwOspfv3VirtIfTransitDelay=hwOspfv3VirtIfTransitDelay, hwOspfv3OriginateNewLsas=hwOspfv3OriginateNewLsas, hwOspfv3AsLsdbAdvertisement=hwOspfv3AsLsdbAdvertisement, hwOspfv3NotificationGroup=hwOspfv3NotificationGroup, hwOspfv3RestartStatusChange=hwOspfv3RestartStatusChange, hwOspfv3NbrAddress=hwOspfv3NbrAddress, hwOspfv3IfStateChgReason=hwOspfv3IfStateChgReason, hwOspfv3AreaScopeLsaCksumSum=hwOspfv3AreaScopeLsaCksumSum, hwOspfv3IfMulticastForwarding=hwOspfv3IfMulticastForwarding, hwOspfv3AreaNssaTranslatorStabInterval=hwOspfv3AreaNssaTranslatorStabInterval)
