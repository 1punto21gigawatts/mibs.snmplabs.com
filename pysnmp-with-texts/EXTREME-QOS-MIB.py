#
# PySNMP MIB module EXTREME-QOS-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/EXTREME-BASE-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:07:14 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
ObjectIdentifier, Integer, OctetString = mibBuilder.importSymbols("ASN1", "ObjectIdentifier", "Integer", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection = mibBuilder.importSymbols("ASN1-REFINEMENT", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection")
extremeAgent, = mibBuilder.importSymbols("EXTREME-BASE-MIB", "extremeAgent")
extremeVlanIfIndex, = mibBuilder.importSymbols("EXTREME-VLAN-MIB", "extremeVlanIfIndex")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Counter64, IpAddress, Integer32, Gauge32, Counter32, MibIdentifier, MibScalar, MibTable, MibTableRow, MibTableColumn, iso, NotificationType, ModuleIdentity, ObjectIdentity, TimeTicks, Bits, Unsigned32 = mibBuilder.importSymbols("SNMPv2-SMI", "Counter64", "IpAddress", "Integer32", "Gauge32", "Counter32", "MibIdentifier", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "iso", "NotificationType", "ModuleIdentity", "ObjectIdentity", "TimeTicks", "Bits", "Unsigned32")
TruthValue, DisplayString, TextualConvention, RowStatus = mibBuilder.importSymbols("SNMPv2-TC", "TruthValue", "DisplayString", "TextualConvention", "RowStatus")
extremeQos = ModuleIdentity((1, 3, 6, 1, 4, 1, 1916, 1, 3))
if mibBuilder.loadTexts: extremeQos.setLastUpdated('0007240000Z')
if mibBuilder.loadTexts: extremeQos.setOrganization('Extreme Networks, Inc.')
if mibBuilder.loadTexts: extremeQos.setContactInfo('www.extremenetworks.com')
if mibBuilder.loadTexts: extremeQos.setDescription('Extreme Quality-of-Service objects')
extremeQosCommon = MibIdentifier((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1))
extremeUnitPaceMode = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("notApplicable", 1), ("normalEthernet", 2), ("lowLatency", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeUnitPaceMode.setStatus('deprecated')
if mibBuilder.loadTexts: extremeUnitPaceMode.setDescription('This object specifies whether the device currently recognises and gives priority treatment to the forwarding of packets with the PACE(tm) bit set in their MAC Source Address fields. PACE(tm) mode applies to the whole unit only and is only valid when device is in Ingress QoS mode as specified by extremeQosMode ingress(1). This object will report notApplicable(1) when in egress(2) mode. Set operations with value notApplicable(1) will be rejected.')
extremeQosMode = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("ingress", 1), ("egress", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeQosMode.setStatus('deprecated')
if mibBuilder.loadTexts: extremeQosMode.setDescription("Indicates which QoS mode the device should use. ingress(1) applies priority-based QoS based on the incoming packet's destination IP or MAC address, 802.1p priority, PACE(tm), Source Port or VLAN. egress(2) applies priority- and bandwidth-based QoS based on destination IP or MAC address or VLAN. See ExtremeWare documentation for further information.")
extremeQosUnconfigure = MibScalar((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 5), TruthValue()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeQosUnconfigure.setStatus('deprecated')
if mibBuilder.loadTexts: extremeQosUnconfigure.setDescription('Setting this to true will reset all QoS settings in the device to factory defaults. Reads from this value return an undefined value.')
extremeQosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 6), )
if mibBuilder.loadTexts: extremeQosProfileTable.setStatus('current')
if mibBuilder.loadTexts: extremeQosProfileTable.setDescription('This table lists QoS profiles.')
extremeQosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 6, 1), ).setIndexNames((0, "EXTREME-QOS-MIB", "extremeQosProfileIndex"))
if mibBuilder.loadTexts: extremeQosProfileEntry.setStatus('current')
if mibBuilder.loadTexts: extremeQosProfileEntry.setDescription('An individual QoS profile Entry.')
extremeQosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: extremeQosProfileIndex.setDescription('An index that uniquely identifies an entry in the qos table.')
extremeQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 6, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosProfileName.setStatus('current')
if mibBuilder.loadTexts: extremeQosProfileName.setDescription('A unique qos profile name.')
extremeQosProfileMinBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 6, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosProfileMinBw.setStatus('current')
if mibBuilder.loadTexts: extremeQosProfileMinBw.setDescription('The minumum percentage of bandwidth that this queue requires. The Switch is required to provide the minumum amount of bandwidth to the queue. The lowest possible value is 0%.')
extremeQosProfileMaxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 6, 1, 4), Integer32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosProfileMaxBw.setStatus('current')
if mibBuilder.loadTexts: extremeQosProfileMaxBw.setDescription('The maximum percentage of bandwidth that this queue is permitted to use. If a non-default value is set for this object then it negates any previously set value of extremeQosProfileMaxSustBwBps. In In addition, a set operation that supplies non-default values for both this object and for extremeQosProfileMaxSustBwBps will be rejected by the agent. In other words, you may supply either an absolute or a percent limit, not both.')
extremeQosProfilePriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 6, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("low", 1), ("lowHi", 2), ("normal", 3), ("normalHi", 4), ("medium", 5), ("mediumHi", 6), ("high", 7), ("highHi", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosProfilePriority.setStatus('current')
if mibBuilder.loadTexts: extremeQosProfilePriority.setDescription('The level of priority in which this queue will be serviced by the Switch.')
extremeQosProfileRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 6, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremeQosProfileRowStatus.setStatus('current')
if mibBuilder.loadTexts: extremeQosProfileRowStatus.setDescription('The status of the extremeQosProfile entry. This object can be set to: active(1) createAndGo(4) createAndWait(5) destroy(6) The following values may be read: active(1) notInService(2) notReady(3). Setting this object to createAndGo(4) causes the agent to attempt to create and commit the row based on the contents of the objects in the row. If all necessary information is present in the row and the values are acceptible to the agent, the agent will change the status to active(1). If any of the necessary objects are not available, the agent will reject the creation request. Setting this object to createAndWait(5) causes a row in this table to be created. The agent sets the status to notInService(2) if all of the information is present in the row and the values are acceptable to the agent; otherwise, the agent sets the status to notReady(3). Setting this object to active(1) is only valid when the current status is active(1) or notInService(2). When the state of the row transitions is set to active(1), the agent creates the corresponding row in the ifTable.. Setting this object to destroy(6) will remove the corresponding QoS Profile Entry. In order for a set of this object to destroy(6) to succeed, all dependencies on this row must have been removed. These will include any stacking dependencies in the ifStackTable and any protocol specific tables dependencies.')
extremeQosByVlanMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 7), )
if mibBuilder.loadTexts: extremeQosByVlanMappingTable.setStatus('current')
if mibBuilder.loadTexts: extremeQosByVlanMappingTable.setDescription('Table to associate a Vlan with the QoS profile that the Vlan is using. Every Vlan is assigned a Qos Profile and hence there is an entry in this table corresponding to every entry in the extremeVlanIfTable.')
extremeQosByVlanMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 7, 1), ).setIndexNames((0, "EXTREME-VLAN-MIB", "extremeVlanIfIndex"))
if mibBuilder.loadTexts: extremeQosByVlanMappingEntry.setStatus('current')
if mibBuilder.loadTexts: extremeQosByVlanMappingEntry.setDescription('The QoS associated with a particular Vlan.')
extremeQosByVlanMappingQosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: extremeQosByVlanMappingQosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: extremeQosByVlanMappingQosProfileIndex.setDescription('Value of extremeQosProfileIndex that uniquely identifies a QoS Profile entry in extremeQosProfileTable. This indicates the QoS to be given to traffic for this Vlan in the absence of any other more specific configuration information for this traffic.')
extremePerPortQosTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 8), )
if mibBuilder.loadTexts: extremePerPortQosTable.setStatus('current')
if mibBuilder.loadTexts: extremePerPortQosTable.setDescription('Global Qos Profiles are defined in the extremeQosProfileTable. This table contains a list of ports for which the definition of certain global Qos Profiles has been overridden. The new definition of the Qos profile parameters is in this table.')
extremePerPortQosEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 8, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "EXTREME-QOS-MIB", "extremePerPortQosIndex"))
if mibBuilder.loadTexts: extremePerPortQosEntry.setStatus('current')
if mibBuilder.loadTexts: extremePerPortQosEntry.setDescription('An individual overridden QoS profile Entry.')
extremePerPortQosIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremePerPortQosIndex.setStatus('current')
if mibBuilder.loadTexts: extremePerPortQosIndex.setDescription('The value of this variable is the same as the value of extremeQosProfileIndex of the Qos Profile which is overridden (for the port specified by ifIndex) by the definition in this table.')
extremePerPortQosMinBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 8, 1, 2), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremePerPortQosMinBw.setStatus('current')
if mibBuilder.loadTexts: extremePerPortQosMinBw.setDescription('The minumum percentage of bandwidth that this queue on the specified port requires. The Switch is required to provide the minumum amount of bandwidth to the queue. The lowest possible value is 0%.')
extremePerPortQosMaxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 8, 1, 3), Integer32().clone(100)).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremePerPortQosMaxBw.setStatus('current')
if mibBuilder.loadTexts: extremePerPortQosMaxBw.setDescription('The maximum percentage of bandwidth that this queue on the specified port is permitted to use.')
extremePerPortQosPriority = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 8, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8))).clone(namedValues=NamedValues(("low", 1), ("lowHi", 2), ("normal", 3), ("normalHi", 4), ("medium", 5), ("mediumHi", 6), ("high", 7), ("highHi", 8)))).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremePerPortQosPriority.setStatus('current')
if mibBuilder.loadTexts: extremePerPortQosPriority.setDescription('The level of priority in which this queue will be serviced by the Switch.')
extremePerPortQosRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 8, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: extremePerPortQosRowStatus.setStatus('current')
if mibBuilder.loadTexts: extremePerPortQosRowStatus.setDescription('The status of the extremePerPortQos entry. This object can be set to active(1) createAndGo(4) The following value may be read: active(1) Note that a destroy(6) is not supported. A row will only be deleted from this table when the Qos Profile indicated in that row is changed globally.')
extremeQosIngressPriorityTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 9), )
if mibBuilder.loadTexts: extremeQosIngressPriorityTable.setStatus('current')
if mibBuilder.loadTexts: extremeQosIngressPriorityTable.setDescription('This table lists QoS ingress priority settings.')
extremeQosIngressPriorityEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 9, 1), ).setIndexNames((0, "EXTREME-QOS-MIB", "extremeQosIngressPriorityIndex"))
if mibBuilder.loadTexts: extremeQosIngressPriorityEntry.setStatus('current')
if mibBuilder.loadTexts: extremeQosIngressPriorityEntry.setDescription('An individual QoS ingress priority Entry.')
extremeQosIngressPriorityIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeQosIngressPriorityIndex.setStatus('current')
if mibBuilder.loadTexts: extremeQosIngressPriorityIndex.setDescription('An index that uniquely identifies an entry in the qos ingress priority table.')
extremeQosIngressPriorityName = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 9, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeQosIngressPriorityName.setStatus('current')
if mibBuilder.loadTexts: extremeQosIngressPriorityName.setDescription('A qos ingress priority name.')
extremeQosIngressPriorityValue = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 9, 1, 3), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 15))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeQosIngressPriorityValue.setStatus('current')
if mibBuilder.loadTexts: extremeQosIngressPriorityValue.setDescription('The ingress Qos priority value.')
extremeIQosProfileTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 10), )
if mibBuilder.loadTexts: extremeIQosProfileTable.setStatus('current')
if mibBuilder.loadTexts: extremeIQosProfileTable.setDescription('This table lists ingress QoS profiles.')
extremeIQosProfileEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 10, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "EXTREME-QOS-MIB", "extremeIQosProfileIndex"))
if mibBuilder.loadTexts: extremeIQosProfileEntry.setStatus('current')
if mibBuilder.loadTexts: extremeIQosProfileEntry.setDescription('An individual ingress QoS profile Entry.')
extremeIQosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeIQosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: extremeIQosProfileIndex.setDescription('An index that uniquely identifies an entry in the ingress Qos table.')
extremeIQosProfileName = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 10, 1, 2), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 127))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeIQosProfileName.setStatus('current')
if mibBuilder.loadTexts: extremeIQosProfileName.setDescription('A unique ingress Qos profile name.')
extremeIQosProfileMinBwType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 10, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("percentage", 1), ("kbps", 2), ("mbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeIQosProfileMinBwType.setStatus('current')
if mibBuilder.loadTexts: extremeIQosProfileMinBwType.setDescription('The type of the current minimum bandwith setting. A value of 1 signifies that the minimum bandwith value is a percentage of the configurable port bandwidth. A value of 2 or 3 signifies a guaranteed minimum available bandwidth in Kbps or Mbps respectively.')
extremeIQosProfileMinBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 10, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeIQosProfileMinBw.setStatus('current')
if mibBuilder.loadTexts: extremeIQosProfileMinBw.setDescription('The guaranteed minimum bandwidth for this queue, expressed as either a percentage or a specific bandwidth value, as specified by the value of extremeIQosProfileMinBwType.')
extremeIQosProfileMaxBwType = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 10, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("percentage", 1), ("kbps", 2), ("mbps", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeIQosProfileMaxBwType.setStatus('current')
if mibBuilder.loadTexts: extremeIQosProfileMaxBwType.setDescription('The type of the current maximum bandwith setting. A value of 1 signifies that the maximum bandwith value is a percentage of the configurable port bandwidth. A value of 2 or 3 signifies a maximum allowed bandwidth in Kbps or Mbps respectively.')
extremeIQosProfileMaxBw = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 10, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeIQosProfileMaxBw.setStatus('current')
if mibBuilder.loadTexts: extremeIQosProfileMaxBw.setDescription('The maximum allowed input bandwidth for this queue, expressed as either a percentage or a specific bandwidth value, as specified by the value of extremeIQosProfileMaxBwType.')
extremeIQosProfileRED = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 10, 1, 7), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeIQosProfileRED.setStatus('current')
if mibBuilder.loadTexts: extremeIQosProfileRED.setDescription('The Random Early Drop threshold. When the input queue fill ratio exceeds this percentage, frames start to drop randomly with a linear increasing drop probability as the queue fill count approaches the max queue size. A value of 100 indicates that this feature is currently disabled.')
extremeIQosProfileMaxBuf = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 10, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeIQosProfileMaxBuf.setStatus('current')
if mibBuilder.loadTexts: extremeIQosProfileMaxBuf.setDescription('The percentage of the total ingress queue size to use. Lower values can be used to reduce the max latency through this queue, but with potentially greater loss with bursty traffic.')
extremeIQosByVlanMappingTable = MibTable((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 11), )
if mibBuilder.loadTexts: extremeIQosByVlanMappingTable.setStatus('current')
if mibBuilder.loadTexts: extremeIQosByVlanMappingTable.setDescription('Table to associate a Vlan with the ingress QoS profile that the Vlan is using. Every Vlan is assigned a Qos Profile and hence there is an entry in this table corresponding to every entry in the extremeVlanIfTable.')
extremeIQosByVlanMappingEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 11, 1), ).setIndexNames((0, "EXTREME-VLAN-MIB", "extremeVlanIfIndex"))
if mibBuilder.loadTexts: extremeIQosByVlanMappingEntry.setStatus('current')
if mibBuilder.loadTexts: extremeIQosByVlanMappingEntry.setDescription('The ingress QoS associated with a particular Vlan.')
extremeIQosByVlanMappingIQosProfileIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1916, 1, 3, 1, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readonly")
if mibBuilder.loadTexts: extremeIQosByVlanMappingIQosProfileIndex.setStatus('current')
if mibBuilder.loadTexts: extremeIQosByVlanMappingIQosProfileIndex.setDescription('Value of extremeIQosProfileIndex that uniquely identifies an ingress QoS Profile entry in extremeIQosProfileTable. This indicates the QoS to be given to traffic for this Vlan in the absence of any other more specific configuration information for this traffic.')
mibBuilder.exportSymbols("EXTREME-QOS-MIB", extremePerPortQosMinBw=extremePerPortQosMinBw, extremeQosByVlanMappingEntry=extremeQosByVlanMappingEntry, extremeIQosProfileIndex=extremeIQosProfileIndex, extremePerPortQosMaxBw=extremePerPortQosMaxBw, extremeIQosProfileTable=extremeIQosProfileTable, extremePerPortQosTable=extremePerPortQosTable, extremeQos=extremeQos, PYSNMP_MODULE_ID=extremeQos, extremeQosUnconfigure=extremeQosUnconfigure, extremeIQosProfileRED=extremeIQosProfileRED, extremeUnitPaceMode=extremeUnitPaceMode, extremeIQosProfileEntry=extremeIQosProfileEntry, extremeIQosProfileMinBwType=extremeIQosProfileMinBwType, extremeQosIngressPriorityTable=extremeQosIngressPriorityTable, extremeQosProfileMinBw=extremeQosProfileMinBw, extremePerPortQosEntry=extremePerPortQosEntry, extremeQosProfileEntry=extremeQosProfileEntry, extremeQosMode=extremeQosMode, extremePerPortQosRowStatus=extremePerPortQosRowStatus, extremeIQosProfileMaxBwType=extremeIQosProfileMaxBwType, extremeQosProfileTable=extremeQosProfileTable, extremeQosCommon=extremeQosCommon, extremeIQosProfileMaxBuf=extremeIQosProfileMaxBuf, extremeQosProfileIndex=extremeQosProfileIndex, extremePerPortQosPriority=extremePerPortQosPriority, extremeQosProfileRowStatus=extremeQosProfileRowStatus, extremeQosByVlanMappingQosProfileIndex=extremeQosByVlanMappingQosProfileIndex, extremeIQosByVlanMappingTable=extremeIQosByVlanMappingTable, extremeIQosByVlanMappingIQosProfileIndex=extremeIQosByVlanMappingIQosProfileIndex, extremeQosProfileName=extremeQosProfileName, extremeQosProfilePriority=extremeQosProfilePriority, extremeIQosByVlanMappingEntry=extremeIQosByVlanMappingEntry, extremeQosByVlanMappingTable=extremeQosByVlanMappingTable, extremeQosProfileMaxBw=extremeQosProfileMaxBw, extremeQosIngressPriorityName=extremeQosIngressPriorityName, extremeIQosProfileMaxBw=extremeIQosProfileMaxBw, extremeQosIngressPriorityIndex=extremeQosIngressPriorityIndex, extremePerPortQosIndex=extremePerPortQosIndex, extremeIQosProfileName=extremeIQosProfileName, extremeIQosProfileMinBw=extremeIQosProfileMinBw, extremeQosIngressPriorityEntry=extremeQosIngressPriorityEntry, extremeQosIngressPriorityValue=extremeQosIngressPriorityValue)
