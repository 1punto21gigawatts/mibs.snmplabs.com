#
# PySNMP MIB module IPGW-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/IPGW-MIB
# Produced by pysmi-0.3.4 at Wed May  1 13:56:04 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, ObjectIdentifier, Integer = mibBuilder.importSymbols("ASN1", "OctetString", "ObjectIdentifier", "Integer")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, SingleValueConstraint, ConstraintsIntersection, ValueSizeConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "SingleValueConstraint", "ConstraintsIntersection", "ValueSizeConstraint", "ValueRangeConstraint")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
Unsigned32, Gauge32, MibIdentifier, Bits, ObjectIdentity, IpAddress, MibScalar, MibTable, MibTableRow, MibTableColumn, Integer32, ModuleIdentity, TimeTicks, Counter32, Counter64, experimental, enterprises, iso, NotificationType = mibBuilder.importSymbols("SNMPv2-SMI", "Unsigned32", "Gauge32", "MibIdentifier", "Bits", "ObjectIdentity", "IpAddress", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Integer32", "ModuleIdentity", "TimeTicks", "Counter32", "Counter64", "experimental", "enterprises", "iso", "NotificationType")
DisplayString, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TextualConvention")
usr = MibIdentifier((1, 3, 6, 1, 4, 1, 429))
nas = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1))
ipgw = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 13))
ipgwCfg = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 13, 1))
ipgwCfgTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 13, 1, 1), )
if mibBuilder.loadTexts: ipgwCfgTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCfgTable.setDescription('The IP Gateway Card Configuration Table contains an entry for each of the manageable IP Gateway Card in the chassis. It contains objects that reflect the current configuration of parameters that affect the operation of all the entities that reside on the given card.')
ipgwCfgEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 13, 1, 1, 1), ).setIndexNames((0, "IPGW-MIB", "ipgwCfgIndex"))
if mibBuilder.loadTexts: ipgwCfgEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCfgEntry.setDescription('There is one IP Gateway Card Configuration table entry per IP Gateway Card in the chassis.')
ipgwCfgIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 1, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipgwCfgIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCfgIndex.setDescription('A unique value for each IP Gateway Card in the chassis. The value of ipgwCfgIndex matches the value of the index for the corresponding IP Gateway Card entity in the entity table of the chassis MIB.')
ipgwCfgLocalIpAdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 1, 1, 1, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipgwCfgLocalIpAdrs.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCfgLocalIpAdrs.setDescription('Specifies the local IP address used by the IP Gateway Card for management related access.')
ipgwCfgGatewayIpAdrs = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 1, 1, 1, 3), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipgwCfgGatewayIpAdrs.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCfgGatewayIpAdrs.setDescription('Specifies the IP address of the gateway for the IP Gateway card.')
ipgwCfgTrapDest = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 1, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("nmc", 1), ("local", 2), ("both", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipgwCfgTrapDest.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCfgTrapDest.setDescription('Specifies whether the IP Gateway Card sends SNMP traps to the NMC or only to its locally configured management stations. Default=local.')
ipgwCfgGatewayNetMask = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 1, 1, 1, 5), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipgwCfgGatewayNetMask.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCfgGatewayNetMask.setDescription('Specifies the subnet mask for the IP Gateway Card.')
ipgwCfgEthnetFraming = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 1, 1, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("snap", 1), ("dix", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipgwCfgEthnetFraming.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCfgEthnetFraming.setDescription('Specifies the type of ethernet framing used by the IP Gateway Card.')
ipgwCfgEthIfaceName = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 1, 1, 1, 7), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipgwCfgEthIfaceName.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCfgEthIfaceName.setDescription('Specifies the name of the ethernet interface that is to be used by the IP Gateway Card.')
ipgwCfgDefMgmtStationIp = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 1, 1, 1, 8), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipgwCfgDefMgmtStationIp.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCfgDefMgmtStationIp.setDescription('IP address of a management station allowed to manage the IP Gateway Card. Used with the community string for management security. Default =0.0.0.0.')
ipgwCfgDefCommStr = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 1, 1, 1, 9), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(0, 32))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipgwCfgDefCommStr.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCfgDefCommStr.setDescription('Specifies the default SNMP community string to be used by a management station in communicating with the IP Gateway Card. Used with the default management station IP address for management security access.')
ipgwCmd = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 13, 3))
ipgwCmdTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 13, 3, 1), )
if mibBuilder.loadTexts: ipgwCmdTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCmdTable.setDescription('The IP Card Command table contains an entry for each of the manageable IP Gateway Card in the chassis. It provides a means through which to take specific actions on one or more IP Gateway cards in the NAS chassis.')
ipgwCmdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 13, 3, 1, 1), ).setIndexNames((0, "IPGW-MIB", "ipgwCmdIndex"))
if mibBuilder.loadTexts: ipgwCmdEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCmdEntry.setDescription('There is one IP Gateway Card Command entry per IP Gateway Card in the chassis.')
ipgwCmdIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 3, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipgwCmdIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCmdIndex.setDescription("A unique value for each IP Gateway Card in the chassis. The value of this object matches the value of the index of the correspond1ing IP Gateway Card's entry in the entity table of the chassis MIB.")
ipgwCmdMgtStationId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 3, 1, 1, 2), OctetString().subtype(subtypeSpec=ValueSizeConstraint(0, 8))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipgwCmdMgtStationId.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCmdMgtStationId.setDescription('This object is a generic read-write variable that a Management Station (MS) can use to guarantee that the results from a given command are the results of a command issued by that specific MS. Each MS must SET a unique value to this object when doing commands and GET the value of this object together with ipgwCmdReqId and ipgwCmdResult to detect interference from other MSs.')
ipgwCmdReqId = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 3, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipgwCmdReqId.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCmdReqId.setDescription('This object contains the value of the request-id field in the SNMP PDU which invoked the current or most recent command or test on this IP Gateway Card. If the request-id is unknown or undefined, this object contains the value zero.')
ipgwCmdFunction = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 3, 1, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10))).clone(namedValues=NamedValues(("noCommand", 1), ("saveToNVRAM", 2), ("restoreFromNVRAM", 3), ("restoreFromDefault", 4), ("nonDisruptSelfTest", 5), ("disruptSelfTest", 6), ("softwareReset", 7), ("lanLoopBack", 8), ("bulkfileUpload", 9), ("bulkfileDownload", 10)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipgwCmdFunction.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCmdFunction.setDescription('This object contains a value which describes the command which is being invoked.')
ipgwCmdForce = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 3, 1, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("force", 1), ("noForce", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipgwCmdForce.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCmdForce.setDescription('In some cases, the IP Gateway Card may be in a state such that certain commands could adversely affect connections. In such cases, a command request with this object not present or set to noForce will result in a warning. If the operator elects to ignore such warnings, this object can be set to force in a subsequent issue of the command to cause the command to be carried out regardless of its potentially hazzardous effects.')
ipgwCmdParam = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 3, 1, 1, 6), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipgwCmdParam.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCmdParam.setDescription('This object contains parameters that are specific to the particular command being issued. In some cases, there will be no aditional parameters required.')
ipgwCmdResult = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 3, 1, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("none", 1), ("success", 2), ("inProgress", 3), ("notSupported", 4), ("unAbleToRun", 5), ("aborted", 6), ("failed", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipgwCmdResult.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCmdResult.setDescription('This object contains the result of the most recently requested command or test, or the value none(1) if no commands have been requested since the last reset.')
ipgwCmdCode = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 3, 1, 1, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 6, 8, 12, 20, 22, 25, 58, 73))).clone(namedValues=NamedValues(("noError", 1), ("unable", 2), ("unrecognizedCommand", 6), ("slotEmpty", 8), ("noResponse", 12), ("unsupportedCommand", 20), ("deviceDisabled", 22), ("testFailed", 25), ("userInterfaceActive", 58), ("pendingSoftwareDownload", 73)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipgwCmdCode.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwCmdCode.setDescription('The value of this object upon command completion indicates a further description of what went wrong if the command was unsuccessful. In the case of tests, a bit mapped result of each of the sub-tests performed can be found in the status table.')
ipgwTrap = MibIdentifier((1, 3, 6, 1, 4, 1, 429, 1, 13, 4))
ipgwTrapEnaTable = MibTable((1, 3, 6, 1, 4, 1, 429, 1, 13, 4, 1), )
if mibBuilder.loadTexts: ipgwTrapEnaTable.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwTrapEnaTable.setDescription('Table containing objects to enable traps on the IP Gateway Cards in the chassis.')
ipgwTrapEnaEntry = MibTableRow((1, 3, 6, 1, 4, 1, 429, 1, 13, 4, 1, 1), ).setIndexNames((0, "IPGW-MIB", "ipgwTrapEnaIndex"))
if mibBuilder.loadTexts: ipgwTrapEnaEntry.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwTrapEnaEntry.setDescription('There is one entry for each IP Gateway Card in the chassis.')
ipgwTrapEnaIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 4, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: ipgwTrapEnaIndex.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwTrapEnaIndex.setDescription('A unique index identifying the IP Gateway Card to which the trap enable objects pertain.')
ipgwTrapEnaUiReset = MibTableColumn((1, 3, 6, 1, 4, 1, 429, 1, 13, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: ipgwTrapEnaUiReset.setStatus('mandatory')
if mibBuilder.loadTexts: ipgwTrapEnaUiReset.setDescription('Enables reporting of traps for card reset requests initiated from the Gateway NAC user interface.')
mibBuilder.exportSymbols("IPGW-MIB", ipgwCfgLocalIpAdrs=ipgwCfgLocalIpAdrs, ipgwCfgGatewayIpAdrs=ipgwCfgGatewayIpAdrs, nas=nas, ipgwCfgEthnetFraming=ipgwCfgEthnetFraming, ipgwCmdMgtStationId=ipgwCmdMgtStationId, ipgwTrapEnaTable=ipgwTrapEnaTable, ipgwCmdTable=ipgwCmdTable, ipgwCmdForce=ipgwCmdForce, ipgwCmdCode=ipgwCmdCode, usr=usr, ipgwCfg=ipgwCfg, ipgwTrapEnaEntry=ipgwTrapEnaEntry, ipgwTrapEnaUiReset=ipgwTrapEnaUiReset, ipgwCfgDefMgmtStationIp=ipgwCfgDefMgmtStationIp, ipgwCmdReqId=ipgwCmdReqId, ipgwCfgEntry=ipgwCfgEntry, ipgwCfgDefCommStr=ipgwCfgDefCommStr, ipgwTrapEnaIndex=ipgwTrapEnaIndex, ipgwCmdResult=ipgwCmdResult, ipgwTrap=ipgwTrap, ipgwCmdEntry=ipgwCmdEntry, ipgwCfgTable=ipgwCfgTable, ipgw=ipgw, ipgwCmd=ipgwCmd, ipgwCmdParam=ipgwCmdParam, ipgwCmdFunction=ipgwCmdFunction, ipgwCfgTrapDest=ipgwCfgTrapDest, ipgwCmdIndex=ipgwCmdIndex, ipgwCfgEthIfaceName=ipgwCfgEthIfaceName, ipgwCfgGatewayNetMask=ipgwCfgGatewayNetMask, ipgwCfgIndex=ipgwCfgIndex)
