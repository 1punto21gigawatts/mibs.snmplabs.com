#
# PySNMP MIB module CISCO-VIDEO-SESSION-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CISCO-VIDEO-SESSION-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:02:53 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
OctetString, Integer, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "OctetString", "Integer", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsIntersection, ValueSizeConstraint, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ValueSizeConstraint", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint")
cCallHistoryIndex, = mibBuilder.importSymbols("CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex")
ciscoMgmt, = mibBuilder.importSymbols("CISCO-SMI", "ciscoMgmt")
CvcVideoRtpPayloadFormat, CvcVideoCodecAnnexMap, CvcVideoLevel, CvcVideoProfile = mibBuilder.importSymbols("CISCO-VIDEO-TC", "CvcVideoRtpPayloadFormat", "CvcVideoCodecAnnexMap", "CvcVideoLevel", "CvcVideoProfile")
CvcGUid, CvcCallReferenceIdOrZero, CvcVideoCoderRate = mibBuilder.importSymbols("CISCO-VOICE-COMMON-DIAL-CONTROL-MIB", "CvcGUid", "CvcCallReferenceIdOrZero", "CvcVideoCoderRate")
callActiveSetupTime, callActiveIndex, AbsoluteCounter32 = mibBuilder.importSymbols("DIAL-CONTROL-MIB", "callActiveSetupTime", "callActiveIndex", "AbsoluteCounter32")
ModuleCompliance, NotificationGroup, ObjectGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup", "ObjectGroup")
TimeTicks, Unsigned32, Bits, MibIdentifier, Counter32, IpAddress, NotificationType, Integer32, Counter64, iso, MibScalar, MibTable, MibTableRow, MibTableColumn, ModuleIdentity, Gauge32, ObjectIdentity = mibBuilder.importSymbols("SNMPv2-SMI", "TimeTicks", "Unsigned32", "Bits", "MibIdentifier", "Counter32", "IpAddress", "NotificationType", "Integer32", "Counter64", "iso", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "ModuleIdentity", "Gauge32", "ObjectIdentity")
TextualConvention, DisplayString = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention", "DisplayString")
ciscoVideoSessionMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 9, 753))
ciscoVideoSessionMIB.setRevisions(('2011-04-20 00:00', '2010-07-21 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: ciscoVideoSessionMIB.setRevisionsDescriptions(('1. Deprecated video-specific textual conventions and import them from CISCO-VIDEO-TC instead : CvcVideoLevel, CvcVideoProfile, CvcVideoCodecAnnexMap and CvcRtpPayloadFormat. 2. Added cVideoCommonHistorySessionId and cVideoCommonActiveSessionId to cVideoCommonHistoryTable and cVideoCommonActiveTable, respectively. 3. Added monitoredCall to CvcVoIPCallServiceType TC. 4. Added cVideoCommonStatsHistoryTable with these objects: cVideoCommonStatsHistoryTxTotalLostPackets, cVideoCommonStatsHistoryTxPercentLostPackets, cVideoCommonStatsHistoryTxTotalOutOfOrderPackets, cVideoCommonStatsHistoryTxMaxJitter, cVideoCommonStatsHistoryTxAvgJitter, cVideoCommonStatsHistoryTxMaxDelay, cVideoCommonStatsHistoryTxAvgDelay, cVideoCommonStatsHistoryRxTotalLostPackets and cVideoCommonStatsHistoryRxPercentLostPackets. 5. Added cVideoCommonStatsActiveTable with these objects: cVideoCommonStatsActiveTxActualBitrate, cVideoCommonStatsActiveTxTotalLostPackets, cVideoCommonStatsActiveTxPercentLostPackets, cVideoCommonStatsActiveTxCurrentLostPackets, cVideoCommonStatsActiveTxTotalOutOfOrderPackets, cVideoCommonStatsActiveTxCurrentOutOfOrderPackets, cVideoCommonStatsActiveTxMaxJitter, cVideoCommonStatsActiveTxAvgJitter, cVideoCommonStatsActiveTxCurrentJitter, cVideoCommonStatsActiveTxMaxDelay, cVideoCommonStatsActiveTxAvgDelay, cVideoCommonStatsActiveTxCurrentDelay, cVideoCommonStatsActiveRxActualBitrate, cVideoCommonStatsActiveRxTotalLostPackets, cVideoCommonStatsActiveRxPercentLostPackets and cVideoCommonStatsActiveRxCurrentLostPackets. 6. Deprecated cVideoConfereeHistoryMaxJitter, cVideoConfereeHistoryMaxDelay, cVideoConfereeHistoryTotalOutOfOrderPackets and cVideoConfereeHistoryTotalLostPackets from cVideoConfereeHistoryTable, replacing them with cVideoCommonStatsHistoryTxMaxJitter, cVideoCommonStatsHistoryTxMaxDelay, cVideoCommonStatsHistoryTxTotalOutOfOrderPackets and cVideoCommonStatsHistoryTxTotalLostPackets, respectively, in cVideoCommonStatsHistoryTable. 7. Deprecated cVideoCallHistoryTxOutOfOrderPackets and cVideoCallHistoryTxLostPackets in cVideoCallHistoryTable, replacing them with cVideoCommonStatsHistoryTxTotalOutOfOrderPackets and cVideoCommonStatsHistoryTxTotalLostPackets, respectively, in cVideoCommonStatsHistoryTable. 8. Deprecated cVideoConfereeActiveActualBitrate, cVideoConfereeActiveTable, cVideoConfereeActiveTotalOutOfOrderPackets, cVideoConfereeActiveCurrentOutOfOrderPackets, cVideoConfereeActiveTotalLostPackets, cVideoConfereeActiveCurrentLostPackets, cVideoConfereeActiveMaxJitter, cVideoConfereeActiveCurrentJitter, cVideoConfereeActiveMaxDelay and cVideoConfereeActiveCurrentDelay, replacing them with cVideoCommonStatsActiveTxActualBitrate, cVideoCommonStatsActiveTxTotalOutOfOrderPackets, cVideoCommonStatsActiveTxCurrentOutOfOrderPackets, cVideoCommonStatsActiveTxTotalLostPackets, cVideoCommonStatsActiveTxCurrentLostPackets, cVideoCommonStatsActiveTxMaxJitter, cVideoCommonStatsActiveTxAvgJitter, cVideoCommonStatsActiveTxMaxDelay and cVideoCommonStatsActiveTxCurrentDelay, respectively, in cVideoCommonStatsActiveTable. 9. Deprecated cVideoCallActiveRxActualBitrate and cVideoCallActiveTxLostPackets in cVideoCallActiveTable, replacing them with cVideoCommonStatsActiveRxActualBitrate and cVideoCommonStatsActiveTxTotalLostPackets, respectively, in cVideoCommonStatsActiveTable. 10. Added new compliance groups: cVideoSessionCommonStatusGroup, cVideoSessionCommonStatisticsGroup, cVideoSessionCallStatisticsGroup and cVideoSessionConfereeStatisticsGroup; and deprecated old ones: cVideoSessionHistoryGroup and cVideoSessionActiveGroup. 11. Added new compliance statement (cVideoSessionMIBComplianceRev1) to include the new compliance groups and deprecated the old one (cVideoSessionMIBCompliance).', 'Latest version of this MIB module.',))
if mibBuilder.loadTexts: ciscoVideoSessionMIB.setLastUpdated('201104200000Z')
if mibBuilder.loadTexts: ciscoVideoSessionMIB.setOrganization('Cisco Systems, Inc.')
if mibBuilder.loadTexts: ciscoVideoSessionMIB.setContactInfo('Cisco Systems Customer Service Postal: 170 W Tasman Drive San Jose, CA 95134 USA Tel: +1 800 553-NETS E-mail: cs-<list>@cisco.com')
if mibBuilder.loadTexts: ciscoVideoSessionMIB.setDescription("This MIB module complements the CISCO-VOICE-DIAL-CONTROL-MIB, which provides voice telephony peer information, by providing management of video telephony peer information. This MIB module enhances the IETF Dial Control MIB (RFC2128) by providing video call information over an IP network. A video call is different from an audio call in that a video call typically consists of 2 call legs - audio and video - and each call leg is represented by one call entry. Therefore, each video call creates 2 call entries. In order to associate the video and audio entries of the same video call, a call reference ID is used, i.e., the video and audio entries of the same video call have the same call reference ID. There are 4 tables (Common, Common Statistics, Conferee and Call) in this MIB, where each table contains different information depending on the type of the video call: 1. 'common' and 'common statistics' table entries are created for all video calls; 2. A 'conferee' table entry is created for calls that belong to a video conference; conferee means a participant of a conference; and 3. A 'call' table entry is created for point-to-point video calls. I.e., for a video conference call, there are valid information in the 'common,' 'common statistics' and 'conferee' tables; for a video point-to-point call, there are valid information in the 'common,' 'common statistics' and 'call' tables. Transmit(TX) and Receive(RX) Directions: The video stream direction is defined with respect to the video endpoint. I.e., transmit(TX) refers to the video stream sent by the endpoint and receive(RX) refers to the video stream received by the endpoint. REFERENCE [1] RFC 2128 Dial Control Management Information Base using SMIv2.")
class CvcVoIPCallServiceType(TextualConvention, Integer32):
    description = 'This object describes the call type of this call entry. conferenceCall (1) - This call belongs to a video conference. pointToPointCall (2) - This call belongs to a point-to-point video call. monitoredCall (3) - This call is monitored for video quality.'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 255))
    namedValues = NamedValues(("conferenceCall", 1), ("pointToPointCall", 2), ("monitoredCall", 3), ("other", 255))

class CvcVideoLevel(TextualConvention, Integer32):
    reference = 'ITU-T H.264: Annex A.3 Levels'
    description = 'This object specifies the H.264 level of the video stream. Level 1b (9) Level 1 (10) Level 1.1 (11) Level 1.2 (12) Level 1.3 (13) Level 2 (20) Level 2.1 (21) Level 2.2 (22) Level 3 (30) Level 3.1 (31) Level 3.2 (32) Level 4 (40) Level 4.1 (41) Level 4.2 (42) Level 5 (50) Level 5.1 (51) CvcVideoLevel object is superseded by CvcVideoLevel in CISCO-VIDEO-TC.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(9, 10, 11, 12, 13, 20, 21, 22, 30, 31, 32, 40, 41, 42, 50, 51, 255))
    namedValues = NamedValues(("level1b", 9), ("level1", 10), ("level11", 11), ("level12", 12), ("level13", 13), ("level2", 20), ("level21", 21), ("level22", 22), ("level3", 30), ("level31", 31), ("level32", 32), ("level4", 40), ("level41", 41), ("level42", 42), ("level5", 50), ("level51", 51), ("other", 255))

class CvcVideoProfile(TextualConvention, Integer32):
    reference = 'ITU-T H.263: Annex X.2 Profiles of preferred mode support ITU-T H.264: Annex A.2 Profiles'
    description = 'This object specifies the H.264 profile of the video stream. H.263 Profiles: Profile 0 (10) Profile 1 (11) Profile 2 (12) Profile 3 (13) Profile 4 (14) Profile 5 (15) Profile 6 (16) Profile 7 (17) Profile 8 (18) H.264 Profiles: Baseline Profile (100) Main Profile (101) Extended Profile (102) High Profile (103) High 10 Profile (104) High 4:2:2 Profile (105) High 4:4:4 Predictive Profile (106) High 10 Intra Profile (107) High 4:2:2 Intra Profile (108) High 4:4:4 Intra Profile (109) CAVLC 4:4:4 Intra Profile (110) CvcVideoProfile object is superseded by CvcVideoProfile in CISCO-VIDEO-TC.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(10, 11, 12, 13, 14, 15, 16, 17, 18, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 255))
    namedValues = NamedValues(("h263Profile0", 10), ("h263Profile1", 11), ("h263Profile2", 12), ("h263Profile3", 13), ("h263Profile4", 14), ("h263Profile5", 15), ("h263Profile6", 16), ("h263Profile7", 17), ("h263Profile8", 18), ("h264ProfileBaseline", 100), ("h264ProfileMain", 101), ("h264ProfileExtended", 102), ("h264ProfileHigh", 103), ("h264ProfileHigh10", 104), ("h264ProfileHigh422", 105), ("h264ProfileHigh444Predictive", 106), ("h264ProfileHigh10Intra", 107), ("h264ProfileHigh422Intra", 108), ("h264ProfileHigh444Intra", 109), ("h264ProfileCavlc444Intra", 110), ("other", 255))

class CvcVideoCodecAnnexMap(TextualConvention, Bits):
    reference = 'ITU-T H.263 Annex A - Inverse transform accuracy specification Annex B - Hypothetical Reference Decoder Annex C - Considerations for multipoint Annex D - Unrestricted Motion Vector Mode Annex E - Syntax-based Arithmetic Coding mode Annex F - Advanced Prediction mode Annex G - PB-frames mode Annex H - Forward error correction for coded video signal Annex I - Advanced INTRA Coding mode Annex J - Deblocking Filter mode Annex K - Slice Structured mode Annex L - Supplemental enhancement information specification Annex M - Improved PB-frames mode Annex N - Reference Picture selection mode Annex O - Temporal, SNR, and Spatial Scalability mode Annex P - Reference picture resampling Annex Q - Reduced-Resolution Update mode Annex R - Independent Segment Decoding mode Annex S - Alternative INTER VLC mode Annex T - Modified Quantization mode Annex U - Enhanced reference picture selection mode Annex V - Data-partitioned slice mode Annex W - Additional supplemental enhancement information specification ITU-T H.264 Annex C - Hypothetical reference decoder Annex D - Supplemental enhancement information Annex E - Video usability information Annex G - Scalable video coding Annex H - Multiview video coding'
    description = 'This is a bit map that describes the annex(es) present for the video codec. Multiple annexes can be present; bits that are set to 1 indicate the supported annex(es) correspondingly. No annex - 0x000000 (no bit is on) Annex D.1 - 0x000001 (bit 0) Annex D.2 - 0x000002 (bit 1) Annex E - 0x000004 (bit 2) Annex F - 0x000008 (bit 3) Annex G - 0x000010 (bit 4) Annex H - 0x000020 (bit 5) Annex I - 0x000040 (bit 6) Annex J - 0x000080 (bit 7) Annex K - 0x000100 (bit 8) Annex L - 0x000200 (bit 9) Annex M - 0x000400 (bit 10) Annex N - 0x000800 (bit 11) Annex O - 0x001000 (bit 12) Annex P - 0x002000 (bit 13) Annex Q - 0x004000 (bit 14) Annex R - 0x008000 (bit 15) Annex S - 0x010000 (bit 16) Annex T - 0x020000 (bit 17) Annex U - 0x040000 (bit 18) Annex V - 0x080000 (bit 19) Annex W - 0x100000 (bit 20) CvcVideoCodecAnnexMap object is superseded by CvcVideoCodecAnnexMap in CISCO-VIDEO-TC.'
    status = 'deprecated'
    namedValues = NamedValues(("annexNone", 0), ("annexD1", 1), ("annexD2", 2), ("annexE", 3), ("annexF", 4), ("annexG", 5), ("annexH", 6), ("annexI", 7), ("annexJ", 8), ("annexK", 9), ("annexL", 10), ("annexM", 11), ("annexN", 12), ("annexO", 13), ("annexP", 14), ("annexQ", 15), ("annexR", 16), ("annexS", 17), ("annexT", 18), ("annexU", 19), ("annexV", 20), ("annexW", 21))

class CvcRtpPayloadFormat(TextualConvention, Integer32):
    reference = 'RFC 2190 - RTP Payload Format for H.263 Video Streams RFC 2429 - RTP Payload Format for the 1998 Version of ITU-T Rec. H.263 Video (H.263+) RFC 4629 - RTP Payload Format for ITU-T Rec. H.263 Video RFC 3984 - RTP Payload Format for H.264 Video'
    description = 'This object specifies the RTP payload format used for the video stream. RFC2190 (1) - RTP payload format for video codec H.263 RFC2429 (2) - RTP payload format for video codec H.263 RFC4629 (3) - RTP payload format for video codec H.263 RFC3984 (4) - RTP payload format for video codec H.264 CvcRtpPayloadFormat object is superseded by CvcVideoRtpPayloadFormat in CISCO-VIDEO-TC.'
    status = 'deprecated'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 255))
    namedValues = NamedValues(("rfc2190", 1), ("rfc2429", 2), ("rfc4629", 3), ("rfc3984", 4), ("other", 255))

ciscoVideoSessionMIBNotifs = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 753, 0))
ciscoVideoSessionMIBObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 753, 1))
ciscoVideoSessionMIBConform = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 753, 2))
cVideoSessionHistory = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1))
cVideoSessionActive = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2))
cVideoCommonHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1), )
if mibBuilder.loadTexts: cVideoCommonHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryTable.setDescription('This table provides the video extension to the call history table of Cisco Dial Control MIB. It contains common video call leg information and statistics for both a video conference call (video conferee) and a point-to-point video call.')
cVideoCommonHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1), ).setIndexNames((0, "CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex"))
if mibBuilder.loadTexts: cVideoCommonHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryEntry.setDescription("The common information for a single video call leg. An entry is created when the below conditions are met: 1. An associated call history entry in cCallHistoryTable of the Cisco Dial Control MIB with video cCallHistoryInfoType is created. 2. An associated call history entry in cVoIPCallHistoryTable of the Cisco Voice Dial Control MIB with SCCP cVoIPCallHistorySessionProtocol is created. 3. cVideoCommonHistoryCallType of this call entry is 'pointToPointCall', 'conferenceCall' or 'monitoredCall'. The entry is deleted when its associated call history entries in cCallHistoryTable of the Cisco Dial Control MIB and cVoIPCallHistoryTable of the Cisco Voice Dial Control MIB are deleted.")
cVideoCommonHistoryConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryConnectionId.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryConnectionId.setDescription('The global call identifier for a video call session.')
cVideoCommonHistoryCallReferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 2), CvcCallReferenceIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryCallReferenceId.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryCallReferenceId.setDescription('The call reference ID associates the video call entry and voice call entry of the same endpoint. The call reference ID is assigned by the call manager and is non-zero for a video call session.')
cVideoCommonHistoryCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 3), CvcVoIPCallServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryCallType.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryCallType.setDescription('This object describes the call type of this call entry.')
cVideoCommonHistoryTxCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 4), CvcVideoCoderRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryTxCodec.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryTxCodec.setDescription('The encoding type used to compress the video data in transmit direction for a video call session.')
cVideoCommonHistoryTxPictureWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 5), Unsigned32()).setUnits('pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryTxPictureWidth.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryTxPictureWidth.setDescription('The picture width in transmit direction for a video call session.')
cVideoCommonHistoryTxPictureHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 6), Unsigned32()).setUnits('pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryTxPictureHeight.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryTxPictureHeight.setDescription('The picture height in transmit direction for a video call session.')
cVideoCommonHistoryTxConfigFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 7), Unsigned32()).setUnits('frames per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryTxConfigFrameRate.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryTxConfigFrameRate.setDescription('The video stream frame rate in transmit direction for a video call session.')
cVideoCommonHistoryTxConfigBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 8), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryTxConfigBitrate.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryTxConfigBitrate.setDescription('The video stream bitrate in transmit direction for a video call session.')
cVideoCommonHistoryTxPayloadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 9), CvcVideoRtpPayloadFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryTxPayloadFormat.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryTxPayloadFormat.setDescription('The video stream RTP payload format in transmit direction for a video call session.')
cVideoCommonHistoryTxAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 10), CvcVideoCodecAnnexMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryTxAnnex.setReference('ITU-T H.263 Annex A - Inverse transform accuracy specification Annex B - Hypothetical Reference Decoder Annex C - Considerations for multipoint Annex D - Unrestricted Motion Vector Mode Annex E - Syntax-based Arithmetic Coding mode Annex F - Advanced Prediction mode Annex G - PB-frames mode Annex H - Forward error correction for coded video signal Annex I - Advanced INTRA Coding mode Annex J - Deblocking Filter mode Annex K - Slice Structured mode Annex L - Supplemental enhancement information specification Annex M - Improved PB-frames mode Annex N - Reference Picture selection mode Annex O - Temporal, SNR, and Spatial Scalability mode Annex P - Reference picture resampling Annex Q - Reduced-Resolution Update mode Annex R - Independent Segment Decoding mode Annex S - Alternative INTER VLC mode Annex T - Modified Quantization mode Annex U - Enhanced reference picture selection mode Annex V - Data-partitioned slice mode Annex W - Additional supplemental enhancement information specification ITU-T H.264 Annex C - Hypothetical reference decoder Annex D - Supplemental enhancement information Annex E - Video usability information Annex G - Scalable video coding Annex H - Multiview video coding')
if mibBuilder.loadTexts: cVideoCommonHistoryTxAnnex.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryTxAnnex.setDescription('The video codec annex extension in transmit direction for a video call session.')
cVideoCommonHistoryTxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 11), CvcVideoProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryTxProfile.setReference('ITU-T H.263: Annex X.2 Profiles of preferred mode support ITU-T H.264: Annex A.2 Profiles')
if mibBuilder.loadTexts: cVideoCommonHistoryTxProfile.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryTxProfile.setDescription('The video stream profile in transmit direction for a video call session.')
cVideoCommonHistoryTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 12), CvcVideoLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryTxLevel.setReference('ITU-T H.264: Annex A.3 Levels')
if mibBuilder.loadTexts: cVideoCommonHistoryTxLevel.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryTxLevel.setDescription('The video stream level in transmit direction for a video call session.')
cVideoCommonHistoryTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 13), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryTxPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryTxPackets.setDescription('The total number of video data packets transmitted for the video call session.')
cVideoCommonHistoryTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 14), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryTxBytes.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryTxBytes.setDescription('The total number of video data bytes transmitted for the video call session.')
cVideoCommonHistoryTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryTxDuration.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryTxDuration.setDescription('Duration of video stream path, in transmit direction, opened for the call leg.')
cVideoCommonHistoryRxCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 16), CvcVideoCoderRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryRxCodec.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryRxCodec.setDescription('The encoding type used to compress the video data in receive direction for a video call session.')
cVideoCommonHistoryRxPictureWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 17), Unsigned32()).setUnits('pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryRxPictureWidth.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryRxPictureWidth.setDescription('The picture width in receive direction for a video call session.')
cVideoCommonHistoryRxPictureHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 18), Unsigned32()).setUnits('pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryRxPictureHeight.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryRxPictureHeight.setDescription('The picture height in receive direction for a video call session.')
cVideoCommonHistoryRxConfigFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 19), Unsigned32()).setUnits('frames per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryRxConfigFrameRate.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryRxConfigFrameRate.setDescription('The video stream frame rate in receive direction for a video call session.')
cVideoCommonHistoryRxConfigBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 20), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryRxConfigBitrate.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryRxConfigBitrate.setDescription('The video stream bitrate in receive direction for a video call session.')
cVideoCommonHistoryRxPayloadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 21), CvcVideoRtpPayloadFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryRxPayloadFormat.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryRxPayloadFormat.setDescription('The video stream RTP payload format in receive direction for a video call session.')
cVideoCommonHistoryRxAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 22), CvcVideoCodecAnnexMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryRxAnnex.setReference('ITU-T H.263 Annex A - Inverse transform accuracy specification Annex B - Hypothetical Reference Decoder Annex C - Considerations for multipoint Annex D - Unrestricted Motion Vector Mode Annex E - Syntax-based Arithmetic Coding mode Annex F - Advanced Prediction mode Annex G - PB-frames mode Annex H - Forward error correction for coded video signal Annex I - Advanced INTRA Coding mode Annex J - Deblocking Filter mode Annex K - Slice Structured mode Annex L - Supplemental enhancement information specification Annex M - Improved PB-frames mode Annex N - Reference Picture selection mode Annex O - Temporal, SNR, and Spatial Scalability mode Annex P - Reference picture resampling Annex Q - Reduced-Resolution Update mode Annex R - Independent Segment Decoding mode Annex S - Alternative INTER VLC mode Annex T - Modified Quantization mode Annex U - Enhanced reference picture selection mode Annex V - Data-partitioned slice mode Annex W - Additional supplemental enhancement information specification ITU-T H.264 Annex C - Hypothetical reference decoder Annex D - Supplemental enhancement information Annex E - Video usability information Annex G - Scalable video coding Annex H - Multiview video coding')
if mibBuilder.loadTexts: cVideoCommonHistoryRxAnnex.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryRxAnnex.setDescription('The video codec annex extension in receive direction for a video call session.')
cVideoCommonHistoryRxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 23), CvcVideoProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryRxProfile.setReference('ITU-T H.263: Annex X.2 Profiles of preferred mode support ITU-T H.264: Annex A.2 Profiles')
if mibBuilder.loadTexts: cVideoCommonHistoryRxProfile.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryRxProfile.setDescription('The video stream profile in receive direction for a video call session.')
cVideoCommonHistoryRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 24), CvcVideoLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryRxLevel.setReference('ITU-T H.264: Annex A.3 Levels')
if mibBuilder.loadTexts: cVideoCommonHistoryRxLevel.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryRxLevel.setDescription('The video stream level in receive direction for a video call session.')
cVideoCommonHistoryRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 25), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryRxPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryRxPackets.setDescription('The total number of video data packets received for the video call session.')
cVideoCommonHistoryRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 26), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryRxBytes.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryRxBytes.setDescription('The total number of video data bytes received for the video call session.')
cVideoCommonHistoryRxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 27), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistoryRxDuration.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistoryRxDuration.setDescription('Duration of video stream path, in receive direction, opened for the call leg.')
cVideoCommonHistorySessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonHistorySessionId.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonHistorySessionId.setDescription('Session ID is assigned by the call manager to identify call legs that belong to the same call session.')
cVideoConfereeHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 2), )
if mibBuilder.loadTexts: cVideoConfereeHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cVideoConfereeHistoryTable.setDescription('This table provides the video extension to the call history table of Cisco Dial Control MIB. It contains video call leg information and statistics for a video conference call (video conferee).')
cVideoConfereeHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 2, 1), ).setIndexNames((0, "CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex"))
if mibBuilder.loadTexts: cVideoConfereeHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cVideoConfereeHistoryEntry.setDescription("The information regarding a single video conferee call leg. This entry is an extension to the cVideoCommonHistoryEntry, providing information specific to a video call entry that belongs to a conference. An entry is created when the below conditions are met: 1. An associated call history entry in cCallHistoryTable of the Cisco Dial Control MIB with video cCallHistoryInfoType is created. 2. An associated call history entry in cVoIPCallHistoryTable of the Cisco Voice Dial Control MIB with SCCP cVoIPCallHistorySessionProtocol is created. 3. This call entry belongs to a video conference call, i.e. cVideoCommonHistoryCallType in cVideoCommonHistoryEntry has value 'conferenceCall'. The entry is deleted when its associated call history entries in cCallHistoryTable of the Cisco Dial Control MIB and cVoIPCallHistoryTable of the Cisco Voice Dial Control MIB are deleted.")
cVideoConfereeHistoryTotalDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 2, 1, 1), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeHistoryTotalDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoConfereeHistoryTotalDroppedPackets.setDescription('The total number of dropped video data packets for the video call session.')
cVideoConfereeHistoryMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 2, 1, 2), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeHistoryMaxJitter.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoConfereeHistoryMaxJitter.setDescription('This object is superseded by cVideoCommonStatsHistoryTxMaxJitter in cVideoCommonStatsHistoryTable. Maximum jitter measured since the beginning of the video call session.')
cVideoConfereeHistoryMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 2, 1, 3), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeHistoryMaxDelay.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoConfereeHistoryMaxDelay.setDescription('This object is superseded by cVideoCommonStatsHistoryTxMaxDelay in cVideoCommonStatsHistoryTable. Maximum delay measured since the beginning of the video call session.')
cVideoConfereeHistoryTotalOutOfOrderPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 2, 1, 4), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeHistoryTotalOutOfOrderPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoConfereeHistoryTotalOutOfOrderPackets.setDescription('This object is superseded by cVideoCommonStatsHistoryTxTotalOutOfOrderPackets in cVideoCommonStatsHistoryTable. The total number of out-of-order video data packets for the video call session.')
cVideoConfereeHistoryMaxOutOfSyncDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 2, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeHistoryMaxOutOfSyncDelay.setStatus('current')
if mibBuilder.loadTexts: cVideoConfereeHistoryMaxOutOfSyncDelay.setDescription('Maximum out-of-sync delay measured since the beginning of the video call session.')
cVideoConfereeHistoryTotalLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 2, 1, 6), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeHistoryTotalLostPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoConfereeHistoryTotalLostPackets.setDescription('This object is superseded by cVideoCommonStatsHistoryTxTotalLostPackets in cVideoCommonStatsHistoryTable. The total number of lost video data packets for the video call session.')
cVideoCallHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 3), )
if mibBuilder.loadTexts: cVideoCallHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cVideoCallHistoryTable.setDescription('This table provides the video extension to the call history table of Cisco Dial Control MIB. It contains video call leg information and statistics for a point-to-point video call.')
cVideoCallHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 3, 1), ).setIndexNames((0, "CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex"))
if mibBuilder.loadTexts: cVideoCallHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cVideoCallHistoryEntry.setDescription("The information regarding a single video call leg. This entry is an extension to the cVideoCommonHistoryEntry, providing information specific to a point-to-point video call entry. An entry is created when the below conditions are met: 1. An associated call history entry in cCallHistoryTable of the Cisco Dial Control MIB with video cCallHistoryInfoType is created. 2. An associated call history entry in cVoIPCallHistoryTable of the Cisco Voice Dial Control MIB with SCCP cVoIPCallHistorySessionProtocol is created. 3. This call history entry belongs to a point-to-point video call, i.e. cVideoCommonHistoryCallType in cVideoCommonHistoryEntry has value 'pointToPointCall'. The entry is deleted when its associated call history entries in cCallHistoryTable of the Cisco Dial Control MIB and cVoIPCallHistoryTable of the Cisco Voice Dial Control MIB are deleted.")
cVideoCallHistoryTxMacroblocksConcealed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 3, 1, 1), AbsoluteCounter32()).setUnits('macroblocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCallHistoryTxMacroblocksConcealed.setStatus('current')
if mibBuilder.loadTexts: cVideoCallHistoryTxMacroblocksConcealed.setDescription('Number of concealed macroblocks measured in transmit direction of the video call session. One macroblock is 16 pixels by 16 pixels.')
cVideoCallHistoryTxFramesConcealed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 3, 1, 2), AbsoluteCounter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCallHistoryTxFramesConcealed.setStatus('current')
if mibBuilder.loadTexts: cVideoCallHistoryTxFramesConcealed.setDescription('Number of concealed frames measured in transmit direction of the video call session.')
cVideoCallHistoryTxBadHeaderPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 3, 1, 3), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCallHistoryTxBadHeaderPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCallHistoryTxBadHeaderPackets.setDescription('Number of bad header packets measured in transmit direction of the video call session.')
cVideoCallHistoryTxOverflowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 3, 1, 4), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCallHistoryTxOverflowPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCallHistoryTxOverflowPackets.setDescription('Number of overflow packets measured in transmit direction of the video call session.')
cVideoCallHistoryTxOutOfOrderPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 3, 1, 5), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCallHistoryTxOutOfOrderPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoCallHistoryTxOutOfOrderPackets.setDescription('This object is superseded by cVideoCommonStatsHistoryTxTotalOutOfOrderPackets in cVideoCommonStatsHistoryTable. Number of out-of-order packets measured in transmit direction of the video call session.')
cVideoCallHistoryTxLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 3, 1, 6), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCallHistoryTxLostPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoCallHistoryTxLostPackets.setDescription('This object is superseded by cVideoCommonStatsHistoryTxTotalLostPackets in cVideoCommonStatsHistoryTable. Number of lost packets measured in transmit direction of the video call session.')
cVideoCommonStatsHistoryTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 4), )
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTable.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTable.setDescription('This table provides the video extension to the call history table of Cisco Dial Control MIB. It contains common video call leg statistics for both a video call within a conference (video conferee) and a simple video call.')
cVideoCommonStatsHistoryEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 4, 1), ).setIndexNames((0, "CISCO-DIAL-CONTROL-MIB", "cCallHistoryIndex"))
if mibBuilder.loadTexts: cVideoCommonStatsHistoryEntry.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsHistoryEntry.setDescription("The common network statistics for a single video call leg. This entry accompanies cVideoCommonActiveEntry with more detailed statistics. An entry is created when the below conditions are met: 1. An associated call history entry in cCallHistoryTable of the Cisco Dial Control MIB with video cCallHistoryInfoType is created. 2. An associated call history entry in cVoIPCallHistoryTable of the Cisco Voice Dial Control MIB with SCCP cVoIPCallHistorySessionProtocol is created. 3. cVideoCommonHistoryCallType of this call entry is 'pointToPointCall' or 'conferenceCall'. The entry is deleted when its associated call history entries in cCallHistoryTable of the Cisco Dial Control MIB and cVoIPCallHistoryTable of the Cisco Voice Dial Control MIB are deleted.")
cVideoCommonStatsHistoryTxTotalLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 4, 1, 1), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTxTotalLostPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTxTotalLostPackets.setDescription('Number of lost packets of the video call session measured in transmit direction.')
cVideoCommonStatsHistoryTxPercentLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 4, 1, 2), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTxPercentLostPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTxPercentLostPackets.setDescription('The percentage of lost video data packets for the entire duration of the video call session in transmit direction.')
cVideoCommonStatsHistoryTxTotalOutOfOrderPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 4, 1, 3), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTxTotalOutOfOrderPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTxTotalOutOfOrderPackets.setDescription('Number of out-of-order packets of the video call session measured in transmit direction.')
cVideoCommonStatsHistoryTxMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 4, 1, 4), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTxMaxJitter.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTxMaxJitter.setDescription('Maximum jitter measured since the beginning of the video call session in transmit direction.')
cVideoCommonStatsHistoryTxAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 4, 1, 5), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTxAvgJitter.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTxAvgJitter.setDescription('Average jitter measured since the beginning of the video call session in transmit direction.')
cVideoCommonStatsHistoryTxMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 4, 1, 6), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTxMaxDelay.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTxMaxDelay.setDescription('Maximum delay measured since the beginning of the video call session in transmit direction.')
cVideoCommonStatsHistoryTxAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 4, 1, 7), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTxAvgDelay.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsHistoryTxAvgDelay.setDescription('Average delay since the beginning of the video call session measured in transmit direction.')
cVideoCommonStatsHistoryRxTotalLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 4, 1, 8), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsHistoryRxTotalLostPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsHistoryRxTotalLostPackets.setDescription('The total number of lost video data packets for the video call session in receive direction.')
cVideoCommonStatsHistoryRxPercentLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 1, 4, 1, 9), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsHistoryRxPercentLostPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsHistoryRxPercentLostPackets.setDescription('The percentage of lost video data packets for the entire duration of the video call session in receive direction.')
cVideoCommonActiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1), )
if mibBuilder.loadTexts: cVideoCommonActiveTable.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveTable.setDescription('This table provides the video extension to the call active table of IETF Dial Control MIB. It contains common video call leg information and statistics for both a video call within a conference (video conferee) and a simple video call.')
cVideoCommonActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: cVideoCommonActiveEntry.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveEntry.setDescription("The information regarding a single video call leg. An entry is created when the below conditions are met: 1. An associated call active entry in callActiveTable of the IETF Dial Control MIB with video callActiveInfoType is created. 2. An associated call active entry in cVoIPCallActiveTable of the Cisco Voice Dial Control MIB with SCCP cVoIPCallActiveSessionProtocol is created. 3. cVideoCommonActiveCallType of this call entry is 'pointToPointCall', conferenceCall, or 'monitoredCall'. The entry is deleted when its associated call active entries in callActiveTable of the IETF Dial Control MIB and cVoIPCallActiveTable of the Cisco Voice Dial Control MIB are deleted.")
cVideoCommonActiveConnectionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 1), CvcGUid()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveConnectionId.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveConnectionId.setDescription('The global call identifier for a video call leg.')
cVideoCommonActiveCallReferenceId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 2), CvcCallReferenceIdOrZero()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveCallReferenceId.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveCallReferenceId.setDescription('The call reference ID associates the video call entry and voice call entry of the same endpoint. The call reference ID is assigned by the call manager and is non-zero for a video call session.')
cVideoCommonActiveCallType = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 3), CvcVoIPCallServiceType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveCallType.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveCallType.setDescription('This object describes the call type of this call entry.')
cVideoCommonActiveTxCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 4), CvcVideoCoderRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveTxCodec.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveTxCodec.setDescription('The encoding type used to compress the video data in transmit direction for a video call session.')
cVideoCommonActiveTxPictureWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 5), Unsigned32()).setUnits('pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveTxPictureWidth.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveTxPictureWidth.setDescription('The picture width in transmit direction for a video call session.')
cVideoCommonActiveTxPictureHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 6), Unsigned32()).setUnits('pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveTxPictureHeight.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveTxPictureHeight.setDescription('The picture height in transmit direction for a video call session.')
cVideoCommonActiveTxConfigFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 7), Unsigned32()).setUnits('frames per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveTxConfigFrameRate.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveTxConfigFrameRate.setDescription('The video stream frame rate in transmit direction for a video call session.')
cVideoCommonActiveTxConfigBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 8), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveTxConfigBitrate.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveTxConfigBitrate.setDescription('The video stream bitrate in transmit direction for a video call session.')
cVideoCommonActiveTxPayloadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 9), CvcVideoRtpPayloadFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveTxPayloadFormat.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveTxPayloadFormat.setDescription('The video stream RTP payload format in transmit direction for a video call session.')
cVideoCommonActiveTxAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 10), CvcVideoCodecAnnexMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveTxAnnex.setReference('ITU-T H.263 Annex A - Inverse transform accuracy specification Annex B - Hypothetical Reference Decoder Annex C - Considerations for multipoint Annex D - Unrestricted Motion Vector Mode Annex E - Syntax-based Arithmetic Coding mode Annex F - Advanced Prediction mode Annex G - PB-frames mode Annex H - Forward error correction for coded video signal Annex I - Advanced INTRA Coding mode Annex J - Deblocking Filter mode Annex K - Slice Structured mode Annex L - Supplemental enhancement information specification Annex M - Improved PB-frames mode Annex N - Reference Picture selection mode Annex O - Temporal, SNR, and Spatial Scalability mode Annex P - Reference picture resampling Annex Q - Reduced-Resolution Update mode Annex R - Independent Segment Decoding mode Annex S - Alternative INTER VLC mode Annex T - Modified Quantization mode Annex U - Enhanced reference picture selection mode Annex V - Data-partitioned slice mode Annex W - Additional supplemental enhancement information specification ITU-T H.264 Annex C - Hypothetical reference decoder Annex D - Supplemental enhancement information Annex E - Video usability information Annex G - Scalable video coding Annex H - Multiview video coding')
if mibBuilder.loadTexts: cVideoCommonActiveTxAnnex.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveTxAnnex.setDescription('The video codec annex extension in transmit direction for a video call session.')
cVideoCommonActiveTxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 11), CvcVideoProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveTxProfile.setReference('ITU-T H.263: Annex X.2 Profiles of preferred mode support ITU-T H.264: Annex A.2 Profiles')
if mibBuilder.loadTexts: cVideoCommonActiveTxProfile.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveTxProfile.setDescription('The video stream profile in transmit direction for a video call session.')
cVideoCommonActiveTxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 12), CvcVideoLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveTxLevel.setReference('ITU-T H.264: Annex A.3 Levels')
if mibBuilder.loadTexts: cVideoCommonActiveTxLevel.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveTxLevel.setDescription('The video stream level in transmit direction for a video call session.')
cVideoCommonActiveTxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 13), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveTxPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveTxPackets.setDescription('The total number of video data packets transmitted for the video call session.')
cVideoCommonActiveTxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 14), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveTxBytes.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveTxBytes.setDescription('The total number of video data bytes transmitted for the video call session.')
cVideoCommonActiveTxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 15), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveTxDuration.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveTxDuration.setDescription('Duration of video stream path, in transmit direction, opened for the call leg.')
cVideoCommonActiveRxCodec = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 16), CvcVideoCoderRate()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveRxCodec.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveRxCodec.setDescription('The negotiated encoding type used to compress the video data in receive direction for a video call session.')
cVideoCommonActiveRxPictureWidth = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 17), Unsigned32()).setUnits('pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveRxPictureWidth.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveRxPictureWidth.setDescription('The negotiated picture width in receive direction for a video call session.')
cVideoCommonActiveRxPictureHeight = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 18), Unsigned32()).setUnits('pixels').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveRxPictureHeight.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveRxPictureHeight.setDescription('The negotiated picture height in receive direction for a video call session.')
cVideoCommonActiveRxConfigFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 19), Unsigned32()).setUnits('frames per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveRxConfigFrameRate.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveRxConfigFrameRate.setDescription('The negotiated video stream frame rate in receive direction for a video call session.')
cVideoCommonActiveRxConfigBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 20), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveRxConfigBitrate.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveRxConfigBitrate.setDescription('The negotiated video stream bitrate in receive direction for a video call session.')
cVideoCommonActiveRxPayloadFormat = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 21), CvcVideoRtpPayloadFormat()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveRxPayloadFormat.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveRxPayloadFormat.setDescription('The video stream RTP payload format in receive direction for a video call session.')
cVideoCommonActiveRxAnnex = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 22), CvcVideoCodecAnnexMap()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveRxAnnex.setReference('ITU-T H.263 Annex A - Inverse transform accuracy specification Annex B - Hypothetical Reference Decoder Annex C - Considerations for multipoint Annex D - Unrestricted Motion Vector Mode Annex E - Syntax-based Arithmetic Coding mode Annex F - Advanced Prediction mode Annex G - PB-frames mode Annex H - Forward error correction for coded video signal Annex I - Advanced INTRA Coding mode Annex J - Deblocking Filter mode Annex K - Slice Structured mode Annex L - Supplemental enhancement information specification Annex M - Improved PB-frames mode Annex N - Reference Picture selection mode Annex O - Temporal, SNR, and Spatial Scalability mode Annex P - Reference picture resampling Annex Q - Reduced-Resolution Update mode Annex R - Independent Segment Decoding mode Annex S - Alternative INTER VLC mode Annex T - Modified Quantization mode Annex U - Enhanced reference picture selection mode Annex V - Data-partitioned slice mode Annex W - Additional supplemental enhancement information specification ITU-T H.264 Annex C - Hypothetical reference decoder Annex D - Supplemental enhancement information Annex E - Video usability information Annex G - Scalable video coding Annex H - Multiview video coding')
if mibBuilder.loadTexts: cVideoCommonActiveRxAnnex.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveRxAnnex.setDescription('The video codec annex extension in receive direction for a video call session.')
cVideoCommonActiveRxProfile = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 23), CvcVideoProfile()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveRxProfile.setReference('ITU-T H.263: Annex X.2 Profiles of preferred mode support ITU-T H.264: Annex A.2 Profiles')
if mibBuilder.loadTexts: cVideoCommonActiveRxProfile.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveRxProfile.setDescription('The negotiated video stream profile in receive direction for a video call session.')
cVideoCommonActiveRxLevel = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 24), CvcVideoLevel()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveRxLevel.setReference('ITU-T H.264: Annex A.3 Levels')
if mibBuilder.loadTexts: cVideoCommonActiveRxLevel.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveRxLevel.setDescription('The negotiated video stream level in receive direction for a video call session.')
cVideoCommonActiveRxPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 25), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveRxPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveRxPackets.setDescription('The total number of video data packets received for the video call session.')
cVideoCommonActiveRxBytes = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 26), Counter64()).setUnits('bytes').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveRxBytes.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveRxBytes.setDescription('The total number of video data bytes received for the video call session.')
cVideoCommonActiveRxDuration = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 27), Unsigned32()).setUnits('seconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveRxDuration.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveRxDuration.setDescription('Duration of video stream path, in receive direction, opened for the call leg.')
cVideoCommonActiveSessionId = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 1, 1, 28), Unsigned32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonActiveSessionId.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonActiveSessionId.setDescription('Session ID is assigned by the call manager to identify call legs that belong to the same call session.')
cVideoConfereeActiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2), )
if mibBuilder.loadTexts: cVideoConfereeActiveTable.setStatus('current')
if mibBuilder.loadTexts: cVideoConfereeActiveTable.setDescription('This table provides the video extension to the call active table of IETF Dial Control MIB. It contains video call leg information and statistics for a video call within a conference (video conferee).')
cVideoConfereeActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: cVideoConfereeActiveEntry.setStatus('current')
if mibBuilder.loadTexts: cVideoConfereeActiveEntry.setDescription("The information regarding a single video conferee call leg. This entry is an extension to the cVideoCommonActiveEntry, providing information specific to a video call entry that belongs to a conference. An entry is created when the below conditions are met: 1. An associated call active entry in callActiveTable of the IETF Dial Control MIB with video callActiveInfoType is created. 2. An associated call active entry in cVoIPCallActiveTable of the Cisco Voice Dial Control MIB with SCCP cVoIPCallActiveSessionProtocol is created. 3. This call entry belongs to a video conference, i.e. cVideoCommonActiveCallType in cVideoCommonActiveEntry has value 'conferenceCall'. The entry is deleted when its associated call active entries in callActiveTable of the IETF Dial Control MIB and cVoIPCallActiveTable of the Cisco Voice Dial Control MIB are deleted.")
cVideoConfereeActiveActualFrameRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 1), Unsigned32()).setUnits('frames per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveActualFrameRate.setStatus('current')
if mibBuilder.loadTexts: cVideoConfereeActiveActualFrameRate.setDescription('The actual measured video stream frame rate for a video call session.')
cVideoConfereeActiveActualBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 2), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveActualBitrate.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoConfereeActiveActualBitrate.setDescription('This object is superseded by cVideoCommonStatsActiveTxActualBitrate in cVideoCommonStatsActiveTable. The actual measured video stream bitrate for a video call session.')
cVideoConfereeActiveTotalDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 3), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveTotalDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoConfereeActiveTotalDroppedPackets.setDescription('The total number of dropped video data packets for the video call session.')
cVideoConfereeActiveCurrentDroppedPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 4), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveCurrentDroppedPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoConfereeActiveCurrentDroppedPackets.setDescription('The number of dropped video data packets within the last 5 seconds for the video call session.')
cVideoConfereeActiveTotalOutOfOrderPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 5), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveTotalOutOfOrderPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoConfereeActiveTotalOutOfOrderPackets.setDescription('This object is superseded by cVideoCommonStatsActiveTxTotalOutOfOrderPackets in cVideoCommonStatsActiveTable. The total number of out-of-order video data packets for the video call session.')
cVideoConfereeActiveCurrentOutOfOrderPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 6), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveCurrentOutOfOrderPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoConfereeActiveCurrentOutOfOrderPackets.setDescription('This object is superseded by cVideoCommonStatsActiveTxCurrentOutOfOrderPackets in cVideoCommonStatsActiveTable. The number of out-of-order video data packets within the last 5 seconds for the video call session.')
cVideoConfereeActiveTotalLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 7), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveTotalLostPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoConfereeActiveTotalLostPackets.setDescription('This object is superseded by cVideoCommonStatsActiveTxTotalLostPackets in cVideoCommonStatsActiveTable. The total number of lost video data packets for the video call session.')
cVideoConfereeActiveCurrentLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 8), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveCurrentLostPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoConfereeActiveCurrentLostPackets.setDescription('This object is superseded by cVideoCommonStatsActiveTxCurrentLostPackets in cVideoCommonStatsActiveTable. The number of lost video data packets within the last 5 seconds for the video call session.')
cVideoConfereeActiveMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 9), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveMaxJitter.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoConfereeActiveMaxJitter.setDescription('This object is superseded by cVideoCommonStatsActiveTxMaxJitter in cVideoCommonStatsActiveTable. Maximum jitter measured since the beginning of the video call session.')
cVideoConfereeActiveCurrentJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 10), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveCurrentJitter.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoConfereeActiveCurrentJitter.setDescription('This object is superseded by cVideoCommonStatsActiveTxAvgJitter in cVideoCommonStatsActiveTable. Average jitter measured within the last 5 seconds of the video call session.')
cVideoConfereeActiveMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 11), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveMaxDelay.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoConfereeActiveMaxDelay.setDescription('This object is superseded by cVideoCommonStatsActiveTxMaxDelay in cVideoCommonStatsActiveTable. Maximum delay measured since the beginning of the video call session.')
cVideoConfereeActiveCurrentDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 12), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveCurrentDelay.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoConfereeActiveCurrentDelay.setDescription('This object is superseded by cVideoCommonStatsActiveTxCurrentDelay in cVideoCommonStatsActiveTable. Average delay measured within the last 5 seconds of the video call session.')
cVideoConfereeActiveMaxOutOfSyncDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 13), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveMaxOutOfSyncDelay.setStatus('current')
if mibBuilder.loadTexts: cVideoConfereeActiveMaxOutOfSyncDelay.setDescription('Maximum out-of-sync delay measured since the beginning of the video call session.')
cVideoConfereeActiveCurrentOutOfSyncDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 14), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveCurrentOutOfSyncDelay.setStatus('current')
if mibBuilder.loadTexts: cVideoConfereeActiveCurrentOutOfSyncDelay.setDescription('Average out-of-sync delay measured within the last 5 seconds of the video call session.')
cVideoConfereeActiveFastVideoUpdateRate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 2, 1, 15), AbsoluteCounter32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoConfereeActiveFastVideoUpdateRate.setStatus('current')
if mibBuilder.loadTexts: cVideoConfereeActiveFastVideoUpdateRate.setDescription('Number of fast video update requests within the last 60 seconds.')
cVideoCallActiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 3), )
if mibBuilder.loadTexts: cVideoCallActiveTable.setStatus('current')
if mibBuilder.loadTexts: cVideoCallActiveTable.setDescription('This table provides the video extension to the call active table of IETF Dial Control MIB. It contains video call leg information and statistics for a point-to-point video call.')
cVideoCallActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 3, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: cVideoCallActiveEntry.setStatus('current')
if mibBuilder.loadTexts: cVideoCallActiveEntry.setDescription("The information regarding a single video call leg. This entry is an extension to the cVideoCommonActiveEntry, providing information specific to a point-to-point video call entry. An entry is created when the below conditions are met: 1. An associated call active entry in callActiveTable of the IETF Dial Control MIB with video callActiveInfoType is created. 2. An associated call active entry in cVoIPCallActiveTable of the Cisco Voice Dial Control MIB with SCCP cVoIPCallActiveSessionProtocol is created. 3. This call entry belongs to a point-to-point video call, i.e. cVideoCommonActiveCallType in cVideoCommonActiveEntry has value 'pointToPointCall'. The entry is deleted when its associated call active entries in callActiveTable of the IETF Dial Control MIB and cVoIPCallActiveTable of the Cisco Voice Dial Control MIB are deleted.")
cVideoCallActiveRxActualBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 3, 1, 1), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCallActiveRxActualBitrate.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoCallActiveRxActualBitrate.setDescription('This object is superseded by cVideoCommonStatsActiveRxActualBitrate in cVideoCommonStatsActiveTable. The actual measured video stream bitrate in receive direction for a video call session.')
cVideoCallActiveTxMacroblocksConcealed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 3, 1, 2), AbsoluteCounter32()).setUnits('macroblocks').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCallActiveTxMacroblocksConcealed.setStatus('current')
if mibBuilder.loadTexts: cVideoCallActiveTxMacroblocksConcealed.setDescription('Number of concealed macroblocks measured in transmit direction of the video call session. One macroblock is 16 pixels by 16 pixels.')
cVideoCallActiveTxFramesConcealed = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 3, 1, 3), AbsoluteCounter32()).setUnits('frames').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCallActiveTxFramesConcealed.setStatus('current')
if mibBuilder.loadTexts: cVideoCallActiveTxFramesConcealed.setDescription('Number of concealed frames measured in transmit direction of the video call session.')
cVideoCallActiveTxBadHeaderPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 3, 1, 4), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCallActiveTxBadHeaderPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCallActiveTxBadHeaderPackets.setDescription('Number of bad header packets measured in transmit direction of the video call session.')
cVideoCallActiveTxOverflowPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 3, 1, 5), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCallActiveTxOverflowPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCallActiveTxOverflowPackets.setDescription('Number of overflow packets measured in transmit direction of the video call session.')
cVideoCallActiveTxLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 3, 1, 6), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCallActiveTxLostPackets.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoCallActiveTxLostPackets.setDescription('This object is superseded by cVideoCommonStatsActiveTxTotalLostPackets in cVideoCommonStatsActiveTable. Number of lost packets measured in transmit direction of the video call session.')
cVideoCommonStatsActiveTable = MibTable((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4), )
if mibBuilder.loadTexts: cVideoCommonStatsActiveTable.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveTable.setDescription('This table provides the video extension to the call active table of IETF Dial Control MIB. It contains common video call leg statistics for both a video call within a conference (video conferee) and a simple video call.')
cVideoCommonStatsActiveEntry = MibTableRow((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1), ).setIndexNames((0, "DIAL-CONTROL-MIB", "callActiveSetupTime"), (0, "DIAL-CONTROL-MIB", "callActiveIndex"))
if mibBuilder.loadTexts: cVideoCommonStatsActiveEntry.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveEntry.setDescription("The common network statistics regarding a single video call leg. This entry accompanies cVideoCommonActiveEntry with more detailed statistics. An entry is created when the below conditions are met: 1. An associated call active entry in callActiveTable of the IETF Dial Control MIB with video callActiveInfoType is created. 2. An associated call active entry in cVoIPCallActiveTable of the Cisco Voice Dial Control MIB with SCCP cVoIPCallActiveSessionProtocol is created. 3. cVideoCommonActiveCallType of this call entry is 'pointToPointCall' or 'conferenceCall'. The entry is deleted when its associated call active entries in callActiveTable of the IETF Dial Control MIB and cVoIPCallActiveTable of the Cisco Voice Dial Control MIB are deleted.")
cVideoCommonStatsActiveTxActualBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 1), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxActualBitrate.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxActualBitrate.setDescription('The actual measured video stream bitrate in transmit direction for a video call session.')
cVideoCommonStatsActiveTxTotalLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 2), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxTotalLostPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxTotalLostPackets.setDescription('The total number of lost video data packets for the video call session in transmit direction.')
cVideoCommonStatsActiveTxPercentLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 3), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxPercentLostPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxPercentLostPackets.setDescription('The percentage of lost video data packets for the entire duration of the video call session in transmit direction.')
cVideoCommonStatsActiveTxCurrentLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 4), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxCurrentLostPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxCurrentLostPackets.setDescription('Number of lost packets within the last 5 seconds of the video call session in transmit direction.')
cVideoCommonStatsActiveTxTotalOutOfOrderPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 5), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxTotalOutOfOrderPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxTotalOutOfOrderPackets.setDescription('The total number of out-of-order video data packets for the video call session.')
cVideoCommonStatsActiveTxCurrentOutOfOrderPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 6), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxCurrentOutOfOrderPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxCurrentOutOfOrderPackets.setDescription('The number of out-of-order video data packets within the last 5 seconds for the video call session in transmit direction.')
cVideoCommonStatsActiveTxMaxJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 7), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxMaxJitter.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxMaxJitter.setDescription('Maximum jitter measured since the beginning of the video call session in transmit direction.')
cVideoCommonStatsActiveTxAvgJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 8), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxAvgJitter.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxAvgJitter.setDescription('Average jitter calculated over the entire duration of the video call session in transmit direction.')
cVideoCommonStatsActiveTxCurrentJitter = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 9), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxCurrentJitter.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxCurrentJitter.setDescription('Average jitter measured within the last 5 seconds of the video call session in transmit direction.')
cVideoCommonStatsActiveTxMaxDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 10), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxMaxDelay.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxMaxDelay.setDescription('Maximum delay measured since the beginning of the video call session in transmit direction.')
cVideoCommonStatsActiveTxAvgDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 11), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxAvgDelay.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxAvgDelay.setDescription('Average delay calculated over the entire duration of the video call session in transmit direction.')
cVideoCommonStatsActiveTxCurrentDelay = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 12), Gauge32()).setUnits('milliseconds').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxCurrentDelay.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveTxCurrentDelay.setDescription('Average delay measured within the last 5 seconds of the video call session in transmit direction.')
cVideoCommonStatsActiveRxActualBitrate = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 13), Unsigned32()).setUnits('kilobits per second').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveRxActualBitrate.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveRxActualBitrate.setDescription('The actual measured video stream bitrate in receive direction for a video call session.')
cVideoCommonStatsActiveRxTotalLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 14), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveRxTotalLostPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveRxTotalLostPackets.setDescription('The total number of lost video data packets for the video call session in receive direction.')
cVideoCommonStatsActiveRxPercentLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 15), Unsigned32().subtype(subtypeSpec=ValueRangeConstraint(0, 100))).setUnits('percent').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveRxPercentLostPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveRxPercentLostPackets.setDescription('The percentage of lost video data packets for the entire duration of the video call session in receive direction.')
cVideoCommonStatsActiveRxCurrentLostPackets = MibTableColumn((1, 3, 6, 1, 4, 1, 9, 9, 753, 1, 2, 4, 1, 16), AbsoluteCounter32()).setUnits('packets').setMaxAccess("readonly")
if mibBuilder.loadTexts: cVideoCommonStatsActiveRxCurrentLostPackets.setStatus('current')
if mibBuilder.loadTexts: cVideoCommonStatsActiveRxCurrentLostPackets.setDescription('Number of lost packets within the last 5 seconds of the video call session in receive direction.')
ciscoVideoSessionMIBCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 753, 2, 1))
ciscoVideoSessionMIBGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 9, 9, 753, 2, 2))
cVideoSessionMIBCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 753, 2, 1, 1)).setObjects(("CISCO-VIDEO-SESSION-MIB", "cVideoSessionHistoryGroup"), ("CISCO-VIDEO-SESSION-MIB", "cVideoSessionActiveGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cVideoSessionMIBCompliance = cVideoSessionMIBCompliance.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoSessionMIBCompliance.setDescription('The compliance statement for the SNMP entities that implement ciscoVideoSessionMIB module.')
cVideoSessionMIBComplianceRev1 = ModuleCompliance((1, 3, 6, 1, 4, 1, 9, 9, 753, 2, 1, 2)).setObjects(("CISCO-VIDEO-SESSION-MIB", "cVideoSessionCommonStatusGroup"), ("CISCO-VIDEO-SESSION-MIB", "cVideoSessionCommonStatisticsGroup"), ("CISCO-VIDEO-SESSION-MIB", "cVideoSessionCallStatisticsGroup"), ("CISCO-VIDEO-SESSION-MIB", "cVideoSessionConfereeStatisticsGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cVideoSessionMIBComplianceRev1 = cVideoSessionMIBComplianceRev1.setStatus('current')
if mibBuilder.loadTexts: cVideoSessionMIBComplianceRev1.setDescription('The compliance statement for the SNMP entities that implement ciscoVideoSessionMIB module.')
cVideoSessionHistoryGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 753, 2, 2, 1)).setObjects(("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryConnectionId"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryCallReferenceId"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryCallType"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxCodec"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxPictureWidth"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxPictureHeight"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxConfigFrameRate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxConfigBitrate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxPayloadFormat"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxAnnex"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxProfile"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxLevel"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxBytes"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxDuration"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxCodec"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxPictureWidth"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxPictureHeight"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxConfigFrameRate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxConfigBitrate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxPayloadFormat"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxAnnex"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxProfile"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxLevel"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxBytes"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxDuration"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeHistoryTotalDroppedPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeHistoryMaxJitter"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeHistoryMaxDelay"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeHistoryTotalOutOfOrderPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeHistoryMaxOutOfSyncDelay"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeHistoryTotalLostPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallHistoryTxMacroblocksConcealed"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallHistoryTxFramesConcealed"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallHistoryTxBadHeaderPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallHistoryTxOverflowPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallHistoryTxOutOfOrderPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallHistoryTxLostPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cVideoSessionHistoryGroup = cVideoSessionHistoryGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoSessionHistoryGroup.setDescription('This collection of objects provide the video call leg history.')
cVideoSessionActiveGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 753, 2, 2, 2)).setObjects(("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveConnectionId"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveCallReferenceId"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveCallType"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxCodec"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxPictureWidth"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxPictureHeight"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxConfigFrameRate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxConfigBitrate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxPayloadFormat"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxAnnex"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxProfile"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxLevel"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxBytes"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxDuration"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxCodec"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxPictureWidth"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxPictureHeight"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxConfigFrameRate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxConfigBitrate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxPayloadFormat"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxAnnex"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxProfile"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxLevel"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxBytes"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxDuration"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveActualFrameRate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveActualBitrate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveTotalDroppedPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveCurrentDroppedPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveTotalOutOfOrderPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveCurrentOutOfOrderPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveTotalLostPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveCurrentLostPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveMaxJitter"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveCurrentJitter"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveMaxDelay"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveCurrentDelay"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveMaxOutOfSyncDelay"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveCurrentOutOfSyncDelay"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveFastVideoUpdateRate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallActiveRxActualBitrate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallActiveTxMacroblocksConcealed"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallActiveTxFramesConcealed"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallActiveTxBadHeaderPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallActiveTxOverflowPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallActiveTxLostPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cVideoSessionActiveGroup = cVideoSessionActiveGroup.setStatus('deprecated')
if mibBuilder.loadTexts: cVideoSessionActiveGroup.setDescription('This collection of objects provide the active video call information.')
cVideoSessionCommonStatusGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 753, 2, 2, 3)).setObjects(("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryConnectionId"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryCallReferenceId"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryCallType"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxCodec"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxPictureWidth"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxPictureHeight"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxConfigFrameRate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxConfigBitrate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxPayloadFormat"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxAnnex"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxProfile"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxLevel"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxBytes"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryTxDuration"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxCodec"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxPictureWidth"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxPictureHeight"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxConfigFrameRate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxConfigBitrate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxPayloadFormat"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxAnnex"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxProfile"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxLevel"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxBytes"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistoryRxDuration"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonHistorySessionId"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveConnectionId"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveCallReferenceId"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveCallType"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxCodec"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxPictureWidth"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxPictureHeight"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxConfigFrameRate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxConfigBitrate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxPayloadFormat"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxAnnex"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxProfile"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxLevel"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxBytes"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveTxDuration"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxCodec"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxPictureWidth"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxPictureHeight"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxConfigFrameRate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxConfigBitrate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxPayloadFormat"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxAnnex"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxProfile"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxLevel"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxBytes"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveRxDuration"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonActiveSessionId"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cVideoSessionCommonStatusGroup = cVideoSessionCommonStatusGroup.setStatus('current')
if mibBuilder.loadTexts: cVideoSessionCommonStatusGroup.setDescription('This collection of objects provides basic information and statistics for a video call leg.')
cVideoSessionCommonStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 753, 2, 2, 4)).setObjects(("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsHistoryTxTotalLostPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsHistoryTxPercentLostPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsHistoryTxTotalOutOfOrderPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsHistoryTxMaxJitter"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsHistoryTxAvgJitter"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsHistoryTxMaxDelay"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsHistoryTxAvgDelay"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsHistoryRxTotalLostPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsHistoryRxPercentLostPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveTxActualBitrate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveTxTotalLostPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveTxPercentLostPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveTxCurrentLostPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveTxTotalOutOfOrderPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveTxCurrentOutOfOrderPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveTxMaxJitter"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveTxAvgJitter"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveTxCurrentJitter"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveTxMaxDelay"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveTxAvgDelay"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveTxCurrentDelay"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveRxActualBitrate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveRxTotalLostPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveRxPercentLostPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCommonStatsActiveRxCurrentLostPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cVideoSessionCommonStatisticsGroup = cVideoSessionCommonStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cVideoSessionCommonStatisticsGroup.setDescription('This collection of objects provides more detailed statistics for a video call leg.')
cVideoSessionCallStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 753, 2, 2, 5)).setObjects(("CISCO-VIDEO-SESSION-MIB", "cVideoCallHistoryTxMacroblocksConcealed"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallHistoryTxFramesConcealed"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallHistoryTxBadHeaderPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallHistoryTxOverflowPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallActiveTxMacroblocksConcealed"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallActiveTxFramesConcealed"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallActiveTxBadHeaderPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoCallActiveTxOverflowPackets"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cVideoSessionCallStatisticsGroup = cVideoSessionCallStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cVideoSessionCallStatisticsGroup.setDescription('This collection of objects provides more detailed statistics for a point-to-point video call leg.')
cVideoSessionConfereeStatisticsGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 9, 9, 753, 2, 2, 6)).setObjects(("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeHistoryTotalDroppedPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeHistoryMaxOutOfSyncDelay"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveActualFrameRate"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveTotalDroppedPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveCurrentDroppedPackets"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveMaxOutOfSyncDelay"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveCurrentOutOfSyncDelay"), ("CISCO-VIDEO-SESSION-MIB", "cVideoConfereeActiveFastVideoUpdateRate"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cVideoSessionConfereeStatisticsGroup = cVideoSessionConfereeStatisticsGroup.setStatus('current')
if mibBuilder.loadTexts: cVideoSessionConfereeStatisticsGroup.setDescription('This collection of objects provides more detailed statistics for a video call leg within a conference (video conferee).')
mibBuilder.exportSymbols("CISCO-VIDEO-SESSION-MIB", cVideoCommonActiveCallType=cVideoCommonActiveCallType, cVideoCommonHistoryTxAnnex=cVideoCommonHistoryTxAnnex, cVideoCallActiveTxBadHeaderPackets=cVideoCallActiveTxBadHeaderPackets, cVideoCallHistoryTxOverflowPackets=cVideoCallHistoryTxOverflowPackets, cVideoConfereeActiveEntry=cVideoConfereeActiveEntry, cVideoCallHistoryTxFramesConcealed=cVideoCallHistoryTxFramesConcealed, cVideoCommonHistoryRxDuration=cVideoCommonHistoryRxDuration, cVideoConfereeHistoryTotalOutOfOrderPackets=cVideoConfereeHistoryTotalOutOfOrderPackets, cVideoCommonActiveTxDuration=cVideoCommonActiveTxDuration, cVideoCommonActiveTxPackets=cVideoCommonActiveTxPackets, cVideoCommonActiveCallReferenceId=cVideoCommonActiveCallReferenceId, cVideoSessionCommonStatisticsGroup=cVideoSessionCommonStatisticsGroup, cVideoCommonHistoryTxPictureHeight=cVideoCommonHistoryTxPictureHeight, cVideoCommonActiveTxLevel=cVideoCommonActiveTxLevel, cVideoCommonActiveRxProfile=cVideoCommonActiveRxProfile, cVideoCommonActiveRxConfigFrameRate=cVideoCommonActiveRxConfigFrameRate, cVideoSessionCallStatisticsGroup=cVideoSessionCallStatisticsGroup, cVideoCallHistoryTable=cVideoCallHistoryTable, cVideoSessionHistory=cVideoSessionHistory, cVideoConfereeActiveCurrentDelay=cVideoConfereeActiveCurrentDelay, cVideoConfereeActiveMaxDelay=cVideoConfereeActiveMaxDelay, cVideoCommonHistoryTxPackets=cVideoCommonHistoryTxPackets, cVideoCommonStatsActiveRxCurrentLostPackets=cVideoCommonStatsActiveRxCurrentLostPackets, cVideoConfereeHistoryTotalDroppedPackets=cVideoConfereeHistoryTotalDroppedPackets, PYSNMP_MODULE_ID=ciscoVideoSessionMIB, cVideoCommonStatsActiveTxCurrentLostPackets=cVideoCommonStatsActiveTxCurrentLostPackets, cVideoCommonStatsHistoryRxTotalLostPackets=cVideoCommonStatsHistoryRxTotalLostPackets, cVideoSessionMIBCompliance=cVideoSessionMIBCompliance, cVideoCommonHistoryRxPictureWidth=cVideoCommonHistoryRxPictureWidth, cVideoCommonActiveRxLevel=cVideoCommonActiveRxLevel, cVideoSessionConfereeStatisticsGroup=cVideoSessionConfereeStatisticsGroup, cVideoCommonStatsActiveTxAvgDelay=cVideoCommonStatsActiveTxAvgDelay, cVideoCommonHistoryRxProfile=cVideoCommonHistoryRxProfile, cVideoCommonStatsActiveTxMaxDelay=cVideoCommonStatsActiveTxMaxDelay, CvcVoIPCallServiceType=CvcVoIPCallServiceType, cVideoCommonStatsHistoryTxMaxJitter=cVideoCommonStatsHistoryTxMaxJitter, ciscoVideoSessionMIBCompliances=ciscoVideoSessionMIBCompliances, cVideoCommonActiveRxPictureWidth=cVideoCommonActiveRxPictureWidth, cVideoConfereeActiveCurrentOutOfOrderPackets=cVideoConfereeActiveCurrentOutOfOrderPackets, cVideoSessionCommonStatusGroup=cVideoSessionCommonStatusGroup, cVideoCommonActiveConnectionId=cVideoCommonActiveConnectionId, cVideoConfereeActiveTotalLostPackets=cVideoConfereeActiveTotalLostPackets, cVideoCommonHistoryTxCodec=cVideoCommonHistoryTxCodec, cVideoCommonActiveRxCodec=cVideoCommonActiveRxCodec, cVideoCommonStatsActiveTxMaxJitter=cVideoCommonStatsActiveTxMaxJitter, cVideoCommonActiveEntry=cVideoCommonActiveEntry, cVideoCommonStatsActiveTxTotalLostPackets=cVideoCommonStatsActiveTxTotalLostPackets, cVideoCommonStatsActiveTxPercentLostPackets=cVideoCommonStatsActiveTxPercentLostPackets, cVideoCommonHistoryTxBytes=cVideoCommonHistoryTxBytes, cVideoCommonActiveTxPayloadFormat=cVideoCommonActiveTxPayloadFormat, CvcVideoLevel=CvcVideoLevel, cVideoCommonHistoryRxLevel=cVideoCommonHistoryRxLevel, cVideoCommonHistoryCallReferenceId=cVideoCommonHistoryCallReferenceId, cVideoConfereeActiveTotalOutOfOrderPackets=cVideoConfereeActiveTotalOutOfOrderPackets, cVideoCommonStatsHistoryTxMaxDelay=cVideoCommonStatsHistoryTxMaxDelay, cVideoCommonHistoryTxProfile=cVideoCommonHistoryTxProfile, cVideoConfereeActiveCurrentDroppedPackets=cVideoConfereeActiveCurrentDroppedPackets, cVideoConfereeActiveMaxOutOfSyncDelay=cVideoConfereeActiveMaxOutOfSyncDelay, cVideoCommonActiveTxConfigBitrate=cVideoCommonActiveTxConfigBitrate, cVideoCommonHistoryTxPayloadFormat=cVideoCommonHistoryTxPayloadFormat, cVideoCommonStatsHistoryEntry=cVideoCommonStatsHistoryEntry, cVideoCommonActiveRxDuration=cVideoCommonActiveRxDuration, cVideoCommonActiveTxPictureHeight=cVideoCommonActiveTxPictureHeight, cVideoCommonActiveTxProfile=cVideoCommonActiveTxProfile, cVideoCallActiveEntry=cVideoCallActiveEntry, cVideoCommonStatsActiveTxCurrentOutOfOrderPackets=cVideoCommonStatsActiveTxCurrentOutOfOrderPackets, cVideoCallActiveTxMacroblocksConcealed=cVideoCallActiveTxMacroblocksConcealed, cVideoCommonStatsHistoryTxTotalOutOfOrderPackets=cVideoCommonStatsHistoryTxTotalOutOfOrderPackets, cVideoConfereeActiveCurrentOutOfSyncDelay=cVideoConfereeActiveCurrentOutOfSyncDelay, cVideoConfereeActiveCurrentJitter=cVideoConfereeActiveCurrentJitter, cVideoConfereeHistoryTotalLostPackets=cVideoConfereeHistoryTotalLostPackets, cVideoConfereeActiveTable=cVideoConfereeActiveTable, cVideoSessionMIBComplianceRev1=cVideoSessionMIBComplianceRev1, cVideoCommonStatsHistoryTxTotalLostPackets=cVideoCommonStatsHistoryTxTotalLostPackets, cVideoCommonHistoryRxConfigBitrate=cVideoCommonHistoryRxConfigBitrate, cVideoCallActiveTxOverflowPackets=cVideoCallActiveTxOverflowPackets, cVideoCommonActiveTxCodec=cVideoCommonActiveTxCodec, cVideoCommonHistoryEntry=cVideoCommonHistoryEntry, cVideoCallActiveTxLostPackets=cVideoCallActiveTxLostPackets, cVideoCommonStatsActiveTxCurrentJitter=cVideoCommonStatsActiveTxCurrentJitter, cVideoCommonStatsHistoryRxPercentLostPackets=cVideoCommonStatsHistoryRxPercentLostPackets, CvcVideoCodecAnnexMap=CvcVideoCodecAnnexMap, CvcRtpPayloadFormat=CvcRtpPayloadFormat, cVideoCommonStatsHistoryTxPercentLostPackets=cVideoCommonStatsHistoryTxPercentLostPackets, cVideoCommonStatsActiveRxPercentLostPackets=cVideoCommonStatsActiveRxPercentLostPackets, cVideoCommonHistoryRxBytes=cVideoCommonHistoryRxBytes, cVideoCallHistoryTxBadHeaderPackets=cVideoCallHistoryTxBadHeaderPackets, cVideoCommonHistoryRxPackets=cVideoCommonHistoryRxPackets, cVideoCommonActiveRxPictureHeight=cVideoCommonActiveRxPictureHeight, cVideoConfereeHistoryMaxDelay=cVideoConfereeHistoryMaxDelay, cVideoCallHistoryEntry=cVideoCallHistoryEntry, cVideoCommonActiveRxPayloadFormat=cVideoCommonActiveRxPayloadFormat, ciscoVideoSessionMIBConform=ciscoVideoSessionMIBConform, cVideoSessionHistoryGroup=cVideoSessionHistoryGroup, cVideoSessionActive=cVideoSessionActive, cVideoCallHistoryTxMacroblocksConcealed=cVideoCallHistoryTxMacroblocksConcealed, cVideoCommonActiveTable=cVideoCommonActiveTable, cVideoCommonActiveRxPackets=cVideoCommonActiveRxPackets, cVideoConfereeActiveActualBitrate=cVideoConfereeActiveActualBitrate, cVideoCommonHistoryTable=cVideoCommonHistoryTable, cVideoCommonStatsHistoryTxAvgJitter=cVideoCommonStatsHistoryTxAvgJitter, CvcVideoProfile=CvcVideoProfile, cVideoConfereeActiveMaxJitter=cVideoConfereeActiveMaxJitter, cVideoCommonStatsActiveRxActualBitrate=cVideoCommonStatsActiveRxActualBitrate, cVideoConfereeActiveFastVideoUpdateRate=cVideoConfereeActiveFastVideoUpdateRate, cVideoConfereeActiveActualFrameRate=cVideoConfereeActiveActualFrameRate, cVideoCommonStatsActiveEntry=cVideoCommonStatsActiveEntry, cVideoCommonActiveTxConfigFrameRate=cVideoCommonActiveTxConfigFrameRate, cVideoConfereeHistoryEntry=cVideoConfereeHistoryEntry, cVideoCallHistoryTxOutOfOrderPackets=cVideoCallHistoryTxOutOfOrderPackets, cVideoCommonActiveTxBytes=cVideoCommonActiveTxBytes, cVideoCommonHistoryRxAnnex=cVideoCommonHistoryRxAnnex, cVideoSessionActiveGroup=cVideoSessionActiveGroup, cVideoCommonStatsActiveTxTotalOutOfOrderPackets=cVideoCommonStatsActiveTxTotalOutOfOrderPackets, cVideoCommonActiveRxBytes=cVideoCommonActiveRxBytes, cVideoCommonHistoryCallType=cVideoCommonHistoryCallType, cVideoCommonStatsActiveTxCurrentDelay=cVideoCommonStatsActiveTxCurrentDelay, cVideoCommonHistoryTxConfigBitrate=cVideoCommonHistoryTxConfigBitrate, cVideoCommonHistoryTxLevel=cVideoCommonHistoryTxLevel, ciscoVideoSessionMIBGroups=ciscoVideoSessionMIBGroups, cVideoCommonStatsHistoryTable=cVideoCommonStatsHistoryTable, cVideoCommonHistoryTxPictureWidth=cVideoCommonHistoryTxPictureWidth, cVideoCommonHistoryRxCodec=cVideoCommonHistoryRxCodec, ciscoVideoSessionMIBNotifs=ciscoVideoSessionMIBNotifs, cVideoConfereeHistoryMaxOutOfSyncDelay=cVideoConfereeHistoryMaxOutOfSyncDelay, cVideoConfereeHistoryTable=cVideoConfereeHistoryTable, cVideoCommonStatsActiveTable=cVideoCommonStatsActiveTable, cVideoConfereeActiveCurrentLostPackets=cVideoConfereeActiveCurrentLostPackets, cVideoCallHistoryTxLostPackets=cVideoCallHistoryTxLostPackets, cVideoCallActiveTxFramesConcealed=cVideoCallActiveTxFramesConcealed, cVideoCommonActiveTxAnnex=cVideoCommonActiveTxAnnex, cVideoCommonActiveRxConfigBitrate=cVideoCommonActiveRxConfigBitrate, cVideoCommonHistoryTxConfigFrameRate=cVideoCommonHistoryTxConfigFrameRate, cVideoCommonActiveRxAnnex=cVideoCommonActiveRxAnnex, cVideoCommonHistoryRxPictureHeight=cVideoCommonHistoryRxPictureHeight, cVideoCommonActiveTxPictureWidth=cVideoCommonActiveTxPictureWidth, cVideoCommonStatsActiveRxTotalLostPackets=cVideoCommonStatsActiveRxTotalLostPackets, cVideoCommonHistorySessionId=cVideoCommonHistorySessionId, cVideoConfereeHistoryMaxJitter=cVideoConfereeHistoryMaxJitter, cVideoCallActiveRxActualBitrate=cVideoCallActiveRxActualBitrate, ciscoVideoSessionMIBObjects=ciscoVideoSessionMIBObjects, cVideoCommonHistoryRxConfigFrameRate=cVideoCommonHistoryRxConfigFrameRate, cVideoCommonHistoryRxPayloadFormat=cVideoCommonHistoryRxPayloadFormat, cVideoCommonActiveSessionId=cVideoCommonActiveSessionId, ciscoVideoSessionMIB=ciscoVideoSessionMIB, cVideoCallActiveTable=cVideoCallActiveTable, cVideoCommonHistoryConnectionId=cVideoCommonHistoryConnectionId, cVideoCommonStatsHistoryTxAvgDelay=cVideoCommonStatsHistoryTxAvgDelay, cVideoConfereeActiveTotalDroppedPackets=cVideoConfereeActiveTotalDroppedPackets, cVideoCommonHistoryTxDuration=cVideoCommonHistoryTxDuration, cVideoCommonStatsActiveTxActualBitrate=cVideoCommonStatsActiveTxActualBitrate, cVideoCommonStatsActiveTxAvgJitter=cVideoCommonStatsActiveTxAvgJitter)
