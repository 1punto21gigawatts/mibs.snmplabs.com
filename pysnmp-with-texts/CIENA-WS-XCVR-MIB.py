#
# PySNMP MIB module CIENA-WS-XCVR-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/CIENA-WS-XCVR-MIB
# Produced by pysmi-0.3.4 at Wed May  1 11:49:33 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, ObjectIdentifier, OctetString = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
ConstraintsUnion, ValueRangeConstraint, ValueSizeConstraint, ConstraintsIntersection, SingleValueConstraint = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsUnion", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsIntersection", "SingleValueConstraint")
cienaWsConfig, = mibBuilder.importSymbols("CIENA-WS-MIB", "cienaWsConfig")
PtpId, StringMaxl128, StringMaxl254, ChannelsNumber, XcvrType, Decimal1Dig, EnabledDisabledEnum, ConnectorTypeDescEnum, StringMaxl16, XcvrId, NameString, StringMaxl32, XcvrMode = mibBuilder.importSymbols("CIENA-WS-TYPEDEFS-MIB", "PtpId", "StringMaxl128", "StringMaxl254", "ChannelsNumber", "XcvrType", "Decimal1Dig", "EnabledDisabledEnum", "ConnectorTypeDescEnum", "StringMaxl16", "XcvrId", "NameString", "StringMaxl32", "XcvrMode")
NotificationGroup, ObjectGroup, ModuleCompliance = mibBuilder.importSymbols("SNMPv2-CONF", "NotificationGroup", "ObjectGroup", "ModuleCompliance")
Integer32, IpAddress, Bits, ObjectIdentity, ModuleIdentity, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, NotificationType, MibIdentifier, iso, TimeTicks, Counter32, Gauge32, Counter64 = mibBuilder.importSymbols("SNMPv2-SMI", "Integer32", "IpAddress", "Bits", "ObjectIdentity", "ModuleIdentity", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "NotificationType", "MibIdentifier", "iso", "TimeTicks", "Counter32", "Gauge32", "Counter64")
DisplayString, TruthValue, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "TruthValue", "TextualConvention")
cienaWsXcvrMIB = ModuleIdentity((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15))
cienaWsXcvrMIB.setRevisions(('2016-12-12 00:00', '2016-06-14 00:00', '2015-02-25 00:00',))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    if mibBuilder.loadTexts: cienaWsXcvrMIB.setRevisionsDescriptions(("Waveserver Rel 1.3 revised. 'optical-power-group' grouping added.", 'Waveserver Rel 1.2 revised. Major restructuring of this YANG module.', 'Initial version.',))
if mibBuilder.loadTexts: cienaWsXcvrMIB.setLastUpdated('201612120000Z')
if mibBuilder.loadTexts: cienaWsXcvrMIB.setOrganization('Ciena Corporation')
if mibBuilder.loadTexts: cienaWsXcvrMIB.setContactInfo('Web URL: http://www.ciena.com/ Postal: 7035 Ridge Road Hanover, Maryland 21076 U.S.A. Phone: +1 800-921-1144 Fax: +1 410-694-5750')
if mibBuilder.loadTexts: cienaWsXcvrMIB.setDescription('This module defines the common XCVR model. The XCVR is augmented by specific types of transceiver modules if applicable. XCVR objects are permanently available for all ports and reported as empty if the device is not physically present. Attributes read from the device are only available while the device is present.')
class XcvrOpEnum(TextualConvention, Integer32):
    description = 'None'
    status = 'current'
    subtypeSpec = Integer32.subtypeSpec + ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5))
    namedValues = NamedValues(("empty", 0), ("up", 1), ("down", 2), ("uncertified", 3), ("lowpowermode", 4), ("unknown", 5))

cwsXcvrXcvrsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 3), )
if mibBuilder.loadTexts: cwsXcvrXcvrsTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrsTable.setDescription('None')
cwsXcvrXcvrsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 3, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"))
if mibBuilder.loadTexts: cwsXcvrXcvrsEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrsEntry.setDescription('Entry for cwsXcvrXcvrsTable.')
cwsXcvrXcvrsXcvrIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrXcvrsXcvrIndex.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrsXcvrIndex.setDescription('XCVR tranceiver index, unique, key value for the XCVR List.')
cwsXcvrXcvrIdTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 4), )
if mibBuilder.loadTexts: cwsXcvrXcvrIdTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrIdTable.setDescription('Identification information of this XCVR instance.')
cwsXcvrXcvrIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 4, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrIdTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrXcvrIdEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrIdEntry.setDescription('Entry for cwsXcvrXcvrIdTable.')
cwsXcvrXcvrIdTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 4, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrXcvrIdTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrIdTableSnmpKey.setDescription('Unique key for cwsXcvrXcvrId')
cwsXcvrXcvrIdName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 4, 1, 2), NameString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrXcvrIdName.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrIdName.setDescription('Name of the XCVR transceiver. Auto generated, and cannot be modified.')
cwsXcvrXcvrIdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 4, 1, 3), StringMaxl128()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrXcvrIdDescription.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrIdDescription.setDescription('Description of the XCVR. Auto generated, and cannot be modified.')
cwsXcvrXcvrStateTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 5), )
if mibBuilder.loadTexts: cwsXcvrXcvrStateTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrStateTable.setDescription('State information of this XCVR instance.')
cwsXcvrXcvrStateEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 5, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrStateTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrXcvrStateEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrStateEntry.setDescription('Entry for cwsXcvrXcvrStateTable.')
cwsXcvrXcvrStateTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 5, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrXcvrStateTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrStateTableSnmpKey.setDescription('Unique key for cwsXcvrXcvrState')
cwsXcvrXcvrStateAdminState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 5, 1, 2), EnabledDisabledEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrXcvrStateAdminState.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrStateAdminState.setDescription("Whether Admin State is enabled or disabled for this XCVR's ptp.")
cwsXcvrXcvrStateOperationalState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 5, 1, 3), XcvrOpEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrXcvrStateOperationalState.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrStateOperationalState.setDescription('Opertional state of this XCVR, for DCU, it will be empty by default.')
cwsXcvrXcvrStatePowerState = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 5, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1))).clone(namedValues=NamedValues(("normal", 0), ("low", 1)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrXcvrStatePowerState.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrStatePowerState.setDescription('Power State of the XCVR. If it is in low power mode or normal power mode.')
cwsXcvrXcvrPropertiesTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 6), )
if mibBuilder.loadTexts: cwsXcvrXcvrPropertiesTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrPropertiesTable.setDescription('All the Configurable and operational data of this XCVR instance.')
cwsXcvrXcvrPropertiesEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 6, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrPropertiesTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrXcvrPropertiesEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrPropertiesEntry.setDescription('Entry for cwsXcvrXcvrPropertiesTable.')
cwsXcvrXcvrPropertiesTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 6, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrXcvrPropertiesTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrPropertiesTableSnmpKey.setDescription('Unique key for cwsXcvrXcvrProperties')
cwsXcvrXcvrPropertiesType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 6, 1, 2), XcvrType()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrXcvrPropertiesType.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrPropertiesType.setDescription('Transceiver type, different transceiver types will have different operational data. Type depends on what is physically plugged in. Read only attribute.')
cwsXcvrXcvrPropertiesMode = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 6, 1, 3), XcvrMode()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrXcvrPropertiesMode.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrPropertiesMode.setDescription('Mode of the XCVR.')
cwsXcvrXcvrPropertiesNumberOfChannels = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 6, 1, 4), ChannelsNumber()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrXcvrPropertiesNumberOfChannels.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrXcvrPropertiesNumberOfChannels.setDescription('Number of channels this tranceiver has. Only applicable if a transceiver is plugged in.')
cwsXcvrChildPtpIdTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 7), )
if mibBuilder.loadTexts: cwsXcvrChildPtpIdTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChildPtpIdTable.setDescription('The child ptp this xcvr is associated with.')
cwsXcvrChildPtpIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 7, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrPropertiesTableSnmpKey"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrChildPtpIdTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrChildPtpIdEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChildPtpIdEntry.setDescription('Entry for cwsXcvrChildPtpIdTable.')
cwsXcvrChildPtpIdTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 7, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrChildPtpIdTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChildPtpIdTableSnmpKey.setDescription('Unique key for cwsXcvrChildPtpId')
cwsXcvrChildPtpId = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 7, 1, 2), PtpId()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrChildPtpId.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChildPtpId.setDescription('The child ptp this xcvr is associated with.')
cwsXcvrCienaIdTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 8), )
if mibBuilder.loadTexts: cwsXcvrCienaIdTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrCienaIdTable.setDescription('If the plugged transceiver is a Ciena product, display the Ciena product information. The leafs in this container will be blank if the transceiver is not plugged in or if it is not a Ciena product.')
cwsXcvrCienaIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 8, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrCienaIdTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrCienaIdEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrCienaIdEntry.setDescription('Entry for cwsXcvrCienaIdTable.')
cwsXcvrCienaIdTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 8, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrCienaIdTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrCienaIdTableSnmpKey.setDescription('Unique key for cwsXcvrCienaId')
cwsXcvrCienaIdCienaItemNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 8, 1, 2), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrCienaIdCienaItemNumber.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrCienaIdCienaItemNumber.setDescription('If the plugged transceiver is a Ciena product, display the product item number. If it is not a Ciena product or if nothing is plugged in, this field will be blank')
cwsXcvrCienaIdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 8, 1, 3), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrCienaIdRevision.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrCienaIdRevision.setDescription('If the plugged transceiver is a Ciena product, display the Ciena revision in the format of <prefix>.<number>.<suffix>. If it is not a Ciena product or if nothing is plugged in, this field will be blank')
cwsXcvrCienaIdDescription = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 8, 1, 4), StringMaxl254()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrCienaIdDescription.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrCienaIdDescription.setDescription('If the plugged transceiver is a Ciena product, display the Ciena description. If it is not a Ciena product or if nothing is plugged in, this field will be blank')
cwsXcvrVendorIdTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 9), )
if mibBuilder.loadTexts: cwsXcvrVendorIdTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorIdTable.setDescription('Display the transceiver vendor identification information.')
cwsXcvrVendorIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 9, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrVendorIdTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrVendorIdEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorIdEntry.setDescription('Entry for cwsXcvrVendorIdTable.')
cwsXcvrVendorIdTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 9, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrVendorIdTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorIdTableSnmpKey.setDescription('Unique key for cwsXcvrVendorId')
cwsXcvrVendorIdName = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 9, 1, 2), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrVendorIdName.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorIdName.setDescription('Name of the Vendor that produced this transceiver. For Ciena transceiver, the value will be Ciena.')
cwsXcvrVendorIdPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 9, 1, 3), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrVendorIdPartNumber.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorIdPartNumber.setDescription('Vendor part number of the transceiver.')
cwsXcvrVendorIdRevision = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 9, 1, 4), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrVendorIdRevision.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorIdRevision.setDescription('Vendor Revision of the transceiver.')
cwsXcvrVendorIdSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 9, 1, 5), StringMaxl32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrVendorIdSerialNumber.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorIdSerialNumber.setDescription('Vendor serial number of the XCVR transceiver.')
cwsXcvrVendorIdManufacturedDate = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 9, 1, 6), StringMaxl16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrVendorIdManufacturedDate.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorIdManufacturedDate.setDescription('Manufactured Date, in the format of mm/dd/yy.')
cwsXcvrDeviceIdTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 10), )
if mibBuilder.loadTexts: cwsXcvrDeviceIdTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrDeviceIdTable.setDescription('None')
cwsXcvrDeviceIdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 10, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrDeviceIdTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrDeviceIdEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrDeviceIdEntry.setDescription('Entry for cwsXcvrDeviceIdTable.')
cwsXcvrDeviceIdTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 10, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrDeviceIdTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrDeviceIdTableSnmpKey.setDescription('Unique key for cwsXcvrDeviceId')
cwsXcvrDeviceIdConnectorType = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 10, 1, 2), ConnectorTypeDescEnum()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrDeviceIdConnectorType.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrDeviceIdConnectorType.setDescription("Human readable description of Vendor's connector type byte value. Reference SFF-8024, table 4-3")
cwsXcvrVendorTransmitterTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 11), )
if mibBuilder.loadTexts: cwsXcvrVendorTransmitterTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorTransmitterTable.setDescription('None')
cwsXcvrVendorTransmitterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 11, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrVendorTransmitterTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrVendorTransmitterEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorTransmitterEntry.setDescription('Entry for cwsXcvrVendorTransmitterTable.')
cwsXcvrVendorTransmitterTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 11, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrVendorTransmitterTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorTransmitterTableSnmpKey.setDescription('Unique key for cwsXcvrVendorTransmitter')
cwsXcvrVendorTransmitterNominalBitRate = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 11, 1, 2), StringMaxl16()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrVendorTransmitterNominalBitRate.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorTransmitterNominalBitRate.setDescription('Bit rate, nominal, in Gbps.')
cwsXcvrVendorDiagnosticMonitoringTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 12), )
if mibBuilder.loadTexts: cwsXcvrVendorDiagnosticMonitoringTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorDiagnosticMonitoringTable.setDescription('None')
cwsXcvrVendorDiagnosticMonitoringEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 12, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrVendorDiagnosticMonitoringTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrVendorDiagnosticMonitoringEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorDiagnosticMonitoringEntry.setDescription('Entry for cwsXcvrVendorDiagnosticMonitoringTable.')
cwsXcvrVendorDiagnosticMonitoringTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 12, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrVendorDiagnosticMonitoringTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorDiagnosticMonitoringTableSnmpKey.setDescription('Unique key for cwsXcvrVendorDiagnosticMonitoring')
cwsXcvrVendorDiagnosticMonitoringRxPowerMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 12, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("zeroma", 0), ("averagepower", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrVendorDiagnosticMonitoringRxPowerMeasurement.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorDiagnosticMonitoringRxPowerMeasurement.setDescription('Rx power measurement, bit 3 of diagnostic monitoring type. Reference SFF 8472 section 8.8 and table 9.5 for detail.')
cwsXcvrVendorDiagnosticMonitoringTxPowerMeasurement = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 12, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3))).clone(namedValues=NamedValues(("notsupported", 0), ("supported", 1), ("yes", 2), ("no", 3)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrVendorDiagnosticMonitoringTxPowerMeasurement.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrVendorDiagnosticMonitoringTxPowerMeasurement.setDescription('Tx ower measurement, related to diagnostic monitoring type.')
cwsXcvrTemperatureTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 13), )
if mibBuilder.loadTexts: cwsXcvrTemperatureTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureTable.setDescription('None')
cwsXcvrTemperatureEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 13, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrTemperatureTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrTemperatureEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureEntry.setDescription('Entry for cwsXcvrTemperatureTable.')
cwsXcvrTemperatureTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 13, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrTemperatureTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureTableSnmpKey.setDescription('Unique key for cwsXcvrTemperature')
cwsXcvrTemperatureActual = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 13, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTemperatureActual.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureActual.setDescription('Temperature Status, actual temperature in degrees Celsius (C). Range must be between -128 and 128.')
cwsXcvrTemperatureStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 14), )
if mibBuilder.loadTexts: cwsXcvrTemperatureStatusTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureStatusTable.setDescription('None')
cwsXcvrTemperatureStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 14, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrTemperatureStatusTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrTemperatureStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureStatusEntry.setDescription('Entry for cwsXcvrTemperatureStatusTable.')
cwsXcvrTemperatureStatusTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 14, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrTemperatureStatusTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureStatusTableSnmpKey.setDescription('Unique key for cwsXcvrTemperatureStatus')
cwsXcvrTemperatureStatusHighAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 14, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTemperatureStatusHighAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureStatusHighAlarmStatus.setDescription('Temperature high alarm status, boolean, true if alarm is raised, false if alarm is not raised.')
cwsXcvrTemperatureStatusLowAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 14, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTemperatureStatusLowAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureStatusLowAlarmStatus.setDescription('Temperature low alarm status, boolean, true if alarm is raised, false if alarm is not raised.')
cwsXcvrTemperatureStatusHighWarningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 14, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTemperatureStatusHighWarningStatus.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureStatusHighWarningStatus.setDescription('Temperature high warning status, boolean, true if warning is raised, false if warning is not raised.')
cwsXcvrTemperatureStatusLowWarningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 14, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTemperatureStatusLowWarningStatus.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureStatusLowWarningStatus.setDescription('Temperature low warning status, boolean, true if warning is raised, false if warning is not raised.')
cwsXcvrTemperatureThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 15), )
if mibBuilder.loadTexts: cwsXcvrTemperatureThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureThresholdTable.setDescription('None')
cwsXcvrTemperatureThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 15, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrTemperatureThresholdTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrTemperatureThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureThresholdEntry.setDescription('Entry for cwsXcvrTemperatureThresholdTable.')
cwsXcvrTemperatureThresholdTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 15, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrTemperatureThresholdTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureThresholdTableSnmpKey.setDescription('Unique key for cwsXcvrTemperatureThreshold')
cwsXcvrTemperatureThresholdHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 15, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTemperatureThresholdHighAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureThresholdHighAlarmThreshold.setDescription('Temperature high alarm threshold, in degrees Celsius (C).')
cwsXcvrTemperatureThresholdLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 15, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTemperatureThresholdLowAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureThresholdLowAlarmThreshold.setDescription('Temperature low alarm threshold, in degrees Celsius (C)')
cwsXcvrTemperatureThresholdHighWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 15, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTemperatureThresholdHighWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureThresholdHighWarningThreshold.setDescription('Temperature high warning threshold, in degrees Celsius (C)')
cwsXcvrTemperatureThresholdLowWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 15, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTemperatureThresholdLowWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTemperatureThresholdLowWarningThreshold.setDescription('Temperature low warning threshold, in degrees Celsius (C)')
cwsXcvrChannelDiagnosticsTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 16), )
if mibBuilder.loadTexts: cwsXcvrChannelDiagnosticsTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChannelDiagnosticsTable.setDescription('List of common xcvr channel diagnostic data fields of the XCVR.')
cwsXcvrChannelDiagnosticsEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 16, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrChannelDiagnosticsChannelNumber"))
if mibBuilder.loadTexts: cwsXcvrChannelDiagnosticsEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChannelDiagnosticsEntry.setDescription('Entry for cwsXcvrChannelDiagnosticsTable.')
cwsXcvrChannelDiagnosticsChannelNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 16, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647))).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrChannelDiagnosticsChannelNumber.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChannelDiagnosticsChannelNumber.setDescription('Channel number of XCVR.')
cwsXcvrChannelRxPowerTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 17), )
if mibBuilder.loadTexts: cwsXcvrChannelRxPowerTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChannelRxPowerTable.setDescription('None')
cwsXcvrChannelRxPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 17, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrChannelDiagnosticsChannelNumber"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrChannelRxPowerTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrChannelRxPowerEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChannelRxPowerEntry.setDescription('Entry for cwsXcvrChannelRxPowerTable.')
cwsXcvrChannelRxPowerTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 17, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrChannelRxPowerTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChannelRxPowerTableSnmpKey.setDescription('Unique key for cwsXcvrChannelRxPower')
cwsXcvrChannelRxPowerActual = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 17, 1, 2), Decimal1Dig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrChannelRxPowerActual.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChannelRxPowerActual.setDescription('Actual Rx optical power in dBm.')
cwsXcvrRxPowerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 18), )
if mibBuilder.loadTexts: cwsXcvrRxPowerStatusTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrRxPowerStatusTable.setDescription('None')
cwsXcvrRxPowerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 18, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrChannelDiagnosticsChannelNumber"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrRxPowerStatusTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrRxPowerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrRxPowerStatusEntry.setDescription('Entry for cwsXcvrRxPowerStatusTable.')
cwsXcvrRxPowerStatusTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 18, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrRxPowerStatusTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrRxPowerStatusTableSnmpKey.setDescription('Unique key for cwsXcvrRxPowerStatus')
cwsXcvrRxPowerStatusHighAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 18, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrRxPowerStatusHighAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrRxPowerStatusHighAlarmStatus.setDescription('Optical power high alarm status, boolean, true if alarm is raised, false if alarm is not raised.')
cwsXcvrRxPowerStatusLowAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 18, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrRxPowerStatusLowAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrRxPowerStatusLowAlarmStatus.setDescription('Optical power low alarm status, boolean, true if alarm is raised, false if alarm is not raised.')
cwsXcvrRxPowerStatusHighWarningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 18, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrRxPowerStatusHighWarningStatus.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrRxPowerStatusHighWarningStatus.setDescription('Optical power high warning status, boolean, true if warning is raised, false if warning is not raised.')
cwsXcvrRxPowerStatusLowWarningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 18, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrRxPowerStatusLowWarningStatus.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrRxPowerStatusLowWarningStatus.setDescription('Optical power low warning status, boolean, true if warning is raised, false if warning is not raised.')
cwsXcvrRxPowerThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 19), )
if mibBuilder.loadTexts: cwsXcvrRxPowerThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrRxPowerThresholdTable.setDescription('None')
cwsXcvrRxPowerThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 19, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrChannelDiagnosticsChannelNumber"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrRxPowerThresholdTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrRxPowerThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrRxPowerThresholdEntry.setDescription('Entry for cwsXcvrRxPowerThresholdTable.')
cwsXcvrRxPowerThresholdTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 19, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrRxPowerThresholdTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrRxPowerThresholdTableSnmpKey.setDescription('Unique key for cwsXcvrRxPowerThreshold')
cwsXcvrRxPowerThresholdHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 19, 1, 2), Decimal1Dig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrRxPowerThresholdHighAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrRxPowerThresholdHighAlarmThreshold.setDescription('Optical power high alarm threshold, in dBm. If it is modem Tx-power, the threshold can change based on provisioned tx power. High threshold = target power + 3.')
cwsXcvrRxPowerThresholdLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 19, 1, 3), Decimal1Dig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrRxPowerThresholdLowAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrRxPowerThresholdLowAlarmThreshold.setDescription('Optical power low alarm threshold, in dBm. If it is modem Tx-power, the threshold can change based on provisioned tx power. Low threshold = target power - 10.')
cwsXcvrRxPowerThresholdHighWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 19, 1, 4), Decimal1Dig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrRxPowerThresholdHighWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrRxPowerThresholdHighWarningThreshold.setDescription('Optical power high warning threshold, in dBm.')
cwsXcvrRxPowerThresholdLowWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 19, 1, 5), Decimal1Dig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrRxPowerThresholdLowWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrRxPowerThresholdLowWarningThreshold.setDescription('Optical power low warning threshold, in dBm.')
cwsXcvrChannelTxPowerTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 20), )
if mibBuilder.loadTexts: cwsXcvrChannelTxPowerTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChannelTxPowerTable.setDescription('None')
cwsXcvrChannelTxPowerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 20, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrChannelDiagnosticsChannelNumber"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrChannelTxPowerTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrChannelTxPowerEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChannelTxPowerEntry.setDescription('Entry for cwsXcvrChannelTxPowerTable.')
cwsXcvrChannelTxPowerTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 20, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrChannelTxPowerTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChannelTxPowerTableSnmpKey.setDescription('Unique key for cwsXcvrChannelTxPower')
cwsXcvrChannelTxPowerActual = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 20, 1, 2), Decimal1Dig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrChannelTxPowerActual.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrChannelTxPowerActual.setDescription('Actual Tx optical power in dBm.')
cwsXcvrTxPowerStatusTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 21), )
if mibBuilder.loadTexts: cwsXcvrTxPowerStatusTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTxPowerStatusTable.setDescription('None')
cwsXcvrTxPowerStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 21, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrChannelDiagnosticsChannelNumber"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrTxPowerStatusTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrTxPowerStatusEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTxPowerStatusEntry.setDescription('Entry for cwsXcvrTxPowerStatusTable.')
cwsXcvrTxPowerStatusTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 21, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrTxPowerStatusTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTxPowerStatusTableSnmpKey.setDescription('Unique key for cwsXcvrTxPowerStatus')
cwsXcvrTxPowerStatusHighAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 21, 1, 2), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTxPowerStatusHighAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTxPowerStatusHighAlarmStatus.setDescription('Optical power high alarm status, boolean, true if alarm is raised, false if alarm is not raised.')
cwsXcvrTxPowerStatusLowAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 21, 1, 3), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTxPowerStatusLowAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTxPowerStatusLowAlarmStatus.setDescription('Optical power low alarm status, boolean, true if alarm is raised, false if alarm is not raised.')
cwsXcvrTxPowerStatusHighWarningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 21, 1, 4), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTxPowerStatusHighWarningStatus.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTxPowerStatusHighWarningStatus.setDescription('Optical power high warning status, boolean, true if warning is raised, false if warning is not raised.')
cwsXcvrTxPowerStatusLowWarningStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 21, 1, 5), TruthValue()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTxPowerStatusLowWarningStatus.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTxPowerStatusLowWarningStatus.setDescription('Optical power low warning status, boolean, true if warning is raised, false if warning is not raised.')
cwsXcvrTxPowerThresholdTable = MibTable((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 22), )
if mibBuilder.loadTexts: cwsXcvrTxPowerThresholdTable.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTxPowerThresholdTable.setDescription('None')
cwsXcvrTxPowerThresholdEntry = MibTableRow((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 22, 1), ).setIndexNames((0, "CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrChannelDiagnosticsChannelNumber"), (0, "CIENA-WS-XCVR-MIB", "cwsXcvrTxPowerThresholdTableSnmpKey"))
if mibBuilder.loadTexts: cwsXcvrTxPowerThresholdEntry.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTxPowerThresholdEntry.setDescription('Entry for cwsXcvrTxPowerThresholdTable.')
cwsXcvrTxPowerThresholdTableSnmpKey = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 22, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 2147483647)))
if mibBuilder.loadTexts: cwsXcvrTxPowerThresholdTableSnmpKey.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTxPowerThresholdTableSnmpKey.setDescription('Unique key for cwsXcvrTxPowerThreshold')
cwsXcvrTxPowerThresholdHighAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 22, 1, 2), Decimal1Dig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTxPowerThresholdHighAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTxPowerThresholdHighAlarmThreshold.setDescription('Optical power high alarm threshold, in dBm. If it is modem Tx-power, the threshold can change based on provisioned tx power. High threshold = target power + 3.')
cwsXcvrTxPowerThresholdLowAlarmThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 22, 1, 3), Decimal1Dig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTxPowerThresholdLowAlarmThreshold.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTxPowerThresholdLowAlarmThreshold.setDescription('Optical power low alarm threshold, in dBm. If it is modem Tx-power, the threshold can change based on provisioned tx power. Low threshold = target power - 10.')
cwsXcvrTxPowerThresholdHighWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 22, 1, 4), Decimal1Dig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTxPowerThresholdHighWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTxPowerThresholdHighWarningThreshold.setDescription('Optical power high warning threshold, in dBm.')
cwsXcvrTxPowerThresholdLowWarningThreshold = MibTableColumn((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 22, 1, 5), Decimal1Dig()).setMaxAccess("readonly")
if mibBuilder.loadTexts: cwsXcvrTxPowerThresholdLowWarningThreshold.setStatus('current')
if mibBuilder.loadTexts: cwsXcvrTxPowerThresholdLowWarningThreshold.setDescription('Optical power low warning threshold, in dBm.')
cienaWsXcvrObjects = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 1))
cienaWsXcvrConformance = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 2))
cienaWsXcvrGroups = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 2, 1))
cienaWsXcvrGroup = ObjectGroup((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 2, 1, 1)).setObjects(("CIENA-WS-XCVR-MIB", "cwsXcvrXcvrsXcvrIndex"), ("CIENA-WS-XCVR-MIB", "cwsXcvrXcvrIdName"), ("CIENA-WS-XCVR-MIB", "cwsXcvrXcvrIdDescription"), ("CIENA-WS-XCVR-MIB", "cwsXcvrXcvrStateAdminState"), ("CIENA-WS-XCVR-MIB", "cwsXcvrXcvrStateOperationalState"), ("CIENA-WS-XCVR-MIB", "cwsXcvrXcvrStatePowerState"), ("CIENA-WS-XCVR-MIB", "cwsXcvrXcvrPropertiesType"), ("CIENA-WS-XCVR-MIB", "cwsXcvrXcvrPropertiesMode"), ("CIENA-WS-XCVR-MIB", "cwsXcvrXcvrPropertiesNumberOfChannels"), ("CIENA-WS-XCVR-MIB", "cwsXcvrCienaIdCienaItemNumber"), ("CIENA-WS-XCVR-MIB", "cwsXcvrCienaIdRevision"), ("CIENA-WS-XCVR-MIB", "cwsXcvrCienaIdDescription"), ("CIENA-WS-XCVR-MIB", "cwsXcvrVendorIdName"), ("CIENA-WS-XCVR-MIB", "cwsXcvrVendorIdPartNumber"), ("CIENA-WS-XCVR-MIB", "cwsXcvrVendorIdRevision"), ("CIENA-WS-XCVR-MIB", "cwsXcvrVendorIdSerialNumber"), ("CIENA-WS-XCVR-MIB", "cwsXcvrVendorIdManufacturedDate"), ("CIENA-WS-XCVR-MIB", "cwsXcvrDeviceIdConnectorType"), ("CIENA-WS-XCVR-MIB", "cwsXcvrVendorTransmitterNominalBitRate"), ("CIENA-WS-XCVR-MIB", "cwsXcvrVendorDiagnosticMonitoringRxPowerMeasurement"), ("CIENA-WS-XCVR-MIB", "cwsXcvrVendorDiagnosticMonitoringTxPowerMeasurement"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTemperatureActual"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTemperatureStatusHighAlarmStatus"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTemperatureStatusLowAlarmStatus"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTemperatureStatusHighWarningStatus"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTemperatureStatusLowWarningStatus"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTemperatureThresholdHighAlarmThreshold"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTemperatureThresholdLowAlarmThreshold"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTemperatureThresholdHighWarningThreshold"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTemperatureThresholdLowWarningThreshold"), ("CIENA-WS-XCVR-MIB", "cwsXcvrChannelDiagnosticsChannelNumber"), ("CIENA-WS-XCVR-MIB", "cwsXcvrChannelRxPowerActual"), ("CIENA-WS-XCVR-MIB", "cwsXcvrRxPowerStatusHighAlarmStatus"), ("CIENA-WS-XCVR-MIB", "cwsXcvrRxPowerStatusLowAlarmStatus"), ("CIENA-WS-XCVR-MIB", "cwsXcvrRxPowerStatusHighWarningStatus"), ("CIENA-WS-XCVR-MIB", "cwsXcvrRxPowerStatusLowWarningStatus"), ("CIENA-WS-XCVR-MIB", "cwsXcvrRxPowerThresholdHighAlarmThreshold"), ("CIENA-WS-XCVR-MIB", "cwsXcvrRxPowerThresholdLowAlarmThreshold"), ("CIENA-WS-XCVR-MIB", "cwsXcvrRxPowerThresholdHighWarningThreshold"), ("CIENA-WS-XCVR-MIB", "cwsXcvrRxPowerThresholdLowWarningThreshold"), ("CIENA-WS-XCVR-MIB", "cwsXcvrChannelTxPowerActual"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTxPowerStatusHighAlarmStatus"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTxPowerStatusLowAlarmStatus"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTxPowerStatusHighWarningStatus"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTxPowerStatusLowWarningStatus"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTxPowerThresholdHighAlarmThreshold"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTxPowerThresholdLowAlarmThreshold"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTxPowerThresholdHighWarningThreshold"), ("CIENA-WS-XCVR-MIB", "cwsXcvrTxPowerThresholdLowWarningThreshold"))
if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cienaWsXcvrGroup = cienaWsXcvrGroup.setStatus('current')
if mibBuilder.loadTexts: cienaWsXcvrGroup.setDescription('Conformance Group')
cienaWsXcvrCompliances = MibIdentifier((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 2, 2))
cienaWsXcvrCompliance = ModuleCompliance((1, 3, 6, 1, 4, 1, 1271, 3, 4, 15, 2, 2, 1)).setObjects(("CIENA-WS-XCVR-MIB", "cienaWsXcvrGroup"))

if getattr(mibBuilder, 'version', (0, 0, 0)) > (4, 4, 0):
    cienaWsXcvrCompliance = cienaWsXcvrCompliance.setStatus('current')
if mibBuilder.loadTexts: cienaWsXcvrCompliance.setDescription('Compliance')
mibBuilder.exportSymbols("CIENA-WS-XCVR-MIB", cwsXcvrChannelDiagnosticsChannelNumber=cwsXcvrChannelDiagnosticsChannelNumber, cwsXcvrChannelDiagnosticsTable=cwsXcvrChannelDiagnosticsTable, cwsXcvrDeviceIdEntry=cwsXcvrDeviceIdEntry, cwsXcvrXcvrPropertiesMode=cwsXcvrXcvrPropertiesMode, cwsXcvrTemperatureStatusTableSnmpKey=cwsXcvrTemperatureStatusTableSnmpKey, cwsXcvrTxPowerStatusLowAlarmStatus=cwsXcvrTxPowerStatusLowAlarmStatus, cwsXcvrDeviceIdConnectorType=cwsXcvrDeviceIdConnectorType, cwsXcvrTxPowerStatusLowWarningStatus=cwsXcvrTxPowerStatusLowWarningStatus, cwsXcvrTemperatureThresholdLowWarningThreshold=cwsXcvrTemperatureThresholdLowWarningThreshold, cwsXcvrVendorIdTable=cwsXcvrVendorIdTable, cwsXcvrChannelRxPowerTableSnmpKey=cwsXcvrChannelRxPowerTableSnmpKey, cwsXcvrChannelTxPowerActual=cwsXcvrChannelTxPowerActual, cwsXcvrXcvrPropertiesEntry=cwsXcvrXcvrPropertiesEntry, cwsXcvrRxPowerStatusTable=cwsXcvrRxPowerStatusTable, cwsXcvrRxPowerStatusHighAlarmStatus=cwsXcvrRxPowerStatusHighAlarmStatus, cwsXcvrDeviceIdTable=cwsXcvrDeviceIdTable, cwsXcvrTemperatureStatusHighWarningStatus=cwsXcvrTemperatureStatusHighWarningStatus, cwsXcvrTxPowerThresholdTableSnmpKey=cwsXcvrTxPowerThresholdTableSnmpKey, cwsXcvrTxPowerThresholdHighAlarmThreshold=cwsXcvrTxPowerThresholdHighAlarmThreshold, cwsXcvrTxPowerThresholdEntry=cwsXcvrTxPowerThresholdEntry, cwsXcvrTxPowerThresholdLowWarningThreshold=cwsXcvrTxPowerThresholdLowWarningThreshold, cwsXcvrXcvrStateOperationalState=cwsXcvrXcvrStateOperationalState, cwsXcvrTemperatureStatusHighAlarmStatus=cwsXcvrTemperatureStatusHighAlarmStatus, cwsXcvrCienaIdDescription=cwsXcvrCienaIdDescription, cwsXcvrTxPowerStatusHighWarningStatus=cwsXcvrTxPowerStatusHighWarningStatus, cwsXcvrChannelRxPowerActual=cwsXcvrChannelRxPowerActual, cwsXcvrVendorIdEntry=cwsXcvrVendorIdEntry, cwsXcvrTemperatureThresholdTableSnmpKey=cwsXcvrTemperatureThresholdTableSnmpKey, cwsXcvrVendorTransmitterTable=cwsXcvrVendorTransmitterTable, cwsXcvrVendorIdTableSnmpKey=cwsXcvrVendorIdTableSnmpKey, cwsXcvrChannelTxPowerTableSnmpKey=cwsXcvrChannelTxPowerTableSnmpKey, cienaWsXcvrMIB=cienaWsXcvrMIB, cienaWsXcvrObjects=cienaWsXcvrObjects, cwsXcvrXcvrStatePowerState=cwsXcvrXcvrStatePowerState, cwsXcvrTemperatureTable=cwsXcvrTemperatureTable, cwsXcvrRxPowerStatusEntry=cwsXcvrRxPowerStatusEntry, cwsXcvrRxPowerStatusLowWarningStatus=cwsXcvrRxPowerStatusLowWarningStatus, cienaWsXcvrGroups=cienaWsXcvrGroups, cwsXcvrXcvrIdTable=cwsXcvrXcvrIdTable, cwsXcvrVendorTransmitterTableSnmpKey=cwsXcvrVendorTransmitterTableSnmpKey, cwsXcvrTemperatureThresholdTable=cwsXcvrTemperatureThresholdTable, cwsXcvrXcvrPropertiesTable=cwsXcvrXcvrPropertiesTable, cienaWsXcvrGroup=cienaWsXcvrGroup, cwsXcvrTxPowerThresholdLowAlarmThreshold=cwsXcvrTxPowerThresholdLowAlarmThreshold, cwsXcvrRxPowerStatusTableSnmpKey=cwsXcvrRxPowerStatusTableSnmpKey, cwsXcvrChildPtpIdTable=cwsXcvrChildPtpIdTable, cwsXcvrTemperatureThresholdHighWarningThreshold=cwsXcvrTemperatureThresholdHighWarningThreshold, cwsXcvrTemperatureStatusLowWarningStatus=cwsXcvrTemperatureStatusLowWarningStatus, cwsXcvrChannelRxPowerEntry=cwsXcvrChannelRxPowerEntry, cwsXcvrCienaIdTableSnmpKey=cwsXcvrCienaIdTableSnmpKey, cwsXcvrTxPowerStatusHighAlarmStatus=cwsXcvrTxPowerStatusHighAlarmStatus, cwsXcvrXcvrsEntry=cwsXcvrXcvrsEntry, cwsXcvrVendorIdName=cwsXcvrVendorIdName, XcvrOpEnum=XcvrOpEnum, cwsXcvrRxPowerThresholdHighAlarmThreshold=cwsXcvrRxPowerThresholdHighAlarmThreshold, cwsXcvrXcvrsTable=cwsXcvrXcvrsTable, cwsXcvrChildPtpIdEntry=cwsXcvrChildPtpIdEntry, cwsXcvrVendorDiagnosticMonitoringTableSnmpKey=cwsXcvrVendorDiagnosticMonitoringTableSnmpKey, cwsXcvrTxPowerThresholdTable=cwsXcvrTxPowerThresholdTable, cwsXcvrTemperatureStatusEntry=cwsXcvrTemperatureStatusEntry, cienaWsXcvrCompliance=cienaWsXcvrCompliance, cwsXcvrTemperatureThresholdHighAlarmThreshold=cwsXcvrTemperatureThresholdHighAlarmThreshold, cwsXcvrTemperatureThresholdLowAlarmThreshold=cwsXcvrTemperatureThresholdLowAlarmThreshold, cwsXcvrCienaIdCienaItemNumber=cwsXcvrCienaIdCienaItemNumber, cwsXcvrTemperatureStatusTable=cwsXcvrTemperatureStatusTable, cwsXcvrXcvrPropertiesType=cwsXcvrXcvrPropertiesType, PYSNMP_MODULE_ID=cienaWsXcvrMIB, cwsXcvrXcvrIdTableSnmpKey=cwsXcvrXcvrIdTableSnmpKey, cwsXcvrVendorTransmitterNominalBitRate=cwsXcvrVendorTransmitterNominalBitRate, cwsXcvrRxPowerThresholdTable=cwsXcvrRxPowerThresholdTable, cwsXcvrRxPowerThresholdTableSnmpKey=cwsXcvrRxPowerThresholdTableSnmpKey, cwsXcvrTemperatureStatusLowAlarmStatus=cwsXcvrTemperatureStatusLowAlarmStatus, cwsXcvrTxPowerStatusTableSnmpKey=cwsXcvrTxPowerStatusTableSnmpKey, cwsXcvrChannelRxPowerTable=cwsXcvrChannelRxPowerTable, cwsXcvrRxPowerStatusLowAlarmStatus=cwsXcvrRxPowerStatusLowAlarmStatus, cwsXcvrCienaIdRevision=cwsXcvrCienaIdRevision, cwsXcvrVendorDiagnosticMonitoringTable=cwsXcvrVendorDiagnosticMonitoringTable, cwsXcvrTxPowerStatusTable=cwsXcvrTxPowerStatusTable, cwsXcvrXcvrsXcvrIndex=cwsXcvrXcvrsXcvrIndex, cwsXcvrXcvrPropertiesNumberOfChannels=cwsXcvrXcvrPropertiesNumberOfChannels, cwsXcvrXcvrPropertiesTableSnmpKey=cwsXcvrXcvrPropertiesTableSnmpKey, cwsXcvrVendorIdRevision=cwsXcvrVendorIdRevision, cwsXcvrRxPowerThresholdHighWarningThreshold=cwsXcvrRxPowerThresholdHighWarningThreshold, cwsXcvrVendorTransmitterEntry=cwsXcvrVendorTransmitterEntry, cwsXcvrChannelDiagnosticsEntry=cwsXcvrChannelDiagnosticsEntry, cwsXcvrChildPtpId=cwsXcvrChildPtpId, cwsXcvrVendorDiagnosticMonitoringEntry=cwsXcvrVendorDiagnosticMonitoringEntry, cwsXcvrXcvrStateTableSnmpKey=cwsXcvrXcvrStateTableSnmpKey, cwsXcvrXcvrStateEntry=cwsXcvrXcvrStateEntry, cwsXcvrTemperatureTableSnmpKey=cwsXcvrTemperatureTableSnmpKey, cwsXcvrVendorIdPartNumber=cwsXcvrVendorIdPartNumber, cwsXcvrXcvrIdEntry=cwsXcvrXcvrIdEntry, cwsXcvrXcvrStateAdminState=cwsXcvrXcvrStateAdminState, cwsXcvrXcvrStateTable=cwsXcvrXcvrStateTable, cwsXcvrCienaIdEntry=cwsXcvrCienaIdEntry, cwsXcvrChannelTxPowerEntry=cwsXcvrChannelTxPowerEntry, cwsXcvrVendorDiagnosticMonitoringRxPowerMeasurement=cwsXcvrVendorDiagnosticMonitoringRxPowerMeasurement, cwsXcvrXcvrIdName=cwsXcvrXcvrIdName, cwsXcvrVendorIdManufacturedDate=cwsXcvrVendorIdManufacturedDate, cwsXcvrTxPowerStatusEntry=cwsXcvrTxPowerStatusEntry, cwsXcvrDeviceIdTableSnmpKey=cwsXcvrDeviceIdTableSnmpKey, cwsXcvrRxPowerThresholdLowWarningThreshold=cwsXcvrRxPowerThresholdLowWarningThreshold, cwsXcvrChildPtpIdTableSnmpKey=cwsXcvrChildPtpIdTableSnmpKey, cwsXcvrRxPowerThresholdLowAlarmThreshold=cwsXcvrRxPowerThresholdLowAlarmThreshold, cwsXcvrTemperatureThresholdEntry=cwsXcvrTemperatureThresholdEntry, cienaWsXcvrConformance=cienaWsXcvrConformance, cwsXcvrTemperatureEntry=cwsXcvrTemperatureEntry, cwsXcvrRxPowerStatusHighWarningStatus=cwsXcvrRxPowerStatusHighWarningStatus, cienaWsXcvrCompliances=cienaWsXcvrCompliances, cwsXcvrVendorDiagnosticMonitoringTxPowerMeasurement=cwsXcvrVendorDiagnosticMonitoringTxPowerMeasurement, cwsXcvrRxPowerThresholdEntry=cwsXcvrRxPowerThresholdEntry, cwsXcvrCienaIdTable=cwsXcvrCienaIdTable, cwsXcvrTxPowerThresholdHighWarningThreshold=cwsXcvrTxPowerThresholdHighWarningThreshold, cwsXcvrVendorIdSerialNumber=cwsXcvrVendorIdSerialNumber, cwsXcvrXcvrIdDescription=cwsXcvrXcvrIdDescription, cwsXcvrChannelTxPowerTable=cwsXcvrChannelTxPowerTable, cwsXcvrTemperatureActual=cwsXcvrTemperatureActual)
