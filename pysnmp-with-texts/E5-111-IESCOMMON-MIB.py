#
# PySNMP MIB module E5-111-IESCOMMON-MIB (http://snmplabs.com/pysmi)
# ASN.1 source file:///Users/davwang4/Dev/mibs.snmplabs.com/asn1/E5-111-IESCOMMON-MIB
# Produced by pysmi-0.3.4 at Wed May  1 12:58:49 2019
# On host DAVWANG4-M-1475 platform Darwin version 18.5.0 by user davwang4
# Using Python version 3.7.3 (default, Mar 27 2019, 09:23:15) 
#
Integer, OctetString, ObjectIdentifier = mibBuilder.importSymbols("ASN1", "Integer", "OctetString", "ObjectIdentifier")
NamedValues, = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
SingleValueConstraint, ConstraintsIntersection, ValueRangeConstraint, ValueSizeConstraint, ConstraintsUnion = mibBuilder.importSymbols("ASN1-REFINEMENT", "SingleValueConstraint", "ConstraintsIntersection", "ValueRangeConstraint", "ValueSizeConstraint", "ConstraintsUnion")
e5x111, iesSeriesCommon = mibBuilder.importSymbols("E5-111-MIB", "e5x111", "iesSeriesCommon")
ifIndex, = mibBuilder.importSymbols("IF-MIB", "ifIndex")
PortList, = mibBuilder.importSymbols("Q-BRIDGE-MIB", "PortList")
ModuleCompliance, NotificationGroup = mibBuilder.importSymbols("SNMPv2-CONF", "ModuleCompliance", "NotificationGroup")
iso, ObjectIdentity, MibIdentifier, Unsigned32, MibScalar, MibTable, MibTableRow, MibTableColumn, Bits, Counter64, enterprises, IpAddress, Gauge32, Integer32, Counter32, NotificationType, NotificationType, ModuleIdentity, TimeTicks = mibBuilder.importSymbols("SNMPv2-SMI", "iso", "ObjectIdentity", "MibIdentifier", "Unsigned32", "MibScalar", "MibTable", "MibTableRow", "MibTableColumn", "Bits", "Counter64", "enterprises", "IpAddress", "Gauge32", "Integer32", "Counter32", "NotificationType", "NotificationType", "ModuleIdentity", "TimeTicks")
DisplayString, PhysAddress, RowStatus, TextualConvention = mibBuilder.importSymbols("SNMPv2-TC", "DisplayString", "PhysAddress", "RowStatus", "TextualConvention")
iesChassis = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1))
iesHWMonitor = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2))
iesSysMgnt = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3))
iesSysState = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 1))
iesSysMaintenance = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2))
iesSysTimeSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 3))
iesSysAccessControl = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 4))
iesSysStaticRoute = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 5))
iesSyslogSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 6))
iesSysDhcpSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 7))
iesSysSNMPSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 8))
iesSysDot1xSetup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9))
iesSysMacFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 10))
iesSysPacketFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 11))
iesSysMacCountFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 12))
iesSysMulticastGroup = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 13))
iesSysIgmpFilter = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 14))
iesL2SW = MibIdentifier((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 4))
iesNumOfChassis = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesNumOfChassis.setStatus('current')
if mibBuilder.loadTexts: iesNumOfChassis.setDescription('The number of chassis in the IES-2000/3000 system')
iesChassisTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 2), )
if mibBuilder.loadTexts: iesChassisTable.setStatus('current')
if mibBuilder.loadTexts: iesChassisTable.setDescription('The table which contains the chassis information in IES-2000/3000 system')
iesChassisEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 2, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesChassisId"))
if mibBuilder.loadTexts: iesChassisEntry.setStatus('current')
if mibBuilder.loadTexts: iesChassisEntry.setDescription('')
iesChassisId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesChassisId.setStatus('current')
if mibBuilder.loadTexts: iesChassisId.setDescription('The Chassis ID')
iesChassisFrameNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 2, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesChassisFrameNumber.setStatus('current')
if mibBuilder.loadTexts: iesChassisFrameNumber.setDescription('The Frame ID')
iesChassisSerialNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 2, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesChassisSerialNumber.setStatus('current')
if mibBuilder.loadTexts: iesChassisSerialNumber.setDescription('The Chassis Serial Number')
iesChassisNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 2, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesChassisNumber.setStatus('current')
if mibBuilder.loadTexts: iesChassisNumber.setDescription('The Chassis Number which is defined by the system administrator for management purpose')
iesChassisStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 2, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("empty", 1), ("up", 2), ("down", 3), ("testing", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesChassisStatus.setStatus('current')
if mibBuilder.loadTexts: iesChassisStatus.setDescription('The current status of the chassis.')
iesChassisProductPartNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 2, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesChassisProductPartNumber.setStatus('current')
if mibBuilder.loadTexts: iesChassisProductPartNumber.setDescription('Product part number')
iesChassisHwRevisionNumber = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesChassisHwRevisionNumber.setStatus('current')
if mibBuilder.loadTexts: iesChassisHwRevisionNumber.setDescription('HW revision Number')
iesChassisCleiCode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 2, 1, 8), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesChassisCleiCode.setStatus('current')
if mibBuilder.loadTexts: iesChassisCleiCode.setDescription('CLEI code')
iesChassisHwVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 2, 1, 9), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesChassisHwVersion.setStatus('current')
if mibBuilder.loadTexts: iesChassisHwVersion.setDescription('Hardware version')
iesChassisMacAddress = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 2, 1, 10), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesChassisMacAddress.setStatus('current')
if mibBuilder.loadTexts: iesChassisMacAddress.setDescription('MAC address')
iesChassisVoipDspVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 2, 1, 11), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesChassisVoipDspVersion.setStatus('current')
if mibBuilder.loadTexts: iesChassisVoipDspVersion.setDescription('Voip dsp version')
iesChassisCodecVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 2, 1, 12), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesChassisCodecVersion.setStatus('current')
if mibBuilder.loadTexts: iesChassisCodecVersion.setDescription('Codec F/W version')
iesSlotTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 3), )
if mibBuilder.loadTexts: iesSlotTable.setStatus('current')
if mibBuilder.loadTexts: iesSlotTable.setDescription('The table which contains the slot information in a chassis of IES-2000/3000 system')
iesSlotEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 3, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesChassisId"), (0, "E5-111-IESCOMMON-MIB", "iesSlotId"))
if mibBuilder.loadTexts: iesSlotEntry.setStatus('current')
if mibBuilder.loadTexts: iesSlotEntry.setDescription('')
iesSlotId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSlotId.setStatus('current')
if mibBuilder.loadTexts: iesSlotId.setDescription('Identity of the slot')
iesSlotModuleType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 3, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))).clone(namedValues=NamedValues(("unknown", 1), ("msc1000-L2", 2), ("msc1000-ML", 3), ("alc1024-61", 4), ("vlc1012", 5), ("slc1024", 6), ("alc1024-63", 7), ("msc1000A", 8), ("vlc1124", 9), ("alc1224-71", 10), ("alc1224-73", 11), ("slc1224-22", 12), ("alc1224-51", 13), ("alc1224-53", 14)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSlotModuleType.setStatus('current')
if mibBuilder.loadTexts: iesSlotModuleType.setDescription('Card type of the plug-in card in IES-2000/3000.')
iesSlotModuleDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 3, 1, 3), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSlotModuleDescr.setStatus('current')
if mibBuilder.loadTexts: iesSlotModuleDescr.setDescription('The descriptions of the plug-in card in IES-2000/3000.')
iesSlotModuleFWVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 3, 1, 4), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSlotModuleFWVersion.setStatus('current')
if mibBuilder.loadTexts: iesSlotModuleFWVersion.setDescription('The firmware version of the plug-in card in IES-2000/3000.')
iesSlotModuleDriverVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 3, 1, 5), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSlotModuleDriverVersion.setStatus('current')
if mibBuilder.loadTexts: iesSlotModuleDriverVersion.setDescription('The DSL driver of the plug-in card in IES-2000/3000.')
iesSlotModuleModemCodeVersion = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSlotModuleModemCodeVersion.setStatus('current')
if mibBuilder.loadTexts: iesSlotModuleModemCodeVersion.setDescription('The DSL modem code version of the plug-in card in IES-2000/3000')
iesSlotModuleStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 3, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5))).clone(namedValues=NamedValues(("empty", 1), ("up", 2), ("down", 3), ("testing", 4), ("standby", 5)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSlotModuleStatus.setStatus('current')
if mibBuilder.loadTexts: iesSlotModuleStatus.setDescription('The module state of the plug-in card in IES-2000/3000')
iesSlotModuleAlarmStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 3, 1, 8), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSlotModuleAlarmStatus.setStatus('current')
if mibBuilder.loadTexts: iesSlotModuleAlarmStatus.setDescription('This variable indicates the alarm status of the module. It is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The moduleNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 moduleNoDefect 2 moduleOverHeat 3 moduleFanRpmLow 4 moduleVoltageLow 5 moduleThermalSensorFailure 6 modulePullOut 7 powerDC48VAFailure 8 powerDC48VBFailure 9 extAlarmInputTrigger 10 moduleDown 11 mscSwitchOverOK 12 networkTopologyChange')
iesMscPortConfTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 4), )
if mibBuilder.loadTexts: iesMscPortConfTable.setStatus('current')
if mibBuilder.loadTexts: iesMscPortConfTable.setDescription('The table contains port configuration information in MSC1000.')
iesMscPortConfEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 4, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesChassisId"), (0, "E5-111-IESCOMMON-MIB", "iesSlotId"), (0, "E5-111-IESCOMMON-MIB", "iesMscPortId"))
if mibBuilder.loadTexts: iesMscPortConfEntry.setStatus('current')
if mibBuilder.loadTexts: iesMscPortConfEntry.setDescription('')
iesMscPortId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 4, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMscPortId.setStatus('current')
if mibBuilder.loadTexts: iesMscPortId.setDescription('Identity of the extension slot in MSC1000.')
iesMscPortType = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("unknown", 1), ("e1000BaseT", 2), ("e1000BaseLX", 3), ("e1000BaseSX", 4), ("e100BaseFX", 5), ("e100BaseTX", 6), ("e1000BaseGBIC", 7)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMscPortType.setStatus('current')
if mibBuilder.loadTexts: iesMscPortType.setDescription('Port type of the extension slot in MSC1000.')
iesMscPortIfIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 4, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMscPortIfIndex.setStatus('current')
if mibBuilder.loadTexts: iesMscPortIfIndex.setDescription('')
iesMscPortSpeed = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 4, 1, 4), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("auto", 1), ("e1000M", 2), ("e100M", 3), ("e10M", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMscPortSpeed.setStatus('current')
if mibBuilder.loadTexts: iesMscPortSpeed.setDescription('')
iesMscPortDuplex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 4, 1, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("full", 1), ("half", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMscPortDuplex.setStatus('current')
if mibBuilder.loadTexts: iesMscPortDuplex.setDescription('')
iesMscPortFlowControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 4, 1, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMscPortFlowControl.setStatus('current')
if mibBuilder.loadTexts: iesMscPortFlowControl.setDescription('')
iesMscPortDefaultVLANTagging = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 4, 1, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMscPortDefaultVLANTagging.setStatus('current')
if mibBuilder.loadTexts: iesMscPortDefaultVLANTagging.setDescription('')
iesMscPortTrunkGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 4, 1, 8), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMscPortTrunkGroupId.setStatus('current')
if mibBuilder.loadTexts: iesMscPortTrunkGroupId.setDescription('')
iesMscPortMode = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 4, 1, 9), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("uplink", 1), ("subtending", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMscPortMode.setStatus('current')
if mibBuilder.loadTexts: iesMscPortMode.setDescription(' The operational mode for uplink and subtending ports in MSC. Only the operational mode of subtending ports can be modified.')
iesMscPortVLANTrunking = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 1, 4, 1, 10), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMscPortVLANTrunking.setStatus('current')
if mibBuilder.loadTexts: iesMscPortVLANTrunking.setDescription(' The VLAN trunking setting for uplink and subtending ports in MSC.')
iesFanRpmTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 1), )
if mibBuilder.loadTexts: iesFanRpmTable.setStatus('current')
if mibBuilder.loadTexts: iesFanRpmTable.setDescription('A table that contains rpm information about the fans.')
iesFanRpmEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 1, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesChassisId"), (0, "E5-111-IESCOMMON-MIB", "iesFanRpmIndex"))
if mibBuilder.loadTexts: iesFanRpmEntry.setStatus('current')
if mibBuilder.loadTexts: iesFanRpmEntry.setDescription('A list of rpm information for each fan.')
iesFanRpmIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 1, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesFanRpmIndex.setStatus('current')
if mibBuilder.loadTexts: iesFanRpmIndex.setDescription('The identity of the fan.')
iesFanRpmCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 1, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesFanRpmCurValue.setStatus('current')
if mibBuilder.loadTexts: iesFanRpmCurValue.setDescription('The current rpm of the fan.')
iesFanRpmMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 1, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesFanRpmMaxValue.setStatus('current')
if mibBuilder.loadTexts: iesFanRpmMaxValue.setDescription('The maximum rpm ever performed by the fan.')
iesFanRpmMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 1, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesFanRpmMinValue.setStatus('current')
if mibBuilder.loadTexts: iesFanRpmMinValue.setDescription('The minimum rpm ever performed by the fan.')
iesFanRpmLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 1, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesFanRpmLowThresh.setStatus('current')
if mibBuilder.loadTexts: iesFanRpmLowThresh.setDescription('The low threshold of the rpm of the fan. If the current rpm is less than the threshold, the device will initiate the fanRpmLow trap.')
iesFanRpmDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 1, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesFanRpmDescr.setStatus('current')
if mibBuilder.loadTexts: iesFanRpmDescr.setDescription('The description of the fan (e.g. location, function, etc.).')
iesVoltageTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 2), )
if mibBuilder.loadTexts: iesVoltageTable.setStatus('current')
if mibBuilder.loadTexts: iesVoltageTable.setDescription('A table that contains voltage information about the system.')
iesVoltageEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 2, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesChassisId"), (0, "E5-111-IESCOMMON-MIB", "iesSlotId"), (0, "E5-111-IESCOMMON-MIB", "iesVoltageIndex"))
if mibBuilder.loadTexts: iesVoltageEntry.setStatus('current')
if mibBuilder.loadTexts: iesVoltageEntry.setDescription('A list of voltage information for each sensor.')
iesVoltageIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesVoltageIndex.setStatus('current')
if mibBuilder.loadTexts: iesVoltageIndex.setDescription('The identity of the sensor.')
iesVoltageCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesVoltageCurValue.setStatus('current')
if mibBuilder.loadTexts: iesVoltageCurValue.setDescription('The current voltage detected by the sensor (in milli-voltage).')
iesVoltageMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 2, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesVoltageMaxValue.setStatus('current')
if mibBuilder.loadTexts: iesVoltageMaxValue.setDescription('The maximum voltage ever detected by the sensor (in milli-voltage).')
iesVoltageMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 2, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesVoltageMinValue.setStatus('current')
if mibBuilder.loadTexts: iesVoltageMinValue.setDescription('The minimum voltage ever detected by the sensor (in milli-voltage).')
iesVoltageNominalValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 2, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesVoltageNominalValue.setStatus('current')
if mibBuilder.loadTexts: iesVoltageNominalValue.setDescription('The nominal voltage which the power should supply (in milli-voltage).')
iesVoltageLowThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 2, 1, 6), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesVoltageLowThresh.setStatus('current')
if mibBuilder.loadTexts: iesVoltageLowThresh.setDescription('The low threshold of the voltage (in milli-voltage). If the current voltage is less than the threshold, the device will initiate the voltageLow trap.')
iesVoltageDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 2, 1, 7), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesVoltageDescr.setStatus('current')
if mibBuilder.loadTexts: iesVoltageDescr.setDescription('The description of the voltage (e.g. location, nominal value, etc.).')
iesSysTempTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 3), )
if mibBuilder.loadTexts: iesSysTempTable.setStatus('current')
if mibBuilder.loadTexts: iesSysTempTable.setDescription('A table that contains temperature information about system.')
iesSysTempEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 3, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesChassisId"), (0, "E5-111-IESCOMMON-MIB", "iesSlotId"), (0, "E5-111-IESCOMMON-MIB", "iesSysTempIndex"))
if mibBuilder.loadTexts: iesSysTempEntry.setStatus('current')
if mibBuilder.loadTexts: iesSysTempEntry.setDescription('A list of temperature information for each sensor.')
iesSysTempIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 3, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSysTempIndex.setStatus('current')
if mibBuilder.loadTexts: iesSysTempIndex.setDescription('The identity of the sensor.')
iesSysTempCurValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 3, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSysTempCurValue.setStatus('current')
if mibBuilder.loadTexts: iesSysTempCurValue.setDescription('The current temperature detected in Celsius by the sensor.')
iesSysTempMaxValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 3, 1, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSysTempMaxValue.setStatus('current')
if mibBuilder.loadTexts: iesSysTempMaxValue.setDescription('The maximum temperature ever detected in Celsius by the sensor.')
iesSysTempMinValue = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 3, 1, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSysTempMinValue.setStatus('current')
if mibBuilder.loadTexts: iesSysTempMinValue.setDescription('The minimum temperature ever detected in Celsius by the sensor.')
iesSysTempHighThresh = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 3, 1, 5), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSysTempHighThresh.setStatus('current')
if mibBuilder.loadTexts: iesSysTempHighThresh.setDescription('The high threshold of the temperature in Celsius. If the current temperature is higher than the threshold, the device will initiate the overheat trap.')
iesSysTempDescr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 2, 3, 1, 6), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSysTempDescr.setStatus('current')
if mibBuilder.loadTexts: iesSysTempDescr.setDescription('The description of the temperature sensor (e.g. location, function, etc.).')
iesSystemCurrentStatus = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 1, 1), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSystemCurrentStatus.setStatus('current')
if mibBuilder.loadTexts: iesSystemCurrentStatus.setDescription('This variable indicates the status of the system. The sysCurrentStatus is a bit map represented as a sum, therefore, it can represent multiple defects simultaneously. The sysNoDefect should be set if and only if no other flag is set. The various bit positions are: 1 sysNoDefect 2 sysOverHeat 3 sysFanRpmLow 4 sysVoltageLow 5 sysThermalSensorFailure 6 modulePullOut 7 powerDC48VAFailure 8 powerDC48VBFailure 9 extAlarmInputTrigger 10 moduleDown 11 mscSwitchOverOK 12 networkTopologyChange')
iesProblemCause = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 1, 2), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesProblemCause.setStatus('current')
if mibBuilder.loadTexts: iesProblemCause.setDescription('It describes the problem occurred in the system, e.g. maintenance operation failures, system reboot, error log, ...etc.')
iesMaintenanceOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceOps.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceOps.setDescription('The managed object is for system maintenance. When the EMS wants to trigger the system maitenance operation, the EMS shall send SNMP-SET message to set the corresponding bit value to be 1. The various bit positions are: BIT 1: config save BIT 2: reset BIT 3: local loopback test BIT 4: remote loopback test BIT 5: clear system alarms BIT 6: F4 loopback test BIT 7: F5 loopback test BIT 8: DSL Line Diagnostic')
iesMaintenanceTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 2), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 48))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceTarget.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceTarget.setDescription('The managed object is used for identify the target on which the maintenance operation should be performed.')
iesMaintenanceDSLConfOps = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceDSLConfOps.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceDSLConfOps.setDescription('The managed object is for xDSL line configuration. When the EMS wants to issue the desired operation, the EMS shall send SNMP-SET message to set the corresponding bit value to be 1. The various bit positions are: BIT 1: enable port BIT 2: disable port BIT 3: set DSL mode BIT 4: set profile BIT 5: enable mac filter BIT 6: disable mac filter BIT 7: set packet filter BIT 8: enable dot1x BIT 9: disable dot1x BIT 10: set dot1x control BIT 11: enable dot1x re-authentication BIT 12: disable dot1x re-authentication BIT 13: set dot1x re-authentication period BIT 14: enable mac count filter BIT 15: disable mac count filter BIT 16: set mac count filter BIT 17: set alarm profile BIT 18: set Annex L (Only in AnnexA) BIT 19: set power management BIT 20: set rate adaptation mode BIT 21: set IGMP filter (Not support after E5-111 v3.0) BIT 22: enable Annex M BIT 23: disable Annex M')
iesMaintenanceDSLConfTarget = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 4), OctetString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceDSLConfTarget.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceDSLConfTarget.setDescription('The managed object is used for identify the target on which the line configuration should be performed. The target is encoded as: Byte 1: the octet specifies a set of eight Chassis, Chassis 0 through 7 Byte 2~3: each octet specifies a set of eight slots, with the first octet specifying slots 1 through 8 and the second octet specifying slots 9 through 16. Byte 4: reserved Byte 5~11: each octet specifies a set of eight ports, with the first octet specifying ports 1 through 8, etc.')
iesMaintenanceDSLConfProfileName = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 5), DisplayString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceDSLConfProfileName.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceDSLConfProfileName.setDescription('The DSL profile name')
iesMaintenanceDSLConfMode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 6), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceDSLConfMode.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceDSLConfMode.setDescription('The DSL mode. The semantic for each bit is: Bit 1: ADSL, G.lite Bit 2: ADSL, G.dmt Bit 3: ADSL, T1.413 Bit 4: ADSL, Auto Bit 5: ADSL, ETSI Bit 6: ADSL2, Bit 7: ADSL2+')
iesMaintenanceDSLConfPktFilter = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 7), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceDSLConfPktFilter.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceDSLConfPktFilter.setDescription('The packet filter. The semantic for each bit is: Bit 1: accept all Bit 2: accept PPPoE only Bit 3: reject ARP Bit 4: reject DHCP Bit 5: reject EAPOL Bit 6: reject PPPoE Bit 7: reject NetBIOS Bit 8: reject IGMP Bit 9: reject IP')
iesMaintenanceDSLConfDot1xControl = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("forceAuth", 2), ("forceUnAuth", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceDSLConfDot1xControl.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceDSLConfDot1xControl.setDescription('The configuration defines the 802.1x control type.')
iesMaintenanceDSLConfDot1xReauthPeriod = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 9), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceDSLConfDot1xReauthPeriod.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceDSLConfDot1xReauthPeriod.setDescription('The configuration defines the 802.1x re-authentication period (seconds).')
iesMaintenanceDSLConfMacCount = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 10), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceDSLConfMacCount.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceDSLConfMacCount.setDescription('The configuration defines the number of mac addresses which can pass through the port.')
iesMaintenanceVpi = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 11), Integer32().subtype(subtypeSpec=ValueRangeConstraint(0, 255))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceVpi.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceVpi.setDescription('VPI of the channel')
iesMaintenanceVci = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 12), Integer32().subtype(subtypeSpec=ValueRangeConstraint(1, 65535))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceVci.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceVci.setDescription('VCI of the channel')
iesMaintenanceDSLConfAlarmProfileName = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 13), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceDSLConfAlarmProfileName.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceDSLConfAlarmProfileName.setDescription('The DSL alarm profile name')
iesMaintenanceDSLConfAnnexL = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 14), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableNarrowMode", 1), ("enableWideMode", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceDSLConfAnnexL.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceDSLConfAnnexL.setDescription('The annex L setting of the ADSL line (Only in AnnexA).')
iesMaintenanceDSLConfPmMode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 15), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableL2Mode", 1), ("enableL3Mode", 2), ("disable", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceDSLConfPmMode.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceDSLConfPmMode.setDescription('The power management mode of the ADSL line.')
iesMaintenanceDSLConfRateMode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 16), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("fixed", 1), ("adaptAtStartup", 2), ("adaptAtRuntime", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceDSLConfRateMode.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceDSLConfRateMode.setDescription('Defines what form of transmit rate adaptation is configured on this modem. See ADSL Forum TR-005 [3] for more information.')
iesMaintenanceDSLConfIgmpFilter = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 2, 17), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMaintenanceDSLConfIgmpFilter.setStatus('current')
if mibBuilder.loadTexts: iesMaintenanceDSLConfIgmpFilter.setDescription('The IGMP filter name.')
iesTimeServerMode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 3, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("none", 1), ("daytime", 2), ("time", 3), ("ntp", 4)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesTimeServerMode.setStatus('current')
if mibBuilder.loadTexts: iesTimeServerMode.setDescription('The mechanism of Time Server when the system boots up.')
iesTimeServerIP = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 3, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesTimeServerIP.setStatus('current')
if mibBuilder.loadTexts: iesTimeServerIP.setDescription('The IP Address of Time Server')
iesSystemTime = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 3, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesSystemTime.setStatus('current')
if mibBuilder.loadTexts: iesSystemTime.setDescription('The system time')
iesSystemDate = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 3, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesSystemDate.setStatus('current')
if mibBuilder.loadTexts: iesSystemDate.setDescription('The system date')
iesSystemTimeZone = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 3, 5), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25))).clone(namedValues=NamedValues(("none", 0), ("utc-1200", 1), ("utc-1100", 2), ("utc-1000", 3), ("utc-0900", 4), ("utc-0800", 5), ("utc-0700", 6), ("utc-0600", 7), ("utc-0500", 8), ("utc-0400", 9), ("utc-0300", 10), ("utc-0200", 11), ("utc-0100", 12), ("utc", 13), ("utc0100", 14), ("utc0200", 15), ("utc0300", 16), ("utc0400", 17), ("utc0500", 18), ("utc0600", 19), ("utc0700", 20), ("utc0800", 21), ("utc0900", 22), ("utc1000", 23), ("utc1100", 24), ("utc1200", 25)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesSystemTimeZone.setStatus('current')
if mibBuilder.loadTexts: iesSystemTimeZone.setDescription('The system time zone')
iesAccessCtrlTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 4, 1), )
if mibBuilder.loadTexts: iesAccessCtrlTable.setStatus('current')
if mibBuilder.loadTexts: iesAccessCtrlTable.setDescription('A table that contains information about service access control.')
iesAccessCtrlEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 4, 1, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesAccessCtrlService"))
if mibBuilder.loadTexts: iesAccessCtrlEntry.setStatus('current')
if mibBuilder.loadTexts: iesAccessCtrlEntry.setDescription('A list of access control entry.')
iesAccessCtrlService = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 4, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4))).clone(namedValues=NamedValues(("telnet", 1), ("ftp", 2), ("web", 3), ("icmp", 4)))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesAccessCtrlService.setStatus('current')
if mibBuilder.loadTexts: iesAccessCtrlService.setDescription('The service type of the access control entry.')
iesAccessCtrlEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 4, 1, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesAccessCtrlEnable.setStatus('current')
if mibBuilder.loadTexts: iesAccessCtrlEnable.setDescription('Enable or disable the service.')
iesAccessCtrlPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 4, 1, 1, 3), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesAccessCtrlPort.setStatus('current')
if mibBuilder.loadTexts: iesAccessCtrlPort.setDescription('The port number which the service uses.')
iesMaxNumOfSecuredClients = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 4, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMaxNumOfSecuredClients.setStatus('current')
if mibBuilder.loadTexts: iesMaxNumOfSecuredClients.setDescription('The maximum number of sets of secured clients.')
iesSecuredClientTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 4, 3), )
if mibBuilder.loadTexts: iesSecuredClientTable.setStatus('current')
if mibBuilder.loadTexts: iesSecuredClientTable.setDescription('A table that contains information about secured clients.')
iesSecuredClientEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 4, 3, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesSecuredClientStartIp"), (0, "E5-111-IESCOMMON-MIB", "iesSecuredClientEndIp"))
if mibBuilder.loadTexts: iesSecuredClientEntry.setStatus('current')
if mibBuilder.loadTexts: iesSecuredClientEntry.setDescription('A list of secured client entry.')
iesSecuredClientStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 4, 3, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSecuredClientStartIp.setStatus('current')
if mibBuilder.loadTexts: iesSecuredClientStartIp.setDescription('The starting IP address of a set of secured clients.')
iesSecuredClientEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 4, 3, 1, 2), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesSecuredClientEndIp.setStatus('current')
if mibBuilder.loadTexts: iesSecuredClientEndIp.setDescription('The ending IP address of a set of secured clients.')
iesSecuredClientService = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 4, 3, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesSecuredClientService.setStatus('current')
if mibBuilder.loadTexts: iesSecuredClientService.setDescription('Each bit corresponds to a service. The bit is set to 1 if the service is enabled, and set to 0 if the service is disabled. The various bit positions are: BIT 1: telnet BIT 2: FTP BIT 3: web BIT 4: ICMP')
iesSecuredClientRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 4, 3, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesSecuredClientRowStatus.setStatus('current')
if mibBuilder.loadTexts: iesSecuredClientRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A row is activated by setting this object to `active', and is deactivated by setting it to 'notInService'.")
iesMaxNumOfStaticRoutes = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 5, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMaxNumOfStaticRoutes.setStatus('current')
if mibBuilder.loadTexts: iesMaxNumOfStaticRoutes.setDescription('The maximum number of static routes.')
iesStaticRouteTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 5, 2), )
if mibBuilder.loadTexts: iesStaticRouteTable.setStatus('current')
if mibBuilder.loadTexts: iesStaticRouteTable.setDescription('A table that contains information about static routes.')
iesStaticRouteEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 5, 2, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesStaticRouteName"))
if mibBuilder.loadTexts: iesStaticRouteEntry.setStatus('current')
if mibBuilder.loadTexts: iesStaticRouteEntry.setDescription('A list of static route entry.')
iesStaticRouteName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 5, 2, 1, 1), DisplayString()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesStaticRouteName.setStatus('current')
if mibBuilder.loadTexts: iesStaticRouteName.setDescription('The name of the static route.')
iesStaticRouteDest = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 5, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesStaticRouteDest.setStatus('current')
if mibBuilder.loadTexts: iesStaticRouteDest.setDescription('The destination IP address of the static route.')
iesStaticRouteMask = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 5, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesStaticRouteMask.setStatus('current')
if mibBuilder.loadTexts: iesStaticRouteMask.setDescription('The subnet mask of the static route.')
iesStaticRouteGateway = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 5, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesStaticRouteGateway.setStatus('current')
if mibBuilder.loadTexts: iesStaticRouteGateway.setDescription('The gateway IP address of the static route.')
iesStaticRouteMetric = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 5, 2, 1, 5), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesStaticRouteMetric.setStatus('current')
if mibBuilder.loadTexts: iesStaticRouteMetric.setDescription('The routing metric of the static route.')
iesStaticRouteRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 5, 2, 1, 6), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesStaticRouteRowStatus.setStatus('current')
if mibBuilder.loadTexts: iesStaticRouteRowStatus.setDescription("This object is used to create a new row or modify or delete an existing row in this table. A row is activated by setting this object to `active', and is deactivated by setting it to 'notInService'.")
iesSysLogEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 6, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesSysLogEnable.setStatus('current')
if mibBuilder.loadTexts: iesSysLogEnable.setDescription('Enable/disable syslog function.')
iesSysLogServer = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 6, 2), IpAddress()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesSysLogServer.setStatus('current')
if mibBuilder.loadTexts: iesSysLogServer.setDescription('IP address of the syslog server.')
iesSysLogFacility = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 6, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3, 4, 5, 6, 7))).clone(namedValues=NamedValues(("local1", 1), ("local2", 2), ("local3", 3), ("local4", 4), ("local5", 5), ("local6", 6), ("local7", 7)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesSysLogFacility.setStatus('current')
if mibBuilder.loadTexts: iesSysLogFacility.setDescription('Log facility used by the syslog function.')
iesDhcpRelayEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 7, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesDhcpRelayEnable.setStatus('current')
if mibBuilder.loadTexts: iesDhcpRelayEnable.setDescription('Enable/disable DHCP relay function.')
iesDhcpRelayOption82Enable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 7, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesDhcpRelayOption82Enable.setStatus('current')
if mibBuilder.loadTexts: iesDhcpRelayOption82Enable.setDescription('Enable/disable DHCP relay Option82 function.')
iesDhcpRelayOption82Info = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 7, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesDhcpRelayOption82Info.setStatus('current')
if mibBuilder.loadTexts: iesDhcpRelayOption82Info.setDescription('User specific Option82 information.')
iesMaxNumOfDhcpServers = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 7, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMaxNumOfDhcpServers.setStatus('current')
if mibBuilder.loadTexts: iesMaxNumOfDhcpServers.setDescription('The maximum number of DHCP servers.')
iesDhcpServerTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 7, 5), )
if mibBuilder.loadTexts: iesDhcpServerTable.setStatus('current')
if mibBuilder.loadTexts: iesDhcpServerTable.setDescription('A table that contains DHCP server information.')
iesDhcpServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 7, 5, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesDhcpServerIp"))
if mibBuilder.loadTexts: iesDhcpServerEntry.setStatus('current')
if mibBuilder.loadTexts: iesDhcpServerEntry.setDescription('The entry of DHCP server table.')
iesDhcpServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 7, 5, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesDhcpServerIp.setStatus('current')
if mibBuilder.loadTexts: iesDhcpServerIp.setDescription('The IP address of the DHCP server.')
iesDhcpServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 7, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesDhcpServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: iesDhcpServerRowStatus.setDescription('The row status of the DHCP server entry.')
iesMaxNumberOfTrapDestinations = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 8, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMaxNumberOfTrapDestinations.setStatus('current')
if mibBuilder.loadTexts: iesMaxNumberOfTrapDestinations.setDescription('The max number of the trap destinations.')
iesSNMPTrapDestTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 8, 2), )
if mibBuilder.loadTexts: iesSNMPTrapDestTable.setStatus('current')
if mibBuilder.loadTexts: iesSNMPTrapDestTable.setDescription('A table that contains SNMP trap destination information.')
iesSNMPTrapDestEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 8, 2, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesTrapDestIp"), (0, "E5-111-IESCOMMON-MIB", "iesTrapDestPort"))
if mibBuilder.loadTexts: iesSNMPTrapDestEntry.setStatus('current')
if mibBuilder.loadTexts: iesSNMPTrapDestEntry.setDescription('The entry of SNMP trap destination table.')
iesTrapDestIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 8, 2, 1, 1), IpAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesTrapDestIp.setStatus('current')
if mibBuilder.loadTexts: iesTrapDestIp.setDescription('The IP address of the trap destination.')
iesTrapDestPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 8, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesTrapDestPort.setStatus('current')
if mibBuilder.loadTexts: iesTrapDestPort.setDescription('The UDP port of the trap destination.')
iesTrapDestRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 8, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesTrapDestRowStatus.setStatus('current')
if mibBuilder.loadTexts: iesTrapDestRowStatus.setDescription('The row status of the trap destination entry.')
iesSnmpGetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 8, 3), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesSnmpGetCommunity.setStatus('current')
if mibBuilder.loadTexts: iesSnmpGetCommunity.setDescription('The SNMP get community.')
iesSnmpSetCommunity = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 8, 4), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesSnmpSetCommunity.setStatus('current')
if mibBuilder.loadTexts: iesSnmpSetCommunity.setDescription('The SNMP set community.')
iesSnmpTrapCommunity = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 8, 5), DisplayString()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesSnmpTrapCommunity.setStatus('current')
if mibBuilder.loadTexts: iesSnmpTrapCommunity.setDescription('The SNMP trap community.')
iesMaxNumberOfRadiusServers = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMaxNumberOfRadiusServers.setStatus('current')
if mibBuilder.loadTexts: iesMaxNumberOfRadiusServers.setDescription('The max number of the RADIUS Servers.')
iesRadiusServerTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 2), )
if mibBuilder.loadTexts: iesRadiusServerTable.setStatus('current')
if mibBuilder.loadTexts: iesRadiusServerTable.setDescription('A table that contains Radius Server information.')
iesRadiusServerEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 2, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesRadiusServerIndex"))
if mibBuilder.loadTexts: iesRadiusServerEntry.setStatus('current')
if mibBuilder.loadTexts: iesRadiusServerEntry.setDescription('The entry of Radius Server table.')
iesRadiusServerIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 2, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesRadiusServerIndex.setStatus('current')
if mibBuilder.loadTexts: iesRadiusServerIndex.setDescription('The identity of the RADIUS server.')
iesRadiusServerIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 2, 1, 2), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesRadiusServerIp.setStatus('current')
if mibBuilder.loadTexts: iesRadiusServerIp.setDescription('The IP address of the Radius Server.')
iesRadiusServerPort = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 2, 1, 3), Integer32()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesRadiusServerPort.setStatus('current')
if mibBuilder.loadTexts: iesRadiusServerPort.setDescription('The UDP port of the Radius Server.')
iesRadiusSharedSecret = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 2, 1, 4), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesRadiusSharedSecret.setStatus('current')
if mibBuilder.loadTexts: iesRadiusSharedSecret.setDescription('The shared secret of the Radius Server.')
iesRadiusServerRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesRadiusServerRowStatus.setStatus('current')
if mibBuilder.loadTexts: iesRadiusServerRowStatus.setDescription('The row status of the Radius Server entry.')
iesDot1xEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesDot1xEnable.setStatus('current')
if mibBuilder.loadTexts: iesDot1xEnable.setDescription('Enable/disable the 802.1x function.')
iesDot1xPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 4), )
if mibBuilder.loadTexts: iesDot1xPortTable.setStatus('current')
if mibBuilder.loadTexts: iesDot1xPortTable.setDescription('This table includes the configuration of 802.1x.')
iesDot1xPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 4, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: iesDot1xPortEntry.setStatus('current')
if mibBuilder.loadTexts: iesDot1xPortEntry.setDescription('An entry in iesDot1xPortTable.')
iesDot1xPortEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 4, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesDot1xPortEnable.setStatus('current')
if mibBuilder.loadTexts: iesDot1xPortEnable.setDescription('The option defines if the port enables 802.1x settings.')
iesDot1xPortControl = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 4, 1, 2), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("auto", 1), ("forceAuth", 2), ("forceUnAuth", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesDot1xPortControl.setStatus('current')
if mibBuilder.loadTexts: iesDot1xPortControl.setDescription('The configuration defines the 802.1x port control type.')
iesDot1xPortReAuthEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 4, 1, 3), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("on", 1), ("off", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesDot1xPortReAuthEnable.setStatus('current')
if mibBuilder.loadTexts: iesDot1xPortReAuthEnable.setDescription('The option defines if the port enables 802.1x re-authentication.')
iesDot1xPortReAuthPeriod = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 9, 4, 1, 4), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesDot1xPortReAuthPeriod.setStatus('current')
if mibBuilder.loadTexts: iesDot1xPortReAuthPeriod.setDescription('The configuration defines the 802.1x re-authentication period (seconds) for each port.')
iesMacFilterStatusTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 10, 1), )
if mibBuilder.loadTexts: iesMacFilterStatusTable.setStatus('current')
if mibBuilder.loadTexts: iesMacFilterStatusTable.setDescription('This table includes the status of mac filtering for each port.')
iesMacFilterStatusEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 10, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: iesMacFilterStatusEntry.setStatus('current')
if mibBuilder.loadTexts: iesMacFilterStatusEntry.setDescription('An entry in iesMacFilterStatusTable.')
iesMacFilterStatusEnable = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 10, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2, 3))).clone(namedValues=NamedValues(("enableAccept", 1), ("disable", 2), ("enableDeny", 3)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMacFilterStatusEnable.setStatus('current')
if mibBuilder.loadTexts: iesMacFilterStatusEnable.setDescription('The option defines if the port enables mac filtering.')
iesMaxNumberOfMacFilters = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 10, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMaxNumberOfMacFilters.setStatus('current')
if mibBuilder.loadTexts: iesMaxNumberOfMacFilters.setDescription('The max number of the mac filters in the system.')
iesMaxNumberOfMacFiltersPerPort = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 10, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMaxNumberOfMacFiltersPerPort.setStatus('current')
if mibBuilder.loadTexts: iesMaxNumberOfMacFiltersPerPort.setDescription('The max number of the mac filters for each port.')
iesCurrNumberOfMacFilters = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 10, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesCurrNumberOfMacFilters.setStatus('current')
if mibBuilder.loadTexts: iesCurrNumberOfMacFilters.setDescription('The current number of the mac filters in the system.')
iesMacFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 10, 5), )
if mibBuilder.loadTexts: iesMacFilterTable.setStatus('current')
if mibBuilder.loadTexts: iesMacFilterTable.setDescription('A table that contains the mac filtering information.')
iesMacFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 10, 5, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"), (0, "E5-111-IESCOMMON-MIB", "iesMacFilterMacAddr"))
if mibBuilder.loadTexts: iesMacFilterEntry.setStatus('current')
if mibBuilder.loadTexts: iesMacFilterEntry.setDescription('The entry of iesMacFilterTable.')
iesMacFilterMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 10, 5, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMacFilterMacAddr.setStatus('current')
if mibBuilder.loadTexts: iesMacFilterMacAddr.setDescription('The mac address which can pass through the port.')
iesMacFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 10, 5, 1, 2), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesMacFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: iesMacFilterRowStatus.setDescription('The row status of the entry.')
iesPacketFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 11, 1), )
if mibBuilder.loadTexts: iesPacketFilterTable.setStatus('current')
if mibBuilder.loadTexts: iesPacketFilterTable.setDescription('This table includes packet filtering for each port.')
iesPacketFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 11, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: iesPacketFilterEntry.setStatus('current')
if mibBuilder.loadTexts: iesPacketFilterEntry.setDescription('An entry in iesPacketFilterTable.')
iesPacketFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 11, 1, 1, 1), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesPacketFilter.setStatus('current')
if mibBuilder.loadTexts: iesPacketFilter.setDescription('The packet filter. The semantic for each bit is: Bit 1: accept all Bit 2: accept PPPoE only Bit 3: reject ARP Bit 4: reject DHCP Bit 5: reject EAPOL Bit 6: reject PPPoE Bit 7: reject NetBIOS Bit 8: reject IGMP Bit 9: reject IP')
iesMacCountFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 12, 1), )
if mibBuilder.loadTexts: iesMacCountFilterTable.setStatus('current')
if mibBuilder.loadTexts: iesMacCountFilterTable.setDescription('This table includes mac count filtering for each port.')
iesMacCountFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 12, 1, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: iesMacCountFilterEntry.setStatus('current')
if mibBuilder.loadTexts: iesMacCountFilterEntry.setDescription('An entry in iesMacCountFilterTable.')
iesMacCountFilterStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 12, 1, 1, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMacCountFilterStatus.setStatus('current')
if mibBuilder.loadTexts: iesMacCountFilterStatus.setDescription('The option defines if the port enables mac count filtering.')
iesMacCountFilterCount = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 12, 1, 1, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesMacCountFilterCount.setStatus('current')
if mibBuilder.loadTexts: iesMacCountFilterCount.setDescription('The number of mac addresses which can pass through the port.')
iesMaxNumberOfMulticastGroups = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 13, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMaxNumberOfMulticastGroups.setStatus('current')
if mibBuilder.loadTexts: iesMaxNumberOfMulticastGroups.setDescription('The max number of static multicast groups in the system.')
iesMulticastGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 13, 2), )
if mibBuilder.loadTexts: iesMulticastGroupTable.setStatus('current')
if mibBuilder.loadTexts: iesMulticastGroupTable.setDescription('A table that contains static multicast group information.')
iesMulticastGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 13, 2, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesMulticastGroupMacAddr"))
if mibBuilder.loadTexts: iesMulticastGroupEntry.setStatus('current')
if mibBuilder.loadTexts: iesMulticastGroupEntry.setDescription('The entry of multicast group table.')
iesMulticastGroupMacAddr = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 13, 2, 1, 1), PhysAddress()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMulticastGroupMacAddr.setStatus('current')
if mibBuilder.loadTexts: iesMulticastGroupMacAddr.setDescription('The multicast MAC address of the group.')
iesMulticastGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 13, 2, 1, 2), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesMulticastGroupPorts.setStatus('current')
if mibBuilder.loadTexts: iesMulticastGroupPorts.setDescription('The port list which specifies the ports joining the multicast group.')
iesMulticastGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 13, 2, 1, 3), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesMulticastGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: iesMulticastGroupRowStatus.setDescription('The row status of the multicast group entry.')
iesMaxNumberOfIgmpFilters = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 14, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMaxNumberOfIgmpFilters.setStatus('current')
if mibBuilder.loadTexts: iesMaxNumberOfIgmpFilters.setDescription('The max number of IGMP filters in the system.')
iesIgmpFilterTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 14, 2), )
if mibBuilder.loadTexts: iesIgmpFilterTable.setStatus('current')
if mibBuilder.loadTexts: iesIgmpFilterTable.setDescription('A table that contains IGMP filters.')
iesIgmpFilterEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 14, 2, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesIgmpFilterName"), (0, "E5-111-IESCOMMON-MIB", "iesIgmpFilterIndex"))
if mibBuilder.loadTexts: iesIgmpFilterEntry.setStatus('current')
if mibBuilder.loadTexts: iesIgmpFilterEntry.setDescription('The entry of IGMP filter table.')
iesIgmpFilterName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 14, 2, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIgmpFilterName.setStatus('current')
if mibBuilder.loadTexts: iesIgmpFilterName.setDescription('The IGMP filter name.')
iesIgmpFilterIndex = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 14, 2, 1, 2), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesIgmpFilterIndex.setStatus('current')
if mibBuilder.loadTexts: iesIgmpFilterIndex.setDescription('The index which specifies the filter rule.')
iesIgmpFilterStartIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 14, 2, 1, 3), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIgmpFilterStartIp.setStatus('current')
if mibBuilder.loadTexts: iesIgmpFilterStartIp.setDescription('The start IP of the filter rule.')
iesIgmpFilterEndIp = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 14, 2, 1, 4), IpAddress()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIgmpFilterEndIp.setStatus('current')
if mibBuilder.loadTexts: iesIgmpFilterEndIp.setDescription('The end IP of the filter rule.')
iesIgmpFilterRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 14, 2, 1, 5), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesIgmpFilterRowStatus.setStatus('current')
if mibBuilder.loadTexts: iesIgmpFilterRowStatus.setDescription('The row status of the IGMP filter entry.')
iesIgmpFilterPortTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 14, 3), )
if mibBuilder.loadTexts: iesIgmpFilterPortTable.setStatus('current')
if mibBuilder.loadTexts: iesIgmpFilterPortTable.setDescription('This table specifies the IGMP filter of the port.')
iesIgmpFilterPortEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 14, 3, 1), ).setIndexNames((0, "IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: iesIgmpFilterPortEntry.setStatus('current')
if mibBuilder.loadTexts: iesIgmpFilterPortEntry.setDescription('An entry in iesIgmpFilterPortTable.')
iesIgmpFilterPortFilter = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 3, 14, 3, 1, 1), OctetString().subtype(subtypeSpec=ValueSizeConstraint(1, 31))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesIgmpFilterPortFilter.setStatus('current')
if mibBuilder.loadTexts: iesIgmpFilterPortFilter.setDescription('The IGMP filter of the port.')
iesIGMPSnoopingEnabled = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 4, 1), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("true", 1), ("false", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesIGMPSnoopingEnabled.setStatus('current')
if mibBuilder.loadTexts: iesIGMPSnoopingEnabled.setDescription('A flag indicating whether IGMP snooping function is enabled or not.')
iesManagementVLANId = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 4, 2), Integer32()).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesManagementVLANId.setStatus('current')
if mibBuilder.loadTexts: iesManagementVLANId.setDescription('The VLAN ID for management.')
iesMaxNumOfStaticVlans = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 4, 3), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMaxNumOfStaticVlans.setStatus('current')
if mibBuilder.loadTexts: iesMaxNumOfStaticVlans.setDescription('The maximum number of static VLANs supported by the system.')
iesPortIsolationEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 4, 6), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesPortIsolationEnable.setStatus('current')
if mibBuilder.loadTexts: iesPortIsolationEnable.setDescription('A flag indicating whether VLAN port isolation function is enabled or not.')
iesRSTPEnable = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 4, 7), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("enable", 1), ("disable", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesRSTPEnable.setStatus('current')
if mibBuilder.loadTexts: iesRSTPEnable.setDescription('Enable/Disable RSTP.')
iesSwitchMode = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 4, 8), Integer32().subtype(subtypeSpec=ConstraintsUnion(SingleValueConstraint(1, 2))).clone(namedValues=NamedValues(("daisyChain", 1), ("standalone", 2)))).setMaxAccess("readwrite")
if mibBuilder.loadTexts: iesSwitchMode.setStatus('current')
if mibBuilder.loadTexts: iesSwitchMode.setDescription("Switch DSLAM's operatrion Mode.")
iesMaxNumOfTrunkGroups = MibScalar((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 4, 4), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesMaxNumOfTrunkGroups.setStatus('current')
if mibBuilder.loadTexts: iesMaxNumOfTrunkGroups.setDescription('The maximum number of trunk groups.')
iesTrunkGroupTable = MibTable((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 4, 5), )
if mibBuilder.loadTexts: iesTrunkGroupTable.setStatus('current')
if mibBuilder.loadTexts: iesTrunkGroupTable.setDescription('A table that contains trunk group configuration.')
iesTrunkGroupEntry = MibTableRow((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 4, 5, 1), ).setIndexNames((0, "E5-111-IESCOMMON-MIB", "iesTrunkGroupId"))
if mibBuilder.loadTexts: iesTrunkGroupEntry.setStatus('current')
if mibBuilder.loadTexts: iesTrunkGroupEntry.setDescription('The entry of trunk group table')
iesTrunkGroupId = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 4, 5, 1, 1), Integer32()).setMaxAccess("readonly")
if mibBuilder.loadTexts: iesTrunkGroupId.setStatus('current')
if mibBuilder.loadTexts: iesTrunkGroupId.setDescription('The ID of the trunk group')
iesTrunkGroupName = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 4, 5, 1, 2), DisplayString()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesTrunkGroupName.setStatus('current')
if mibBuilder.loadTexts: iesTrunkGroupName.setDescription('The name of the trunk group')
iesTrunkGroupPorts = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 4, 5, 1, 3), PortList()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesTrunkGroupPorts.setStatus('current')
if mibBuilder.loadTexts: iesTrunkGroupPorts.setDescription('The port list of the trunk group')
iesTrunkGroupRowStatus = MibTableColumn((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2, 98, 4, 5, 1, 4), RowStatus()).setMaxAccess("readcreate")
if mibBuilder.loadTexts: iesTrunkGroupRowStatus.setStatus('current')
if mibBuilder.loadTexts: iesTrunkGroupRowStatus.setDescription('The row status of the trunk group entry')
reboot = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,1)).setObjects(("E5-111-IESCOMMON-MIB", "iesProblemCause"))
if mibBuilder.loadTexts: reboot.setDescription('Send a message to the manager that the system is going to reboot. The variable is the reason why the system reboots.')
systemShutdown = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,2)).setObjects(("E5-111-IESCOMMON-MIB", "iesProblemCause"))
if mibBuilder.loadTexts: systemShutdown.setDescription('Send a message to the manager that the system is going to shutdown. The variable is the reason that causes the system to shutdown.')
overheat = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,3)).setObjects(("E5-111-IESCOMMON-MIB", "iesChassisId"), ("E5-111-IESCOMMON-MIB", "iesSlotId"), ("E5-111-IESCOMMON-MIB", "iesSysTempIndex"), ("E5-111-IESCOMMON-MIB", "iesSysTempCurValue"))
if mibBuilder.loadTexts: overheat.setDescription('Send a message to the manager that the system is overheated. The variable in the binding list is the current temperature in Celsius of the system.')
overheatOver = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,4)).setObjects(("E5-111-IESCOMMON-MIB", "iesChassisId"), ("E5-111-IESCOMMON-MIB", "iesSlotId"), ("E5-111-IESCOMMON-MIB", "iesSysTempIndex"), ("E5-111-IESCOMMON-MIB", "iesSysTempCurValue"))
if mibBuilder.loadTexts: overheatOver.setDescription('Send a message to the manager that the overheated condition is over. The variable in the binding list is the current temperature in Celsius of the system.')
errLog = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,5)).setObjects(("E5-111-IESCOMMON-MIB", "iesProblemCause"))
if mibBuilder.loadTexts: errLog.setDescription('Send a message to the manager that an error log is created in system. The variable in the binding list is the content of the error log.')
fanRpmLow = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,6)).setObjects(("E5-111-IESCOMMON-MIB", "iesChassisId"), ("E5-111-IESCOMMON-MIB", "iesFanRpmIndex"), ("E5-111-IESCOMMON-MIB", "iesFanRpmCurValue"))
if mibBuilder.loadTexts: fanRpmLow.setDescription('Send a message to the manager that the rpm of the fan is too low. The variable in the binding list is the current rpm of the fan.')
fanRpmNormal = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,7)).setObjects(("E5-111-IESCOMMON-MIB", "iesChassisId"), ("E5-111-IESCOMMON-MIB", "iesFanRpmIndex"), ("E5-111-IESCOMMON-MIB", "iesFanRpmCurValue"))
if mibBuilder.loadTexts: fanRpmNormal.setDescription('Send a message to the manager that the low-rpm condition of the fan is over. The variable in the binding list is the current rpm of the fan.')
voltageOutOfRange = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,8)).setObjects(("E5-111-IESCOMMON-MIB", "iesChassisId"), ("E5-111-IESCOMMON-MIB", "iesSlotId"), ("E5-111-IESCOMMON-MIB", "iesVoltageIndex"), ("E5-111-IESCOMMON-MIB", "iesVoltageCurValue"))
if mibBuilder.loadTexts: voltageOutOfRange.setDescription('Send a message to the manager that the voltage of the system is out of range. The variable in the binding list is the current voltage in volt of the system.')
voltageNormal = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,9)).setObjects(("E5-111-IESCOMMON-MIB", "iesChassisId"), ("E5-111-IESCOMMON-MIB", "iesSlotId"), ("E5-111-IESCOMMON-MIB", "iesVoltageIndex"), ("E5-111-IESCOMMON-MIB", "iesVoltageCurValue"))
if mibBuilder.loadTexts: voltageNormal.setDescription('Send a message to the manager that the low-voltage condition is over. The variable in the binding list is the current voltage in volt of the system.')
systemMaintenanceFailure = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,10)).setObjects(("E5-111-IESCOMMON-MIB", "iesChassisId"), ("E5-111-IESCOMMON-MIB", "iesSlotId"), ("E5-111-IESCOMMON-MIB", "iesProblemCause"))
if mibBuilder.loadTexts: systemMaintenanceFailure.setDescription('Send a message to the manager that the system maintence operation fail. The variable in the variable binding indicates the problem.')
configChange = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,11)).setObjects(("E5-111-IESCOMMON-MIB", "iesChassisId"), ("E5-111-IESCOMMON-MIB", "iesSlotId"), ("E5-111-IESCOMMON-MIB", "iesProblemCause"))
if mibBuilder.loadTexts: configChange.setDescription('This notification indicates that the configuration data of one module is changed.')
moduleUp = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,12)).setObjects(("E5-111-IESCOMMON-MIB", "iesChassisId"), ("E5-111-IESCOMMON-MIB", "iesSlotId"))
if mibBuilder.loadTexts: moduleUp.setDescription("A moduleUp trap signifies that the sending protocol entity recognizes that one of the modules represented in the agent's configuration has come up.")
moduleDown = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,13)).setObjects(("E5-111-IESCOMMON-MIB", "iesChassisId"), ("E5-111-IESCOMMON-MIB", "iesSlotId"))
if mibBuilder.loadTexts: moduleDown.setDescription("A moduleDown trap signifies that the sending protocol entity recognizes a failure in one of the modules represented in the agent's configuration.")
modulePlugIn = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,14)).setObjects(("E5-111-IESCOMMON-MIB", "iesChassisId"), ("E5-111-IESCOMMON-MIB", "iesSlotId"))
if mibBuilder.loadTexts: modulePlugIn.setDescription('A modulePlugIn trap signifies that the sending protocol entity recognizes that one module is plugged into the device.')
modulePullOut = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,15)).setObjects(("E5-111-IESCOMMON-MIB", "iesChassisId"), ("E5-111-IESCOMMON-MIB", "iesSlotId"))
if mibBuilder.loadTexts: modulePullOut.setDescription('A modulePullOut trap signifies that the sending protocol entity recognizes one module is pulled out from the device.')
powerDC48VAFailure = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,16))
if mibBuilder.loadTexts: powerDC48VAFailure.setDescription('The trap signifies that the power supply of DC 48V at the right side of main Chassis (front view) failed.')
powerDC48VANormal = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,17))
if mibBuilder.loadTexts: powerDC48VANormal.setDescription('The trap signifies that the power supply of DC 48V at the right side of main Chassis (front view) is in normal state.')
powerDC48VBFailure = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,18))
if mibBuilder.loadTexts: powerDC48VBFailure.setDescription('The trap signifies that the power supply of DC 48V at the left side of main Chassis (front view) failed.')
powerDC48VBNormal = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,19))
if mibBuilder.loadTexts: powerDC48VBNormal.setDescription('The trap signifies that the power supply of DC 48V at the left side of main Chassis (front view) is in normal state.')
extAlarmInputTrigger = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,20))
if mibBuilder.loadTexts: extAlarmInputTrigger.setDescription('The trap signifies that the external alarm input of MSC card is triggered.')
extAlarmInputRelease = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,21))
if mibBuilder.loadTexts: extAlarmInputRelease.setDescription('The trap signifies that the external alarm input of MSC card is released.')
thermalSensorFailure = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,22)).setObjects(("E5-111-IESCOMMON-MIB", "iesChassisId"), ("E5-111-IESCOMMON-MIB", "iesSlotId"))
if mibBuilder.loadTexts: thermalSensorFailure.setDescription('The trap signifies that the thermal sensor failed.')
mscSwitchOverOK = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,23)).setObjects(("E5-111-IESCOMMON-MIB", "iesChassisId"), ("E5-111-IESCOMMON-MIB", "iesSlotId"))
if mibBuilder.loadTexts: mscSwitchOverOK.setDescription('The trap signifies that MSC card is switched over successfully. The value of iesSlotId is the slot ID of the current working MSC.')
networkTopologyChange = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,24))
if mibBuilder.loadTexts: networkTopologyChange.setDescription('The trap signifies the network topology is changed.')
adslAtucLof = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,25)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAtucLof.setDescription('The trap signifies ATU-C Loss of Framing.')
adslAturLof = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,26)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAturLof.setDescription('The trap signifies ATU-R Loss of Framing.')
adslAtucLos = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,27)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAtucLos.setDescription('The trap signifies ATU-C Loss of Signal.')
adslAturLos = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,28)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAturLos.setDescription('The trap signifies ATU-R Loss of Signal.')
adslAturLpr = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,29)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAturLpr.setDescription('The trap signifies ATU-R Loss of Power.')
adslAtucLofClear = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,30)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAtucLofClear.setDescription('The trap signifies ATU-C Loss of Framing is cleared.')
adslAturLofClear = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,31)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAturLofClear.setDescription('The trap signifies ATU-R Loss of Framing is cleared.')
adslAtucLosClear = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,32)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAtucLosClear.setDescription('The trap signifies ATU-C Loss of Signal is cleared.')
adslAturLosClear = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,33)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAturLosClear.setDescription('The trap signifies ATU-R Loss of Signal is cleared.')
adslAturLprClear = NotificationType((1, 3, 6, 1, 4, 1, 6321, 1, 2, 3, 2) + (0,34)).setObjects(("IF-MIB", "ifIndex"))
if mibBuilder.loadTexts: adslAturLprClear.setDescription('The trap signifies ATU-R Loss of Power is cleared.')
mibBuilder.exportSymbols("E5-111-IESCOMMON-MIB", adslAtucLof=adslAtucLof, iesIgmpFilterPortTable=iesIgmpFilterPortTable, iesMaintenanceDSLConfDot1xControl=iesMaintenanceDSLConfDot1xControl, iesFanRpmMaxValue=iesFanRpmMaxValue, overheat=overheat, iesSlotModuleFWVersion=iesSlotModuleFWVersion, iesSecuredClientEntry=iesSecuredClientEntry, iesMaxNumOfStaticRoutes=iesMaxNumOfStaticRoutes, errLog=errLog, iesMaintenanceDSLConfPmMode=iesMaintenanceDSLConfPmMode, voltageOutOfRange=voltageOutOfRange, iesSecuredClientEndIp=iesSecuredClientEndIp, iesDhcpServerEntry=iesDhcpServerEntry, iesRSTPEnable=iesRSTPEnable, iesMaintenanceDSLConfTarget=iesMaintenanceDSLConfTarget, iesMscPortMode=iesMscPortMode, iesChassisEntry=iesChassisEntry, iesMaintenanceVci=iesMaintenanceVci, iesMscPortDefaultVLANTagging=iesMscPortDefaultVLANTagging, iesSecuredClientTable=iesSecuredClientTable, iesDot1xPortEntry=iesDot1xPortEntry, iesMaintenanceDSLConfRateMode=iesMaintenanceDSLConfRateMode, extAlarmInputRelease=extAlarmInputRelease, iesSlotEntry=iesSlotEntry, iesFanRpmMinValue=iesFanRpmMinValue, iesRadiusServerIp=iesRadiusServerIp, iesSysDot1xSetup=iesSysDot1xSetup, iesSysMgnt=iesSysMgnt, iesMscPortVLANTrunking=iesMscPortVLANTrunking, iesSystemTimeZone=iesSystemTimeZone, iesMaxNumOfStaticVlans=iesMaxNumOfStaticVlans, adslAturLof=adslAturLof, iesMacCountFilterCount=iesMacCountFilterCount, iesSysIgmpFilter=iesSysIgmpFilter, iesPacketFilterEntry=iesPacketFilterEntry, iesChassisHwRevisionNumber=iesChassisHwRevisionNumber, iesMaintenanceDSLConfIgmpFilter=iesMaintenanceDSLConfIgmpFilter, iesVoltageDescr=iesVoltageDescr, iesChassisStatus=iesChassisStatus, iesChassisCodecVersion=iesChassisCodecVersion, iesMaintenanceTarget=iesMaintenanceTarget, iesAccessCtrlTable=iesAccessCtrlTable, iesChassisTable=iesChassisTable, iesTimeServerMode=iesTimeServerMode, iesMaintenanceDSLConfAlarmProfileName=iesMaintenanceDSLConfAlarmProfileName, iesFanRpmTable=iesFanRpmTable, iesAccessCtrlEntry=iesAccessCtrlEntry, iesSysMacFilter=iesSysMacFilter, iesChassisId=iesChassisId, iesSysTempMinValue=iesSysTempMinValue, iesChassisNumber=iesChassisNumber, iesSlotModuleModemCodeVersion=iesSlotModuleModemCodeVersion, iesMacFilterStatusEnable=iesMacFilterStatusEnable, reboot=reboot, iesStaticRouteMetric=iesStaticRouteMetric, adslAtucLosClear=adslAtucLosClear, iesSysAccessControl=iesSysAccessControl, iesSlotTable=iesSlotTable, iesSysTempDescr=iesSysTempDescr, iesChassisCleiCode=iesChassisCleiCode, iesRadiusServerIndex=iesRadiusServerIndex, iesL2SW=iesL2SW, iesSysDhcpSetup=iesSysDhcpSetup, iesMulticastGroupRowStatus=iesMulticastGroupRowStatus, iesSysTempTable=iesSysTempTable, iesTrapDestIp=iesTrapDestIp, iesSnmpSetCommunity=iesSnmpSetCommunity, iesTrunkGroupPorts=iesTrunkGroupPorts, iesMacFilterMacAddr=iesMacFilterMacAddr, iesSysTempMaxValue=iesSysTempMaxValue, iesIgmpFilterRowStatus=iesIgmpFilterRowStatus, iesChassisProductPartNumber=iesChassisProductPartNumber, iesMaintenanceDSLConfPktFilter=iesMaintenanceDSLConfPktFilter, iesSysSNMPSetup=iesSysSNMPSetup, iesDhcpRelayEnable=iesDhcpRelayEnable, iesSysTimeSetup=iesSysTimeSetup, systemShutdown=systemShutdown, iesSyslogSetup=iesSyslogSetup, iesSecuredClientRowStatus=iesSecuredClientRowStatus, iesSystemTime=iesSystemTime, iesSnmpGetCommunity=iesSnmpGetCommunity, iesSysMacCountFilter=iesSysMacCountFilter, iesVoltageEntry=iesVoltageEntry, iesRadiusSharedSecret=iesRadiusSharedSecret, iesMaxNumberOfMacFiltersPerPort=iesMaxNumberOfMacFiltersPerPort, powerDC48VBFailure=powerDC48VBFailure, iesAccessCtrlService=iesAccessCtrlService, iesMacFilterStatusTable=iesMacFilterStatusTable, adslAturLofClear=adslAturLofClear, iesMacCountFilterStatus=iesMacCountFilterStatus, iesMaintenanceDSLConfOps=iesMaintenanceDSLConfOps, iesSlotModuleDescr=iesSlotModuleDescr, iesVoltageLowThresh=iesVoltageLowThresh, iesSysPacketFilter=iesSysPacketFilter, iesMacFilterTable=iesMacFilterTable, iesSysLogEnable=iesSysLogEnable, iesIGMPSnoopingEnabled=iesIGMPSnoopingEnabled, iesDot1xPortReAuthPeriod=iesDot1xPortReAuthPeriod, iesVoltageNominalValue=iesVoltageNominalValue, iesSysTempEntry=iesSysTempEntry, iesSysTempIndex=iesSysTempIndex, fanRpmLow=fanRpmLow, iesMscPortDuplex=iesMscPortDuplex, iesMaxNumberOfIgmpFilters=iesMaxNumberOfIgmpFilters, iesMscPortFlowControl=iesMscPortFlowControl, iesStaticRouteTable=iesStaticRouteTable, iesMulticastGroupTable=iesMulticastGroupTable, iesDhcpServerRowStatus=iesDhcpServerRowStatus, iesSlotModuleAlarmStatus=iesSlotModuleAlarmStatus, iesMaintenanceDSLConfMacCount=iesMaintenanceDSLConfMacCount, iesSysMulticastGroup=iesSysMulticastGroup, iesPacketFilter=iesPacketFilter, iesCurrNumberOfMacFilters=iesCurrNumberOfMacFilters, iesSysTempCurValue=iesSysTempCurValue, iesTrunkGroupId=iesTrunkGroupId, iesMaxNumberOfRadiusServers=iesMaxNumberOfRadiusServers, iesSystemDate=iesSystemDate, iesSNMPTrapDestEntry=iesSNMPTrapDestEntry, iesMacFilterEntry=iesMacFilterEntry, iesTrapDestRowStatus=iesTrapDestRowStatus, iesChassisHwVersion=iesChassisHwVersion, iesSwitchMode=iesSwitchMode, iesMscPortTrunkGroupId=iesMscPortTrunkGroupId, iesAccessCtrlPort=iesAccessCtrlPort, iesDot1xPortTable=iesDot1xPortTable, iesMaxNumberOfMacFilters=iesMaxNumberOfMacFilters, iesSysMaintenance=iesSysMaintenance, iesSysLogServer=iesSysLogServer, iesMacFilterRowStatus=iesMacFilterRowStatus, iesMaintenanceDSLConfProfileName=iesMaintenanceDSLConfProfileName, iesVoltageIndex=iesVoltageIndex, moduleUp=moduleUp, iesSnmpTrapCommunity=iesSnmpTrapCommunity, iesMulticastGroupPorts=iesMulticastGroupPorts, iesMaxNumberOfMulticastGroups=iesMaxNumberOfMulticastGroups, iesFanRpmDescr=iesFanRpmDescr, iesChassis=iesChassis, iesStaticRouteDest=iesStaticRouteDest, iesStaticRouteEntry=iesStaticRouteEntry, iesMulticastGroupEntry=iesMulticastGroupEntry, iesTrunkGroupRowStatus=iesTrunkGroupRowStatus, iesMscPortIfIndex=iesMscPortIfIndex, iesIgmpFilterName=iesIgmpFilterName, powerDC48VBNormal=powerDC48VBNormal, iesPortIsolationEnable=iesPortIsolationEnable, iesStaticRouteGateway=iesStaticRouteGateway, iesMaintenanceVpi=iesMaintenanceVpi, iesMacCountFilterEntry=iesMacCountFilterEntry, modulePullOut=modulePullOut, iesNumOfChassis=iesNumOfChassis, iesIgmpFilterPortFilter=iesIgmpFilterPortFilter, iesDhcpServerTable=iesDhcpServerTable, iesMscPortConfTable=iesMscPortConfTable, iesChassisMacAddress=iesChassisMacAddress, adslAturLpr=adslAturLpr, iesSysLogFacility=iesSysLogFacility, iesMaintenanceDSLConfMode=iesMaintenanceDSLConfMode, iesDot1xPortReAuthEnable=iesDot1xPortReAuthEnable, iesTimeServerIP=iesTimeServerIP, iesDhcpRelayOption82Enable=iesDhcpRelayOption82Enable, iesMscPortSpeed=iesMscPortSpeed, iesStaticRouteRowStatus=iesStaticRouteRowStatus, mscSwitchOverOK=mscSwitchOverOK, iesSlotModuleStatus=iesSlotModuleStatus, iesDhcpRelayOption82Info=iesDhcpRelayOption82Info, systemMaintenanceFailure=systemMaintenanceFailure, networkTopologyChange=networkTopologyChange, iesMscPortConfEntry=iesMscPortConfEntry, iesStaticRouteMask=iesStaticRouteMask, iesSysState=iesSysState, iesMaxNumOfTrunkGroups=iesMaxNumOfTrunkGroups, iesIgmpFilterEndIp=iesIgmpFilterEndIp, iesIgmpFilterPortEntry=iesIgmpFilterPortEntry, iesTrunkGroupEntry=iesTrunkGroupEntry, moduleDown=moduleDown, iesProblemCause=iesProblemCause, iesMacCountFilterTable=iesMacCountFilterTable, iesSlotModuleDriverVersion=iesSlotModuleDriverVersion, modulePlugIn=modulePlugIn, iesMaintenanceDSLConfDot1xReauthPeriod=iesMaintenanceDSLConfDot1xReauthPeriod, iesDot1xPortEnable=iesDot1xPortEnable, iesPacketFilterTable=iesPacketFilterTable, adslAturLprClear=adslAturLprClear, iesAccessCtrlEnable=iesAccessCtrlEnable, iesSysStaticRoute=iesSysStaticRoute, iesTrunkGroupTable=iesTrunkGroupTable, iesHWMonitor=iesHWMonitor, iesVoltageMinValue=iesVoltageMinValue, iesMacFilterStatusEntry=iesMacFilterStatusEntry, iesChassisSerialNumber=iesChassisSerialNumber, iesIgmpFilterEntry=iesIgmpFilterEntry, iesMaxNumberOfTrapDestinations=iesMaxNumberOfTrapDestinations, iesVoltageTable=iesVoltageTable, iesDhcpServerIp=iesDhcpServerIp, iesRadiusServerRowStatus=iesRadiusServerRowStatus, iesIgmpFilterStartIp=iesIgmpFilterStartIp, voltageNormal=voltageNormal, iesMaxNumOfDhcpServers=iesMaxNumOfDhcpServers, adslAturLosClear=adslAturLosClear, thermalSensorFailure=thermalSensorFailure, iesSysTempHighThresh=iesSysTempHighThresh, adslAtucLos=adslAtucLos, configChange=configChange, iesSlotModuleType=iesSlotModuleType, iesMscPortType=iesMscPortType, iesDot1xPortControl=iesDot1xPortControl, iesSlotId=iesSlotId, iesSecuredClientStartIp=iesSecuredClientStartIp, adslAturLos=adslAturLos, iesVoltageCurValue=iesVoltageCurValue, powerDC48VANormal=powerDC48VANormal, iesRadiusServerTable=iesRadiusServerTable, fanRpmNormal=fanRpmNormal, adslAtucLofClear=adslAtucLofClear, iesIgmpFilterTable=iesIgmpFilterTable, extAlarmInputTrigger=extAlarmInputTrigger, iesFanRpmIndex=iesFanRpmIndex, overheatOver=overheatOver, iesVoltageMaxValue=iesVoltageMaxValue, iesRadiusServerPort=iesRadiusServerPort, iesMaintenanceOps=iesMaintenanceOps, iesSNMPTrapDestTable=iesSNMPTrapDestTable, iesIgmpFilterIndex=iesIgmpFilterIndex, iesMscPortId=iesMscPortId, iesSystemCurrentStatus=iesSystemCurrentStatus, iesSecuredClientService=iesSecuredClientService, iesTrunkGroupName=iesTrunkGroupName, iesChassisVoipDspVersion=iesChassisVoipDspVersion, iesManagementVLANId=iesManagementVLANId, iesMaxNumOfSecuredClients=iesMaxNumOfSecuredClients, iesDot1xEnable=iesDot1xEnable, iesStaticRouteName=iesStaticRouteName, iesChassisFrameNumber=iesChassisFrameNumber, iesFanRpmEntry=iesFanRpmEntry, iesMulticastGroupMacAddr=iesMulticastGroupMacAddr, iesTrapDestPort=iesTrapDestPort, iesFanRpmLowThresh=iesFanRpmLowThresh, powerDC48VAFailure=powerDC48VAFailure, iesMaintenanceDSLConfAnnexL=iesMaintenanceDSLConfAnnexL, iesFanRpmCurValue=iesFanRpmCurValue, iesRadiusServerEntry=iesRadiusServerEntry)
